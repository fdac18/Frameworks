[{"title": "reacttestutilsrenderintodocument resources clean documentation", "body": "want request feature report bug featuredocumentation current behavior almost none documentation actually use method ca nt find find answers questions website know facebook either render component dom test destroyed clean tools use get container pass additional component trees like popovers best ways test nt parts left component unmounted current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior nice see information people met memory leaks tests also help establish good practices writing tests versions react browser os affected issue work previous versions react", "num": "10330", "d": "7/2017"}, {"title": "invariant messages nt extracted", "body": "sure see messages beta bundles like understand", "num": "10328", "d": "7/2017"}, {"title": "prevent extension synthetic event", "body": "based discussion support putting custom data synthetic events maybe make clearer", "num": "10327", "d": "7/2017"}, {"title": "dynamic create child element classname update correct", "body": "code like var myapp reactcreateclass getinitialstate function return ch b c onclick function thissetstate ch c function thisrefsaclassnamewuwu thisrefsavalue render function return thisstatechmap function obj index consolelog haha wuwu return reactdomrender documentgetelementbyid main first click change button change second child classname click redux button formitem one child classname must haha classname think may bug vdomrender fix problem", "num": "10326", "d": "7/2017"}, {"title": "exportimport components state components", "body": "hello yrs old new react native trying export component interact another component exactly sytanx according rules also want share state component another export component well thanks", "num": "10325", "d": "7/2017"}, {"title": "documentation add version information", "body": "please list need node gt machine description npm install g createreactapp creating new application document want know required version running command", "num": "10324", "d": "7/2017"}, {"title": "documentation improve tutorial example code write", "body": "tried tutorial delete files src folder new project think good example code example misunderstanding remove src directory thank", "num": "10323", "d": "7/2017"}, {"title": "custom field event cleaned", "body": "want request feature report bug bug current behavior custom field event clean data appear event fired current behavior bug please provide steps reproduce possible minimal demo problem via similar template current behaviour reload click yellow area alert hello click green area alert hello reload click green area alert undefined expected behavior expect clicking yellow area always alert hello clicking green area always alert undefined versions react browser os affected issue work previous versions react got problem sure affect earlier version", "num": "10322", "d": "7/2017"}, {"title": "error null captured error warning due crossorigin issues", "body": "three points discussion due environments like codesandbox show react caught error warning let consider skipping useful look like bug looks like separate error draws attention away real error case probably print js stack related issue pass error boundary caught seems error boundaries intuitively something like read break falsy values like proposal always wrap primitives objects pass boundary", "num": "10321", "d": "7/2017"}, {"title": "uncaught typeerror thisupdaterenqueuecallback function using setstate callback", "body": "want request feature report bug bug beta version current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template component used pretty simple piece code js dosomemore gt stuff dosomething value gt thissetstate value thisdosomemore firing dosomething causes error expected behavior expect thisdosomemore function called thissetstate thisdosomething versions react browser os affected issue work previous versions react version react tested several versions confirm bug also appears bug appear", "num": "10320", "d": "7/2017"}, {"title": "dangerouslysetinnerhtml bug", "body": "hi guys found bug copied pasted image custom textarea got difference thisstatetext innerhtml values correct nt know fix reproduce chrome version official build ubuntu lts", "num": "10319", "d": "7/2017"}, {"title": "using instead still experimental means", "body": "documentation page using arrow function instead marked experimental still considered experimental", "num": "10318", "d": "7/2017"}, {"title": "finesse signature componentdidcatch react", "body": "want request feature report bug improvement new feature current behaviour believe proposed name little confusing expected behavior nutshell proposal changing signature naming conventions often halfjokingly labelled one difficult things computer science think could easily tweak signature componentdidcatch lifecycle method introduced react heavily inspired principles covered famous clean code book robert c martin particularly like idea solid naming conventions basically guess function sort variable dealing literally reading names yes every software developer world associate term catch trycatch construct first question came mind came across something along lines catch think could avoid confusion make new method bit intuitive renamed either renamed second argument something would better indicate expecting string eg find term info used recent blog post little vague immediately obvious whether meant string maybe object forget actual functionality new method seems great ca nt wait opportunity implement projects versions react browser os affected issue work previous versions react react", "num": "10317", "d": "7/2017"}, {"title": "react unstablerendersubtreeintocontainer always return instance", "body": "want request feature report bug bug current behavior using reactmodal library tested react beta throws error try close modal reason calls expects instance back sometimes null closing trying read state get null reference error use api like works component never tries read use like get error tries read current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior always return instance modal librarly works close versions react browser os affected issue work previous versions react react beta works previous versions", "num": "10310", "d": "7/2017"}, {"title": "reactdomrender unstablerenderintocontainer nt return instance called update", "body": "want request feature report bug bug current behavior reactdomrender reactdomunstablerendersubtreeintocontainer longer return created react component instances current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior steps thiscomponentref instance created null react beta entirely possible something different clear versions react browser os affected issue work previous versions react react beta chrome osx thanks", "num": "10309", "d": "7/2017"}, {"title": "server rendering warnings vague", "body": "want request feature report bug feature current behavior server rendering react dom hydrating different structure react rightly warns inconsistencies first saw warnings sure exactly going wrong warnings receiving warning find matching warning find matching warning expect server html contain last error catch problem serverrendering inconsistencies client render intentional moment testing things unpure render functions expected behavior explicit rendering inconsistency server client versions react browser os affected issue work previous versions react react", "num": "10307", "d": "7/2017"}, {"title": "serverrendered html polluted empty datareactid attributes", "body": "want request feature report bug bug feature current behavior using new react serverrendering using regular package method html dom output created root element attribute elements attribute every single html element ends consuming lot bytes large pages seems like potentially might necessary new client rehydration could least reduced size since appears serve real purpose besides binary marker point quote beta release notes server rendering use markup validation anymore instead tries best attach existing dom warning inconsistencies see new streaming serverrenderer well nt managed take look yet expect two methods rendering output versions react browser os affected issue work previous versions react nodejs react edit quickly illustrate talking better extra characters html element rendered react small example app characters", "num": "10306", "d": "7/2017"}, {"title": "react build deploy firebase error", "body": "want request feature report bug report bug current behavior deploy build firebase get error current behavior bug please provide steps reproduce possible minimal demo problem via similar template get error uncaught syntaxerror unexpected token lt deploy react build firebase createreactapp project npm firebase firebase init npm run build work get firebase deploy first deploy work try change code appjs npm run build get new firebase deploy open browser chrome firefox ie get error uncaught syntaxerror unexpected token lt fixed issue expected behavior get right mainjs deploy firebase versions react browser os affected issue work previous versions react error ie chrome firefox", "num": "10304", "d": "7/2017"}, {"title": "uncaught typeerror read property func undefined", "body": "bug webpack nodemodulesreactrouterlibinternalproptypesjs code var react require react var func reactproptypesfunc var object reactproptypesobject var arrayof reactproptypesarrayof var oneoftype reactproptypesoneoftype var element reactproptypeselement var shape reactproptypesshape var string reactproptypesstring uncaught typeerror read property func undefined react object contains proptypes dependencies babelplugintransformobjectassign babelpolyfill babelruntime bootstrap chartjs cheerio createreactclass enzyme eventsourcepolyfill hardsourcewebpackplugin imgloader immutable jquery jszip mixpanelbrowser moment mssignalrclient proptypes react reactaddonstestutils reactcookie reactdaypicker reactdom reactdropzone reactflexslick reactmixpanel reactredux reactresizedetector reactrouter reactrouterredux reactslick reactsmooth reactsortablehoc reactstockcharts reacttooltip reactvirtualized recharts redboxreact redux reduxdevtoolsextension reduxthunk sassloader slickcarousel superagent toastr webpackdevmiddleware devdependencies babelcli babelcore babelloader babelpluginreactdisplayname babelplugintransformobjectassign babelplugintransformruntime babelpresetreact babelpresetreacthmre babelregister bundleloader chartjs cheerio cleanwebpackplugin colors compression compressionwebpackplugin copywebpackplugin crossenv cssloader enzyme eslint eslintpluginimport eslintpluginreact eslintwatch eventsourcepolyfill expect exposeloader express extracttextwebpackplugin fileloader jsdom jsonloader mocha nock nodesass npmrunall oneskyutils open reactaddonstestutils reduximmutablestateinvariant reduxmockstore rimraf sassloader styleloader urlloader webpack webpackcleanobsoletechunks webpackdevmiddleware webpackhotmiddleware", "num": "10302", "d": "7/2017"}, {"title": "react server renderer breaks style object prod mode", "body": "bug react beta server renderer reported react beta thread renderer throws exception included nodeenv given file indexjs const react require react const reactserver require reactdomserver const reactcreateelement div classname signlink id signlayoutlink style position absolute consolelog reactserverrendertostring run get weirdly dev mode throw error", "num": "10299", "d": "7/2017"}, {"title": "react keep report error component found", "body": "want request feature report bug report bug current behavior component notfound react keep report error current behavior bug please provide steps reproduce possible minimal demo problem via similar template import react react export default function app return hello expected behavior report error versions react browser os affected issue work previous versions react react", "num": "10298", "d": "7/2017"}, {"title": "react rc", "body": "third react rc available public testing installation instructions rc published npm tag next regular npm installs continue use release install rc use react mean react first release ships rewrite react core previously codenamed fiber rewrite goals remove old internal abstractions age well hindered internal changes let us ship requested features like returning arrays render recovering component errors readable component stack traces every error enable us start experimenting asynchronous rendering components better perceived performance initial react release mostly focused compatibility existing apps enable asynchronous rendering yet introduce optin async mode later react expect react make apps significantly faster slower love know see improvements regressions javascript environment requirements react depends collection types map set support older browsers devices may yet provide natively eg corejs babelpolyfill polyfilled environment react using corejs support older browsers might look like js import import import react react import reactdom reactdom reactdomrender hello world documentgetelementbyid root react also depends even test environments simple shim testing environments would points interest complete rewrite react expect work existing code fixed deprecation warnings introduced beta work third party libraries relied deprecated unsupported apis may need updates work correctly new release good time file issues libraries problems tell us broke something particularly interested hearing performance differences notice nt expect massive changes would love know improvements regressions please report server renderer completely rewritten offers streaming mode reactdomserverrendertonodestream reactdomserverrendertostaticnodestream server rendering use markup validation anymore instead tries best attach existing dom warning inconsistencies anymore server renderer code still new likely issues please report hydrating server rendered container explicit api use instead reviving server rendered html keep using clientside rendering react native follows different release cycle update beta future release already using alpha release yet using fiber breaking changes error handling previously runtime errors used put react broken state produce cryptic errors react fixes introducing special kind components called error boundaries error boundaries catch runtime errors component tree log display fallback ui instead uncaught error component error boundary tree whole component tree unmounted helps avoid nasty bugs ui corrupted due error means need add error boundaries app handle errors gracefully react limited undocumented support error boundaries different method name used called renamed learn new error handling behavior scheduling lifecycle return called inside lifecycle method work around either use new portal api refs calling null longer triggers update allows decide updater function want rerender calling directly render always causes update previously case regardless calling setstate render callback second argument fires immediately instead components rendered replacing always happens previously could fire first cases previously changing ref component would always detach ref component render called change ref later applying changes dom safe rerender container modified something react worked previously cases never supported emit warning case instead clean component trees using see example lifecycle longer receives param see shallow renderer longer calls dom refs available also makes consistent get called previous versions either shallow renderer implement anymore packaging anymore even commonjs environments react reactdom precompiled single files flat bundles previously relied undocumented react internals work anymore let us know specific case issue try figure migration strategy build anymore compatible addons published separately npm singlefile browser versions need deprecations introduced removed core package available shallow renderer see blog posts instructions migrating code automated codemods names paths singlefile browser builds changed emphasize difference development production builds example js known issues server renderer crashes production inline styles fixed fixed server renderer nt yet support returning arrays strings components fixed server renderer still renders somewhat unnecessarily fixed shallow renderer pass fixed fixed issue older browsers fixed cases reported instead real error fixed report google crawler render page using link fixed popular third party libraries work yet eg enzyme please report issues thread updates released july released july fix crash server rendering released august fix strictmode function scope problem better error log messaging crossorigin handling shallow renderer improvements edgecase context bugfix single point entry server rendering etc released august warn unresolved function child remove datareactid datareactchecksum whitelist new test renderer api features disabled via feature flag minor updates slightly reduce bundle size release fix bugs related unmounting error boundaries enable new fiber reacttestrenderer api methods previously disabled behind feature flag released september fix error fxfactorial bvaughn improve error message reactdom loads without react aweary warn nesting subtree inside sophiebits nt warn casing ssr nonhtml ns sophiebits throw error warn mistaken loading prod dev react bundles flarnie reset instance vars calling commit phase lifecycles acdlite warn event listener function aweary fix bug react roots would cause error acdlite allow passing unknown attributes dom components nhunzaker others fix bug elements defaulted first option even disabled aweary nhunzaker released september fix bug react npm packages would throw exception startup browsers supporting natively sophiebits released september report bad dead code elimination react devtools gaearon fix false positive warning hydrating svg ssr gaearon add warning nonlowercase custom attributes gaearon fix memory leak gaearon remove deprecated entry point shallow renderer gaearon remove undocumented methods gaearon add official api without unstable prefix gaearon repeat polyfill twice gaearon", "num": "10294", "d": "7/2017"}, {"title": "document non interaction native synthetic events", "body": "trying find react event handlers able prevent event handlers document hours searching experimenting stumbled across issue explains unfortunately documentation gives impression react events work exactly like native events apart wrapping synthetic events could therefore interact please document case", "num": "10284", "d": "7/2017"}, {"title": "asyncawait lifecycle functions need executed order", "body": "request feature current behavior expected behavior asyncawait lifecycle functions need executed order need executed still pending chrome", "num": "10278", "d": "7/2017"}, {"title": "unable fix proptypes moved separate package", "body": "one modules use reactnativespinkit started throwing error updated rn went file causing error nodemodulesreactnativespinkitindexjs made changes described migrating reactproptypes even tried automatically applying changes jscodeshift ran however still getting warning want help project use wrong code code", "num": "10277", "d": "7/2017"}, {"title": "update docs example babel jsx allows elements attribute values", "body": "resolved via babel work example added react documentation would jsx depth appropriate", "num": "10276", "d": "7/2017"}, {"title": "pass classname classnames module", "body": "hi usually situation write code like seems simple elements need dynamic classes gets tedious pretty hard read propose following thing attribute evaluated running classnames rendering html means attribute allow types would become much simpler write code guys think", "num": "10271", "d": "7/2017"}, {"title": "reactdomrender callback return top level element", "body": "nt see way obtain top level element new async previously would return top level component third argument callback pass rendered component callback think bug top level component returned callback", "num": "10266", "d": "7/2017"}, {"title": "invalid unknown prop warnings ssr", "body": "run fixturesssr test harness terminal following warning logged ssr behavior match clientside behavior warn valid attribute", "num": "10265", "d": "7/2017"}, {"title": "safari instanceof checks fail", "body": "see bug safari instanceof checks incorrectly fail rendering player component internal renders jsx video tag result safari constructor correct instanceof checks fail expected behaviour first two return true tips work around safely breaking component third party library instanceof check video element", "num": "10263", "d": "7/2017"}, {"title": "getting reference component instance snapshot testing", "body": "app currently stacked provider followed parent appcontainer component followed actual component using snapshot testing load component call methods gives instance provider component get instance mycomponent able call methods tried js const tree renderer create gives error able resolve context see way pass context help", "num": "10261", "d": "7/2017"}, {"title": "change data obj array use setstate", "body": "obj like want change g idea", "num": "10260", "d": "7/2017"}, {"title": "setstate change obj k v", "body": "obj k v thisstate obj want change k use setstate thissetstate thx", "num": "10251", "d": "7/2017"}, {"title": "html input tag maxlength bug", "body": "met problem follow want render input tag value react component mounted set maxlength attribute input confusing value length maxlength display without split see demo anyone help", "num": "10250", "d": "7/2017"}, {"title": "implement new feature flexible component attr definition", "body": "want request feature report bug want feature current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react latest", "num": "10246", "d": "7/2017"}, {"title": "doubts getfielddecorator form", "body": "", "num": "10243", "d": "7/2017"}, {"title": "visit home page styles project load", "body": "routes import export default class extends reactcomponent import export default class extends reactcomponent like code visit homepage load still visit normal", "num": "10242", "d": "7/2017"}, {"title": "babelreactoptimize still value react", "body": "occasionally found plugin says things optimize react want get answer confirmation react team whether optimization still valuable example transformreactpureclasstofunction would definitely write purecomponent instead function could react team clarification thanks lot", "num": "10240", "d": "7/2017"}, {"title": "integrating jquery plugin webuipopover dom events firing due unable change state component", "body": "trying add plugin react component click event button written following code enable popover openpopover webuipopover url popovercontent trigger manual closeable true openpopover webuipopover show popover opening content showing inside popover content react components events firing due unable change state particular component someone please give suggestion thanks", "num": "10233", "d": "7/2017"}, {"title": "cursor input element onfocus uses stoppropagation firefox", "body": "want request feature report bug bug current behavior onfocus event handler element calls stoppropagation cursor element well selection shown firefox bit steps reproduce create element call stoppropation onfocus event handler jsfiddle expected behavior expected cursor selection text visible element seen chrome edge versions react browser os affected issue work previous versions react seen issue react firefox windows", "num": "10232", "d": "7/2017"}, {"title": "question keep single setstate call", "body": "guaranteed calling trigger single rerender better practise pass keep single call", "num": "10231", "d": "7/2017"}, {"title": "fr allow refs sfcs", "body": "want request feature report bug feature current behavior refs sfc currently work expected behavior taking ref sfc equivalent calling simply return highest dom node rendered output", "num": "10230", "d": "7/2017"}, {"title": "element unrecognized", "body": "want request feature report bug bug current behavior tag incorrectly reported invalid html element chrome version current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior similar react tag valid html element versions react browser os affected issue work previous versions react react report error", "num": "10226", "d": "7/2017"}, {"title": "changing local copy state method automatically changes state well", "body": "want report bug least think assigned value state say x local variable method making change variable calling setstate change value state say changes value x well exactly change local variable using setstate change value x using change value yet x changes well exactly way changed local variable earlier initialised using x demo problem clicking button changes numbers rendered using state test clicking button invokes method value x stored variable arr whose first indexed spliced setstate called passing object changing value state temp test updated well value arr using react version chromium running ubuntu lts", "num": "10220", "d": "7/2017"}, {"title": "enable set fontfamily press start", "body": "want request feature report bug bug current behavior setting fontfamily press start fontfamily style property set current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior would like see fontfamily property set press start chrome debugger versions react browser os affected issue work previous versions react last react version chrome mac nt know worked", "num": "10218", "d": "7/2017"}, {"title": "incorrect data compositionend event typing korean", "body": "reproduce go open developer console switch microsoft korean ime standard settings switch korean input put cursor contenteditable div type qwerty keyboard typed input field result developer console list composition events contents data attribute logged however data first event wrong \uc5ec \uc5ec\ub974 see screenshot see wrong trying thing seen screenshot plain nonreact input field emits event proper data occurs latest version react also seen behaviour older versions example causes problems draft js", "num": "10217", "d": "7/2017"}, {"title": "automatic passing html attributes classname id etc props composed component", "body": "want request feature report bug feature current behavior consuming react component libraries frustrating creators specifically handle html attributes passed props outermost container given component regard specific problem best libraries consistent interface applying custom components mediocre libraries provide hardcoded components support custom worst libraries provide neither hardcoded support custom categorizations certainly meant indicator usefulness quality library whole plenty libraries find extremely useful wellmade lack simple interface contrary plenty libraries passed due poor design areas support nice way example minimal example initial render popular infinite list view anonymized avoid fingerpointing jsx resulting html html notice nowhere found component honor passed container really need wrap component resulting additional markup places jsx jsx resulting html html makes total sense disallow arbitrary props automatically applied resulting container however html attributes seems extremely counterproductive automatically current behavior bug please provide steps reproduce possible minimal demo problem via similar template na expected behavior na\u00efve approach would automatically apply html attribute composed component outermost container probably ideal better solution would automatic prop passthrough default allow developers override specific see fit benefits twofold libraries lack interfaces like would immediately improved without developer needing anything would still allow prescient developers curate interface way choosing conclusion admittedly nt great solution mind also first time opening react issue hope provokes thoughtful discussion feels like constructive happy provide additional examples problem curious people similardifferent thoughts thanks versions react browser os affected issue work previous versions react versions", "num": "10216", "d": "7/2017"}, {"title": "catch errors render methods", "body": "want request feature report bug feature current behavior component render method throws error leaves react inconsistent state subsequent renders attempt update inconsistent component result errors like read property gethostnode null proposed behavior react could catch error render method set inconsistent state flag rethrow afterwards react update previously rendered component flag set could discard unmount existing component perform fresh render container empty versions react browser os affected issue encountered inconsistent state problems", "num": "10215", "d": "7/2017"}, {"title": "reactdomserver rendertostring fails array type children", "body": "react alpha allows returning array render function server renderer expects children always react elements source fiddle react", "num": "10212", "d": "7/2017"}, {"title": "split svg property configs separate module", "body": "instead supporting directly require people write const svg require reactdomsvg could avoid sending svgdompropertyconfig maybe files unknown upfront would good investigate potential benefits cc sebmarkbage acdlite gaearon nhunzaker jquense aweary", "num": "10209", "d": "7/2017"}, {"title": "renderintodocument render document", "body": "render document whatsoever creates lot issues components listen global events document would great revert behavior function add additional function render isolated div needed", "num": "10206", "d": "7/2017"}, {"title": "unmountcomponentatnode trigger componentwillunmount components mounted unstablerendersubtreeintocontainer", "body": "want request feature report bug sure intended behavior like feature current behavior componentwillunmount get called portal element mounted unstablerendersubtreeintocontainer unmountcomponentatnode called current behavior bug please provide steps reproduce possible minimal demo problem via similar template please check example expected behavior example expect componentwillunmount called interval timeout cleared versions react browser os affected issue work previous versions react google chrome official build cohort stable tried react version", "num": "10205", "d": "7/2017"}, {"title": "components rendering order", "body": "composite component like javascript const const b const c return b c wonder ok write like hope render correct order embed thanks", "num": "10204", "d": "7/2017"}, {"title": "time upgrade license mit", "body": "reference apache foundation bans use facebook bsdpatents licensed libraries like reactjs", "num": "10203", "d": "7/2017"}, {"title": "implement additional async apis preparation", "body": "x similar currently call except updates batched flushed end batch regardless whether nested inside x optin subtree async mode x static flag class components x component type items considering minor releases decided ship commit phase version fires even deep set state subtree replaces global host configs passive versions", "num": "10202", "d": "7/2017"}, {"title": "feature request deferred async shouldcomponentupdate", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10199", "d": "7/2017"}, {"title": "uncontrolled radio fix breaking master", "body": "sure seems caused issues production us need either revert find way fix forward right master broken sync fixing break things", "num": "10196", "d": "7/2017"}, {"title": "update codepen examples use latest react", "body": "iirc currently probably leave using since breaks update anyway", "num": "10193", "d": "7/2017"}, {"title": "react codepen found show loading", "body": "help example codepen working show loading", "num": "10192", "d": "7/2017"}, {"title": "consider relicensing al rocksdb done", "body": "hi apache software foundation legal affairs committee announced socalled facebook bsdpatents license longer allowed used direct dependency apache projects lead lot upset frustration apache community especially projects requiring similarlylicensed code direct dependencies chief rocksdb however apache software foundation received word rocksdb relicensing code dual apache license gpl licenses user reactjs asf toplevel project apache couchdb please consider relicensing reactjs similar terms otherwise many asf projects stop relying building react previous bug suggested mention lacker issue asking licensing questions thank kindly consideration", "num": "10191", "d": "7/2017"}, {"title": "settle heuristicapi choosing hydration", "body": "used either purely clientside content serverside rendered content clientside empty container first render serverside hydrate currently use datareactid determine hydrate clear could theory hydrate patch safe current hydration model initial dom call intending clientside render hydration end nt patch attributes see four possible solutions always patch attributes differ would really slow hydrate normal hydration mode slow initial render nonssr tree continue use heuristic hydrating kind extra meta data html present add serverrenderer change one meta data needed one per element comment attribute introduce explicit api hydrate ssr hydration callsites updated introduce option keep option warning one major version make nonbreaking change allows people incrementally upgrade leisure", "num": "10189", "d": "7/2017"}, {"title": "make uses reactdebugcurrentframegetcurrentstack reentrant", "body": "realized refactor use reactdebugcurrentframe decoupled stack frame error messages reentrant fiber reentrant renderers might synchronous server renderer atm add tests warnings renderers calling serverrender within client render update setreset callsites use pushpop instead account", "num": "10188", "d": "7/2017"}, {"title": "cloneelement children ref dom gt dom dom null componentdidmount", "body": "want request feature report bug report bug current behavior cloneelement children ref dom gt dom dom null componentdidmount js class app extends reactcomponent render return class test extends reactcomponent componentdidmount consolelog thisdom console show null const children content gt return content reactdomrender documentgetelementbyid container however replace gets dom node correctly current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior component instance dom node instance imo versions react browser os affected issue work previous versions react using react", "num": "10183", "d": "7/2017"}, {"title": "firefox error permission denied access property target", "body": "want request feature report bug bug current behavior certain events firefox trigger following error note raven wrapping call nt think relevant specific line code happens suggests could due iframe crossorigin issues iframes embedded although nt able reproduce error current behavior bug please provide steps reproduce possible minimal demo problem via similar template unfortunately able reproduce though happened separate users since firefox upgrade june helps reported similar error ago ravenjs fixed using trycatch expected behavior errors versions react browser os affected issue work previous versions react react firefox windows osx think issue new firefox new behavior react", "num": "10181", "d": "7/2017"}, {"title": "unknown prop tag", "body": "want request feature report bug bug current behavior notice document ontouchforcechange valid event div however get warning logged console unknown prop tag current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior warning versions react browser os affected issue work previous versions react chome macos", "num": "10177", "d": "7/2017"}, {"title": "devonly requires fb bundles", "body": "see starts js var invariant require fbjslibinvariant eventlistener require fbjslibeventlistener react require react warning require fbjslibwarning executionenvironment require fbjslibexecutionenvironment require fbjslibcamelizestylename var hyphenatestylename require fbjslibhyphenatestylename memoizestringonly require fbjslibmemoizestringonly require proptypes var emptyfunction require fbjslibemptyfunction containsnode require fbjslibcontainsnode focusnode require fbjslibfocusnode getactiveelement require fbjslibgetactiveelement shallowequal require fbjslibshallowequal require proptypescheckproptypes notice nt probably use prod need mechanism express module pure side effects rollup dce", "num": "10176", "d": "7/2017"}, {"title": "server renderer nt include event code", "body": "since currently share injection server renderer includes lot unnecessary clientonly code cut", "num": "10172", "d": "7/2017"}, {"title": "npm like repository free react component created shared community nonissue", "body": "sorry starting react npm like repository free react components created shared community", "num": "10170", "d": "7/2017"}, {"title": "bug radio button fires onchange event one time", "body": "want request feature report bug bug current behavior radio button fires onchange event option current behavior bug please provide steps reproduce possible minimal demo problem via similar template demo code expected behavior radio button fire onchange event whenever value changed versions react browser os affected issue work previous versions react current latest version", "num": "10168", "d": "7/2017"}, {"title": "reactchildrenmap want add key", "body": "use reactcssmodules use key components added let use key first look key components added something extra", "num": "10166", "d": "7/2017"}, {"title": "testutilssimulate event compositeinstance throw early", "body": "help found bug exception typeerror read property reactinternalinstance undefined function getclosestinstancefromnode node node internalinstancekey return node internalinstancekey testing undefined variables also calling function initially reported trying find wrong backtrace promise using react react dom", "num": "10165", "d": "7/2017"}, {"title": "feature suggestion publish react also code", "body": "want request feature report bug feature current behavior react published npm code expected behavior publish react also entry point packagejson motivation performance leverage targeted client native es features part angular package format", "num": "10164", "d": "7/2017"}, {"title": "use amd module react", "body": "project use html css js project modules defined amd like image need rewrite project react sure use module directly react use like using require xxx image important problem one help", "num": "10159", "d": "7/2017"}, {"title": "import amd module react project", "body": "project use html css js project modules defined amd like image need rewrite project react sure use module directly react use like using require xxx image important problem one help", "num": "10158", "d": "7/2017"}, {"title": "incomplete documentation creating web components", "body": "hey documentation creating web components react quite cool works really nice html however component created way unstyled documentation cover add css web component using css end mainhashcss file selectors components create web component css must encapsulated component components dom lives shadow root stylable outside would cool could show way account", "num": "10155", "d": "7/2017"}, {"title": "request build", "body": "entirely sure whether correct place request apologies wasting time integrating react large legacy webclient jumping hoops render comment nodes great joy noticed merged allows us remove hacks however merged latest alpha build created love get alpha build published", "num": "10152", "d": "7/2017"}, {"title": "tutorial concepts without", "body": "tutorials exception advanced guides assume react without tutorial still uses jsx react without jsx tutorial still uses would simple react demo look like compare vue introduction starts simple examples drop webpage", "num": "10147", "d": "7/2017"}, {"title": "hoc onclick nt work without adding new element", "body": "want request feature report bug bug current behavior button clicked wo nt alert current behavior bug please provide steps reproduce possible minimal demo problem via similar template demo link expected behavior onclick event hoc triggered add element event moved element work perfectly javascript const hoc wrappedcomponent gt return class abc extends reactcomponent render return nt want add element component versions react browser os affected issue work previous versions react react", "num": "10146", "d": "7/2017"}, {"title": "remove unstablerenderintocontainer", "body": "hunch want remove accomplishes thing remember adding bunch complexity would nice get rid committing support another release cycle", "num": "10143", "d": "7/2017"}, {"title": "problem solve itplease help", "body": "write function href another web function openpage windowlocationhref function useful wrong npm run build window defined dont know", "num": "10141", "d": "7/2017"}, {"title": "fiber infinite recursion mounting lifecycle", "body": "app intentionally bug app app component returns calls componentdidmount componentwillreceiveprops nt bad user code issue raises regression behaviour react compared react renders directly get react nothing renders app never loads browser spinning forever think react stuck infinite recursion presume fiber nature async fact things never ends makes hard investigate isolate source problem large codebase sort maximum call stack fiber context migrated app latest react native recently weird freezing case app completely unresponsive button works could still native actions like scroll scrollview however even rn devtool menu action working like inspector probably involves js react stuck recursion loop case issue calling lifecycle wrong logic reason code used work past creates recursion loop", "num": "10140", "d": "7/2017"}, {"title": "unknown dom property autocomplete spec says htmlinputelementautocomplete autofocus", "body": "want request feature report bug bug current behavior get warning unknown dom property autocomplete mean autocomplete use works fine misleading name dom property react implies dom property named differently really current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior accepts rejects error message claim name dom property see mention dom property called idl documentation htmlinputelement see mention claim react property name mapped onto differentlynamed dom property use wording good coming wordings js typeof documentcreateelement input autocomplete string typeof documentcreateelement input autocomplete undefined versions react browser os affected issue work previous versions react issue exists least", "num": "10139", "d": "7/2017"}, {"title": "fiber infinite loop error thrown render", "body": "want request feature report bug bug current behavior using react alpha recent versions iirc whenever error thrown inside render react fiber goes infinite loop screenshot current behavior bug please provide steps reproduce possible minimal demo problem via similar template unfortunately minimal repro case yet wanted flag goes beta nt think anything special weird recursive calls similar tried stepping within loop inside fiber internals user code involved expected behavior react throws error stops versions react browser os affected issue work previous versions react repros works fine react", "num": "10137", "d": "7/2017"}, {"title": "base component context overriden child context", "body": "want request feature report bug bug might feature current behavior base component defines context type extending component also defines context base component context overriden child context current behavior bug please provide steps reproduce possible minimal demo expected behavior component defined context versions react browser os affected issue work previous versions react tested amp versions nt test", "num": "10136", "d": "7/2017"}, {"title": "dispatchevent inputtextarea ignored", "body": "want request feature report bug bug current behavior method effect inputtextarea elements current behavior bug please provide steps reproduce possible minimal demo problem via similar template v working v working expected behavior method results event handled versions react browser os affected issue work previous versions react using latest chrome browser worked stopped working still working usecase old tests happily remove support", "num": "10135", "d": "7/2017"}, {"title": "animationdelay applying", "body": "using react style appear applying specific working trying debug problem jsx import react component react import pageloadingindicatorcss export default class pageloadingindicator extends component render let points let duration seconds let durationperbit duration points let bitwidth points let height return bitwidth width animationdelay animation upon inspection rendered html looks like html", "num": "10134", "d": "7/2017"}, {"title": "support inheritance", "body": "recall discussing supporting inheritance react components unfortunately ca nt find discussion github search know react repository owners functional programming lovers respect people think functional programming good many usecases best approach every use case please nt ask use case try handle way prefer code way fine never problems scalabilityreadabilitymaintainabilityextendibility code past years least never chose php building web servers try change php even though websites much smaller facebook another thing open source great library like react considering huge user base also take responsibility users relation work respect people nt force things expect politicians follow rule also follow place make decisions affect many others hate politicians use media brainwash people raise votes populistic methods strongly believe react developers unconsciously excitement thing advertising functional programming things like redux wonder make poll today ask many agree support basics oo wo nt vote another thing framework forces specific coding style may good framework one nt force coding style avoids forcing much possible much better another thing agree problems described inheritance usecases none problems apply natural thing using inheritance ca nt believe trouble went past year react nt support inheritance many many times reached point stop frontend project till js supports compiling python c browsers run people communities still projects oo come write good frameworks frontend developers bet reading tempted respond please describe usecase tell without inheritance stop complaining believe avoid asking questions wanted ask composition ask know composition nt make sense much inheritance ask please support inheritance react remember dirty full parentheses code people writing add support classes react said improve code readability ok lets support inheritance bring readability codes written react default values set class inherited subclasses still changeable subclasses done passing props component compose render method sometimes makes sense simply inherit sometimes passing callback props taking care extra work gain disclaimer like many many others appreciate good things react aggression natural reaction passive aggression forcing others things way prefer explain problem tell solve way responses troubles adopt patterns patterns force framework btw took time wrote improve reactjs", "num": "10130", "d": "7/2017"}, {"title": "ca nt scroll top", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10128", "d": "7/2017"}, {"title": "node allowed due devengines setting packagejson", "body": "want request feature report bug featureupdate current behavior currently following node versions allowed value executing script error expected behavior unless reason allowing version yet could update", "num": "10127", "d": "7/2017"}, {"title": "let stop attribute blocking", "body": "write jsx html get react prevents attributes appearing dom means react always play nice elements whose behaviors defined jquery angular etc apis whose routines read dom example could use jquery angular define routines observe attributes render webgl scene separate canvas author wants animate sphere able angular jquery routine find required attributes please uplift limitation nt limit web", "num": "10126", "d": "7/2017"}, {"title": "curried onblur handler triggered anymore using production mode", "body": "want request feature report bug bug current behavior switching mode examples defined curried handler suddenly stops working seems something number arguments current behavior bug please provide steps reproduce possible minimal demo problem via similar template react partially working react fully working react fully working also works fine mode react partially working expected behavior whatever correct usage handler function might end least behavior stay across different build modes versions react browser os affected issue work previous versions react working fine", "num": "10125", "d": "7/2017"}, {"title": "consistency parameter names comment", "body": "comment named componentinstance function parameter different name wrapperinstance mounts component inserts dom param reactcomponent componentinstance instance mount param domelement container dom element mount param reactreconciletransaction transaction param boolean shouldreusemarkup true insert markup function mountcomponentintonode wrapperinstance container transaction shouldreusemarkup context", "num": "10121", "d": "7/2017"}, {"title": "using native dom events react events", "body": "react element inner inside outer click event handlers outer react element inner html js documentgetelementbyid outer addeventlistener click function consolelog outer click class inner extends reactcomponent handleclick consolelog inner click render return reactrender documentgetelementbyid outer click react element inner expect inner element click handler triggered first outer element click handler happens reverse direction ie outer element click handler gets triggered first inner element click handler gets triggered know react event system native dom events propagate react events triggered propagate correct way achieve expected behavior note code example working large code base please keep mind answering", "num": "10120", "d": "7/2017"}, {"title": "tic tac toe tutorial", "body": "hi middle tutorial found naming variable xisnext clear x next supposed display instead x thank", "num": "10119", "d": "7/2017"}, {"title": "fr support style string set via csstext", "body": "want request feature report bug feature current behavior style prop must always object expected behavior style prop could optionally accept css string would set hood via", "num": "10118", "d": "7/2017"}, {"title": "error stops components rendering without error message console feedback", "body": "feels like bug faulty code trying bind undefined function forgot pass parent however error thrown well took figure problem past minutes tried reproducing error different data without luck even copied minimal amount source files another project error thrown nt know else want investigate setup branch described behavior observed home root provide information since nt really spent time trying replicate success expected behavior would throwing error obviously idea previous versions react encounter nt updated react meantime version shown using latest chrome windows", "num": "10117", "d": "7/2017"}, {"title": "multiple clicks needed nonanchor element onclick padding safari", "body": "want request feature report bug bug current behavior mobile safari versions desktop safari nonanchor element requires two click trigger element contains multiple commenttext nodes clicks second later text nodes either element padding element set natively element thanks malash worked around either padding element ensuring element contains one text node adding single top level element inside element multiple text nodes within instead eg instead current behavior bug please provide steps reproduce possible minimal demo problem via similar template seen fiddle first yea span one text node one click works second yea first text node span padding one click works nah second text node span padding needs two clicks third fourth yeah markup span multiple text nodes padding one click works note need zoom make sure hitting nah mobile reproduce behaviour sensitive exact area hit note desktop ensure clicking text seeing cursor nah items seeing cursor work expected behavior text nodes trigger click handler first click versions react browser os affected issue work previous versions react current react desktop safari mobile safari ios use agent thanks scottlyttle stellah", "num": "10116", "d": "7/2017"}, {"title": "runtime issue typeerror internalinstance null may need refresh page", "body": "bug due version incompatibility react reactdom certain versions managed fix issue using compatible react reactdom versions react reactdom current behavior react codebase work years recently encountered run time typeerror internal instance null errors cachebuster help would point generic windowonerror function following error message browser following error occurred typeerror internalinstance null may need refresh page file line number expected behavior runtime errors versions react browser os affected issue work previous versions react version encountered issues react reactdom", "num": "10112", "d": "7/2017"}, {"title": "render gets date state set componentwillreceiveprops using updater function", "body": "either bug documentation implementation according setstate doc need refer previous state one must use updater function problem updater function used change state state updated function called result gets new props old state called state really updated illustrates problem observed problem react", "num": "10111", "d": "7/2017"}, {"title": "tutorial starter code", "body": "starter code tutorial linked final code codepen starter code", "num": "10110", "d": "7/2017"}, {"title": "mouseenter event triggered cursor moves disabled button", "body": "bug mouseenter event triggered cursor moves disabled button see example expected behavior trigger mouseenter event react latest chrome macos", "num": "10109", "d": "7/2017"}, {"title": "reactdom error messages cryptic", "body": "reactdom throws error jest tests using testutils error messages cryptic makes harder us developers understand problem example one typeerror read property reactinternalinstance undefined ca nt put something readable instead like parent node tag name etc would extremely useful using test code btw js oncancel fired done gt const component testutilsrenderintodocument", "num": "10108", "d": "7/2017"}, {"title": "react server render error hard debug", "body": "want request feature report bug feature current behavior like using react server render error occurs like using document window object node environment error log hard find line broken error info like picture current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior server render error occurs error message see line broken versions react browser os affected issue work previous versions react react", "num": "10104", "d": "7/2017"}, {"title": "improve error forgotten extend reactcomponent", "body": "forget extend get following error example would nice dev could check exists provide better warning along lines believe would happen reactcompositecomponentjs", "num": "10103", "d": "7/2017"}, {"title": "would reordering slow passed index key prop", "body": "already question issue havent answered ps already read documentation bondarewicz said bit indistinct", "num": "10102", "d": "7/2017"}, {"title": "setstate callback called null instead undefined", "body": "want request feature report bug bug current behavior react callback function optional parameter function called passed value null previously react function called value undefined change breaks default parameters feature javascript discovered behavior working react native project hence example using view amp text current behavior bug please provide steps reproduce possible minimal demo problem via similar template import react component react export default class mycomp extends component componentdidmount thissetstate val gt consolelog val expected behavior callback function called undefined versions react browser os affected issue work previous versions react broken behavior observed react alpha react native replicated issue react react native working expected", "num": "10100", "d": "7/2017"}, {"title": "add default property modules", "body": "want request feature report bug feature current behavior code causes deprecation warnings works babel use babel works synthetic import support babel using use typescript work unless set true tsconfigjson packages work fine react deprecated warnings get tripped babel copies object expected behavior work without needing set done providing property possibly adding versions react browser os affected issue work previous versions react react chrome os x node work previous versions since deprecation warning added", "num": "10098", "d": "7/2017"}, {"title": "propstypes nt show kind warning error wrong props windows running app osx everything works fantasticwhy", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10093", "d": "7/2017"}, {"title": "reacttestrenderershallow setstate callback never called", "body": "want request feature report bug bug following current behavior callback second argument never called current behavior bug please provide steps reproduce possible minimal demo problem via similar template js import shallowrenderer reacttestrenderershallow const renderer new shallowrenderer rendererrender const instance renderergetmountedinstance instancemethodthatcallssetstate gt callback passed setstate second argument within methodthatcallssetstate never called shallow renderer code follows js updaterprototypeenqueuesetstate function enqueuesetstate publicinstance partialstate callback callername typeof partialstate function partialstate partialstate publicinstancestate publicinstanceprops thisrenderernewstate extends publicinstancestate partialstate thisrendererrender thisrendererelement thisrenderercontext see callback ignored deep renderer callback used expected behavior callback called versions react browser os affected issue work previous versions react react nt know worked", "num": "10089", "d": "7/2017"}, {"title": "failed compile error line num variable defined noundef", "body": "bug compile code react version steps reproduce create component load dynamically js file introduces new variable hc try use variable compile see error line num hc defined noundef problem define variable global component party script init hc compile due error way skip compile checks know object exists regards", "num": "10087", "d": "7/2017"}, {"title": "build unpkgcom broken", "body": "totally sure whether reported issue project see currently bad build redirects ends like version looks fine", "num": "10086", "d": "7/2017"}, {"title": "nicer formatting ssr validation", "body": "new validation issues warn first difference found html hydration scenario ideally instead queue differences end commit issue single warning nicely formatted diff instead warning add warn calls global buffer array map set whatever inside prepareforcommit issue currently batched warnings single message format message terms jsx diff nicely formatted way relevant nodes parent child changes irrelevant child content replaced ellipsis eg strategy wo nt yield perfect results asynchronously hydrating gets interrupted another tree flush warning actual hydrating particular tree flushed might show partial diff case probably warning", "num": "10085", "d": "7/2017"}, {"body": "long time ago nt feel strongly", "d": "7/2017"}, {"body": "regardless facebookreact interest using sri tags think would still beneficial projects hardcoded available via api well via unpkg optin approach similar cdnjs", "d": "7/2017"}, {"body": "would like know invariant message nt extracted could provide jsfiddle demo", "d": "7/2017"}, {"body": "quick check possible see bigger ui form libraries afaik extending events done though may case anymore reactbootstrap one point libraries though certainly breaking change fix hence caution", "d": "7/2017"}, {"body": "good point want research problem putting data events get recycled likely confusing users even source bugs either way", "d": "7/2017"}, {"body": "yeah take look definitely agree good idea prevent extensions want make sure surprised change enough heads adjust", "d": "7/2017"}, {"body": "nt warning also stop pooling instead", "d": "7/2017"}, {"body": "huh totally forgot added warning", "d": "7/2017"}, {"body": "formitem code", "d": "7/2017"}, {"body": "react support mutating attributes dom nodes via refs already specified react example changing dom node already method things might behave unexpectedly general avoid using ui logic useful imperative operations eg setting focus integrating third party libraries hard say clear attempting hope helps", "d": "7/2017"}, {"body": "muramsudheer react code repo better go raise issue btw answer question import react react import proptypes proptypes class example extends reactpurecomponent render return export default example pass component state component using props export component want use file module go docs try understand examples given", "d": "7/2017"}, {"body": "hi muramsudheer welcome react community type question better suited stack overflow react native discord chat github issues generally bugs featurerequests specific react", "d": "7/2017"}, {"body": "run node use last version scripts supported node createreactapp creating new react app using node project boostrapped old unsupported version tools please update node higher better fully supported experience notice appear think fair say still use node although result outdated version", "d": "7/2017"}, {"body": "happy take pr adding note though", "d": "7/2017"}, {"body": "think fair say still use node although result outdated version think good happy take pr adding note though make pull request next time thank", "d": "7/2017"}, {"body": "think ever meant supported mutate event object probably freeze development", "d": "7/2017"}, {"body": "hmm freeze pool maybe", "d": "7/2017"}, {"body": "gaearon thanks reply use case custom event field event delegation use traditional event delegation pattern abstraction react use react component props instead dom data attribute store data react event handler got dom object instead react component field event parameter know component clicked without appending custom data event object misunderstand anything react better solution custom field handle event delegation patter", "d": "7/2017"}, {"body": "trouble understanding trying provide small example representative real world use case react people usually rely bubbling pass data instead component handle event possibly notify parent components callback pass data callback eg data might based event parts might based component props hardcoded", "d": "7/2017"}, {"body": "gaearon thanks quick reply trying avoid passing function children components passing function grandchildren difficult maintain change component middle break chain avoid unnecessary rerender manual mistake passing function props like decoupling parent component children component parent container nt need care props children component children component nt depends function outside need put data event example nt need pass hander nt need pass handler props pass completely avoid unnecessary rerender dependency parent component children component nt need know children component handle onclick event nt need run function outside cleaner method defined class know ways solve problems feel like event delegation like also clean easy maintain may also good pattern implement react support", "d": "7/2017"}, {"body": "passing function grandchildren difficult maintain change component middle break chain effort write written would argue actually helps maintenance every connection explicit move components around accidentally lose connection often happens logic relying delegation avoid unnecessary rerender manual mistake passing function props like sure need event delegation solve bind function constructor use class property syntax decoupling parent component children component already coupled logic think trying avoid reflecting coupling code coupling still implicit react apps preferable keep relationships components explicit even cost writing code understand coming pattern intentionally discouraged react please use oneway data flow pass callbacks work beginning keeps data flow explicit helps find bugs later", "d": "7/2017"}, {"body": "huge fan magical behavior automatically wrapping also takes us away trycatch semantics fail probably hit infinite loop error instead fix build proper hoc done", "d": "7/2017"}, {"body": "tend agree sebmarkbage automatic wrapping thisstateerror fail probably hit infinite loop error instead fix nt likely scenario error would propagate next boundary eventually root sure infinite loop comes play think use custom error crossorigin errors edit nevermind nt mean thought since devonly behavior match trycatch semantics", "d": "7/2017"}, {"body": "ah right bubbling happen agreed correctly differentiate null trusted null throw nullundefined pass custom error former case", "d": "7/2017"}, {"body": "another similar report clear yet caused issue", "d": "7/2017"}, {"body": "assume serving scripts file might trigger", "d": "7/2017"}, {"body": "stack trace visible react package reactdom try versions please", "d": "7/2017"}, {"body": "gaearon maybe fail early least warn detect major version mismatch", "d": "7/2017"}, {"body": "oh damn shame indeed version mismatch", "d": "7/2017"}, {"body": "closing since issue discuss warning version mismatch separate issue would like", "d": "7/2017"}, {"body": "fix via", "d": "7/2017"}, {"body": "quite understand behavior expected directly modify expect automatically update source truth example next edit revert changes made pasting solution either leave fully uncontrolled attempt manage via react use something like draftjs controlled rich text editor", "d": "7/2017"}, {"body": "gaearon draftjs great solution chrome plugin grammarly nt work develop chat support support team use grammarly plugin need make custom rich textarea emoji work grammarly", "d": "7/2017"}, {"body": "fair enough saying case controlled approach work render empty react manage lifecycle hooks", "d": "7/2017"}, {"body": "gaearon thank idea remove html entities user paste text buffer", "d": "7/2017"}, {"body": "know sorry sound reactspecific would suggest checking articles examples working sanitizing", "d": "7/2017"}, {"body": "experimental part part nonexperimental way writing would inside", "d": "7/2017"}, {"body": "kovensky see experimental far know stage proposal", "d": "7/2017"}, {"body": "features become non experimental still chance making happened", "d": "7/2017"}, {"body": "shakiba according babel arrow methods like call still stage looks like promoted stage see vs side note stage babel plugin nt seem anything magical arrow methods simply transpiles arrow functions defined within constructor method example", "d": "7/2017"}, {"body": "hope discussion helps close let know questions", "d": "7/2017"}, {"body": "second argument kind intentionally vague quite decided goes yet might add things future went passing object first point subjective people see short others see long pick something went one think parallel reasonable enough", "d": "7/2017"}, {"body": "ok fair enough actually feels like object intending use data type makes perfect sense amended proposal would therefore thanks", "d": "7/2017"}, {"body": "triggered throw anything error example mind accurate name since guarantee catching error could anything could thrown", "d": "7/2017"}, {"body": "aweary overly complicating things little bit understand new lifecycle method correctly meant catch exceptions thrown descendant components like example using statement child component result captured parent according throw statement documentation throws userdefined exception nt matter whether throw error object integer per example matters exception perhaps debatable whether good thing exception type way javascript guess convinces optimal solution would therefore", "d": "7/2017"}, {"body": "love incorporating expected argument name read read words reads component catch error error argument otherwise would read component catch error error similarly notyetdocumented api called flushsync batch reads flush sync batch name argument otherwise would flushsyncbatch batch reads flush sync batch batch", "d": "7/2017"}, {"body": "fairly sure issue", "d": "7/2017"}, {"body": "let track verify fix also fixes example", "d": "7/2017"}, {"body": "seems like issue", "d": "7/2017"}, {"body": "seem related posted small test case errors case reactmodal library calling also expecting instance back going file new bug one seems like", "d": "7/2017"}, {"body": "although weird test cases works always render instead like apparently get instance back former case", "d": "7/2017"}, {"body": "jlongster apparently get instance back former case example fails get instance first render fails since makes render first", "d": "7/2017"}, {"body": "gaearon yes def looks related working reproducible example nt trivial exercise trying extricate relevant bits interestingly everything renders correctly returning instance important actions line", "d": "7/2017"}, {"body": "seanlandsman please provide example recreated example fiddle return object", "d": "7/2017"}, {"body": "file new bug mine might related feel free dupe one", "d": "7/2017"}, {"body": "gaearon great ok take look actually came point jlongster containerfiberchild null getpublicrootinstance take look example try see different mine thanks", "d": "7/2017"}, {"body": "reproduced happens called update eg", "d": "7/2017"}, {"body": "ah great continue see find meantime though pleased managed reproduce", "d": "7/2017"}, {"body": "filed bug still sure related think might never return instance like modal library ever tries access render like componentwillunmount never called nt realize null", "d": "7/2017"}, {"body": "believe issue related fiber tracks scheduled work specifically root call made work scheduled called eventually sets property fiber called already work progress check evaluates work nt scheduled means nt called never set", "d": "7/2017"}, {"body": "sounds correct sure fix think acdlite context", "d": "7/2017"}, {"body": "also slightly related bump problem async mode anyway", "d": "7/2017"}, {"body": "currently force top level renders synchronous mode compatibility case normally legacy mode core issue nt want support reentrant renders render synchronous lifecycle methods return already rendered initially wo nt anything yet idea use cases ideally switch using portals instead perhaps warn use cases recommend switching portals", "d": "7/2017"}, {"body": "sebmarkbage portals way forward sort thing find documentationinformation might used alternatively way get instantiated component later particular use case nt necessarily need immediately point later might acceptable", "d": "7/2017"}, {"body": "portals way forward sort thing find documentationinformation might used mix regular elements eg js reactdomcreateportal domnode", "d": "7/2017"}, {"body": "alternatively way get instantiated component later particular use case nt necessarily need immediately point later might acceptable technically although bit weird note work arrow functions familiar", "d": "7/2017"}, {"body": "ok tried portal approach return something nt instance expect perhaps describe usecase develop gridtable library whereby users supply react components library creates dynamically runtime inserts render within grid optionally users access components runtime invoke methods via api expose example user might supply togglecolorcomponent method called toggle get instance togglecolorcomponent given cell invoke toggle method typically via external input button etc make sense", "d": "7/2017"}, {"body": "seanlandsman nt need component visible yet recommend instead defer work later need visible time recommend using portal tricky part portal api want render something also rendering case recommend manually creating container dom node appending instance", "d": "7/2017"}, {"body": "second option described using hte callback works actually tried used arrow function nt worked trying normal function described gaearon trick sebmarkbage actually need component visible render nt necessarily need access instantiated component immediately point maybe even really really soon afterwards necessarily immediately use callback approach described works fine likely supported mechanism going forward suits us fine trying ensure forward compatibility fiber released thanks help", "d": "7/2017"}, {"body": "seanlandsman note technique nt work well async rendering portals future proof", "d": "7/2017"}, {"body": "ok understand thanks close cigar", "d": "7/2017"}, {"body": "assuming method least since marked unstable nt think fixed probably fine seems little risky though", "d": "7/2017"}, {"body": "original plan special case prerender one level deep eg instantiate class however turned useful distinction really want whole tree rendered safely call get refs instance get also would nt called would nt fully initialized nt see way fully fix without making reentrant however big architectural change goes opposite direction want go fully async", "d": "7/2017"}, {"body": "sounds fine since use cases think fine get instance later ref certainly something warn community though libraries need updated bet huge amount wish way emit kind warning helpful error ca nt think since nt know return value used", "d": "7/2017"}, {"body": "thanks report would like send pr wording feel would appropriate", "d": "7/2017"}, {"body": "understand correctly gzips well huge problem think planned fix pretty sure related", "d": "7/2017"}, {"body": "repository react could please report create react app instead also need live example hard say went wrong without seeing thanks", "d": "7/2017"}, {"body": "lenanesg using old version imports react nt export anymore please upgrade latest stable release downgrade react stable branch", "d": "7/2017"}, {"body": "fixed", "d": "7/2017"}, {"body": "dont want return jsx component function export default function app return hello react class export default app extends reactcomponent render return hello wed jul pm \u5468\u5411\u6d9b notifications githubcom wrote want request feature report bug report bug current behavior component notfound react keep report error current behavior bug please provide steps reproduce possible minimal demo problem via similar template import react react export default function app return hello image image expected behavior report error versions react browser os affected issue work previous versions react react receiving subscribed thread reply email directly view github mute thread", "d": "7/2017"}, {"body": "already fix markdown", "d": "7/2017"}, {"body": "react supported version severe known issues please use bug fixed beta try", "d": "7/2017"}, {"body": "regards reactlib reactdomlib anymore even commonjs environments react reactdom precompiled single files flat bundles previously relied undocumented react internals nt work anymore let us know specific case issue try figure migration strategy relying monkeypatches react render suggestions make work used imports thank", "d": "7/2017"}, {"body": "maybe aickin comment feasibility integrating caching solution directly server renderer", "d": "7/2017"}, {"body": "initial react release mostly focused compatibility existing apps enable asynchronous rendering yet introduce optin async mode later react way manually enable asynchronous rendering beta", "d": "7/2017"}, {"body": "verkholantsev afaik option", "d": "7/2017"}, {"body": "trysound could tell option could tell direction start research", "d": "7/2017"}, {"body": "verkholantsev provide info enabling async think ready testing still experimenting internally", "d": "7/2017"}, {"body": "import synteticevent flat bundle", "d": "7/2017"}, {"body": "might interesting tried codebase using install package get error hmr one dependencies using works", "d": "7/2017"}, {"body": "import synteticevent flat bundle currently use case using yarn install package get error hmr one dependencies using npm works need details tell something wrong appreciate could provide reproducing project even fails yarn", "d": "7/2017"}, {"body": "gaearon currently use case ex want pass event parent toggle button want modify event pass parent", "d": "7/2017"}, {"body": "far everything runs smoothly save test cases rendered components depend results dependency errors like app built cra ejected appears place use enzyme tests run equivalent within jest using", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "react enable call api built package like http angular without force use staff like superagent axios", "d": "7/2017"}, {"body": "muhammedmoussa goal react react shipping builtin http client library", "d": "7/2017"}, {"body": "let keep discussion focused beta thanks", "d": "7/2017"}, {"body": "compiled list deprecations removed would helpful checklist upgrading related warning unknown attributes via whitelist still place upgrading start adding dom without warning", "d": "7/2017"}, {"body": "compiled list deprecations removed would helpful checklist upgrading think changes entry points eg shallow renderer test utils moved believe mentioned blog posts related warning unknown attributes via whitelist still place upgrading start adding dom without warning sort air right think make decision shipping next beta", "d": "7/2017"}, {"body": "flat builds interfere scope hoisting app bundlers wondering sure much gain presume bundler would figure statically parts react used app removed probably tall order", "d": "7/2017"}, {"body": "wmertens flat bundle scope hoisted continue hoist basically concatenating modules one file ensuring variable name overlaps fully compatible bundler", "d": "7/2017"}, {"body": "app built cra ejected appears place use enzyme tests run reactscripts test envjsdom coverage equivalent mount shallow within jest using worth enzyme supporting react like previous releases huge refactor underway includes support react", "d": "7/2017"}, {"body": "large application ran perfectly except unit tests depend looks like biggest blocker point", "d": "7/2017"}, {"body": "seems nt work correctly production mode dev works fine js const react require react const reactserver require reactdomserver const reactcreateelement div classname signlink id signlayoutlink style position absolute reactserverrendertostring typeerror function f b erenderdom erender eread objectt rendertostring contextifyscriptscriptruninthiscontext", "d": "7/2017"}, {"body": "server renderer nt yet support returning arrays strings components mean nt support root component ie ssr could really bad break array returns life ssr", "d": "7/2017"}, {"body": "large application ran perfectly except unit tests depend enzyme looks like biggest blocker point flarnie spoke leland enzyme afternoon seems like good spot release staying touch beta", "d": "7/2017"}, {"body": "server renderer completely rewritten offers streaming mode streaming mode specific nodejs ie use apis available node could work environments example people using reactjsnet reactrails react java", "d": "7/2017"}, {"body": "error hit moderately sized app points code open frame looks like reactmodal library lines exactly top file unstable api look tomorrow well might false positive update react reactdom look tomorrow see provide details great work yall", "d": "7/2017"}, {"body": "jlongster code screenshot nt beta stack frames cited must two copies reactdom one new one old might help find", "d": "7/2017"}, {"body": "ah ok thanks check tomorrow computer anymore", "d": "7/2017"}, {"body": "maybe aickin comment feasibility integrating caching solution directly server renderer dmitrif think certainly conceivable implement caching solution server renderer nt think amenable monkey patching renderer basically one file really important fork code hopefully consider contributing back also worth noting preliminary tests renderer faster renderer possible may much need caching", "d": "7/2017"}, {"body": "mean nt support root component ie ssr falconmick believe nt support anywhere tree right known issue believe means get fixed release anyone core team please feel free correct", "d": "7/2017"}, {"body": "think server browseronly apis nodestream browsernode apis naming entry points nt great may change final", "d": "7/2017"}, {"body": "aickin falconmick plan anyone wants work adding happily review pr", "d": "7/2017"}, {"body": "streaming mode specific nodejs ie use apis available node could work environments example people using reactjsnet reactrails react java streaming renderer indeed depend readable api node info streaming api check documentation however note underlying code renderer function output n bytes time could theory call stream api want see code uses function check implementation reactmarkupreadablestream proceedatyourownrisk kind thing though internal class reactpartialrenderer supported api could change moment", "d": "7/2017"}, {"body": "great bug able repro machine filed thanks", "d": "7/2017"}, {"body": "try react beta fiber reactnative project", "d": "7/2017"}, {"body": "aakashbapna instructions coming soon currently think build source try", "d": "7/2017"}, {"body": "also seeing issue regarding server production mode function", "d": "7/2017"}, {"body": "hi opened issue reactvirtualized repo thanks", "d": "7/2017"}, {"body": "also seeing issue comment regarding style server production mode fixed go next beta catch issues believe nt support anywhere tree right known issue believe means get fixed release open pr try react beta fiber reactnative project yet please see post react native follows different release cycle update beta future release already using alpha release yet using fiber", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "got unit tests test data returned reactredux conforms underlying component use use testing function directly anything could moving forwards replicate functionality", "d": "7/2017"}, {"body": "docs new edit", "d": "7/2017"}, {"body": "teasealancs got unit tests test data returned reactredux mapstatetoprops mapdispatchtoprops conforms proptypes underlying component something like trigger proptypes validation failure use output warning override tests throw unexpected errors", "d": "7/2017"}, {"body": "fair enough stubmonkey patch something fundamental leaves bit sour taste mouth", "d": "7/2017"}, {"body": "think actually necessary provides firstclass api running checks fact react uses look warning message get call directly says calling proptypes validators directly supported package use call mentioned proptypes readme absolutely need trigger validation manually call unlike validators function safe call production replaced empty function hope helps", "d": "7/2017"}, {"body": "spicyj right two versions react made sure everything next mostly working still hit error one case use reactmodal library try close modal errors line code error happening reason looks like null unfortunately created small test case try reproduce library works fine independently app nt know fault definitely worked sorry ca nt reproduce small test case wanted report bug case gives context possible bug", "d": "7/2017"}, {"body": "gaearon get introduced swear never saw message p", "d": "7/2017"}, {"body": "teasealancs think right always exist sorry", "d": "7/2017"}, {"body": "fair enough started originally", "d": "7/2017"}, {"body": "jlongster chance could put breakpoints around assignments figure becomes", "d": "7/2017"}, {"body": "errors packages trying use beta releases addons libs", "d": "7/2017"}, {"body": "gaearon found function reactmodal calling returns null stepped call found returning null right stack trace helps checking see child property basically returning returns null reason hope nt false positive wasting time", "d": "7/2017"}, {"body": "gaearon jlongster bet caused changes oh slow", "d": "7/2017"}, {"body": "wbeard reactlib problems reactaddons packages trying use beta releases addons libs packages compatible react already versions use internals think try update addons incompatible react eg need stop using", "d": "7/2017"}, {"body": "jochenberger think issues related code rewritten scratch past issues probably apply jlongster thanks useful let take look probably ask info screenshots want mention longer term going away takes place solves timing issues like understand encounter bug clear yet", "d": "7/2017"}, {"body": "gaearon think actual bug ever want even remotely control machine take look happy let", "d": "7/2017"}, {"body": "gaearon thanks addons temporarily incompatible deprecated", "d": "7/2017"}, {"body": "wbeard addons specifically info happy answer specific questions thread jlongster yes would great free hop dms", "d": "7/2017"}, {"body": "gaearon sorry precise asking using following addons read issue get speed see needs cut", "d": "7/2017"}, {"body": "yes stop using rest keep working plan yet likely time", "d": "7/2017"}, {"body": "worries used devonly middleware come different strategy likely using marks", "d": "7/2017"}, {"body": "wbeard fwiw react beta always emits calls dev capture using performance observer api see proof concept", "d": "7/2017"}, {"body": "gaearon think behavior continue future releases", "d": "7/2017"}, {"body": "wbeard behavior", "d": "7/2017"}, {"body": "gaearon always emits performancemark performancemeasure calls dev", "d": "7/2017"}, {"body": "know start people get inconvenienced add optout api like try keep default", "d": "7/2017"}, {"body": "zyzski open react devtools use search find indeed html element maybe intended use", "d": "7/2017"}, {"body": "lestad ex want pass change event parent toggle button advantage using fact would recommend pass event objects around get pooled read data early pass plain object representing data care", "d": "7/2017"}, {"body": "update published fixes ssr crash please give ssr another test round", "d": "7/2017"}, {"body": "true use reacthotloader latest version react get place obviously reacthotloader uses deprecated references working beta though wondering", "d": "7/2017"}, {"body": "coldi yes rhl depends internal modules exist anymore", "d": "7/2017"}, {"body": "gaearon want emulate event", "d": "7/2017"}, {"body": "lestad specific reason want emulate event could always build mock event object fields intend consume", "d": "7/2017"}, {"body": "reelgood recently switched react beta prod yet experience irregularities yet awesome work react team", "d": "7/2017"}, {"body": "looking forward making switch awesome job", "d": "7/2017"}, {"body": "note still known issues top", "d": "7/2017"}, {"body": "testing working well us main issue lack community solutions documentation around warnings displayed warnings nt provide enough information understand occurring solve posted warning encountered stackoverflow expect server html contain div gt", "d": "7/2017"}, {"body": "support older browsers devices may yet provide natively eg mean lt", "d": "7/2017"}, {"body": "davidfurlong means server rendered html matching markup client create small reproducing example look", "d": "7/2017"}, {"body": "gaearon ah upgrade similar errors react gave first two places stringifyed client server renders differed found errors past insufficient debugging code renders differ one point even modified local compiled react source code truncate diffs sometimes seems necessary client server renders differ libraries nt support ssr thus wrap hoc renders null server thus expect expected behaviour bug", "d": "7/2017"}, {"body": "davidfurlong issue better ssr validation warnings might make final release libraries nt support ssr also render first render eg js componentdidmount thissetstate hasmounted true render return hello thisstatehasmounted amp amp ideal works around problem", "d": "7/2017"}, {"body": "render null server need initial render client could use eg reduxmediaquery manage fri jul pm david furlong notifications githubcom wrote gaearon ah upgrade react similar errors gave first two places stringifyed client server renders differed found errors past insufficient debugging code renders differ even one point modifying local compiled react source code truncate diffs sometimes seems necessary client server renders differ libraries nt support ssr thus wrap hoc renders null server receiving mentioned reply email directly view github mute thread", "d": "7/2017"}, {"body": "support older browsers devices may yet provide natively eg mean lt graingert ie basic support require polyfillying react purposes incorrect let know update instructions top", "d": "7/2017"}, {"body": "anyone else seen one using reactstraps popovers", "d": "7/2017"}, {"body": "please provide small example reproducing", "d": "7/2017"}, {"body": "gaearon one better make staging branch app give", "d": "7/2017"}, {"body": "look stack trace shows files causing issue make sure one one", "d": "7/2017"}, {"body": "gaearon meh try clean per chance super easy way im aware", "d": "7/2017"}, {"body": "rm nodemodules install check fri jul pm clark tomlinson notifications githubcom wrote gaearon meh try clean per chance super easy way im aware receiving mentioned reply email directly view github mute thread", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "actually package im using requires react directly making pr move peer deps thanks pointers though guys", "d": "7/2017"}, {"body": "either confused intimidated bullet point states safe rerender container modified something react worked previously cases never supported explicit error thrown mean guys actively allocating resources validate dom modified something like jquery plugin", "d": "7/2017"}, {"body": "wiredearp means something like browser extension mutates dom outside react awareness case react ca nt function correctly react explicitly errors rather trying possibly failing work warns potentially able function correctly", "d": "7/2017"}, {"body": "bvaughn sounds like people need defend jquery extensions shadow dom similar", "d": "7/2017"}, {"body": "bvaughn wiredearp assuming bullet point refers actually warning error also specifically looks whether root element rendered react container pass example mutated container element react would warn nt affect manual dom mutations may leaf nodes example", "d": "7/2017"}, {"body": "note bvaughn example also nt process second call even though issue warning erroring processing update", "d": "7/2017"}, {"body": "right aweary thought throwing error rather warning cc flarnie context", "d": "7/2017"}, {"body": "aweary fair amount discussion agree behavior either throw error succeed way users expect reach agreement adding warning better leaving silent failure add item revisiting", "d": "7/2017"}, {"body": "observed application reactdomrender called componentdidmount return null instead reference component expected change think presented release notes", "d": "7/2017"}, {"body": "make sure safe side render empty using react leaf node populate div using nonreact plugin still supported", "d": "7/2017"}, {"body": "arendjr render empty using react leaf node populate div using nonreact plugin still supported yes still supported like strategies document supported fix code", "d": "7/2017"}, {"body": "abramobagnara observed application reactdomrender called componentdidmount return null instead reference component expected change think presented release notes list known issues since closed wontfix added list breaking changes", "d": "7/2017"}, {"body": "react finally keep native change events even inconsistent browsers honestly really annoying", "d": "7/2017"}, {"body": "cases error null reported instead real error bvaughn gaearon case errors unless run production build production build works expected development error always stacktrace correct though reproducible minimal example note branch", "d": "7/2017"}, {"body": "michalzalecki could serving react script different host eg cdn would problem", "d": "7/2017"}, {"body": "caub react finally keep native change events even inconsistent browsers plan something like fit might deprecate change behavior", "d": "7/2017"}, {"body": "gaearon saw single file build served locally", "d": "7/2017"}, {"body": "gaearon ah great nice kind stuff", "d": "7/2017"}, {"body": "gaearon installation instructions updated using cdn point cdnjs instead unpkg backends hosted cloudflare really nobrainer documentation update benefits general community moved official js apis cdnjs unpkg standardized consistent cdn location documentation ensures cache remains hot users cdnjs support sri unpkg maintains parity standards additionally since cdnjs standard mainstream js libraries using cdnjscloudflareorg allows reducing headers csp also currently alphasbetas published cdnjs team member update config get working", "d": "7/2017"}, {"body": "virgofx looks like cdnjs currently pulls contain alphasbetas someone might want update cdnjs configuration pull npm rather reactbower repo cdnjs opensource communitymaintained anyone send pull request update react cdnjs config example cdnjs config pulls npm note property", "d": "7/2017"}, {"body": "yes see get cdnjs updated hopefully get documentation updated point well know include cjs umd folders", "d": "7/2017"}, {"body": "general community moved official js apis cdnjs unpkg standardized additionally since cdnjs standard mainstream js libraries using cdnjscloudflareorg allows reducing headers csp context see one could standard third party cdns anything unpkg serving contents npm registry primary distribution channel react consistent cdn location documentation ensures cache remains hot users believe documentation internally consistent use unpkg everywhere cdnjs support sri unpkg maintains parity standards sure standard parity referring welcome raise issue sri unpkg repo find important personally experienced issues sri sure important use docs also currently alphasbetas published cdnjs team member update config get working think would best bring cdnjs maintainers like see alphas react putting cdnjsspecific things react files cdnjs welcome use information npm releases like unpkg today thankful contribute make work said want thread turn discussion different cdns welcome raise another issue feel strongly let keep focused reporting issues trying react beta applications libraries", "d": "7/2017"}, {"body": "putting cdnjsspecific things react packagejson files configured cdnjs end changes required react side", "d": "7/2017"}, {"body": "might consider linking raf example full requestanimationframe polyfill used previously without issues setup requires adding following next map set polyfill imports", "d": "7/2017"}, {"body": "extra work required get react beta cdnjs exactly created unpkg first place zero config let package authors focus improving libraries instead configuring cdns unpkg currently serves requests per day react particular sure cache always hot sri support get added soon possible first time anyone asked", "d": "7/2017"}, {"body": "mjackson extra work required get react beta cdnjs extra work onceoff configuration someone needs update cdnjs load react npm rather bower repo configured cdnjs automatically grabs packages npm soon published", "d": "7/2017"}, {"body": "extra work onceoff configuration someone needs yep thing referring someone publishes lot packages npm work trying avoid unpkg", "d": "7/2017"}, {"body": "mjackson unpkg definitely useful convenient appreciate effort helping community know bunch github threads mention sri last year concern lot transition cdnjs regardless backend still cloudflare really nt matter end thus technical standpoint differences cdnjs unpkg provider cloudflare cloudflare modification header cache expiration days days sri support api web sts support xcontenttype extra headers note yes sri needs api support web ui support backend changes allow buidci fetch values added projects htmlasset refs processing updating config cdnjs options available react team wants move documentation reference", "d": "7/2017"}, {"body": "virgofx read sri spec morning afaict unpkg nt actually need anything support sri sri integrity resource calculated browser see matches value attribute elements words whether use sri completely client use following tags load react unpkg right using sri html also see use working demo one thing guess could make easier people would include readymade tags already include sri value people nt calculate nothing preventing react website including attribute tags use unpkg", "d": "7/2017"}, {"body": "let keep future comments focused react beta interesting discussion though happy continue another issue", "d": "7/2017"}, {"body": "particularly interested hearing performance differences notice nt expect massive changes would love know improvements regressions please report finished installing seeing reduction serverside rendering response times app depending page thanks hard work", "d": "7/2017"}, {"body": "applies documentation especially first paragraph overview short remark page would helpful well", "d": "7/2017"}, {"body": "srittau would like send pr making clearer docs", "d": "7/2017"}, {"body": "react component lifecycle hooks synchronous nt support async hooks rather nt block way fiddle assumes working designed still perform async operations rendering anything meaningful component want although probably things since may called components never end mounting see explanation", "d": "7/2017"}, {"body": "bvaughn thanks", "d": "7/2017"}, {"body": "modified ran would end new copy reactnativespinkit without modifications correct way fix warning would file issue pull request asking release update npm change described case looks like someone already done see issue pull request going close issue nt require action react team", "d": "7/2017"}, {"body": "sorry right however tried running command still produced error even though changes certainly place file", "d": "7/2017"}, {"body": "possible message caused another lib sure", "d": "7/2017"}, {"body": "according logs reactnativespinkit", "d": "7/2017"}, {"body": "personally nt think needs react docs least syntax highlighters like babel plugin sublime nt handle nested elements like without wrapping atom seems okay though nt strong feeling defer others", "d": "7/2017"}, {"body": "also nt feel important enough document note already document pattern form omits curlies", "d": "7/2017"}, {"body": "makes sense thanks", "d": "7/2017"}, {"body": "basically want get rid library move functionality things getting hard read declare component class name creating component", "d": "7/2017"}, {"body": "hi works one maybe two elements need two code gets hard read well mention find names variables basically meaning react currently support adding middleware core need modified thu jul ian howell notifications githubcom wrote basically want get rid classnames library move functionality react things getting hard read declare component class name creating component const xclassname classnames foo bar bars foo return receiving authored thread reply email directly view github mute thread gt victor barbu", "d": "7/2017"}, {"body": "could give example middleware could work", "d": "7/2017"}, {"body": "well honestly nt know codebase react could nt opinion know need", "d": "7/2017"}, {"body": "meant could give example would use would want implemented", "d": "7/2017"}, {"body": "well mentioned types accept", "d": "7/2017"}, {"body": "problem baking react third party components need understand example wants add class keeping helper separate keeps app control turn string baking reactdom makes hard libraries manipulate still passed around", "d": "7/2017"}, {"body": "solution proposing also accepts classname string change would add behavior change current one thu jul dan abramov notifications githubcom wrote problem baking react third party components need understand example wants add bootstrapbutton class keeping helper separate keeps app control turn string baking reactdom makes hard libraries manipulate classname still passed around receiving authored thread reply email directly view github mute thread gt victor barbu", "d": "7/2017"}, {"body": "change would add behavior change current one nt change behavior classname dom nodes intermediary components gaearon pointing example lets look implementation would look safe currently everyone assumes string proposal would mean case may string object array objects strings assuming copy api completely owner needs check type adding class", "d": "7/2017"}, {"body": "ok see point would possible convenience writing less code instance component like proposing convert classname string componenta constructor sees thu jul jason quense notifications githubcom wrote change would add behavior change current one nt change behavior classname dom nodes intermediary components gaearon pointing example lets look implementation would look const button classname props gt safe currently everyone assumes classname string proposal would mean classname case may string object array objects strings assuming copy classnames api completely button owner needs check type classname adding class receiving authored thread reply email directly view github mute thread gt victor barbu", "d": "7/2017"}, {"body": "would conversion happen", "d": "7/2017"}, {"body": "maybe need", "d": "7/2017"}, {"body": "previously reactdomrender would return top level component longer case impression return value still works said component never passed callback referring argument passed mostly historical curiosity would write code either still work bit future proof flexible eg lets access nested components hope helps", "d": "7/2017"}, {"body": "gaearon thank answers true still returns component eslint rules place throw warnings used fashion since future proof suppress manually optimal able pass receive instance component already probably use callback mentioned function rendersomething instance container gt return new promise resolve reject gt try reactdomrender instance container function resolve catch e reject e rendersomething container gt one reference component scenario need tests like avoid extra boilerplate callback gem work arrow functions though", "d": "7/2017"}, {"body": "eslint rules place throw warnings used fashion since future proof enforcing rules fb codebase may long time actually deprecate return value ever sure reasonable keep lint rule enabled codebase causing troubles think come convenient api actually decide deprecate return value ever one reference component scenario need tests like avoid extra boilerplate would recommend keep using return value even eventually deprecate product code pretty sure keep around tests always run synchronously maybe could turn lint rule tests", "d": "7/2017"}, {"body": "gaearon see impression critical also enabled default seems overly pushing move away using fashion anyway going disable corresponding lint rule move thanks", "d": "7/2017"}, {"body": "think time thought would go away sooner sticking even slightly discouraging product code", "d": "7/2017"}, {"body": "hmm seems like spoke soon case seems like would best solution able pass ref receive instance component already probably use callback mentioned minor technical correction receive element instance instance want get access receive element clone different ref js function clonewithref element newref const oldref elementref return reactcloneelement element ref value typeof oldref function oldref value newref value const originalelement could argument const element clonewithref originalelement inst gt inst something component reactdomrender element container", "d": "7/2017"}, {"body": "tell use instance tests usually tests done wrapper eg enzyme calling methods", "d": "7/2017"}, {"body": "ui component uses events need plug dom testing setup let container function renderintodocument element container documentcreateelement div documentdocumentelementappendchild container return reactdomrender element container teardown aftereach gt container reactdomunmountcomponentatnode container container null something like could actually pass props assume change accessing would easy without need clone new ref", "d": "7/2017"}, {"body": "hmm find via advantage via react", "d": "7/2017"}, {"body": "gaearon actually never thought given rendering may asynchronous best way go add use callback notified element rendered kind lookup either using dom query directly via", "d": "7/2017"}, {"body": "gaearon thanks helping consider solved given worse case always clone element new ref really easiest render component inside render function simply pass props arguments need override ref via cloning whatsoever ie", "d": "7/2017"}, {"body": "given rendering may asynchronous best way go add ref use reactdomrender callback notified element rendered yep", "d": "7/2017"}, {"body": "reactdomclientinjection required reactdomserverentry event plugin loaded line validate passed warn think might require reactdomclientinjection reactdomserverentry load event plugin solve problem add follow code reactdomserverentry", "d": "7/2017"}, {"body": "oh see nt want client injection keep server renderer small realize needs event system dev interesting", "d": "7/2017"}, {"body": "injection event system plugin eventpluginhubinjectioninjecteventpluginsbyname simpleeventplugin simpleeventplugin enterleaveeventplugin enterleaveeventplugin changeeventplugin changeeventplugin selecteventplugin selecteventplugin beforeinputeventplugin beforeinputeventplugin found import much less use module ssr", "d": "7/2017"}, {"body": "gzhappysky thanks diagnosing comes think fix", "d": "7/2017"}, {"body": "nt sound related react would suggest ask elsewhere eg stackoverflow nt think work around something like react level since problem browser dom implementation check third party component anything would recommend ask component completely remove check instanceof check even expected work cases example app working across iframes global element", "d": "7/2017"}, {"body": "work js let instance const tree renderercreate use instance", "d": "7/2017"}, {"body": "gaearon thank", "d": "7/2017"}, {"body": "something like setstate thisstate k whatever mean root indexing array k points indexing value stored index array repeat process", "d": "7/2017"}, {"body": "worked use worked thank", "d": "7/2017"}, {"body": "hzwmyproject mutate state better help use less nested state also issue tracker please use stackoverflow questions javascript", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "worked thx trysound another problem like change k", "d": "7/2017"}, {"body": "similar array map method", "d": "7/2017"}, {"body": "helped thx", "d": "7/2017"}, {"body": "hi maxlength works browser inputs better worse react nt anything passes attribute input prevents user typing paste specific length setting value programmatically", "d": "7/2017"}, {"body": "remove properties input work fine moment set properties making react controlled component charge making validations bug side note want go ahead validation simply add call string value setstate way chop input every time type effectively desired validation", "d": "7/2017"}, {"body": "hey odykyi request made facebookjsx requires change jsx spec react utilizes note looks like already open issue request additional feedback clarifications request please direct open issue thanks", "d": "7/2017"}, {"body": "hello suppose using module bundler presumably webpack uses css loader handles type imports normal webpackdevserver bundles whole application exposes bundlejs file bundlejs time visiting page webpack already bundled code triggered cssloader extracts css imports injected page answering question please provides us context modulebundler using example", "d": "7/2017"}, {"body": "using create react app yes css code files concatenated one css file production hope helps question module bundler presumably webpack rather react use issue tracker bugs feature requests react close suggest ask questions like stackoveflow people see", "d": "7/2017"}, {"body": "thanks mehdialouafi used webpack answer helpful way add remove css visiting leaving page", "d": "7/2017"}, {"body": "might help make updates faster cost init time know metric important however plugin consistently buggy babel think babel fixes known issues yet use seems like fine thing note relies symbol polyfilled seems like good idea dangerous code relies enumerating logic run make sure depend code use lint rules prevent adding code seems okay changes semantics somebody could get class optimization breaks code generally unsafe used lot caution think anything similar naming different things hope helps", "d": "7/2017"}, {"body": "thank much reply helps lot transformreactpureclasstofunction mentioned think anything purecomponent similar naming different things transformreactpureclasstofunction benefit except said unsafe used lot caution know function always rerender like component without override willcomponentupdate tell pure component semantics perspective understanding may right say given understanding would use purecomponent instead function cause tell pure component also give performance benefit shallow compare question comes back transformreactpureclasstofunction benefit could say use function", "d": "7/2017"}, {"body": "say given understanding would use purecomponent instead function cause tell pure component also give performance benefit shallow compare data structured way shallow comparison often returns true tree deep yes might better case build whole app though", "d": "7/2017"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources case enough information help provide full reproducing example someone might able take look case bug tracker best place answers get lost", "d": "7/2017"}, {"body": "verified issue occur without react", "d": "7/2017"}, {"body": "yes see jsfiddle", "d": "7/2017"}, {"body": "implementation detail may change future versions current release batched together inside react event handler react batches setstates done react event handler applies exiting browser event handler current version several setstates outside event handlers eg network responses batched would get two rerenders case exists temporary api force batching write calls batched expect remove api future instead batch everything default hope helps", "d": "7/2017"}, {"body": "couple issues would overcome make possibility host specific whereas generic would need convert injected reconciler mounting would probably really tricky error prone react side user side reactdom components return would return components relatively cheap since return instance turn much expensive lookup call could cause performance issues difficult fix opaque developer writing sfcs consider explain well context reasoning behind", "d": "7/2017"}, {"body": "could exist persistent cache property fiber copied diff cost would initial findhostnode call initial tree creation say would highest child node null could text node perhaps dev warning sfc nt return root element add span something stateless nt prevent us able access rendered output orthogonal think", "d": "7/2017"}, {"body": "goal functional components able create fibers future cases think store data associated functional components", "d": "7/2017"}, {"body": "gaearon data stored somewhere tree though right otherwise would nt able diff occurred supporting callback refs sfc would help solve problem since time lookup would need happen initial mount consumer handle reference", "d": "7/2017"}, {"body": "otherwise would nt able diff react diff composite props diffs props host components eg imagine function calls store data still allow express thing", "d": "7/2017"}, {"body": "gotcha callback ref still solve issue believe since point time responsibility maintaining reference consumer", "d": "7/2017"}, {"body": "supported element chrome warning notifies browser simply nt support says react nt ca nt anything", "d": "7/2017"}, {"body": "nt think react issue chrome nt yet support time element", "d": "7/2017"}, {"body": "linking date time input types include timeelement", "d": "7/2017"}, {"body": "linking date time input types include timeelement woops says basic support since chrome", "d": "7/2017"}, {"body": "seems like wrong verify browser becomes htmlunknownelement", "d": "7/2017"}, {"body": "looking page", "d": "7/2017"}, {"body": "syranide someone changed wow timing anyway closing issue warning quite annoying though", "d": "7/2017"}, {"body": "warning generally useful catches common beginner mistake using lowercase elements warning appear every render appears every render deduplicate guess could also special case time since going ship chrome people commonly use assuming works want submit pr consider", "d": "7/2017"}, {"body": "warning generally useful catches common beginner mistake using lowercase elements true warning learnt something new warning appear every render appears every render deduplicate appears every render want submit pr consider guidance files start looking guess could also special case time could elaborate mean", "d": "7/2017"}, {"body": "search codebase fragments warning text find emitted special casing mean mute warning specifically", "d": "7/2017"}, {"body": "nt think react issue chrome nt yet support time element groupsgooglecomachromiumorgforumm noticed couple months ago mentioned twitter time someone pointed chromium issue says nt plans implement moment edit looks like dan pr links newer threads probably safe ignore comment", "d": "7/2017"}, {"body": "fix", "d": "7/2017"}, {"body": "hey far tell seeing expected behavior objects arrays create local variable creating copy value creating another reference original value array nt matter mutate array using reference still mutating exact js thisstatetestsplice since reference value case removing first element array using call trigger new render render new value even though nt call update value via mutation typically recommend mutating lead confusing behavior use nonmutative method like create local copy instead use update value example hope helps", "d": "7/2017"}, {"body": "thank much nt know javascript handles array object assignments references time thinking react issues thank much clearing workaround suggested", "d": "7/2017"}, {"body": "try regular js also show issue react however shows put font family name quotes mdn font family names containing whitespace quoted hope helps", "d": "7/2017"}, {"body": "thanks helps although putting press start without quote works even space different tests wont work without quote space number anyway work around thanks", "d": "7/2017"}, {"body": "reproduce umd locations changed would", "d": "7/2017"}, {"body": "robbertbrak use jsfiddle loads starting point try reproduce later well also key event test site great thanks sharing", "d": "7/2017"}, {"body": "cc flarnie spicyj also might context", "d": "7/2017"}, {"body": "gaearon yes still reproducible react next jsfiddle get issue sorry horrible code fiddle seems jsfiddle babeljsx nt work well together aweary glad help actually got site hellendag referred", "d": "7/2017"}, {"body": "great resource handful open issues related composition events something need look good candidate dom fixtures thanks bringing attention", "d": "7/2017"}, {"body": "additional thanks helpful draftjs project also open issues related composition korean ime particular could hard track issue actually react", "d": "7/2017"}, {"body": "would great way simulate dom fixtures type special layouts", "d": "7/2017"}, {"body": "nt good way simulate without sidestepping exact thing want test first place cc msmania might interested", "d": "7/2017"}, {"body": "could use language keyboard settings osx simulate input settings use", "d": "7/2017"}, {"body": "browser provides rather different events depending browseroskeyboard combo way test properly get real copy set keyboard input proper language example past broken korean input chrome windows trying fix korean input chrome mac would think", "d": "7/2017"}, {"body": "yes gets worse apparently even versions behave example made screenshot see emitted wrong korean character event luckily seems microsoft fixed later versions similarly used bug moved cursor position right event typing korean recently fixed well means hard draftjs right thing relies correct javascript events fired workarounds appropriate one browserosime may work combinations suddenly stop working", "d": "7/2017"}, {"body": "thanks spicyj looping discussion think one know issues let see", "d": "7/2017"}, {"body": "also confirmed data property composition end wrong issue fixed family mentioned comment bug particular issue break behavior react draftjs actual issue know type dufma draft editor text \uc5ec\ub974\ub984 committed expected text \uc5ec\ub984 issue still happens root cause issue fallback logic react go well korean ime fallback logic pick element text compositionstart cache pick element text compositionend diffing cached value build beforeinput event diffed character scenario typing dufma korean ime text compositionstart \u3147 text compositionend \uc5ec\ub974 thus diffed result \uc5ec\ub974 result beforeinput event fired text \uc5ec\ub974 though second character \ub974 committed react use data property composition events probably react trust", "d": "7/2017"}, {"body": "na\u00efve approach would automatically apply html attribute props composed component outermost container probably ideal better solution would automatic prop passthrough default allow developers override specific props see fit benefits twofold honestly propagating props think send pr libraries default maybe nt allow customization purpose think something better handled component creators side rather core react imo passing automatically html attributesprops components default solution first know specific html attributesprops react keep somekind whitelist html props know using nt want keep depending whitelist error prone finally whole point react isolation component outside component restrictive permissive depending use case component defined something solved already component authors without involving core react", "d": "7/2017"}, {"body": "agree bjrmatos example would pass second react pass props would first would class", "d": "7/2017"}, {"body": "passing props core react think would adding special domspecific behavior make sense react native react vr might seem like convenience tricky debug also clear way always tell props example element created outside render method belong component would confusing hoisting element outside component would change props encourage file issues specific libraries pointed commenters congratulations first issue filed close reasons happy answer questions", "d": "7/2017"}, {"body": "thank much reading commenting helped understand better tradeoffs convention configuration nt use react anything web point platforms eg vr particularly important also heartened issue question legitimate sense considered good practice allow bjrmatos definitely send prs libraries know ton ones think agree convention unless said good reason gaearon nt really found resources including official react docs mention important developer usability think worth official stance perhaps section docs best practices creating components thirdparty consumption wondering best place information obviously could write blog post wo nt reach many people", "d": "7/2017"}, {"body": "arguments libraries might want expose way change class name breaks encapsulation makes slightly fragile example less safe library change css styles might unexpectedly clash styles applied via provided class name argument might consumer always able customise third party control appearance sure agree let say true case limited root element believe might necessary customise element component root one could make class names configurable lot props couples third party component callsites strongly html structure seen implementation detail app relies see clear answer tradeoffs believe best let library authors navigate personally opinion customising class name great api would much prefer library offers flexibility via props eg consistent appearance rely without coupling internal dom structure", "d": "7/2017"}, {"body": "gaearon fair enough thank detailed reply guess end day need attribute badly enough wrap component componentelement said attribute extra overhead small compared flexibility mentioned", "d": "7/2017"}, {"body": "yep generally feel", "d": "7/2017"}, {"body": "done next major release react called fiber requested features issue repo good read", "d": "7/2017"}, {"body": "closing duplicate", "d": "7/2017"}, {"body": "yep known limitation fixed would interested implementing", "d": "7/2017"}, {"body": "quite sure yet go code give shot", "d": "7/2017"}, {"body": "hi gaearon interested implementing", "d": "7/2017"}, {"body": "either could try send pr would great code reactpartialrenderer", "d": "7/2017"}, {"body": "gaearon tusharsingh completed send pr view online demo address", "d": "7/2017"}, {"body": "cool happy review pr", "d": "7/2017"}, {"body": "gaearon please review pr completed", "d": "7/2017"}, {"body": "fixed", "d": "7/2017"}, {"body": "removed svg injection locally compared build sizes looks like save around gzipped size reduction nt think svgspecific files maybe svgspecific config files could extracted", "d": "7/2017"}, {"body": "thing feels would add api sake attributes still working reason exist fileinit size decrease clear people use svg react get real benefits camel casing dom wrapping components argument composites want read compelling svg wrappers seen wild provide drastically different apis raw svg clear common would read svglike property composite practice", "d": "7/2017"}, {"body": "agree feels like weird api hurts adoption use thirdparty libraries svg components since wait dependencies update release think main issue namespaced attributes nt think anything specifically advantageous attributes least nothing svg specific namespaced attributes like ca nt used directly could handle separately think could still get rid least significantly reduce either continuing special case namespaced attributes providing another way define namespaced attributes", "d": "7/2017"}, {"body": "clear common would read svglike property composite practice common use never pass anything like usually comes abstract record data point might also want use table list something ca nt speak everyone would wager usage low maybe ask could handle separately think could still get rid least significantly reduce svgdompropertyconfig either continuing special case namespaced attributes providing another way define namespaced attributes seems like reasonable tradeoff short updating way jsx works hands tied anyway would favor keeping camelcase names namespaced properties also nt appear properties single word name etc least support presently voting vote approach", "d": "7/2017"}, {"body": "regards namespaced properties jsx already supports fine know projects support inferno svg used typed current way handled react instead allowed others import current way optionally react otherwise support default behaviour", "d": "7/2017"}, {"body": "sure mean namespaces supported aware jsx support namespaces", "d": "7/2017"}, {"body": "gaearon supported need enable react transform plugin", "d": "7/2017"}, {"body": "oh think see mean", "d": "7/2017"}, {"body": "suggest use nt anything except possible eventually remove method altogether suggest use gives flexibility including rendering anywhere like help", "d": "7/2017"}, {"body": "yes definitely thank", "d": "7/2017"}, {"body": "unfortunately expected workaround able explicitly unmount calling new portal api coming react wo nt issue", "d": "7/2017"}, {"body": "yes", "d": "7/2017"}, {"body": "clear react decide order actually call render functions need rely displayed order specify", "d": "7/2017"}, {"body": "please follow discussion", "d": "7/2017"}, {"body": "reactdomreactnativeactiveupdates stable api annoying thing apis always hang renderers universal components ca nt use easily without importing renderers dependency injection something want solve", "d": "7/2017"}, {"body": "would kind difficult implement isomorphic api presumably multiple renderers need add listeners growing set flush together think least requires global mutable state might unnecessarily bloatedslow talked wo nt actually problem used add batching used get less batching use case integrating imperative apis directly directly animation apis controlled components know environment used actually bad idea use generic fluxlike libraries async mode already batched default want use indicator library nt support async mode probably redesigned support legacy thing case downside react renderer implementation longer swappable", "d": "7/2017"}, {"body": "stable activeness call expected stable asyncness subtree flag expected unstable", "d": "7/2017"}, {"body": "makes lot sense thanks long compat mode effectively noop takes meaning opt async", "d": "7/2017"}, {"body": "long compat mode activeupdates effectively noop almost sync mode effect b c batched async mode effect b c task priority", "d": "7/2017"}, {"body": "specifically guarantees flush task work ends unlike nested batchedupdates nt noop", "d": "7/2017"}, {"body": "discussed offline bit ideal behavior b c flush means need multiple levels activeness kind like need multiple levels hiddenoffscreen priority disallow nested since likely edge case", "d": "7/2017"}, {"body": "acdlite example nt nested outside might common", "d": "7/2017"}, {"body": "true common case event handlers right active default anyway nt necessary", "d": "7/2017"}, {"body": "hm active right maybe add list sure eg might need sync default", "d": "7/2017"}, {"body": "oh thought yeah figure", "d": "7/2017"}, {"body": "idibidiart could please provide information request use case", "d": "7/2017"}, {"body": "anymore info breaks imagine instances vs dom node check failing tough guess without repro", "d": "7/2017"}, {"body": "got reports production invariant triggering hard say exactly passed try reproduce tomorrow", "d": "7/2017"}, {"body": "first step would mind rewriting terms public api example instead calling function directly could call make assertions dom getting ref input way likely find broke fiber", "d": "7/2017"}, {"body": "left questions", "d": "7/2017"}, {"body": "definitely rewrite tests though intents purposes changeeventplugin tests already say terms public api visible effect whether change events fire per value", "d": "7/2017"}, {"body": "hmmm see thinking making tests still test implementation details like wrappers use sure correct thing passed argument maybe wo nt help already cover scenarios", "d": "7/2017"}, {"body": "well ca nt hurt p see uncovers anything anyway", "d": "7/2017"}, {"body": "tracked cause", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "gaearon take one done tonight tomorrow afternoon use jsdelivr since cdnjs nt support", "d": "7/2017"}, {"body": "use consistency docs honest think might easier since already codepens", "d": "7/2017"}, {"body": "vinnymac could use unpkg use issue template jsfiddle keeping consistent would nice edit gaearon beat", "d": "7/2017"}, {"body": "gaearon yea good idea saw low hanging fruit thought would cut time feel free", "d": "7/2017"}, {"body": "problem fork fiddles send prs update every link easy get wrong accident", "d": "7/2017"}, {"body": "one", "d": "7/2017"}, {"body": "heard fb interested pursuing draconian possibilities bsdpatents license true actually little difference bsdpatents apache license relicensing make little pragmatic difference facebook change however would make much easier licensecautious downstreamers please consider making change", "d": "7/2017"}, {"body": "lacker longer works facebook little trouble figuring would best route look monday thanks raising", "d": "7/2017"}, {"body": "rocksdb dual apache gpl licensed", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "instead switching license apache license liked many people incompatible andor duallicensing gpl mess would facebook consider changing patent license make termination clause look like patent license grant institute patent litigation entity including crossclaim counterclaim lawsuit alleging work contribution incorporated within work constitutes direct contributory patent infringement patent licenses granted license work shall terminate date litigation filed would satisfy asf people voice opinion company software projects avoid dependencies use relicensing away bsdlike license prefer asf would rewrite software use dependencies lawyers say ca nt use instead persuading every project ca nt use change license", "d": "7/2017"}, {"body": "asking project would consider changing license apache couchdb others switch away react rather lot work real gain nt choice changing license simple rocksdb completed change day", "d": "7/2017"}, {"body": "asking project would consider changing license understood point instead changing license would asf facebook work arrive acceptable patents file btw way related react project facebook inc apart user", "d": "7/2017"}, {"body": "great question need bod asf legal answer point", "d": "7/2017"}, {"body": "dchest specifically company finds necessary avoid already present react license existing patents file point consternation many asf think point request alleviate licensing concerns cause unnecessary roadblocks adoption", "d": "7/2017"}, {"body": "nevets due oracle america inc v google inc avoid discussing specifics licensing decisions public email leave brave souls andor lawyers decided voice opinion saw opposing opinions posted fact issue concerns changing status quo satisfy one organization needs sure others relicensing license written organization sure osiapproved widely used history alienating open source free software projects nt want happen react trying see middle ground changing patents file way satisfy facebook asf", "d": "7/2017"}, {"body": "many people nt use react immutable etc patents file simplest solution would delete facebook repos", "d": "7/2017"}, {"body": "modified gpllike sharealike patents clause", "d": "7/2017"}, {"body": "recent renewed awareness medical research institutes open source license compliance legal review open source software compliance often expressly asks apache license precisely competently constructed includes equitable patent grants since us based universities rely upon patent licensing part legislatively mandated technology transfer initiatives growing far cautious due diligence reason universities software written react may shunned existing projects using react software may asked remove react software software dependency please strongly consider proposal since rexdb work used major universities wish rework use react alternative", "d": "7/2017"}, {"body": "clarkevans thanks contribution discussion said purpose review ensuring compliance protecting lawsuits worthy goal organization doubt effect licenses open source ecosystem considered think effect important simple bsdlike licenses known cause less friction open source projects fact facebook granting additional patent rights separately copyright license causes problems organizations think worth considering fixing problem patent grant instead switching license incorporates example patent license think might work everyone", "d": "7/2017"}, {"body": "dchest lawyer sure consider bsd license independent additional patent grant intent patents file changes intent even facebook blog refers license bsdpatents use standard bsd license paired additional patent grant open source projects brevity call combination facebook bsdpatents license complicated recent revelation gpl enforceable contract please note sufficient dissent open source initiative approved open source license hence nt think view bsd independently additional patent license added since longer assume implicit patent grant apache license may perfect interest unifying licenses far better adding yet another license surely osi would reject facebook bsdpatent license proposed reality might want instead consider react nonfree expressly addition lots people add additional nonfree clauses bsd license propose osi year almost every case license rejected complying open source standards", "d": "7/2017"}, {"body": "note google grpc relicensed part joining cncf explained reasoning", "d": "7/2017"}, {"body": "osiapproved alternatives facebook licensegrant combo also include upl bsdpatent likely compatible apache license possible suggest avoiding inventing yet legal language", "d": "7/2017"}, {"body": "regarding vague fear unnamed people dchest talking establishing clear compatibility current apache license precisely one main reasons gpl concretely writing yet another license people keep track analyze simply silly especially write one incorporates patent language like apache language top bsd model also like apache language except apache license updated based feedback competent legal counsel", "d": "7/2017"}, {"body": "nevets nt think dchest ever said company found anything problematic apache license said tries avoid work completely different uninformed guess company problem apache apart sourced dmitriy", "d": "7/2017"}, {"body": "minio team would like see change happen object storage browser ui based react apache licensed would unfortunate time consuming migrate lieu new information regarding apache incompatibility please consider relicensing react thank consideration", "d": "7/2017"}, {"body": "harshavardhana think misunderstood situation current license incompatible situation apache software foundation lawyers correction policy makers declared projects use dependencies licensed bsdfacebook patent license people filed issue convince facebook relicense many people consider current license patent grant problematic companies also ban react reason however react used many companies nt problems see also", "d": "7/2017"}, {"body": "close dchest lawyers made choice policy decision disallow fbbsdpatent license mixed software foundation releases users nt think anybody expected relicensing change promulgated internal change policy around particular license", "d": "7/2017"}, {"body": "current license incompatible apache discussion roy fielding added comment discussed license facebook legal counsel bsd relies implied patent grants intentionally incompatible apache license", "d": "7/2017"}, {"body": "request relicense made politely met similar politeness gaearon thank dan understanding expectation change apache couchdb part certainly lot hope relicensing achieved hoping dan connect people like understand facebook internal reasoning process expeditious changeofheart around rocksdb licensing", "d": "7/2017"}, {"body": "wohali sure hope comments considered impolite sorry nt intention important note asf opinion highly valued open source community opening issue simple polite request license change fact request caused asf policy position relicense stop using side effect making people fear current license hope facebook asf arrive mutually acceptable terms however would like see compromise form current bsd license plus changed patents file rather also hope asf proposes option pretty much say unsubscribing thread", "d": "7/2017"}, {"body": "give small update going internal discussions week much say would nt optimistic changing react see kindly agreed provide update discussions", "d": "7/2017"}, {"body": "clarify lot conflicting information going around software licensed includes bsdpatents dependencies internal policy asf making people nervous public statement criticism wellrespected foundation lawyers knowledgable open source licenses", "d": "7/2017"}, {"body": "issue understand react license patent grant narrower prohibits patent suits facebook would licenses still compatible sense used together within work however overall license work call apachereact less permissive react patent restrictions apache software foundation policy distribute software licensed whole terms therefore accept react license project would make project license restrictive", "d": "7/2017"}, {"body": "samuelhorwitz think following links might helpful asf legal notice regarding facebook patentsbsdrocksdb license clarification policy means particular project nt believe judgement criticism host dependency license allow software develop exclusively dependent software uses license nesting dependencies varying licenses difficult task potential confusion point projects within apache software foundation leverage react end user downloads react separately alternative ideal given rocksdb license changed given least impression intent behind bsdpatents license similar apache license seems discussion order determine situation resolved potentially adopting different license way rocksdb recently copiesofcopies laid pretty clearly already put together", "d": "7/2017"}, {"body": "request caused asf policy position relicense stop using side effect making people fear current license people fear build software depends react immutable etc many people ca nt use software patents file poisoning open source ecosystem making way dependencies dependencies", "d": "7/2017"}, {"body": "react originally published apache license people may depended license started using react perhaps automattic calypso people generally asking essentially react related projects original license first released know patent implications given original apache license grant facebook react may worth thinking", "d": "7/2017"}, {"body": "also throw graphql relay react native flow discussion also licensepatent format popular react important open source community people using often used together react edit added flow list", "d": "7/2017"}, {"body": "large companies mine adobe ca nt use react pop etc reason love participate project contribute etc facebook heavyhanded patents clause showstopper", "d": "7/2017"}, {"body": "rome also please", "d": "7/2017"}, {"body": "even midsize companies like mine viasat starting disallow use facebook opensource projects reason like build react web native apps seems sensible legal department recommend agreeing facebook asymmetric patent grant", "d": "7/2017"}, {"body": "compiling list google also banned use react internally despite many teams wanted adopt patents nonsense may changed since left ridiculous obstacle project otherwise much encourage community adoption", "d": "7/2017"}, {"body": "new patent grant changed created specifically feedback google last heard lawyers happy", "d": "7/2017"}, {"body": "consideration rest us whose lawyers nt happy poor form", "d": "7/2017"}, {"body": "sure possible nuclear option forking react patents file addition seems like huge waste else people facebook nt want play ball", "d": "7/2017"}, {"body": "steering council member project jupyter opensource project builds jupyter notebook among things wanting use reactimmutable number jupyter repos patents clause fb licenses continue cause problems corporateorganizational users jupyter lot users nt problem already using react many frustrated get lawyers involved assess risk using jupyter use react world opensource become defacto choice many spheres really painful back land talk lawyers jupyter leadership convinced actual problem fb patent clause mere fact generates friction institutional users jupyter huge problem also artificially limiting adoption usage react libraries license", "d": "7/2017"}, {"body": "want drop personal opinion issue personally think open source world public library real life anybody anywhere freely access gain knowledge maybe without obligations give back knowledge return people help sharing knowledge make world better place know optimistic feel love using open source projects return created dozens open source projects licensed mit license seems simplest common option people like without legal backgrounds course would great get something fact already using many open source projects already gain merely trying give back community feel like right thing really hope react license issue nt become facebook realign license certain large organizations like asf google right thing like react projects facebook ca nt help feel like facebook trying get something adding patents clauses even defensive suggested like finding small note popular book public library saying ever read book future maybe people nt need worry still something unpleasant thing consider love react wish everybody freely use without worries", "d": "7/2017"}, {"body": "consideration rest us whose lawyers werent happy poor form excuse replying comment specifically google understand everyone frustrated issue personally frustrated spend time energy emotional wellbeing legal mumbo jumbo preventing people using react would much prefer spend time working together make better reality situation maintainers react people like interacting issue tracker ones making decisions us show different perspectives issue people make decisions appreciate feedback keep discussion open everyone stays civil respectful thanks", "d": "7/2017"}, {"body": "gaearon understood misinterpreted intent comment appreciate clarification efforts", "d": "7/2017"}, {"body": "make sure stays bit grounded patent grant clause apache license substantively different existing facebook patent grant policy certainly using something standardized would good anyone concerned using react today probably equal concern foss software main difference revocation clause facebook lot broad kinds ip lawsuits activate functional distinction pretty small said srsly use something standardized makes life easier sides", "d": "7/2017"}, {"body": "never written comment like project life unsure hitting comment button good idea please take everything say meant respectfully react wonderful ecosystem want best sincerely believe everyone including facebook best personally frustrated spend time energy emotional wellbeing legal mumbo jumbo preventing people using react keep discussion open everyone stays civil respectful goes without saying discussion remaining civil respectful paramount clear situation nt fun anyone including devs amp lawyers facebook contributors react ecosystem course devs like blocked using reactreact native based patents situation said sentiments expressed sentences quoted go core lopsided problematic situation dismissed legal mumbo jumbo frankly frightening react ecosystem snowballed point incredibly important future literally software development software development never important affects real people real ways facebook terrifyingly powerful force technology extension world facebook expands platforms dominant player keeps react central expansions true problems patent situation emerge example facebook dominates vr closed walled garden positioning happen decide one must use react develop facebook vr platform one must forfeit company wide legal standing regards patents vs facebook one powerful companies world order develop dominant platform day microsoft era dominance one forfeit legal patent standing microsoft order create windows application feel like silly worry wart even typing think logically literally situation today finally suggestion tone discussion around issue gets heated discussion silenced chilling passionate software obviously love react would nt many us poured countless hours work thrown nt change extremely complicated situation tons different parties tons different concerns things getting heated absolutely expected care beg everyone keep discussion civil mature suggestion nt discussion silenced project continue absolutely unacceptable status quo troubling thing read", "d": "7/2017"}, {"body": "dismissed legal mumbo jumbo frankly frightening think missed gaeron point dismissing legal problems expressing super frustrating deal arguments time time time nt magic power change anything magical instead weather storm frustration something control personally would suggest leave thread substantial updates thread topic whether react relicensed many platforms twitter medium emailing facebook legal counsel hacker news reddit etc etc express passion put many hours issue company issues tracker poor tool tracking wide ranging discussion topic produce happened past", "d": "7/2017"}, {"body": "mean dismiss issue apologize previous comment reads trying say bug tracker best venue legal discussion especially since us presume lawyers may see thread way say something facebook talking team people software developers like currently keeping issue open inprogress discussion notify updates however always closed issues past initial discussion want silence keeping open forever achieve purpose heard well passed concerns repeating points different threads help move forward creates lot noise stress maintainers already empathetic cause updates happened past updating grant response initial concerns google companies publishing faq dispel common myths happened outside github issues much internal discussion legal team reevaluating decisions every make sure hear voices asking treat respect keep discussion levelheaded wait decision thanks", "d": "7/2017"}, {"body": "gaearon available venue licensing discussion understand may best place discussion open folks like responsive nt know option conversation appreciate internal discussions facebook matter would love open forum facebook legal group engage react community licensing", "d": "7/2017"}, {"body": "csepulv legal team legalus humanus elusive kind typically found natural private office habitat often leaving hunt food provide shelter", "d": "7/2017"}, {"body": "coderanger make sure stays bit grounded patent grant clause apache license substantively different existing facebook patent grant policy certainly using something standardized would good anyone concerned using react today probably equal concern foss software main difference revocation clause facebook lot broad kinds ip lawsuits activate functional distinction pretty small nonlawyer understanding distinction apache says license grants right use anything patented within software terms license coupled attempt bring patent lawsuits regarding anything software lose patents rights granted license whereas argument bsdpatents clause says along lines attempt bring patent litigation facebook rights use potential patents held software lost asymmetry people concerned concerned parties argue saying patents exchange using react since even though patents evil etc etc may legitimate patent claims company wishes make point facebook affiliate fair facebook really doubt stems sort malice defensive measure ridiculous state patent litigation days also nt change legitimate concerns people either anyway lawyer thought clear outside gpl camps anticommercialopensource camps apache license regarded really good commercial open source license explicit symmetric patent grantlitigation protection clause well explicit trademark protection clause generally lacking good licenses mit license modification either expensive done someone lawyer well contributing license ecosystem complexity", "d": "7/2017"}, {"body": "qxqxqxqx think impolite approach issue make fb change would like place demand", "d": "7/2017"}, {"body": "really hope fb reacts community requests comply reactjs related libraries apache license become hinderance using reactjs unreact", "d": "7/2017"}, {"body": "gstein want know concern something wrong means expression apologize", "d": "7/2017"}, {"body": "gaearon first thank responding keeping things constructive please let add maintainer developeroriented piece open source software sympathize desire discuss code features rather licenses said open source software code issue tracker releases key component open source software licensing write may see thread way say something facebook talking team people software developers like feels like simplification many commenters issue want make statement facebook inc company want discuss one important aspect react framework understand software developers like us best people discuss legal details however would nt logical consequence facebook legal team make decisions become active forum nt possible relevant details pertaining piece open source software discussed open incredibly frustrating important aspect open software discussed behind closed doors", "d": "7/2017"}, {"body": "apologize following already brought seems strange much fuss additional grant top widely used licence legal departs corporations mentioned thread worried every project licensed bsd mit worried particular grant going far enough seems grant ok maybe missing something", "d": "7/2017"}, {"body": "maybe missing something general discussion going license without explicit patent grant carries implied one people opinion", "d": "7/2017"}, {"body": "cardamon keeping short ianal yes seems lot discussions including referred missing concept implicit patent grant projects might missing grant explicit see", "d": "7/2017"}, {"body": "cardamon think apache licence would preference bsd mit et al would permissive licence gives grants patents facebook may cover react project apache permissive licence patent grand clause gives users licence related patents facebook holds protecting caught patent infringement difference apache patent grant facebooks bsdpatent licence understand facebook one weighted towards facebook defacto access patents loose licence facebooks possible react ones sue facebook patent infringement apache cancels patent grant sue based patents directly related project licence essentially apache would best companies facebook current licences lot like apache language broader", "d": "7/2017"}, {"body": "mitsuhiko alexanderkjeldaas mattoakes thanks clarifications", "d": "7/2017"}, {"body": "think major concern technology companies evaluating license compliance requires burdensome maybe impossible degree diligence let say cisco frontend developers router division use react router admin interface year half later webex division notices new webconferencing startup call confco appears using compression technique patented sue preliminary injunction discovery learn confco licensed compression code quickfire facebook subsidiary facebook turns around files counterclaim alleging previouslylicensed use react routers infringing patent license terminated brought suit party confco patent assertion arises whole part software technology product service facebook subsidiaries corporate affiliates cisco patent lawyer kind scenario envision read react license understand risk kind systems need put place organization ensure webex lawyers know risk bringing confco suit cardamon mattoakes mitsuhiko alexanderkjeldaas", "d": "7/2017"}, {"body": "team linkedin also legal troubles using react internal projects would love see change front", "d": "7/2017"}, {"body": "hey thanks patience week coming end unfortunately resolution yet still want point real momentum behind discussion internally going meetings next week escalating engineering directors imagine quite busy taking time thought promise specific conclusion clarity land please know people working getting voice heard", "d": "7/2017"}, {"body": "gaearon probably biggest pain point scenario described copiesofcopies possible get clarification", "d": "7/2017"}, {"body": "thanks following hearing us gaearon", "d": "7/2017"}, {"body": "gaearon regardless outcome anyone stands given sort communication issue given attention much appreciated", "d": "7/2017"}, {"body": "great damage community afraid community split future something like might happen one like blame facebook doubt legal right", "d": "7/2017"}, {"body": "great damage community afraid community split future nt think true years react patent clause nothing stopped evolution many big companies serious legal departments using many people using opinion fear could happen people think facebook somekind conspiration plan please nt get wrong believe react community much better place without fear saying community split another probe fear biggest issue people like drama let hope facebook change licensepatent react us finally say conspiration theory world domination plan", "d": "7/2017"}, {"body": "well sure one ca nt foresee future nt patent clause everybody would happy sinister stuff could happen future clause place one really ca nt sure worst happens would consider fear healthy feeling look oracle vs google java saga example", "d": "7/2017"}, {"body": "throw little info fire take anyone curious tl dr lot bad legal advice going around way much paranoia talking js framework takes functions returns almost html nt arm license", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "lawjolla unfortunate reality many lawyers world pretty sure nt agree", "d": "7/2017"}, {"body": "coreydotcom cases lawyers nt agree solution take risk adverse position possible solution understand problem take reasonable position", "d": "7/2017"}, {"body": "perhaps would follow suit defacto standard open source license avoid contention", "d": "7/2017"}, {"body": "coreydotcom apple uses similar terms reply nt address question", "d": "7/2017"}, {"body": "lawjolla argument good one certain scenarios tricky subject small startup without major funding rewriting product strip react trivial small startup may built product use wordpress example wordpress adopts react currently using build gutenberg project planned replacement main editor wordpress could consequences entire wordpress ecosystem commercial wordpress products yes many small businesses many also acquired bigger businesses wordpress adopts react startups product built top wordpress bigger businesses could back acquisitions legal team raises red flag due diligence react clause already know companies shy away react reason strip react would basically mean rewriting point co lang could decide build instead acquiring company wordpress adopts companies shy away wordpress used react major functionality certainly could afford litigation want take risk adverse path sometimes reasonable path much risk hope fb updates license nobody ever find paper tiger", "d": "7/2017"}, {"body": "carlhandcock argument holds companies start ups nt patent portfolio sue facebook people seem keep missing salient point anything happen need sue facebook good patent claim money file suit money take react nt assuming facebook patents protecting react assuredly nt ca nt show lost profits reasonable royalties", "d": "7/2017"}, {"body": "lawjolla also author somehow assumes patents react doubt true besides issue bigger react applies open source libraries use facebook bsdpatents pretty sure numerous patents filed libraries money take react matter money energy time see asf comments asf says nt want sure money mean like beneficial companies uses asf products nonstandard licensing trend continues big companies open source projects open source projects lose true meaning", "d": "7/2017"}, {"body": "joonhocho author nt assume looked reads single person come forward plausible patent", "d": "7/2017"}, {"body": "lawjolla write toothless claim applies react think related patents patents file found facebook repos immutable graphql jest flow hack hiphop etc becoming part dependencies dependencies dangerous file entire free software ecosystem getting damaged nt think addressed every scenario post also large small tech companies seem disagree least nt ready risk", "d": "7/2017"}, {"body": "lawjolla even saying true creating lot friction ecosystem whether paranoia one obvious example thread numerous threads hn reddit github related react bsdpatents past years many companies including big ones shied away using react reason asf currently challenging people trying change hope", "d": "7/2017"}, {"body": "joonhocho ca nt disagree fighting open licenses even rationale couched unfounded paranoia nt bad thing ton bad legal advice ignorant paranoia fact wo nt risk unsurprising", "d": "7/2017"}, {"body": "lawjolla arguments nt addressed immutable graphql jest flow hack hiphop places file appears", "d": "7/2017"}, {"body": "lawjolla missing point outlined example reply impact business acquisition standpoint small business patent portfolio big business interested acquiring small business could patent portfolio opt acquire small business want deal headache since said could strip react write instead acquiring product rewrite strip react anyway fyi lawyer automattic speaking specifically calypso automattic business states patents anyway automattic wordpress open source project many businesses patent portfolios use wordpress lot many rethink wordpress using open source project introduce key functionality written react looks like possibility gutenberg project beta know answer like said small businesses unlikely patent portfolios big businesses use wordpress", "d": "7/2017"}, {"body": "clear tinfoil hat nonsensical hypotheticals rule issue attempts common sense fall confirmationally biased deaf ears good luck react license ufos faked moon landings", "d": "7/2017"}, {"body": "dennis really nt necessary helpful either", "d": "7/2017"}, {"body": "github issue poor venue discuss legal theory also detracts original request would facebook amenable relicensing react something fbbsdpatents vein nt really anything discuss real discussion internal facebook canshould simply wait decision andor explicit request community feedback", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "kideny unfair facebook also dislike patent react facebook repos right facebook develop deploy graphql react native includes also includes patent maybe future repos includes patent big business", "d": "7/2017"}, {"body": "vuejs good choice mitlicensed open source project free simple use", "d": "7/2017"}, {"body": "preact", "d": "7/2017"}, {"body": "cmon people let stay topic", "d": "7/2017"}, {"body": "fwiw company legal department sees issue us moving forward react current licensing scheme suppose depends product", "d": "7/2017"}, {"body": "thread danger closed doubt please stick topic hand incredibly important issue lot us react team us service allowing us continue communicate let try add pointless input may otherwise hinder progress cause us lose channel", "d": "7/2017"}, {"body": "fwiw company legal department sees issue us moving forward react current licensing scheme suppose depends product lot confusion misleading information around issue got worse blew hn reddit news sites react licencepatents situation different today month ago need switch away react already using question whether company allows use react due licencepatents question company lawyers thing happened apache software foundation lawyers said find licence appropriate projects thus apache software foundation instructed projects move away facebook bsdpatents code august affect several asf projects including couchdb cordova superset incubator issue opened bearing nonasf projects even licensed apache licence", "d": "7/2017"}, {"body": "really nt think issue turned opinion poll licensing situation people already use react want due asf change issues issue already discussed death pretty sure one subscribed issue receive updates licensing situation inbox swamped opinions maybe actual discussions usefulness could elsewhere", "d": "7/2017"}, {"body": "issue request relicense complains find reason make getting something value", "d": "7/2017"}, {"body": "issue us couchdb pmc asking facebook would consider changing license apache software license either remove parts project use react port something else nt happen would much prefer continue using react license changed one asf accepts far simpler asl license making demands threats even commenting wider social legal aspects forum fascinating though response really waiting facebook either directly via suitably authorised member react team many excellent comments thread helps see concern felt others one would welcome thread staying closer original goal", "d": "7/2017"}, {"body": "think understated affecting asf projects affects every single open source project uses react either backend front end includes wordpress ca nt expect users projects respect patent rider ca nt release project bsd license dependency x list basically ca nt license project anything facebook license", "d": "7/2017"}, {"body": "victoriafrench strictly true release software license want license nt affect terms react licensed license software applies users software allowed use react license affects use react users use software", "d": "7/2017"}, {"body": "jayandcatchfire true release wordpress bsd used gpl component become gpl developer creates form plugin wordpress also gpl reality use license x without distributing product license chains standard copyright licensing law every attorney tell thing let move motion picture use video clip nontheatrical license use effects cgi template license cc marvel comes uses cgi template marvel release movie theaters nontheatrical license travels chain called chain title applies copywritten work", "d": "7/2017"}, {"body": "victoriafrench completely agree case gpl gpl viral license also wordpress already licensed gpl none software involved discussion react apache foundation software various companies proprietary software gpl license talking apl bsd neither viral licenses patents file nt change", "d": "7/2017"}, {"body": "lawyers apache made decision licenses incompatible facebook lawyers said much according public discusion apache mailing list linked one previous comments request change license always lot speculation license means many differing opinions facebook faq license made clarification post last updated request per comments discussed internally facebook decide soon enough individuals projects companies decide whether good decision use software license many online discussions topic appropriate forums github issue similarly difficulty leveraging react legal reasons pertaining license would great information add issue comments looking change people minds interpret license nt place would caution anyone leveraging legal opinion issue discussion participants facebook employees nobody made official statement clarifying parameters license thread besides many lawyers github accounts", "d": "7/2017"}, {"body": "nevets clarify foundation say licenses incompatible foundation said projects could depend upon components using fbbsdpatents license would introduce requirements overabove course discussion hereelsewhere several lawyers stated licenses incompatible incorporating larger work means two sets requirements fbbsdpatents larger set requirements perfectly acceptable developers software release policy combination acceptable foundation simple", "d": "7/2017"}, {"body": "open source rely patron sympathy revoked hint conflict either open source project openly collaborate keep closed source softening frankenstein license counterproductive extremely dangerous sets precedent accept additional clauses every open source project use suffer tremendously suggestion much cleaner solution everyone clause paper tiger like claim exist project open approached extreme caution scenarios short apologize adding another opinion suggestion relicense seems wellfounded recently decide react reason shame", "d": "7/2017"}, {"body": "active committer apache superset incubating ex facebooker like couchdb caught facebookasf crossfire would like use react build share truly unlimited surprisefree open source software regardless legitimacy true meaning applicability patent clause like facebook play rule everyone else open source space produce standard conditionfree bsd license react largely unaware issue team chose react superset us backtrack either asf react side would extremely counterproductive worse another option might tiptoe around distributing react releases users build software defer liability option personally based limited understanding legal implications think unethical facebook buy sort patent lawsuit immunity popular open source software also related facebook sticks current patent clause like see license metadata changed reflect something makes clear nt good old use package managers import libs recurse dependencies understand tree licensing implications somehow would bubble something important understand research validate lawyers software foundations", "d": "7/2017"}, {"body": "gstein sure mean facebook told compatible foundation members", "d": "7/2017"}, {"body": "johnament think greg referring definition compatibility says two licenses incompatible logical way combine software components two licenses instance cddl gpl classic case since put limits derived work must licensed limits intersection another definition compatibility upstream policy compatibility problem apache nt know better allow dependencies inhibit field use aspects use patents rider bsdpatents incompatible apache policy nothing however says ca nt use apache licensed component together react happy would wind derived work imposes patent behavior users ca nt bring combination back apache suggest project use outside apache policy confines sum agree", "d": "7/2017"}, {"body": "tdunning could let greg comment intentions reading roy comment licenses compatible one another eg could nt dual license code speculatively includes irrevocable claim fbpl includes explicit revocation clause also probably ca nt include roots partial code potentially revocable", "d": "7/2017"}, {"body": "simple johnament said nevets incorrect asserted lawyers apache made decision licenses incompatible lawyers made declaration referenced asf member lawyer let alone one representing foundation foundation said allow fbbsdpatents policy reasons look nt even think lawyers weighed nothing compatibility foundation made assertions declarations compatibility", "d": "7/2017"}, {"body": "apologies stirring pot gstein wrong impression nt made statement without verifying would nice legal team resources like asf would somehow publicly weigh topic", "d": "7/2017"}, {"body": "worries nevets easy enough clarify unfortunately asf provide legal advice crazy thing legal profession lawyer provide advice either unless client covered retainer agreement see commentary lawyers marked opinion second breath tell retain lawyer advice", "d": "7/2017"}, {"body": "downside heuristic like guess nt work text nodes", "d": "7/2017"}, {"body": "personally makes sense sure argument current behavior reduced api footprint afaik case current heuristic actually beneficial callsite aware expects happen prefer simpler behavior explicit apis however may still good idea mark root dev warning emitted issue yet may issue future using dom source truth nice", "d": "7/2017"}, {"body": "add inside refcallback emit well", "d": "7/2017"}, {"body": "expected functional component ca nt get ref replace class get ref instance though dom node believe refs dom documentation section explains covers cases alternative approaches new warning master nt made release yet future warned add ref functional component", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "hey ccorcos thanks issue nt appear standardized event type react synthetic event system best remain inspec html event standard historically nt include platformspecific events ca nt polyfill supported browsers since falls camp really consider whether could include nt mean ca nt use though may little verbose use refs get reference element add event listener remove", "d": "7/2017"}, {"body": "preliminary conclusion decided write babel plugin removes referenced fall whitelist known modules without side effects seems easier hooking rollup", "d": "7/2017"}, {"body": "everybody use npm", "d": "7/2017"}, {"body": "acmoune help", "d": "7/2017"}, {"body": "bjrmatos thanks meant right trysound npm good idea group", "d": "7/2017"}, {"body": "acmoune", "d": "7/2017"}, {"body": "trysound thank", "d": "7/2017"}, {"body": "hey hieudole believe duplicate issue different context resolved next release thanks thanks", "d": "7/2017"}, {"body": "good", "d": "7/2017"}, {"body": "nice", "d": "7/2017"}, {"body": "question", "d": "7/2017"}, {"body": "time close", "d": "7/2017"}, {"body": "yes happy ok", "d": "7/2017"}, {"body": "needs able handle nested arrays like produce flat array need prefix keys general implementation detail problem since keys stack unique hope helps", "d": "7/2017"}, {"body": "binarykitchen mentioned error usually result swallowed error putting react corrupted state nt called undefined node seeing another side effect corrupted state provide example reproducing error please original issue thanks", "d": "7/2017"}, {"body": "mean could technically reason even legitimate bug tell without minimal reproducing example", "d": "7/2017"}, {"body": "instead reproducible example much work debugged deeper line causes error react component button instance reactbootstrap inside click function internal function called code lines turns conditions nt met hence node instance remains undefined", "d": "7/2017"}, {"body": "undefined case sure passing first place sure exists", "d": "7/2017"}, {"body": "ohhh think see issue think methods ever supported passing component instances supported passing dom nodes read docs simulate event dispatch dom node optional event data confusing throw early pass something else though add early invariant thanks reporting", "d": "7/2017"}, {"body": "aaaah right mistake add early invariant check yeah", "d": "7/2017"}, {"body": "btw makes test work bit ugly works", "d": "7/2017"}, {"body": "gaearon binarykitchen take issue ok beginner react looks like great place dive", "d": "7/2017"}, {"body": "sure sounds good", "d": "7/2017"}, {"body": "think need indonesian languange confused", "d": "7/2017"}, {"body": "sounds like duplicate clear performance benefits expecting particular could expand issue would help", "d": "7/2017"}, {"body": "shipping react modules syntax tree shaking issue shipping react also consumer able transpile using part project way browser run arrow functions classes features natively transpiled code better performance debugging", "d": "7/2017"}, {"body": "ah see mean better performance point related benchmarks far aware features still slower mainstream browsers counterparts additionally react really using either classes arrow functions code convinced makes lot difference debugging", "d": "7/2017"}, {"body": "hey kylekai please nt open duplicate issues gaearon gave answer please refer community support resources linked original issue", "d": "7/2017"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources briefly answer really related react use react existing module system including amd", "d": "7/2017"}, {"body": "use amd react fresh react thanks", "d": "7/2017"}, {"body": "react library need use amd react add react existing amd app way add libraries", "d": "7/2017"}, {"body": "however whole page written react ui libarary page component want render model part need use amd module", "d": "7/2017"}, {"body": "said earlier issue tracker bug reports feature requests question please check community support resources question vague hard give specific answer without minimal project information struggling case react library dictate modules loaded please consult support resources bundler using learn make work amd", "d": "7/2017"}, {"body": "get beta soon week nt recommend using alpha severe known issue infinite loop development mode general nt recommend using yet ready public consumption feel experimental", "d": "7/2017"}, {"body": "quadruplejump example without jsx dropped webpage chrome co supports quite fine", "d": "7/2017"}, {"body": "probably add intro paragraph pages links html page minimal example", "d": "7/2017"}, {"body": "hey rohmanhm seeing expected behavior ca nt add event handlers userdefined components like event handlers added host elements like example component would pass handler host element renders like hope helps", "d": "7/2017"}, {"body": "hi aweary thanks quick response explaining help lot", "d": "7/2017"}, {"body": "glad hear need help recommend checking community support resources great resources issue question", "d": "7/2017"}, {"body": "nt allow incremental upgrade path though upgrade calls even third parties since portal api nt exist used time fair assume others might need imo keep release warn", "d": "7/2017"}, {"body": "used time fair assume others might need fair agree", "d": "7/2017"}, {"body": "hi use issue tracker react bug reports feature requests question please check community support resources particular case nothing seems wrong full example reproducing issue would help read", "d": "7/2017"}, {"body": "gaearon thanks deal guidance", "d": "7/2017"}, {"body": "server rendering application defined serverside could result error", "d": "7/2017"}, {"body": "funny hit similar case hours ago internally think need set hard limit recursion used stack overflows stack turned hangs fiber", "d": "7/2017"}, {"body": "gaearon would go detecting fiber suppose look n updates given period circular contexts maybe need something super lowlevel", "d": "7/2017"}, {"body": "thinking somewhere workloop go many iterations acdlite might better ideas", "d": "7/2017"}, {"body": "depends want count limit want limit put check want limit number components worked put work loop think want limit number times commit put check", "d": "7/2017"}, {"body": "seems responsible lot hangs facebookcom seen several instances components failed hit stable states hangs fiber adding limit would let developers easily attach devtools fix problem wont cause total hang users", "d": "7/2017"}, {"body": "would interested helping sending pr", "d": "7/2017"}, {"body": "interested look threshold raise error though number times commit interval", "d": "7/2017"}, {"body": "think yeah interval body", "d": "7/2017"}, {"body": "wonder limit sebmarkbage believes valid use cases iterations sounds right guessing would lead breakages existing code since wo nt ship maybe ok", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "codepodu interest getting fixed quickly going open pr unless respond soonish tell already started", "d": "7/2017"}, {"body": "thanks report react generally uses convention jsx property names duplicate might revisit time future intentional bug", "d": "7/2017"}, {"body": "thanks reporting known issue open source alphas reactdom tracking fix soon", "d": "7/2017"}, {"body": "hey omerts thanks issue extend class properties defined extending class shadow properties defined extended class makes sense classes sugar prototypical inheritance using using javascript classes want inherit base component explicitly include extending component definition like using object spread syntax react could automatically would involve overhead walking prototype chain would require breaking change since people may already relying extending components overwriting base component make sense", "d": "7/2017"}, {"body": "would also add generally recommend using inheritance really confident prefer use yes aweary comment correct", "d": "7/2017"}, {"body": "aweary makes perfect sense thank detailed answer gaearon right could refactor code compose extract pure functions little late", "d": "7/2017"}, {"body": "cc nhunzaker", "d": "7/2017"}, {"body": "oops meant cc jquense", "d": "7/2017"}, {"body": "yes expected unavoidable extent react dedupe change input events nt fire often case even tho intentionally want trigger event react swallowing input value changed use simulatenative helper get behavior looking tho break", "d": "7/2017"}, {"body": "workaround", "d": "7/2017"}, {"body": "guess grey area unclear supported jquense mentioned use meantime feel free file new issue look ways handling", "d": "7/2017"}, {"body": "additional use case affected similarly outline long term workaround well think falls gray area complete transparent dom interoperability always nice hard potentially limiting give reacts model targeting", "d": "7/2017"}, {"body": "jquense btw happens matter value changed probably included info issue understand unexpected event swallowed react value changed including updated example", "d": "7/2017"}, {"body": "need time process use case cypress esp part setters nt really know spec says strongly opinionated case thing seems working code using waits rewrite might turned nonissue wondering wo nt affect ability make integration tests reactbased apps using dom api sorry answered linked thread yet connect dots", "d": "7/2017"}, {"body": "leaving solution future reference checked edge ie ff chrome js function setnativevalue element value const valuesetter objectgetownpropertydescriptor element value set const prototype objectgetprototypeof element const prototypevaluesetter objectgetownpropertydescriptor prototype value set valuesetter amp amp valuesetter prototypevaluesetter prototypevaluesettercall element value else valuesettercall element value use like", "d": "7/2017"}, {"body": "btw happens matter value changed probably included info issue yes also left bit bit hard explain react tracks manual domnodevalue changes well dispatch change event react sees two discreet moments first change change via event input event fires value still react says already know value must duplicate wondering wo nt affect ability make integration tests reactbased apps using dom api nt using something like selenium fires real events ask vs fake ones fire dom comparative tools like cypress nightmare etc use workarounds mimic real browsers behavior something breaks case bug cypress", "d": "7/2017"}, {"body": "dcramer shorthand property includes believe expected behavior would overwrite previous style could include delay property know worked previous react versions", "d": "7/2017"}, {"body": "aweary sure ever worked pardon ignorance realizing working style sheet due order operations translating", "d": "7/2017"}, {"body": "dcramer worries previous discussions warning overlapping styles like see links lot discussions get around either including delay shorthand property explicitly using expanded property like etc", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "hi asked say use inheritance need least know problems running obvious could please clarify exactly working seems bit like philosophical issue really prefer focus specific problems bugs encounter far know inheritance fully supported react rather react opinionated write classes allow use inheritance mixins factories userspace class model different language compiles js class abstraction etc long inherit provide method react trouble recognizing component even inherit deeply hierarchy case experience thanks", "d": "7/2017"}, {"body": "gaearon tried find earlier discussion failed wish github participated filter issues last time discussed remember problems inheriting class inherits far know inheritance fully supported react currently react fully supports inheritance means inherits inherits react features including lifecycle methods work nothing discuss remember vaguely time discussed earlier problem render method called instead instances circumstances try one sure works pointless developers react willing support policy issue run problem using deep inheritance report willing solve respond use composition instead could please clarify exactly working seems bit like philosophical issue really prefer focus specific problems bugs encounter nothing nt work bug problem willing discuss problem details problem complexity forced code ca nt use inheritance react components related immutability redux shallow comparison props reselect performance related things think keywords brought idea mind problem ca nt find somewhere written problems handled easily methods described truth handled easily big complicated component think facebook nt components complicated thing saw facebook messenger think say nt need inheritance facebook codebase also say complicated component messenger nature needs functional design example complicated component talking text editor features like msword implemented react browsers something like tinymce problems need careful use reselect complicated combinations connect createselector passing callbacks etc taking care prop reselect consider need multiple forms complicated component different behaviors composition brings callback passing attention needed take care nt pass big js data structure props using composition pass data props child element one avoided inherit inheritance simply provide basic features base class inherited classes wo nt need take care passing props makes unnecessarily rerender provide good performance sometimes even need forget react automatic lifecycle methods invocation instead setstate store data force render required another situation think better avoid composition use inheritance concerned performance use composition mount components instead one render components instead one shallow compare props components instead one etc lots compositions instead lots inheritance many components rendered simultaneously guess matters currently problem thought summarize saying using composition bigcomplicated components trying keep things performant brings complexity take time reduces performance overhead anyway software like macos google chrome pages linux kernel nt written composition functional programming may best chrome use functional programming handling network packets user interface plugin sandboxing etc react nt written functional paradigms react provides api classes discourages others provide api classes web application always simple store messenger likes sometimes components engines use components provide good performance reason universities still teach oo understand usecases frontend developers fit well paradigms encourage people use usecases nt fit paradigms react wants general solution framework nt force paradigm cause created react overcome problems facebook messenger nature needs functional code nt mean codes written functional qt qml perfect reactive language perfect mean perfect using qtqml write code without checking documentation everything harmony intuition designed years react supports inheritance useful hope reactjs benefit inheritance ofc qml supports composition ask question policy issue run problem using deep inheritance report willing solve respond use composition instead inheritance officially supported opinionated", "d": "7/2017"}, {"body": "forgot thank quick response", "d": "7/2017"}, {"body": "remember vaguely time discussed earlier problem render method called instead bs instances b circumstances try one sure works pointless developers react willing support bug fixable like know policy issue run problem using deep inheritance report willing solve respond use composition instead really depends issue hard discuss abstract specific policies bug reports compete bug reports based perceived urgency hard would fix javascript flexible language support inheritance bit vague covering everything usual patterns believe support complicated metaprogramming might might work happy try provide likelihood something fixed specific cases ca nt find somewhere redux opinionated way writing react code please use redux fit workflow officially prescribe redux anywhere even use much facebook think facebook nt components complicated thing saw facebook lt gt problems need careful use reselect complicated combinations connect createselector passing callbacks etc taking care prop reselect sure related facebook redux facebook project facebook mostly uses flux data management although mostly lean towards immutable approaches diametrically opposite popular solutions ecosystem like mobx embrace mutability perhaps could give try instead said impression facebook complicated components messenger correct complicated components opinion ads creation flow includes interactive forms complex interconnected widgets selecting ad targeting using redux using combination react component local state flux far aware inheritance officially supported opinionated likely issues affecting people using inheritance lower priority issues affecting everyone like inheritance fixing benefits much less people said bugs different bugs cause major distress fixable try fix find time hope answers question give definitive answer try best whenever something hard fix unlikely fixed say future issue reports", "d": "7/2017"}, {"body": "thanks positive response dan write notes future reference think things help someone trying design stack said impression facebook complicated components messenger correct complicated components opinion ads creation flow includes interactive forms complex interconnected widgets selecting ad targeting sure components implemented without concerning performance complicated components meant really cpu hungry nature sure related facebook related facebook write docs responses facebook huge codebase x facebook like sure anyone whole universe codebase smaller facebook think conclusion wrong facebook nt complicated cpu hungry components quoting facebook use react thousands components nt found use cases would recommend creating component inheritance hierarchies redux opinionated way writing react code please use redux fit workflow said year ago building stack started reading medium post message clear guess appropriate discuss redux say relevant decided keep using redux tightly bound huge codebase removing lines code would take around days nt problems writing functional code except js really functional language python c pass functions arguments nt mean functional problem maintaining good performance complicated components using redux components solutions keep code clear scalable extensible using redux complicated components relies using inheritance solutions officially advertise would lead overusing connect reselect complicated extensible code generally nt think code written like easy read think need construct like think twice try avoid use instantiating class instead easy reason class constructor x thisx x readable easy reason conclusion give inheritance another try see react problems report experience close issue", "d": "7/2017"}, {"body": "think conclusion wrong facebook nt complicated cpu hungry components perception correct experience lot components performance critical especially react native spend quite bit effort optimizing getting bit hard talk seem confident saying think enough context since working facebook products redux opinionated way writing react code please use redux fit workflow said year ago building stack believe ever said something like use redux everywhere please point solutions keep code clear scalable extensible using redux complicated components relies using inheritance cool works generally nt think code written like b b c gt b else c easy read nt think snippet easy read either think discussion turning attacking strawman like avoid happy discuss specific issues react support inheritance like avoid debates code style issue tracker", "d": "7/2017"}, {"body": "gave examples think sometimes inheritance better solution composition think attacking strawman started instead discussing cases emphasized facebook components complexity summarize think composition reduces performance compared inheritance specially react framework use bare react happens run whole react lifecycle components shallow compare props components etc case inheritance one component lets eliminate factors focus inheritance vs composition compose one component bare react using redux immutablejs reselect etc bring even overhead use composition overhead mounting etc component close zero could forget performance snapshot using shows mounting small react component takes around lets assume production environment want mount inherited components take seconds try mount composed components take n x seconds mounting maybe tempted respond nt mount components lazy load components etc achieve acceptable performance inheritance go composition add lots complexity code lazy load things maybe even want elements really time lets argue milliseconds number components glad know point view n n x instead anther issue composition need transfer methods composing components composed components keep api available composed component even willing change methods overcome problems mixins complexity classes designed handle inheritance prefer use another thing complexity using redux immutablejs reselect composition need spend time even write code createselectors connects achieve lets avoid attacking strawman discuss issues think using functional paradigms things flow like network packets like data user interface like facebook posts timelines things like perfect must providing robust api reusability best done help object oriented programming functional object oriented used declarative frameworks like qml react think react much better framework supports oo well disclaimer course write reusable code functional programming specially injecting sense objects declarative language like jsx declarative elements work like point reference among flow functional structure brings idea instances functional programming sometimes insisting use functional approaches object oriented avoiding simpler easily readable code overheads programmer cpu side note talk facebook clear productive objection avoid generalizing scope problems deal facebook ui scope problems developers using react deal strongly think avoiding generalization leads better react doubts facebook wwwfacebookcom indeed big project sure nt cover different problems web developer may deal generalization avoided even react developed google know google web applications facebook web applications least order magnitude", "d": "7/2017"}, {"body": "sassanh think core point straying react nt enforce inheritance composition may recommend using composition believe generally useful starting point abstraction react nothing explicitly preventing using inheritance mentioned react api asks extend provide method use whatever abstraction like build top issue tracker meant discussing bugs feature requests specific problems react preventing using inheritance love hear otherwise nt best platform discussing pros cons composition inheritance", "d": "7/2017"}, {"body": "nothing explicitly preventing using inheritance mentioned specific problems react preventing using inheritance love hear cool conclusion give inheritance another try see react problems report experience close issue", "d": "7/2017"}, {"body": "seems working fine", "d": "7/2017"}, {"body": "hi use issue tracker bug reports feature requests appear description react bug little information help question please check community support resources", "d": "7/2017"}, {"body": "wan na send pr add", "d": "7/2017"}, {"body": "gaearon yes sure done", "d": "7/2017"}, {"body": "fixed thanks pr", "d": "7/2017"}, {"body": "react says remove props element um want props come react nt attribute blocker let attributes happy", "d": "7/2017"}, {"body": "thank sending us use case custom attributes working see going close since tracking thanks write", "d": "7/2017"}, {"body": "nhunzaker great hear thanks", "d": "7/2017"}, {"body": "want look happens might bug", "d": "7/2017"}, {"body": "hello started already basic level unfortunately wo nt able continue saturday anybody else wants take please also happy additional hints since working fine either mode likely something one conditions guess", "d": "7/2017"}, {"body": "seem happen master probably reproduce probably fix directly branch", "d": "7/2017"}, {"body": "nt understand three arguments version alpha test seems expected two arguments version work react contract specifies one argument event fill one render function gives us two example two arguments works example three arguments need fill one argument get last curried function seems work", "d": "7/2017"}, {"body": "okay looked seems like need cherry pick branch", "d": "7/2017"}, {"body": "close fixed master add cherry picking todos thanks report", "d": "7/2017"}, {"body": "thank", "d": "7/2017"}, {"body": "thanks noting old code going deleted soon would nt worry", "d": "7/2017"}, {"body": "correct way achieve expected behavior tell trying mixing dom react events ordering important", "d": "7/2017"}, {"body": "working project implement drag drop move items html structure html ul li react elements li elements draggable dropped ul outer div drop empty space uls uls outermost div ondrop events always outermost div element ondrop gets triggered always gets dropped outer div order important", "d": "7/2017"}, {"body": "boopeshmahendran could turn outer element react component", "d": "7/2017"}, {"body": "boopeshmahendran may need manually manage event order using stack something react nt api reordering events based native dom events could use react component parent element like mkuklis said could easier considered using something like reactdnd stable drag drop solution react try use issue tracker bug reports feature requests usage support question like recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow", "d": "7/2017"}, {"body": "prior step xisnext set state component boolean xisnext indeed expressing next turn played x ternary operator used therefore checks state boolean regard side next take turn could also make ifelsestatement would thing javascript xisnext short form xisnext true squares x else squares", "d": "7/2017"}, {"body": "soerenterh answer correct reference ternary operator close still consider unclear let know rename", "d": "7/2017"}, {"body": "soerenterh gaearon thank reply meant next turn played x display board current turn played good idea rename xisnext yisnext change thank", "d": "7/2017"}, {"body": "guess variable naming text confusing says next player really means current player says next current player eg x one whose mark eg x appear next click", "d": "7/2017"}, {"body": "open naming suggestions fix maybe would better", "d": "7/2017"}, {"body": "maybe whosenext document variable player next move ie players symbol occupy next box clicked think x var name causing confusion", "d": "7/2017"}, {"body": "low priority close people report confusing reopen fix also happy take pr renaming", "d": "7/2017"}, {"body": "somebody else interested feature could take", "d": "7/2017"}, {"body": "duplicate please provide input", "d": "7/2017"}, {"body": "sergeytroinin aweary duplicate concerns wrote originally need able set inline styles case calculate using state like background mozlineargradient thisstategradient background webkitlineargradient thisstategradient background lineargradient thisstategradient return see problem applicable vendorspecific values least workaround suggest", "d": "7/2017"}, {"body": "find exact instructions reproduce problem project never mind misread saying reproduce", "d": "7/2017"}, {"body": "achobanov kind issue almost always caused code swallowing error suggest using pause caught exceptions option chrome devtools try locate source", "d": "7/2017"}, {"body": "one common example happens note code like errors first completely swallowed", "d": "7/2017"}, {"body": "could reproduce observe home two images appear nt think code execution stops trying render post element first time phantom error gaearon understand example happening nt use form catch aweary try", "d": "7/2017"}, {"body": "aweary right pause option selected error thrown jquery one one know causing issue something miss error message also updated repo include instructions also made small edit issue text gaearon clear confusion could replicate issue inside repo home page", "d": "7/2017"}, {"body": "tried fixing jquery error", "d": "7/2017"}, {"body": "idea error look examples whatever happening happening internally since nt use specifically imported point clarify nt problem fixed long time ago curious error thrown though would good report behavior nt think responsible nt find issue worth investigating means close though might helpful write", "d": "7/2017"}, {"body": "achobanov likely error caught unhandled somewhere code path get reports like frequently errors swallowed almost always due user thirdparty code mishandling errors try debug pausing uncaught exceptions walking call stack looking functions calls may wrapped blocks promises clauses nt handle error", "d": "7/2017"}, {"body": "worth released react beta logs errors inside react console development even application code swallows think close hope helps find issue", "d": "7/2017"}, {"body": "huh interesting think could stub handler interactive elements like buttons links work around issue ios safari bubble click events thanks great write want incorporate test case manual dom test fixtures maybe identify started happening", "d": "7/2017"}, {"body": "meet problem using", "d": "7/2017"}, {"body": "thanks malash updated issue description indicate also triggers nt require padding credit scottlyttle stellah tracking write", "d": "7/2017"}, {"body": "temporary fix jsx import react react import style export const getcomponent component gt children rest gt export const span getcomponent span tags usage jsx import span hello world instead hello world", "d": "7/2017"}, {"body": "thanks use cases simple enough could always build content inside string templates instead although little less readable able work around way second suggested workarounds initial writeup may useful others", "d": "7/2017"}, {"body": "think related known webkit bug described mdn mdn provides others pointers behavior", "d": "7/2017"}, {"body": "ghostd initially thought problem affects nonmobile safari well workarounds suggested nt work eg cursor pointer adding onclick iirc using specifying dummy element work workaround work scottlyttle stellah may recall exactly", "d": "7/2017"}, {"body": "unreal easy seetest desktop safari thanks elyobo made test case outside react using generated markup hard bug possible related react wraps text content comments exhausts knowledge problem feels like browser bug stumbled change made handle text nodes comments instead spans", "d": "7/2017"}, {"body": "still issue please provide project reproducing otherwise close enough information dig support using matching versions react exactly version", "d": "7/2017"}, {"body": "good know matching versions react reactdom opened document cryptic runtime error case someone else runs", "d": "7/2017"}, {"body": "thanks appreciated another possible cause kind error earlier error swallow application code react gets confused next render fix", "d": "7/2017"}, {"body": "hey looks like small syntax error interpreted arrow function labeled statement arrow function returning object need wrap brackets parens interpreted arrow function returning object updated version example fix hope helps", "d": "7/2017"}, {"body": "thanks shame", "d": "7/2017"}, {"body": "hmm link thread points starter code believe shows empty tic tac toe field nt actually anything final result working game miss anything", "d": "7/2017"}, {"body": "showing final code every time opened working sorry", "d": "7/2017"}, {"body": "maybe codepen glitch sorry see let us know take another look close", "d": "7/2017"}, {"body": "think mouseout event triggered disabled form elements according react synthetic mouseenter event works based mouseout aint sure possible safely revert detection strategy mouseover would work probably reason implemented like", "d": "7/2017"}, {"body": "tag bug sure ever worked whether possible fix", "d": "7/2017"}, {"body": "done temporary put smth like disabled button doesnt seem work", "d": "7/2017"}, {"body": "gaearon could check pr works good case", "d": "7/2017"}, {"body": "see message like usually means earlier error message code swallowed never gets surfaced point react corrupted state error messages become cryptic fixing react errors unmount tree instead keeping around broken state hard say without complete reproducing example could bug react last times reported turned app code swallowing real exception happy look extract code run reproduce", "d": "7/2017"}, {"body": "closing information provided check pause caught exceptions chrome debugger likely find original error causing", "d": "7/2017"}, {"body": "gaearon happening consolebased unit tests apply browser option pause caught exceptions", "d": "7/2017"}, {"body": "try using node inspect functionality attaches chrome devtools", "d": "7/2017"}, {"body": "hmmm new gaearon examplearticle best", "d": "7/2017"}, {"body": "test runner using wo nt work jest though think node bug", "d": "7/2017"}, {"body": "yeah using jest node bug follow", "d": "7/2017"}, {"body": "reliably issue would expect able reproduce rendering component browser", "d": "7/2017"}, {"body": "also write standalone node script thing test debug", "d": "7/2017"}, {"body": "finding hard understand related react error message appears like node message printed chrome console nothing formatted close let know wrong", "d": "7/2017"}, {"body": "note error much worse compiling classes without", "d": "7/2017"}, {"body": "thanks feature request thejameskyle agree better error would provide better developer experience also looks like fiber get caught infinite loop try render class nt extend might even necessary example demonstrating warned crash freeze browsertab click risk cc gaearon acdlite might right place need outside block since throw error want maintain invariants dev prod", "d": "7/2017"}, {"body": "infinite loop known issue error handling", "d": "7/2017"}, {"body": "fix release", "d": "7/2017"}, {"body": "thanks acdlite know fix address thejameskyle request would better error nonextending classes orthogonal error handing fix", "d": "7/2017"}, {"body": "yeah fixing infinite loop bug would address lack helpful error message good candidate external pr also account", "d": "7/2017"}, {"body": "gon na slow per se going reordering example instead moving would update deeper component hierarchies deeper potentially expensive updates keys way react know something moved rather updated important performance also correctness example earlier local state would preserved although conceptually different items used keys local state would move together item hope helps", "d": "7/2017"}, {"body": "thx answer give example react knowing something moved rather updated important performance", "d": "7/2017"}, {"body": "moving trees around usually cheaper going deep tree updating every single thing inside", "d": "7/2017"}, {"body": "would like submit failing test", "d": "7/2017"}, {"body": "reference jsfiddle running demonstrating callback called", "d": "7/2017"}, {"body": "looks like may affect react native found fix issue fixing reactnativereconciletransactionjs see", "d": "7/2017"}, {"body": "fixed", "d": "7/2017"}, {"body": "hey lukescott expand want importing exports react package nt seem necessary default export needs inscope calls nt fail", "d": "7/2017"}, {"body": "typescript fails react nt default export make work either enable synthetic default imports help compatibility node modules suggesting added works modules natively without needing compatibility options", "d": "7/2017"}, {"body": "see looks like typescript expects use importing modules exported modules sure faking manually adding property would good idea incorrectly implies exporting modules", "d": "7/2017"}, {"body": "warnings gone react think live release", "d": "7/2017"}, {"body": "would adding property really faking though gaearon would preferred style typescript react former would nt beneficial compatible rather relying compatibility options", "d": "7/2017"}, {"body": "think longer term style would probably make sense really longer term maybe sebmarkbage disagrees", "d": "7/2017"}, {"body": "simrangrewal please provide information requested issue template unfortunately nt enough information us determine going", "d": "7/2017"}, {"body": "going go ahead close since actual information op follow", "d": "7/2017"}, {"body": "would interested submitting failing test case pr cc bvaughn", "d": "7/2017"}, {"body": "yes absolutely get later today might need help ask", "d": "7/2017"}, {"body": "hmm ok idea test ca nt even find shallowtestrenderer code", "d": "7/2017"}, {"body": "search existing tests importing shallow renderer bet called something like reactshallowrenderertest", "d": "7/2017"}, {"body": "callback second argument never called looks correct unfortunately implementation nt use callback param leedsebooks looking please feel free assign pr failing test review fix", "d": "7/2017"}, {"body": "bvaughn never contributed react mind take stab seems straightforward", "d": "7/2017"}, {"body": "sounds great", "d": "7/2017"}, {"body": "callback bind public instance component renderers reconciler", "d": "7/2017"}, {"body": "elsewhere think explicitly pass function references around way cause lose context familiar code honest would nt expect callback autobound react", "d": "7/2017"}, {"body": "thanks update code bvaughn see", "d": "7/2017"}, {"body": "think example different instance prebind nt exist called render case variety tools manage bindings lexical scope fatarrow functions seeing describe nt binding callback queueing callback called later later part code familiar", "d": "7/2017"}, {"body": "bvaughn comment bit confusing suggest comment support following case callback nt bind called becomes public instance", "d": "7/2017"}, {"body": "makes sense", "d": "7/2017"}, {"body": "yep figured add tests", "d": "7/2017"}, {"body": "bvaughn done see", "d": "7/2017"}, {"body": "question react library per se lint rule enabled create react app create react app repository would appropriate place file problem define variable global component party script init hc compile due error please read using global variables create react app user guide work around lint rule need explicitly say want use global variable makes intent clear ensures really meant use global variable rather made typo forgot import questions please file create react app repository thanks", "d": "7/2017"}, {"body": "oh thanks eslintdisableline trick", "d": "7/2017"}, {"body": "nt need disable though approach suggested one recommend", "d": "7/2017"}, {"body": "got problem define variable like value set external script use instead though thank help", "d": "7/2017"}, {"body": "would set script runs bundle set", "d": "7/2017"}, {"body": "nt end like saw unpkg issues like let assume problem side let know reopen", "d": "7/2017"}, {"body": "looks fine well thanks", "d": "7/2017"}, {"body": "hi sebmarkbage hi wanted work issue could nt understand info gave also beginner react issue suitable docs read get speed codebase", "d": "7/2017"}, {"body": "general guide particular issue probably want test ssr fixture bit messy build react root testing fixture issue certainly easy get right also nt much existing knowledge code base react works ssr", "d": "7/2017"}, {"body": "hey sebmarkbage trying work probably questions overall looks manageable", "d": "7/2017"}, {"body": "minimum giving component broke rehydration would helpful seeing lot checksum mismatches originating library downstream react styledcomponents diff nt always helpful may generic div perhaps css class", "d": "7/2017"}, {"body": "sry guys busy work week trying follow sebmarkbage guide still wip much time one picture two questions sorry total newbie react codebase talk jsx access server rendered dom nodes bit confusing sebmarkbage please elaborate bit sure miss something way catch diff occurrences store array objects containing cloned server dom node different elements iterate array check clone parent nodes addupdate server client elements parent nodes create one string pass warning still miss use cases like one client elementno server element fine stupid something else sorry bit retarded question really unsure familiar codebase yet want deliver something useful cheers", "d": "7/2017"}, {"body": "question silly please send pr review sebmarkbage vacation", "d": "7/2017"}, {"body": "gaearon thanks reply ok polish bit open pr glad get feedback", "d": "7/2017"}, {"body": "talk jsx diffhydratedproperties access server rendered dom nodes yea bit confusing let try clarify existing diff mechanism give passed notice called attributename values passed type attributes react props differ attributes model numbers booleans style objects well strings also different names attributes eg difference attribute show way visualize serverrendering another one additionally format text expect output jsx compatible html compatible example selfclosing tags like encoded imo better visualize developer actually coding transfer format mostly opaque unless happen try inspect fact likely want experiment transfer formats html visualization transfer nicely environments eg imagine react native server rendering similarly text content encoding follow write jsx encoding html transfer format example", "d": "7/2017"}, {"body": "also probably pass relevant fiber element source warnings way add information tree similar warnings component stacks", "d": "7/2017"}, {"body": "gaearon nt one fiber responsible warning often many point batched output could possibly include component stack root parent failed join create whole tree view seems like could get noisy though nt better left dev tools need tree view", "d": "7/2017"}, {"body": "concern always easy find warning referring example would find something like code", "d": "7/2017"}, {"body": "gaearon see comment using displayname possible would dramatically ease finding fragment component hierarchy responsible issue eg instead", "d": "7/2017"}, {"body": "parent least context component stack client side server side one issue showing much context misleading something diffs nt line correctly eg often many different components nested divs consider match type actually part different component show diff part component tree look like bug within component reality actually wrong component rendered higher level eg app rendered branch instead get error like", "d": "7/2017"}, {"body": "hey jenbuska sounds like requesting react begins rendering synchronously call made would likely introduce performance regressions nt work well fiber takes opposite direction embracing asynchronous dynamically scheduled render cycles mind going close since nt change likely made moment try get around managing queue updates outside react render cycles hope helps needing document render whole issue use span display none get around issue rendering invalid elements dom return components nt want rendering dom", "d": "7/2017"}, {"body": "cristianocca safe assume attacker access execution environment data client vulnerable nt know path window object local react component state security obfuscation weak like clientside libraries ca nt make guarantees front", "d": "7/2017"}, {"body": "hey guys similar probelm using prop instead change working thanks bacher selbekk", "d": "7/2017"}, {"body": "bug app took quite narrow regression functionality seems broken version prepared two codepens demonstrating issue one version broken one working reproduce click click click", "d": "7/2017"}, {"body": "cc jquense", "d": "7/2017"}, {"body": "duplicate believe", "d": "7/2017"}, {"body": "thanks think could look", "d": "7/2017"}, {"body": "problem dominputcomponent nt update value tracking bits updatecousins radioscheckboxes easy fix nt moment pr something", "d": "7/2017"}, {"body": "easiest workaround override yes ideally api super clear would look like might look release cycle", "d": "7/2017"}, {"body": "gaearon considered approach breaks devtools traceback example given file run devtools show source location called overriding like calls seen made always even passing errors", "d": "7/2017"}, {"body": "good observation", "d": "7/2017"}, {"body": "implement performance enhance described webgl custom elements add perf comparison forking react disabling string coercion sure get keeping track", "d": "7/2017"}, {"body": "think encouraging custom element authors override setattribute may best approach breaks platform conventions argue instead need pass rich data custom element use property think work done allow done declaratively jsx worth works preact today check property present set otherwise fall back using attribute adopting simple model like sounds appealing", "d": "7/2017"}, {"body": "additional interesting points heard team member parser nt call sets attributes nt care overrode clone node get cloned attributes without calling anything special would occur imperative dom creation", "d": "7/2017"}, {"body": "robdodson think encouraging custom element authors override setattribute may best approach breaks platform conventions sort like saying extending htmlelement classes breaks platform conventions think ability expose interesting usecases bring ideas move web forward possibly one example argue instead need pass rich data custom element use property feasible means one would need write adapter every single framework able pass info properties instead basically impossible standard every framework use react example think work done allow done declaratively jsx might true react like view libs think passing anything property instead attribute nt yet standard wo nt flexible easy make happen across huge landscape frameworks libraries although like idea easily widespreadable like roomtemperature butter property element check property present set overriding custom element simply work everywhere property element check property present set fairly libraryspecific behavior standardized something easy make happen across frameworkslibraries end really react call decide app input coerced string first nt think nt like pattern nt use nt think block developer freedom also hack bring performance notable improvements may worth hack", "d": "7/2017"}, {"body": "parser nt call setattribute sets attributes nt care overrode clone node get cloned attributes without calling setattribute anything special setattribute would occur imperative dom creation good fixed though would inline extensible web manifesto imo noticed custom elements created existing attributes called either parallel mentioned cases manually run preexisting attributes fe custom element constructor", "d": "7/2017"}, {"body": "believe browsers use instead hidden magic would solidify notion extending html elements browsers nt current defeating extensible web manifesto unexplainable magic behind scenes nt way believe argue specs updated maintaining compatibility old apps", "d": "7/2017"}, {"body": "sort like saying extending htmlelement classes breaks platform conventions sorry phrasing little loose guess getting custom elements spec designed let developers extend htmlelement nt know similar designs help folks override builtin pieces like setattribute pointed lead weird edge cases design work put making idea play nice parser feasible means one would need write adapter every single framework able pass info properties instead setattribute basically impossible frameworks encountered already set properties provide syntax let developer default angular pass properties custom element provide syntax want specifically set attribute mentioned preact also prefers properties ember believe vue syntax specifically passing properties elements setattribute standard every framework use react example definitely hear saying seems like practice though libraries already prefer setting properties rich data provide syntax let developer declaratively web standard seem bit de facto one noticed custom elements created existing attributes attributechangedcallback called either believe jsbin example console see corresponding attribute name old value new value believe browsers use setattribute instead hidden magic would solidify notion extending html elements think idea really cool nt get wrong main concern given way parser works today overriding setattribute seems like could cause real issues folks free whatever want elements depending context use might never hit corner cases maybe thoroughly document anyone consuming components would know watch least caution recommending practice custom element authors adopt", "d": "7/2017"}, {"body": "cc gaearon think feature request", "d": "7/2017"}, {"body": "tracked please join discussion intend change class api like tentative plan extend functional api instead making work state lifecycles might", "d": "7/2017"}, {"body": "really takes long time", "d": "7/2017"}, {"body": "takes lot work put major version could release faster would possible specific reason waiting", "d": "7/2017"}, {"body": "yes want find exciting things bring us else", "d": "7/2017"}, {"body": "thanks request colesanderson merged possible caveat error getting valid jsx parsing fails think unlikely jsx spec would updated support syntax unless would provide benefit broader scope issuesfeatures means need use regular function call syntax elements require amp attributes merged server renderer blacklist property markup rendered correctly keep mind serverside rendering valid dom attribute name intention hydrate serverrendered markup amp page react wo nt work though assume amp manage content client might even concern", "d": "7/2017"}, {"body": "opened bug mozilla dont know keep issue open find workaround", "d": "7/2017"}, {"body": "interesting first excellent bug report thank taking time prepare may nothing case close issue mean time look", "d": "7/2017"}, {"body": "dug react code nt find workaround nhunzaker firefox bug assigned hours ago agree close issue wait fix mozilla team", "d": "7/2017"}, {"body": "okay works feel free follow get news", "d": "7/2017"}, {"body": "come problem even added delay calling pagerender phantomjs addition componentdidupdate wo nt fire either", "d": "7/2017"}, {"body": "react phantomjs lastest", "d": "7/2017"}, {"body": "update okay know problem lies something chetonreactsortable input talking inside sortablelist deactivate input focus caret works create isolated example confirm bug react otherwise clear react library bug thanks", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "late squeeze related issue", "d": "7/2017"}, {"body": "sounds good list keeps growing actively working release", "d": "7/2017"}, {"body": "added controllist field list", "d": "7/2017"}, {"body": "causing issues idea version go", "d": "7/2017"}, {"body": "well", "d": "7/2017"}, {"body": "ah start preparing release aweary flarnie documentation preparing release otherwise best copy prior releases take notes", "d": "7/2017"}, {"body": "documentation relevant using release manager branch anymore diverged much goal cherry pick little possible", "d": "7/2017"}, {"body": "still good idea walk document without release manager related bits", "d": "7/2017"}, {"body": "closing merged", "d": "7/2017"}, {"body": "react using checksum validation seems like moot still show diff seems like involves lot dev code want ship production users close feel strongly released please let know take another look", "d": "7/2017"}, {"body": "would like create failing unit test maybe send fix thanks", "d": "7/2017"}, {"body": "probably force codepath jsdom monkeypatching", "d": "7/2017"}, {"body": "tagc seems indicate issue close issue believe issue react really need small example reproducing error investigate", "d": "7/2017"}, {"body": "aweary yeah close", "d": "7/2017"}, {"body": "fixed promises wo nt break", "d": "7/2017"}, {"body": "closing due lack activity", "d": "7/2017"}, {"body": "activity assuming low priority since createclass deprecation warnings wanted circle back thank investigating issue thanks aweary gaearon", "d": "7/2017"}, {"body": "jasoncramfighter sorry lack activity exactly sure want reproduce issue using potentially address ensuring running strict mode like class components", "d": "7/2017"}, {"body": "aweary worries nt sure path forward either waited bit given future direction heading fix would great would nt expect think explanation noted somewhere help anyone else future encounters issue thanks help", "d": "7/2017"}, {"body": "reading expected behavior bodies class declarations class expressions executed strict mode ie constructor static prototype methods getter setter functions executed strict mode class example surfaces error even manually example nothing react could seems like everything works intended", "d": "7/2017"}, {"body": "gaearon aweary guys rock", "d": "7/2017"}, {"body": "gaearon maybe would worth documenting react without page since obvious mutating props using silently fail", "d": "7/2017"}, {"body": "mutating props lot things forbidden strict mode like using undeclared variable would silently fail sound specific react createclass guess could add section recommends add top file", "d": "7/2017"}, {"body": "gaearon right using undeclared variable nt specific react way explicitly freeze intention enforces immutability props specific react introduced case action would nt expect fail outside strict mode mutating object failing silently", "d": "7/2017"}, {"body": "fair enough want send pr", "d": "7/2017"}, {"body": "gaearon understand correctly also affect case loaded via minified using build whole bundle sources internal token named differently dozens false positive warnings console", "d": "7/2017"}, {"body": "super clear mean uglify nt mangle property names generally unsafe", "d": "7/2017"}, {"body": "provide code example would benefit clear want destructure", "d": "7/2017"}, {"body": "suggestion closed worked around using decorators completely different design js import react component react class somecomponenta extends component maybe component adds special flag later life cycle methods class somecomponentb extends component state specialflag true maybe component removes special flag later life cycle methods class container extends component render let specialflag thisfoostate let passedcomponent thispropspassmeacomponent specialflag something special return example simplistic idea make state optional", "d": "7/2017"}, {"body": "oh see generally recommend reaching another component makes coupled tightly", "d": "7/2017"}, {"body": "yes example nt show exactly intent time trying separate template component logic coupling would acceptable case presenter decorator simplified whole process", "d": "7/2017"}, {"body": "especially annoying reduxmobx users dom component state never used app function components since using redux", "d": "7/2017"}, {"body": "sure mean app nt use dom state wo nt problem since would using controlled componenta", "d": "7/2017"}, {"body": "right meant say component state", "d": "7/2017"}, {"body": "guess control closing let know mistaken", "d": "7/2017"}, {"body": "seems like fine uncompressed size grew minified ones", "d": "7/2017"}, {"body": "going close issue nt recent updates enough information us reproduce issue provide assistance mackersd end finding way reproduce let us know", "d": "7/2017"}, {"body": "context users loading multiple copies react commonly causes error theorize may triggered different versions react required libraries depending react libraries update support version may come commonly past least seems common enough worth fixing issues open across various libraries folks issue helping info reproduce debug state plan mvp add warning time multiple copies react loaded link documentation howwhy might happen fix bonus indicate multiple copies react devtools icon add workaround code react work ok even loaded multiple copies might want since allows users continue broken state", "d": "7/2017"}, {"body": "least seems common enough worth fixing issues open across various libraries clear think issue completely fixing error making error message comprehensible fiber stack produced error message linked error page issues linked ones already legible error message fiber nt show message crashes typeerror believe issue fiber parity stack failing gracefully rather crashing internals need add invariant error message fiber code since exists stack code surely could make message better including debugging instructions improve error page adding suggestion error message page making message prominently duplicate react would likely helpful also take stab fixing reducing common extracting separate package shared mutable state think would worth tracking separate issue block beta apologies meant already want make sure page action item making resilient would great seems like work putting invariant", "d": "7/2017"}, {"body": "thanks clarifying fiber nt show message crashes typeerror notice right fixing main blocker improve error message make par refs must owner warning maybe acceptable first step seems reaching point symptom larger problem nt support two versions react running usually done mistake happens add warning better docs around think help even also needed beta release open separate issue edit context looks like fiber load multiple copies react", "d": "7/2017"}, {"body": "think adding warning discussed clear way go legitimate cases independent reacts page eg third party widget control works cross think devtools great idea though", "d": "7/2017"}, {"body": "thanks linking issue great context looks like warning removed added removed point pain point people warning nt open new issue already decided generally support loading two copies react going warn", "d": "7/2017"}, {"body": "think best explanation legitimate cases want agree need warn patterns clearly unsupported devtools seems like best worlds lets know something suboptimal spam console", "d": "7/2017"}, {"body": "fixed longer reproduces", "d": "7/2017"}, {"body": "thanks wdhorton reminding make pr", "d": "7/2017"}, {"body": "seems like fixed", "d": "7/2017"}, {"body": "fixed", "d": "7/2017"}, {"body": "enable arity checks need explicit opt", "d": "7/2017"}, {"body": "looks like turned based says flow ship strict function call arity turned flag removed guessing means close going anyone knows reason reopen let know", "d": "7/2017"}, {"body": "nhunzaker next step", "d": "7/2017"}, {"body": "nt think nt work capturing works expected part nt work property reason nt work bit confusing react simulates capturing bubbling phase reality one often toplevel event react walks component tree simulate two phases dom event caught bubbling phase many cases react still simulates phases based problem react fills properties dom event default see bubbling real dom event caught bubbling phase synthetic capture phase react reflected sure whether something fixed guess send pr change event dispatch could consider nt know code well tag bug probably low priority checking seems like rare use case", "d": "7/2017"}, {"body": "far understood event phases simulated correct order capturing phase body target first bubbling phase target body end property nt change value always equals bubbling phase constant correct", "d": "7/2017"}, {"body": "think right although would nt exclude possibility listen capturing phase events nt checked", "d": "7/2017"}, {"body": "hunch first built userland works well people use successfully consider reopening bringing test renderer", "d": "7/2017"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "7/2017"}, {"body": "close seems like corner case caused duplicate packages code nt exist react anyway", "d": "7/2017"}, {"body": "thanks sorry nt follow deduping reacts seems fixed", "d": "7/2017"}, {"body": "agree better document expected cause side effects synchronously update state", "d": "7/2017"}, {"body": "gaearon pr docs", "d": "7/2017"}, {"body": "tracking localization effort", "d": "7/2017"}, {"body": "sounds like nt bug", "d": "7/2017"}, {"body": "hi gaearon like share proposed solution clarify transition storing storing seems unnecessary show entire component updating change last time time entire code shown addition already shown separate snippet agree presumption think make following changes code snippets set initial state remove constructor move move replace finally show newly updated components seems plausible go ahead start working updating tutorial", "d": "7/2017"}, {"body": "sure demonstrate working well let", "d": "7/2017"}, {"body": "error boundaries currently supported server rendering initial error report nothing without seeing example reproduces code nt exist master anymore bug report likely outdated reproduce react betas come soon please let us know", "d": "7/2017"}, {"body": "tagging bug although sure side still needs someone investigate", "d": "7/2017"}, {"body": "back", "d": "7/2017"}, {"body": "real time react fibre launch", "d": "7/2017"}, {"body": "close since followup reproduce let us know", "d": "7/2017"}, {"body": "could nt replicate thanks", "d": "7/2017"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "7/2017"}, {"body": "nt seem actionable close", "d": "7/2017"}, {"body": "know released", "d": "7/2017"}, {"body": "good question brought release umbrella issue", "d": "7/2017"}, {"body": "put queue", "d": "7/2017"}, {"body": "closing due lack response", "d": "7/2017"}, {"body": "issue error given tried install socketio react native used bash windows finally could install package", "d": "7/2017"}, {"body": "need reproducing example works experience", "d": "7/2017"}, {"body": "next steps prs merge", "d": "7/2017"}, {"body": "including time spent library time components", "d": "7/2017"}, {"body": "close part bigger api changes nt ready", "d": "7/2017"}, {"body": "send fix", "d": "7/2017"}, {"body": "gaearon give shot", "d": "7/2017"}, {"body": "oleglustenko pavelsuraba correct context document options suggest use arrow function preserves scope parent closure component use functionprototypebind returns copy function specific context hope helps", "d": "7/2017"}, {"body": "hiroagustin use externs file react", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "fixed tagging followup", "d": "7/2017"}, {"body": "think may issue boolean react set typically still evaluates instance still produce checked checkbox think removing boolean attribute typical practice guess distinction drawn enumerated attributes expect true false boolean attributes examples enumerated attributes things like syranide pointed taking bigger step back think switching passing properties custom elements would really nice sort sidesteps issues nt resolve amp case amp requires attribute instead property", "d": "7/2017"}, {"body": "arindampradhan sorry delay please", "d": "7/2017"}, {"body": "fixed", "d": "7/2017"}, {"body": "hey gaearon notice react beta congrats checking see movement beta provide way third parties create renderers", "d": "7/2017"}, {"body": "still list final release", "d": "7/2017"}, {"body": "closing duplicate discussion", "d": "7/2017"}, {"body": "small update released react beta emit cryptic errors like one even application code swallows error react still print console might early try react since ecosystem still preparing error never occur future switch", "d": "7/2017"}, {"body": "ever resolved", "d": "7/2017"}, {"body": "nt", "d": "7/2017"}, {"body": "aweary next step forward removed examples folder think list adequate start also linked footer docs website", "d": "7/2017"}, {"body": "yea fine start think close", "d": "7/2017"}, {"body": "anyone knows react gets released idea also easy migrate existing createreactapp react releases worth using react instead creating streaming movie website like netflix thanks", "d": "7/2017"}, {"body": "anyone knows react gets released idea team nt yet announced settled release date also easy migrate existing createreactapp react releases yes plan one primary purposes releases add deprecation warnings prepare people worth using react instead creating streaming movie website like netflix fine use upgrade released pay attention devmode warning messages things deprecated problems", "d": "7/2017"}, {"body": "updated remaining open issues phases archiving issue still reference open items phase planning future work fiber future releases", "d": "7/2017"}, {"body": "update fixed ignore everything click view old post fyi sections misformatted fixed x reactdom fixes jquense nhunzaker aweary want release x probably ship fix x new warning callback refs stateless functional components x new api deprecations x moved separate package provide codemod want update es classes moved separate package removed oneliner factories moved separate package forgot moving removed forgot moving x moved separate package x deprecate react addons x decide handle umd addons build x fix bug alpha x remove deprecations added x stop appending strings x remove x remove x move separate package x move separate package x move factories separate package x decide addons build x keep addons need work regardless whether react aliased flat bundle case x strip proptypes checkers production build x readd warning calling proptypes directly x reactdom fixes jquense nhunzaker aweary want release x make decision input fix jquense accepted follow work change flarnie link issue related follow work", "d": "7/2017"}, {"body": "thanks rchanou correct missing something looks like remove indentations checkbox lists words click show details dropdowns indentations intentional indented items related previous unindented item maybe nt make relationship clear enough think words click show added confusion people saw details dropdown nt know common use tag github people may used happy make changes fix formatting issues thanks", "d": "7/2017"}, {"body": "flarnie since original post fixed hid fix realize needed fixing thanks", "d": "7/2017"}, {"body": "able return strings component render use alpha w rn thought already possible", "d": "7/2017"}, {"body": "rn use fiber yet react package relevant nt contain reconciler logic helpers like createelement component fiber switch rn fiber time soon nt exact date", "d": "7/2017"}, {"body": "injected via innerhtml execute without react true react script tags injected via executed security reasons although may look like crosssite scripting attack result harmless specifies", "d": "7/2017"}, {"body": "done reasonable steps address problem react devtools users displays distinctive red icon development builds helps people learn difference versions early also creates peer pressure developers notice sites visit report people working seen major sites fix issue within days rolling notice react devtools links website published instructions create production build major bundlers also made prominent installation page create react app continued gain popularity teaches distinction early separate commands also displays permanent notice development mode terminal react beta releases ship filenames make clear nonminified build used production think future might explore ways solve problem feel like move ahead without drastic measures see helps thanks everyone discussion", "d": "7/2017"}, {"body": "thank doubled career opportunities reinvigorated love coding daytoday enthusiasm react native", "d": "7/2017"}, {"body": "might want take look explains react behaves like", "d": "7/2017"}, {"body": "closing duplicate way around issue got attention", "d": "7/2017"}, {"body": "gaearon works looks like behavior get documented caveat since filed main reason left one open anyway thanks finding issue indepth explanation admittedly surprising first logic", "d": "7/2017"}, {"body": "close", "d": "7/2017"}, {"body": "yes think certainly", "d": "7/2017"}, {"body": "small update released react beta emit cryptic errors like one even application code swallows error react still print console might early try react since ecosystem still preparing error never occur future switch", "d": "7/2017"}, {"body": "maciejka particularly plain javascript behavior aweary vote close recommended approach think", "d": "7/2017"}, {"body": "sounds good", "d": "7/2017"}, {"body": "little code aside changeeventplugin relates ie anymore back gutted bunch legacy code beyond release react removes createclass proptypes many parts api overall size much smaller trueadm also done great work bundle together react smarter reduce build size even lots progress sure next step issue beyond work progress made last months going close", "d": "7/2017"}, {"body": "overall size much smaller claim yet also added new features tipped back close old size remove code add room new features", "d": "7/2017"}, {"body": "ack thanks keeping honest", "d": "7/2017"}, {"body": "tried none worked except tweak jkilesc work order imports matter would think entry script polyfills top would different including separate file entry array like babelpolyfill javascript webpackconfigjs entry polyfill pathresolve dirname srcpolyfilljs main plugins new webpackoptimizecommonschunkplugin order array matters names main vendor polyfill minchunks indexjs require require polyfilljs absolutely ensure loaded first require require transpile order libraries seems shift polyfill loaded react go also worked babelpolyfill entry script", "d": "7/2017"}, {"body": "expected work es imports hoisted spec babel follows even put executed later use lint rule protect future", "d": "7/2017"}, {"body": "right exactly ended discovering reason posted solution number one google result may alone lack understanding internals make work trying save next guy couple hours thanks linter rule def getting added", "d": "7/2017"}, {"body": "sure thanks posting nt mean say nt understand issue pointing future readers behavior expected bug either webpack babel", "d": "7/2017"}, {"body": "someone still facing issues moved babelpolyfill end webpack config solution found", "d": "7/2017"}, {"body": "finally best approach understand issue order loading polyfills example provided notsoluckycharm way go", "d": "7/2017"}, {"body": "qborreda solution load webpack users means making main entry array first element array gon na shown", "d": "7/2017"}, {"body": "small update released react beta emit cryptic errors like one even application code swallows error react still print console might early try react since ecosystem still preparing error never occur future switch", "d": "7/2017"}, {"body": "verify fixed least far dom fixtures concerned", "d": "7/2017"}, {"body": "richsoni thanks providing test case incorporated dom test fixtures unable reproduce issue still really fantastic test case thank providing pr addition try", "d": "7/2017"}, {"body": "also thanks filing fantastic issue", "d": "7/2017"}, {"body": "small update released react beta emit cryptic errors like one even application code swallows error react still print console might early try react since ecosystem still preparing error never occur future switch", "d": "7/2017"}, {"body": "chinese v", "d": "7/2017"}, {"body": "moved remaining open items decided archive issue open new umbrella issue individual issues items phases finish release", "d": "7/2017"}, {"body": "think argument part react contract event see arguments bug said get arguments third party library library could adding arguments", "d": "7/2017"}, {"body": "okay thanks change code make assumption", "d": "7/2017"}, {"body": "thanks gaearon", "d": "7/2017"}, {"body": "small update released react beta emit cryptic errors like one even application code swallows error react still print console might early try react since ecosystem still preparing error never occur future switch", "d": "7/2017"}, {"body": "using blacklist imports pretty good example key functionality case mocking component dependency jsx jestmock reactselect gt const createelement require react const reactselect requirerequireactual reactselect const mockedasync props gt createelement async props mockedasyncproptypes reactselectasyncproptypes mockedasyncdefaultprops reactselectasyncdefaultprops reactselectasync mockedasync return reactselect seems like sort mocking could wrapped function library nt get repetitive", "d": "7/2017"}, {"body": "also experiencing right", "d": "7/2017"}, {"body": "provide example consistently reproduces issue using issue template would really helpful stefanfisk jmzo", "d": "7/2017"}, {"body": "closing one might revisit progress made removing attribute whitelist might ways thanks discussion", "d": "7/2017"}, {"body": "help comment really appreciated", "d": "7/2017"}, {"body": "bug explained intentional workaround simple use jest mock third party component causing issues example put top test file imports replace component become string eg component become leaf snapshot like course wo nt actually test makes sense test code libraries exporting multiple components workaround similar want provide different mock something like finally last option mock note return anything adjust match expectations tested code works use jest unfortunately good solutions runners", "d": "7/2017"}, {"body": "thanks lot helpful comment sure explanation helpful many jest noobz like", "d": "7/2017"}, {"body": "mocked party dependency used reactdom finddomnode app somecomponenttestjs jestmock somelibrarylibmockthis gt const mock requirerequireactual mockformockthis return mock test drawback party dependency changes diretory structure etc break", "d": "7/2017"}, {"body": "know lot different ways error occur hope case help someone case error related callback return null props change component unmounted read using calculate position course null value everything fail thing test element passed callback null made error disappears though hard debug kind error react throw error another different cause", "d": "7/2017"}, {"body": "chadoh thanks man saved day", "d": "7/2017"}, {"body": "web living standard since jsx compiled html checked attribute jsx agnostic rendering support html regardless want become standard jsx step provide funding become next html least nt cause issue finally fixed compatibility checked css property browser face jsx going success rendering dom layer bad good point jsx always javascript expressions part got correct", "d": "7/2017"}, {"body": "pasieronen fixed react version", "d": "7/2017"}, {"body": "small update released react beta emit cryptic errors like one even application code swallows error react still print console might early try react since ecosystem still preparing error never occur future switch", "d": "7/2017"}, {"body": "get issue one react using root component get cycle", "d": "7/2017"}, {"body": "hi everyone wanted mention struggled issue turned setting devtool eval also causes issue regardless configuration uglifier whoever struggles also check devtool set sourcemap whatever option cheers", "d": "7/2017"}, {"body": "hey hognogi nt heard setting causing issue would able provide example demonstrating far know nt cause warning great could investigate", "d": "7/2017"}, {"body": "aweary might issue inherent library failed convince webpack actually uglify code inside eval statements maybe uglify loader far concerned eval webpackoptimizeuglifyjsplugin error", "d": "7/2017"}, {"body": "hognogi thanks think makes sense devtool meant use production sounds expected", "d": "7/2017"}, {"body": "experiencing issue first glance src attribute looks suspicious everything works fine removing src attribute img tag took another look html content found case two little separate react widgets page embedded php template script tag included caused error way fixed problem making sure script tag included", "d": "7/2017"}, {"body": "landed", "d": "7/2017"}, {"body": "please provide documentation", "d": "7/2017"}, {"body": "beta add documentation something becomes stable part official release release happened yet", "d": "7/2017"}, {"body": "hitmands documentation nt stable published web checked master", "d": "7/2017"}, {"body": "write code run code chrome output typeerror var nodenametolowercase function think browser bug", "d": "7/2017"}, {"body": "think react beta ships new algorithm end beginning new chapter react basics things place even though exposed yet excited see evolve time", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "updates", "d": "7/2017"}, {"body": "would issue wink", "d": "7/2017"}, {"body": "think gaearon particularly already alias hood supported without warning similarly", "d": "7/2017"}, {"body": "supporting sounds reasonable downside introduces overhead keeping react codebase consistent though mitigated linting tools long nt introduce problem supported browsers would throw accessing problem anymore favor allowing", "d": "7/2017"}, {"body": "side note nt use random keys comment random key prevents react meaningful performance improvement", "d": "7/2017"}, {"body": "living problem discovered node tests cover internal logic really well browser tests even give us enough confidence many browser issues regressions unobservable code need actual human interaction also tedious write understand instead went set manual dom fixtures since react operates dom constrained way change logic often feasible contributors go manual test suite verify changes work intended different browsers already caught several regressions helped move bugfixes without much review bureaucracy think point investing running unit tests browser combination node unit tests manual dom tests seems working well work might include making dom fixtures easier access eg hosting link ci task every pr close", "d": "7/2017"}, {"body": "dom fixtures great thank", "d": "7/2017"}, {"body": "love know dom fixtures thing part testing suite communities could benefit libraries dom tests thanks heads", "d": "7/2017"}, {"body": "hey vvo basically jsdom even javascript interface dom ca nt accurately reproduce every edge case across every browser things take manual user input made little app host test cases manual testing eventually like host publicly prototype think would great could share learned libraries community large also massive backlog things need file mdn much else need run stuff real browser using real user would love hear thoughts share community", "d": "7/2017"}, {"body": "would love hear thoughts share community think everyone would expect library like react tested every browser etc learning dom fixtures project might good talk subject community", "d": "7/2017"}, {"body": "wrap functional components recomposepure const expensivechild children gt return hi children const purechild recomposepure expensivechild codepen", "d": "7/2017"}, {"body": "improved example updated realized best thing use js class purecomponent extends reactpurecomponent render consolecount purecomponent return reactpurecomponent thispropsrender shouldcomponentupdate false pretty cool", "d": "7/2017"}, {"body": "new promise redundant bnayazil calling functions unclear mean case still returning new promise", "d": "7/2017"}, {"body": "days ago new api added dom specification allows abort fetch requests api implemented browser yet created polyfill available npm abortcontrollerpolyfill polyfill essentially thing code posted istarkov allows transition code changes real browser api implemented details", "d": "7/2017"}, {"body": "released react beta deep stack traces think close", "d": "7/2017"}, {"body": "hey need able set inline styles case calculate using state like background mozlineargradient thisstategradient background webkitlineargradient thisstategradient background lineargradient thisstategradient return least workaround", "d": "7/2017"}, {"body": "late party first thought symbols would add unnecessary complexity would nice use symbols rather mathrandom shortid component keys", "d": "7/2017"}, {"body": "closing works design end read information", "d": "7/2017"}, {"body": "gaearon know history react uses flow still valid issue", "d": "7/2017"}, {"body": "typescript dependency used think", "d": "7/2017"}, {"body": "looks like still problem thought reproduce codepen could opened change event never gets chance fire dropdown closes", "d": "7/2017"}, {"body": "duplicates issue closing land", "d": "7/2017"}, {"body": "function mess docs say returns child children throws otherwise suggests pass object like every method give first child docblock function states confirms expected behaviour reality none things instead verifies arguments reactelement", "d": "7/2017"}, {"body": "like see support direct use overlap conversation picked close", "d": "7/2017"}, {"body": "small update released react beta emit cryptic errors like one even application code swallows error react still print console might early try react since ecosystem still preparing error never occur future switch", "d": "7/2017"}, {"body": "anyone looking solution readytouse component use instead normal text input element everything ok", "d": "7/2017"}, {"body": "zeroasterisk read holds number clicks set event synthetized ref", "d": "7/2017"}, {"body": "think sebmarkbage suggestion valid make react component behavior isolate specific use case", "d": "7/2017"}, {"body": "issue building autocomplete make headstails whether fired event lead closing menu works fine react leads warnings fired", "d": "7/2017"}, {"body": "ref callbacks", "d": "7/2017"}, {"body": "nt think anything done bubble react allows bubble using synthetic event system attaches event listener form normalizing event bubbling process using circumvents react way know event sorry", "d": "7/2017"}, {"body": "allowing somehow use case configuration loaded via json several label configuration options specify string displayed something like title displayed use denote case adding parallel would prohibitive dozens settings json content using null useful way distinguish defined versus deliberately omitted", "d": "7/2017"}, {"body": "allow null set proptype required since required p", "d": "7/2017"}, {"body": "jquense thanks super helpful deleted previous comment answer said thing", "d": "7/2017"}, {"body": "jquense allow null undefined one whole problem javascript provided different constructs reason forcing everyone treat proptypes artificial limitation want proptype explicitly allow null mean allow undefined well two distinct cases language designed way purpose pr work around oversight", "d": "7/2017"}, {"body": "want disallow means typo allow means caller explicitly passed point issue understand issue closed recommended switch flow look", "d": "7/2017"}, {"body": "binki one way allow use proptype validator function example permitted proptypes library uses internally check strings one benefit move function outside component call needed guess solution deviates intent proptypes library reason say due code proptypes library actually validating quick check performed wherein properties set isrequired automatically throw error property value words believe required property null erroneous whereas consider valid use case required nulls", "d": "7/2017"}, {"body": "agree reasons stated standard use placeholder mozilla developer network value null represents intentional absence object value null identifier property global object like undefined instead null expresses lack identification indicating variable points object apis null often retrieved place object expected object relevant null allowed least", "d": "7/2017"}, {"body": "jquense removing means probably set default mean setting default initial value component reducer avoid allowing value prop", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "looks like works", "d": "7/2017"}, {"body": "saaammmeeeeee", "d": "7/2017"}, {"body": "gaearon digging old issues see anything closed way forward issue like moved something like reactfuture", "d": "7/2017"}, {"body": "think close", "d": "7/2017"}, {"body": "wrote test case based upon discussion also migrated dom test fixture make sure behavior correct believe everything working intended actually looks like might problem current local build react working separately select option value attribute uses text content value see use cases though please help identify missed select disabled option default select option rendered first option disabled selected value disabled option empty string please select item value attribute uses string children option element select selected disabled option value selected option please select item select value options value please select item selectable default options like please select need value equal valid empty state select way react associate attribute tag know selected going leave open looks like working issue might uncovered bug master build react", "d": "7/2017"}, {"body": "kevenjesus hi helpful provide code snippet achieved since also using modal loads defaultvalue first run second time opening modal set value defaultvalue binding works default understand use ref input type bind values componentdidupdate work handling function appreciate help", "d": "7/2017"}, {"body": "looks like error stack overflow desire better error error state june cc zpao", "d": "7/2017"}, {"body": "closing one favor", "d": "7/2017"}, {"body": "mqliutie clean consolelog android load application", "d": "7/2017"}, {"body": "every time get error method scroll dozens errors react broken state find error code actually blew biggest difficulty causes sort wish react would could stop dead even throw errors since would easier find root cause really viable state anyway nt seem manage wrap functional stateless components would really helpful supported way guarantee dev tool ie dev mode prod would show redbox rendering throws error", "d": "7/2017"}, {"body": "perhaps concern trycatch performance penalty soon obsolete one comment mention recent versions optimize functions containing trycatch blocks answer explains performance penalty avoided moving trycatch wrapper function main function could throw optimized petka antonov optimization killers guide use statements minimal impact must isolated minimal function main code affected js var errorobject value null function trycatch fn ctx args try return fnapply ctx args catch e errorobjectvalue e return errorobject var result trycatch mightthrow void unambiguously tells whether call threw result errorobject var error errorobjectvalue else result returned value", "d": "7/2017"}, {"body": "biggest difficulty causes sort wish react would could stop dead even throw errors since would easier find root cause really viable state anyway yes exactly react reacthotloader nt seem manage wrap functional stateless components would really helpful supported way guarantee dev tool ie dev mode prod would show redbox rendering throws error please read comment pretty much added", "d": "7/2017"}, {"body": "gaearon oh see nice though assume probably end using discovered thread something like dev mode", "d": "7/2017"}, {"body": "nevermind thought made possible display redbox place component failed appears display redbox place root component", "d": "7/2017"}, {"body": "error boundaries nt root mentioned put strategic places eg route handler wrapper important components big enough show useful box nt think good idea show place every individual components components offscreen little show box fact dev probably always want see fullscreen error still nt decided default way show error boxes react bvaughn prototyping point get back release", "d": "7/2017"}, {"body": "look forward exploring bit hopefully soon", "d": "7/2017"}, {"body": "going official name method react", "d": "7/2017"}, {"body": "settled", "d": "7/2017"}, {"body": "gaearon current component childs case unknown source components possibility dismantling important catch children parents", "d": "7/2017"}, {"body": "catches whole subtree component", "d": "7/2017"}, {"body": "catching errors child components supported use new hook react beta try read feature new blog post error handling react think close issue likely feature evolve time love feedback let discuss focused future issues", "d": "7/2017"}, {"body": "\u6d4b\u8bd5\u6d4b\u8bd5", "d": "7/2017"}, {"body": "\u6d4b\u8bd5\u6d4b\u8bd5", "d": "7/2017"}, {"body": "movement last couple years sure worth api churn nt seem like frequentlyrequested change think gaearon nhunzaker wanted make change might worth next major release", "d": "7/2017"}, {"body": "let close inactivity come back organically comes think high priority", "d": "7/2017"}, {"body": "think close returning arrays components supported since react beta try still limitations ssr support ready tracking fix final release thanks everyone feedback", "d": "7/2017"}, {"body": "thank dan", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "gaearon awesome improvement support pure text node", "d": "7/2017"}, {"body": "yes supports returning strings", "d": "7/2017"}, {"body": "thank viniciusdacal tested windows firefox osx safari osx chrome unable reproduce believe fixed", "d": "7/2017"}, {"body": "use example works filtering need use simulation currentelementclick like", "d": "7/2017"}, {"body": "like trying make setup similar know example illustration concept follow best practices example probably best create inline arrow function handle render", "d": "7/2017"}, {"body": "react htmlfor", "d": "7/2017"}, {"body": "resolution years anything move forward", "d": "7/2017"}, {"body": "going close since movement indication scenario common pain point meaning warning probably wo nt useful enough justify", "d": "7/2017"}, {"body": "anyone finds useful written library called reactfrontload lets bind promisereturning function component run component renders server client renders function runs synchronously server render well really final component render blocked resolved asynchronously normal client render run client page serverrendered also options specify finergrain control runs percomponent basis really useful data loading pretty much use case wrote solve try", "d": "7/2017"}, {"body": "jsx return promise returns component", "d": "7/2017"}, {"body": "think conditional rendering would nt approach know data", "d": "7/2017"}, {"body": "joining one think still essential feature react lacks also agree even third party libs may cover subject come directly within", "d": "7/2017"}, {"body": "came implementation", "d": "7/2017"}, {"body": "would also useful checkers like eslint could tell default props needed custom property", "d": "7/2017"}, {"body": "write autoplay", "d": "7/2017"}, {"body": "someone suggest apply autoplay video carousel item active carousels video play", "d": "7/2017"}, {"body": "html css notion inline block elements whitespace inline elements significant nt really altered way processor situtation complicated fact change elements inline block css still correct way would refer list default inline block elements rarely swapped practice never strip whitespace inline text elements default", "d": "7/2017"}, {"body": "closing since tests testing public api specific work eg done tracked separately", "d": "7/2017"}, {"body": "believe resolved definitely covers cases could find move forward new issues particular edge cases discovered", "d": "7/2017"}, {"body": "looks like issue closed verified fixed", "d": "7/2017"}, {"body": "reactnative input property providing something similar deal number input values could really nice addition though would argue happen user land probably need figure bad input handle empty case numbers report probably something else feature worth considering comfortable pushing community", "d": "7/2017"}, {"body": "nhunzaker think reasonable push community nt seem high demand react core let defer userland close", "d": "7/2017"}, {"body": "already internal keys use arrays index array insert new element keys wrong point important note common problem encountered writing list components", "d": "7/2017"}, {"body": "fix hacks", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "solution working pretty well far generating sequential ids simple utility living checksums time inspired jwietelmann said resetting perrequest basis maybe worth saying said much help working component library works best creating entire app utility generate ids let current export default function generateid prefix return export function resetidcounter current root component call resetcounter function server clears id memory time new server render browser nt really reset anything fine working well far", "d": "7/2017"}, {"body": "particularly annoying warning message especially case passing onchange handler everything looks works perfectly development try testing form component tests riddled warnings pretty sure masking crux problem trying solve whats adding pointless case since trying test onchange handler passed text field remove warning still means ca nt write tests handler", "d": "7/2017"}, {"body": "issue attach bogus grommet component provides controlled management custom prop provide prop react complains printing warning even though input fact controlled", "d": "7/2017"}, {"body": "closing since implemented warning would cover situation exampe", "d": "7/2017"}, {"body": "jamescharlesworth problem find solution", "d": "7/2017"}, {"body": "wnr dont know fixed react team yet quick dirty solution manually set attribute value change", "d": "7/2017"}, {"body": "javascript const fieldinput class fieldinput extends component static proptypes onchange proptypesfunc value proptypesoneoftype proptypesnumber proptypesstring constructor args super args componentdidupdate value thispropsvalue value const str thisrawstrsubstr thiscaretposition const index string thispropsvalue indexof str thiscaretposition handlechange ev thisrawstr string evtargetvalue thiscaretposition number evtargetselectionend render return works us usually use mask functions processing raw user input", "d": "7/2017"}, {"body": "going close since recent movement interest introduces potential problem existing test suites performance improvement would likely minimal", "d": "7/2017"}]