[{"body": "nt think need com domain fyi paying market rate com registrations", "d": "7/2017"}, {"body": "domain already expired make offer minimum issue closed link new owner", "d": "7/2017"}, {"body": "oh well interesting see happen domain", "d": "7/2017"}, {"body": "bb works perfectly event mixed marionette would like see support life bb developers marionette great job promoting maintaining user base eco system would like see bb one user said good glue shit hammer already job agree would like add hammer needs improvments better job better one things hope someone jumps board makes bb fork full compatibility puts life back bb agree angular shit", "d": "7/2017"}, {"body": "may start dev branch bb code transferred could split code parts add rollup effectively build distributable version", "d": "7/2017"}, {"body": "respectfully ogonkov already done used jspm systemjs distribution versioning use rollup bundling well bb drops thinking making bb version fully embraces babel esnext stage perhaps extra modularity elements bb focus native functions versus library usage", "d": "7/2017"}, {"body": "nicely done interesting breaking requires deeper inheritance events instead treating mixin like backbone currently would definitely support modular backbone like see smaller iterative nonbreaking steps", "d": "7/2017"}, {"body": "paulfalgout gt breaking requires deeper inheritance events instead treating mixin like backbone currently mainly due documentation purposes esdoc time many documentation tools including tjsdoc finishing nt work mixins knowledge every frameworks mixin api library would necessary personally think deep inheritance mixins generally antipattern versus explicit composition static types available especially comes core framework code recall change effectively works bb mainline nt exactly breaking change though nt got mainline bb test suite hooked would nice thing proof compatibility", "d": "7/2017"}, {"body": "sorry yes mixin meant ca nt extend events another object frankly showstopper many backbone plugins also mixin events already existing objects", "d": "7/2017"}, {"body": "indeed breaking change one worthy potential ever adopted mainline say idiomatic guiding principle bb related refactor efforts move away mixins frameworks react well documented believe removing mixins public framework apis good thing minimizing usage internal implementation needed recent collection mixin addition things debatable gather minority considerable amount around components bb would explicit getter events instance via composition versus mixin inheritance ala adhoc objects something like const anobject event new backboneevents register function thiseventon test trigger thishandler testtrigger triggertest function thiseventtrigger test trigger handler function thistesttrigger", "d": "7/2017"}]