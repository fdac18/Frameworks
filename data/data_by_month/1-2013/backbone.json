[{"title": "findwhere method available collections", "body": "sure collections proxying collection methods noticed findwhere available", "num": "2228", "d": "1/2013"}, {"title": "set supposed clear changed", "body": "supposed happening javascript model new backbonemodel modelset one silent true modelchanged returns one modelpreviousattributes returns modelset two silent true modelchanged returns two modelpreviousattributes returns one backbone", "num": "2227", "d": "1/2013"}, {"title": "fetch ca nt bound change event", "body": "hi collection listens changes model update like getting back user data instead expected probing figured events pass callbacks case meant eventually getting user model param user model url means overriding collection url request understand edge case easily circumvented using instead maybe deserves looking specially since believe also means ca nt bound event right ca nt think good way solve wo nt break though maybe needing explicitly state want override request settings", "num": "2225", "d": "1/2013"}, {"title": "backbonemodel clear use default attributes", "body": "hello currently following problem want reset model defaults defined prototype see unfortunately backbonecollection reset method backbonemodel clear use defaults suggestion would either extend backbonemodelprototypeclear use thisdefaults available add another reset method backbonemodelprototype would prefer modify clear method contras speek feature would make pull request", "num": "2224", "d": "1/2013"}, {"title": "model altered default values reverted modelfetch called", "body": "anyone else reproduce behavior seems strange sure intended work way thought would report currently using backbone underscore project production hasnt upgraded yet javascript var dummymodel backbonemodelextend urlroot someurltogetmodeldata defaults thename dummy model var dm new dummymodel thename smart model consolelog dmtojson show name smart model fetch model data dmfetch success function model consolelog modeltojson show dummy model anyone insight much appreciated bug im glad could find", "num": "2223", "d": "1/2013"}, {"title": "view default options merged options passed initialize method", "body": "define view default options var myview backboneviewextend tagname div classname myview options foo foo initialize function options alert thisoptionsfoo thisoptionsfoo alert thisoptionsbar thisoptionsbar options get extended options passed constructor result extension gets set expected result extension would also get passed initialize function instead options passed initialize method options passed constructor ie nt include defaults example alerts even though value properly set default options expected behavior impression argument equivalent objects expected behavior perhaps docs could updated clarify options passed strictly options passed constructor", "num": "2222", "d": "1/2013"}, {"title": "model destroy success callback fails", "body": "model destroy seems always call error callback even server returns ok seems issue delete method createreadupdate works fine reverting fixes issue delete", "num": "2218", "d": "1/2013"}, {"title": "garbage collector collection backbonehistorylocation android go anthor page use browser", "body": "garbage collector collection backbonehistorylocation android go anthor page use browser function gethash routenavigate throw error", "num": "2217", "d": "1/2013"}, {"title": "ca nt stop backbone event", "body": "see code backboneon test function alert hi return false test function alert hello trigger test return false first handler stop event event stopped", "num": "2214", "d": "1/2013"}, {"title": "configurable index attribute inside collections polymorphic models", "body": "guys lot backbonejs development one features missed library way define attribute index models inside collection instead getting idattribute default useful polymorphic collections example different kinds model populated inside polymorphic collection id attribute could repeat since unique table one solutions change idattribute something like uuid solve problem coffeescript class ftbmodelsdocument extends ftbmodel urlroot documents idattribute uuid model urls use uuid attribute fetch save stuffs something wanted workaround overrite url method accomplish seems backbonejs could handle problem really well configuration inside collection similar idattribute inside models", "num": "2213", "d": "1/2013"}, {"title": "uncaught typeerror object object window method configure", "body": "", "num": "2212", "d": "1/2013"}, {"title": "backbone rendering", "body": "sure meant opening ticket half planned put end angular writeup thing became monstrous realized needed article right nt router anything really demonstrate two new libraries chitinjs interesting one imago vague idea template store got pack ca nt really go detail let know nt sensible place put j", "num": "2211", "d": "1/2013"}, {"title": "longer passes optionsindex add event handler collection", "body": "backbone anytime something added collection event handler add event handler would receive index value options longer case backbone causing javascript errors", "num": "2210", "d": "1/2013"}, {"title": "removing last event callback leaves key events", "body": "see example javascript var animal spoke extend animal backboneevents var onspeak function consolelog speaking animalon speak onspeak animaltrigger speak animaloff speak dangling empty array speak events consolelog speak still existing animanevents animaleventsspeaklength consolelog animalevents object speak array length intentional know might optimizing reuse event kind leaky situation cc tbranyen knowtheory since chatted imirc", "num": "2209", "d": "1/2013"}, {"title": "model add savedattributes property revert function rollback model lastsynced version", "body": "recently found problem user could make variety changes models collection choose either save changes cancel trashing changes made represents state model time last event would propose similar represents state model time last event addition would function would allow model rollback state matches persisted localstorage database etc without need call feel could done code similar follows nt attempted solution coded solutions permodel basis javascript add savedattributes property revert function backbonemodel var model backbonemodel function attributes options thissavedattributes thispreviousattributes clone thisattributes extend modelprototype events revert function thisattributes thissavedattributes clone attributes savedattributes sync success backbonesync function method model options optionssuccess function resp status xhr success modelsavedattributes clone modelattributes success resp status xhr modeltrigger sync model resp options", "num": "2208", "d": "1/2013"}, {"title": "add view remove event", "body": "find quite beneficial view fire remove event gets removed views dependent another view like modal open easily handle events", "num": "2207", "d": "1/2013"}, {"title": "docs state models trigger invalid event validation fails error event triggered", "body": "maybe reading right seems like mixup docs state failed validations trigger invalid event set validationerror property model value returned method error model xhr options model save call fails server based designed standard functions handle validation errors invalid event second argument array error strings per custom validate method another error handler set handle server errors expecting second argument xhr object obviously model triggers error event validation errors passes validation error array second argument function expects xhr stuff nt work invalid event even use", "num": "2206", "d": "1/2013"}, {"title": "save validation failure calling error callback", "body": "save documentation states error callback also invoked model validate method validation fails however validation fails error callback getting called", "num": "2205", "d": "1/2013"}, {"title": "jsdoc support better code completion ides especially phpstorm", "body": "ok add jsdoc comments make better code completion methods ide write pull request want request code", "num": "2203", "d": "1/2013"}, {"title": "add support async event handlers", "body": "child views handled parent views find self often needing fire events may handled asynchronously would nice backbone supported async handlers deferreds remove custom events oktoremove notoktoremove required solve problem end result would something like javascript var view backboneviewextend remove function var thistrigger beforeremove function meremove", "num": "2199", "d": "1/2013"}, {"title": "trigger calls unbinded event handlers", "body": "nt know way work think remove event handler trigger removed event handler called apparently backbone caches event handlers even removed still triggered last time solution check triggering loop handler still active use underscore see jsfiddle apply adding event handlers trigger trigger already sent run next trigger", "num": "2198", "d": "1/2013"}, {"title": "modelset img new image crashes", "body": "hi im working backbonejs try set new image model like var image backbonemodelextend idattribute id defaults img null initialize function thisset img new image browser crashes console give error bdefaults gmodel rextendsextendyextendaextendmextendd backbonemodelextendinitialize gmodel", "num": "2197", "d": "1/2013"}, {"title": "comparator fat arrow", "body": "defining comparator function fat arrow coffeescript got collection sorted reverse order however using single arrow collection sorted correctly wrong use fat arrow define comparator", "num": "2195", "d": "1/2013"}, {"title": "modelparse method return false model created", "body": "would nice parse method avoid data backbonemodelextend parse function responce responcedisabled return false", "num": "2194", "d": "1/2013"}, {"title": "collectionfetch update true working bypassing parse", "body": "right collection receives json object like contents model model model pretty standard right parse function pull array contents property works fine standard fetch call change fetch update true get single model sole attribute contents property appears skip parse object completely seems rather broken behavior pretty major bug thoughts", "num": "2193", "d": "1/2013"}, {"title": "support callback contexts", "body": "would suggest following changes support context callbacks way jquery ajax line change success successcall model resp options line change success successcall model resp options line change success successcall resp status xhr line change error errorcall model xhr options sound reasonable", "num": "2192", "d": "1/2013"}, {"title": "model validate example documentation work written", "body": "var chapter backbonemodelextend validate function attrs options attrsend lt attrsstart return ca nt end starts var one new chapter title chapter one beginning oneon error function model error alert modelget title error oneset start end run chrome firefox nothing gets alerted addition invalid attributes allowed set running onesave trigger alerts either idea missing something", "num": "2188", "d": "1/2013"}, {"title": "collection model fetchingsaving etc status", "body": "able know collection populated beeing populated might something like javascript collectionfetch collectionisfetching true display loading collectionisfetching false amp amp collectionlength display records found real usecase simplification objects passed deep system view listens collection signals displays either loadingno recordsrecords list model could even savedeleteupdate thing", "num": "2185", "d": "1/2013"}, {"title": "add remote events views", "body": "view methods could triggered events outside el scope example would using view class button gui ca nt encapsulate button since view already el set another elements", "num": "2182", "d": "1/2013"}, {"title": "optionscontext passed success function backbonesync", "body": "upgraded something like xhroptions xhroptionsurl validationurl xhroptionscontext mycontext xhroptionssuccess function resp status xhr thisvalidationsuccess resp attrs options xhroptionsdata jsonstringify extend thistojson attrs xhroptionscontenttype applicationjson backbonesync create xhroptions previously success function would set mycontext options would call mycontextvalidationsuccess longer context set options", "num": "2179", "d": "1/2013"}, {"title": "backbone view incorrectly inherits variable data passed initialize function", "body": "recently upgraded app backbone bunch views broke narrowed issue following several backboneview objects pass backboneview objects causes child view inherit parent view optionsevents etc obviously incorrect example javascript var parentview backboneviewextend events click something clicksomething initialize function thissetelement parent render function var childview backboneviewextend events var myparentview new parentview myparentviewrender new behavior introduced since bug backbone code", "num": "2175", "d": "1/2013"}, {"title": "generally enable validation", "body": "assume current behavior requires options param validation true passed set even validate function model makes impossible generally enable validation without redefining set see also closed behavior seems changed since years ago currently cancels validation defined model", "num": "2174", "d": "1/2013"}, {"title": "router tests fail zepto", "body": "running tests zepto instead jquery currently results failures mostly related backbonerouter glancing router code looks like main use backbone around line zepto falling might somewhere tests", "num": "2170", "d": "1/2013"}, {"title": "windowlocationreplace working android browsers", "body": "seems like locationreplace working android stock browser chrome means routernavigate fails passing replace true options created jsfiddle testing backbone javascript", "num": "2169", "d": "1/2013"}, {"title": "remove method probably reset el el elements view", "body": "please consider following case telling parentview listview listitems anything remove list fine actually listview retains links dom tree get memory link course could fixed inside user code setting listview null maybe actual issue could fixed backbone level backbone could reset el el new element clear instead element specified made sample illustrate problem click render button click clear button eg chrome check heap size dev tools profiles take heap snapshot uncomment specified line code try entry gone heap", "num": "2168", "d": "1/2013"}, {"title": "support suppressing xhttpmethodoverride", "body": "bug suggestion something like add happy create tests link broken right anyway modified code allow options hash contain override setting xhttpmethodoverride gets set false nt otherwise present true still set function calls function needed web server requires setting special support even sending header access control settings api uses post made easier avoid additional webserver configuration step working example line play around setxhttpmethodoverride parameter anyway like add pull request happy write tests link starts working point working link thank josh", "num": "2165", "d": "1/2013"}, {"title": "rethink event api change listento", "body": "hello criticism listento stoplisteningto methods understood far new event methods listento stoplisteningto implemented avoid zombie events happen view deleted still bound event another object generally would say good idea fix behavior current fix nearly duplication subscriber methods break great standard setting api feel workaround stand good relation actual problem would like switch back old events api provided trigger move fix zombie events issue somewhere internal would happy know people feel similar change would generally accepted project sincerely bodo kaiser", "num": "2164", "d": "1/2013"}, {"title": "collections models call oneventname function", "body": "seems extending collection want run code model addeddeletedetc need listen appropriate event might good idea oneventname functions defined extending collection called various events also cover case silent passed extending collection wants perform operation anyway think good feature create pull request ps implemented backbonemarionette derickbailey", "num": "2163", "d": "1/2013"}, {"title": "success callback called series http codes", "body": "right following neither success error callbacks called though model updated save mode put returns delete model delete content sent success backbone never know especially odd second case reason delete return anything yes perhaps return content nt anything series codes considered success response parsed", "num": "2162", "d": "1/2013"}, {"title": "regression changing success callback parameters", "body": "success callback parameters altered include third argument unfortunately shadows argument scope ran upgrading noticed exception thrown fetch call arguments uncaught typeerror read property update undefined see line example", "num": "2161", "d": "1/2013"}, {"title": "weird behavior modelsave optionvalidate set", "body": "validate set calling modelsave call modelset modelsave option passed validation later option extended validate true makes modelsave fail however since modelset done data presented wrongly view think behaviors consistent maybe validate true option nt extend option check save", "num": "2160", "d": "1/2013"}, {"title": "previousattributes retains previous value outside change handler behavior change", "body": "backbone behavior previousattributes changed preserves value outside change handlers see fiddle behavior see fiddle", "num": "2159", "d": "1/2013"}, {"title": "update recommendation bootstrapping follow owasp guidelines preventing xss attacks web applications", "body": "preventing cross site scripting attacks backbone applications partially addressed last year however technique suggested current documentation still vulnerable injections recently open web application security project owasp updated guidelines bootstrapping application data json recommend backbonejs documentation follow suit attaching pull request updated documentation issue", "num": "2157", "d": "1/2013"}, {"title": "error validate", "body": "please forgive getting line p found possible error function line reads nt original line function exit missing least one callback way never used supposed used userdefined", "num": "2156", "d": "1/2013"}, {"title": "callback space delimited events triggering multiple times", "body": "space delimited events like cause callback called twice behaviour expected docs probably mention", "num": "2155", "d": "1/2013"}, {"title": "call error callback model save validation error", "body": "understanding model save documentation save started either success error callback called true backbone backbone know changed validation fired model save documentation still says", "num": "2154", "d": "1/2013"}, {"title": "failed validation trigger error callback", "body": "version trigger error callback validation fails save used work following line removed comment method reads invalid event triggered callback called furthermore documentation nt mention invalid event callback still called error error events useful providing coarsegrained error messages model collection level error callback also specified options called alongside error event", "num": "2153", "d": "1/2013"}, {"title": "http patch method supported", "body": "reading update notes really excited implement new patch functionality got working perfectly switched sure worked turns recognize patch valid http method list supported methods object permits following http methods get post head put delete move propfind proppatch mkcol copy lock unlock options possible workaround edit little research turns certainly jquery end activexobject xmlhttp requests support patch native xmlhttprequest jquery ends using native version since available browser using compatibility mode wonder issue would persist user using native try test little respond try submit bug report jquery team since problem end", "num": "2152", "d": "1/2013"}, {"title": "use code style instead", "body": "use code style instead", "num": "2151", "d": "1/2013"}, {"title": "optional route route makes entire route fail", "body": "per backbone documentation route docs section subsection match docsfaq docsfaqinstalling passing faq action first case passing faq installing action second able add optional route segment router like able match test route well testparam map callback currently force entire route fail fire callback misunderstanding works legit bug", "num": "2150", "d": "1/2013"}, {"title": "remove change method", "body": "hi firstly really appreciate hard work build fantastic library heavily used everywhere core product guys remove modelchange method since say delay attributes changes longer available core product using modelchange method thousands times everywhere way possibility add back appreciate kind help regarding avoid manually fixing core product millions js lines cheers caesar", "num": "2149", "d": "1/2013"}, {"title": "pass errortype error callback", "body": "error callback saving model takes xhr object zepto jquery ajax error wrapper errortype zepto statustext jquery parameter dropped recommend passed error callback allow custom error handling example want model save handle timeout errors differently common case mobile development connectivity issues would easier handle case errortype provided error callback", "num": "2145", "d": "1/2013"}, {"title": "include source maps backbone", "body": "source maps incredibly useful debug code production example jquery started including source maps distribution", "num": "2143", "d": "1/2013"}, {"title": "model remains changed fetch server", "body": "main problem model todo regular fetch todosfetch update true todo changed server side updates backbone collection fine still remains changed way avoid logic change model clientside call method save model eventually fetching server saving changed model sending put request server javascript todosfetch update true todoschanged custom collection method returns list changed models gt todo todoschanged changedattributes gt order", "num": "2141", "d": "1/2013"}, {"title": "getting uncaught typeerror object method reset", "body": "suddenly error chrome latest getting uncaught typeerror object method reset version dont error backbonejs", "num": "2140", "d": "1/2013"}, {"title": "model events propagated collections listening", "body": "make heavy use backbone collections wunderlist rely events triggering subscribers attempted upgrade last week revert found event propagation broken created two jsfiddles one code different backbone versions see events make events trigger expected", "num": "2139", "d": "1/2013"}, {"title": "many uses model tojson", "body": "currently docs community seems two uses turn model attributes object stringified sent server overriding model gives user ability construct custom representation resource sent server way accept overriding sync clone model attributes plain object used template rendering model overridden get functionality described first use case second use case broken example let say model server expects root property json representation model could override like view longer makes sense use rendering template instead search documentation see documentation render uses starting feel little crazy head back tojson docs find think makes sense use stringification since jsonstringify spec makes less sense overload augmentation handed view suggestion would either alter docs clarify single purpose maybe even introduce new function augmentation handed view functionality", "num": "2134", "d": "1/2013"}, {"title": "recursive change event", "body": "code version result also catch test attribute change model haschanged version result new version ca nt see custom attribute change without usage change attributename event", "num": "2131", "d": "1/2013"}, {"title": "view options prop model collection nt", "body": "view instance property points object passed constructor hand model collection nt thing inconsistency sometimes makes confused think model collection also property fyi explained official document think", "num": "2130", "d": "1/2013"}, {"title": "small issue computechanges model method", "body": "somehow ca nt find method master branch seems like nt understand way working project please tell get latest version issue method javascript computechanges function loud thischanged var already var triggers var current thiscurrentattributes var changes thischanges loop current queue potential model changes var changeslength gt var key changes val changes already key continue already key true loud thischanges signals current prevent duplicate calls thishascomputed true return triggers line object value need check two values equals help underscore library", "num": "2129", "d": "1/2013"}, {"title": "router set thisoptions", "body": "version seems strange work javascript backbonerouterextend initialize function options thisoptions undefined options backboneviewextend initialize function options thisoptions options", "num": "2125", "d": "1/2013"}, {"title": "validation save nt provide access returned errors", "body": "save model fails validation false returned neat way access values returned validate could values returned rather false made available error callback", "num": "2124", "d": "1/2013"}, {"title": "errorneous message", "body": "never mind mistaken", "num": "2123", "d": "1/2013"}, {"title": "logic model change events changed", "body": "updated got issue model events worked called calling workaround applied way work ideas", "num": "2120", "d": "1/2013"}, {"title": "model change event nt provide options attribute", "body": "release models initialize method worked fine receiving model options arguments according update receives attribute changes model binding backbone since", "num": "2119", "d": "1/2013"}, {"title": "collectionbyid updated success create silent true", "body": "backbonejs collection object create method called silent true option server returns id id collectionbyid still remain unchanged collectionget id undefined collectionget cid work bug line method collectiononmodelevent backbonejs current code collectionbyid updated change event suppressed silent true option quick fix directly handles sync event method onmodelevent", "num": "2118", "d": "1/2013"}, {"title": "amd support", "body": "hope due theoretical considerations practice lack amd support creates inconvenience developers know use amd compliant fork shim config requirejs sill ii would prerable amd support available backbone hope add feature release see article info", "num": "2115", "d": "1/2013"}, {"title": "bumping release", "body": "jashkenas since pretty major changes since simple branch reversal validation semantics fix vs change calculation think would beneficial least minor version bump soon possible number issues closed lately check latest master would good people working version closer release candidate current", "num": "2110", "d": "1/2013"}, {"title": "suggestion modelset andor modelsave call modelparse something equivalent", "body": "finding situations would like model intercept attribute set saved calculate attributes like add set attributes currently setsaved seems would efficient ability cooked model definition like parse rather model collection listen change question react get concerned registering many listeners events stacks overloading parse probably good idea since parsing attribute data sentreturned server may likely need different intercept transform logic proposing", "num": "2105", "d": "1/2013"}, {"title": "modelset b twice makes changedattributes false", "body": "coffeescript", "num": "2103", "d": "1/2013"}, {"title": "explicit listing", "body": "discussion mailing list made realize need read paragraph two text figure param backbone methods take would nice explicit listing documentation methods might go far suggest jsduck documentation generate return signatures like case thinking something like following fetch collectionfetch options fetch default set models collection server resetting collection arrive delegates backbonesync covers custom persistence strategies returns jqxhr server handler fetch requests return json array models options callback successful request passed callback failed request passed use intelligently merge fetched models model data returns server collection efficiently reset wanted gauge interest happy legwork", "num": "2101", "d": "1/2013"}, {"title": "explicit message listento callback lack", "body": "version view using unexisting callback break runtime line error could improved already existing", "num": "2100", "d": "1/2013"}, {"title": "collectionsortedindex wrap iterator arg single string", "body": "proxying call sortedindex list value iterator like groupby sortby countby iterator arg function wrap argument function modelget n note iterator whereas groupby sortby countby allows pass string sortedindex function better using collectionindexof large sorted collections current code wrap string modelget n function also calling sortedindex developer may want pass collcomparator knowing string single arg function", "num": "2099", "d": "1/2013"}, {"title": "add underscore aliases collection methods", "body": "bitten today trying use collection looks like going along lines nt get far", "num": "2097", "d": "1/2013"}, {"title": "fetch uses parse collection amp model using update true nt use parse right time", "body": "models rooted model id model id use update true fetch never find models properly since update method line uses nonparsed version model determine id however fix may easy running models parse since parse requires instance also passing option parse defeats purpose even including parse method model since directly full results versus individual could cause duplication code ugly closure using models parse still requires pass parse time want use update maybe one parse methods nt even reference instance maybe might good idea make class method instead parameter parse instance someone really needs get", "num": "2095", "d": "1/2013"}, {"title": "uncaught typeerror read property update undefined", "body": "open todosindexhtml chrome current version get error prevents able add items list backbonejs line uncaught typeerror read property update undefined collectionmethod success success collection resp options return thissync read options", "num": "2094", "d": "1/2013"}, {"title": "computechanges use isequal instead simply arrayobject", "body": "thinking overriding computechanges use isequal instead arrayobject think good idea problem model property type array array returned server fails test compare reference please advice", "num": "2093", "d": "1/2013"}, {"title": "bug collectionget throws error", "body": "line uncaught typeerror read property prototype undefined see nt model changed line thisidattr thisidattr thismodelprototypeidattribute thisidattr thisidattr collectionprototypemodelprototypeidattribute everything seems work", "num": "2091", "d": "1/2013"}, {"title": "collectionupdate problem merging models", "body": "collection models updating within interval seconds problem calling collectionupdate data merged existing models instead new model created expected following behavior update update expected merged data merged data merged data update got means initialize function model also executed update behavior would expect would expect collection update attributes fire change event something completely wrong bug using", "num": "2090", "d": "1/2013"}, {"title": "model id longer settable via attributes hash", "body": "model create using var model new mymodel id backbone worked fine however backbone longer works must var model new mymodel modelid issue exhibited performing modelset id backbone documentation states id may set via attributes hash appears true", "num": "2089", "d": "1/2013"}, {"title": "event fired router history", "body": "since pr got merged master two places triggered router bbhistory seems odd identical event name triggered two different locations particular reason behavior desired", "num": "2087", "d": "1/2013"}, {"title": "changelog master since", "body": "know historically documentation changes changelog additions nt made release cut suggest better process would update docs add changelog apichanging pull requests get accepted master would probably result much less scramble fix mistakes docs release made case example like know intentional changes made since got several bugs application using nt exist additionally simple upgrade backbonerelational project tests broken current master believe problems related simple branch merged unclear exactly api changes made intentionally vs unintentionally hard contribute meaningful patch test case", "num": "2086", "d": "1/2013"}, {"title": "partial update", "body": "since partial patch available upstream direction would make sense work way seems somewhat prevented defaults scenario javascript var mymodel backbonemodelextend defaults b collectionadd new mymodel id x collectionupdate update returns model id x attribute missing since merge done attributes property merged result id x partial update would expect id x thoughts", "num": "2084", "d": "1/2013"}, {"title": "bindall ruins collectionmodel", "body": "recently updated stuff broke looks like using bindall initialize class model attribute corrupt javascript var users backbonecollectionextend stuff var users new users usersmodel user remove bindall problem goes away thoughts", "num": "2080", "d": "1/2013"}, {"title": "collection fetch render add event", "body": "set appview triggers overall backbone application want fetch collection dynamically add items add event thrown var appview backboneviewextend el pics code sends ajax request server nothing gets displayed instead make use render like application works var appview backboneviewextend el pics seems add event nt get thrown help please", "num": "2078", "d": "1/2013"}, {"title": "okay use stylinglayout backbone docs backbonerelational", "body": "wanted ask explicitly contributor backbonerelational created nice set docs using layout styling backboneunderscore see okay guys nt want give impression way official something documentcloud nice consistent set documentation", "num": "2077", "d": "1/2013"}, {"title": "backbone history possible bug page querystring", "body": "go page querystring lets say try navigate using page without querystring wo nt case trying navigate wo nt anything happens equal getting incorrect value created example", "num": "2075", "d": "1/2013"}, {"title": "change event trigger earlier handler calls set attribute attempting set existing value", "body": "little hard explain short code example var new backbonemodel foo bar b mon change foo function consolelog change foo triggered noop set break change event mset bar b change bar function consolelog change bar triggered change function consolelog change triggered consolelog change foo trigger change mset foo z consolelog change bar change trigger mset bar z consolelog change foo change bar change trigger mset foo issue variable line set called without making change set even change events call stack sure local variable familiar enough code suggest patch", "num": "2074", "d": "1/2013"}, {"title": "stack overflow ios relating linked lists callbacks", "body": "hello working fairly large code base noticed backbone triggers events lines linked list traversal crashes ios ios likely apple changed browser behavior relating callbacks event eventsshift node calls event tail nodetail node nodenext tail nodecallbackapply nodecontext rest node tail nodetail args event concat rest node nodenext tail nodecallbackapply nodecontext args upgrading nt feasible time wondering converting dynamic array could perhaps help sure could break something somewhere else attempted modify underpinnings yet help guidance would appreciated thanks", "num": "2072", "d": "1/2013"}, {"title": "potential security thing hashes", "body": "code routes raw string passed updatehash line cause security issues according certain automated scanners potential solution using quiets scanners", "num": "2071", "d": "1/2013"}, {"title": "upgrade console report error pick function", "body": "hello upgrade console report error pick function previous version regards", "num": "2070", "d": "1/2013"}, {"title": "options values automatically copied object", "body": "currently options convention copied view collection model passed options following lines illustrate behaviour seems wrong seems like magic values copied others nt way change behaviour would make sense values present prototype copied options example would result collections query value populated seeing something makes bad practice", "num": "2069", "d": "1/2013"}, {"title": "nt update position model collection using collectionupdate", "body": "ex old collection collectionmodels collectionupdate id id new collection collectionmodels id want collectionmodels id id", "num": "2068", "d": "1/2013"}, {"title": "reset called empty collection throws error", "body": "problem line var l thismodelslength lt l thismodelslength throws uncaught typeerror read property length undefined models populated", "num": "2067", "d": "1/2013"}, {"title": "problem nested external templates", "body": "main templates one user logged one logged working fine want logged template multiple nested templates rendered different times different pages like logged go home page go bio page etc causes whole page break way around fix", "num": "2066", "d": "1/2013"}, {"title": "triggering invalid event instead error event validation", "body": "hello recognized someone changed event name validation fails documentation nt changed yet would like ask new behavior sorry question nt find issue change thx", "num": "2064", "d": "1/2013"}, {"title": "trigger events update collectionupdate", "body": "updating collection matters views collectiontrigger update automatic", "num": "2061", "d": "1/2013"}, {"body": "maybe something like response event", "d": "1/2013"}, {"body": "would event work called every request regardless successerror request model xhr options model collection started request server otherwise could trigger event success handler", "d": "1/2013"}, {"body": "well request event wo nt work nt trigger error dilemma collection messages initially fetch messages success fetch create new view display messages init view want attach trigger whenever new messages added collection successfully saved db updates list messages could use add event triggered data saved db chose use sync event realized right view initialized success function fetch sync event firing make sense", "d": "1/2013"}, {"body": "sounds like probably want add options creating new model add event nt fired syncs database pass wait true like wait server adding new model collection", "d": "1/2013"}, {"body": "experience event nt fire database sync", "d": "1/2013"}, {"body": "method collection time assumed using would listen add rather", "d": "1/2013"}, {"body": "hi vizjerai prior cleared change however preserved next change reflects changes last change set allows us find attribute changed last unrelated note change outcome case would discourage use altogether edit forgot add code", "d": "1/2013"}, {"body": "mornin dhekke thanks pointing nt think action backbone take though deal function arguments case extra wrapper function pretty standard pattern often create separate handler think cleaner sometimes really adding bit indirection", "d": "1/2013"}, {"body": "braddunbar yeah imagined nt worthy patch thanks reply", "d": "1/2013"}, {"body": "hi bodokaiser looks like use fields set defaults use need clear extraneous attributes use case would cause large breaking change fairly small use case well leave way accomplish current functionality provided think probably leave", "d": "1/2013"}, {"body": "apologize advance dense", "d": "1/2013"}, {"body": "hey jrreed logic looking view configure private method called view constructor gets extended properties way around time guaranteed equal nt set", "d": "1/2013"}, {"body": "hey jrreed thanks pointing definitely correct arguments changed passed generally matches backbone constructors call think likely stay way therefore use need defaults", "d": "1/2013"}, {"body": "seems sideeffect change behavior jqueryajax jquery changelog prior ajax call expected return data type json jsonp would consider return value empty string success case return null success handler promise empty string returned json data considered malformed json throw error use error handler catch cases wondering case handled default within backbone sync since empty response delete pretty common", "d": "1/2013"}, {"body": "hi ewang thanks pointing however nt think action backbone take relies determine success failure issue lies jquery empty response fact invalid would appear server change response case", "d": "1/2013"}, {"body": "mornin would love fix errors experiencing however afraid need details source error reproduce please provide bit background perhaps sample code illustrates problem reopen investigation thanks", "d": "1/2013"}, {"body": "error like backbone version project fix like temporarily", "d": "1/2013"}, {"body": "happens android native browser want reproduce use android mobile open page backbone click browser back next click browser forward backbonehistorylocation empty object", "d": "1/2013"}, {"body": "chained statement like writing javascript backboneon test function alert hi return false backboneon test function alert hello backbonetrigger test chained nature first statement prevent event bound backbone object prevent event executed outside scope sure trying achieve perhaps look fits needs", "d": "1/2013"}, {"body": "jquery events work backbone either use appropriate use flag", "d": "1/2013"}, {"body": "want prevent propagation would need use like", "d": "1/2013"}, {"body": "jackwanders true jquery events backbone completely different systems example throw exception", "d": "1/2013"}, {"body": "jackwanders stoppropagation nt supported feature backbone events applies jquery events", "d": "1/2013"}, {"body": "mistake guess looked console tried", "d": "1/2013"}, {"body": "chaining event handlers like want bubble events view hierarchy plugin distinction jquery backbone events less prone confusion", "d": "1/2013"}, {"body": "less prone confusion get worry confusion wink", "d": "1/2013"}, {"body": "ajaxsolutions thanks opening issue mentioned vincentbriglia backbone events chainable interface create events chained syntax handler attached event exists independently handlers convention established jquery way proxy combine calls concepts arise standard dom events jquery wrapping normalizing since backbone events nt associated dom exception delegateevents views reimplementing functionality nt make sense need something like listen dgbeck plugin going close since understanding interpretation issue backboneevents different jquery dom events", "d": "1/2013"}, {"body": "problem completed sencha project library provides application events stopped returning false expecting backbone", "d": "1/2013"}, {"body": "check plugin composite keys lets specify array attributes use attributes joined native composite key support turned several times tried get wink going close", "d": "1/2013"}, {"body": "forget use new solved", "d": "1/2013"}, {"body": "mornin koglerjs thanks posting looks like would appropriate plugins extensions wiki though add convenience", "d": "1/2013"}, {"body": "removed slow easy duplicate need", "d": "1/2013"}, {"body": "hi iros reproduce appears fixed master thanks reporting", "d": "1/2013"}, {"body": "oh thank looked master", "d": "1/2013"}, {"body": "iros gotchu covered wink", "d": "1/2013"}, {"body": "done something similar several occasions think knowledge diff current state previously synced state could nice addition modelscollections", "d": "1/2013"}, {"body": "another option would provide function function provide access last sync attributes similar works developers could implement functions", "d": "1/2013"}, {"body": "backbone designed extendable view extend remove method call super thing", "d": "1/2013"}, {"body": "hi check precedent since easy provide lifecycle events views backbone opts let user define", "d": "1/2013"}, {"body": "yea nice event parity among viewscollectionsmodels", "d": "1/2013"}, {"body": "tried adding success callback confirmed success callback getting called success error callback getting called validation error", "d": "1/2013"}, {"body": "change caseywebdev explains", "d": "1/2013"}, {"body": "yup check reasoning closing", "d": "1/2013"}, {"body": "online documentation still wrong", "d": "1/2013"}, {"body": "thanks pointing updated remove line mentioned", "d": "1/2013"}, {"body": "hope replaced need check modelvalidationerror afterwards ca nt get far backbone without needing know", "d": "1/2013"}, {"body": "thanks fixing docs messed time well", "d": "1/2013"}, {"body": "explained validation section line item docs model section mbhnyc sure thing", "d": "1/2013"}, {"body": "hi gugu thanks asking understand reasons changes backbone source written literate style meant improve readability comments standalone document nt think jsdoc comments included time soon", "d": "1/2013"}, {"body": "hi certain semantics describing triggering events certainly asynchronous like also pass handlers arguments event call later reason nt work elaborate use case", "d": "1/2013"}, {"body": "hi thanks pointing however using check handler presence every iteration trigger would prohibitively expensive keeping callback list immutable called keeps things simple straightforward removing adding handler iteration affect current callback list", "d": "1/2013"}, {"body": "looks like problem overwriting native image constructor call get infinite recursion try code instead", "d": "1/2013"}, {"body": "works", "d": "1/2013"}, {"body": "mornin steverandy tell comparator works whether bound current instance would mind providing sample code illustrating problem", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "thanks example steverandy running see indeed problem caused instance bound comparator issue comparators used differently based arity function using function bind function arity length preserved however coffeescript targets instead knowledge preserve function arity sure action backbone take least know cause work around", "d": "1/2013"}, {"body": "thanks braddunbar nt expose sort sortby directly feels clear", "d": "1/2013"}, {"body": "believe exposed already provides niceties like triggering event using provided comparator", "d": "1/2013"}, {"body": "question even bind context using", "d": "1/2013"}, {"body": "nt think recommended way using coffeescript use fat arrow default way define function used concept", "d": "1/2013"}, {"body": "braddunbar good run covered shim believe could covered via creative use good use case helps fallbacks support cases covered way another one limitation native bound functions property shimmed ones", "d": "1/2013"}, {"body": "thanks jdalton good reference material", "d": "1/2013"}, {"body": "good morning directfuelinjection sure goal want create empty model instead using response return model parse expected return response object even object empty hope helps", "d": "1/2013"}, {"body": "mean parse return false model destroyed", "d": "1/2013"}, {"body": "destroyed nt quite follow mean model trigger event returns", "d": "1/2013"}, {"body": "something like", "d": "1/2013"}, {"body": "nt think need model created destroy", "d": "1/2013"}, {"body": "ok im developing dynamic page loading project im looking solution load collection fetch method sending ajax parameters url json responce looks like", "d": "1/2013"}, {"body": "current solution thisloaddynamic extend thiscollectionmodelprototype parse function responce thiscollectionupdate responcerows silent true thiscollectionviewcntpages responcetotal know horrible", "d": "1/2013"}, {"body": "well expects return array response objects something like", "d": "1/2013"}, {"body": "oh forgot thanks dude made day", "d": "1/2013"}, {"body": "glad could help", "d": "1/2013"}, {"body": "hi abritinthebay problem uses unparsed version collection compare models longer discussion matter believe issue describing would mind directing comments consolidate comments issue going close duplicate please let know think incorrect cause reopen", "d": "1/2013"}, {"body": "correct duplicate issue certainly extremely frustrating one might add makes update functionality basically useless nt perfectly formatted response format", "d": "1/2013"}, {"body": "abritinthebay look fix", "d": "1/2013"}, {"body": "use bind success error callbacks", "d": "1/2013"}, {"body": "sorry sound like workaround solution think reason stand common standard set jquery", "d": "1/2013"}, {"body": "hi srfrnk good deal discussion successerror callbacks going friends please direct comments callback signature thanks", "d": "1/2013"}, {"body": "greywolve event looking invalid updated master branch ghpages pushed fix documentation accurate please check let know anything nt look correct", "d": "1/2013"}, {"body": "two issues event name longer longer calls validate default changes since explicitly pass options hash setting validate default see jsfiddle also ps paste code github write new line backticks write code end block backticks see help page", "d": "1/2013"}, {"body": "ahh thanks tip completely forgot code rendering p thank", "d": "1/2013"}, {"body": "hi would recommend use events purpose think edit meant event", "d": "1/2013"}, {"body": "think swell idea braddunbar", "d": "1/2013"}, {"body": "thanks caseywebdev let us know nt work", "d": "1/2013"}, {"body": "braddunbar caseywebdev idea decouple two parts view able get collection state clean collection aware using signals many cases done way order actions matters agree view listen request sync signals request signal might sent collection passed view therefore view idea collection fetching consider example view gets arbitrary collection collection either fetched fetching unfetched passed view tl dr see example example signals work example view gets already fetched emty collection signals also work example important signals work view assume collectionlength unfetched view also assume given collection unfetched state state want decouple collection view view able know collection state thing goes model", "d": "1/2013"}, {"body": "ca nt collection sending view set flag collection view access also wait fire event", "d": "1/2013"}, {"body": "caseywebdev request might aborted two requests might get sent solution would connect deferred xhr javascript collectionon request function model xhr thisfetching true xhrfail function thisfetching false bind sync error function thisfetching false think might handy built hand every enhancement like got bb codebase would bloated", "d": "1/2013"}, {"body": "every enhancement like got bb codebase would bloated", "d": "1/2013"}, {"body": "think less bloating approach many different ways might want handle concurrent requests backbone provides primitives need handle gets way", "d": "1/2013"}, {"body": "might want take look writing finitestate machine purposes chaplinjs one pretty easy replicate also ifandelsemachinajs see blog post may suit specific use case", "d": "1/2013"}, {"body": "hi sydcanem see might want times views encapsulating small portion ui listening events outside something generally want need necessary always", "d": "1/2013"}, {"body": "callbacks nt called specific context new signature also best bet use", "d": "1/2013"}, {"body": "called specific context backbone documentation options says options success error callbacks jquery request options jqueryajax documentation context says object made context ajaxrelated callbacks default context object represents ajax settings used call ajaxsettings merged settings passed ajax intentional deviation", "d": "1/2013"}, {"body": "side effect backbone trying agnostic method persistence choosing", "d": "1/2013"}, {"body": "constructor also expects first argument object passing instance would make sense would also fix attribute inheritance effect seeing", "d": "1/2013"}, {"body": "ah would explain change get introduced", "d": "1/2013"}, {"body": "passing events options hash added", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "workaround like mentioned personally suggest passing option everywhere really need making configuration option backbone nt make sense people expect backbone behave one consistant way", "d": "1/2013"}, {"body": "made sense wherein nt backbone configuration option user defined model type behavior model type ultimately backbone developer tool nt make sense introducing unnecessary tedium developer whether tedium consistent perceive set already verbose workaround legacy browsers supporting property intrinsic gettersetter functions adding noise set invocations validation probably ever going game plan consuming backbone workaround provided hopefully work although might change something like clarity debugging thanks", "d": "1/2013"}, {"body": "check discussion change made", "d": "1/2013"}, {"body": "good history still modellevel optin else heeded request make optout major breaking change pretty severe certainly universally ideal validation enabled behaviors manual type checking javascript sorely lacks automatically thus uses validation default appropriate", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "know issue closed wanted follow thought sleeping perhaps consistency sought related fact backbone would cancel set action raise event continue forward even clobbering previous statement think design flaw programming flow similar vbscript error resume next command fails especially something validation succeed reversed event inappropriate actually error situation thrown flavors javascript support try catch convention sure another thread somewhere discusses trycatch used event raised instead doubtful practicalities using event handling conventions also concerned explicitly passing validate true set nt throw exception validation failure nt make sense would handled context locally scoped catch block try make everyone happy likely validation happen times opted validate function defined model result default validation raise event currently implemented validate true option passed set result failed validation throw error correct convention developers would use explicit validate true wrap try catch eventhandled code used legacy default validation behavior continue work well plus validation tracking needed nt need flow interruption debugger logging developers could use approaches trycatch critical flow control event handling", "d": "1/2013"}, {"body": "different making view first place elements removed document retained decide destroy view connection document view scheduled gc", "d": "1/2013"}, {"body": "sure understood tim destroy view called hopes would everything remove elements allow memory freed retains link dom tree wo nt gced specifically telling change solves eg via ok storing instance came surprise also would hold old removed dom tree", "d": "1/2013"}, {"body": "would destroy view assuming nothing else retains reference", "d": "1/2013"}, {"body": "itsuryev removed dom jquery view calling retain reference detached dom element whole listview object tree gced long reference listview cause leak js engine using referencing counting afaik", "d": "1/2013"}, {"body": "wyuenho sample complete shows problem tested recent chrome jquery indeed removed element dom view still pointers tree effectively prevents tree gced saving link subview expected view save link removed element tree really really boils question right way remove subview memory would correctly freed original thought seems correct answer confirm intended", "d": "1/2013"}, {"body": "cleaned code removed everything irrelevant key line comment line links wo nt get gced uncomment number check heap moral story nt delete objects even removed dom may still hold useful information detach object tree clean event handlers", "d": "1/2013"}, {"body": "nt get saying fact maintains tree leak build beyond could patch call", "d": "1/2013"}, {"body": "thank saving link detached tree seems feature bug find strange worth fixing wyuenho argument also solid may want access detached element tbranyen leak intended seems intended well thank time case closed", "d": "1/2013"}, {"body": "listento stoplistening settled certain way among many proposed solutions see clean event bindings attached specific view none solutions clean one thing sure share love backbone loose ends work aroundish feel pairing two symmetrical sides inversion control certain structural elegance think nature beast little complex simplicity old api", "d": "1/2013"}, {"body": "actually thought either check specific flag trigger ensure view still let event system listen destroy event unsubscribing however short read issue linked think right currently better idea lets see develop maybe", "d": "1/2013"}, {"body": "imagine like idea course present set challenges may make worth backbone directly specifically lot scenarios marionette provide event method difference executed tends important making decision call onchange method model change event called example may consequences call onchange triggering change event someone might say want called event reason way around run many times marionette often versions events marionette also times return value method used functionality example close event onbeforeclose method call whenever call marionette view instance method view close return value close though say nt think could done pointing challenges run personally would love see eventstrigger always call method version event code remove marionette always makes happy", "d": "1/2013"}, {"body": "another complexity experienced underscoreasfirstcharacter sometimes always used convention private methods objects love feature marionette find many happy occasions use", "d": "1/2013"}, {"body": "agree think full solution quite complex implemented backbone simple solution current version suggest adding something like add function similar functions accordingly leave function current implementation way think knowing item added even silent flag proxy add method would something like last resort", "d": "1/2013"}, {"body": "event handlers interdependencies ca nt control order event handlers", "d": "1/2013"}, {"body": "wyuenho completely unrelated extending collection way knowing model addedremovedetc seems way around proxy relevant collection functions", "d": "1/2013"}, {"body": "wo nt something like work", "d": "1/2013"}, {"body": "would work unless passed options", "d": "1/2013"}, {"body": "talk removing see seems another reason remove since nt necessarily want suppress handlers time", "d": "1/2013"}, {"body": "issue referenced talks model set specifically main concern regarding collection functions course option removed entirely backbone initial solution would work", "d": "1/2013"}, {"body": "issue title arguments issue body equally valid instances said case execute code event handlers called code question fairly complex nested collection bunch stuff event handlers events notified hook run handlers way order event handlers definitely help trimming nasty hacks way hack manually unshift handler yuck", "d": "1/2013"}, {"body": "think create pull request hope someone privileges notice", "d": "1/2013"}, {"body": "boriskozo would work unless silent passed options nt use suppress certain event actions take advantage custom", "d": "1/2013"}, {"body": "caseywebdev discussion opposite case someone passes still want get notification", "d": "1/2013"}, {"body": "saying nt pass wo nt make really duplicating functionality", "d": "1/2013"}, {"body": "caseywebdev could always control users backbone library writers ca nt always ask users libraries forgo backbone conventions makes unhappy library users writers", "d": "1/2013"}, {"body": "caseywebdev nt agree duplicating functionality convention frameworks net allow library writers anyone extends framework using directly control flow without jumping hoops please see derickbailey comment", "d": "1/2013"}, {"body": "wyuenho hopefully wo nt convention long boriskozo may useful extension already readily accomplished via events trigger order listen agree caseywebdev nice feature somewhat expensive think belongs plugin territory", "d": "1/2013"}, {"body": "braddunbar writing plugin collection needs track items added removed collection maintain internal data structure implement using users collection may pass add function example making internal data structure inconsistent two ways think proxy add function function solution suggested think another way overkill proxy", "d": "1/2013"}, {"body": "braddunbar would providing way order event handlers much minimalist approach problem", "d": "1/2013"}, {"body": "wyuenho none event handlers called passed matter order discussion started events order personally think events ordered like framework uses event aggregators", "d": "1/2013"}, {"body": "boriskozo think different problems solved solution calling method regardless whether passed think original idea right problem simply removing trick however use cases take care addressed alone specifically cases code must executed andor events fired way proxy methods fire events way cumbersome way order event handlers could override make sure event handlers always certain positions pattern nt allow", "d": "1/2013"}, {"body": "wyuenho already order event handlers", "d": "1/2013"}, {"body": "braddunbar handlers inserted end position ca nt changed case cooperating collections mutually listening events using handler able call beginning handler end prevent infinite loops problem always inserts end handler suppose clean states every handler executing afterwards see updated states special handler always first handler execute established way except hacking undocumented subject change anytime", "d": "1/2013"}, {"body": "wyuenho check may may helpful", "d": "1/2013"}, {"body": "think boriskozo original idea ticket getting lost chatter event priority usecase describes think understand basically library author wants able make sure hook anytime model added collection whether option passed wants rely functionality build functioning library nt result subtle bugs introduced solutions proposed far add option collections function called whenever model added collection matter silent true remove backbone altogether introduce functionality plugin library author require plugin dependency nt think covered personally think best way forward", "d": "1/2013"}, {"body": "rubymaverick thank summary could please elaborate implement maybe link another plugin something similar ca nt figure", "d": "1/2013"}, {"body": "easy enough remember", "d": "1/2013"}, {"body": "well kind hoping avoid proxying", "d": "1/2013"}, {"body": "boriskozo rough draft option could also override invoke certain functions inside", "d": "1/2013"}, {"body": "caseywebdev thanks definitely use code example", "d": "1/2013"}, {"body": "hi abritinthebay using custom local storage something similar running locally jquery works without issue", "d": "1/2013"}, {"body": "using custom sync simply copy amp paste original beforesend method attached adding custom authorization header better way backbone btw change", "d": "1/2013"}, {"body": "abritinthebay something like similar stays backbonesync", "d": "1/2013"}, {"body": "nt know nt think obvious change see improves behavior update either way", "d": "1/2013"}, {"body": "appears working ran code really sure could caused change made good know documented even simple sync change might cause issues closing", "d": "1/2013"}, {"body": "probably fixed something like wherever options need extended success callback", "d": "1/2013"}, {"body": "seeing thing backbone underscore issue", "d": "1/2013"}, {"body": "timmywil tried suggested luck side call nt fail undefined anymore object nt seem collection appears array models contained collection neither reset update function seems like something chain causing problem", "d": "1/2013"}, {"body": "guessing easy fix nt ton investigation look pull request timmy jan pm tony lukasavage notifications githubcom wrote timmywil tried suggested luck side call nt fail undefined anymore collection object nt seem collection appears array models contained collection neither reset update function seems like something chain causing problem reply email directly view github", "d": "1/2013"}, {"body": "gets defaulted passed passed back shadowed always present onwards", "d": "1/2013"}, {"body": "wyuenho get supposed happen seeing case success callback defined appear collection object much array models", "d": "1/2013"}, {"body": "custom methods expected updated call", "d": "1/2013"}, {"body": "wyuenho definitely shadowing sounds like may purposeful brought confusion caseywebdev seems superfluous unnecessary ever time want something different var shadowing extend whatever options changed would nt take much make backbone plugins custom sync methods backwards compatible", "d": "1/2013"}, {"body": "llllkkkk believe best way go would pass call nt applied model validated success returned server option nt want wait server call would get copy attributes returns false reset model attributes", "d": "1/2013"}, {"body": "tgriesser thanks lot", "d": "1/2013"}, {"body": "thanks issue dhruvaray believe correct behavior method meant used inside change handler docs change event method used get previous value changed attribute need know attributes model change best clone model attributes let know nt clear things", "d": "1/2013"}, {"body": "understand correctly constraint quote documentation relaxed possible get previous values even outside change handler need clone example", "d": "1/2013"}, {"body": "oh ok must mixed jsfiddle issue see functionality", "d": "1/2013"}, {"body": "yep new feature", "d": "1/2013"}, {"body": "good hear changehandler methods preserve values outside change handler updated fiddle check suspect utility given multiple updates model client end method always return true unless plan reset model state server sync case find upgrading section changehandler section backbone documentation reflect behavior change sure whether unintended side effect changes maybe folks want update sections end need exploit behavior change backboneassociations", "d": "1/2013"}, {"body": "forgot pull requests show issues closing", "d": "1/2013"}, {"body": "line correct nt explicitly set truthy value function exist considered valid function prefixed underscore imply part public api use risk may change unexpectedly internal logic refactored", "d": "1/2013"}, {"body": "fabriceleal new behavior change log model validation enforced default model save longer enforced default upon construction model set unless validate true option passed", "d": "1/2013"}, {"body": "caseywebdev tgriesser ok thanks clarification bad", "d": "1/2013"}, {"body": "change event triggered every attribute individually changes change event triggered attributes changed believe mentioned docs", "d": "1/2013"}, {"body": "right passing space separated events works like calling twice added two handlers", "d": "1/2013"}, {"body": "ok tnx caseywebdev explanation much clearer one docs guess rewrite code bind generic change add statments callback", "d": "1/2013"}, {"body": "see explanation", "d": "1/2013"}, {"body": "running code example sorry duplicating minutes faster", "d": "1/2013"}, {"body": "nt documented well yet due ambiguity catchall callback errors handled differently error returned function returned value stored pattern chosen rather callback always synchronous opposed", "d": "1/2013"}, {"body": "ok makes sense thanks please update documentation release", "d": "1/2013"}, {"body": "keeping one open docs get updated nt forget", "d": "1/2013"}, {"body": "also docs nt updated say invalid new event name instead error", "d": "1/2013"}, {"body": "everything documented one closing", "d": "1/2013"}, {"body": "documentation model validate still mentions able pass error callback set method", "d": "1/2013"}, {"body": "caseywebdev modelvalidationerror give example mentioned anywhere backbone site", "d": "1/2013"}, {"body": "derbeth documentation added public next release", "d": "1/2013"}, {"body": "wanted replace could use", "d": "1/2013"}, {"body": "great thanks posting workaround keep things clean ever decide drop support simply remove issue closed fix would jquery ajax method prioritize activexhttp object native xmlhttprequest object available idea ramifications would application could rendered unable save user disabled activex lot common disabling js long story short really fixable dropping support heh", "d": "1/2013"}, {"body": "whoa sounds like could bad bug maybe something force us reconsider supporting patch first place reopening", "d": "1/2013"}, {"body": "jquery bug", "d": "1/2013"}, {"body": "invoking function apply call function using first argument context pass along values array second argument case arraylike initialize called arguments rather called single argument info", "d": "1/2013"}, {"body": "omg forget focus thx", "d": "1/2013"}, {"body": "hi qbunt thanks pointing however test locally seems work without issue would mind posting code illustrates problem", "d": "1/2013"}, {"body": "problem investigation found one plugin backbonequeryparameters override regex backbone router nt include optional route segment", "d": "1/2013"}, {"body": "ah ha", "d": "1/2013"}, {"body": "dealing complex query strings still plugin available absolutely causing thanks lpproulx really appreciate jashkenas keep great work man backbone lot fun cheers guys", "d": "1/2013"}, {"body": "event definitely still removed method", "d": "1/2013"}, {"body": "yes change method using remove method", "d": "1/2013"}, {"body": "caesarli give example using little discussion", "d": "1/2013"}, {"body": "cases define model inside model define change function define collection bind add modelchange method example var mdl backbonemodelextend name backbone change function timelocalized thisget dtdate print ymd var clc backbonecollectionextend blah blah blah clcbind add function mchange", "d": "1/2013"}, {"body": "example defining backbone removal nt change anything", "d": "1/2013"}, {"body": "used option method needed update attributes multiple models triggering events still rely option case although first dismayed see feature removed finished refactoring parts app work without favor cleaner backbone internals think would help publish note change since significant release notes nt explain reasoning", "d": "1/2013"}, {"body": "ok models doesnot customized change method collection try fire change method add models refactor point removing method could u please make sure changelog written different colors especially core functions removed like getbycid change", "d": "1/2013"}, {"body": "caesarli read removed want add something like back simple enough add snippet right backbone included similarly replaced get could", "d": "1/2013"}, {"body": "tgriesser well fair one use cases queue changes model snippet nt account", "d": "1/2013"}, {"body": "neonsilk right would nt help code dependent queued silent changes", "d": "1/2013"}, {"body": "idea queued silent changes", "d": "1/2013"}, {"body": "dervalp nt one using earlier release situation definitely needed queued silent changes much discussion nt able come one", "d": "1/2013"}, {"body": "pass along whatever like extending handler", "d": "1/2013"}, {"body": "ryanthegiantlion actually little discussion error callbacks signatures implemented feel free give input like see errorsuccess signature", "d": "1/2013"}, {"body": "yes could extend modify backbone thought access perhaps given box edit soz posted closed issue look", "d": "1/2013"}, {"body": "found solution know best one coffeescript class modelstodo extends backbonemodel initialize thison change change change todo options todohaschanged return", "d": "1/2013"}, {"body": "provide code isolated jsfiddle help figure might causing error", "d": "1/2013"}, {"body": "first backbone project based fiddle also doesnt work anymore dont see error", "d": "1/2013"}, {"body": "fetch looks like click run works correctly", "d": "1/2013"}, {"body": "ok example working thnx problem try make jsfiddle showing problem", "d": "1/2013"}, {"body": "getting error trying fetch backbonepaginatorclientpager collection using backbonepaginator plugin switching back results error", "d": "1/2013"}, {"body": "hitchcockwill looks like might", "d": "1/2013"}, {"body": "tgriesser looks like thanks pointer", "d": "1/2013"}, {"body": "hitchcockwill actually nt think issue specifically think digging little", "d": "1/2013"}, {"body": "hitchcockwill yep sync signature changed internally stick resolution one", "d": "1/2013"}, {"body": "tgriesser think backbone correctly even overriding fine solution grabbing ajaxlibrary specific arguments", "d": "1/2013"}, {"body": "right override sync something like done backbonepaginator sync function method model options var querymap params querymap thisperpageattribute thisperpage querymap thisskipattribute thispage thisperpage params extend type get datatype jsonp jsonpcallback callback data decodeuricomponent param querymap url thisurl processdata false options return ajax params collection without special backbone success handler line collection actually response nt understand initially part whats brought understand wanting make agnostic ajax common sync provider would probably best make standard comes callback signature", "d": "1/2013"}, {"body": "reference change", "d": "1/2013"}, {"body": "make clear must callback form problem nt exist", "d": "1/2013"}, {"body": "well problem would still exist apps using code looks like example wait see jashkenas opinion one", "d": "1/2013"}, {"body": "afraid quick skim issue loss exactly problem tgriesser mind reexplaning", "d": "1/2013"}, {"body": "issue prior changes made among others could create sync function model without success function calling would work create sync function ensure success handler matching backbone signature otherwise collection line actually response seems backbonepaginator using api matching jquery seems bigish change among others", "d": "1/2013"}, {"body": "nt know much nt involved way keep consistent arguments preserving previous behavior automatic success handler created", "d": "1/2013"}, {"body": "nt think without requiring every custom sync handler something implements backbone way think also might worth revisiting change prompted pauluithol bring makes code little dryer encapsulation successerror makes difficult custom application specific sync things modelcollection without extending also discussed somewhat", "d": "1/2013"}, {"body": "jashkenas actually would consistent used prior implementation changing error function matches jquery style error callback rather inventing signature think would best way go although opinion wanting revisit changes remain edit must tired nt match take look tomorrow", "d": "1/2013"}, {"body": "really think way correct implementation currently one simple rule overriding sync override call signature mention overwritten simple agnostic pattern", "d": "1/2013"}, {"body": "issue described signature callback passed modified whereas none callbacks including etc decided alter callback well consistency however kpdecker comments maybe went wrong direction instead made callback consistent tgriesser think change still valid default assumes successful xhr successful sync think reasonable", "d": "1/2013"}, {"body": "including etc persistence method specific case whereas handled every single customized method really nt think backbone lean outside stock function changes good backbone future flexibility", "d": "1/2013"}, {"body": "braddunbar consider case dealing api returns responses custom signature actual result code etc deal currently good way call original intended error function success handler without digging internals sync sync implementations one user configurablereplaceable pieces app changes nice hiding successerror handlers inside body forces things one way nt always dev control caseywebdev likely backbone apps going using jquery equivalent using jquery definitely know would need write sync anyway simple enough match jquery signature", "d": "1/2013"}, {"body": "problem reverting change tailored specific persistence method currently agnostic wrapper looks like wrong current looks much inviting different persistence methods", "d": "1/2013"}, {"body": "functionally though second third arguments nt matter tailored specific persistance mechanism naming", "d": "1/2013"}, {"body": "well ignoring argument names breaks pretty much bb universal pattern frowning checkout pr think winwin", "d": "1/2013"}, {"body": "see output result pane fiddles", "d": "1/2013"}, {"body": "see", "d": "1/2013"}, {"body": "octatone backbone got version bump try see takes care issues", "d": "1/2013"}, {"body": "see lines output backbone one chrome safari firefox os x", "d": "1/2013"}, {"body": "yeah looks like version bump happened writing bug report updated fiddle point tagged repo version instead live backbonejscom version posterity sake", "d": "1/2013"}, {"body": "see lines looks like fixed", "d": "1/2013"}, {"body": "great glad fixed", "d": "1/2013"}, {"body": "tgriesser looks like fixes issue talk timing", "d": "1/2013"}, {"body": "agree prepping model serialization nt think need add new function view preparation though easy casebycase basis consensus certainly update docs reflect", "d": "1/2013"}, {"body": "agreed nt double duty docs let drop examples view rendering extra description", "d": "1/2013"}, {"body": "recommendation always never use rendering instead use however breaks collections want objects flattened use since never prepare collections saving method works fine", "d": "1/2013"}, {"body": "addressed", "d": "1/2013"}, {"body": "hi tupkalov changes since release think results good deal better would mind trying copy master following get running", "d": "1/2013"}, {"body": "hope release functional thank", "d": "1/2013"}, {"body": "duplicate please discuss", "d": "1/2013"}, {"body": "hi antonzaytsev actually already fixed bug", "d": "1/2013"}, {"body": "thank response casey missing already fixed trunkmaster look latest version", "d": "1/2013"}, {"body": "yea bug fixed see latest code", "d": "1/2013"}, {"body": "confused method computechanges master glad already fixed", "d": "1/2013"}, {"body": "pattern consistent across classes though pedantic equal combination set view see line also seems like good pattern maintain", "d": "1/2013"}, {"body": "agree would handy way handles options applied", "d": "1/2013"}, {"body": "fyi discussed previously think discussion still applies since quite easy want think best left convention users deal want one would usually rather attached rather attach options directly object", "d": "1/2013"}, {"body": "understand flexibility pov inconsistency little irksome confused", "d": "1/2013"}, {"body": "agreed caseywebdev also get ianstormtaylor argument nt dumping place generic keyval store like lot view ca nt see particular reason tying view would nt also applicable classes either others removed make line optin vote latter", "d": "1/2013"}, {"body": "totally wrong bad", "d": "1/2013"}, {"body": "mornin starkovv ca nt quite tell problem context given would mind providing bit code fiddlejsbin particular like see logic", "d": "1/2013"}, {"body": "updated version changed nt work update coffeescript autosaveattributeskeys starttime endtime isactive autosaveifneeded model gt changeskeys keys modelchanged intersectionkeys intersection changeskeys autosaveattributeskeys save isempty intersectionkeys old version working check issue", "d": "1/2013"}, {"body": "jsfiddle support backbone moment jsbin ok", "d": "1/2013"}, {"body": "thanks posting starkovv fairly certain failure due fact removed favor modelchanged think win overall hope answers question", "d": "1/2013"}, {"body": "bad thank braddunbar needs update backbone documentation", "d": "1/2013"}, {"body": "hmm even though note change seem added", "d": "1/2013"}, {"body": "hi starkovv believe fixed master pull latest let know nt work", "d": "1/2013"}, {"body": "braddunbar another attack silent", "d": "1/2013"}, {"body": "caseywebdev think issue completely disable silent option proposed actually feel silent quite handy model needs business logic done ui get updated issue backbone forget update internal state sync event btw debugging found somehow sync event still get triggered maybe internally even silent option set true", "d": "1/2013"}, {"body": "backbone forget update internal state sync event event exists default method overridden nt fire still work somehow sync event still get triggered triggered method nt check problem goes beyond agree brad removing would best letting people check event need functionality", "d": "1/2013"}, {"body": "oh set also get affected sync event wo nt help silent get turned afraid lots backbonejs users including driven crazy debugging updating codes hope better backcompatible solution thx", "d": "1/2013"}, {"body": "hi gggggdxn thanks pointing great example problems associated silencing events like like caseywebdev says fixed removing option silent get turned afraid lots backbonejs users including driven crazy debugging updating codes would mind expanding option help debug", "d": "1/2013"}, {"body": "hi braddunbar sorry nt make clearer nt use silent debug point backward compatibility", "d": "1/2013"}, {"body": "thanks clarifying gggggdxn definitely unfortunate removing backward incompatible change fix code maintain well however compared encouraging antipattern think lesser two evils", "d": "1/2013"}, {"body": "fork using maven dependency module even cdn also interesting article underscore thus backbone removed amd support", "d": "1/2013"}, {"body": "think jashkenas right commit supporting particular script loader definitely make easier work properly support particular script loader neither necessary desired", "d": "1/2013"}, {"body": "loaders referring requirejs loader developers use backbone projects backbone supporting nt see single example someone would use backbone loader requirejs two books describe use backbone requirejs early pdf seems sort ideological problem loader", "d": "1/2013"}, {"body": "ajaxsolutions problem loading amd solved community obviously problem loading backbone requirejs also solved community least couple technical authors seeing problem preference anything ideological maybe idiological debate ideological someone already scratched itch go enjoy hard work", "d": "1/2013"}, {"body": "ajaxsolutions contrary used requirejs several projects enjoyed immensely particular like use compile templates loader plugin said using shim configuration less intrusive works without issue", "d": "1/2013"}, {"body": "ajaxsolutions using backbone almost years never needed requirejs commonjs works fine", "d": "1/2013"}, {"body": "chrisabrams workflow building commonjs usedeploy browser research lately browserbuild gluejs stitch still prefer using requirejs using although would gladly switch cjs", "d": "1/2013"}, {"body": "fwiw jquery nicely supports amd", "d": "1/2013"}, {"body": "realize wo nt change minds worth pointing jquery lodash developers provide amd support", "d": "1/2013"}, {"body": "acstll good example entire flow would brunchio great tool helping build backbone project commonjs also supports requirejs", "d": "1/2013"}, {"body": "clarify earlier comment requirejs amd wanted point requirejs loader used browser backbone developers", "d": "1/2013"}, {"body": "ajaxsolutions libraries considerably open minded less opinionated easier buyin developers using backbone opinionated nonopinionated loaders package managers fine since virtually every guide explains use configuration spun work usejs created specifically backboneunderscore use case personally nt made libraries amd compatible found restrictive however dojo requirejs configuration starting rethink stance", "d": "1/2013"}, {"body": "chrisabrams thank definitely give brunch try recent js dev really hard deciding amd cjs facing start big project given fact one wants write true modular code find fascinating entire discussion standards", "d": "1/2013"}, {"body": "great comes trying accomplish app", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "thumbsup", "d": "1/2013"}, {"body": "maybe releases bump minor version consecutively instead arbitrarily way nt go instead would gone", "d": "1/2013"}, {"body": "think transition huge amount changes belive jashkenas reasoning behind romantic versioning smile yeah feel next one would seriously like first stable release stable api still making lot backwards incompatible changes", "d": "1/2013"}, {"body": "always imagined would shortlived would whatever changes fall", "d": "1/2013"}, {"body": "wookiehangover nt know would much backward incompatible change", "d": "1/2013"}, {"body": "sounds good ca nt legwork moment get prepped ready anyone feel like sending pull request", "d": "1/2013"}, {"body": "jashkenas see looks alright", "d": "1/2013"}, {"body": "done done", "d": "1/2013"}, {"body": "perfect thanks", "d": "1/2013"}, {"body": "see questionsuggestion comment would nt worry many listeners wanting basic derived attributes", "d": "1/2013"}, {"body": "looked also saw braddunbar comment using could definitely work clutter code also force models views know need call particular model way better design model definition opt transform dataattr setsaved concept similar database table trigger opportunity ability intercept data change entered table certainly whole concept backbone suited model listening seems inefficient suboptimal especially since talking listening order another trigger another change event nt think using existing function appropriate rather method optionally added called note happen versus", "d": "1/2013"}, {"body": "asking mutator computed properties functionality setter support backbone also good pull request suggest something like gist linked", "d": "1/2013"}, {"body": "caseywebdev earlier suggestion today", "d": "1/2013"}, {"body": "kidplug gettersetter support turned many times past convince masses could get merged", "d": "1/2013"}, {"body": "hi kidplug type functionality would use feature actually experiencing performance problems listening events anticipating listening prevent extra event cases seen listening change events sufficient performant need speedcontrol always override method despite requiring small amount boilerplate certainly best way intercept mutate arguments already two viable ways accomplish functionality think third would cause confusion", "d": "1/2013"}, {"body": "thanks feedback caseywebdev explain mean gettersetter support nt follow mean context talking optional method model would called automatically like called automatically exists would function way braddunbar example use case automatically convert incoming date string converting date object millisecond timestamp want model filtering view properly position corresponding element model may also want calculate another derived value like duration experiencing performance issues anticipating performance impact point thousands models adding weight unwanted listeners trying optimal ie low numbers event listeners much possible page question dynamic datawise uiwise", "d": "1/2013"}, {"body": "think correct behavior save sync data client server point track diff", "d": "1/2013"}, {"body": "deteam purpose changedattributes method nt track changes stable version", "d": "1/2013"}, {"body": "get expected result first set change event triggered listeners get right information work depending changed fields sure added savesync purposes", "d": "1/2013"}, {"body": "ulitiy afaik backbone nt provide builtin way want might want something like extend backbonemodel set change check saving save model dirty set false successful model sync", "d": "1/2013"}, {"body": "lukeasrodgers good solution thanks", "d": "1/2013"}, {"body": "hi ulitiy lukeasrodgers correct meant detect whether model changed recent adding dirty flag like suggests probably good way go", "d": "1/2013"}, {"body": "definite really hard trace options bubbled options see everywhere etc", "d": "1/2013"}, {"body": "bad asis always look source could clearer", "d": "1/2013"}, {"body": "documentation already pretty decent would improve even often end digging source code get better understanding", "d": "1/2013"}, {"body": "also ran real pain figure happening cause error deals line right set callback slot nt one defined events hash second spot ignoring callback parameter pushed fix caseywebdev braddunbar take look see see better way address one cases might issue edit yamsellem patch would nt tell method exist would nt cause runtime error would treat empty callback way noop", "d": "1/2013"}, {"body": "fixed", "d": "1/2013"}, {"body": "tgriesser would prefer app fail nothing happens isnt possible message case callback exist", "d": "1/2013"}, {"body": "would prefer throw noop one would much rather remove noop leisure deal error worse user find", "d": "1/2013"}, {"body": "yamsellem method exist nt happen backbone binding happens callback jquery events hash nt exist right empty callback passed would noop", "d": "1/2013"}, {"body": "looks good break developer put comparator collection passes arg sortedindex", "d": "1/2013"}, {"body": "kidplug good call pushing fix actually case mentioned really ca nt fixed work iterator take one argument take", "d": "1/2013"}, {"body": "yes true backbone comparator double duty maybe throw error like collectionsort comparator", "d": "1/2013"}, {"body": "work fine collection merged master", "d": "1/2013"}, {"body": "yeah realized already must something else borked setup strange sorry noise", "d": "1/2013"}, {"body": "replaced line model thismodelprototypeparse thismodelprototypeparse models models ugly since seems instance type people might use parse references stuff instance looking anyone else chime opted submit pull request get feedback", "d": "1/2013"}, {"body": "worth methods sometimes require instance say method model nt trick", "d": "1/2013"}, {"body": "work since truthy invokes collections parse models parse since backbone runs collection return back array iterates array passes object models parse model parsing basically collection parse knows get array objects models parse knows get data", "d": "1/2013"}, {"body": "ah gotcha collection parse work changes backbone right though understand want logic model parse function instead", "d": "1/2013"}, {"body": "correct current backend data actually comes like models model model collections parse return omodels basically knows nt know definition models request model takes care see going however find following statement longer fully true least confusing fetching model collection defined parse functions run fetching collection getting back new models could cause collection parse list model parsed turn functions defined", "d": "1/2013"}, {"body": "big problem also reason think using model data without parsing normally eg retrieving models idcid words take model instances argument unparsed server data using unparsed data breaks good many assumptions models parsed used compared one another data namespace wrapper one example others including composite keys otherwise altering id attribute", "d": "1/2013"}, {"body": "need special parsing always course comes overhead creating new models rather simple raw data still get", "d": "1/2013"}, {"body": "need special parsing always sure mean special parsing following normal idiomatic implementation knowledge currently work due problems described js model parse function resp return respmodel collection parse function resp return respmodels", "d": "1/2013"}, {"body": "sorry right word opening pr fix", "d": "1/2013"}, {"body": "issue currently completely complicating application flow basically get around tying view model data checking see rendered view already manually triggering change event even changes obviously sucks work around nt option use update require parse function way", "d": "1/2013"}, {"body": "simply put use parse parse option programmers said hey data needs parsed backbone uses whereas right bb exact opposite fundamentally breaking data models process", "d": "1/2013"}, {"body": "abritinthebay believe accomplish need", "d": "1/2013"}, {"body": "read like collection update method line optionsparse false models thisparse models options fixes everything might add eta note noticed update nt seem get options fetch logged seems odd", "d": "1/2013"}, {"body": "caseywebdev wo nt thing parse never called collection ever fetch update true", "d": "1/2013"}, {"body": "parse never called collection ever source says differently p version using altered", "d": "1/2013"}, {"body": "altered reproduce consistently switching fromfetch fetch update true issue added detail incredibly reproducible testing options hash always undefined update function may something changed code", "d": "1/2013"}, {"body": "clarify parse right use fetch called used fetch update true update fact collection basically becomes complete mess full recursive junk fresh copy development version bb words nt work fact actively detrimental", "d": "1/2013"}, {"body": "something else going code look working intended", "d": "1/2013"}, {"body": "strange investigate", "d": "1/2013"}, {"body": "fixed", "d": "1/2013"}, {"body": "using might solve problem see", "d": "1/2013"}, {"body": "using cool let try master thx", "d": "1/2013"}, {"body": "master works great thanks", "d": "1/2013"}, {"body": "seems calling without context set collection see code context", "d": "1/2013"}, {"body": "thank directing right direction issue backbone instead issue using requirejs ends circular dependency model passed never getting passed", "d": "1/2013"}, {"body": "problem", "d": "1/2013"}, {"body": "hey wilkins think running problem getting could tell fixed thanks", "d": "1/2013"}, {"body": "ignacioiglesias nt figured good way fix circular dependany time made small modification backbonejs collection get function", "d": "1/2013"}, {"body": "wilkins thanks ended changing code structure lil bit remove circular dependencies run situation make sure give try cheers", "d": "1/2013"}, {"body": "ok see problem even merging models new model created within collection model definition default value variable get configuration api set variable bootstrapping collection fetching new data variable overwritten collection creates new model new data merges data existing data means overwritten default value overwritten would expected collection add fresh json data existing model instead creating new unused model", "d": "1/2013"}, {"body": "bug fixed regarding merge default values see using solves problem", "d": "1/2013"}, {"body": "hi bazwilliams thanks pointing ca nt seem reproduce using though would mind posting code", "d": "1/2013"}, {"body": "hi braddunbar ca nt provide original model reproducing smaller scale everything worked correctly however eventually found problem occurs validation function model id set via hash constructor style validation function set aborted leaving id undefined case creating model id constructor calling fetch fetch failed due missing id url nt set validation fails due missing mandatory fields ie var model new mymodel id modelfetch validation fails due missing fields id assigned modelid results fetch using incorrect url setting modelid explicitly resolves issue", "d": "1/2013"}, {"body": "see version backbone using master branch changed bit particular models validated default request via glad figured", "d": "1/2013"}, {"body": "feels similar events fired model collection containing model braddunbar might better idea", "d": "1/2013"}, {"body": "hi hswolff triggers routes routers triggering event route shortcut filtering route events router hswolff mostly sugar think nice addition folks use multiple routers page", "d": "1/2013"}, {"body": "fair enough seemed redundant first glance makes sense thanks explanation braddunbar", "d": "1/2013"}, {"body": "agree keeping indexhtml docs date changes release would nt effect backbonejsorg would easier making updates release especially longer span releases keeping edge section change log running set changes especially big ones like validation reversal changes removal would better someone looking grab copy repo quickly see documentation reflects current state project cc jashkenas braddunbar caseywebdev", "d": "1/2013"}, {"body": "x already forget changes master since cut love idea master branch docs go master branch updates", "d": "1/2013"}, {"body": "writing changelog go great idea", "d": "1/2013"}, {"body": "wonderful idea concrete list edge changes would great brad tue jan genadi samokovarov wrote writing changelog go great idea image reply email directly view github", "d": "1/2013"}, {"body": "way backbonejsorg site could versioned docs annotated source remarkably helpful become much less using latest version", "d": "1/2013"}, {"body": "versioned", "d": "1/2013"}, {"body": "whoah mind blown thanks caseywebdev", "d": "1/2013"}, {"body": "thank github awesome url practices", "d": "1/2013"}, {"body": "ps tip future others appending link show docs html", "d": "1/2013"}, {"body": "ah yes forgot htmlpreview good call", "d": "1/2013"}, {"body": "closing since merged", "d": "1/2013"}, {"body": "calling without argument simply removes every model collection nt see trying", "d": "1/2013"}, {"body": "grydstedt maybe looking option", "d": "1/2013"}, {"body": "bug regarding squashed try using see nt fix problem", "d": "1/2013"}, {"body": "indeed outdated version code thank clarification", "d": "1/2013"}, {"body": "since function constructor also bound becomes new function context think nt use case may underscore issue backbone one implementation changed versions underscore versions backbone underscore using update underscore", "d": "1/2013"}, {"body": "underscore backbone update underscore time", "d": "1/2013"}, {"body": "also seems break update function collections class since thismodelprototypeidattribute line breaks thismodelprototype undefined", "d": "1/2013"}, {"body": "constructors allowed bound since version nt copy prototype original function bound one instance object bound function ca nt access prototype bound one set previous versions backbone prototype collectionmodel never used nt get error using version get error used function mention", "d": "1/2013"}, {"body": "although underscore bind constructor functions recommended documentation nt recommend use bindall collections models", "d": "1/2013"}, {"body": "thanks clarifying rubennorte might useful point documentation quite lot examples floating around using bindall tutorials whatnot", "d": "1/2013"}, {"body": "welcome agree might useful point documentation perhaps noticed binding section", "d": "1/2013"}, {"body": "yeah experience antipattern propagated popularized source many issues", "d": "1/2013"}, {"body": "uses internally default triggers event collection instance nt tigger event given executed may trigger events two solutions set callback collection event give like easy implement little heavier", "d": "1/2013"}, {"body": "take closer look first code snippet see call fetch update true question infact nt work", "d": "1/2013"}, {"body": "oh excuse first code looks correct ummm could show console string following code expect added", "d": "1/2013"}, {"body": "thank much working old version backbone updated works expected", "d": "1/2013"}, {"body": "hey pauluithol based jashkenas response looks like site licensed mit good use whatever agree nice consistent set documentation backbone docs nicest seen", "d": "1/2013"}, {"body": "alright closing assuming okay", "d": "1/2013"}, {"body": "ideas something wrong", "d": "1/2013"}, {"body": "looks like need set property options application nt served base domain application served root url domain sure tell history root really option regarding query string braddunbar guy ask one pretty sure backbone ignores query parameters change log semantic cross browser reasons routes ignore search parameters routes like search amp become believe considered url may want call function router directly opposed trying navigate route already located", "d": "1/2013"}, {"body": "tgriesser thank much lot great information setting root solved problem still nt understand search ignored valid use cases example filters like list products mention lot use cases braddunbar understand importance prettyurls nt forced flexible framework backbone also crossbrowser issue related change sorry looked like agressive", "d": "1/2013"}, {"body": "fabiomcosta really issue prettyurls much related cross browser issues history query string issues see nt seem agressive nt understand question first looking glad able get sorted ideally query filtering params ajaxget requests rather actual browser url", "d": "1/2013"}, {"body": "hi fabiomcosta problem support hash based fragments requires ignore query string instance url contains query string hash looks like one however considering url like potentially two values becomes even complex transitioning hash based routing pushstate routing value use replace real query string faux one approach needlessly complex especially considering path based url human readable anyway vs search query amp page reasons issues mentioned tgriesser especially hope clears things bit", "d": "1/2013"}, {"body": "ok cool thank guys explaining everything", "d": "1/2013"}, {"body": "hi dwheeler assume referring release issues implementation simplified current master branch created jsfiddle code see handles changes properly see info changed", "d": "1/2013"}, {"body": "thanks unable find previous issue filed around specific bit right posting tried master see fixed try fix issues code brought latest master", "d": "1/2013"}, {"body": "jstxx backboneevents completely isolated could try grabbing current backboneevents object dropping see helps significant speed improvements events recent release ca nt provide much advice without knowing situation factors causing issue whether memory leaks etc may also want try mailing list documentcloud irc applicationdevice specific questions", "d": "1/2013"}, {"body": "pinging braddunbar addition", "d": "1/2013"}, {"body": "initial response would user sanitizing fragments passing backbone since complex problem users already encoding fragments passing could cause problems double encoding nwertzberger clear prevent particular type exploit run quiet automated warning", "d": "1/2013"}, {"body": "would automated warning nt know way hijack hash tag make go another site anything given current code path see issues insecure code using source hash tag without escaping yeah seeing real bug right backbone course security expert errors completely backbone stack traces looks like writing page history either start checkurl navigate look thisgetfragment source gets encoded point operations would stop whining assume could sneak one purely backbone path without compatibility issues", "d": "1/2013"}, {"body": "second insertion encoding working project requires passing security scans code put production backbone flagged thanks nwertzberger patch", "d": "1/2013"}, {"body": "nwertzberger deanapeterson would mind pointing towards analysis tools using encoding decoding fragments caused quite issues past like make sure addressing particular exploit fully understand patching", "d": "1/2013"}, {"body": "fortify tool think others might grab locationhash jquery users victims xss way pathway taken get seems unlikely occur sources different ways grab base url name method supported looks like hash way used could nt use newer method suggesting following dangerous idea know nothing useful especially using hash part nt understand one could example redirect nefarious page much worried replace logic", "d": "1/2013"}, {"body": "hp fortify", "d": "1/2013"}, {"body": "issue blocker context company huge security restrictions fortify deems issue critical like stops deployment gon na work nwertzberger solution see happens post ever solutions discover create", "d": "1/2013"}, {"body": "ok come research exploit question seems rely something like following using fragment value attacker execute arbitrary code choosing solution use similar nt evaluate html thus prevents arbitrary code execution hash certainly valid attack vector nt see encoding hash value prevent since malicious fragment values would likely come user supplied url phishing attack neither passed complete solution avoid using methods evaluate html arbitrary user input nt think proposed solution prevent attack certainly nt make change silence security warnings going close one wrong exploit another separate exploit missed please let know reopen", "d": "1/2013"}, {"body": "hi vicenrele updated copy underscore well backbone requires underscore higher", "d": "1/2013"}, {"body": "thanks help braddunbar problem", "d": "1/2013"}, {"body": "peetertomberg think meant understand mean view attaches limited set options directly object el events classname tagname etc special meaning view functions building dom element entire options object copied reference view rather going suggested comparing prototype object trying determine items meant attach object backbone leaves part since options passed initialize would simple enough specify options attach directly like store object modelcollection directly like view let know clears things", "d": "1/2013"}, {"body": "peetertomberg even elegant way tgriesser suggested achieved using form shown backbone javascript either specifically whitelisting properties var propsyouwant query pagenum autoload extend pick options propsyouwant using form suggesting apply options alreadyexisting properties dangerous whitelisting extend pick options keys thisconstructorprototype", "d": "1/2013"}, {"body": "understand backbone currently handles seems wrong already defined object contain certain properties eg query must duplicate initialize method values copied especially since backbone already something similar", "d": "1/2013"}, {"body": "peetertomberg saying backbone class constructors look class prototypes instantiation merge defaults prototypes supplied options calling constructor sounds like good idea actually", "d": "1/2013"}, {"body": "tgriesser right idea settings options based prototype values sounds like guessing user intent certainly nt want setting options straightforward manner like suggested much better option", "d": "1/2013"}, {"body": "issue come us espeically views way handle overriding function base view class follows javascript take options passed constructor initialize function copy object per initializeoptions array also assert exist name followed initializeoptions array constructor function options var view class include property enumerates options copied object javascript myview baseviewextend classname myview explanation mark denotes required option error thrown omitted", "d": "1/2013"}, {"body": "short answer use rather case define comparator collection keep models sorted id longer answer pinging braddunbar caseywebdev one little discussion dueling api", "d": "1/2013"}, {"body": "want keep collection sorted certain way define comparator case easy regarding reset vs update would cut reset update everything reset though slower dropping models", "d": "1/2013"}, {"body": "caseywebdev nt fire add remove events often desirable", "d": "1/2013"}, {"body": "tgriesser little confused saying add remove events nt desirable", "d": "1/2013"}, {"body": "yeah could worded much better trying say addremove always desirable", "d": "1/2013"}, {"body": "feel like completely replacing models collection disregarding previous models might well create new collection instance see add remove events helpful determining collection altered leave existing update reset serve distinct purposes", "d": "1/2013"}, {"body": "see might want smartly updating collection give events along upon imagine sortable list gets autorefreshed server polling like collaborative todo list addremoveedit part already easy events frequently thing missing reordering nt want recreate dom elements users may editing items list right either want event uses sameprevious instances want", "d": "1/2013"}, {"body": "philfreo called collection ed", "d": "1/2013"}, {"body": "ah true forgot event might want base collection order order items server response even sort clientside would automatically wanted sort attribute like might changed", "d": "1/2013"}, {"body": "philfreo event new caseywebdev case think comparator likely answer certainly nt replaced reason rebind events recreate references replace current set models another", "d": "1/2013"}, {"body": "braddunbar agree think place stay", "d": "1/2013"}, {"body": "use reset function models removed use add function add models want use update function models changed models added ca nt use sort function models sorted server sort new collection models added", "d": "1/2013"}, {"body": "philfreo even sort clientside would automatically wanted sort attribute like might changed yup use case accounted try shadel created pull request would allow pass option yielding result looking", "d": "1/2013"}, {"body": "moving discussion pull request", "d": "1/2013"}, {"body": "hi abritinthebay unable reproduce issue would mind putting together jsfiddle show getting error modifying directly", "d": "1/2013"}, {"body": "kind tricky isolate basically triggering app reset event view thislistento appdispatcher app reset thiscollectionreset causing error auth flow redirect authorized exit app trigger event clear models collections ca nt see could going wrong", "d": "1/2013"}, {"body": "ok maybe clue may execution order thing tell collection view collection listento dispatcher object rather view collection works without error idea might", "d": "1/2013"}, {"body": "hmm would nt work sets context callback listening object trying call view cause sorts problems want everything working fine let know nt case", "d": "1/2013"}, {"body": "ah makes sense also reveals putting syntax collection works view clear", "d": "1/2013"}, {"body": "ca nt nest scripts like many libraries exist augment backbone order achieve nice way nesting templates views check layoutmanager marionette chaplin viewmaster etc", "d": "1/2013"}, {"body": "yep probably want encapsulate templates views compose views create entire page", "d": "1/2013"}, {"body": "pindar yes new event triggered model fails validation making easier determine source error whether triggered failed validation client side event issue event", "d": "1/2013"}, {"body": "thx", "d": "1/2013"}, {"body": "would great release notes version contained mention change frustrating track upgrading", "d": "1/2013"}, {"body": "think event useful convince jashkenas favor purely using granular events", "d": "1/2013"}, {"body": "since still want event added default p event allow easier paging rendering backbonecollections jashkenas noted add behavior already success callback however experiences need event common enough explicitly add event pageable collections failing backbone application using backbone event also encourage efficient manipulations dom whereas events lend manipulating dom event event would provide convenient intuitive place update view reflect updated collection understand done backbone currently stands however find would add good value backbone adding event", "d": "1/2013"}, {"body": "let move discussion pull request", "d": "1/2013"}, {"body": "please take apologies actually using railsbackbone overrides backbonesync implementation seems bug solely railsbackbone side raised issue project codebrewbackbonerails", "d": "1/2013"}, {"body": "ran across tried removing backbonerailssync backbonedatalink asset pipeline manifest file made problem immediately resolved need files gem haha even going look anymore app seems still function maybe wrong", "d": "1/2013"}, {"body": "ended replacing railsbackbone plain backbonejs nt see advantages using railsbackbone project seems maintained nt even realise pull requests", "d": "1/2013"}, {"body": "discussion type problem spawned caseywebdev composite keys plugin", "d": "1/2013"}, {"body": "gabetax actually updated plugin work correctly", "d": "1/2013"}, {"body": "caseywebdev updated earlier today saw seems working well far tada", "d": "1/2013"}, {"body": "eastridge methods could used implement behavior frankly moved use case dealing simpler rewrite method without emulation crap somehow made merged pull request kind becoming norm backbone projects since pr much fight get anything", "d": "1/2013"}, {"body": "tgriesser thx change tried test new master version trouble changes maybe answer new question", "d": "1/2013"}, {"body": "tgriesser finally tested changes works thx", "d": "1/2013"}, {"body": "confirm behavior chrome send contenttype applicationjson firefox contenttype applicationjson though based testing nt made difference data recorded server side gets recorded sending known characters nischi test case causes problem", "d": "1/2013"}, {"body": "yes switzerland german umlaut sample st\u00f6rchelstrasse would transfer string backbone send st rchelstrasse similiar", "d": "1/2013"}, {"body": "well know interesting chrome dev tools say sent request payload though server side gets recorded fine gets returned fine response put request code works addition maybe server side code platform working charset selection based contenttype header defaulting something else", "d": "1/2013"}, {"body": "check server side thats first idea server self iis make special put manual backbonejs chrome right chars requeset payload think would correct manual backbonejs works chrome safari little bit strange different browser send different charsets think", "d": "1/2013"}, {"body": "exactly issue also swiss characters", "d": "1/2013"}, {"body": "using iis well narenranjit", "d": "1/2013"}, {"body": "issue also tomcat railo", "d": "1/2013"}, {"body": "mdekmetzian server ubuntu", "d": "1/2013"}, {"body": "nischi application tomcat jaxrs jersey works without chrome safari tested chrome winosx safari osx without issue went reconfirmed environment sure nt affecting users isnt jashkenas tgriesser still think issue serverside time adding charset nt hurt would remove pain point least users", "d": "1/2013"}, {"body": "regarding extra zepto argument previous implementation nt provide argument either right think providing signature would fine though also accomplished via probably preferred way implement things backbone nt use internally", "d": "1/2013"}, {"body": "previous implementation exposed raw zepto endpoints perinstance basis via sync note assignment done point instance override behavior implementation still possible wrapping perinstance basis complete side think question one api internal code mucking former would argue api consistency three cases provided later arguments kind pointless safe implement anyway", "d": "1/2013"}, {"body": "wookiehangover sorry responding sooner discovered blue dot github menu kind moot example gave exactly meant part namespace defines defered class inside jquery namespace totally analogous class inside namespace class inside namespace still never seen serious js library capitalize nonnamespaced property though think jeremy deadon ticketclosing explanation", "d": "1/2013"}, {"body": "genexp", "d": "1/2013"}, {"body": "good point nt thought implementing modelbased events would require like method something along lines annoyance alone seems outweigh benefits able unfortunate views bind models events quite often least code shrug oh well", "d": "1/2013"}, {"body": "sorry revive old thread facing error trying run backbonejs based website android hdmi sticks ie case favi entertainment smartstick running ics webkit help would really great", "d": "1/2013"}, {"body": "experiencing issue backbone following swarnak lead found issue described need able set documentdomain support navigation made changes hacks problem disappeared diff backbonejsorig backbonejsmodified lt gethash function window lt var match window locationhrefmatch lt fragment thislocationpathname lt var loc thislocation lt thislocationreplace thisroot thislocationsearch thisfragment lt var href locationhrefreplace javascript lt locationreplace href fragment lt locationhash fragment naturally changes would nt good backbone number reasons eg tie library browsers", "d": "1/2013"}, {"body": "second would really handy parameterize setter operation setting intention reliably recognized event regardless whether underlying value changed result", "d": "1/2013"}, {"body": "looking see drops query params gets url fragment windowlocation pass url historynavigate query params query params make causing route matching fail guess navigate trigger false call historyloadurl url without query params using view state like column table sorted fit including url", "d": "1/2013"}, {"body": "hey mclin takes fragment full url suppose could strip query string navigate certain necessary would mind expanding use case passing fragments query strings", "d": "1/2013"}, {"body": "hey braddunbar sure index view table google analytics style date range filter imagine table showing site pages total page views within date range date range stored query args emailed bookmarked page refreshed etc page load route handler gets date range query args sets collection calls click row table takes detail view row graph stuff detail view needs date range index view graph row click get clicked model set date range call get url including query string call instead calling could directly show detail view would duplicate code route handler shows detail view well couple controllers detail index views thanks listening trigger false historyloadurl workaround working fine worries end", "d": "1/2013"}, {"body": "mclin stripping query string history navigate would solve issue nt see immediate problem gate though would probably get opinions", "d": "1/2013"}, {"body": "yea exactly would solve issue think people would also run point try saving view state query args", "d": "1/2013"}, {"body": "mclin addressed give spin please let know nt solve issue", "d": "1/2013"}, {"body": "braddunbar point backbone completely disregards search parameters actually navigate", "d": "1/2013"}, {"body": "markreid correct", "d": "1/2013"}, {"body": "sure issue seem set correctly", "d": "1/2013"}, {"body": "trantorliu would mind posting example", "d": "1/2013"}, {"body": "wwwexmaplecom somehash qquery qquery somehash respectively backbone somehash qquery respectively nt read former comment morning think problem nt", "d": "1/2013"}, {"body": "trantorliu yes merged strip example provided", "d": "1/2013"}, {"body": "hey braddunbar almost still want historywindowlocation include query string strip matching routes historyloadurl compare server side query args nt affect route gets picked still browser url bar still accessible route handler see make diff super familiar github yet", "d": "1/2013"}, {"body": "maybe restating obvious since issue still open annoyingly broken decided chime way browsers work eg chrome url like xxx abc az recognize az windowlocationsearch formatted like gets lumped windowlocationhash good backbone router must designed urls always xxx az abc query first hash last windowlocationhash windowlocationsearch happy", "d": "1/2013"}, {"body": "ok thank nt use url parameters instead use hash parameters inspired google found google using something like yesterday using routes like match etc parse route functions stating issue wiki", "d": "1/2013"}, {"body": "worth appreciate seo usually ignored issue single page apps based backbone allow urls without trailing detrimental sites seo page viewed duplicated previously mentioned better setting apache similar manage invalid url redirect valid one", "d": "1/2013"}, {"body": "caught surprise well little search led seeing phantom pubsub events views thought disposed good pubsub system use backbone mediator viewdestroying method found realized honestly would intuitive either done inside", "d": "1/2013"}, {"body": "gsklee using jquery using", "d": "1/2013"}, {"body": "using jquery yep seems like jquery removing subscriptions created via backbone mediator last section readme backbone mediator states way unset subscriptions thought done automatically inside backbone view nt case baffled", "d": "1/2013"}, {"body": "see thanks explanation gsklee backbone mediator appears pubsub system separate dom events thus affected jquery events also overrides purpose somewhat different backbone purpose methods case nt think backbone calling within", "d": "1/2013"}, {"body": "thanks dankantor great trick", "d": "1/2013"}, {"body": "nt deep copy array get push returned array edits models internal array set detects changes emits events javascript confusingly represents variables references values additionally several values immutable including arrays nt make deep copies objects editing edit values inside models cache well failing test case var model new backbonemodel modelset ar modelon change function consolelog changed get value change set var ar modelget ar arpush modelset ar ar meanwhile change getter make deep copy instead works fine", "d": "1/2013"}, {"body": "lol cheers mistake", "d": "1/2013"}, {"body": "please reopen assume current behavior requires options param validation true passed set even validate function model makes impossible generally enable validation without redefining set cancels validation", "d": "1/2013"}, {"body": "realize old ticket still mind check guy", "d": "1/2013"}]