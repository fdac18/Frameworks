[{"title": "unexpected exception using react perf tools", "body": "found exception trying use react perf tools components internally uses minimal reproducible case different mostly related exception happens used url may asking need use reactserverdom together reactdom need render svg blob use blob uri backgroundurl style attribute also use cases need render string instead directly dom think reasonable usage", "num": "8902", "d": "1/2017"}, {"title": "warning message swallowed using shape inside oneoftype", "body": "see expect warning says invalid prop supplied foo bar even better invalid prop supplied get invalid prop supplied", "num": "8901", "d": "1/2017"}, {"title": "bump fbjs", "body": "probably lots react apps depend babelruntime perhaps directly maybe indirectly problematic though cause apps depend two versions corejs babel using react app babelruntime corejs react fbjs corejs two versions nt semver compatible means project depends babelruntime also react two copies corejs use concrete example react app also depends relay probably many examples though nice collapse dependency single version corejs react could bump dependency latest fbjs fbjs alpha right alpha months probably guys arrange stable release want see also", "num": "8898", "d": "1/2017"}, {"title": "closure compiler wrong assignment order", "body": "consuming react source google closure compiler bit code nt run correct order seems like google closure compiler transformation changing function assignment messes behavior original function hoisted thought related fact function exported module anyway produces error assignment wrong order assignment function definition want definition assignment may also related root cause straightforward solution bring call function declared verified works correctly happy submit pr described approach", "num": "8894", "d": "1/2017"}, {"title": "usage dompropertyoperations module breaks build closure compiler advanced optimizations", "body": "want request feature report bug report bug current behavior referring object method another method within object breaks react build closure compiler advanced optimizations current behavior bug please provide steps reproduce possible minimal demo problem via similar template build react app using closure compiler advanced mode unfortunately provide source app got bug expected behavior app built closure compiler advanced mode throw exception versions react browser os affected issue work previous versions react react changing solves issue methods object using properly via call makes sense prepare pr", "num": "8887", "d": "1/2017"}, {"title": "properly setup eslint config eslint version", "body": "want request feature report bug report bug current behavior version eslint lint gulp task return errors indentation bottom line version operate normally usersrastopyrprogrammingjsreactsrcrendererssharedsharedtestsreactcompositecomponentstatetestjs error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent usersrastopyrprogrammingjsreactsrcrendererssharedsharedtestsreactmultichildtestjs error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent current behavior bug please provide steps reproduce possible minimal demo problem via similar template clone repo expected behavior packagejson setted version means latest minorpatch version higher installed think way solve issue set strict version eslint change files passed lint change eslint config rules", "num": "8885", "d": "1/2017"}, {"title": "component hierarchy fiber", "body": "module named permissionchecker code javascript const permissionchecker children permissions needs gt let hasaccess false export default connect appstate gt permissions appstateget userpermissions null permissionchecker usage case permissionchecker question know fiber possible return multiple react elements hierarchy category render method propschildren permissionchecker link want bypass permissionchecker returns children possible fiber", "num": "8881", "d": "1/2017"}, {"title": "jsx inconsistently rendering svg textanchor attribute react dom reacttestrenderer", "body": "think bug behaviour outputting following text reactdom reacttestrenderer current behavior seems rendering component using jest snapshot uses reacttestrenderer produces following output run code browser using jsx compiled javascript put reactjs get following output see example clearly test renderer leaving unknown attributes whereas dom renderer altering camelcase make hyphenated sure change jsx allow example work scenarios jestsnapshot reactjs bug lie jest snapshot renderer reactjs renderer expected behavior reacttestrenderer behaves reactjs note version numbers using code brief look source code yeilds line reactrenderer ca nt find similar line test renderer", "num": "8880", "d": "1/2017"}, {"title": "react tutorial const history", "body": "copied code code examples react tutorial page forked codepen followed tutorial time travel code nt work following tweak made work storing history section fourth code example line const history thisstatehistory changed const history thisstatehistoryslice thisstatestepnumber", "num": "8878", "d": "1/2017"}, {"title": "react onclick nt fire ie", "body": "seems issue onclick working correctly previously using react changed luck seems like onclick action triggered onchange text input works fine jsx component talking following onclick thishandlesubmitbind however assume issue related onclick across application class firstname extends reactcomponent constructor props super props thisstate submitted false firstnameerror false", "num": "8877", "d": "1/2017"}, {"title": "onbeforeinput fires edge updates dom", "body": "want request feature report bug bug current behavior edge onbeforeinput event fired edge already made changes dom negating purpose event breaking assumptions components built event draft current behavior bug please provide steps reproduce possible minimal demo problem via similar template demonstrates issue general see effects components consider steps go type bold underline space words select space press entire control text replaced hit undo several times observe broken states finally react fails issue opened draft core issue onbeforeinput misbehaving edge breaks draft assumptions expected behavior onbeforeinput fire changes occur dom versions react browser os affected issue work previous versions react repros latest version draft root cause root cause although issue longer repros fix referenced issue fixes issue well", "num": "8876", "d": "1/2017"}, {"title": "website page working properly", "body": "want request feature report bug attached screen short check please people world use ie built browser current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "8875", "d": "1/2017"}, {"title": "remove rewrite examples", "body": "prompted examples really great examples use react maintained add little value consider either rewriting examples easier use represent good practices rewrite couple remove rest remove examples partial removing anything providing single example well built cc gaearon spicyj bvaughn", "num": "8874", "d": "1/2017"}, {"title": "maintaining ref prop reactcloneelement", "body": "react rc suggests prop components pushed allow two parents maintain props child tried replicate behaviour codepen able maintain two references child ie ancestor component gets nulled jist code working code found class childcomponent extends reactcomponent constructor props super props onclick e epreventdefault extendchildren return reactchildrenmap thispropschildren child gt return reactcloneelement child ref ref gt thisinput ref render return thisextendchildren class ancestorcomponent extends reactcomponent constructor props super props onclick e epreventdefault render return expected behaviour able click application childcomponent check buttons reference input poping alert input value behaviour droppednever implemented since rc something wrong", "num": "8873", "d": "1/2017"}, {"title": "type textbabel throw error latest chrome", "body": "type textbabel throw error latest chrome", "num": "8870", "d": "1/2017"}, {"title": "onsubmit handler proxy object first argument", "body": "want request feature report bug believe bug since ca nt find documentation behavior changing current behavior calling submit handler like first argument object second argument object current behavior bug please provide steps reproduce possible minimal demo problem via similar template see console see objects expected behavior first argument object object versions react browser os affected issue work previous versions react happening react happening", "num": "8869", "d": "1/2017"}, {"title": "significant change reactaddonsperf function getinclusive react", "body": "note asked first directed tl dr massive overhaul reactaddonsperf make large change would cause wildly different results data using perfgetinclusive process upgrading react react seeing puzzling changes profiling using reactperfaddons test case table rows cells upgrading tested total render times using windowperformance using reactaddonsperf getlastmeasurmentduration tools show increase performance rendering table seem outside realm possibility things started get weird looked results perfprintinclusive results printinclusive individual component render report render faster factor seem jive seeing elsewhere tried look changes inside reactperfjs module file replaced wholesale hard understand may changed nothing changelog would really explain big difference results printinclusive question could grossly different findings perfprintinclusive explained big refactor reactaddonsperf function showing something different used show old numbers wrong", "num": "8867", "d": "1/2017"}, {"title": "reactdomfinddomnode returns unexpectedly", "body": "want request feature report bug bug current behavior two versions simple page page produces text tries register dom event handlers mouse events html element underline text mouse remove underline mouse make text red color mouse return text black color mouse finally also sets elements difference two pages way dom event handlers registered object returned bad version link version binds event handlers like jsfiddle link version produces error good version link version binds event handlers like jsfiddle link version behaves expected current behavior bug please provide steps reproduce possible minimal demo problem via similar template jsfiddle links bad good versions provided expected behavior opinion good version bad version behave react exact way bad version produce error react versions react browser os affected issue work previous versions react tested chrome os x windows safari os x bad version work react bad version worked react", "num": "8862", "d": "1/2017"}, {"title": "react umbrella", "body": "list might change putting first draft posting together since related nt plan releases anyway put changes context goals click show past several months working rewrite react codenamed fiber initially affect public api brings several new features like fiber gives us solid foundation improve react core numerous ways talking soon intend ship react default reduce bundle size need remove apis nt recommend helpers intend warn usage start removing dependencies still available separate packages exclude default build react would like control bundles better optimize considering switching flat bundles thus removing access react internals react also mean faster compile times default users webpack bundlers faster serverside rendering performance speculative list changes think releases past releases moved end post final x flarnie amp sophiebits x check real regression nhunzaker aweary x check google issue still exists turns polyfillio bug x figure want regarding gaearon x ensure enzyme nt blocked anything side compat flarnie x remove prefix alias gaearon x ensure show sensible warning case gaearon x preparing final release react team general x write blog post adapted acdlite x add attribute info big changes section x consolidateremove updates section end x server hydration make hydration changes prominent breaking changes section maybe write full blog post later x release update devtools x website bvaughn flarnie x docs x document ability return strings arrays x document x merge server streaming doc regular dom server doc fix imports match new unified entry point x test renderer x right release x update cdn urls website official fiddle reference new paths rather x update doc snippets codepens website use todo add bugs discovered testing rc wishlist x fix hot reloading rn probably needs change use x show better message missing react x make sure offer way canceling updater form gaearon follow x remove stack compat code x add support enzyme fiber airbnbenzyme past releases click show x reactdom fixes jquense nhunzaker aweary want release x probably ship fix x new warning callback refs stateless functional components x new api deprecations x moved separate package provide codemod want update es classes moved separate package removed oneliner factories moved separate package forgot moving removed forgot moving x moved separate package x deprecate react addons x decide handle umd addons build x fix bug see alpha click show x remove deprecations added x stop appending strings x remove x remove x move separate package x move separate package x move factories separate package x decide addons build x keep addons need work regardless whether react aliased flat bundle case x strip proptypes checkers production build x readd warning calling proptypes directly x reactdom fixes jquense nhunzaker aweary want release x make decision input fix jquense accepted follow work change flarnie link issue related follow work beta click show x actually enable fragments flarnie verified x make error boundaries official bvaughn x choose lifecycle naming x codemod stuff x decide whether runtime warn old name decided let x fix issue tracking acdlite working x came internally set hard limit recursion acdlite x duplicate react string refs results confusing error ref function provide good invariant spicyj flarnie gaearon draft issue also x test flarnie x warn throw update container manually emptied outside react stack mounted brandnew tree fiber tries apply update usually fails flarnie x test flarnie x additional apis need order start experimenting async acdlite x x x sanity test use cra app check fixtures x messaging x update isfiberreadyyetcom x compose tweet rc click show x ml pass dom props latest gaearon spicyj sebmarkbage flarnie acdlite x regression warn object passed event listener prop aweary fixed needs review updated merged x make sure input variables props state point correct values lifecycle example nt case acdlite fixed x onchange event fires incorrect selectedindex value sebmarkbage x ensure weak minifiers nt ship bundle twice flarnie trueadm fixed x bug ssr false positive warnings svg tags spicyj fixed x bug unexpected crossdomain error passed bvaughn fixed x warn nesting tree inside spicyj fixed x undefined function evaluating ownergetname x regressions reported beta x server renderer crashes production inline styles fixed x server renderer nt yet support returning arrays strings components fixed x server renderer still renders somewhat unnecessarily gaearon x potentially fixed gaearon x cases reported instead real error decision update error message acdlite x shallow renderer nt implement decision team seems leaning away discussion x sm functional components decision delete add minor sebmarkbage x report google crawler render page using link flarnie x check real regression fixed looks like x sm ensure type validation nt regress enabled new features gaearon x decide want break value attribute syncing behavior decided postpone x sm decide want stop calling shallow renderer x decide polyfills x mapset need throw early gaearon x objectassign keep assume decision keep bundled x raf decision keep required maybe use approachstandard relay x big missing pieces x add server rendering reviving x add shallow renderer x seem decoupling shallow renderer reactdom however works inside shallow renderer contains reactdom injections going breaking change gaearon decision let support x decide whether include warning whitelistingblacklisting bvaughn decision x maybe switch flat bundles internals truly private x decide plan forward popular projects depending internals might block final x dangerously exported flat bundle tap event plugin x probably needs internals coordinate necolas done x support gaearon decision gon na x feature parity renderers x shallow renderer supports strings arrays x server renderer supports strings arrays x server renderer supports error boundaries nt make sense conceptually right x decide whether put package reduce issues caused npm duplication x decide domserver entry points seem inconsistent one gaearon configured separately prepack one target includes pure js apis node apis includes pure js apis could combine single entry point add new method x decide care catching errors events initial release x error messages flarnie dan moved back blockers nt think release unclear messages error boundaries huge change open source must documentation link start unmounting roots x add error boundary message link docs x duplicate key warning children keys date claims child ignored render second one easy add final sooner sebmarkbage x verify bundles produced valid strict mode bvaughn x testing beta react team general x share beta proposed release date library authors several weeks advance x triage issues reported beta", "num": "8854", "d": "1/2017"}, {"title": "remove reactcreatemixin", "body": "since mixins longer part future react api plan current reactcreatemixin implementation noop think consider removing since part public api believe would need happen next major release add deprecation warning number projects use api cc spicyj gaearon", "num": "8852", "d": "1/2017"}, {"title": "scoping render typescript maybe", "body": "want request feature report bug bug current behavior code throws export class test extends reactcomponent static proptypes state test variation export class test extends reactcomponent static proptypes state test current behavior bug please provide steps reproduce possible minimal demo problem via similar template using repo test logintsx component expected behavior managed chase scope lost render function suspect possible would issue syntax blocked tsd react sure react bug tsd one versions react browser os affected issue work previous versions react running chrome macos reproduce ff edge win well nt used older versions suspect", "num": "8850", "d": "1/2017"}, {"title": "dom element rendered props detected wasted", "body": "found issue trying demo react perf chrome basically utilizing dom element rendered prop detected wasted code detected wasted even onclick new function every render interestingly code exempt prop value false detect wasted properly code created minimal todolike project reproduce issue repro steps click start perf tab check one item web page click stop perf tab expected result detect wasted render actual result wasted detected reproduced react", "num": "8847", "d": "1/2017"}, {"title": "blank page coming apache server", "body": "want request feature report bug current behavior blank page coming current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior must running example versions react browser os affected issue work previous versions react", "num": "8844", "d": "1/2017"}, {"title": "dangerouslysetinnerhtml remove script tag", "body": "want request feature report bug bug current behavior many cases realworld need inject external party script example adding googleanalytics code adding stripe button currently dangerouslysetinnerhtml removes script tag making hard simply inject js code page issue people writing bloated components like reactga google analytics minimized add script tag similar libs like reactscripts stripecheckout minimized add script believe least using dangerouslysetinnerhtml remove script tag instead run script example adding stripe button follows current behavior bug please provide steps reproduce possible minimal demo problem via similar template script create stripe button render function return reactdomrender documentgetelementbyid container expected behavior display stripe button button versions react browser os affected issue work previous versions react believe react worked long time", "num": "8838", "d": "1/2017"}, {"title": "bug nashorn issue props", "body": "version reactjs running nashorn strange issue reactcreateelement called reactdomserverrendertostring react fails add attributes generated html output eg true far tell elements realize probably nashorn bug actually react bug thought file issue case narrowed issue row props object never gets assigned property mean likely nashorn bug however workaround issue replacing entire forloop calls objectassign polyfill gotten ca nt really see big difference polyfill fact using polyfill everything works using props propname config propname ideas edit similar issue earlier version reactjs regarding inline styles parsed used assign copy properties one object another however case objectassign polyfill bundled assign polyfill used instead solution use polyfill instead", "num": "8834", "d": "1/2017"}, {"title": "proptypesshape throw object properties specified", "body": "setup like call like expect show warning passed object exact shape required please advice", "num": "8832", "d": "1/2017"}, {"title": "umbrella async rendering", "body": "async rendering incomplete bugs existing implementation crucial features missing specifically bugs related resuming work interupted effort clean bugs without fundamentally changing underlying model course working branch decided underlying model inherently flawed needs change tricky case low priority work interrupted higher priority update want able reconcile higher priority without losing low priority children resume later way existing model going scrap model start scrap existing progressed work implementation bugs give us better foundation upon build new model also fix bugs triangle demo although starvation clearly worse aim correctness comprehensiveness x add fuzz tester protect regressions acdlite difficult impossible write unit tests provide sufficient coverage especially ones resilient implementation changes fuzz tester provides safety make assertions work reused consistency x remove existing code related progressed forked work acdlite split update priority represents priority subtree fiber belongs lets us know whether children remaining work expiration times next step implement expiration times low priority work nt possible expiration times alone sufficient generate real product wins even without ability resume interrupted work x implement expiration times acdlite updates fiber priority level coalesce commit bucket updates rounding expiration times may sufficient solve coalescing problem async toplevel api keep track next unit work per root possible context currently always reach root receive update fiber nt necessarily know tree fiber belongs flush interaction work synchronously expiration boundaries blockers shouldcomponentblock still figuring details work x components block rendering using component blocks react searches nearest expiration boundary similar semantics error boundaries ifwhen update expires switches tree instead unblock using actual name tk resuming interrupted work move onto addressing problem resuming interrupted work implement resuming basic case fiber touched since last time worked represent priority parent last reconciled set children present future maybe past still figuring details reorders work items x resume mount bug null passed props constructor acdlite x resume mount bug creating new instance resume causes refs callbacks userspace close wrong instance fix reusing original instance acdlite image load event may fire mounted dom figure way defer event applicable ones mount x ensure error boundaries work incremental mode eg hidden subtree nt commit wait next animation frame flush animation work using last completed priority level work overlaps may able reuse item may need wait switch expiration times x ensure work expires even events solve stale event listeners component receives interaction event flush updates parents simulate render recreate event handler calling defer event dispatching proper fast way see context solve case want show fallback content primary content takes long fast rendering spinner async render takes long general expiration time elapsed async tree started calling alternate tree instead way render tree spinner took long render suspense figure story around unittesting async components probably want force sync mode api provide enzymetestutils", "num": "8830", "d": "1/2017"}, {"title": "perf freezes browser", "body": "banging heads diagnosing really bad performance firefox specific chrome works fine react redux web app updating many objects time using node webpack typescript reactaddonsperf type definitions definitelytyped outputs module reactaddonsperf exported member perf lets us use perfstart console command entered browser freezes clue could wrong help really appreciated", "num": "8828", "d": "1/2017"}, {"title": "click handlers triggered disabled buttons containing elements chrome", "body": "want request feature report bug bug current behavior current version react chrome opera buttons click handler element inside ie text node get click handler triggered click disabled current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior buttons react click events versions react browser os affected issue work previous versions react react chrome working react", "num": "8827", "d": "1/2017"}, {"title": "disabled button onclick handler triggered erroneously", "body": "want request feature report bug bug current behavior buttons children text nodes disabled attribute true click handlers still triggered current behavior bug please provide steps reproduce possible minimal demo problem via similar template load code pen check react v observe button click behaviour instances expected behavior button click trigger click handler versions react browser os affected issue work previous versions react bug appears behaviour correct", "num": "8826", "d": "1/2017"}, {"title": "small error tutorial", "body": "want request feature report bug bug current behavior tutorial functional components explained following codesnippet expected behavior work correctly follow tutorial versions react browser os affected issue work previous versions react", "num": "8825", "d": "1/2017"}, {"title": "wondering react support", "body": "want request feature report bug feature current behavior currently react size reactminjs compressed reactdomminjs compressed compression still pain point mobile web situation expected behavior heard react implement event dispatching bubbling normalizes common events across browsers nt need worry much maybe make huge contribution react size wondering possible already enabled react combine babelpresetenv provide ability smaller production bundle size example team china mainly focus ios safari amp android browser amp hybrid webviews ios amp android based webkit kernel polyfill ieedge opera firefox desktop browsers unnecessary production codes polyfills could stripped make final production codes much smaller versions react browser os affected issue work previous versions react react", "num": "8824", "d": "1/2017"}, {"title": "unstablehandleerror allow disabling making error bubble parent upon retry", "body": "feature allows error boundaries components attempt rerender component first error handled boundary defined second render design unhandled error occurs render error bubbles parent would better configure behavior able choose bubble handled upon retry case acceptable continue retry render screen errors occasional race condition current state ready yet current component rendered error times state ready", "num": "8821", "d": "1/2017"}, {"title": "feature request binding utils elements", "body": "want request feature report bug feature first expert react using weeks silly request please forgive binding method elements prevent code repeating additional operations element component example binding updating state inputs need write thing every component design something like javascript import react component react import autostate autostate export default class loginform extends component constructor props super props thishandlesubmit thishandlesubmitbind autostatejs create utils use elements even use jquery manipulations add behaviors elements need without creating many components renderer needs bind functions added bind attribute bind accept array multiple bindings know create input component automaticly nt make tests believe way fast creating nested component everything since react looks components check update please think example main purpose kind feature open many posibilities", "num": "8820", "d": "1/2017"}, {"title": "showing wrong state value console", "body": "signup component state defined constructor component following event listner update state render following jsx code allow user select hisher gender click male button shows male console onchange event soon click female button often logging male value gotten female getting correct value render gender state jsx could please explain problem happening react taking time set component state", "num": "8819", "d": "1/2017"}, {"title": "disabled radio button checkbox fires onchange event double click", "body": "want request feature report bug bug current behavior disabled radio button checkbox fires onchange event double click current behavior bug please provide steps reproduce possible minimal demo problem via similar expected behavior disabled radio button checkbox nt fire onchange event double click versions react browser os affected issue work previous versions react react windows duplicate", "num": "8814", "d": "1/2017"}, {"title": "anything consider adding reactcomponent prototype", "body": "want functions default components creating best way add prototype chain reactcomponent add default implementation life cycle hook component something misbehave example javascript let defaults dosomething function consolelog added components shouldcomponentupdate function nextprops return deepequal nextprops thisprops reactcomponentprototype objectassign reactcomponentprototype defaults", "num": "8813", "d": "1/2017"}, {"title": "reactdomrender fails reactdom loaded dom available", "body": "want request feature report bug report bug current behavior reactdomrender fails global document first loaded current behavior bug please provide steps reproduce possible minimal demo problem via similar template providing jsfiddle example use case happens nodejs jsdom reproduce define component state render function render null one cases happens pretty frequently using hocs party translation tools etc js class mycomponent extends reactcomponent state display false componentdidmount thissetstate display true render return thisstatedisplay null define test load jsdom global every test cleanup done js const reactdom require reactdom describe app gt let cleanup beforeeach gt cleanup require jsdomglobal aftereach gt cleanup gt reactdomrender documentbody would fail following error require reactdom dom defined globally test pass also returning anything null react element make test pass looks like reactdom using get dom available first loaded nt look reactdomrender called makes sense happy give pr fix throw right direction expected behavior reactdomrender render correctly even global document added loaded works component nt return null certain state versions react browser os affected issue work previous versions react tested latest react nodejs thanks", "num": "8812", "d": "1/2017"}, {"title": "misleading reconciliation behavior due thispropschildren", "body": "want request feature report bug bug current behavior currently component state change input element loose focus think due misleading reconciliation mechanism playing nt get work expected remove component everything work expected another way fix issue change component slightly way current behavior bug please provide steps reproduce possible minimal demo problem via similar template start typing input focus would lost due dom manipulations expected behavior expected behavior update html elements reconciliation thus loose focus versions react browser os affected issue work previous versions react latest also reproducible", "num": "8810", "d": "1/2017"}, {"title": "double click event emitted wrong component", "body": "want request feature report bug bug current behavior doubleclicking component initial click create new component overlay first one double click event emitted new component current behavior bug please provide steps reproduce possible minimal demo problem via similar template double clicking button alert box created happen doubleclick handler new component expected behavior doubleclick event proably emitted button new layer versions react browser os affected issue work previous versions react tested chromium linux chrome window nt test another version", "num": "8804", "d": "1/2017"}, {"title": "text shown text box", "body": "creating html form get input information users via react working macos google chrome problem user types text text box words shown view text box looks like listener store aware action triggered separated three files code javascript import react react import addproductstore storesaddproductstore import addproductactions actionsaddproductactions class addproduct extends reactcomponent constructor props super props thisstate addproductstoregetstate thisonchange thisonchangebind componentdidmount addproductstorelisten thisonchange componentwillunmount addproductstoreunlisten thisonchange onchange state thissetstate state handlesubmit event eventpreventdefault var name thisstatenametrim var price thisstatepricetrim var description thisstatedescriptiontrim render return description export default addproduct code javascript import alt alt class addproductactions constructor thisgenerateactions updatedescription export default altcreateactions addproductactions code javascript import alt alt import addproductactions actionsaddproductactions class addproductstore constructor thisbindactions addproductactions thisdescription onupdatedescription event thisdescription eventtargetvalue export default altcreatestore addproductstore however simply change name function corresponding properties shorter name ie instead description problem solved perfectly result wondering bug naming convention react", "num": "8801", "d": "1/2017"}, {"title": "expose reactdevtoolsglobalhookinject", "body": "feature request came brief discussion twitter gaearon exposes access great use collect component level performance metrics customers production however things love access purpose helping users pinpoint performance issues applications issue includes initial observations hope keep open dialogue particular considering fiber probably change landscape regards common performance problems instrument according understand urge keep api surface area small possible order create minimal commitment apis allow internals move fast exposing additional internals explicit warning committed api fine us tool vendor looked using highlight batched nature work performed react eg work application getting batched properly access component updating methods etc ca nt really know batch work starts ends available reactdom prefix exposing hook would useful also experimentally hooked order capture events measure work resulting suspect better place case access event system would useful using unstable prefix indicate noncommittal would fine us much time look need access fiber instrumentation far looks like hook would useful", "num": "8800", "d": "1/2017"}, {"title": "warning message component reusage development enviroment", "body": "use full version react everything works fine exceptionswarnings minified version got uncaught error minified react error visit full message use nonminified dev environment full errors additional helpful warnings thrown reactdomrender components tested chrome firefox react found real problem component created inside component method like instances component render subcomponents work others nt cases first subcomponent type render fine others fail think must kind warning cases info docs", "num": "8798", "d": "1/2017"}, {"title": "triggers onchange event file input elementvalue assigned", "body": "want request feature report bug bug possibly related current behavior component file upload button user selects file upload called case want call user selects file two times row set null first selection handler called second time user selects file far good bug setting null causes handler called case chrome firefox validate seeing called twice selecting file browsers current behavior bug please provide steps reproduce possible minimal demo problem via similar template actually fiddle callback called three times expected behavior behavior chrome firefox versions react browser os affected issue work previous versions react react react latest fiddle", "num": "8793", "d": "1/2017"}, {"title": "missing objectassign licence please check others", "body": "want request feature report bug bug current behavior missing copyright licence current behavior bug please provide steps reproduce possible minimal demo problem via similar template see expected behavior lawyer facebook know show mit according policies versions react browser os affected issue work previous versions react checked current version oses probably previous versions", "num": "8789", "d": "1/2017"}, {"title": "react dom server broken build version", "body": "want request feature report bug bug current behavior breaks code execution file reactdomdistreactdomserverminjs beautified javascript function n r use strict var esecretinternalsdonotuseoryouwillbefired nexports oreactcurrentowner output expected behavior desired goal serverside rendering production skips unnecessary comments warnings etc react documentation page versions react platform nodejs server side rendering work previous versions react nt know", "num": "8788", "d": "1/2017"}, {"title": "missing function emptyfunction", "body": "browsing react source trying locate file emptyfunctionjs often see statements like var looked everywhere file ca nt find", "num": "8786", "d": "1/2017"}, {"title": "explore encouraging users ship dev mode production", "body": "want request feature report bug feature current behavior developers meaning right thing often accidentally ship dev mode production rather prod mode significant impact performance although dev prod one line change something react could explore encouraging great nuance know balance struck overall dx value brings vs ux another challenge change trivial make unclear whether right solution better defaults stronger advocacy folks like sebmarkbage acknowledging known issue perhaps room discussion help improve also noted switch warnings dev may require folks fix whole codebases also suboptimal may inbetween solution worth talking however expected behavior react encourages users ship prod mode production rather dev would open solution either provided library layer somehow tackled buildbundling time webpack tries ameliorate thread number suggestions ranging localhost detection alerts injecting dev mode messages dom used production environment something like alternatively thelarkinn proposing tried standardize env configs required better facilitate detection messaging like unclear would realistic likely ideas react core might around tackle problem versions react browser os affected issue work previous versions react recent versions thread jordwalke prompted issue think also makes fair point regarding benchmarks care help folks ship prod experience yall worked optimizing end customers glory", "num": "8784", "d": "1/2017"}, {"title": "differences react rax", "body": "says react much slower react api use react rax link", "num": "8783", "d": "1/2017"}, {"title": "able render n number deep expandable table rows render another rows", "body": "want request feature report bug probably neither stuck current behavior rendering multiple rows table expanded parent row possible due permitted absence fragmentation current behavior bug please provide steps reproduce possible minimal demo problem via similar template get idea expected behavior expected behaviour guess fiber lands looking explanation achieve versions react browser os affected issue work previous versions react probably prefiber versions thanks help", "num": "8775", "d": "1/2017"}, {"title": "react composition vs inheritance", "body": "going inheritance vs composition discussion place talk use case creating hierarchy components using react stuff like button buttonbar example sort things whatever functionalities defined button component needs present buttonbar components javascript class button extends reactcomponent shouldcomponentupdate prevalidation return result class buttonbar extends button shouldcomponentupdate return mylogic amp amp supershouldcomponentupdatecall currently implemented inheritance achieve correct way going nt want go back way using reactcreateclass", "num": "8774", "d": "1/2017"}, {"title": "missing downloads section", "body": "bug current behavior downloads section expected behavior downloads way section versions react browser os affected issue work previous versions react affected lastknowngood", "num": "8773", "d": "1/2017"}, {"title": "incorrect jsx dynamic elements", "body": "want request feature report bug bug current behavior something like thisafunction thisstateparam thisafunction thisstateparam paramparam changes seems like virtual dom processing comparing changes causing problems versions react browser os affected issue work previous versions react react everything worked fine previous versions react everything works fine iphone iphone", "num": "8772", "d": "1/2017"}, {"title": "input handler parent considered controlled well", "body": "want request feature report bug bug current behavior actually listening every input parent input know called controlled component behavior ca nt type anything case makes confusing warning reading term think controlled case nt want put handler times inputs reason treat uncontrolled case developer control input instead ifyoudonotfollowthenewtermweinventyoucannottypeinsilent way heshe really forgets put handler hisher fault put handler parent fault nt want punished current behavior bug please provide steps reproduce possible minimal demo problem via similar template see expected behavior handler matter oninput onchange onkeydown ancestor input element considered controlled versions react browser os affected issue work previous versions react", "num": "8769", "d": "1/2017"}, {"title": "ontoggle event name recognized", "body": "report bug current behavior ontoggle prop attached details html element attach event handler instead shows warning warning unknown prop tag remove prop element details see details created details current behavior bug please provide steps reproduce possible minimal demo problem via similar template time right expected behavior versions react browser os affected issue work previous versions react latest workaround use onclick instead work fire event handler details opened keyboard", "num": "8761", "d": "1/2017"}, {"title": "nt set thispropschildren children still evaluated", "body": "hi code class spinner extends reactcomponent render thispropsloading return else return thispropschildren class app extends reactcomponent render return thispropsaccountname const account null reactdomrender documentgetelementbyid demo thought display spinner got error avoid", "num": "8759", "d": "1/2017"}, {"title": "checksum validation serversiderendered html markup string", "body": "upgrading isomorphic rendering app whines page load react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client reactempty server div datareactroot turns change removing attributes rendered html server side rendering method still generated result never matches keeps whining error tried replace error disappeared however attribute generated html markup memory attribute check whether browser server side generated html matches checksum every render compare whole generated dom hurt performance", "num": "8758", "d": "1/2017"}, {"title": "make sure finddomnode works test renderer", "body": "injection missing stack test renderer something similar added near without get missing injection stack finddomnode error calling finddomnode files use reacttestrenderer nt use reactdom would great repro error test fix", "num": "8753", "d": "1/2017"}, {"title": "test utils renderintodocument issue refs invariant violation addcomponentasrefto", "body": "simple demo app showcase issue experiencing import react react import reactdom reactdom import testutils reactaddonstestutils var jsdom require jsdom jsdom globaldocument jsdom hello world globalwindow documentdefaultview testutilsrenderintodocument test basically ref element found function following error thrown checked multiple copies react project see react installed additionally intended behaviour bug since using refs context important feature", "num": "8748", "d": "1/2017"}, {"title": "make circle run properly branch", "body": "missing circleyml config branch would great copy whatever files need copied make ci pass anyone able test sending pr unlike normal prs go master changes seeing circle pass might simple copying circleyml scriptscircleci", "num": "8744", "d": "1/2017"}, {"title": "expose key helper libraries", "body": "want request feature report bug feature current behavior ca nt access thispropskey thiskey expected behavior use case hydratedehydrate certain components hmr plugin developed internally hmring file often need access things within loops rehydrate right data right add secondary key everything development tool access keys would trivial implement also impossible implement babel compiler trick need detect componentsloops runtime ca nt add prop everywhere mess props seems like rather enduserhostile least give backdoor accessing keys proposal weird edge case uses like would expose would take component instance return key could appropriate warnings around documentation elsewhere", "num": "8743", "d": "1/2017"}, {"title": "run tests correctly windows", "body": "issues test code failing tests windows invalid regular expression would invalid regexp like invalid arguments passed issue similar", "num": "8737", "d": "1/2017"}, {"title": "", "body": "hi run issue controlled password fields adding user tracking software app generally speaking trackers going claim nt capture text inputs achieve simply ignoring values events still however record fact event occurred together selector uniquely identifying target input controlled value attribute markup going change resulting tracking software capturing part selector brings question security implications value accessible via also virtue parsing markup thanks k", "num": "8736", "d": "1/2017"}, {"title": "better way get refs reacttransitiongroup", "body": "found get children refs reacttransitiongroup like get quite ugly better way", "num": "8734", "d": "1/2017"}, {"title": "fiber clear error boundary update queue whenever captures error", "body": "seems like least root", "num": "8733", "d": "1/2017"}, {"title": "unexpected unmountmount occurred delete node", "body": "want request feature report bug bug current behavior single node behavior right multiple nodes unexpected unmountmount occurred unchanged node delete node minimal demo problem without problem single node click toggle button toggle nt affect node problem reproduce multiple nodes ie add node previous fiddle click toggle button toggle unmount mount new node note attribute helpless problem expected behavior keep node regardless number children versions react browser os affected issue work previous versions react reproduced react", "num": "8731", "d": "1/2017"}, {"title": "event radio", "body": "could please explain behaviour clicking radio emits events example without clicking radio emits event thank", "num": "8727", "d": "1/2017"}, {"title": "potential typo codeoverviewmd", "body": "appears typo line codebaseoverviewmd specifically see one symbol results text line appearing one large block code see screenshot markdown code left stylized code rendered right based content subsequent text line would expect appear following indeed something fixed like fix submit pr immediately", "num": "8724", "d": "1/2017"}, {"title": "feature request proptypes validate extra props passed", "body": "stackoverflow question sorta solution working properly least recursion hope idea clear useful example refactoring helps eliminate death code props longer needed", "num": "8721", "d": "1/2017"}, {"title": "delimit dynamic part warning messages newlines", "body": "proposed think find warnings add dynamic part end like delimit two newlines way much easier recognize middle bunch errors good first issue contribute would need find calls include additional info like add couple newlines also need change tests case fail", "num": "8719", "d": "1/2017"}, {"title": "object tags fatally crash react apps chrome node cache issue", "body": "since recent update chrome canary beta branches react apps contain object tag fail fatally rendering halted due internal exception seems chromium devs altered following reason kills react line try stick arbitrary object onto end element cached htmlelement component relationship suppose object tag hits caching code throw exception eventually something tries access instance means change reaches chrome stable quite react apps could randomly stop working users update browsers", "num": "8718", "d": "1/2017"}, {"title": "bug resets value value defaultvalue provided", "body": "demo problem resets value type instead default behaviour trigger input invalid state source code demo available html bug normal behavior js demojs class test extends reactcomponent public state value render return fully resets value type allows type hightlight invalid field reactdomrender documentqueryselector test", "num": "8717", "d": "1/2017"}, {"title": "reactclassequivalence tests fail node", "body": "title says fails run node confirm tests pass included output failing tests reactclassequivalence tests thing classes coffeescript reactclassequivalence tests thing classes typescript summary failing tests fail srcisomorphicmodernclasstestsreactclassequivalencetestjs reactclassequivalence tests thing classes coffeescript reactclassequivalence tests thing classes typescript bvaughn briefly discussed problem confirmed failing behavior", "num": "8715", "d": "1/2017"}, {"title": "provide context sfcs invoked via", "body": "holywar question alert would possible provide context sfcs invoked via syntactic form usecase involves unusual class usage using inheritable containers sfc individual components could overridden descendant classes forced autobind viewmethods full return class item extends base constructor value super thisvalue value tostring return thisvalue var obj new item reactdomrender documentgetelementbyid container bit complete example could found understand holy war question pure functions javascript however thinking usage legit like props way ugly writing self full self return class item extends base constructor value super thisvalue value tostring return thisvalue var obj new item reactdomrender documentgetelementbyid container nt", "num": "8714", "d": "1/2017"}, {"title": "separate reactjsstyleinlinestyling cssstyle styling another npm module", "body": "first thanks making reactjs spreading core ideas others anyway gist issue separating files styling another npm module situation using rxjs react animation using directtodom method performance creating stylestreamedcomponent used like stylestreamedcomponent implementation resorting disgusting hack fond importing reactjsinternal code ps separating cssutility functionalities npm module might helpful librarymaintainersauthors well", "num": "8713", "d": "1/2017"}, {"title": "tutorial link expired", "body": "line reactdocstutorialtutorialmd links", "num": "8711", "d": "1/2017"}, {"title": "children array error message validatechildkeys consistent", "body": "validatechildkeys results inconsistent childrenlength equals result different try result sorry english way use google translate thanks", "num": "8709", "d": "1/2017"}, {"title": "instance pointing reactinternalinstance amp reactinternalinstance pointing instance expected structure", "body": "playing examples understand internal code flow react setstate noticed reactcompositecomponentwrapper object reference instance object turn reference screenshot console reactcompositecomponentwrapper object reactinternalinstance expected structure", "num": "8708", "d": "1/2017"}, {"title": "constructor requires new operator", "body": "reactcompositecomponentjs two calls component class construction missing use new operator calls like component publicprops publiccontext updatequeue", "num": "8702", "d": "1/2017"}, {"title": "warnings clean validatedomnesting", "body": "see validateexplicitkey warnings like hard see path components see validatedomnesting warnings like warnings clean validatedomnesting thanks", "num": "8701", "d": "1/2017"}, {"title": "broken link react tutorial", "body": "want request feature report bug report bug current behavior broken link first section current behavior bug please provide steps reproduce possible minimal demo problem via similar template na expected behavior link go working version tictactoe codepen versions react browser os affected issue work previous versions react na", "num": "8699", "d": "1/2017"}, {"title": "bug input onchange event", "body": "hi created jsfiddle example view work onchange event native html react react onchange event worked oninput consoled every one keydown keyup event dont know see onchange event occurs value element changed tip event similar oninput event onchange occurs element loses focus try set value inputs see console react input consoled every key press html input consoled input loss focus", "num": "8696", "d": "1/2017"}, {"title": "native eventstoppropagation outside react root cuts react events", "body": "need host standalone react component draftjs editor inside application run js framework even plain js jquery code application beyond control vendor component adds content part reactbased editor anyway important part need add component following code existing div editorcomponent regular react component onclick events attached content primarily toolbar buttons editor learned react event model bubbling executes independently event bubbles way document evstoppropagation called native event react events wo nt execute understandable situations document contains react app component root content meaning control events page react code however react component small fraction entire page may severely influenced rest page problem event handling code component calls evstoppropagation cuts events smaller fraction even event originated react component scope influencing code could well jquery plugin even author page may able rewrite code special event handling fiddle demonstrate believe point event chain breaks allowing react execute events root element react component rather whole document way react root element could considered isolation edge react application component tracked react event registration function reactdomcomponentensurelisteningto found following code tried change register react event chain root react container tried several basic events onclick onmousedownup seems working us expected react events influenced stopping propagation native events outside react component root two differently implemented parts application coexist peace sure ownerdocument chosen node implementation changing node could break something important please advise proposed solution seems viable case consider change reasons would nt recommend", "num": "8693", "d": "1/2017"}, {"title": "expected onbeforemountcomponent parent onsetchildren consistent", "body": "want request feature report bug looks like bug current behavior setting state rendering component test renderer shows warning console warning exception thrown hook handling onsetchildren invariant violation expected onbeforemountcomponent parent onsetchildren consistent parents invariant violation expected onbeforemountcomponent parent onsetchildren consistent parents following example weirdly happens consistently third time run complex scenarios earlier steps reproduce issue following first create app install renderer add following button jsx import renderer reacttestrenderer tojson demo understand common way using react test renderer interested knowing reasons behind problem eventually see workarounds apply trying serialize components send endpoint see snapguidist expected behavior ideally warning versions react browser os affected issue work previous versions react able reproduce issue latest versions chrome firefox safari macos", "num": "8692", "d": "1/2017"}, {"title": "eventcurrenttarget null onmousemove event handler", "body": "browser chrome lts react ver lts javascript class dropdown extends purecomponent constructor props super props thishandlemousemove thishandlemousemovebind thishandlethrottlemousemove throttle thishandlethrottlemousemovebind guess eventcurrenttarget might", "num": "8690", "d": "1/2017"}, {"title": "shorthand css properties cause style inconsistencies", "body": "reporting bug current behavior render host component contains shorthand css property overwriting longer form property eg conflicting andor property update host component rerender shorthand property eg remove longer form property eg host component style invalid examples bug reproduced update since updated plnkr use instead since makes problem immediately obvious spot example render render expected actual alternate example render render expected actual also reproduce bug properties like etc caveats note shorthand value changes renders things work expected react explicitly updates shorthand style know edgecase behavior may worth fixing originally noticed way issue versions react browser os affected bug reproduces chrome firefox safari using react well unreleased renderer", "num": "8689", "d": "1/2017"}, {"title": "composition events chinese japanese ime problem controlled components input textarea", "body": "want request feature report bug current behavior existed issue one problems kind browsers uploaded detail demo files test results temporary solution reactcompositionevent main problem users type words ime chinese japanese maybe korean something like search database filter data sometimes functions unworkable example users type ni composition session maybe one \u4f60\u5c3c\u6ce5\u817b chinese one \u306b\u30cb\u5c3c\u716e japanese moment event also fired search filter functions application designed invoked event occured maybe something wrong logically functions invoked users finished composition session react three synthetic events input components uncontrolled use help capture text correctly different point google chrome change events sequence check cinputjs ctextareajs files input components controlled hard solve problem controlled component came ca nt modify directly way update state using schedule update may asynchronous test found different osbrowsers could different results written code solve thought nt good solution uses browser detection two properties object one input another internal functions search filter etc ca nt use one property object ca nt stop events state need update value input element stop change events composition session would get nothing typing words ime current behavior bug please provide steps reproduce possible minimal demo problem via similar template use online test demo use normal input component controlleduncontrolled test expected behavior input textarea controlled components react ensure fired change composition events consistent different browsers found different results events fired sequence least versions react browser os affected issue work previous versions react react browsers chrome firefox safari opera ie edge os macos", "num": "8683", "d": "1/2017"}, {"title": "docs look weird small widths", "body": "note accidental top bar misplaced tag also see doc page loading", "num": "8676", "d": "1/2017"}, {"title": "document profiling components timeline", "body": "basically need move section permanent place docs example page might good place", "num": "8675", "d": "1/2017"}, {"title": "shouldcomponentupdate render called thissetstate", "body": "bug current behavior calling multiple times rerenders component value inside also called equal value passed first call expected behavior called time called amp component rerenders returns true background building library wraps components amp state management stuff code similar working context feature created bmi calculator help debug issues vdom example looks like changing input value cause amp rerender nt investigation discovered called several times inside expected values however called expected workaround issue checked failures inside callback amp recalled required obviously ideal replicate go amp change input value trying recreate issue simpler example speculated calling inside parent immediately calling inside child caused problem though idea incorrect child correctly rerendered amp called every time called see attempt using react windows chrome", "num": "8672", "d": "1/2017"}, {"title": "checking permissions component breaks subscribe", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "8670", "d": "1/2017"}, {"title": "children prop gets recreated killing purecomponent optimizations", "body": "want request feature report bug report possible bug current behavior component renders component b children prop react component jsx fragment render component recreate said children prop current behavior bug please provide steps reproduce possible minimal demo problem via similar template example code import react react class componentwithchildren extends reactpurecomponent render consolelog render comp return hello thispropschildren class children extends reactpurecomponent render return children nested class app extends reactpurecomponent update gt thissetstate count thisstatecount state count render consolelog render app return export default app expected behavior would expect componentwithchildren rerender none props actually changed versions react browser os affected issue work previous versions react react", "num": "8669", "d": "1/2017"}, {"body": "thanks feedback would like submit pr specific edits like see", "d": "1/2017"}, {"body": "thanks reply honest started trying learn react today qualified provide edits know got lost end nt exactly sure told thus unable complete tutorial removing constructor board class selfexplanatory rest sentence would greatly benefit addition another code div showing board looks like suggested changes made personally would help better understand refactoring occur step well better understanding properties getting passed around well versed languages js strong suit working resolve deficiency likely tutorials come back figure one suggested edits since basically introductory react tutorial", "d": "1/2017"}, {"body": "assigned lacker since context prs tutorial", "d": "1/2017"}, {"body": "thanks reporting looks like bug would like investigate happens", "d": "1/2017"}, {"body": "second invalid prop", "d": "1/2017"}, {"body": "try send pr updates sure changed fbjs", "d": "1/2017"}, {"body": "worth yet follow along fbjs issue anything done update changelog done past easy determine changed", "d": "1/2017"}, {"body": "feel free open pr review anmonteiro", "d": "1/2017"}, {"body": "thanks submitted", "d": "1/2017"}, {"body": "seems reasonable pr would great", "d": "1/2017"}, {"body": "use yarn file points correct version", "d": "1/2017"}, {"body": "always children pass jsx depend components actually return think fiber would change way sure understand mean bypass case maybe could create complete runnable code snippet illustrates problem clear", "d": "1/2017"}, {"body": "hi gaearon thanks response currently components complicated create simple code snippet tell trouble say passing parent method children lifting state permissionchecker component goes around category link component ca nt using reactchildrenmap category render iterating children use reactcloneelement pass props children description clear still create snippet code", "d": "1/2017"}, {"body": "generally nt recommend relying cloneelement lot usually sign restructure components around data rather try manipulate elements yes simplified example would help", "d": "1/2017"}, {"body": "hi gaearon create repo add screenshot also want quick look working add permissionchecker around components breaks advice prevent cloneelement nt idea thanks much repo", "d": "1/2017"}, {"body": "recommend stop using wiring component hierarchy instead describe hierarchy data structure like render component recursively read data structure build elements explicit props right away problem use kinda breaks react paradigm moment extract block component stops working demonstrates cloning children recursively good approach another alternative solution use context experimental feature many pitfalls change future recommend unless experienced react context however react router solves problem hope helps closing since usage question rather issue", "d": "1/2017"}, {"body": "hey webterminator able reproduce issue ran code shared jsfiddle simplified method show alert runs expected share small example reproducing issue use fiddle linked one link pr template starting point", "d": "1/2017"}, {"body": "hi aweary link please keep private thanks", "d": "1/2017"}, {"body": "thanks webterminator mean something along lines jsfiddle linked difficult us help nt minimal case reproducing issue verify issue react components", "d": "1/2017"}, {"body": "really mistake nt include npm install savedev babelpolyfill threw fact error console thanks", "d": "1/2017"}, {"body": "glad hear figured thanks follow", "d": "1/2017"}, {"body": "footer site looks like happening uses flexbox without ms prefixes legacy compatibility", "d": "1/2017"}, {"body": "good catch want send pr", "d": "1/2017"}, {"body": "yeah happy ca nt get afternoon flik wan na get contributor list", "d": "1/2017"}, {"body": "sure", "d": "1/2017"}, {"body": "nt thought much initial reaction examples repo superseded createreactapp supplemented official react docs needed partial removing anything providing single example well built redundant set poorlymaintained examples worse examples agree sentiment either remove drastic spring cleaning", "d": "1/2017"}, {"body": "nice community examples like maybe could get people contribute", "d": "1/2017"}, {"body": "second vote removing examples folder times used examples testing dom behavior superseded dom fixtures stay vote reworking examples solve specific problems usually look open examples folder otherwise go straight quick start guide docs pages sidebar new site could good source inspiration new examples maybe something like", "d": "1/2017"}, {"body": "thinking use examples holistic apps eg calculator github repo browser etc show solve problems instead repeating docs", "d": "1/2017"}, {"body": "ah think motivation necessarily copy docs verbatim sample apps makes easier people learn sounds good", "d": "1/2017"}, {"body": "want create example applications maintain small list somewhere external applications recommend reviewing", "d": "1/2017"}, {"body": "maintaining list recommended external examples", "d": "1/2017"}, {"body": "tried replicate behaviour codepen able maintain two ref references child ie ancestor component ref gets nulled think might missed paragraph note override ref still possible two parents ref child unless use callbackrefs unfortunately clear point override still gets overwritten change rc related case clone nt override however indeed possible keep refs callbacks need manually based example functions something delegate function", "d": "1/2017"}, {"body": "ah great yes misunderstood meaning behind docs thanks walking solution appreciate", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "ajax error textbabel fetching scripts invalid typelanguage attributes deprecated removed around january see details server end render", "d": "1/2017"}, {"body": "use first argument event handler like docs fact appears proxy nt worry implementation detail sure second one exists likely bug maybe even fixed master aweary might remember", "d": "1/2017"}, {"body": "second event result internal implementation detail resolved likely released next minor version", "d": "1/2017"}, {"body": "perf measuring library code time application code time since measuring application code time actionable includes time spent components react code interested full time learn information timeline integration hope helps", "d": "1/2017"}, {"body": "thank much clarification helpful", "d": "1/2017"}, {"body": "gaearon makes sense sure like change since total duration tends important estimating hit initial render framerate guidelines well comparing different versions react actionable sense able optimize react internals actionable sense update meets performance guidelines update results inefficient react dom update probably something else recording numbers question", "d": "1/2017"}, {"body": "need record initial render use browser apis", "d": "1/2017"}, {"body": "gaearon think issue like subcomponent level render times get perfprintinclusive longer gives total render time", "d": "1/2017"}, {"body": "thanks feedback see kinds information could valuable likely wo nt reverting behavior point middle core engine rewrite consider feedback get making reactperf work", "d": "1/2017"}, {"body": "hey thanks issue reason happening actually really interesting related react issue using semicolons scenario automatic semicolon insertion asi work means expect code parsed like actually parsing immediately invoked function minimize example expecting due paren lack semicolon parsed js foobar function foobaz function reactdomfinddomnode add semicolon function body example see issue resolved hope helps", "d": "1/2017"}, {"body": "wow thanks nice explanation aweary", "d": "1/2017"}, {"body": "reactdom fixes jquense nhunzaker aweary want release think least included close merged", "d": "1/2017"}, {"body": "jquense probably want merge first relies changeeventplugin keep value attribute sync value property need reevaluate changes", "d": "1/2017"}, {"body": "reactcreateclass moved separate package reactcreatefactory moved separate package reactdom factories moved separate package new packages maybe need tool managing many packages single repo wink", "d": "1/2017"}, {"body": "long nt make umd builds harder board lerna someone want send pr", "d": "1/2017"}, {"body": "pretty sure reached peak harder downhill", "d": "1/2017"}, {"body": "gaearon challenge accepted spicyj jk wo nt make harder throw something together", "d": "1/2017"}, {"body": "awesome excited ahead react also glad wo nt manually create minified build react server render curious idea much larger bundle react fiber", "d": "1/2017"}, {"body": "scratched make setstate async default remove attribute whitelist stateful functional components new context api stylistic choice confusing like double negative hehe", "d": "1/2017"}, {"body": "ya look great yall one thought related flat bundles harder write certain types tooling without access internal apis specifically thinking test libs maintain invariably need touch bunch internal apis test utils fall short bit niche use case tho asandthe cost using apis well understood nt used production apps", "d": "1/2017"}, {"body": "guys want switch lerna working rollup scripting make flat files lerna packages would happy help", "d": "1/2017"}, {"body": "curious idea much larger bundle react fiber right roughly size implementing features async scheduling error boundaries fragments portals nt worked optimizing size think reduce likely initial release another promising imo area fiber support custom renderers reactdom tradeoffs nt match product needs much easier create custom dom renderer example nt ship synthetic event system fiber makes custom renderers way easier create giving component features box", "d": "1/2017"}, {"body": "stateful functional components issue read", "d": "1/2017"}, {"body": "go flat bundle route definitely appreciate would awesome offer modern bundle node capable browsers work topic effectively produces flat bundles different output scenarios basically configured wrapper around rollupbabelbuble also thought adding specific modern entries packagejson bundles like webpack make use eg think something like would definitely interesting react especially context ssr apps target node gt", "d": "1/2017"}, {"body": "agree swernerx time migrate", "d": "1/2017"}, {"body": "swernerx interesting direction may explore future right browser support increasing many features sufficiently slower counterparts nobody time optimize yet know team hard work fixing rather look evergreen browsers mostly fast using", "d": "1/2017"}, {"body": "stateful functional components issue read specific issue afaik old ideas repo interested ideas numerous reasons interested stateful functional components listed", "d": "1/2017"}, {"body": "concerning flat bundles would great internals still exposed one way taskworld sometimes monkeypatched react internals userland code finegrained error messages performance measurement hooked react internals added instrumenting code like show code js const reactreconciler require reactlibreactreconciler reactreconcilermountcomponent mountcomponent gt function internalinstance enter react mount describeinstance internalinstance try return mountcomponentapply arguments finally exit reactreconcilermountcomponent reactreconcilerreceivecomponent receivecomponent gt function internalinstance enter react update describeinstance internalinstance try return receivecomponentapply arguments finally exit reactreconcilerreceivecomponent reactreconcilerunmountcomponent unmountcomponent gt function internalinstance enter react unmount describeinstance internalinstance try return unmountcomponentapply arguments finally exit reactreconcilerunmountcomponent also hooked redux reselect similar ways unified development experience know supported internal apis may break release especially fiber coming unsupported better impossible", "d": "1/2017"}, {"body": "taskworld sometimes monkeypatched react internals userland code finegrained error messages supported error boundaries fiber performance measurement use reactperf know supported internal apis may break release especially fiber coming unsupported better impossible even better let discuss use cases come supported apis", "d": "1/2017"}, {"body": "gaearon offering package format modern clients parallel classic build prepublish tool mentioned end react decide processingbundlingoutput application transpile stuff make original code unaccessible user wants deploy modern node embedded browsers", "d": "1/2017"}, {"body": "gaearon main module always point bundles either commonjs esmodule outputs free offer alternative modern build keeping stuff intact", "d": "1/2017"}, {"body": "excuse ignorance removal createmixin mean packages rely mixins stop working dependants switch hoc solution able quickly switch alternate way provide oldstyle mixins", "d": "1/2017"}, {"body": "excuse ignorance removal createmixin mean packages rely mixins stop working dependants switch hoc solution able quickly switch alternate way provide oldstyle mixins implementation looks like never documented appeared api thought might want validate mixins future packages somehow found started using remove call use mixin directly packages providing mixins use oneline change removing useless function call offering package format modern clients parallel classic build prepublish tool mentioned yes understand saying offer build people use performance suboptimal blame react wait features actually fast providing build", "d": "1/2017"}, {"body": "gaearon migration done iterations eg first convert either features supported without performance issues also two issues syntax source code syntax bundle reason migrating source latest standard possibility using staged features deemed useful enough syntax bundle totally separate issue syntax bundle bundles decided build step think would awesome separate bundles relevant standard sure achieve practice whether achieved without unreasonable amount work nevertheless stay project ought provide bundle targeting naturally first requires converting source utilize features", "d": "1/2017"}, {"body": "pragmatic choosing source target languages driven pragmatic needs migration done iterations eg first convert vars either let const features supported without performance issues target bundle exactly would accomplish benefits end users case downsides less browser support fragmentation potential surface area bugs reason migrating source latest standard possibility using staged features deemed useful enough using new features newly written code little benefit opinion rewrite existing code new features since also introduces risk new bugs nice way ramp contributors noted issue already rewritten react make sense convert old code", "d": "1/2017"}, {"body": "gaearon even better let discuss use cases come supported apis would great api detect object synthetic event redux usually users passing events action payloads also reduxactions even using breaks ability access sending monitors simple solution js import syntheticevent reactlibsyntheticevent const store createstore rootreducer windowreduxdevtoolsextension amp amp windowreduxdevtoolsextension serialize replacer key value gt value amp amp value instanceof syntheticevent return event return value though maybe encourage using eventpersist providing event data explicitly", "d": "1/2017"}, {"body": "though maybe encourage using eventpersist providing event data explecitely solution", "d": "1/2017"}, {"body": "gaearon totally understand code may soon deprecated rewritten really good idea example continue using two module syntaxes sidebyside newly written code see source files even combining parts necessary supporting node using node module syntax course understandable personally feel quite strongly unnecessarily mixing two competing module handling mechanisms particularly newly written code particularly talking standard nonstandard one one point sure actually relevant came mind react one hottest libraries javascript world react decided fully utilize latest standardized es features preferably strict style guidelines might incentivize browser manufacturers hasten optimization efforts react could show way ui libraries whole javascript ecosystem maybe slightly optimistic", "d": "1/2017"}, {"body": "using two module syntaxes sidebyside newly written code see source files even combining using commonjs exclusively right mostly due facebook build pipeline limitations think might confusing flow syntax es modules", "d": "1/2017"}, {"body": "oh nt used flow kind syntax new", "d": "1/2017"}, {"body": "gaearon thanks suggestions excited error boundaries find offtheshelf solutions reactperf sometimes suitable instance monkeypatched several libraries able construct table shows much time percentage spent react reconciling dom manipulations userland react lifecycle selectors created using redux store reducer redux store subscriber data gives high level overview focus optimizing however let focus specific problem performance error boundaries examples believe unforeseen use cases monkeypatching internals could useful another situation monkeypatched react internals want make react warnings appear popup dom instead console sometimes develop user interface without devtools accomplished monkeypatching display popup instead using would hard accomplish react packaged flat would given idea exposing internals allows experimentation", "d": "1/2017"}, {"body": "find offtheshelf solutions reactperf sometimes suitable instance monkeypatched several libraries able construct table shows much time percentage spent may wrong believe data already exposed via want make react warnings appear popup dom instead console sometimes develop user interface without devtools intend show ui default react forgot add umbrella let focus specific problem performance error boundaries examples believe unforeseen use cases monkeypatching internals could useful agree useful however problem monkeypatched convenience wo nt come back filing issue gathering support community result everyone ends local hacks break every versions permanent solutions maintainers nt even aware something people want would rather prefer discussions like one explain use cases either point provide possibly unstable hooks", "d": "1/2017"}, {"body": "gaearon makes sense agree sentiment although usually treat opensource projects want mindset kinda like start experimenting alone making issue could bring benefit project community", "d": "1/2017"}, {"body": "see browser console showing many warnings also packages use still make use", "d": "1/2017"}, {"body": "likely firing multiple warnings single one names first classes want spam console", "d": "1/2017"}, {"body": "release", "d": "1/2017"}, {"body": "nt know yet say likely within three months", "d": "1/2017"}, {"body": "stateful functional components nt know api would look like elegant classes", "d": "1/2017"}, {"body": "really awesome cant wait get fiber means finally improve rendertostring achieve better ssr performance async rendertostring best thing right went servers async", "d": "1/2017"}, {"body": "fiber nt currently bring anything new ssr plan mentions switch flat bundles synchronous perf get better default wo nt envify code manually people nt however related fiber ssr asynchronous", "d": "1/2017"}, {"body": "stateless components optimization aka function components pure got rendered every time like classes purerenderers definition stateless component srcrendererssharedstackreconcilerreactcompositecomponentjs looks like regular component may look like reactpurecomponent sorry nt understand points stateless components", "d": "1/2017"}, {"body": "honest stateful functional components seems another way write already write using classes far hyped stateless functional component optimizations hinted past", "d": "1/2017"}, {"body": "colch refer past discussion pretty controversial milosrasic stateful functional components another way write code important differences make interesting us mentioned earlier thread", "d": "1/2017"}, {"body": "eta", "d": "1/2017"}, {"body": "months", "d": "1/2017"}, {"body": "gaearon status proptypes previously stated maintenance mode turned away feature requests nt consistent plan continue adding features proptypes", "d": "1/2017"}, {"body": "aweary nt think particular ones mind", "d": "1/2017"}, {"body": "gaearon mostly asking regards handful prs open proptypes mobile ca nt link", "d": "1/2017"}, {"body": "gaearon found", "d": "1/2017"}, {"body": "moving statesetstate separate library core react becomes propsonly statefulness added various ways per component state one option derived class would serve base class component wanting intrinsic state", "d": "1/2017"}, {"body": "danielearwicker let keep thread focused roadmap use place generic feature requests suggestions otherwise everyone pile features want see relationship roadmap", "d": "1/2017"}, {"body": "gaearon sure though defence asking fewer features", "d": "1/2017"}, {"body": "state firstclass citizen react see thoughts", "d": "1/2017"}, {"body": "gaearon add removing class components roadmap currently deprecated", "d": "1/2017"}, {"body": "removing thing useful async callbacks simple function barely adds size library implementing similar functionality user means opting separate callbacks lifecycle methods cdm cwu", "d": "1/2017"}, {"body": "yaycmyk see links number issues providing background deprecated edit see already know issue defer back points made", "d": "1/2017"}, {"body": "yes let get rid want send pr add deprecation warning", "d": "1/2017"}, {"body": "think supposed bind current instance like use autobind library", "d": "1/2017"}, {"body": "familiar typescript supports class properties property initializers like get using arrow function mean implicitly bound instance using repo test logintsx component tried cloning repo running nt see error provide simpler example reproducing issue clear steps reproduce would great", "d": "1/2017"}, {"body": "work simpler repro week get around still ugly workable scopes properly", "d": "1/2017"}, {"body": "flik thanks issue believe example works run static server directory check going close favor think either make clear instructions get rid example together", "d": "1/2017"}, {"body": "workaround could make dom element append appropriate parent stack overflow question also seems answers", "d": "1/2017"}, {"body": "think dangerouslysetinnerhtml strip script tag using dangerouslysetinnerhtml know could dangerous issue people writing bloated components like reactga google analytics minimized add script tag similar libs like reactscripts andstripecheckout cc gaearon", "d": "1/2017"}, {"body": "use basic component load scripts customize load script wish gives callback continue stuff script get loaded", "d": "1/2017"}, {"body": "update solved turned java implementation require returned socalled scriptobjectmirror nashornspecific wrapping js object mirror passed js invoking require caused lot different issues nashorn actually unwrap scriptobjectmirror passed script apparently nt solved simple unwrapping scriptobjectmirror manually returning require little tip others might face issue scriptobjectmirrorunwrap obj wo nt work well weird behaviour regarding script engine globals better use reflection get field sobj scriptobjectmirror return real objet", "d": "1/2017"}, {"body": "thanks issue ghanjra existing issue open going close favor discussion nt get fragmented feel free add input", "d": "1/2017"}, {"body": "exciting list read paragraph caught especially attention regarding use best practice make dom changes inside requestanimationframe callback since scheduled browser type work mind means code need use document fragment appended next requestanimationframe callback using vdom library would use requestidlecallback make changes would apply dom patches next requestanimationframe callback idle callback hoping see idea planned potentially included react findings measurements seeing third bullet bigger items list answered question", "d": "1/2017"}, {"body": "provide repo demonstrates issue unfortunately going near impossible diagnose react issue without minimal test case lets us use perfstart console command entered browser freezes check docs page perf instructions import", "d": "1/2017"}, {"body": "hi aweary made test repo existing template shows module reactaddonsperf exported member perf", "d": "1/2017"}, {"body": "see problem firefox similar issues things worked superbly chrome lagged firefox ie lot virtualization building react datagrid component found really helpful chrome ie inspector specifically ui responsiveness tab look running per frame helps narrow general note though ie ff lag chrome terms updating dom attributes numerous dom components per frame hundreds react internally anyway", "d": "1/2017"}, {"body": "flexicious talk reactperf firefox case answer yes ca nt run perf tool chrome firefox outputs module reactaddonsperf exported member perf general really bad performance firefox ie edge seems ok handling many items app handles data sports betting lots dom updatessec narrowed issue reducer called state updates would amazing able set react perf tools", "d": "1/2017"}, {"body": "hey troch issue actually filed codepen see comment summary resolved hope helps", "d": "1/2017"}, {"body": "oops sorry coworker misunderstanding", "d": "1/2017"}, {"body": "figured worries", "d": "1/2017"}, {"body": "thanks report krisyoung issue resolved release pr fixed codepen running latest release showing issue longer occurs able safely update since patch releases hope helps", "d": "1/2017"}, {"body": "thanks bad checking", "d": "1/2017"}, {"body": "thanks issue yellowmoneybank current example actually correct function may called passed component hope clears", "d": "1/2017"}, {"body": "proof make huge contribution react size read source code single pain point makes react bundle size large", "d": "1/2017"}, {"body": "compression incorrect kb gzipped compression number quoting compression uncompressed size still impact parse compile time though looking removing polyfills normalization unnecessary modern browsers using flags difficult reliably build step maintain many different configurations hope helps", "d": "1/2017"}, {"body": "gaearon sorry description accurate mean uglified instead compression looking forward seed removing polyfills normalization unnecessary modern browsers", "d": "1/2017"}, {"body": "unlikely make configurable mental model error boundaries work trycatch block retry happens inside block throws error bubbles next stack making error boundaries configurable way asking would like making blocks javascript configurable better implement feature userland rather frameworklanguage react case one way implement would remount error boundary whenever catches error remounted component different instance one caught error skipped retry example using higherorder component nt use hoc good fit use case see doc information case unfamiliar js function withremounting wrappedcomponent return class withremounting extends reactcomponent state childkey remount gt thissetstate state gt childkey statechildkey render return class errorboundary extends reactcomponent unstablehandleerror thispropsremount render const errorboundarywithremounting withremounting errorboundary disclaimer nt actually run code hope helps", "d": "1/2017"}, {"body": "also new behavior fiber think retrying work long render error state least right failing example provide retry button error state clicking clear error attempt cleanly retry behavior want note work fiber current version react", "d": "1/2017"}, {"body": "great respond know get faster time maybe better manually understand sure ready safe anybody write mail priv need small advicehelp priv data beat least less huge best right use advices straight upper mail easier read directions good night andrew andrew clark notifications githubcom napisa\u0142 unlikely make configurable mental model error boundaries work trycatch block try renderchildren catch errorinchildren handleerror renderchildren retry happens inside catch block throws error bubbles next catch stack making error boundaries configurable way asking would like making catch blocks javascript configurable better implement feature userland rather frameworklanguage react case one way implement would remount error boundary whenever catches error remounted component different instance one caught error skipped retry example using withremounting higherorder component nt use hoc good fit use case see doc information case unfamiliar function withremounting wrappedcomponent return class withremounting extends reactcomponent state boundarykey remount gt thissetstate state gt boundarykey stateboundarykey render return class errorboundary extends reactcomponent unstablehandleerror thispropsremount render const errorboundarywithremounting withremounting errorboundary disclaimer nt actually run code hope helps receiving subscribed thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "jjuj interiapl reopen min ty j\u0119drzej wrzesi\u0144ski jedrzejwrzesinski gmailcom napisa\u0142 great respond know get faster time maybe better manually understand sure ready safe anybody write mail priv need small advicehelp priv data beat least less huge best right use advices straight upper mail easier read directions good night andrew andrew clark notifications githubcom napisa\u0142 unlikely make configurable mental model error boundaries work trycatch block try renderchildren catch errorinchildren handleerror renderchildren retry happens inside catch block throws error bubbles next catch stack making error boundaries configurable way asking would like making catch blocks javascript configurable better implement feature userland rather frameworklanguage react case one way implement would remount error boundary whenever catches error remounted component different instance one caught error skipped retry example using withremounting higherorder component nt use hoc good fit use case see doc information case unfamiliar function withremounting wrappedcomponent return class withremounting extends reactcomponent state boundarykey remount gt thissetstate state gt boundarykey stateboundarykey render return class errorboundary extends reactcomponent unstablehandleerror thispropsremount render const errorboundarywithremounting withremounting errorboundary disclaimer nt actually run code hope helps receiving subscribed thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "acdlite thank detailed response suggestion gaearon case app displayed projector user interact screen retry button would feasible similar solution try automatically retrying x time", "d": "1/2017"}, {"body": "hi nt run code acdlite could nt retry logic lead infinite loops every remount attempt failing", "d": "1/2017"}, {"body": "yes potential loops default behavior still achievable though schedule another update componentdidupdate recovering error", "d": "1/2017"}, {"body": "thanks issue quanthir hope first two weeks enjoyable actually used something similar proposing linkedstatemixin let use make twoway bindings easier similar function deprecated due low popularity recommend explicit data bindings instead may little verbose makes easier reason component example go find know using property state property name also unlikely expand public component api special casing prop since already doable binding methods hope helps", "d": "1/2017"}, {"body": "provide jsfiddle example look problem please use guidelines opening new issue", "d": "1/2017"}, {"body": "koushikchhetri stated quanthir issue template need example reproducing issue help use starting point", "d": "1/2017"}, {"body": "aweary updated fiddle changes observed two following issues developer console page loaded click buttons first time get blank gender console second click get gender properly console stick button click times click another gender button get previous gender one time usual quanthir", "d": "1/2017"}, {"body": "updated fiddle changes koushikchhetri sorry clearer jsfiddle fork new fiddle containing changes fork url change share us review", "d": "1/2017"}, {"body": "aweary please check quanthir", "d": "1/2017"}, {"body": "koushikchhetri setstate async operation please take careful look documentation updated fiddle illustrate fix", "d": "1/2017"}, {"body": "johannsonntagbauer thanks understood", "d": "1/2017"}, {"body": "johannsonntagbauer exactly right also see section docs setstate updates may asynchronous go ahead close since nt seem issue react", "d": "1/2017"}, {"body": "think react bug rather browser difference problem solve easily adding statement event function first line code fire event check sample code", "d": "1/2017"}, {"body": "thanks report ocetnik issue present latest release resolved master verify jsfiddle using recent build master resolved time contained breaking changes slated next major release currently pr open makes nonbreaking backport release minor release going reviewing soon go well would expect land next minor release", "d": "1/2017"}, {"body": "quanthir react number normalizations events make easier deal part addressing browser inconsistencies making work like elsewhere would within scope react provides far event system goes", "d": "1/2017"}, {"body": "recommended changing behavior third party components might break surprising new developer codebase maybe even couple months please create custom base class instead think important general though discourage using inheritance react components specific example implementation calls make performance worse many cases deep equality checks much expensive reconciliation hope helps", "d": "1/2017"}, {"body": "regarding specific example usage could never avoid maintaining references root level attributes props object reactpurecomponent helping observed deepequal checks cheaper compared reconciliation since huge component structure", "d": "1/2017"}, {"body": "really depends specific example data structures may change future deep equality comparisons may get expensive invisible would hard next developer figure going wrong really suggest explicitly declaring method components even calls least way hard miss", "d": "1/2017"}, {"body": "supported sorry running checks browser globals every time perform dom operation worse performance would rather boot works component nt return null certain state might better crash early browser globals unavailable sure many people rely would breaking change could", "d": "1/2017"}, {"body": "encountering details workarounds", "d": "1/2017"}, {"body": "yes rely children lining return early instead use conditions inside jsx fixed example", "d": "1/2017"}, {"body": "hi appears wanting propagate event component correct pass function prop invoke pass handler within modal invoke function passed property double click invoked", "d": "1/2017"}, {"body": "hi fabiancook think misunderstanding question handler called modal initial click seems counter intuitive fairness time spending seems match current implementation browsers still sure understand uievent spec dblclick", "d": "1/2017"}, {"body": "sorry referring quick succession clicks one event occurring one", "d": "1/2017"}, {"body": "currently meet statement correct sorry", "d": "1/2017"}, {"body": "refering dblick event indeed two clicks normal situation trigger dblclick two clicks events domreact element sure dblclick event emitted", "d": "1/2017"}, {"body": "maxired probably browser quirks react interpolate dblclick os feature", "d": "1/2017"}, {"body": "syranide thanks explanation yep right seems react related", "d": "1/2017"}, {"body": "react nt rely naming conventions anywhere api explicit please try reduce test case react without libraries please publish somewhere reproduce thanks", "d": "1/2017"}, {"body": "context", "d": "1/2017"}, {"body": "make clear modules removed well irrelevant fiber exactly question adding hooks rather question deciding expose via official apis", "d": "1/2017"}, {"body": "ok see already plan regarding devtools use fiber", "d": "1/2017"}, {"body": "quite plan yet although proof concept working work week", "d": "1/2017"}, {"body": "sounds good seems like would good point departure discussions expose looking forward taking look", "d": "1/2017"}, {"body": "please provide project reproducing problem obvious description going wrong development production mode behave identically except errors verbose development mode particular error looks like might bundling two copies react page fact exactly error says might adding ref component created inside component method multiple copies react loaded details checked suggested documentation page verified case", "d": "1/2017"}, {"body": "judging code snippet might problem cases nt cases code nt provide enough details say sure however still fail identically development production way creating separately really react supposed used nt need create components include elements method output hope helps", "d": "1/2017"}, {"body": "thanks reply yes components created render method using custom loader roots refactored search issue source got nothig works like charm problem ref added constructor stupid used loader create roots like minified version first tinymce loaded throw exceptions dev version everything work fine", "d": "1/2017"}, {"body": "first use react highly unidiomatic clear create element constructor put state unnecessary generally create render method instead explained error message seen string refs work element created inside method might adding ref component created inside component render method indeed nt work limitation exactly nt recommend string refs anymore suggest using callback refs instead nt problem described page point string refs deprecated suggest switching callback refs hope helps nt see anything actionable us would recommend refactoring code remove constructor altogether create element render function nt want replace string ref callback ref", "d": "1/2017"}, {"body": "think issue nothing react default behaviour bug check simple example see alerts browsers show alert think handling thisvaluenull like value change calling onchange handler", "d": "1/2017"}, {"body": "thanks flagging context library author well aware library used react fact helped fix issues claiming facebook stealing copyright writing blog post seems bit premature since could reached first bug intentional cc sindresorhus zpao", "d": "1/2017"}, {"body": "hope mean authors multiple contributors displaying copyright also accurate regardless agreement facebook nt create element source dangerous community get kind thing wrong popular project sco vs unix showed risk stealing seems like appropriately loud term commonly used copyright enforcement campaigns raise significance problem sorry nt friendly term important jan pm dan abramov notifications githubcom wrote thanks flagging context library author well aware library used react fact helped fix issues claiming facebook stealing copyright writing blog post seems bit premature since could reached first bug intentional cc sindresorhus zpao receiving authored thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "agree important probably solveable putting code license preserved bundler would like send pr verify fix works", "d": "1/2017"}, {"body": "great idea except complex legal thing lawyer existing author either project nt seem right one thing raise concern another get hands make copy branch pr might wrong misrepresent rights especially repo owner already suggested might care means idea appropriate put license file jan dan abramov notifications githubcom wrote agree important probably solveable putting license code objectassign license preserved bundler would like send pr verify fix works receiving authored thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "suggest copying lisense file source comment adding directive comment nt get stripped nothing could misrepresent pretty manual operation would use existing license could send pr maintainers could verify change right could rebuild react locally verify change worked hard would take less time helpful writing blog post", "d": "1/2017"}, {"body": "clear care also appreciate help hard get everything right sometimes make mistakes easy write post shaming big company making mistake reality react team people many things need fix every day side think offering help could tiny bit productive would happy give details possible fix willing put time write blog post us making mistakes also help us beauty open source case try get cutting next release thank flagging cheers", "d": "1/2017"}, {"body": "decision get involved putting copyright statement someone else work best authors choose want represent copyright getting wrong work financial liability respect may want take however thank suggesting try may wanted take risk objectassign seems two positions copyright would nt know put license statement", "d": "1/2017"}, {"body": "also link source", "d": "1/2017"}, {"body": "also link source polyfill code coming nt require licensing notice code samples added august public domain licensing notice necessary need one use copyright dedicated public domain link provided obvious source", "d": "1/2017"}, {"body": "would good instead link comments appropriately explained block code owned facebook copyright exception module least ensure facebook nt try assert ownership block future mozilla url may work forever context get lost nt included directly", "d": "1/2017"}, {"body": "wrote snippet public domain means original authors dedicated work public domain waiving rights work worldwide copyright law including related neighboring rights extent allowed law facebook nt try assert ownership block future even mean work public domain whole point public domain anyone use modify redistribute purposes requirements give attribution legal concerns please get touch afraid ca nt help thread", "d": "1/2017"}, {"body": "going lock since resolution seems straightforward try next release discussion seem productive like avoid spamming people subscribed repo find problems please file new issue thanks", "d": "1/2017"}, {"body": "fix waiting lawyers reply bit", "d": "1/2017"}, {"body": "likely using different versions react reactdomserver please make sure use exact version also recommend updating", "d": "1/2017"}, {"body": "also nt think importing umd bundle supported node environment unless also react ca nt use reactdomserver singlefile distribution together react commonjs entry point", "d": "1/2017"}, {"body": "hi dan thanks reply using version reply going update version hope incompatibilities two releases unless documentation reply check let know soon possible thanks", "d": "1/2017"}, {"body": "patch release nt problem anything fixes issues pretty certain ca nt mix umd commonjs packages likely source problem", "d": "1/2017"}, {"body": "requiring umd bundle react working fine still throwing problem nt depend necessity using approach react reactdomserver plus updated react reactdom version see line requires nodemodules nt affect furthermore logging bundle see", "d": "1/2017"}, {"body": "hmm think right nt ever supported using umd builds node environment reason using instead", "d": "1/2017"}, {"body": "renders debug info warnings something else nt want behaviour production environments doc says use minified build production trying optimize performances general", "d": "1/2017"}, {"body": "yea make clearer advice use minified builds mostly clientside since nt good way server side yet server side enough run app set eg help", "d": "1/2017"}, {"body": "close since nt support heavy server side optimization tips check pr hope helps", "d": "1/2017"}, {"body": "gaearon worth noting work earlier least nt throw seen recommended times ssr performance articlestalks might uncommon pattern", "d": "1/2017"}, {"body": "see popular talk ssr performance react recommends", "d": "1/2017"}, {"body": "hmm nt aware used work", "d": "1/2017"}, {"body": "seems would happen since sure desired behavior see", "d": "1/2017"}, {"body": "yes main reason ca nt revert good reasons change fix need fix forward", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "read file get detail", "d": "1/2017"}, {"body": "use custom module system called haste knows resolve requires check codebase overview docs page information", "d": "1/2017"}, {"body": "reference", "d": "1/2017"}, {"body": "context already warn detect minified dev version react far find similar heuristics notify users maybe even aggressively pop dom dialog", "d": "1/2017"}, {"body": "also want make clear warnings provide significantly improve performance people pay attention thread explains rationale difficult deploy fact default", "d": "1/2017"}, {"body": "also like chime suggestion single consolewarn called dev mode obviously situations called node ca nt alert pop dom dialog unfortunately really like able detect set also compiled anyone know way", "d": "1/2017"}, {"body": "thanks thread sebmarkbage acknowledge difficulties deploying fact also appreciative current warnings appears developers may check console output deployed sites often could good first step however far find similar heuristics notify users maybe even aggressively pop dom dialog grateful improvements heuristics used notify users aggressive dom dialog would go long way helping would ensure site continued working endusers provides active hint lowhanging perf fruit developers pick alternative find way fix buildtool env level mentioned original post would avoid dominjection necessary", "d": "1/2017"}, {"body": "injecting messaging dom seems dangerous little assuming opens possibility end users getting unexpected confusing alerts seems unacceptable imo thelarkinn proposing tried standardize env configs required better facilitate detection messaging like feels like ideal space address build issue possible addressed build tools", "d": "1/2017"}, {"body": "anecdotal warnings console gone unseen ignored past hard numbers think consolebased warnings enough agree addyosmani dombased warning would go long way", "d": "1/2017"}, {"body": "surma maybe use better visibility nt see would acceptable scenario inject content application running production making huge assumption message would caught application pushed actual users message could potentially hurt ux major way", "d": "1/2017"}, {"body": "btw going add comprehensive error handling support fiber replace components failures thrown errors custom error views even default scenario likely going aggressive remove component tree errors really going want custom error ui users anyway might able trigger error warning", "d": "1/2017"}, {"body": "honestly think would changed anything said story anecdotal also saying showing dom dialog solution something personally comfortable though staying dev mode negative impact least users would know something wrong probably starts hitting help button something bottom line think frameworks need get developer face point love brainstorm see steps compromises framework authors willing take prevent people deploying dev mode future", "d": "1/2017"}, {"body": "react nt work unless provide environment regardless whether development prod way conscious choice made one way", "d": "1/2017"}, {"body": "message injected dom could disabled using global something big deal imo disable kind acknowledge know problem console message sometimes people log lot things warnings ignore easy see first console message past scroll", "d": "1/2017"}, {"body": "mandatory env inevitably boilerplates etc set env var start using afraid", "d": "1/2017"}, {"body": "honestly think console error warn consolelog would changed anything think problem developers checking console console overloaded warnings could partially addressed general approach regarding developer education also saying showing dom dialog solution something personally comfortable though staying dev mode negative impact least users would know something wrong probably starts hitting help button something understand saying nt think solution let alone solution good comfortable think better err side caution assume people nt want unexpected errors displayed users bottom line think frameworks need get developer face point love brainstorm see steps compromises framework authors willing take prevent people deploying dev mode future getting developer face important right place build step production message injected dom could disabled using global something big deal imo disable kind acknowledge know enabled default bad making configurable default behavior could result unexpected behavior end user anything disabled default defeats entire purpose since developers could fix initial problem aware problem console message sometimes people log lot things warnings ignore easy see first console message past scroll totally get console get crowded easy miss stuff crowded exact reasons arguing place provide developers feedback errors way user experience injected messages nt", "d": "1/2017"}, {"body": "makes sense understand reasonning well maybe make thing pop using console formatting would something least", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "problem almost nobody looks console production use font people wo nt notice however make show message default production breaking change would hard miss mean would happen first time would try deploy new users existing users reading release notes updating new major think doable long super explicit impossible miss message", "d": "1/2017"}, {"body": "problem almost nobody looks console production use font people wo nt notice comment chrome team experience concur folks notice console messages iteration workflow far smaller look warnings production sites fewer act however make show message default production breaking change would hard miss mean would happen first time would try deploy new users existing users reading release notes updating new major think doable long super explicit impossible miss message thanks open change like gaearon would take get agreement trying message default future release", "d": "1/2017"}, {"body": "agree console warnings nt solution amp pagevisible warning much better pagevisible warning could alert dev site dev mode link docs benefits ship without link disable message dunno hours disabling message important may interferingcovering something page since setting would stored localstorage warning still appear live server different origin yeah pretty horrible real users see message live sites feels like kind problem devs encouraged fix whereas seem happy live performance issues dev mode", "d": "1/2017"}, {"body": "first time saw warning insert dom one production would fairly upset warnings need happen ahead time", "d": "1/2017"}, {"body": "rtorr suggestion happens whenever site dev mode seen ahead time unless missing something", "d": "1/2017"}, {"body": "jakearchibald sorry confusion reply directed want point thread use insert dom solution careful make sure users know push thing good idea see dev forgetting setting something management freaks possibility worth consequences dev mode production", "d": "1/2017"}, {"body": "dom based warning constantly disable okay must possible disable forever maybe never show localhost thing hit would possible kind flag browser enable activate devtools maybe big overlay developer yesno page detect show warning developers worded correctly might help selfxxs attacks well", "d": "1/2017"}, {"body": "dom based warning constantly disable okay must possible disable forever sites launching devmode also okay maybe message needs dismissed per day longer period likely end live disabled forever right back started", "d": "1/2017"}, {"body": "also nt think unintended dom node production ok think either way always edge case problem happens time maybe delivery dev mode wrong although ideal perfect world find prod mode important willing modify someone application maybe default dev mode opt", "d": "1/2017"}, {"body": "rtorr also nt think unintended dom node production ok saying wrong would like hear reasons", "d": "1/2017"}, {"body": "maybe adding setting define prod domain prod domain set always get warning dev mode request set domain url set get warning url matches prod domain could even bind service want notify devs", "d": "1/2017"}, {"body": "glad constructive discussion two solutions see solving problem webpack could force specifying nodeenv react could use easily avoid folks shipping dev prod would breaking change webpack talking sean feasible something like could webpack keeping react webpack stack beginner perf friendly something know camps care second dom injection idea something react could jake mentioned balance ux allowing message shown day dismissed one line change fix issue redeploy completely empathise wanting management freak get react sites shipping far faster experience fb worked prod something might give anyone better ideas please suggest", "d": "1/2017"}, {"body": "jakearchibald saying wrong would like hear reasons back comment unless able let developers know ahead time seems actual problem solve find kind extreme devalue someones product displaying warning developers production page lot cases could potentially hurt product performance dev mode matter someone going ship whatever default production make production default improve dev mode point big impact", "d": "1/2017"}, {"body": "rtorr", "d": "1/2017"}, {"body": "jakearchibald yeah see sides problems faith people thread come something good even proposing yall great fyi maybe extreme answer", "d": "1/2017"}, {"body": "could insert dom node warning user running react dev tools normal users nt experience", "d": "1/2017"}, {"body": "jakearchibald sites launching devmode also okay maybe message needs dismissed per day longer period likely end live disabled forever right back started site launched someone took decision ready bad catastrophe however possibly nt know exact numbers hundreds thousands devs dismiss sitedestroying dom warning must treated idea interacts rest site site usable warning visible warning five even one time per day catastrophe devs correctly set buildchain custom createreactapp use warning need able get rid dangamble beleave devs using react dev tools urgent target warning though", "d": "1/2017"}, {"body": "pajn potentially nt think download chrome extension automatically makes conscious prod dev switch", "d": "1/2017"}, {"body": "dangamble course people develops whole app without think indicates nt use dev tools much therefore less likely see current warning minified code", "d": "1/2017"}, {"body": "nt usually add long discussion feel like point already brought agree want emphasize point react touching dom warning using dev version would big mistake far know precedent framework imagine tutorials playgrounds little side projects use dev mode teach react every single little test site throw together explore something fun react try isolate test case react warning every single one sites manually disable would incredibly mad would feel like overbearing parent actively discourages use react whenever try something new slaps wrist even every hours thank constant nagging like certainly going discourage users developing react honestly think would push people away adopt frameworks maybe chrome devs want mention fact yes slip production somehow already hard enough convince certain teams adopt react ammo thing love react nt anything call puts stuff dom told good isolated functional library also need detect people shipping unminified bundle nt caching nt configured nginx optimally nt use unnecessarily rendering everything nt need several reasons bad performance blame solely react dev mode wrong deploy site totally expected understand deploy optimized site saying nt things core reason issue benchmark authors due diligence nt pay need find another way call", "d": "1/2017"}, {"body": "meant followup think right solution put kinds restrictions tools making sure webpack whatever tool use build site production force checks kind restrictions want place build process", "d": "1/2017"}, {"body": "regard webpack forcing nodeenv setting maybe issue repo already would nt make harder use libraries nt rely env settings idea would detect nodeenv use force code uses", "d": "1/2017"}, {"body": "let get hung hours thing could period time long works additionally local storage events means would need dismissed per origin multiple demos one page dismissing one would dismiss others warning slip live loud enough warrant quick fix one benefits users worried react looks public really want avoid unnecessary slowdown like sure would nt detect bad caching headers etc detecting dev mode also slippery slope arguments nt helpful nt think moving problem build tools useful problem devs use different build tool fail put production mode dev mode frameworks already produce console warnings clearly nt working nt benchmarks real websites running slow real users switch nt switched", "d": "1/2017"}, {"body": "jakearchibald thanks rational response emotionallycharged one think valid point many reasons site might slow react like see way suggest performance improvements better crude check dev mode inbrowser warning tooling analyze react app provide serious suggestions performance everything like dev mode many rerenderings would lot useful generic tool like hooked pipeline webpack browserify etc main thing wanted say though days use react dev mode across different places like jsbin tutorials even throwing together small test site opening file protocol forced inbrowser warning hostile sort flexible development web excels seeing warnings everywhere learning react across domains web", "d": "1/2017"}, {"body": "warning slip live loud enough warrant quick fix one benefits users worried react looks public really want avoid unnecessary slowdown like even allowing possibility developerspecific warning displayed end users seems unacceptable slow site one thing message like could undermine user trust especially securityfocused sites would happy banking site displaying cryptic errors sudden would google ok users suddenly getting warning even moment additionally local storage events means would need dismissed per origin multiple demos one page dismissing one would dismiss others ca nt rely dedupe guarantee local persistent data cleared interval edit also displaying error every made far difficult reproduce debug deterministically reproducible", "d": "1/2017"}, {"body": "cases need solved prevent falsy benchmarks performance tests easily solved big big console message prevent shipping dev production sites people nt open devtools prod arguments touching dom convincing big flashy obvious console warning chances shipping production people use dev version see really obvious console message maybe code already shipped production another project use next react version impossible miss console message maybe remember site shipped production check dev enabled console message would educationnal like anyone react development knows something really important dev see everytime use react development", "d": "1/2017"}, {"body": "hesitant people generally nt like warnings ca nt get rid see considering alternatives might acceptable solution", "d": "1/2017"}, {"body": "curious would localstorage usage invoke eu cookie law site nt otherwise covered informative warnings development good idea nt libraries well one reason problems like others wanted also pop similar uis close seems would ideal something central handle perhaps chrome could development mode libraries could tell host development mode chrome could add badge pop indicate", "d": "1/2017"}, {"body": "makes think react devtools extension could leveraged display notification something obvious opening page using react dev mode maybe", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "sebmarkbage informative warnings development good idea nt libraries guess someone needs first angular similar problem stuff like launching dev mode react starts catching stuff frameworks nt pushing make similar changes", "d": "1/2017"}, {"body": "pushing make similar changes jakearchibald suggesting framework provide warning nt think setting standard frameworkslibraries providing development warnings production great idea nt trying standardize platform mentioned sebmarkbage perhaps chrome could development mode libraries could tell host development mode chrome could add badge pop indicate", "d": "1/2017"}, {"body": "think great idea precedent safari separate mode must enable access devtools chrome could also safely add indicator dev mode api trigger indicator would visible developers would nt disrupt user experience", "d": "1/2017"}, {"body": "nt waiting browser vendors implement thing going take time", "d": "1/2017"}, {"body": "jide yes important address problem correctly quickly also implemented single browser considering standardization efforts necessary", "d": "1/2017"}, {"body": "aweary suggesting framework provide warning given framework provides dev mode mode may different frameworks seems entirely fair framework implement warning similarly unique way browsers gone lengths avoid exposing devtools page making devtools barrier entry going miss lot users dom warning would nt miss dom warning seems simpler fewer platform dependencies reach devs simpler amp effective sounds like win", "d": "1/2017"}, {"body": "gaearon chrome devtools side brainstorming live violations api web platform amp framework authors could use signal important warnings would presented somewhere like upcoming audits panel refresh sounds similar ask could used trigger warning dev mode detection particular issue may something little louder originally planning violations panel similar console log messages requires know panel going provide insight perhaps additional ux room something displays visible page overlay lower page frameworks could standardize messaging looping paulirish thoughts holiday weekend fwiw guess api wo nt ready another months available canary initially weeks later might make way stable dom warning seems simpler effective agreement jake one let keep chatting devtools solution also like figure react might open fallback case api nt end fitting needs timeline wise", "d": "1/2017"}, {"body": "given framework provides dev mode mode may different frameworks seems entirely fair framework implement warning similarly unique way jakearchibald realize setting standard means pages utilizing multiple frameworks libraries followed suite could result arbitrary amount nondeterministically rendered cryptic warnings displayed end users browsers gone lengths avoid exposing devtools page sure reason least partially developerspecific messaging exposed end users dom warning seems simpler effective nobody arguing simplicity effectiveness solution would work expense compromising user experience speed nt thing negatively affect users", "d": "1/2017"}, {"body": "fwiw guess api wo nt ready another months available canary initially weeks later might make way stable addyosmani better solution nt see would issue changes react would major release think tbd far release timing goes anyways solution decided upon potentially affect future development matter weeks vs months context acceptable imo", "d": "1/2017"}, {"body": "understand developers feel invaded framework injects something dom put feel like banner bottom page says site devmode would great solution big impact user experience like understand lot people think opposite aweary securityfocused site ever launches devmode trusted fix issue devmode could include kinds securityrelated shortcuts like disabled cors checks exposed template source code etc site securityfocused must happen realize devmode specific meaning react trying assume nondeveloper perspective", "d": "1/2017"}, {"body": "aweary realize setting standard means pages utilizing multiple frameworks could result arbitrary amount nondeterministically rendered cryptic warnings displayed end users absolutely realise page multiple frameworks dev mode severely damaging user experience good reason seems rather goes unnoticed unfixed rather bad nondevelopers visible messages targeted developers developer fixes promptly creating much better user experience speed nt thing negatively affect users nt see anyone claiming otherwise pretty sad kind reaction", "d": "1/2017"}, {"body": "seems rather goes unnoticed unfixed jakearchibald kind strange conclusion nt think spending free time talking nt want fixed nt agree solution nt mean resigned leaving unresolved really unfair rather bad nondevelopers visible messages targeted developers developer fixes promptly creating much better user experience think fundamentally unacceptable explicitly punishing users first securityfocused site ever launches devmode trusted fix issue surma dev mode inherently insecure regardless stepping line assume ok communicate users", "d": "1/2017"}, {"body": "nt think solution requires opening enabling dev tools sufficient get noticed needs visible qa management possibly end users developers used seeing similar problematic ssl configurations highlighted nt need much enough noticable someone ask get fixed injecting dom problematic many reasons bit feasible react since dom library dom entry points harder libraries dom specific might run worker one thing might able change favicon long provide way override explicitly many sites already separate favicons development mode need figure default experience handling errors react may able keep dom place current default implementation master deletes react content tree error thrown also invasive way detect development mode could trigger error mode really need solid way opt development mode permanently", "d": "1/2017"}, {"body": "similar problematic ssl configurations highlighted exactly kind thing think would perfect users already used browsers providing security information sites visit performance information nt huge jump plus would consistent frameworkslibraries report potential performance issues would directly interfere user workflow", "d": "1/2017"}, {"body": "like favicon idea noticeable works without devtools extension noticeable everyone harm users animated draw attention annoying enough make devs want disappear", "d": "1/2017"}, {"body": "making dev mode optin err good ux side bad dx easier notice imho issues like users win ca nt choose devs sure frameworks already like relay recall correctly proposals implement enable development mode explicitly set enable development mode global export debug tools module enabled userland first seems best two may hardcoded without guard statement thus shipped production anyway", "d": "1/2017"}, {"body": "mattecapu see second comment regarding similar way enforce developers start running dev mode nt matter default really bad fall behind", "d": "1/2017"}, {"body": "lot comment thoughts like weigh specifically question disable dev warning huge fan button disables dom warning set amount time one particular browser jlongster points pain devs happens frequently importantly introduces browserspecific variability behavior could easily lead works fine machine irreproducibility bugs prefer parameter sent render lists domains considered dev boxes default value would look something like current domain list dev warning never shows otherwise regime using dev build local machine using developer warning ever developer action needed using dev build dev machine using another host name get dom warning add domain name list passed thereafter never get dom warning using dev build prod machine get dom warning switch react prod version one thing worries solution might lead developers leave list dev server domains code code may make production companies consider dev server domains secret problem thoughts", "d": "1/2017"}, {"body": "aickin problem approach requires users aware configuration turn problem solving issue people nt aware devprod distinction first place edit nevermind see still dom warning development", "d": "1/2017"}, {"body": "server side environments fix showing special error page includes debug details also tells serve production since plan make react fail fast unmount views unless provide custom error boundary might well add default red box error boundary development acts educational page first time user bug production see special verbose error message could opportunity educate dev build", "d": "1/2017"}, {"body": "feel like banner bottom page says site devmode would great solution big impact user experience like understand lot people think opposite users dislikes web apps know web app previously common mentality web shows screen done matter bad behaved users learned web bad however perfectly possible create great ux web must dom someone injects random banners arbitrary places wrong element may start scroll may cause whole screen repaint scroll may interfere example drag gestures something else point long banner develop ca nt know experience banner gone framework solution really like favicon idea hinder development look strange users possibly destroy ux get noticed however really works single library framework time work libraries run workers real solution good way browser support multiple frameworks libraries accessed contexts another solution supports multiple frameworks libs clear require permission request show browser notification", "d": "1/2017"}, {"body": "idea update getting started docs react homepage push create react app heavily stress importance npm build docs nt need dom warning need awareness", "d": "1/2017"}, {"body": "think ropilz touched earlier thread could even bind service want notify devs comment may gone unnoticed acknowledged understand fundamental problem solved somehow alert developers production endusers experience site running dev mode ca nt rely devs seeing messages even dom warnings matter production unless devs actively using production site relying endusers qasupport teams etc report warnings back developer valid ux arguments showing end users dom visible warning intended developer audiences something analogous csp frameworks send dev mode warnings rather showing warning insitu site would visible endusers obviously number things considered reporting would ideally default would default would expect framework host free service similar may possible large companysponsored frameworks like react amp angular certainly impractical smaller opensource frameworks like preact vue etc warning reported site ownerdeveloper notified perhaps good way nondevs get involved project volunteering monitor reports help track downnotify maintainer fully admit suggestion thoughtbubble nt considered practical would would actually work wanted raise seems challenge reporting production issues already partially solved csphpkp reporting perhaps could explore something similar", "d": "1/2017"}, {"body": "important take step back realize react framework must modify dom present something visually reminder developers way works well box unless understand develop something work environments without hindering developers losing user trust happen pop production experience indication happen quite frequently many wo nt able deploy quick fix turn modify favicon favicon annoyingly cached used bookmarks saved web app icons mobile devices others specified etc runs risk accidentally purpose production deployment dev mode erasing brand logo browser notifications looked likely looked user popping notification going request browser permissions pop strange things users understand assumption would mostly seen developers experience exactly inverse possibly trust ruining users react job babysit developers propose either make development mode opt developers realize ca nt debug something look turn needs documented everywhere react job tell turn back problem leave simple consolelog message must disableable let developers find handle nt oh well ca nt reach every organization make things correctly scalable", "d": "1/2017"}, {"body": "disagree touching dom display warning looks easy simple react dom library imagine libraries display warning dom total mess many libraries developers use probably dev mode think setting already common standard bundling modules browser need improve awareness agree react docs nt prominently show difference dev production build open docs go advanced guides read difference dev production build title optimizing performance something beginners definitely wo nt take look use react heard fast think docs could improved another docs titled using react production similar quick start section beginners nt usually read advanced guides open links quick start title clear enough looks important know start learning react nt read getting started guide read pages quick start section another approach could take showing warning console react used dev mode link fix point docs opening console production developers unusual local env developing certainly open console way developing locally aware need something publishing production", "d": "1/2017"}, {"body": "launched despite console warnings exactly kind thing aim prevent site angular applies react", "d": "1/2017"}, {"body": "issue codegov anyone wants reach send pr", "d": "1/2017"}, {"body": "never used angular makes beginner case initial reaction see warning try calling nt work think console message angular case could improved instead relying magic point docs opening angular docs nt see anything production build think problem angular react use dev mode nt tell people front docs disable improving docs could go long way educating developers showing user warning developers make mistakes injecting random dom element intrusive love browsers handle https problem browser dedicated ui show site insecure nt one performance related status given rising concerns web performance general nt see browser vendor nt come ways tell user site visiting sucks", "d": "1/2017"}, {"body": "addressed tooling level possibly webpack babel notify developers benefits setting nodeenv", "d": "1/2017"}, {"body": "pveyes agreed made point angular team matthewp much older issue angular team reached directly given fix seems little desire apply question would dom warning made fix urgent prevented launching dev mode begin", "d": "1/2017"}, {"body": "question would dom warning made fix urgent prevented launching dev mode begin likely would see warning development google disable disable deployed dev mode without realizing future forget development want look like production ca nt random chunk dom inserted ca nt qa staging system seeing either would nt indicative production end bunch junk code disabling thing screws site ux like original engineer disabled development would necessarily remember either may even moved went production sure deployment process works codegov anything like experienced government contractor accidental development mode deployment production would either force full rollback entire deployment take months get approval bundle everything ui changes server software updates likely next day get meetings followup paperwork regarding happened scheduling new deployment window get asked db scripts services whatever dev mode single warning ui seen happen minor things sometimes get exceptions ymmv would get noticed users would get corrected since likely impacting function would get updated next deployment window users get see weeks months least experience point even dom intrusion noticed immediately deployment nt know infrastructure process like may something fix immediately even though able", "d": "1/2017"}, {"body": "warning messages noticeable yellow box gets merged could also add message yellow box call react development mode warnings", "d": "1/2017"}, {"body": "opening angular docs nt see anything production build think problem angular react use dev mode nt tell people front docs disable improving docs could go long way educating developers right installation page optimizing performance nt think fair say docs upfront", "d": "1/2017"}, {"body": "open docs go advanced guides read difference dev production build title optimizing performance something beginners definitely wo nt take look use react heard fast think docs could improved another docs titled using react production similar quick start section right first page installation", "d": "1/2017"}, {"body": "right sorry bad assumed production build different section nt look search relevant title sidebar instead found optimizing performance page known better", "d": "1/2017"}, {"body": "really beginner react open docs verify assumption react docs upfront prod vs dev nt open installation docs", "d": "1/2017"}, {"body": "worries visible enough open suggestions better placement example could make dedicated page", "d": "1/2017"}, {"body": "let forget issue important issue solve important issue highlight also convinced sufficient even highlighted front page people see browse forget think know would nt pivot docs thing real way address detecting notifying krissiegel favicon getting cached good point wonder switch second two flip back briefly every seconds way caching bookmarking issue unlikely time time overridden icon", "d": "1/2017"}, {"body": "thought js manipulations favicon nt get cached maybe wrong", "d": "1/2017"}, {"body": "argue right place hooks chrome firefox rather webpack browserify rollup building intended production bundle react without enable production mode build error think reason nt agreement present run time reflective problem handled run time", "d": "1/2017"}, {"body": "taion agree think definitely belongs build tool dom think build tools place make assumption node env set production production code may required projects think good assumption ran terminal env set production get red warning terminal along default output currently get warning webpack edit added clarification", "d": "1/2017"}, {"body": "set nodeenv really", "d": "1/2017"}, {"body": "console warnings nt working sure build warnings", "d": "1/2017"}, {"body": "build either configure things else fail misconfigured production least react build time flag", "d": "1/2017"}, {"body": "jakearchibald sure still ignored least warning would shown build instead seen warning hidden away browser console may never open production importantly gives less experience clue make code production ready", "d": "1/2017"}, {"body": "many devs update libraries common update webpack generally tooling lot people make assumption works may pain update webpack co", "d": "1/2017"}, {"body": "building intended production bundle react without enable production mode build error using prepackaged version react cdn also supported configuration build step workflow therefore solution issue focuses build would ignore cdn use case honestly sure feel see arguments dev warnings react cdn usage taion someone supports buildonly solution think important use case cover folks think", "d": "1/2017"}, {"body": "think documentation pretty clear use bundles production maybe could use bold bigger font size something like someone using unminified react bundle production website problems anyway", "d": "1/2017"}, {"body": "think documentation pretty clear use minjs bundles production agreed page also pretty clear configure build tool production include react npm package think whole point issue try create pit success folks nt carefully read page documentation sounds like may disagree though think using dev build cdn important case prevent aggressive dev warning fair summary position missing nuances", "d": "1/2017"}, {"body": "think cdndev configuration obviously wrong requires user use unminified build react harder fail manner burden knowledge required use minified build lower configuration think things productionready run minification webpack browserify actually nt nt set ca nt get via cdn bundles", "d": "1/2017"}, {"body": "think tab enough tells", "d": "1/2017"}, {"body": "think worth noting precedent framework injecting dom element page dev mode although far tell nt think default following discussion seems general aim achieve perfect solution satisfies constraints reliably stops everyone running dev mode nt op stated would need tradeoff potential experiences developers users think much case attempt restate problem tad nonzero number react sites make production without development mode disabled would like reduce number nt want annoy react developers nt want put newcomers react nt want endusers sites built react see cyptic developer warnings nt want break sites due presence foreign dom elements given think decent first step would react dev mode announce dev mode via instructions make sure disabled production deployment sure wo nt catch everyone decent start reduce number people inadvertently shipping production nt close doors future improvements", "d": "1/2017"}, {"body": "given think decent first step would react dev mode announce dev mode via consolewarn consoleinfo instructions make sure disabled production deployment wrong development mode though developing heuristics could use also given nobody reads console production wonder could throw inside timeout gets logged use crash reporting solutions", "d": "1/2017"}, {"body": "wrong development mode though developing heuristics could use think similar current react devtools notice informational message reminds dev mode dev mode disabled production sites theory make developers aware distinction action needs taken prepare production use like say almost noone going see console warning actual production point little bit late", "d": "1/2017"}, {"body": "sorry sound like stuck record console warnings nt appear work eg", "d": "1/2017"}, {"body": "sorry sound like stuck record console warnings nt appear work eg single counterinstance shows infallible nt think approach console warning able increase awareness reduce number people mistakenly run dev mode nt seems like step right direction perfect enemy good", "d": "1/2017"}, {"body": "jakearchibald yes codegov build tool set hooks would prevented problem observing least context react uses buildtime hooks using webpack saying webpack emit build warning saying right fix either webpack sets webpack fails build default try make production build without appropriate production config", "d": "1/2017"}, {"body": "wanted quickly respond earlier point addyosmani devtools violations prototyping showing stronger indications certain errors chrome devtools work still quite early tend agree jakearchibald showing warning even scarier nt good enough solution defaulting react production mode turning development mode hostname developers get correct behavior outofthebox always way manually force development mode really need", "d": "1/2017"}, {"body": "seems less ideal still hitting branch might fairly complicated conditional since need fail node time btw production mode also enables minification default settings webpack sets users seems quite sensible prevent problem almost everyone using webpack insistence handling run time", "d": "1/2017"}, {"body": "btw p production mode also enables minification default settings webpack sets nodeenv users yep aware thelarkinn webpack core could confirm sure understanding widely used webpack community atm underlying issue also solution optin similar current status quo consolelog warnings unlikely see real change react users want give folks better change shipping fast thing worth mentioning passing lack able easily detect dev prod environments webpack p insufficient also caused us pain saying right fix either webpack sets processnodeenv webpack fails build default try make production build without appropriate production config us pursuing would breaking change webpack tell personally feel like runtime solution involves clear overlay message displayed using intelligent heuristics localhost devtools open etc would cover us adequately said keep circling back webpack processnodeenv item curious sokra thelarkinn opinions one", "d": "1/2017"}, {"body": "understanding differs believe de facto way nonexpert users webpack set production builds even prominent packages use generate production builds quite uncommon directly configure uglify plugin webpack without people would using unminified builds case bigger problems", "d": "1/2017"}, {"body": "personally feel like runtime solution involves clear overlay message displayed using intelligent heuristics localhost devtools open etc would cover us adequately feel like shot multiple times unacceptable framework inject things dom without actually appreciating scenario would happen totally cope permanent message unexpected things dom constantly development unacceptable suggesting though message gets displayed devmode gets deployed production enter heuristics arbitrary number checks console messages built tooling ci browser extensions prevent happening desperate last resort failsafe think visible banner screen good appropriate solution", "d": "1/2017"}, {"body": "displayed devmode gets deployed production enter heuristics developer never see message deploy perhaps accidentally dev mode production suddenly seeing new html displayed application users see sounds like punishment nt understand dev mode already deploy using theoretical new version react message going get surprise users web application time also get see fail see helps anyone serve embarrass developer company sure maybe get fix cost high opinion lacking bit empathy desperate last resort failsafe think visible banner screen good appropriate solution problem solution far idealistic developing framework must focus reality companies may greatest deployment policies even best qa yes someone deploys dev mode production able see change quickly unfortunately especially outside technology industry simply possible easy majority people commenting likely companies deployment processes could cope fine scenario google facebook playstation etc technology companies handle fine nt representative majority users use react right actually statistics regarding usage react would handy yes yes companies government change deployment processes policies etc etc reality companies crap deployment processes crap nonexistent qa let take two scenarios personally experienced first working government depending branch department likely single deployment every months deployments roll much stuff possible piece entire deployment fails everything may get rolled back using software called owf unfamiliar like isocial displays multiple web applications single web application using iframes gross know stay manual configuration step deployment several applications failed caused errors display iframes instead intended application since developers typically access system deployed took many hours found issues point get boss call someone else boss call boss tell nt affect anything else would nt roll back entire deployment tons paperwork documentation fill could get anyone redo configuration several days later meanwhile application sat unable function entire period time second worked finance deployment go inadvertently included developer name place actual item layout website believe testing something anyway noticed right away order fix get emergency change control took much later day customers see stupid banner almost full hours fixed point needs great care taken injecting arbitrary elements dom developer put especially talking displaying scenarios first time someone sees going figure quickly disable nt need bothered", "d": "1/2017"}, {"body": "krissiegel nt understand dev mode already deploy using theoretical new version react message going get surprise users web application time also get see curious thoughts approach different message displayed devtools open ie something would low chance seen production users developers effectively expansion current consolelog strategy react already employs today", "d": "1/2017"}, {"body": "curious thoughts approach different message displayed devtools open ie something would low chance seen production users developers effectively expansion current consolelog strategy react already employs today dev tools open probably seeing consolelog messages dom changes seem like unnecessary complexity manage plus redundant could always make react console messages larger fancier maybe ascii react logo something catch someone attention happen go ultimately though think someone would run ask stackoverflow disable warning someone post code showing people simply disable run build tools numerous many folks talked past found confusing difficult babel release fun time going run lot people simply never use correctly least experience \u30c4", "d": "1/2017"}, {"body": "whew finally caught bottom thread okay brainstorming little bit webpack could force specifying nodeenv react could use easily avoid folks shipping dev prod would breaking change webpack talking sean feasible something like could webpack keeping react webpack stack beginner perf friendly something know camps care felt like favorite far sold yet could enforce env passed whenever anyone runs webpack helpful error message states must provide env variable run webpack however provides significant bounce point users everyone writing prod dev env even know env raise issue webpackwebpack get feedback gut feeling everyone want whether agree consider pushback solution would create standalone plugin could hook compiler lifecycle check code stripped env provided emit friendly warning error choice however imagine response users never know etc thus cra thus issue right could create new resolver pattern check react fw needs packagejson something like would automatically apply users compiler configuration without needing know care really brainstorming", "d": "1/2017"}, {"body": "thelarkinn think current behavior webpack sufficient failure case someone sets forgets seems like far less likely case", "d": "1/2017"}, {"body": "taion yesno applies production treatments code however make assumptions andnor knowledge set brings upon need people use think closest reasonable area guess imply user running code production env would one area would want make sure community team okay", "d": "1/2017"}, {"body": "thelarkinn believe changed", "d": "1/2017"}, {"body": "ah sorry right mistaken however used frequently people want fine grained control optimize like addyosmani mentioned", "d": "1/2017"}, {"body": "really common getting started webpack clearly seemed like way go like referenced even libraries plenty reason apply tweaks still use", "d": "1/2017"}, {"body": "could create new resolver pattern check react fw needs packagejson something like webpack plugin reactenviornmentplugin would automatically apply users compiler configuration without needing know care thelarkinn reading correctly trigger resolver pattern app packagejson would need manually specify right misunderstanding proposal could imagine resolution magic webpack detects project using react right environment switching sounds like tight coupling frameworkspecific optimisation bundler might desirable", "d": "1/2017"}, {"body": "less would detect react would detect js modules description fields include webpack field plugin right tightly coupled really favorite idea either", "d": "1/2017"}, {"body": "nt think really gives guarantees unless webpack concept production mode figure configure react seems redundant given discussed already right thing users generally reach making minified production build webpack anyway", "d": "1/2017"}, {"body": "talked bit think reasonable solution long considered enabling warning box react warnings development see demo pr shows warnings common development always fixed presumably anyone spent five minutes developing app see dialog aware exists change harder unaware development mode likely search remove warning dialog learn building production likely get warnings deployed point users see think case people blame react per se show box development mode supposed way using similar warning box development facebook long time corresponds intend react used", "d": "1/2017"}, {"body": "really happy see proposal gaearon everything dreamed side maybe worth considering link directly box require developers google get rid", "d": "1/2017"}, {"body": "yea good point add something", "d": "1/2017"}, {"body": "gaearon find solution highly obnoxious would never want warnings invade dom even development serves zero purpose common developer would likely disabled entirely developer tools display warnings reason nt need invented also find troubling dom solutions keep cropping zero rebuttals prior arguments points ignored fine nt repository fair enough disheartening see argument come people post people seem points never argument come right back rinse repeat", "d": "1/2017"}, {"body": "agree true warnings react warnings specifically point bugs code suggestions dialog easy dismiss individual warnings easy snooze case nt care need fixed comparison dialog looks facebook codebase thousands engineers problem productive thanks think reasonable default clear open source version less shouting suggestions style tweaks please feel free comment", "d": "1/2017"}, {"body": "adding onto dan said building top hook recentlyadded error logger flow currently trying couple styles toast notifications little less intrusive post screenshots andor plnkr soon feedback", "d": "1/2017"}, {"body": "would warnings include minified dev code warning solve lot things quite neatly", "d": "1/2017"}, {"body": "nt see could nt also used purpose", "d": "1/2017"}, {"body": "gaearon agree true warnings react warnings specifically point bugs code suggestions errors exceptions imo exceptions force things corrected dismissible warning thousands engineers problem productive thanks think reasonable default mentioned prior point would guess engineers likely better good people use open source version find opposite reasonable default reason development tools warnings reinventing nt make sense get disabled never seen looks like react trying much imo anyway repeating arguments already said twice going go ahead feel free opinion good business get leave short anecdote time wanted punch toast government contracting common library front ends use would take errors console display toast pop get deployed production multiple times multiple teams many developers saw asked permanently disabled see", "d": "1/2017"}, {"body": "long considered enabling warning box react warnings development see demo pr shows warnings common development always fixed presumably anyone spent five minutes developing app see dialog aware exists really like gaearon heartening hear support highlighting need switch prod deployments new warning box nice visual adding onto dan said building top hook recentlyadded error logger flow currently trying couple styles toast notifications little less intrusive post screenshots andor plnkr soon feedback bvaughn looking forward seeing iterations folks feel warning box approach may intrusive libraries eg vuejs already display dom overlays deviteration workflow encourage bugfixing slowpaths experience minor inconvenience messages obvious might see console feel dan right least place emphasis dev mode something deploy prod hopefully lead sites shipping faster mode end users change harder unaware development mode likely search remove warning dialog learn building production likely get warnings deployed point users see think case people blame react per se show box development mode supposed", "d": "1/2017"}, {"body": "errors exceptions imo exceptions force things corrected dismissible warning fixed might urgent matters hand example often prototypemock uis write quick usually subpar code react warn want fix warnings nt really care know wont throw away code next hour least forcing people fix instantly drastically slow experimental development", "d": "1/2017"}, {"body": "folks feel warning box approach may intrusive libraries eg vuejs already display dom overlays deviteration workflow encourage bugfixing slowpaths screen shot sure vue looks lot like webpack build errors displayed error overlay webpackhotmiddleware case subtly different devtime build tooling adding overlay rather generalpurpose frontend framework general favour warning overlay think contain explanatory text says amp disabled part turning dev mode behind expando bit long seems like good place get message across", "d": "1/2017"}, {"body": "dread updates like overlay minor bump suddenly literally warnings props passed dom nodes errors maybe nt think depreciation warnings belong intrusive space", "d": "1/2017"}, {"body": "errors maybe nt think depreciation warnings belong intrusive space nt know clearly communicated prior idea regarding yellowbox warnings show warnings deprecation rather certain warnings team deemed particularly important would highlighted way rest would presumably remain console least takeaway conversation tom feature week two ago", "d": "1/2017"}, {"body": "prop warning also mistake imo indicative normal mo like way control warning levels minor versions avoid", "d": "1/2017"}, {"body": "millykirkland thanks question try use issue tracker solely bugs feature requests might better served asking question discussionoriented platform discussreactjsorg", "d": "1/2017"}, {"body": "noted known limitation fiber really sure could help way see fix specific case use components use functions rows eg could flatten rendering result could stop using closing duplicate", "d": "1/2017"}, {"body": "gaearon could elaborate flattening stateless render result please case always need return actual html render rows", "d": "1/2017"}, {"body": "sure mean propose use functions return arrays rows flattening component renders", "d": "1/2017"}, {"body": "row state expandscollapses children rows would achieve stateless component thanks fri jan dan abramov notifications githubcom wrote sure mean propose use functions return arrays rows flattening component renders receiving authored thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "could keep track state parent component like object", "d": "1/2017"}, {"body": "believe page specifically section answer question use inheritance normally would create generic component accepts functions props need behavior customizable specific component renders inherits generic component passes methods props eg hard say example bit vague give idea", "d": "1/2017"}, {"body": "stopped publishing zips get files unpkg unpkg cdn serves contents npm packages link docs new version comes replace number url download could link newest available release help", "d": "1/2017"}, {"body": "ok thanks", "d": "1/2017"}, {"body": "get chance create reproducing example like ask issue template filled right issue description current behavior bug please provide steps reproduce possible minimal demo problem via similar template able help provide code example fails threeline code snippet provided looks fine problem something else", "d": "1/2017"}, {"body": "sorry understand trying reproduce seeing app simple code sample like works best get something reproducing bug", "d": "1/2017"}, {"body": "taakn luck getting reproducible example", "d": "1/2017"}, {"body": "handler matter oninput onchange onkeydown ancestor input element considered controlled input considered controlled prop use presence event handlers think way render function saying component value becomes controlled described detail forms page react documentation developer control input instead ifyoudonotfollowthenewtermweinventyoucannottypeinsilent way indeed silent run code jsfiddle since decided provide put see warning console exact problem suggestions improve warning nt want put handler times inputs want component uncontrolled also documentation create hundred methods hundred inputs like write new function every time need pass different argument react javascript library assumes familiarity javascript idioms eg functions variables closures example single handler three inputs js class mycomponent extends reactcomponent constructor props super props thisstate name jane surname smith email jane fakeco handlechange name e thissetstate name etargetvalue renderinput name return render return thisrenderinput name thisrenderinput surname thisrenderinput email reactdomrender documentgetelementbyid container agree super obvious add example documentation attempt updated use example instead thanks raising", "d": "1/2017"}, {"body": "keep issue open documentation task", "d": "1/2017"}, {"body": "updated docs via", "d": "1/2017"}, {"body": "would like send pr support event", "d": "1/2017"}, {"body": "time right", "d": "1/2017"}, {"body": "maybe somebody else could keep open thanks", "d": "1/2017"}, {"body": "like take stab", "d": "1/2017"}, {"body": "sure please go ahead search older prs add events get sense looks", "d": "1/2017"}, {"body": "reference", "d": "1/2017"}, {"body": "trejoramiro still working would like grab issue", "d": "1/2017"}, {"body": "hey diegomura go ahead problem", "d": "1/2017"}, {"body": "nested jsx expression evaluated immediately get delayed components even use still try read null object fails commonly data available people use early returns example", "d": "1/2017"}, {"body": "think function arguments even function nt use argument evaluated calling function evaluation fails happens early programming languages lazy evaluate arguments needed javascript one", "d": "1/2017"}, {"body": "happening client still generate attribute comparing markup even problem due something else hard say without seeing minimal example reproducing", "d": "1/2017"}, {"body": "gaearon good know figured issue due dynamic route reactrouter leveraged upgrade tweaked browser side code according works thank clarification", "d": "1/2017"}, {"body": "hm sure makes sense actually", "d": "1/2017"}, {"body": "gon na close figure actually want", "d": "1/2017"}, {"body": "spicyj discussion nt supporting test renderer", "d": "1/2017"}, {"body": "good memory thanks", "d": "1/2017"}, {"body": "error message contains description problem might adding ref component created inside component method string refs work work inside classes discouraged anyway otherwise would expect ref set would read callback refs nt suffer problem use fine js import react react import reactdom reactdom import testutils reactaddonstestutils var jsdom require jsdom jsdom globaldocument jsdom hello world globalwindow documentdefaultview var div testutilsrenderintodocument something div hope helps", "d": "1/2017"}, {"body": "gaearon goal add ref component nt created component method example clickoutside component like one", "d": "1/2017"}, {"body": "use callback refs use case like component already nice thing callback refs nt care element created", "d": "1/2017"}, {"body": "fingers crossed", "d": "1/2017"}, {"body": "able get circleci passing copying circleyml scriptscircleci making tweaks also seemed linting errors according build fixed one concern adding devdependencies way could fix error seems somehow returning true nt able find module jestcli anyone knows happening would huge help", "d": "1/2017"}, {"body": "looks like got resolved right", "d": "1/2017"}, {"body": "yup", "d": "1/2017"}, {"body": "state want hydrate dehydrate sounds like part", "d": "1/2017"}, {"body": "actually state stores attached given child view hmr hits parent view rerenders child child decorator instantiates attaches stores necessary stores need sort key know instance attach attaching separate storekey pretty hacky causes really strange bugs ca nt really detect child views idea attached key singleton usually attached key", "d": "1/2017"}, {"body": "create reduced case js better understand trying", "d": "1/2017"}, {"body": "ok tried make halfway legible extracted simplified quite bit nt think compiles lmk makes sense js attachjs let previousstores export default fileid provided child gt module amp amp modulehot const stores modulehotdata previousstores moduleid stores fileid return class storeprovider extends component state stores childjs import attach attachjs class store constructor index thisindex index let child attach hello store stores gt storeshelloindex let parent gt map gt", "d": "1/2017"}, {"body": "sure see react fits", "d": "1/2017"}, {"body": "key globally unique right solve problem", "d": "1/2017"}, {"body": "jddxf want submit pr fixes", "d": "1/2017"}, {"body": "sure already done thissomething wrong giti ca nt fetch push", "d": "1/2017"}, {"body": "fixed also wonder whether issues sort opened since related functionalitymaybe pr would enough", "d": "1/2017"}, {"body": "fix send pr sure time please file issue somebody else could thanks jumping", "d": "1/2017"}, {"body": "got itthanks", "d": "1/2017"}, {"body": "value accessible via property already insecure far malicious access goes right whether value set node attribute node one accessed security concern case arises fact tracking software sending arbitrary dom markup network hypothetically could easily created unique selector based properties node instead attributes etc really matter whether one less safe insecure could contain sensitive user information specific case could mitigated user tracking software obscuring ignoring attribute using value attribute nt really great way create unique selector either especially react apps since updated every time controlled input updated workaround could use would use uncontrolled components since nt update attribute change tl dr program execute code client local data insecure matter level obfuscation implement important executing programs carefully consider kind local data send network securely", "d": "1/2017"}, {"body": "aweary thanks lot comment used example tracking software demonstration purposes sure something run environment code everything fully compromised question mostly fact markup changes get additional way retrieving input value wondering whether exploited way", "d": "1/2017"}, {"body": "implementation detail officially supported far know currently better way could also get toplevel ref use dom api get child could work around switching callback refs internally however nt plan change transitiongroup code anymore repository moving please file new feature requests bug reports thanks", "d": "1/2017"}, {"body": "sheile thanks report able verify behavior quick glance think bug child reconciler ids generate children consistent update since ids nt match reactchildreconciler ends mounting child old one gets queued unmounted familiar child reconciliation seems like unexpected behavior cc gaearon think might consequence returning different root element even type sheile get around inlining conditional render", "d": "1/2017"}, {"body": "could first issue ever reported nt think necessarily bug sure think happens looking second fiddle branch children end array two elements however branch children actually single child react optimizes case produce extra array jsx element single child toggle button switch array one element element react currently treats change type although sure right case easy work around rely matching holes different branches", "d": "1/2017"}, {"body": "unfortunate sideeffect reacts special logic exists counter effects jsx wrap child array gaearon linked ie react treats since inserting adjacent another element becomes nested special logic stops working effectively encountering case imho think putting anything adjacent nt nice avoided thus avoiding problem another note would interesting neat way jsx mark child react apply special logic always case thus entirely eliminating unintuitive magic behavior react nt think edit wonder would nt well map etc actually sidestep would highlight oddities special logic perhaps something highlight necessity inserting adjacent elements perhaps dev performance penalty high could emit warning encounter case although would require devmode jsx seems like nogo possible solution perhaps sideeffects equally bad mixing children like nt thought much", "d": "1/2017"}, {"body": "thank pointing related issues taking time explain understood problem workaround yesterday tried flatten children array problem resolved need additional attribute identify node different nest level like hmm problem handle please close issue longer need discussion", "d": "1/2017"}, {"body": "yankouskia react special cases meaning nt necessarily correspond dom event order make easier handle inputs example events usually occur text inputs people expect occur input value actually changed normalize see behavior documented said still unexpected behavior since radio input value nt changed already reported resolved released yet hoping get released soon thanks backport pr opened tl dr normalize input events general radio input behavior wrong already fixed working getting released", "d": "1/2017"}, {"body": "aweary thank", "d": "1/2017"}, {"body": "think right please submit pr", "d": "1/2017"}, {"body": "future reference feel free send prs small fixes like without creating issue", "d": "1/2017"}, {"body": "thanks suggestion issue already exists please feel free contribute discussion", "d": "1/2017"}, {"body": "assigning forget issue good place get feet wet react codebase intend work happy review pr", "d": "1/2017"}, {"body": "like work issue", "d": "1/2017"}, {"body": "please send pr ping", "d": "1/2017"}, {"body": "gaearon browsing codebaseoverviewmd noticed potential typo markdown line appears one many marks resulting rest file appearing code instead regular text code excerpts interspersed relevant happy fix well create separate issue submit pr bundle fix together work issue markdown would look like one less symbol", "d": "1/2017"}, {"body": "please create separate pr", "d": "1/2017"}, {"body": "unrelated generally recommend reading docs website", "d": "1/2017"}, {"body": "richiethomas working issue", "d": "1/2017"}, {"body": "ashiknesin yes gaearon like make sure right submitting pr example change requested one files change would reactelementvalidatorjs line looks like would add newlines start string returned getdeclarationerroraddendum function words change check render method nn check render method right submit pr fix later today", "d": "1/2017"}, {"body": "something like similar places need change", "d": "1/2017"}, {"body": "yep understood submit pr soon cheers", "d": "1/2017"}, {"body": "caught dynamicallygenerated warnings contain phrase check also found similar warnings different verbage finegrained search ok submit followup pr find anything", "d": "1/2017"}, {"body": "best put one pr think", "d": "1/2017"}, {"body": "ok understand spirit bugfix address dynamicallygenerated warnings large blocks text right warning dynamic content small easily parseable clearly shows file problematic need newline right", "d": "1/2017"}, {"body": "yes want fix easy miss add info end long message", "d": "1/2017"}, {"body": "gaearon requested ping say pr ready review cheers", "d": "1/2017"}, {"body": "means change reaches chrome stable quite react apps could randomly stop working users update browsers filed bug chromium browser crashes bugs react team position fix", "d": "1/2017"}, {"body": "also provide exact way reproduce nt crash canary", "d": "1/2017"}, {"body": "exception comes react tries access thinks defined nt able get example minute mobile simple react component produces object tag job filed bug chromium assumed tospec changed however reaches stable break plenty react apps sure anyone uses object tag possibly even facebook fallback video rendering maybe seems react nt really throwing arbitrary properties onto welldefined elements classes essentially htmlelement etc also chromium nt introducing breaking changes like guess", "d": "1/2017"}, {"body": "also remember exception saw came nonproduction related block trying access node caches also possible wo nt affect production builds dev ones hopefully edit get exception thrown instance debugid undefined impossible probably places assumed instance returned", "d": "1/2017"}, {"body": "seems react nt really throwing arbitrary properties onto welldefined elements classes essentially htmlelement etc afaik vast majority libraries operate dom work", "d": "1/2017"}, {"body": "quite true however nt make better beyond scope issue suppose react devs would rather chromium revert change still worth investigating end", "d": "1/2017"}, {"body": "would really help small repro consistently shows problem without react", "d": "1/2017"}, {"body": "ok got one file bug", "d": "1/2017"}, {"body": "filed since actionable side closing issue thanks reporting", "d": "1/2017"}, {"body": "stumbled upon chrome beta prompted update issue might find traffic affecting beta channel understand clearly chrome bug react issue per se said possible workarounds aside nt use chrome canary beta development avoid using tags", "d": "1/2017"}, {"body": "fwiw fix already merged chrome", "d": "1/2017"}, {"body": "noticed try chrome canary see issue fixed update findings edit yup works canary guess users move chrome stable canary beta channel updates", "d": "1/2017"}, {"body": "dibs gon na play around see fix issue", "d": "1/2017"}, {"body": "investigation shows already fixed commit although unfortunately released yet", "d": "1/2017"}, {"body": "andarist seems like commit might fix problem uncontrolled input issue happens well controlled inputs used updated demo code first post show", "d": "1/2017"}, {"body": "yeah right think nothing fixed side controlled inputs depends setting controlled values directly dom nodes check demo inspect see warning chrome seems already experienced similar issue reported fixed chromium bugtracker propose report one well fixed", "d": "1/2017"}, {"body": "cc nhunzaker worked related things", "d": "1/2017"}, {"body": "thanks investigation shows already fixed commit although unfortunately released yet yes gaearon could probably cherry pick pretty safely think andarist seems like commit might fix problem uncontrolled input issue happens well controlled inputs value onchange used ixrock yes maintaining pr controlled inputs propose report one well fixed andarist think filing issue chrome fantastic next step also encountered behavior safari report happy help clarify anything help issue submission", "d": "1/2017"}, {"body": "yes gaearon could probably cherry pick pretty safely think commit", "d": "1/2017"}, {"body": "argh forgot mention changelog sorry", "d": "1/2017"}, {"body": "updated changelog", "d": "1/2017"}, {"body": "anything else", "d": "1/2017"}, {"body": "good close behavior appears fixed", "d": "1/2017"}, {"body": "thanks filing issue want dig happens", "d": "1/2017"}, {"body": "sure thing", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "looked bit looks like updating jest fixes issue related issue several others reported gaearon fix", "d": "1/2017"}, {"body": "updated example", "d": "1/2017"}, {"body": "would also possible use like provide special member props however would problematic could clash existing user code", "d": "1/2017"}, {"body": "thanks taking time create example afraid indeed unusual usage something would encourage add sugar support would suggest stick traditional patterns using react abstractions like often end hard follow unnecessarily complicated especially involve inheritance reference react way implementing would look closer js function list props const depth items props depth return itemslength items return itemsmap item index gt function item props const depth value props depth return value return value function node props const item depth props arrayisarray item return return var root b reactdomrender documentgetelementbyid container see reveals unnecessary dom wrappers obvious example although maybe clear want abstract using objects data calling however would encourage mix inheritancelike techniques react components hope helps somewhat", "d": "1/2017"}, {"body": "thanks letting us know smile duplicate though closing one", "d": "1/2017"}, {"body": "lomocc reason behavior different childrenlength gt means reactcreateelement function called multiple children arguments one array containing children case key prop required equivalent jsx vs jsx", "d": "1/2017"}, {"body": "maybe nt make clear try demo please many times user interface comes array dataprovider jsbin use pure jsx html html error key prop required children reactcreateelement children difference", "d": "1/2017"}, {"body": "lomocc difference calling calling calling could type would work expected", "d": "1/2017"}, {"body": "thanks answer also think problem api js error reporting child array iterator unique key prop reactcreateelement div null children children nt way", "d": "1/2017"}, {"body": "lomocc way specifying children array done second way never pass children prop like api specifically states provide children third argument within props specify children props get validated either error gets thrown like noticed", "d": "1/2017"}, {"body": "yes intentionally doubly linked structure internal wraps userdefined composite components holds reference instance userdefined component defined mounted used store reference internal wrapper public instance look reactinstancemap information doc comments maintains mapping public facing stateful instance key internal representation value allows public methods accept user facing instance argument map back internal methods", "d": "1/2017"}, {"body": "note private implementation details change future versions", "d": "1/2017"}, {"body": "thanks clarification really helpful", "d": "1/2017"}, {"body": "intentional check need construct use either call lets us support functional components factory components js functional component function foo props return factory component function bar props return render return", "d": "1/2017"}, {"body": "also think words create unnecessary component name appeared times", "d": "1/2017"}, {"body": "oops lacker ericnakagawa get pro account", "d": "1/2017"}, {"body": "link exactly working working link incognito mode dunno ericnakagawa fixed something though afaict one link time use codepen problem make codepen links come react account would fairly annoying", "d": "1/2017"}, {"body": "think ericnakagawa might fixed somehow afaict one link time use codepen debug problem correct", "d": "1/2017"}, {"body": "gaearon suggest switching link instead", "d": "1/2017"}, {"body": "closing since appears work \u30c4", "d": "1/2017"}, {"body": "okay change type text see changes", "d": "1/2017"}, {"body": "intentional bug browser event name confusing many people expect run change rather blur especially important controlled inputs react react makes work change documented find differences dom documented page hope helps", "d": "1/2017"}, {"body": "kenticomartinh thanks well thought detailed issue something requested number times past see open pr implements essentially solution proposed read comments context nt done yet", "d": "1/2017"}, {"body": "thank could nt find probably searching problem keywords solution keywords willl observe understand correctly use basic events eg onclick small react components support latest enough versions browsers temporary fix pretty safe set dom events react listens attached automatically regardless whether register", "d": "1/2017"}, {"body": "issue wihtout using getting error randomly clicking inside modal component tested rendering content inline instead inside modal produce errors using scenario nt see error downgrading", "d": "1/2017"}, {"body": "op post nt think explicitly support use case bit unexpected probably wo nt looking soon feel free investigate fix think might needing call test renderer like reactdom renderer search code calls etiennedi case sounds like bug however ca nt investigate without minimal reproducing case", "d": "1/2017"}, {"body": "currently nt persist released dispatching event might able avoid assign dispatching event released except case event persistent sure change affects", "d": "1/2017"}, {"body": "event bubbles updated current element handling see called every function dispatchlisteners updated every iteration yenshih relying bubblingcapturing use instead need use retain reference element use instead js handlemousemove event eventpersist const element eventcurrentelement thishandlethrottlemousemove event element handlethrottlemousemove event element consolelog element whatever", "d": "1/2017"}, {"body": "think underlying cause updates attributes changed eg removing one properties impacts property well resulting instance nt necessarily match recently specified object able reproduce issue unit test using jest jsdom nt trickle effects like major browser vendors seem eg updating nt impact issue may worth fixing kind edge case ways fix think would specialcase updates shorthand properties like explicitly setreset properties defined object rather minimum edit addition removing properties present use csstext instead assume nt slower", "d": "1/2017"}, {"body": "overlapping styles allowed solutions costly afaik decided reasonable support warnings would helpful nt done yet number issues discussing interested information", "d": "1/2017"}, {"body": "overlapping styles allowed news may right decision nt think communicated clearly least seen works time may lead someone assume supported solutions costly fair enough curious costly csstext would compared manually managing updated properties currently done benchmarking looks like specific thing discussed previously without clear resolution", "d": "1/2017"}, {"body": "searching react issues see mentioned places eg first observed issue related nt immediately realize affected shorthand properties searched preexisting bugs failed find search overly narrow", "d": "1/2017"}, {"body": "close issue dup thanks syranide", "d": "1/2017"}, {"body": "related pull request", "d": "1/2017"}, {"body": "would like work first contribution react help welcome", "d": "1/2017"}, {"body": "karthikchintapalli cool follow instructions get docs running locally need diagnose issue coming", "d": "1/2017"}, {"body": "gaearon thank get back case questions", "d": "1/2017"}, {"body": "gaearon ok think get issue markdown first words content create react app link html file generated tag content property tags within supposed take string happening blog posts link first lines get included description", "d": "1/2017"}, {"body": "gaearon fix think docslayoutsdefaulthtml", "d": "1/2017"}, {"body": "makes sense wan na send pr", "d": "1/2017"}, {"body": "sent pr changes", "d": "1/2017"}, {"body": "would like help recommend move move section page lowermost article thanks", "d": "1/2017"}, {"body": "fixed", "d": "1/2017"}, {"body": "stated docs react may batch multiple setstate calls single update", "d": "1/2017"}, {"body": "joni perhaps explains called nt explain equal parameters passed first time parameters passed reflect state external object amp second screenshot verifies correct arguments passed seems unlikely issue arises misuse though ideal result ofc would expected reflect last call calls batched correctly perhaps react batched first four calls correctly inside amp last call mistakenly dropped ignored", "d": "1/2017"}, {"body": "ashtonwar suspect likely indirectly calling dispatch action shouldcomponentupdate generally nt triggering new updates lifecycle method think causing issues gaearon checked demo looks like instance totally flushed think triggered know disallow calls places also side note ashtonwar state management system seems call lot nt need would try manage outside hoc somehow nt rely much lastly reference equality check always return false react create new object updating state valid way determine component rerender rerendering based state updates", "d": "1/2017"}, {"body": "aweary yes calling inside seems causing issue dispatching action inside inside called expected already preventing calls outside suggested see getting right wip adding check ensure props actually updated dispatching indirectly reduced number calls thanks bringing attention aware amp never equal calling component render every time called necessarily parent renders props change repeating steps demonstrated issue", "d": "1/2017"}, {"body": "ashtonwar assuming inside allowed nt think issue react mentioned calls batched wo nt get call count turn glad resolves though ultimately would say try refactor architecture avoid triggering updates outside scope issue may want add note documentations", "d": "1/2017"}, {"body": "aweary thanks help leave issue open unsubscribe guys work whether want disable find way make work update docs", "d": "1/2017"}, {"body": "expected behavior reason rerenders every time always evaluates false may seem unintuitive sugar returns new object every time called fix cache element ensure value preserved across renders js class app extends reactpurecomponent update gt thissetstate count thisstatecount state count children render consolelog render app return thischildren", "d": "1/2017"}, {"body": "hey thanks answer would appropriate solution needed receive props", "d": "1/2017"}, {"body": "props every time hoist constant like example receives different props every time updates therefore makes sense skip rendering since otherwise see changes however free write custom implementation want use even granular heuristics determine whether update", "d": "1/2017"}, {"body": "gaearon thanks chiming lot trouble optimizing cases one approach taken passing function instead passing however children readable syntax nt want quick throwing baby bathwater problematic case mainly children depend props dynamic nt mean always change nt want children recreated props nt change know sounds bit like overkill goal currently single unnecessary render render entering render function", "d": "1/2017"}, {"body": "davegri may optimizing wrong thing running expensive expensive part recursively updating large tree often cut fast updates reasonable depth fine components always render hard offer help without specific example struggling", "d": "1/2017"}, {"body": "gaearon agree optimizations may extreme assuming decided want optimization code like nt want prop always change cause rerender recreated changes said one solution class renderchildren gt thispropstext render like said however dislike approach much less readable wondering solutions suggestions", "d": "1/2017"}, {"body": "nt want componentwithchildren children prop always change cause rerender recreated thispropstext changes pass span exactly would happen think approach suggested works js class renderchildren gt thispropstext render case even changes know forgets rerender would rerender also happen pass prop point duplicating information might well create also renders", "d": "1/2017"}, {"body": "gaearon right function solution working thanks example simple point may complex structure ca nt represented primitive good way solving real scenario code", "d": "1/2017"}, {"body": "suggested last paragraph work create new component encapsulates render function make", "d": "1/2017"}, {"body": "thought saying encapsulate children component yeah guess thats good solution thanks", "d": "1/2017"}, {"body": "curious use case creating renderer private apis change significantly", "d": "1/2017"}, {"body": "gaearon traversing mounted component tree api going change significantly referring internal properties mentioned", "d": "1/2017"}, {"body": "reactnativecomponenttree private api significantly change version please nt rely public apis documented react react native websites everything else internal", "d": "1/2017"}, {"body": "closing duplicate", "d": "1/2017"}, {"body": "thank much since engineering living react actually makes life better continually", "d": "1/2017"}, {"body": "gushy positivity thread almost much handle almost", "d": "1/2017"}, {"body": "thanks", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thanks thanks thanks everyone worked facebook awesome", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "thank heart", "d": "1/2017"}, {"body": "remember reading issue optional sass support createreactapp someone wrote testing less sass support hot reloading components project useful still add things ease development dan abramov answered sorry useful yet think many people learning react would appreciate even current feature set replied sorry nt take comments rude think fantastic project important lesson thanks", "d": "1/2017"}, {"body": "thanks facebook initialitive open source helps lot", "d": "1/2017"}, {"body": "much", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "thanks really fantastic support treatment open source community", "d": "1/2017"}, {"body": "thanks guys amazing job much love", "d": "1/2017"}, {"body": "great react awesome", "d": "1/2017"}, {"body": "thank best developer experience across devices", "d": "1/2017"}, {"body": "would nt able iterate incredibly fast vimsicalcom without guys pushing envelope thank", "d": "1/2017"}, {"body": "thank hard work", "d": "1/2017"}, {"body": "thanks keep amazing work", "d": "1/2017"}, {"body": "thank leading good example us follow happy say hackerhoursorg one places good work followed", "d": "1/2017"}, {"body": "thanks guys react amp react native made developing fun", "d": "1/2017"}, {"body": "thanks awesome work vietnam", "d": "1/2017"}, {"body": "thanks everything use reactnative awesome", "d": "1/2017"}, {"body": "thank react went way beyond great code maintainers community ecosystem gave new perspective work new way life", "d": "1/2017"}, {"body": "react made web development much fun ca nt thank guysgals enough", "d": "1/2017"}, {"body": "thank keep good work need people like guys community grow move ahead", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thanks everyone helped team ship maintain product much reliable faster way hard describe grateful patience decision made make lifes easier happy", "d": "1/2017"}, {"body": "thank react community made yeartoremember loads nativebaseio team", "d": "1/2017"}, {"body": "cheers guys", "d": "1/2017"}, {"body": "thank react community amp devs would nt fun building discord without awesome framework discord team", "d": "1/2017"}, {"body": "thank beyond words continued work react react native allowed accomplish oneman dev shop bigger team ever thought possible excited coming", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "wed jan pm ronaldo lima notifications githubcom wrote receiving subscribed thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "thank sweet see community contributors ecosystem done right", "d": "1/2017"}, {"body": "thanks", "d": "1/2017"}, {"body": "thanks great work bring innovations year", "d": "1/2017"}, {"body": "thanks great work awesomeness bring year", "d": "1/2017"}, {"body": "thanks", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "thanks lot", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thanks", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thanks lot", "d": "1/2017"}, {"body": "thank react community", "d": "1/2017"}, {"body": "react native literally saved team hundreds hours thousands current project thanks great work", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thank guys react makes want get bed morning haha", "d": "1/2017"}, {"body": "wonderful indeed thank", "d": "1/2017"}, {"body": "awesome job thanks", "d": "1/2017"}, {"body": "thanks team love working react amazing library exemplifies spirt open source", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "rock thanks", "d": "1/2017"}, {"body": "thanks guys", "d": "1/2017"}, {"body": "thank much react react native simply brilliant", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "react best programming community ever involved lot credit goes facebook extraordinary philosophy contributing open source thank thank thank", "d": "1/2017"}, {"body": "thanks ton taken development experience whole new level", "d": "1/2017"}, {"body": "awesome work thank", "d": "1/2017"}, {"body": "thanks declarative lovelyness great new things", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thanks guys awesome job", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "obrigado", "d": "1/2017"}, {"body": "thank hard work put react", "d": "1/2017"}, {"body": "big thanks", "d": "1/2017"}, {"body": "thanks hard work company personal level grateful amazing stuff guys put daily basis keep", "d": "1/2017"}, {"body": "thanks brilliant minds changed hence life", "d": "1/2017"}, {"body": "thanks us back vacations working ship awesome stuff", "d": "1/2017"}, {"body": "thanks", "d": "1/2017"}, {"body": "unlikely given asking easily implemented user space however future likely separate api mounting updating unmounting root application something like", "d": "1/2017"}, {"body": "roadhump ca nt see documented anywhere could point anyway first sight seems like bug code since rerendering tree state change turn mounts component", "d": "1/2017"}, {"body": "roadhump hey bit newbie repo best help nt understand would want call error render function creating component throw error render ca nt use componentdidmount throw error render content error otherwise continuously throw errors every time component rerenders ie js class witherror extends component componentdidmount consolelog witherror error throw new error witherror error render return witherror best solution tell trying achieve devjunkorg believe onmount function created main component act callback update state parent component trigger single rerender however nt think callback issue mentioned believe issue throwing error render function", "d": "1/2017"}, {"body": "pretty specific extend reactcomponent implement desired functionality shouldcomponentupdate extend special version component necessary", "d": "1/2017"}, {"body": "vifird modified code component b reactfunctional working javascript import react react import functional reactfunctional let render gt return hello export default functional render declare methods pass stateless component", "d": "1/2017"}, {"body": "closing since response known issues rendering tags react", "d": "1/2017"}, {"body": "merged dom fixtures application place functioning need focus writing fixture test cases designing ui", "d": "1/2017"}, {"body": "outstanding dom issues personally familiar ill try collect others well offline chat jimfb awhile ago believe left looks fine scared make big change mouse enter logic probably good fit really collection undocumented input behavior needs documentation", "d": "1/2017"}, {"body": "issues make good fixtures", "d": "1/2017"}, {"body": "still need write fixture components yeah could take stab process somewhere", "d": "1/2017"}, {"body": "jquense yupp go ping got pr open review", "d": "1/2017"}, {"body": "started catalog check list test cases issue description", "d": "1/2017"}, {"body": "problem brunch conditional require notes commonjs official requirejs website check qoute modules traditional commonjs module format easily convert work requirejs modules convert cleanly new format types modules may convert well modules use conditional code require call like somecondition require else require brunch author paulmillr also wrote conditional imports also unsupported ecmascript import syntax think guys btw happy new year", "d": "1/2017"}, {"body": "react different conditional require since see one problematic", "d": "1/2017"}, {"body": "gaearon digging found special problem fact reactaddonsdomdependencies inside reactlib reactperf amp reacttestutils inside reactdomlib naive experiment moving conditional requires required devtools inside worked basically reactlibreactaddonsdomdependenciesjs require always production object var reactdomdevtools require reactdomlibdevtools dev exportsgetreactperf function return reactdomdevtoolsreactperf exportsgetreacttestutils function return reactdomdevtoolsreacttestutils nt created pr dozen tests failing", "d": "1/2017"}, {"body": "maybe comment bring value brunch maintainers fix brunch deppack side cc paulmillr goshakkk shvaikalesh marcioj", "d": "1/2017"}, {"body": "sure conditional require", "d": "1/2017"}, {"body": "temporarily fixed released soon however workaround brunch bug seems like real issue", "d": "1/2017"}, {"body": "fixed updating react packages please verify", "d": "1/2017"}, {"body": "thanks guys", "d": "1/2017"}, {"body": "fixed updating packages please verify", "d": "1/2017"}, {"body": "aweary fixed separate issues", "d": "1/2017"}, {"body": "gaearon seems like two separate issues fixes issue windows tested apparently nt fix windows entirely sure", "d": "1/2017"}, {"body": "gaearon test minutes report back", "d": "1/2017"}, {"body": "gaearon tested windows windows placeholder rendered correctly sure happening probably user error part either way resolved", "d": "1/2017"}, {"body": "serversiderendering result never matches browsersidegenerated dom even though use suppose browsersidegenerated dom always replaced server rendered html since attribute", "d": "1/2017"}, {"body": "case different problem clear exactly since nt supply code conclusion mistaken react generates markup client rehydrating server markup nt compare dom strings process nt changed", "d": "1/2017"}, {"body": "also nt work precisely works times try open example new tab several times maybe reload browser think see incorrect variants", "d": "1/2017"}, {"body": "currently running issue well someone please help", "d": "1/2017"}, {"body": "exact issue", "d": "1/2017"}, {"body": "fix nt seem work build time running browserify addons browserify task error find module reactdom usersgaearonpreactbuildnodemodulesreactlib running browserify addonsmin browserify task error find module reactdom usersgaearonpreactbuildnodemodulesreactlib", "d": "1/2017"}, {"body": "started work ca nt get figure make circular dependencies work statically analyzable amd environment systemjs builder particular possibly rjs affected help welcome", "d": "1/2017"}, {"body": "please check fix works case", "d": "1/2017"}, {"body": "fixed via released soon", "d": "1/2017"}, {"body": "sorry late fwiw tried current master works fine thanks", "d": "1/2017"}, {"body": "also confirm reactwithaddons works master requirejs setup thanks gaearon", "d": "1/2017"}, {"body": "fixed updating react packages please verify", "d": "1/2017"}, {"body": "verified npm working requirejs build thanks", "d": "1/2017"}, {"body": "bit upgrading react spend time figuring posting help others situation using reacthotloader hotreloading dev environment need load webpack field look like following work correctly react reacthotloader webpackdevserver hope helps", "d": "1/2017"}, {"body": "provide simple pr feature implementation instead using attr definition string added attribute describe prop structure object hope completely clear look tests custom props behaviour also presented tests ok complete pr clean code remove duplications etc", "d": "1/2017"}, {"body": "another good use case tests may want different things depending proptypes", "d": "1/2017"}, {"body": "sometimes collision defined prop type names prop types defined features prop type also probably collision actually sounds like something break future versions react using proptypes behavior observable production example plan replace proptypes checkers single throwing type checker prod reduce react byte size case production relied logic app could break prod sceptical direction want make proptypes powerful people start relying implement magic behaviors support could break future", "d": "1/2017"}, {"body": "sometimes collision defined prop type names prop types defined features prop type also probably collision gaearon agree direction probably wrong another cases still useful dev env react storybook info addon support prop types also maybe useful doc generators another case project worked lot components complex props values props editable control panel different locals even according current user props values passed components via redux connect build form control panel edit component values developers read component source text parse prop types also implemented via babylon get ast tree parse object reactdocgen api get component doc object get props know problems complex shape enum props proptypes struct maybe suitable solution think lot examples feature would useful anyway really important feature among react pull requests react needs", "d": "1/2017"}, {"body": "want create small faker module react generates random data based components proptypes feature would helpful currently native solution handle problem comfortable way look current idea implementation oleblaesingreactproptypesfaker", "d": "1/2017"}, {"body": "new reading documents wish documentation explained use ref never mentioned think key part application works think may best add quick paragraph use", "d": "1/2017"}, {"body": "agree refs introduced later could use controlled inputs instead", "d": "1/2017"}, {"body": "think need restructure little bit two separate change handlers need refs", "d": "1/2017"}, {"body": "probably time work good contribution opportunity update rohannair working like help please fork relevant codepen step change two change handlers read instead using refs change text necessary send pr goal avoid using refs since introduced yet essential page want work please comment several people work time", "d": "1/2017"}, {"body": "take first pr", "d": "1/2017"}, {"body": "sounds great", "d": "1/2017"}, {"body": "pushed pr nt feel like docs needed changing vs part earlier resisted urge make function complicated adding multiple arguments bind intended beginners", "d": "1/2017"}, {"body": "find solution", "d": "1/2017"}, {"body": "looks like reactjs nt support path attribute", "d": "1/2017"}, {"body": "similar problem usecase app list images left side user selects image list selected image shown canvas canvas background image set using created object canvas called function whose purpose set canvas background selected image done inside default background image shown canvas selected image shown canvas dont see componentdidupdate rerendering used using canvas object recreated select image canvas set selected image show previous canvas javascript class imageboard extends reactcomponent constructor super thisstate canvas undefined selected undefined componentdidmount const canvas new fabriccanvas canvas thissetcanvasbackground thispropsgetselectedimageselectedimage canvas componentdidupdate const canvas new fabriccanvas canvas thissetcanvasbackground thispropsgetselectedimageselectedimage canvas setcanvasbackground image canvas canvassetbackgroundimage image function e let iw canvasbackgroundimagewidth ih canvasbackgroundimageheight cw canvasgetwidth ch canvasgetheight render return const mapstatetoprops state gt consolelog state state return getselectedimage stategetselectedimage export default connect mapstatetoprops imageboard use componentdidupdate result looks like following image use componentdidmount canvas get updated selected image happen rerendering using reactjs", "d": "1/2017"}, {"body": "noted help provide minimal reproducing example run eg jsbin clear explanation expected happen actually happens cheers", "d": "1/2017"}, {"body": "produced example webpack bin want create new issue saw similar problem issue already created posted problem sorry violate protocol think image clicked componentdidmount rerender component action fired state selectedimage changes thus new image shown imageboard case thanks", "d": "1/2017"}, {"body": "tushant sure problem noop", "d": "1/2017"}, {"body": "componentdidmount rerendering component even state selected image changed tried componentdidupdate update canvas update canvas first need clear previous one work either", "d": "1/2017"}, {"body": "tushant reduce example react component nt seem need redux really meant simple state like putting redux makes example way complicated harder understand trying", "d": "1/2017"}, {"body": "gaearon example showed part application developing learn redux react login system plus lots filtering system right side using redux sure reduce following example react sorry late response due timezone difference thanks", "d": "1/2017"}, {"body": "reduced example react", "d": "1/2017"}, {"body": "thanks creating unfortunately seems like webpackbin broken ca nt edit files nothing happens keystrokes browser", "d": "1/2017"}, {"body": "ultimately problem nt appear related react react side need js componentdidmount thissetcanvasbackground thispropsselectedimage componentdidupdate prevprops prevpropsselectedimage thispropsselectedimage thissetcanvasbackground thispropsselectedimage reactrelated problem seeing rely find canvas bad component reusable two galleries page fix would need put ref canvas something dom element implement depends library using canvas example could something like work problem using library need read documentation learn update image existing canvas", "d": "1/2017"}, {"body": "sorry novice could understand react related issue thanks lot knowledge got learn new things expected thanks", "d": "1/2017"}, {"body": "worries would recommend trying use api vanilla js first get sense use library use react sure api", "d": "1/2017"}, {"body": "sure said practice vanilla js understand concept api js bin come back use react thanks", "d": "1/2017"}, {"body": "one last question understand line", "d": "1/2017"}, {"body": "reading documentation fabricjs found native methods operate context object representing entire canvas bitmap fabric operate objects instantiate change properties add canvas fabricjs work element stored object canvas using use object way worked understand context aforementioned way thanks lot help", "d": "1/2017"}, {"body": "tushant statement checks canvasel exists creates", "d": "1/2017"}, {"body": "robertistok nt", "d": "1/2017"}, {"body": "tushant nt think returns true means falsy value passing function return something useful imo", "d": "1/2017"}, {"body": "understand thiscanvas context aforementioned way point nt need put fabric object state use data used function harmful better put fabric object field", "d": "1/2017"}, {"body": "got thanks", "d": "1/2017"}, {"body": "issue closed open issues regarding maintenance future transitiongroup support", "d": "1/2017"}, {"body": "yep let close issues transitiongroup filed nt deprecated officially well likely", "d": "1/2017"}, {"body": "interesting points hn discussion thread desire official react docs either include official info applicationwide topics like routing least point vetted sources beyond docs", "d": "1/2017"}, {"body": "related note reactiflux website revamped ready shortly part sweep reactredux links list picked top two three articles several key categories shortened list added learning page reactiflux site current version page would good resource link react docs maybe even copy cherrypick gabegreenberg thoughts topic", "d": "1/2017"}, {"body": "still wip might useful mention accessibility guide", "d": "1/2017"}, {"body": "hello andersekdahl end finding causing bug encountered glitch application setting state componentdidmount nt seem issue either", "d": "1/2017"}, {"body": "jrmartin andersekdahl could provide small example reproducing issue use jsfiddle starting point mentioned likely issue application react crucial evidence showing otherwise", "d": "1/2017"}, {"body": "still seeing issue logs never able reproduce may issue code ca nt sure seems like error occurs randomly nt seen direct pattern since ca nt reproduce know actionable guys sorta hoping fiber might magically fix make obvious causing error", "d": "1/2017"}, {"body": "unfortunately way much code application isolate issue codepenjsfiddle bug started happening updating latest chrome previous chrome version working fine still working fine firefox without issues using griddlejs react component issue happens scroll long list inside griddle component screenshot stack trace error getting first impression bug application stack trace nt point anywhere double checked states updates componentdidmount without luck also working fine firefox previous chrome version latest making think might bug application sure also looking griddlejs library", "d": "1/2017"}, {"body": "sebmarkbage see react released today new support talked custom elements everything properties instead attributes also one thing noticed react could also possibly improved support prop maybe reactspecific properties dom elements react following code something unexpected least user react starts sending properties instead attributes seems like properties work fine since already implemented properties htmlelement however edge cases behavior wo nt work expected sure thought guys might know", "d": "1/2017"}, {"body": "answering question react support yet created add react though", "d": "1/2017"}, {"body": "fyi representative end cut release test changes related react native", "d": "1/2017"}, {"body": "gaearon see somewhere read decided might released roadmap tentative list might", "d": "1/2017"}, {"body": "related issues milestone filled cases personally sure fully representative final plans", "d": "1/2017"}, {"body": "definitive list working complete rewrite reconciler fiber talk info progress info detailed progress yet clear ship wait work fiber currently prioritized issues read weekly meeting notes keep track progress planning expect talk beginning plan establishing scope soon yet done", "d": "1/2017"}, {"body": "joeldenning took quick look seemed like nt provide way set attributes custom elements really needs way set thing like aria attribute ca nt simply set via properties plenty styling scenarios might require attributes element nt support reflected properties also attributeproperty pairs different set attribute needs set nested property becomes difference would mean need data structured differently depending whether set custom element", "d": "1/2017"}, {"body": "related really think best way explicit control whether prop set attribute property event handler via api surfaces element distinct even though often correlated need nt sometimes nt even builtin elements suggestion set property element property name attribute otherwise problematic custom element upgrades element may notupgraded attribute set property upgraded able read correct value attribute", "d": "1/2017"}, {"body": "justinfagnani good points question upgrading scenario brought though general nt elements native custom look attributes constructedconnected look properties words nt general convention native custom elements properties source truth attributes initial configuration custom element follows convention looking attributes properties nt upgrade problem talked disappear thinking goal make easy react interoperate custom elements follow convention like one described course possible interoperate custom elements break convention via refs easy interoperate ones agree lean towards establishing convention", "d": "1/2017"}, {"body": "elements certainly look attributes boot values string serializable", "d": "1/2017"}, {"body": "ah good point element nt upgraded yet may still need set properties setting attribute wo nt work string probably right thing react consider execute code sure custom element defined things upgraded", "d": "1/2017"}, {"body": "joeldenning accepts name argument custom element checking react would know name also indeed custom element corresponding definition definitely loaded giving user full control property attribute event applied element means less checks heuristics react needs maintain also means api consumer gets expected behaviour complete dom integration say dom really dom integration problem custom elements integration dom means custom elements inherently work", "d": "1/2017"}, {"body": "update couple months research prototyping seems us react nothing new support webcomponents interoperability ways instantiating definedortobedefined web component events handled via like regular html element encapsulating react component within web component react component responsible controlling guts web component sebmarkbage chat next week eventually share examples docs sufficient opinion slotting remains open question though", "d": "1/2017"}, {"body": "seems us react nothing new support webcomponents interoperability ways well anything new frameworks nothing needs done support web components issue started improvement suggestion avoid first place", "d": "1/2017"}, {"body": "reminder could reconsider gt conversion went deep props vs attrs sebastian said concern would heuristic normalizing event name really fan converting things like onxxx xxx mootools would better solid arguments", "d": "1/2017"}, {"body": "agree staltz always able interoperate custom elements inside react would really nice least majority custom elements could without using refs addeventlistener manual setting dom element properties inside componentwillreceivepropscomponentdidmount", "d": "1/2017"}, {"body": "karczk agree think warning printed console andor updating documentation would sufficient", "d": "1/2017"}, {"body": "focus work put symbol examples", "d": "1/2017"}, {"body": "rikani good know thanks", "d": "1/2017"}, {"body": "linking future readers reference", "d": "1/2017"}, {"body": "understand reasoning behind props warning recommended way apply non standard valid html attributes whitelist example take component simply wants render video via iframe attributes whitelist depreciated providers like vimeo still use recommended way use without getting warning used order avoid warning fan approach whatever answer perhaps could included docs cheers", "d": "1/2017"}, {"body": "pfhayes also think behavior solution case", "d": "1/2017"}, {"body": "actually change production", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "based tweet", "d": "1/2017"}, {"body": "zpao bsonntag although bsonntag find edge issues like previous comment uses html label tag input tag works fine explain", "d": "1/2017"}, {"body": "met scene use react wo nt appear use pure html", "d": "1/2017"}, {"body": "darcyfzr bug edge see aweary example workaround make siblings use attribute like", "d": "1/2017"}, {"body": "use case contains dispatches componentlocal data requests asynchronously fulfilled corresponding reduxsagas serverside rendering enabled sagas run serverside asynchronous io sagas complete rerenders expected latest redux state latest rendered html sent browser rehydrated example componentwillmount const isloading isloaded dispatch thisprops refs serverside rendering loop universal sagas reduxsaga", "d": "1/2017"}, {"body": "clarify current best practice dispatching redux action fetch data subscribe cdm client side constructor server side", "d": "1/2017"}, {"body": "server fetch data rendering anything put redux store connect pick", "d": "1/2017"}, {"body": "brigand understand lot people prefer server side prefer use component subscribes mount unsubscribes unmount use twopass render server side get requests avoid write separate code specify data fetch server side chosen dispatch redux action reason component mounts best place server side constructor", "d": "1/2017"}, {"body": "interesting write high order component concept define defineplugin webpack", "d": "1/2017"}, {"body": "brigand thoughts exactly basically except using move logic constructor elaborate client side middleware handles subscribe action making websocket rpc call server side middleware stores subscribe actions array associated request first render pass go actions asynchronously fetch initial data dispatch store render second pass send client multipass rendering nt ideal assume react eventually provide ability efficiently update virtual dom multiple times actually rendering static markup keeping subscription code dry well worth", "d": "1/2017"}, {"body": "going close since updates reproducible example provided niole still issue recent version react please provide small test case demonstrating issue reopen", "d": "1/2017"}, {"body": "looks like react throws error react node tree unmounted effectively keeps bug showing still exists", "d": "1/2017"}, {"body": "niole mentioned gaearon something working intended please try extract reproducing example app trim takes time really helps us find cause without reproducible example lot help sounds like encountering", "d": "1/2017"}, {"body": "aweary sorry clearer reproduce new error thrown user unmounts react component may existed found bug react", "d": "1/2017"}, {"body": "going go ahead close since issue reproducible anymore", "d": "1/2017"}, {"body": "hi bumped removing annotation compiled code successfully managed reduce size app see commit nt seem pr happy contribute needed", "d": "1/2017"}, {"body": "thanks lot adding docs however still obscur use use components tied props state thus majority component extending purecomponent using react component redux example also always wrote component statelesscomponent seems purecomponent also efficient statelesscomponent frandsaw stated shallow equality check may cheaper virtual dom comparison conclusion right purecomponent things fear may missing something good examples component statelesscomponent better purecomponent would great thanks lot help", "d": "1/2017"}, {"body": "something slow try using see helps nothing slow bother optimizing sure way tell going slower reconciliation shallow comparisons everywhere pathological cases shallow equality checks often failing slower rule thumb add one know perf problem verify adding solves problem help", "d": "1/2017"}, {"body": "thank gaearon response helps build first optimize later needed seems like pragmatic way", "d": "1/2017"}, {"body": "progress bug pr fix seems hanging around yet merged", "d": "1/2017"}, {"body": "aweary jquense get test fixture coverage would first browser specific test case", "d": "1/2017"}, {"body": "information junit relicensed cpl epl order able distributed netbeans cpl broad defensive patent clause distribute together similar patents milder", "d": "1/2017"}, {"body": "one resource eclipse public license epl frequently asked questions specifically epl differ cpl section cpl contained following language recipient institutes patent litigation contributor respect patent applicable software including crossclaim counterclaim lawsuit patent licenses granted contributor recipient agreement shall terminate date litigation filed addition recipient institutes patent litigation entity including crossclaim counterclaim lawsuit alleging program excluding combinations program software hardware infringes recipient patent recipient rights granted section b shall terminate date litigation filed first sentence removed epl many members prospective members believed first sentence overly broad viewed inhibitor continued growth eclipse ecosystem", "d": "1/2017"}, {"body": "issue closed believe resolved", "d": "1/2017"}, {"body": "maximilianos thanks", "d": "1/2017"}, {"body": "blasten correct element notupgraded react sets props attributes would set upgraded element would nt access props like would properties", "d": "1/2017"}, {"body": "blasten said messed around method linked last comment say robust approach sure fool proof method giving consumer full control positive side effect less logic necessary decide", "d": "1/2017"}, {"body": "cpojer think ability specify integer determine render depth makes whole lot sense currently using jest left lot work mocking components achieve shallow render get free developer willing absorb cost tradeoff deep rendering however make tradeoff could avoided think nice fit jest something powerful jest using directly nt happening anymore one reason formats output differently namely always accessed ie", "d": "1/2017"}, {"body": "tested react today still reproduce issue nt based master branch thus code fixes issue anyone else experiencing another note tried replacing worked great felixkurniawan made typing stop completely us", "d": "1/2017"}, {"body": "johanbengtsson test tempory fix yes like everyone try step away ie much set custom component tempory fix react working smoothly even temporised callback manage value redux store without performance cost javascript import react component proptypes react import shallowcompare reactaddonsshallowcompare class textinput extends component constructor props super props thisstate statevalue thishandlesonchange thishandlesonchangebind componentwillreceiveprops nextprops const statevalue thisstate const value nextprops shouldcomponentupdate nextprops nextstate return shallowcompare nextprops nextstate componentwillunmount thistimer cleartimeout thistimer thistimer null render const label id thisprops const statevalue thisstate handlesonchange event eventpreventdefault thissetstate statevalue eventtargetvalue thissettimerbeforecallback eventtargetvalue settimerbeforecallback value const onchange delay thisprops textinputproptypes label proptypesstringisrequired id proptypesstringisrequired value proptypesstringisrequired onchange proptypesfuncisrequired delay proptypesnumber textinputdefaultprops delay export default textinput", "d": "1/2017"}, {"body": "mackentoch thanks tip yeah got working well short term work around changing still good solution nt want spend much time unfortunately lot customer universitieshospitals etc individuals nt always allowed upgrade either way unwillingly decided temporarily drop support til proper solution react", "d": "1/2017"}, {"body": "jimfb gitrichard following pr please let us know merge", "d": "1/2017"}, {"body": "got issue reactreduxform react autocomplete setting initial state form rather really wanted nt work oh well set back everything fixed", "d": "1/2017"}, {"body": "reproduce case likely similar original onsenui lazylist render gives performupdateifnecessary unexpected batch number error upgrading leaflet amp reactleaflet going back legacy leaflet alleviates error lazylist component functions correctly cases react version", "d": "1/2017"}, {"body": "may context came issue message popped stupid mistake react native code inside view onpress event instead posting case help anyone else save time", "d": "1/2017"}, {"body": "message popped working select reduxform initially select initialised empty array options accidentally action creator made gt let staticdata lt switch number countryid case staticdata id name id name break return type fetchkey payload data staticdata changing initial type array object unexpected reducer amp view changing highlighted line started working fine reduxform amp react", "d": "1/2017"}, {"body": "lkroner bug fixed master fixed please verify", "d": "1/2017"}, {"body": "maybe given comments confused delegating aweary", "d": "1/2017"}, {"body": "seeing thing app could nt render immutablejs list googled bit found github issue please see leondragan comment dec instead importing main indexjs file imported webpack react reactdom", "d": "1/2017"}, {"body": "write fake proptypes validation function run first inside component const mycomponent props gt const hasvalidprops wrappingproptypesvalidation props hasvalidprops return null return", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "getting error nodeenvdevelopment bug", "d": "1/2017"}, {"body": "got error due exactly reason johndugan brought", "d": "1/2017"}, {"body": "server side client side use match", "d": "1/2017"}, {"body": "bad nt", "d": "1/2017"}, {"body": "migration going", "d": "1/2017"}, {"body": "nothing happening right pretty sure looking year since want compile react away flat bundle case haste useful us moving files easily still nice sure approach would take", "d": "1/2017"}, {"body": "thanks response one question could please explain mean compiling flat bundle different guys", "d": "1/2017"}, {"body": "idea always compile react single file even npm would use optimized bundler nt generate module registry code like rollup resulting bundle smaller would also help solve performance issues server environment accessing processenv repeatedly expensive", "d": "1/2017"}, {"body": "jimfb clarify last sentence since official documentationtutorial still mentions prop types one first primary pages surprising one use case proptypes generate test pages components show form fields props specified suggestions use case jsdoc since involves parsing script files nothing test dynamically check reasonably", "d": "1/2017"}, {"body": "syranide whoa beers probably refactor code looks like", "d": "1/2017"}, {"body": "ffxsam contrary give accidentally keep references dead dom nodes components potentially preventing getting garbage collected", "d": "1/2017"}, {"body": "oh wait misunderstood comment yes need refactor pattern simple", "d": "1/2017"}, {"body": "nt work well though use pattern op said ref callback fires every time component renders mention div toplevel btw nt know reason getting repeated ref callback invocations", "d": "1/2017"}, {"body": "ref callback fires every time component render problem expected behavior expected", "d": "1/2017"}, {"body": "case worried bottlenecks extremely unlikely setting field performance bottleneck app extreme case hoist bound class method like event handlers avoid extra calls", "d": "1/2017"}, {"body": "understand getting called upon rerenders sort get back second suggest course perfectly fine except scenario relying upon ref callback trigger another callback push information dom node array case would get several duplicates node ref callback fired rerender dom node mount obvious solution case use nt understand ref callback called upon rerender get new function every time nt determining factor whether dom node already mounted words let say rather internal react logic saying upon rerender hey new function call nt instead say already invoked ref callback img wo nt", "d": "1/2017"}, {"body": "except scenario relying upon ref callback trigger another callback push information dom node array could instead nt understand ref callback called upon rerender nt determining factor whether dom node already mounted imagine case bit contrived illustrates api makes possible pass different callbacks every time possible somebody maybe layer indirection still clean old ref would terrible footgun user actually intends pass different ref would nt respect would keep old reference set new one would make initial mount behave inconsistently update react apis eg props work hope makes sense", "d": "1/2017"}, {"body": "maybe thinking wrong would still expect fire component mounts false would call always pictured callbacks sort individual dom nodes fire node question rendered first time maybe thinking wrong way could componentdidmount componentdidupdate instead thought need actual dom node run would require js componentdidmount const node thisrefsrootnode thispropsonmount rect nodegetboundingclientrect render return provide context building component renders file icons folders react component component reports parent upon mounting knows rect coordinates folder icon used dragging files know whether user hovering folder one", "d": "1/2017"}, {"body": "component mounts propsisavatar false would call thishandlenormalref react works generally case initial props way special updated props usually react update prop would case first value gets stuck thought need actual dom node run getboundingclientrect would require use string refs js componentdidmount thispropsonmount rect thisrootnodegetboundingclientrect render return", "d": "1/2017"}, {"body": "oh ok yeah makes lot sense fired callbacks executed would totally work dumb code removed thanks clarifying dan", "d": "1/2017"}, {"body": "componentdidmount fired ref callbacks executed yes except component unmounting ref gets called null value necessary could get component unmounting", "d": "1/2017"}, {"body": "er know know react sorry replied haste", "d": "1/2017"}, {"body": "seeing something strange understanding component updates simply call reference dom element time called unmounts following correctly occurring every time controlled get updated new value get called instantly calls reference dom element nt always called reference dom since unmount see never called type updates state", "d": "1/2017"}, {"body": "straight docs react call callback dom element component mounts call unmounts two references page documentation code example intregrisist absolutely correct example passed every key press text box even though component never unmounted either documentation needs changed clarify expected behavior something needs fixed hope agree latter case would weird expected behavior", "d": "1/2017"}, {"body": "oh wait misunderstood comment yes need refactor pattern simple avoid add unnecessary function also thanks clearing looking documentation also thought acts like", "d": "1/2017"}, {"body": "docs updated published website yet see last section", "d": "1/2017"}, {"body": "jedmao intregrisist chance read thread yes docs incomplete believe explained happening explanation last conversation ffxsam hope helps", "d": "1/2017"}, {"body": "confused badly first especially warning would pop change field value undefined set first render", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "moodysalem arrow functions nt", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "thanks heads gaearon", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "news react iterates valueseq entryseq twice still happens react using immutablemapmap directly ignoring error using maps children yet fully supported works fine though weird", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "someone find happened index used key always use unique id instead index", "d": "1/2017"}, {"body": "needed get bounding rect arbitrary potentially stateless component hoc solution came js render return someotherfunc thisinputwrap amp amp thisinputwrapfirstchild let inputrect thisinputwrapfirstchildgetboundingclientrect ie wrap arbitrary component try get bounding rect wo nt work correctly use get dom node wrapped component unless renders case also", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "others end trying solve problem extend spicyjs answer use inheritance rationale composition inheritance react", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "deal following case want listen transitionend dom element add event listener ref callback currently right way", "d": "1/2017"}, {"body": "far see node addedremoved sometimes code actually note however supply callback inline adding removing listeners every render docs one could argue better abstraction would extract part code component would nt necessary call wrong way node static never addedremoved would probably best moving listenerlogic ref instead", "d": "1/2017"}, {"body": "seeing outcome issue reactrouterbootstrap using directly expects array data type argument nt see makes sense anything epsitec suggested update based documentation impression argument received needs array data type unfortunately single child order accommodate code uses needs react element object yikes suppose need hack code uses accommodate need something like following javascript arrayisarray children amp amp childrenlength children children return reactcreateelement type props children", "d": "1/2017"}, {"body": "submited new issue controlled components temporary solution uncontrolled controlled components input textarea uploaded reactcompositionevent", "d": "1/2017"}, {"body": "let make happen", "d": "1/2017"}, {"body": "yesmeck happy see news saw test focus webkit separate chrome safari chrome change event triggered order", "d": "1/2017"}, {"body": "eyesofkids added new test case chrome", "d": "1/2017"}, {"body": "allow return best way write render returning", "d": "1/2017"}, {"body": "might allow returning future best way write render returning thispropsoptionalproperty amp amp lt gt sure asking show full example issues", "d": "1/2017"}, {"body": "nice would elegant", "d": "1/2017"}, {"body": "final answer", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "hi encountered exact issue found cause forgotten pass buggy code working code error hard trace back since component nt render maybe check could implemented parent constructor detect issue nb tested react nt current exact version number hand", "d": "1/2017"}, {"body": "nt appear issue", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "prinzhorn stumbled across even probably nt need workaround anymore believe know another one setting enclosing adding still show content enclosing anymore edit probably enough uidiv", "d": "1/2017"}, {"body": "work around get react ignore let html malformed prevents rendering basically whole page safe admin user inputing html theoretically make mistake catch error instead render catch redefining sure someone already built much better solution", "d": "1/2017"}, {"body": "zargold version react would expect react problem since use documentcreateelement rather generating html string", "d": "1/2017"}, {"body": "going close since nt using code path cases", "d": "1/2017"}, {"body": "hi spicyj using guess try holding nose updating looks like everything works fine compatibility issues see fares hits regression testing", "d": "1/2017"}, {"body": "pr got closed fix nt merged still needed", "d": "1/2017"}, {"body": "thinkxl pr closed since got outdated believe still open accepting pr implements anyone wants work", "d": "1/2017"}, {"body": "aweary cool thanks quick response", "d": "1/2017"}, {"body": "sebmarkbage could please clarify related fiber architecture thanks", "d": "1/2017"}, {"body": "might helpful", "d": "1/2017"}, {"body": "spent almost hour trying figure problem zpao agree others thread documented somewhere perhaps gotchas section documentation", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "happen want extend setstate inside component definition thenable could expanding spectrox syranide proposals though see could considered antipattern feel like could useful cases need something new state involve rerendering component case usually involves changing canvas context based new rendered dimensions example managing separately react update cycle since react really nt care happening inside canvas cases probably would differ", "d": "1/2017"}, {"body": "believe setting state becomes asynchronous implementation react fiber", "d": "1/2017"}, {"body": "yet async default eventually however already async cases", "d": "1/2017"}, {"body": "conantonakos check section documentation state updates may asynchronous", "d": "1/2017"}, {"body": "specific unknowns returning promise setstate thinking committing promises rule possible features actually triggers resolvereject flushing update queue individual setstate transaction performance issues producing promise every setstate call might otherwise never get used last item returned object implemented promise public api would nt create promise every call invoked reactcomponent implemented resolving whenever component state transaction queue flushed", "d": "1/2017"}, {"body": "committing promises rule possible features synchronous resolve would one would still synchronous cases performance issues producing promise every setstate call might otherwise never get used yes need remember call callback right point time keep list components provided callback however promises always every single update case somebody happens use promise last item setstate returned object implemented promise public api would nt create promise every setstate call invoked seems awkward still allocation ca nt avoid queueing somebody might promise completed ca nt avoid actually storing callback every call need gain using promises bit fringe feature anyway used corner cases normally use lifecycle methods add complexity", "d": "1/2017"}, {"body": "need gain using promises bit fringe feature anyway used corner cases normally use lifecycle methods add complexity fwiw vote return promise concerns mentioned good concrete reasons", "d": "1/2017"}, {"body": "thanks gaearon aweary nt fully aware could use like", "d": "1/2017"}, {"body": "setstate returning promise consider scenario sets state sets state values split two functions due business logic reasons sometimes happens sometimes b happens sometimes happen b happen functions called race condition ensues mutates setstate takes time update comes gets stale value stomps changes times b happens first immediately followed current workarounds ideal callback hell smash b one monolithic function", "d": "1/2017"}, {"body": "peacechen already api use case function receive current never stale values state props arguments return next state safe call several times example js function increment prevstate return value prevstatevalue function multiply prevstate return value prevstatevalue inside component thissetstate increment thissetstate multiply", "d": "1/2017"}, {"body": "gaearon thanks aware callback setstate supports request add support promises setstate avoid callback hell", "d": "1/2017"}, {"body": "solution rendering lot items screen virtualization react specific problem done frameworks well react datagrid component although depends structure row data beyond certain number rows simply achieve decent performance without virtualization without react library implements virtualization may wish investigate", "d": "1/2017"}, {"body": "seems react default behavior swallow errors without output makes debugging incredibly difficult nt know still works way recent versions would suggest default spitting warning least anything would tell developer happened thanks fyi workaround implemented top level component terrible inconvenience find issue thread nt error go run chrome pause caught exceptions find", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "bitmage true implement unstablehandleerror react nt log anything rethrow error like trycatch future version react log error regardless though see preview", "d": "1/2017"}, {"body": "spicyj cases unstablehandleerror called trying build hoc like callback seem ever called javascript import react react const renderfallback gt error see export const errorboundaryconstructor fallbackcomponent renderfallback onerror undefined gt wrappedcomponent gt return class errorboundary extends reactcomponent export const defaulterrorboundary component gt return errorboundaryconstructor component example client code javascript import react react import portal reactportal import classnames classnames import defaulterrorboundary utilserrorboundary const fullscreenportal reactcreateclass render return export default defaulterrorboundary fullscreenportal", "d": "1/2017"}, {"body": "error thrown nt see code", "d": "1/2017"}, {"body": "spicyj children fullscreenportal wanted know hoc makes sense usecase antipattern thinking might something missed implementation like children composite component already rendered element tree", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "upvoted wanted share valid use case suppose buttons want css liquid layout left center right left button always visible two conditionally visible react specifically react native using flexbox rendering center right buttons nt position correctly wrapped singular view yes could split center right buttons methods would introduce lot redundant code since share much behavior", "d": "1/2017"}, {"body": "like says already aware use cases feature hard work supporting already half dozen people calling flexbox issue since nt seem like discussion productive locking update news new implementation", "d": "1/2017"}, {"body": "ever get fixed", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "bad practice sure coded zero entire page join project symfony uikit jquery etc etc uses reactjs say team hey bad practices delete important css please", "d": "1/2017"}, {"body": "really surprised overlooked long support absolutely needed css many use cases", "d": "1/2017"}, {"body": "ok best practice guideline majority developper works budget leads quick dirty best case using bootstrap foundation uikit co still leader vanilla htmlcss integration habits use important dirty css way providing control override inheritance also lot great projects driven vjeux famous presentation powerful jss glamor styledcomponent etc still react responsibility check css", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "flow nice ca nt check runtime option use decorator", "d": "1/2017"}, {"body": "nt support recursion eg", "d": "1/2017"}, {"body": "bump may ask since eliminating native html properties became acceptable frameworks people rarely use data react blame inexperience react communityprogrammers myopia react nt constitute whole web veterans yeah jquery programmers would know data properties often used", "d": "1/2017"}, {"body": "discussing making working data aria better like eliminating", "d": "1/2017"}, {"body": "appreciate efforts apologies previous comment", "d": "1/2017"}, {"body": "still problems ios chrome version contrary described though autofilled content flashes briefly form removed consistent stored state however autofill still nt work", "d": "1/2017"}, {"body": "probably get point github pages might start enforcing monthly hit limits point domain could caching cdn top site move powerful host future needed", "d": "1/2017"}, {"body": "agree nice flexibility github likely needs react site needs nt think rate limit issue pressing", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "going close since plan changes transitiongroup react repo instead maintained community file issue new repository still affecting thanks", "d": "1/2017"}, {"body": "using experiencing issue looking release notes three minor releases since nt see fixed closed issue seems tracking case seems like issue much thorough description problem", "d": "1/2017"}, {"body": "look history see issue closed open pr see milestone set fix put introduces breaking change behavior know possible backport jquense nhunzaker would likely able answer", "d": "1/2017"}, {"body": "possible even pr already", "d": "1/2017"}, {"body": "oh nice make list dom prs hanging awaiting review add umbrella relevant cases manual tests", "d": "1/2017"}, {"body": "todo list need test stuff locally think merge make sure add relevant cases get chance review", "d": "1/2017"}, {"body": "anyone working browser test fixture got time write one", "d": "1/2017"}, {"body": "planning moment yet feel free jump", "d": "1/2017"}, {"body": "worries plenty test cases write got pr related shift gears", "d": "1/2017"}, {"body": "would love see parody sooooo useful user experiance", "d": "1/2017"}, {"body": "steida swivelgames janhancic use video attribute react jsx", "d": "1/2017"}]