[{"body": "class properties well arrow functions hence fails", "d": "9/2018"}, {"body": "workaround make plain old js const modelfactory function attrs options return new backbonemodel attrs options class somecollection extends backbonecollection somecollectionprototypemodel modelfactory new somecollection id somemodelid", "d": "9/2018"}, {"body": "yes looks unpleasant especially situation application approach extending classes directly prototype used plus collection extended many methods need scroll several screens see model property kills benefits syntaxic sugar classes", "d": "9/2018"}, {"body": "yeah ugly writing coffeescript nt look bad still hack", "d": "9/2018"}, {"body": "patched solution pretty working nt using backbone stickit moved version", "d": "9/2018"}, {"body": "literally code written issues", "d": "9/2018"}, {"body": "certain question seem describing backbone works docs events change model options model attributes changed change attribute model value options specific attribute updated events always triggered attribute changes", "d": "6/2018"}, {"body": "model attribute set value set variable recommend stack overflow questions like", "d": "5/2018"}, {"body": "models urls ids", "d": "4/2018"}, {"body": "ok thanks ended extending model guess keep good work", "d": "4/2018"}, {"body": "created small pr proposed changes", "d": "4/2018"}, {"body": "thanks", "d": "4/2018"}, {"body": "tsangjustin browser using exabeam comment explains happening depth gwynjudd mentioned url encoding changed chrome released dec lines recent influx comments tickets issue also may existed firefox due comments mentioned tickets however tested time wrote workaround issue", "d": "4/2018"}, {"body": "controller called automatically views lifecycle know stop listening view explicitly calls destroyed controller thing", "d": "2/2018"}, {"body": "updated example make clear question removed object nt clean listeners parent object thought work way clean listeners objects listen", "d": "2/2018"}, {"body": "removes event listeners view made event listeners objects made view want remove event listeners attached controller need call", "d": "2/2018"}, {"body": "correct properly documented first case getting last call nt change anything second case getting call made changed words provides changes last call clearly documented", "d": "2/2018"}, {"body": "right documentation russian language delayed moment incorrectly translated look original source created issue nice day", "d": "2/2018"}, {"body": "sounds fine create object guaranteed instantiated search component store events hears listening component created later look stored events starting problem", "d": "1/2018"}, {"body": "exactly already thinking could part backbonejs backbone would take care storing sticky events offer api triggering clearing", "d": "1/2018"}, {"body": "backbone extendable wanted add standard functionality perhaps plugin could suffice", "d": "1/2018"}, {"body": "option", "d": "12/2017"}, {"body": "afraid nt chance", "d": "12/2017"}, {"body": "ppisecky use idattribute define generated id sent network always", "d": "12/2017"}, {"body": "please use stackoverflow gitter channel mailing list questions github issues maintaining framework", "d": "12/2017"}, {"body": "issue ing docs create method accept either attributes hash existing unsaved model object unsaved meaning id id expecting returned server anything error finds", "d": "12/2017"}, {"body": "see point completeness sake workaround get id add id save attrs", "d": "12/2017"}, {"body": "sounds like working correctly adding raw data id allowed add twice really think problem feel free provide test case", "d": "11/2017"}, {"body": "misinterpret issue idea parsed version op nov schreef jeremy ashkenas notifications githubcom sounds like working correctly adding raw data id allowed add twice really think problem feel free provide test case receiving authored thread reply email directly view github mute thread", "d": "11/2017"}, {"body": "misinterpret issue idea parsed version jsfiddle codepen demonstrating would help understand issue", "d": "11/2017"}, {"body": "see van luiz am\u00e9rico notifications githubcom verzonden dinsdag november aan jashkenasbackbone cc rianwouters author onderwerp jashkenasbackbone model id removed byid model id available unparsed model misinterpret issue idea parsed version jsfiddle codepen demonstrating would help understand issue receiving authored thread reply email directly view github mute thread", "d": "11/2017"}, {"body": "see id returned parse ignored removed seems legit bug", "d": "11/2017"}, {"body": "passing works expected javascript var model backbonemodelextend parse function r return id rfoobar lorem rlorem var raw foo bar lorem ipsum var new model raw parse true consolelog", "d": "11/2017"}, {"body": "thanks reason obviously collectionset parse models checking already existing collection op nov schreef luiz am\u00e9rico notifications githubcom see id returned parse ignored removed seems legit bug receiving authored thread reply email directly view github mute thread", "d": "11/2017"}, {"body": "test works using collection collectionfetch calls collectionset parse true however collectionset parse model checking model already collection add model new cid however also remove old cid also removed id byid hash workaround add following collection workaround parse models modelsforeach gt midattributeid whatever needed get id return models nt nice course need add knowledge model parsing collection believe solution could move model models thispreparemodel model options add beginning loop side effect think simplify var attrs thisismodel model modelattributes model var attrs modelattributes van jeremy ashkenas notifications githubcom verzonden donderdag november aan jashkenasbackbone cc rianwouters author onderwerp jashkenasbackbone model id removed byid model id available unparsed model passing parse true works expected var model backbonemodelextend parse function r return id rfoobar lorem rlorem var raw foo bar lorem ipsum var new model raw parse true consolelog receiving authored thread reply email directly view github mute thread", "d": "11/2017"}, {"body": "closed", "d": "12/2017"}, {"body": "want parse data model instantiation use option docs parse called whenever model data returned server fetch save reason expect parse happen every instantiation would bad idea general translating server data workable data try use nonworkable data directly backbone available", "d": "12/2017"}, {"body": "see miss point save latest jsfiddle update see collectionadd collectionfetch call modelparse checking model exists therefore idattribute direct property raw model check fail therefore model added removed id hash jsfiddle see tests one plain models one modelparse collections equal", "d": "12/2017"}, {"body": "save tests fiddle latest version backbone", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "nt expect parser model used use collection work", "d": "12/2017"}, {"body": "clear feels really inconsistent anyhow workaround indeed however would easy solve would improve code", "d": "12/2017"}, {"body": "afraid nt know means get specific error scanner ideally line number snippet code triggering error otherwise much help", "d": "11/2017"}, {"body": "probably put comment cdnjscom though tutorial repo repo nt maintain control information", "d": "11/2017"}, {"body": "thanks info made comment page instead", "d": "11/2017"}, {"body": "probably going get responses asking questions like stackoverflow", "d": "11/2017"}, {"body": "asked question regarding stackoverflow thought issue regarding backbone since used simple step use backbone conflict unable use", "d": "11/2017"}, {"body": "really ca nt figure trying solves shared namespace loading script particular way assuming using module loader typescript like webpack browserify something nt problem solves module loader necessary var backbonenoconflict var backbone", "d": "11/2017"}, {"body": "using conflict since code plugin another app using another version backbone enabling plugin loading version backbone conflicting client version backboneand assume using loader", "d": "11/2017"}, {"body": "sorry still nt make sense object plugins exposing backbone causing issue need expose want use another version", "d": "11/2017"}, {"body": "let explain example suppose main app using backbone version window loaded backbone version load plugin code time load backbone used codeif u check console backbone display version main app getting crashedso solution storing version backbone conflict older one restoring backbone old version ie main app using", "d": "11/2017"}, {"body": "setting back older version nt perhaps code loaded prior plugin calling really need happen much point within code using return value returns able use regular everywhere need issues conflicting backbone versions work nt would suggest additional copy backbone loading somewhere", "d": "11/2017"}, {"body": "yes setting back older version u check console backbone version ownbackbone version guess missing context problem typescript build error storing backbonenoconflict variable using itspecifically say use backbone noconflict instance typescript", "d": "11/2017"}, {"body": "use function returns typescript function seems job incredibly simple nt seem like issue backbone also care return changes backbone version window return value function nt particularly useful", "d": "11/2017"}, {"body": "function job well see correct behaviour using console window ie javascriptbut typescript showing errormy point support typescript perfectlyif yes could please give example noconflict usage backbone typescript", "d": "11/2017"}, {"body": "seems work", "d": "11/2017"}, {"body": "thanks working perfectly latest version typescript version using", "d": "11/2017"}, {"body": "ok maybe good idea since patching jquery managed get around changing jquery done callback add status code success callback determine successful issuccess status status gt amp amp status lt status", "d": "10/2017"}, {"body": "nt think really anything backbone good luck", "d": "11/2017"}, {"body": "go", "d": "10/2017"}, {"body": "model within collection must unique id need nonunique would recommend setting different attribute name unique even undefined", "d": "10/2017"}, {"body": "issue recent raised marionette well currently happens nothing view appears work adhere jquery rendering appending may error given end blank view expecting prefilled dom nt really think creating element ideal solution nt really follow imagine intention setting el selector honestly prefer nt take selector easy enough give view el since take selector think better error nt find", "d": "9/2017"}, {"body": "working intended pass selector needs exist otherwise pass", "d": "12/2017"}, {"body": "specific change docs like propose", "d": "9/2017"}, {"body": "jashkenas created pr including proposal", "d": "9/2017"}, {"body": "merged thanks", "d": "12/2017"}, {"body": "hmm interesting add model collection byid add two properties modelid modelcid reference model issue line id undefined byid contains modelid foo collection nt special logic change modelid value null check line also change unset set null undefined thismodelset id null ps think never need set model id null undefined anti pattern", "d": "9/2017"}, {"body": "yes never still bug fix making sure changing value first", "d": "9/2017"}, {"body": "write response switch need use xhr", "d": "9/2017"}, {"body": "tmolashyndmytro writing mistake code wrote word instead fix issue idea problem", "d": "9/2017"}, {"body": "data contains xhr consolelog xhr xhr null", "d": "9/2017"}, {"body": "empty nt need data want response http status code", "d": "9/2017"}, {"body": "strange write xhr empty maybe fail server userbaseurl also ceck request url networks tab", "d": "9/2017"}, {"body": "maybe nt jquery", "d": "8/2017"}, {"body": "hmm maybe change function prototype something like cheaper detecting string whatever everyone parse", "d": "8/2017"}, {"body": "cheaper detecting string whatever everyone parse true could said properties support function string used convenience would nice parse well", "d": "8/2017"}, {"body": "knowledge take function underscore related functions take string definitely useful interact known data structure manner handled cases generating predicate primarily string function allows dynamically set opposite primarily method taking multiple arguments see might similar pattern many usecases nt matter simply adding code seems certainly measure guessing part able override string increase complexity lower performance suitable alternative addressed fairly simplistic case parse nt think convenience justifies cost", "d": "8/2017"}, {"body": "think got idattribute confused function idk bad anyway really admire way backbone avoided temptation become everything framework proposal stays true would hope see community thinks dismissing based unproven perf concerns able override string would add complexity consumers aligns nicely existing methods seems logical assuming use case common even given docs look nice vs whether adds code complexity andor lowers performance remains seen proposed code change doubts nt much use methods called much frequently collection parse designphilosophical decision rather implementation imo", "d": "8/2017"}, {"body": "nt think going make change clearer function", "d": "12/2017"}, {"body": "would bug think useful know whether change event fired attribute unset value changed nothing", "d": "9/2017"}, {"body": "think query changedattributes moreover knowing name method caused event unset case would exception backbone provide event", "d": "9/2017"}, {"body": "options backbone stashes information change etc options passed along think fine information nt need affect handler", "d": "9/2017"}, {"body": "download use locally", "d": "8/2017"}, {"body": "also backbone docs hosted github pages", "d": "8/2017"}, {"body": "easy learn", "d": "8/2017"}, {"body": "try use", "d": "8/2017"}, {"body": "intended return plain object copy attributes desired keys omitted want mutate model removing key firing related events looking", "d": "8/2017"}, {"body": "want submit pull request see required changes would look like", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "changing would support deal breaker browser support nt mentioned backbone page", "d": "6/2017"}, {"body": "believe unofficially dropped", "d": "6/2017"}, {"body": "yes sounds fine deal breaker would say keep support browsers gt global market share currently cool", "d": "6/2017"}, {"body": "change essentially primary goal backboneesnext remove dependence underscore possible previously commented issue good article peruse regarding native options vs underscore lodash assume mainline bb effort target native functions es effort backboneesnext targeting stage switching native functions suggestion ship bb already enough changes warrant release target include potential switch native functions perhaps changes glad help pr regard switch native options proof concept already removed underscore events functionality backboneesnextevents mainly switching though might changes ca nt recall offhand waiting least drop update tracks mainline bb continue work backboneesnext diverge bit", "d": "6/2017"}, {"body": "updates found need changes pr make different pr ci start working", "d": "6/2017"}, {"body": "rafde indeed good catch pretty straightforward mentioned changes lodash roadmap apply bb maintainers ship", "d": "6/2017"}, {"body": "hi news would love bb lodash help required please announce thanks", "d": "9/2017"}, {"body": "far understand options passed function triggers event add model collection like triggered event collection parameter said think issue tracker issues probably better likely get replies post question stackoverflow", "d": "6/2017"}, {"body": "ok thanks", "d": "6/2017"}, {"body": "bug app", "d": "6/2017"}, {"body": "trofimenkoai might ask maybe try make jsfiddle least code sample", "d": "6/2017"}, {"body": "familiar canvas creating native html element existing canvas element javascript var canvasview backboneviewextend tagname canvas render function modify canvas element element already exists page javascript var canvasview backboneviewextend el mycanvas selector render function modify canvas element", "d": "5/2017"}, {"body": "npm latest release master yet released", "d": "5/2017"}, {"body": "easy way see kind traffic com domains getting", "d": "4/2017"}, {"body": "given permanent redirect hardly anything google searching links appears confirm think vast majority potential harm someone grab names something nasty along much smaller impact folks type browser bars", "d": "4/2017"}, {"body": "think popularity framework almost guaranteed someone least going squat fill ads sure necessarily problem though might also happen someone getting domain copypaste backbonejsorg html inject malicious stuff downloads probably going pain people fall kind stuff also maintainers probably need keep explaining users backbonejscom fact actual backbone website", "d": "4/2017"}, {"body": "dotorg seems interesting framework take account mariadb dotcom amp dotenv instance meant keep many purposes community international one look brazilian many people would like contribute establish branding improve network like gain hakuno backbone dot com like one directory dotcom bb chapter see example like put curriculum vitae special involvement et cetera mr jashkenas many ones love backbonejs opportunity make community stronger use power create one team manage free ps examples even capable generating jobs around world stuckouttongue", "d": "4/2017"}, {"body": "nt think need com domain fyi paying market rate com registrations", "d": "7/2017"}, {"body": "domain already expired make offer minimum issue closed link new owner", "d": "7/2017"}, {"body": "oh well interesting see happen domain", "d": "7/2017"}, {"body": "see previous tickets believe bug certain versions firefox made impossible work around backbone specific change like propose", "d": "12/2017"}, {"body": "hello encountered issue developing company investigated thoroughly also seen previous tickets conclusion issue believe root problem located lines code within function point decoding fragment matching setting hash encoded match parity set encoded well however currently set decoded instead always trigger url special characters solution simply decode fragment solution chosen decoding fragment matching done using encoded format fragment matching done decoded format would compatible firefox let know guys think sounds good make pr", "d": "12/2017"}, {"body": "sorry question unrelated backbone inappropriate", "d": "3/2017"}, {"body": "see bind change events notified model collection modified listen add remove events fetch collection server use full suite underscorejs methods event triggered model collection also triggered collection directly convenience allows listen changes specific attributes model collection example documentson change selected answer question", "d": "3/2017"}, {"body": "oh awesome wasnt directly clear since event related listed directly paragraph events", "d": "3/2017"}, {"body": "looks like found root cause issue project custom code cashed version old code wrong bad goog bad good rap js essentials", "d": "2/2017"}, {"body": "nt backbone thing going hard know issue dealing think also whoever wrote", "d": "2/2017"}, {"body": "think wrong project", "d": "2/2017"}, {"body": "sounds like problem tappy behind scenes use delegate threearg version binds delegator view element might start", "d": "1/2017"}, {"body": "passing", "d": "1/2017"}, {"body": "situation arises unintentionally passing instance could expect cause stop listening however set dynamically listeners removed line executed intention line code", "d": "1/2017"}, {"body": "behaving intended general javascript apis making distinction antipattern", "d": "1/2017"}, {"body": "russplaysguitar isnt option", "d": "1/2017"}, {"body": "thanks reviewing clarifying intended behavior elgubenis yes pattern need remember use thanks", "d": "1/2017"}, {"body": "problem backbone server configuration pointing index file solution indexphp indexhtml apache server using nodejs solution depends framework use ect", "d": "1/2017"}, {"body": "using nodejs indeed start local server grunt dropped indexhtml url ok using routes least point right direction configure local server work hashless routes jan mateuszwrobel notifications githubcom wrote problem backbone server configuration pointing index file solution indexphp indexhtml apache server using nodejs solution depends framework use ect receiving authored thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "google pushstate support nodejs", "d": "1/2017"}, {"body": "pass wait true like wait server respond removing model collection hope helps", "d": "1/2017"}, {"body": "well look reading documentation help sorry opening ticket creating needless noise", "d": "1/2017"}, {"body": "inappropriate", "d": "1/2017"}, {"body": "question nothing backbone", "d": "1/2017"}, {"body": "oops sorry nt noticed", "d": "1/2017"}, {"body": "discussed multiple issues see probably returns last changed attributes via call object regardless last diff attributes hash passed parameter bug model saved managed left backbone provides tools accomplish easily question stack overflow one best place get answer", "d": "1/2017"}, {"body": "yup yup thanks emileber", "d": "1/2017"}, {"body": "yeah remember bit confused first tried using update event doc clarification would appreciated", "d": "2/2017"}, {"body": "broke backwards compatablity see", "d": "2/2017"}, {"body": "backbone call modelparse first time page loads nt calls parse time called something else funny going app", "d": "11/2016"}, {"body": "noticed problem", "d": "11/2016"}, {"body": "think pr tested type trying use key", "d": "11/2016"}, {"body": "uncertain proceed referenced master pr nt changed anything yet even check would inappropriate use model advance", "d": "11/2016"}, {"body": "sorry wrong place", "d": "11/2016"}, {"body": "thats pretty useful keep local state moving throughout app least apps thats useful already seen examples using way understand idea move models collections models forwards backwards views routers backboneradio window global directly instantiating using instance something could implement fetch method clears model fetching modelclear options keep mind idattribute default id removed also would like keep link preserve clear set right clear thats normally necessary fetch rest api endpoint single modelresource", "d": "11/2016"}, {"body": "shawnemullen closed right cc jashkenas", "d": "2/2017"}, {"body": "created pr correct", "d": "12/2017"}, {"body": "think going add promises backbone holistically like fits starts", "d": "11/2016"}, {"body": "looks like issue also nt layoutview itemview anymore merged", "d": "11/2016"}, {"body": "version using layout view", "d": "11/2016"}, {"body": "sorry watched incorrect documentation", "d": "11/2016"}, {"body": "arvara little offtopic also shave chars code instead keep style moving onwards code", "d": "11/2016"}, {"body": "provide jsfiddlecodepenchoice code sharer issue difficult know exact issue without display exact scenario caused issue", "d": "10/2016"}, {"body": "using backbone marionette enhance application creating everything still local machine provide data source setting page search input enter something search input fetches server users match search term displays table everything set working users fetched correctly beginning searching specific users created jsfilldle js code marionette returns view", "d": "10/2016"}, {"body": "ok realized issue expect fetches clear collection looking collectionfetch reset true reset collection display got back next time try ask question channel others help issues mostly bugs support", "d": "10/2016"}, {"body": "thank sorry issue really looked thinking bug backbone merging new result", "d": "10/2016"}, {"body": "want start pushstate true future please use stackoverflow questions like", "d": "10/2016"}, {"body": "nope special function special event allows optimize large changes contents collection also fired code would careful make sure doublework", "d": "10/2016"}, {"body": "typically never good idea modify objects nt create javascript said nt always control app running someone else environment lord knows employ pretty crazy defensive code counter horrific hacks javascript developers put site thanks reporting closing", "d": "10/2016"}, {"body": "ubuntu chrome whenever click either english string one diacritics still get single alerts maybe problem backbone local stack", "d": "10/2016"}, {"body": "hello reports also seeing issue investigation could replicate using jsfiddle chromewindows safari mac see issue root problem seems webkit replicates issue location hash url encoded chrome replicate url hash encoded attach screenshots showing behaviour causes route fire twice firstly route function fires due jsfiddle code calling routenavigate calls loadurl expected behaviour happens platforms wo nt mention following handling event hash change event fires causes checkurl method fire note value locationhref return value thisgetfragment encoded value thisfragment encoded check line fails causes line thisnavigate causes route function fire second time", "d": "11/2016"}, {"body": "chrome values different note time windowlocationhref thisgetfragment encoded check line succeeds line skipped second route happen", "d": "11/2016"}, {"body": "actually confusing originally thought encoded version href safari nt url encoded version original url value decodes printable value", "d": "11/2016"}, {"body": "information appears straight bug safari set locationhash containing diacriticals seems get corrupted", "d": "11/2016"}, {"body": "latest webkit nightly corruption nt occur behaviour still going different chrome note url remains encoded unlike chrome decodes getting locationhref nt know one correct", "d": "11/2016"}, {"body": "open dev console browser copypaste current state dom course comes manual work since download css amp image files nt think needs kind special support backbone tommy notifications githubcom possible enable static output backbone app common example would github pages receiving subscribed thread reply email directly view github mute thread bence er\u0151sme github", "d": "10/2016"}, {"body": "thanks answers issue", "d": "10/2016"}, {"body": "couple solutions tried years usually rely running dom implementation serverside node like jsdom phantomjs outputting html string try googling serverside rendering backbone suggestions use case simple like erosb mentioned copy manipulate needs", "d": "10/2016"}, {"body": "awesome thanks", "d": "10/2016"}, {"body": "jquery optional dependency backbone nt need build backbone app app uses jquery need depend explicitly expose backbone script tag build tool backbone automatically pick", "d": "10/2016"}, {"body": "thanks feedback", "d": "10/2016"}, {"body": "nope use backbonejs use model use collection nt use view done", "d": "9/2016"}, {"body": "good luck", "d": "9/2016"}, {"body": "willing provide solution would like know whether really valuable developers", "d": "9/2016"}, {"body": "date field need select future date means user select current date past date", "d": "9/2016"}, {"body": "meant nested change operations future please use mailing list stackoverflow questions github issues maintaining framework", "d": "9/2016"}, {"body": "hm model attribute factory function used fine assuming polymorphic models use something must override tests examples", "d": "9/2016"}, {"body": "thanks clarification hindsight see docs allude indeed models utilise perhaps doc entry collectionmodel include note pointing one modelid entry highlight possible situation", "d": "9/2016"}, {"body": "note modelid docs would maintainers agree reference collectionmodel addresses using factory method would helpful", "d": "9/2016"}, {"body": "sure open pull", "d": "9/2016"}, {"body": "tried globalbackbone requiere backbone yet tue sep vesa nikkil\u00e4 notifications githubcom wrote factory root exports var rootbackbone factory root exports could nt get work otherwise receiving subscribed thread reply email directly view github mute thread", "d": "9/2016"}, {"body": "meant require edit mobile sorry", "d": "9/2016"}, {"body": "yes backbonejs nt return anything function gets executed module require moduleexports anything case node guess quick fix would assign backbone global extensions assume backbone global variable", "d": "9/2016"}, {"body": "backbone works fine commonjs node require path specifically commonjs please try stackoverflow help debugging", "d": "9/2016"}, {"body": "backbone clientside javascript framework nt generate http responses therefore responsible content http response way better look wmws service provides error code johnnykhoueiry notifications githubcom code stand next http thank image untitled receiving subscribed thread reply email directly view github mute thread bence er\u0151sme github", "d": "8/2016"}, {"body": "erosb mean backbone mean thank replying", "d": "8/2016"}, {"body": "mean nothing backbone framework therefore github repository flatout wrong place look help problem johnnykhoueiry notifications githubcom erosb mean backbone mean thank replying receiving mentioned reply email directly view github mute thread bence er\u0151sme github", "d": "8/2016"}, {"body": "erosb suggestion find help", "d": "8/2016"}, {"body": "said error code sent service listening start looking anyway issue closed johnnykhoueiry notifications githubcom erosb suggestion find help receiving mentioned reply email directly view github mute thread bence er\u0151sme github", "d": "8/2016"}, {"body": "thanks", "d": "8/2016"}, {"body": "also would cool something like stop propagating event objects", "d": "8/2016"}, {"body": "unfortunately way selectively ignore events backbone try passing flag one arguments tell event listener selectively ignore event use proxy object bookkeeping listeners keep mind also event listeners called order bound objecta listener always called objectb listener", "d": "8/2016"}, {"body": "ugh makes difficult plugin example run code submission within backbone framework", "d": "8/2016"}, {"body": "right backbone events nt bubble way dom events less need stop propagation even binding order matters mind submission plugin think setting control flow submitting much easier manage reason opaquely trying manage events called", "d": "8/2016"}, {"body": "right know think someone else helped came good solution see thanks anway assistance far", "d": "8/2016"}, {"body": "nt seem anything backbone shimabalam notifications githubcom web application slowness duting access juniper application mvcnet angular database level using sql server also using entity framework orm tool using database first approach two dashbaord showing lots data widgets count grid binding pie bar charts well changes like bundling minification gzip compression caching etc improve perfomance application dashboard pages facing issues dashboard page landing page well run application local well client intranet envriroment performance quite well try open application internet thorugh juniper vpn takes atleast minutes load dashboard intranet client server local server takes seconds also find juniper js resources comes cache local client intranet comes cache receiving subscribed thread reply email directly view github mute thread bence er\u0151sme github", "d": "8/2016"}, {"body": "dupe short rewriting browser sort algorithm really nt nt see much backbone handle really ca nt rely sort column ca nt secondorder sort might want drop sort implementation", "d": "8/2016"}, {"body": "seems like lot overhead little gain good chunk pull requests come developers new git github nt think want add yet another barrier entry", "d": "8/2016"}, {"body": "codepen new behavior references nonexistent backbone source file backbone url updated underscore works", "d": "8/2016"}, {"body": "updated codepen works thanks help", "d": "8/2016"}, {"body": "may well case control", "d": "9/2016"}, {"body": "sure got impressing shows part list functions available jquery returns modified version promise nt issue closed", "d": "7/2016"}, {"body": "agreed jquery issue", "d": "8/2016"}, {"body": "apparently removed jqxhrdeferred version", "d": "6/2017"}, {"body": "jquery returns function think still", "d": "6/2017"}, {"body": "jfbrennan still", "d": "6/2017"}, {"body": "sorry confusion jquery blog post makes sound like nonstandard promise methods removed jqxhr jquery stackoverflows one votes says removed thought consensus always equals truth", "d": "6/2017"}, {"body": "test case js var backbone require backbone var router new backbonerouter backbonehistorystart routernavigate space expected result url looks something like actual result url looks like problem breaks urls copy pasting etc general inconsistent behavior none urlencoded chars get decoded see", "d": "7/2016"}, {"body": "sure using jquery hood might", "d": "7/2016"}, {"body": "looks like", "d": "7/2016"}, {"body": "plan releasing version containing fix maybe thanks", "d": "3/2017"}, {"body": "exact use case remember correctly marionette stopped using rendering ping samccone", "d": "7/2016"}, {"body": "looks like still using", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "initial step goal drop direct use tojson since breaking change stopped working marionette project jridgewell correct intent", "d": "7/2016"}, {"body": "captbaritone new implementation marionette", "d": "7/2016"}, {"body": "closing sounds like right thing use wait new version marionette come", "d": "7/2016"}, {"body": "sure mean code changedattributes plain object", "d": "7/2016"}, {"body": "object seems prototype might need close issue though checked way function works different exoskeletonjs looking", "d": "7/2016"}, {"body": "ah yeah exoskeleton object created without prototype feel free open issue problems one maintainers", "d": "7/2016"}, {"body": "please use stackoverflow questions github issues maintaining framework", "d": "6/2016"}, {"body": "please use stackoverflow mailing list gitter channel questions github issues maintaining framework", "d": "6/2016"}, {"body": "thanks reference", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "way use two scenarios would call create collection creating new instance transient model client side collection creating new instance persistent model collection saved server use first scenario frequently prototyping application result url must set error console returns useful model work jqxhr preserve also wish allow user create collection related models process creating parent model may require parent model saved url collection known create may still want called related model invoke validation final sync setting url persist entire collection successfully would ever call save model directly intend sent server jqxhr appropriate also call save model already local reference model saving jqxhr additional information calling create collection returned jqxhr would reference model collection see line dev version source passed regular attribute hash create reference hash passed model maybe best thing would collection create continue function add another function collection save requires initialized model returns jqxhr could also listentoonce collection model sync event callback get jqxhr second parameter see", "d": "6/2016"}, {"body": "makes sense collection created added help couple workflows together wish however could perhaps consistency two want shortcut want jqxhr guess ca nt cake eat sure said namdets makes lot sense well case could use model new pass model collection modelsave whatever actually return jqxhr well adding model collection", "d": "6/2016"}, {"body": "could also rewrite create method create new one return promise comes success option instead model faced similar milestone today case used success method options object create problem done", "d": "7/2016"}, {"body": "familiar cordova specifically diff looks like changed behavior around trailing slashes root feel free look pull request interested looks like might something indexhtml help us track easier find issue", "d": "6/2016"}, {"body": "thanks reply see changes around trailing slashes previous commits sure affecting issue might tried failed finding initial route returns still working truthfully nt know much cordova web views different normal browsers good guide webviews cordova track app see ios navigate different page cross platform app web version also located server myappcomapp web use start app setup nice deeplinks shared example cordova app link takes ignored current behavior backbone convenient help understand would love figure ca nt upgrade backbone", "d": "6/2016"}, {"body": "sorry super familiar cordova might better luck stackoverflow cordovaspecific mailing list irc channel could wrong think root actually rather history object uses windowlocation several places determine canonical location probably want make sure app sync something change backbone make easier work cordovoa please let us know otherwise going close always override key methods return answers want particular take look", "d": "6/2016"}, {"body": "thanks looking adam post stack overflow", "d": "6/2016"}, {"body": "yep tracking thanks reporting", "d": "6/2016"}, {"body": "backboneview nt destroy clean nt think view destroy backbone concern however whenever backbone call marionette behave describing using marionette already backbone models also call work essentially think cleanup happening fiddle something expect listener get cleaned nt certainly take look feel free ask well", "d": "6/2016"}, {"body": "backboneview nt destroy clean nt think view destroy backbone concern ah yes apologies playing w marionette bit much seems point implementation use similar look called handler setup w calls nt track handler therefor never cleaned simply calling w arguments clean everything evidenced fact maps handlers calls call clean registrations objects cleanup handlers point nt common destructor backbone modules matter probably puts nail add destructor destroyremovecleanup backboneevent idea imo right thing inheritance friend inheritance philosophy backbone biggest gripe leads us probably also call wo args marionette test probably test called wo args performance could improved case called w arguments instead iterating every listener calls batched perobject calls wout arguments sure typical usecase though terms ratio", "d": "6/2016"}, {"body": "mean guess see saying nt know purpose removing listeners thing subsequently nt need cleaned reference view ready garbage collection listeners go need context using correct maybe specific example dig back bit discussed marionette controller", "d": "6/2016"}, {"body": "thing thison subsequently thislistento nt need cleaned reference view ready garbage collection listeners go need context using listento correct see point really gc works though know object references objects alone references graph traversal nt also create references arguments thread samccone said take function ref named function might cause leak remove mean named function event pumping try resolve runtime case nt cause leaks yes case though handler solely referenced object registered nt break matter nt break general guess question simply gc work js okay read gc js guess issue moot long destroying references objects means need set something static call say examples seen nt think seen practiced cases marionette hopefully take care would reason would want use anything actually dynamic content area boiler plate childviews nt heavy dynamicview supporting would handy tracking instance ing unsetting think", "d": "6/2016"}, {"body": "understanding jmeas jridgewell might able better answer", "d": "6/2016"}, {"body": "guess onoff issue moot long destroying references objects backboneviews exactly destroying view remove references", "d": "6/2016"}, {"body": "assume backbone takes stance one nt reuse via eg case propose renaming think point needing call still stands one intent two avoid memory leaks object maintain references thus preventing object trees cleaned even stance nt still make sense call cleanup nonmanaged handlers reference trees nt get blocked cleanup gc object cleaned", "d": "6/2016"}, {"body": "assume backbone takes stance one nt reuse via eg reinitialize view remove nt think assumption right docs nt mention anything like happens remove nt anything would make particularly difficult reuse view removed using backbone frequently would often dig issues see could find opinions contributors heavy users backbonemarionette cool way see others agree assumptions see different perspectives things certain would nt surprised similar conversation reusing view removed anyway think name pretty good would nt change something like sounds bit heavy method backboneevents object maintain references callbacks backboneevents object nt global merged view think view instance backboneevents although terminology nt quite right means view holding onto callbacks leaving callbacks around wo nt prevent gc happening perhaps biggest difference related choice determines object relationship holds context callback references paulfalgout pointed though gcsafe create selfreferences long args passed nt reference object seems little obvious typed", "d": "6/2016"}, {"body": "nt think assumption right docs nt mention anything like happens remove nt anything would make particularly difficult reuse view removed anyway think name remove pretty good would nt change something like destroy sounds bit heavy method agree someone take stance preferably devs anyone publish conglomorates code backbone toolkit nt preclude reuse reuse reason calling backboneevents object nt global know sderived closed joke right weekend open monday", "d": "6/2016"}, {"body": "nt preclude reuse reuse reason calling provide specific example getting called causing problem know sderived ah okay gotcha made backboneevents could prevent gc meant explain would nt selfreferences joke right weekend open monday nt think joke make compelling argument functionality always chance issue reopened", "d": "6/2016"}, {"body": "thought see two issues first w behavior evident first example constructedinitialized never rendered removedreused would expect multiple handlers setup callback var view backboneviewextend initialize function wo nt get cleaned thisonce render thissetupevents setupevents function thislistento thisoptionsmodelobject change property thisrender heavyweight update thislistento thisoptionsmodelobject change lightweight update render function backboneviewprototyperenderapply arguments el thistrigger render eg marionetteview var obj var el var view new view modelobject obj beginasyncstuff asyncsuccess asyncfailure function asyncsuccess elhtml viewrender el function asyncfailure var otherobj viewinitialize modelobject otherobj elhtml viewrender el eg function beginasyncstuff success failure async success failure eg issue regarding memory leaksgc follows handlers setup derived object callbacks solely referenced object eg object hold references handlers prevent gc hopefully assuming one nt funkiness higher logic removing references object sever last path callbacks assumption made imo backbone takes stance framework toolkit know easy find hammer", "d": "6/2016"}, {"body": "would addressed also", "d": "5/2016"}, {"body": "though particular hidden reason see one bugged pr indeed harmonize set parse behaviour among collection amp model also favour add parse model set", "d": "5/2016"}, {"body": "could create parse detects cookeduncooked nature data passed imho temporarily flipping values middle operation recipe bugs line", "d": "5/2016"}, {"body": "firstly let congratulate jeremy ashkenazi team existence backbone quite achievement said let get business issue concerns fact problem occurs parse defined model collection levels conditions current behavior bug ever correct parse message twice current behavior rely upon one two extremes either accident programmer defining parse levels programmer extraordinary awareness writing special detection code order enable parse places understand parse always little different model level versus collection difference single value array values programmer way ever come conclusion suggest write custom code detect data already parsed running problem debugging problem message parsed twice simply expected behavior puzzled say flipping values middle operation recipe bugs line read backbone code replete snippets code look like way imho alexander", "d": "5/2016"}, {"body": "could check current model instance part collection checking within method", "d": "5/2016"}, {"body": "pmalouin could check current model instance part collection yes could yes cleverness idea without fault satisfactory solution checking whether instance assigned collection solve problem originally stated solve larger problem original statement class manually instantiate singleton also autoinstantiate collection members always case backbone application collection needs parse different singleton parse collection class model class parse method defined called current workaround create model class use collection derivative model class use singletons modelclasswithoutparse backbonemodelextend modelclassforsingletons modelclasswithoutparseextend parse function mycollectionclass backbonecollectionextend model modelclasswithoutparse first problem nt need second problem workaround found examining solution proposed pmalouin builds upon prior proposal responsibility modelparse method determine whether called take action determining called error suggests determination made checking modelcollection first blush suggestion seems make sense since model instance autoinstantiated collection always modelcollection set manually instantiated singleton doubt segregation effortlessly guaranteed inability guarantee segregation also works workaround technique examining modelcollection assumes static structure tells us dynamic usage maybe strongly typed language could case doubt backbone allows manually instantiate model add collection kills workaround yet pmalouin backbone also allows model already within collection used outside collection suppose take individual model send server update singleton nt server send back something would subject parse appropriate parse would singleton collection read backbone code clear model instance member one collection therefore follow model instance member collection also used different context considered singleton whole discussion seems silly view following two points clear parsing twice nobody intention bug simple solution exists solution breaks nothing simple solution requires follow pattern much backbone code create scoped therefore temporary version options object scoped options used turn downstream parse collectionparse completed big deal alexander", "d": "5/2016"}, {"body": "could easily extend backbonecollection extend collections actually root view model collection objects classes javascript nt classes use start projects custom setters amp constructors handle parents kinds automagical things makes life much easier would nice backbone everyone needs need solutions like one propose could break people code people using parse implemented today suggest trying root collection find something really works well make branch rewrite code tests broken make pullrequest solution see everyone thinks", "d": "5/2016"}, {"body": "javascript nt classes taking linguistic shortcut easier say class function name starts capital letter intended constructor members added prototype etc find difficult describe thinking without allowing luxury using word class way luckily makes word class official could break people code yes concede could limited imagination come one case would really really weird first common use cases nt get broken server sends singleton json object wrapper collection array objects case parse function needed either level server sends singleton wrapper one member named data json object server sends collection wrapper one member named data array json objects case need one parse function model extract object different parse function collection extract array objects array data longer wrapped fully cooked nothing raw perfectly ordinary case gets broken use case would get broken proposed fix server sends collection something holds array wrapped objects individual items array ie rows wrapper must removed modelparse function use case seems really weird unlikely anyone come scenario server would want go trouble wrapping row items rows nt get success codes queries mean returning collection server reason embellish individual items wrapper would programmer created system even get idea behavior work double parse behavior documented programmers like discover parse fails debug issue make pullrequest never done nt think look odd make pull requests get oneline change familiar culture thank feedback alexander", "d": "6/2016"}, {"body": "nt think look odd make pull requests get oneline change say perfect reason make pull request", "d": "6/2016"}, {"body": "alxdev divide parsing code collectionspecific part modelspecific part nothing like doubleparsing write task create array objects server response breaking response going lower massaging objects future models every single object array supposed parsed later task create object attributes model interface expose use principle support responses rest apis getting collection objects nodes id nodes single object nodes id using option collection model essential feature backbone parsing would break code", "d": "6/2017"}, {"body": "idea modelparse called collectionfetch everywhere read called", "d": "1/2018"}, {"body": "like idea another approach could allow model set accept signature maybe overcomplicating api much", "d": "5/2016"}, {"body": "probably better imlement separate method instead modifying set", "d": "5/2016"}, {"body": "another approach could allow model set accept signature mind", "d": "5/2016"}, {"body": "idea reminds immutablejs update", "d": "5/2016"}, {"body": "mind add new signature set like afterthoughts agree erosb separate method better", "d": "5/2016"}, {"body": "considered suggesting set modification nt workable api currently valid syntax also new method keeps individual method simple clear feel backboney", "d": "5/2016"}, {"body": "think pretty small change heavy lifting eventing stuff still done set look something like update function attrs transform options attrs flatten attrs transform isfunction transform transform identity var attrstoset reduce attrs function setobj attribute var value thisget attribute setobj attribute transform value attribute bind thisset attrstoset options tested may work thats general idea", "d": "5/2016"}, {"body": "interesting idea big fan proposed method couple reasons enter new function context nt need gain passed value something easily could accessed outside bit data given within function current value thing changing usually need information make update let take third example example could would clearer elaborate general provide fancy api drop function context work real gain api feels like obfuscating andor overclevering trying proposed updatemorethanonefield array api great example gets nasty", "d": "10/2016"}, {"body": "hey jashkenas thanks taking time give feedback nt quite understand criticisms bit data given within function current value thing changing usually need information make update proposed change involved passing arguments function currentvalue attribute attribute key model sufficient context updates think could would clearer think simplicity example may hurt trying portray sometimes want encapsulated complex business logic update agree comparable cleaner modified examples slightly logic inlined one line really thinking cases logic updating looks something like javascript export const updatecost currentcost gt get starting cost let newcost isfinite cost cost calculatecost model apply coupons let coupon getcouponused newcost applycouponcode newcost coupon apply taxes let region getcustomersregion newcost addtaxes newcost region apply shipping costs let address getcustomersaddress newcost addshippingcost newcost address logic helper functions separate file import function cleaner basically benefit get makes easy provide transform function existing value possibly several existing values know logic implemented function suggesting replace us habitually put complex logic named functions nt think alone opportunity turn lines multiple places x lines applying transform multiple properties functional style backbone normally gets think certainly feels home next underscorelodash style functions backbone devs often use elaborate general provide fancy api drop function context work real gain could explain think would look like first reading nt see use case function whereas last comment read like think valid use case nt think api design best something completely open suggestions could simplified clarified meet need", "d": "10/2016"}, {"body": "respond quickly nt better api design particular case think fine atomic operations combine see fit example external helper function exported little ugly updating cost concern model put model objectoriented version might look something like", "d": "10/2016"}, {"body": "gah fair enough model point get making examples try find real world examples behind original inspiration think fall quick update case like incrementing perfectly honest working less backbone days nt push pr begin totally top real world examples originally drove going fight one see value also understand desire avoid api bloat", "d": "10/2016"}, {"body": "use thislistento gets destroyed automatically", "d": "5/2016"}, {"body": "call remove method stoplistening el object listento bind event call remove event rewrite remove method like", "d": "5/2016"}, {"body": "sometimes may thus got virgin target begin course many ways depends done really repeat constructor render views whatever call nt need complexity manage views subviews called asynchronously", "d": "4/2017"}, {"body": "myklemykle happen register handler callback twice work fairly big project using backbone problem usually local object registers handler unregistering usually happens scope object could register twice unless clear bug easily detected module", "d": "6/2017"}, {"body": "add splat route final", "d": "5/2016"}, {"body": "work cant find key word nomatch source", "d": "5/2016"}, {"body": "splat like variable name whatever like js anyname myfunction myfunction function use arguments bc var inputs", "d": "5/2016"}, {"body": "call function history specifically manage history state", "d": "5/2016"}, {"body": "apple developer forum link posted seems suggest issue safari want backbone", "d": "5/2016"}, {"body": "backbone needs workaround browser bug", "d": "5/2016"}, {"body": "workaround aware zowers bug occur navigate called times synchronously happen called times general", "d": "5/2016"}, {"body": "workaround wrap navigate safari latest stable today times total safari developer preview times seconds", "d": "5/2016"}, {"body": "wo nt fix say acceptable nonworking functionality", "d": "5/2016"}, {"body": "placed reading safari bug see acceptable solution using trycatch changing route change acceptable imo", "d": "5/2016"}, {"body": "using trycatch changing route change acceptable imo agreed silent failure worse current behavior", "d": "5/2016"}, {"body": "probably navigate fallback hash case error", "d": "5/2016"}, {"body": "today safari fix got released safari safari fails called times seconds", "d": "5/2016"}, {"body": "closed hoping people get update soon", "d": "5/2016"}, {"body": "bug safari without much given months think safe anything letting people update", "d": "5/2016"}, {"body": "others prs merge", "d": "5/2016"}, {"body": "probably get perhaps meh", "d": "5/2016"}, {"body": "release date backbone thanks nice framework", "d": "6/2016"}, {"body": "megawac separating several files thus view model collection etc files", "d": "9/2016"}, {"body": "previously discussed feel free leave comment topics", "d": "9/2016"}, {"body": "greets et al regarding separating several files done presently besides converting everything inline documentation angling fully modularize separate repos main components backbone already done events dependencies modules underscore inline documentation great codebases using esdoc actually tjsdoc releasing soon documentation generation current api docs held thought would bit sooner using jspm systemjs bundling distributed releases works great edit though keen getting things npm finished accomplish full modularization adding internal events instance communicate modules versus direct method calls points pertinent less eventbus npm module backboneesnexteventbus allows access several standard eventbus instances app dev also internal backboneesnext usage also added extra trigger methods events quite handy able return results synchronously trigger asynchronously receive promise results rather handy message passing modularization nice plugin system allows app autowire eventbus typhonjspluginmanager nice feature event registration transparently handled plugins manager events removed automatically plugins unloaded ie plugin lifecycle right though considering keeping sync backbone likely one repo except events make easier update mainline backbone releases creating comprehensive testing infrastructure however considering fully modularizing creating usage implementation primary goal remove underscore usage internally standard library functions exist already done backboneesnextevents dependencies goals include replacing jquery ajax support w fetch accessible via internal event bus making sure view jquery completely separated possible drop addition virtual dom solution maybe inferno undecided things fully modularized also gives opportunity play around ramda powered model collection components see enough improvement underscore point easy create custom builds via jspm systemjs bundler build tools requested though likely publish npm things solidified efforts attempting stay compatible backbone may diverge little glad interface backbone collaborators see may appropriate mainline backbone effort", "d": "10/2016"}, {"body": "including basic documentationexample use backbone browserify webpack seems people moving especially webpack documentation use backbone lacking", "d": "10/2016"}, {"body": "bboydflo using backbone browserify exactly like using package browserify would nt know document specifically backbone", "d": "10/2016"}, {"body": "jaapz process switching app using browserify using webpack also use lodash utility library throughout project wanted replace underscore dependency lodash coreminjs think people using webpack days thought paragraphs would help", "d": "10/2016"}, {"body": "nt officially support lodash zepto plenty google results describing make work backbone see example", "d": "10/2016"}, {"body": "bboydflo use webpack going use modules something like rollupjs", "d": "10/2016"}, {"body": "halfnibble switching browserify lot people talking webpack would easier figure heard rollup", "d": "10/2016"}, {"body": "bboydflo makes sense wonder someday everyone stop using custom module bundlers altogether one thing certain backbonejs remain", "d": "10/2016"}, {"body": "hey megawac far away landing", "d": "11/2016"}, {"body": "would like know far", "d": "11/2016"}, {"body": "hello anyone someone get clarification backbone heading developers left actually working maintaining backbone thanks advance", "d": "4/2017"}, {"body": "also interested understanding future backbone core developers interested maintaining busy spend time evolving backbone think see community interest maintaining backbone", "d": "4/2017"}, {"body": "anyone interested drafting changelog submitting pr think time publish", "d": "4/2017"}, {"body": "chance making", "d": "4/2017"}, {"body": "megawac work", "d": "4/2017"}, {"body": "tamalsaha need update file see", "d": "4/2017"}, {"body": "megawac take", "d": "4/2017"}, {"body": "megawac problem please send needs done help want know backbone still alive lead devs still working backbone interest developing backbone maybe even roadmap future backbone releases shame let great framework unmaintained lead devs lost interest", "d": "4/2017"}, {"body": "borming interested updating sections piecemeal would useful example documenting using classes backbone another good one document", "d": "4/2017"}, {"body": "typhonrt recently read ideas want see virtual dom solution could probably drop underscorejs altogether would nice find virtual dom solution render existing underscorejs template syntax like participate effort anything like setup slack", "d": "4/2017"}, {"body": "halfnibble updated comment details right backboneesnextevents published works alone course typhonjspluginmanager adds nice modularization functionality autowiring events plugins handling transparent event unregistration w plugin lifecycle using great effect tjsdoc soon typhonjsescomplex node cli apps documentation gen complexity analysis handy beyond web apps thread probably nt best continue discussion gitter channel makes sense", "d": "4/2017"}, {"body": "halfnibble actually nt think virtual dom way go lot options virtual dom would rather go one advantages backbone pretty easy also set legacy projects server rendered projects lose virtual dom least easy way", "d": "4/2017"}, {"body": "sendoushi think idea modularize backbone configuration virtual dom implementation view desired skeptical vdom per se least efforts bb fine though like abstract view much possible jquery zepto enabled version flavors point mix match modules one wants use want vdom great want bb everything view router history possible whole bb event driven gui library built original material design lite upgrading material components web challenge see things cleanly sit top jquery view implementation vdom version minimal fuss one replaces", "d": "4/2017"}, {"body": "created incremental dom compiler handlebars seems pretty popular marionette community jridgewell helped get working backbone really easy call patch inside views render computer moment dig usage example sun apr michael leahy notifications githubcom wrote sendoushi think idea modularize backbone configuration virtual dom implementation view desired skeptical vdom per se least efforts bb fine though like abstract view much possible jquery zepto enabled version flavors point mix match modules one wants use want vdom great want bb everything view gui possible whole bb event driven gui library built original material design lite upgrading material components web challenge see things cleanly sit top jquery view implementation vdom version minimal fuss one replaces receiving commented reply email directly view github mute thread", "d": "4/2017"}, {"body": "typhonrt matter agree one able select layer view wants would nt hard even use something like vue view layer things well structured", "d": "4/2017"}, {"body": "sendoushi large production backbonejs apps nt want rewrite every view template either honest think jsx template syntax reactjs uses terrible fact matter virtualincremental dom concepts winning gaining popularity negate complex part ui templating partial inplace rendering template backbonejs nt incorporate make easy use favorite js framework quickly fall popularity means bad things javascriptland think definitely look solution", "d": "4/2017"}, {"body": "personal experience using reactbackbone almost complaints prefer using models collections existing framework tried date prefer view hierarchy composition really enjoy using reactbackbone redux many types applications although admit find support things like lacking would tempted switch solutions", "d": "4/2017"}, {"body": "halfnibble others nt need jsx react use vue example kind marvellous experience", "d": "4/2017"}, {"body": "anyone looked using backbone glimmer vm poked around repo nt see integration tips", "d": "4/2017"}, {"body": "tried glimmer seems really baked ember ecosystem though really easy use embercli could nt fathom use separately fri apr john boehr notifications githubcom wrote anyone looked using backbone glimmer vm poked around repo nt see integration tips receiving mentioned reply email directly view github mute thread", "d": "4/2017"}, {"body": "instead vue uses fork snabbdom virtual dom library think safer use virtual dom library looking forward modularized backbone support virtual dom view layer", "d": "5/2017"}, {"body": "maybe backbonejs official view plugins one virtual dom one incremental dom one good ole fashioned underscore templates", "d": "5/2017"}, {"body": "year later thank goodness nt get shoved glad someone keeping cool head humble opinion nothing respect dissenting opinions personally would nt rush improve everyone hammer hotgluing stapleremover every one backbone underscore rare examples programming world equivalent elegant proofs modularize backbone alternate virtual doms comes preinitialize prepreinitialize preonpreinit existing plugins extensions give modest idea community patched thus actually consistently needed many people issues basic getters inside view functions compared want support classes yet library remained lean useful extensible quick example flufflobbying one two usecases given preinitialize merge actually closed jashkenas commenting one line call setelement initialize closing ticket hardly usecase let sure celebrate ability fork extend almost none us opportunity contribute web order backbone underscore easy pollute ecosystem reactive instead corrective functional certainly rushing jam personal backbone extensions see rare quality opensource repo easy extend almost anyone appreciate lack jumping things around hope lack continues made another noisy year without hotglue spinners favorite hammer thrilled mobs yet picked backbone carried oh look still use next projects best everyone", "d": "5/2017"}, {"body": "valleyspirit nt know understand saying underscorejs less deprecated supports useful features natively think important upgrade framework backbone take advantage new features language implemented maybe work pull request", "d": "5/2017"}, {"body": "think important upgrade framework backbone take advantage new features language implemented whole heatedly agree instead chasing shiny things frameworks chasing would like see backbone stay stable also evolve language get outdated", "d": "5/2017"}, {"body": "kind see directions discussed continuing make bb lean mean better suited deploy web nonweb apps bent towards modern package managers nt expect mainline bb release change much larger surrounding ecosystem grow much point things currently stand good bad fork realizing ideas worth pursuing nonetheless even better way provide continuity new ideas flourish one questioning impact bb underscore future assume discussing things bb ideas behind still form preferred framework choice", "d": "5/2017"}, {"body": "always exoskeleton disclaimer one contributors want go full route couple good ideas imo often better stick mainline bb something would like see improved currently", "d": "5/2017"}, {"body": "something would like see improved currently hard say part culture thing suppose opinions differ newcomer side around things go tech angle instance bit bearish speak regard adding mixin collection amp model assumes moving forward bullish bb version one thing big boon modification done thus far would events update backboneesnextevents adding async sync trigger amp return results consider low hanging fruit merging back mainline bb however async kind assumes otherwise separate promise module would necessary undesirable modification opens tons modularization possibilities use events inprocess messaging corner stone future efforts really improvement like going venture bb reorganization modularization nice keep open line communication going mainline bb maintainers tech angle would nice regard figuring tests shared efforts something look point possible slight modifications necessary nice work mainline bb maintainers regard", "d": "5/2017"}, {"body": "changelog added", "d": "5/2017"}, {"body": "ping jashkenas jridgewell braddunbar", "d": "5/2017"}, {"body": "bb works perfectly event mixed marionette would like see support life bb developers marionette great job promoting maintaining user base eco system would like see bb one user said good glue shit hammer already job agree would like add hammer needs improvments better job better one things hope someone jumps board makes bb fork full compatibility puts life back bb agree angular shit", "d": "7/2017"}, {"body": "may start dev branch bb code transferred could split code parts add rollup effectively build distributable version", "d": "7/2017"}, {"body": "respectfully ogonkov already done used jspm systemjs distribution versioning use rollup bundling well bb drops thinking making bb version fully embraces babel esnext stage perhaps extra modularity elements bb focus native functions versus library usage", "d": "7/2017"}, {"body": "nicely done interesting breaking requires deeper inheritance events instead treating mixin like backbone currently would definitely support modular backbone like see smaller iterative nonbreaking steps", "d": "7/2017"}, {"body": "paulfalgout gt breaking requires deeper inheritance events instead treating mixin like backbone currently mainly due documentation purposes esdoc time many documentation tools including tjsdoc finishing nt work mixins knowledge every frameworks mixin api library would necessary personally think deep inheritance mixins generally antipattern versus explicit composition static types available especially comes core framework code recall change effectively works bb mainline nt exactly breaking change though nt got mainline bb test suite hooked would nice thing proof compatibility", "d": "7/2017"}, {"body": "sorry yes mixin meant ca nt extend events another object frankly showstopper many backbone plugins also mixin events already existing objects", "d": "7/2017"}, {"body": "indeed breaking change one worthy potential ever adopted mainline say idiomatic guiding principle bb related refactor efforts move away mixins frameworks react well documented believe removing mixins public framework apis good thing minimizing usage internal implementation needed recent collection mixin addition things debatable gather minority considerable amount around components bb would explicit getter events instance via composition versus mixin inheritance ala adhoc objects something like const anobject event new backboneevents register function thiseventon test trigger thishandler testtrigger triggertest function thiseventtrigger test trigger handler function thistesttrigger", "d": "7/2017"}, {"body": "hi news regarding release availability date regards", "d": "10/2017"}, {"body": "whats hold year half", "d": "12/2017"}, {"body": "jashkenas underscore new shiny bb sure left done moment merged changelog already", "d": "4/2018"}, {"body": "would lovely megawac jridgewell would feel pushing", "d": "4/2018"}, {"body": "megawac jridgewell ping", "d": "5/2018"}, {"body": "megawac jridgewell jashkenas ping", "d": "5/2018"}, {"body": "check milestones", "d": "4/2016"}, {"body": "nt really use milestones part take look open issues see questions particular directed gitter channel mailing list stackoverflow", "d": "4/2016"}, {"body": "thank answer", "d": "4/2016"}, {"body": "sure posted right project", "d": "4/2016"}, {"body": "yes sure idea works", "d": "4/2016"}, {"body": "come conclusion right project post see link nt anything raspberry pi receive surprisingly large number open issues new users people looking projects please tell us", "d": "4/2016"}, {"body": "spam bot kind git profile joined apr maybe someone use aka github bots get answer asap randomly use github public api find projects huge amount stars co smile", "d": "4/2016"}, {"body": "huh really interesting like spammy google results world", "d": "4/2016"}, {"body": "yep people ca nt start spent time learn sometimes think write bots", "d": "4/2016"}, {"body": "nt think spam bot original poster ended posting question repository seems ontopic", "d": "4/2016"}, {"body": "go would great see pull separate pulls please thanks", "d": "4/2016"}, {"body": "want pulls attached issue slash issues since closed issue used writing commits fixclose issues backbone operates differently totally fine making sure", "d": "4/2016"}, {"body": "tend use open issues way saying issue resolution undecided welcome comment community otherwise even open issues stuck sort limbo state case next step known great open pull request concrete changes actually comment", "d": "4/2016"}, {"body": "ref issue write pr issue ref apr pm adam krebs notifications githubcom wrote tend use open issues way saying issue resolution undecided welcome comment community otherwise wed even open issues stuck sort limbo state case next step known great open pull request concrete changes actually comment receiving authored thread reply email directly view github", "d": "4/2016"}, {"body": "yup ref issue completeness sake", "d": "4/2016"}, {"body": "got prs next days thanks help", "d": "4/2016"}, {"body": "awesome thanks", "d": "4/2016"}, {"body": "thanks platinumazure", "d": "4/2016"}, {"body": "said days obviously lie get something weekend", "d": "5/2016"}, {"body": "special cased unfortunate side effect way chaining works underscore backbone better solution", "d": "4/2016"}, {"body": "seems could specialcased chain object chained methods could detect next call longer returning backbone models basically become normal underscore chain context object point course could get ugly factoring methods take method refs eg invoke could honestly go either way one way could handled augment underscore chain object method something like basically goes back collectionaware chain mode method would regarded use risk example assume collection contains models address attribute another model honestly looking pretty ugly even wanted throw hopes inspire discussion ultimately workable solution", "d": "4/2016"}, {"body": "suspect viable way without duplicating logic handles whether provide model attributes chain default", "d": "4/2016"}, {"body": "nt able come clean solution really workaround far always follow either lets filtermanipulate objects like unfortunately lose instances process method benefit working backbonemutator properties method keeps references original objects maybe good bad thing since could modify perhaps one option would track methods called chain simply filtered collection eg etc case could cleanup operation happens output chain looking models whose attributes matched output swaping attribute objects model instances alternatively models id could match way would probably much faster since index would basically look like automatically calling gets trickier methods rearrange collection eg partition etc maybe methods cause cleanup happen immediately", "d": "4/2016"}, {"body": "accepts", "d": "4/2016"}, {"body": "bbrui provide jsfiddle think problem nt set model collection creation think help erosb accepts id cid model param thanks", "d": "4/2016"}, {"body": "test bbrui say run rightcode follow still problem issue send var listnew muppetcollection var entitynew muppetmodel id name test occupation listadd entity consolelog consolelog listget entitycid id", "d": "4/2016"}, {"body": "find thiscollectioncreate kermit wait false changethiscollectioncreate kermit wait false model add collection time nt wait server reponse server reponse add model collections", "d": "4/2016"}, {"body": "bbrui kind questions please use stackoverflow gitter channel thanks", "d": "4/2016"}, {"body": "nt possible likely problem local npm modules try full reinstall", "d": "4/2016"}, {"body": "per defaults hash function also nt forum try next time grin", "d": "4/2016"}, {"body": "thanks rafde", "d": "4/2016"}, {"body": "cool idea go ahead backbone plugins always welcome", "d": "4/2016"}, {"body": "yup sounds like great plugin looking forward see", "d": "4/2016"}, {"body": "hi kraytsman please use stackoverflow gitter channel mailing list questions github issues maintaining framework thanks", "d": "3/2016"}, {"body": "fwiw bug somehow related closed wontfix", "d": "3/2016"}, {"body": "fixed ensuring handler array thoughts jridgewell", "d": "3/2016"}, {"body": "eh think short circuit pattern fairly common js advice around edge cases applies", "d": "3/2016"}, {"body": "drop hell even prototypeless object black magic", "d": "3/2016"}, {"body": "got mind objectcreate everywhere", "d": "3/2016"}, {"body": "jridgewell god", "d": "3/2016"}, {"body": "hell even prototypeless object black magic kidding pretty sure literally gate hell", "d": "3/2016"}, {"body": "insane", "d": "3/2016"}, {"body": "insane cliched genius madness quote wink", "d": "3/2016"}, {"body": "circumstances would occur", "d": "4/2016"}, {"body": "someone define hehe maybe think", "d": "4/2016"}, {"body": "apparently myabcfetch reset true prevents collectionparse called sure case closed", "d": "3/2016"}, {"body": "mmm sorry reopen one consequence calling myabcfetch without parameters reset event nt fired backboneview nt react backbonecollection new data words view contains following code say initialize thisaddall never called view never drawn missing something", "d": "3/2016"}, {"body": "create jsfiddle demonstrating issue help track", "d": "3/2016"}, {"body": "mmm seems unlikely work help jsfiddle nt log js console added necessary html need save file run", "d": "3/2016"}, {"body": "ca nt help without reproducible test case jsfiddle certainly log console example found seconds googling try codepen another one prefer better", "d": "3/2016"}, {"body": "uh copy paste code html page run web inspector myabcfetch reset true b myabcfetch abcparse called b abcparse called jsfiddle nt log console message tried", "d": "3/2016"}, {"body": "indirectly calls parsing nt override unless know", "d": "3/2016"}, {"body": "verified tests around fails replace backbonejs backboneminjs testindexhtml", "d": "3/2016"}, {"body": "sigh megawac create pr since ca nt seem get right", "d": "3/2016"}, {"body": "offered considered changing indexhtml file use minified version nt sure everyone would build testing", "d": "3/2016"}, {"body": "marionette compatible minified backbone soon none existing yet afaik", "d": "3/2016"}, {"body": "works marionette elgubenis", "d": "3/2016"}, {"body": "actually mn composite views issue minified backbone found problem begin collectionviews bind via composite views extend collectionview initialevents start point context lost due need fix thiscollection falsey therefor start listening collection events appropriately careful using collectionviews compositeviews collection set prior rendering", "d": "3/2016"}, {"body": "okay yeah republish version updated minified file file master work publish soon", "d": "3/2016"}, {"body": "", "d": "10/2016"}, {"body": "update also running routes containing example", "d": "7/2018"}, {"body": "fixed thanks", "d": "3/2016"}, {"body": "collectioncomparator sort link line still points dead link mdn docs", "d": "4/2016"}, {"body": "feel free open pull request merge thanks", "d": "4/2016"}, {"body": "nt already possible models cloned model original model", "d": "5/2017"}, {"body": "yep using old fine idea always go advanced need", "d": "6/2017"}, {"body": "give far remember even react nt sold current batching strategy", "d": "3/2016"}, {"body": "oh yeah right completely forgot usage almost always use method object another thing would useful set method supports dot notation found working nested objects get variable set inner properties want create another issue last question mar pm adam krebs notifications githubcom wrote give modelset modelget far remember even react nt sold current batching strategy reply email directly view github", "d": "3/2016"}, {"body": "completely forgot usage almost always use method object also use object notation would useful set method supports dot notation found working nested objects get variable set inner properties common question fact whole entry faq quick googling give couple different options depending use case", "d": "3/2016"}, {"body": "yeah solution gave works read faq suppose talking nested models collections complex suggested wanted way update nested object using set found people need understand saying specific include backbone source thanks mar pm adam krebs notifications githubcom wrote completely forgot usage almost always use method object also use object notation modelset modelget would useful set method supports dot notation found working nested objects get variable set inner properties common question fact whole entry faq quick googling give couple different options depending use case reply email directly view github", "d": "3/2016"}, {"body": "search issues background general nt horrible pattern use", "d": "3/2016"}, {"body": "talking set method nt know misread altrough change properties notation reference think could mislead anyone reads code maybe feels strange set property get even forwarded usable super intuitive usable javascript var model new backbonemodel address street backbonish street age name alexandre modelget address street improved backbone street", "d": "3/2016"}, {"body": "two sides coin deep set deep get try plugin like use case", "d": "3/2016"}, {"body": "right thank alexandre miguel portela dos santos email alexandresantozz gmailcom tel skype website adam krebs notifications githubcom two sides coin deep set deep get try plugin like use case reply email directly view github", "d": "3/2016"}, {"body": "nt fix", "d": "3/2016"}, {"body": "pull request", "d": "3/2016"}, {"body": "nikolayteodor issue tracker intended reporting bugs feature requests help writing app would recommend rewriting questing lots detail including examples far stuck exactly errors getting asking help site like good luck", "d": "3/2016"}, {"body": "hi merusso nice eye got open resolve issues releases", "d": "3/2016"}, {"body": "caused major headaches team finding issue really helped thanks onehorsetown", "d": "3/2016"}, {"body": "fixed", "d": "3/2016"}, {"body": "minify source map main backbonejs file rebuild docco docs also changelog release date date might wan na fix", "d": "3/2016"}, {"body": "also comment top library containing version", "d": "3/2016"}, {"body": "also changelog release date date might wan na fix yah going update changelog say instead update date also comment top library containing version added", "d": "3/2016"}, {"body": "nice well done releases expert smiley", "d": "3/2016"}, {"body": "stuckouttonguewinkingeye", "d": "3/2016"}, {"body": "fyi hooks prepost version prepost publish could help lot", "d": "3/2016"}, {"body": "fyi npm version npm scripts hooks prepost version prepost publish could help lot yup going work one", "d": "3/2016"}, {"body": "feature release broke something development environment using marionette though might issue seems like backbone collections correctly triggering events collectionveiw fetching need investigate sure", "d": "3/2016"}, {"body": "marionette fixed version dependency backbone since bb nt using semver requires manually update marionette every release updated bb dependency locally using package manager actually using different copy backbone marionette", "d": "3/2016"}, {"body": "omitting fixed version marionette environment marionette always uses latest backbone version might issue", "d": "3/2016"}, {"body": "also got ta update linked versions whenever create release see", "d": "3/2016"}, {"body": "nt backbone follow semver lost much time debugging", "d": "3/2016"}, {"body": "davis", "d": "3/2016"}, {"body": "also got ta run rebuild docs pages", "d": "3/2016"}, {"body": "davis nt backbone follow semver lost much time debugging nt aware breaking changes documenting changelog marionette relying undocumented edge behavior", "d": "3/2016"}, {"body": "actually far aware breaking changes historically marionette locked dependency backbone marionette follow semver wanted surprises backbone underscore updated patch breaking change underscore instance however personally nt think working suggesting backboneunderscore set peer dependency related plugins essentially problems people running arisen upping project backboneunderscore dependency find marionette still using copy older version", "d": "3/2016"}, {"body": "change backbone broke marionette may impact outside marionette ecosystem marionette makes call notice context third parameter specified bb context defaulted pointer call backbone context defaults callback seems like pretty major behavioral change might break lot marionette far trace eventsonce used call eventsapi void callback backbone callback passed directly well good look line backbone callback longer void context defaulting callback backbone context ctx value callback object would default pointer original call sorry explanation convoluted ca nt pretend understand internal machinations backbone event system simply know marionette working backbone answer continue using marionette backbone fine however simply wanted bring possibility underlying issue pervasive", "d": "3/2016"}, {"body": "onehorsetown thank thats exactly problem facing guess test scope", "d": "3/2016"}, {"body": "wait fix", "d": "3/2016"}, {"body": "nt able reproduce issue locally elgubenis create failing test case", "d": "3/2016"}, {"body": "ready", "d": "3/2016"}, {"body": "tried backbone marionette works combinations tried work", "d": "3/2016"}, {"body": "marionette yet support", "d": "3/2016"}, {"body": "smoke test top plugins releases feel like one point sun mar paul falgout notifications githubcom wrote marionette yet support reply email directly view github adam k mobile", "d": "3/2016"}, {"body": "kedarmanure please use stackoverflow questions ps solution read try fiddle fires event sec singleton extended backboneevents thanks", "d": "2/2016"}, {"body": "someone close", "d": "2/2016"}, {"body": "yep stackoverflow gitter channel better places help debug app thanks looks like listener set route triggered one solution move call setting", "d": "2/2016"}, {"body": "sorry posting extensive research googleso right backbonehistorystart called setting fixed issue", "d": "2/2016"}, {"body": "repository backbone js lib question scope issue tracker anyway find good resources github git", "d": "2/2016"}, {"body": "aw jeez really sorry thanks redirecting", "d": "2/2016"}, {"body": "wait go found backbone issue tracker website pointed", "d": "2/2016"}, {"body": "hmm really sure exactly think combination googling github help well paying much attention exactly got", "d": "2/2016"}, {"body": "backtrack history would nt believe often happens love figure happens", "d": "2/2016"}, {"body": "got googled github questions second result without paying much attention seemed like found looking", "d": "2/2016"}, {"body": "jashkenas let know opinion ok send pr", "d": "2/2016"}, {"body": "sure would good idea first would approach defining property whenever user addsremoves item collection point easily mixed something like core inclusion js var indexedcollection backbonecollectionextend constructor function backbonecollectionapply arguments", "d": "2/2016"}, {"body": "pretty complicated nt like subclassing fiddle works pretty well difference currently see settings property nt update internal object array nt remove items inside another technic relies js var collection extend backbonecollectionprototype properly arrayprototype objectsetprototypeof collection bacbonecollectionprototype", "d": "2/2016"}, {"body": "rivetsjs library nt support iteration complex collections arrays bad thing using slower loop items though wo nt big deal implement actually subset", "d": "2/2016"}, {"body": "subclassing issues weird side effects different javascript environments nt see happening backbone core also lead quite confusing scenarios user tried would way backbone intercept without defined properties mixed bag issues stalniy would suggest make rivets use iteration use collection mixin defines properties posted something like might cool backbone plugin", "d": "2/2016"}, {"body": "make sense nt thought setting items reading", "d": "2/2016"}, {"body": "ashivkum pretty simple use want make clear make pr close please thanks", "d": "2/2016"}, {"body": "yeah feel free make pull request review ashivkum", "d": "3/2016"}, {"body": "please keep mind tried without much success", "d": "2/2016"}, {"body": "pr", "d": "2/2016"}, {"body": "used backbone upgrade broke scenarios id property exists model collection uncommon scenario imagine adding models temporary collection without need polymorfismus example javascript version backbonemodelextend idattribute versionnumber new version versionnumber id name first version new version versionnumber id name second version versions new backbonecollection first version set collection versionsreset referenced pr fixes problem always prefers model collection one set id default collection never used broke behaviour backbone breaks backbone caseywebdev chance support scenarios preferably without changing code base could think changing pr prefer collection model means creating collections know models added without default model javascript temporarycollection backbonecollectionextend model backbonemodelextend idattribute null versions new temporarycollection collection idattribute null fallback model one lets models set versionsreset better possibility scenario", "d": "5/2017"}, {"body": "want make pull request adding unit test merge investigate", "d": "2/2016"}, {"body": "look change log improve performance add optionsindex longer set event callback collectionindexof model used retrieve index model necessary nt set unless passed index", "d": "2/2016"}, {"body": "nt set optionsindex unless passed index bug add event backbone actually sending stale optionsindex set removemodels end removemodels needs documentation explicit sent options parameter callback able rely case stale data leftover remove event", "d": "2/2016"}, {"body": "sure let fix", "d": "2/2016"}, {"body": "pull request related open issue", "d": "2/2016"}, {"body": "unfortunately unsupported browsers throw syntaxerror point requiring backbone transpiled would make great plugin projects", "d": "2/2016"}, {"body": "support doable without throwing syntaxerror example lodash works iterator iterable wo throwing need detect func assigned symbol property returns lastly add function wrapper returns following iterator protocol iterator support makes happy pretty fun things work newer apis adding method little function", "d": "2/2016"}, {"body": "fix move mathmin logic figure guard line jridgewell thoughts future open runnable jsfiddle codepen assist debugging minor code golf function could written", "d": "2/2016"}, {"body": "fix move mathmin logic figure guard line jridgewell thoughts yup", "d": "2/2016"}, {"body": "take look solve", "d": "2/2016"}, {"body": "reopening due", "d": "2/2016"}, {"body": "whooops", "d": "2/2016"}, {"body": "set index prop passed otherwise undefined hand always sets index definitely inconsistency alternative costly add", "d": "2/2016"}, {"body": "different etc recall correctly stopped passing along avoid shadowing model url collection nt remember stopped passing", "d": "2/2016"}, {"body": "also future please open one issue pull request per change need two places", "d": "2/2016"}, {"body": "hi different asking ability pass collection init seems added somewhere deprecated fix bug tickets mentioned convo resulted allowing pased options collection model constructors respectively allowing collection somewhat indirectly solves bug argument allowing merely consistent change collection far see essentially proposing absence specific instruction model class collection creates model instance set url rather urlroot nt care done implement originally made urlroot option constructor actually thats wrong model specifies urlroot take precedence pushed squashed amendment pr minor thing easy enough hack around like feel correct inutitive behavior also future please open one issue pull request per change need two places problem try think pr opening issue future simple", "d": "2/2016"}, {"body": "actually board passing model constructor since may mean ajax url model url nt confusion", "d": "2/2016"}, {"body": "consistency argument pretty compelling urlroot work url", "d": "2/2016"}, {"body": "ca nt differentiate jquery model maybe open object passed options model", "d": "2/2016"}, {"body": "right point going one one broken nt seems kind gross though use case setting either method", "d": "2/2016"}, {"body": "edit fatfingered writing real comment", "d": "2/2016"}, {"body": "samatgithub brought use case model created collection tied collection nt know use case passing option modelcollection", "d": "2/2016"}, {"body": "model created collection tied collection urlroot already absolutely set collection could nt logic live collection passed option something like", "d": "2/2016"}, {"body": "currently item model instance removed collection longer talk remote urlroot edge case would make sense model keeps collection passed option nt code would perfect spot", "d": "2/2016"}, {"body": "wait use case creating model collection removing model collection surprised model nt keep collection url nt like think behavior currently right one model collection nt url urlroot set check collection nt collection responsible setting model tied collection longer", "d": "2/2016"}, {"body": "wait use case creating model collection removing model collection surprised model nt keep collection url well yes unexpected behavior motivated pr note however user removing model backbone remove model collections certain situations leaving hanging around without way talk remote unless specifically aware behaviour set things accordingly think behavior currently right one model collection nt url urlroot set check collection agree still case nt collection responsible setting model tied collection longer still tied backbonecollection still tied item remote collection model proxy backbonecollection factory backbonemodels proxies nt work standalone maybe subtle difference view responsibilities backbonemodel backbonecollection semantics remove opposed destroying model nt think backbonecollection reflection entire remote collection nt think view removing model collection synonymous deleting remote collection hey model fell view pr driven newb scratching head model part ui referencing got removed collection sync longer worked thought wrong end day understand behavior easy enough hack around took think though way models collection urls membership related bit think", "d": "2/2016"}, {"body": "agree surprise feel like many edge cases would backbone determine url urlroot nt set opposite behavior would surprising best bet probably set urlroot model initialize method know could potentially reference models outside collection right collection may reference models resource argue removed model collection usually reasoning behind sync removing model surprising still tie removed model collection longer member", "d": "2/2016"}, {"body": "entirely money", "d": "9/2016"}, {"body": "yup specifically fix super familiar code think solution preencode string see works", "d": "1/2016"}, {"body": "thank feedback get path api already encoded navigate using path without extra encoding think found broken code called correctly called event listener compare cached decoded fragment decoded backbone result another fragment cached one including configured handler executed think backbone fixed eg calling thisdecodefragment thisgetfragment", "d": "2/2016"}, {"body": "want open pull proposed solution tests fail master happy take look", "d": "2/2016"}, {"body": "proposal including test", "d": "2/2016"}, {"body": "changdongyang believe commenting wrong repository", "d": "1/2016"}, {"body": "captbaritone thank right put correct repository thanks", "d": "1/2016"}, {"body": "please use stackoverflow gitter channel mailing list questions github issues maintaining framework", "d": "1/2016"}, {"body": "lodash follows behavior ps backbonejs repo lodash", "d": "1/2016"}, {"body": "change instead keep crossbrowser consistency mildly breaking change though", "d": "1/2016"}, {"body": "yup could nasty side effects someone something like maybe next major version fireengine", "d": "1/2016"}, {"body": "meantime meant overridden though would nt know private naming could copypaste code changing", "d": "1/2016"}, {"body": "jridgewell cool thanks tip", "d": "1/2016"}, {"body": "usually say passing antipattern reasoning nt want uncollected detritus floating case someone accidentally uses remove collection explain preferred way call want get rid model completely want collection garbage collection taking care event binding handle rest", "d": "1/2016"}, {"body": "nt issue silent true issue cleanup hash fork previous fiddle two lines modified use anywhere existing project sometimes hearing event calls remove destroy execute hash still contains references allegedly removed destroyed model via keys via model key model supposedly removed second unstoppable remove event occurs model destruction makes inadequate test model membership collection membership tests positive still map model presumably nt called already model key removed previous remove call second remove event continues execution positive membership test removes last item collection nt curiosity little bit extra information project project extends backbone provide asynchronous control flow sometimes uses wait promises resolve triggering events used backbone corporate datadriven website also needs coordinate multiple collections involve data data views subsequent validation synchronization behavior implemented well although might easily changed anyway nt matter used", "d": "1/2016"}, {"body": "worth test fails tag passes master", "d": "1/2016"}, {"body": "right calling event backwards intended design nt actually remove reference remove event fired", "d": "1/2016"}, {"body": "ivarni thanks new version rolled without problem sometime soon would fantastic part public api would like public presented consistent state point time second event handled model nt key collection inconsistent think would intuitive robust remove three keys call triggering would fix problem complicated business logic database sync assurance abstractions support moving away strict rest necessary collections tied state collection question kind thing necessary able call determine model destroyed", "d": "1/2016"}, {"body": "dupe fixed", "d": "1/2016"}, {"body": "possibly nt know scheduled line nonoptimistic call might fix issue example testing update jridgewell careful look visited issue happens appears related fixing underlying issue likely fix ivarni pointed test passing master hope issue fixed work important estimate next release occur gauge whether workaround necessary", "d": "1/2016"}, {"body": "fixed version thanks", "d": "4/2016"}, {"body": "please read wraperror parameters", "d": "1/2016"}, {"body": "takes parameters nt contain know answer", "d": "1/2016"}, {"body": "almost ca nt directly get method wraperror response jqxhr \u044f\u043d\u0432 \u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c maksim notifications githubcom \u043d\u0430\u043f\u0438\u0441\u0430\u043b takes model options parameters nt contain method know answer reply email directly view github", "d": "1/2016"}, {"body": "second solution rewrite backbonesync", "d": "1/2016"}, {"body": "questions like better left one channels questions working backbone general discussions", "d": "1/2016"}, {"body": "answer", "d": "1/2016"}, {"body": "found closed wont fix keep mind values attribute models collection deep setget work cases", "d": "1/2016"}, {"body": "futurist nt support deep properties fact recommend everything simple primitive values", "d": "1/2016"}, {"body": "ah yeah bad broke last time fixed", "d": "1/2016"}, {"body": "try stackoverflow questions", "d": "1/2016"}, {"body": "im always using idattribute id never issue since nt really get problem facing", "d": "12/2015"}, {"body": "elgubenis said", "d": "12/2015"}, {"body": "elgubenis id attribute would need passed api calls works fine app users making api calls want open api users would make api harder use api calls would like ugly like supposing book would unique identifier name ideally work like jridgewell nt question suggestion backbone less opinionated api structured nosql apis nt even let respond closing issue", "d": "12/2015"}, {"body": "ristostevcev think jridgewell closed question backbone default using rest want use someting like rewrite ready go nosql solution simple version javascript backbonesync function method model options options options switch method case create break ps done websokets simple powerfull", "d": "12/2015"}, {"body": "suggestion question nt use rest backbone relying headily api requests particular nt work elegantly set something else nt asking question looking use object id mentioned good reason original post explains issue nt see problem nt deserve consideration angularjs agnostic rest api structured backbone almost agnostic allowing set mentioned problem approach providing example breaks", "d": "12/2015"}, {"body": "ristostevcev said rethink arhitecture id db world unique identifier name want someting change sync method use elgubenis solution options try find way rethink arhitecture", "d": "12/2015"}, {"body": "id db world unique identifier name actually anything unique key db unique identifier identifier makes api easier use id used instead id eat user api request limit add additional load server user send additional request figure id something nt many real world popular apis either use id number unique identifier rest api looks completely different one backbone forces answer nt need rethink architecture sometimes different architecture makes sense sometimes architecture nt backbone flexible enough work kind api structure without internally changing rest api backbone relies say got wrong backbone rest api gold standard frankly little arrogant elitist impractical", "d": "12/2015"}, {"body": "one nt going change backbone sync designed rest architecture absurdly common want use arbitrary identifier case override", "d": "12/2015"}, {"body": "backbone designed rest architecture overall like implying designed particular flavor rest api work google right tell would write model backbone google rest api endpoint listbyactivity get activitiesactivityidpeoplecollection list people specified collection particular activity backbone expected rest api supports one identifier per model endpoint two identifiers activityid collection angularjs simple backbone requires additional boilerplate almost every rest api come across least one endpoint looking two identifiers nt get wrong angular issues think makes point clear", "d": "12/2015"}, {"body": "collection like activities thisactivityid people thisid person collection url like", "d": "12/2015"}, {"body": "valid syntax backbone something like angular backbone expected rest api collections looks like unless want add considerable amount additional wiring api nt match", "d": "12/2015"}, {"body": "template string activities thisactivityid people thisid var c new collection cid test cactivityid var collectioncreate murl gt", "d": "12/2015"}, {"body": "ok could transpile using babel still nt neatly match backbone api structure look table main id instead reality unique identifier resource required form unique resource model backbone allows one id really uncommon two identifiers endpoint forming unique resource moments possibly better example crud insert list fits backbone structure remove delete match backbone api structure instead might say close enough fitting could get delete fit url structure want access larger api issue pops constantly would feel okay forcing coder write bunch extra boilerplate backbone redesigned work better github wikimedia flickr apis mentioned earlier nt fit anywhere near neatly mainstream apis coder hack backbone code get fit structure strong opinion apis look like mentioned initially arguing ca nt find way make api work backbone override methods arguing adds bunch extra boilerplate instead play nicer kind api structure reasons mentioned extra boilerplate backbone specific use cases nt common applications", "d": "12/2015"}, {"body": "nt fight accept learn url method idattribute overriding sync method plenty options connect restflavors never heard issues backbone offers many different ways use rest backends", "d": "12/2015"}, {"body": "elgubenis missing point trying say make anything work backbone nt deny saying apis nt conform well enough backbone expected api requires considerable boilerplate even url method idattribute example flickr rest request format looks like looks completely different backbone expects addeditdelete methods require http post put delete differ enough backbone nt want override backbonesync accessing two apis app enter different method url fetch save destroy heard issue look enough backbone criticisms find people talking angularjs lets interface api easily emberjs hearing backbone proud change real world deal kinds endpoints make coders add boilerplate libraryframework already requires bunch boilerplate business perspective might option change api company uses especially lot clients already using could come new version nt know would go boss told change fight accept learn fight saying want accept learn made point lots apis use backbone framework similar said enough made point take wish original argument plenty merit online library service identify unique resource using something like never change makes api easier use less arbitrary requires less work using finding id forgive thinking horrible idea", "d": "12/2015"}, {"body": "forgive", "d": "12/2015"}, {"body": "actually comes model try determine collection already set uses tries since model nt property fetches model please split", "d": "12/2015"}, {"body": "circumstances would id sounds like bug code better places fix code bugs backbone proper", "d": "2/2016"}, {"body": "categories coming external api one undefined like keep cause need get models collection category often", "d": "2/2016"}, {"body": "pr allow examples contrived favor adding tests back ensure backbone unopinionated reasonable ensures case tested", "d": "2/2016"}, {"body": "also similar case id object object", "d": "2/2016"}, {"body": "update pr case given nature accepting wide range values think judicious measures nt think adam going agree though p", "d": "2/2016"}, {"body": "duskpoet really model ids supposed used best bet first case fix bug second", "d": "2/2016"}, {"body": "view use backbone model backbonestickit realize two way databinding", "d": "12/2015"}, {"body": "also use issues qa please use thanks", "d": "12/2015"}, {"body": "hi nicknaso checked backbonestickit getting bind elements backbonestickit provide short example great help", "d": "12/2015"}, {"body": "hi elements must backbone model write little example base structure follow please refer styckit documentation rest really exaustive", "d": "12/2015"}, {"body": "kinds discussions best one channels questions working backbone general discussions", "d": "12/2015"}, {"body": "create jsfiddle codepen example demonstrating problem hard tell without actual code malformed means remove custom code work fine also github issues nt place debugging help please try stackoverflow gitter channel posting issue", "d": "12/2015"}, {"body": "hi jridgewell know close without reply", "d": "12/2015"}, {"body": "chance automatic responses new issues saying usual backbonestackoverflow thing maybe like", "d": "12/2015"}, {"body": "hi jridgewell know close without reply", "d": "12/2015"}, {"body": "nothing backbone", "d": "12/2015"}, {"body": "agree jridgewell", "d": "12/2015"}, {"body": "use model passed listener almost impossible fix updating hash done inside another listener guarantee called", "d": "12/2015"}, {"body": "see point sometimes case possible use model passed listener high level think way collection internal indexing done transparent user whether implementation done via simple array search ie via hashindexing method really matter user object given id collection returned returned neither case result object different id one searched currently inside model callback possibility know may hard fix current implementation maybe warning quirk docs would help others may fall always possible use model passed listener long read kanban tool global collections acting identity map stored objects time multiple ui components clean interface initialization requiring objectid input ie upon initialization look objects global collections encountered issue objecta saved handler new ui subcomponents created referencing objecta id components could find id global collection even though", "d": "12/2015"}, {"body": "high level think way collection internal indexing done transparent user whether get implementation done via simple array search ie id first thismodels mid mcid id via hashindexing essentially due landed instead getting pass model", "d": "12/2015"}, {"body": "think second better cleaner future reader know using backbone important things clear bad idea webpack define plugin", "d": "12/2015"}, {"body": "really question stackoverflow mailing list personally prefer import everything way much explicit easier refactor", "d": "12/2015"}, {"body": "explicitly import libraries new module create", "d": "12/2015"}, {"body": "please use stackoverflow mailing list questions github issues maintaining framework", "d": "12/2015"}, {"body": "proper syntax future please try stackoverflow mailing list gitter channel debugging help", "d": "12/2015"}, {"body": "might want add example docs trips well", "d": "12/2015"}, {"body": "definitely nt enough routing examples general", "d": "12/2015"}, {"body": "initialization pretty much always last however may interested case though could define routes initialize using could also potentially pass routes instantiating assuming object question point", "d": "12/2015"}, {"body": "thanks response thought special case makes sense call bindroutes initialization something may depend initialize method convention always call end constructor like said", "d": "12/2015"}, {"body": "closed", "d": "3/2017"}, {"body": "order router calls goes callback routertrigger route home args routertrigger route args backbonehistorytrigger route args callback always called first would nt affected amd", "d": "12/2015"}, {"body": "good job", "d": "12/2015"}, {"body": "bug find nov changed fixed bug amd commonjs bug still exist", "d": "12/2015"}, {"body": "think problem method simply returns first truthy object indexes lookup firefox property always return truthy result tests existence using model never added little ugly could something like following", "d": "11/2015"}, {"body": "try add pr change well tests later today", "d": "12/2015"}, {"body": "missed issue also seems related also difference affects values field model opposed keys attributes", "d": "12/2015"}, {"body": "looks like found issue issue seems solutionworkaround nt using arbitrary strings model ids leave open imagine marked duplicate closed shortly", "d": "12/2015"}, {"body": "yup alternative run checks every lookup comment notes would expensive hot path potential backbone might built around maps sets high enough priority right though stick js best practices take care keys could also others prefixing keys namespace emulate hash plugin might look something like following js const prefix bb const basemodel backbonemodelextend get attr return backbonemodelprototypeget prefix attr set attr value opts typeof attr string attr prefix attr return backbonemodelprototypeset attr value opts", "d": "12/2015"}, {"body": "solved problem passing exclude option browserify described apparently nt needed backbone versions older needed thanks everyone help", "d": "11/2015"}, {"body": "hi justin please let know request closed without answer justin ridgewell mailto notifications githubcom sent saturday november pm jashkenasbackbone cc chandrasekhar guda subject backbone identify set reverse normals programmatically using arcobjects closed reply email directly view github disclaimer email message sole use intended recipient may contain confidential privileged information unauthorized review use disclosure distribution prohibited intended recipient please contact sender reply email destroy copies original message check attachments viruses opening views opinions presented email author may reflect opinion cyient affiliates", "d": "11/2015"}, {"body": "nothing backbonejs", "d": "11/2015"}, {"body": "good question", "d": "12/2015"}, {"body": "looks like oversight part want work pr", "d": "12/2015"}, {"body": "nt think proper forum discussion tends backbonedevelopmentrelated topics maybe try asking question stackoverflow elsewhere", "d": "11/2015"}, {"body": "got work properly using issue seems related fact several models exactly except cid", "d": "11/2015"}, {"body": "using duplicate break instead give unique ids identify property like", "d": "11/2015"}, {"body": "ok thanks", "d": "11/2015"}, {"body": "try backbone gitter room general support", "d": "11/2015"}, {"body": "agreed questions working backbone general discussions", "d": "11/2015"}, {"body": "yes prototypes work javascript please search issues background", "d": "11/2015"}, {"body": "hi talontr correct happen purpose models part collection ca nt clean temporary models remove references model else would use models collection", "d": "11/2015"}, {"body": "far understand model holds collection reference primarly eventbinding since collection offers many options connected event handling option create collection eventunaware would great feature way create onetimeusage collections sorting bucketing bells whistles collection offer without steady increase memory usage caused nongarbagecollectable collections", "d": "11/2015"}, {"body": "looking wrong perspective model event binding nt issue collection collection reference models array models memory buildup seeing keep adding models collection ca nt garbage collected empty collection either throw away collection instance throw away collection model references", "d": "11/2015"}, {"body": "thanks jridgewell answer unfortunately nt provide insight looking non empty collectionmodels array reason collection get garbage collected reference left last line removes last existing reference singlecollection gets garbage collected along models thats expected behavior favor take second look fiddle adding model many collections instantly get discarded var lt since singlemodel already backbonemodel time one model within heap delete command reference tmpcollection left leaving removed next garbage collection cycle even collections model array emtpy point memory buildup see none tmpcollection collections ever really discarded add singlemodelevents hence consolelog singlemodelevents end fiddle outputs even without variable pointing tmpcollection ever created garbage collector ca nt discard collections events entries thanks advance patience", "d": "11/2015"}, {"body": "sure backbone right library use case try library like crossfilter need lot aggregation filtering", "d": "11/2015"}, {"body": "thanks tip really filtering massive datasets otherwise happy backbone whole problem arose started rewrap collection function results filter collections returning filter result new collection instance class enables function chaining well using backbone collection functions extended collection functions great way work backbone collections assuming intermediate collections get discarded scope left instead backbone preserves event references within matching model simple solution would prevent intermediate collections attaching event listeners like huehnerhose proposed", "d": "11/2015"}, {"body": "ah understand simple solution would prevent intermediate collections attaching event listeners like huehnerhose proposed try overriding nothing private method nt guaranteed stay", "d": "11/2015"}, {"body": "thats less exactly moment removing added collection listeners case rewrapped collection might break next backbone update disablemodeleventlistenerflag false addreference function model options thisoriginaladdreferencecall model options surprised find backbone nt offer anything like underscores chain method would cool feature unfortunately fact collection registers models prevents us creating good concept even pr providing true backbonecollectionchain discussions single model multi collection relationships past eg occurs backbone nt clear handles", "d": "11/2015"}, {"body": "seems working provide jsfiddle showing error", "d": "11/2015"}, {"body": "notice please open safari record safari record chrome", "d": "11/2015"}, {"body": "seems fairly similar described", "d": "12/2015"}, {"body": "looks like safari buggy implementation assignment windowlocationhash \u5317\u4eac unicode ac faced issue ukrainian chars well log cityname \u0457\u0454 indexhtml line log locationhash citywt indexhtml line affects nonlatin chars addinig encodeuri updatehash assigning new hash fixes issue safari browsers links look like indexhtml city ba ac locationhash encodeuri fragment sure ok send pull requests", "d": "12/2015"}, {"body": "found better solution update tests done green", "d": "12/2015"}, {"body": "faced issue safari sample looks like test unicode symbols hash already written passes safari research figured windowlocation emulated tests html element assigning urlencoded hash worked correctly", "d": "3/2016"}, {"body": "afaiu hash part uri unicode characters encoded assigning unicode string probably avoided safari quirk another reason original authors jsfiddle latest using hash encoded name consistent safari chrome", "d": "5/2016"}, {"body": "backbonerouter seems designed feel nomenclature bit misleading goal external modules different routes since use amd module loading might something like javascript define function var model var view return function boilerplate mvc whatever model new model view new view javascript define backbone filtermodule function backbone filtermodule return backbonerouterextend routes filters filtermodule exactly code get idea trying accomplish unclear want route event also carry route name", "d": "11/2015"}, {"body": "hmmmmmmmm something like architecturally speaking fan javascript backbonerouterextend initialize function thisroute filters filters filtermodule nt like seems blur line factory typically constructor typically could move calls route outside object though feels like bit much open ideas", "d": "11/2015"}, {"body": "confusion example demonstrating lay view using hash described earlier section mapping dom events view methods backbone extracted documentcloud example may bit specific documentcloud use case another example think would make sense", "d": "11/2015"}, {"body": "bad sure missed first paragraphs nt yesterday looking keyword thing explaining usage code description posted remember anyways", "d": "11/2015"}, {"body": "please make jsfiddle case thanks", "d": "11/2015"}, {"body": "nt sound related bugfix addressing test see still getting issue", "d": "12/2015"}, {"body": "seems like closed", "d": "9/2016"}, {"body": "referring", "d": "11/2015"}, {"body": "yes guess", "d": "11/2015"}, {"body": "cool feel free weigh", "d": "11/2015"}, {"body": "thanks invitation quite recently decided nt need dependency backbone framework would rather implementation collections fun tickets", "d": "11/2015"}, {"body": "ooo good find", "d": "10/2015"}, {"body": "dupe others", "d": "10/2015"}, {"body": "nope nt setting attributes construction js var model function attrs attrs defaults attrs result defaults var new model hasownproperty test mattributeshasownproperty test gt false", "d": "10/2015"}, {"body": "right related nt name keys admonition seems fairly relevant", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "nt name keys watch seems fairly prescient creating model arbitrary keys nt mercy runtime use right related related slightly issues conflicts properties nt define one prevents creating model reserved properties", "d": "10/2015"}, {"body": "yeah agree justin would consider bug", "d": "10/2015"}, {"body": "aside using objectcreate null place comes worms would propose", "d": "10/2015"}, {"body": "use times need argument orders adjusted", "d": "10/2015"}, {"body": "feels like halfsolution drops readability fine go still think avoid et al app least", "d": "10/2015"}, {"body": "could modify check notskip assignment existing value firefox experimenting making nonwritable would nt classify bug behaving design anything request would enhancement change", "d": "10/2015"}, {"body": "changing introduce subtle bug apps relied behavior let tread carefully", "d": "10/2015"}, {"body": "would nt effect case behavior assign even value exists value still assign change allow assigning values exist something like", "d": "10/2015"}, {"body": "jdalton mean referring case js var model backbonemodelextend defaults foo true var model new model foo undefined defaults modelget foo true extend modelget foo undefined", "d": "10/2015"}, {"body": "extend would preserve undefined adam modelextend differs semantics extend extend foo undefined defaults foo undefined thu oct pm adam krebs notifications githubcom wrote jdalton mean referring case var model backbonemodelextend defaults foo true var model new model foo undefined defaults modelget foo true extend modelget foo undefined reply email directly view github", "d": "10/2015"}, {"body": "mean referring defaults behavior", "d": "10/2015"}, {"body": "megawac aware expressionless referring line", "d": "10/2015"}, {"body": "checking source value instead destination value", "d": "10/2015"}, {"body": "well escalated quickly expecting simple solution like used would bad solution reason could come want support use cases developer intentionally creates prototype chains really wants inherited properties assigned attributes would bit strange usually things interested inherting prototype methods fields would like treat attributes model perhaps thing really like use let developer decide many properties inherited want treat attributes third approach perhaps stupid really want treat fields even worth attribute criterion decide prefer value argument passed constructor intuitively match developer intent specified attribute explicitly constructor argument used leads following idea let us traverse prototype chains find lowest common ancestor compare values fields values lca", "d": "10/2015"}, {"body": "reading code bit puzzled merging uses forin loop definition iterates fields certainly function set reason get conflict check propertyisenumerable objects one implicitly iterating", "d": "10/2015"}, {"body": "well jeremy currently taking americas bike believe decision falls braddunbar cut release pretty ugly hacks sure necessary", "d": "10/2015"}, {"body": "scaled back deopting check arguments check nt necessary think go release since nt imagine releases rather start merging prs nonbreaking generic people choose incorporate without redoing entire app think pretty good solution particular objection", "d": "10/2015"}, {"body": "arguments check nt necessary right referring presplit still fan rather start merging prs got mind complete overhaul something gradual think pretty good solution particular objection responding clarity", "d": "10/2015"}, {"body": "adding needed bugfix", "d": "10/2015"}, {"body": "updates", "d": "12/2015"}, {"body": "remaining new features add preinitialize add update event feedback think cut unless prs ready merge looks like pr fallen idle merge conflicts", "d": "12/2015"}, {"body": "agreed think ready go", "d": "12/2015"}, {"body": "anyone want draft pull request changelogdocumentation updates", "d": "12/2015"}, {"body": "ping braddunbar try get pr tonight", "d": "1/2016"}, {"body": "usually paulfalgout smile", "d": "1/2016"}, {"body": "first one pr wins", "d": "1/2016"}, {"body": "ha yeah jdalton take bit snowed week nt get around jump later", "d": "1/2016"}, {"body": "draft changelog", "d": "1/2016"}, {"body": "closing", "d": "1/2016"}, {"body": "looks like problem module loader setup packagejson dependencies usually marionette depending different version backbone one packagejson try stackoverflow mailing list gitter page debug backbone nt anything special", "d": "10/2015"}, {"body": "hi supritashankar kind request best left one channels questions working backbone general discussions recommend trying stackoverflow", "d": "10/2015"}, {"body": "jridgewell put first also bounty question", "d": "10/2015"}, {"body": "added jridgewell could return array even empty removed nothing get back empty array", "d": "10/2015"}, {"body": "whoops always returning array", "d": "10/2015"}, {"body": "want work pr", "d": "10/2015"}, {"body": "fjanon jridgewell improved documentation please let know clear", "d": "11/2015"}, {"body": "fix pulled master branch issue closed", "d": "12/2015"}, {"body": "braddunbar mind taking look", "d": "10/2015"}, {"body": "jirgn looked today able replicate reopen provide jsfiddle causes error", "d": "10/2015"}, {"body": "yep seems like good idea dependencies drop support backbone implicitly lose support anyway syncing seems like good plan", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "specifically need fix finally use still ca nt use could get rid iframe end missing supporting older browsers", "d": "10/2015"}, {"body": "besides able adopt various methods scanned backbone see fixes ie lt old ie amp earlier dropped", "d": "10/2015"}, {"body": "iframe issues affect us moving forward things besides able adopt various methods got rid underscore remember mostly objectcreate see", "d": "10/2015"}, {"body": "iframe issues affect us moving forward things dropping support means less code less workarounds less testing overhead generally less headaches allows expanding features new lowest common denominator instead boxing features doable got rid underscore remember mostly see suuuper handy though", "d": "10/2015"}, {"body": "instead boxing features doable give example happening currently seems mostly talking minor code changes anything fundamentally different backbone iframe section could removed ton code", "d": "10/2015"}, {"body": "give example happening currently really involved daytoday backbone maybe jridgewell braddunbar insights know developing lodash issue scoping features lowest supported environment comes plenty things like mapsetweakmap null prototypes etc seems mostly talking minor code changes anything fundamentally different backbone iframe section could removed ton code reduction code complexity nice though see something like supporttriage may bigger win know debugging older ie issues nt easiest many devs lack vms may volunteering oldiesupportcontact cool guess", "d": "10/2015"}, {"body": "iframe section could removed ton code nt discount history fixes done iframe tried refactoring router code times always frustrated legacy code really involved daytoday backbone maybe jridgewell braddunbar insights thankfully jquery took brunt ie code fixes history code know work around", "d": "10/2015"}, {"body": "thankfully jquery took brunt ie code fixes history code know work around jquery moves away support backbone take support burden fixes", "d": "10/2015"}, {"body": "jquery moves away support backbone take support burden fixes nah enddev code views ajax requests backfill anything missing updating latest jquery", "d": "10/2015"}, {"body": "clarify backbone wo nt drop support even though jquery amp microsoft also wo nt put effort extend support beyond history correct anguished", "d": "10/2015"}, {"body": "get rid ie workarounds history", "d": "10/2015"}, {"body": "certain extra features gain dropping support certain wo nt gain anything keeping past end support", "d": "10/2015"}, {"body": "could define gettersetter stop", "d": "10/2015"}, {"body": "news jquery somewhere know nt support neither stopping development branch", "d": "10/2015"}, {"body": "paulfalgout yes plan branch official post yet", "d": "10/2015"}, {"body": "using lot fallbacks stuff airbus company moving companies like make jump think die finally", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "4/2016"}, {"body": "going backbones source code set method changes triggered changed attributes one one later change event fired see assignments happening two points nt know id getting updated two points way looking get updated model works", "d": "10/2015"}, {"body": "listening event change happens event need model follow anoopmd suggestion", "d": "10/2015"}, {"body": "see many duplicates", "d": "10/2015"}, {"body": "see personally hate lowercased name sigh", "d": "10/2015"}, {"body": "", "d": "9/2015"}, {"body": "awesome looking forward pull", "d": "9/2015"}, {"body": "strong preferences whether batches think would prefer batches avoid possible merge hell scenarios better guys", "d": "10/2015"}, {"body": "want work pr", "d": "9/2015"}, {"body": "sure submitted one though sure approach adding iteratee value arguments reverse order underscore methods thoughts", "d": "9/2015"}, {"body": "closed", "d": "9/2015"}, {"body": "looking passing object event compare previous attributes current meaning comparing think want closer sure previous attributes behavior expected someone else want weigh", "d": "9/2015"}, {"body": "stumbled upon problem today imho bug according documentation change event triggered model attributes changed changed change call handler imho compare current attributes previous ones alas internal property reset event triggered thus called parameter compares previous attributes", "d": "3/2018"}, {"body": "license mit packagejson sufficient needs", "d": "9/2015"}, {"body": "packagejson whole license text sufficient according license requires copy license text included reason care maintain fedora package backbone required ship license text package", "d": "9/2015"}, {"body": "nt understand using npm package npm download use git github releases fedora package manager tied npm", "d": "10/2015"}, {"body": "tarball downloaded makes difference problem nt contain license text answer question fedora package uses npm packages npm dependency backbone satisfied actual build output two binary packages contains actual js people nt care npm requires also provides npm metadata npm requirements satisfied common way packaging js libraries fedora nowadays spec file interested change fedora package use github tarball prefer getting bit offtopic issue putting aside fedora packaging stuff npm pull tarball include license text like", "d": "10/2015"}, {"body": "hmm seems incorrect reverting sure logic keeping js library os package manager know", "d": "10/2015"}, {"body": "thing multiple inheritance javascript mix properties instead", "d": "9/2015"}, {"body": "hum yep precisely purpose avoid mixing manually properties", "d": "9/2015"}, {"body": "precisely mixing properties prototype multiple inheritance", "d": "9/2015"}, {"body": "yes simulates multiple inheritance final result use many module want js test extend multi inheritance function var function return", "d": "9/2015"}, {"body": "see", "d": "9/2015"}, {"body": "thanks write looks duplicate though", "d": "9/2015"}, {"body": "sorry missed one", "d": "9/2015"}, {"body": "could might nice addition implementation little heavyweight though way could slim", "d": "9/2015"}, {"body": "thanks please give pointers heavy code might think could cleaned bit replace current logic done backward compatibility mind added stuff top existing logic", "d": "9/2015"}, {"body": "would guess without looking much possible combine logic already respond diff", "d": "9/2015"}, {"body": "related router changes cc jmeas", "d": "9/2015"}, {"body": "great idea think folks looking feature baserouter returns hash named params query params though ca nt recall works splats evident commit referenced op dsl implementation backbone biggest hindrance feature nt planning making changes dsl implementation keep concerns separate hugely favor updating vague plan subsequent pr focused solely dsl sure ifwhen get chance anytime soon", "d": "9/2015"}, {"body": "sorry jmeas done better research pretty much already implemented baserouter converting querystring object also great addition think possibly objectified rare case someone needs use raw value", "d": "9/2015"}, {"body": "possibly querystring objectified query routedata rare case someone needs use raw querystring value seems like good idea comes single point entry router think giving user much information possible best open pr baserouter merge cut release p query parameters super interesting comes router two leading clientside router philosophies uirouter ember router take fairly different approaches uirouter blends query parameter rest route sense ember keeps separate also todo list evaluate pros cons approach nt reached conclusions prefer dsl working client side router ignores query params moment reason", "d": "9/2015"}, {"body": "moving", "d": "10/2015"}, {"body": "closed ps mark answer correct", "d": "9/2015"}, {"body": "nice suggestion plenty times would nt want previous routes run view edit comment page example nt need post data counterpoint could nt common method called routes need", "d": "9/2015"}, {"body": "counterpoint could nt common renderpost method called routes need yes commonly solved plenty times would nt want previous routes run agreed routes would simply pass chained callback string", "d": "9/2015"}, {"body": "routes simply would pass chained callback string ah note readme cool concept opinion magical problem ultimately trying solve data view dependencies metaframeworks like marionette chaplin use regions layouts help sure tack take gives flexibility control without learn esoteric router syntax", "d": "9/2015"}, {"body": "aside able implement event router something like js chainedrouter backbonerouterextend constructor backbonerouterapply arguments thison route thischainedroutes", "d": "9/2015"}, {"body": "yeah confirm really bad", "d": "9/2015"}, {"body": "special event specifically prepend event name callback know event called bind listener event already know event triggered listener", "d": "9/2015"}, {"body": "yeah consistent callbacks every events event name first parameter callback imo", "d": "9/2015"}, {"body": "negative number indicates select end collection would indicate last item collection believe works expected need negative number indicate found suggest check calling", "d": "9/2015"}, {"body": "believe works expected need negative number indicate found suggest check calling agreed", "d": "9/2015"}, {"body": "hi please use mailing list stackoverflow questions like github issues maintaining framework", "d": "9/2015"}, {"body": "happy look provide test case", "d": "9/2015"}, {"body": "sure thing since add remove working perfectly fine sure part share debug", "d": "9/2015"}, {"body": "whatever calling causes event also state collection beforehand", "d": "9/2015"}, {"body": "overrided parse looks like consolelog prints response received every time fires adds removes update calling set directly fetch call fires parse calls set assume instance api calls give objects time gives adds removals time updates verified via issuing bind collection logging changes update", "d": "9/2015"}, {"body": "adding found another one collection firing change event bypassed binding sync seems like hack", "d": "9/2015"}, {"body": "write jsfiddle demonstrate", "d": "9/2015"}, {"body": "heedster remember encountering similar issue ver upgraded ver solved problem", "d": "10/2015"}, {"body": "weird issue update would fire using upgraded problem fixed", "d": "10/2015"}, {"body": "added notice changelog incorrectly spelled corrected", "d": "10/2015"}, {"body": "", "d": "9/2015"}, {"body": "reason needs stay open looks like linked pr closed", "d": "10/2015"}, {"body": "docs event triggered model collection also triggered collection directly convenience allows listen changes specific attributes model collection example documentson change selected", "d": "9/2015"}, {"body": "thanks gone documentation thoroughly bad", "d": "9/2015"}, {"body": "see", "d": "9/2015"}, {"body": "something address objectcreate might worth looking drop", "d": "9/2015"}, {"body": "polyfilled black magic think", "d": "9/2015"}, {"body": "prior art exoskeleton see etc general say right generally nt realworld use case naming keys constructor hasownproperty keep mind object hash change easy comes minimal side effects let bite bullet", "d": "9/2015"}, {"body": "may good reasons eventually drop using properties like nt one let leave", "d": "9/2015"}, {"body": "may good reasons eventually drop using properties like constructor nt one let leave trouble actual current project made sad case treatment overwrite collection", "d": "9/2015"}, {"body": "may issue chromewebkit testing reveals behavior", "d": "8/2015"}, {"body": "ok fwiw issue appears caused combination chromewebkit catchall type route like backbonerouter something like running results expected behavior router removing flag also results correct behavior interesting turning chrome developer tools somehow fixes problem live mode", "d": "8/2015"}, {"body": "referring changes neat side effect backbonehistory longer uses jquery event methods pushstate hashchange listeners native way changing worked", "d": "10/2015"}, {"body": "eventually found rooted chrome instability shutting chrome restarting fixed behavior", "d": "10/2015"}, {"body": "setting directly never really supported experience always readonly property keep needing every single time said could something like following least avoid case messing diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs thisid thisget thisidattribute var id thisget thisidattribute id null thisid id", "d": "8/2015"}, {"body": "thanks quick response agree setting directly probably way go sometimes got work got setting directly supported fine issue closed well least got documented others run problem upgrading", "d": "8/2015"}, {"body": "sometimes got work got need mutate clientside nt typically something set sent server", "d": "8/2015"}, {"body": "need mutate id clientside nt typically something set sent server reasons specific code within app agree smell", "d": "8/2015"}, {"body": "problem added idattribute models assigned id removed direct assignments think works lot models little problematic regression problem error console effect components disappear application lots different cases lines code", "d": "10/2015"}, {"body": "please use stackoverflow debugging github issues maintaining framework", "d": "8/2015"}, {"body": "looks like answered future please use mailing list gitter channel questions", "d": "8/2015"}, {"body": "update url want work pr", "d": "8/2015"}, {"body": "yeah would like yep would update url given params", "d": "8/2015"}, {"body": "backwards compatible issues foresee", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "tell thinking words", "d": "8/2015"}, {"body": "create pull request url function needs passed params sync default", "d": "8/2015"}, {"body": "pretty sizable thread read first please search opening issues essentially make use prop jqueryajax need set querystring values futzing actual url string done instance props method", "d": "8/2015"}, {"body": "three changes happened routing layer wager causing problem give us bit information happening", "d": "8/2015"}, {"body": "hmm sure navigate inside backbonejs seems called never calling routernavigate later put consolelog inside backbonejs found two called", "d": "8/2015"}, {"body": "browser using", "d": "8/2015"}, {"body": "thing happens dumping backbone routers initialised seems app freezes nt get executed upon navigation works fine cases bang routing behaviour btw also break backbone marionette routing", "d": "9/2015"}, {"body": "browser using post code sample", "d": "9/2015"}, {"body": "using latest chrome code sample difficult actually marionette app quite complex modularised routers", "d": "9/2015"}, {"body": "weirdest thing running issue end backbonehistoryhandlers array empty properly initializing approuter", "d": "9/2015"}, {"body": "got exactly issue backbone filipmares backbonehistoryhandlers array empty", "d": "10/2015"}, {"body": "similar problem research found two backbone versions bundled webpack project depends backbonesyphon dependent updated backbonesyphon dependency accept run npm dedupe rebuild app worked tip run webpack displaymodules know two versions bundled", "d": "10/2015"}, {"body": "correct thanks tip sun oct pm luiz am\u00e9rico notifications githubcom wrote similar problem research found two backbone versions bundled webpack project depends backbonesyphon dependent updated backbonesyphon dependency accept run npm dedupe rebuild app worked tip run webpack displaymodules know two versions bundled reply email directly view github filip", "d": "10/2015"}, {"body": "think closed issue likely described", "d": "3/2017"}, {"body": "many virtual dom libraries wild virtualdom good one backbone continue agnostic choice templating library something specifically change way backbone views work make easier work virtual dom libs maybe consider tend take radically different view app state architecture backbone", "d": "8/2015"}, {"body": "actually intimately familiar idom one reasons enthusiastic really nothing needs done support backbone treat like normal method js var view backboneviewextend template function data idom code render function stuff", "d": "8/2015"}, {"body": "sorry read comment closing please feel free reopen want keep general tracker support virtual doms view unopinionated class backbone better worse know one practice codified prevents general vdom diffs container may keep container js virtualdom example code var tree setinterval function count reassigned every tick normal backbone view natural assume ca nt else event delegation breaks actually first child", "d": "8/2015"}, {"body": "jridgewell admittedly nt ton experience using vdom backbone views experience mithril react one thing stands potential pitfall example looks like work great single view normal html elements manage nested backbone views way backbone combined backbone classes work quite differently vdom libraries", "d": "8/2015"}, {"body": "manage nested backbone views way treat way subviews jquery detach render reattach left two something comments render method wink rerender much slower actually working getting firstclass subview support build idom wo nt apply vdom libraries need detachreattach render racehorse render backbone combined backbone classes work quite differently vdom libraries nondestructive react react much like backbone standardized yet backbone component concern react dev directly call", "d": "8/2015"}, {"body": "treat way subviews jquery detach render reattach triggers reflows nt performance worse using vdom library subview management hard problem jquerybackbone nt unsolvable solutions atodds treebased descriptor approach majority vdom libraries take backbone render component concern react dev directly call could set something similar backbone problem creating backbone view typically sideeffects nt idempotent way vdom components typically implemented event delegation good example could done feeling lot easier use vdomfirst approach", "d": "8/2015"}, {"body": "triggers reflows nt performance worse using vdom library jmeas actually testing ago found dom manipulations happen quickly oneaftertheother nt huge reflow penalty think browser group single reflow idea limit though virtual doms idom included actually trigger dozens reflows single render since elements modified attached dom tree detachreattach subviews nt hurt aside one reasons idom damn fast optimizing garbage collection dom manipulations manipulations certainly slower normal js react definitely right track actually manipulations causing bottleneck throwing away hundreds dom instances think elements attribute instances get created thrown away bottleneck react intelligently diffs largest source garbage fixed still suffers rendering entire virtual tree throwing away old one idom discovered away eliminate virtual tree last painful gc pretty atodds treebased descriptor approach vdom libraries take found something like mustache content attach subview entirely replace element time rerender replace original element rerender maintain element tree replace", "d": "8/2015"}, {"body": "jmeas actually testing ago found dom manipulations happen quickly oneaftertheother nt huge reflow penalty knowing ton browser performance optimization say nt seem like removing readding thousands times scales large app recommendation browser vendors seen avoid touching dom nt also sure repo shows best methodology test dom performance mutationobserver nt really meant used way maybe chromium telemetry firefox performance tools topcoat pretty awesome telemetry tool built chromium would suited virtual doms idom included actually trigger dozens reflows single render since elements modified attached dom tree seems odds said one stated benefits virtual dom batching flushing changes time simply updating properties wo nt trigger reflow adding removing elements updating classnames getting computed styles etc gotten little offtopic fault happy continue gitter", "d": "8/2015"}, {"body": "adding removing elements updating classnames getting computed styles etc meant hopefully adding removing bunch elements every render updating classes common gitter smile", "d": "8/2015"}, {"body": "ps forked fork jashkenas backbone v ember performance demo add backbone incremental dom stunningly fast", "d": "9/2015"}, {"body": "jridgewell maybe incremental dom future backbone", "d": "9/2015"}, {"body": "jridgewell cool ambitions see opportunities integrating backbone incremental dom", "d": "9/2015"}, {"body": "beside promoting defacto templating language wink nt think anything done majority use cases exactly analogous using html lt content gt underscoreviewtemplate template documentgetelementbyid template text idomviewtemplate function data incrementaldomelementopen div null null class box id box datanumber style top datatop px left dataleft px background rgb datacolor incrementaldomtext datacontent incrementaldomelementclose div pretty hand write several others working precompilation x gt idom using swap build target compiled function compiled idom continue use jst object however referencing templates replace jquery part use js var view backboneviewextend template underscoreviewtemplate render elhtml thistemplate thismodelattributes return var view backboneviewextend template idomviewtemplate render idompatch thisel thistemplate thismodelattributes return", "d": "9/2015"}, {"body": "pretty hand write several others working precompilation x idom using template swap build target template compiled function compiled idom continue use jst object however referencing templates replace jquery innerhtml part render use idompatch kind hinting perhaps idom templating language ready bake render function backbone sets thought", "d": "9/2015"}, {"body": "could certainly", "d": "9/2015"}, {"body": "documented", "d": "8/2015"}, {"body": "sorry specific referring undocumented methods specifically used one devs could assume methods stay part api", "d": "8/2015"}, {"body": "please use mailing list stackoverflow gitter channel questions github issues maintaining framework", "d": "8/2015"}, {"body": "talking middleware approach similar express right like different functions could chained would nt regular conditional custom work use case", "d": "8/2015"}, {"body": "would nt regular conditional custom sync work use case ding ding ding pretty big antifan middleware compared simple plugin calls needs call", "d": "8/2015"}, {"body": "way override bit ugly also obvious clean backbone rides line magic allowing implementer understand happening quite well would nt want middleware approach personally megawac make backbone plugin extends backbone exactly suggested", "d": "9/2015"}, {"body": "pretty common major plugin developers fall trap thrash sync environment storing access originalprevious sync way may conflict instance mixing two popular sync overrides run stack overflow issues due recursive calls load second occurs resolves default case ajaxsync thus causing resolve though could implemented plugin nt think optimal way disseminate change think core feature something implemented officially", "d": "9/2015"}, {"body": "would good additional functionality baked sync could configure behaviour rather pluginchainoverride system", "d": "9/2015"}, {"body": "maybe could rename enough convention", "d": "9/2015"}, {"body": "like suggestion allows backwards compatibility also believe addresses megawac concerns thorough explanation got thinking differently", "d": "9/2015"}, {"body": "result right model control process rewrite method control xhr want request progress use see collectioncreate backbonesync", "d": "8/2015"}, {"body": "fair point", "d": "8/2015"}, {"body": "part promises js collectioncreate attr value model gt model created successfully error gt error happened creating locally collectioncreate attr value wait true model gt model created successfully error gt error happened creating locally server", "d": "8/2015"}, {"body": "jridgewell near future", "d": "8/2015"}, {"body": "tried suggested little painful modifying sync pretty much want functionality changing return xhr need copy two private function dependencies preparemodel ismodel fun something consider changing better waiting promises jridgewell talking", "d": "8/2015"}, {"body": "something consider changing better waiting promises jridgewell talking wo nt changing", "d": "8/2015"}, {"body": "jquery version use jquery bug times browser like ff requests nt fire events xhr", "d": "8/2015"}, {"body": "unlikely backbone issue jquery one mind opening issue tracker", "d": "8/2015"}, {"body": "think paulfalgout put well marionette issue backbone binds events view delegation directly js example foo customevent backbone elon customevent foo", "d": "8/2015"}, {"body": "perhaps sure something intended handled days anyone", "d": "8/2015"}, {"body": "dupe closed one nt feel strongly one way", "d": "8/2015"}, {"body": "oh right ids need parsed collection level", "d": "8/2015"}, {"body": "nt think necessarily parse model twice fix bug make sure instantiate model earlier passed would nt mind working pr cleaner fix unless worth time know jridgewell working larger refactoring might also address", "d": "8/2015"}, {"body": "make sure instantiate model earlier parse true passed issue nt want instantiate needed know jridgewell working larger refactoring collection parse might also address think approach would completely removing fetching parse collection level map result models passing pass models yes mean instantiating redundant models moving parsing issues entirely", "d": "8/2015"}, {"body": "rethink parsing entirely way currently implemented quite halfassed result never used documentcloud originally imho put towards top list actually", "d": "8/2015"}, {"body": "summarize let know misunderstanding anything passed technically impossible sure passed raw objects already collection without parsing since may root raw object since side effects mutate ca nt call without model instance therefore must instantiate parse every returned model eg fetching data server attempting intelligently merge new models attributes collection think result jridgewell suggestion moving parsing concerns would correct solution problem could significant performance implications also probably would nt happen alternatively short term look pull request created fixes original bug consumers apis wrapped responses nt degrade performance anyone else consumers apis root response nt experience extra parsing passes unit test suite interested running performance test suite anyone one thanks", "d": "8/2015"}, {"body": "nt option think thinking sadly gone see op reasoning", "d": "8/2015"}, {"body": "please direct questions gitter chatroom google group freenode irc documentcloud channel", "d": "8/2015"}, {"body": "dupe", "d": "8/2015"}, {"body": "looks like fixed nt uploaded documentation yet fixed release", "d": "8/2015"}, {"body": "documentation still vague assumed string name attribute expected return value ever get fixed", "d": "11/2015"}, {"body": "update backbone website docs", "d": "11/2015"}, {"body": "cherry pick commit ghpages", "d": "11/2015"}, {"body": "mortenson updated", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "example still wrong nt mean still returns name attribute also var library new library type dvd dvdid type vhs dvdid second object vhsid", "d": "3/2016"}, {"body": "yeah fixed", "d": "3/2016"}, {"body": "ishaikovsky fixed master pulled ghpages fixed", "d": "3/2016"}, {"body": "still second typo ishaikovsky pointed", "d": "3/2016"}, {"body": "sigh time open pull", "d": "3/2016"}, {"body": "curiosity nt commit referenced pulled date head master code", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "skipped cherrypick second typo still alive well", "d": "3/2016"}, {"body": "actually looks like coming", "d": "3/2016"}, {"body": "second typo mean second object fixed using shared instead", "d": "3/2016"}, {"body": "dvdid", "d": "3/2016"}, {"body": "appropriate else", "d": "3/2016"}, {"body": "yeah could make model would set thought example getting long enough b demonstrates behavior bit better leave", "d": "3/2016"}, {"body": "models right coming clarifying addition consuming knows", "d": "3/2016"}, {"body": "anyway example code website saves throwing", "d": "3/2016"}, {"body": "looks like bad merge ghpages fixed", "d": "3/2016"}, {"body": "suppose one key dev", "d": "8/2015"}, {"body": "hello guilherme thank sharing results backbone community tf seems comparatively high considering projects considered scored higher would interested know files backbone actually included analysis would guessed file cleaning process would eliminated personally would interested results would included documentation also includes ghpages branch since quality documentation deal breaker deciding make use foss project hand understand might skew results since actually takes different set skills produce high level documentation project would incapacitated copywriters got left seems definition degree code authorship limited admit read fritz et al challenge idea foss project would become incapacitated developers able influence command implementation ceased however think results accurate jashkenas recently refered god along jdalton doubt revere original authors would enough bring end backbone decided relinquish reins even declared backbone mistake started anew appears jashkenas plays executive role recent times watching project weeks time chimed comment documentation looking back commit history majority recent commits merging prs developers notably jridgewell rank analysis think backbone case sign project matured reached stage original authors transition owners stewards foss projects far anarchy people imagine fact strong andor consistent leadership common arguably important fact mature foss project would argue truck factor poorly named lower score better would hope jashkenas braddunbar left project community would quickly reorganise behind another one two developers crux idea please expand methodology deal merges analysis example commit attributed suspect analysis attributes jashkenas opinion jridgewell attributed indeed git blame function attributes file changes jridgewell author commit changed file even though file different repository jashkenasbackone paper like good research paper raises questions answers commend job well done cheers corin", "d": "8/2015"}, {"body": "would hope jashkenas braddunbar left project community would quickly reorganise behind another one two developers crux idea think something else consider leaving project becoming less involved without clear exit cause delays decay project lead interests priorities shift things see involvement decline releases lag project contributors create releasechecklists much prep work lead hits release", "d": "8/2015"}, {"body": "quickly answer questions terms bus factor project future someone hit bus today historical development look authors recent commits see b backbone trouble get hit bus brad wins lottery c important characteristic renders bus factor moot backbone basically finished project comprehensive documentation also helps even important annotated source code cheers", "d": "8/2015"}, {"body": "im official programmer try replace undescrore lodash see backbone tests backbone well tested library tests exist", "d": "8/2015"}, {"body": "rusalex answer almost already googled many developers say like want official opinion nevertheless thank reply need follow reduce amount comments note already migrated lodashbackbone approach project works fine projecttoplevel architecture community yet sure correct way go eager get proper official answers right way reading underscore issue realized sooner later might underdash agree collaboration jashkenas jdalton sure gods busy low probability answer anyway would answer equal official", "d": "8/2015"}, {"body": "assume using latest versions libraries release moment appropriate risky obviously using different releasesversions risky yap lodash includes backbone underscore tests run commit current stable release future lodash may fail handful several tests use nonbackbone related underscore methods excuse wo nt surprises lodash side things lots projects go lodash first backbone think backbone official statement", "d": "8/2015"}, {"body": "nt test zepto lodash compatibility work fine need stronger guarantee stick jquery underscore", "d": "8/2015"}, {"body": "lodash runs passes backbone tests ci marionette runs unit tests multiple version underscore lodash gt takeaway backbone work fine lodash use lodashbackbone series browserify methods replace underscore lodash wild dependencies seem work kind sketchy number api differences libraries", "d": "8/2015"}, {"body": "jdalton thanks reply read part backbone docs enough developers projectcommunity confident sentence tend work varying degrees compatibility tells us level uncertainty agree developers started discussion megawac thanks pointing really happy marionette team dreams merge original backbone team double development forces far researched lodashforbackbone fact weird exactly want backbonelodash fact backbone contributed jashkenas brandonpapworth fact one dozen forks backbone interested unless jeremy tell us version replace backbone browserify way used one communityprojects think lie developers simple substitution one library name another thanks comments yes need stronger guarantee backbone tests results one proven fact tdd needed works show holy wars internet thanks closing issue looks like resolved time solution migrate lodash sure wait underdash really hope", "d": "8/2015"}, {"body": "oy backbonelodash blast past use cases nt run issues using lodash compared underscore another change made library giving ability view elements created using opposed honestly nt used backbone long time aside realized looking back old unmaintained code entertainingdepressing vote would definitely lodash works people nt cause tests create singularity sucks existence", "d": "8/2015"}, {"body": "dupe fix mutating array iterating", "d": "8/2015"}, {"body": "someone tag issue phone", "d": "8/2015"}, {"body": "looks like issue github pages changed repo two years ago looks like old site nt redirected way github repo page", "d": "8/2015"}, {"body": "open ticket github support", "d": "8/2015"}, {"body": "bug project moving first implemented support helpfully unpublished pages us", "d": "8/2015"}, {"body": "pass argument", "d": "7/2015"}, {"body": "thanks snappy response upgrade version backbone case sure nt able find issues initial search answers", "d": "7/2015"}, {"body": "version introduced idea actually executing error jquery parameters real problems extent even wrote error function attempts guess signature use signature wraperror signature end sync pasted please find actual code end sync took lines version code base v version already code note well although assign textstatus errorthrown options also execute error function wrapped wraperror signature seems introduction code execute error xhr textstatus errorthrown mistake reversed somebody explanation alexander", "d": "6/2016"}, {"body": "workaround illustrates problem", "d": "6/2016"}, {"body": "check first argument sync listener either", "d": "7/2015"}, {"body": "created fiddle show problem", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "wow knowed source objekt passed listener function thank much", "d": "7/2015"}, {"body": "consider using bbvirtualcollection use case", "d": "7/2015"}, {"body": "save event async event without looking code try use models event listen event prior calling additional updates also add callback save options shown docs called response returned however probably need functionality ex disabling submit button debouncing actual save make sure send latest data multiple clicks reenabling submit successful save etc ideas hopefully helps", "d": "7/2015"}, {"body": "please use mailing list stackoverflow gitter channel questions github issues maintaining framework said solutions problem easiest tsjoberg mentioned debounce saves might also want think happening code avoid", "d": "7/2015"}, {"body": "want point readmemd says suggest feature report bug general discussion nt objections using forums looked like readme suggesting asking stuff like", "d": "7/2015"}, {"body": "ha may outgrown wording policy years questions live appropriate medium thanks pointing fix asap", "d": "7/2015"}, {"body": "mahirsiraji repo backbonejs javascript library please stop posting issues c code", "d": "7/2015"}, {"body": "worked fine reopen post failing test case", "d": "7/2015"}, {"body": "sorry looks like already fixed current version nt work thanks", "d": "7/2015"}, {"body": "first glance looks issue backbone handling", "d": "7/2015"}, {"body": "nah bad pretending nt could add modernizer like test", "d": "7/2015"}, {"body": "make pr done", "d": "8/2015"}, {"body": "backbone development area please post questions use backbone mailling list", "d": "7/2015"}, {"body": "thanks rusalex", "d": "7/2015"}, {"body": "sparkles", "d": "7/2015"}, {"body": "thanks reaching nt think core contributors use windows main os generally wait till sauce tells us problem sauce supports edge edge vm released nt think us tried run test suite edge said backbone tests hosted smiley", "d": "7/2015"}, {"body": "current stable master branch versions pass ms edge support back based tags went tests runnable back test runner failed run older versions suspect qunit dep cause issue", "d": "7/2015"}, {"body": "current stable master branch versions pass ms edge smile thanks testing", "d": "7/2015"}, {"body": "thanks jdalton", "d": "7/2015"}, {"body": "relevant changes things considered x bolded issue numbers important ones nonbolds much one want take stab writing change log writing prose really nt thing paulfalgout", "d": "7/2015"}, {"body": "sure thing taking small stuff might wait considerations", "d": "7/2015"}, {"body": "might wait considerations yup contribs keep checklist", "d": "7/2015"}, {"body": "publish version addressing yeah", "d": "7/2015"}, {"body": "anything shipit time", "d": "7/2015"}, {"body": "pick issues shipping go ahead draft log", "d": "8/2015"}, {"body": "pick issues shipping go ahead draft log let go merged", "d": "8/2015"}, {"body": "paulfalgout agree jdalton let ship merge rest next version", "d": "8/2015"}, {"body": "good deal get shortly long weekend", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "bumped published", "d": "8/2015"}, {"body": "comments regarding method backbone source cant undesrtand also models default attribute values define property model hash get set corresponding properties set model instantiation", "d": "7/2015"}, {"body": "try see method pretty straightforward model implements example future please nt use github issues ask questions try gitter channel stackoverflow page mailing list", "d": "7/2015"}, {"body": "clashing event expects format work expected", "d": "7/2015"}, {"body": "megawac update docs change behavior docs mention models required param", "d": "7/2015"}, {"body": "correct regression", "d": "7/2015"}, {"body": "megawac also worth noting without passing model long model nt part collection", "d": "7/2015"}, {"body": "dupe", "d": "7/2015"}, {"body": "documentation says trigger objecttrigger event args trigger callbacks given event spacedelimited list events subsequent arguments trigger passed along event callbacks nt specifically says use modeltrigger change model caused line number needs amp amp model condition", "d": "8/2015"}, {"body": "error please fix", "d": "10/2015"}, {"body": "try asking questions mailing list gitter board stackoverflow github issues maintaining framework", "d": "7/2015"}, {"body": "would like work pr", "d": "7/2015"}, {"body": "sure", "d": "7/2015"}, {"body": "look source code realize multivariate signature", "d": "7/2015"}, {"body": "work done looks like pr issue rejected sure else issue would useful", "d": "3/2017"}, {"body": "think looking make wait successful ajax delete returns triggering events removing model collection", "d": "7/2015"}, {"body": "least think second like closing issues sight please read reconsider least one error event triggered ajax call fails different model save method error event always triggered case ajax failure", "d": "7/2015"}, {"body": "least think second like closing issues sight apologies nt mean make think nt considered issue test expect see everything works like intend error event triggered ajax call fails event triggered model since model longer part collection wo nt trigger error event collection backbone optimistic server requests makes proceeded request pass like wait response instead", "d": "7/2015"}, {"body": "inconsistent save method also optimistic", "d": "7/2015"}, {"body": "optimistically adds model collection hence events triggered collection optimistically removes model collection preventing events triggering", "d": "7/2015"}, {"body": "fixed", "d": "7/2015"}, {"body": "far understand would get true need something returns false change attributes mergemake decide compare bare objects models find good method decide merge think", "d": "7/2015"}, {"body": "already preparing pr maybe thats necessary explanation missing understand thats done like", "d": "7/2015"}, {"body": "im thinking might reason merge switch exists options think even merging desired models dont need merging exactly alike already", "d": "7/2015"}, {"body": "unsure problem", "d": "7/2015"}, {"body": "lets suppose set called array objects objects already exist exactly alike model instance problems overhead objects would get merged models already alike dont need get merged adding feedbackresume update event see including mergedmodels would return merge done models already alike im working pr includes update event triggering sending previousremoved models addedmodels mergedmodels edit code would run times even attributechange happening overhead instead following", "d": "7/2015"}, {"body": "code pr right collection set method peak javascript set function models options options defaults options setoptions optionsparse amp amp thisismodel models models thisparse models options var singular isarray models models singular models models modelsslice var id model attrs existing sort var optionsat null lt thislength var sortable thiscomparator amp amp null amp amp optionssort false var sortattr isstring thiscomparator thiscomparator null var toadd toremove modelmap previousmodels mergedmodels var add optionsadd merge optionsmerge remove optionsremove var order sortable amp amp add amp amp remove false var orderchanged false", "d": "7/2015"}, {"body": "request returning models merged think might good momentway introduce info manner previousmodels returned reset method", "d": "7/2015"}, {"body": "example replicate behavior example times following code would ran even change model", "d": "7/2015"}, {"body": "think problem move along disappointed", "d": "7/2015"}, {"body": "overhead objects would get merged models already alike dont need get merged adding feedbackresume update event see including mergedmodels would return merge done models already alike way us know wether two objects alike without parsing setting keep mind may overridden custom code", "d": "7/2015"}, {"body": "bare attribute objects could deepequaled without taking account ordersorting keys sure might even expensive guess depends alot size objects facepunch get merging even attributes model new object alike think thats good think alright like issue closed ofc", "d": "7/2015"}, {"body": "overridden way know new object morph called", "d": "7/2015"}, {"body": "keep mind also backbone model instance thus", "d": "7/2015"}, {"body": "yeah mind thinking case setting bare objects models setting models everything works one would expect", "d": "7/2015"}, {"body": "hey got fixed like even though got closed jridgewell disappointed", "d": "8/2015"}, {"body": "thanks report already tracking", "d": "7/2015"}, {"body": "type question better suited one channels try mailing list gitter board short answer nt need models supposed place care stateful attributes nt live object cases setting property instance good enough said really need app written plugin allows borrow backbonemodel getter setter functions object including rest backbone classes check see works", "d": "7/2015"}, {"body": "thanks check", "d": "7/2015"}, {"body": "types questions appropriate stackoverflow side note using backbone version", "d": "7/2015"}, {"body": "jridgewell literally jumped codebase makes say version according version installed bower using", "d": "7/2015"}, {"body": "error removed", "d": "7/2015"}, {"body": "dupe changed documentation views always delegate events longer modify events hash view property", "d": "7/2015"}, {"body": "turn events hash method use initialize method", "d": "7/2015"}, {"body": "turn method call", "d": "7/2015"}, {"body": "either turn method call js var view backboneviewextend events function return click span onclickspan click onclick var view backboneviewextend initialize function thisdelegate click span thisonclickspan thisdelegate click thisonclick", "d": "7/2015"}, {"body": "thank jridgewell relying initialize called events method var view backboneviewextend events function var eventshash thisdoclickspan extend eventshash click span onclickspan return eventshash initialize function opts var opts thisdoclickspan odoclickspan new view doclickspan true pattern longer works backbone", "d": "7/2015"}, {"body": "jridgewell sorry nuisance motivation making changes", "d": "8/2015"}, {"body": "see", "d": "8/2015"}, {"body": "want work pr", "d": "7/2015"}, {"body": "absolutely", "d": "7/2015"}, {"body": "using backbone", "d": "6/2015"}, {"body": "need tell collection model class nt support using collection without setting model class", "d": "6/2015"}, {"body": "already work", "d": "6/2015"}, {"body": "removes view dom nt clear would rather removes view dom kinds changes make pull request issue", "d": "6/2015"}, {"body": "yes said would much much clearer", "d": "6/2015"}, {"body": "nt know make pull request", "d": "6/2015"}, {"body": "changed mean right jridgewell solution ca nt find pull think changed ordering collection updated little back way reconcile", "d": "6/2015"}, {"body": "move call trigger", "d": "6/2015"}, {"body": "would fail unbinds model listener trigger happens model collection alternatively could move call trigger trigger model collection directly juggling args bit align", "d": "6/2015"}, {"body": "yes use case unfortunately control flow little tricky would go one least side effects regarding moving call manually triggering sure cases users libraries might registered something get cleared triggering would get skipped personally would inline cleanup code like alternatively could update removereference unbind model events call manually take optional parameter skip clearing call twice without option", "d": "6/2015"}, {"body": "reason trying get model event part nt make sense already providing parameter collectionon remove would fail removereference unbinds model listener trigger happens model collection agh forgot fixes would acceptable think cleanup code left makes sense", "d": "6/2015"}, {"body": "jridgewell reason binding collection like way using hooks immutably update object handler generic ie nt use parameters passed instead references collection directly seems slightly misleading inside handler happens", "d": "8/2015"}, {"body": "reason martynsmith generic code backboneorm update fix", "d": "9/2015"}, {"body": "use case collection callback sync problem listener tries remove model currently removed collection case occurs thisget models uses collectionbyid determines model contained collection thisindexof model returns following splice clobbers model array generic sense seems wrong finds model also uses probably vulnerable whole method inlined callback model property unset callback could cause code relies property fail", "d": "9/2015"}, {"body": "listento scroll events", "d": "6/2015"}, {"body": "specifying event object works perfectly keep mind caveat scroll event sent element user scrolls different place element applies window objects also scrollable frames elements overflow css property set scroll auto element explicit height width less height width contents", "d": "6/2015"}, {"body": "please use mailing list stackoverflow gitter channel questions", "d": "6/2015"}, {"body": "code working intended docs confusingly worded meant return value given model attributes equivalent result update docs", "d": "6/2015"}, {"body": "see updated documentation however really misunderstanding moment documentation get collectionget id get model collection specified id cid passing model seems able use retrieve model collection reading code fetch model id literal string instead running issue live site case misreading backbone code currently process constructing smaller test case", "d": "6/2015"}, {"body": "grabbing model id handled first conditional ignoring call", "d": "6/2015"}, {"body": "hello constructing test case see problem code working properly thanks efforts", "d": "6/2015"}, {"body": "requiring backbone requires jquery set window var jquery ca nt detect global variable value factory function takes argument simple answer move backbone require setup also set later", "d": "6/2015"}, {"body": "oh okay thanks help", "d": "6/2015"}, {"body": "ah sorry never added let fix said loader work see example try whittle might causing referenceerror", "d": "6/2015"}, {"body": "yep works perfectly referenceerror came bad code referencing backbone without importing thanks", "d": "6/2015"}, {"body": "canonical name underscore anyways pr", "d": "6/2015"}, {"body": "sure moved", "d": "6/2015"}, {"body": "definitely weird maybe add alias deprecate existing method", "d": "6/2015"}, {"body": "relevant bit saw", "d": "6/2015"}, {"body": "mean relevant bit opening issue great pull request better always tweak code style", "d": "6/2015"}, {"body": "mapping older alias newer alias alias preferred alias longer documented", "d": "6/2015"}, {"body": "bump order remove able add though wo nt define used", "d": "6/2015"}, {"body": "cool cool", "d": "6/2015"}, {"body": "open pull", "d": "6/2015"}, {"body": "eh resolved sorry browser problem", "d": "6/2015"}, {"body": "definitely added change future feel free open pull request documentation merge", "d": "6/2015"}, {"body": "longer attach view error trying access property", "d": "6/2015"}, {"body": "thanks sent sony smartphone justin ridgewell wrote longer attach options view error render trying access ctx property reply email directly view", "d": "6/2015"}, {"body": "sure needs fixed event always passes first argument object second anything else breaking contract", "d": "6/2015"}, {"body": "hi justin odd happens model collection guess code somewhere regards john schroeder johns artisancolourcom jun pm justin ridgewell notifications githubcom wrote sure needs fixed change event always passes model first argument options object second anything else breaking contract modeltrigger change model options reply email directly view github", "d": "6/2015"}, {"body": "since model success callback executed asynchronously server responds successfully questions like better left stackoverflow though", "d": "6/2015"}, {"body": "hi jashkenas thanks lot reply question said since model id success callback executed asynchronously server responds successfully know concerns server already response client success callback method still executed understanding response code means responds successfully could please kindly help case confused much time thanks lot justin ridgewell date jashkenasbackbone cc miracleqsc subject backbone model destroy method call success callback method server response since model id success callback executed asynchronously server responds successfully questions like better left stackoverflow though reply email directly view github", "d": "6/2015"}, {"body": "examples roles history think include url match algorithm history loadurl route execution history loadurl would argue router manage things easilyoverridable separate hooks completely agree would much rather event system alerting changes url router holding onto routes detecting match would also help allowing router trigger errors etc", "d": "6/2015"}, {"body": "generally fetching data asynchronous showing html synchronous two hooks could nt async model stuff synchronous callback way often rerendering route already data need two callbacks seems like overkill backbone nt need handling fetching used ember router found massively overengineered nt think need go ahem route added bonus router also used manage state apps nt persist state url like embedded widgets whatevs url pretty poor way encode app state much better serialize cookie localstorage server depending use case backbone nt need handle think nested routes another area things get dicey pretty quickly agree common pattern nest resources general nt want go one two levels deep sure need business wiring connections disparate parts app given complications seems best book route handles pretty handily already optional syntax agree history probably nt responsible handling route callbacks fall router implement history stateless dumb router significantly decoupled rest backbone originally backbone nt even include router could probably try test plugin first even think replacing already really like see history would look nt manage callbacks", "d": "6/2015"}, {"body": "could nt async model stuff synchronous callback way often rerendering route already data need two callbacks seems like overkill backbone nt need handling fetching right backbone nt need two callbacks need handle fetching think exposing callback router calls rather inlining would take make far easier another dev make plugin implements rest complexity used ember router found massively overengineered nt think need go ahem route oh yeah sure question emberstyle routing covers lot ground given far complex backbone may late change original post rewrote would emphasize detangling current router easier create different router top rather pointing style router want build top p url pretty poor way encode app state much better serialize cookie localstorage server depending use case backbone nt need handle nt really know mean url string represents state application whether good idea router interprets string configures application corresponding state think nested routes another area things get dicey pretty quickly intended include information nested states fully describe emberstyle router know backbone would never implement smile thinking back prob nt need go much detail pretty late wrote issue sleeping general nt want go one two levels deep tangent think want go deep necessary make application current url four levels using emberstyle router get hang emberstyle routing actually even hard set reason test could probably try test plugin first even think replacing already really like see history would look nt manage callbacks work give update got one", "d": "6/2015"}, {"body": "url pretty poor way encode app state much better serialize cookie localstorage server depending use case backbone nt need handle interested kind app state mean struggling find single web app nt encode app inside url looking examples backbone site every single one works way mean state individual page part devs tend encode query params anything important enough query params gets discarded", "d": "6/2015"}, {"body": "nt much time brief alternative approaches great router plugin replaces backbonerouter fine idea go see like think overengineered routers terrible waste time sweat tears using overengineered router organizing app along lines urls brief string serialization application state paradoxically less rich htmly app better works richer featureful app worse state fits nice urls useless router organizing principle using router organize state transitions inside app fundamentally assbackwards already app state real js objects disposal serializing string state deserializing reinflating silly business worrying refetching data already access part idea backbone router drop url breadcrumb whenever application reaches state user might want bookmark go back button nothing think right model minimalist library", "d": "6/2015"}, {"body": "interested kind app state mean struggling find single web app nt encode app inside url location sure state nope url entry point application guaranteed point resource nt particularly good storing state widgets things nt urls nt storing state router jashkenas said already real js environment work current url repository resource name identifier issues resource route looks like repoissues issueid also happens slash work give update got one awesome looking forward", "d": "6/2015"}, {"body": "already app state real js objects disposal serializing string state deserializing reinflating silly business worrying refetching data already access part would discard existing objects order serialize state url routebased app organization code flow anything else pseudocode example books bookid pages pageid model page function pagehandler params options let model optionsmodel new page let view new pageview model let fetching modelisnew fetching modelset id paramspageid fetch return promiseresolve fetching gt viewrender", "d": "6/2015"}, {"body": "location sure state nope url entry point application guaranteed point resource nt particularly good storing state sounds like talking individual view state rather application state work app entirely widgetcard based approach works really well outside global components state every widget gets tossed route another page needed persist yes would likely use localstorage accomplish nt see two things incompatible", "d": "6/2015"}, {"body": "conversation router philosophy really interesting love continue maybe belongs elsewhere rather issue focus concrete changes router agree go backbone agree think backbone router pretty lightweight backbone router history extensible backbone router history currently implemented way makes easily extensible three things currently plan investigate changing expose callback executed whenever route matched rather defining inline scope expose route sorting algorithm separate method modify history solely readwrite interface browser url move features router", "d": "6/2015"}, {"body": "sidenote jmeas link code sure link tag revision line numbers master shift time make links harder follow future", "d": "6/2015"}, {"body": "sidenote jmeas link code sure link tag revision line numbers master shift time make links harder follow future good call always forget update links updated", "d": "6/2015"}, {"body": "three things currently plan investigate changing expose callback executed whenever route matched rather defining inline scope expose route sorting algorithm separate method modify history solely readwrite interface browser url move features router define either inline regular vanilla instance method router preferable nt know exposing would mean changing router ordering algorithm seems like opposite minimal router ordering one predictable order easy change order define routes changing balance code history router totally style question could nice refactor historical reason split history must logically singleton object whereas reason routers need object", "d": "6/2015"}, {"body": "define either inline regular vanilla instance method router preferable nt know exposing would mean ah sorry callback one tried include link whenever used inline posts may used term without accompanying link somewhere might like dumb nt need really follows naturally number list refactor makes reason use inscope variables callback separate method router makes easier test isolation crazy people like gives hook override explicit talking difference always ask inline ask wait check refactor first changing router ordering algorithm seems like opposite minimal router ordering one predictable order easy change order define routes know feel way people disagree whether disagree sort algorithm currently tied definition handler callback makes tough anything router without overriding code many many developers would appreciate method exposed separately nt want well ca nt stop ya mind wanders angular ember think libraries make incredibly difficult change features though one main reasons devs know use backbone customizable ask wait refactor forming strong opinion expose changing balance code history router totally style question hm interesting think analogous saying changing balance given view given model style question sure may get result one seems philosophically sound think much elegant history interface browser history api nt concern routers said succinctly think history stateless dumb jashkenas preview going soon make clearer hope possible evaluate refactor without thinking turning backbone router ember router think cleanup valuable even one intends use backbone router exact way today", "d": "6/2015"}, {"body": "sure thing happy wait see", "d": "6/2015"}, {"body": "sounds like talking individual view state rather application state work app entirely widgetcard based approach works really well thejameskyle distinction two types state distinguishes application state view state mind imo backbone none sure supporting application state way eg selection listing view possibly worth effort problem fundamentally nt handled way great discussion folks thinking yesterday well one point kept popping head able use application without even knowing address bar forwardbackward navigation adding bits straightforward encapsulable task sense liken modules talking building principals behind ampersandjs components", "d": "6/2015"}, {"body": "distinction two types state distinguishes application state view state mind imo backbone none imagine github exactly singlepage application application state would particular issue page view state would something typed new comment textarea persisted page reload github stores information different places would challenge find application make distinction application state belongs url vs view state either discarded page reload stored something like localstorage", "d": "6/2015"}, {"body": "updates", "d": "4/2016"}, {"body": "nt plans finish others want pick left go otherwise closed", "d": "4/2016"}, {"body": "love new backbone might give try though u leave", "d": "4/2016"}, {"body": "yup", "d": "4/2016"}, {"body": "sorry idea blank issue created", "d": "6/2015"}, {"body": "post jsfiddle showing issue able confirm working properly suspect server response model side note backbone highly encourages simple primitive attributes nested objects", "d": "5/2015"}, {"body": "dupe fixed releasing accepted", "d": "5/2015"}, {"body": "thanks sorry dupe", "d": "5/2015"}, {"body": "thanks write taking look make sure right track could also post small jsfiddle shows issue", "d": "5/2015"}, {"body": "justin probably need run code locally though use plugin cors let quickly explain going attribute model created method fetching collection twice notice first time property contains keys ids cids expected second time keys cids", "d": "5/2015"}, {"body": "looking dupe know particular problem resolved setting", "d": "5/2015"}, {"body": "may worth mentioning documentation method even issues related underlying cause like edit also people might google issue solution actually makes problem worse property never populated model ids correct approach use make sure equivalent property persisted parse like", "d": "5/2015"}, {"body": "hi thanks pointing answers questions definitely new yes methods attached prototype otherwise hidden need check new releases case changes maybe certainly look pull sent thing concerns nt think anyone actively tests opera going entirely faith passing existing tests nah got nuthin", "d": "5/2015"}, {"body": "hi braddunbar noted tested simple fix working end nevertheless trying test prove right path got tangled since ca nt test current setup qunit create pull discuss make work", "d": "5/2015"}, {"body": "testing realized solved using jquery strange reason could figure using jquery fixes issue", "d": "5/2015"}, {"body": "certainly could check properties would mildly since plain object normal case breaking change however considered antipattern modify core js prototypes define modifications", "d": "5/2015"}, {"body": "say best modify use helper function instead", "d": "5/2015"}, {"body": "", "d": "8/2015"}, {"body": "ping maybe closed due", "d": "3/2017"}, {"body": "particular doc generator using handwritten documentation guide looks generated nt see build script fork", "d": "8/2015"}, {"body": "handwritten addressed", "d": "8/2015"}, {"body": "dupe", "d": "5/2015"}, {"body": "ah seems commits removed call calling best follow removed early implementation pr argument juggling nt cleanest api however implementation rewritten nt see ca nt supported", "d": "5/2015"}, {"body": "think relevant pull also build events method js var view backboneviewextend events function return geteventsfor", "d": "5/2015"}, {"body": "think relevant pull makes sense wanted make sure nt oversight", "d": "5/2015"}, {"body": "also use directly", "d": "5/2015"}, {"body": "extending views mixins dynamically inside initialize method work event handler defined mixin although ok calling method manually would nice document bc break", "d": "5/2015"}, {"body": "mean mixins getting called would nice document bc break sure let fix", "d": "5/2015"}, {"body": "far know mixin pattern insert functions one object another maybe wrong naming situation event handlers talking following js var mymixin eventhandler function consolelog mixin var myview backboneviewextend events click mybutton eventhandler initialize function chose mixin dynamically ie based arguments model etc extend mymixin registered called view extended mixin btw thanks docs", "d": "5/2015"}, {"body": "ah case want try extend instead instance js var myview backboneviewextend events click mybutton eventhandler extend myviewprototype mymixin really need nt need move call view think though maybe opt handle exceptional cases event handlers instead jridgewell noted delegate events directly", "d": "5/2015"}, {"body": "know solution using places sometimes need choose right mixin based constructor arguments extending instance mixin method calling wrote right done method also drawbacks nt remember moment", "d": "5/2015"}, {"body": "common gotcha javasscript backbone better using function returns defaults instead", "d": "5/2015"}, {"body": "backbone discourage use objects model attributes", "d": "5/2015"}, {"body": "yap see", "d": "5/2015"}, {"body": "feel free open pull", "d": "5/2015"}, {"body": "mind writing small test case take look interested see code looks like", "d": "5/2015"}, {"body": "javascript test case var events var obj non backboneevents event implementation work name callback events name callback name events name null var view new backboneview viewlistento obj test consolelog viewstoplistening sideeffect fixing since listener listenee able clean memory object share private state two objects internalon used private data never leaked outside backbone also means uses internal backbone code instead public able fix sharing state privately inside backbone instead private function look performance impact", "d": "5/2015"}, {"body": "ah say contract support events systems make work probably way singleton event jridgewell seems pretty hacky brittle", "d": "5/2015"}, {"body": "reverting also trick since listener keep track events", "d": "5/2015"}, {"body": "get us kind hard follow discussions", "d": "5/2015"}, {"body": "since baby jridgewell go ahead revert think reasonable appropriate fix", "d": "5/2015"}, {"body": "fixed pretty severe memory leak javascript objon event function obj event function still holds reference obj also allowed listenee clean references javascript obj event function objoff still holds reference obj cleaned implementation nt taking library interop account hence function instead using public let get test cases setup revert know fix library interop", "d": "5/2015"}, {"body": "oh man even revert previous implementation used private nt call public reverting wo nt fix look resolve going pretty solution", "d": "5/2015"}, {"body": "point clarification current approach fine except ca nt event different events library yes", "d": "5/2015"}, {"body": "current approach fine except ca nt event different events library yes exactly", "d": "5/2015"}, {"body": "let leave current approach stands bazineta viable approach ace editor session object mixin backboneevents", "d": "5/2015"}, {"body": "number viable approaches exist one agree fwiw nt seem good paths forward respect changing current behavior instead recommend documenting warning ie would worked fail silently addressed via means", "d": "5/2015"}, {"body": "jashkenas point clarification current approach fine except ca nt event different events library yes message maps broken code triggering b c wo nt fire event handler thislistento hello function thishello true", "d": "5/2015"}, {"body": "similar problem gaperton backbone marionette modelevents mapping object nt seem trigger change sync callbacks revert back backbone everything works", "d": "6/2015"}, {"body": "message maps broken code triggering b c wo nt fire event handler normal object syntax works fine spaceseparated object syntax bug", "d": "6/2015"}, {"body": "ah explains things thanks looking next backbone version bump", "d": "6/2015"}, {"body": "actually used anywhere nt work affected anything", "d": "6/2015"}, {"body": "asking space separated callback syntax used anywhere documented marionette marionettecompositeviewextend modelevents change name namechanged thatthing namechanged function thatthing function", "d": "6/2015"}, {"body": "stevewillard case concerned use code workaround javascript var events backboneevents bblistento eventslistento eventslistento function obj events typeof events object var event events bblistentocall obj event events event return model collection view router history foreach function name var type backbone name typeprototypelistento eventslistento yes used somewhere otherwise one would made comments works perfectly regular listento calls clearly reason consistent least", "d": "6/2015"}, {"body": "sure understand backbone nt use strings callbacks anywhere deals keys listeners object event names values callbacks multiple event names keys listener objects nt supported previously ca nt causing breakage understand marionette uses hood split strings listento callback separately yes used somewhere otherwise one would made comments point specific line telling broke something nt help unless track", "d": "6/2015"}, {"body": "upgraded backbone version one unit tests framework started fail one interested figured posted quite clean example comments month ago think big deal fix fine anyway got lot backbone things overridden one one less nt matter though might concerned", "d": "6/2015"}, {"body": "figured posted quite clean example comments month ago referring second form never worked literally added support morning point line test code broken ca nt see anything obvious repository linked nt time follow rabbit holes", "d": "6/2015"}, {"body": "sorry mistake looks like form working fix shortly", "d": "6/2015"}, {"body": "literally added support morning nice hear point line test code broken yes insist easy test tests related nested collection change detection broken collection several reasons changed internally modelcollection metatype definition message map used subscription turn created bug events ignored nested collection changes detected course since live bad thing spend couple minutes adding lines code trying good boy reported bug maintainers story ps helpful first comment left month ago curious", "d": "6/2015"}, {"body": "moving", "d": "10/2015"}, {"body": "thanks spotting fix", "d": "5/2015"}, {"body": "thanks fix", "d": "5/2015"}, {"body": "fix merits anything else outstanding deserves make", "d": "5/2015"}, {"body": "jashkenas considered", "d": "5/2015"}, {"body": "jashkenas actually milestone particular considered well", "d": "5/2015"}, {"body": "plain function undefined line fall back catching common case models advanced idattribute override though would nt recommend creating new model instance get id property", "d": "5/2015"}, {"body": "thanks see reason submitted updating code nt work properly think one run issue especially mentioning documentation changelog without warnings", "d": "5/2015"}, {"body": "right totally document let put something together", "d": "5/2015"}, {"body": "antpaw", "d": "5/2015"}, {"body": "curious using webpack resolverplugin", "d": "5/2015"}, {"body": "nt use one try however perspective reason drop package description files", "d": "5/2015"}, {"body": "right probably nt huge deal keep around bower package certainly nt necessary besides webpack enhancedresolve unmaintained unsupported give resolverplugin try reopen still experiencing troubles", "d": "5/2015"}, {"body": "hi freegink already exists called hope works", "d": "5/2015"}, {"body": "different execute happens route function found callback inherited router either add route manually using route function add callback functions inherited router suggestion give users chance dynamically populate callback function according name specified routes nt put callback functions inherited router look example provided example accountlogin nt function inherited router override execute callback parameter would null", "d": "5/2015"}, {"body": "example accountlogin nt function inherited router override execute callback parameter would null right argument still use look function", "d": "5/2015"}, {"body": "right nt notice execute gotten name parameter looking backbone documentation thanks work execute routerexecute callback args", "d": "5/2015"}, {"body": "ah nt realize look getting fixed later", "d": "5/2015"}, {"body": "change master nt yet added release documentation website reflects current released version really release version bump soon", "d": "5/2015"}, {"body": "already exists called execute taken using event implement older backbone really release version bump soon think last change", "d": "5/2015"}, {"body": "cool saw new release hooray", "d": "5/2015"}, {"body": "assuming backbone internal caching callback functions event fires check anymore callbacks unbound interim exactly correct event triggered listeners already bound called bit discussion mutable events involved large amount code support", "d": "5/2015"}, {"body": "annotated source website version nt republishing docs version bump case", "d": "5/2015"}, {"body": "ran well case point search annotated source modelid occurrences source code search release occurrences", "d": "5/2015"}, {"body": "aye ing ghpages branch months ago", "d": "5/2015"}, {"body": "extend write get method nt think go core lib tho", "d": "5/2015"}, {"body": "extend backbonemodel write get method exactly special purpose simple method", "d": "5/2015"}, {"body": "use validate", "d": "4/2015"}, {"body": "better example think events ca nt fire error change listener problem", "d": "4/2015"}, {"body": "would change event handler throw error errors js pretty bad almost universally reserved exceptional unexpected behavior anything know ahead time throw error change handler wrap trycatch", "d": "4/2015"}, {"body": "saying errors trivial error prevent library code functioning correctly seems like problem", "d": "4/2015"}, {"body": "ca nt see case would nt want wrap potentially errorthrowing code trycatch within change handler could deal uncaught errors probably nt mess backbone internal state thrown uncaught error program crashed difference make happens backbone ca nt wrap userland code trycatch would slow hell", "d": "5/2015"}, {"body": "thrown uncaught error program crashed turn event loop place think backbone break next turn well storing state support nested events ca nt wrap userland code trycatch definitely nt want suggest fine error breaking app end dev catch potential errors feels funny error break backbone api following event loops ca nt wrap userland code trycatch would slow hell mitigate wrapper function might appropriate underscore easily add private function backbone javascript function trycatch func try func return true catch e return false class model set key val options var model silent changeslength thispending options var ok trycatch function var lt changeslength modeltrigger change changes model current changes options", "d": "5/2015"}, {"body": "would nt sustainable potentially every event listener could screw backbone internal state ca nt wrap code throws error responsibility clean see coming though jridgewell change listeners different story valid point forgot deopt fix perf look applied change events potentially complex change events", "d": "5/2015"}, {"body": "would nt sustainable potentially every parse initialize event listener could screw backbone internal state completely agree ca nt wrap everything situation leave backbone inconsistent state initialize blows listener model data could inconsistent definitely dev concern listener longer trigger events seems like library concern perf look applied change events potentially complex change events", "d": "5/2015"}, {"body": "test nt using jbone try general note every edge case needs accounted building nuclear testing software sometimes added code handle edge cases makes rest code harder reason see latest events refactor eg sometimes say know thing bad idea nt nt going account nt responsible wrapping faulty dev code", "d": "5/2015"}, {"body": "test nt using jbone try man knew something fishy sometimes say know thing bad idea nt nt going account nt responsible wrapping faulty dev code works", "d": "5/2015"}, {"body": "real problem know proper course action state already broken exception handled user code future code executes broken contract alludes detailed long event system reasoned way user adjust inflight events even catch exception correct course fail fail hard change current correct behavior severely breaking", "d": "5/2015"}, {"body": "disruptek", "d": "5/2015"}, {"body": "hi seen huge amount bugs due silencing events nt think go route also need model collection probably nt destroy use separate technique", "d": "4/2015"}, {"body": "see", "d": "4/2015"}, {"body": "iirc", "d": "4/2015"}, {"body": "dupe", "d": "4/2015"}, {"body": "sorry solution backbone marionette try npm install backbonemarionette note case backbone dep installed automatically lookup use ich used var marionette require back mario backbone undefined factory call backbone js exports case different requirejs global mistake backbonejs backbonemarionette", "d": "4/2015"}, {"body": "latest backbone nt fixed master next release", "d": "4/2015"}, {"body": "top", "d": "4/2015"}, {"body": "would like make code copy comment surprised currently changed thanks", "d": "4/2015"}, {"body": "try bower install correct version times users npm frontend libs cause error use git repo directly packagejson new", "d": "4/2015"}, {"body": "nt know backbone chinese document", "d": "4/2015"}, {"body": "question bug mind translating english afraid chinese nt great", "d": "4/2015"}, {"body": "sorry mistake didt mean project someone translate backbone chinese write github thank great project btw fyi", "d": "4/2015"}, {"body": "closed issue", "d": "4/2015"}, {"body": "yes way prototypes work javascript use function set instance property constructor need", "d": "4/2015"}, {"body": "yep thanks good catch", "d": "4/2015"}, {"body": "aware going fix", "d": "4/2015"}, {"body": "hi qiv thanks issue pull smiley understand correctly parameter malformed contains invalid percent encoding like get back right", "d": "4/2015"}, {"body": "actually guess want decode valid encodings leave invalid ones alone", "d": "4/2015"}, {"body": "yes would like decode url close possible", "d": "4/2015"}, {"body": "another way catch error router instance graceful", "d": "4/2015"}, {"body": "think handled", "d": "4/2015"}, {"body": "think handled nah one separate handles double decoding via first invalid percent encoding user input", "d": "4/2015"}, {"body": "case could mix", "d": "4/2015"}, {"body": "like idea regular expression nt cover bases instance fails url presented qiv restrictive test", "d": "4/2015"}, {"body": "damn thought issue trailing need implement regex", "d": "4/2015"}, {"body": "well fun forked mathiasbynensregenerate made take single hex code points yada yada", "d": "4/2015"}, {"body": "really kind change live userland needed props braddunbar foresight expose decodefragment jridgewell nice oneliner someone use drop regenerate right backbonehistory", "d": "4/2015"}, {"body": "without rewriting throw easy fix used regenerate syntax already making hex regexs nt really feasible give devs actually forking rewrite percent decoding able reimplement using give devs override javascript var router backbonerouterextend decodefragment require decodeuri", "d": "4/2015"}, {"body": "like idea nt think reimplement would invalid encodings throw away take guess think common case expect well formed urls including percent encoding said would rather make bit easier deal errors", "d": "5/2015"}, {"body": "like idea nt think reimplement decodeuri decodeuricomponent oh definitely would nt backbone code since exposed really simple define", "d": "5/2015"}, {"body": "something like seems work starting history though suppose throwing away entire prop would better use cases fwiw react seems behavior wherein malformed url parameter even one relevant router application prevent entire application working hand lean towards consensus bad urls bad urls really bugs handling certain ways sort particular needs application though otherwise blank page malformed url probably great fallback addition search strings might end url seen case party mailing programs generating email links bb applications including incorrectly encoded params", "d": "12/2015"}, {"body": "issue affects underscore well relevant issue jashkenasunderscore", "d": "4/2015"}, {"body": "think problem backbone enable cors support post put call api probably execute get call check calling api using ajax http postman call create method backbone execute post call api endpoint please check server permit type call kind server use", "d": "4/2015"}, {"body": "see python app running behind gunicorn making post put api using httpie postman getting expected headers example connection close date sun apr gmt server accesscontrolallowheaders contenttype accesscontrolalloworigin contentlength contenttype applicationjson also running simple ajax call within app get expected response ajax type post url data hi newpersonname success function data consolelog data error function data consolelog datastatus consolelog datastatustext consolelog dataresponsetext troubles true cors issue ajax calls would restricted however backbone ajax call one restricted", "d": "4/2015"}, {"body": "using backbone underscore jquery server expressjs app configured cors fine thing try override backbonesync set cross domain response call save method create", "d": "4/2015"}, {"body": "response keep getting xmlhttprequest load accesscontrolalloworigin header present requested resource make sure server issue even calling instagram api within backbone get cors postman nt get cors used method provided still error", "d": "4/2015"}, {"body": "sabzo post working jsfiddle minimum code needed reproduce", "d": "4/2015"}, {"body": "jridgewell cc nicknaso thanks bearing people nt used jsfiddle tried duplicate simple backbonemodelsave sample server containing api threw demo thanks", "d": "4/2015"}, {"body": "hi sabzo think understand problem edited client code reported javascript var mymodel backbonemodelextend urlroot defaults title legend actors directors region california cuba language english spanish mood adventure category action description src trailer img get error reported image error happen make cors request browser execute preflight request similar options server respond request setting header reported accesscontrolalloworigin accesscontrolallowmethods get put post delete accesscontrolallowheaders contenttype authorization send status response find technical documentetion node example hope help", "d": "4/2015"}, {"body": "nicknaso grazie mille sure server issue able observe preflight testing firefox chrome could nt see preflight headers firefox saw options method sent server nt responding appropriately thanks bunch", "d": "4/2015"}, {"body": "use regex route flag case insensitive es regexi", "d": "4/2015"}, {"body": "manually add caseinsensitive regex routes inside", "d": "4/2015"}, {"body": "understand spec urls specifies case sensitivity fact solution requires good bit deviation normal way routes specified cause lot headaches countless bits web software deviated official specs turned official specs nt consider important use cases suggesting deviate spec default behavior offering option turn case sensitivity spec ignoring actual realworld demand behavior running net iis neither demand casesensitive urls requiring developers go back fix thousands urls scattered throughout project satisfy spec nt going happen stack overflow questions people posting hacks workarounds online prioritizing spec actual realworld users wo nt allow option least expose related code backbone currently closure override behavior without modifying original source", "d": "12/2015"}, {"body": "fact spec nt actually say urls case sensitive urls general casesensitive exception machine names may urls parts urls case nt matter identifying may easy users always consider urls casesensitive u general says users always consider casesensitive nt may properly routerserver configured case sensitivity feel like apache configured caseinsensitivy box backbone way", "d": "12/2015"}, {"body": "solution also nt help cases router root contains case error example app sitting root domain like case wwwexamplecommyapp regex solution going help user types wwwexamplecommyapp", "d": "12/2015"}, {"body": "hi serkansipahi thanks letting us know unfortunately expected result something route string discern regular expression used match optional parameter nt know difference city date assume second parameter matches first optional path segment enough perspective two options use regular expression route nt elegant allow direct control optional segment matches use query string parameters looks like really modifiers route would nice semantically also wo nt worry matching since let query string parser hard work hope helps", "d": "4/2015"}, {"body": "braddunbar regular expression want use query string parameters something different idea someone make search sfo sfo build string like case issue etc choice optional parameters must always specified case thank", "d": "4/2015"}, {"body": "yeah definitely bummer thanks legwork guess moral story nt use classes backbone least static property support lands fallback options proposed preferred solution defining strings objects return values key part backbone api design prototypeshared strings objects would dirty api require devs assign property instance constructor mention memory wasteful aside consistency reason use class keyword backbone", "d": "4/2015"}, {"body": "great blog post wonder backbone classes would play together solutions attach properties functions super opposed clean setting object directly prototype seen ton code trip mutating prototype objects way immune think chose include class properties pass properties default options nt something classical language feel like even less clean solution run constructor twice ick guess moral story nt use classes backbone least static property support lands even class properties come call disappointed", "d": "4/2015"}, {"body": "aside consistency reason use class keyword backbone extend addressed blog post practically theory would allow backbone long term reduce code additional concepts realistically going least years classes widely supported relevant browsers without transpiling code reduction would next nothing nt underrate consistency aspect becomes way object oriented programming javascript seems likely given standardization emberangularreacttypescriptaurelia etc backbone using added learning curve library relative options especially junior developers sure necessarily merits change pedantic hobgoblin small minds consistency", "d": "4/2015"}, {"body": "agree jridgewell attach properties functions approach probably best proposed options fwiw remember originally learning backbone relative js newcomer bit confused static properties used", "d": "4/2015"}, {"body": "correct class properties guess", "d": "4/2015"}, {"body": "proposal early community driven proposal clear actually ever part official spec current implementations cause properties added instance constructor runs nt help backbone see jridgewell link try babel", "d": "4/2015"}, {"body": "jridgewell referring part benmccormick post react developers noted issues property initializers backbone users encounter part version react supporting special property initialization syntax classes may eventually standardized info esdiscuss thread standard still worked experimental support version available babel unfortunately version defines class properties instantiated superclass constructor run nt solve backbone issues see example wycats jsdecorators strawman original superseded harmony classes proposal might suggest use getters class properties absolute last resort could check instance static props helper la", "d": "4/2015"}, {"body": "yup unfortunately version defines class properties instantiated superclass constructor run nt solve backbone issues javascript class view extends backboneview tagname li constructor anything nt touch super anything touches function view anything nt touch backboneviewapply arguments add class properties thistagname li anything touches viewprototype create backboneviewprototype constructor view element would still constructed got change set instance variable see example wycats jsdecorators strawman explain decorators would apply might suggest use getters class properties see boat attach properties functions clean currently perfectly acceptable mutation proof absolute last resort could check instance static props helper la result could interesting", "d": "4/2015"}, {"body": "could", "d": "5/2015"}, {"body": "thejameskyle pass properties default options superclass constructor option stuckouttongue", "d": "5/2015"}, {"body": "instead relying setup class could simply function something javascript class documentrow extends backboneview", "d": "5/2015"}, {"body": "milesj hmm error immediately final class spec derived class must call super use even work never actually calling backbone constructor get initialization code see link first post", "d": "5/2015"}, {"body": "milesj thing call setting like since ensure element view constructor already created element ever set", "d": "5/2015"}, {"body": "milesj still allowed subclassing jridgewell oh sorry missed seem like natural option spoke jeffmo sebmck give guys backstory reasoning order support extending native types ie array nt determined call method otherwise run initialization issue dom presumably places", "d": "5/2015"}, {"body": "jridgewell thejameskyle simply call super first updated example really nt see issue done thing classes move views constructor logic method", "d": "5/2015"}, {"body": "lot expensive code run twice", "d": "5/2015"}, {"body": "milesj read original blog post running super first means properties nt processed see full depth explanation", "d": "5/2015"}, {"body": "yes read still curious solution everyone keeps talking views constructor needing called nt necessarily case nt something like following solution albeit bit contrived javascript var view backboneview function options thiscid uniqueid view extend ing options longer needed properties set directly viewprototypesetup function thisensureelement thisinitializecall arguments class documentrow extends backboneview constructor super thistagname li thisclassname documentrow thisevents click icon open click buttonedit openeditdialog click buttondelete destroy thissetup arguments guessing backwards compatibility", "d": "5/2015"}, {"body": "default class would nt work since constructor never calls forcing subclass call anything going super annoying", "d": "5/2015"}, {"body": "issue classes deal backbone personally solved using babel class properties spec", "d": "5/2015"}, {"body": "milesj stated class properties solve issue nt instantiated end constructor spoke jeffmo sebmck js class root rootprop root constructor consolelog root thisrootprop consolelog root thisderivedprop class derived extends root derivedprop derived constructor super consolelog derived thisrootprop consolelog derived thisderivedprop desugaring js function root thisrootprop root consolelog root thisrootprop consolelog root thisderivedprop function derived super thisderivedprop derived consolelog derived thisrootprop consolelog derived thisderivedprop still nt fix issue leads inconsistency", "d": "5/2015"}, {"body": "issue classes deal backbone hm personally solved using babel class properties spec gon na lot div elements see last point", "d": "5/2015"}, {"body": "see case suggest going pass properties default options superclass constructor option last line creating properties method nt touch constructor javascript class documentrow extends backboneview loadproperties return tagname li classname documentrow events click icon open click buttonedit openeditdialog click buttondelete destroy foo bar contrived example var view backboneview function options thiscid uniqueid view options options extend thisloadproperties pick options viewoptions thisensureelement thisinitializeapply arguments something similar toolkit seen", "d": "5/2015"}, {"body": "hi understand correctly discussion backbone developers discussing workarounds best practice intention actually making changes bb core deal issue suggesting would idea changes could words suggestion use either properties functions getters final word topic thanks", "d": "5/2015"}, {"body": "gotofritz discussing workarounds solution forcing properties live instances nt scale backbone class system right thing discussion adding static prototype properties classes far nothing concrete meantime say stick backbone", "d": "5/2015"}, {"body": "thanks try classes little longer benefit anyone else stumbling upon practice find pass properties default options superclass constructor better example app dynamic localized routes need passed instantiation time routes method nt work whereas following class router extends backbonerouter constructor localizedroutes defaults localizedroutes nonlocalizedroutea routea actions defaultroute super routes localizedroutes", "d": "5/2015"}, {"body": "look think workarounds nt work property model method wo nt work backbone uses access property model constructor nt seem support adding properties options altogether", "d": "6/2015"}, {"body": "think workarounds nt work idattribute property excellent catch work pr addressing meantime use getter notation supply custom js class model extends backbonemodel get idattribute return id get cidprefix return c", "d": "6/2015"}, {"body": "method wo nt work backbone uses modelidattribute access property getter method accessed like normal property", "d": "6/2015"}, {"body": "beginning sound like major rewrite required backbone perhaps", "d": "6/2015"}, {"body": "beginning sound like major rewrite required backbone perhaps already support subclassing exception models think interesting someone explored static property suggestion even nt necessary two solutions original post", "d": "6/2015"}, {"body": "jridgewell many thanks quick solution", "d": "6/2015"}, {"body": "decorators mentioned thread specifically yehuda katz proposal unresolved whether would solve issue playing around proposed write decorator like example using written like javascript props tagname li classname documentrow events click icon open click buttonedit openeditdialog click buttondelete destroy class documentrow extends backboneview seems work fine decorator applied class prior class constructor executed declarative version saying class documentrow extends backboneview extend documentrowprototype tagname li classname documentrow events click icon open click buttonedit openeditdialog click buttondelete destroy actually nt tested could probably make entire backbone extend function decorator wanted static prototype props unfortunately proposal babel supports behind experimental flag people feeling adventurous possible solution", "d": "6/2015"}, {"body": "benmccormick decorator technique works well proposal concerns going approach", "d": "7/2015"}, {"body": "andrewrota literally writing blog post following stuff right reading thread commented big nt personally see actually think better described though create nice new interfaces backbone decorators see gist stevenlangbroek got thinking originally", "d": "7/2015"}, {"body": "preview followup post putting updated permanent link move permanent url early week sometime basic summary thread learned approaches making backbone properties work current classes spec first need considered fully supported pass properties super constructor treat properties methods add properties directly prototype class declared still see limiting expressiveness extent another think problem less solved decorators become official specification decorators options add props decorator takes props top class adds prototype create several special purpose decorators allow expressivefinegrained interface nt think solutions require additional modifications backbone would interesting role backbonedecorator library ifwhen decorators become standardized would love feedback post publish mondaytuesday", "d": "7/2015"}, {"body": "benmccormick figured decorators evaluated construction happens thanks correction update gist bit also thanks million mention blog post ping twitter publish could use syntax marionette triggers could exposed class decorator like tagname template blog post thinking ca nt use static properties work backbone understand decorators still stage think great upgrade way write backbone apps especially method decorators events hash sort programming style makes prefer gulp grunt", "d": "7/2015"}, {"body": "stevenlangbroek see discussion static properties syntax currently specced creates local property instance rather adding prototype properties added super constructor run", "d": "7/2015"}, {"body": "benmccormick post looks good think good job explaining trade offs options point really like special purpose decorators approach seems best approach assuming decorators make spec", "d": "7/2015"}, {"body": "benmccormick decorator call constructor prototype instorstaticvar method used place realise would breaking change seems cleaner way imho like pointed properties defined way prototypeshared strings objects ie shared across instances therefore accessed via class right", "d": "8/2015"}, {"body": "going make work class properties way need class properties annotated create special decorator attaches decorated property prototype js class todoview extends backboneview protoprop static tagname li function protoprop target name descriptor targetprototype name descriptorinitializer see babel repl example relied experimantal things works", "d": "9/2015"}, {"body": "justboris discussed blog comments behavior seeing implementation detail babel handling class properties decorators specs defined behavior proposal right want things way want make issues andor make decorators class properties standardized behavior otherwise could probably break time", "d": "9/2015"}, {"body": "benmccormick wycatsjavascriptdecorators already extra definition regarding property initializers main concern property initializers usual descriptor well class methods decorators wrap well nt see reasons worry spec section remains unchanged", "d": "9/2015"}, {"body": "ah cool nt seen thanks pointing mon sep boris serdiuk notifications githubcom wrote benmccormick already extra definition regarding property initializers main concern property initializers usual descriptor well class methods decorators wrap well nt see reasons worry spec section remains unchanged reply email directly view github", "d": "9/2015"}, {"body": "wanted know proscons using vs method technique suggested benmccormick btw thanks benmccormick excellent blog post", "d": "1/2016"}, {"body": "addition proposal pullrequest attaching method action mentioned justin already proposed similar solution method already using branch really solves problem appeared also useful typescript despite nt ban declarative class properties ps sounds general therefore better context albeit like call method prior constructor jobs", "d": "1/2016"}, {"body": "really wish see new class properties proposal sets prototype seems many involved proposal worried implications find incredibly inconsistent class methods get directly attached prototype jeffmo proposal puts constructor gone attaching properties directly prototype able migrate pretty much reactbackbone code classes", "d": "2/2016"}, {"body": "awesome blog post benmccormick going use decorators project", "d": "3/2016"}, {"body": "benmccormick whipped another way declare classes default properties take look runs normally environment natively supports classes transpiles well looks far nicer defining constructor declaration proposals decorators class properties coming pipeline may academic exercise long term solution backbone something like definitely viable option years long wait", "d": "3/2016"}, {"body": "well thing class properties still stage ecmascript proposal stage system idea since seems like gim terms user gets course idea sort things might break hood syntactically terms reference implementations", "d": "4/2016"}, {"body": "reading find good approach trying realized backbone buildin support example code set mymodelprototypeidattribute properly notice typescript declaration file needs adjusted slightly return constructor function interface detail irrelevant users", "d": "9/2016"}, {"body": "tbeckmann quite nice solution looks readable requires minimal changes thanks", "d": "9/2016"}, {"body": "realize thread going years still one top results searching backbone amp classes thought share potential solution making use class properties mentioned several times class properties stage widely available babel preset thought give another look stated issue instancemember properties nt get applied prototype many properties needing set used within constructor static properties applied immediately design copied instances class following shim copies static properties constructor onto instance running constructor effectively creating new constructor applying properties executing original constructor definitely hack pretty pleased result shim js export default function staticshim ctor const newctor function shim args objectkeys ctor foreach key gt key undefined key toapply key usage class testmodel extends staticshim backbonemodel static idattribute id static urlroot posts wanted drop case helps anyone else anyone thoughts thanks", "d": "2/2017"}, {"body": "obligatory sorry reviving old issue would possible worth write babel plugin transforms class declaration use backboneextend", "d": "3/2017"}, {"body": "enzious definitely seems possible whether worth", "d": "3/2017"}, {"body": "tbeckmann solution seems straightforward integrate backbone", "d": "4/2017"}, {"body": "looks properly would nt proper method sets idattribute additionally would amazing promise support native approach using jquery deferred personally would love see deprecated within backbone", "d": "11/2017"}, {"body": "story still unclear refreshing legacy backbone applications utilize modern tooling language features especially disappointing see things like symboliterator implemented available production release still looking clearer answers question adding typescript backbone app found solution comment helpful far working nice enough drawback explicitly annotate properties passed decorator rather nicer inference ts export function props props x string return function decorator ctor objectassign ctorprototype props props routes home home dashboard dashboard blog blog products products accountsettings accountsettings signout signout export class router extends backbonerouter home props model categorymodel comparator item categorymodel gt itemdisplayvalue export class categorycollection extends backbonecollection example explicity property annotation", "d": "3/2018"}, {"body": "raffomania jridgewell amp co worth team got around problem adding idattribute prototype outside class class example extends parentexample class methods etc xexample example xexampleprototypeidattribute customidattr", "d": "6/2018"}, {"body": "kamsci branch converted backbone classes", "d": "6/2018"}, {"body": "backbone uses configuration point config objects declarative nice never going play nice inheritence clone class configure inheritence going write new code using backbone okay think differently cutting pasting code making look like nt work nt problem passing everything config object expose contents config make easier readwork problem solve cry nobody want run constructor twice silly pattern foo backbonethingextend long declarative object literal motherloving ugly long nt see ugly", "d": "9/2018"}, {"body": "backbone nt mess headers try opening issue jquery", "d": "4/2015"}, {"body": "really thanks taking time read question backbonesync options headers passing options native backbonesync method headers getting sent done safari", "d": "4/2015"}, {"body": "posted enormous repro stackoverflow dense read even already familiar issue create small jsfiddle showing problem test", "d": "4/2015"}, {"body": "see lack willingness help outlined debugging steps taken stack overflow telling much come nothing safari backbonesync working provide info take time look posted see happening posted enough information show happening", "d": "4/2015"}, {"body": "funny want jsfiddle entire application write another application show issue", "d": "4/2015"}, {"body": "yelling collaborators nt way solve posting question stackoverflow nt sufficient case provided far much anyone understand issue provide jsfiddle minimum running code shows issue might able solve fact works chrome firefox already telling us nt issue core backbone headers provided get passed providing jsfilddle likely lead issue already mentioned", "d": "4/2015"}, {"body": "trying help telling backbonesync nt anything headers right code goal opening bug help contributors track problem facing respectful time wade appspecific code find bug often misconfiguration editing problem create small proof concept bug happy help mailing list", "d": "4/2015"}, {"body": "already determined dualstorage removed application still pass optionsheaders request issue backbonesync giving benefit jquery setting options way work one browser another means clientside code problem jquery fine least could look rather pushing people first seconds issue posted", "d": "4/2015"}, {"body": "jridgewell first yelling collaborator explaining come without info would pushed told tias many times go days debugging come roadblock backbonesync told provided way much information really take look last code statements question see talking", "d": "4/2015"}, {"body": "see lack willingness help hostile meant yelling go days debugging come roadblock backbonesync told provided way much information really yes much easier us find issue provide running jsfiddle without cruft application specific code nt anything call", "d": "4/2015"}, {"body": "problem jquery fine least could look rather pushing people first seconds issue posted wrote response minutes posted read issue thoroughly based fact working backbone years developing js even longer tried point right direction debug sure absolutely right issue safari simple test determine options get passed overriding boundary backbone responsibilities end jquery begins difference arguments chrome safari report back reopen", "d": "4/2015"}, {"body": "tried get fiddle going unfortunately ajax stuff hitting xdomain policy stuff wo nt allow go override backboneajax consolelog arguments let know soon", "d": "4/2015"}, {"body": "log user authenticated backbonesyncjs line log options parse true headers authorization token backbonesyncjs line log ajax type get datatype json url emulatehttp false emulatejson false backbonesyncjs line error failed load resource server responded status unauthorized guestlist line log isauthenticated false defaultjs line log cookie undefined defaultjs line log hasaccess false defaultjs line log hasaccess false going login page defaultjs line log going route login defaultjs line according authorization header passed jquery getting lost bit confusing apologize seemed hostile dealing debugging days feel like gotten nowhere seems like every time try irc get support get ignored questions trivial stated someone feel like get response felt pushed apologize jquery issue need figure word nt get hit type response", "d": "4/2015"}, {"body": "type get datatype json url emulatehttp false emulatejson false backbonesyncjs line piece info need know backbone try posting mailing list problem persists otherwise open issue jquery also nt need hit server test sending right headers send something jsfiddle echo resource", "d": "4/2015"}, {"body": "ah become familiar jsfiddle certainly", "d": "4/2015"}, {"body": "jridgewell finally solved issue assistance backbone contractor staff issue backbone issue issue collection url tickets collection trailing sent safari would send preflight request get found would send actual request uri without trailing without authorization header removed trailing slash issue seemed go away sure actually bug backbone jquery whichever one nt seem like trailing slashes collection url", "d": "4/2015"}, {"body": "interesting good know server sensitive trailing slashes might cause still weird works chrome safari chrome also sending preflight request thanks writing hopefully someone googling future find", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "issue clear version jquery user want use anyway would nt hard would easy user maintain package packagejson indexjs feel free publish package share", "d": "4/2015"}, {"body": "think paul referring problem solution see", "d": "4/2015"}, {"body": "npm package depends backbone loaded bulk build tool code nt help change master would help though", "d": "4/2015"}, {"body": "nope place folks override apps act like method see nt want route handler return value affect transition", "d": "4/2015"}, {"body": "thanks makes sense nt read comments closely enough", "d": "4/2015"}, {"body": "seeing behavior either master provide jsfiddle", "d": "4/2015"}, {"body": "okay nevermind takes argument fact unbind objects listeners see method object overridden take argument account thus display behavior seeing", "d": "4/2015"}, {"body": "define comparator function argument count backbone proxies arrayprototypesort hood according mdn comparefunction b returns leave b unchanged respect sorted respect different elements note ecmascript standard guarantee behaviour thus browsers eg mozilla versions dating back least respect furthermore unstable returning told js engine objects value order returned irrelevant js b c e f g h j k l sort function return g c e f b h j k l sort function b return", "d": "4/2015"}, {"body": "side note onto something length arrays magical chrome node least insertion sort stable used arrays elements quick sort unstable used others", "d": "4/2015"}, {"body": "thanks revealing magics since required stable possible add option specify another sort function instead create new issue instead", "d": "4/2015"}, {"body": "posted topic google group continue discussion post link approved thanks deep insight", "d": "4/2015"}, {"body": "thanks much appreciated using mailing list happy follow", "d": "4/2015"}, {"body": "great link topic", "d": "4/2015"}, {"body": "oh damn haha nt return value url oh well error message say url property function undefined though returns undefined anyway tired", "d": "3/2015"}, {"body": "ran test case chrome works perfectly probably overridden somewhere code", "d": "3/2015"}, {"body": "reported success realized backbone debugger enabled chrome seems causing report instead thanks help", "d": "3/2015"}, {"body": "think correct link someone confirm update", "d": "3/2015"}, {"body": "ah indeed weird difference two vs good catch let look", "d": "3/2015"}, {"body": "pipe see", "d": "3/2015"}, {"body": "seem nt know events getting bound pretty big code smell really binding events initialize absolutely need bind render really recommended use rest solutions thread good", "d": "3/2015"}, {"body": "nature adding event makes knowing event added useful ca nt say making much sense reason functionality nt exposed needing feature using objects using add events something exposing track wrapping wrap keep track added elsewhere backbone already keeps track", "d": "3/2015"}, {"body": "try stackoverflow mailing list irc channel gitter room questions github issues maintaing framework", "d": "3/2015"}, {"body": "ok thanks clarifyingone question gitter room backbone", "d": "3/2015"}, {"body": "yep", "d": "3/2015"}, {"body": "hi yuriyapostol thanks reporting would mind posting working sample look", "d": "3/2015"}, {"body": "routes c c b working ff bug fixed", "d": "3/2015"}, {"body": "user achieve instead going fix grooveshark code consider either warning bug fixing since definitely obvious going break", "d": "3/2015"}, {"body": "best solution create bulk update remove request server dont need make n request delete n want synced writed", "d": "3/2015"}, {"body": "agreed nt inside loop asking trouble", "d": "4/2015"}, {"body": "agree addressed situation wanted change remove models without server changes resetting collection original state quirk threw bit landing", "d": "6/2016"}, {"body": "ran problem today also think issue addressed least mentioned documentation overwritten default backbone sync method set option default everything running smoothly case working fine becasue removes model colelction server confirmed delete however removed flag recently cases added possibility delete multiple entries broken took lot time find backbone core issue", "d": "8/2016"}, {"body": "think following solution instead delegating method underscore collection could provide implementation js var collection new backbonecollectionextend function callback ctx pluck thismodels cid foreach function cid index var model thisget cid index callbackcall ctx model index thismodels bind var collection new collection collectioneach function model modeldestroy cidsforeachbyid object", "d": "2/2017"}, {"body": "nt really quirk discussed past thing looping array loop removing items go loop changes feet breaks normal programming thing common solutions either iterate models backwards store separate array one modifying purposes looping course correct answer bulk delete backbone collectionreset", "d": "2/2017"}, {"body": "yes know really quirk thing easy forget especially programmers experienced solution proposed iterating collection ever want rest calls sure bulk delete request best also cases want remove models collection without making request always implement something like proposed stack overflow thread proposal could improved storing added models extra object instead storing could store could iterate object proposal get rid trap easily step", "d": "2/2017"}, {"body": "mikeblum hi think fogget power function simply extend incoming data add fields want someting provide use features waybind computeds readmore", "d": "3/2015"}, {"body": "edge master introduced collection modelid handle situation", "d": "3/2015"}, {"body": "like idattribute mean specified attribute id case must js object add collection like javascript var mockmodel backbonemodelextend", "d": "3/2015"}, {"body": "default yes however meant overridden support cases like", "d": "3/2015"}, {"body": "seem little weird duplicates id setting logic without actually affecting property model see caseywebdev thoughts", "d": "3/2015"}, {"body": "guess confusing part attribute affects model set collection", "d": "3/2015"}, {"body": "collection piece know uniquely identify models holds uses method make distinctions model level know models may grouped related note think unnecessary confusing property removed altogether likely happen", "d": "3/2015"}, {"body": "seems purpose twofold identify model server persisting also used determine persistence method identify model uniquely within collection takes care nt deal think really depends use case great pollymorphic collections introduces extra complexity apps wager large percentage nt need", "d": "3/2015"}, {"body": "try stackoverflow questions", "d": "3/2015"}, {"body": "ambicoder please provide demotests without dont know situation code wrap function promise detect server get response see another solution use controll model added rendered details read thanks", "d": "3/2015"}, {"body": "first code thismodelisnew thiscollectioncreate testmodel wait true success function model response response said first add event triggered success callback fires one thins understand code itsnewmodel true suppose conditional testing model true found solution following modelsave collectionadd either wayany comment welcomed things mention deferred marionette look time stick solution", "d": "3/2015"}, {"body": "read documentation sorry dont see uses dont closed", "d": "3/2015"}, {"body": "js dataschema backbonemodelextend idattribute instanceid urlroot api constructor function attrs options backbonemodelcall attrs options optionsparent thisparent optionsparent new dataschema parent new dataschema also future please use stack overflow general javascript questions related development library", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "mistake", "d": "3/2015"}, {"body": "nevermind ff debugger messing context looking stack", "d": "3/2015"}, {"body": "searched nt find similar issue duplicate like read discussion around", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "saying unexpected end input error console emanates jquery", "d": "2/2015"}, {"body": "yes applicationjson request needs valid json response", "d": "2/2015"}, {"body": "nt function one jquery available within handler", "d": "2/2015"}, {"body": "thanks", "d": "2/2015"}, {"body": "huh got failing test case", "d": "2/2015"}, {"body": "yea make clear behavior applies properties id code wo nt run backbone test suite basic idea behavior expect using create model instance set properties model returned server fwiw locally patched create method like javascript create function model options options options clone options model thispreparemodel model options return false", "d": "2/2015"}, {"body": "certainly setting properties model need failing test case", "d": "2/2015"}, {"body": "jashkenas could nt figure run tests locally best attempt", "d": "2/2015"}, {"body": "ajsharp hi still cant undererstan goes wrong want use restful solution javascript var book backbonemodelextend parse function data return data case model mixed server response sync call var books backbonecollectionextend url books model book lets get books var library new books libraryfetch var added librarycreate book david sulc year wait true success function model resp options deal added model send post request response server need someting like complicated solution collection get item id jashkenas think dont need failling test case fine ajsharp maybe nt understand question think started studying backbone please read modeparse also change id attribute add model modelidattribute many options thanks upd mb need add urlroot model fast writed dont need parse function demo", "d": "2/2015"}, {"body": "ahhhh problem overriding returning original response disappointed fixing everything works expected sorry guys", "d": "3/2015"}, {"body": "oh", "d": "3/2015"}, {"body": "kyleneedham check discussed recently believe type event added recommended implementation example", "d": "2/2015"}, {"body": "tsjoberg fair amount time ago would interested opinion feel natural backbone", "d": "2/2015"}, {"body": "clientside application nt overly concerned type http request sent server relevant information relevant clientside ed forth", "d": "2/2015"}, {"body": "takes array models single one", "d": "2/2015"}, {"body": "sorry made mistake snippet passing array code", "d": "2/2015"}, {"body": "jridgewell totally take single model aside work already correct js var collection new backbonecollection var new backbonemodel id title great gatsby new backbonemodel id title tale two cities collectionadd consolelog collectionget true consolelog collectionget false consolelog collectionget get title great gatsby collectionset add false remove false merge true consolelog collectionget true consolelog collectionget false consolelog collectionget get title tale two cities", "d": "2/2015"}, {"body": "filipmares asking", "d": "2/2015"}, {"body": "noticing backbonejs bower different github vs", "d": "2/2015"}, {"body": "sorry singular array models working perfectly noticing backbonejs bower different github linked master bunch unreleased commits able make jsfiddle error", "d": "2/2015"}, {"body": "jridgewell let put one", "d": "2/2015"}, {"body": "jridgewell open console note error line", "d": "2/2015"}, {"body": "well ca nt merge nothing something need set options", "d": "2/2015"}, {"body": "ah see already fixed master", "d": "2/2015"}, {"body": "jridgewell yea looks like idea see release thnx", "d": "2/2015"}, {"body": "soon hopefully", "d": "2/2015"}, {"body": "meh could way point", "d": "3/2015"}, {"body": "create small jsfiddle demonstrating problem calls add hood clear would happening", "d": "2/2015"}, {"body": "sorry isolating collection resolves issue tried opening issue something elsewhere code interfering", "d": "2/2015"}, {"body": "say implementation detail documented public behavior add single model way nt need use ugly hack like really want nt think need document however return value documented methods return return value turn returns value returns added model models sure needs documented either care return value stick method documented return value point doubt making sweeping changes collection methods fine regardless", "d": "2/2015"}, {"body": "way nt need use ugly hack like really want huh way mean calling hood exactly would accomplish nt accept model arguments either would passing actually clear difference behavior default options documented need dig around code find significant difference means need instead multiple models indeed mean something like instead turn returns value returns added model models right sure needs documented either return values methods also implementation detail care return value stick method documented return value significant difference problem document methods assume must important difference else one would listed alias point doubt making sweeping changes collection methods fine regardless told consider implementation detail willing document certainly willing rely code", "d": "2/2015"}, {"body": "document", "d": "2/2015"}, {"body": "collection etc methods meant mimic ones found array names exact api might slightly different questions try source well commented easy follow logic moving methods hook debugger head rabbit hole actually clear difference behavior push default add options main difference option end essentially tells ignore default sorting behavior say comparator push models end could document sure willing document certainly willing rely code nt use method ignore return values methods realize backbone nt going change drastically area", "d": "2/2015"}, {"body": "collection etc methods meant mimic ones found array names exact api might slightly different know say analagous necessarily identical array methods accepted single item reason backbone methods could nt accept multiple array accept one elements backbone methods would actually analagous also questions try source well commented easy follow logic moving methods hook debugger head rabbit hole already said figure differences think substitute good documentation fundamentally disagree based suggestion seem think collection methods signature array methods fact suggestion makes sense would arguably make sense ability part api could document sure thumbsup nt use add method ignore return values methods realize backbone nt going change drastically area wo nt documented say implementation detail ah hell rely anyway thanks jashkenas says documented see turns", "d": "2/2015"}, {"body": "mention undocumented methods trigger event", "d": "2/2015"}, {"body": "wan na whip docs pull take", "d": "2/2015"}, {"body": "sure essentially page accept argument return value trigger event discussed difference respect also documented nt chance wrap head around yet", "d": "2/2015"}, {"body": "yes right document accepting model references model ids", "d": "2/2015"}, {"body": "want submit pr next week plan would say elements array consist acceptable values arg", "d": "2/2015"}, {"body": "theory contain combination right", "d": "2/2015"}, {"body": "theory contain combination right mean currently practice uses hood expectation supposed theory described pull request", "d": "2/2015"}, {"body": "jmm yeah got yeah expecting wanted make sure", "d": "2/2015"}, {"body": "reason could nt better written know function call using getters setters part bad idea js go one core ideas backbone models doubt see support added anytime soon", "d": "2/2015"}, {"body": "anything would partially aligned new class syntax property initializers class syntax even spec yet interop issue go one core ideas backbone models core idea also getters partial solution existing problem backbonecollection", "d": "2/2015"}, {"body": "spent minutes trying make jsperf different solutions", "d": "2/2015"}, {"body": "core idea idea setting retrieving property object transparent logical reason always know never anything setting property value ditto retrieval use functions handle things like computed properties change events main reason wrapper methods around first place also getters partial solution existing problem backbonecollection modelidattribute reason current wrapper nt work either primitive function also fixed", "d": "2/2015"}, {"body": "sorry linked issue speaking bringing mainly backbone class syntax largely already compatible es class syntax seems reasonable compatible considering added support coffeescript", "d": "2/2015"}, {"body": "coffeescript nt support setters getters largely reasons look issues background starting nt roadblock supporting backbone objects classes sorry linked issue speaking remind straining see connection bat besides changes would done closing wontfix", "d": "2/2015"}, {"body": "coffeescript nt support setters getters largely reasons nt speaking getterssetters speaking backbone added interop coffeescript makes sense support classes manner remind straining see connection bat besides changes extend would done extend closing wontfix definitely right place change anything would new method makes much sense supported imo also issue gets closed forgotten would like address okay backbone extend interop issues es classes coffeescript classes", "d": "2/2015"}, {"body": "well seeing ie tech preview browser even remotely decent support even traceur nt yet convert ways even necessary aside backbone nt going go way break backwards compatibility support feature nt great idea begin", "d": "2/2015"}, {"body": "even traceur nt yet convert actually require support static properties widely supported also reason backwordscompatibility needs broken could even made faster selectively used available", "d": "2/2015"}, {"body": "thejameskyle want turn pr instead issue worth looking", "d": "2/2015"}, {"body": "sure", "d": "2/2015"}, {"body": "way gist something like take shot", "d": "3/2016"}, {"body": "tejastank think expected behaviour method view removes view elementdom node dom stops listening events", "d": "2/2015"}, {"body": "tried things even many different way also delete old events amp memory object exists even remove methods see example formview old instance keep calling", "d": "2/2015"}, {"body": "try mailing list irc channel questions github issues maintaining framework", "d": "2/2015"}, {"body": "hi tejastank try mailing list irc channel questions like github issues maintaing framework", "d": "2/2015"}, {"body": "prefer post bugissue github instead irc prefer irc someone help fix let know complete bug unable remove create object memory keep memory leak amp wrong framework affects kindly reopen", "d": "2/2015"}, {"body": "carljm opened deal seems works basically everywhere else uses directly since delegates callback actually gets options caveat changes point new object object yet propagate pass options object callback may need thinking believe fixes issue please feel free give try let know", "d": "2/2015"}, {"body": "platinumazure thanks pr fix issue though think necessary change really addition following two lines rest pr looks like entirely cosmetic changes though experienced backbone dev probably missing something nt see reason adding new vars everywhere", "d": "2/2015"}, {"body": "carljm right one real necessary change wanted add tests around others add variables want general allow modify options object need make sure modified asynchronous call starts fires success callback otherwise could get really weird behavior example attempting model collection twice", "d": "2/2015"}, {"body": "platinumazure ah get makes sense thanks fix", "d": "2/2015"}, {"body": "totally maybe say merges instead feel free open pull", "d": "2/2015"}, {"body": "ralfthewise first fogget create collection proto model attr second backbone debug chome must develop backbone application open debuger see models collection mb normal way use modelparse jsfiddle example always get first model attr translatedvalue upd fixed example jsfiddle please read modelparse thanks", "d": "2/2015"}, {"body": "nope see previous tickets", "d": "2/2015"}, {"body": "noticed nt want call parse passed parse false expecting parse method would nt called missing something", "d": "2/2015"}, {"body": "curiosity would need prevent parsing response server", "d": "2/2015"}, {"body": "think dont need get changes server call parse simple dont make complicated", "d": "2/2015"}, {"body": "curiosity would need prevent parsing response server since refactored code nt need anymore situation pretty durn specific though think roughly three conditions happening api client represented data differently specifically api followed json api spec attributes resource returned nested attribute always created particular resource client without nesting would pass method assume nesting later saved call would break parse method due nested attribute particular instance server returned nt need used client needed ignore response parse like said specific situation anway still think important code fixed clear nt option many methods backbone source acts documentation options given method accepts prob whip pr update method nt forget", "d": "2/2015"}, {"body": "jmeas dont used durty checking like thanks", "d": "2/2015"}, {"body": "yup something like posting issue stuckouttongue surprised original idea nt work reading sauce", "d": "2/2015"}, {"body": "actually discussing cause behavior", "d": "1/2015"}, {"body": "fyi jmeas created hijacking form submissions", "d": "1/2015"}, {"body": "good utility know thanks", "d": "1/2015"}, {"body": "nt router history api supposed jump catch links use app route designermonkey felt way first learning backbone time though come think actually concern view one role views link dom rest app right would weird router history reached changed behavior dom elements also big fan ambient management things way routerhistory could task much rather configure perlink might sound like hypocrite given backboneintercept works lib intended temporary solution time sit work substantial overhaul bb routing agree docs mention explicitly guide route information would naturally fit backbone nt really guides though sort information sort baked api marionette docs way frowning perhaps note could added section router method", "d": "1/2015"}, {"body": "get point backbone reason like compared angular nt assume anything yeah learning actually making sense router think confusing first", "d": "1/2015"}, {"body": "think confusing first yeah totally relate whip pr adds note docs sure would considered merge would definitely help future developers", "d": "1/2015"}, {"body": "whip pr adds note docs", "d": "1/2015"}, {"body": "maaaaaaybe smile", "d": "1/2015"}, {"body": "nt think time let know make one", "d": "1/2015"}, {"body": "see length jmeas plugin ton different ways handle app different requirements sometimes nice able cancel route route within specific context instance doc note would great", "d": "1/2015"}, {"body": "solved installing backbone npm rather bower", "d": "1/2015"}, {"body": "hey jridgewell thanks pointing think docs cover though bit removed backbone event methods also support event map syntax alternative positional arguments nt seem make much sense though confused", "d": "1/2015"}, {"body": "nt seem make much sense trigger though agree issue nt object syntax value prepended arguments working refactoring post one gotchas noticed two others open separate issues", "d": "1/2015"}, {"body": "actually need sure ever situation want trigger using object right think reason works result using hood reason make official codified behavior", "d": "2/2015"}, {"body": "think docs cover though bit removed trigger actually trigger docs list single spaceseparated events supported think reason works result using eventsapi hood reason make official codified behavior old indeed implementation detail new reducing something hack love see behavior removed reverted", "d": "2/2015"}, {"body": "feel free remove revert reduced api", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "see last comment others backbone attributes shallow design easily change base model", "d": "1/2015"}, {"body": "yep thanks florianr generally considered bad idea store anything primitives hash proposing would better handled deep structured clone base model perfect place", "d": "1/2015"}, {"body": "florianr thanks feedback guys", "d": "1/2015"}, {"body": "case selector tagname definitely unclear fix", "d": "1/2015"}, {"body": "thanks thu jan pm adam krebs notifications githubcom wrote case el selector tagname definitely unclear fix reply email directly view github", "d": "1/2015"}, {"body": "pull request already open address issue although seems desire merge time", "d": "1/2015"}, {"body": "types things open pull see looks need open issue first", "d": "1/2015"}, {"body": "hi thejameskyle thanks pointing right function evaluated spaceseparated event nt think removing right approach pull fix shortly", "d": "1/2015"}, {"body": "nt think removing right approach", "d": "1/2015"}, {"body": "needed", "d": "1/2015"}, {"body": "found lt line routes converted history part defined could use router pre post slashes optional problem seen history part match routes slashes yet nt resolve functions functions nt slashes", "d": "1/2015"}, {"body": "defining line regexs adding replace line trick send pr like", "d": "1/2015"}, {"body": "hi designermonkey thanks pointing see mean think problem conflating urls fragments model urls primarily meant making requests server fragments necessarily entire url meant clientside routing said model urls used fragments enabled stripping leading slash hope helps smiley", "d": "1/2015"}, {"body": "ok order make consistent across areas use router fragments urls well could nt tiny change added", "d": "1/2015"}, {"body": "maybe missing something simply specify calling model set", "d": "2/2015"}, {"body": "overrides behaviour every model get tiresome could also create base model class", "d": "2/2015"}, {"body": "saying default put extra leg work fix bug current behaviour cause invalid data present bug design fixed without rely developer fixing every time use", "d": "2/2015"}, {"body": "bug disagreement design project automatically imply bug forcing validation every time breaking change maintainers simply decided direction wanted go left open consumers choose whether validate every set using merely save allows flexibility argue validation default people pass disable model set breaking change something maintainers likely choose without cutting new release version least", "d": "2/2015"}, {"body": "minimum needs fixed previous values saved validation run correctly reset last valid value", "d": "2/2015"}, {"body": "minimum needs fixed previous values saved validation run correctly reset last valid value yes sounds like interesting idea although one might trickier figure practice theory would worth exploring pr", "d": "2/2015"}, {"body": "epitome object set models prototype merged options argument breaking lets js let backbonemodelextend options validate true let new nearly equivalent system let new backbonemodel validate true", "d": "2/2015"}, {"body": "yes sounds like interesting idea although one might trickier figure practice theory would worth exploring pr hmm maybe could beginning recordreplayreverse sort thing suppose implemented stack attributes objects level could also valid metadata property indicate set attempt valid invalid sounds little much bet one plugins could handle sort thing", "d": "2/2015"}, {"body": "seems like conversation run course still happy entertain pr explores notion continuous tracking unvalidated changes", "d": "5/2015"}, {"body": "reading old tutorial see model used validate set well save understand would reduced save ca nt understand efficiency option think option find useful simplifying invariant alternative complex semantics loading work handling contingencies client library", "d": "5/2015"}, {"body": "figured example still point options lists would still helpful", "d": "1/2015"}, {"body": "thanks bug report sorry late reply saw", "d": "2/2015"}, {"body": "user nt really control url feed bizarro urls website give invalid pages either form type graceful invalid urls emitting error way allows app handle think around historystart nt good enough", "d": "1/2015"}, {"body": "user nt really control url feed bizarro urls website give invalid pages either form type graceful right urls nt always created domestically search urls especially problematic often fed external source eg invalid urls emitting error way allows app handle think trycatch around historystart nt good enough nt think someone errantly navigate like app allow modify query wrapping means execution stopped route executed option dump whoops url malformed message possible happen even url correctly escaped", "d": "1/2015"}, {"body": "think nicer api developer writing router would", "d": "1/2015"}, {"body": "might event work better ie error matching route route unmatched edit thinking would better doh", "d": "1/2015"}, {"body": "event nt bad idea nearly use cases fine passing along parameter otherwise could handle event know route anything better broken page", "d": "1/2015"}, {"body": "arguments mismatch change event calls callback expects first param treating need guard", "d": "1/2015"}, {"body": "found prodding since last used backbone logical connection property model changed sync server seemed natural expected work box agree seems logical backbonemethods events objects connectable perhaps using model unconventional way intend model hold state searchform somewhat surprised nt stumbled upon problem earlier", "d": "1/2015"}, {"body": "hi whitefire thanks bringing stage game api unlikely change much recommend bit explicit much typing much less error prone", "d": "1/2015"}, {"body": "agreed thank time", "d": "1/2015"}, {"body": "best way use view layer make views otherwise feel free delete copy backbone", "d": "1/2015"}, {"body": "checkout henrikjoreteg excellent ampersandjs modular fork backbone created solve exact issue", "d": "1/2015"}, {"body": "jashkenas using react top bottom using backbone builtin view layer okay thanks clarifying tgriesser already heard long time ago seeing sounds exactly want give shot thank", "d": "1/2015"}, {"body": "hi spyropress please use mailing list stackoverflow questions github issues maintaining framework", "d": "12/2014"}, {"body": "think issue cant use default param use initialize function model set property new collection backbone cloning default attributes javascript pass value reference clone defaults well", "d": "12/2014"}, {"body": "hard tell issue looks like may misunderstanding way javascript prototypes work example demonstrate js var model backbonemodelextend items var new model b new model consolelog aitems bitems aitemspush consolelog aitems bitems references objects stored prototype shared amongst instances js var model backbonemodelextend initialize function thisitems var new model b new model consolelog aitems bitems aitemspush consolelog aitems bitems", "d": "12/2014"}, {"body": "hi mention comment javascript pass value reference mention references objects stored prototype shared amongst instances default attributes property backbone init two objects reference happening example think model constructor clone defaults add attributes thanks", "d": "1/2015"}, {"body": "want clone defaults initialize general bad idea store objects prototype backbone nt going help", "d": "1/2015"}, {"body": "sure similar precedent languages everyones favourite gotcha mutable default parameters python argue scope bb handle instance competition mootools shallow clone objects models prototype spyropress make defaults function wo nt run issue", "d": "1/2015"}, {"body": "unfortunately nt vm try jdalton anything stand", "d": "2/2015"}, {"body": "happen vm sayhello create jsbin issue", "d": "2/2015"}, {"body": "hey asparagino thanks reporting always wondered edge cases would bite us know smiley actually use deal unicode escapes firefox maybe browsers research see instead", "d": "1/2015"}, {"body": "work newsy site seo friendly urls pages like fail raises exception whereas url without urlencoded percent sign succeed ideally valid url would work regardless whether fragment urldecoded twice without error", "d": "1/2015"}, {"body": "fyi call added deal fact browsers ie firefox returns unicode characters percent encoded", "d": "1/2015"}, {"body": "think fixed mind giving try", "d": "1/2015"}, {"body": "might making leaps think correct behavior browser return valid uri uri components location object attributes value href attribute must absolute uri reference percent character part uriencoded octet valid character uri percent character always reserved purpose escape indicator must escaped order used data within uri page would nt expect solved anytime soon fix backbone still great idea think would value following browser vendors besides firefox clarifying implementing standard behavior", "d": "1/2015"}, {"body": "think would value following browser vendors besides firefox clarifying implementing standard behavior hope smiley", "d": "1/2015"}, {"body": "bug filed webkit internet explorer nt really expect much action old component browser maybe folks lot experience least chime question", "d": "1/2015"}, {"body": "macgyver debugging looks problem url decoding process within backbone even construct valid url part calling encodeuricomponent param construct url decodeuri called locationhref first url split apart decodeuricomponent called param browser returns invalid uri location object backbone partially decoded deescaped already decodeuri call second attempt decodeuricomponent throws urierror braddunbar looks good think better fix hack let know pick edge cases testing", "d": "1/2015"}, {"body": "thanks taking look asparagino", "d": "1/2015"}, {"body": "doubt research let us know", "d": "12/2014"}, {"body": "giving thought totally understand inappropriate thanks reasonable gatekeeper jashkenas", "d": "12/2014"}, {"body": "cheers buddy", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "reproduce though scrollbar safari safari version yosemite", "d": "12/2014"}, {"body": "steps reproduce right side scrolled top page scroll right side page anywhere nt scroll top page table contents scroll even apparent scroll table contents first scroll right side", "d": "12/2014"}, {"body": "clarify scrollbar content left column scroll mouse scroll wheel", "d": "12/2014"}, {"body": "ahh thanks jridgewell reproducing", "d": "12/2014"}, {"body": "remember problem safari ios idea carried desktop looks like whatever focused clicked last control scroll really bug safari since works fine every browser click one elements drag scroll bar scroll bar focus", "d": "12/2014"}, {"body": "looking issue bit truly unfortunate safari bug codebased workarounds seem add unnecessarily ugly code break basic functionality docs page", "d": "2/2015"}, {"body": "would rather set beginning loop necessary since case take second condition ternary", "d": "12/2014"}, {"body": "jridgewell", "d": "1/2015"}, {"body": "concerns pr written application success callback provided still called app could perform update cache needed would think typical usecase namely use ifmodified flag situations know still old data loaded refresh changed scenario nt want overburden default backbone sync code cache handling something could added consensus folks think needs provide better caching hook ok stands reasonable job solving problem thanks thorough presentation issues", "d": "12/2014"}, {"body": "parse example second instantiation example apply models collections javascript configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url parse function data consolelog data return data var gists new gists fetch twice log length fetch gistsfetch function consolelog gistslength return gistsfetch function consolelog gistslength gists new gists fetch function consolelog gistslength var gist backbonemodelextend urlroot parse function data consolelog data return data var gist new gist id fetch twice log attributes fetch gistfetch function consolelog gistattributes return gistfetch function consolelog gistattributes gist new gist id fetch function consolelog gistattributes think comes differences unset attributes default removes models default getting second request one returns called since unset default model attributes changed called since removes default collection models removed jashkenas braddunbar worth changing behavior stopgap use prevent models removed present json response javascript configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url var gists new gists fetch twice log length fetch gistsfetch function logs consolelog first fetch gistslength gistsfetch remove false function logs consolelog second fetch gistslength concerns think scope backbone going need sort caching layer catches sets data whatever returned last time cache stopgap use fetching first time", "d": "12/2014"}, {"body": "parse example second instantiation example apply models collections true true explicit two problems called returned passing empty data models collections collections likely wiped problem ca nt differentiate actually empty data simply nt enough information action think comes differences model set collection set right second problem affects collections worth changing behavior nt think anyone wants behavior change suggesting stopgap stopgap proposed insufficient handle problem sure works example data nt changed server imagine situation delete gist two requests get response gists collection updated reflect change option passed going need sort caching layer catches sets data whatever returned last time cache true although correct works best caching system client shows pretty reasonable way solve problem without introducing caching layer stopgap use collectionfetch ifmodified false fetching first time ca nt imagine anyone would want use sometimes passing first time noop system works first request", "d": "12/2014"}, {"body": "nt think anyone wants behavior set change suggesting arguing either saying would stop collection wiped would directly mirror new models would added akin new attributes added existing models would updated akin existing attributes updated removed models would left alone akin removed attributes ignored data nt changed server imagine situation delete gist two requests still want data match exactly true although correct works best caching system client shows pretty reasonable way solve problem without introducing caching layer nt solve issue second instantiation meant fetching first time javascript var gists new gists gistsfetch var new gists empty passing first fetch would grab new data needed second instance caching layer would solve since empty response body would replaced original request", "d": "12/2014"}, {"body": "ah gotcha thanks clarifying jridgewell", "d": "12/2014"}, {"body": "jmeas call fire event collections model attached deleted", "d": "12/2014"}, {"body": "stephanebachelier elaborate mean understand destroy works sure relates convo", "d": "12/2014"}, {"body": "jmeas nt remember say forget cite know sure know destroy works answer probably complete request collection destroy model collection server informed requesting first collection trigger collection changed", "d": "12/2014"}, {"body": "nt solve issue second instantiation meant ifmodified false fetching first time var gists new gists gistsfetch var new gists empty passing ifmodified false first fetch would grab new data needed second instance caching layer would solve since empty response body would replaced original request", "d": "5/2015"}, {"body": "brought numerous times", "d": "12/2014"}, {"body": "yep thanks jmeas general nt using arbitrary strings model ids stick backendgenerated integers uuids fine", "d": "12/2014"}, {"body": "jmeas thanks assumed worked like given tradeoff simplicity thoroughness seems backboney favor simplicity mention performance", "d": "12/2014"}, {"body": "please submit failing test case demonstrates undesirable behavior glad merge discuss", "d": "12/2014"}, {"body": "think bigger issue model function returns instance meant could fixed making since uses reference model handy since released would easy make change", "d": "12/2014"}, {"body": "actually issue would method", "d": "12/2014"}, {"body": "always little curious nt receive model instance might handy pr setting nt think supporting really necessary functions property object anything else nt seem like good javascript", "d": "12/2014"}, {"body": "jridgewell return functions without property sure functions thing saying anything else nt seem like good javascript flies face underscorejs library", "d": "12/2014"}, {"body": "johnfn trying bind function anyways", "d": "12/2014"}, {"body": "thejameskyle wanted use property set inside", "d": "12/2014"}, {"body": "hmm make sense potentially change constructor way nt functions return model instances correct", "d": "12/2014"}, {"body": "obviously people would write thismodelprototype null lot people might write thismodel bind thismodel also removes prototype backbone able handle case read code jumped discussion sorry finished reading changing would nt worse thing", "d": "12/2014"}, {"body": "jridgewell nt see helps", "d": "12/2014"}, {"body": "guard null return default though think edge", "d": "12/2014"}, {"body": "means still problem custom bound method function returns model instance", "d": "12/2014"}, {"body": "deemed acceptable trying get rid error base think going end left define custom going provide true constructor function hell lot better setting landed", "d": "12/2014"}, {"body": "since released potential pass model handle use case better although sure handle use case storing reference various container looking", "d": "12/2014"}, {"body": "realize forgot access also thinking make sense takes model attributes since id really dependent attributes etc may places using unnecessary though since always date", "d": "12/2014"}, {"body": "jridgewell essentially exists today update collections could determine uniqueness ids instead models see", "d": "12/2014"}, {"body": "moral story avoid especially nt bind unnecessary calls already get passed correct native functionprototypebind nt give result proper prototype instance need rethink way modelid works", "d": "12/2014"}, {"body": "nt binding binding always gets called", "d": "12/2014"}, {"body": "ok issue johnfn collection looked like instead also expect work right js var mycollection backbonecollectionextend initialize function thismodelprototype null", "d": "12/2014"}, {"body": "shrug like mentioned think bigger issue specifying model method returns instance make fail silently fix case along great", "d": "12/2014"}, {"body": "make modelid fail silently using idattribute using factory model different override bit confusing nothing documentation ca nt fix", "d": "12/2014"}, {"body": "bit confusing nothing documentation ca nt fix nt aware prior issue good need rethink way modelid works think makes much sense", "d": "12/2014"}, {"body": "usually add documentation cut release pull open may may get used docs add case makes much sense explain make sense pass model attributes instances called use uses uses benefit", "d": "12/2014"}, {"body": "agree probably accept model instance master different times nt need accept since getting model edge cases though would need drop support favor think standard use case anyways would need way perform bookkeeping changing model id separated could done pretty easily would also fix", "d": "12/2014"}, {"body": "would need drop support thisget id thisget type id favor thisget thisget want able call unparsed attributes collection would also fix real issue though think argument time nt use arbitrary strings ids given persistence layer integer uuid etc", "d": "12/2014"}, {"body": "would need drop support thisget id thisget type id favor thisget thisget yeah nt want get rid either think issue multiple model types wanting know type dealing although nt know common multiple types collection different", "d": "12/2014"}, {"body": "want able call get unparsed attributes set damn forgot search places using could get around instantiating model mean unnecessary object finds existing collection attributemethods collection attributemethods real issue though need able quickly grab model old id eg would kill two birds", "d": "12/2014"}, {"body": "actually could instantiate model", "d": "12/2014"}, {"body": "strongly disagree nt side effects change completely breaks contract", "d": "12/2014"}, {"body": "nt view instantiating object side effect adding model collection creating passed really thought could still support edge case", "d": "12/2014"}, {"body": "scratch comments wo nt work well due argument may require closest able get letting determine argument model attributes hash id model existing model model continue id thismodelid modelattributes id thismodelid model order amp amp modelisnew modelmap id orderpush model get model set id get function obj obj null return void var id thismodelid thisismodel obj objattributes obj return thisbyid obj thisbyid id thisbyid objcid return thisbyid obj thisbyid objcid thisbyid thismodelid obj modelid function attrs return attrs thismodelprototypeidattribute id modelid function model var idattribute result thismodelprototype idattribute id return thisismodel model modelid model idattribute internal method create model ties collection addreference function model options thisbyid modelcid model var id thismodelid modelattributes var id thismodelid model id null thisbyid id model modelon thisonmodelevent event destroy thisremove model options event change var previd thismodelid modelpreviousattributes var id thismodelid modelattributes var id thismodelid model previd id previd null delete thisbyid previd id null thisbyid id model diff git testcollectionjs testcollectionjs index testcollectionjs testcollectionjs thisismodel attrs attrs attrsattributes return attrstype attrsid", "d": "12/2014"}, {"body": "although nt know common multiple types collection different idattributes agreed though counter anecdote recently worked project tracks keyed db artists albums etc live backbone collection depends backend could get around instantiating model nope gone path horrible built class creator skillshare using older version backbone behavior hack around correctly parsing ids even temporarily persisting cids get models show correctly behavior want grateful eventually fixed change seems natural fan polluting way makes interface ugly especially nt like part sometimes passing model sometimes passing attributes", "d": "12/2014"}, {"body": "nope gone path horrible finding leaving method signature though may want check existence prototype trying grab leave end dev override use factory built class creator skillshare using older version backbone behavior forgot danapplegate mentioned worked skillshare", "d": "12/2014"}, {"body": "would idattribute ever function goal using result guard plain js", "d": "12/2014"}, {"body": "guard", "d": "12/2014"}, {"body": "ok sure looks like back started say looks like case useful overriding anyway add doc note", "d": "12/2014"}, {"body": "prefer second option personally sure looks like back started say looks like case useful overriding model anyway add doc note think appropriate", "d": "12/2014"}, {"body": "nt currently plan would major revamping features interface nt seem like good idea needed one next release changes far", "d": "12/2014"}, {"body": "ok got thanks jeremy", "d": "12/2014"}, {"body": "eta", "d": "12/2014"}, {"body": "soon get around wrapping graphic morning hoping look bit backbone afternoon events may intervene tend", "d": "12/2014"}, {"body": "fingers crossed thanks wed dec pm jeremy ashkenas notifications githubcom wrote soon get around wrapping graphic morning hoping look bit backbone afternoon events may intervene tend reply email directly view github", "d": "12/2014"}, {"body": "mean getset whatever want including used storing raster tiles store issue example", "d": "12/2014"}, {"body": "megawac first thanks quick response well use react view component use case persist change serverside thorugh backbone model like way instead file metadata hash sent server value avatar key contrary thanks answer get handle file serverside gets persisted set pic attribute difference two ways communicating missing something wrong", "d": "12/2014"}, {"body": "hmm thats case problem interesting suspected kept blob client side never sent back pipe either way big first class support bb belong core yet another extension overriding sync someone nt beat see reproduce behaviour jsbin tonight seems like interesting problem cold snowy evening", "d": "12/2014"}, {"body": "megawac use bb react views rails backend bb plugins added override behaviour interesting seen people raising issue stackoverflow deciding workarounds raising issue seek suggestions also appreciate thoughts bb works nested bb model associations say user model association bb profile model replication rails resource say profile nested resource user serverside case explicitly orchestrated association bb talk serverside guess picture got problem thanks time appreciate thoughts experience", "d": "12/2014"}, {"body": "backbone model attributes supposed serializeable json sticking types stuff responsible legwork case overriding might right thing better answer stick file handles attributes first place serialize first", "d": "12/2014"}, {"body": "yessir backboneconf third two weeks cut either", "d": "12/2014"}, {"body": "awesome", "d": "12/2014"}, {"body": "dependency tools like bower wo nt get unless point master nt want fwiw point specific commit hash bower npm want grab untagged version nt want take risk point master", "d": "12/2014"}, {"body": "awesome", "d": "12/2014"}, {"body": "update release schedule backbone", "d": "2/2015"}, {"body": "ah yes slipped would good cut release soon possible afraid nt particular plan", "d": "2/2015"}, {"body": "please use stackoverflow mailing list irc channel questions github issues developing framework", "d": "12/2014"}, {"body": "believe correct behavior changed value left see", "d": "11/2014"}, {"body": "right changed attributes stored since last change call would get messy otherwise need track revisions life model every sync say fairly easy", "d": "11/2014"}, {"body": "sorry label spam phone github nt best labels mobile", "d": "11/2014"}, {"body": "models designed support view ui seemed obvious use change event model attribute order drive web form example user moves slider number times called view seems implementation significantly limits use models anything data interchange w server", "d": "12/2014"}, {"body": "thesmart understand correctly said store previous state model form submit perhaps", "d": "12/2014"}, {"body": "thanks tips also looks like accept attributes object compare going write plugin looks like someone beat", "d": "12/2014"}, {"body": "hi chaimpeck thanks reporting unfortunately able reproduce using code tried latest chrome firefox master branch release would mind posting working example gistbinfiddle take look definitely problems encodingdecoding specific characters firefox would nt doubt smiley", "d": "11/2014"}, {"body": "actually seen exact issue unable share code see mock test code replicate discovered issue definitely browser based modern versions ie chrome work fine least firefox nt ask hate infrastructure stuck definitely triggers without even adding trigger option", "d": "9/2016"}, {"body": "discovered firefox check variable thislocationhref whitespaces variable encoded chrome presumably ie leaves whitespace issue backbone since go navigate checkurl comparison thisfragment returned value thisgetfragment determine whether call thisloadurl nt match thisgetfragment returns value thislocationhref place spaces firefox encodeings matter thisfragment returns decoded equivalent thisfragment remains decoded regardless whether use encodeuri url navigate function thisfragment assigned calling thisdecodefragment url gets passed removing attempts forcing encoding therefor thisfragment always decoded url due use thisdecodefragment url contains characters encodeuri would change case spaces never match returned value thisgetfragment firefox since firefox encodes value thislocationhref whereas browsers nt since two values nt match thisloadurl gets called checkurl regardless whether trigger parameter routernavigate true false preliminary fix preexhaustive testing would change return value gethash method read", "d": "9/2016"}, {"body": "still needed last version thank", "d": "3/2018"}, {"body": "issue trying use nonstandard characters url case \u00e5\u00e4\u00f6 characters swedish alphabet latest version chrome backbone solution worked well thanks bunch", "d": "3/2018"}, {"body": "solution fully understand used pathstripper regex edit works situration see", "d": "4/2018"}, {"body": "aggror pathstripper according documentation cached regex stripping urls hash equivalent solution neat efficient", "d": "4/2018"}, {"body": "avoid adding simultaneous hash router also take care initial condition show code handle initial case prevent adding simultaneous routes routeslength routes gethash return false else routespush gethash", "d": "7/2018"}, {"body": "backwards event fired call need listen ahead time js routeron route homeroute function consolelog route homeroute heard backbonehistorystart", "d": "11/2014"}, {"body": "ah yes true let follow application ideally call", "d": "11/2014"}, {"body": "seanstrom call last load order using module system js var backbone require backbone var get require get var require var require var assets require assets backbonehistorystart maybe make sense html backbonehistorystart", "d": "11/2014"}, {"body": "hmm interesting clears thanks thejameskyle similar note know calls callback sets route", "d": "11/2014"}, {"body": "using", "d": "11/2014"}, {"body": "oh misread question looking loadurl", "d": "11/2014"}, {"body": "yup saw well amazing help thank", "d": "11/2014"}, {"body": "nope thanks asking", "d": "11/2014"}, {"body": "jashkenas would okay adding simple style guide backbone underscore contributing docs needed clean commits past conform correct style pointed megawac read bunch old pull requests write something like", "d": "11/2014"}, {"body": "sure sounds fine forewarned one reads anyway going future commits look better", "d": "11/2014"}, {"body": "backbone builds top jquery events whatever works works nothing backbone", "d": "11/2014"}, {"body": "thank response nt think jquery would problem", "d": "11/2014"}, {"body": "fml", "d": "11/2014"}, {"body": "chemoish definitely correct browser behavior click event fire submit event click event would nt fire submit event might want search event bubbling works", "d": "11/2014"}, {"body": "sort found solution works clean right modified version backbone historynavigate method library updated extension might need different yeah comment seems work fine hope helps javascript extend backbonehistory navigate function fragment options cached regex stripping urls hash var pathstripper", "d": "12/2014"}, {"body": "extend router js navigate function fragment var options backbonehistoryoptions ret much simpler", "d": "12/2014"}, {"body": "probably even get away setting router property directly", "d": "12/2014"}, {"body": "would nt recommend depends leading trailing slash changing assumption could cause strange results avryl curious technical reason want slash included purely aesthetic fine aesthetic technical reason love hear smiley", "d": "12/2014"}, {"body": "braddunbar purely aesthetic urls trailing slash weird root nt removing trailing slash urls option", "d": "12/2014"}, {"body": "backbone allows set root trailing slash nt behave differently", "d": "12/2014"}, {"body": "got aesthetic prefer drop special case well shrugs", "d": "12/2014"}, {"body": "prefer drop special case well sure mean special case thu dec pm brad dunbar notifications githubcom wrote got aesthetic prefer drop special case well shrugs reply email directly view github", "d": "12/2014"}, {"body": "listening click events see url child root requiring trailing slash backbonehistoryroot breaks default route root", "d": "12/2014"}, {"body": "referring code", "d": "12/2014"}, {"body": "pr address", "d": "5/2015"}, {"body": "jashkenas would solve breaking change", "d": "5/2015"}, {"body": "hi wondering could help still open issue", "d": "12/2015"}, {"body": "trying get solution well would like routes look like opposed cant figure", "d": "4/2016"}, {"body": "take look master part", "d": "11/2014"}, {"body": "yep feature want thanks jridgewell", "d": "11/2014"}, {"body": "wrong forum try github support", "d": "11/2014"}, {"body": "filesystem unsqushfs mksquashfs pray null god", "d": "11/2014"}, {"body": "nt look like backbone try mailing list irc channel questions like", "d": "11/2014"}, {"body": "issue related xhr limitation backbone modelsave many nested elements", "d": "11/2014"}, {"body": "comments please thoughts buzzy english native language almost end working day sorry inappropriate ca nt get check global error processing ajax call error callback model never empty ca nt check whether error callback equal one prefilter one backbone", "d": "11/2014"}, {"body": "looks like docco bug might try opening issue repo meantime fix hand", "d": "11/2014"}, {"body": "docco user would info notify", "d": "11/2014"}, {"body": "robust something would end backbone core day real answer time goes js runtimes get better better inferring true name js variables", "d": "11/2014"}, {"body": "backbone view defined element potentially fragment multiple elements defined fragment instead would nt make sense would nt make sense would nt make sense importantly event delegation machinery would break", "d": "11/2014"}, {"body": "see page wiki", "d": "11/2014"}, {"body": "nt help anything problems set alternative defining everything requireconfig", "d": "11/2014"}, {"body": "question issues try mailing list irc channel", "d": "11/2014"}, {"body": "yes intended", "d": "11/2014"}, {"body": "jashkenas may ask", "d": "11/2014"}, {"body": "models entering exiting collection supposed sorted proper place adds removes models collection however inside collection collection ca nt know general case model changed properties need resorted arbitrary function application type particular models sort properties change want tell collection resort appropriate time", "d": "11/2014"}, {"body": "thanks jashkenas clear", "d": "1/2015"}, {"body": "paging braddunbar probably nt want look yet another permutation probably duplicate question", "d": "11/2014"}, {"body": "hey chilikov would mind posting working example glad take look need example work otherwise often start assumptions nt match end wasting lots time checking something describing thanks", "d": "11/2014"}, {"body": "closed test case provided", "d": "11/2014"}, {"body": "documentation states update url without creating entry browser history set replace option reason experiencing happening setting replace current history entry instead inserting new one still history way put different url updated new entries created history info replacestate", "d": "11/2014"}, {"body": "great", "d": "11/2014"}, {"body": "behavior since initial release going need override support", "d": "10/2014"}, {"body": "meant map canonical resource identifier typically assigned backend simply put nt already model trying create first time", "d": "10/2014"}, {"body": "jridgewell backbone code working always checked id field implemented let set field complains database using properly rest api uses username find data users simply type name looking usernames also unique indexed work well ids users set username registering need submit model field completed", "d": "10/2014"}, {"body": "saying changed idattribute property setting model", "d": "11/2014"}, {"body": "set define model nt change afterwards case attribute rest api uses queries save db set field", "d": "11/2014"}, {"body": "ca nt imagine changing line isnew really anything let take look monday back computer generally speaking nt using arbitrary strings resource identifiers autoincrementing id uuid given backend much better solution", "d": "11/2014"}, {"body": "ah used set modelcollection create consider bug feel free open pr test add back sat nov pm adam kre\u0185s krebsadam gmailcom wrote ca nt imagine changing line isnew really anything let take look monday back computer generally speaking nt using arbitrary strings resource identifiers autoincrementing id uuid given backend much better solution", "d": "11/2014"}, {"body": "tinkering backbone changing changing worked changing add collection model line referenced nt effect case believe working bug implementation would always return false set anything id method nt use add new attributes model sending backend design decision could fix probably change backend recommendation although try think way backbone relying id field check model new although good practice setting id client either letting user choose id generating one based client features useful many cases", "d": "11/2014"}, {"body": "create short jsfiddle problem set setting model attributes model property right value js var model backbonemodelextend idattribute uuid var model new model uuid modelid modelhas uuid true", "d": "11/2014"}, {"body": "although good practice setting id client either letting user choose id generating one based client features useful many cases really ever good practice even check availability ahead time user trivially break things fussing around console", "d": "11/2014"}, {"body": "sorry mixed versions old implementation checking would work passing modelsave jashkenas case behind scenes everything works database generated ids referenced ids interface user rest api use memorable names instead ids queries validated server execution user wo nt able change crucial field mess system using way indicating backbone field use api queries identify true id field", "d": "11/2014"}, {"body": "memorable names field true", "d": "11/2014"}, {"body": "implementation nt work new version backbone using made code shorter cleaner slug name url field build appropriate query string frontend parser backend think help features need build next", "d": "11/2014"}, {"body": "encountered issue upgrading today found code like would get post collection get put collectionundefined totally abhorrent practice changing api get rid feel inconsistency modelisnew modelurl surprising odd", "d": "2/2015"}, {"body": "really sounds like bug actually happening put", "d": "2/2015"}, {"body": "pr ready sure correct way go fixed falling back idattribute url appears change introduced", "d": "2/2015"}, {"body": "sure feel simply open pr failing test case patch ping caseywebdev", "d": "2/2015"}, {"body": "yup failing test would great", "d": "2/2015"}, {"body": "good catch fix short order", "d": "10/2014"}, {"body": "think addressed issue would mind giving spin", "d": "10/2014"}, {"body": "thanks quick patch think fixes right thing see code review pull request", "d": "10/2014"}, {"body": "problem see fixed nt think wokes", "d": "11/2014"}, {"body": "think confused different problem instead conversion pushstate style url hash style url", "d": "11/2014"}, {"body": "odd trying create resource trying create another one backbonejs psychic powers nt know still exists server deleted time expired ephemeral non restful resource whatever crazy scheme might cooked", "d": "10/2014"}, {"body": "please try mailing list stackoverflow irc channel questions github issues maintaining framework", "d": "10/2014"}, {"body": "wrong argument types model constructor signature anything else incorrect future please use stackoverflow mailing list questions github issues maintaing framework", "d": "10/2014"}, {"body": "thanks read doc carefully", "d": "10/2014"}, {"body": "bad", "d": "10/2014"}, {"body": "override case", "d": "10/2014"}, {"body": "current approach overriding isequal wrapper method set reverting back original underscore isequal feels like kludge primarily nt want pollute underscore code internal logic lot stuff depends isequal secondly substitute isequal set conditions someone got sloppy forgot revert method could issues finally going forward objects may complex comparison logic instance two models equal subset attributes equal ie maintain timestamps record keeping model state nt weigh equality check guess could add custom comparator logic expand isequal respect custom comparators still feels less ideal", "d": "10/2014"}, {"body": "cbroome curious need store collectionmodel attributes reserve attributes strictly primary data types plain objects even though require nested hierarchies modelscollections app want attach model another model would nt suffice attach id attribute default usual backbone wiring sync together may something like enlighten use case", "d": "10/2014"}, {"body": "want attach model another model would nt suffice attach id attribute default usual backbone wiring sync together ramseydsilva still nt cover equality check suppose want see attribute categorymodel changed setting still need write custom isequal would know verify categorymodels within context itemmodel aside sometimes back complex components models models wo nt corresponding id api every new one get unique backbone cid instance scheduler component understands ical assigns intervals backed backbonemodel model scheduler attribute property like able say performing equality check look scheduler tojson attribute state", "d": "10/2014"}, {"body": "cbroome need revert isequal back override megawac solution put many condition check like make sure conflict instanceof check", "d": "1/2015"}, {"body": "midnightwonderer let say trust underscore isequal safer anything fellow coders would cook use isequal portions app idea running complex conditional logic every time appealing strikes bad practice bring back original point really think would beneficial objects define equality checks", "d": "1/2015"}, {"body": "cbroome let test pr want whip one", "d": "2/2015"}, {"body": "sorry pr unfamiliar acronym", "d": "2/2015"}, {"body": "pr pull request github", "d": "2/2015"}, {"body": "ahhh duh yeah give go next couple days", "d": "2/2015"}, {"body": "thanks", "d": "2/2015"}, {"body": "pull request", "d": "2/2015"}, {"body": "expected passing option backbone wait server agree adding model jsfiddle example sending post request jsfiddle agree post request specified url error post forbidden", "d": "10/2014"}, {"body": "taking talking runtime error url property must defined expected oct jeremy ashkenas notifications githubcom wrote closed reply email directly view github", "d": "10/2014"}, {"body": "know url bad example show collection url defined try call throws exception pass", "d": "10/2014"}, {"body": "cleaned fiddle try make easier read", "d": "10/2014"}, {"body": "michaelhgchen could please review reconsider resubmit issue real issue tried clarify might explained well first time", "d": "10/2014"}, {"body": "collection create meant called attributes object model instance try see works reason need pass model instance create set collection property first", "d": "10/2014"}, {"body": "docs say otherwise create method accept either attributes hash existing unsaved model object fine nt want support docs bug needs fixed", "d": "11/2014"}, {"body": "indeed bit reduplication logic nt see harm adding line sets collection reference either sat nov collin donahueoponski lt notifications githubcom wrote docs say otherwise create method accept either attributes hash existing unsaved model object fine nt want support docs bug needs fixed reply email directly view github", "d": "11/2014"}, {"body": "facing problem docs mentioned collectioncreate accept also unsaved model object something", "d": "3/2015"}, {"body": "looks like fixed ambicoder colllin guys test master see fixes problem related", "d": "3/2015"}, {"body": "mind posting failing test case jsfiddle", "d": "10/2014"}, {"body": "nambrot may wrong might wanted instead", "d": "10/2014"}, {"body": "sorry super busy currently able create jsfiddle please close nt want issue laying around ramseydsilva rake care", "d": "10/2014"}, {"body": "nambrot ah see never knew could", "d": "10/2014"}, {"body": "legitimately curious got tried reproducing thing come either overwritten model created using", "d": "10/2014"}, {"body": "ahhhhh sorry fault indeed overwritten totally ignored would impact object access", "d": "10/2014"}, {"body": "ah makes sense glad found", "d": "10/2014"}, {"body": "appears duplicate others search background", "d": "10/2014"}, {"body": "experience anyone figure sparkles", "d": "10/2014"}, {"body": "add homebrew support backbone", "d": "10/2014"}, {"body": "verified reproducible issue", "d": "10/2014"}, {"body": "infotoudaya looks like missing collection macros locate utilise pkgconfig osx system install missing dep via best luck side note wrong repo", "d": "10/2014"}, {"body": "problem found answer right needed run", "d": "6/2015"}, {"body": "interesting idea", "d": "10/2014"}, {"body": "big question callback resolved bind time trigger time people might expect one confused think solved docs people wo nt know feature unless reading section either would equally useful usually binding prototype methods eg looks like resolving method trigger time would involve changes core event dispatch would best maybe double size triggerevents worse might cause noticeable perf degradation option resolving method bindtime would pretty easy implement check callback string see context function property name", "d": "10/2014"}, {"body": "chatting coworker mentioned resolving method trigger time would actually buy power could switch event handler object based state resolve bind time really syntactic sugar", "d": "10/2014"}, {"body": "made pull request resolve bindtime trigger time resolution could nt something hacky like var extend backboneevents var b extend backboneevents asomeotherhandler function arg consolelog arg call asomehandler function arg thissomeotherhandler arg alistento b event somehandler btrigger event hello gt prints hello call asomeotherhandler function arg consolelog arg call btrigger event hello gt prints hello call", "d": "11/2014"}, {"body": "thinking idea allowing strings events hash necessary since defined statically ca nt since nt object alternative really fugly must called runtime instance nt face issues get string support would nt translate well called object leaving object method defined ambiguous get support nt break parity two sets think adds minimal gain adds complexity", "d": "11/2014"}, {"body": "allowing strings events hash necessary since defined statically would consider extending feature many users already several frameworks marionette thorax already add functionality event maps since nt object get string support would nt translate well called object leaving object method defined ambiguous quite works current form grabs method whatever object going executed behavior could easily changed nt seem right js var foo function var foo function foo foo gt foo foo gt could easily changed think adds minimal gain adds complexity change simply changing signature omit changes line change total size difference chars minified also little perf difference calls using strings", "d": "11/2014"}, {"body": "would consider extending feature many users already several frameworks marionette thorax already add functionality event maps statically defined since nt really necessary listen object events hash would still need method actually binding define functionality method akin delegateevents foo foo gt foo foo gt could easily changed ambiguity exactly nt like either way someone going want opposite functionality impossible support someone trip benefit explicit", "d": "11/2014"}, {"body": "would still need method actually binding following example gave works fine people already writing methods subtly inconsistent depending library using implementation ambiguity exactly nt like still nt said ambiguous always going method given context backbone event methods already default context object called impossible support someone trip would anyone expect work like", "d": "11/2014"}, {"body": "following mean defining hash nt actually bind anything something actually call put string method conversion would leave simple pass function give responsibility translating static context instance original point still nt said ambiguous context default ambiguity hash specify means runtime point trying make expect someone want functionality especially converting", "d": "11/2014"}, {"body": "adding complexity exact thing implementation context default ambiguity hash specify means runtime point trying make expect someone want functionality especially converting sounds like think ambiguity backboneevents currently decides context callbacks new problem introduced one case stringbacked callback always look context executed", "d": "11/2014"}, {"body": "ooo reason thought threw error passed events hash obj undefined either way still make responsible translating static context instance opposite sounds like think ambiguity backboneevents currently decides context callbacks confused nothing wrong mean saying object grab stringmethod ambiguous unlike passed directly following makes one case stringbacked callback always look context executed context third param want grab executed without context event triggers everything clear current fetching calling context event triggers makes even confusing method used listener gets accepted argue functionality always make even context param", "d": "11/2014"}, {"body": "confused nothing wrong well someone nt understand going called case also nt going understand would pulled nt anymore ambiguous gets accepted argue functionality always make even context param okay trying get stuckouttonguewinkingeye wondering would make sense could go either way similar implementation", "d": "11/2014"}, {"body": "moving discussion", "d": "4/2015"}, {"body": "correct wrong believe event looking fired validation nt prevent need means fired validation confirms conditions valid nt produce", "d": "10/2014"}, {"body": "trigger event want end validation", "d": "10/2014"}, {"body": "true trigger validation change event triggered actually changing model dontshootme true probably work short term wanted ask standard event since also event whatever reason event considered undesirable like know necessary nt really fly could said", "d": "10/2014"}, {"body": "second thought see need invalid since needs fire event match change operation fails nt see ca nt extend logic successful validation since leverage trigger error messages clear", "d": "10/2014"}, {"body": "closing dupe probably others", "d": "10/2014"}, {"body": "platinumazure maybe use monkey patch whith something like javascript validatefn backbonemodelprototypevalidate backbonemodelprototypevalidate function attrs options var ret validatefncall attrs options ret true thistrigger valid options return ret preparemodelfn backbonecollectionprototypepreparemodel backbonecollectionprototypepreparemodel function attrs options var ret preparemodelfncall attrs options ret false return false thistrigger valid ret options return ret careful tested used triggering events early late could undesirable effect", "d": "10/2014"}, {"body": "oops missed duplicate think searching open issues sorry", "d": "10/2014"}, {"body": "issue", "d": "12/2014"}, {"body": "", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "disagree coming wondering intentional thing like goal require things like code fine note call occurs hood would get passed along case switching would force validation every time give one choice matter agree code unclear case though would certainly like docs take stance", "d": "2/2015"}, {"body": "yes think intentional reason pass wish validate time docs make clear", "d": "5/2015"}, {"body": "already passing option model save model destroy collection create", "d": "9/2014"}, {"body": "backbonejs use validate method model validation think simple use plugin like backbnevalidation customize validation method even call server see example", "d": "9/2014"}, {"body": "indeed correct answer", "d": "9/2014"}, {"body": "unless mistaken version bower latest release comes bower get anywhere else", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "project obviously alive follow give even life", "d": "9/2014"}, {"body": "alive also fairly stable specific example something new think needs get done propose open source right", "d": "9/2014"}, {"body": "really question stackoverflow irc channel mailing list try reading source though think little clearer purpose collection sync model save key line server response empty object still work makes sense pass back full representation want sync", "d": "9/2014"}, {"body": "nope since version commit collections return models passed see changelog", "d": "9/2014"}, {"body": "sure enough sorry false alarm", "d": "9/2014"}, {"body": "wery obvious broke prototype chain rewritten backboneview extend method correct way seems seen old wrong documentation saying extend actually supporting prototype ps add example prototype reference list access prototype edit methods object", "d": "9/2014"}, {"body": "done", "d": "9/2014"}, {"body": "pass creating collection", "d": "9/2014"}, {"body": "great works unfortunately documented", "d": "9/2014"}, {"body": "duplicate others", "d": "9/2014"}, {"body": "please try stackoverflow mailing list questions github issues maintaing framework", "d": "9/2014"}, {"body": "read documentation enable pushstate backbonejs router add backbonehistorystart pushstate true handle routes server find article web explain", "d": "9/2014"}, {"body": "available backboneversion kind thing using file names even better package manager anyway", "d": "9/2014"}, {"body": "let tag em close em", "d": "9/2014"}, {"body": "check underscore partial method might help sometimes simplify kind code", "d": "9/2014"}, {"body": "yes good suggestion aka currying", "d": "9/2014"}, {"body": "let tag em close em", "d": "10/2014"}, {"body": "sorry return question much time passed busy month underscore partial definitely help minor improvement still requires individual functions set advance looking define arguments right events hash looking source code uses jquery function allows passing argument accessible eventdata using bit regex arguments could extracted passed calling would happy write pull request changes sounds viable", "d": "10/2014"}, {"body": "place event handlers could modify options object removereference call creates new object extending concerned addition optionspreviousmodels write pull request failing test case good see behavior breaks", "d": "9/2014"}, {"body": "sorry quite adept writing pull request use case breaks listening reset event collection reset hdlr handler receives event event including options object pass options object call another collection options reset function overwrite previousmodels property options object call options object corrupted corrupted listeners responding original event", "d": "9/2014"}, {"body": "aside throughout backbone code anytime incoming options object modified options object always cloned collectionreset inconsistent practice", "d": "9/2014"}, {"body": "nt follow removereference neither removereference addreference use input options argument answer question sorry ignored yes adding optionspreviousmodels corrupts incoming options object", "d": "9/2014"}, {"body": "pass options object call another collection options ca nt clone object passing reset seems like odd edge case", "d": "9/2014"}, {"body": "kidplug right consistent modifying object nt create", "d": "9/2014"}, {"body": "sure categorically agree find often useful take advantage objects passed reference needed later", "d": "9/2014"}, {"body": "cloning options event handler passing handler going pass options argument another function unmodified think presume next function might corrupt therefore function clone could make argument event handler reset event handler think always cloning options would lead way much unnecessary cloning object creation clone already consistently top profiler time spent", "d": "9/2014"}, {"body": "closed", "d": "10/2014"}, {"body": "since references byref event synchronous event absolutely synchronous triggered model added collection try stackoverflow mailing list questions github issues maintaing framework", "d": "9/2014"}, {"body": "badly described issue syncasync issue actually experiencing collection already pushed models fires events added models wants event happen model added collection nt seem wrong instead models added", "d": "9/2014"}, {"body": "ah react code debounce event listener call component one nice things virtual dom performance still good matter often call update", "d": "9/2014"}, {"body": "also pretty sure requests past issuesearch foo failing moment however", "d": "9/2014"}, {"body": "thank jridgewell deciphering issue reason chose point synchronous issue believe best explains going items adding collection already added listeners actually callbacks executed getting copy exact representation list events would feel correct actually less confusing using foreceupdate debouncing mixins today although react really fast handle overhead cases need know exact state object time rendering also issues android javascript execution could benefit us able render absolutely needed reference collection fine likely needed least index item added could slice array using index order get state collection point triggering event would great alternatively second collection deep copy collection actual event triggered", "d": "9/2014"}, {"body": "could perhaps override add behavior need still clear need deep copy collection could try", "d": "9/2014"}, {"body": "reason want correct representation collection need inform react via different methods react usually needs either currentsought next state order figure force render also render also would nt mind knowing general make system lot predictable assume event receiving sync collection added validation debugging possibly things look see could help use case thank keeping dialog alive", "d": "9/2014"}, {"body": "wrong repo bub", "d": "9/2014"}, {"body": "backbone events nt use jquery error code", "d": "9/2014"}, {"body": "backbone absolutely actively maintained also quite stable good thing", "d": "9/2014"}, {"body": "backbone hard dependency underscorejs gt restful persistence history support via backbonerouter dom manipulation backboneview include jquery older internet explorer support mimics underscore jquery apis lodash zepto also tend work varying degrees compatibility", "d": "9/2014"}, {"body": "looks like device emulation settings forgotten chrome", "d": "9/2014"}, {"body": "try asking question stack overflow appropriate place", "d": "9/2014"}, {"body": "seen many day ago many people ask answer topic ca nt find ask question asked lot question stack overflow forum none answered found answer nt forum answer question sooner stack", "d": "9/2014"}, {"body": "congratulation design really nice beauty design", "d": "9/2014"}, {"body": "think correct behavior actually defer braddunbar rewritten sort nested setting behavior recently", "d": "10/2014"}, {"body": "sequence events see listed level nesting update attribute fire change event call first listener arguments event update attribute nested fire change event call first listener arguments event call second listener arguments event call second listener arguments event opinion sort behavior inherent triggering events synchronously suggestion would use event fired events using values event updating values nested manner cc tgriesser", "d": "10/2014"}, {"body": "yep agree correct synchronous behavior wanted defer authority many ways address app quickest easiest simple", "d": "10/2014"}, {"body": "okay makes sense thanks update", "d": "10/2014"}, {"body": "problem backbone backbonecouchdb connector overwrites request get query parameters added db object", "d": "9/2014"}, {"body": "wrong using", "d": "9/2014"}, {"body": "using twice looks ugly", "d": "9/2014"}, {"body": "\u53d1\u81ea\u6211\u7684 iphone \u5728 notifications githubcom using col twice looks ugly reply email directly view github", "d": "9/2014"}, {"body": "using col twice looks ugly argue uglier passing option much flexible useful app feel free mix base collection", "d": "9/2014"}, {"body": "synchronous result always assuming exists environment", "d": "9/2014"}, {"body": "could also duck type response", "d": "9/2014"}, {"body": "yes thought probably work reasonably well many applications general enough nt model supposed data attribute could improve happens object see pattern provide heuristics given already options parameter happens collection cases ensure happens first fetch next ones unless resetted first collection option set preparemodel called existing branch collection set would possible set earlier", "d": "9/2014"}, {"body": "one reasons good nt need generallyapplicable work specific context app course designed want go flaginoptions route keep mind passed cloned passed individual models could modify options argument reference like js collection backbonecollectionextend parse function resp options optionsparsecalled true return respdata model backbonemodelextend parse function resp options return optionsparsecalled respdata resp", "d": "9/2014"}, {"body": "ok flagging sync function simpler try submit patch docs think docs least incompletemisleading regard model parse called data response server", "d": "9/2014"}, {"body": "needed versions build js gulptask browserify function return browserify appscriptsapplicationjs external jquery external lodash external backbone external backbonemarionette bundle error function error consolelog error add pipe end pipe source applicationminjs pipe gulpdest tmpscripts pipe livereload lr pipe notify message browserify task complete gulptask vendor function return browserify require backbonemarionette require backbone require lodash require jquery bundle pipe source vendorjs pipe gulpdest tmpscripts", "d": "9/2014"}, {"body": "try something like", "d": "9/2014"}, {"body": "dannytranlx working example also come join us need help close", "d": "9/2014"}, {"body": "yup suy solution best one need externalize dependencies manually require build step include line marionette loaded fine", "d": "9/2014"}, {"body": "nt work somehow samccone check example thanks", "d": "9/2014"}, {"body": "update follow samccone example hit error however downgraded browserify version working line something going newer versions browserify issue marionnette thanks time guys smile", "d": "9/2014"}, {"body": "ah strange indeed perhaps open issue browserify see resolution please share find", "d": "9/2014"}, {"body": "think still getting issue even though adding outter scope separate scope marionette redefining scope would property defined", "d": "11/2014"}, {"body": "jisaacks scope would nt issue share common modules across files setting requiring marionette make available marionette check marionette depends version backbone app specific reason include call would make non issue agree behavior short time wrap jquery require dropped support browserify users personally like see brought back much rather support common case attempting load jquery commonjs count build tool allow exclusion option like browserify webpack rjs shim", "d": "11/2014"}, {"body": "scope would nt issue require share common modules across files setting backbone requiring marionette make available marionette thanks info helped agree behavior short time wrap jquery require trycatch right think downside strict requirements", "d": "11/2014"}, {"body": "treating jquery like dependencies current sudodependency approach causes significantly problems solves", "d": "11/2014"}, {"body": "indeed dgbeck origin problem jquery real dep makes everything gothchas plenty already said issue numerous issues", "d": "11/2014"}, {"body": "comes time example think party line kind utility functionality responsibility backbone surprised attempt got others fwiw tried well tried different reasoning outcome", "d": "9/2014"}, {"body": "mmk makes sense tomhicks done research posting given outcome previous attempts going go ahead close issue anyone backbone team wants comment anything feel free future visitors might want check marionette likely create support feature cause seems pretty basic", "d": "9/2014"}, {"body": "check backboneviewoptions pretty much exact syntax described little sugar coat", "d": "9/2014"}, {"body": "nt think support encourage behavior passing custom options callback handler encourages second channel information outside actual url value whole point providing url value give link return place left options forwarded means return bookmark options nt forwarded state app different defeating point routing first place truly client side bit information pass around different way truly persistent bit state something nt want serialized url put session router options nt right way communicate", "d": "10/2014"}, {"body": "try stackoverflow mailing list types questions github issues maintaining framework", "d": "9/2014"}, {"body": "though nt right place question safely use models collections without jquery javascript environment", "d": "9/2014"}, {"body": "please use stackoverflow mailing list questions like error gives information need know", "d": "8/2014"}, {"body": "thanks url property defined model class scope collection code works version change logs modification used statckoverflow help answer decide read backbone source code code really need break user space least change log upgrade notei think", "d": "8/2014"}, {"body": "impossible help debug without small reproducible test case try creating jsfiddle shows problem look changes", "d": "8/2014"}, {"body": "thanks preparemode function collection dropped attrscollection attrscollection add line ver works may official way create new model must let know collection information though may necessary", "d": "8/2014"}, {"body": "yup added back lines later optionscollection nt work", "d": "8/2014"}, {"body": "attrs instanceof model attrscollection attrscollection return attrs attrs instanceof model return attrs code called model constructor get model instance call collection create method realized oddly attrs instanceof model true problem solved mei change code thank", "d": "8/2014"}, {"body": "naganowl underscore bind method case", "d": "8/2014"}, {"body": "aware solution brought linked issue person stated workaround rather solution given part ajax options backbone leverages callbacks would think backbone also take advantage option well", "d": "8/2014"}, {"body": "nt think workaround general solution specific problem nt want tie closely jquery api folks using different ajax library plug bit easier", "d": "9/2014"}, {"body": "reason ca nt use pass context provided ajax library naganowl provide realworld example would useful", "d": "10/2014"}, {"body": "jashkenas allowing modelcollection specified ajax option callbacks promise based callbacks maintain consistent function body instance client would nt able display property model options error callback could modified pull model first argument seems elegant callbacks able reference rather everywhere examples could rendering parts view success model request without relying events flexibility course said collections well ultimately fact backbone dependency jquery calls method methods call makes think also respect properties options provided", "d": "10/2014"}, {"body": "naganowl face similar issue propose forward original options sent crud methods backbonesync would help use case well see", "d": "10/2014"}, {"body": "ramseydsilva along lines ultimately issue wants keep logic success error callbacks handlers called proper context rather rewrite overridden success handler", "d": "10/2014"}, {"body": "try asking stackoverflow", "d": "8/2014"}, {"body": "browser using key lines around", "d": "8/2014"}, {"body": "using firefox archlinux emulatehttp false yes already found lines tried find bug nt seen nothing wrong", "d": "8/2014"}, {"body": "make small test jsfiddle show problem never case sending sends get request instead feel comfortable debugger try track", "d": "8/2014"}, {"body": "well something like shame never used jsfiddle ca nt get work backbone undefined error console despite attached backbonemin underscoremin jquery regards", "d": "8/2014"}, {"body": "recall correctly backboneorg downloads point github servers nt allow hotlinking updated one keep mind backbone call sync post model id", "d": "8/2014"}, {"body": "try one", "d": "8/2014"}, {"body": "yep forgot id attr fiddle case models fetched server already id attr thought mean create instead update id firstly found bug added debug consolelog modelisnew function expected case isnew false bug repeats fiddle see patch query nt want waste time proofs bug pls give time collect information unexpected behaviour report nearest future regards answer", "d": "8/2014"}, {"body": "closing find genuine bug backbone feel free post reopen", "d": "8/2014"}, {"body": "option specifying first part url pattern match let say route mydomaincomprojectsmyapphome could set projectsmyapp use home route instead writing whole projectsmyapphome line key router saying like direct home route pass keys", "d": "8/2014"}, {"body": "wrote exactly documentation says point nt work least imagine wan na entirely path unique root follow example", "d": "8/2014"}, {"body": "domain pass home root paths absolute domain would help short example jsfiddle show mean example first example empty string second example space", "d": "8/2014"}, {"body": "difference spacing mistake cuz wrote code default backbone consider root mydomaincom wan na change default root home mydomaincomhome wrong", "d": "8/2014"}, {"body": "really ca nt help without working testable example wan na try mailing list irc channel stackoverflow kinds questions github issues really problems framework continuing creates noise everyone following repo", "d": "8/2014"}, {"body": "nt real problem apologies perhaps proper documentation would nice one simple problem change default root home nobody answered documentation makes easier taking fact work thanks anyway", "d": "8/2014"}, {"body": "term index meaning context model relevant relation collection models collections type interlocking dependency nt exist elsewhere model nt think would great place start find useful definitely add application model class", "d": "8/2014"}, {"body": "fetch returns ajax returns deferred object rely code chain successive events moreover fetch returns completion may unnecessary block code waiting fetch resolve already handle model nt suffice also model fetched server repeatedly fetch keep sync", "d": "10/2014"}, {"body": "also return thing ie deferred object proposed wo nt really solve problem need wait fetch finish instantiating view could", "d": "10/2014"}, {"body": "yep something done app recommend binding render event model", "d": "10/2014"}, {"body": "available code minified version strips comments including header though sure nt consistent underscore backbone better ways keep track thirdparty libraries app either use package manager name files need example", "d": "8/2014"}, {"body": "thanks makes sense thu aug pm adam krebs notifications githubcom wrote available backboneversion code minified version strips comments including header though sure nt consistent underscore backbone better ways keep track thirdparty libraries app either use package manager name files need example reply email directly view github", "d": "8/2014"}, {"body": "please use stackoverflow mailing list irc channel questions github issues maintaining framework", "d": "8/2014"}, {"body": "backbone work every commonlyused browser find one nt working file bug", "d": "8/2014"}, {"body": "", "d": "10/2014"}, {"body": "", "d": "12/2014"}, {"body": "could nt implement function ignore undefined attributes complain nulls empty strings take care save scenario simply pass option like calling check", "d": "2/2015"}, {"body": "makes sense may dupe", "d": "2/2015"}, {"body": "validation supposed holistic resource fields nt exist isolation app means write function handle partial attributes passed", "d": "5/2015"}, {"body": "test case", "d": "8/2014"}, {"body": "perhaps due bug two routes tests fail safari mac", "d": "1/2015"}, {"body": "hi kadishmal test suite passing locally using master branch", "d": "1/2015"}, {"body": "yes forked yesterday ran test master branch", "d": "1/2015"}, {"body": "working correctly safari confused details might help reproduce issue", "d": "1/2015"}, {"body": "ok guide run tests maybe something wrong things better described readme everybody try would also make sure every contributor easily run tests make sure changes pass reason ran tests plan send pr", "d": "1/2015"}, {"body": "tests static load browser", "d": "1/2015"}, {"body": "checked latest code tests green", "d": "1/2015"}, {"body": "donfranke avoid something like trying understand", "d": "8/2014"}, {"body": "updatehash function input validation performed href value fragment value caught app scanner xss vulnerability recommend giving fragment value treatment href value", "d": "8/2014"}, {"body": "possibly using fortify incorrectly flags xss problem see others", "d": "8/2014"}, {"body": "fortify detecting issue following hp thanks", "d": "9/2014"}, {"body": "know check defined mapped function think makes logic define default value route think makes sense defaulting mapped function", "d": "8/2014"}, {"body": "wrong repo", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "backbone generally pretty conservative comes throwing custom errors said seems reasonable", "d": "8/2014"}, {"body": "current message", "d": "8/2014"}, {"body": "js backbonemodelextend initialize function thislistento wow function new", "d": "8/2014"}, {"body": "error stack points directly back line code called invalid object think fine error debugging maybe fine nt right word sufficient far javascript errors go", "d": "8/2014"}, {"body": "might fine sufficient seasoned javascript developer assume entire point backbone many regards make programming javascript fun easier nonseasoned engineers use correctly thinking noble goals might worthwhile consider unseasoned developers comes usability aspects documentation apis even error messages words easy obvious library author might case consumers said library", "d": "8/2014"}, {"body": "absolutely true possible pass wrong type object every single method backbone api thing trying nt work nature programming dynamic language validated type threw error whenever object incorrect type passed public method would effectively statically typed library would probably double download size errors useful development wasted bandwidth production javascript developer level seasoning learn debug problems trying use objects places nt fit particular place nt special example error common one", "d": "8/2014"}, {"body": "seen templatehelpers think want since view concern much model concern cent", "d": "8/2014"}, {"body": "yea look view template helpers used great project using mustache templates revisit fwiw works fairly well could possibly extended allow direct model use even adding attributes", "d": "8/2014"}, {"body": "templatehelpers nt limited helpers sense handlebars helpers used extra data attributes want keep model handles performance issues dealing large datasets", "d": "8/2014"}, {"body": "needed compute virtual attributes models used marionette templates problem right pass references models templates call useful methods directly real attributes virtual attributes huge part nice model", "d": "8/2014"}, {"body": "thank guys looking changing template library mustache handlebars use function ability combination template helpers turn solve underlying issue smile", "d": "8/2014"}, {"body": "still use template helpers concept mustache like marionette define custom renderer template helpers would mixed data passed template", "d": "8/2014"}, {"body": "error callback actual network connection error server error local errors might way trigger nt place try instead", "d": "8/2014"}, {"body": "jashkenas would nt describe local error understand correctly apis give valid response json even kind error particular example looks like django tastypie something similar responses like used however think would make sense case overwrite backbonesync error get json response containing server error might interpreting wrong roundrobin", "d": "8/2014"}, {"body": "nt seem correct api even returning error json object return error code indeed trigger error callback", "d": "8/2014"}, {"body": "jashkenas yeah true sometimes control", "d": "8/2014"}, {"body": "thejameskyle got right", "d": "8/2014"}, {"body": "problem api calls go cdn cdn properly handles status code something fails ca nt set status code anything cdn wo nt properly handle also imagine cases sending status code acceptable eg something happens internal server error code nt explicit enough", "d": "8/2014"}, {"body": "braddunbar got comment change ordering", "d": "8/2014"}, {"body": "hi gildorwang sorry breakage relevant pull could nt think reasons ordering stood", "d": "8/2014"}, {"body": "braddunbar see suggestion modify listeners constructor guess reasonable matter code refactoring would expect lot apps broken release next version thoughts", "d": "8/2014"}, {"body": "yes correct usually see somewhat like following actually said feel break things many users fine changing", "d": "8/2014"}, {"body": "agreed work nt want inline callback anyway fine update code use constructor way looks better indeed", "d": "8/2014"}, {"body": "let leave something fixed constructor", "d": "10/2014"}, {"body": "correct ca nt change html tag name keep dom element preserved instead sticking classname root element put toplevel element inside template listen changes change classname nt want add div", "d": "8/2014"}, {"body": "worth mentioning backboneconditionalclassnames although unless lot probably easier manually render", "d": "8/2014"}, {"body": "thanks check", "d": "8/2014"}, {"body": "reset escape hatch allows easily efficient rendering bulk know need case use", "d": "8/2014"}, {"body": "set without making attribute changes dirty aug jeremy ashkenas notifications githubcom wrote reset escape hatch allows easily efficient rendering bulk know need case use set reply email directly view github", "d": "8/2014"}, {"body": "calling work case way wo nt extend current attributes instead replaced also supports silent option nt want trigger two change events model", "d": "9/2014"}, {"body": "agree method missing also thought using conjunction ran across problem trigger event twice using option calling option also want event fired property gets unset method would take new attributes hash fill hash values old attributes keys present new attribute hash js modelprototypereset function attrs options var key thisattributes key attrs continue attrs key void", "d": "10/2014"}, {"body": "lennerd", "d": "10/2014"}, {"body": "help imagine key current attributes hash model present new hash pass listen event wo nt triggered new value used silent mode js backbonemodelprototypereset function attrs options var key thisattributes thisunset key silent true return thisset attrs options var bar new backbonemodel baron change function model consolelog model bar changed baron change foo function model foo consolelog foo changed foo barset foo test gt model bar changed gt foo changed test barreset gt model bar changed foo resetted change event triggered", "d": "10/2014"}, {"body": "cool get mean probably opt using overriding thisattributes explicitly matter swapping pandaface", "d": "10/2014"}, {"body": "pardon ignorance show still relatively new backbonejs behavior discussed sounds like description says resets model state server looks though events still triggered make model dirty reason approach taken looking reset attributes based server response would imagine situation might occur model changes sideeffect another operation generally sideeffects considered poor programming avoided possible sideeffect avoided perhaps makes sense send update model xyz response flag instead new model attributes trigger whenever see response pardon ignorance exhibiting comment", "d": "10/2014"}, {"body": "kolorahl op wants achieve clear current model attributes pass new json becomes new attributes model manner nt really want hit backend already json", "d": "5/2015"}, {"body": "somehow agree clear set method think one functionality needs considered something like backbonecollection reset", "d": "5/2015"}, {"body": "reason needed world changing backbone assumes model fetch xhr primary method loading data server lot stuff using websockets data gets pushed client redundant call fetch need decent way sideload data still get event hook trigger", "d": "5/2015"}, {"body": "nt using", "d": "5/2015"}, {"body": "jridgewell set make attributes dirty let try using set see happens actual outcome desired outcome set fine state changed outofsync server model reset needed way mark state synchronize w server", "d": "5/2015"}, {"body": "ended writing different monkey patch feature allow sideloading data server calling sync event afterwards param attributes param options backbonemodelprototypesyncset function attributes options var attrs attributes optionsparse attrs thisparse attrs options thisset attrs options thischanged thistrigger sync attributes options return probably needs unset missing items also sure model set attributes", "d": "5/2015"}, {"body": "lennerd pointed calling followed good option fires two events use call get change events attributes unset intuitive think could really benefit equivalent method find trying use time always disappointed", "d": "8/2015"}, {"body": "went ahead created little extension add working method backbonemodel backbonemodelreset", "d": "8/2015"}, {"body": "agree would useful natively needed reset attributes without mangling id attribute clear gist", "d": "9/2015"}, {"body": "thesmart model set unset missing attributes think model reset necessary requirement give reason closing issue like know closed backbone models deliberately primitive unopinionated however lack model reset expresses opinion models used philosophically backbone attempt discover minimal set datastructuring models collections user interface views urls primitives generally useful building web applications javascript", "d": "7/2016"}, {"body": "far tell backbone data model incompatible rest way safely model sever state client model constructed constructing new model way get fresh state without reset tuesday july pgifford notifications githubcom wrote thesmart model set unset missing attributes think model reset necessary requirement give reason closing issue id like know closed backbone models deliberately primitive unopinionated however lack model reset expresses opinion models used philosophically backbone attempt discover minimal set datastructuring models collections user interface views urls primitives generally useful building web applications javascript receiving mentioned reply email directly view github mute thread", "d": "7/2016"}, {"body": "needed model went ahead made spirit backbone use personal extension backbone better simple followed merges defaults back model letting passed attributes override like initialization clears model attributes sets default attributes param object attributes overwrite defaults param object options pass set call return backbonemodel object chain function calls reset function attributes options options extend reset true options private method help wrap reset custom behavior child classes param object attributes overwrite defaults param object options pass set call reset function attrs options thisclear silent true set attrs options triggers change events addition custom event could easily customized trigger event think change events always trigger resetting model", "d": "1/2017"}, {"body": "see also", "d": "1/2017"}, {"body": "tweaked solution lennerd little bit", "d": "8/2017"}, {"body": "two options create method override save directly quite common enough use case need add backbone core", "d": "7/2014"}, {"body": "got thank", "d": "8/2014"}, {"body": "hey tomascasas right potential confusing find syntax pretty ugly think note docs passing first argument collection model constructors create instance options passed might helpful want open pull", "d": "7/2014"}, {"body": "happy point right repo procedure ie branching pr", "d": "7/2014"}, {"body": "documentation lives repo indexhtml fork account create branch master make changes push branch back repo open pr master", "d": "7/2014"}, {"body": "hopefully pr already let know ok also wanted note warnning applies cases could handled checking array first param could considered", "d": "7/2014"}, {"body": "nope would nt fly avoid confusion need model objects pass null first argument nt need", "d": "8/2014"}, {"body": "mind using jsfiddle template show mean looks like created correctly", "d": "7/2014"}, {"body": "thanks nt think point validating model certain combinations properties going valid invalid together state validating single value also done easily setter", "d": "7/2014"}, {"body": "using application startup function init options", "d": "7/2014"}, {"body": "looks similar code nt execute method", "d": "7/2014"}, {"body": "emulatehttp option causing backbone code override jquery beforesend sure intended behavior", "d": "8/2014"}, {"body": "khodorammar think emulatehttp option override jquery beforesend anyboby could comment", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "let tag em close em", "d": "10/2014"}, {"body": "always pass sort false option add call using type loop exit loop call sort collection", "d": "7/2014"}, {"body": "worth adapting comparators something like work case", "d": "7/2014"}, {"body": "say updating sortedindex way important comparators native way js uses describe sorting makes sense support libraries like underscore", "d": "7/2014"}, {"body": "considered developing binary search approach suggested part pull request issue however decided probably common large number items added one time especially initial load app opposed separately case adding u items finally n item list would take n lg n binary insertion method would take u n reckon would usually higher least noticable higher could try estimate approach would faster change implementation fly would make code complicated increase file size", "d": "8/2014"}, {"body": "know adding models stops use manually sort finished", "d": "8/2014"}, {"body": "trying maintain dependent collections complete set models subset b filtered function x kept synchronized using addremoveetc events b since singleadd events limited adding one model time currently hardcoded sorting insertion sorting much faster previous method fine still nt heard convincing arguments singleinsertion made slow order optimize multiinsertions ca nt easily tell difference two cases", "d": "8/2014"}, {"body": "figured test see kind performance boost one would get using calling done appears actually slow things tested use case dts outlined", "d": "8/2014"}, {"body": "thejameskyle awesome test tweaked bit even slower nt sort collections end", "d": "8/2014"}, {"body": "also nt know benchmark computer opts per second results suspect take look according test backbone sort implementation way faster native array sort makes sense backbonecollection uses either native javascript array sort underscore sortby method behind scenes sortby ends using arraysort built javascript", "d": "8/2014"}, {"body": "suspect jabberfest native tests backbone sort addition collection extra native sort ever growing array whereas ones backbone sort", "d": "8/2014"}, {"body": "megawac collectiona plain javascript array collectionb backbone collection confused results showed sorting backbone collection significantly faster sorting javascript array sorry confusion collectiona really named appropriately", "d": "8/2014"}, {"body": "ah nevermind misread tests differences backbone collection length whereas native array grow tests afaik calls benchmarkteardown tests fixed show seem want see", "d": "8/2014"}, {"body": "dts issue maintaining filtered subcollection based first collection adding models one time subcollection crushing performance subcollection sorted collection modified backbone collection send adds event add events pass array models added way subcollection receive new models one event bulk add one sort thing removes mostly consistency", "d": "9/2014"}, {"body": "utilitylib improve performance optimize code backbone code running mobile", "d": "5/2015"}, {"body": "yes adding items one time keeping list sorted going fundamentally slower case roll additions single addition operation would trigger one sort suggest finding way correct way deal issue one reasons exists", "d": "5/2015"}, {"body": "jashkenas possible kidplug suggests add new event modifying monkeypatching backbone support seem like fantastic solution either also involves modifying backbone internals seen way without bungling innards backbone raised issue nt seem compelling reason preventing correctlocation insertion item mergesort basically except sortedindex method nt accept comparators", "d": "5/2015"}, {"body": "thanks ur suggestions", "d": "5/2015"}, {"body": "sorry late response would nt call optimization code style cleanup tend oneliner statements resulting line small less characters onelinered particular statement argue harder read line personal preference think fine asis", "d": "10/2014"}, {"body": "good catch thanks", "d": "7/2014"}, {"body": "supposed get highlighted individually instead get highlighted seems work fine one thing noticed creating model like actually setting attributes actually setting properties model ie returns undefined returns change events may firing initially want set property contain values want set default actually happening creating menu items passing raw objects collection documentready handler setting property still undefined please future use stackoverflow mailing list irc channel questions like github issues developing framework", "d": "7/2014"}, {"body": "code meant allow highlight one item time click item highlight items unhighlight switch backbone version see intended result still think bug", "d": "7/2014"}, {"body": "reread docs retrieve hash model attributes changed since last none check comes set models false invocation naturally check return true particular model nt happened yet might want change logic either set collection models false set kind active model prop collection avoid looks like interpreting changed since last changed since model called would doc update help clarify things", "d": "7/2014"}, {"body": "think doc update would clarify things still curious logic works later versions", "d": "7/2014"}, {"body": "clue work version changed may hold answer clue start computechanges work outward", "d": "7/2014"}, {"body": "tested every version work guessing something broke investigate suggest", "d": "7/2014"}, {"body": "hi funkedgeek argument present remind folks argument present usable see context", "d": "7/2014"}, {"body": "anything wrong overriding fact probably best way look line backbonesync object pass advanced get sent instead calling jsonstringify model attributes try plugin pretty straightforward support userland current state things", "d": "7/2014"}, {"body": "think missed point calling attrs immediately later pass get model overriding even nt fix basically saying need transform keys serverclient never utilize function furthermore handle case want conditionally send complete representation model partial pass object add argument getting ugly reason pass", "d": "7/2014"}, {"body": "little confused problem want able pass snakecased attributes store camelcased server using keep attributes client camelcased snakecased whichever want switch sending server would model ever need get set using something nt going store locally saying transmogrifying attributes client server usually bad idea dead set going override methods get work", "d": "7/2014"}, {"body": "want model use camel cased attributes convert snake case sending server want able complete representation model via results calling also partials via transforming attributes nt evil ruby server speaks snake javascript client speaks camel trivial transform object two naming cases big deal fact way written seems like backbone made support cases perhaps oversight unless nt tell one offending line code", "d": "7/2014"}, {"body": "ok see line always sets pass would like backbone maybe check existence setting passedin way overridden could set snakecase first without affecting set model diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs wraperror options method patch optionsattrs attrs method patch amp amp optionsattrs optionsattrs attrs xhr thissync method options", "d": "7/2014"}, {"body": "right yeah seems like good solution tad inconsistent api standpoint since still unable call understand basically proxy guess also makes sense would responsibility perform lines call essentially recreating would done normal circumstances", "d": "7/2014"}, {"body": "overridden method would monkeying yes would like nt need call override part", "d": "7/2014"}, {"body": "ahh see course sending complete representation override return work perfect thanks", "d": "7/2014"}, {"body": "closing favor", "d": "7/2014"}, {"body": "coming exciting new features", "d": "7/2014"}, {"body": "would love take pull nt already worked hey buddy go would make awesome pull request", "d": "7/2014"}, {"body": "good luck awesome", "d": "7/2014"}, {"body": "let know need extra hand", "d": "7/2014"}, {"body": "thanks support large enough delay replies started another project pushing queue hopefully redesigning wwwsheppardafmil wo nt take long though", "d": "7/2014"}, {"body": "would awesome swamped work right love take crack help couple months", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "longer expected back priority list looks like someone else ends taking interest dives post everyone knows", "d": "8/2014"}, {"body": "hope see oo backbone soon", "d": "8/2014"}, {"body": "way started tonight hopefully continuing throughout week minimal changes far proofofconcepts nothing working yet either still passes tests unfortunately tests starting show reliance things similar variablesmethods necessary make long process force conditionalities would like alias everything kind thing lol backwards compatible say already standard feel free critic see fit update fork something substantial enough pull keep mind still learning full codebase lowlevel job falling asleep probably deleted useful code accident always open input thanks", "d": "9/2014"}, {"body": "hi proof concept tried implement objectobserve first changed backbone build change object objectobserve callback extracted observe function iterates changes triggers appropriate change events finally registered objectobserve method called used previous observe function callback three implemented dedicated commits see browser without objectobserve test suite green everything seems ok browser objectobserve got one test failed try set object equal different instance objectobserve sees change triggers change event nt know fix efficiently without checking object equality suggestions think implementation thanks", "d": "11/2014"}, {"body": "hi project try implement objectobserve backbone model project modify event asynchronous separate via objectobserve feature project also support objectprototypewatch performance well use benchmark test performance least double growth use objectobserve chrome gt nt growth node gt unittest migrated project backbone change event asynchronous advises thanks jone casper", "d": "12/2014"}, {"body": "thread lying dead long time identifiable area start working upon", "d": "1/2015"}, {"body": "right pretty dead let close look forward pull request whenever thing appears", "d": "2/2015"}, {"body": "one thing discussed anyone starts implementing location model properties see three options models attributes stay observer proxies calls model results would unsymmetrical api properties set gotten b model properties set directly model object changing location attributes potentially introduce chaos anyone might relying c adding observer directly would allow symmetrical api seems rather counter intuitive call thoughts jashkenas elegant way move properties directly model whilst affecting internal currently exists", "d": "3/2015"}, {"body": "probably elegant migrate work towards ideal api compromised one try putting attributes directly model object see feels", "d": "3/2015"}, {"body": "try putting attributes directly model object see feels every serverside framework ever used places attributes directly model attribute specific getters setters breaking change good one", "d": "3/2015"}, {"body": "like thanks feedback attributes originally used understand need using getterssetters bb knows trigger events data directly model know internal properties say vs returned called", "d": "3/2015"}, {"body": "unless misunderstanding proposal strikes javascript nt provide facilities languages would help avoid propertymethod naming conflicts would likely arise putting attributes directly model object", "d": "3/2015"}, {"body": "javascript nt provide facilities languages would help avoid propertymethod naming conflicts ruby rails successfully done attributes originally used think easy bookkeeping think passed etc", "d": "3/2015"}, {"body": "think misunderstanding suggestion ruby definitely mind object method named instance variable named javascript object ca nt method named property named without conflict afaik totally date latest js improvementsproposals", "d": "3/2015"}, {"body": "lukeasrodgers would seem say la php jridgewell quesiton mostly rhetorical obvious question deal moving forward many interesting ideas worth exploring although viable time due browser support example whilst providing much far performance improvements using proxy method would allow minimal changes current backbone leaving stuff intact time proxy support limited ff partly imlemented chrome behind flag although development seems rather stagnantlow priority think greater goal though minimal amount boilerplate around native objects utilize native features instead implementing backbone point discussion figure direction project wants move end might room minimize lot bb codecomplexity along objects helper properties etc objectobserve nativly returns much data bb works hard keep track like argument make event triggering simpler returns add update delete think would elminate need due async nature might also become redundant making helper properties almost totally redundant black sheep list edit lukeasrodgers would resolve issue attribute conflicts case bb whittled model simple object w helpers prototype collections simple array objects helpers greater picture due async triggering events lead waaaaay faster event triggering view rerendering also greater complexity entire client side becoming one huge async app lets throw promises mix", "d": "3/2015"}, {"body": "think misunderstanding suggestion ruby definitely mind object method named foo instance variable named foo sorry mean methods always getters setters property ie rails really setter called ignore specialized getters setters perform simple case trigger specialized properties setters question deal moving forward way see working keeping list still around say knows rendering pass pass model gives access", "d": "3/2015"}, {"body": "see point jridgewell always potential conflicts thats js works bomb take extreme steps protect user forcing getters setters stopping internal property overwritten recede native approach leave problem conflicts user discretion", "d": "3/2015"}, {"body": "take extreme steps protect user forcing getters setters stopping internal property overwritten nt lead us back think problem beginning seem obvious really excited thinking possibilities", "d": "3/2015"}, {"body": "think problem beginning agree go back basics set attributes directly object", "d": "3/2015"}, {"body": "yup", "d": "3/2015"}, {"body": "great give thought", "d": "3/2015"}, {"body": "object observe really interesting update js platform seems simple clean way responding events minimal fuss code place hope able share soon mean time hoping gather feedback might feelreact say backbone remove ability silence events ie instead triggering event every single change assuming reaction negative would react manually disable events instead passing inline example might look like thanks", "d": "4/2015"}, {"body": "still use setters work advantage objectobserve", "d": "4/2015"}, {"body": "key word must fine grained control event dispatching oo might right choice hence question dose project like backbone fine grained event transmission control", "d": "4/2015"}, {"body": "would nt lose sleep able pass silent true always felt like dirty option wed apr pm moshe brevda notifications githubcom wrote key word must fine grained control event dispatching oo might right choice hence question dose project like backbone fine grained event transmission control reply email directly view github", "d": "4/2015"}, {"body": "dirty pretty damn important", "d": "4/2015"}, {"body": "filipmares able silence event would results hell lot events fired see source constructaddfetch name dgbeck expound would bad thing", "d": "4/2015"}, {"body": "seems advantage oo rather going setters intermediary object otherwise point love convinced adding objectobserve backbone answer either great deal redundancy innards backbone oo nt think actually need reconcile fine live separate approaches similar problems regardless experience people seem moving away observer pattern backbone angular oo promote favor immutability virtual dom model react days much bookkeeping", "d": "4/2015"}, {"body": "hard nail exact circumstance necessary confident unfortunate contour reality requires available might convincing argument related circular reactions events remember discussion elimination past subsequent agreement need left nt think something brushed table", "d": "4/2015"}, {"body": "dgbeck silent option really leads interesting challenges even pure js paste console challenges overcome silent option might important nt mean absence catastrophic top head offer runonce methods partial solution sure ways first glance correct oo offers truth thats oo fact directly settinggetting properties achieved lines code internal plumbing changes backbone using new proxy object proxy objectwide property agnostic gettersetter used getssets proxied object case way see oo mostly raw speed check naive test responding events backbone vs oo tried adding polyfill firefox got weird results focus chrome iterations oo faster finally dealing performance especially dom performance believe elephant room virtualdomreactjs expand another comment one point correct wrong nt react state changes need triggered somehow also reactjs nt seem much place far data handlingmanipulation leaves desire backboneesque library act transient data storemanipulationpersistence layer triggering events data changes reactjs whatever update said events tl dr reactjs view still need deal actual data", "d": "4/2015"}, {"body": "rereading comment realized code example nt clear wasnt suggesting setters needed trying illustrate backbone might look like silent could passed one wanted disable events another way", "d": "4/2015"}, {"body": "mbrevda thanks clarifying interesting discussion seem getting topic bit fault mind move gitter mailing list edit followed", "d": "4/2015"}, {"body": "case anyone still hopeful seems officially happening objectobserve removed", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "hi bichotll believe need escape inner brackets slashes", "d": "7/2014"}, {"body": "great thanks", "d": "7/2014"}, {"body": "scope backbone backbone dutifully accepts whatever jquery tells statusfailure jquery success", "d": "7/2014"}, {"body": "", "d": "10/2014"}, {"body": "jashkenas chance discussion", "d": "10/2014"}, {"body": "sure need take look first", "d": "10/2014"}, {"body": "requirebin reproduces bug", "d": "10/2014"}, {"body": "whipped failing unit test demonstrates issue", "d": "10/2014"}, {"body": "solution looks right maltewessel jmeas combine failing test fix single pr", "d": "10/2014"}, {"body": "yup update pr", "d": "10/2014"}, {"body": "closed favor", "d": "10/2014"}, {"body": "wondering behavior browser implementation dependent yep keys object hash implementationdependent practice typically stored order added hash safety treat objects unordered collection properties would making routes array safer potentially given reliance current system complaints received would great change make stage used catchall route last key routes hash without problems past", "d": "9/2014"}, {"body": "thanks response", "d": "9/2014"}, {"body": "neat mailing list better avenue types announcements might want post", "d": "7/2014"}, {"body": "thisfooset id thisfooget id attributes unchanged backbone wo nt add attribute model fails either use preference strikes", "d": "7/2014"}, {"body": "think missed issue functions work fine id modeldestroy expecting id otherwise nt send delete rest api server issue noted specific modeldestroy sending delete request server everything else works need reopen issue look closely nt send delete server var foo backbonemodelextend urlroot foo idattribute id var editfoo backboneviewextend el page events click delete deletefoo lt lt gt gt deletefoo function ev thisfoodestroy success function foo routernavigate trigger true return false send delete server var foo backbonemodelextend urlroot foo idattribute id var editfoo backboneviewextend el page events click delete deletefoo lt lt gt gt deletefoo function ev set id field destroy reason expecting id vs id even though model decl set idattribute id thisfooset id thisfooget id thisfoodestroy success function foo routernavigate trigger true return false", "d": "7/2014"}, {"body": "really question stackoverflow irc channel mailing list try luck github issues feature requests problems framework think find issue line property id attribute model must set create url correctly set property backbone use determine model id", "d": "7/2014"}, {"body": "point backbone still using id id destroy method expecting id set nt issue backbone btw using mongodb backend mon jul pm adam krebs notifications githubcom wrote really question stackoverflow irc channel mailing list try luck github issues feature requests problems framework think find issue line id property id attribute model must set create url correctly set idattribute property backbone use determine model id reply email directly view github eom", "d": "7/2014"}, {"body": "amintora problem still occur try using latest master version backbone", "d": "7/2014"}, {"body": "try hours mon jul pm jeremy ashkenas notifications githubcom wrote amintora problem still occur try using latest master version backbone reply email directly view github eom", "d": "7/2014"}, {"body": "ok issue master version", "d": "7/2014"}, {"body": "create small jsfiddle reproduce issue", "d": "7/2014"}, {"body": "adam looks like right error code issue backbone tue jul pm adam krebs notifications githubcom wrote create small jsfiddle reproduce issue reply email directly view github eom", "d": "7/2014"}, {"body": "cool glad hear worked relationship properties attributes models get bit murky around js var mongomodel backbonemodelextend idattribute id urlroot widgets var new mongomodel id var b new mongomodel id consolelog aid aget id aget id undefined undefined consolelog bid bget id bget id undefined consolelog aurl widgets consolelog burl", "d": "7/2014"}, {"body": "hi sharmamanish understand correctly concerned order handler route handler called source appears hash set router handler called expected would mind providing working example code reproduces issue jsfiddlejsbinetc", "d": "7/2014"}, {"body": "issue tracker feature suggestions problems framework try mailing list stackoverflow", "d": "7/2014"}, {"body": "lodash useful nonstandard jdalton dedicated good amount work making true dropin underscore work minimal fuss alternatively way dynamically inject backbone value way backbone injected pattern works well jquery used places throughout code lazilyassigning variable useful underscore hand used times place would muddy code great needs eagerly required backbone work correctly feel free keep fork keeping date trivial", "d": "7/2014"}, {"body": "forking needed lodash supports aliased underscore fact many projects like yeomangeneratorbackbone use lodash instead underscore default alias backbone amd loader example using requirejs aliases another example using lodashamd build config try moderncompat build lodash first problems always drop back lodashunderscore build", "d": "7/2014"}, {"body": "using backdash really like works well browserify aliasing modules nt quite easy require", "d": "7/2014"}, {"body": "browserify also aliasify allows aliasing", "d": "7/2014"}, {"body": "yep shimming path great way go browserify webpack support aliasing", "d": "7/2014"}, {"body": "thanks jdalton component package management nt support aliasing though afaict maintaining fork internal repo named underscore lodash underneath wanted move formal approach thanks", "d": "7/2014"}, {"body": "question issue framework try stackoverflow mailing list irc channel check backboneattributes adding setters change events collection", "d": "7/2014"}, {"body": "closing duplicate others", "d": "7/2014"}, {"body": "nt add event example backbonejs core debounce advice desired due async nature", "d": "7/2014"}, {"body": "see got new argument feel free introduce", "d": "7/2014"}, {"body": "hi ramoncaldeira matching styles may work think generally useful style first match backbone stick said easily replace matching logic overriding history loadurl", "d": "7/2014"}, {"body": "yep right", "d": "7/2014"}, {"body": "well really method need know pull requests changing docs definitely welcome backbone bit unique best documentation source set somewhere code follow rabbit hole", "d": "6/2014"}, {"body": "furthermore types public functions like backbonehistorygetfragment nt documented methods public nt include leading underscore part public api per se maybe renamed certain worth effort confusion", "d": "6/2014"}, {"body": "hi dimalev sentence could accurately written callback list particular event altered trigger reason altering list iterating cause handlers skipped hope helps smiley", "d": "6/2014"}, {"body": "sentence could accurately written callback list particular event altered trigger yeah test name says smile reason altering list iterating cause handlers skipped talking iteration like right trick allows maintaining events allowing remove events processing without skipping notremoved ones wondering implement events maintenance trigger occurs see implementation suggesting another implementation ask behaviour intetional picked easyenough solution removeevent functionality would preffereble", "d": "6/2014"}, {"body": "yeah test name says smile sorry emphasized added particular event ask behaviour intetional yes intentional handlers modified called", "d": "6/2014"}, {"body": "yes intentional handlers modified trigger called ok reasons preffer approach example one event handler removes another still called kinda confused sure situation kinda wrong design fact removed event anyway triggered makes think happen", "d": "6/2014"}, {"body": "believe decided approach simplest also case many libraries dom event listeners jquery event listeners node event emitters etc", "d": "6/2014"}, {"body": "braddunbar correct wrong believe jquery solution problem dom custom events", "d": "8/2014"}, {"body": "yea stopimmediatepropagation hard draw parallels since backbone events bubbled like jquerydom events", "d": "8/2014"}, {"body": "true closer pattern jquery request would stopimmediatepropogation similar functionality would certainly useful nested views sharing model", "d": "8/2014"}, {"body": "seems like mention backbonecourier order courier mesh backbone events jquery events provides structured approach event flow issue would come courier model since listener control event received", "d": "8/2014"}, {"body": "thanks thanks mit license exotic one one quickly become familiar looking open source projects", "d": "6/2014"}, {"body": "merge two models identifiers try adding definition", "d": "6/2014"}, {"body": "caseywebdev thanks lot mate quick reply", "d": "6/2014"}, {"body": "hi remove call see several tests failing reason present handle nested calls event hope clears", "d": "6/2014"}, {"body": "hi braddunbar got thank much", "d": "6/2014"}, {"body": "possible dupe others make small reproducible jsfiddle showing bug issue models nt property set yet correct", "d": "6/2014"}, {"body": "yeah looked nt think issue right models properties set initially fetched server first time future requests tried one model id get issue took look source part nt make sense checked set nt seem right since always return true", "d": "6/2014"}, {"body": "check handle case mind making jsfiddle see mean thing could think might issue trying set response json field nested causing existing call fail", "d": "6/2014"}, {"body": "nope id nested example response fiddle demonstrating using models attributes backbone looks like got introduced works fine logic around pretty hard follow imo", "d": "6/2014"}, {"body": "modelid checked modelmap set nt seem right since modelmap modelid always return true far remember think prevent duplicate models id getting set twice ca nt say fully follow logic either agree undesirable although probably destructive idempotent collection create fix failing test case keeps others check happy merge", "d": "6/2014"}, {"body": "looks like suppose maintain order collections get set ordering set collection fetch server get going new order hence event fired seems like problem ordering occurs even ordering models set equal order existing models fetch get still get event looking code carefully looks like always triggered false user defined put simply nt choose ordering collection reordered every time even refuse weird seems bug nt make sense true true know called true true true way event false however contradicts getting rid fixes problem besides nt think setting collection based order models even considered anyway sorting arrange set things based one attributes purpose hand simply setting resetting models based position collection set think fix makes lot sense caseywebdev would love get thoughts since made additions", "d": "6/2014"}, {"body": "think problem using mix cid id line cid added line id used instead use id", "d": "9/2014"}, {"body": "passing order would think fire order changed think real problem order changing still fires nt agree problem firing instead removing maybe something like would better would fire changes fire nothing changed", "d": "11/2014"}, {"body": "fixed", "d": "11/2014"}, {"body": "would nt better check custom url method seems like passing oneoff parse function would get ugly fast mention really edgecase", "d": "6/2014"}, {"body": "hi nadoedalo right options get passed use need custom function", "d": "6/2014"}, {"body": "looks like bug thanks reporting", "d": "6/2014"}, {"body": "hi bruth option part public api present support like unset many attributes pass value", "d": "6/2014"}, {"body": "ended reason used flag unset method support taking object whose keys unset sure deliberate decision certainly would convenient supported make change suggested jun pm brad dunbar notifications githubcom wrote hi bruth unset option part public api present support unset like unset many attributes pass undefined value modelset foo undefined bar undefined reply email directly view github", "d": "6/2014"}, {"body": "nt quite follow mean option delete keys", "d": "6/2014"}, {"body": "passing object unset side effect visible value position may worth putting type check prevent otherwise silent failure unsetting keys suggesting ensure set expliclty true", "d": "6/2014"}, {"body": "simply would like unset keys object regardless values", "d": "6/2014"}, {"body": "would better", "d": "10/2014"}, {"body": "hi juzerali backbone nt support directly jquery docs options success error callbacks jquery request options backbone directly support options give passed via", "d": "6/2014"}, {"body": "yeah thought options proxy jquery ajax looking save destroy methods sync thanks jun pm brad dunbar notifications githubcom wrote closed reply email directly view github", "d": "6/2014"}, {"body": "addressed", "d": "6/2014"}, {"body": "hi latentflip check existence usually stub tests testing way much easier way used allowing calls attempting check url assigning empty function prevent calls falling messing test environment hope clears smiley", "d": "6/2014"}, {"body": "hey braddunbar hmm sure see one test nt actually failing longer history stubbed null three others still three tests fail change tests history nt stubbed null means using windowhistory environmentjs pushstate function albeit empty added never windowhistorypushstate issue someone wants support never call wo nt work", "d": "6/2014"}, {"body": "", "d": "6/2014"}, {"body": "hi thanks please see answer underscore repo", "d": "6/2014"}, {"body": "", "d": "6/2014"}, {"body": "please search opening issues relevant ones", "d": "6/2014"}, {"body": "would nt use forum seems general problem nope place bug reports feature discussions troubleshooting help good luck", "d": "6/2014"}, {"body": "sorry thinking would something would general enough warrant included feature discussions apologize noise garey mills fri jun jeremy ashkenas notifications githubcom wrote would nt use forum seems general problem nope place bug reports feature discussions troubleshooting help good luck reply email directly view github generate messages directories read files opened rather silent", "d": "6/2014"}, {"body": "oh big super star underscorejs really really good work", "d": "6/2014"}, {"body": "using multiple routers per page recommended maybe even supported someone correct wrong provide failing test case glad take look", "d": "6/2014"}, {"body": "believe docs quite right replace true calls windowhistoryreplacestate method replaces current state one called nt want page history would use replace true navigating way page navigating", "d": "7/2015"}, {"body": "confirm behaviour pajtai mentions could clarified docs", "d": "1/2016"}, {"body": "hi egpierro trouble following exactly want would mind posting example said usually recommend using one router calling modules want break routes", "d": "6/2014"}, {"body": "like said would nt recommend using multiple router instances time want split routing modules recommend large routers use pattern favorite bundler js routersfoojs moduleexports foo function routersbarjs moduleexports bar function routersrouterjs moduleexports backbonerouterextend routes extend baz function require foo require bar gon na close got failing test case please post happy take look", "d": "6/2014"}, {"body": "hi hwoarangzk question better suited stackoverflow tag backbonejs irc channel", "d": "6/2014"}, {"body": "yep thanks stavarotti try one helpful resources sure find good articles google", "d": "6/2014"}, {"body": "sorry putting questions tried visit stackoverflow due network policy ca nt sign ask question", "d": "6/2014"}, {"body": "ah try mailing list irc channel might luck", "d": "6/2014"}, {"body": "rarely familiar said mailing list irc channel tt could please give links lead communities asking answering questions backbone thank much", "d": "6/2014"}, {"body": "documentcloud freenodenet irc", "d": "6/2014"}, {"body": "", "d": "6/2014"}, {"body": "ah recall journalist friends china proxies tunneling software get around great firewall may blocked nt know specifics unfortunately feel free reach email mine profile try help", "d": "6/2014"}, {"body": "", "d": "6/2014"}, {"body": "hi hwoarangzk certainly tools combining templates scripts fairly easy node environment said sort question probably better suited stack overflow irc channel freenode github issues questions regarding development backbone", "d": "6/2014"}, {"body": "sorry putting question due network policy ca nt sign stack overflow sorry", "d": "6/2014"}, {"body": "case use new backbonemodel save success donecallback error errorcallback actually use ajax new backbonemodel url success donecallback error errorcallback type post pass callback ajax options success error relationship deferred method ajax return jqxhr object implement promise interface success error complete jqxhr deprecated names make confusion different things", "d": "6/2014"}, {"body": "want use deffered method use like way new backbonemodel save done fail always new backbonemodel save success error complete however free pass success error callback options", "d": "6/2014"}, {"body": "yep search issues find background", "d": "6/2014"}, {"body": "hi lucozhao version backbone using", "d": "6/2014"}, {"body": "added test case addresses case appears pass please point issues see thanks posting either way", "d": "6/2014"}, {"body": "hi braddunbar thanks much swift response using latest version see error travis ci build could complete due error info test case page problem see debug params got avalue amp backurl instead original avalue amp backurl string please advise", "d": "6/2014"}, {"body": "whoops looks like running tests node well unnecessary using node run phantomjs amended tests passing browser seeing incorrect parameters post sample code", "d": "6/2014"}, {"body": "using chrome sample codes probably usage issue routes module querystring viewfromquerystring module querystring viewfromquerystring module viewfactory module page querystring viewfrompagequerystring module page querystring viewfrompagequerystring module page viewfactory module page id querystring viewfactory module page id querystring viewfactory module page id viewfactory filter viewfactory viewfromquerystring function module querystring thisviewfactory module null null querystring second function passed querystring backbone already decoded", "d": "6/2014"}, {"body": "ah yes nt need nt include search parameters route definition anymore words following fragment snippet would log", "d": "6/2014"}, {"body": "hi braddunbar thank much help changed route definition seems work possible explain bit root cause routes module viewfromquerystring module page viewfrompagequerystring module page id viewfactory filter viewfactory", "d": "6/2014"}, {"body": "sure since version backbone supported search params fragment without extra splat param means old style params matching removed old params still work change old semantics including decoding", "d": "6/2014"}, {"body": "awesome thanks info", "d": "6/2014"}, {"body": "need app something backbone especially something drastic omitting attributes", "d": "6/2014"}, {"body": "suggestion nt need mentioned argument present never used code regarding issue found ticket", "d": "6/2014"}, {"body": "argument present primarily documentation extending wo nt cause harm regardless", "d": "6/2014"}, {"body": "desirable sure attempted past difficulty fare better would great addition", "d": "6/2014"}, {"body": "let move conversation ticket", "d": "5/2015"}, {"body": "hi thejameskyle case case basis perhaps could exposed however think exposed could change supporting userconfigurable variable much difficult fixed behavior instance think exposed see many tickets regarding want specific variables exposed let consider separately", "d": "6/2014"}, {"body": "braddunbar would router regex discussion", "d": "6/2014"}, {"body": "sure use case customizing", "d": "6/2014"}, {"body": "braddunbar trying create subclass backbonerouter allow subroutes added recursively based parent routers need modify defaults slightly use original regex places way currently possible manually copy paste backbone source ie trying avoid code duplication possible", "d": "6/2014"}, {"body": "trying create subclass backbonerouter allow subroutes added recursively based parent routers gt foo gt foorouter gt id nt quite follow could give example", "d": "6/2014"}, {"body": "nt final api design means general concept js url fragment var approuter marionetterouterextend routes foo foo gt gt foo bar bar foo function return new foorouter var foorouter marionetterouterextend routes index new create id show gt gt foo idedit edit design would allow many levels routers one wants routers routers routers transitioning routes within subrouter parent routers method called subroute event triggered part larger exploration multiapplication structure marionette future", "d": "6/2014"}, {"body": "see mean sure exposing regular expressions would help looks like need rather different implementation", "d": "6/2014"}, {"body": "braddunbar overwriting parts history possibility guess see separate unrelated issue regexes key parsing backbone routes broad aim routes entirely sure exact object end whether overwrite history sure ideas far required copypasting regexes parse routes give another example something experimented supplying developer map parts url alongside named part route route navigate supplying user instead", "d": "6/2014"}, {"body": "braddunbar jmeas yes history also going extended treatment would helpful", "d": "6/2014"}, {"body": "record overwriting history nt necessary things like repository example require copy pasting scoped regexes backbone feels pretty gross putting router prototype would make extending router bit friendly lot less hacky feeling", "d": "10/2014"}, {"body": "working tweaking history router observation made extending history router objects stands stark contrast objects backbone classes provide numerous hooks making changes behavior two classes offer methods properties override modify work even small changes router history require copying pasting large chunks code including inscope regular expressions use never feels good guess would wager major contributing factor far know nobody made router powerful angular uirouter ember router super cool think changes classes made friendlier extend exposing regexp little step direction", "d": "10/2014"}, {"body": "yes change added master yet current release therefore minified version issues see change behavior", "d": "5/2014"}, {"body": "recently inherited codebase using views abstract classes example js var abstractview backboneviewextend initialize function extend selfevents selfevents click element handler var myview abstractviewextend initialize function abstractviewprototypeinitializeapply abstractview events get attached min version dev version", "d": "5/2014"}, {"body": "better set method abstractview js var abstractview backboneviewextend events function return click element handler var myview abstractviewextend events function return extend abstractviewprototypeeventscall looks even nicer coffeescript coffeescript class abstractview extends backboneview events gt click element handler class myview extends abstractview events gt extend super click otherelement handler", "d": "5/2014"}, {"body": "yep example good strategy", "d": "5/2014"}, {"body": "agree solution better way handle attaching events abstract view however think guys missing point dev min version begs question many things different two indeed bug result different behavior based example despite suggested work around", "d": "5/2014"}, {"body": "dev min version minified file updated releases keep commit noise minimum", "d": "5/2014"}, {"body": "assume dev version correct thisdelegateevents removed backboneview constructor", "d": "5/2014"}, {"body": "markwise right already called found redundant call twice sorry breakage need call anyway always add override constructor migrate", "d": "5/2014"}, {"body": "right thanks", "d": "5/2014"}, {"body": "model cid nt attribute clientside id uniquely generated every time model created persisting standard model save prevents expect populated response instead using model id standard practice model id generated server possibly autoincrement database returned client", "d": "5/2014"}, {"body": "unique identifier model instance nothing contents model", "d": "5/2014"}, {"body": "case could probably wrapping beforesend instead patching right", "d": "5/2014"}, {"body": "sound reasonable nt difficult nt really played jqxhr object preferred use workaround", "d": "5/2014"}, {"body": "already wrap option passed suppose overrides version though looks like options stored though ca nt find documentation may part public api", "d": "5/2014"}, {"body": "sounds like jquery thing quote docs note global callback functions set respective global ajax event handler ajaxstop ajaxcomplete ajaxerror ajaxsuccess ajaxsend rather within options object ajaxsetup try see fixes problem", "d": "5/2014"}, {"body": "changing view element generally use setelement change reference", "d": "5/2014"}, {"body": "yep possible original pull included dropped jashkenas think original concept still holds allow chain means accessing advanced underscore methods like", "d": "5/2014"}, {"body": "ok feel free put back include decent tests might useful realworld models please", "d": "5/2014"}, {"body": "real world nt need test chain works access underscore methods use underscore methods whitelistblacklist params keep url model attributes sync ok feel free put back include decent tests might useful realworld models please reply email directly view github", "d": "5/2014"}, {"body": "collection parse method model parse method", "d": "5/2014"}, {"body": "model method first case parsing response model otherwise parsing item collection response js parse function response responsed return responsedmetadata return responsemetadata collection method", "d": "5/2014"}, {"body": "hi yethee thanks reply please look response message metadata one attribute still attribute", "d": "5/2014"}, {"body": "see need change method model like js parse function response responsed return responsed return response", "d": "5/2014"}, {"body": "hi yethee thank working fine", "d": "5/2014"}, {"body": "seem inconsistent model event wo nt fire unless model attributes change", "d": "5/2014"}, {"body": "totally agree", "d": "5/2014"}, {"body": "makes sense would even cooler every time collection reordered model fired model sort event model new index passed arguments since use case pretty much always going synchronise something else changes total resort might sound heavy events silentsort true could used also recommended strategy would queue debouce resulting updates view worried performance lots fun", "d": "5/2014"}, {"body": "similar issue collectionfetch sort event triggerd even models changed addremove", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "probably better keeping anything simpler data structure creating fullblown modelscollections whatever subset working time probably could get little faster functionality modelscollections provide nt designed super performant many records", "d": "5/2014"}, {"body": "supposed fast possibly make specific section code think needs looking specific patch like suggest feel free suggest see previous tickets said really want get metal javascript stop using external libraries write things hand reusable arrays full strings integers loops", "d": "5/2014"}, {"body": "sure issue resolved sounds like ca nt really resolve easily suggest making small modification version backbone including big note comment top explaining line changed pointing ticket justification hopefully review process reasonable", "d": "5/2014"}, {"body": "hi jashkenas thanks response appear something resolved bbjs broadly speaking party lib seems ff addons support using party libs way solution restructure ff addon code backbone loaded contentscript context mainjs addon context", "d": "5/2014"}, {"body": "revert setting jquery commonjs dependency wrapped trycatch node enviros already automatically import jquery amd pattern apply browserify using backbone browser likely using jquery tell build tool require node gracefully handle case present", "d": "5/2014"}, {"body": "seem reasonable creating small reusable ui components eg parcelify cartero feels weird verbose write stand alone components using jquery replacement edge case unreasonable require extra config optimize would however nice common case worked expected", "d": "5/2014"}, {"body": "sure need set backbone gotcha needs happen use anywhere become hairy wed may david beck notifications githubcomwrote seem reasonable creating small reusable ui components eg parcelify cartero feels weird verbose write require backbone stand alone components require jquery backbone require backbone backbone backbone careful write whatever app done using jquery replacement edge case unreasonable require extra config optimize would however nice common case worked expected reply email directly view github", "d": "5/2014"}, {"body": "also trusting host application set properly needed little widget seem quite right maybe host app even using backbone", "d": "5/2014"}, {"body": "another gotcha scenario multiple copies backbone running around due different dependency version requirements neglecting npm dedupe app sets main one modules may using another", "d": "5/2014"}, {"body": "revert setting jquery commonjs dependency node require server backbone usually nt want require jquery server browserify popular hack nt breaking making inconvenient actual use case node designed favor parasitic use case mean without value judgement connotes", "d": "5/2014"}, {"body": "many many people using commonjs client side whether foreseen spec created fact backbone decidedly client side lib almost certain people using backbone commonjs client side using backbone server side get clean solution one dismissing browserify client side commonjs implementations hack solve issue felt ground nt breaking making inconvenient actual use case node designed favor parasitic use case inconvenience maybe missing something seem like problem inconvenience extra jquery module installed server side use", "d": "5/2014"}, {"body": "interested see goes got bitten trying implement something like recently worse starting thought might backbone compatible way write api think problem using flat relational database structure server believe object database db wide unique id member unique id member group would make sense comes seamlessly synchronising collection server side relational mapping backbone claims approach agnostic generally positive want plug architecture would nice section website common persistence strategies backbone plugin least customisation", "d": "5/2014"}, {"body": "reference try plugin custom app logic first hairy specialcased merge master moment", "d": "5/2014"}, {"body": "think already able implement defining model collection urls pretty easily done backbone similar scheme backbone come railsspecific option box nt think", "d": "5/2014"}, {"body": "great points thanks taking look", "d": "5/2014"}, {"body": "jashkenas nt railsspecific url structures avoid multiple identifiers aka shallow routes common api pattern ie vs", "d": "8/2014"}, {"body": "ah yeah using amd need load via amd still available global loading need", "d": "5/2014"}, {"body": "several components nt use amd rely global reference windowbackbone available even though backbone nt required via amd point otherwise forced load amd modules first least one module requires backbone nonamd modules think whole point attaching window available even using amd throughout application missing something", "d": "5/2014"}, {"body": "yeah unfortunately way amd designed globally accessible required app even via amd whole notion amd asynchronous means ca nt guarantee backbone dependencies jquery underscore set time individual application parts need without using module system amd guys might better solution sat may dominik siebel notifications githubcomwrote several components nt use amd rely global reference windowbackbone available even though backbone nt required via amd point otherwise forced load amd modules first least one module requires backbone nonamd modules think whole point attaching window available even using amd throughout application missing something reply email directly view github", "d": "5/2014"}, {"body": "take look option requirejs", "d": "5/2014"}, {"body": "aware asynchronous nature amd philfreo using requirejs think stick thanks input guys", "d": "5/2014"}, {"body": "far discussion assumed developer full control global environment gets loaded always case case developing modular plugins cmses wordpress wordpress plugin developer may happily use backbone plugin test well deploy fine many wordpress instances eventually administrator wordpress instance decides install particular plugin along plugin happens happily use say requirejs amd loader site would work fine either one plugins soon installed together disaster strike time way avoid problem developer backbone plugin alter backbone integrating remove amd support developer requirejs plugin alter requirejs integrating inject amd api unique namespace rather global namespace prevent either plugin getting kind future collision however stock backbone intended used safely modular cms plugins think issue closed prematurely fixing issue would likely require either separate nonamd version backbone changes amd api conjunction changes backbone able backbone logic ask amd dependencies available via amd attempting load via amd backbone could default accessing global namespace otherwise jquery ui also similar problem already filed ticket", "d": "7/2015"}, {"body": "demonstrated", "d": "7/2015"}, {"body": "jrburke mind weighing far know way determine inside requirejs dependency load merely global context present", "d": "7/2015"}, {"body": "developer control overall environment want nonamd pathway followed construct sort script sequence around backbone html var olddefine define define undefined define olddefine olddefine undefined note attributes script tags used case believe extraordinary measures done umd boilerplate account possible global environment setup would make umd blocks incredibly large likely comprehensive control whole global environment expect developer need defensive coding style anyway know best sorts mitigations like needed used third script tag backbone also wants used amd parts page case developer may need add manual script tags jquery underscore case script block perhaps also similar work addition backbone one jridgewell question return true module specified loading true module part top level dependency chain true bunch defines done without top level done check believe knowing distinction help situation developer things want global backbone immediately also amd parts may also want backbone loaded", "d": "7/2015"}, {"body": "nt jquery exposed global amd module set", "d": "5/2014"}, {"body": "thanks much", "d": "5/2014"}, {"body": "try mailing list stackoverflow irc channel questions github issues maintaining framework", "d": "5/2014"}, {"body": "git hub posting questions", "d": "5/2014"}, {"body": "nope would get hand everyone posted questions try avenues first", "d": "5/2014"}, {"body": "suggest spring restful related post really need figure", "d": "5/2014"}, {"body": "best bet stackoverflow mailing list project", "d": "5/2014"}, {"body": "check merged would handle use case need create artificial attribute function", "d": "5/2014"}, {"body": "setting method results duplicate models calling see jsfiddle looked totally clear solution provides explain", "d": "5/2014"}, {"body": "little workaround js var model backbonemodelextend set model id property nested object parse function response responseid responsenestedid return response var collection backbonecollectionextend model model preparse response data using model parse method parse function response return responsemap thismodelprototypeparse solves duplicate models problem calling option imperfect workaround limitation must instance model factory thing method must reference model instance calls without context model yet created provide context called twice collection every model created could cause performance issues probably possible side effects nt yet thought", "d": "5/2014"}, {"body": "eschwartz example using js var videocollection backbonecollectionextend generateid attrs return attrsidunique var videos new videocollection id unique abc id unique def videosget abc first video videosget def second video", "d": "5/2014"}, {"body": "thanks example see comments", "d": "5/2014"}, {"body": "looks like addressed issue commit master", "d": "5/2014"}, {"body": "master came compare view nt show disappearing", "d": "5/2014"}, {"body": "previous fix issue reverted may want take look alternate solution cover use case might want look well", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "fixed", "d": "5/2015"}, {"body": "hi drmanitoba since last release route callbacks include argument query string seem odd would ever though seems like pass absence query string similar", "d": "5/2014"}, {"body": "ah ha ok perfectly reasonable explanation really confused nt know api change ca nt find mention docs probably looking hard enough feel free close changes going made thanks", "d": "5/2014"}, {"body": "glad could help smiley", "d": "5/2014"}, {"body": "github tickets nt helping debugging application friend", "d": "5/2014"}, {"body": "correct version looking repository current edge version look source still execute two arguments need minify current master wish use", "d": "5/2014"}, {"body": "oh thanks found argument usefull plans keep future versions", "d": "5/2014"}, {"body": "course would something worth adding opinion shoot pull request updated", "d": "5/2014"}, {"body": "right simple originally appreciated", "d": "5/2014"}, {"body": "polymorphic models", "d": "5/2014"}, {"body": "much coffeescript recently suppose lost focus real thing going underneath beauty thanks", "d": "5/2014"}, {"body": "worth wrote short summaryremainder covering topic", "d": "5/2014"}, {"body": "theory backbone help underscore jquery work way back immediate plans otherwise assume stay way backbone nt usually employ bleeding edge tricks rare cases pushstate support history instance includes fallbacks older browsers case via hashchange specific questions advise try mailing list stackoverflow irc channel github issues generally improving framework", "d": "4/2014"}, {"body": "thanks clear answer sorry using wrong channel thought could question label", "d": "4/2014"}, {"body": "worries hope find looking", "d": "4/2014"}, {"body": "hi erikevenson certainly feature shortcut keeps calling super method constructor record calling super method fine reason called view element guaranteed exist called needed create called use source hope clears things smiley", "d": "4/2014"}, {"body": "thanks brad making reasoning clear call order cheers", "d": "4/2014"}, {"body": "beers", "d": "4/2014"}, {"body": "also using model function factory key known factory would nice preparemodel handled undefined return cancelled model creation edit kind patch suffisent", "d": "5/2014"}, {"body": "access creating model via need mess context", "d": "5/2014"}, {"body": "aware access collection way stated original post point behavior obvious documented would assume without read source code defining model function would context function collection class would least open pr attempts clarify documentation", "d": "5/2014"}, {"body": "would least open pr attempts clarify documentation feel free jashkenas decide whether extra documentation appropriate", "d": "5/2014"}, {"body": "would least open pr attempts clarify documentation sure", "d": "5/2014"}, {"body": "good catch get fixed post haste", "d": "4/2014"}, {"body": "fixed cherrypicked ghpages thanks reporting michaelbutler", "d": "4/2014"}, {"body": "whaaaat amazing want turn pull request demonstrating recommended fix", "d": "4/2014"}, {"body": "somewhat inelegant attempt without understanding reasons making local pointer begin hesitant aggressive modifications", "d": "4/2014"}, {"body": "hey ethanzheng would nt really work multiple event handlers single triggered event often case would happen returned true returned false possibly usefulrelevant created extension backbone events method uses promise library resolve result triggered events reject promise chain error thrown rejected promise returned event handlers could event handler assume however event handlers throw would exclusively used otherwise things would break errors caught promise", "d": "4/2014"}, {"body": "tgriesser one handlers return false calling eventtrigger returns false like dom event one event handler calls default action cancel", "d": "4/2014"}, {"body": "jquery method always returns jquery object handler special functionality preventing default event behavior false returned", "d": "4/2014"}, {"body": "hi justinhelmer thanks reporting take look see", "d": "4/2014"}, {"body": "excellent bug report way kudos", "d": "4/2014"}, {"body": "thanks lot guys always responsive issue queue", "d": "4/2014"}, {"body": "fixed thanks great bug report justinhelmer", "d": "4/2014"}, {"body": "hi tsjoberg yes intended behavior sync fire regardless options passed said always check options handler hope helps smiley", "d": "4/2014"}, {"body": "thanks braddunbar realized trigger handy options passed trigger sure maybe docs could bit specific docs make silent true global event stopper thanks", "d": "4/2014"}, {"body": "nt control anything nuget better asking seems", "d": "4/2014"}, {"body": "complement", "d": "4/2014"}, {"body": "sorry nevermind something wrong code apologize", "d": "4/2014"}, {"body": "think solution stackoverflow answer pointing good one would big break change array might ask plugin author add property instance plugin would keep date listening collection events", "d": "4/2014"}, {"body": "opinion relying generally antipattern models nt know anything collections contain much way objects nt generally contain reference containing array best method determining whether model part particular collection", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "brad totally agree using property nt best way accomplish task hand given exist feel like least complete understand change would insignificant break kinds things certainly nt unheard around parts see thisoptions views oh well guess", "d": "4/2014"}, {"body": "could always iterate collections demand need js var model new backbonemodel var new backbonecollection model model true model true var model backbonemodelextend collections function allcollections return filter allcollections function col return colcontains var collections new backbonecollection modelcollections allcollections", "d": "4/2014"}, {"body": "noticed two lines code might affected putting one model multiple collections js destroy function options options options clone options var model var success optionssuccess still glad find events would work thx", "d": "7/2014"}, {"body": "braddunbar removed antipattern issues jiyinyiyong found addressed somehow imo", "d": "10/2014"}, {"body": "russplaysguitar change fairly small piece backbone would rather large breaking change care would need taken", "d": "10/2014"}, {"body": "needed feature well since model allowed collection design code differently lot situations makes sense model multiple collections feature", "d": "10/2014"}, {"body": "use case model gt collection", "d": "1/2016"}, {"body": "might better luck question stackoverflow irc channel mailing list github issues improving framework nt worked chrome apps apis ca nt say sure basically array behind scenes able get away pollyfilling history calling", "d": "4/2014"}, {"body": "sure backbone considers chrome packaged apps one senario use backbone backbone needs care tried disable url find disabled chrome maybe historyjs would also fall look later anyway thanks reply", "d": "4/2014"}, {"body": "maybe router isnt best way manage state chrome app lack url bar lead look state management elsewhere js thankfully backbone tools models collections views still useful context really depends use case", "d": "4/2014"}, {"body": "yeah kind drag guessing justification case internals add works case one easy work around find index model like snippet backbonecollectionview", "d": "4/2014"}, {"body": "unfortunately need index model collection index model bulk array models inserted try illustrate problem let create collection items var mycollection new backbonecollection id id id inserting collection later var bulkinsert id id id let subscribe add events collection mycollectionon add function model collection options want know index new model bulkinsert unfortunately two problems bulkinsert array holds regular objects instantiated backbonemodels indexof wo nt work application bulkinsert happens completely separate file way make reference variable consolelog inserting item bulkinsertindexof model bulkinsertlength let add items collection single add operation first index result collection models ids mycollectionadd bulkinsert suppose pass bulkinsert array options method seems really messy", "d": "4/2014"}, {"body": "pr might looking mind chiming", "d": "4/2014"}, {"body": "yup looks like fix issue closing ticket", "d": "4/2014"}, {"body": "sorry think best way handle either wrap create separate method calls fetch parameters place", "d": "4/2014"}, {"body": "example provided fetch method compose url query parameters stated translating options url logic outside url method would violate principle separation concerns violating separation concerns would make easier introduce bug introducing nonstandard method mycustomfetch would make code difficult people read wrapping fetch would inevitably violate dry generally hassle point using toolkit reduce hassle", "d": "4/2014"}, {"body": "hey henrytseng expects response json representation model passed first api nt implement form restfulness might return empty object better luck question irc channel mailing list issues development backbone", "d": "4/2014"}, {"body": "hi enunez version backbone using treatment query strings routing updated recently using latest version query string passed last argument route handler", "d": "4/2014"}, {"body": "hi braddunbar using latest release code issue occurs end extractparameters calling decodeuricomponent entire fragment instead looping individual parameters splitting amp extractparameters function route fragment var params routeexec fragment slice return map params function param nt decode search params paramslength return param null return param decodeuricomponent param null", "d": "4/2014"}, {"body": "ok misunderstood missed navigating directly gon na want put query string instead query string last argument router wo nt decoded", "d": "4/2014"}, {"body": "braddunbar think misunderstanding navigating contrived example navigating please read explained imagine anyone tries set query parameter value something contains amp character backbone current behavior make impossible parse", "d": "4/2014"}, {"body": "right got using issue either way need use query string prefixed", "d": "4/2014"}, {"body": "braddunbar hmm ok bit confused path correspond arbitrary string act hack get backbone urldecode query string nt polluting url unnecessary cruft surely come better solution tested solution indeed work pointlessbogus pathname url", "d": "4/2014"}, {"body": "right example use like", "d": "4/2014"}, {"body": "still superfluous url live thanks help", "d": "4/2014"}, {"body": "sure thing glad could help", "d": "4/2014"}, {"body": "braddunbar working backbone using change url submitting search form case could something like max m\u00fcller encode maxm bcller within backbones navigate function searchquery beeing decoded back max m\u00fcller returned like end url gets changed myrootcom qmax m\u00fcller valid url instead like myrootcom qmaxm bcller missing something standard behavior way achieve beside modifying backbones core", "d": "4/2016"}, {"body": "hi edwardoyarzun advantage delegating within view events cleaned upon removal usually better idea add listener parent view call method trigger event child need help stop irc channel try mailing list issues generally reserved development backbone", "d": "4/2014"}, {"body": "probably need define path jquery reqiureconfig", "d": "4/2014"}, {"body": "thanks garthenweb unfortunately option jquery plugins attach functions window sometimes use somechild someplugin view setting jquery path someplugin exist backbone scope besides would define path jquery would loaded already embedded page", "d": "4/2014"}, {"body": "jquery still exposes global even using amd precisely reason set loader plugins fine also shim plugins use amd loader", "d": "4/2014"}, {"body": "technical details aside would ever want call route url history nt changed definition route supposed", "d": "4/2014"}, {"body": "calling route might checking see route valid given current state ie user logged turns route invalid need redirect kind view point click back button go back invalid route would ideal could avoid ever putting invalid route history stack", "d": "4/2014"}, {"body": "hi asakusuma written similar route filtering logic think proposed solution problems importantly ignores direct navigation url case history entry already created issue moot handled identically much better user experience imo leave url cases user choose go back like", "d": "4/2014"}, {"body": "braddunbar good points issues brought perhaps multipage form might better example let say page form accidentally click link another page say page ideally like stop routing happens still page show dialog asking user really wants navigate away form let say want go back page form hit browser back button page made history stack navigate page want manually navigate page user filtering action performed keep mind custom hook behavior default usual case means would agree cases leaving url best user", "d": "4/2014"}, {"body": "nah think stay closed nt want user go particular url nt make url clickable ui general url app user able go point time really point urls first place better form would remember data entered allow navigate away without complaint still halffilled press back button return backbone routing intended occur change location happened supposed get involved allow user go next", "d": "4/2014"}, {"body": "general url app user able go point time really point urls first place well put arrive eg found sure want filter based form state pretty easily days js var router backbonerouterextend execute function handler args thisformactive amp amp confirm sure handlerapply args else historyback history entry still think probably messing history confusing often", "d": "4/2014"}, {"body": "ok maybe fault trying make use function outside change event sorry find another way", "d": "3/2014"}, {"body": "maybe avoid setting objects arrays hash fine", "d": "3/2014"}, {"body": "yeah think makes even worse least attributes seem update every attributes seem stick around forever think would help function determine whether within change event attributes hash cleared change event oh well thanks trying help mon mar pm adam krebs notifications githubcomwrote maybe thishaschanged function return thisget city thisprevious city reply email directly view github", "d": "4/2014"}, {"body": "hi sankalan yes reasons adding delimiter main problem would query parameters generally guaranteed specific order matching regular expression sufficient version backbone using since version query params available custom parsing slightly different form case could use something like following parse query string however best hope helps smiley", "d": "3/2014"}, {"body": "speeds bower install make package look clean likely concat minify js bundle anyway include minified version think better question come files like componentjson cname nt ignored", "d": "4/2014"}, {"body": "think speed issue probably negligible whole point min file faster download said would assume anyone using bower probably comfortable build tools position really need download speed boost minified file gives probably know run build tools rest application", "d": "4/2014"}, {"body": "think better question come files like componentjson cname nt ignored good call", "d": "4/2014"}, {"body": "currently situation build click dummy first plain html build wordpress theme clickdummy asset pipelines wordpress ships versions backbone underscore reason ca nt add backbone underscore jquery asset pipelines still would nice maintain separate pipelines libraries instead files shipped along unminified files chance behavior changes", "d": "8/2015"}, {"body": "create operation mapped http post method update operation http post method mapping reference believe current mapping restfully correct resource collection endpoint specific resource imply new resource created specific resource replacing entirety resource body mentioned idempotent way creation would longer idempotent would creating new records every request like", "d": "3/2014"}, {"body": "thanks get logic create gt post items idempotent add item collection resource persisted backend time call update gt put idempotent createsreplaces resource entirety url specified even better update patch rfc thanks clarification", "d": "3/2014"}, {"body": "garey nt understand situation believe treating fetches like synchronous things asynchronous fetch called request issued server gives response collection populated javascript nt wait fetch complete continues executing rest code model fetch returns faster fetches potential collections could still empty go render template js var phones phonecollectionphones issues asynchronous call phonesfetch renew true var addresses addresscollectionaddresses issues asynchronous call addressesfetch renew true issues asynchronous call thismodelfetch success function potential empty model fetch call finishes phones addresses calls consolelog phonesmodels consolelog addressesmodels one solution would keep counter successful requests call another function counter reaches desired amount slightly crude would trick semi pseudocode js backboneviewextend initialize function thiscounter bindall successfulrequest render function thisphones phonecollectionphones thisphonesfetch renew true success thissuccessfulrequest libraries could help parallel tasks pseudo code could done like js backboneviewextend render function var self phones phonecollectionphones addresses addresscollectionaddresses hopefully nt heavy handed answer questions let know", "d": "4/2014"}, {"body": "hi garey suspect astraldragon correct probably get help irc channel mailing list issues reserved development backbone", "d": "4/2014"}, {"body": "believe used relying nt remember reason change", "d": "3/2014"}, {"body": "jashkenas possibly option maybe change comparator value without resorting collection leaving unsorted state need boolean keeps track whether model addedchanged since last", "d": "3/2014"}, {"body": "new variables one track state sort another retain last comparator method reference whenever sort called comparator used would set last comparator used method called would change state sorting called comparator changed sort state set true insertion sort called otherwise resort collection", "d": "3/2014"}, {"body": "yep caseywebdev right one need fork secondly reliably discerning whether array currently sorted harder might seem", "d": "3/2014"}, {"body": "braddunbar looking methods changes would affected method would set possible method sorting case equals insertion sort used else insertions called sorting case adding set false besides method influence process ca nt really think negative consequence common overwrite two methods change order methods think performance issue lib concern", "d": "3/2014"}, {"body": "think conversation would best moved pull request edygar maybe could open one mind", "d": "3/2014"}, {"body": "done anyone make benchmark test", "d": "3/2014"}, {"body": "nt worked way expeting performance got slower closing issue", "d": "3/2014"}, {"body": "hey naseerhussain might try mailing list stackoverflow irc channel questions like github issues used talk framework", "d": "3/2014"}, {"body": "uuugh remove least nt shipped yet", "d": "3/2014"}, {"body": "breaks url construction magic using already something would break default url construction magic nt see really relevant change presumably sending id server first place nt think server response conform backbone method uniquely identifying models want model hash pristine copy server nt want mess adding fake keys stored proper set backbonecollection something run situations used nt run issues yet nt using terribly long either alternatively would make sense defined method collection rather model curious see implementation sure collection really better place uuugh remove least nt shipped yet seeing issue anything gives backbone users flexibility trying without feels hacky", "d": "3/2014"}, {"body": "nt think server response conform backbone method uniquely identifying models yeah agreed thought would nice potential workaround strict oneidpercollection rule enforced collections using generateid already something would break default url construction magic nt see really relevant change sure though let say different collections want combine models third collection adhoc purposes sorting display etc needed guarantee models wo nt conflicting id collection viewpoint nt seem like model responsibility come unique id scheme temporary collection uuugh remove least nt shipped yet seeing issue anything generateid gives backbone users flexibility trying generateid without feels hacky sure wanted raise point think bit ship noticing ca nt easily used without breaking restful niceties nt want mess adding fake keys stored proper set backbonecollection agreed taking model putting collection could presumably used effect intending without confusing logic around etc put something together bit", "d": "3/2014"}, {"body": "sure though let say different collections want combine models third collection adhoc purposes sorting display etc needed guarantee models wo nt conflicting id collection viewpoint nt seem like model responsibility come unique id scheme temporary collection definitely good point good argument toward put something together bit curious see come seems like collection may listen event keep uptodate let futz wink", "d": "3/2014"}, {"body": "thought probably way sort coexist way user composite keys model level model truly compositenested key collection level group simple different model types", "d": "3/2014"}, {"body": "one unexpected consequence addition found morning agree seems like half solution nt think minting new event gains us anything convinced need benefit composite keys backbone best support documentation lacking", "d": "4/2014"}, {"body": "agree seems like half solution let back master time", "d": "4/2014"}, {"body": "would set directly antipattern", "d": "4/2014"}, {"body": "perhaps included documentation morning", "d": "4/2014"}, {"body": "convinced need benefit composite keys backbone nt think backbone ca nt unopinionated force singlecolumn keys time really want revert try turn plugin gut instinct going quite invasive trivial implement", "d": "4/2014"}, {"body": "please revert keep talking way implement solves problem completely", "d": "4/2014"}, {"body": "revert pr", "d": "4/2014"}, {"body": "reverted closing discussion continued", "d": "4/2014"}, {"body": "hi avjpl automatic attachment option removed models collections version due bug causes see details", "d": "3/2014"}, {"body": "would find useful", "d": "3/2014"}, {"body": "seems like fine idea fixed", "d": "3/2014"}, {"body": "merged enjoy", "d": "3/2014"}, {"body": "great work", "d": "1/2016"}, {"body": "ping looks like closed", "d": "3/2017"}, {"body": "shimming messes build tool iirc commonjs solution assign backbone directly may route take opinions killing jquery require amd", "d": "3/2014"}, {"body": "scenarios seem pretty crappy leave means need map require maps jquery empty object maybe require black magic yet know jrburke ideas achieve conditional dependency without plugin ie nt care comes back null remove jquery dep means need set manually setup app correct missing clever third solution option seems correct whole point longer require jquery may well reflect defined dependency tree", "d": "3/2014"}, {"body": "context either backbone depends jquery nt module systems amd commonjsnode even based similar principle dependencies believe sort issue came node pathway backbone perhaps parts backbone need jquery broken separate modulefileaddon enough context suggest final pathway best folks backbone community sort", "d": "3/2014"}, {"body": "nt mind setting backbone application setup opinion one solution amd scenario catching error finding jquery though ugly", "d": "3/2014"}, {"body": "open pr", "d": "3/2014"}, {"body": "either backbone depends jquery doesnt nope docs state backbone hard dependency underscore light dependency jquery overridden one many advantages latebinding language like js rewriting dependencies exposed modules fly particularly useful scenarios like code remains functionally similar large underlying portions replaced perhaps parts backbone need jquery broken separate modulefileaddon also nope backbone nt need use amd manage internal code believe sort issue came node pathway backbone node pathway browserify pathway browserify choking trycatch wrapped around commonjs difference node browserify former runtime lookups latter must precompilation step hugely opposed making dev set manually bit ugly hurdle newbies make change let make sure document hell", "d": "3/2014"}, {"body": "either backbone depends jquery doesnt nope docs state backbone hard dependency underscore light dependency jquery overridden think jrburke means light dependency dependency consensus regarding commonjs well believe sort issue came node pathway backbone node pathway browserify pathway pedantically commonjs cases regardless precedent heed make change let make sure document hell", "d": "3/2014"}, {"body": "pedantically commonjs cases regardless precedent heed commonjs difference runtime lookup vs precompile step former use latter ca nt seen projects use within methods runtime dependencies lazyloading avoiding dependency loops ie depends method depending method", "d": "3/2014"}, {"body": "sorry previous answer bit short follow es modules work like amd far behavior specifying dependencies need specified declaratively front dynamic dependency loaded via similar amd async callback mechanism different node commonjslike system synchronous file access support dynamically fetched require jquery throw bad practice browser though carry forward end result deciding backbone would like express dependencies amd mean solved solution modules whatever solution even nothing wanted keep jquery specified dependency amd projects want use dom library helper instructing amd users following config setup would allow work javascript showing requirejs config call holds amd loader config call requirejsconfig normal config seed module loader empty jquery dependency starting main app loading define jquery function app loading require appmain option save file called jqueryjs project impression backbone users using backbone browser using dom helper library zeptoender supported via amd loader map config points jquery providers true would bias dependency expression mention jquery suggest pathways mentioned amd users want dom helper library backbone know community better", "d": "3/2014"}, {"body": "true would bias dependency expression mention jquery suggest pathways mentioned amd users want dom helper library backbone sounds good jrburke knows best", "d": "3/2014"}, {"body": "thumbsup setting empty jquery object", "d": "3/2014"}, {"body": "actionable item would keep jquery dep amd definition change backbone amd test definition setup blank jquery object reading correctly", "d": "3/2014"}, {"body": "must say would feel strange someone wants use library jquery backbone create jquery filedefinitioncumprimentos jos\u00e9 magalh\u00e3es wed mar pm ryan eastridge notifications githubcom wrote actionable item would keep jquery dep amd definition change backbone amd test definition setup blank jquery object reading correctly reply email directly view github", "d": "3/2014"}, {"body": "magalhas agree already primarily use zepto seems little strange", "d": "3/2014"}, {"body": "agreed magalhas seem like crap solutions", "d": "3/2014"}, {"body": "simple enough say two reasonable solutions defining jquery one way another even empty object using amd capture conversation date correctly jrburke thanks input hail lord require", "d": "3/2014"}, {"body": "oh let make minor release patch release blew faces way would expected patch release", "d": "3/2014"}, {"body": "kind prefer dependency removal also way works way cjs module definition said downside newbies wo nt know backbone needs defined order views routers working properly though overcome documentation break current interface minor release would proper opinion", "d": "3/2014"}, {"body": "also side note could default backbone implementation throws error stating library plugged would help people nt read documentation update though things like would stop working", "d": "3/2014"}, {"body": "reopening seems require discussion", "d": "3/2014"}, {"body": "jrburke says shim whatever like amd shim", "d": "3/2014"}, {"body": "hi machineghost referring annotated source generated docco would nt mention", "d": "3/2014"}, {"body": "nt think machineghost good old fashioned artisanally produced organic handwritten html friend", "d": "3/2014"}, {"body": "wow must annoying keep date kudos putting effort keep friendly readable", "d": "3/2014"}, {"body": "backbone lodash wow", "d": "4/2017"}, {"body": "afaik must override sync method", "d": "3/2014"}, {"body": "like magalhas said override connect database another api whatever need readpersist", "d": "3/2014"}, {"body": "thanks guys confirming current state affairs suppose makes sense databases nt speak http using database like couchdb server side models client side models potential backbonemodels ability http calls like browser anyone else interested seeing work", "d": "3/2014"}, {"body": "probably write pretty simple library like superagent uses javascript api ajax browser http requests node backbone wo nt likely take route core though jquery ubiquitous ajax client days", "d": "3/2014"}, {"body": "think probably leverage new another proxy method", "d": "3/2014"}, {"body": "caseywebdev would nt need specialcase use", "d": "3/2014"}, {"body": "handled problem return predicate function would special case", "d": "3/2014"}, {"body": "understand correctly function designed provide bit syntactic sugar loops nt define anonymous function run check helps filter operation nt covered collectionwhere", "d": "3/2014"}, {"body": "lukesargeant many cases might want use something like outside collection", "d": "3/2014"}, {"body": "nt used function much right think use cases", "d": "3/2014"}, {"body": "might cleanup bit otherwise ca nt really see realworld use would use practice", "d": "9/2014"}, {"body": "like match single model set conditions", "d": "9/2014"}, {"body": "give example", "d": "9/2014"}, {"body": "used past implement dynamic collection filters via similar example could used irl code coffee dynamically set collection view based object conditions la trigger sort param object conditions object properties match eg return void setfilter conditions collectionview getcollectionviews conditions collectionviewitemfilter model index every conditions value key val modelget key isarray val amp amp vallength value isarray value value else value isequal value intersection val value else val value else false else delete collectionviewitemfilter collectiontrigger sort", "d": "9/2014"}, {"body": "dig wan na open pull", "d": "9/2014"}, {"body": "thing", "d": "9/2014"}, {"body": "smileycat", "d": "9/2014"}, {"body": "let move pr conversation", "d": "10/2014"}, {"body": "ca nt set iframe documentdomain documentdomain embedding document", "d": "3/2014"}, {"body": "set inside outside iframe backbone use another iframe element make history ie low version ca nt find solution set backbone iframe", "d": "3/2014"}, {"body": "oh right iframe contentdocument readonly", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "tried say also throw error message", "d": "3/2014"}, {"body": "jdalton one", "d": "2/2015"}, {"body": "oh man pain trap nt think backbone issue scan stackoverflow find lots issues around setting older ie", "d": "2/2015"}, {"body": "thanks jdalton", "d": "2/2015"}, {"body": "thinking bit luozhihua could issue iframe backbone creates try manually changing backbone document would need changed backbone loaded", "d": "2/2015"}, {"body": "think would break lot things right also may want access change event makes perfect sense could though explicit way dispose", "d": "3/2014"}, {"body": "magalhas since documentation indicates access intended change events reinforced explicit ternary code prevent access outside change events nt user responsibility make explicit copy model order access attributes changed use change listener understand may breaking change seems like keeping silent references around backwards compatibility use documentation suggests unintended wrong thing", "d": "3/2014"}, {"body": "backbone documentation return copy model previous attributes useful getting diff versions model getting back valid state error occurs", "d": "3/2014"}, {"body": "also backbone documentation change event method used get previous value changed attribute also happens work change events like using pointer sure might still memory address may used anyone else yet still error relying behavior probably bad idea may break internal behavior changes future worse could expose vulnerability diffing could save value want using use diff need multiple ways things internally inconsistent intentions code documentation especially side effect dubious value correctness", "d": "3/2014"}, {"body": "see point still think documentation issue bug worked couple years project uses big json data megabytes way tackled overriding set method disable previousattributes usage couple features nt need backbonemodel order optimize performance feel mainstream perspective extra object model nt killer memory wise fact makes possible easily undo model changes lets wait active collabs opinion", "d": "3/2014"}, {"body": "memory leak nt grow security hole already put sensitive information model xss present already lost nt think change made feel free disable copy backbone", "d": "3/2014"}, {"body": "yes make clear documentation also fix example currently broken", "d": "3/2014"}, {"body": "hi garey understand correctly saying server returned something object response operation failed option called response formatted json nt able reproduce locally would mind posting example", "d": "3/2014"}, {"body": "brad client created address containing fields posted server server saved address generated surrogate key returned serialized json object containing key result client save error called since writing server well able change behavior return entire json address save success called garey mon mar brad dunbar notifications githubcomwrote hi garey understand correctly youre saying server returned something object response operation failed error option called response formatted json nt able reproduce locally would mind posting example reply email directly view github generate messages directories read files opened rather silent", "d": "3/2014"}, {"body": "think still missing something would cause handler called knowledge called response valid json", "d": "3/2014"}, {"body": "request recently add concept virtual attributes bookshelfjs project follows similar conventions backbone modelscollections use serverside relational databases ended written plugin might useful starting point looking implement docs use nt see reason nt possible drop swapping current implementation uses getterssetters depending browsers looking target work otherwise need tweak bit get functionality looking hope helps", "d": "3/2014"}, {"body": "thanks seems event fired virtual properties values change right", "d": "3/2014"}, {"body": "nt events triggered virtual properties though easy adding check see whether old value different new value firing event accordingly", "d": "3/2014"}, {"body": "asking dirty checking model set checks deep equality points reference cases best practice store primitives strings numbers backbone attributes hash use properties model instance need something advanced", "d": "3/2014"}, {"body": "check fiddle see problem", "d": "4/2014"}, {"body": "dirty checking told", "d": "4/2014"}, {"body": "issue world around", "d": "4/2014"}, {"body": "issue background background gt ok check change event triggered lt error copy paste", "d": "4/2014"}, {"body": "made copy paste error previous fiddle issue reality event triggered", "d": "4/2014"}, {"body": "right using reference array object examples change string return false new old values take look lines see actually going might help step code debugger different scenarios", "d": "4/2014"}, {"body": "best bet put primitives arrays objects properties models", "d": "4/2014"}, {"body": "understood right", "d": "4/2014"}, {"body": "maybe possible clone object arrays compare know would expensive permit detect changing state", "d": "4/2014"}, {"body": "js var background b c modelset background background change event var clone background modelset background change event var clone background modelset background change event", "d": "4/2014"}, {"body": "exactly mean hoping come source code backbonejs mine solution thanks", "d": "4/2014"}, {"body": "object extended onto javascript object nt dirty checking changes suspect looking merely provide facilities trigger listen events object would establish changed event case", "d": "3/2014"}, {"body": "thanks swift response casey thought work running problems earlier error probably backbone related", "d": "3/2014"}, {"body": "would mind providing example", "d": "3/2014"}, {"body": "thismodelset background viewlistento thismodel change viewrender thismodelset background background thismodeltrigger change background last line must expected nt executed cause nt detect array different", "d": "3/2014"}, {"body": "see triggering expected may bug code modified version backbone", "d": "3/2014"}, {"body": "version using factory function look like", "d": "3/2014"}, {"body": "sure mean factory function figure add prototype property contains idattribute property function returns model works feels hacky", "d": "3/2014"}, {"body": "want use simple function option less hacky solution uses proper constructor js var collection backbonecollectionextend model backbonemodelextend constructor function attrs options var model attrsfoo myfoomodel mybarmodel return new model attrs options", "d": "3/2014"}, {"body": "ok maybe docs updated use example like instead simple function", "d": "3/2014"}, {"body": "see", "d": "3/2014"}, {"body": "nt know answer question jrburke", "d": "3/2014"}, {"body": "anonymous modules preferred way define modules allows patterns use consumers modules combined together amdaware optimizer combines modules inserts names process similar nodebrowserify approach ecmascript modules source form name bundled ids pertain projectbundling scenario given issues loading scripts browsers share global scope insufficient browser capabilities across browsers modern browsers better always possible anonymous modules work scenarios mostly issue basic core scripts like jquery underscore however higher level scripts like backbone less concern details wiki page upgrading libraries", "d": "3/2014"}, {"body": "anonymous add functionality build tool actually rename modules name nt register anonymously", "d": "3/2014"}, {"body": "allows patterns use consumers jrburke expand statement detail", "d": "3/2014"}, {"body": "instance two different backbone versions available app sounds silly benefit example using anonymous define", "d": "3/2014"}, {"body": "ajaxsolutions consumers backbone library may want refer backbone examples ordered expect likely first developer may want add modifications backbone refer backbone dependency app modules could set backbone module real backbone modifications export value value backbone module sort proxy real backbone prefer mvc library called mvc allow swapping outin backbone mvc id horrible reason need load two different versions backbone page would awful scenario known happen necessarily backbone general modules versions modules keeping module anonymous allows uses", "d": "3/2014"}, {"body": "really good idea", "d": "3/2014"}, {"body": "want pr", "d": "3/2014"}, {"body": "jashkenas wo nt work simple factory functions referring", "d": "3/2014"}, {"body": "ah rub", "d": "3/2014"}, {"body": "everyone page", "d": "3/2014"}, {"body": "nt instead property example defaulted", "d": "3/2014"}, {"body": "supposed wink would solve problem maybe way prevents duplication", "d": "3/2014"}, {"body": "agree immediately obvious benefit supporting factory function", "d": "3/2014"}, {"body": "sounds like need method instead using directly need factory function polymorphism likely also need set custom method", "d": "3/2014"}, {"body": "know underscore would nt work", "d": "3/2014"}, {"body": "could work factory functions models produced inherited factory using example docs might bit fancy", "d": "3/2014"}, {"body": "like legastero idea adding overridable method collection using instead hard instanceof checks something like", "d": "3/2014"}, {"body": "went ahead wrote discussion suggesting instead seemed cleanerclearer", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "henrik approach one way cost adding new internal hook function might never used anyone hard type checking usually bad thing would possible us replace instanceof ducktype testing instead case", "d": "3/2014"}, {"body": "folks linkedin including would love new internal hook currently swiveling preparemodel applications", "d": "3/2014"}, {"body": "would absolutely huge application team building linkedin see asakusuma comment confirmation well", "d": "3/2014"}, {"body": "flexibility one major advantages backbone able decouple models collections allowing people swap models seems like natural win backbone", "d": "3/2014"}, {"body": "actually bitten lack took debug native support would awesome", "d": "3/2014"}, {"body": "fixed enjoy", "d": "3/2014"}, {"body": "code always try put request correct put vs post nt create vs update know url resource belong simple puting representation feel free override sync like something different", "d": "3/2014"}, {"body": "override isnew method needed", "d": "3/2014"}, {"body": "guys indeed correct sorry causing noise", "d": "3/2014"}, {"body": "hi magalhas discussed several times others please comment arguments feature thanks", "d": "3/2014"}, {"body": "garbage collection take care dom element still exists view still referencing means something else still referencing view perhaps event fix fix problem root", "d": "4/2014"}, {"body": "jashkenas created gist issue first thought something wrong stripped everything back removed events etc however also see issue please excuse ive made silly error missed example simply removes view soon rendered use devtools take heap snapshot look htmldivelements see containing highlighted red adding fixes issue im happy log pr agree issue", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "adding never going real fix certainly take look", "d": "4/2014"}, {"body": "jashkenas thanks taking look look trace tree seemed indicate holding reference element thought realised made sense reference removed woud remove ability view calling maybe function would another option give devs choice", "d": "4/2014"}, {"body": "issue example variables declared globally never going garbage collected wrap example iife see gc takes place expected", "d": "4/2014"}, {"body": "worked debugging jashkenas seems like delete kick gc much faster actually never able get drop dom reference using example", "d": "4/2014"}, {"body": "variables declared globally never going garbage collected voila", "d": "4/2014"}, {"body": "welp", "d": "4/2014"}, {"body": "thanks tgriesser works expected problems code find smile", "d": "4/2014"}, {"body": "exist perhaps using master instead", "d": "3/2014"}, {"body": "fixed regression experienced", "d": "3/2014"}, {"body": "works like charm cheers", "d": "3/2014"}, {"body": "see edit mistake related referring reference created collection instance nt nt want collection access", "d": "3/2014"}, {"body": "ok works thank", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "hm indeed possible introduce little delta elements need options nt nothing really serious nt thought using setelement thanks closing issue since nt see immediate use case snippet would nt work", "d": "3/2014"}, {"body": "makes easier arcanis override constructor like", "d": "3/2014"}, {"body": "issue defining function specially handy use passed customise class attributes element workaround set classes attributes method disappointed", "d": "3/2014"}, {"body": "mllocs still pass functions options constructor", "d": "3/2014"}, {"body": "meant using passed functions update longer automatically attached context calling methods", "d": "3/2014"}, {"body": "save overridden initialize method constructor", "d": "3/2014"}, {"body": "initialize called afterwards overriding constructor looks much need accomplish", "d": "3/2014"}, {"body": "nah overriding constructor good plan pretty common moreso", "d": "3/2014"}, {"body": "overriding constructor every view declaration seems much boilerplate reason remove context pass methods would like understand change pretty common pattern bad practice pattern", "d": "3/2014"}, {"body": "use case every view application comes backbone indirection something like js var view backboneviewextend constructor function options thisoptions options backboneviewapply arguments var userview viewextend var commentview viewextend", "d": "3/2014"}, {"body": "mllocs yes would say accessing antipattern instead use vehicle attach properties directly follows great deal detail interested", "d": "3/2014"}, {"body": "thanks braddunbar options whitelisting interesting investigate apply idea using backbonemarionette", "d": "3/2014"}, {"body": "yep brought tickets see end solution wherever backbone first referenced", "d": "2/2014"}, {"body": "yeah actually tried trouble due way ender modules created way add reference without losing ability integrate ender integrates modules methods via attempt add reference first eg like results infinite loop max stack size limit reached presumably due circular reference somewhere managed work around integrating means one global variable updating references backbone methods wondering gained breaking usage pattern least reference might well removed latter block first post since block unreachable backbone part ender library", "d": "2/2014"}, {"body": "symmetriq would like send patch fixes ender loading problem patch possible", "d": "3/2014"}, {"body": "jashkenas done", "d": "3/2014"}, {"body": "closing favor", "d": "11/2014"}, {"body": "started happening still affected", "d": "3/2014"}, {"body": "yes also problem master", "d": "3/2014"}, {"body": "unsure whether actually bug whether previously undocumented behavior unsupported documentation states arguments create docs convenience create new instance model within collection equivalent instantiating model hash attributes saving model server adding model set successfully created would indicate expecting model instance example use case needing create way using seeing issue", "d": "3/2014"}, {"body": "docs also says create method accept either attributes hash existing unsaved model object", "d": "3/2014"}, {"body": "ah missed bug docs otherwise", "d": "3/2014"}, {"body": "anyone know commit introduced regression", "d": "3/2014"}, {"body": "yeah seems nt realize attribute set model relied upon reason model added collection", "d": "3/2014"}, {"body": "tgriesser think easy fix fundamental problem addreference idea", "d": "3/2014"}, {"body": "yeah think fundamental problem addreference idea feels bit odd need model knowledge collection able save nt yet exist collection let see anything come", "d": "3/2014"}, {"body": "hi hit issue product edge version seems working us going publish fix official package increase version number", "d": "6/2014"}, {"body": "idea pushed official package new version ran issue well", "d": "7/2014"}, {"body": "still problem come issue keeps getting closed", "d": "5/2015"}, {"body": "slavajacobson provide test case", "d": "5/2015"}, {"body": "came across issue well confirm occurred case using backbone version used fiddle opening issue updating backbone issue occur anymore everything worked expected see modified fiddle", "d": "8/2015"}, {"body": "hi ixxerri suspect problem parsing json status code jquery considers empty response invalid json fails request send instead request fine hope helps smiley", "d": "2/2014"}, {"body": "hi think misunderstood request gets accepted success problems asking model deleted collection response rather means accepted worked wednesday february brad dunbar notifications githubcom wrote closed reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "right completely misread sorry smiley think instead nothing", "d": "2/2014"}, {"body": "yes nothing least maybe trigger sort event since always success callback might even necessary think would apply methods well put post february brad dunbar notifications githubcom wrote right completely misread sorry image smiley think instead nothing reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "feel like would bit special case want handle custom sync method since presumably way backbone know specific action handled server", "d": "2/2014"}, {"body": "true backbone would nt update action occurred server unless user implements sort sockets assuming nodejs server still valid http response backbone nothing beneficial interfere anything else allows handle responses february tim griesser notifications githubcom wrote feel like would bit special case want handle custom sync method since presumably way backbone know specific action handled server reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "think original read ticket correct accepted request accepted processing processing completed request might might eventually acted upon might disallowed processing actually takes place facility resending status code asynchronous operation response intentionally noncommittal purpose allow server accept request process perhaps batchoriented process run per day without requiring user agent connection server persist process completed entity returned response include indication request current status either pointer status monitor estimate user expect request fulfilled remote action may eventually taken presumably time taken confirmation happening band since backbone default optimistic remote actions default optimistic well clientside act happened patched method fine way change default handling", "d": "2/2014"}, {"body": "backbone optimistic set wait true though think huge effect end user experience handling would fall category features instead flag condition", "d": "2/2014"}, {"body": "backbone optimistic set wait true though yes nt think would expected behavior treat differently wait true enabled default either way mostly academic esoteric status codes", "d": "2/2014"}, {"body": "given nature status code fact interfere status codes think would great addition fits perfectly something handled immediately like simple db query status sent thanks february jeremy ashkenas notifications githubcom wrote backbone optimistic set wait true though yes nt think would expected behavior treat differently wait true enabled default either way mostly academic esoteric status codes reply email directly view github faithfully matthew xerri", "d": "2/2014"}, {"body": "problem running following command anyway could due temporary issue", "d": "2/2014"}, {"body": "thanks fixed cleaning bower cache done", "d": "2/2014"}, {"body": "also ran issue today nt spent much time investigating underlying cause confirm running update fixes", "d": "3/2014"}, {"body": "hi awaisilyastkxel suspect syntax incorrect try instead hope helps try irc channel mailing list problems", "d": "2/2014"}, {"body": "try asking questions stackoverflow irc channel listserve github issues problems framework", "d": "2/2014"}, {"body": "without actual code difficult debug problem seems handling quite well view lifecycle", "d": "2/2014"}, {"body": "code within mobile app using phonegap jquerymobile code apologies paste code forum code segment view events tap transferinputfindanother function alert bypass check backbone causing double tap findanother function scroll box displayed code showtransferto function e e thischecktransferfrom return hide show settimeout function", "d": "2/2014"}, {"body": "backbone nt deal events looks like jquery mobile issue perhaps might luck posting documentcloud irc channel backbone mailing list github issues problems framework", "d": "2/2014"}, {"body": "looks like still trouble feel free send failing test case ticket go", "d": "3/2014"}, {"body": "fair never supposed ever call sure", "d": "2/2014"}, {"body": "yeh huge bug worth fixing probably", "d": "2/2014"}, {"body": "sorry invalid issue model already backbonemodel instance preparemodel called collection property changed", "d": "2/2014"}, {"body": "glad worked ya", "d": "2/2014"}, {"body": "filed pr ages ago agree model", "d": "2/2014"}, {"body": "storing options sets bad precedent really need probably override would things like saving comparator initialize arguments right", "d": "2/2014"}, {"body": "storing options prerequisite able clone correctly right cloning invokes constructor without passing options passed original made collection uses foomodel cloned collection happily keep using vanilla backbonemodel makes sense", "d": "2/2014"}, {"body": "js var backbonemodelextend url foo var backbonemodelextend url bar var collection backbonecollectionextend model var new collection id consolelog first instanceof true var new collection id model consolelog first instanceof true", "d": "2/2014"}, {"body": "javascript var backbonemodelextend var col new backbonecollection id model colat instanceof true var clonedcol colclone clonedcoladd id clonedcolat instanceof true clonedcolat instanceof false", "d": "2/2014"}, {"body": "ah passed requisite options ctor instead", "d": "2/2014"}, {"body": "well pass every option constructor every new option introduced subclass require overriding clone well saving copy options constructor lot easier", "d": "2/2014"}, {"body": "yeah ai nt gon na need overridden prototype like would guess people best left every new option introduced subclass require overriding clone well eh would right", "d": "2/2014"}, {"body": "introduce new option save reference collectionmodel instance need grab back put constructor clone yeah right looks like subclasses override anyway options actually supplied construction inheritance", "d": "2/2014"}, {"body": "yeah lets leave one developer", "d": "2/2014"}, {"body": "wait nt default implementation clone sane least within context vanilla collection model", "d": "2/2014"}, {"body": "actually yeah would agree thinking something along lines", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "otherwise take snapshot options anyway get passed way", "d": "2/2014"}, {"body": "yeah figure wanted could save reference pass back later feb pm jimmy yuen ho wong notifications githubcom wrote otherwise take snapshot options anyway get passed way reset add set references reply email directly view github", "d": "2/2014"}, {"body": "yeah figure wanted could save reference pass back later nt quite make sane vanilla collectionmodel default nt think escape copying options", "d": "2/2014"}, {"body": "ok screw defaults idea need override base collection something", "d": "2/2014"}, {"body": "yeah changed defaults back extends mistake unless talking defaults thing want know expected semantics obviously nt exactly cloning sure dozens incompatible overrides varying semantics good idea", "d": "2/2014"}, {"body": "think passing along fine maybe even anything else overridden extending class", "d": "3/2014"}, {"body": "mornin awaisilyastkxel search document elements matching however rendering index view yet inserted document need search views element instead instead generally try irc mailing list type question github issues questions backbone nt used debugging hope helps smiley", "d": "2/2014"}, {"body": "hi kainosnoema fixed apologies breakage thanks reporting alone concerning point release take look interested", "d": "2/2014"}, {"body": "braddunbar thanks quick turnaround new query string handling nice ca nt wait another version bump try", "d": "2/2014"}, {"body": "think encountered something related ie workaround thought share case anyone else issue assume edgecase hopefully get fixed later releases ie maybe edge", "d": "7/2016"}, {"body": "property undefined check exists getting set correctly constructor try asking questions mailing list irc channel documentcloud github issues problems framework", "d": "2/2014"}, {"body": "let tag em close em", "d": "2/2014"}, {"body": "titanium mvc framework alloy built top backbone", "d": "2/2014"}, {"body": "titanium mvc framework alloy built top backbone rock fix similar handled underscore either making default adding guard", "d": "2/2014"}, {"body": "hi cyzanfar fairly certain wrong place perhaps ask irc browse issues", "d": "2/2014"}, {"body": "thank mon feb pm brad dunbar notifications githubcomwrote closed reply email directly view github", "d": "2/2014"}, {"body": "problem smiley", "d": "2/2014"}, {"body": "built release maybe jashkenas release emergency release amd folks need remove shims upgrade requirejs way around running problems", "d": "2/2014"}, {"body": "good catch thanks", "d": "2/2014"}, {"body": "np", "d": "2/2014"}, {"body": "take look kind need event triggered also project working", "d": "2/2014"}, {"body": "far tell looking code sync event wo nt trigger model returns true using isnew method", "d": "2/2014"}, {"body": "confirm cause behaviour case", "d": "2/2014"}, {"body": "oops issue closed mistake yes right point issuing sync event communication server new isnew true model destroyed however one would expect sync event bubble collection nonnew model destroyed stated doc typically works well dim view collection sees request event undim corresponding sync received always works except destroy model code proves point server file called dummymodelphp client code coffeescript class mod extends backbonemodel initialize id val url phpdummymodelphp isnew get id else class col extends backbonecollection model mod collection new col collectionon destroy collection destroy ev collectionon add model consolelog collection ev add modelisnew new else modelget id collectionon request consolelog collection request ev collectionon sync consolelog collection sync ev newmod new mod newmodon change consolelog new model changed ev newmodon request consolelog new model request ev newmodon sync consolelog new model sync ev newmodon destroy consolelog new model destroy ev collectionadd newmod consolelog collection size collectionsize newmodfetch success gt consolelog fetched value newmodget val consolelog destroy error gt consolelog fetch error note delay give time follow activity log code produces following console log collection ev add collection size new model request ev collection request ev new model changed ev fetched value destroy new model sync ev collection sync ev destroying new model request ev collection request ev new model destroy ev collection destroy ev destroy method executed model new model sync ev sync event missing collection end workaround simple trigger event success callback destroy method fixed backbone event triggered twice", "d": "2/2014"}, {"body": "problem running due order operations model destroyed collection severs ties discontinue proxying events nt know call bug since sure ever discussed true intended functionality cc jashkenas braddunbar", "d": "2/2014"}, {"body": "facing exactly issue backbonereact library", "d": "2/2014"}, {"body": "hi great deal precedent one amp think reasons still stand time triggered model already removed collection", "d": "2/2014"}, {"body": "close issue program behaviour contrary stated documentation already surmised first post reason behaviour destruction model happened chance properly trigger events guessing probably happening makes kind sense good reason close issue otherwise would raised documentation says triggers destroy event model bubble collections contain request event begins ajax request server sync event server successfully acknowledged model deletion makes sense clear program doingthere sync event neither model collection correction sync event model bubble collection reread previous paragraph guess one could say bubbling mentioned destroy event others would counter request event bubble collection therefore sync event nt something need fixed", "d": "2/2014"}, {"body": "nt think anything needs fixed believe documentation correct well event triggered containing collections thus model removed collections proxy events models contain attempting fake event lead confusion", "d": "2/2014"}, {"body": "makes sense sync would fire destroy though since nt able destroy pessimistically request comes back nt seem bit strange could receive proxied request event never receive subsequent proxied sync event", "d": "2/2014"}, {"body": "second thought makes sense destroy name guess would work better event double duty moment means request successful client state sync server", "d": "2/2014"}, {"body": "well destroying model collection nt actually sync collection may new models services nt synced destroying yes request ending event highly needed use case call sync", "d": "2/2014"}, {"body": "sync event meant let us know collection synced issued also whenever single model saved server many models may synced moment disturbing lack sync event destroying model bit like html tag without matching closing tag request event says communication initiated server nt need know operation related adding deleting patching etc expressed words event would symetrically expect event shortly meaning process completed successfully details concerning nature operation original request event events paired cases except model destroyed may stubborn fail see logic exception", "d": "2/2014"}, {"body": "events paired cases except model destroyed events still paired correctly model triggers happens triggered model longer member collections previously belonged", "d": "2/2014"}, {"body": "imagine scenario view renders collection bind view collection events add remove change request sync instance rely request sync events start stop loading spinner achieve though clearly understand event nt bubbling right feel thing developer would expect happen edit binding model sync event removal ugly inserts lot clauses view code", "d": "2/2014"}, {"body": "happens sync triggered model longer member collections previously belonged think magalhas valid use case happens nt really strong argument current behavior would agree particular reason want call", "d": "2/2014"}, {"body": "right particularly strong argument explaining reason behavior order several good reasons think triggered first optimistic choice trigger first triggered asynchronously point future triggered last request complete implicit assumption fact already removed containing collections breaking assumption would likely break lot code mirrors way attributes set triggered several good ways toggle spinner use success callback xhr promise global events assuming using jquery work mmikeyy", "d": "2/2014"}, {"body": "sure going outside backbone eg global events would good idea could get triggers unexpected places script template loading relying ajax could tedious write code discriminate events triggered requests backbone wrote earlier easy circumvent problem manually triggering sync event collection success callback destroy method code however remain bothered fact collection get request event matching sync event event signals start process one reliably signals end interest process case server interaction whatever happens collection model plenty specialized events add destroy change etc available act model collection worth suggestion would new event always match request event signal request completion ideally parameters would indicate success failure pair events would useful manage aspects user interface eg request start request success request fail request end update documentation state clearly sync events bubble destroyed models longer exist rtfm reply would sufficed cut lengthy discussion short buti probably still would felt need another event described discussion would whether bug understand really one", "d": "2/2014"}, {"body": "hrrm good suggestions pinging substack", "d": "2/2014"}, {"body": "let clear something probably lot developers using backbone browserify use together jquery smart use jquery npm since available problem resolved already got jquery nodemodules folder currently working project jquery nt available started shimmed stumbled issue basically everyone wants use backbone together browserify without jquery uses jquery shim probably issues workaround include jquery npm nt think really nice hard dependency get working backbone actually nt really dependency jquery", "d": "2/2014"}, {"body": "hit issue problem jquery npm nt really jquery looking one intended use server shim sure best solution iirc setting jquery path browser paths nt fix", "d": "2/2014"}, {"body": "tgriesser problem anymore since jquery officially available npm nt need version use", "d": "2/2014"}, {"body": "run browserify debowerify transform never run assume way stub jquery within browserify", "d": "2/2014"}, {"body": "wow looking transform like idea missed iraytje ah yeah must problem think needed plugin compatibility reason", "d": "2/2014"}, {"body": "change make seems like attempting load jquery available within node likely right thing instead take position running backbone serverside never looking use views want models collections", "d": "2/2014"}, {"body": "nah loading jquery serverside definitely valid use case wiki page write blog post shim desirable jquery browser whats issue seems like small edge case", "d": "2/2014"}, {"body": "think shame backbone npm nt work browserify requiring module even conditionally dependency backbone even attempt load jquery within backbone even server side want use together load jquery assign backbone like always fix issue everyone nt require blog post using backbone browserify shim", "d": "2/2014"}, {"body": "backbone npm designed work node natural order things also happens work browserify bonus", "d": "2/2014"}, {"body": "even attempt load jquery within backbone even server side want use together load jquery assign backbone like always tend agree though", "d": "2/2014"}, {"body": "fair enough used change come introduced trycatch attempt load jquery node", "d": "2/2014"}, {"body": "somewhere around", "d": "2/2014"}, {"body": "goal make common case serverside node browserbased commonjs using jquery work without hassle opposed reverting add note docs changelog common case js commonjs var backbone require backbone backbone require jquery amd define backbone jquery function backbone backbone", "d": "2/2014"}, {"body": "nt need note amd though since taken care earlier block code", "d": "2/2014"}, {"body": "running seems like also issue amd projects use bower requirejs getting automatically upgraded seems like issues shimming plugins thinking really since breaking things lots people real culprit write configs first notice things working ci blowing across projects", "d": "2/2014"}, {"body": "recently pointed configuration within packagejson may help", "d": "2/2014"}, {"body": "nt backbone include packagejson dependencies field idea module would ever require package without putting package dependencies field seems really weird", "d": "2/2014"}, {"body": "perhaps", "d": "2/2014"}, {"body": "substack historical reasons makes sense since old jquery package something ever want downloaded project", "d": "2/2014"}, {"body": "backbone nt depend jquery unlike say underscore node package nt exist throws", "d": "2/2014"}, {"body": "nt backbone include jquery packagejson dependencies field load backbone node probably nt want jquery dependency folks might", "d": "2/2014"}, {"body": "getting something thread naive understanding dependencies work package dependency dependencies go packagejson dependencies field thread people telling despite present code jquery dependency jquery dependency backbone code take jquery actually dependency backbone belongs packagejson dependencies field weird thirdcase middleground shenanigans going take hacks like nt belong", "d": "2/2014"}, {"body": "addendum like tbranyen already pointed problem want something different happen node vs browser use something like browser field specify different entrypoint perfile overrides", "d": "2/2014"}, {"body": "substack jquery optional light dependency backbone load use backbone fine without jquery present first reference jquery lazily set anytime", "d": "2/2014"}, {"body": "mentioned add docs somewhere", "d": "2/2014"}, {"body": "care making egal amd feb pm jeremy ashkenas notifications githubcom wrote closed via reply email directly view github", "d": "2/2014"}, {"body": "raynos says backbone code relying set leave user would one need another name jquery", "d": "2/2014"}, {"body": "mean also remove amd jquery require using module system make sure underscore visible set backbone seems little odd probably fine", "d": "2/2014"}, {"body": "looks like best option jquery library also interface", "d": "2/2014"}, {"body": "jquery jquery zepto ender way code run browser user power choose one backbone way set jquery interface implementation way go neither amd npm notion interface optional dependency afaik", "d": "2/2014"}, {"body": "jquery zepto whatever optional backbone effort assign right library user code like backbone jquery nt depend jquery please", "d": "2/2014"}, {"body": "mean also remove amd jquery require nt think amd browerside packaging browser jquery usually dependency backbone", "d": "2/2014"}, {"body": "subset jquery used backbone huge possible provide api drop jquery jquery dependency force people make custom version backbone order use something else", "d": "2/2014"}, {"body": "kof take look", "d": "2/2014"}, {"body": "nt think amd browerside packaging browser jquery usually dependency backbone since modules names arbitrarily defined amd config requiring module named forces people name zepto jquery custom ender build jquery want use backbone something jquery amd causes actual problems might create confusion", "d": "2/2014"}, {"body": "thing lodash though imagine using something jquery either know legacy code base used incompatibilities requirejs makes pretty easy alias modules", "d": "2/2014"}, {"body": "good point", "d": "2/2014"}, {"body": "requiring something dependency straight bug think thanks quick fix someone push npm forward looking solution could class method explicitly allows developer assign value throwing later calls nt setup found global browser dependency one generally swapped variety libraries others point", "d": "2/2014"}, {"body": "fix exists backbonejs file minified version backboneminjs still require jquery someone fix please", "d": "2/2014"}, {"body": "wookiehangover real culprit npm install save backbone bower install save backbone write configs first notice things working ci blowing across projects heads behavior changed use means packages updated released see", "d": "2/2014"}, {"body": "jdalton interesting decision obviously nt gotten wind change", "d": "2/2014"}, {"body": "great default modules complying semver probably good applications", "d": "2/2014"}, {"body": "longer possible integrate backbone ender library modules loaded part ender library always exists context nt actually possible reach loading block passed argument solution use ender nt autointegrate modules module needs loaded via optionally integrated via backbone currently integrated must used separately like instead", "d": "2/2014"}, {"body": "symmetriq add gotten work browserify environment", "d": "3/2014"}, {"body": "came across issue although conclusion made also think bug need fix lots people come across confuse people backone really depends whatever jquery zepto ca nt assume need nodejs commonjs browserify hypothesis wrong otherwise many people came across problem two way solve problem fix selfly add export interface surely well docs set think code following also problem see bowerjson using jquery amd using jquery commonjs", "d": "8/2014"}, {"body": "yeah issue continuing cause friction backbone fix solve problem nonobvious awkward easily lead multiple copies jquery loaded since jquery generally need explicit dependency view classes packaged modules reason cited simply including query packagejson load backbone node probably nt want jquery dependency folks might jashkenas problem jquery unused dependency node cares takes virtually disk space time load happens thread starts let bite bullet go back simple practical", "d": "8/2014"}, {"body": "yeah retrospect wish stood ground one like revert add note wiki page", "d": "11/2014"}, {"body": "yeah retrospect wish stood ground one like revert add note wiki page conversation worth think current set continues problematic folks trying load libraries build top backbone within browser think better", "d": "12/2014"}, {"body": "agreed think confusing commonjs mode load underscore jquery amd global mode load enough client side code days uses commonjs think time re\u00ebxamine", "d": "12/2014"}, {"body": "add noise thread based volume issues questions raised marionette land directly related change reverting commit would save many people time make lives much easier", "d": "12/2014"}, {"body": "agreed think confusing commonjs mode load underscore jquery amd global mode load big difference backbone officially dependency underscore included packagejson jquery nt adding optional require code everybody uses browserify obligated expose least module jquery dependency otherwise build wo nt even work", "d": "12/2014"}, {"body": "guys want change feel free open new pull request desired change made full description rationale explanation going work play different environments", "d": "12/2014"}, {"body": "pr open quite time", "d": "12/2014"}, {"body": "pr try jquery fully describe explain going work different environments want change let put elbow grease really explain idiot like going able push merge button something resembling confidence", "d": "12/2014"}, {"body": "laptop genius bar next days someone doesnt open pr add main gist want common case loading jquery work without issue folks nt need jquery tell build tool ignore require node done throwing error catch ignore browserify webpack config option backbone variable still available ender zepto etc", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "browserify webpack config option famiar option would look like", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies try catch surprises weirdness server side takes insignificant amount space time load browser somebody using dom library jquery onus person swap library choice browserify done easily browserifyshim sure webpack must way like put together pr simple case w examples handle nonjquerydomlibs con seeing considered", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies good question obviously regarding people nt use jquery curious aliasing similar distasteful things really break rereading thread nt see mention actual breakage included said using routerapp time bit odd nt problems", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies asking question time know issues folks server two minor inconveniences mentioned sure current setup favoring use case although jashkenas described usecase think something problematic comes client sec said using backbone require jquery routerapp time bit odd nt problems using backbone problem issue comes load library like marionette depends backbone defined marionette work backbone say webpack environment force webpack inject dep configuration difficult folks trying get set may experts module bundlers browserify webpack config option curious see familiar alias option would easily let people swap jquery say zepto admit sure one would configure backbone ignore jquery change set include packagejson add line problem mentioned earlier post", "d": "12/2014"}, {"body": "also want backbone use zepto still use jquery areas aliasing work case", "d": "12/2014"}, {"body": "issue comes load library like marionette depends backbone defined always set loading marionette chaplin thorax ideal certainly tedious", "d": "12/2014"}, {"body": "exactly also plugins use jquery directly seems one rely directly instead using way upgrade separately without fear breakage least done past", "d": "12/2014"}, {"body": "also plugins use jquery directly seems one rely directly instead using way upgrade separately without fear breakage disagree marionette using jquery backbone jquery app becomes absolute mess view property different rest app plugins etc metaframeworks always use variable instead trying require jquery", "d": "12/2014"}, {"body": "fair enough smiley", "d": "12/2014"}, {"body": "famiar option would look like webpack throw runtime error like node", "d": "12/2014"}, {"body": "try opening issue marionette recall need use amd build load backbone properly", "d": "2/2014"}, {"body": "many backbone plugins nt support amd even though adding backbone window happens asynchronously function passed define called meanwhile plugins included built file may looking windowbackbone immediately nt defined yet seems valid issue compatibility", "d": "2/2014"}, {"body": "ianmetcalf requirejs shim configuration nt work", "d": "2/2014"}, {"body": "nt using rjs optimizer shim wrap plugin discussed bit specifically comments toward bottom", "d": "2/2014"}, {"body": "exactly issue well seems solved marionette backbonerelational", "d": "2/2014"}, {"body": "seeing backbonevirtualcollection good excuse get plugins include amd compatibility", "d": "2/2014"}, {"body": "good excuse get plugins include amd compatibility want start list amd offenders open pulls take minutes amd baked bb proper harder excuse lack support", "d": "2/2014"}, {"body": "ha open pr", "d": "2/2014"}, {"body": "amd baked bb proper harder excuse lack support really tragic amd infect every single file javascript existence order useful external libraries nt want include prerogative sigh", "d": "2/2014"}, {"body": "jashkenas even loyal requirejs user agree little sad see support added personally fine shim setup", "d": "2/2014"}, {"body": "another option consider marionette two builds one amd support one without", "d": "2/2014"}, {"body": "upgrade rjs optimizer config fix build issue amd version backbone downstream dependencies shim config details", "d": "2/2014"}, {"body": "solves thanks jrburke", "d": "2/2014"}, {"body": "feature glitch affected maybe would simple assign outside callback synchronous callstack example jquery", "d": "4/2014"}, {"body": "darrrk rjs bug mentioned steps reproducetest case would prefer identify core issue via test case work based incomplete information please feel free add info rjs bug something use reproduce also backbone different jquery backbone dependencies need loaded backbone synchronously define dependencies available", "d": "4/2014"}, {"body": "spies nt reset call counts tests comment first trigger see call counts", "d": "2/2014"}, {"body": "sounds like underscorejs nt loaded", "d": "2/2014"}, {"body": "added cut use master get benefits ignores", "d": "2/2014"}, {"body": "clear thanks clarification", "d": "2/2014"}, {"body": "everything set correctly routes throwing exceptions ie ran backbone test suite without errors feel free submit failing test case like pursue", "d": "2/2014"}, {"body": "started project recently permission denied exceptions seems like nt happens workaround working fine ignore exception gethash method original modified", "d": "2/2014"}, {"body": "page quirks mode different document mode normally without reproducible case really much", "d": "2/2014"}, {"body": "running compatibility mode ie throwing exception ayresbarcelos saying exception caused iframe nt really want add try catch suppress error going gather details ie environment using jashkenas tests running version compatibility mode mean everything setup correctly", "d": "2/2014"}, {"body": "running compatibility mode valid way test actual behaves quite differently might one areas tests run whatever run working real real real real real", "d": "2/2014"}, {"body": "ok confirmed also tested native run another round tests", "d": "2/2014"}, {"body": "project permission denied exceptions code like problems put function another router project permission denied exceptions eg", "d": "12/2014"}, {"body": "wiki remove pull request needed give try", "d": "2/2014"}, {"body": "seems reasonable", "d": "2/2014"}, {"body": "submit pull request", "d": "2/2014"}, {"body": "thanks", "d": "2/2014"}, {"body": "thoughts topic", "d": "2/2014"}, {"body": "put bottom bothering folks documentation single page nice", "d": "2/2014"}, {"body": "would argue nt documentation like anecdotal evidence important folks use backbone", "d": "2/2014"}, {"body": "agree think important information earlier clear backbone widely used", "d": "2/2014"}, {"body": "sorry boys examples stay feel free move faq docs like", "d": "2/2014"}, {"body": "also examples real world backbone apps function though monday february sam breed notifications githubcom wrote would argue nt documentation like anecdotal evidence important folks use backbone reply email directly view github", "d": "2/2014"}, {"body": "looks like someone already rearranged sections nt deployed site yet", "d": "2/2014"}, {"body": "think ordering correct patched function indeed synchronous happens model destroyed removed collection point view application backbone nt lying actually happened", "d": "1/2014"}, {"body": "hi luisca search issues find one come several times best way go apply properties constructor quick one liner follows hope helps", "d": "1/2014"}, {"body": "many events nt bubble either focus blur change submit etc nt think makes sense backbone polyfill events introduce whole bunch code detect browsers order attach event handlers different ways browser jquery nt even anyone would jquery already machinery builtin really really need seamless event delegation recommend facebook react", "d": "1/2014"}, {"body": "yep yep syntax delegation bubbling events event nt bubble attach handler directly cleaned view", "d": "1/2014"}, {"body": "meh figured ended delegating hover handler would set scroll handler work around", "d": "1/2014"}, {"body": "gist helper method make simple possible anyone finds later setup view", "d": "1/2014"}, {"body": "optional parts backbone routes support nesting", "d": "2/2014"}, {"body": "would welcome pull request", "d": "2/2014"}, {"body": "would say pr please release plugin nt know jashkenas opinion nt see nt part backbonerouter core", "d": "2/2014"}, {"body": "depends fancy ends yes sure feel free take crack", "d": "2/2014"}, {"body": "model ids unique per model server returning multiple objects id seems like bug part server much backbone", "d": "1/2014"}, {"body": "error seems incorrect", "d": "1/2014"}, {"body": "right understand bug server wondering better way backbone handle error noticed attempt models collection adding behavior silently fails model added error thrown would expect adding models via call would act way would prefer adding duplicate models would throw error though imagine would breaking change many users", "d": "1/2014"}, {"body": "would prefer adding duplicate models would throw error though imagine would breaking change many users used behavior enhancement would expect adding models id via fetch call would act way quite", "d": "1/2014"}, {"body": "moral story ing duplicate models breaks passed directly calling works also pass see results hazard guess point say line new idattribute parsing server response nt parsed yet expose models ids thus check fails lines later maybe braddunbar shed little light solution algorithm still incorrect duplicates nonnested attributes becomes different nt throw due array getting priority array setting collection models probably best detect dups early throw wrap around line", "d": "2/2014"}, {"body": "updated spec use method correct running problems using option intended behavior silently reject duplicate model throw error case opinion throwing error developer friendly server clientside code giving duplicate want know upfront alternative creating bugs downstream much harder identify track want go route wrote couple specs expected behavior", "d": "2/2014"}, {"body": "dropped support case think need function solve issues like would also make composite keys easy js default generateid function attrs return attrs thisidattribute eschwartz test case generateid function attrs return attrsnestedid instead using use change would nonbreaking thoughts", "d": "2/2014"}, {"body": "definitely relying data parsed passed cruel else could composite keys called would function used multiple places", "d": "2/2014"}, {"body": "working quick pr get details", "d": "2/2014"}, {"body": "still nt solve problem duplicate models passed call though", "d": "2/2014"}, {"body": "one note may missing seems model defined function collection still wont access idattribute model called correct targetproto defined model function called returned", "d": "3/2014"}, {"body": "chiplay check example setting optionally polymorphic", "d": "3/2014"}, {"body": "thanks caseywebdev dont think set idattribute collection since idattribute different model types polymorphic model sure looking use generateid produce correct id explain point right direction thanks", "d": "3/2014"}, {"body": "caseywebdev ahhh got little slow today need set generateid method collection use attrs return correct id brilliant", "d": "3/2014"}, {"body": "js var typea backbonemodelextend idattribute var typeb backbonemodelextend idattribute b var poly backbonecollectionextend model backbonemodelextend constructor function attrs options var model attrstype typea typeb return new model attrs options let know helps keep mind recently added latest release yet", "d": "3/2014"}, {"body": "actually talking fellow devs would enough split inside project interested kind separation could prepare pull request", "d": "1/2014"}, {"body": "use case example building library uses backbone interface various mapping apis case directly interacting dom views rather map library apis stands forced use entire backbone library along flavor fo though really using fyi able stub without side effects using implementation rely", "d": "2/2014"}, {"body": "apis stands forced use entire backbone library along flavor fo though really using models collections fyi able stub without side effects using implementation backbonesync rely ajax sounds like exactly supposed using backboneview minuscule loading without needing may unaesthetically appealing ca nt imagine mattering almost conceivable js environment", "d": "2/2014"}, {"body": "jashkenas using browserify complete backbone pulled project uglifyjs able strip away parts would bundle size would lot smaller router code would pulled bundle fact prevents using backbonerouter project would double bundle size code nt need also lot upsides like code would logically split files would divide code modules modules would reusable also outside complete backbone context would much fit nodejs philosophy help browserify taking browser side development would work splitting code providing way build browserify would accept pull request would wasting time", "d": "2/2014"}, {"body": "nnarhinen get away supporting modern environments might look exoskeleton backbone fork modular components work paul miller said doubt backbone size sincere concern app extra kb browserify pulls likely among smallest dependencies", "d": "2/2014"}, {"body": "kilobytes something care dangerous path go end bundle half something nt need pulled nt want reinvent wheel nt see nt work towards web development would reintroduce performance terms bundle size memory footprint supporting backbonejs would make sense ca nt really see downsides", "d": "2/2014"}, {"body": "backbone tiny interested see dependencies backbone limiting factor downsides increased complexity much benefit backbone one file needs one file adding complexity makes confusing people unfamiliar commonjs", "d": "2/2014"}, {"body": "would argue building unified file including unfamiliar commonjs would add little complexity yet still support real valid performance reuse concerns users niklas backbone aims limit supporting lowest common denominator may enough encourage users pursue projects use foundation certainly gives pause would nt bothered respond issue except fact fair technical argument met untechnical arbitrary response seemed run counter goals project maybe statement goal monolithic design added project description help differentiate backbone modern approaches", "d": "2/2014"}, {"body": "use underscore pick modelattributes", "d": "1/2014"}, {"body": "damn overlysimplified example trying keep sample code clean possible overdid correct example provided could simply use add override omit type attribute however start summary model add record model nt actually want omit record type contrary want replace summary type model really record want omit type way around summary added record really looking side note real life version even complex historical reasons actually four different forms data since storing four different collections problematic know collection use since represent serverside data trying merge single collection trouble inability control merges happen", "d": "1/2014"}, {"body": "perhaps accomplished", "d": "1/2014"}, {"body": "using type property represent completeness record seems problem solve specific problem would loose concept type going use model simply query fields point request data record needed another strategy would compute state record sync data comes server based reality available easy see general problem looking solve reality often people face problem vs added complexity question believe variety approaches work elegant less elegant proposal", "d": "1/2014"}, {"body": "yet third option pass custom parameter hash passed method javascript coladd models parse true customparse true parse function resp options optionscustomparse return thissomethingspecial resp return resp", "d": "1/2014"}, {"body": "hmmmm complicating factors make solutions problematic give ideas play thanks importantly seems clear point use case setmerge method pretty specific close ticket least time bettermore common case arises", "d": "1/2014"}, {"body": "hey brought times search past tickets unfortunately thats tradeoff using object store keys dont allow arbitrary values ids stick numeric unique sequential ids fine", "d": "1/2014"}, {"body": "since already api access points data ca nt internally properties simply prefixed like better yet suggested using thing done", "d": "1/2014"}, {"body": "doesnt seem like good solution either model collection much overhead cognitive otherwise see threads discussion suggestions", "d": "1/2014"}, {"body": "apologizes see previous tickets issue covers exact scenario going ask documentation update alas current documentation references integer id uuid used model ids thanks", "d": "1/2014"}, {"body": "problem thats jan pm josh thomas notifications githubcom wrote apologizes see previous tickets issue exact scenario going ask documentation update alas current documentation references integer id uuid used model ids thanks reply email directly view github", "d": "1/2014"}, {"body": "try looking previous tickets opening new ones thanks", "d": "1/2014"}, {"body": "second parameter always going whatever function sent back case default first parameter jquery ajax callbacks see reference used general term purposefully easily overridden work various data stores protocols", "d": "1/2014"}, {"body": "except second place optionserror executed entirely different function call signature version backbonejs lines occurring end sync function seems wacko two different signatures function major difficulties code", "d": "6/2016"}, {"body": "found workaround browserify run browserify following argument replaces backbone fronted code context follows", "d": "1/2014"}, {"body": "voila go", "d": "1/2014"}, {"body": "cspiegl learned gulpbrowserify use see", "d": "1/2014"}, {"body": "use gruntshell run browserify tried would like much better browserify command one saadly work tests", "d": "1/2014"}, {"body": "similar workaround component would solve need addressing", "d": "7/2014"}, {"body": "hi reinseth believe fixed though somewhat differently query params stripped nt matched fragment either try code see think", "d": "1/2014"}, {"body": "ah nt see fixes issue thanks quick reply", "d": "1/2014"}, {"body": "date", "d": "1/2014"}, {"body": "might want give shot stackoverflow gh tickets bugs issues directly related development library", "d": "1/2014"}, {"body": "inconsistency javascript uses positional arguments trying pass sans type sniffing almost function accepts one argument work", "d": "1/2014"}, {"body": "load router first ask questions mailing list stackoverflow irc channel please", "d": "1/2014"}, {"body": "documentation perhaps updated semantics", "d": "1/2014"}, {"body": "agree jashkenas syntax simple sugar binding individually", "d": "1/2014"}, {"body": "eventa eventb syntax simple sugar binding individually yep yep", "d": "1/2014"}, {"body": "model id model url model url want put model url rest goes", "d": "1/2014"}, {"body": "ask questions mailing list irc channel bug tickets", "d": "1/2014"}, {"body": "ok said put general discussion", "d": "1/2014"}, {"body": "agree model returned create nt useful since nt really know deal hear server consistent get xhr object promise chaining etc info reasoning", "d": "1/2014"}, {"body": "far reasoning see intended return model nt really reason specific use case necessitates behaving differently others", "d": "1/2014"}, {"body": "shortcut new model plus add collection save returned xhr reference model made want xhr use later", "d": "1/2014"}, {"body": "jashkenas could pass model created elsewhere additionally could empty noninitialized model worse model someone realizing network operation happening could start using model actually saved may desired behavior", "d": "1/2014"}, {"body": "could pass model create created elsewhere could intended use case code example makes sense noticeably awkward compared someone realizing network operation happening could start using model actually saved exactly optimistic models supposed used worried save failing model invalidated server want save complete shortcut think rails", "d": "1/2014"}, {"body": "normal nope nt model returned errors", "d": "1/2014"}, {"body": "yamsellem jashkenas ran issue well turns need add validate true options invalid model added collection guessing intended behaviour since exists test probably documented", "d": "3/2014"}, {"body": "try latest master see problem still exists nt", "d": "1/2014"}, {"body": "backbone version issue still exist", "d": "3/2014"}, {"body": "yes issue still exists", "d": "4/2014"}, {"body": "problem", "d": "4/2014"}, {"body": "ahh see validation saving normal functionality", "d": "4/2014"}, {"body": "also following purpose additional client validation saving data validated saving presumably server server returns client validation fails response client could end nonworkable state also less impactful inconsistency created one adds promise listeners returned jqxhr done handler invoked otherwise synonymous success callback", "d": "5/2014"}, {"body": "also following purpose additional client validation saving data validated saving presumably server server returns client validation fails response client could end nonworkable state bit funny server returns client accepts data considered client delaying screwed next time modify save data making bug application harder find time state model changes validated defined validate function simple", "d": "5/2014"}, {"body": "let say saving sensitive data frontend data needs creating ie ssn data nt returned api last digits instead want validated present creating nt want validated receive server server responds last instead full ssn validating twice specifically validating whilst setting breaks scenarios like", "d": "10/2014"}, {"body": "nt think use consistent data model", "d": "10/2014"}, {"body": "nt work though modelset validates new attributes returned server fail full validation edit saving user wtih ssn expecting ssn saved server respond still going fail validation set validates server attrs also despite model still ssn attribute attributes created understandable", "d": "10/2014"}, {"body": "like issue found backbone pretty speedy replies crazy question think consistent uses modelset nt seem like validation enabled default setting data call manually hit save called left validating saving meant originally surprising", "d": "10/2014"}, {"body": "jashkenas could pass hash method sync start new argument override backbonesync stop happening stick default behaviour wo nt break anything modify particular bit behaviour without screwing library ca nt right relies closure good make patch pr edit bullshit nt work gets called via jquery forgot", "d": "10/2014"}, {"body": "like issue found backbone pretty speedy replies crazy depends time mood got lucky think consistent uses nt think surprising still sure problem modelsave ssn modelunset ssn server response comes back sets nt see terrible", "d": "10/2014"}, {"body": "ha hear ya happening issue locally backbone validating presence ssn field creating fine locally nt exist server response set called fails validation nt update attributes server info", "d": "10/2014"}, {"body": "validation either ssn valid ssn nt exist captures actual valid state model", "d": "10/2014"}, {"body": "yeah fair enough empty string instead undefined validating frontend thanks heads man", "d": "10/2014"}, {"body": "hi please check restores support query params thanks", "d": "1/2014"}, {"body": "hey probably open ticket bookshelf short answer need something like", "d": "1/2014"}, {"body": "github issues discussing bugsfeatures backbone support backbone try documentcloud irc stack overflow", "d": "1/2014"}, {"body": "could also save callback function variable pass variable events agree still bit verbose nt think really bad explicit", "d": "1/2014"}, {"body": "another solution get returned deferred object work want obviously way", "d": "1/2014"}, {"body": "fetch currently pass complete callback could set always callback returned jqxhr", "d": "1/2014"}, {"body": "found feature documentation master branch could work save methods", "d": "1/2014"}, {"body": "yes fields options get passed ajax method anything goes backbonesync", "d": "1/2014"}, {"body": "ahh jquery callback hmm good maybe know secret builtin event complete possible use clumsy", "d": "1/2014"}, {"body": "hi darrrk complete callback certainly nt secret part jquery api backbone jquery promises also allowances via listen space separated events think one probably handle use case", "d": "1/2014"}, {"body": "thanks braddunbar denniskuczynski think issue enough info solve problem devs grep free total options callback total builtin event", "d": "1/2014"}, {"body": "record jquery complete callback deprecated favour always promise style callback", "d": "1/2014"}, {"body": "suggested times early one search though issues similar terms see bit background easy enough wrap callbacks directly plugin ie backboneroutefilter base router pattern give shot let know works", "d": "1/2014"}, {"body": "hi jaseemabid changes wrapping route handlers made much easier think probably fit needs rather well", "d": "1/2014"}, {"body": "braddunbar good one thanks", "d": "1/2014"}, {"body": "docs many tweaks optimizations bugfixes relating backbone including url overrides mutation options explicit got suggestion improve wording feel free open pull ghpages branch", "d": "1/2014"}, {"body": "well read optimizations bug fixes nt expect break backward compatibility bc break requires modifying code keep working explicit doc needed change quite easy went unnoticed initially updating backbone", "d": "1/2014"}, {"body": "one dev bufix another bc guess backbone svelte library changes releases tend minor see latest release example since backbone api almost entirely surface area behavior changes require mucking public contract sorry one bit guys upgrade", "d": "1/2014"}, {"body": "closed", "d": "1/2014"}, {"body": "hi jisaacks pull discussion would mind checking see would fit use case", "d": "1/2014"}, {"body": "braddunbar thanks pointing branch add project see solves things report back figure", "d": "1/2014"}, {"body": "braddunbar branch solve issues actually lot make life easier idea make release", "d": "1/2014"}, {"body": "assume could go next release though certain", "d": "1/2014"}, {"body": "alright well keep eye closing", "d": "1/2014"}, {"body": "nt exactly follow problem lost adding events things find useful totally fine great way go", "d": "1/2014"}, {"body": "request jquery xhr lost save called model returns xhr usually hook onto example showing loading icon hiding request done used ca nt listen events collection new model nt added collection yet current implementation way get access xhr returned subsequently lost", "d": "1/2014"}, {"body": "see previous tickets getters setters backbone opted leave functionality userland see pretty trivial set style gettersetter style however like", "d": "1/2014"}, {"body": "seems correct interesting note though way currently one bindings without taking one well realworld problem running making note", "d": "1/2014"}, {"body": "mean necessarily problem per say realized personally expected behavior hand see also understandable add twice way thinking ca nt think scenario want execute twice per one event sure plenty situations people want behavior smile always matter opinion however raise valid point remove one however feel like also expected behavior", "d": "1/2014"}, {"body": "however raise valid point objectoff remove one however feel like also expected behavior return event uids solve would break chaining feature eventinheriting objects currently without solid reason break functionality going stay asis closing feel free discuss like", "d": "1/2014"}, {"body": "hi afraid enough information give advice could post working jsfiddlejsbin would bit easier also may want try irc channel mailing list sort issue", "d": "12/2013"}, {"body": "hi braddunbar ok try mailing list irc thanks", "d": "12/2013"}, {"body": "braddunbar ive search ive read articles backbone zombieghost events suggest best way prevent zombieghost think issue thanks", "d": "12/2013"}, {"body": "zombie views views longer attached dom kept memory model collection still reference usually due event handler prevent either stop using modelcollection along view sever ties might already either way fine choice depends situation", "d": "12/2013"}, {"body": "ok thanks", "d": "12/2013"}, {"body": "workaround consist delete url options method initialize initialize function models options delete modelsurl", "d": "12/2013"}, {"body": "believe fixed aka url option removed", "d": "12/2013"}, {"body": "yes collection contained model attribute model parsing method adjusted cast array json objects collection models used url option collection compute url one owning model sorry inconvenience modify code", "d": "12/2013"}, {"body": "inconsistency related state collection stable event called mutating events example would better iterate twice second time event triggering really sure better", "d": "12/2013"}, {"body": "called event event wo nt triggered collection also change sure continue work caseywebdev points comments perhaps unexpected behavior around patch assumed", "d": "12/2013"}, {"body": "would nice model internal state asifremoved time remove event fired took crack nt pass test suite", "d": "1/2014"}, {"body": "jashkenas trying without loops", "d": "1/2014"}, {"body": "yes placing removal line clever spots breaking removereference dice", "d": "1/2014"}, {"body": "hi josejamart xhr object attached passed handler able get whatever need", "d": "12/2013"}, {"body": "thank braddunbar quick response know say nt able resend request xhr object consult object send try modify url request resend nt work need optionsurl restroot rest result backboneajax options try xhr request ajax nt keep headers post data request configurations", "d": "12/2013"}, {"body": "hmm could nt save options though", "d": "12/2013"}, {"body": "yes option logic collection models iterate models saves save server could response error confirmation response error continue saves confirmation show popup user user decision resend request continue others lines error callback afraid state vars call recursively comment try see work", "d": "12/2013"}, {"body": "looking see firebug row backbonejs file var collection backbonecollection function models options models filled json object firebug also shows content options object see url set however model though set collection model", "d": "12/2013"}, {"body": "since thismodel guessing model nt yet available collection created thus ca nt really tell without looking runnable code though provide jsfiddlejsbinetc glad take look", "d": "12/2013"}, {"body": "hey brad added behind row backbonejs indeed works already tried create fiddle however could nt quite get api use working might need say using requirejs load model view collection router looks like gotousers function see well loading scripts require model loaded first create new ofusersmodel case run collectionfetch first time using collections jsfiddle quite new well please let know need anything else thanks help advance edit tried send model fetch like ofuserscollectionfetch model ofusersmdl nt help either also tried ofusersmdl new ofusersmdl ofusersmdl ofusersview new ofusersview ofuserscollection new ofuserscollection however results even timeout seconds wo nt fix problem trying everything see starts working require modelsusers viewsusersview viewsmenuview collectionsusercollection function usersmdl usersview menuview userscollection maybe issue collection might model mean could model although created seen correct type ca nt passed collection consolelog model like require modelsusers viewsusersview viewsmenuview collectionsusercollection function usersmdl usersview menuview userscollection returns function", "d": "12/2013"}, {"body": "see looks like probably requiring model collection module means collection may load model thus get undefined property give shot", "d": "12/2013"}, {"body": "say something like var var userscollection backbonecollectionextend", "d": "12/2013"}, {"body": "sure exactly work code error receiving due missing property", "d": "12/2013"}, {"body": "rebuild script since timeout seconds nt even work model loaded seconds even collection created", "d": "12/2013"}, {"body": "seems like bug zepto fix thread work backbone tends avoid specific fixes dropin replacement libraries like zepto lodash preferring libraries responsible maintaining compatibility reference apis backbone using jquery incorrectly let know reopen inclined think stay zepto", "d": "12/2013"}, {"body": "yap zepto fixed problem sorry trouble", "d": "12/2013"}, {"body": "worries glad solved issue tue dec pm hiraki satoru notifications githubcomwrote yap zepto fixed problem madrobbyzepto sorry trouble reply email directly view github", "d": "12/2013"}, {"body": "also either definition problematic model id like object object know bizarre id nt see backbone impose restrictions id strings beyond uniqueness especially concerned however", "d": "12/2013"}, {"body": "unless type check weird ids like problematic change trivial see struggling justify perf hit seems like kink app design diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs get model set id get function obj obj null return void return thisbyid obj thisbyid objid thisbyid objcid isstring obj isnumber obj return thisbyid obj thisbycid obj return thisbyid objid thisbycid objcid thislength thismodels thisbyid thisbycid thisbyid modelcid model thisbycid modelcid model modelid null thisbyid modelid model modelcollection modelcollection modelon thisonmodelevent internal method sever model ties collection removereference function model options delete thisbyid modelid delete thisbyid modelcid delete thisbycid modelcid modelcollection delete modelcollection modeloff thisonmodelevent", "d": "12/2013"}, {"body": "appreciate edge case likely points design problem bug however nt think add confusion case avoid pulled slight variation caseywebdev approach", "d": "12/2013"}, {"body": "moved", "d": "1/2014"}, {"body": "anyone solved problem id undefined collectionget obj", "d": "2/2015"}, {"body": "try mailing list stack overflow questions like", "d": "12/2013"}, {"body": "possible wo nt tell", "d": "12/2013"}, {"body": "code looks correct without background impossible tell wrong regardless github issues issues backbone inappropriate use personal help desk try mailing list stack overflow", "d": "12/2013"}, {"body": "hey usver backbone issues nt help forum location report bugs pointed stack overflow mailing list example", "d": "12/2013"}, {"body": "freenode irc documentcloud even", "d": "12/2013"}, {"body": "find issue google actually asked question irc documentcloud realy quiet place ps got code working created jsfidle actual app working", "d": "12/2013"}, {"body": "glad got straightened sorry typically try irc channel exactly types questions sign need help", "d": "12/2013"}, {"body": "hi trevorburnham come across case needed use id ids commonly integers uuids hashes experience none likely collide without use case inclined favor niceness consolidated api", "d": "12/2013"}, {"body": "work application users allowed set id certain objects urlsafe string allows restful apis get say citiesvenice instead nt think particularly unusual use backbone dec brad dunbar notifications githubcom wrote hi trevorburnham come across case needed use c id ids commonly integers uuids hashes experience none likely collide without use case inclined favor niceness consolidated api reply email directly view github", "d": "12/2013"}, {"body": "really arbitrary using unique keys etc instead url though completely awesome github everywhere let every resource assigned incrementally database", "d": "12/2013"}, {"body": "trouble working api nt expose database id slug would nt make sense anything slug think reasonable ask anything backbone design would make using slug potentially conflicts obviously wrong nt think believe potential collisions bug", "d": "12/2013"}, {"body": "restrictions user enter id could potentially mix version uniqueid backbone uses generated ensures collisions happen", "d": "12/2013"}, {"body": "restriction slug must urlsafe could avoid collisions using slug would also mean using would override use slug attribute would override well since rely heavily would losing sizable chunk backbone outofthebox functionality", "d": "12/2013"}, {"body": "like note precedent concerned models id surely concerned models id well", "d": "12/2013"}, {"body": "related", "d": "12/2013"}, {"body": "caseywebdev said using anything meaning id regardless api likely cause problems seems case could use nonurlsafe strings cids would think would better override modelurl collectionget suggested implement collectiongetbyslug", "d": "12/2013"}, {"body": "yup overriding trivial already act flexible", "d": "12/2013"}, {"body": "would think would better override modelurl collectionget suggested implement collectiongetbyslug given want maintain efficiency hash lookups overriding implementing separate would mean creating hash collection init listening collection events keep hash updated nontrivial amount work support seems straightforward use backbone natural one using datastore redis generate integer id saving object wontfix due overhead maintaining two hashes perhaps could least make possible override way cids generated replacing line something either defers publicfacing method eg least uses publicfacing prefix eg", "d": "12/2013"}, {"body": "hello agree trevorburnham think id cid two different concepts nt treat way think id real identifier wo nt change independently object stored cid temporary identifier used id present object id importance cid id nt conditioned cid agree better way divide two different hash least give possibility override way cids generated think patch", "d": "12/2013"}, {"body": "originally ids cids split two hashes combined getbycid removed great majority cases simplification worked quite well worth note case actually three way semantic collision causing problem slug id cid getting flattened explicitly implicitly single hash tough call real use cases point ids form c think added api complexity hard justify easy enough seem inappropriate problematic override underscore necessary", "d": "12/2013"}, {"body": "longer usergenerated string perhaps consider adding fast lookups attributes core easy obvious alternative see proposed implementation", "d": "12/2013"}, {"body": "think current behavior desirable apps really want use slug id go tweak uniqueid output suit preferences remember never really use arbitrary strings backbone ids friends spoil day", "d": "1/2014"}, {"body": "went pretty deep rabbit hole trying figure unit tests collection mocked models ids behaving strangely unit tests collection working fine testing collectiontojson matched original mock data unit tests controller always seemed drop model would cool error thrown using id could cause problems least mention constraint documentation", "d": "10/2014"}, {"body": "doc fix would welcome want open pull", "d": "10/2014"}, {"body": "gladly see", "d": "10/2014"}, {"body": "status code docs refers status code nt code generally considered success codes want trigger error", "d": "12/2013"}, {"body": "create short jsfiddle demonstrating issue hard time picturing describing", "d": "12/2013"}, {"body": "model three attributes code label text idattributecode create new elements form user add three attributes try save backbone realizes put instead post set code backbone also set thisid model never new cant post use idattribute models id generated server added user form part least seems correct generating ids client side need redefine purposes right", "d": "12/2013"}, {"body": "hello going try create jsfiddle case order clarify problems sample first question think thisid attribute represents real identifier object initialized attribute combination attributes server shouldt synchronized attribute keep synchronized lost possibility create identifiers form client side cant post calls see sample ca nt change identifier object change set synchronized try request call send new id url body instead old id url new one body think strange case common legacy servers summary think thisid synchronized fetch moment initialize data object thisid keep immovable", "d": "12/2013"}, {"body": "hello braddunbar yes chage solve first problem post benefits keep synchronized thisid atribute giving value", "d": "12/2013"}, {"body": "experience time id changes creating new model would main benefit", "d": "12/2013"}, {"body": "correct views longer attach options instance default empty object relevant discussion contains patch like old behavior always add back constructor", "d": "12/2013"}, {"body": "braddunbar nt think quite issue though called rather solution would rather modifying arguments think make sense", "d": "12/2013"}, {"body": "tgriesser exactly right", "d": "12/2013"}, {"body": "ah completely misread sorry lkochub thanks help tgriesser", "d": "12/2013"}, {"body": "sure problem break code since checking null made nice debugging session", "d": "12/2013"}, {"body": "addressed look", "d": "12/2013"}, {"body": "looks good like making calls extend pick null ie better extend pick options viewoptions", "d": "12/2013"}, {"body": "would ever need pass view", "d": "12/2013"}, {"body": "could see calling may may rather needing use", "d": "12/2013"}, {"body": "would nt better test seems uneccessary", "d": "12/2013"}, {"body": "complex scenarios backbone used foundation another framework general participants behindthecurtains proxy inheritance invocation chain must change input parameters supplied user ie user issued new view null initialize must called null", "d": "12/2013"}, {"body": "number places throughout backbone code count least dozen mutate argument changing behavior view would mean changing model collection router plus methods mutate args well still nt see strong use case default empty object", "d": "12/2013"}, {"body": "huh thought model collection router nt change argument reason make change seem inconsistent certainly agree fairly edge pretty easily fixable either way", "d": "12/2013"}, {"body": "leaving aside philosophical argument happy beers specific change view behavior introduced see original description clearly inconsistent implementation", "d": "12/2013"}, {"body": "consider options guard pretty important feature becomes tedious boilerplate check options every subclass view making change piss lot folks start seeing upgrade lkochub nt think view contract passing arguments unchanged seems fixed bug existed really need able override javascript var myview backboneviewextend constructor function opts thisopts opts backboneviewapply arguments initialize function opts consolelog opts thisopts false", "d": "12/2013"}, {"body": "think fact models collections thing reason enough close one thanks", "d": "12/2013"}, {"body": "understand argument default options object eliminate tedious subclasses default empty object created options object supplied ie new view ie undefined inside view null hand valid value thus preserved consider future releases right understand desire keep behavior consistent views models collections fix thanks", "d": "12/2013"}, {"body": "hi desaxena afraid need bit information assistance", "d": "12/2013"}, {"body": "hi khurramlone please see attack vector describe valid one backbone prevent", "d": "12/2013"}, {"body": "hi since could issue either way redirect slash slash vice versa inclined say tweak taste want trailing slash model urls use following", "d": "12/2013"}, {"body": "understand go either say think setting backbone set either way instead every project wants tailing slashes mode backbone especially lite code changes", "d": "12/2013"}, {"body": "braddunbar thanks awesome quick response", "d": "12/2013"}, {"body": "reason think added many people probably would nt notice redirect happening system adding backbone would raise issue give people better performance", "d": "12/2013"}, {"body": "sure thing nt think add option though need quite options added one every conceivable difference applications think much nicer allow extensionmodification standard idioms eg overriding method options", "d": "12/2013"}, {"body": "ok take back guys ghost", "d": "12/2013"}, {"body": "thanks much please let know turns", "d": "12/2013"}, {"body": "hi jephroni already discussed check see solves issue", "d": "12/2013"}, {"body": "see fixes routernavigate method still working suggesting level breakage expect backbone refactoring massive move reliable library wait see ticket reopen answer given thank joel ephroni senior frontend developer fedmobile cell brad dunbar notifications githubcom replyto jashkenasbackbone reply replygithubcom date tuesday december pm jashkenasbackbone backbone noreplygithubcom cc joel ephroni joelephroni overstockcom subject backbone navigate longer preserves url parameters hi jephroni already discussed check see solves issue reply email directly view github confidentiality notice message intended use review individual entity addressed may contain information privileged confidential reader message intended recipient employee agent responsible delivering message solely intended recipient hereby notified dissemination distribution copying communication strictly prohibited received communication error please notify sender immediately telephone return email thank", "d": "12/2013"}, {"body": "apologies offended nt mean imply anything backbone general issue already discussed think read discussion try code much better informed whether works think issue describing fixed though certain mean", "d": "12/2013"}, {"body": "clear attempt fix breakage describing", "d": "12/2013"}, {"body": "brad thanks clarifying read seemed using solution would involve tracking places code rely navigate navigate actual url given refactor differently relatively time consuming thing feel misunderstood solution joel ephroni senior frontend developer fedmobile cell cid brad dunbar notifications githubcom replyto jashkenasbackbone reply replygithubcom date tuesday december pm jashkenasbackbone backbone noreplygithubcom cc joel ephroni joelephroni overstockcom subject backbone navigate longer preserves url parameters clear attempt fix breakage describing reply email directly view github confidentiality notice message intended use review individual entity addressed may contain information privileged confidential reader message intended recipient employee agent responsible delivering message solely intended recipient hereby notified dissemination distribution copying communication strictly prohibited received communication error please notify sender immediately telephone return email thank", "d": "12/2013"}, {"body": "nt think would change calls maybe could provide example call try code", "d": "12/2013"}, {"body": "please use stackoverflow mailing list irc channel questions like", "d": "12/2013"}, {"body": "please refer search keyword detail refer change log", "d": "12/2013"}, {"body": "thanks appleboy", "d": "12/2013"}, {"body": "thanks appleboy", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "hi misterjt active discussion check mean clicking link url current page use case", "d": "12/2013"}, {"body": "thank dont mean clicking navigation carried method mean call method url current useful situation content depends session option changes websocket request aftet session option changed need reload page current url", "d": "12/2013"}, {"body": "correct calling identical fragment effect good thing means call without worrying many times however work around calling need give shot let know nt work", "d": "12/2013"}, {"body": "think good thing somebody call repeatedly means need unnecessarily bad programmer wrote bad architecture application means got ta change something architecture make world better turns helped programmers curves hands created obstacle normal programmers found solution problem every call bad workaround", "d": "12/2013"}, {"body": "look think also fixed master branch", "d": "12/2013"}, {"body": "thanks tried master branch indeed fixed sorry redundant issue", "d": "12/2013"}, {"body": "hi backbone designed let swap persistence layer overriding check popular localstorage plugin search yields promising options jquerycookie dep", "d": "12/2013"}, {"body": "mponizil right great place start", "d": "12/2013"}, {"body": "backbone nt internally distinguish status codes collectioncreate adds model collection prior syncing unless passed option might want check response including right data seeing success callback trigger create", "d": "11/2013"}, {"body": "result jquery handling workaround found perhaps could incorporated", "d": "11/2013"}, {"body": "thanks following one thing post stuck however backbone uses jquery ajax method treat anything nt code error unfortunately true jquery treat status code success take peek relevant line jquery", "d": "11/2013"}, {"body": "nope request actually nt something backbone control hook override need tell jquery specifically need way headers", "d": "11/2013"}, {"body": "find change log faq much useful regular basis", "d": "11/2013"}, {"body": "concur", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "solid meh current format doesnt displease much use sidebar table contents browser find jump later sections", "d": "11/2013"}, {"body": "sounds fine feel free move faq", "d": "11/2013"}, {"body": "hi tonnzor already discussed patched would mind looking see would satisfy requirements", "d": "11/2013"}, {"body": "hey try stackoverflow answer question others might welcome world programming", "d": "11/2013"}, {"body": "hello first thank nice welcomed warmly expansive virtual community advice google stackoverflowstackexchange come across answer answers however still incomprehensible least current skill levelknowledge leads understand deeper meaning term hacker suppose nothing clear cut matter learningfiguringexperimenting fly much respect programmers", "d": "11/2013"}, {"body": "lot learning experimenting first many concepts higher barier entry others try go meetup city ask techie friends advice good luck nov notifications githubcom wrote hello first thank nice welcomed warmly expansive virtual community advice google stackoverflowstackexchange come across answer answers however still incomprehensible least current skill levelknowledge leads understand deeper meaning term hacker suppose nothing clear cut matter learningfiguringexperimenting fly much respect programmers reply email directly view github", "d": "11/2013"}, {"body": "nope passing object basis see first line factory function define call need return object make requireaware test", "d": "11/2013"}, {"body": "curious logic determining module exports lives function requirejs", "d": "11/2013"}, {"body": "absolutely right thanks clarification", "d": "11/2013"}, {"body": "thanks strictly following semantic versioning would nt work well backbone given project almost surface area little internals almost given change patch pull request backbone breaks backwardscompatibility small way even folks relying previously undefined behavior strictly followed semantic versioning would probably backbonejs nt help anyone evaluate actual progress project like joke semantic versioning romantic versioning given version number majorminorpatch increment major version make major new release significantly update andor stabilize api minor version add minor new features patch version make tiny changes likely go unnoticed allows folks immediately upon hearing new release get rough sense scope backwards compatibility ideally every release even major ones backwardscompatible ca nt api changing done way nt difficult upgrade avoiding change api waiting major release ready would terrific impediment progress alternative frequently incrementing major version number incredibly unhelpful honestly prefer simpler scheme used version numbers like desktop applications worry breaking package managers tooling", "d": "11/2013"}, {"body": "problem backbone sent chrome", "d": "11/2013"}, {"body": "spadgos question version numbers arbitrary reason agile web apps trying keep within ranges oses many apps freak going past projects modeling windows linux etc yearmultiyear dev cycles release big deal agile project moves quickly incrementing quickly makes sense", "d": "11/2013"}, {"body": "also disagree reasoning behind marionette right best follow strict semantic versioning far nt issues even though surface area well added new features fixed bugs still compatible deferred tickets release api expected behavior breaking changes major releases breaking changes nt happen every week pull request accepted pooled major release encompass enough value large release major version bump stands breaking compatibility release causes lot pain plugin addon developers like marionettejs team backfill behaviors patches code remain viable fun situation ripple effects core library like backbone breaking changes enormous backbone affected", "d": "11/2013"}, {"body": "agree seems like case nt want rather ca nt breaking changes real sense urgency could waited major version update nt want problem biggest problem backbone respecting semver among things teaching evangelizing backbone great tell group students potential customers everything stack going work certain way except backbone always two huge caveats evangelizing backbone amd box nt respect semver nt take version numbers seriously one fixed let fix", "d": "11/2013"}, {"body": "honestly prefer simpler scheme used bigsmall version numbers like desktop applications worry breaking package managers tooling jashkenas could always leave digit probably map semantically semver little closer right maybe tamp passiveaggressive cryptopolitical sniping somehow technically wrong follow semver think bob point right important clearly articulate system follow irrespective system follow ps mean imply keithamus issue passive aggressive sorry came way definitely legit discuss backbone communicates changes users", "d": "11/2013"}, {"body": "semver primarily interested version given piece software index progress compatibility generally expect things mostly stable working version numbers largely meaningless indicators progress software x version may much less mature fewer features software version want know progress piece software look changelog roadmap knowing backbone whatever means nothing terms features however mean upgrade without anything breaking", "d": "11/2013"}, {"body": "strictly followed semantic versioning would probably backbonejs nt help anyone evaluate actual progress project minor maybe nonexistent problem following semver big problem", "d": "2/2014"}, {"body": "semver musthave big project", "d": "2/2014"}, {"body": "knowtheory looks bit odd think would fine one would get surprise breakage", "d": "2/2014"}, {"body": "cares version numbers high standard use use nt even understand discussion going long", "d": "2/2014"}, {"body": "would prevented issues problems others w several backbone releases", "d": "2/2014"}, {"body": "braddunbar rest reasons sounds like valuing aesthetics version number actual meaning", "d": "2/2014"}, {"body": "thanks strictly following semantic versioning would nt work well backbone think backbone working well users dependency management following semver would", "d": "2/2014"}, {"body": "frequent releases would help catch showstopper bugs faster think much ask people constantly run edge versions backbone get bugfixes need", "d": "2/2014"}, {"body": "derickbailey example since idea behind patch releases fixes needed", "d": "3/2014"}, {"body": "packages npm bower nt even debate publish package npm bower semver part api contract enter break contract break modules depend break production code depends module question use semver question want good citizens ecosystem answer advertised loudly clearly safe install package like would package follows api contract", "d": "6/2014"}, {"body": "publish package npm bower semver part api contract enter onerous requirement", "d": "6/2014"}, {"body": "interested perspective semver know jashkenas thoughts", "d": "6/2014"}, {"body": "yes npm assumes packages repository follow semver determines packages compatible doc version must parseable nodesemver bundled npm dependency npm install semver use version numbers lie interpreted semver correct parsing thus breaking contract breaking compatibility people use package versions npm ecosystem matter personal preference matter package interoperability possible force package play nice nt use semver sure nt call loudly boldly top readme users know necessary introduce breaking change code could easily break publish packages package repositories versioning becomes part interoperability contract ignore contract peril users", "d": "6/2014"}, {"body": "onerous requirement knowing thousands packages go full blown application onerous requirement forcing users tightly lock versions packages handful modules nt follow rules onerous requirement complicates matter keeping bug fixes security patches etc good reasons follow semver package number might get really big terrible reason use semver tracking progress application distant second reason package versions important function version know version work application btw package number would get really big maybe code smell bump major version make breaking change breaking change definition one breaks openclosed principle open extension closed breaking changes good apis follow openclosed principle closely reasonably users keep pace api changes nt break existing code", "d": "6/2014"}, {"body": "think lesson learned nt use pulling backbone via packagejson", "d": "6/2014"}, {"body": "interested perspective semver general agree arguments wonder bumping major version best course action every breaking change underscore mostly surface area lot underscore used great deal thirdparty libraries requiring keep huge versions would onerous perilous package released today depend underscore version pin dependencies expense perhaps requiring separate underscore main project think lesson learned nt use pulling backbone via packagejson yep", "d": "6/2014"}, {"body": "think lesson learned nt use pulling backbone via packagejson outlined takeaway lesson", "d": "6/2014"}, {"body": "think lesson learned nt use pulling backbone via packagejson consequence protect code breaking lesson would like following semver good everyone", "d": "6/2014"}, {"body": "appreciate value romantic versioning bad nt coexist well noted always projects nt follow semver strictly attempt fall short system always leaks little least backbone generally good breaking things", "d": "6/2014"}, {"body": "dgbeck things break time per versions see earlier comment think value following semver really talked fact guys push minor features bug fixes allow people depends upstream get changes free great value add obviously comes cost complexity maintainer", "d": "6/2014"}, {"body": "hi mikecar definitely aware issue inclined call intentional point search issues find lots changes devoted tracking across events like finally settling simpler version exists advice would create sort loop tracking difficult experience worth effort going close unless tgriesser thinks reopen worms", "d": "11/2013"}, {"body": "haha never something happening real code app probably something wrong", "d": "11/2013"}, {"body": "find response strange happening five lines code anything illegal according docs point point library misused really want tolerate hole easily fixable brad dunbar mailto notifications githubcom sent tuesday november pm jashkenasbackbone cc cariotoglou mike subject backbone infinite loop change event hi mikecar definitely aware issue inclined call intentional point search issues find lots changes devoted tracking across events like finally settling simpler version exists advice would create sort loop tracking difficult experience worth effort going close unless tgriesser thinks reopen worms reply email directly view github singularlogicdisclaimer notice \u03b7 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1 \u03b1\u03c5\u03c4\u03ae \u03b5\u03bd\u03b4\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03bc\u03c0\u03b9\u03c3\u03c4\u03b5\u03c5\u03c4\u03b9\u03ba\u03ae \u03c3\u03b5 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03b4\u03b5\u03bd \u03b5\u03af\u03c3\u03b1\u03c3\u03c4\u03b5 \u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7\u03c2 \u03c3\u03b1\u03c2 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03cc\u03c4\u03b9 \u03b1\u03c0\u03b1\u03b3\u03bf\u03c1\u03b5\u03cd\u03b5\u03c4\u03b1\u03b9 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03b4\u03b9\u03b1\u03bd\u03bf\u03bc\u03ae \u03b1\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1\u03c2 \u03ae \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ce\u03bd \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c3\u03b1\u03c2 \u03c0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03c3\u03b5\u03c4\u03b5 \u03ba\u03b1\u03c4\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c4\u03bf\u03bd \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ad\u03b1 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03b2\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ae \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03c1\u03ad\u03c8\u03b5\u03c4\u03b5 \u03c4\u03c5\u03c7\u03cc\u03bd \u03b1\u03bd\u03c4\u03af\u03b3\u03c1\u03b1\u03c6\u03ac \u03c4\u03b7\u03c2 communication may confidential intended recipient please note form distribution copying use communication information prohibited please inform sender appropriately delete destroy copies system", "d": "11/2013"}, {"body": "like said also mindset one point particular rabbit hole quite long would love accept patch fixes simply feel free submit one", "d": "11/2013"}, {"body": "turns spoke quickly probably never simple solution case posted creates race condition would require redefinition change event even addressable let alone solvable sorry brad dunbar mailto notifications githubcom sent wednesday november jashkenasbackbone cc cariotoglou mike subject backbone infinite loop change event like said also mindset one point particular rabbit hole quite long would love accept patch fixes simply feel free submit one reply email directly view github singularlogicdisclaimer notice \u03b7 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1 \u03b1\u03c5\u03c4\u03ae \u03b5\u03bd\u03b4\u03ad\u03c7\u03b5\u03c4\u03b1\u03b9 \u03bd\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03b5\u03bc\u03c0\u03b9\u03c3\u03c4\u03b5\u03c5\u03c4\u03b9\u03ba\u03ae \u03c3\u03b5 \u03c0\u03b5\u03c1\u03af\u03c0\u03c4\u03c9\u03c3\u03b7 \u03c0\u03bf\u03c5 \u03b4\u03b5\u03bd \u03b5\u03af\u03c3\u03b1\u03c3\u03c4\u03b5 \u03bf \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf\u03c2 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7\u03c2 \u03c3\u03b1\u03c2 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03bd\u03bf\u03c5\u03bc\u03b5 \u03cc\u03c4\u03b9 \u03b1\u03c0\u03b1\u03b3\u03bf\u03c1\u03b5\u03cd\u03b5\u03c4\u03b1\u03b9 \u03bf\u03c0\u03bf\u03b9\u03b1\u03b4\u03ae\u03c0\u03bf\u03c4\u03b5 \u03b4\u03b9\u03b1\u03bd\u03bf\u03bc\u03ae \u03b1\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03b5\u03c0\u03b9\u03ba\u03bf\u03b9\u03bd\u03c9\u03bd\u03af\u03b1\u03c2 \u03ae \u03ba\u03b1\u03b9 \u03c4\u03c9\u03bd \u03c0\u03bb\u03b7\u03c1\u03bf\u03c6\u03bf\u03c1\u03b9\u03ce\u03bd \u03c0\u03bf\u03c5 \u03c0\u03b5\u03c1\u03b9\u03ad\u03c7\u03bf\u03bd\u03c4\u03b1\u03b9 \u03c3\u03b5 \u03b1\u03c5\u03c4\u03ae \u03c3\u03b1\u03c2 \u03c0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03bf\u03cd\u03bc\u03b5 \u03bd\u03b1 \u03b5\u03bd\u03b7\u03bc\u03b5\u03c1\u03ce\u03c3\u03b5\u03c4\u03b5 \u03ba\u03b1\u03c4\u03ac\u03bb\u03bb\u03b7\u03bb\u03b1 \u03c4\u03bf\u03bd \u03b1\u03c0\u03bf\u03c3\u03c4\u03bf\u03bb\u03ad\u03b1 \u03ba\u03b1\u03b9 \u03bd\u03b1 \u03c3\u03b2\u03ae\u03c3\u03b5\u03c4\u03b5 \u03ae \u03bd\u03b1 \u03ba\u03b1\u03c4\u03b1\u03c3\u03c4\u03c1\u03ad\u03c8\u03b5\u03c4\u03b5 \u03c4\u03c5\u03c7\u03cc\u03bd \u03b1\u03bd\u03c4\u03af\u03b3\u03c1\u03b1\u03c6\u03ac \u03c4\u03b7\u03c2 communication may confidential intended recipient please note form distribution copying use communication information prohibited please inform sender appropriately delete destroy copies system", "d": "11/2013"}, {"body": "hi agree issue feels wrong unexpected nevertheless completely rational realize happening happens events actually async let explain little set methods finishing trigger change event get computed finishing change callback basically change event gets fired time creating infinite loop seeing couple solutions issue code looks like want create computed property property depends get value case try reacting change also silence setting avoid behaviour like finally passed using attributes directly personally would nt getting way things turn get hard debug later hope help cheers", "d": "11/2013"}, {"body": "good catch docs page generated docco far tell nt accept custom favicon without using custom template might worth adding feature", "d": "11/2013"}, {"body": "underscoreorg faviconico file domain root backbone subdir behavior deprecated little cleaner put rest docs assets nt see harm moving root objections anyone edit dminkovsky pointed favicon shows underscoreorg annotated docs", "d": "11/2013"}, {"body": "moving root", "d": "11/2013"}, {"body": "thanks much", "d": "11/2013"}, {"body": "faviconico added bowerjs ignore list longer covered docs entry", "d": "1/2014"}, {"body": "good call", "d": "1/2014"}, {"body": "looks really backbone related issue looks like question another lib jquery related maybe try", "d": "11/2013"}, {"body": "think wrong project", "d": "11/2013"}, {"body": "maybe looking", "d": "11/2013"}, {"body": "hi ygaradon unfortunately one discussed several times likely change please see good summary issues involved", "d": "11/2013"}, {"body": "interesting idea nt think good", "d": "11/2013"}, {"body": "oh nt know could yes good", "d": "11/2013"}, {"body": "nt work defined function opposed hash seems like would safer also attributes nt default value changed might want call first going trigger bunch needless change events", "d": "11/2013"}, {"body": "forgot put front", "d": "11/2013"}, {"body": "oops silly guess happens code several languages simultaneously forget little significant things every thank much help", "d": "11/2013"}, {"body": "due gt", "d": "11/2013"}, {"body": "hi joaonuno backbone attributes javascript objects hood meaning property exists empty object used attribute key see issue details", "d": "11/2013"}, {"body": "ok see problem would get constructor attribute even without setting js works issue pointed year old issue reporting appeared month ago implying backbone allow constructor attribute js objects also instance outputs test expected nt js new backbonemodel constructor test mget constructor gets object constructor function vs new backbonemodel mset constructor test mget constructor gets test thank", "d": "11/2013"}, {"body": "interesting seems caused change whereas previously see behavior set defaults model see regardless despite bug still think current behavior correct js object nt hash reverting old behavior would make bug appear time also undesirable hinted issue changing use ultimate longterm solution oldie support final say", "d": "11/2013"}, {"body": "myklemykle think something wrong implementation nt need pass trigger false default trigger route logic simply update url history perhaps using links like blah case browser trigger route unless default prevented happening need catch click using events hash view eventpreventdefault stop route triggering update url history routernavigate hope helps", "d": "11/2013"}, {"body": "agreed route logic triggered trigger false default nt passed pass pass makes zero difference happens call routernavigate somepath code clicking happening point trying add history however routernavigate updates url hash causes browser issue hashchange event historystart called without pushstate true installed hashchange listener router catches hashchange event triggers route even though supposed trigger route", "d": "11/2013"}, {"body": "myklemykle check leading slash see", "d": "11/2013"}, {"body": "using leading hashes though prevent browser window dancing around", "d": "11/2013"}, {"body": "leading hash probably least one problems nt right place debugging help try irc channel instead", "d": "1/2014"}, {"body": "issue removed leading seems working jashkenas another post read removal leading slash handled automatically incorrect", "d": "2/2014"}, {"body": "leading hash seems problem leading slash since got rid working properly", "d": "2/2014"}, {"body": "issue got rid leading slash working properly", "d": "6/2014"}, {"body": "add working version change log says many optimizations bug fixes including url overrides mutation options bulk ordering trailing slashes edgecase listener leaks nested model parsing already solved latest version change log nt clarify detail", "d": "11/2013"}, {"body": "solved released", "d": "11/2013"}, {"body": "thanks noticing", "d": "11/2013"}, {"body": "perhaps misunderstand misunderstanding question docs unified respect avoid confusion case would try contribute improvement previous pull request corrected issue end merged makes unclear guess thanks noticing means yes", "d": "11/2013"}, {"body": "patch linked fix issue eyes feel free send pull request", "d": "11/2013"}, {"body": "misunderstanding turns thanks", "d": "11/2013"}, {"body": "targetmodel", "d": "11/2013"}, {"body": "changing false pending false previousattributes object attributes object changed object cid id null proto surrogate attributes default properties defined model id null title default title", "d": "11/2013"}, {"body": "really meant nt breaking unless setting something strange collection model property feel free send pr reproducible failing test case like pursue otherwise better luck irc stackoverflow mailing list", "d": "11/2013"}, {"body": "looks like setting instance rather constructor function target model try passing instead example also see docs", "d": "11/2013"}, {"body": "use bind underscore collection debugged code lose prototype model moment use bindall initialize method", "d": "12/2013"}, {"body": "hi arcanis one proposed several times still nt think direction go event handlers hash cleaned removing element dom via large part convenient global events would cleaned would require special dispensation given rarity sort thing departure current semantics think best bind manually", "d": "11/2013"}, {"body": "well quick thanks", "d": "11/2013"}, {"body": "would interested dropping dependencies maybe jquery certainly happy try optionally dropping jquery patchedin versions work properly even browsers like case", "d": "11/2013"}, {"body": "need investigate support support keep mind bring board backboneutilsajax backboneutilsmatchesselector view delegate undelegate native methods increase lib size take look exos source code implemented", "d": "11/2013"}, {"body": "fine except use native matchesselector means support correct", "d": "11/2013"}, {"body": "right guess polyfill", "d": "11/2013"}, {"body": "elementparentnodequeryselector example", "d": "11/2013"}, {"body": "problem jquery basically set great polyfills tightly coupled together jquery core takes lot time extract one need", "d": "11/2013"}, {"body": "true use queryselectorall mean dropping support", "d": "11/2013"}, {"body": "could nt people even use bare sizzle fallback jquery need ie lt compat something", "d": "11/2013"}, {"body": "right people could use jquery interested see pull request might look like", "d": "11/2013"}, {"body": "discussing footprint performance jquery keep mind jquery already smallerfaster nt care old ie", "d": "11/2013"}, {"body": "invalid argument since benchmarks size footprint reduce maybe nov phil freo notifications githubcom wrote discussing footprint performance jquery keep mind jquery already smallerfaster nt care old ie reply email directly view github", "d": "11/2013"}, {"body": "pardon missed something seems backbone dependent jquery small subset api nt already possible replace whatever api compliant shim like", "d": "11/2013"}, {"body": "nope would mean including another pseudojquery library functional think firstclass support native dom alternative better nov brad dunbar notifications githubcom wrote pardon missed something seems backbone dependent jquery small subset api nt already possible replace whatever api compliant shim like backbone whateveryoulike reply email directly view github", "d": "11/2013"}, {"body": "agree paul ever tried create small subset jquery would compatible ajax events api example apis crucial backbone application easier go jquery reason jquery api bloated contains much parameters covers much cases would nice backbone define smaller subset jquery api would much easier create shim", "d": "11/2013"}, {"body": "afraid still nt understand different using instead bikeshedding relative merits jquery api define whatever subset jquery api like", "d": "11/2013"}, {"body": "braddunbar saying", "d": "11/2013"}, {"body": "main point good minimal shims existence follow requirement jquery api compatible backbone nt need compatibility anyway declaration bit frustrating developers really want go minimum total size ca nt sure shim craft enough better minimal show subset jquery api really needed ie params actually required url optionssuccess returning promise required etc goes events api element creation api could way check ajax present use provide minimal functional fallback", "d": "11/2013"}, {"body": "braddunbar propose create library emulates jquery api still wrapper simple cover custom wrapper cases within backbone impossible cover cases libraries dependent backbone example marionette may use strange jquery method undefined simple plugins use native methods wrapper unnecessary slowdown still need create views time", "d": "11/2013"}, {"body": "could way check ajax present use provide minimal functional fallback would nt mean case defined would use jquery api sort defeats purpose dropping jquery api completely favor builtin solution would things differently potentially faster", "d": "11/2013"}, {"body": "simple cover custom wrapper cases within backbone impossible cover cases libraries dependent backbone agree nt understand creating new api solves problem", "d": "11/2013"}, {"body": "foxbunny use jquery api parameters cases builtin solution faster much less code allow drop jqueryzepto dependencies add really need features builtin solution provides", "d": "11/2013"}, {"body": "agree nt understand creating new api solves problem", "d": "11/2013"}, {"body": "speed red herring doubt going find meaningful difference actually compatible comparison sending pull request jquery interesting idea would backbone potentially ship functional state without load jquery nt need dom manipulation backbone box seems like might possible finally braddunbar quite right could either take form set internal functions value implements exactly thing nothing magic naming practice two approaches equivalent", "d": "11/2013"}, {"body": "also worth pointing jquery dom manipulations ajax xhr wrapper pretty important nontrivial", "d": "11/2013"}, {"body": "ajax xhr wrapper pretty important nontrivial fifty lines code enough production systems", "d": "11/2013"}, {"body": "doubt going find meaningful difference wat stuff takes takes without jquery noticeable users", "d": "11/2013"}, {"body": "arguments file size dom performance pretty weak seemed contrived micro benchmarks provide real world implications something takes jquery nt intentionally poorly designed refactoring jquery would noticeably increase performance thoughts hugely breaking change sure get unit tests pass explicit contract implicit one promised documentation real world usage basically remove jquery becomes useless backwards breaking deferreds gone breaking implicit contract sure could add stuff back bother jquery already significantly better tested widely accepted anything could write", "d": "11/2013"}, {"body": "woundt first backwardsincompatible change hurt someone code", "d": "11/2013"}, {"body": "solid point thanks", "d": "11/2013"}, {"body": "plus could always wrap jquery wish possibly subclass monkey patch class either standard cure backwardsincompatible changes backbone nt bad get used", "d": "11/2013"}, {"body": "everything tbranyen said woundt first backwardsincompatible change hurt someone code let play hurt feelings game guys removing substantial extreme change ignored imho think healthy project something like exoskeleton makes api work without extra deps pull logic without really good reason would harmful project", "d": "11/2013"}, {"body": "substantial extreme change use jquery like substantial remove actually using gone", "d": "11/2013"}, {"body": "nt get exist currently jquery wo nt exist projects without jquery cares", "d": "11/2013"}, {"body": "paulmillr think valid concerns api consistency related upstream dependencies point examples widely used libraries frameworks optin pieces api based deps present", "d": "11/2013"}, {"body": "understand one introduced something new nt invent good point", "d": "11/2013"}, {"body": "paulmillr nt think asking unreasonable question need try ravage rapier wit seriously though api optional components based dependencies included seems make code documentation complex", "d": "11/2013"}, {"body": "every change comes sacrifice slightly complex docs api code sacrifice willing make produce real value real apps app speed page load speed want backbone stay current state instead evolving fine", "d": "11/2013"}, {"body": "want backbone stay current state instead evolving fine paulmillr nt need ad hominem anything interested finding precedent elsewhere taking added complexity crusade type prefer speak point pretty clear guess totally prerogative", "d": "11/2013"}, {"body": "also original request still stands lots talk proof someone word", "d": "11/2013"}, {"body": "need worry nothing ticket yet nothing real debate tranquilo ya asked paulmillr submit exoskeleton ideas pr kind enough particular idea allow backbone function including views ajax without mandatory inclusion jquery might turn well might let wait see pull request jumping conclusions would nt backwardsincompatible features api would stay exactly jquery present page closing ticket gone rails bit looking forward first draft pull request", "d": "11/2013"}, {"body": "paulmillr using ender backbone projects works beautifully build jquery using components backbone needs weighs around vs jquery", "d": "11/2013"}, {"body": "another approach could really nice without adding loc backbone people want include jquery would determining exactly jquery modules necessary backbone function optional instructions custom build jquery required modules see also example including modules able build jquery version comes lt gzipped", "d": "11/2013"}, {"body": "think point great web community run jquery parallel standard vanilla js even gzipped great could get extra paul pull adds loc", "d": "11/2013"}, {"body": "oh sadness late party glad someone else attempting address issue well read comment skipped apologize advance long comment need relay experience performance drop using jquery real especially collection views create large number backboneview instances naively eager creation new jquery context every backboneview initialization slows things enormously agree probably nt many applications create large number gt view instances horrible performance degradation jquery brings affect types apps quite negatively note taking desktop browsers mobile creating around view instances introduce quite noticeable lag real world example try sorting backgrid example grid jquery contexts backing sorting right destroy recreate could done smarter way without recreating views probably guess backgrid refresh automatically upon resetting backing collection collection reset rows cells destroyed recreated anyway creating measly number jquery contexts takes gt fast laptop gt takes total time spent js chrome according halfass attempt reimplement mostly compatible backboneview get rid jquery found hardest things reimplementing compatible method native methods nt support namespacing problems bookkeeping works everything implementation works except event delegation compatibility breaks lot things crucial get right compatible think doable necessary introduce flag view allow opting jquery large apps jquery mostly works fine except portions portions opt use native code speed things default opt nt assume always chainable anymore delegate view nt using jquery make jquery optional picks uses automatically default like let introduce another deferredpromisefuture whatever may chainable anymore pointless backbone nt use successerror callbacks already nt want jquery need deferred drop instead embedding yet another deferred object backbone large enough app probably half dozen incompatible versions embedded different libraries anyway however jquery detected automatically access like create eagerly view opts jquery andor create view instance nt using jquery nt whole point people replace point people one many jqueryajax extractions docs people want use backbone without jquery still default jquery detected need reimplement jqueryajax nt big bearing performance issues result largely compatible backbone interface slightly larger backbone file size reimplementation allows possibility much much faster backboneview instance creation much smaller total js file size btw similar attempts removing jquery dependency done lot like implementation much less ambitious line backbone philosophy", "d": "11/2013"}, {"body": "nt whole point backboneajax people replace point people one many jqueryajax extractions docs people want use backbone without jquery backboneajax still default jquery detected need reimplement jqueryajax nt big bearing performance issues great point might make sense leave ajax backbone proper using jquery works going vanilla route recommended dropin nt assume always chainable anymore delegate thiselqueryselectorall view nt using jquery think best leave find using jquery use native qsa nt use jquery nt use overwrite let introduce another deferredpromisefuture whatever leave ajax wo nt interested performance implications backbonenative since essentially implementing small surface area jquery minus sizzle promises namespaces etc etc also creating new contexts also one layer abstraction native dom methods simply comply basics backbone api needs means always going fail level abstraction either complex complete enough", "d": "11/2013"}, {"body": "reserved jquery fine may confuse people already know delegates jquery might think aliases delegates ok keeping reserved jquery long jquery context created constructor branch native code jquery play instance completely reimplement use native dom methods maintain compatibility existing code", "d": "11/2013"}, {"body": "names native methods since spec replacing nt implemented widely makes sense consistent short concise names backbonenative supports nt like layers dom abstraction backbone reasons mentioned", "d": "11/2013"}, {"body": "also agreed putting extra dom helper methods replacing qs qsa accept different arguments behave differently return different things also even draft status damn long calling succinct concise understood immediately without creating confusion like calling variables xmlhttprequest", "d": "11/2013"}, {"body": "added exoskeleton support backgrid benchmark resorting example table clicking first row resort env things slower see jquery natively exoskeleton took five minutes searchandreplace make changes backgrid yields perf increase optimised done today production app ofc take bit time wrappers shit nothing", "d": "11/2013"}, {"body": "pretty much done perf branch haha goal get less ca nt happen eagerly creating jquery context within constructor jquery also culprits majorly slow things", "d": "11/2013"}, {"body": "wyuenho results branch main env results env exoskeleton less", "d": "11/2013"}, {"body": "nice", "d": "11/2013"}, {"body": "try stackoverflow mailing list kind question answer says change event wo nt fire select element loses focus", "d": "11/2013"}, {"body": "even select element lost focus dom event truly fired event handler attached view events option wo nt called attach event handler using ways works fine ps case occurs firefox maybe old browsers even works well nt matter kind element use select text field text area", "d": "11/2013"}, {"body": "let tag em close em", "d": "11/2013"}, {"body": "tests", "d": "11/2013"}, {"body": "fixed small omission indicate drop support", "d": "11/2013"}, {"body": "hi well use syntax know attributes changed since event triggered changed", "d": "11/2013"}, {"body": "dynamic assignment assuming arguments passed change attribute event model gt model changed gt instead value key attributekey value attributevalue options gt options javascript var myhandler function model changed options switch changedkey case pos case deep dosomething model changed options break case distance case height dosomethingelse model changed options break case x case break default dosomethingbydefault model changed options modeldefaults foreach function v k modelon change k myhandler mycontext moment achieve create handler case", "d": "11/2013"}, {"body": "case alshten hinted still access key scope closure give try see works", "d": "11/2013"}, {"body": "well case still loop way javascript var myhandler function model attributevalue options attributekey modeldefaults foreach function v k modelon change k partial myhandler k mycontext ca nt see case would want case would always prefer manually adding handler attribute rather writing loop", "d": "11/2013"}, {"body": "thanks every model nt fixed sometimes add remove attribute ca nt always manually add handler using partial could solution hack term perfomance without preferable stop listening test case need examples need store reference association play hash something stop listening aim reduce mess augment nt understand pass key value good choice even listening one model full model passed argument part even store options options passed arguments good points changed attribute treated differently pass full attribute part value give model key able find value store every changed attributes new value previous value make evry comparaison need pass key value impossible find key think better full information key value semi information value", "d": "11/2013"}, {"body": "considered attaching handler event using javascript var myhandler function model value options modelhaschanged pos modelhaschanged deep dosomething model value options return modelhaschanged distance modelhaschanged height dosomethingelse model value options return modelhaschanged x modelhaschanged return dosomethingbydefault model value options modelon change myhandler mycontext never used assume use way saying passing key value bad design point ca nt see relevant example would want dynamically assign handler attribute change event nt know name since think generating attribute names dynamically would bad design cases least never experience interested see real world example would", "d": "11/2013"}, {"body": "seem focalized test case better understanding need test case simplicity know advance attribute name case create remove attributes flow attach event detach event change different actors modify model instead looping find changed attribute using different lot functions easier provide key value better performances see examples simple way achieve logic tell made change give modified object modified value fend find held imagine changed town name usa new name great town possible find moment localy modified source add line private event name achieve ultime solution cause ultime solution come source demand regression functionality removing adding performance client side see many propattrfunction exist backbone related retreive changed attributes easily best thing according provide spirit rest gt complete model complete options please complete attribute", "d": "11/2013"}, {"body": "said previous message handler also use retrieve fields changed looks like exactly need without changing value parameter passed callback still think nt make sense attribute key parameter using syntax either use event get changed attributes use syntax handler listening one attribute means know attribute changed", "d": "11/2013"}, {"body": "wrote another test case collection objects kind updated timessecond key provided would allow avoid lot mess increase performance backbone loop changed attributes providing loop backbone loop need create contexted function preserve find key play hash key function stop listening key provided maybe unusual way use model works like need key becomes argument perfect still think nt make sense attribute key parameter using change attr disagree think staying phylosophy provide model listening provide complete attribute key value even listening key callback nt know key listening nt understand nt make sense trying model still think nt make sense model parameter using modelon making sense means know attribute changed sorry human know callback nobody know providing key permit one handler many keys impossible providing value force people use many functionshandlers keys launch common functions thinking everything goes value also based keys provide key nt use function attributes property etc find key set complete model model keys loop search attributes find one need provided another example logical backbone write event triggered times know wich one triggered event need search create routine find one attra attrb together passing key nt search spend superflus things avoided", "d": "11/2013"}, {"body": "hello see tagged invalid explications invalid want know understanding thanks", "d": "11/2013"}, {"body": "question nt appropriate bug tickets", "d": "11/2013"}, {"body": "ok thank answer agree bug means longer think question closed invalid hope", "d": "11/2013"}, {"body": "one year reexamine position please", "d": "9/2014"}, {"body": "used either model passed model directly search property case since undefined property dutifully return object id shortcircuiting rest evaluation got good use case might make sense change internal behavior otherwise might try using null another placeholder id attributes", "d": "11/2013"}, {"body": "oops nt see caseywebdev edit bus wifi nicely done", "d": "11/2013"}, {"body": "ran bug production application upgrading hope see release soon", "d": "12/2013"}, {"body": "think temporary workaround nt cause unexpected behavior guarantee dealing pretty fundamental internals setting nested set call nested set gives expected behavior change callback cares single nesting think work set events trigger deeper nesting well nt tested using example would look like technically case single nesting setting pending false set event right thing confident incorrect cases people want nest fire oncehave chained change callbacks", "d": "11/2013"}, {"body": "sorry lean braddunbar got bright ideas believe used recursive bit used work property even things", "d": "11/2013"}, {"body": "diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs changeslength thispending true changeslength thispending options var l changeslength lt l thistrigger change changes current changes options changing return silent thispending options thispending thispending false thistrigger change options nt test came head reading issue", "d": "11/2013"}, {"body": "interesting bandwidth moment take look", "d": "11/2013"}, {"body": "caseywebdev would simply reverse wrongness options passed callback think external one needs first options inner one second", "d": "11/2013"}, {"body": "jashkenas added test case unless test wrong seems work", "d": "11/2013"}, {"body": "nicely tested indeed", "d": "11/2013"}, {"body": "good stuff clear though still fail one call since last win probably acceptable though", "d": "11/2013"}, {"body": "braddunbar curiosity failing case described look like", "d": "11/2013"}, {"body": "test still passes notice never passed event", "d": "11/2013"}, {"body": "ahh gotcha", "d": "11/2013"}, {"body": "quoth braddunbar interesting bandwidth moment take look know congratulations brad beautiful addition already beautiful family hopefully wo nt seeing much around github parts", "d": "11/2013"}, {"body": "congrats brad", "d": "11/2013"}, {"body": "thanks much lots fun", "d": "11/2013"}, {"body": "braddunbar congrats", "d": "11/2013"}, {"body": "sounds like question better suited", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "tgriesser jashkenas close please answer really stuck right", "d": "11/2013"}, {"body": "hmm sure getting running tests firefox prototype appears enumerable would mind submitting small snippet illustrating problem", "d": "11/2013"}, {"body": "necessary commit firefox backbone extend function returns child class enumerable prototype extend amodel bmodel staticprops override amodelsprototype bmodelprototype jus change extend function var extend function protoprops staticprops var parent var child extend definition defaulted us simply call parent constructor protoprops amp amp protoprops constructor child protopropsconstructor else child function return parentapply arguments call make child prototype enumerable firefox childpropertyisenumerable prototype add static properties constructor function supplied extend child parent staticprops set prototype chain inherit without calling constructor function var surrogate function thisconstructor child surrogateprototype parentprototype childprototype new surrogate add prototype properties instance properties subclass supplied protoprops extend childprototype protoprops set convenience property case parent prototype needed later childsuper parentprototype return child", "d": "11/2013"}, {"body": "oh see missing point odd bug indeed", "d": "11/2013"}, {"body": "fixed", "d": "11/2013"}, {"body": "want get set funky way always write setmyproperty function model practice usually want keep getset simple javascript object many use cases enough listen change event property model react set", "d": "11/2013"}, {"body": "looked following extension", "d": "11/2013"}, {"body": "usual way things always writing separate setmyproperty reacting change event etc usual way extension also overtly complicated spirit keeping things simple minor extension mechanism effects powerful imagine one attribute model model naturally provides method changes propagate next level without much effort", "d": "11/2013"}, {"body": "use case describe would common mymodelget submodel set use nesting plugin mymodelset submodelprop still think thee need somehow propagate call set need specify good concrete examples think", "d": "11/2013"}, {"body": "ideal world nt need parse data backbone provides parse function extension collection model use like also believe always pass parse truefalse setfetch method get behaviour require", "d": "11/2013"}, {"body": "issue parse functionality used collection go collection well model would ideally want go collection", "d": "11/2013"}, {"body": "another good option passing flag testing existence property determine context collection model model parse method think current behavior correct one cases model schema whether requesting single model collection models said suggestion make parse documentation clearer feel free send pull", "d": "11/2013"}, {"body": "would ideally want go parse collection used work changed consistent nt change back", "d": "11/2013"}, {"body": "hey think bug introduced lastest underscore try version", "d": "10/2013"}, {"body": "hi sboudrias used version latest version mean", "d": "10/2013"}, {"body": "vaguely remember people similar issue switching properly bug mostly breaking change way underscore handled things suggesting try app underscore works walk bug", "d": "10/2013"}, {"body": "hi suneq post small jsfiddle example showing code causes problem pushstate enabled disabled join irc channel try help", "d": "10/2013"}, {"body": "hi dear app large post initializing code app firsthash locationhash thank", "d": "10/2013"}, {"body": "post small sample problem code runnable testable jsfiddle help way unfortunately quite enough information go", "d": "10/2013"}, {"body": "currently magic regex parse routes hash keep mind call directly regular expression eg router method get behavior want", "d": "10/2013"}, {"body": "thanks work", "d": "10/2013"}, {"body": "ca nt check", "d": "10/2013"}, {"body": "yeah good call case want ongoing validation errors trigger consolelog warning would need certainly doable thanks code duplication could reduced abstracting consolelog fn necessary much still think change behavior regards collections worth noting well perhaps updating example docs show realistic usage attaching event handler event model initialization use happy submit pull request clarity either changes", "d": "10/2013"}, {"body": "happy submit pull request clarity either changes would lovely yes please general trying prevent invalid models created first place case side effects think change best", "d": "11/2013"}, {"body": "think better solve irregularity", "d": "5/2015"}, {"body": "hi iamanm behavior changed backbone please see reasoning potential fixes", "d": "10/2013"}, {"body": "hi wondering changed behaviour part change log could lead painful app upgrade process", "d": "11/2013"}, {"body": "totally send pull documentation update happy merge", "d": "11/2013"}, {"body": "many tweaks optimizations bugfixes relating backbone including url overrides mutation options second thought already someone needs specifics search issues", "d": "11/2013"}, {"body": "makes sense", "d": "11/2013"}, {"body": "look using need call undelegateevents view remove event binding ca nt comment whether good practice reuse dom element binding events behaviour looking free patch backbone way want", "d": "10/2013"}, {"body": "please look suggestion method backbone unexpected behaviour removes something logically removed seems writing backbone developers wanted follow logic jquery jquery removes element applied backbone removes object container dom element well view unexpected behaviour therefore avoided backbone method followed logic jquery removed view applied dom elements including container element", "d": "10/2013"}, {"body": "backbone view element represents view feel free empty like nothing stopping", "d": "10/2013"}, {"body": "right nothing stopping still look way container dom element part web page insertinginjecting removed remove", "d": "10/2013"}, {"body": "container dom element part web page insertinginjecting view views right certainly nt", "d": "10/2013"}, {"body": "yeah reason remove facility provide preexisting el encourage form", "d": "10/2013"}, {"body": "created new mac account redownloaded chrome ran steps still happening looks like chrome issue", "d": "10/2013"}, {"body": "yep idiot using watch expressions habit instead scope variables reason chrome inspector nt reference correct variable console type hence undefined work fine", "d": "10/2013"}, {"body": "ran tests passed", "d": "10/2013"}, {"body": "correct supposed work backbone send attributes pass directly save call took attributes instead would defeat whole point ca nt expect every function look magic property", "d": "11/2013"}, {"body": "another parse function parse function sending data real problem control data sent server way current version working patch", "d": "11/2013"}, {"body": "problem think control sending data via patch method example server accepts data namespaced object need able use namespace sending data server time need original nonnamespaced data store local model", "d": "4/2016"}, {"body": "english pls people chinese speaker", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "notes wrote wait true passed waits server respond removal however setting optionswait true server returns results still destroyed model comments match code question google anyway seems correct think otherwise option means wait server response backbone take action right snippet exactly calling function within success callback", "d": "10/2013"}, {"body": "ashwinh maybe nag plugin developers submit pull request instead", "d": "10/2013"}, {"body": "hi ashwinh echo documentation backbone nt include direct support nested models collections many associations number good patterns modeling structured data client side backbone provide foundation implementing type thing likely moved backbone reasons", "d": "10/2013"}, {"body": "braddunbar", "d": "10/2015"}, {"body": "nt call unless specifically set call function code see call simply call nt pass get called get called though since calls missing something", "d": "10/2013"}, {"body": "call happens set", "d": "10/2013"}, {"body": "understand trying point unfortunately actual behavior seems different coffeescript class mycollection extends backbonecollection url someurlhere valid url readable server response since waiting parse gt consolelog called parse new mycollection create wait true results called parse printed log note without parse nt called use coffeescript compiler compile js", "d": "10/2013"}, {"body": "right set apparently although think working like since commit", "d": "10/2013"}, {"body": "sure reading code correctly nt refer calling model level correct far know actually raw model data parse collection level creating model using raw data one model expects raw collection data ie typically array creating model nt data calling new behavior using backbone months never called mentioned seems situation actually called model first parameter kind raw data would normally", "d": "10/2013"}, {"body": "right updated commit model added collection success callback success callback called inside callback point set nt set anything nt seem like intentional behaviour think intuitive preserved scope right fix issue think", "d": "10/2013"}, {"body": "makes sense actions taken collection level consequence ie callback receive call proposed change fixes issue", "d": "10/2013"}, {"body": "ok makes sense anyone else opinion proposed fix", "d": "11/2013"}, {"body": "", "d": "10/2013"}, {"body": "far see need wrap constructor get behavior back would correct way get behavior back migrating code better way edit actually wrong could simply overload method oh darn longer either", "d": "10/2013"}, {"body": "localheinz point nt think thanks though", "d": "10/2013"}, {"body": "search issues able read full story instead us retype short consistent way behaves every backbone class previously view something odd duck stashing wrap constructor get behavior back globally like prefer keep using feel free every version available time nt stop working slightly better one available", "d": "10/2013"}, {"body": "well bit harsh nt think searching couple hundreds issues would nice link release notes also nice would big disclaimer backbone introducing breaking changes minor versions", "d": "10/2013"}, {"body": "dnutels understand frustration also codebase stuck breaking changes however much simply migrate", "d": "10/2013"}, {"body": "well bit harsh nt think searching couple hundreds issues open ticket force everyone contributing repo respond question instead adding discussion already exists see comment every change behavior breaking change someone romantic versioning semantic versioning", "d": "10/2013"}, {"body": "dnutels actually notes right", "d": "10/2013"}, {"body": "classic case stupid read notes took time write vs dumb use semver lookalike expect people read notes every patch minor release", "d": "10/2013"}, {"body": "foxbunny nt know guess good practice read changelogs updating latest version", "d": "10/2013"}, {"body": "localheinz nt prevent folks assuming nt effing big deal make requirement obviously negative comments people help even less", "d": "10/2013"}, {"body": "localheinz read release notes exactly prompted broke everything release notes nt help matters able upgrade receive various bug fixes without monkeypatch stuff know theoretical level also condescention", "d": "10/2013"}, {"body": "edit killed last comment since contained nonworking code sorry noise rework update comment ok working version sure properly cleaned coffeescript output requirejs scenario multiple modules require original backbone use following configuration swap original backbone new one first wrap code use coffeescript coffeescript define require gt backbone require vieworig backboneview backboneview options gt vieworigapply arguments options options backboneview vieworig backboneviewextend vieworigextend backbone next change path configs follows causes modules load patch module instead original", "d": "10/2013"}, {"body": "imagine could use requirejs swap old backbone new one becomes notice swapped aliases libraries contrast", "d": "10/2013"}, {"body": "dnutels thanks tip nt aware option", "d": "10/2013"}, {"body": "dnutels tried map configuration nt work patch module also requires backbone leads circular loading missing something", "d": "10/2013"}, {"body": "foxbunny aha right configure additional property new receives old instead creating cycle props may need different order note top head better consult requirejs api part site work though", "d": "10/2013"}, {"body": "dnutels yup works", "d": "10/2013"}, {"body": "simplify things little makes path config redundant patch module looks like", "d": "10/2013"}, {"body": "foxbunny side note may get shaky build since new patching module requires loaded module requests actually gets one make sure since patching module probably packaged appframework might get dicey depending structure require separate added part initial code", "d": "10/2013"}, {"body": "well seems builds problem exact mapping build config", "d": "10/2013"}, {"body": "meant using built file works great", "d": "10/2013"}, {"body": "yeah temp solution rid app anyway need perfection", "d": "10/2013"}, {"body": "might also look creating base view app views inherit nice pattern use models collections give extra features without mucking prototoype requirejs", "d": "10/2013"}, {"body": "would preferred approach idiomatic pattern would work nt backbone constructor nt provide overloadable methods overloading would cause sorts problem rest code base since parent nt anything useful default therefore nt usually call parent method overloaded method", "d": "10/2013"}, {"body": "foxbunny sure follow completely overwrite constructor choose call super constructor way method", "d": "10/2013"}, {"body": "ah meant see absolutely difference unless would rather go fix code base inherit subclass case think easier migrate code use right another way go", "d": "10/2013"}, {"body": "foxbunny also replace completely manner", "d": "10/2013"}, {"body": "braddunbar yes", "d": "10/2013"}, {"body": "uritemplates lovely like use within api responses entirely appropriate router support heckuva lot features router simple matching needs", "d": "10/2013"}, {"body": "hi arfordweb modification iteration pretty classic mistake fallen prey many times modifying way suggest would prohibitively expensive suggest creating list models remove iteration removing afterwards perhaps succinctly", "d": "10/2013"}, {"body": "really nt know asking", "d": "10/2013"}, {"body": "see sample", "d": "10/2013"}, {"body": "question stack overflow github tickets", "d": "10/2013"}, {"body": "pretty sure backbone notify id changes even customized backbone question feature request", "d": "10/2013"}, {"body": "already fiddle", "d": "10/2013"}, {"body": "use customized idattribute suppose consumers model access id id property need know implementation details day change userid userid consumers still work use change modelidattribute case written access ti model directly subscribe change collection models backbone already handle change modelidattribute case emit special event", "d": "10/2013"}, {"body": "nt server send back attributes nt want set send back empty", "d": "10/2013"}, {"body": "may want server send back properties put requests places app prefer option set frontend backend", "d": "10/2013"}, {"body": "sure thing set frontend say fine place sort property filtering future ask sort question mailing list irc channel need open ticket", "d": "10/2013"}, {"body": "thanks", "d": "10/2013"}, {"body": "agree reason still use", "d": "10/2013"}, {"body": "hi please see recent recent tickets matter join conversation thanks", "d": "10/2013"}, {"body": "thanks catching", "d": "10/2013"}, {"body": "option option pass options uses hood give try", "d": "10/2013"}, {"body": "hey would interested collaborator status backbone repo tag close questions see fit", "d": "10/2013"}, {"body": "sure thanks", "d": "10/2013"}, {"body": "done enjoy welcome", "d": "10/2013"}, {"body": "wow option works nicely thanks", "d": "10/2013"}, {"body": "guess could rendering view seems clunky", "d": "10/2013"}, {"body": "instead opening bug ticket try asking mailing list irc room first searching", "d": "10/2013"}, {"body": "try stackoverflow backbone issue", "d": "10/2013"}, {"body": "yes improvement backbone completely ignore querystrings instead partially ignoring perhaps braddunbar would like elaborate bit", "d": "10/2013"}, {"body": "trouble seeing improvement perspective since makes essentially impossible app work querystrings even legitimate reason judging comments seems people reasons fine even adding additional option pass navigate skip stripper force route evaluation stands feels like takes unnecessarily opinionated stance issue probably breaks number current apps frankly feels quite unbackbonelike perhaps something like change line sure really addresses inconsistencies related querystrings though", "d": "10/2013"}, {"body": "sure much elaborate rather long already certainly restate reasoning please read previous tickets subject context eg ambiguities concerning query strings hash fragments include question mark use browsers without support semantics generally considered equivalent using route string like ignores altogether value parameter like already available via never written query string parseranalyzer fairly certain nontrivial nt think included minimal set generally useful components creating web apps reasons mind specific usetest case mind glad look", "d": "10/2013"}, {"body": "different problem caused paradigm would like able refresh application navigate route agree quite normal idea pass argument would force navigation", "d": "10/2013"}, {"body": "braddunbar use case parsing query string client side route written regex string creates new search view search view grabs query string creates new model grabs search results server using query string app nt directly utilizing query string reflect application state search query performed canonical way hiding behind another character granted couple issues needed handled make everything behave expected relatively minor easy fix without overriding backbone code code router model view loader", "d": "10/2013"}, {"body": "thanks code sure portion referring though create reduced test case glad take look", "d": "10/2013"}, {"body": "setup ghpage site test case essentially mirrors search query iframe bing working version test broken version test identical version backbone used vs respectively relevant view code coffeescript class appview extends backboneview el body events change input updatesearch render query locationsearch str querymatch q html enter search hit enter updatesearch e query ecurrenttarget val routernavigate q query trigger true line ignored backbone fragment unchanged test case simply enter string text input top page hit returnenter code working see url updated bing iframe update new search equivalent broken version site search query update since url dropping thus different stop updating searches broken version also appears truncate last letter query string initial successful search example go working version broken version enter text input top screen hit enter text input top screen hit", "d": "10/2013"}, {"body": "ok see getting due queryhash longer change unless path also changes intentional also ignores query hash would suggest one two things set inside change handler render explicitly skipping router altogether since handle query string changes use path instead query string", "d": "10/2013"}, {"body": "braddunbar example test case updating rerendering view would work fine however complex application different views andor simple links could triggering route makes highly preferable use router using path instead query string feels awkward standard well established well understood use case query string also seems quite similar except supporting query strings instead hashes opened small pull request adds option navigate along minor fix prevent truncating query strings seems fix issue extra work want support query strings app least would possible opened pull request adds option history treat query string part fragment seems fix issue mentioned also makes history process query string changes correctly also broken backbone", "d": "10/2013"}, {"body": "braddunbar opinion pr adding option query enabled always tacking end fragment patch would nt work well right", "d": "10/2013"}, {"body": "understanding issue correctly impact even querystring included fragment could easily ignored using regex like opposite nt true easy way include desired alternative whatever happened jashkenas suggestion routes willing try submitting pr add instead preferred", "d": "10/2013"}, {"body": "main issue ignores altogether rightly think time use search params comparison causes navigating url manually behave differently calling opinion acceptable", "d": "10/2013"}, {"body": "oh sorry missed part however stated many times pullsissues nt think query string included long support hashchange fallback using faux querystring hash fragment causes confusion good", "d": "10/2013"}, {"body": "braddunbar agreed think failed mention one limitation way query string implemented pull request use order get query string course put minimum browser requirement use nt decision individual projects make backbone would still offer browser support right exact feature set", "d": "10/2013"}, {"body": "think failed mention one limitation way query string implemented pull request use pushstate order get query string nonstarter features support need support completely", "d": "10/2013"}, {"body": "jashkenas think think query string support would work fine projects using hash well pr would need minor fix move setting outside pushstate conditional without need adding faux query string hash would equivalent valid uri indeed would look added hash page query string normally query string impact resources loaded need move hash", "d": "10/2013"}, {"body": "yes setting requires page refresh circumventing point hash based routing", "d": "10/2013"}, {"body": "braddunbar right frustrating understand dilemma", "d": "10/2013"}, {"body": "dak really need behavior might look monkeypatching backbonehistory backbonequeryparams chaplin workarounds think help", "d": "10/2013"}, {"body": "issue dealing tabs tab selected appends search query without trigger think case pushstate way go backbone extending router method hardcores history like changing queries fragment context", "d": "11/2013"}, {"body": "understand confusion caused issue comes maintaining hashchange support opinion breaking applications acceptable tradeoff reducing developer confusion measure noted perceived issues resolved using appropriate route patterns allowing developer handle query strings interest full disclosure application broken change downgrade backbone compensate refactoring accomodate change costeffective us", "d": "11/2013"}, {"body": "drrcknlsn apologies breakage certainly nt intent discussion patch going would mind checking see fits needs", "d": "11/2013"}, {"body": "braddunbar apologies needed certainly appreciate work effort going project first glance seems like good compromise", "d": "11/2013"}, {"body": "breaks property models created collection see", "d": "10/2013"}, {"body": "yep yep thanks", "d": "10/2013"}, {"body": "try master still problem", "d": "10/2013"}, {"body": "updated jsfiddle master still see problem", "d": "10/2013"}, {"body": "looking middle model attributes must sent server look save function call returns server responded see old attributes still like change implementation feel free send pull request", "d": "10/2013"}, {"body": "hi aredridel think describing fixed master give code shot let know still issue", "d": "10/2013"}, {"body": "indeed testing", "d": "10/2013"}, {"body": "yes fixes changes around keeping reference options breaks code", "d": "10/2013"}, {"body": "check discussion pretty easy add back convert", "d": "10/2013"}, {"body": "nope code master work get github homepage", "d": "10/2013"}, {"body": "ok bad something wrong end apologies", "d": "10/2013"}, {"body": "backbone calling bindall checkurl line version empty nt real failing test case feel free send pull request", "d": "10/2013"}, {"body": "thanks help took example addy osmani book backbonejs application published oreilly changed libs underscorejs version backbonejs failed wrote issue tried rebuild example show failure message firebug recognizable mistakes something wrong another part work used newest versions backbone underscore without problems sorry used time", "d": "11/2013"}, {"body": "push unshift supposed operate single models otherwise poorly named want add multiple models use accepted big deal want futz internals go ahead used normally push", "d": "10/2013"}, {"body": "reference functions mirroring accept n parameters operate", "d": "10/2013"}, {"body": "ah ha", "d": "10/2013"}, {"body": "guess wo nt second argument options object variadic inputs us", "d": "10/2013"}, {"body": "two possibilities first param could array would fine call would need updated preparing n models changing signature accept arrays could always check see last param simple object throwing possible solutions", "d": "10/2013"}, {"body": "fyi therefore return added model array models passed one", "d": "10/2013"}, {"body": "pretty big change moves away idea collection amp model similar semantics reason want models returned able diff collection", "d": "10/2013"}, {"body": "harder diff would appear given might objects passed semantics still hopefully sensible return value said think probably still wrinkles situations might get back something suboptimal certain combination duplicateinvalid", "d": "10/2013"}, {"body": "please ask type question irc google group stackoverflow", "d": "10/2013"}, {"body": "question soon use minified version issue goes away sounds like bug", "d": "10/2013"}, {"body": "create simplified jsfiddle illustrating problem without context difficult know might causing issue indeed bug part backbone library", "d": "10/2013"}, {"body": "nevermind backbone file corrupted something got refactored mistake sorry trouble", "d": "10/2013"}, {"body": "think fixed master branch", "d": "10/2013"}, {"body": "correct fixed master", "d": "10/2013"}, {"body": "hi positlabs many reasons enumerated others sprinkled throughout issues interested", "d": "9/2013"}, {"body": "look actual code see nt trying parse anything afaik try parse server response based option think always default", "d": "10/2013"}, {"body": "cool must looked quickly mistaken", "d": "10/2013"}, {"body": "reproduce bug jsfiddlecodepen investigate also version backbone using", "d": "9/2013"}, {"body": "using backbone try setup jsfiddle codepen", "d": "9/2013"}, {"body": "option pass tell models remove", "d": "9/2013"}, {"body": "case let reopen ticket provide failing test case current master ask help irc mailing list", "d": "9/2013"}, {"body": "best know setup jsfiddle echo", "d": "9/2013"}, {"body": "close issue mistake", "d": "9/2013"}, {"body": "drjoke mistake facing similar issue", "d": "7/2014"}, {"body": "issue using backbone using parse sdk extends backbone call fetch collection get resetoverwritten rather appending", "d": "12/2014"}, {"body": "fiddle updated working one", "d": "2/2018"}, {"body": "merge em case custom merge function would much", "d": "9/2013"}, {"body": "seems like merging involve duplicating lot logic collection set uses determine merges need performed hooks available operations collection set performing type customization would lot cleaner making merge function part model could take another model default behavior would simply call set routine model attributes", "d": "9/2013"}, {"body": "merge method model pretty elegant solution", "d": "9/2013"}, {"body": "", "d": "9/2013"}, {"body": "like suggestion lot would allow primary actor control gets merged passed model could easily override", "d": "9/2013"}, {"body": "order respected provide jsfiddlecodepenetc demonstrating broken behavior", "d": "9/2013"}, {"body": "dead wrong someone modified parent object w broken comparator function told noone hah", "d": "9/2013"}, {"body": "would expect new values respected trumping old exactly working expected imo looking wipe old models use want events", "d": "9/2013"}, {"body": "caseywebdev disagree expected abstract sense calling set object never case set completely ignored regards directly collection set nt want replace every model collection using reset explicitly setting mergefalse expect set collision ids", "d": "9/2013"}, {"body": "caseywebdev would solve case model reflecting version resource update happens resource whole new different set attributes want model reflect new resource retain anything old resource", "d": "9/2013"}, {"body": "never case set completely ignored ignoring duplicate models based functionality least two years wanted replace existing models incoming matching ones presumably etc option would need good use case reasoning existing functionality suffice would solve case model reflecting version resource update happens resource whole new different set attributes saying columns resource change values changing option works great understanding correctly provide realworld example", "d": "9/2013"}, {"body": "updated house longer room mergetrue get room number model may trigger unwanted behavior might logic check room attribute want correct representation model entry user bob", "d": "9/2013"}, {"body": "limitation either way seems data model setting correct send back expected result", "d": "9/2013"}, {"body": "see changes add example work expected", "d": "9/2013"}, {"body": "hey caseywebdev kind weird set attribute inside function prototype request pull fix less macgyver way hahah", "d": "9/2013"}, {"body": "mateusmaso take look overriding actually could fetch cache create new instance", "d": "9/2013"}, {"body": "var col backbonecollectionextend model function attrs options return new backbonemodel attrs options var col new col coladd consolelog colbyid colset name realname consolelog colbyid result question best way deal behavior set function prototype behavior change future releases", "d": "10/2013"}, {"body": "tgriesser override method workout", "d": "10/2013"}, {"body": "require jquery solve problem break everyone else app standard part javascript yet like use feel free patch backbone source carry", "d": "9/2013"}, {"body": "hi strange fine underscore suggestion replace current way update smth like anyway thank answer", "d": "9/2013"}, {"body": "backbone models intended able used server used node standard way load scripts using jquery node nt make much sense depending fancy getting course", "d": "9/2013"}, {"body": "still looks broken", "d": "9/2013"}, {"body": "bradleyayers version underscorejs using believe use gt see expected behavior", "d": "9/2013"}, {"body": "tgriesser underscore yes looks like master underscore changed semantics work perhaps documentation bug actual minum required version underscore either good list caveat", "d": "9/2013"}, {"body": "seems reasonable pull see people think", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "really interesting question going look mess", "d": "9/2013"}, {"body": "looks like might way work backbone", "d": "9/2013"}, {"body": "fine question fine bug ticket try irc mailing list", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "hey nikcorg thanks issue try latest develop version believe behavior looking enabled take look information", "d": "9/2013"}, {"body": "hey tgriesser looks like prs reference address issue ignoring hashpart sense nt convert url nonhash version concern really matching routes hash url contains hash matching currently done using complete url including hash afaict neither two issues mentioned address achieve looking change would either happen latter run routers configured former probably option", "d": "9/2013"}, {"body": "nikcorg would able provide failing test case behavior looking", "d": "9/2013"}, {"body": "absolutely start working", "d": "9/2013"}, {"body": "hey tgriesser think test case demonstrate mean commit fork copypaste", "d": "9/2013"}, {"body": "urgh sorry noise sailed fail boat today", "d": "9/2013"}, {"body": "hi nikcorg thanks issue see issue describing thanks test case wondering would need functionality use instead words need support hash url submit patch consider yet certain good direction", "d": "9/2013"}, {"body": "braddunbar nt want simply want hash url useful bookmarkingsharing purposes well scrolling page intended position triggered route merely want able use hashes still able match defined routes like hash nt want generalise issue desire defined routes match either hash part path part url depending configuration definitely submit patch well nt yet wanted feedback idea first", "d": "9/2013"}, {"body": "pulled nikcorg changed strip query hash matching building url seems work well enough", "d": "9/2013"}, {"body": "brilliant thanks", "d": "9/2013"}, {"body": "please use mailing list irc channel types questions", "d": "9/2013"}, {"body": "yep yep irc mailing list appropriate place sort question", "d": "9/2013"}, {"body": "related", "d": "9/2013"}, {"body": "instead push objects instance model instead regular objects see difference compare first thing strikes nonmodel code path creates new object possibly triggers modelvalidationerror anonymous objects array doubt events get triggered though would modify code create model instead anonymous object see improves performance put breakpoint backbone source preparemodel see portion nonmodel codepath code traverses", "d": "9/2013"}, {"body": "much difference creating model instead object improvement minimal see test case", "d": "9/2013"}, {"body": "well poked around bit tests nt able significantly best performance second test really need models collection best recommend move web worker might better determine really need overhead putting many models collection initializing collection models may first many bottlenecks could encounter using collection large sort underscorelodash functions may also show performance problems could use smaller set models move collection needed nt know use case seems representing say rows table nt make sense one process much data nt know necessitates collection size someone else may able help", "d": "9/2013"}, {"body": "globexdesigns might look streak method jquerydatatables backgridjs good implementations starting ideas storing many models collection lead headaches", "d": "9/2013"}, {"body": "glad brought examples exactly ie rendering html tablegrid using data backbone collection right trying evaluate whether using backbone collection able achieve performance looking hoping use collection object could make use lot builtin features sorting filtering events etc takes long initialize may stick using backbone events bypass collection initialization together regardless thought backbone team still consider investigating slow initialization models perhaps maybe offer suggestions moment still nt able track exact methodfunction bottleneck gut feeling says probably clone function somewhere", "d": "9/2013"}, {"body": "docs say core usefulness backbone collections actually implemented underscore collection methods able use underscore methods plain array add syncing events whatever behavior back models need might also look lodash lazyjs underscorecompatible apis focus speed", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "confirming improved performance somewhat new tests seeing opssec improvement item dataset scared try anything larger suspect wo nt usable real world scenario firefox profiler reports preparemodel accounts operational time instead seeing bulk majority processing time still spent backbonemodel set attribute cloning time setting backbone events collection sure anything done", "d": "9/2013"}, {"body": "performance improving patches always welcome said javascript javascript want squeeze possible performance browser especially ie going use raw arrays lots loops intermediate functions objects possible", "d": "9/2013"}, {"body": "right callback please stop opening tickets ask irc channel first", "d": "9/2013"}, {"body": "nope attaching existing element element get otherwise would catch", "d": "9/2013"}, {"body": "nope", "d": "9/2013"}, {"body": "problem simply passing model first arg convention backbone uses everywhere core", "d": "9/2013"}, {"body": "yep yep passing model first argument preferred way think find works rather well", "d": "9/2013"}, {"body": "looks dry would prefer trigger method anyway fine thanks", "d": "9/2013"}, {"body": "yes design considers differences last quick dirty dirty flag implementation looking", "d": "9/2013"}, {"body": "cloned mutated later function would unexpected side effect user options object passed methods suddenly different values nt set", "d": "9/2013"}, {"body": "nt seem like bug performing noop resetting ids model collection since default collection set attrs nt going go away try adding call object work missing something", "d": "9/2013"}, {"body": "philfreo correct want", "d": "9/2013"}, {"body": "sure nt want regardless question stackoverflow irc channel please reserve github issues bug reports pull requests etc", "d": "9/2013"}, {"body": "also sending data needs stringified", "d": "9/2013"}, {"body": "said anything json sending json string sending form data replaced backbone sync method standard jquery method works perfectly issue", "d": "9/2013"}, {"body": "issue sync meant sending data restful resources specific option need send urlencoded data overriding arbitrary options send ajax end sync produce unexpected results", "d": "9/2013"}, {"body": "correct way apparently following processdata true thanks patience sorry waste time", "d": "9/2013"}, {"body": "backbone uses success error callback handlers passed options deprecated aliases deferred callback handlers removed", "d": "9/2013"}, {"body": "ok thank explanation", "d": "9/2013"}, {"body": "sure thing thanks opening issue sake crossreference issue came always good idea search opening issues smilecat", "d": "9/2013"}, {"body": "override", "d": "8/2013"}, {"body": "blairvanderhoof might easier saved amp added set attributes nt want saved properties model rather model attributes hash", "d": "8/2013"}, {"body": "works also notverygreat way create clientsideonly view onto data simply method model generates url way nicer keep data sync", "d": "9/2013"}, {"body": "thanks jeremy looks like staying away setting properties attributes way go instead use instancegenerated variables", "d": "9/2013"}, {"body": "far know part backbone router api allows stop listening provide details use case", "d": "8/2013"}, {"body": "backbonehistorystop aug pm notifications githubcom wrote far know part backbone router api allows stop listening provide details use case reply email directly view github", "d": "8/2013"}, {"body": "tbranyen totally right completely forgot apologies", "d": "8/2013"}, {"body": "sorry clear aware start stop router used unit testing separate case backbone stops responding urlhash change events idea router instance expose publicly debugging appears intact identical works also appears intact work property object inspect see router bound hash change events something like inspecting handlers bound would great start trying find", "d": "8/2013"}, {"body": "detailed problemstate description backbone router running navigate dashboard works great click links change paths like dashboardpersonality gamereactiontime router respond changes remembered think stores kind state router instance relevant variables object nonresponsive state changes capitalization meaningful keep clicking valid routes changing url history stack length grows follow route handlers everything history object think check looks correct idea nt following route handlers anymore", "d": "8/2013"}, {"body": "maybe stating obvious definitely calling navigate trigger true right default backbone update url history wo nt actually call route handlers unless trigger true passed apologies seems really obvious want get obvious things confirmed first aug eric notifications githubcom wrote backbone router running navigate dashboard works great click links change paths like dashboardpersonality gamereactiontime router respond changes remembered backbonehistory think stores kind state router instance relevant variables object nonresponsive state changes capitalization h h meaningful backbonehistorystarted true backbonehistorywantshashchange true backbonehistorylocationhash dashboardpersonality informative noticed saved new location hash navigate backbonehistoryhandlers array looks good backbonehistoryhistorylength looks good steps backbone history stack keep clicking valid routes changing url history stack grows everything history object think check looks correct idea nt following route handlers anymore reply email directly view github", "d": "8/2013"}, {"body": "nt even programatic route changing links page like fixated difference seems telling although nt understand broken state respond hash changes refresh page press enter url bar follow whatever route url expected", "d": "8/2013"}, {"body": "application bug problem backbone backbonehistory uses attach events see behavior ever call basically accidentally unbound event handler trying clean event handling nt know affected backbone many screens backbone history object looked fine inspect events window object like jquerydata window events hashchange array load array kind arcane place keep informative thanks answer finding jquery events", "d": "8/2013"}, {"body": "think looking collection say need model data must call model want fetch", "d": "8/2013"}, {"body": "preventing creating jquery interface adapter mootools simply binding lieu jquery", "d": "8/2013"}, {"body": "extra overhead forcing framework follow jquery syntax instead offering standard interface went ahead implemented pretty basic prototype passed tests imo seems simple enough also allows backbone used vanilla js solution application every needs", "d": "8/2013"}, {"body": "instead offering standard interface standard set accepted rules mean jquery interface could standard", "d": "8/2013"}, {"body": "jquery uses weird catch function wannabe class global approach never standard thoughts commit made", "d": "8/2013"}, {"body": "mean instances prototypes chaining proposed offers additional benefits providing jquerylike abstraction something like mootoolsdojomylibraryetc admit sucks strong dependency jquery angular shown jqlite implementation fine interface suitable abstraction aug pm miles johnson notifications githubcom wrote jquery uses weird catch function wannabe class global approach never standard thoughts commit made reply email directly view github", "d": "8/2013"}, {"body": "wrapping around jquery syntax bloated potentially problematic seen digress guys nt interested proper interoperability closed sidenote mean instances prototypes chaining mootools better saying", "d": "8/2013"}, {"body": "would guys mind linked fork wiki improved fork bit added vanilla js mootools support pass tests", "d": "8/2013"}, {"body": "milesj go wiki anyone put tools resources others might find useful", "d": "8/2013"}, {"body": "awesome thanks", "d": "8/2013"}, {"body": "yup object seem named opposite really holds definitely aesthetic code change let jashkenas decide whether made", "d": "8/2013"}, {"body": "could someone point duplicate failed find big list", "d": "8/2013"}, {"body": "probably several others", "d": "8/2013"}, {"body": "tgriesser thanks", "d": "8/2013"}, {"body": "perhaps way array object require many customizations also assume cases nt want use models attribute backbonecollection instance enough underscorejs methods work collection", "d": "8/2013"}, {"body": "forgot mention useful underscore methods collection would flagoption return collection object array like map reduce filter", "d": "8/2013"}, {"body": "unfortunately underscore methods unstoppable native loop break customizations means also js object specific methods override overload calling parent methods yeah enough backbonecollection methods", "d": "8/2013"}, {"body": "sintanial want ca nt native loops allow break", "d": "8/2013"}, {"body": "henrahmagix think referring fact ca nt use neither allow early iteration exit sintanial solutions gaining early iteration exit swap lodash instead underscore lodash supports early iteration exit return return jquery recommended", "d": "9/2013"}, {"body": "correct tack situations need break iteration present collection instances", "d": "9/2013"}, {"body": "want work already juggle arguments trying infer attributes object vs options object would impossible since plain js objects best remember always needs passed first options", "d": "8/2013"}, {"body": "ok fair enough understood thank", "d": "9/2013"}, {"body": "sounds like issue substack pattern backbone uses common one probably supported whatever using modules", "d": "8/2013"}, {"body": "ah curious could nt tell common approach post insertmoduleglobals conflict", "d": "8/2013"}, {"body": "kpwebb backbone ca nt play nice browserify published invalid npm module discussed times already fix", "d": "8/2013"}, {"body": "ick looks like ways get working clientside simple actually ca nt tell causes problems serverside case", "d": "8/2013"}, {"body": "think would great method extend onto collection applevel making change core think would jarring break parity underscore especially method terse", "d": "8/2013"}, {"body": "hi correct accepts object argument fact previously allowed string coincidence recommend using instead", "d": "8/2013"}, {"body": "hi braddunbar thank yes time update project changes", "d": "8/2013"}, {"body": "even better historystart returns routes match saying nt agree feature built works pretty well already", "d": "8/2013"}, {"body": "ah nt realize could handle things way still think builtin option would nice fairly common case people could still route backbonehistorystart happened still nt worry page load line code provided beats hell using plugin stressing route ordering", "d": "8/2013"}, {"body": "right said traditional way page load router longer trying recognize anything location need anywhere else need documented better", "d": "8/2013"}, {"body": "sorry delayed response think current documentation adequate failed rtfming suppose might nice add quick example maybe something like called route succeeds match current url backbonehistorystart returns true defined route matches current url returns false use return value handle page found cases", "d": "8/2013"}, {"body": "would great example wrote plugin simply catch malformed urls way page occasionally times user could click something leads malformed route case definitely bug want somebody notified nt want break app either fire event would nice router fired events begin say route routemethodname route notfound easy patch source needed", "d": "9/2013"}, {"body": "nice know catch false routes app start supposed incorrect routes app started", "d": "6/2014"}, {"body": "bendman see plugin", "d": "6/2014"}, {"body": "strml bendman neat solution exactly could used app need separate plugin", "d": "6/2014"}, {"body": "hello team sure loadurl works expected url like wwwexamplecom using backboneroutenotfound internally calls loadurl found glitch hit url like wwwexamplecom page page instead fragment loadurl surprisingly returns true hit returns false probably issue code line handlerroutetest fragment please let know something wrong thanks", "d": "9/2014"}, {"body": "facing issue using subroutes subroutersi tried everything discussed jashkenas ideal solution tried solution", "d": "3/2015"}, {"body": "know weird pass validate true unset clear api would nt best solution nt methods use internally inconsistent argument nt passed along entirety elsewhere codebase even something could achieve wrapping using remove validate necessary", "d": "8/2013"}, {"body": "still convinced would nt possible condition call impl way argument would passed entirety", "d": "8/2013"}, {"body": "unit test covering case validate unset clear must agree", "d": "8/2013"}, {"body": "maybe seeing whole picture could nt add model collection passing function model call something like javascript var collection new collection var model new model modelsave success function collectionadd model would allow wait model saved serverside adding collection", "d": "8/2013"}, {"body": "could also pass collectioncreate result", "d": "8/2013"}, {"body": "could however would require passing collection createedit view model minor inconvenience intuitive pattern would choose repeat issue largely subjective see option assume could used add model collection apparently used evaluate model route two options seem satisfy task literal fashion adding address issues event propagation fact using inconsistent desires model events fired collection workaround using time", "d": "8/2013"}, {"body": "caveat reverting workaround model attributes available time collection add event fires", "d": "8/2013"}, {"body": "derp also yet handling", "d": "8/2013"}, {"body": "seems like creating model via already passing collection model allows directly control exactly model added collection implementation want would still ambiguous model added collection model added created saved already specified collection belongs go ahead add collection immediately think answer question would change person person depending want specific time way allows user control model added according needs", "d": "8/2013"}, {"body": "implementation want would still ambiguous model added collection agreed imho would make sense add model collection time instantiation course could explicitly save add even option less explicit even vague variation options implemented option seems redundant bit confusing could instead serve higher purpose providing implicit collectionadd functionality", "d": "8/2013"}, {"body": "even collection option really internal thing think documented folks like var new model collection c msave posts correct resourceid endpoint never add collection perhaps collection client side supposed contain subset models oneoff model nt really belong despite sharing common url endpoint change could make would remove documentation misleading actually let clarify", "d": "9/2013"}, {"body": "use case sounds like simple trick", "d": "9/2013"}, {"body": "fixed master believe", "d": "9/2013"}, {"body": "really fixed master summary happening today really pass identifying attribute hash attributes correct wrong first model already collection pass option collection modified meaning existing model unchanged collection model already collection also pass option existing model changed collection onchange events fired model collection added collection appropriate onadd event fired case even collection unmodified since model identifying attribute operation asked backend meaning end first case described modified model backend left unmodified client application even called called new instance model created preparemodel one collection doc updated advices like pass identifying attribute hash attributes reason detre create new models collection backend time update existing ones code modified", "d": "10/2013"}, {"body": "hi maximgb one actually asked fairly recently check resolution", "d": "8/2013"}, {"body": "sounds like android bug let leave keep one stack overflow reopen specific code example points bug backbone", "d": "8/2013"}, {"body": "returning valid json op jul schreef tenaciousflea notifications githubcom het volgende using backbone rails save method calling create function rails returns status code browser normally successful instead triggers error callback reply email directly view github", "d": "8/2013"}, {"body": "returning valid json bingo either way please nt open ticket debugging help try mailing list irc channel stackoverflow", "d": "8/2013"}, {"body": "async false make ajax blocking hence request get triggered ajax completed sync event triggered within success callback expect otherwise", "d": "7/2013"}, {"body": "yep backbone assumes request asynchronous see information", "d": "7/2013"}, {"body": "great example inappropriate use backbone tickets please ask help debugging app mailing list irc room stackoverflow narrowed", "d": "7/2013"}, {"body": "sorry mistake written google group nt know thanks", "d": "7/2013"}, {"body": "\u5e9f\u8bdd\u521a\u53d1\u73b0\u4fee\u4ed9\u4f20 \u5e9f\u8bdd\u521a\u53d1\u73b0\u4fee\u4ed9\u4f20", "d": "7/2013"}, {"body": "typically would nt posted problem like either since ticket open experienced exact issue error message line code patrixd problem chrome backbone minified using appears bug chrome stable beta problem instantly goes away one things use unminified backbone source use chrome canary firefox safari etc apply noop nt commit source minifying could nt find related bug chromium bug trackers content figuring working patch well chromium fixes issue possibly worth noting error occurred pageloads could due loading order various ajax requests also tried various options uglifyjs since seems js engine problem chromeium much", "d": "7/2013"}, {"body": "fairly sure hit exact issue philfreo describes minified code causing scripts intermittently break crash tab chrome nt much time spend currently running app uncompressed assets looked tickets chrome could nt find anything seemed match glad nt one wonder paulirish ideas might happening", "d": "7/2013"}, {"body": "nt bug tho", "d": "7/2013"}, {"body": "nt bug tho nt think since minified code looked legit seems logically equivalent source runs fine browsersversions patch referenced nt logically affect behavior fixed issue", "d": "7/2013"}, {"body": "thanks lot philfreo try patch tomorrow let know fixed issue seen patch really weird right nt logically affect works happy hope next version chrome fix minified code issue", "d": "7/2013"}, {"body": "applied patch minifying works error horror nt notice last week nt imagine could current version thank much", "d": "7/2013"}, {"body": "tgriesser get crashed tab behavior super helpful get reference crash id going little tricky without smaller repro philfreo start ticket tracker demos hopefully start widdle issue meanwhile team might come across already", "d": "7/2013"}, {"body": "hi paulirish case chrome tab never crashed enabled crash reports able get crash id case crash happens got javascript error stack uncaught typeerror read property null hextendget hextendset hextendadd suggest see code fix problem anything help please let know", "d": "7/2013"}, {"body": "share difference two minified versions well repro canary chrome wed jul pm patricia notifications githubcom wrote hi paulirish tried get crash id posible javascript error stack error nt generate crash report uncaught typeerror read property null hextendget hextendset hextendadd suggest see code fix problem elasticsales anything else thanks reply email directly view github", "d": "7/2013"}, {"body": "used minified version backbone replaced next works apply google closure compilation level simpleoptimizations join code generated require rjs libraries compared two versions final code one use app main difference next code work arbitrary chrome differences name variables next function allways works hope helps nt installed chrome going install philfreo said works fine going try code anyway thanks", "d": "7/2013"}, {"body": "tried app chrome two versions worked correctly philfreo said maybe already fixed problem anything else help", "d": "7/2013"}, {"body": "try mailing list irc channel", "d": "7/2013"}, {"body": "mentioned validate section passing trick defaulted", "d": "7/2013"}, {"body": "nt default validate attr option option validate true", "d": "7/2013"}, {"body": "defaulted true otherwise need say changed", "d": "7/2013"}, {"body": "thanks fast response", "d": "7/2013"}, {"body": "model exists already clientside changes made state nt changed feature getting incorrect event care fetch finished listen request state change", "d": "7/2013"}, {"body": "happening inside jquery precise native used available handle error listening errors either jquery backbone level regardless better ask questions like mailing list irc channel instead opening ticket", "d": "7/2013"}, {"body": "yes reason tried searching opening new ticket learned", "d": "7/2013"}, {"body": "okay tried nothing broke thing happened models loaded collection instantiation already place initialize function called application desirable ticket raised way learn would desirable way seems difference", "d": "7/2013"}, {"body": "looking promise whereas backbone events useful event yet happen promises good code waiting task either already completed yet complete flawed adequate implementation baked jquery called might also look q jquery ajax object returns promise backbonesync bubbles call etc chain", "d": "7/2013"}, {"body": "yep mentions sounds like described pretty much fits definition promises sidenote neat plugin put together cases want trigger backbone events may may async triggerthen need initialize promise lib like whenjs qjs enables promise returned handler method error thrown handler specific event queued using promise lib use traditional promise typically would needed could use backbone events handle lifecycle events bookshelfjs server side orm using backbone patterns foundation allows evented style handle things like validations preinsertdeleteupdate prep etc event handlers may may async maybe someone else find useful", "d": "7/2013"}, {"body": "tgriesser oh cool nt know triggerthen use project bookshelf awesome btw", "d": "7/2013"}, {"body": "tgriesser cool pattern indeed", "d": "7/2013"}, {"body": "hi bytasv thanks bringing stuff let see answer questions complete event right nt explicit event however spell everything want using tactic quite awhile without issue instanceof checks run several times well understand frustration however think small price pay transparent event propagation benefits far outweigh think instead crud events cases want know model synced method generally important ui standpoint callback probably best bet backbone providing common case certainly trigger crud events custom want", "d": "7/2013"}, {"body": "hello braddunbar avoid instanceof check maybe would nice separate event emmiter models object ie believe would nice events separation difficult implement either simply models object could extend backboneevents object route events traffic object instead collection talking crud events recently jumped issues instead binding saved event use jquery ajax success callback passed modelsave method want navigate another application state successful model save could write right bind sync event triggered also fetch model server way distinguish kind operation finished events really help decouple application sometimes could really without sacrifice learn ability framework", "d": "7/2013"}, {"body": "sorry discussed elsewhere ran issue think main issues sync event collection gets called two different sets arguments different signatures bit confusing one collection first argument model collection first second argument changing one calls always collection sync event", "d": "1/2014"}, {"body": "hi gerev reason collection nt receive event time triggered model already removed since model longer member collection events longer propagated context also discussed generally listen cases since handler probably different anyway", "d": "7/2013"}, {"body": "makes sense worked around nt event triggered anyway proper cycle occur found somewhat unexpected surprising", "d": "7/2013"}, {"body": "still fired event triggered model since longer part collection conceivable could fake fairly certain would cause problems fixed", "d": "7/2013"}, {"body": "think brad money clientside code perspective calling model optimistically going want assume lose references model therefore events immediately course still listen potential error backbone pessimisticbydefault might different ai nt", "d": "7/2013"}, {"body": "agree strong point working backbone recently occur endofrequest event counter could lot help models well example server nt respond content call wo nt fired iirc case forced rely callbacks bit limiting hole nt cover makes less convenient centralize code like adding loading indicators necessary hopefully makes sense", "d": "7/2013"}, {"body": "example server nt respond content modelsave call sync wo nt fired iirc case forced rely success callbacks empty json response valid instead triggers see details bit limiting hole sync error nt cover makes less convenient centralize code like adding loading indicators necessary triggered model operations consistently also collections consistently proxy events models contain happens model destroyed nt member collection always listen model instead", "d": "7/2013"}, {"body": "version master wip options removed edge use found last official release", "d": "7/2013"}, {"body": "please remember search opening issue addressed several times", "d": "7/2013"}, {"body": "hi eggbeard options longer attached view backbone though like info please see", "d": "7/2013"}, {"body": "many thanks quick useful responses interesting reading yes part git education search better next time", "d": "7/2013"}, {"body": "sweet want email ask send description", "d": "7/2013"}, {"body": "sent message support desk", "d": "7/2013"}, {"body": "sure mean see line backbonejsorg official source change master since probably intentional disagree feel free send pull request wait next stable release", "d": "7/2013"}, {"body": "yes see post wrote line present backbonejsorg setting url collection creation works fine also find minimized version line backboneminjs repository line absent backbonejs really breaks feature described using uncompressed version also mentioned missing current master version already pointed previous post", "d": "7/2013"}, {"body": "afraid listening events collection level extremely core bit backbone functionality nt want listen events collection simply nt listen", "d": "7/2013"}, {"body": "gon na guess breaking changes probably going slow jashkenas speak iirc warning site said backbone alpha would breaking changes good thing usually read change log get good idea changed get around example change note passing old functionality", "d": "7/2013"}, {"body": "intend continually break backwards compatibility even necessary yes semantics important new defaults said backbone nt often maybe ever critical security fixes anything need jump immediately feel free use version like take time upgrading", "d": "7/2013"}, {"body": "correct functions return arrays return object maps models return integers return booleans documented underscore pages like add something wiki feel free otherwise feel free send pr documentation change", "d": "8/2013"}, {"body": "hi neojski original arguments passed unchanged access current value whichever works best discussion interested rationale hope helps", "d": "7/2013"}, {"body": "nt cause performance problems code inside make defer instead breaking ideal simplistic nature backbone synchronous event execution", "d": "7/2013"}, {"body": "deferring solution wondering mechanism set way makes sense thanks tue jul tim branyen notifications githubcomwrote trigger nt cause performance problems code inside make defer instead breaking ideal simplistic nature backbone synchronous event execution reply email directly view github", "d": "7/2013"}, {"body": "ah fixed released yet sorry", "d": "7/2013"}, {"body": "hi naddiseo certain looks like using unsupported syntax keys hash single event name event name followed selector delegation using delegates events elements nt think intention check docs source information", "d": "7/2013"}, {"body": "plan another release backboneconf end month leave open til happens", "d": "7/2013"}, {"body": "really bugging lot folks keep getting pings effect backbonepageable release point would greatly appreciated", "d": "8/2013"}, {"body": "pinging jashkenas", "d": "8/2013"}, {"body": "roadmap backbone somewhere months since release even knowing hard make release big project months much longer used really miss fixes improvements come since nt wan na push wan na know plans possible", "d": "8/2013"}, {"body": "yep need nail open tickets push certainly long mea culpa feel free use master time road literally past three months turning wheels back tomorrow morning quiet time", "d": "8/2013"}, {"body": "also running series errors love use master lot package management asset pipeline tools based around version bumps either bump patch number guidance get ready ship would great jashkenas tickets particular need get completed next version help", "d": "9/2013"}, {"body": "larkin package managers bower npm volo component know allow specify location git url version git sha hash pretty work next version bump", "d": "9/2013"}, {"body": "specifically using backboneonrails gem nt really want toss bower rails project months without even patch version bump commits timespan given number reports issues collection urls conflicting model urls number common use cases pagination search collections think fixes worthy patch version bump even jashkenas said time version months ago reason ca nt take current stable master tag version bump holding us back put ticket set milestone let get done", "d": "9/2013"}, {"body": "alright gentlemen go going take colectivo town dinner hope release backbone get back got problems concerns current state things including new somewhat invasive change return value setaddpushunshift speak hold peace cc braddunbar tgriesser caseywebdev", "d": "10/2013"}, {"body": "interesting changes nt think able pass judgement try one thing stands odd man still returning collection believe return removed models consistency", "d": "10/2013"}, {"body": "little concerned longer returning fairly big change thinking particular simplified case might longer rather code like applications ca nt imagine one especially without much knowledge edge cases might around return values goes inside inclined leave else become issue", "d": "10/2013"}, {"body": "especially without much knowledge edge cases might around return values goes inside set inclined leave else become url options issue well put similar misgivings especially considering never seen issue live code", "d": "10/2013"}, {"body": "maybe better post change experiment edgeusers also gives time beef test coverage", "d": "10/2013"}, {"body": "also big return values need type check would case returning either model array models vote pulling something similar slapping new return value directly collection property need get models", "d": "10/2013"}, {"body": "alright ditch pop shift unshift returning", "d": "10/2013"}, {"body": "well shift pop would return model shifted popped maybe push unshift could mirror js return fairly useless length value", "d": "10/2013"}, {"body": "lame though honestly difference return value types nt bother return callback event arguments pass single value get back single value right line pass array get back array said agree work way cook robust test cases", "d": "10/2013"}, {"body": "yeah change return value concerned also fwiw test case added passes regardless change", "d": "10/2013"}, {"body": "pushed work bit better since yall best wise honest judgement take blame causes trouble", "d": "10/2013"}, {"body": "books enjoy", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "addressed", "d": "7/2013"}, {"body": "recallfx recall correctly issues merging defaults caseywebdev addressed master try latest see fixes issues seeing", "d": "7/2013"}, {"body": "tgriesser verified current master issue fixed thanks", "d": "7/2013"}, {"body": "great", "d": "7/2013"}, {"body": "reading right bug potentially caused chrome following according rfc octets must encoded corresponding graphic character within usascii coded character set use corresponding character unsafe corresponding character reserved interpretation within particular url scheme therefore imo backbonejs router needs support usascii would suggest changing links code conform", "d": "7/2013"}, {"body": "like see failing test case merged browser fragmentpushstate url encoding compatibility real headache ask braddunbar", "d": "9/2013"}, {"body": "test case let close one arrives", "d": "9/2013"}, {"body": "know nt stack overflow code linked good test case", "d": "9/2013"}, {"body": "marcomatarazzo one code using backbone better approach would pull request failing test suite test current would make possible address reliably", "d": "9/2013"}, {"body": "marcomatarazzo fair enough", "d": "9/2013"}, {"body": "ok try best put one together thank answer", "d": "9/2013"}, {"body": "indeed chrome safari depending point view bug windowlocationreplacehash characters nt something backbone help added test demonstrating use backbone navigate url correct routes called suggest keeping nonascii urls first place", "d": "10/2013"}, {"body": "hi ambeer generally best accomplished conditionals handler hope helps js var view backboneviewextend events", "d": "7/2013"}, {"body": "braddunbar really like approach nt want click event triggered mobile phones reason want every click event also results annoying blink mobile browsers", "d": "10/2013"}, {"body": "gorkemyurt also function possible", "d": "10/2013"}, {"body": "yepp thanks lot found really similar approach", "d": "10/2013"}, {"body": "see change bind string try", "d": "7/2013"}, {"body": "hi codylindley used read initial routes actually store responsibility lies history route hope helps", "d": "7/2013"}, {"body": "sorry clear code example demonstrate myrouterroutes contains object routes manually add routes object updated console see log object myrouterroutes contains routes suppose private value", "d": "7/2013"}, {"body": "right try logging instead routes added calling", "d": "7/2013"}, {"body": "hi neocotic order change events case intentional unlikely change comes one event may many events would recommend make function event order important relying usually end debugging js var mymodel backbonemodelextend isfoo function return thisget attr foo isbar function return thisget attr bar var myview backboneviewextend initialize function thislistento thismodel change attr thisrender render function var classname hide thismodelisfoo classname foo else thismodelisbar classname bar", "d": "7/2013"}, {"body": "interesting nice use case still feels little bit edge overriding wrapping model question adding removing whichever rare case app csrf token ajax options", "d": "7/2013"}, {"body": "yep overriding works also override model model basis also handle calls", "d": "7/2013"}, {"body": "righto would even better way", "d": "7/2013"}, {"body": "sorry might misunderstanding possible override sync method without rewriting function able capture ajax request ie want create pool ajax requests modelcollection abort modelcollection disposed would", "d": "7/2013"}, {"body": "certainly might look something like", "d": "7/2013"}, {"body": "ah ton", "d": "7/2013"}, {"body": "hi fabioperrella setting attributes returned server intentional decision backbone server set many attributes likes several issues concerning longer explanations eg want make sure attribute removed fetching listen event clear", "d": "7/2013"}, {"body": "pinging braddunbar particular two lines definite opinion time change made root urls without additional components needing include trailing slash side effect assuming roots usually prefix additional url components", "d": "7/2013"}, {"body": "definitely latter nt strong opinion trailing slashes root though aware problems joshpangell problem trailing slash causing purely aesthetic cause technical issue", "d": "7/2013"}, {"body": "let assume pure root urls never trailing slash put us although perhaps allow one slash manually resourcewise best us assume oldschool apacheslashmeansindexhtml idiom", "d": "7/2013"}, {"body": "sounds good patch incoming", "d": "7/2013"}, {"body": "braddunbar trailing slash causing technical issue per say aesthetics important", "d": "7/2013"}, {"body": "addressed sure like solution one uncomfortable fiddling finicky portion code something currently causing problems two caveats described pull could possibly addressed seems like lot trouble trailing slash", "d": "7/2013"}, {"body": "potential caveat cache many people cache based url especially varnish slashes url looked different locations fact", "d": "7/2013"}, {"body": "sure like solution righto instead fiddling simply normalize never include slash directly root", "d": "7/2013"}, {"body": "sure thing updated", "d": "7/2013"}, {"body": "developing wordpress theme based backbone using pretty permalinks assuming root route multisitename automatically remove trailing slash problem case cause home page url becomes instead refresh web browser loading extra time cause wordpress redirects", "d": "11/2013"}, {"body": "deknar using trailing slashes everywhere sake seoduplicate pages analytics backbone always removes trailing slash root even using routernavigate really undesirable way backbone forces use url without trailing slashes must optional explicitly using routernavigate slash nt removed", "d": "1/2014"}, {"body": "know kind old since found search figured post solution nt found updates otherwise allow us specify optionally want handled removal slash causing identity solution issue relogin requests every time hit home route without trailing slash notes took route versus editing backbone js directly effort keep playing nicely backbone downloaded via nuget package solution used minified version part changed historystarted backbonehistorystarted call pathstripper needed reference backbonepathstripper since called outside class place somewhere js dom ready", "d": "6/2014"}, {"body": "hey kyse solution would work use case advise adding monkey patches minfied code think nightmare maintain", "d": "6/2014"}, {"body": "false alarm figured want libs pages add wildcard char textarea adminconfigdevelopmentbackbone probably default behaviour though opinion course cheers", "d": "7/2013"}, {"body": "hi neojski backbone routers ignore query string entirely favor using path name similar check want gory details", "d": "7/2013"}, {"body": "sad thanks reference", "d": "7/2013"}, {"body": "collection methods return array new collections need wrap result another call said generally get better response type question mailing list documentcloud irc channel freenode", "d": "7/2013"}, {"body": "unfortunately work returns also tried following returns seems like big bug", "d": "7/2013"}, {"body": "whoops gave bad information teach post without testing first reason returns array models objects try size instead", "d": "7/2013"}, {"body": "yes works thanks however according supported backbonejs assume could chained", "d": "7/2013"}, {"body": "sure", "d": "7/2013"}, {"body": "oo work return value seems like bug try", "d": "7/2013"}, {"body": "fear enter mode nt get shortcuts underscore methods proxied directly onto collection prototype provide work better slightly performant going nonchained version", "d": "7/2013"}, {"body": "bah strike two morning tested instead mirrors property model thanks assist caseywebdev", "d": "7/2013"}, {"body": "prob makes crave dot path resolving underscore", "d": "7/2013"}, {"body": "sure would resolve issue events fired asynchronously imo fire custom event rebuilt models listen one sure model state stable", "d": "7/2013"}, {"body": "hi cthielen current order definitely intended think agree sboudrias sounds like good spot custom event", "d": "7/2013"}, {"body": "wow idea happened sorry", "d": "7/2013"}, {"body": "may use new operator instantiate router use stackoverflow questions like", "d": "6/2013"}, {"body": "see previous tickets plugins extensions add extra deep model features otherwise", "d": "6/2013"}, {"body": "hi timmywil use backbone underscore amd time without extra support added using backbone app include use global use shim configuration requirejs works fine requires nothing extra", "d": "6/2013"}, {"body": "thank bringing conversation brave brave man requirejs user would fantastic everyone adhered developer ideologies going happen would really nice backbone collection different modules could required separately silly twojs instance requires backbone namespace take advantage backboneevents braddunbar backboneunderscore easily shimmed problem using package manager like jam makes task completely trivial however one gets little bit trouble certain usecases compile optimize depending module dependency tree looks run loadorder problems shim shimming sham works mostly great would love backbone amd compliant end everyone going switch angular anyway amirite", "d": "6/2013"}, {"body": "would really nice backbone collection different modules could required separately silly twojs instance requires backbone namespace take advantage backboneevents one backbone rather small whole breaking bank size two backboneevents enmeshed rest source easy delete things nt want use things however one gets little bit trouble certain usecases compile optimize depending module dependency tree looks run loadorder problems shim recommend using include backbone separately either include separate file vendor code personal preference dependency rules vendor code complex way application code", "d": "6/2013"}, {"body": "like know reason supporting amd even better umd commonjs amd stay near future", "d": "6/2013"}, {"body": "instead staying way supporting amd marionette pattern building standard core file amd version core file nt see reason ca nt always amdjsbackbone amdjsunderscore", "d": "6/2013"}, {"body": "thanks discussion stated adding explicit support particular module loaders makes harder support quote jeremy javascript ever gets real module system module system deployed cross browser support meantime backbone perfectly usable amdumdetc", "d": "6/2013"}, {"body": "thanks discussion stated adding explicit support particular module loaders makes harder support first particular module loaders referring dealing javascript libraries already support amd secondly actually true anyway said exporting global along amd means behavior nt affect nonamd loaders hard support javascript ever gets real module system module system deployed cross browser support probably take years meantime amd supported best way help developers logic inherently flawed meantime backbone perfectly usable amdumdetc true either comments pointed best practice using amd production concatenate files compile together possible backbone without modification", "d": "6/2013"}, {"body": "true either comments pointed best practice using amd production concatenate files compile together possible backbone without modification assure time via option similar", "d": "6/2013"}, {"body": "braddunbar specified load jquery cdn even concatenating main concern think understand edit reiterate perfectly usable although would argue perfect enough backbone better pointed inaccuracy statement without responding points real reason nt want let leave hope like satisfied", "d": "6/2013"}, {"body": "hmm nt think loading jquery cdn affect concatenatingminifying backbone javascript", "d": "6/2013"}, {"body": "braddunbar nt think saw edit answer question loading jquery cdn using loader backbone wait load backbone first time used", "d": "6/2013"}, {"body": "timmywil yeah definitely possible know build scripts gotten little bit trouble past end got figured also imagine ton usecases broken amdbackboneunderscorejquery braddunbar regards break backbone thing think misunderstood intention idea course size negligible keeping modules separate interoperable using module system package manager figure details needs component seems number standalone products within backbone could benefit separate codebases know nt really matter argument likely change", "d": "6/2013"}, {"body": "timmywil yea missed edit sorry work fine cause appreciable performance difference use cases feel free alter source understand point splitting source entirely different worms separate conversation entirely sorry trying address one thing time", "d": "6/2013"}, {"body": "braddunbar understand cake", "d": "6/2013"}, {"body": "braddunbar recommending use script tags nt seem like best solution nt really respond arguments", "d": "6/2013"}, {"body": "timmywil think resistance futile seems backbone wo nt support amd hmmm wonder underscore forked lodash perhaps time backbone fork", "d": "6/2013"}, {"body": "zowens see official fork", "d": "6/2013"}, {"body": "philfreo nt really add anything amd right thinking like real fork la lodash", "d": "6/2013"}, {"body": "added minimal amd implementation", "d": "6/2013"}, {"body": "zowens check exoskeleton real fork much amd support speed improvements optional dependencies etc", "d": "11/2013"}, {"body": "paulmillr awesome looks legit may even contribute", "d": "11/2013"}, {"body": "reopening reconsidered", "d": "11/2013"}, {"body": "self support componentio see use easy", "d": "11/2013"}, {"body": "use case adding special amd registration code backbone using shim configuration read post however remember requirejs shim configuration allows specify library dependencies solve issue requirejs user already faced problems libraries registering requirejs andor requesting libraries named usual example always register libraries vendors namespace etc library tries something like fails solve use requirejs map configuration would nt issue library used exported globals mean nt single use case seems inevitable us write bit code loader configurations amd explicitely registered libraries rather amd supporting external libraries without additional code since possible maybe jrburke could help us", "d": "11/2013"}, {"body": "arcanis one difference wrapping shimming excluded dependencies eg jquery via cdn cause wrapped code break build shimmed libraries known fail case", "d": "11/2013"}, {"body": "agreed using map configuration friendly use cases using rjs build also appealing able avoid globals altogether", "d": "11/2013"}, {"body": "foxbunny see thanks example", "d": "11/2013"}, {"body": "amd explicitely registered libraries rather amd supporting external libraries without additional code since possible amen brother preach", "d": "11/2013"}, {"body": "think know web dev community wo nt converge module system working groups browser vendors force something us finally standard modules able enjoy benefits able make assumptions thirdparty code community encouraged write smaller neatly packaged singlepurpose modules care dependency tree rather script tag insertion tool making assumptions module format handling us also easy see building lot simpler everyone standard module format amd explicitely registered libraries rather amd supporting external libraries without additional code since possible amd attempt build standard modules wgs browser vendors figure us everyone embraces standard everyone start making beneficial assumptions codebase requirejs figure load nonamd code code black box regards assumptions made dependency graph must explicitly stated application configuration assumptions made exports must explicitly stated said would great everyone adhered way thinking clearly best going happen completely understand everyone got ideas modules approached community fragmented amd attempt unify fragmentation suppose wait harmony everyone get boat", "d": "11/2013"}, {"body": "problem way prevent backbone registering without patching copy code something avoid improve maintainability working building new component site old legacy environment uses requirejs want new component sandboxed separate existing code nightmare ca nt use backbone even though ideal candidate forces existing requirejs package neither reach prevent interfering existing code adds requirements jquery underscore whole approach wrong opinion forcing certain way thinking unrelated actual backbone library", "d": "3/2014"}, {"body": "gmmorris suggestion change backbone amd support fit use case nt know issue ca nt subverted requirejs config sure trying accomplish", "d": "3/2014"}, {"body": "amd separation modules would also win using commonjs module definition browserifynode", "d": "3/2014"}, {"body": "nt think amd support hard coded backbone least provide way tell backbone register horrible way would window level flag trying avoid global variables like avoid possible explain use case existing code base dire need refactoring scraping trying build sandboxed infrastructure sits separate packaging existing code mainly prevent developers getting tempted mix new code modules old ones also order refactor various components way live side side without conflicting way obviously specific use case first time happened leading architecture dozen different companies last years consultant see problem direct result way implemented makes mistaken assumption environment setup simply think ideal solution removing assumption especially considering requirejs offers better solutions shims", "d": "3/2014"}, {"body": "gmmorris third party service injecting javascript client page need defensive wrap code function expression immediately invokes specify inline define implementation something like almond specific use case better addressed tool would require internal registration instead globally leaking load almond load backbone great sandbox nt invent", "d": "3/2014"}, {"body": "site brought help rebuild existing site without rebuild everything scratch wrapping option problematic existing backend infrastructure plenty solutions trying make general point regarding codebase point existing solution wrong assuming anything global scale backbone box side note btw problem wrapping code every file want load specific files demand rather concatenate files wrap every single file problematic backend infrastructure also forces concatenate files dev environment creates problems nothing backbone course points problems code makes invalid assumptions", "d": "3/2014"}, {"body": "backbone registering function call significantly better use case encapsulating logic inside function scope exposing global call means code looks like compare globals approach javascript include backbone function noconflict ideal assign undefined windowbackbone instead deleting never existed var backbone windowbackbonenoconflict var hadbackbone false var prevbackbone backbone window hadbackbone true load backbone var backbone windowbackbone hadbackbone delete windowbackbone else windowbackbone prevbackbone edit fixed typos", "d": "3/2014"}, {"body": "problem defined existing require package affects configuration requirejs also adds calls underscore jquery extends prerequisits means making changes existing code base problem spans multiple pages exiting code mess assuming nt option simply wrap backbone code change existing infrastructure simply ca nt prevent backbone registering suggest nt make current usecase already stated specific use case want stress problems project nothing amd support backbone fact surfaced inherent problem way backbone works nt think right vendor component choose register without lest providing way prevent acting assumption", "d": "3/2014"}, {"body": "force backbone store whatever object want sort amd state said use case specific think current state works majority", "d": "3/2014"}, {"body": "yeah thats exactly done point nt solving issue end honestly think way works wrong thanks time anyway guys", "d": "3/2014"}, {"body": "hi adamterlson understand motivation comes actually gone path done tell nt pretty ending using new values leaving old objects alone desirable prevents driven crazy would suggest periodically syncing data via benefit handling caveat mentioned well hope helps", "d": "7/2013"}, {"body": "nt think understand questionissue", "d": "6/2013"}, {"body": "sorry js var categorybackbonemodelextend addproduct function id thisget products push id var categoriesbackbonecollectionextend model category var categoriesnew categories products products products categoriesaddproduct want model methos available collection owns model call model method collection want execute every model collection understand", "d": "6/2013"}, {"body": "best solution probably use invoke", "d": "6/2013"}, {"body": "returns javascript value behaves javascript values array object get pointer string number common case backbone get value either way expected thing javascript array object value", "d": "6/2013"}, {"body": "jblz need return copy attribute value easily override return copy attribute", "d": "6/2013"}, {"body": "wookiehangover thanks knowing expect direct assignment attribute half battle", "d": "6/2013"}, {"body": "hi nicoburns definitely many reasons change read also still reference original options argument fine give shot", "d": "6/2013"}, {"body": "missing something current documentation updated indicate change notable headbanging realized reviewing source options besides model collection el id attributes classname tagname events really discarded though docs seem say otherwise constructor initializenew view options creating new view options pass merged default options already present view attached view thisoptions future reference several special options passed attached directly view model collection el id classname tagname attributes view defines initialize function called view first created like create view references element already dom pass element option new view el existingelement var doc documentsfirst new documentrow model doc id documentrow docid working development version suppose possible disconnect development version production version implication seems difference compression comment removal would expect see undoced changes edge version", "d": "8/2013"}, {"body": "flatrocks development version mean version version still attaches method sounds like might edge version", "d": "8/2013"}, {"body": "doh thanks tgriesser right version omits configure method sure wound edge dev box hard enough time without edgeing anything nt think twice since firstline comment still says backbonejs apologies", "d": "8/2013"}, {"body": "seems already fixed", "d": "6/2013"}, {"body": "property needs constructor case would totally bizarre instanceofthecollectionaswell define model separately fine", "d": "6/2013"}, {"body": "hey jeremy thanks responding docs might date following since specifies using instance method little confused instance method nt running scope implied collection also contain polymorphic models overriding property function returns model var library backbonecollectionextend model function attrs options condition return new publicdocument attrs options else return new privatedocument attrs options", "d": "6/2013"}, {"body": "oh quite right nt think docs ever correct let fix em", "d": "6/2013"}, {"body": "looking docs actually correct slightly unclear fixed needs constructor function model javascript constructors allowed return objects value instance hence example code work still needs called constructor function going access rest collection breaks", "d": "6/2013"}, {"body": "makes much much sense thanks clarifying", "d": "6/2013"}, {"body": "simple test case illustrate problem perhaps misinterpreted docs functions nt expected work comparator hope helps javascript var integer backbonemodelextend defaults value var integers backbonecollectionextend model integer comparator function return value value var test function var ints new integers var lt intsadd new integer value", "d": "6/2013"}, {"body": "according docs collection comparator function allowed models arguments distinguishes respectively nt believe misinterpreted tell appear spot conclusion designed situations two argument comparators also looks like issue briefly come past additionally since ends referring passed option breaks run lastly final line test case crashes made small mistake passing model nonexistent comparator method think meant however would give call method get undefined error collection comparator passed default anyways line", "d": "7/2013"}, {"body": "looking bit appears either documentation issue would need written order allow two argument comparators think docs collection comparator could provide caveat better explains two scenarios v arguments one argument comparator delegate allows use whereas two argument comparator delegate native optimal larger collections removes preprocessing step work default happy submit pull request potentially even work fix methods account two argument comparators want make sure everyone board", "d": "7/2013"}, {"body": "jashkenas see commit potential fix could small documentation fix see would happy submit pull request either make sense", "d": "7/2013"}, {"body": "thanks finding quite right sortedindex existed used use previous implementations collections comparators longer use internally nt exposed anymore remove course underscore function remains available wish", "d": "9/2013"}, {"body": "underscore sortedindex nt actually available included mixins whitelist", "d": "2/2014"}, {"body": "see previous tickets brief override create cleaner", "d": "6/2013"}, {"body": "defer caseywebdev doability think certainly reasonable api parity models collections parsing thanks opening issue etler", "d": "6/2013"}, {"body": "implementation pretty straight forward think major question reason also would happen key val provided instead attribute object", "d": "6/2013"}, {"body": "sounds good case cause snag top head notice order events love see pr implementation thoughts", "d": "6/2013"}, {"body": "great love take stab", "d": "6/2013"}, {"body": "actually going open ticket well came across though assume agree wookiehangover api parity would nice come across cases makes sense using parse handle nested data using mentioned ticket", "d": "6/2013"}, {"body": "tgriesser nt know missed issue agree discussion use case think compelling use case parsing bootstrapped data well nested parsing also also using workaround said also parity argument well", "d": "6/2013"}, {"body": "actual use case needing", "d": "6/2013"}, {"body": "want call existing model object nested data pulling model wanted functionality several occasions coffee class book extends modelsdocument constructor gt info new infomodel chapters new chapterscollection super parse attrs options gt infoset attrsinfo options chaptersset attrschapters options omit attrs info chapters work yes works simpler api parsing nested data collections models though issue works far", "d": "6/2013"}, {"body": "anyone thought change would work defaults without doubleparsing", "d": "9/2013"}, {"body": "get work defaults created assigned initialize function pass could applied parsing step nt know design decision would want nt able think alternate solution", "d": "9/2013"}, {"body": "let move conversation open pr", "d": "9/2013"}, {"body": "update", "d": "6/2014"}, {"body": "actually using modelset modelparse data right since parse option missing would really nice consistency collectionreset etc", "d": "8/2014"}, {"body": "ajax library instance jquery accept setting depends data type however always explicitly set model fetch even backbonesync method", "d": "6/2013"}, {"body": "already sent default jquery passing option set", "d": "6/2013"}, {"body": "like idea backbone traditionally support nested attributes box done projects hijacked project level handle case works flawlessly going close issue move discussion pr", "d": "6/2013"}, {"body": "tjoekbezoer thanks opening issue made test case ca nt replicate describing event model collection signature model error options whether triggered", "d": "6/2013"}, {"body": "correct situation follows code path trigger event happens bubbles collection case however use prevents new model added collection first place validation fails situation actually trigger event sends argument instead error message change see mean", "d": "6/2013"}, {"body": "tgriesser confusion trying avoid p tjoekbezoer see specifically outdated diff comments discussion agree make consistent", "d": "6/2013"}, {"body": "caseywebdev say nt validate new models via comes first argument event debatable think confusing inconsistent argument error message one case attributes error prone especially using event listener collection listen collection model events", "d": "6/2013"}, {"body": "attributes validated line backbone position validating trying persist definitely confusing listen receive completely different parameters based situation", "d": "6/2013"}, {"body": "little offtopic perhaps appropriate", "d": "6/2013"}, {"body": "nt think necessary happens save", "d": "6/2013"}, {"body": "different effect nt prevent invalid model added collection think invalid model introduced via rejected completely default otherwise must manually removed collection event might bit tedious error prone", "d": "6/2013"}, {"body": "tbh think needs removed deal many combinations circumstances alternatives simpler clearer going", "d": "6/2013"}, {"body": "good point would nt idea remove event triggering collection well let model handle", "d": "6/2013"}, {"body": "problem case model created function scope accessible anywhere else wo nt since invalid must pseudoproxy event", "d": "6/2013"}, {"body": "think makes sense order arguments even though error available model well", "d": "9/2013"}, {"body": "hi recurse see describing nt think causing problems reason ca nt use", "d": "6/2013"}, {"body": "surrogate cause problem collectionset however correct use extend nt previously understand constructor method give exact semantics attempting achieve via traditional javascript inheritance idiom updated jsfiddle demonstrate correct way following suggestion nt think bug although might qualify documentation gap appears plenty code uses mistaken approach used aside generally preferable make call backbonemodel first last line constructor function", "d": "6/2013"}, {"body": "depends result want achieve great flexibility put much code like super call", "d": "6/2013"}, {"body": "implementation using definitely effort stay simple fast going quite expensive check every context every event see matches object agree leaky situation love see pr keeps speedy cleaning lingering objects also consider capturing various argument combinations test", "d": "6/2013"}, {"body": "thanks thoughts caseywebdev good test improvements agree paying attention performance seems like stoplistening optimized noarg case single arg two arg etc anyone else thoughts concerns", "d": "6/2013"}, {"body": "initially thought could check existence length map listener turns event nt get removed case however fix case", "d": "8/2013"}, {"body": "nice fix henrahmagix last failing test case fixed changing feel free send pull", "d": "8/2013"}, {"body": "instead checking events stoplistening defined test pass nt feel right another issue like address first using expecting object comes reason case test nt working think get misleading instead could use might slower nt return true sure means events stoplistening object goes events listento events listentoonce following two places nt check events stoplistening determine value variable events listento addressing nt return true conditions safely use check use sure better honest former consistent three cases latter verbose strict think uses events eventsapi determine whether call loop checked null never gets far model set inline comment handle style arguments checked null nt get far model save", "d": "8/2013"}, {"body": "probably overkill casey points tests passing expected behavior backboneevents check", "d": "8/2013"}, {"body": "curiosity people making frequent use specific experience used ensure subject garbage collected case arguments need passed else use", "d": "8/2013"}, {"body": "thanks done braddunbar proxy automatically determines context find events remove also used way mentioned pass arguments remove everything think users use way", "d": "8/2013"}, {"body": "please remove emails sent iphone henry blyth notifications githubcom wrote thanks done braddunbar stoplistening proxy automatically determines context find events remove also used way mentioned pass arguments remove everything think users use way reply email directly view github", "d": "8/2013"}, {"body": "johnbertolini hit mute thread bottom", "d": "8/2013"}, {"body": "fixed added test case", "d": "9/2013"}, {"body": "many thanks", "d": "9/2013"}, {"body": "yes thanks jashkenas", "d": "9/2013"}, {"body": "try underscore invoke method", "d": "6/2013"}, {"body": "fantastic thank much", "d": "6/2013"}, {"body": "hi loicshub thanks pointing backbone generally tries stay away type lifecycle event order let user add like nice quite easy override methods trigger events careful nested adds though", "d": "6/2013"}, {"body": "try irc google group debugging help github tickets maybe forgot require underscore", "d": "6/2013"}, {"body": "hello backbone dependencies jquery underscore templates engine import backbone", "d": "11/2013"}, {"body": "hi getting error already included dependencies still getting error anyone help", "d": "1/2014"}, {"body": "order underscore jquery backbone", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "sounds like probably asking backgrid issues", "d": "6/2013"}, {"body": "tgriesser backgrid uses backbonejs events problem facing calling change event help would greatly appreciated", "d": "6/2013"}, {"body": "problem nt backbone events likely binding many listeners disposing existing listeners properly etc another application specific issue causing model change multiple times backbone events well tested without specific reproducible test case could issue backbone library much especially without familiarity backgrid likely better help tickets stackoverflow post quick fix could wrap change handler debounce", "d": "6/2013"}, {"body": "thanks tgriesser insights", "d": "6/2013"}, {"body": "another possibility server setting id attribute response save triggered second change event case issue change callback simple checking changed attribute model deciding needs resync server", "d": "6/2013"}, {"body": "uh friend ca nt object key twice javascript one keys win", "d": "6/2013"}, {"body": "ca nt one key javascript object replaces case need different way", "d": "6/2013"}, {"body": "doh sorry stupidity today course case nt write code less hours sleep", "d": "6/2013"}, {"body": "tbh causing much grief overriding take special action predefined subcollectionmodel properties agree enforcing base level object huge step forward allowing us ditch temp models way got around past attaching parent collection hash checking data cascaded ridiculous sure looking get working saw temp models used long time", "d": "6/2013"}, {"body": "mostly looking place time assumed usable existence checking see could patch together maybe getting rid temp models going back functionality regards", "d": "6/2013"}, {"body": "temporary models definitely nasty removing features good way deal handling data endpoints nt control huge feature backbone allows define small clean parse methods easily translate data model want work data model server expects regardless whether includes namespace wrapper experience much useful allows entire class applications otherwise difficult structure", "d": "6/2013"}, {"body": "definitely agree handling data variety endpoints important feature backbone convinced creating temporary models mixing data formatting alongside constructing proper nested modelscollections best possible solution might another method would better suited handle one cases creating temporary models know whether data formatted properly feels like hack static method modelcollection seems like work well would prevent need temp models", "d": "6/2013"}, {"body": "caseywebdev braddunbar either get chance want see think thinking could good solution issue temporary models issue case potentially return wrong model still providing outlet handling data endpoints plus gets rid looks like could good compromise sure cleaned decent bit get working deepnested case needing", "d": "6/2013"}, {"body": "thing wo nt currently work polymorphic models", "d": "6/2013"}, {"body": "fixed tim", "d": "9/2013"}, {"body": "see lines default definition problem nt set either directly one required generate model url", "d": "6/2013"}, {"body": "using edge might", "d": "6/2013"}, {"body": "sorry nt post code set property looks like must thanks", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "pretty much always pass options object choice really nt think alias option going benefit backbone community whole", "d": "6/2013"}, {"body": "well lot readable especially new devs using backbone", "d": "6/2013"}, {"body": "feel full collection refresh common task one warrants method passing options objects around manipulate method execution nt nice june casey foster notifications githubcom wrote pretty much always pass options object fetch cfetch reset true success function error function choice cfetch reset true done funciton fail function really nt think alias option going benefit backbone community whole reply email directly view github", "d": "6/2013"}, {"body": "always found jarring model could removed collection without event called case readability definitely subjective case super easy extend base class something like use projects furthermore deferred objects guaranteed implementations", "d": "6/2013"}, {"body": "yep plenty readable think introducing similarly named optionsmethods cause confusion", "d": "6/2013"}, {"body": "workaround use model new mymodel modelsave attributes success function model resp options using collectioncreate much nicer though perhaps something wrong", "d": "6/2013"}, {"body": "see method call arguments expecting please provide jsfiddlecodepen produce case true", "d": "6/2013"}, {"body": "yes look two lines see success callback passes parameters success callback highlighted takes one argument resp actually model results model resp parameters identical success handler create method finally called tried respmodel success callback yielded true try create jsfiddle would need public rest api order know could use", "d": "6/2013"}, {"body": "response vanilla backbone object think old method place using modified", "d": "6/2013"}, {"body": "nah gets wrapped pull request incoming", "d": "6/2013"}, {"body": "check fix", "d": "6/2013"}, {"body": "ah see bad likely regression went", "d": "6/2013"}, {"body": "yup thanks idea release near future would prefer maintain build", "d": "6/2013"}, {"body": "correct case master read info documented next release like add back extend base view like", "d": "6/2013"}, {"body": "thanks opening issue robvon first discussed length handful issues since secondly edge version linked cautionary use risk text accompany assure change well documented time next release cut comment go along comments tend explain going code asis rarely take time justify changes previous versions changelog issues serve understand frustrating find changes like promise worked next release", "d": "6/2013"}, {"body": "thanks yup risk thought mention found coded way works edge version looking see another issue changed compared edge decided close enough regards rob sam breed mailto notifications githubcom sent tuesday june documentcloudbackbone cc rob von nesselrode subject backbone view initialize master version nt set thisoptions used thanks opening issue robvon first discussed length handful issues since secondly edge version linked cautionary use risk text accompany assure change well documented time next release cut comment go along comments tend explain going code asis rarely take time justify changes previous versions changelog issues serve understand frustrating find changes like promise worked next release reply email directly view github", "d": "6/2013"}, {"body": "thanks opening issue opensas quick search see requested couple times similar forms short backbone nt strive class library current plans expose baseobject sort great backbone helping team grok build constructorbased javascript applications exposing functionality directly nt scope backbone seeks provide users", "d": "6/2013"}, {"body": "thanks lot reply try better search previous issues next time", "d": "6/2013"}, {"body": "guess global setting would need ridable per collectionmodel clients calling multiple services", "d": "6/2013"}, {"body": "thing application issue maybe pull request would better start conversation", "d": "6/2013"}, {"body": "sigh always amazes quick folk close issues significant vulnerability backbone docs code currently encourage folk walk right sorry think issue", "d": "6/2013"}, {"body": "erichbschulz sorry felt like rushed close optional property backbone object help security hoping would provide pr illustrating intention", "d": "6/2013"}, {"body": "well hoping conversation would last slightly longer two minutes like fixed code like probably dont time generate backbone patch leaving issue table may encourage time greater familiarity backbone code write one goal would make easy implement xcsrftoken headers hard noone tells people start getting hacked backbone gets bad security reputation reference headers main backbone dock emulatehttp guess copying fiddling function maybe good starging point", "d": "6/2013"}, {"body": "backbone tries stay agnostic persistence channel someone using socketio backbonesync postgresql nodejs backbonesync would use special case definitely think way go especially ever want send ajax request app outside backbone crud methods", "d": "6/2013"}, {"body": "csrf nt anything database persistence though argument insecure default insecure valid might useful least include note docs providing standard convention encourage basic security practice could nice addition though", "d": "6/2013"}, {"body": "going depend ajax api though setting jquery ajax going different superagent others agree tbranyen say nonissue backbone responsibility outline bazillion security holes need accounted web app", "d": "6/2013"}, {"body": "need feed trolls guys", "d": "6/2013"}, {"body": "caseywebdev oh right fair point", "d": "6/2013"}, {"body": "mmm well call fellas code secure webdevs busy folk usually scrambling tie layers rapidly changing technology usable experience default implementation methods wide open door easy close bunch devs wont thank making easy secure either find thread got hacked think issue logic one liner looking header implementation looks like need construct array header get beforesend create interate array setting one headers need", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "haha well thats ok", "d": "6/2013"}, {"body": "better handled global jqueryajax options level server requests secure backbone models", "d": "6/2013"}, {"body": "guys somebody example thanks", "d": "5/2014"}, {"body": "maybe could valid solution", "d": "5/2014"}, {"body": "others wanted code snippet handle global jquery level", "d": "5/2014"}, {"body": "used form included mainjs global ajaxsetup beforesend function xhr settings function getcookie name var cookievalue null documentcookie amp amp documentcookie var cookies documentcookiesplit var lt cookieslength var cookie jquerytrim cookies cookie string begin name want cookiesubstring namelength name cookievalue decodeuricomponent cookiesubstring namelength break return cookievalue send token relative urls ie locally xhrsetrequestheader xcsrftoken getcookie csrftoken working fine thanks support", "d": "5/2014"}, {"body": "discussion going adding promises backbone core feel free chime", "d": "6/2013"}, {"body": "actually red herring backbone relies options passed methods referred issue methods question aliases methods marked deprecation success error options deprecate warnings likely application nt byproduct backbone use jquery", "d": "6/2013"}, {"body": "wookiehangover cool thanks clarification notice jquery doc nt error messages", "d": "6/2013"}, {"body": "try without removing collection automatically remove collection destroyed jaap sat jun pm ouzza notifications githubcom wrote hi everyone got problem app recently wen wana destroy model get amessage call method destroy undefined used methode fetch get informatio collection knowing worked wen used table delete rdv deleteentity function e consolelog deleteentity starts var var item ecurrenttarget var id itemdata id consolelog id var model thatcollectionget id consolelog model destroy model modeldestroy remove model collection thatcollectionremove model search row var row thatfindrow item remove row data table thatotablefndeleterow thatotablefngetposition row consolelog deleteentity end reply email directly view github", "d": "6/2013"}, {"body": "sounds like actually finding model also please use stackoverflow mailing list issues github tickets development library debugging application code", "d": "6/2013"}, {"body": "hi qiangtou right matches replaced treated named parameter run test suite regexp mention fails quite tests", "d": "6/2013"}, {"body": "nt please nt open ticket unless test case share us want help debugging app try irc channel mailing list", "d": "6/2013"}, {"body": "indeed problem method backbone query library davidgtongebackbonequery reproductible test case", "d": "6/2013"}, {"body": "run problem models nt id attribute", "d": "6/2013"}, {"body": "hi szelga pretty sure recently fixed would mind giving latest version master shot", "d": "6/2013"}, {"body": "unfortunately nt help", "d": "6/2013"}, {"body": "gotcha would mind explaining bit detail problem", "d": "6/2013"}, {"body": "ok tested issue seems affects opera checked opera firefox chromium sorry insufficient information test site backbonejs application loads static pages data apipagesindexjson displays via custom view class navigate pages binds backbonehistorynavigate function aclick event see jsscriptjs file opera could repeat bug open browser link refers click page link back main page link main page refers whereas firefox chromium application works intended opera bug grateful workaround", "d": "6/2013"}, {"body": "issue described also present page chrome", "d": "6/2013"}, {"body": "chromium version built ubuntu", "d": "6/2013"}, {"body": "szelga want help still able reproduce problem adding failing test case test suite pull request would wonderful", "d": "6/2013"}, {"body": "sorry seems failed following steps works disregard previous comment", "d": "6/2013"}, {"body": "ok started adding test stuck evaluating check link contains correct href", "d": "7/2013"}, {"body": "think bug opera also angular edit think elaborate bit basically nothing historynavigate problem read href property link opera incorrectly resolve baseuri", "d": "7/2013"}, {"body": "ok guess backbone fault obsolete soon since opera migrating webkit close", "d": "7/2013"}, {"body": "added custom sync temporarily", "d": "6/2013"}, {"body": "hi understand use case somewhat think falls rule uses need know model state synced server rest use custom sync method used events displaying error messages quite lot method usually irrelevant", "d": "6/2013"}, {"body": "ok", "d": "6/2013"}, {"body": "echo wrapping custom sync like totally great way go fact would make great potential wiki page backbone methods may want wrap useful extension patterns", "d": "6/2013"}, {"body": "better way wrap", "d": "6/2013"}, {"body": "think custom causes http read request sent see backend probably get trick", "d": "10/2013"}, {"body": "seems like asking already exists error event triggered case failure", "d": "6/2013"}, {"body": "yep event already included let us know think something needed", "d": "6/2013"}, {"body": "ohh thanks nt found part code", "d": "6/2013"}, {"body": "ohh found catalog builtin events section", "d": "6/2013"}, {"body": "btw nt think right place", "d": "6/2013"}, {"body": "note experiencing issue using version github repo use version backbonejsorg works", "d": "5/2013"}, {"body": "tysonnero yep looks like upgraded edge version release see bit info", "d": "5/2013"}, {"body": "awesomethanks quick response also sorry duplicate search reason nt see bug", "d": "5/2013"}, {"body": "problem sometimes tough find", "d": "5/2013"}, {"body": "hi fixed changes included next backbone release meantime try code current master", "d": "5/2013"}, {"body": "yep yep thanks pointing pierreduchesne", "d": "5/2013"}, {"body": "thanks help", "d": "5/2013"}, {"body": "hi qiangtou careful nested changes easy cause infinite loop also probably get better response type question mailing list irc", "d": "5/2013"}, {"body": "sorry comment longclosed issue really fail see even case provided braddunbar using following snippet var model new backbonemodel modelon change function consolelog change modelset b change b function consolelog b change modelset modelset produces output using model set method related question regard care weigh", "d": "12/2014"}, {"body": "hi jasonslyvia right nt exactly explain loop consider example event made second change means need fire another event notify listeners otherwise listeners fired previously inconsistent state clear", "d": "1/2015"}, {"body": "oh see trick event makes things inconsistent thank brilliant explanation mind copying answer question", "d": "1/2015"}, {"body": "oh see trick event makes things inconsistent nah example without event handler crux matter changes made event happens another event needs triggered maybe better example try statement statement", "d": "1/2015"}, {"body": "yeah seems like rushed conclusions thank patience expertise", "d": "1/2015"}, {"body": "async need successerror handler use promise jqxhr", "d": "5/2013"}, {"body": "thanks tgriesser worked", "d": "6/2013"}, {"body": "please see link leave questions stackoverflow", "d": "5/2013"}, {"body": "remembered thank u", "d": "5/2013"}, {"body": "agree people answered question see statckovewflow link think close point", "d": "5/2013"}, {"body": "yep answer correct", "d": "5/2013"}, {"body": "think valid event default", "d": "6/2013"}, {"body": "think valid event default sorry nt get meant please explain details", "d": "6/2013"}, {"body": "think event would nt useful validation checked frequently sending event constantly asserting model valid would annoying behavior currently model nt actually entering invalid state attempted invalid incorrect attributes nt sent server closing let lie braddunbar think", "d": "6/2013"}, {"body": "would say event already covers case passing assume would since would nt otherwise get events event triggered valid state passing probably nt care validity anyway", "d": "6/2013"}, {"body": "quite", "d": "6/2013"}, {"body": "sending event constantly asserting model valid would annoying behavior maybe would possible store previous state send event model switched state passing validate true assume would since would nt otherwise get invalid events use form validation values set without event triggered calling way know model became valid events calling passing also nt think passing valid use case defaults validate set false fighting defaults passing everywhere manually every time would strange convenient", "d": "6/2013"}, {"body": "use form validation values set without validate true invalid event triggered set calling isvalid way know model became valid events calling isvalid sure even nt use listen event check", "d": "6/2013"}, {"body": "obviously guys jashkenas braddunbar coded lot backbone know ins outs keep returning problem raised alexeypetrushin yes made discovery per brad reply subsequent event tantamount really quite bit also new backbone time discovery took quite bit thinking stepping code know trying really hard keep backbone lean issue keeps cropping alexeypetrushin suggestion trigging event local state goes would helpful addition heft using abovedescribed approach also awkwardness setting keeping around indefinitely know therefore interpreted last validation error still think awkward short code changes method described checking really best approach common use case view needs toggle presenting valid invalid valid render underlying model model attribute use case huge", "d": "2/2014"}, {"body": "dminkovsky solution used clearing error view attempt set model view basically assume inputs view model responds value fact invalid", "d": "3/2014"}, {"body": "afraid give us little information want help first try mailing list irc channel", "d": "5/2013"}, {"body": "fixed thanks jdost", "d": "5/2013"}, {"body": "correct actually problem ran application looking implementation models actually serverside ids", "d": "5/2013"}, {"body": "worry client side solved problem actually application grid collection boxes model board game like chess battleship generated grid everything fine many bugs happened honest understand rare case found quick fix application replaced problem solved spent hours realise bug even rare wanted sure ever noticed", "d": "5/2013"}, {"body": "ah gotcha unfortunate pick different prefix like keeping readability end using dom", "d": "5/2013"}, {"body": "ok read code understood case failing nt know add model collection model reference duplicate collectionbyid map mean id cid solve problem backbonecollection map collectionbyid collectionbycid instead one references totally agree rare bug wo nt need fix lot work maybe lower performance thanks", "d": "5/2013"}, {"body": "franckernewein used case combined one object simplicity", "d": "5/2013"}, {"body": "caseywebdev okay nt know thanks", "d": "5/2013"}, {"body": "good mornin ferahl tried reproduce issue locally nt able would mind providing sample code illustrates problem", "d": "5/2013"}, {"body": "core issue getfragment claims return crossbrowser normalized url returns different values firefox chrome call returns chrome firefox sees different url fires", "d": "5/2013"}, {"body": "example", "d": "5/2013"}, {"body": "debugging appears firefox triggers two events one one continue debugging later suspect easily solved without fix firefox", "d": "5/2013"}, {"body": "completeness nt issue spaces characters get uri encoded quite common add catch path route would immediately navigate soon special character entered hash firefox feel worth mentioning prepare example well required", "d": "5/2013"}, {"body": "braddunbar able find firefox bugzilla quirk", "d": "9/2013"}, {"body": "actually using firefox unable reproduce anymore dominictobias looks though fixed firefox never really able much still reproduce", "d": "9/2013"}, {"body": "take", "d": "10/2013"}, {"body": "simplified version bug shown still reproducible firefox well firefox nightly", "d": "10/2013"}, {"body": "braddunbar see alert last jsfiddle think something ca nt address think adding back double lesser two evils greater", "d": "10/2013"}, {"body": "bug certainly lesser two evils maybe nt even qualify bug relevant context including bug filed judging response boris zbarsky close relation larger issue unresolved four years would nt count fix camp anytime soon said work around fairly easily following two rules nt use unencoded characters routes unicode space etc encode user generated portions route", "d": "10/2013"}, {"body": "righto thanks reference", "d": "10/2013"}, {"body": "yeah bums ff breaking nonwestern routing majorly bums essentially means ca nt use semantically meaningful nonascii routing right turn means whole lot users use ascii routes escape everything even era got unicode tlds braddunbar also pointed regardless ff wait currently existing versions ff fall use nt bummer makes wonder seriously sort workarounds might available besides bugging ff fix kind ca nt believe nt bigger deal double decoding still problematic case user generated route fragments since devs would double encode user routes well", "d": "10/2013"}, {"body": "ran issue tried implement drag amp drop functionality backbone view events table looked something like happened situation sometimes pointer escaped bounding box el position updated resulting mousemove beeing fired el parent els another solution could syntax like", "d": "5/2013"}, {"body": "use case solid simply use jquery events need event events hash nothing delegation involved", "d": "5/2013"}, {"body": "common pattern use layoutmanager looks like javascript backboneviewextend bind event outside view afterrender function thishandlerreference bind thishandlemousemove backbone document mousemove thishandlerreference ensure view properly cleaned cleanup function backbone document mousemove thishandlerreference delete thishandlerreference using handler reference probably safest way go typically nt got ta live dangerous somehow", "d": "5/2013"}, {"body": "like idea combining events event hash makes code readablepredictable perhaps document wide hash could introduced events viewel document events defined hash think would suitable plugin", "d": "5/2013"}, {"body": "templates usually functions nt", "d": "5/2013"}, {"body": "nt height element inserted dom try", "d": "5/2013"}, {"body": "code dom soon hits method problem view inserted document height calculated basically may work may unintended side consequences depending happening abovethehood getting full scope firstdeveloper code looks like hooks lm simulate defining method view triggering code inserts view document later", "d": "5/2013"}, {"body": "tgriesser right try works fine case however tbranyen said also interesting think change previous implementation hewas mentioning guys rock", "d": "5/2013"}, {"body": "found many methods backbone check passed parameter may cause error info matterless true root causeit unfriendly developer", "d": "5/2013"}, {"body": "ifishing generally agree stack trace generated scenario particularly frustrating provides little context actual issue", "d": "5/2013"}, {"body": "seems describing passing first argument accident case get error right away case think leave", "d": "5/2013"}, {"body": "use discouraged nt mentioned docs call usual javascript way", "d": "5/2013"}, {"body": "thanks reply jeremy nt aware fact finished updating classes use super advantage see super shortcut later change parent class nt go class methods fixing references reason usual js way prefered avoid adding custom extensions js", "d": "5/2013"}, {"body": "bunch tickets explain reasoning search super come ip", "d": "5/2013"}, {"body": "searched curios one link", "d": "5/2013"}, {"body": "namespaces nt real backbone events reason change works like automatically triggered hood simply trigger session well", "d": "5/2013"}, {"body": "cool understand nt actually namespaces think parsing custom event strings manually triggering namespace something bb used recall working past answer stackoverflow also seems think used misremembering", "d": "5/2013"}, {"body": "docs repository", "d": "5/2013"}, {"body": "manually edit html sorry p seriously way beyond time limits see writing markup render proper html maybe", "d": "5/2013"}, {"body": "lol favorite ticket month", "d": "5/2013"}, {"body": "tried", "d": "5/2013"}, {"body": "also duplicate though sounds like caseywebdev suggestion could trick", "d": "5/2013"}, {"body": "great support guys closing issues without even looking makes regret picked backbone spine caseywebdev matter fact first route wo nt fire would lead app working stare blank page tgriesser even try assume would work know people say assume much nt good day good luck", "d": "5/2013"}, {"body": "suprmax understand frustration think probably address issue opening duplicate ticket probably best way go though let discuss back", "d": "5/2013"}, {"body": "believe design though agree feels bit odd every routing syntax rails express etc prioritizing top bottom think idea override old routes whenever want way said never override route practice", "d": "5/2013"}, {"body": "think idea override old routes whenever want way explain", "d": "5/2013"}, {"body": "putting recently added routes top priority list give precedence previously defined ones initially routes would map callback route redefined routes map callback", "d": "5/2013"}, {"body": "probably good idea though", "d": "5/2013"}, {"body": "hence never override route practice would like see ordering reversed current functionality using like opensas", "d": "5/2013"}, {"body": "thanks may pm opensas notifications githubcom wrote found important difference define routes using routes hash manually adding using route method using hash routes seem checked order entered hash even though far know javascript makes assumption order properties hash add using route method seem checked iverse order last entered routes checked first clear code using hash equivalent calling routeroute method note order course wonder design decision anomally bug would correct way handle route method tempted create addroute method temporary hash reverse add addallroutes method reply email directly view github", "d": "5/2013"}, {"body": "think behavior clearly stated documentation perhaps would wise add another parameter telling new route added even better differnte method think routerpush route name callback would clearly show route would added end hence would evaluated last saludos sas", "d": "5/2013"}, {"body": "topdown fact ca nt imagine would ever want overwrite route asking trouble", "d": "5/2013"}, {"body": "issue raised pointed comment explaining behavior added similar note documentation", "d": "5/2013"}, {"body": "think bug please reproduce reduced case codepenjsfiddleetc investigate code example looks correct problem need see whole case", "d": "5/2013"}, {"body": "thank alot reply already migrated every call objecton listento think must hitting pretty strange case see reproduce jsfiddle hint think help debug", "d": "5/2013"}, {"body": "hint think help debug nothing example really stands would try using edge version bb see makes difference", "d": "5/2013"}, {"body": "hi casey good look problem discovered nasty bug code close ticket thanks lot time", "d": "5/2013"}, {"body": "problem glad resolved", "d": "5/2013"}, {"body": "event actually handled modelcollection methods rather inside block little reasoning see method also need define success handler similar handles response trigger event", "d": "5/2013"}, {"body": "documentation incorrect docs state whenever model collection begins sync server request event emitted request completes successfully get sync event error event trigger sync error event upon completion suggestion handle manually gets triggered model collection documentation updated reflect", "d": "5/2013"}, {"body": "well nt supported seems expected need implement functionality maybe quick note docs though braddunbar thoughts", "d": "5/2013"}, {"body": "would nice based current wording docs expect call trigger event upon completion", "d": "5/2013"}, {"body": "think pass attr maybe", "d": "5/2013"}, {"body": "hi mystist actually contains last return could truthy value information need contained created method", "d": "5/2013"}, {"body": "return want know attrname invalid contain return string", "d": "5/2013"}, {"body": "nt string return object attributes corresponding errors like", "d": "5/2013"}, {"body": "mean nt string really wonderful thank", "d": "5/2013"}, {"body": "problem check code details", "d": "5/2013"}, {"body": "checked code really works awesome", "d": "5/2013"}, {"body": "always lovely someone gets excited feature", "d": "5/2013"}, {"body": "problem", "d": "6/2013"}, {"body": "hi juliansantaana simple enough achieve one liner code nt think common enough pattern add support functionality method", "d": "6/2013"}, {"body": "two views view contenteditable element views observe model one contenteditable elements dom event focuses element related view know set state related view view know currently edited model fires change event view ignores event currently edited hand view currently edited updates contenteditable element current model data", "d": "7/2013"}, {"body": "sure right way use backbone probably appropriate open bug ticket try mailing list irc channel instead", "d": "7/2013"}, {"body": "backbone assumes server api responds proper http status code model state body case treated model attribute appears merged backbone better rely rest agreements due expected system behavior", "d": "5/2013"}, {"body": "ahhh see thanks response thought issue backbone", "d": "5/2013"}, {"body": "poke", "d": "6/2013"}, {"body": "thanks opening ticket yamsellem read see prior discussion backbone nt expose details underlying http method details via api something need know application best bet might wrap cases nt need know underlying mechanism called", "d": "6/2013"}, {"body": "hi problem sounds application specific would better suited google group documentcloud irc github issues strictly issuesfeatures dealing backbone thanks", "d": "5/2013"}, {"body": "look cors works expected preflight request", "d": "5/2013"}, {"body": "avoid reflight request", "d": "5/2013"}, {"body": "sending simple request defined", "d": "5/2013"}, {"body": "tried server side handle preflight calls work browser send another request preflight say possible backbonesync bug think", "d": "5/2013"}, {"body": "regardless nt backbone issue suggest asking stackoverflow irc", "d": "5/2013"}, {"body": "explain backbone issue", "d": "5/2013"}, {"body": "read source backbonesync see backbone simply passes everything ajax", "d": "5/2013"}, {"body": "try one nt backbone issue", "d": "5/2013"}, {"body": "original headers without php think server well configured tried headers gave work simple ajax calls work well example load json files service define function require exports module var require jquery tried request method responded well collectionfetch works well problems modelsave tried way maybe something wrong got attributes error console check kind error", "d": "5/2013"}, {"body": "right thanks added server config allow contenttype works firebug best chrome console printed contenttype allowed", "d": "5/2013"}, {"body": "many tanks", "d": "5/2013"}, {"body": "requests requires quite different headers api server uses authentication server header course need make xhr request clientside api server uses header basicauth request nt need instead need include case like ah seems solved issue writing", "d": "5/2013"}, {"body": "ye thanks anyway helped lot", "d": "5/2013"}, {"body": "thanks much comment chrome giving better error messages firebug helped us solve problem", "d": "8/2014"}, {"body": "welcome", "d": "8/2014"}, {"body": "someone please help issue", "d": "9/2015"}, {"body": "case anyone else problem add x list accesscontrolallowmethods used set backboneemulatehttp true", "d": "1/2016"}, {"body": "nt seem correct javascript synchronous timer despite appearing first code wo nt ever run function runs completion perhaps simply need reorder routes put lessspecific one last", "d": "10/2013"}, {"body": "might want try rerendering view change nt seem like need", "d": "5/2013"}, {"body": "grab source already cleaner version would help", "d": "5/2013"}, {"body": "would really helpful", "d": "5/2013"}, {"body": "mornin thanks issue one already discussed number times sure check conversations gist backbone intentionally stayed away exposing generic class library since main purpose", "d": "5/2013"}, {"body": "slightly offtopic regard example would recommend defining namespace extending version backbone classes using version application code personally alias namespace like would alias enclosing function would add classes relevant application namespace extend plugins including say something like typeahead bootstrap namespace need modify well use instead etc little bit cleaner since add functionality still leverage original implementation bootstrap less hassle chance interfering miniapplications plugins using bootstrap since changes also shorter edit gist backbone intentionally stayed away exposing generic class library since main purpose would argue going logic function code rely library provide since obviously essential backbone work nt awkward providing people use library use class like constructs since scope library essentially saying backbone bits extendable nt really make sense also say functionality provided external library backbone still provide alias referencing within application customizing ie", "d": "5/2013"}, {"body": "seems go completely backbone philosophy making everything configurable currently want overwrite wrap app enhance inheritance capabilities backbone classes get reference function one classes eg manually overwrite method every class contrast implementation allows easily override single global method used app automatically seems like much powerful approach see reason use especially already also used also core backbone functionality issue think general rule stay howtodoobjectorientationinjavascript debate backbone might one day expose generic class object nt surely exposing therefore making cleanly overwritable exactly opposite make difficult people use different implementations class functionality", "d": "5/2013"}, {"body": "yep intended change braddunbar pointed reasoning one keep open reminded update change log", "d": "5/2013"}, {"body": "spent ages debugging issue caused please update change log", "d": "6/2013"}, {"body": "bit retro fix since couple versions ago patch pull incoming", "d": "6/2013"}, {"body": "addressed", "d": "6/2013"}, {"body": "fwiw screws deferreds therefore jquery docs jquery use async false jqxhr deferred deprecated must use successerrorcomplete callback options instead corresponding methods jqxhr object jqxhrdone deprecated jqxhrsuccess", "d": "5/2013"}, {"body": "wookiehangover thanks make loading collection make sure loaded going next step", "d": "5/2013"}, {"body": "support questions like much better suited documentcloud channel freenode irc closing issue test case reproducible isolate bug", "d": "5/2013"}, {"body": "hi crisfole fixed master via grab copy use next release", "d": "5/2013"}, {"body": "man", "d": "5/2013"}, {"body": "reference discussed consequences explained", "d": "5/2013"}, {"body": "issue bit today hope fix gon na released soon", "d": "9/2013"}, {"body": "affected", "d": "9/2013"}, {"body": "", "d": "2/2014"}, {"body": "change constructor behavior problem blindly passing ajaxspecific options straight model constructor", "d": "2/2014"}, {"body": "hi juliansantaana query parameters fact ignored url contain hash fragment looks like use url instead think better results hope helps", "d": "5/2013"}, {"body": "braddunbar oh get mean way using query parameters backbone particular reason ignored", "d": "5/2013"}, {"body": "quite reasons outlined thread also includes solutions using fragment instead", "d": "5/2013"}, {"body": "braddunbar thanks helped lot ended using parameters sending query string pretty urls question regarding know way creating linking url parameters way thing need change url fly depending date range selected example url calendar changed need change url routernavigate way replace date parameter built backbone", "d": "5/2013"}, {"body": "juliansantaana nothing particular generally generate url based ui parameters", "d": "5/2013"}, {"body": "braddunbar thanks used regexp replace date param backbonehistoryfragment new date param turned pretty consistent solution", "d": "5/2013"}, {"body": "seeing issue problematic using haschanged attribute model collection enforce example user selection single member", "d": "5/2013"}, {"body": "shadowsilver way could provide boiled example behavior describing hard disentangle issue stuff going fiddle", "d": "6/2013"}, {"body": "ok simplified example posted earlier version version show briefly meaning example simple model selected property collection encloses collection onchange listener cycle model set false ones true exception item fired listener set selected property second item haschanged method says also first item changed already called handler previously hope clear", "d": "6/2013"}, {"body": "sure supposed demonstrate consoles logging exact thing perhaps already fixed", "d": "10/2013"}, {"body": "fixed master release coming soon", "d": "5/2013"}, {"body": "ok thanks", "d": "5/2013"}, {"body": "sorry bad already added", "d": "5/2013"}, {"body": "example putting properties directly object something want able fault bypass altering object something prevented future version javascript nt touch attributes", "d": "5/2013"}, {"body": "course nt seem like expected behaviour dealing publicprivate date setup catch guard data gets changed downtheline pulled attribute object modified intention able bypass manner ok", "d": "5/2013"}, {"body": "yep definitely intention convenience getting things", "d": "5/2013"}, {"body": "bypass set altering attributes object something prevented future version javascript tbranyen point info might able prevented future js versions thx", "d": "5/2013"}, {"body": "dgbeck check setter functions", "d": "5/2013"}, {"body": "mornin shikolay thanks issue one already discussed times check details", "d": "5/2013"}, {"body": "hey matthewwithanm nt think much drawback using plain old model functionality also allows share state object multiple views", "d": "5/2013"}, {"body": "thanks mponizil using model okay result pretty clunky interface really want bindable properties either saddled unwanted layer indirection write boilerplate delegating also appreciate uniform method gettingsetting properties alone que sera", "d": "5/2013"}, {"body": "hi matthewwithanm nt quite understand mean part using model clunky could provide example", "d": "5/2013"}, {"body": "clunky comment referring extra layer indirection extra model object boilerplate required hide want simple descriptor bindable property example ca nt put model nt shared would normally store view course nt apply views object hosts properties many cases extend model clutters object methods nt want fetch sync etc", "d": "5/2013"}, {"body": "fair enough see mean sure backbone split attributes models though", "d": "5/2013"}, {"body": "nt know sounds like could actually kind neat provide mixin sometimes feel like hack models nt really models observables also nt take much model methods say matthewwithanm want give shot see people think could make neat plugin", "d": "5/2013"}, {"body": "jashkenas put kibosh pr going close issue", "d": "5/2013"}, {"body": "events written format", "d": "5/2013"}, {"body": "zyzniewski case want bind listener multiple events element jquery need backbone write way acceptable elegant opinion possible hope format support multiple events comma separated like code", "d": "5/2013"}, {"body": "keshin called elegant one looks lot easier read", "d": "5/2013"}, {"body": "srcspider fine events case nt think still easier read events even probability small possible", "d": "5/2013"}, {"body": "keshin personally maintaininginspecting code almost always prefer explicit less explicit need eye parsing decipher meaning easier commentnote way comma separated list cryptic especially comma invalid selector character also easier changerefactor code layed compared code canned single line agree sometimes favorable compact code since lot less code easier scan though nt believe case case think sort magic allowed hooked part default distribution cents", "d": "5/2013"}, {"body": "thanks comments srcspider find way hook customized events hash correct wrong javascript var multipleeventview backboneviewextend delegateevents function events var parsedevents clone events parse multiple events binding", "d": "5/2013"}, {"body": "hi ravirajani thanks pointing however gone road nt turn well particular decoding fragment comparing makes impossible tell whether slash encoded original fragment firefox several long standing bugs detailed prevent us solving problem effectively would greatly appreciate express concern mine nt gotten us anywhere", "d": "5/2013"}, {"body": "hi braddunbar thanks responding quickly understand issue slash suppose use locationhref instead locationhash firefox decodes getter locationhash ca nt distinguish hash containing encoded slash hash containing genuine slash although opinion simply checking hash changed unlikely changed replacement slashes decoded slashes vice versa much likely someone hit bug happens hash contains single quote nt changed", "d": "5/2013"}, {"body": "well problem nt checking whether url changed knowing parameters afterwards example take fragment pattern decoding get way know slashes originally encoded ie separators", "d": "5/2013"}, {"body": "yes understand suggesting using decoded values testing change use encoded values processing parameters afterwards currently patch suggested wo nt affect logic way avoid bug firefox single quote hash", "d": "5/2013"}, {"body": "whoops last comment buried bottom inbox reason ca nt use decoded version comparing reason ca nt use processing look like fragment decoded fact quite different", "d": "5/2013"}, {"body": "point made two comments ago would unlikely hash would changed suppose matter opinion thanks comments anyway", "d": "5/2013"}, {"body": "ravirajani hit bug firefox burned day trying figure cause moment relying escape unescape convert special characters would love see fixed simple workaround", "d": "10/2013"}, {"body": "morning josejamart thanks posting glad review patch increases performance start reducing number events views thousands views tens thousands events gon na put stress browser regardless reduce number elements start one look thousands views lazy load would look reducing number listeners", "d": "5/2013"}, {"body": "josejamart reduce number viewslisteners might also best case replaced avoid altogether instead manually tracking needs ed performance rather using", "d": "5/2013"}, {"body": "think early close issue say solution reduce view maybe question browser needs seven seconds create paint view needs minutes delete memory created view think api implementation problem reduce views always need time delete memory create nt understand hand must review method two context listening one event launch context method finish context nt deleted help want think method nt well defined trying implement single page application need hight control memory test chrome profiler cases memory event releasing tgriesser need replace remove stoplistening defined simple applications nt better well implementation think nt difficult happen backbone changes add new functionality methods need change hundred js files adapt", "d": "5/2013"}, {"body": "sorry direct english bad nt know expressing well want help questions make think complain sorry", "d": "5/2013"}, {"body": "reference passes fails", "d": "5/2013"}, {"body": "back issue expensive existence checking life would much easier could count id create temp model", "d": "5/2013"}, {"body": "let fix", "d": "5/2013"}, {"body": "way see fixing lay law say may take argument relevant model id rule place remove need temporary models speed things considerably obviously breaking nonbreaking way around", "d": "5/2013"}, {"body": "refresh memory make sure nt miss anything accidentally use case would breaking exactly", "d": "5/2013"}, {"body": "right everything works hunky dory collection model level methods break would introduce would occur would nt creating model modellevel parse instead rely naked object determine existence circumvented parsing collection level wo nt get use model context sure common requirement either", "d": "5/2013"}, {"body": "circumvented parsing collection level backbone used work relatively recently nt think would asking much go back behavior especially pretty easily use permodel parse function within general collection parse like iirc braddunbar good reasons changing current behavior", "d": "5/2013"}, {"body": "know brad fan factory model functions would case would differentiate model level unfortunately nt think modellevel parse avoid temp models something got ta give", "d": "5/2013"}, {"body": "factory functions still work without modellevel parsing used successfully backbone however turns rather idiomatic backbone code bit nastier since model parsing logic needs duplicated collection parsing also like examine premise considering change adding models collection causes stack overflow much clarity willing sacrifice use case", "d": "5/2013"}, {"body": "well regardless whether reasonable amount models add collection creating temporary models better everyone possible", "d": "5/2013"}, {"body": "issue still valid fiddle still fails latest backbonejs repo", "d": "6/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "coodoo thanks opening issue could make pull request change take discussion realm theory place look implementation easily", "d": "5/2013"}, {"body": "regenerated next time called consume another nt think change desirable", "d": "5/2013"}, {"body": "second thought testing caseywebdev said make sense need delete please close issue thanks", "d": "5/2013"}, {"body": "hey yamsellem talking bit whole child view reference handling gist yes get rid view need call turn calls removing dom way around jashkenas points views nt need explicitly removed unless maintain references objects outlive eg event listeners models collections object pubsub objects live die view nt need removed however often nt case helps bit outlive view yes need implement mechanism trackingcleaning orphaned child views seems tripping point many minimal solution come backbonenested feel free chime ticket thoughtsquestions cases discussing", "d": "5/2013"}, {"body": "foundation plugins use hashurls state obviously router using hashurls state recently pushstate gets rid hashes way routing frontend really file issue foundation use hashes plugins instead", "d": "5/2013"}, {"body": "make note would nice way tell backbone consume hashurls push state turned website wants support ie way backbone solely use push state anchor tags among things would still work", "d": "5/2013"}, {"body": "mehcode looking option", "d": "5/2013"}, {"body": "information using pushstate unless mistaken plus foundation mobile navbar menu icon unless mistaken using hash url link catch click verified test hashchange false option tonight see fixes things", "d": "5/2013"}, {"body": "tgriesser get trying check github phone fully woken thanks information", "d": "5/2013"}, {"body": "closing one reopen something identifies exactly bug might fault", "d": "5/2013"}, {"body": "right made test foundation totally removed seems work strange tried reproduce foundation could done menu link worked sorry false alarm add keep hashchange false option even sure purpose thanks", "d": "5/2013"}, {"body": "yes conscious design choice fire events models added collection sorted use case trouble", "d": "5/2013"}, {"body": "code question looks something like since events fired right order sorted inside collection happens model view find precursor", "d": "5/2013"}, {"body": "exactly issue collection sorted add events fired toadd array hence add events firing unsorted order results insertat function inserting elements correctly fninsertat function index element index return thisprepend element var previous thischildren eq index previouslength previousafter element return else return thisappend element", "d": "8/2013"}, {"body": "fixed master", "d": "9/2013"}, {"body": "way mark attribute deletion apart setting null always fine use cases", "d": "5/2013"}, {"body": "never thought deleting data partially common use case", "d": "5/2013"}, {"body": "btw steveklabnik oh jashkenas fixed typo p", "d": "5/2013"}, {"body": "deletion also updating patch needs diff type sending applicationjson violation spec backbone hope rails early opportunity educate users patch works opportunity right early sent mailbox iphone wed may pm ted han notifications githubcom wrote btw steveklabnik reply email directly view github", "d": "5/2013"}, {"body": "hrm using tastypie updating pretty straightforward nt know spec edit checked ietf yeah look rather naive since implementation simple", "d": "5/2013"}, {"body": "benefit everyone else discussion wed may pm tim branyen gt wrote hrm using tastypie updating pretty straightforward resourceuris nt know spec reply email directly view github", "d": "5/2013"}, {"body": "worth reading spec nt lead believe requires different type spec explicitly prescribe particular patch format would reasonable servers support patch requests usual merge semantics fancier use cases either way think would quite stretch us send jsonpatch requests given nothing else implements include jsonpatch jsonpointer libraries implementation nt relevant us concerns arbitrary manipulations arbitrarily nested json objects really care flat lists values endpoint serving relational db", "d": "5/2013"}, {"body": "jashkenas right backbone already nt manage nested values attributes since backbone would generating jsonpatch expressions actually nothing stopping us generating patch operations top level attributes track anyway deeply nested objects folks set things manage rather putting onus backbone figure deep diffing predicated assumption value key operations take arbitrary object er value also regarding object transmission document oriented stores", "d": "5/2013"}, {"body": "json patch rfc implementations test suite think probably happen current rails behaviour needs get assigned media type anyone talk rails folks biggest breakage people assuming applicationjson patch semantics support applicationjsonpatchjson next step", "d": "5/2013"}, {"body": "think role considered would nt try send json patch server nt indicate accepts yeah nt see reading spec mandates particular format seems leave things pretty openended imo use case fixedshape objects current format works great usually places falls json patch steps see deletion properties changing object shape modifying arrays advanced semantics like conditional updates whose semantics ca nt captured etags via json patch sure many backbone could capture without significant user intervention maybe first two", "d": "5/2013"}, {"body": "jashkenas see errata wrote patch nt make explicit thought obvious rolls eyes errata filed saw rails done", "d": "5/2013"}, {"body": "eek unfortunate wanted speccompliant nt want implement jsonpatch jsonpointer change backbone api send post model url stop sending patch entirely correct", "d": "5/2013"}, {"body": "probably really nt benefit using patch post patch format nt selfdescribing rails accept different media type patch format different thing", "d": "5/2013"}, {"body": "steveklabnik rails going ship intentionally contraspec implementation patch happens nt set stone cool http apis nt change", "d": "5/2013"}, {"body": "create new media type instead semantics send fields overwrite current ones like current backbone rails implementations rails rails add support switch incoming media type either overwrite processing json patch processing edited use correct syntax media types", "d": "5/2013"}, {"body": "recently implemented backbone rails json patch support gist might ideal definitely nt think necessary create whole new mimetype rails pieces getting proper jsonpatch support going capacity backbone side things main issue try call backbone ca nt preajax nt expect array set attributes manually building patch array sure best handle okay core feature backbone seems like would least need way disable presave postsuccess use wait nt try call nothing near tell seems like could crazy unexpected behavior", "d": "5/2013"}, {"body": "reference backbone specific part gist coffee patch attrs default set save fail build patch set attrs", "d": "5/2013"}, {"body": "question patch rails today media type applicationjson", "d": "5/2013"}, {"body": "general believe happens case exactly thing happens postpatchput anything media type first tries turn media type generic hash parameters lets controller whatever wants hash convention generally partial update via think changed http method used match controller action hacks probably would raise argument error expecting params specific format think need add check return proper code", "d": "5/2013"}, {"body": "fought endlessly endlessly basically got tl dr rails put patch routed update exact thing backbone really default controller scaffold works adstagedavid mentions except rails always pretty good support different media types nt played around works http patch tenderlove implementation jsonpatch nt actually played around yet", "d": "5/2013"}, {"body": "steveklabnik curious think idea provide something easy use case like rails backbone already also allow future extensibility full support violate spec errata barking wrong tree", "d": "5/2013"}, {"body": "nt fully thought one bit weirdness rails nt send json default sends html forms certain sense rails ca nt support patch via certain type since going getting generally speaking couldshould support right thing well override like supports sending actual http requests right verb requests", "d": "5/2013"}, {"body": "cool http apis nt change oh jashkenas snarky comment last night forgot post cool uris nt change church bernerslee church fielding let return real discussion nt want entirely derail thread", "d": "5/2013"}, {"body": "rails always pretty good support different media types nt played around works http patch tenderlove implementation jsonpatch nt actually played around yet tenderlove nt released rfc compatible json patch implementation yet one sticking points lay gist form support handling right block standard updates patch versions work side side kind ugly would nt work rails trying pretend form patch definitely wrinkle process idea could properly handled think support html form updates rails would need standard update method takes post patch method actual patch requests sent backbone hopefully could treated separately", "d": "5/2013"}, {"body": "talking patch bit mnot afternoon couple thoughts conclusions full semantics jsonpatch jsonpointer go beyond backbone rails need api backed relational database instead json store soon rails node via express support start accepting patch default cat bag major rest apis beginning use patch fashion ensure becomes defacto standard better worse nt see real fundamental problem saying semantics sending patch defined particular api talking interpret list attributes properties set top level resource perhaps go perform deep merges json fact patch might interpreted slightly differently two different applications nt feel like dealbreaker especially already true effect post put given unlikely able get post put patch format aesthetically pleasing interface web application expose need fancier operations always use jsonpatch nt think backbone rails needs change current behavior defaults controversially nt think makes much sense rails support jsonpatch long using activerecord relational database operations adding would errors ca nt move structure within value column ca nt delete attribute schema set another way saying would nice theory ca nt imagine anyone nt using document store wanting turn", "d": "5/2013"}, {"body": "took something quite different away conversation rails still use media type define semantics overloading applicationjson mean rails accepts json patch going cause interop problems nt friendly push rails folks really nice could support said rails important thing dispatches media type request coming nt introducing new patch formats future going harder", "d": "5/2013"}, {"body": "rails behave patch support nested attributes currently", "d": "5/2013"}, {"body": "interested", "d": "5/2013"}, {"body": "jashkenas would nt still good support users want patch actual jsonpatch would feel changing something like javascript save method patch options thisbuildpatchoptions attrs options save method buildpatchoptions function attrs options optionsattrs attrs return options nt mean functionality change backbone core gives easy hooks allow backbone plugins implement patch jsonpatch users want override buildpatchoptions set right content type build patch array", "d": "5/2013"}, {"body": "adstagedavid fairly sure already via option right", "d": "5/2013"}, {"body": "yes think correct braddunbar definitely missed trying hack implementation jsonpatch give shot see works", "d": "5/2013"}, {"body": "yeah definitely works behavior documented anywhere looking could missed would nt expect backbone would prefer data option attributes provided syncing maybe update documentation backbonesync order", "d": "5/2013"}, {"body": "proxy passes options give default using options custom behavior encouraged idiomatic thought fact documented ca nt seem find glad accept patch adds though", "d": "5/2013"}, {"body": "one option think might closer semantics want", "d": "5/2013"}, {"body": "loesak big talking loaded pretty big collections nt gotten point freezing browser probably indicator trying load way much collection something else going tried rather", "d": "5/2013"}, {"body": "big ok sounds like processing needs optimized either way backbone nt asynchronously default certainly process asynchronously like implement function whatever", "d": "5/2013"}, {"body": "tgriesser currently talking possibly soon yes looking improving performance code feel issue fundamental look backbones source see reset option actually versions behind problem exists add method collection noticed moved set method newest build", "d": "5/2013"}, {"body": "jashkenas okay first closing defect even hearing counter argument nt understand people really implies two things nt care hear opinion already decided mind issue nt care hear opinions users also may experiencing issue closing defect effectively taking list open defects people review counter argument backbone framework real control people use provides hooks use framework perform additional processing certain stages models lifecycle could improve performance code written gets executed processing model sure really pushes problem road code performant point dealing larger larger datasets brings us problem outside realm using framework maybe maybe maybe people situations working significantly large datasets coming data sources nt provide simple features like querying pagination fact matter backbone control people using framework given would interest backbone performant without blocking ui javascript web workers fully supported one thread ui thread matter performant code executing code blocking ui real game play world long blocking ui even tricky developers nt control browser going start throwing script responding errors users problem typically first seen looping large arrays hashes performing complex operations item actually operations nt even need complex large enough dataset fact willing bet given simplest representation model given enough without additional model processing backbone would cause browser throw snr developer someone told code would call bug start looking various options resolving commonly solved problem think two approaches moment time supply code changes first technique easily found searching javascript nonuiblocking looping javascript iteration nt process items collection created rather process items requested collection jquerydatatables offers something similar also akin andorid arraylistadapters yes suggestion could continue overwrite internal functions backbone get work way need practically done every function already figured would point issue listen thoughts apparently care hopefully fame thinking works future go mv js frameworks look suggestions point still remains issue code fundamental issue javascript coding backbone taking account", "d": "5/2013"}, {"body": "background information average models currently take milliseconds execute parse method would consider slow currently attempting iterate records hardly call large dataset edit correction records", "d": "5/2013"}, {"body": "hey loesak agree completely good idea look data processing main ui thread exploring matchbox inc dataintensive application however working within realms collections opting instead model contains dataset crossfilter representation something within collection period collections nature create model representations wrap actual input creates double objects memory fine small datasets powerful proxied methods crossfilter dumb force work way want works well indexes double amount objects memory use right tool job man", "d": "5/2013"}, {"body": "tbranyen thank reply would interested knowing crossfilter yet heard targeted information share eg links something easily google edit guessing look thank", "d": "5/2013"}, {"body": "loesak yes", "d": "5/2013"}, {"body": "cfator reason saving rather latter work fine", "d": "5/2013"}, {"body": "bit shorter", "d": "5/2013"}, {"body": "yup magic looking find parameters modelsave parameter switching behavior bit cryptic know get back business thanks guys", "d": "5/2013"}, {"body": "braddunbar right course", "d": "5/2013"}, {"body": "closing duplicate", "d": "5/2013"}, {"body": "nope nt noconflict underscore backbone loaded patch copy suggested", "d": "4/2013"}, {"body": "feel specific functionality many simple work arounds part core", "d": "4/2013"}, {"body": "ok fine disagree documentation states attributes hash attributes set html dom element attributes view el nt explicitly say override however also see cases want opposite probably fine", "d": "4/2013"}, {"body": "yep think probably overriding either one direction want merge jquery addclass constructor would make sense", "d": "4/2013"}, {"body": "mentioned issue changes need noted upgrading", "d": "5/2013"}, {"body": "caseywebdev well actually using conjuction qjs good know reason changes thanks", "d": "5/2013"}, {"body": "ftr going open issue also receiving incorrect arguments noticed fixed", "d": "10/2013"}, {"body": "fixed correct still trouble master let know", "d": "10/2013"}, {"body": "please nt ask help issues tracker try mailing list irc channel", "d": "4/2013"}, {"body": "sample code gets fired new model gets fired existing model collection change attribute values great set breakpoints inside backbone entry points backbone watch backbone actually found pretty valuable learn backbone actually implemented", "d": "4/2013"}, {"body": "wanted add direct contact please nt hesitate get touch email mnour onehippocom looking forward get touch community", "d": "4/2013"}, {"body": "sorry proper communication channel announcementsdiscussions problem future please use irc mailing list announcements like github issues strictly bugspatchesissues backbonejs", "d": "4/2013"}, {"body": "hi casey mailing list would please point thanks advance", "d": "4/2013"}, {"body": "mnour", "d": "4/2013"}, {"body": "tgriesser thanks lot", "d": "4/2013"}, {"body": "supposed able overwrite model data like also include model data simply include override", "d": "4/2013"}, {"body": "yes think intuitive copy properties set like method otherwise set", "d": "4/2013"}, {"body": "using unstable version use stable version found", "d": "4/2013"}, {"body": "probably question better documentcloud room irc stack overflow issue tracker nt generic support usage questions", "d": "6/2013"}, {"body": "think supposed using method trying accomplish secondly call child case would result behavior expecting", "d": "5/2013"}, {"body": "true method something became aware recently got ta refactor eventually case want single endpoint save nested models wrestled idea multiple endpoints vs single one team decided single endpoint calling single nested model may work point nested model parent model case multiple nested models direction gets messy nested models want update realize big problem probably big specific backbone address however thought present issue start dialogue hopefully get kind solution nt require actual code changes backbone", "d": "5/2013"}, {"body": "sure follow going ticket especially refactor approach take advantage something specific like addressed feel free try", "d": "10/2013"}, {"body": "jkchow also need remember let serialize data however want inverse", "d": "10/2013"}, {"body": "like model set method nowhere saying options pass ha actually recently took particular bit documentation builtin option pass highly discouraged mostly passing custom options forwarded along event handlers use see fit indeed documented better section events good table describing situations event fired like one", "d": "4/2013"}, {"body": "oh bad nt saw gorgeous catalog events exactly looking well thanks guys made awesome project really enjoy working backbone", "d": "4/2013"}, {"body": "nesting views much complex thing backbone", "d": "4/2013"}, {"body": "mornin tim certainly understand impetus change written similar code many times nt think subview management appropriate inclusion backbone views almost convention actual code powerful primitives good conventions build upon code rather small amount boilerplate nt address hard issues like disposal data binding people mostly nt agree however implies backbone handle nt many views nt contain views allocating array silly leaving unimplemented allows creativity solving hard problems working backbone instead around", "d": "4/2013"}, {"body": "nasty thing pattern stores references meaning go back manually remove child views agnostic setup html subviews removed time models stop referenced gets garbage collected unnecessary references js less garbage collection gets job try possible mandated core backbone", "d": "4/2013"}, {"body": "allocating array silly good point could simplified nasty thing pattern stores references meaning go back manually remove child views call top level view calls child views automatically good nt seem nasty working backbone instead around possible mandated core backbone makes sense agree really brought heard many questions probably behind nested modelscollections might worth mentioning something small docs ways deal views within views cases html subviews nt removed time objects view maintains references opinions", "d": "4/2013"}, {"body": "allocating array nt silly bringing valid reason something though braddunbar", "d": "4/2013"}, {"body": "maintaining views opinion difficult part backbone application must make sure properly dispose views detach events dereference objects etc absolutely run memory leaks post today many like opinion contrived problem plugins blog posts best way make library effective creating views newcomers way models collections attempt provide would love work layout manager point could merged fear would effort wasted nt mind asking would main objections nt want towards integrating well tested properly handled view management", "d": "4/2013"}, {"body": "think one main issues tbranyen touched upon backbone views typically promoted jquery better structure keep logicstate dom good stuff problem coming land nt think references gc almost black box handles cleaning references big way backbone nt much done outside modelscollections dereferencing models views simultaneously jashkenas often mentions end loading screens server hits application may needed data kept around memory many valid cases view would observing events object would outlive subviews added view render block referencing parent model parent view rerendered views hang around parent model gone unless explicitly kept track removed views beginning render block try possible mandated core backbone also looking comment say agree fully also think big difference mandating something providing outlet handling something rather common major pain point source confusion simple entirely optional fashion cloc backbone view section complicated going get vs models collections counting underscore fine certainly understand nested views nt immediately obvious sprung many blog posts half baked plugins frustration", "d": "4/2013"}, {"body": "tbranyen right nt great reason nt mentioned think main point still stands though known sorts silly things recommend dereferencing models views simultaneously jashkenas often mentions end loading screens server hits application may needed data kept around memory done ways found trade keeping things around memory improve perceived load time often accompanied high cost complexity cache management leaving view disposalmanagement altogether huge win valid strategies choice depends constraints", "d": "4/2013"}, {"body": "still nt think merging change like repeat maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners said course many cases want style view hierarchy let solve documentation anyone want cook nice nested views section homepage talking briefly make views flow nicely gc maintain explicit hierarchy automatic granular unbinding demonstrating code", "d": "4/2013"}, {"body": "great take shot putting together docs", "d": "4/2013"}, {"body": "addition docs need nt include code maybe make tgriesserbackbonenested official plugin link reference implementation", "d": "4/2013"}, {"body": "code intended manage fixed number subviews manage variable number subviews opinion fundamentally two different beasts warrant totally separate solutions start split section ui separate subviews organizational code reuse purposes fixed number subviews useful reference subviews names hash keyed subview name appropriate data structure storing subviews case contrast rendering collection arbitrary number subviews array appropriate storing subviews code sufficient solution either case imo first case simpler even case one question immediately arise need addressed subviews reinitialized parent rerendered rerendered cases want rerendered nontrivial replace parent html without loosing events attached subview dom elements minimal solution rendering fixed number subviews able distill backbonesubviews mixin solution address rerending issue imo incomplete case variable number subviews another matter go complicated case add new backbonecollectionview plugin one available solutions", "d": "4/2013"}, {"body": "subviews reinitialized parent rerendered rerendered actually find majority cases parent rerendered easiest reinitialize rerender view case work fine long call topmost splitting ui many times wo nt use hash named subviews subviews rerender based model changes etc nt need reference parent guess confirms jeremy said one size fits scenario view management something nt addressed backbone", "d": "4/2013"}, {"body": "maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners jashkenas nt quite understand sentiment suppose one view proper way remove closing tab call document somewhere somehow big bold letter says dont use fnremove fnempty get mem leaks anyway tgriesser suggested change good start actually simplify memory management automatically propagating call nt know many beginner view code seen seen beginners absolutely definitively get socalled structure people whose brains warped jquery half decade jquery chain structure nt like look guidance backbone backbone offers next help refusing single likely place induce partially digested stomach content ejection jquery code lack blessed way nest views put code belongs subviews parent view implement halfass solutions propagate backbone events deeply nested subviews ancestors many times big blob jquery pasta within nt know deal subviews years backbone lot people starting converge towards solutions suggested herein sincerely hope reconsider trying hash view class solves problems people current implementation useful reference subviews names hash keyed subview name appropriate data structure storing subviews case dgbeck actually hash sufficient appropriate solution situation since rendering collection views keys simple index make sure subviews come right order caseywebdev et al book actually suggests using hash subviews reinitialized parent rerendered rerendered cases want rerendered nontrivial replace parent html without loosing events attached subview dom elements cases parent call rerender subviews subview method dom events redelegated yes lot work cpu cycles done makes backbone view even tightly bound jquery love see clean implementation actually downgrades jquery importance sidebyside dom api many reasons whole blog posts", "d": "4/2013"}, {"body": "actually backbone could use views hash track child views provide extra methods make view management easier", "d": "4/2013"}, {"body": "actually interested approaches people using real software theory realms since lot people solving problems probably similar patterns used two patterns liked backbonesupport approach like like view rendering included inclusion subview way used subviews via backbonehandlebars nt try promote anything idea hide subviews templating engine method access subview via obscure ca nt recall ever use jashkenas one possible solution removing subview imaginary extend events understand subview rendering dependent tempting engine one biggest weaknesses strengths nt clear template engine pipeline", "d": "4/2013"}, {"body": "rstankov subview rendering depend template engines perfectly nest views view represents html element constructed jquery view constructor backbonesupport address dgbeck issues uses array sometimes need able name subviews also nt see giving extra events going help obvious way construct view hierarchy backbone backbone events also nt bubble like dom events useful subviews sharing modelcollection want look real world code backgrid whole thing entirely composed nested views using slightly less elegant variation tgriesser solution sufficient happen need name subviews many situations certainly call hash really default way go underscore trivially make hash behave like array", "d": "4/2013"}, {"body": "wyuenho nice grid point mainly look patterns used projects since noticed everybody handling different way moving subviews template helper see subviews markup view code understand pattern solution generic stuff need view event like subview model removed triggers removing subview removed dom still collection parent view way reference parent view subview upon removal remove child parent places take heavy use subviews hard part creating putting correct dom places self managed way communicated parent custom dom events ca nt remember case parent needed call method subview", "d": "4/2013"}, {"body": "rstankov like follow comment share way handle nested views backboneview already inherits events add mix methods views know nestedparents dispose function thistrigger dispose thiscid thisremove register function thisoptionsparent thislistento thisoptionsparent dispose thisdispose else consolelog tried register child view parent whenever instantiate child view inside another view pass parent argument child view initialize function call method hash anything every child view holds reference parent listens dispose event parent view gets child views well", "d": "5/2013"}, {"body": "catching thread cases parent call fnempty rerender subviews subview render method dom events redelegated wyuenho dom events delegated views initialized rendered loose dom events subviews simply rerender subviews parent rerendered work around detach reattach dom take approach discussed reinitializing views parent rendered loose state data subviews know easy work around agree keeping references subviews within parent deal breaker long subviews removed called parent jashkenas seems pretty low cost already requirement people call order views properly garbaged collected also nt see giving extra events going help obvious way construct view hierarchy backbone backbone events also nt bubble like dom try backbonecourier like promise rstankov good point needing event remove subviews parent applies case think case subviews almost never removed one could rerender parent parent could drop old references removed subviews acstll approach described works go keeping explicit references parent view child view generally good idea recap two common cases subviews used splitting view smaller regions organization view reuse rendering collection models sure including section documentation managing subviews best route cases significant complexities average backbone users nt need understand imo solution might able hashed together polished enough included backbone core case would provide lot value case think definitely needs left plugins thanks tgriesser starting thread", "d": "5/2013"}, {"body": "well typically go hand hand splitting view smaller components different modelscollections organizationcode reuse illustrate classic example incorrect implementation going nested modelscollections example backbone docs think backbone could provide little bit guidance whatever may coffee class mailboxview extends backboneview initialize gt listento model change render render gt elhtml jstsometemplate someclass append new listview collection modelmessages render el class listview extends backboneview initialize gt listento collection add additem listento collection reset render additem gt elprepend new messageview model render el render gt collectioneach gt elappend new messageview model render el class messageview extends backboneview initialize gt listento model change render listento model destroy remove render gt elhtml jstsometemplate imagine mailbox model changes maybe changed lastfetched attribute collection remains intact property model thus collection associated models outlive views wo nt make huge difference much going child views render ends issue lot cases leads frustration nt understand would easily solved adding top level render function wrapping child view constructor nt write docs yet wanted hear bit discussion plugin thinking handle good bit confusion really two simple functions though still think something could considered addition backbone directly also looking back thread braddunbar comment leaving unimplemented allows creativity solving hard problems working backbone instead around opinion boilerplate situation nt see needs hard problem b solved creatively plugin differently time needs done creatively nothing forcing implementation think backbone could provide something case ps dgbeck nice stackoverflow link asked year half ago nt immediately obvious view relationships handled getting started answer nt really answer probably brought", "d": "5/2013"}, {"body": "dgbeck tgriesser thanks glad posting aproach demonstrates us things wrong long agree needs done creatively nothing forcing implementation think backbone could provide something case", "d": "5/2013"}, {"body": "dom events delegated views initialized rendered loose dom events subviews simply rerender subviews parent rerendered work around detach reattach dom take approach discussed reinitializing views parent rendered loose state data subviews know easy work around dgbeck know mean rerender parent view usually something like course works subviews inherit view superclass implements way communication goes view hierarchy always make sure share collectionmodel simply trigger custom namespaced events shared collectionmodel like interested parties listen events act accordingly sense collectionmodel reverseddom never found need set event chain among views abuse actual dom propagate backbone events agree tgriesser cases typically go hand hand happen working two projects use nested views quite heavily two custom view classes one similar tgriesser backbonenested uses hash array keep track subviews another one offers jqueryfree mode compatible existing view digress might open source plugins file prs weekend", "d": "5/2013"}, {"body": "btw jashkenas policy project sets path merge good plugins definition good core policy plugin always plugin", "d": "5/2013"}, {"body": "like think policies least formulated plugin good idea core merge nuff said", "d": "5/2013"}, {"body": "tgriesser thanks repo definitely helps make discussion concrete two problems code would prevent us using even simpler case splitting view smaller subviews first find useful name subviews mailbox example mailboxview wants listen event listview wants tell listbox view collapse messages collapse button mailboxview clicked case useful able reference name problem solved easily storing subviews hash fork code one incarnation change fork people want supply keys subviews keys supplied behavior fall back using numbered indexes hash keys second views state information ca nt loose information parent view rerendered seem efficient reinitialize subviews time parent view rerendered ones store state information views instance using example listview might contain state information message selected storing information attribute messages seem appropriate persisted server shared among different users mind kind temporary view state information belongs view layer models second problem harder solve simply maybe could left plugins could find way distill solution backbonesubviews however hash version backbonenested integrated core could rewrite backbonesubviews plugin top thanks repo efforts helping people common issue", "d": "5/2013"}, {"body": "address two points agree named views good many cases nt need returns view added easily attach subview parent view like opinion feels bit cleaner vs still maintains necessary cleanup needed case since dependent views maintaining state probably would nt want let parent view rerender really use structure provide keep child views siblings let rerender independently nt worry", "d": "5/2013"}, {"body": "also prefer opposed references subviews two places feel quite right reminiscent redundancy options attached view viewoptions arguably worse object references need cleaned longer used double references longer guarantees subviews garbage collected many cases may big deal seems little moreover cases people may want customize keys used store subviews example second case rendering collection models might want subviews indexed model object way easily find view corresponds particular model limit people options disadvantage using hash opposed array call ideal maybe better way give subview unique index think makes sense solve problem backbonesubviews approach use case least fact could build approach top hashbased nestedview plugin eliminate code seems like testament nestedview versatility", "d": "5/2013"}, {"body": "mostly ensuring cascaded prevent latent effects leftover event listeners keeping reference subview going chain nt really big issue eventually gets gced parent view dereferenced reference manually overwrittendeleted need reference name probably going keeping around bit anyway probably least view goes away case fine finding one would nt difficult array either thought needing reference name thinking need first place views theory maintaining state independently nt need referenced parent views often arrays faster", "d": "5/2013"}, {"body": "yep allowing lookups cids sufficient need provide explicit name push nestableview please take look design rationale readme source code comments", "d": "5/2013"}, {"body": "mailboxview wants listen event listview wants tell listbox view collapse messages collapse button mailboxview clicked dgbeck entirely possible views example listen mailboxviewmodelmessages events communicate sending listening events shared collectionmodel find views start binding events directly exactly inflexible tightly coupled spagetti code evident need reorder view hierarchy sudden dismantle entire event chain data model rarely change dramatically may extra field maybe extra events add lines andor sprinkle views listen new events large views lot likely change data model insert remove reorder view hierarchy data need given problem always going", "d": "5/2013"}, {"body": "second views state information ca nt loose information parent view rerendered seem efficient reinitialize subviews time parent view rerendered ones store state information views store state info views time keep methods idempotent rerendering given view state result exact look behavior reintializing subviews necessary keep method idempotent also use template instead deeply nested views desirable nothing tgriesser implementation mine prevents happening", "d": "5/2013"}, {"body": "jashkenas bit discussion sounds like definitely real world issue faces lot folks building rich ui plenty good cases want view listen object bit longer lived hell advertised global event bus views may subscribe need explicitly removed issue nt much gc preventing latent effects zombie event listeners inturn helps gc pointed maintain references subviews backbone core suddenly lots folks previously nt problems working gc properly start manually removing every subview feature regression possible initial step possibly wrong path beginners think truth quite opposite beginners nt realize need keep track views listen objects outside life cycle see long removing every subview goes chain top level view removal nt manual removal also would optin feature view modelscollections live die together nothing forcing use method using minimal overhead line compared dom manipulation go humble opinion would nt complex addition would quite helpful explaining might need well providing minimal way go think would well received addition great", "d": "5/2013"}, {"body": "finding model cid would nt difficult array either yes easy hash trading lookups n lookups quickly erase performance edge arrays hashes interesting stack overflow thought needing reference name thinking need first place views theory maintaining state independently nt need referenced parent views often damn world would follow theories also think mistaken beginning thread saying array appropriate view data structure case rendering collection models even backbonecollectionview uses backbonebabysitter internally manage views views stored hash order determined model collection sufficient speak experience seen lots different approaches issue wyuenho thanks sharing plugin integrated core arraybased implementation would end working around top implemented hash could use case splitting one view fixed number subviews might also able use case rendering collection clean small seems like solid foundation majority cases", "d": "5/2013"}, {"body": "summary far necessary removing subviews automatically inside good idea tbd support adding removing list views provide minimal boilerplate render subviews parent view like nestableview use hash array combination hashes arrays internal storage provide help facilitate view communication via events subviews get reference parent views related provide way lookup views indexkeycid preferences yes leaning yes unless choice internal storage adt makes slow yes people nt care subviews continue override continue work people choose override something else like implementation hash fast lookups lookups key possibly view need way retain insertion order encourage sharing collectionmodel within view hierarchy use custom namespaced events triggered collectionmodel seems easiest without using extra plugins trying coerce dom propagate backbone events nt found necessary experience causes trouble worth left users maybe minimum document various ways set crossview communication preference point really depends choice data structure thoughts", "d": "5/2013"}, {"body": "hi quite long thread nt able read sorry nevertheless wanted give two cents mater project work made implementation solve problem call fatherview implementation shares lot aspects things said key points child views stored plain object child views named explicit name defined calling equivalent add view name already exists old view removed helps lot implement simple idempotent renders adding getting views done via method called works like jquery propattr pass one argument works getter pass two works setter instantiation left implementations view keeps track references cleans necessary method called remove child views called saying best correct way objective explain use case maybe feedback approach improved", "d": "5/2013"}, {"body": "addsubview removesubview necessary nt think deemed necessary yet definitely possible get along without everyone bit different take something think could helpful building robust modelcollection structures bootstrapping nested modelscollections grabbingdumping individual modelsviews times things change lfacpt thanks sharing sounds bit closer something opinionated like layout manager swapping views etc sounds like shares similar features approaches mentioned namely parent stores child views ability remove one way another", "d": "5/2013"}, {"body": "necessary casual single view usage necessary move discussion forward seriously look like trying reimplement backbonelayoutmanager tho", "d": "5/2013"}, {"body": "well say reason opted fatherview instead backbonelayoutmanager something similar locs little abstraction easy understand yet allows us keep code clean simple one reasons use backbone abstractions simple easy understand yet powerful imho plugin nested views also follow philosophy", "d": "5/2013"}, {"body": "ok actually jsdoc requirejs boilerplate almost p", "d": "5/2013"}, {"body": "think tgriesser nailed beginning nt think better terms utility per character think hash better choice grounds ease use performance versatility wyuenho idea using hash keys perfect default guaranteeing unique keys people could also option supply keys lookup subviews name whatever works best case tim original code hash tweak gets vote best candidate core integration still partial solution least use cases solid building block sophisticated solutions presented thread could built top undershooting rather overshooting seems fit well rest backbone relatively small amount code provides lot helpful structure", "d": "5/2013"}, {"body": "suggest use view instead subview terminology talking nested views think sub prefix introduces unneeded verbosity", "d": "5/2013"}, {"body": "andreypopp action names add remove could also argued naming seems important backbone could good examples remember reading somewhere around jashkenas explaining logic adding could also use nt know", "d": "5/2013"}, {"body": "dgbeck fact js hash nt retain insertion order really concerns ordering subview matter lots application lots applications ca nt guarantee irrelevance subview ordering using hash adt storage insufficient least backgridjs would really really prefer store subviews array preserve insertion order hash fast lookups necessary acstll agree probably succinct names else adding call", "d": "5/2013"}, {"body": "acstll agree add remove probably succinct names else adding call view add could easily confused adding objects models data points chart nonview dom elements etc nt forget views used sorts creative ways right", "d": "5/2013"}, {"body": "philfreo could argue collection methods never existed would confused still anything want change", "d": "5/2013"}, {"body": "collection specifically meant hold models subview management per se pointing view add nt completely obvious without possibility confusion due fact primary purpose view nt hold views", "d": "5/2013"}, {"body": "see fine either way actually", "d": "5/2013"}, {"body": "pointing view add nt completely obvious without possibility confusion due fact primary purpose view nt hold views wyuenho philfreo exactly also adding could lead beginners think rendering even dom case keeping reference hash wanted point nothing else", "d": "5/2013"}, {"body": "wyuenho acstll philfreo asked dropping suffix ok instead", "d": "5/2013"}, {"body": "wyuenho bummer order need keep views splitting view fixed number subviews rendering collection", "d": "5/2013"}, {"body": "dgbeck wyuenho think need use cases see take issue view subclass subviews stored hash collectionview subclasses backboneviewxview also stores subviews array", "d": "5/2013"}, {"body": "dgbeck wyuenho collectionview scope discussion examples provide proof view subviews stored hash suitable building block abstractions like collectionview", "d": "5/2013"}, {"body": "asked dropping sub suffix ok addview removeview instead addsubview removesubview agree fine addressing philfreo point may provide sufficient information exactly adding redundant adding view view new view implicitly subview andreypopp dgbeck sure talking collectionview scope discussion mainly use subviews render collection elements nt many occasions split large views smaller views suppose could happen quite often also biased second example backgrid could easily built using top level view still would nt keep components inside hash attach filter grid paginator inside instance vars set inside constructor suppose keeping inside hash explicit name minimize name collisions however unlikely maybe heh feel like backtracking previous position using hash backing store split large view subviews name subcomponents using instance vars convey purposes think choice data structure really comes would want render subviews case splitting view dgbeck termed would use term heterogeneous subviews hash convenient want able get individually render attach well defined points inside template sufficiently smart solution willcan keep ids template names subviews loop hash case rendering collection homogeneous subviews array natural easily loop append rendered subviews names nt important individually subview case collectively collection subviews may need named class list class classify subview use cases way seem like mutually exclusive circumstances would require", "d": "5/2013"}, {"body": "actually homogeneous subview case hash would also fine keep ordering keys would model cids inside collection attached parent would nice default render implementation render cases automatically people still override even flexible implementation course make use nested models well whole story", "d": "5/2013"}, {"body": "agree wyuenho earlier point storing subviews array hash would desirable worked several projects maintaining order subviews vital hash alone would nt work mostly subsections need processed particular order chaplin take overload accessor setter also expose hash array view instance chaplin concept allows specifing arbitrary key hash mostly found keying work better javascript var parentview new parentview var childview new childview set parentviewsubview childview passed view stores retrieve parentviewsubview complete thiscloseform passed string retrieves cid iterating parentviewsubviews function v vtrigger complete remove parentviewremovesubview parentviewremovesubview childview equivalent pass either view instance key", "d": "5/2013"}, {"body": "worked several projects maintaining order subviews vital hash alone would nt work mostly subsections need processed particular order sounds like fixed number heterogeneous subviews case elaborate order subviews needed iterated", "d": "5/2013"}, {"body": "commented far far still love better section docs afraid still nt think baking patch backbone core fundamentally basically bit code around array asking programmer keep list views array hash much ask probably going get far building app first place going add patch backbone core make removal subviews automatic probably merely look something like view would handle arrays hashes could optionally registering subviews whatever way see fit said still think including line backbone would starting lead folks unfortunate path manually removing subviews event listeners views great way seriously hurt performance decently complex ui said alternative going flow structuring object lifecycles topmost view needs perhaps collection needs whole swatch views models simply gc eich nature intended pleasing path", "d": "5/2013"}, {"body": "asking programmer keep list views array hash much ask probably going get far building app first place jashkenas think problem like beginners wo nt even start thinking array hash really tired creating dom subtrees attaching events old way jquery inside start wondering chose use backbone first place may competent ui dev nt think stupid try times get point could say mmm really need array hash loops manage views happened love feel designed devs small shops churn small pagers mostly static marketing content happen occasionally localize messy jquery code inside couple methods serve prep area call jquery plugins manually removing subviews event listeners views great way seriously hurt performance decently complex ui think gc tiny subproblem much bigger problem enough basic help provided anyone uses sooner later try nest views ca nt expect sufficient foundation large complex dashboard console ui judging numerous code sample people submitted far thread common theme already starting emerge instead everyone else solve problems using numerous incompatible way try make decisions bake core nt purpose library provide solutions common problems apps built top keep code dry alternative going flow structuring object lifecycles topmost view needs removed perhaps collection needs reset whole swatch views models simply gc eich nature intended pleasing path say much pleasant way code modern complex web ui instead mostly jquery", "d": "5/2013"}, {"body": "mmm really need array hash loops manage views happened nt need hash loop properly including events manage subviews way would implement wanted automate process reduce subview needing lines code initialize render remove line code addsubview backboneview designed devs small shops churn small pagers mostly static marketing content fact backboneview opened ended precisely people need simple stuff", "d": "5/2013"}, {"body": "perhaps rephrase positive light would proponents ticket think adding single line leaving documentation", "d": "5/2013"}, {"body": "jashkenas adding oneliner", "d": "5/2013"}, {"body": "jashkenas exactly handle subviews think strange backbone magically know view property without providing way add display subviews seems like subview management going left custom implementations plugins leave pluginscustom code simply patch view remove necessary", "d": "5/2013"}, {"body": "jashkenas adding seems like partial implementation clear saving line typing could help implementors fully featured subview management routines personally including code core totally choosing official plugin nested heterogenous andor homogenous views", "d": "5/2013"}, {"body": "nt need hash loop properly including events manage subviews way would implement wanted automate process reduce subview needing lines code initialize render remove line code addsubview point point provide better structure current provides little fact backboneview opened ended precisely people need simple stuff philfreo solving problem solve problems jashkenas like see would document subview issue preference would change code nt anything substantial outsourced responsibility", "d": "5/2013"}, {"body": "eh point whatever everyone else thinks nt think one liner nt quite enough feels bit like implementation little back much better solved really trying see could provide optional best practice minimal implementation part library address pain point heard mentioned lot people learning stuff works seems opened pandora box potential implementations fine docs", "d": "5/2013"}, {"body": "seems opened pandora box good reasons eek let wait see doc looks like", "d": "5/2013"}, {"body": "one liner tried ways among others letting views gc eich nature intended far simpler easier maintain nt think discourage either approach certainly nt nudge users toward complex two", "d": "5/2013"}, {"body": "awesome reassuring hear brad closing ticket bit quiet anyone wants send pr nice docs section merits noreference vs arrayreference vs namedreference cheered", "d": "5/2013"}, {"body": "good call issue nothing nt implement something wo nt help others already done better maybe link popular projects newcomers look documentation amazed many tweets see people complaining never heard marionette chaplin layoutmanager etc", "d": "5/2013"}, {"body": "totally hear arguments jashkenas removing whole swatch views nature way pretty advanced stuff easy get wrong seems like cases would need take approach due performance pretty far cases whoever calling shots call instead root view said maybe cases common supposing sure expensive really lots views one added benefit integrating something like tim code besides little important added structure would standardize place put subviews plugins mixins could leverage standard location right fragmentation popular frameworks makes messy build crossframework mixins related subviews one liner pretty damn slick also agree seems incomplete still curious explore array vs hash question find compelling case array necessary cases found would something work otherwise nt got much", "d": "5/2013"}, {"body": "noob struggling right maybe competition see redo todo app nested views maybe phone book multiple emailtelephone numbers per contact", "d": "5/2013"}, {"body": "erichbschulz todo list subtasks", "d": "5/2013"}, {"body": "erichbschulz raneksi tastejs hopefully provide example need subviews management plus many topics", "d": "5/2013"}, {"body": "hey ingoe sort functionality discussed bit see given somewhat common usecase idea think plugin would best strategy", "d": "4/2013"}, {"body": "hi ingoe thanks opening issue agree jashkenas though synced state model something belongs app code backbone ca nt know method best app choice left thanks reference mponizil", "d": "4/2013"}, {"body": "hi johtso nice see evening definitely intended behavior nested changes aggregated event way done seems nice probably way would go well fiddle behavior seems correct", "d": "4/2013"}, {"body": "hey braddunbar ah okay think understand expected recursive behaviour example approach work child set triggers another change event listener called second time model still contains previously changed attributes recalculation done twice wanted avoid key thing changes aggregated across distinct change events", "d": "4/2013"}, {"body": "ah see mean value computed attribute needs evaluated twice b change regardless thanks elaborating unless measured found doubling causing performance problems would nt worry even calculated get one change event say listen nt worry extra calculation", "d": "4/2013"}, {"body": "everything looks kosher anything funky link handling would imagine never came routes already strings backbone needs string fragment argument might try something like instead still nt solve issue post test case testing way get number backbonenavigate pass", "d": "4/2013"}, {"body": "exactly passing int stop fragment ended integer pulling html attribute jquery method auto type conversion thanks", "d": "4/2013"}, {"body": "ah yep url stuff queries hashes pushstate deal strings best pass string edit sorry extra posts seems github android broweser dont play nice either smileycat", "d": "4/2013"}, {"body": "thanks looking test case closing one", "d": "4/2013"}, {"body": "returns array matches want edit idiot takes array problem using braddunbar thought resolved", "d": "4/2013"}, {"body": "since relies event observe changes model id expected break silencing change fact would discourage using altogether removed documentation causes many known problems", "d": "4/2013"}, {"body": "lfortin thanks opening issue boiled example simple use case demonstrates bug javascript var collection new backbonecollection collectionadd maindish salmon id collectionadd maindish pasta collection findwhere maindish pasta set id silent true var pasta collectionwhere maindish pasta collectionremove pasta consolelog mealslength running example jsbin bug caused setting backbone uses events internally update indexes models ids change set id tell backbone trigger expected events mechanism updating indexes thus fails attempts use id index present workaround use set id", "d": "4/2013"}, {"body": "makes sense caseywebdev braddunbar wookiehangover thanks lot help", "d": "4/2013"}, {"body": "mornin exoer property set would passed function otherwise overwritten property nt yet started", "d": "4/2013"}, {"body": "also least unit tests error test running compat mode", "d": "4/2013"}, {"body": "ie testing see nt forget testing compat modes easy via dev console dropdown list", "d": "4/2013"}, {"body": "confirm patch working normal mode tried tag master today", "d": "5/2013"}, {"body": "specifically something like get following typeerror object nt support property method publish full nodejs example like though seems pretty much patch attempt modelsave", "d": "5/2013"}, {"body": "jdalton suggested fix worked pull request combinations ie browser modes chrome passed test suite", "d": "5/2013"}, {"body": "handwritten may try irc channel questions like", "d": "4/2013"}, {"body": "okay thanks", "d": "4/2013"}, {"body": "hi briansorahan actually options passed already passed enjoy", "d": "4/2013"}, {"body": "def bad thx", "d": "4/2013"}, {"body": "debug backbone found fix problem add line change line conflict", "d": "4/2013"}, {"body": "bug tracker personal support forum please try irc channel mailing list trouble", "d": "4/2013"}, {"body": "would say choice jeremy made makes much less useful honest never use backbone current behavior definitely unexpected imo", "d": "4/2013"}, {"body": "agreed screwed change feel free revert fix", "d": "4/2013"}, {"body": "well fix previous pr ideal still take thought first step revert tests back old expected results", "d": "4/2013"}, {"body": "unfortunately necessary evil moment without merging defaults would break", "d": "5/2013"}, {"body": "nt make copy object like source also mutation options mutated model constructor collectionreset javascript defaults options options emulatehttp backboneemulatehttp emulatejson backboneemulatejson later optionsbeforesend function xhr xhrsetrequestheader xhttpmethodoverride type beforesend return beforesendapply arguments even later var xhr optionsxhr backboneajax extend params options", "d": "7/2013"}, {"body": "already fixed bug removing reference collection option object", "d": "7/2013"}, {"body": "looks like data output extended json format see process correctly", "d": "4/2013"}, {"body": "sure solution rough backbone meant extended catch adding methods backbonemodelprototype creating base subclass nt worry things supposed work good number people needing type change something could considered think extending would best solution", "d": "4/2013"}, {"body": "overriding instead sounds like good idea thx nt think omitting code mentioned rather good solution guess need something like mongo db extended json lt gt json converter time write suggestions", "d": "4/2013"}, {"body": "mornin dealancer thanks posting think tim right job amp something like js var model backbonemodelextend parse function res resid resid oid delete resid return res tojson function var attrs omit thisattributes id attrsid oid thisid return attrs", "d": "4/2013"}, {"body": "yeah sounds like plan also ideas dates objects going create extension conversion automatically", "d": "4/2013"}, {"body": "dealancer typical good practice pull nested objectsarrays modelscollections referenced directly model custom also might actually interested thread related handling mongodeep nested things", "d": "4/2013"}, {"body": "fyi created extension smartly replaces tojson method sync run otherwise problems templates", "d": "6/2013"}, {"body": "mornin thanks posting exploits question rely evaluating arbitrary user input html nt evaluate html nothing backbone please see previous discussion details hand isolate specific exploit preventable backbone jsfiddlejsbin would love take look", "d": "4/2013"}, {"body": "hang minute think saying malicious party sends user malcrafted link backbone app use hole way get immediate xss let take another look", "d": "4/2013"}, {"body": "excepting method evaluation fragment html would script executed nt evaluate fragment knowledge contents executed", "d": "4/2013"}, {"body": "take word absence demonstrable jsfiddle sorry", "d": "4/2013"}, {"body": "problem nt mind extra scrutiny unable reproduce exploit", "d": "4/2013"}, {"body": "jquery fixed similar issue past well dev used even though code base never might worth checking jquery resolved", "d": "4/2013"}, {"body": "see jquerysrccorejs line issue", "d": "4/2013"}, {"body": "says still params", "d": "4/2013"}, {"body": "yep looks like still takes arguments", "d": "4/2013"}, {"body": "override model constructor order ensure set occurs parse called correct way go say people prefer attributes called case solution constructor overriding difficult fact noted docs", "d": "4/2013"}, {"body": "please check documentation google groups ask questions irc channel github tickets issues related development library", "d": "4/2013"}, {"body": "yep unlike view standard behavior tagged options want attach property feel free also please search opening tickets asked", "d": "4/2013"}, {"body": "sorry see someone already posed question though assumed asked admit search thorough would changing models collections set thisoptions upon construction breaking change harm another reference options argument model collection instance code around behavior past developing apis top backbone major issue see might confusing developers newer backbone primarily working views explicitly create reference options argument initialize method override constructor", "d": "4/2013"}, {"body": "would probably best attachment left user well think ship sailed kind decision nt made user especially since easy several pretty good discussions old issues", "d": "4/2013"}, {"body": "agree like decisions made either since already done developer view makes sense consistent pretty common practice keep reference options object well jquery plugins developer would expect based behavior libraries including backbone views however point developers likely initialize functions setting may massaging data setting making change like might cause people issues becomes bit pain factories creating child models collections based complex parent model relationship objects relies options passed parent upon construction end override constructors set options need access later custom sync functions huge deal seems unnecessary thought maybe others frequently", "d": "4/2013"}, {"body": "inconsistent confusing done automatically backboneview model collection", "d": "4/2013"}, {"body": "spent time going annotated source trying figure collection options nt kept least would useful note documentation explaining inconsistency", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "going consistency like see optionsinstance attachment removed views may late", "d": "4/2013"}, {"body": "brad feel way maybe bite bullet line next upgrading paragraph", "d": "4/2013"}, {"body": "feels wrong super easy modelsviewscollectionsrouterswhatever want ca nt opt always feel weird", "d": "4/2013"}, {"body": "yep attaching always leads mess sure property use update one need update state mismatch seen code options nt attached used everywhere seems inelegant best options vehicle getting information constructor without needing arguments deal throw away", "d": "4/2013"}, {"body": "sounds like removed view create consistency anybody know backbone layout managers extensions using", "d": "4/2013"}, {"body": "sounds like removed view create consistency anybody know backbone layout managers extensions using lots projects use sure whether removed nt care much either way would definitely require code changes many good reason backwards incompatibility", "d": "4/2013"}, {"body": "braddunbar agreed vs get confusing state management pain unless values arrays objects also agree options argument gets thrown away construction typically pick properties need assign however override call extending classes know inheritance chain support developers get options unfortunate might unique situation complaint inconsistency confusing especially new backbone also sure docs first started using backbone fact backbone picks certain properties key name assigns initially confusing none things issues start combing source assuming new users nt consult source think removing options views point would painful developers point", "d": "4/2013"}, {"body": "dropping always stood unexplained inconsistency even large apps depending oneliner add reference back views well count adding named argument point simple change anyone make", "d": "4/2013"}, {"body": "", "d": "4/2013"}, {"body": "agree removing principle obviously significant change backbone huge user base also seems like root issue may go deeper also lot confusion discussion past around options attached directly view others several special options passed attached directly view model collection el id classname tagname attributes long considering significant breaking change might worth take step back see restructuring might address issues ideally could automagically attach options want view object right discussed several ways go white listing options attach view interesting though least experience almost always want attach options view pity people forced manually copy view class develop solution base view class fringe cases nt want attach options view source problem may three distinct things squished options parameter built options get attached directly view user defined options want attach directly view temporary options need initialization separating three things two parameters would give flexibility instance everything could attached view object everything used initialization discarded thisoptions manually copying", "d": "4/2013"}, {"body": "necessary change ugly code layoutmanager function smells bad need way consolidate options think everything instance makes perfect sense", "d": "4/2013"}, {"body": "addressed", "d": "4/2013"}, {"body": "curiosity anyone use default options ie attached prototype always put defaults directly view instead", "d": "4/2013"}, {"body": "mean yes recall rationale top head mon apr brad dunbar notifications githubcomwrote curiosity anyone use default options ie attached prototype always put defaults directly view instead reply email directly view github", "d": "4/2013"}, {"body": "braddunbar use stuff like modal popups determine whether include action buttons text padding etc handy default options inheriting classes new instance methods override inherit", "d": "4/2013"}, {"body": "thanks jstrimpel also use values options object ie probably nt added value right words code functionally equivalent long access", "d": "4/2013"}, {"body": "guess main thing hash looks little cleaner little obvious meant overridden passed instead part instance probably right functionally similar also quite easy bring back first supported called function coffeescript class abstractpopup extends baseview templatedata gt extend options modeltojson options gt class actionpopup extends abstractpopup options gt extend super fixed true showactions true text sure afterrender gt eladdclass fixed optionsfixed actions hide unless optionsshowactions super class leavegrouppopup extends actionpopup options gt extend super text want leave group fixed false", "d": "4/2013"}, {"body": "except clean ends confusing assign something like template extend level try override invocation level updated property inside instance options object", "d": "4/2013"}, {"body": "tbranyen inside instance heirarchy support several different types popups different options behaviors seemed like logical solution alternatively could put options instance properties feel like would clutter instance properties essentially optional parameters admittedly contrived ugly example", "d": "4/2013"}, {"body": "never used default prototype propertyfunction favor removing given passes plus creates asymmetry options options maybe matter preference class configuration properties attached prototype least inheritance come free", "d": "4/2013"}, {"body": "actually keeping options instance reason mentioned little obvious meant overridden passed instead part instance values live signify parts view configured code instantiates prototype define defaults values given ultimately responsibility copying directly onto instance removes distinction ownership", "d": "4/2013"}, {"body": "point raised spadgos makes sense think extra typing turns others curiosity ever come across gray area cases option determined code instantiates view logic within view example option passed perhaps manipulated transformed may change life view", "d": "4/2013"}, {"body": "always felt missing solid event driven getter setter defaults values also wondered views followed thought borrowed ideas emberjs coffeescript class documentsquareview extends backboneview defaults editable true transient false uploaded false initialize options gt change editable updateeditbutton updateeditbutton gt text get editable edit else ok button html text onchangeedit gt set editable true", "d": "9/2013"}, {"body": "mateusmaso check backboneattributes tiny plugin wrote add getter setter methods object would love feedback usecase", "d": "9/2013"}, {"body": "would simplest cleanest way adding back old behaviour would code added new section called upgrading backward compatibility thanks", "d": "10/2013"}, {"body": "something like use view definitions", "d": "10/2013"}, {"body": "could get previously backboneview available initialize need", "d": "10/2013"}, {"body": "thanks caseywebdev tgriesser thought options include model collection el id classname tagname attributes events guess code would nt care backward compatible maybe one remove keys options", "d": "10/2013"}, {"body": "referencing mini plugin way attach whitelisted initialization options directly view object considers default values required options", "d": "1/2014"}, {"body": "built codemod jscodeshift adds options handling method", "d": "7/2016"}, {"body": "still called closing still think bug please provide codepenjsfiddle reduced example", "d": "4/2013"}, {"body": "correct running collectionparse modelparse modelparse assuming certain format clearing fixed thanks quick reply", "d": "4/2013"}, {"body": "attaching removed master basically passing constructor options overload method causes drama see full discussion", "d": "4/2013"}, {"body": "thanks gsamokovarov say thing", "d": "4/2013"}, {"body": "thanks sorry could nt seem find issues first search", "d": "4/2013"}, {"body": "gsamokovarov tgriesser docs seem inaccurateunclear", "d": "4/2013"}, {"body": "docs usually follow latest stable version updated mostly version bumps master docs try rawgithubcom get latest one changes may sync one explicitly documented eg references attachable gone", "d": "4/2013"}, {"body": "reference got included docs", "d": "4/2013"}, {"body": "need remove lodash since puts effort underscore compatible", "d": "4/2013"}, {"body": "lodash backbone work well together used large application", "d": "4/2013"}, {"body": "removal done purpose provided reason", "d": "4/2013"}, {"body": "think calling lodash place documentation probably faq heading alternate dependencies seems like potential outcome least", "d": "4/2013"}, {"body": "wookiehangover mention better none though got ta say nt dig lumped use risk lib like zepto especially lodash goes beyond even underscore terms compatibility underscore broke compat versions backbone amp edge", "d": "4/2013"}, {"body": "actually really like event proxy feature collectionview disposed model collection disposed assuming something like simply check view", "d": "4/2013"}, {"body": "yea rather like feature doubt going anywhere anytime soon would break huge amount code", "d": "4/2013"}, {"body": "thanks pointing nerdpad fix pushed", "d": "3/2013"}, {"body": "caseywebdev previous way worked intended supposed pass want validate otherwise validation happens persisting model", "d": "3/2013"}, {"body": "really seems confusing two conflicting defaults method", "d": "3/2013"}, {"body": "tgriesser understood reading docs model validate method validation fails model saved", "d": "3/2013"}, {"body": "maybe changed remembering discussing work pretty sure intended way comment line waiting attributes exist save acts think default blocking persisting invalid data block setting case", "d": "3/2013"}, {"body": "think developer perspective though confusing calling", "d": "3/2013"}, {"body": "documentation definitely wrong behavior correct agree pros old way documentation needs change since setting attributes nt validate default may want set attributes regardless persist passes pros new way code changes since required old behavior desired call calling seems little simpler conceptually save always validates anything", "d": "3/2013"}, {"body": "new way sounds good", "d": "3/2013"}, {"body": "validation works fine sending invalid values get error save valid data uncaught error url property function must specified urlerror extendurl wresult backbonesync extendsync extendsave anonymous function notice method called inside method even though defined", "d": "3/2013"}, {"body": "sounds good thanks caseywebdev philfreo nerdpad sounds like missing somewhere model collection", "d": "3/2013"}, {"body": "thanks jeffchuber fixed", "d": "3/2013"}, {"body": "found related issues exactly issue closed pr closed think option default behavior", "d": "3/2013"}, {"body": "issue closed pr closed also think option default behavior agree would make logical default behavior jeremy circumvented something like persuasive realworld use cases would nt cleaner sorting clientside even server simply providing sortorder property model would help make case give use cases feasible", "d": "3/2013"}, {"body": "caseywebdev think saying defining default comparator otherwise defined", "d": "3/2013"}, {"body": "ids arbitrary would nt recommend comparator use default", "d": "3/2013"}, {"body": "think update method actual result makes sense already naturally first however name set kind implies whatever pass arguments truth perhaps would made sense reset named set instead", "d": "3/2013"}, {"body": "persuasive realworld use cases would nt cleaner sorting clientside even server simply providing sortorder property model would help make case clientside sorting different topic opinion collections sorting logic need known client side collection could ordered id title date replicate sorting client rely server response order querying interfaces eg search forms realtime editing interfaces eg sortable todo lists perform sorting serverside client duplicate algorithm rely server response order course could add property arrays already defined order javascript redundant", "d": "3/2013"}, {"body": "molily case would nt use performing fetch", "d": "3/2013"}, {"body": "see original text would lose performance benefits smart updating provides one model addedremovedchanged need render items anew know items addedremovechanged get fresh models fresh cids incrementally updating ui impossible", "d": "3/2013"}, {"body": "seems like something similar way go imo", "d": "3/2013"}, {"body": "closing ticket move discussion back", "d": "3/2013"}, {"body": "hello guys thanks effort put backbone know old issue came across use case server returns sorted collection backbone parses order lost found discussion stackoverflow explains json response order maintained using array sorted elements json particular option need pass backbone collection explicitly respect order json response coming server thanks ton", "d": "6/2016"}, {"body": "hi things notice nt need pass since thing nt need return otherwise looks correct would mind posting fiddlebin illustrates issue glad take look", "d": "3/2013"}, {"body": "sorry gravedig reopen dealing problem coffeescript mariomodule deviseappregister register app backbone marionette class registernew extends marionetteitemview template deviseregistertemplatesnew debugger session opens get following see returned params object param seems ok nowhere found", "d": "11/2013"}, {"body": "hi ellmo put fiddlegistjsbin glad take look", "d": "11/2013"}, {"body": "extending classes middle loop making totally meaningless test feel free write back better one", "d": "3/2013"}, {"body": "extending classes middle every test loop eg creating instance classes calling back root yes classes creation part test jsperf tests true even backbonejs way bottom speed problem calling methods alltogether", "d": "3/2013"}, {"body": "test nt show method dispatch class creationextension taking time much class definition object instantiation method dispatch mixed really disentangled case vast majority backbone apps calling fixed number times", "d": "3/2013"}, {"body": "increased number items created amp method called new different instances objects per tests main inherited constructors called times gets called among classes performance kicks calling methods baically mine problem backbone seems lot overhead slows thing saying actual happens let assume fair correct correct assuming time spent inheritance first place version tests inheritances new instances deep method calls since methods happening way tests think instances way slow updated test nt run version rather fresh test among different browsers seems like big issue backbonejs getting objects json constructing correspondent model classes would make app slow knees wrong", "d": "3/2013"}, {"body": "also test case using date versions backbone underscore", "d": "3/2013"}, {"body": "doh inherited tests guy created fiberjs would correct version urls please", "d": "3/2013"}, {"body": "find current release information", "d": "3/2013"}, {"body": "updated rawgithub version always latest ok got better issue still haunting us p", "d": "3/2013"}, {"body": "issue still haunting us real world evidence cause bottleneck application numbers opssecond real world use case fetching thousands models bottleneck going rendering things dom slowness creating instances", "d": "3/2013"}, {"body": "easy denying tackling problem p said models dom anyway showed point could step improve library creating defining idea improve constructor something going fishy due lots works also could bad design obviously say etc nt count insignificant end day count together rather arguing eachother correct guess pump creativity see root issue would make fixed right", "d": "3/2013"}, {"body": "easy denying tackling problem asking real world use case nt tantamount denial also could bad design please submit pull request proposed improvements compelling well thoughtout isolated test case constructor code used tested wild lots users performance never come issue furthermore test cases nt equivalent accurate performance test include support follow competing implementation passing custom constructor property extending static properties new constructor isolated constructor inheritance see amp deep inheritance super equivalent property things essential features without features whatever competing implementation testing comparing thing apples oranges point thanks time enthusiasm improve project tough issues evaluate testing nonequivalent scenarios simply nt prove anything conclusively course native inheritance example faster nt thing superficially similar", "d": "3/2013"}, {"body": "guys cut nt poke troll backbone models simple classes supposed got much going ticket closed hush", "d": "3/2013"}, {"body": "jashkenas negative wookiehangover point pertinent constructive one please submit pull request sorry knockoutjs fan glad libraries exist good specified points javascript var b afastclass function base baseclass custom constructor could optional fastclass add us var c thisconstructor function baseclasscall static method ctor csomestatic function surrogate way fastclass works design hence high speeds instance derrived prototype thisconstructorprototype beside calling function base baseclass set use aprototype prototype deep inheritance thissomederrived function basesomederrivedapply arguments wherever parent prototype chain defined somederrived method yes know retunring object method hence slowliness need iterate properites object inject new prototype extend extend almost similar like mine issue side guess models simple classes exactly related part", "d": "3/2013"}, {"body": "docyes thanks opening issue thing problematic querystrings ignored due handful weird real bugs querystring processing character encoding browsers decision ultimately ignore give consistent experience route handling main problem adding functionality back even optin door would reopened issues meant solve real solution say well nt use option think something acceptable known limitation backbone really need nothing stop overriding application patch back support", "d": "3/2013"}, {"body": "due handful weird real bugs querystring processing character encoding browsers nope slightest reason querystrings ignored backbone querystrings defined meaning serverside browser normally parse otherwise handle querystrings fine context real urls querystrings entirely invalid context urls backbone apps deal fragment urls sooner later even using pushstate users ie folks still fragments querystrings ca nt used compatible way better leave backbone app use nice urls instead must server side equation fine backbone ignore continue business", "d": "3/2013"}, {"body": "jashkenas bad incorrect explanation must kicking around back head responded probably reread issues liked instead trying remember exact context", "d": "3/2013"}, {"body": "hi molily chaplinjs team chaplinjs framework sits top backbone discussed query string support decided write viewpoint knuton published article talks general use urls amp javascriptbackbonejs apps particular also try join discussion respond comments several issues including one", "d": "7/2013"}, {"body": "heyo reading chaplinjschaplin article one bit like correct jeremy argues clientside apps encode query params paths like directionascsortcreatedstateopen point querystrings effectively opaque strings browser continue use opaque querystring choosing design putting actual querystring part url segment works fine use json serialization ordered path components whatever like importantly would fine entertain support query strings needs work transparently hashes well feel free send pull request although looks like nt gotten quite far chaplin yet finally bit shame write advocacy article instead making request via email understand gets results let hope nt cause many misconceptions", "d": "7/2013"}, {"body": "would agree molily bug resolved message clientside apps encode query params paths added support query strings works transparently hashes along failover url length constraints ie jashkenas perhaps advocacy article representative others historical experiences filing feature requestsbugs", "d": "7/2013"}, {"body": "jashkenas sorry misrepresented opinion issue mentioned urls alternative query strings said chaplin issue agree query strings avoided transformed cases finally bit shame write advocacy article instead making request via email goal article discuss topic general want web sites work difference apps traditional sites regard deduce backbone least allow assumed fundamental controversy point even google using hash urls lot backbone beginners wondering whether pick hash urls history choose aware implications get using pushstate least spending lot time explain basics chaplin users article tries explain background clearly recommend one practice raise question directly already several closed prs contributors explicitly spoke feature glad see discussion starting good starting point try restore changes make pr write tests makes sense ignore qs routing would match line routing frameworks moment one needs write spec support different query strings chaplin router puts pattern matches query string parameters hash like rails love see something similar bigger change deprecating chaplin chose override break core backbone logic know lot plugins monkeypatching weakens maintainability interoperability imho chaplin router totally relies backbonehistory query string extraction something top works fine since particular ignore query part handlers called switching problems mentioned comment assume tough case already query string apart switch lt quite easy moviepilotcom vizgedprojectde solved early redirect nonpushstate browsers appends backbone could add locationsearch interestingly already works way around redirecting hash pushstate locationsearch appended case", "d": "7/2013"}, {"body": "realized nonpushstate browsers latest backbone redirects guess reason query string processed server side client read using usual makes sense first glance order support qs backbone routing well could insert qs twice ugly indeed sites redirect posted early redirection code make sense pull apart remix process qs server handling qs meaningful context root assuming opposite qs processed serverside regardless path make sense send twice use case understand qs breaks scripts rely standard behavior scripts work hash urls anyway unrealiable example analytics scripts need feed something like manually otherwise nonpushstate browsers always track proposal mapping lt gt send qs server another context guaranteed qs even hit server imagine two users nonpushstate browsers sharing url qs sent using hash urls deceiving qs part use property disallow qs never worked anyway pushstate backbone would produce urls like", "d": "7/2013"}, {"body": "points latest proposal sound good except last one nt able support qs way support paths fact semantically unordered screw entirely", "d": "7/2013"}, {"body": "hi dmitriz right documentation could probably clarified bit probably read something along lines returns shallow clone model attributes object typically would nt want use way provided better using think current example bit suited demonstrates call object get correct representation would nt case method nt defined", "d": "3/2013"}, {"body": "hi tim like shallow clone even precise see point would nt want write example practice reveals true nature tojson example docs reveal result applying another function jsonstringify maybe better example kills flies", "d": "3/2013"}, {"body": "fixed", "d": "3/2013"}, {"body": "change use new rather updating collection fetch could either listen event use events individually add remove items fetch pass option fetch call trigger full reset", "d": "3/2013"}, {"body": "think find bottleneck thismodel collection class way get instance params", "d": "3/2013"}, {"body": "good news waaaay fewer failing tests zepto", "d": "3/2013"}, {"body": "able make test suite pass minor changes test code closing favor pull request", "d": "3/2013"}, {"body": "use risk explain zepto attempt emulate core jquery api nt compatible", "d": "3/2013"}, {"body": "think fine obviously nt run tests lodash similarly referenced guess bit surprised little change required get tests run felt submit part discussion real concern point future zepto really ceases viable option removed docs want prevent giving people bad advice edit apparently lodash nt referenced docs anymore", "d": "3/2013"}, {"body": "currently thinking remove reference downloads dependencies section add alternate dependencies section faq something like backbone uses subset jquery api generally compatible jquerylike libraries like zepto plan using zepto please proceed caution zepto entirely faithful jquery api possible future releases may work zepto jquery replacement", "d": "3/2013"}, {"body": "seems like assert something like backbone targets tests jquery underscorejs dependencies extent jquery underscore alternatives zeptojs lodashjs supported depends libraries adherence jquery underscorejs apis testing alternative libraries provided convenience guarantee nt problem keeping zepto current test suite question really whether future maintenance necessary whether new tests written zepto mind whatever keep eye", "d": "3/2013"}, {"body": "knowtheory pass copy part point add zepto tests travis build establish responsible say still works baseline deciding whether documentation optional jquery replacement final assessment really nt want expend extra energy support fine", "d": "3/2013"}, {"body": "going open issue zepto inconsistency currently backbone problem zepto really event data never removed causing leak", "d": "4/2013"}, {"body": "jdalton thanks good catch imo evidence use risk line reasoning", "d": "4/2013"}, {"body": "hi zimkies unfortunate side effect automatically attaching passed options model fixed master longer attaching see info", "d": "3/2013"}, {"body": "alright return right right returning model failed added", "d": "3/2013"}, {"body": "well returns successfully passes user validation return model working model returned passed success callback sent event guaranteed model collection already one id", "d": "3/2013"}, {"body": "eek", "d": "3/2013"}, {"body": "may issue quite sure came across trying think something two tickets", "d": "3/2013"}, {"body": "looked code definitely happening guessing one noticed less used standard", "d": "3/2013"}, {"body": "yep verified also happening probably common occurrence inconsistent worth taking account figuring duplicate model creation calls etc", "d": "3/2013"}, {"body": "think possibility attach function finish constructing model success way initialize prepared model really needs wait premodel like future fail right", "d": "3/2013"}, {"body": "briefly hinted curious constitutes equal comparing two models seems backbone assumes reference equality value equality need case currently way override behavior", "d": "3/2013"}, {"body": "think wyuenho raises really valid point maybe overridable cases like properly scoped natch", "d": "3/2013"}, {"body": "like correct concept equality backbone currently inconsistent good reason difference transient persisted models equality determined exists otherwise however relevant proxies compare reference little bit confused suppose really change place default behavior something like circumstances assumption break people able define get working circumstance without breaking every assumptions also mean every dedup merge sounds jashkenas put eek perhaps use identitymap", "d": "3/2013"}, {"body": "might need little work pretty sure push unshift longer return model", "d": "9/2013"}, {"body": "rereading realize may clear test page linked buttons change color box also update url hash red green blue using pushstate works every browser tested except chrome chrome beta android back button work though starting think actually browser bug backbone issue sure", "d": "3/2013"}, {"body": "working everywhere specific devicebrowser probably related devicebrowser rather backbone happens trigger hashchange actual hash rather triggering programmatically eg", "d": "3/2013"}, {"body": "put anchor tag page like suggested nt update url hash either tap screen update points browser bug think right", "d": "3/2013"}, {"body": "assume might want google around bit see others issues much without android check", "d": "3/2013"}, {"body": "ajax object set successerror handlers access also future please use irc mailing list specific questions", "d": "3/2013"}, {"body": "hi archaeron looks right though seem trip people good bit docs changed property internal hash containing attributes changed since last change event triggered since change event triggered call property cleared well however expecting different api please let know", "d": "3/2013"}, {"body": "braddunbar think issue nothing changed therefore still", "d": "3/2013"}, {"body": "say nt whats happening changed attribute suddenly empty edit braddunbar sorry nt see reply makes sense expecting would thing understand nt thank clarification edit read two messages wrong order confused", "d": "3/2013"}, {"body": "ah see change event cleared anyway thanks tgriesser sure much though perhaps docs changed", "d": "3/2013"}, {"body": "braddunbar think could help", "d": "3/2013"}, {"body": "would vote update docs", "d": "3/2013"}, {"body": "braddunbar tried samething silent true nt change event triggered whole thing work expected braddunbar tgriesser btw thank much help", "d": "3/2013"}, {"body": "archaeron silencing event nt affect clearing changed", "d": "3/2013"}, {"body": "braddunbar yes nt said since change event triggered call model set changed property cleared well however expecting different api please let know set silent true change event nt triggered nt therefore changed attribute emptied", "d": "3/2013"}, {"body": "docs say currently incorrect tgriesser points submit documentation change", "d": "3/2013"}, {"body": "braddunbar thank", "d": "3/2013"}, {"body": "addressed", "d": "3/2013"}, {"body": "example javascript var foomodel backbonemodelextend var foo new foomodel object lasts entire user session var barmodel backbonemodelextend defaults name bar model initialize function fooon something thisprintcid printcid function consolelog thiscid var barcollection backbonecollectionextend model barmodel var barcollection new barcollection barcollectionadd name bar model id barcollectionset name bar model updated id barcollectionset name bar model updated id barcollectionset name bar model updated id footrigger something outputs unexpected", "d": "3/2013"}, {"body": "thing happen happening every example replace see result better way design app would remove event binding constructor current design simply calling creates event leak convinced problem rather design issue see discussion", "d": "3/2013"}, {"body": "convinced set add problem rather design issue caseywebdev could said views collections time listener created cleaned think issue previously nt nearly common default also think common scenario model could listening events perform action nt necessarily external event object cases internal temporary model would still hang around potentially cause issues place backbone nt cleaning self figuring way create temporary model sure possible without strictly enforcing data structure cleaning events creating one would probably best cc jashkenas", "d": "3/2013"}, {"body": "worth sometimes also use model method set listeners events eg want update property b property changes perhaps antipattern strikes best place logic", "d": "3/2013"}, {"body": "tgriesser far issues sprung simple logical solutions curious see case really broken current system looks like believe love able check model existence without creating temp models ca nt see fix without significant changes rules methods used ie ca nt context lukeasrodgers model listens changes wo nt leak antipattern opinion blindly binding object outside model scope initialize", "d": "3/2013"}, {"body": "caseywebdev saying ca nt solve different way hell probably everything without even using events unintuitive external object calls long clean ca nt inaccessible temporary models may created internally nt immediately obvious also yes lukeasrodgers use wo nt problem bit strange use one type binding another model elsewhere library solution think would create model sans internally calling model determined kept around although even sure safely assumed correct called anyway saying could nt done better saying nt wrong way", "d": "3/2013"}, {"body": "solution think would create model sansinitialize internally nah besides nonstandard difficult implement still add handlers constructor", "d": "3/2013"}, {"body": "figured thought throw unbinding everything saying nt way really two options", "d": "3/2013"}, {"body": "problem hidden developer would expect initialize new models initialize models nt found currently logic one passed exactly problem fails logic called less problems", "d": "3/2013"}, {"body": "issue way knowing model really check existence fully parsed means creating new model", "d": "3/2013"}, {"body": "tgriesser case know id property based internal hash keep permodel used wrap like would nt simpler backbone models sort clunky", "d": "3/2013"}, {"body": "read issue main point structure model ca nt reliably determined eg server response looks like", "d": "3/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "thanks opening issue seeing browsers share relevant clientside code", "d": "3/2013"}, {"body": "wookiehangover thanks getting quickly seeing issue browser initialize method collection allowing cross domain previous version server running client", "d": "3/2013"}, {"body": "exact exception seeing browser console xmlhttprequest load origin allowed accesscontrolalloworigin", "d": "3/2013"}, {"body": "think found reason issue actually linked cors setup app noticed pass fetch method everything working properly really sorry nonrelevant issue", "d": "3/2013"}, {"body": "", "d": "11/2014"}, {"body": "gone preferred method use jqueryzepto make elements", "d": "3/2013"}, {"body": "windheart decided upon see information reasoning", "d": "3/2013"}, {"body": "jinx", "d": "3/2013"}, {"body": "fixed thanks pointing", "d": "3/2013"}, {"body": "different related issue option tricky situation options object passed around everywhere causing unintended consequences rolled back overriding issue new sideeffect arising using option named collection configuration sure whether intentional documentation notes upgrading useful users passing might used userdefined method would turn called turn overrides method breaks code expecting function workaround alternative use passing options method instance intending preset models property alternatively property options override remove urlurlroot options situation worked around undesirable however passing option valid usecase causes undesired sideeffect question may differentiate fetch url usage model url use cases losing", "d": "3/2013"}, {"body": "thanks bringing nt think option seems like nasty side effect possibly dealbreaker automatic option well", "d": "3/2013"}, {"body": "ran issue upgrading app collections make heavy use urlroot dynamically update base url configuration object ie intended change always liked worked hope nt guidance best way achieve would great", "d": "3/2013"}, {"body": "ran surmise issue also models collection would longer automatically id appended saving model hrm", "d": "3/2013"}, {"body": "run similar problem override model longer called instead every model simply property set result collection", "d": "3/2013"}, {"body": "fixed thanks", "d": "3/2013"}, {"body": "plan release bb fix soon kind biggie workaround done backbonepageable necessitate setting generated url either callback gets invoked reset url original could leave open window seconds becomes useless", "d": "4/2013"}, {"body": "also ran issue spent tracking saw looking forward", "d": "4/2013"}, {"body": "yep right time let try wrap", "d": "4/2013"}, {"body": "jashkenas like get defaults w merge dealio fixed", "d": "4/2013"}, {"body": "feature team well took us quite time debug problem upgrading", "d": "4/2013"}, {"body": "seems likes caseywebdev change merged get soon", "d": "4/2013"}, {"body": "get xhr options third argument error callback", "d": "3/2013"}, {"body": "sweet thanks", "d": "3/2013"}, {"body": "actually callback default error looks like grab second argument also add options available good grabbing headers necessary", "d": "3/2013"}, {"body": "nah pretty sure model resp options", "d": "3/2013"}, {"body": "changing worked originally way caseywebdev described broke", "d": "3/2013"}, {"body": "well call second parameter", "d": "3/2013"}, {"body": "sorry send pull changed name", "d": "3/2013"}, {"body": "simply return http error code server callback invoked", "d": "3/2013"}, {"body": "wo nt modelisvalid return true even error returned", "d": "3/2013"}, {"body": "answer would nt possible without rewriting ton internals allow async intended used simple client side validations create custom function performs ajax request accepts handler determine whether something like perform modelsave happen whatever else", "d": "3/2013"}, {"body": "already works fail model save validation server side client see changes", "d": "3/2013"}, {"body": "nt think question saving though also allowing async capability", "d": "3/2013"}, {"body": "correct let say create model html form want validate fields validated locally require ask server list valid results know client suppose caseywebdev jashkenas solutions would work case thought throw suggestion several scenarios could also useful biggest issue caseywebdev approach gets messy model events success event fire second later server returns error error event fire late would already displayed good message user", "d": "3/2013"}, {"body": "yeah jashkenas said case want save fails server validation check stuff wo nt fire success etc", "d": "3/2013"}, {"body": "thanks pointing actually way around used default passed use reset instead either way docs updated master", "d": "3/2013"}, {"body": "hi mikesnare following seems work correctly would mind posting code snippet illustrates problem", "d": "3/2013"}, {"body": "yep seeing issue either reopen example working", "d": "3/2013"}, {"body": "ugh yep bug code somewhere intermediate class views backboneview extend instead extending backboneview directly causing problem thanks response", "d": "3/2013"}, {"body": "yep merged", "d": "3/2013"}, {"body": "clicking url backbonehistoryfragment contentfactorytype idid using back forward buttons fragment stripped query string fragment contentfactorytype", "d": "3/2013"}, {"body": "backbone cantdoesntwo nt handle query strings see previous tickets discussion", "d": "3/2013"}, {"body": "hi ivanzhaowy see working correctly master well handful bugs previous versions fixed would recommend using master ca nt use master", "d": "3/2013"}, {"body": "whoops thought said working master certainly still reproduce would mind putting jsfiddlejsbin take look", "d": "3/2013"}, {"body": "seems fine", "d": "3/2013"}, {"body": "hi braddunbar used latest codes edge version still caught problem found problem edge version called merge models existed collection use called codes used judge model whether existing following line call constructor model listeners bind time lead listeners leak even worse see following test code", "d": "3/2013"}, {"body": "ping caseywebdev take look", "d": "3/2013"}, {"body": "nt bug never called model never collection never ed first place design program allow model instances created temporary variables previous implementations avoided initializing new models due complexities nt reliable solution revised version working expected", "d": "3/2013"}, {"body": "reopening since primary means handling models collections could source hard track issues really way need let people know design program allow model instances created temporary variables ivanzhaowy code looked otherwise fine nt know temporary models created", "d": "3/2013"}, {"body": "would nt contextfree even possibility factoryfunctions even get method two biggest problems currently solved temporary model nt even isolated thing without merging edit see ivanzhaowy example swapped result", "d": "3/2013"}, {"body": "yeah maybe calling model fails good measure looking forward weird event bugs answer design better way knowing wrong knowing internals work", "d": "3/2013"}, {"body": "yeah maybe calling stoplistening model fails validate good measure even would nt enough case valid duplicate model model reference lost call well pretty looking forward weird event bugs answer design better way knowing wrong knowing internals addset work nt know another option without significant rethinking nt seem ideal recent drop", "d": "3/2013"}, {"body": "issue factory function could check use parse prototype could use parse prototype could simple note docs", "d": "3/2013"}, {"body": "think would work still issue model parsed context point vote note docs becomes recurring stumbling block people pre might consider taking another look semantics would pretty big change", "d": "3/2013"}, {"body": "maybe manage dependency model good way implement dependency injection people may still something related objects constructor method model even dom events xd even called wo nt solve problem instance model created implicit must destroyed well maybe force people implement method used decouple dependencies solution seems doest accord backbonejs design philosophy", "d": "3/2013"}, {"body": "caseywebdev let know see reason pr added would nt work wait see jashkenas thinks one feel common enough case bind listeners initialize long cleaning removal nt stick around nt opportunity ever remove", "d": "3/2013"}, {"body": "looking back previous versions backbone creation temporary internal models nt anything new maybe coming light addition defaulting collection fetch note docs mentioning something along lines models may point part collection nt bind events external objects probably best solution", "d": "4/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "property really needed model lives outside collection endpoint might want rethink url structured post create apple probably apples collection something similar passing along rather returning different resource one identified url working tree model apples collection property model either way want override url propert perrequest basis always pass along property sync functions", "d": "3/2013"}, {"body": "makes wrapping start spy difficult cleanly sure want unless trying test backbone backbonehistorystart throws error call yes starting error want get error something application erroneously trying start history", "d": "3/2013"}, {"body": "application couple modelscollections need loaded start history wanted test confirms models loaded call backbonehistorystart nt want test backbone meaning test nt care historystart gets called reason wanting spy function understand calling start application would represent error suggesting kind stop function test teardownsaftereachs could call allowing subsequent tests cause start called without error", "d": "3/2013"}, {"body": "jefflage undocumented exactly purpose", "d": "3/2013"}, {"body": "excellent thanks", "d": "3/2013"}, {"body": "also check router tests creative ways test", "d": "3/2013"}, {"body": "comment simply means developer override handle request however see fit", "d": "3/2013"}, {"body": "using done binding event objects destroyed automatically provide example trying achieve", "d": "3/2013"}, {"body": "sure mean destroy events object javascript garbagecollected language events left referring object go away", "d": "3/2013"}, {"body": "caseywebdev describe specifically usage using backboneevents bind messages specific channel websockets channel dispatcher created first bind also subscribe websocket channel whenver unbind callbacks want unsubscribe ws channel moment way easily check unsubscribe listeners active jashkenas garbage collector example actually feature problem still reference events object actually want remove reference idea still callbacks left", "d": "3/2013"}, {"body": "got either leave reference nt worry backbone events objects nt use hardly resources unless millions maintain listeners count form reference counting use private variable public api going support backbone apps use", "d": "3/2013"}, {"body": "unfortunately doesnt solve problem unmaintainable bind twice event name would need reprocude whole events logic app get count well still awful solution first private api changed actually makes backboneevents kinda magic box put stuff cant really sure whats unless reproduce whole thing probably isshould nature events dispatcher yes maybe use nt think always go whatever majority needs nt want heavy api change simple checker would help maintain backbone code better would still possible would happy write pullrequest thanks", "d": "3/2013"}, {"body": "var originalon backboneeventson backboneeventson function thiseventcount originalonapply arguments sure think something", "d": "3/2013"}, {"body": "unfortunately see discussion going nowhere clarify easy way monitor need pointed example counting usages bind counting actual bindings count external public stuff problem private magic unreachable eg ca nt easily count bindings left need reproduce whole logic mutiple layers using event callback context dimensions use events lots times application quite heavy logic need callback whenever binding keft clear way except private variable need admit events black box moment method asked would enable simple way small preview events current state even though would use nt matter bad believe tried lot solutions coming backbone project think distinguish issues done users provide lot info instead simple pleasedo requests hope request implemented would still like hear actual reason seems previous solutionsrecommendations either dirty bad thanks tomasz", "d": "3/2013"}, {"body": "hope request implemented would still like hear actual reason problem reason least backbone apps use method nt extend public api things vast majority backbone apps nt need", "d": "3/2013"}, {"body": "tomaszdurka add app simply update method internal api changes per bb release would isolated one line change", "d": "3/2013"}, {"body": "hi mustaphaelouafi thanks pointing however looks like correct way use check recent changes nt help please post code sample glad take look", "d": "3/2013"}, {"body": "hi braddunbar thanks help think ok", "d": "3/2013"}, {"body": "worries ca nt patch would incorrectly decoding plus symbols instead make sure encode plusses sending server everything work fine", "d": "3/2013"}, {"body": "al thanks opening issue think current behavior fine asis modifying canceling ajax falls outside scope backbone provide defaults since strays outside normal restful workflow backbone need extra complexity around ajax whatever reason cancelling requests etc couple options implement custom sync method either model collection needs use globally overriding backbonesync overwrite backboneajax proxies ajax entirely", "d": "3/2013"}, {"body": "hi morganick right either behavior docs updated sync plus side returns without complaint", "d": "3/2013"}, {"body": "addressed please chime implementation thanks", "d": "3/2013"}, {"body": "hi mikesnare thanks pointing correct docs inconsistent applied silent sets would recommend avoid silent sets use custom options instead also silent sets removed master makes documentation consistent", "d": "3/2013"}, {"body": "also see information removal silent set", "d": "3/2013"}, {"body": "yes definitely thanks tim", "d": "3/2013"}, {"body": "ugh whole concept silent true gone disappointing imagine index view collection imagine user something ui bulk operation models collection performance reasons seems perfectly reasonable desireable able iterate collection update model new attribute silent option even shortcircuiting described event gets triggered every single model every single listener potentially significant performance drawback well development problem every developer needs update every single event handler check silent flag code exactly described iteration fire custom event says attribute x models collection updated know listen anywhere need listen changes attribute appreciate work guys really like backbone code nt think like change silent true considered antipattern complicate code much could understand maybe dreading next upgrade thanks response btw", "d": "3/2013"}, {"body": "performance drawbacks shenanigans going change far costly triggering events bit moot point imagine listening collection change events alerting user got wrong please correct able change something like something like sorry causes headache think changes cause less long run", "d": "3/2013"}, {"body": "actually responding user desire upgrade elements page sending request server operation bulk success iterating models collection silently setting attribute reflect change upgrades done individual models view representing single instance must change listener attribute unfortunately view represents individual model renders differently enough based single attribute change one trigger model realistic option performance standpoint since observed view responds individual change performance issues parent index view iterate view custom bulk event tell update type nt seem make sense certainly saw time came bulkchange event time long performance nt degrade put silent check view listeners events fired fine bit annoying refactoring thanks responseinfo", "d": "3/2013"}, {"body": "ok let us know trouble change make painless possible", "d": "3/2013"}, {"body": "looks like need deep clone happening instead", "d": "3/2013"}, {"body": "yep shallow supposed work", "d": "3/2013"}, {"body": "see discussion use backbone never objects nested attributes able get around json jqueryextend true modelattributes still feels nasty", "d": "3/2013"}, {"body": "use backbone never objects nested attributes fine currently expected behavior serialization done deep suggested somewhere pile issues switch implementation something like added chaplin faster common cases allows modification resultant object safely without changing model", "d": "3/2013"}, {"body": "interesting sounds like shallow copy tripped people", "d": "3/2013"}, {"body": "expected behavior unexpected metalevel unlocked", "d": "3/2013"}, {"body": "tgriesser maybe sync problems resolved pr would still like know rationale behind versioning anyone cares comment thanks", "d": "3/2013"}, {"body": "hi techpines sorry problems upgrading think help bit signature change fixed likely compatible code let us know dig deeper semver jashkenas explains reasoning another discussion ca nt seem find right try post back find cc tgriesser remember issue", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "tbranyen hehe good reference though also longer discussion issues", "d": "3/2013"}, {"body": "hats jashkenas great open source work love backbone coffeescript underscore think whole notion pretty meaningless people happy deploy beta code production hell everything build clients written nodejs backbone two cents would incrementing middle number instead pretty easy helpful us abusers notion beta software although know backbone operates pretty much mute point since backbone changelog docs great along source code annotations sure poor sucker gon na burn extra time realizing library nt following semver cheers", "d": "3/2013"}, {"body": "hi benoitnadaud backbone behave way expecting take look may getting applied model validation failing attributes nt making please provide sample code unable find problem", "d": "3/2013"}, {"body": "need use wait true option save method", "d": "3/2013"}, {"body": "prevent passed set getting confirmation server regardless option backbone tries set model getting response", "d": "3/2013"}, {"body": "thanks problem fixed restful service returning array one json element update instead returning directly one json representation model object thanks lot reading bb code really useful", "d": "3/2013"}, {"body": "lovely glad got fixed thanks info mponizil", "d": "3/2013"}, {"body": "erichiggins thanks opening issue curious looked seems like accomplishing similar goal would willing make pull request discuss details implementation specifically", "d": "3/2013"}, {"body": "wookiehangover seen suppose similar wish decouple functionality backbonerouter put together pr per request", "d": "3/2013"}, {"body": "erichiggins thanks making pull request continue discussion", "d": "3/2013"}, {"body": "hey rsoares able reproduce bug seeing fiddle could provide sample code brings unexpected behavior", "d": "3/2013"}, {"body": "hey mponizil thanks reply hope nt mind updated fiddle provide sample behaviour described example see returns expected still modifies attribute question modified even validation fails according docs", "d": "3/2013"}, {"body": "yea default attribute set even though invalid saved passing options call works fine seems intuitive even set invalid values memory explicitly call desired behavior", "d": "3/2013"}, {"body": "forgive comment lots discussion", "d": "3/2013"}, {"body": "oh see thanks timmywil purpose enforcing validation prevent model persisted validation prevents attributes modified okay seems good opinion excerpt docs modified validate returns error set save continue model attributes modified misled maybe could confuse someone else", "d": "3/2013"}, {"body": "think doc backbone mentioned validate work", "d": "3/2013"}, {"body": "rsoares thanks bringing outdated documentation bug", "d": "3/2013"}, {"body": "problem jashkenas thanks fix", "d": "3/2013"}, {"body": "would collectionupdate work", "d": "3/2013"}, {"body": "collectionupdate would need models however use collectionfetch update true case nt trigger single event changes multiple add remove events basically code like render function send fetch request render page cached data change collection show user notification data onclick render", "d": "3/2013"}, {"body": "nitinhayaran take look looks like along suggestion use would work looking could trigger custom event success handler callback data returned also adding data collection infinite list something similar need pass rather previous", "d": "3/2013"}, {"body": "give suggest debounce method try however writing custom event would tricky direct way know collection actually changed", "d": "3/2013"}, {"body": "thanks tgriesser worked fine", "d": "3/2013"}, {"body": "looks fine", "d": "3/2013"}, {"body": "hi wulftone issue change internal successerror handlers since fixed feel free grab copy latest master fixed", "d": "3/2013"}, {"body": "see getting published website got flawed version might prudent using master seems fixed particular problem introduced slew new ones considering rolling back avoid hassle", "d": "3/2013"}, {"body": "wulftone elaborate new problems using master nt much else changed removal option see release hoping wrap issues get new version pushed changes place soon", "d": "3/2013"}, {"body": "ugh old idea caused gone whatever thanks help", "d": "5/2013"}, {"body": "yes nt magic current changed attributes model regardless whether useful response fine way go", "d": "3/2013"}, {"body": "ah ignore post sending null bad wrong sorry", "d": "3/2013"}, {"body": "inject backbonesync success function modelparse something like", "d": "3/2013"}, {"body": "using recommended zyzniewski model option interesting idea bit skeptical many people would find useful especially since addresses problems like concisely", "d": "3/2013"}, {"body": "yep using great idea models purposely allow fetching subset attributes without removing existing ones however make work want", "d": "3/2013"}, {"body": "morning dminkovsky quite right description remnant old version backbone corrected please take look see seems bit better", "d": "3/2013"}, {"body": "afternoon braddunbar thanks commit reply generally speaking guys interested pulls requests edits stick issues way background getting arms around backbone source big reconciling take code commentsdocs suggesting edits believe would improve readability eg nt ever create one never create one", "d": "3/2013"}, {"body": "docs could certainly benefit pored would happy review comment pull requests submit effect", "d": "3/2013"}, {"body": "hi jbriz thanks ticket need pass options set validation assumed see little discussion ticket", "d": "3/2013"}, {"body": "sorry", "d": "3/2013"}, {"body": "problem", "d": "3/2013"}, {"body": "validate called options zeke zhao \u8d75\u671b\u91ce mobile email wangyezhao wandoujiacom mailto wangyezhao wandoujiacom skype ivanzhaowy \u65b0\u6d6a\u5fae\u535a \u8d75\u671b\u91ce wandou labs frontend engineer \u8c4c\u8c46\u5b9e\u9a8c\u5ba4 \u524d\u7aef\u5de5\u7a0b\u5e08 saturday march noahzhang wrote man backbonemodelextend initialize function alert hey create thisbind change name function var name thisget name alert name thisbind invalid function model error alert error defaults name \u5f20\u4e09 age validate function attrs options attrsname return name\u4e0d\u80fd\u4e3a\u7a7a aboutme function return \u6211\u53eb thisget name \u4eca\u5e74 thisget age var man new man manset name reply email directly view github", "d": "3/2013"}, {"body": "hi noahzhang correct functionality ivanzhaowy pointed needed options trigger validation model default functionality changed thanks", "d": "3/2013"}, {"body": "thanks", "d": "3/2013"}, {"body": "backbone issue try freednode irc support request maybe someone help", "d": "3/2013"}, {"body": "ok thanks", "d": "3/2013"}, {"body": "hi thanks issue trying reproduce seems working tried take look jsfiddle see anything missing thanks", "d": "3/2013"}, {"body": "tgriesser mistake looks like happens ff using also tested chrome safari request indeed sent ff looks like request never sent however error callback called updated fiddle", "d": "3/2013"}, {"body": "thanks update distilled jquery issue version fiddle going close side note would want default data sent request", "d": "3/2013"}, {"body": "developing application api expects certain parameters collection gets since majority views use collection get calls calls ignore parameters wanted set defaults ended moving defaults widelyused view specific use case assume others need also option exists", "d": "3/2013"}, {"body": "customview class definition super pretty gets job done", "d": "3/2013"}, {"body": "hi opensas often use approach dgbeck suggests well using function choose extend parent view js var parent backboneviewextend events function return var child parentextend events function return extend parentprototypeeventscall dig issues find good deal discussion topic probably good tips", "d": "3/2013"}, {"body": "thanks lot tips give try sorry opened ticket guess asked stackoverflow instead", "d": "3/2013"}, {"body": "check think step right direction keeping stuff add vice versa expensive iterating models twice existence checking twice", "d": "3/2013"}, {"body": "step opposite direction imo creating one big function handle everything proposed understanding difficult handle update every possible cases something everyone necessarily wants needs use refactoring something everyone use different undocumented flags handled internally add even though really apply used update method proposed new implementation great job trying feel like making things unclear internally would better suited split plugin pauluithol pointed makes things difficult trying build things top backbone concerns working building server side orm using backbone models update nt useful necessary would look like plugin would super simple add could things like make default fetch handler add custom update event nt need debounce throwing definitely see really useful conerned complexity needed might outside scope backbone cc braddunbar", "d": "3/2013"}, {"body": "definitely disagree moving plugin function clearly high demand refactoring something everyone use sure follow refactor minuscule effect perf removes good chunk duplicated work one use said definitely would like see refactor attempts avoid double parsing existence checks loops etc", "d": "3/2013"}, {"body": "also moving plugin conceptually update collection therefore domain task sugar hood options params tweaked support existing functionality important backbone api currently allows removing models adding models feel better handled monolithic method", "d": "3/2013"}, {"body": "definitely disagree moving update plugin function clearly high demand caseywebdev curiosity data draw conclusion thing like backbone primitives simple source easy read understand need dive deeper neither simple easy understand fact currently biggest complex method exists backbone hand continues easier use practice agree tgriesser perhaps bit nicer call instead reverse really moving body one giant method another also one goals update models without creating temporary models meantime however feel odds idiomatic implementations", "d": "3/2013"}, {"body": "curiosity data draw conclusion support original pull request well collective response since majority positive fact currently biggest complex method exists backbone longer update simple algorithm find existing remove nonexisting merge part adds less loc gets complex abstracted generic updater method duplicate work", "d": "3/2013"}, {"body": "nt think positive reaction equates high demand high demand good metric inclusion save start navigate longer misspoke referring proposed implementation update simple algorithm find existing remove nonexisting merge things certainly trivial evidenced problems", "d": "3/2013"}, {"body": "fwiw think huge improvement would really hate see removed backbone added last couple versions already long complicated better actually fewer lines b keeps complicated logic place makes sense however regarding paul comment perhaps could improved internal helper methods used overriding done without copying tons code also fwiw find way workaround issue backbonerelational", "d": "3/2013"}, {"body": "regards length illustrates change time length complexity similar situation happened method queued support issues grew several methods several objects keeping track state eventually dropped favor simpler method inside made things much clearer internally method assumes want keep server side client side sync many situations nt case still issues nt accounted keeping server side order various parse issues main issue flags handled call made blurring line two methods making call like work although nt make sense would pass flag add let picture someone using custom option pass options pipe often advocated would go digging see actually passes internally causing model added necessarily saying needs taken definitely see value add looking take closer look see makes sense keep codebase smaller simpler easier understand", "d": "3/2013"}, {"body": "method assumes want keep server side client side sync many situations nt case absolutely vital situations response needs associated existing models memory preserve nested relationships event handlers eg simple method collection obliterates connections creates needless obstacle incredibly common scenario want update client side data redelegate everything already got relationships set side note would want keep server date collection nt point giving collection method nt need nt use clone collection right making call like thisadd models remove true work take look implementation add call work exactly described passedin override defaults get point complexity stands currently lot things nt back sorting removing model collection events take lot code happen somewhere given backbone current api netpositive way splitting different parts methods might worth exploring", "d": "3/2013"}, {"body": "much philosophically favor braddunbar tgriesser sentiments also compellingly useful might help think vein sets data value model appropriate events single function able set list models collection appropriate events triggering fact perhaps called instead said cleanups always better use patch starting point try tidy", "d": "3/2013"}, {"body": "alright ya going love significant breaking change renamed parallelism shares semantics described parallelism nice sensible pun go along changed default fetching use semantics optin requested several times hope dig yell nt", "d": "3/2013"}, {"body": "fair enough first thought change model collection differ partial model wo nt remove attributes previously specified whereas collection would would make sense set collection would default flag", "d": "3/2013"}, {"body": "debatable let go mostcommon usecase think commonly desirable behavior specified current defaults", "d": "3/2013"}, {"body": "wookiehangover think sounds like great idea favor consistent predictable releases vote release number unless want use sort release candidate", "d": "3/2013"}, {"body": "wookiehangover agree vote release number", "d": "3/2013"}, {"body": "like see milestone", "d": "3/2013"}, {"body": "wanted say cool violate semver rules way backbone sounds like minor patchlevel upgrade yet introduced backwardsincompatibility etc sort confused users considered release candidate named maybe shit really considered stable amp api freeze done could released another good example violation zepto released almost year ago yet appeared lot changes earlyrelease ftw well testing stuff coffeescript released one week day horrible bug confused users", "d": "3/2013"}, {"body": "paulmillr", "d": "3/2013"}, {"body": "paulmillr exactly type thrash would like address ticket enough people project ability tag issues assign things milestones hopefully cut releases way compatible semver conventions able cut lag releases determine criteria goes next release way open transparently managed github", "d": "3/2013"}, {"body": "technically whatever want api would great", "d": "3/2013"}, {"body": "yes technically semver anything pre whatever point project owner github whatever hell please cares versioning think taking backbone point extremely premature considering api ca nt even remain stable supposed minor version releases point mark must backwards compatible project really shown ability much point semver establish rules versions chosen progress users try follow rules practices prior increment though nothing prohibiting version", "d": "3/2013"}, {"body": "please note issue track discussion go next release meant invitation debate folk opinions semver lets keep topic next milestone thanks", "d": "3/2013"}, {"body": "issue create miltesone title says issue necessarily invites debate stability product track record versioning", "d": "3/2013"}, {"body": "bisrael already stated original text issue fine consensus lean towards instead really nt care either way going argue anyone past releases neither solutions oriented productive discussion point upcoming releases organized around outstanding issues pull requests github philfreo adding", "d": "3/2013"}, {"body": "paulmillr app apply semver rules would way eg node packages versioned users expect rules trust versioning means every patch level update demands careful retest whole app", "d": "3/2013"}, {"body": "sounds great organization around issues fantastic idea particularly triaged versus new issues importantly think would allow us punt difficult issues later release still getting bug fixes incremental changes hands users winwin see", "d": "3/2013"}, {"body": "based positive response going go ahead create milestone tag issues pull requests thanks feedback everyone", "d": "3/2013"}, {"body": "thanks opening issue promise behavior backbone always product using jquery specific code path support feature request opens door lot places nt keep historical stance closing one since promises nt explicitly accounted backbone", "d": "3/2013"}, {"body": "got bit one pain hierarchy models need saved series", "d": "4/2013"}, {"body": "maybe time backbone explicitly support use promises indirectly jquery zepto support already quite shaky discussed several times already eg nt see big problem potential replacement anymore current solution rely jquery promises using validations etc creates really bad api methods communicate server think would far better solution long run backbone actually use promises internally quite big change would probably targeted specific reasons backbone nt use promises except supporting zepto", "d": "4/2013"}, {"body": "thinking monkey patching something like meantime originalsave backbonemodelprototypesave backbonemodelprototypesave attributes options gt req originalsavecall attributes options req model valid return jqxhr req else model invalid return promise consistency dfd new deferred dfdreject validationerror options dfdpromise", "d": "4/2013"}, {"body": "seem like could potentially provide nicer unified api feel free send pull request", "d": "4/2013"}, {"body": "sure others agree suggestion rename option instead consistent existing method", "d": "4/2013"}, {"body": "took first shot decided include option since fail handler handle case failed model validation unsuccessful ajax request feels little cleaner validation check save fails add event listener really need specific errors probably want invalid listener show user messages anyway alternatively", "d": "4/2013"}, {"body": "apply method related sync save modeldestroy issue", "d": "6/2013"}, {"body": "moving conversation", "d": "6/2013"}, {"body": "collectioncreate also use promises instead pass successerror callbacks", "d": "7/2013"}, {"body": "reason would make sense broader user base go ahead override desired functionality", "d": "3/2013"}, {"body": "hey dehrgg yeah idea perform collections models server response returned successfully might useful use check whether model would valid based conditions would block save way could continue use standard", "d": "3/2013"}, {"body": "caseywebdev nt see changes anything broader user base understandable incorporate edge case tgriesser wo nt work model valid context collection adding", "d": "3/2013"}, {"body": "dehrgg changes semantics waiting add server saves successfully adding immediately see save defeats purpose could pass custom flag options line validate function checked options item js collectioncreate model creating true elsewhere modelvalidate function attr options optionscreating amp amp thiscollectioncontains attrotherkey return invalid key check rest validations go", "d": "3/2013"}, {"body": "tgriesser passed statement would never evaluated anyway thanks help", "d": "3/2013"}, {"body": "model exist outside collection multiple collections instances nt want remove events model removed certain collection", "d": "3/2013"}, {"body": "could nt stoplistening accomplish thing", "d": "8/2013"}, {"body": "thanks opening issue correct would need call subviews order event handlers removed bound things best way override method call super fwiw call super end method rather beginning need call nt events bound object calling vestigial example presented also please take look code formatting options link says github flavored markdown comment box went ahead reformatted unformatted block top comment", "d": "3/2013"}, {"body": "follow support requests like appropriate documentcloud room freenode irc smileycat", "d": "3/2013"}, {"body": "thanks wookiehangover yes super end removeyour answer eliminate worry cleaning view", "d": "3/2013"}, {"body": "hey machineghost always create model adding right", "d": "3/2013"}, {"body": "thanks braddunbar correct included option c downside approach besides verbose sometimes collections build different models class subclasses bcd collection often look attributes decide whether build b c however really overriding instead overriding yes know pseudoprivate method see one terrible person models available wouldt matter base collection still think weird collections create models real way get back nt really realistic use case matters guess ticket die", "d": "3/2013"}, {"body": "however really overriding add instead overriding preparemodel actually would recommend using factory function work cases", "d": "3/2013"}, {"body": "braddunbar thanks great solution", "d": "3/2013"}, {"body": "braddunbar really great suggestion file separate ticket documentation amendment collectionmodel users nt come find great trick", "d": "3/2013"}, {"body": "mornin radekmichna nt think feature backbone add certainly accomplish code passing custom options js var new backbonemodel attr var new backbonemodel name var new backbonemodel name mon change attr function model value options optionscontext amp amp optionscontext return consolelog thisget name mon change attr function model value options optionscontext amp amp optionscontext return consolelog thisget name hope helps", "d": "3/2013"}, {"body": "works well thank", "d": "3/2013"}, {"body": "fixed thanks dminkovsky", "d": "3/2013"}, {"body": "hi mochatony nt able reproduce exactly bug describing think probably related configuration would expect could leave using even think removing using may solve problem give shot let us know pans", "d": "3/2013"}, {"body": "hello braddunbar sorry apparently bug side nt notice extend custom router initialization sorry thank", "d": "3/2013"}, {"body": "either attrs model case nothing needs two objects object reference means passed rather naked object case need set model collection value passed model attributes", "d": "3/2013"}, {"body": "ca nt always set existing model collection models attributes point either passed model works like describe thanks clarification helped model result prepare model advantage model parse still set existing model attributes model existingset modelattributes options", "d": "3/2013"}, {"body": "still set existing model attributes model implemented previously turns leads bug functionality new model default values would override existing model intended however notice skip set case thanks", "d": "3/2013"}, {"body": "solved similar last proposal js var parent backbonemodelextend child function return thischild thischild new child parse function data options datachild thischild set datachild delete datachild return data ideal order operations model constructor ca nt really change another option exploring lately overriding extract certain values case child might look solution warned overhead created every call", "d": "3/2013"}, {"body": "caseywebdev could specified option set nt considered would useful seems like might good solution something like", "d": "3/2013"}, {"body": "tgriesser immediate thought lots double parsing going also nt want abused setter method since intention translate server data bb data", "d": "3/2013"}, {"body": "kjbekkelund form often use put setup logic constructor javascript var parent backbonemodelextend constructor function attributes options thischild new child thissessions new sessionscollection backbonemodelconstructorapply arguments ensures set since called first involve mucking around purposes works quite well", "d": "3/2013"}, {"body": "initialize model constructor simple easy", "d": "3/2013"}, {"body": "thanks nt thought using feels like okayish solution really think simpler backbone would great solution nt need least documentation says rare cases looking get fancy may want override constructor recommended way handle nested collections think documentation updated btw would awesome little documentation handling nested models collections especially handle stuff like cc braddunbar caseywebdev overriding possibility feel easy handle box backbone work several developers mainly work backend nt want add much magic differs backbone documentation", "d": "3/2013"}, {"body": "kjbekkelund since calling constructor nt need sufficient agree regarding documentation think backbone goes way avoid calling super embracing much better direction support change encourages people deal vanilla inheritance directly instead working around hiding", "d": "3/2013"}, {"body": "kjbekkelund also use pattern sometimes fwiw may also want check looking simplest least code way lot relations", "d": "3/2013"}, {"body": "braddunbar ah course bad knew nt think better still best possible solution mind hm downsides skipping using everywhere code nt want handling nested modelscollections special case want use pattern consistently possible one thing bothers look documentation understand difference big problem feels little ambiguous philfreo backbonerelation far much complexity really nt like pulling large plugins handle simple problems looking solution simplest least code want cleanest solution right appears okayish solutions possible vanilla backbone best thing would solution easily understandable looking code look documentation understand repospecific changes backbone methods", "d": "3/2013"}, {"body": "sides know think using everywhere nice often", "d": "3/2013"}, {"body": "small section docs added showing custom simple example demonstrating used alongside custom parse address question", "d": "3/2013"}, {"body": "idea mean say edit got", "d": "3/2013"}, {"body": "collectionreject would work", "d": "3/2013"}, {"body": "mansiemans need something like backbone collections implement extended funtion using somethin like reject fact already created think exclude omit function backbone collections may util many people thanks", "d": "3/2013"}, {"body": "", "d": "3/2013"}, {"body": "think rmarinleal wants method nt involve iterator function kind opposite method", "d": "3/2013"}, {"body": "exactly mansiemans think interesting native function like obviusly use filter like smagch says think exists omit develope function think something common think select query example select employees company lt gt microsoft apply backbone collections nt know wich companies permit employees nt know wich companies database buy know ca nt work microsoft common extend object see utility var filteredmodels mycollectionomit company microsoft", "d": "3/2013"}, {"body": "backbone nt create new collection iterating methods simply proxies underscore please open pull request issue accepted underscore add backbone already underscore function need choose different name closing", "d": "3/2013"}, {"body": "rmarinleal could submit pull request underscore want basically wrapper function around filter nt checked see suggested underscore community", "d": "3/2013"}, {"body": "ok let move underscore requests see people find util backbone dont implement even extended method simplicity use considerably reduced may next backbone update thanks updated", "d": "3/2013"}, {"body": "change personview template personview", "d": "3/2013"}, {"body": "take point concern personview rerendered correct use backbonesubviews plugin onrerendering parent view reattach elements child views preserving child view events view state etc work", "d": "3/2013"}, {"body": "think philfreo right idea passing similar location view using get desired behavior", "d": "3/2013"}, {"body": "thank", "d": "3/2013"}, {"body": "seen changedattributes method", "d": "3/2013"}, {"body": "nope thanks", "d": "3/2013"}, {"body": "hi jaguardev thanks issue seem like could make sense depending looking use curious sort custom objects would using assume would outside browser", "d": "3/2013"}, {"body": "going create push request time hello tgriesser thank answer browser game independent scenes scene router history logic one history object uses pull state another one uses hash third changes url fires events etc", "d": "3/2013"}, {"body": "like use several history types parallel page seems would work existing browser conventions history", "d": "3/2013"}, {"body": "braddunbar absolutly general need custom backbonehistory objects work kind custom history browser history suggestion make backbonerouter work custom backbonehistory objects", "d": "3/2013"}, {"body": "routers currently work one custom history multiple histories expand reason multiple histories one page", "d": "3/2013"}, {"body": "really like idea decoupling opens lot possibilities use clientside implementation browser server create custom history uses express instead use case make sense", "d": "3/2013"}, {"body": "would feel less hack currently modifying history prototype loading backbone", "d": "3/2013"}, {"body": "tbranyen exactly along lines thinking jaguardev might want rethink using multiple histories instead use different models custom objects handle different scenes models nt exclusively used server data", "d": "3/2013"}, {"body": "potentially sounds like fine idea bit abstract discuss absence proposed changes real world use cases pull requests really want get started send proposed pull request formalizes ideal routerhistory public interface adds tests ensure would nt break api future", "d": "3/2013"}, {"body": "hey jashkenas could come back discussion", "d": "9/2013"}, {"body": "hi yahasana thanks question every change attribute need sync remote database changes nt related unless save triggered model change event case need pick different trigger saving model form submission button click event nt model event help answer question", "d": "3/2013"}, {"body": "yup know mean want post changed fields attributes modelsave get changed fields tell true", "d": "3/2013"}, {"body": "probably need implement functionality could save attributes directly model fetch calculate diff current attributes saving", "d": "3/2013"}, {"body": "tgriesser thanks kinda original state hope backbone gives kind feature useless case truly life", "d": "3/2013"}, {"body": "come times recently ask looking sync specific attributes", "d": "3/2013"}, {"body": "form dozens models model dozen fields post fields every times heavy burden server l building survey quiz builder base amazing backbone", "d": "3/2013"}, {"body": "real perfect world model maintenance states origin previous current server state temporary state use event triggers origin state model also useful event triggers sync remote server take care state model state ignore sync state remote server expensive fields sync every changes request amazon happy count request times sync changes one request save money", "d": "3/2013"}, {"body": "please open bug ticket ask question ask mailing list irc channel instead", "d": "3/2013"}, {"body": "thanks adamschwartz fixed", "d": "3/2013"}, {"body": "tgriesser problem found grepping code overriden coworker noticed typo ui hubspot turned backbone ace several repos wrong well p", "d": "3/2013"}, {"body": "agree need get edge docs date believe big one would nt much effect unless custom sync also removing silent merged edge docs know caseywebdev also internal refactoring differences seeing", "d": "2/2013"}, {"body": "think still master", "d": "3/2013"}, {"body": "philfreo tagged next release hope capturing changelogdocumentation oversights", "d": "3/2013"}, {"body": "nt usually write changelogs release tagged things still backed revised", "d": "3/2013"}, {"body": "talked changing keep edge change log due number changes nt documented things backed revised log updated well seemed like sensible solution worked well", "d": "3/2013"}, {"body": "sorry missed let move conversation", "d": "3/2013"}, {"body": "mornin benoitnadaud ids stored field called idbis definitely use would mind providing jsfiddlejsbin illustrating problem afraid ca nt quite see problem based upon information provided", "d": "2/2013"}, {"body": "problem id attribute json nt use idattribute backbone model class fetching collection ids undefined tried add idbis attribute json use idattribute backbone model class works think bug populating id attribute nt use idattribute option", "d": "2/2013"}, {"body": "set default impossible doubt case post sample code json take look see", "d": "2/2013"}, {"body": "please open ticket asking debugging help ask mailing list irc room instead", "d": "3/2013"}, {"body": "backbone", "d": "2/2013"}, {"body": "", "d": "2/2013"}, {"body": "routesroutenavigate search thatget q trigger false thatget q \u0442\u0435\u0441\u0442 trigger false ignore encodeuricomponent thatget q trigger false work", "d": "2/2013"}, {"body": "ping braddunbar one related", "d": "3/2013"}, {"body": "perhaps though generally unicode problems urls firefox specific", "d": "3/2013"}, {"body": "hmm chrome screenshots", "d": "3/2013"}, {"body": "working router callbacks get urlencoded version unicode added test", "d": "3/2013"}, {"body": "ran test suite chrome fyi works fine headless", "d": "3/2013"}, {"body": "well fuck safari chrome despite webkits differently needs proper braddunbar urlencoding love", "d": "3/2013"}, {"body": "results tgriesser", "d": "3/2013"}, {"body": "chrome odd man firefox safari returning url segment encoded chrome decoding almost point series encoding issues ready hack around problem something along lines", "d": "3/2013"}, {"body": "yep go merging fix simply normalizes crossbrowser always decoding turning unmatched params instead sometimes empty string sometimes undefined anyone feels like better let start pr passes browsers good use cases wanting distinguish slashes etc", "d": "3/2013"}, {"body": "nt always decoding point except cases splats", "d": "3/2013"}, {"body": "ah ok see closed one cool", "d": "3/2013"}, {"body": "mderk thanks opening issue whole lot going examples determine looks like asking using attributes achieve nested relationships best bet either use properties model collection instances like docs recommend using parse change events combination thereof keep property references date alternatively could use something backbonerelational simplify things bit", "d": "3/2013"}, {"body": "yep using combination creating instance properties parent modelcollection properly reassembled would recommended course rather trying overcomplicate", "d": "3/2013"}, {"body": "let tag em close em", "d": "3/2013"}, {"body": "tgriesser wookiehangover thanks reply suppose failed clear going accomplish question update model attribute instance already initialized nt mergeupdate existing attributes rewrite right might missing something called model creation meant update attributes something like like would called could override fetch existing attribute update place return reassignment absence order lose already initialized instance need fetchupdate outside call pass instead raw data reassigned attribute another option would initial proposal", "d": "3/2013"}, {"body": "model attributes instances collections asking trouble see case inappropriate question bug tracker please ask mailing list irc channel instead", "d": "3/2013"}, {"body": "jashkenas thanks clarification question meant feature request nt see nesting could bad idea though using deep nested structures mirror nosql data backbone extensions successfully far", "d": "3/2013"}, {"body": "hi jedrichards thanks issue fact desired behavior one hottest code paths backbone deep clone attributes object significant performance difference issues around deepcloning brought several times likely something change find easier work deeply cloned attributes application feel free extend model prototype although might worth putting note", "d": "2/2013"}, {"body": "nt issue around behaviour relates behaviour moment change primitivesimple value result original model remains unchanged great expected change field resides structure nested primitives end silently poisoning model seems quite broken especially different behaviour two scenarios appreciate nt want add deep cloning expense sure reluctant add simple cloning json compatible primitives people used json operations producing safe copies constructs simple nested primitives behaviour breaks contract moment", "d": "2/2013"}, {"body": "issue really comes fact arrays objects passed reference javascript issue people often run object array exists attribute value modifying value setting back model trigger change since modifying reference attribute model would nt say broken javascript works prefer different approach best override backbone default mentioned edit think people used operations producing safe copies sure say ensures value formatted handled case object array would nt ensuring safe copy", "d": "2/2013"}, {"body": "think implies converting model something else jsoncompatible object ready transport think reasonable expect working converted object nt repercussions fact repercussions objects primitive values makes even troubling anyway worth", "d": "2/2013"}, {"body": "jedrichards think reasonable expect working converted object nt repercussions fact repercussions objects primitive values makes even troubling struggling debug problem caused exact behaviour definitely wasnt expecting backbone work way", "d": "3/2013"}, {"body": "think reasonable expect working converted object nt repercussions fact repercussions objects primitive values makes even troubling nah tgriesser right backbone working idiomatically need clone object unless going change case copy explicitly making easy others follow", "d": "3/2013"}, {"body": "backbone using purely idiomatically pass reference model object done backbone basic cloning changing primitive value result nt change model contrast objects added result reference stated could buy arguments support passing references handling cases primitives objects way good design handled differently least consistent whichever way go either cloning", "d": "3/2013"}, {"body": "jedrichards actually fair point braddunbar reason know needing shallow cloned attributes", "d": "3/2013"}, {"body": "throw cents chaplin developed method use views outperforms good margin well uses prototype delegation protect changes attributes working really well us", "d": "3/2013"}, {"body": "tgriesser people using right way reason shallow clone people overriding clone need clone leave untouched", "d": "3/2013"}, {"body": "banged head quite seems counterintuitive method named tojson would output shallow serialization model complex attributes pointers model also figured modifying data serialized tojson object affecting data model went documentation understand deep copy option modeltojson seems pass options used perhaps could configurable documentation updated happy submit pr either update docs add deep option depending direction prefer", "d": "3/2015"}, {"body": "hey mpolichette welcome thanks ticket agree could useful debugging something added directly backbone pointed bit monkey patch solution nt really way dynamically inject name constructor without using bit like creating named function expression causes memory leaks ie lt wanted could clean wrap something like solution post mentioned plugin post link extensions plugins resources wiki page nt see debugging items yet also feel free post anything think could done better library issues find using backbone nt much protocol github tickets ask application specific questions nt related project related", "d": "2/2013"}, {"body": "hi hhuuggoo looks like mentioned last item change log model change method removed delayed attribute changes longer available reason go process instantiating manually opposed instantiating collection would prevent change events firing default able listen event know models properly instantiated describe little use case event necessary individual models", "d": "2/2013"}, {"body": "mornin behrangsa thanks pointing think right cleaned logic bit added comments", "d": "2/2013"}, {"body": "thanks braddunbar", "d": "2/2013"}, {"body": "means html escaped", "d": "2/2013"}, {"body": "thanks", "d": "2/2013"}, {"body": "try redirecting question backbonejs irc stack overflow github issues backbonejs rather specific applications", "d": "2/2013"}, {"body": "methods also nt request mass createupdate seen rest api supports mass delete", "d": "2/2013"}, {"body": "seen rest apis mass delete dropping entire collection quite common actually nt seen one deletes range statement limited exposure statement impossibility certainly seen rest apis support mass createupdate maybe backbone support well really couple lines code throwing idea see people think", "d": "2/2013"}, {"body": "seems already discussions", "d": "2/2013"}, {"body": "makes sense one size fits approach plugin time", "d": "2/2013"}, {"body": "posterity sake quoting rfc meaning ifmatch method performed representation selected origin server cache possibly using vary mechanism see section exists must performed representation exist ifmatch something overloaded mean mass anything seen mass everything restful usually something like following sh mass create patch resource delete range delete delete query delete resource amp ping like discuss", "d": "2/2013"}, {"body": "seen mass createupdate apis using post put usually older apis collection agreed overloading header indicate ranges could cause problems caches conforming way seems define mini language using query string", "d": "2/2013"}, {"body": "update also happens call method model code object compromised", "d": "2/2013"}, {"body": "paratron mean case clone attributes returned deep clone array copied reference first point returning reference clone thats issue value primitive value solved issue cloning would nice keep track necessary sure solution avoid confusion maybe return clone value primitive", "d": "2/2013"}, {"body": "hi paratron definitely design model get fairly hot code path thus nt cloning model tojson hand used persisting model server besides lesser performance requirements generally assumed data may altered model tojson sent server alterations usually done data returned model get cloning necessary edit assuming meant model tojson model getjson please let know", "d": "2/2013"}, {"body": "moudy yes course meant sorry aware performance loss cause clone every value returned get way one always careful retrieved values think beginning going extend backbonemodel method short get safe returns cloned value", "d": "2/2013"}, {"body": "paratron sounds like good option another option mentioned would replace model prototype would prefer using deep cloned attributes across application js backbonemodelprototypetojson function return jsonparse jsonstringify thisattributes backbonemodelprototypeget function key var attrs jsonparse jsonstringify thisattributes return attrs key", "d": "2/2013"}, {"body": "hi joshclose version backbone underscore using", "d": "2/2013"}, {"body": "latest backbone underscore", "d": "2/2013"}, {"body": "joshclose ability use additional arguments removed underscore commit take look discussion commit", "d": "2/2013"}, {"body": "tgriesser included version though unless joshclose using version master", "d": "2/2013"}, {"body": "ah thanks missed regardless might good aware otherwise think issue think another ticket issue line since removed current backbone master", "d": "2/2013"}, {"body": "starting think turned nop", "d": "2/2013"}, {"body": "related issue", "d": "2/2013"}, {"body": "imo unambiguously called antipattern", "d": "2/2013"}, {"body": "wookiehangover agreed", "d": "2/2013"}, {"body": "reading related issues sounds like remove add context param bindings non backbone callback use recommended way using", "d": "2/2013"}, {"body": "tgriesser perhaps appeal higher power jashkenas making decision reckon would us lot good use marked deprecated docs brief explanation best avoid", "d": "2/2013"}, {"body": "joshclose normal situations able use model collection methods rely correct value situations coerced need worry using set expected value", "d": "2/2013"}, {"body": "wookiehangover would need pass param function collectionreset would set collection current object correct changed nt need supply param anymore", "d": "2/2013"}, {"body": "yes provide third argument", "d": "2/2013"}, {"body": "discussion moved", "d": "2/2013"}, {"body": "think design going updating multiple attributes use hash", "d": "2/2013"}, {"body": "well read comment method changedattributes return object containing attributes changed false changed attributes useful determining parts view need updated andor attributes need persisted server unset attributes set undefined also pass attributes object diff model determining would change current implementation lose attributes must persisted server according first sentence must return changed attributes think one incorrect definition implementation opinion correct one specification must improved implementation", "d": "2/2013"}, {"body": "josejamart thanks issue nt seen piece comments useful determining attributes need persisted server looking note appears documentation right pointing using multiple sets definition method nt useful accurate sure intended used anything changes last model state change handler update ui case needs made clearer looking related methods ticket opened nt useful getting back valid state error occurs documentation notes least current validation approach pinging braddunbar since know opinions one going close ticket since two related consolidate discussion ticket", "d": "2/2013"}, {"body": "completely new backbone bear inexperience one first backbone gotcha assumed changedattributes would relate last time queried model changed attributes rather relating last time ny change event occurred working computed values one set model may trigger another set least way implemented perspective view still kind feels like one change model eg changing vatpercentage view causes total vat price change well user necessarily presented individual changes warranting consecutiveindividual updateschanges view wrongfully expected changedattributes return changed attribute set manually well depending computed values perspective view josejamart suggestion feels intuitive changedattributes relating anything changed since last time view queried model changed attributes alternative assume would create event handlers listen changes computed vaules model would nt closely tie view model instead simply observe global change event model model tell changes occurred way worked around extending backbone model prototype method operates way josejamart suggests amyway thanks amazing product everyone involved", "d": "2/2013"}, {"body": "today test found another reason think behaviour bug design execute code model new backbonemodel name backbone modelset name backbonechange modelset name backbonechange check changedattributes better run haschanged method returns false original value name backbone value name backbonechange changedattributes returns nothing ca nt use method hascanged know need save lot problems behaviour want use methods improve number server calls intended nt unnecessary call checking model haschanged save haschanged fetch revert nt want extend local backbone add behaviours considering must library project big maybe maintain local changes library updates killing believe two heads better one library amazing want come terms two proposals solve problem first proposal think better update changed attribute set maintain always last change attribute real previous attributes sets go back attribute think difficult implement second add new attribute called originalattributes use attribute compare attributes call changedattributes haschanged thinks worth solution performance operations advantage return original version model case might better use fetch get original version think", "d": "2/2013"}, {"body": "struggling one aspect issue see several people well lots similar issues past days tell year ago functionality desire set unset one go part design modified behave way currently argument made pull request josejamart current implementation appears based deltaschanges operations example call back back value unchanged thus latest change nothing false think logic behind deltachange design probably seem realized well could grab original state instead storing take look may help ease pain attribute states nt make sense current implementation deltachange design ca nt combined operation would want make two calls one importantly would want two distinct states nt seem right anyone cares question open particular aspect writing open yet receive justification current design going submit pull request flag allow combined setunset functionality way continue work well", "d": "3/2013"}, {"body": "hi thanks posting thoughts agree bit schism think previous behavior inconsistent best probably incorrect stated behavior consistent setting existing property removes setting new property nt add vice versa personally would fine removing deleting adding attributes value like said would allow using one call simplify things overall many people use attributes somewhat differently though would agree implementation particular depend fact", "d": "3/2013"}, {"body": "braddunbar glad replied completely agree assessment likely think authors would change behave way remove use course would prevent users setting keys nt make sense nt think nt necessarily allowed either time think flag would work best nothing else stopgap would allow users camps use way need one line addition well technically existing code base submitting pull request shortly thanks shout", "d": "3/2013"}, {"body": "submitted pull request flag setunset feature hopefully spark conversation cheers", "d": "3/2013"}, {"body": "foxytasks use simple override change backbone behavior desired using override changes made set stored changedattrubtes save record fetched set default behavior add forgetchanges true option key value key value style arguments typeof key object attrs key options val else attrs key val options options silent optionssilent", "d": "11/2014"}, {"body": "hi thinkgareth backbone keeps local reference able run backbone loaded", "d": "2/2013"}, {"body": "hey braddunbar would work nicely explicit counterpart appears less libraries using something would like look pull request otherwise consider issue closed", "d": "2/2013"}, {"body": "quite sure proposing think support use case mention would mind elaborating changes would make", "d": "2/2013"}, {"body": "think thinkgareth mentioning publicly expose could access would nt work like nt required backbone explicitly used view router set dynamically later whereas necessary immediately able set would nt real effect", "d": "2/2013"}, {"body": "thought one require lot changes maybe something like snippet work around add another layer indirection slow underscore calls something like even worth", "d": "2/2013"}, {"body": "tgriesser cheers makes sense nt aware utilised immediately gsamokovarov seems quite task nt think accept slowdown main issue window place pre backbone noconflict immediately backbone script aim make underscore dependency simple jquery appreciate nt simple first sounded", "d": "2/2013"}, {"body": "thinkgareth yep jquery dependency optional wanted use backbone server another nonbrowser environment would totally possible without jquery however underscore hard dependency used initializing library would nt possible separate going go ahead close one backbone loaded since backbone keeps local reference inside closure take care making sure okay third party js environments", "d": "2/2013"}, {"body": "please see comments thanks", "d": "2/2013"}, {"body": "thanks issue josejamart bug fixed", "d": "2/2013"}, {"body": "nothing backbone problem server returned nonvalid json string", "d": "2/2013"}, {"body": "submit failing test far know works expected", "d": "2/2013"}, {"body": "right works expected", "d": "2/2013"}, {"body": "thanks opening issue turns still fact working see test case", "d": "2/2013"}, {"body": "thanks feedback appears issue lodash problem fixed", "d": "2/2013"}, {"body": "hi zoowii appears issue scoping javascript block scope create function closure whenever want save value variable scope example probably easier understand following functions passed refer value one logs value end loop create function closure around call instead handler refer closed value example could use pattern hope helps edit forgot context fixed", "d": "2/2013"}, {"body": "zoowii one comment work explains problem think following much idiomatic less error prone sorry split response thought included", "d": "2/2013"}, {"body": "update seems using router handler function works fine", "d": "2/2013"}, {"body": "hi tomasdev issues encodingdecoding hash fragment firefox difficult fix though cases work without issue history information check related issues case think due unicode fragment", "d": "2/2013"}, {"body": "diff notice longer fires custom error callbacks trigger event comment updated master", "d": "3/2013"}, {"body": "hi devbar appear docs correct thanks mponizil", "d": "3/2013"}, {"body": "ah ok fault", "d": "3/2013"}, {"body": "github issues posting questions issues relating development backbone library", "d": "2/2013"}, {"body": "use handler add event duplicate upd seems duplicates relates issues", "d": "2/2013"}, {"body": "convenient ca nt possibly good idea like saying need fetch event could wait couple seconds assuming data available", "d": "2/2013"}, {"body": "maybe could combined update event proposed fires following order event", "d": "2/2013"}, {"body": "cyberthom actually convenient would actually looking trigger function end several events like saying could wait couple seconds like saying wait end call stack trigger function matter many times called see jashkenas response end", "d": "2/2013"}, {"body": "looking get copy attributes data use", "d": "2/2013"}, {"body": "arturcharcenko see tgriesser comment garbage collection", "d": "2/2013"}, {"body": "done one things really easy implement casebycase basis said opposed simple flag simply flips especially bootstrapping even encouraged docs", "d": "2/2013"}, {"body": "hi petethepete thanks bringing think caseywebdev right though best implemented case case basis also use event set option", "d": "2/2013"}, {"body": "little nice pattern avoiding variable history", "d": "7/2015"}, {"body": "arieljake invalid event triggered collection passed invalid model callbacks object passed options modelsave ultimately ajax callback would nt make much sense context two since model validation errors emit invalid event model collection already got everything need handle use case example model collectioncreate invalid model validate true", "d": "3/2013"}, {"body": "never mind nt see validate get called model constructor", "d": "2/2013"}, {"body": "hi arturcharcenko thanks issue tried replicate issues collection models would nt garbage collected nt able jsfiddle running clicking add subview remove subview repeatedly succession looking comparison view snapshots would typically see difference either child objects later snapshots extra model objects would freed guessing garbage collection nt run yet snapshot let know missing anything", "d": "2/2013"}, {"body": "hello tgriesser tried running jsfiddle issue occurred took heap snapshot initial state clicked add subview took snapshot clicked remove subview took another snapshot selected objects allocated snapshot summary view last snapshot child objects afterwards tried clicking addremove subview ten times took snapshot repeated step objects still maybe guess right subview gets collected collection models", "d": "2/2013"}, {"body": "try switching summary left tab objects allocated comparison look new vs deleted delta snapshot see removed", "d": "2/2013"}, {"body": "tried first compared snapshot like said deleted child objects compare snapshot taken hitting add subview first time see one object deleted means collection models created clicking add subview first time removed wrong", "d": "2/2013"}, {"body": "getting results arturcharcenko somehow object dereferenced since referenced dereferenced looking happening", "d": "2/2013"}, {"body": "caseywebdev seeing seeing recent models marked cid snapshot adding removing subview multiple times using jsfiddle code leading believe nt gced yet time recent snapshot", "d": "2/2013"}, {"body": "happens force gc dev tools", "d": "2/2013"}, {"body": "still next ajax call casey pointed errorsuccess nt dereferenced guess would somewhere jquery errorsuccess handlers last ajax call referenced", "d": "2/2013"}, {"body": "override still leaky though trying narrow successfully nt seem want drop wrapped callbacks", "d": "2/2013"}, {"body": "ah grabbing clone options reset fix right", "d": "2/2013"}, {"body": "tgriesser confirmed good work detective pushing fix", "d": "2/2013"}, {"body": "thanks arturcharcenko persistent one", "d": "2/2013"}, {"body": "hmm step right direction still seeing collection gc", "d": "2/2013"}, {"body": "nope say thing", "d": "2/2013"}, {"body": "irc", "d": "2/2013"}, {"body": "great fix caseywebdev maybe add test", "d": "2/2013"}, {"body": "caseywebdev thought circular references gced fine patch way fix cc braddunbar", "d": "2/2013"}, {"body": "sure could test garbage collection anyone else know tgriesser still bugging see simplified version leak take heap snapshot search notice still referenced interesting functions referenced object loop better way", "d": "2/2013"}, {"body": "caseywebdev reading bit gc works looks like nt sure way trigger full garbage collection round takes rounds remove everything garbage collected since everything circular reference eventually get taken care nt think need make code uglier account indeed leak would see reference count continuing climb subsequent snapshots child objects added removed nt case eventually nt available gced say let revert last two commits", "d": "2/2013"}, {"body": "yea whole thing bit fishy blaming moving", "d": "2/2013"}, {"body": "callbacks see etc", "d": "2/2013"}, {"body": "provide example use case", "d": "2/2013"}, {"body": "yes rendering newly added models could use add dom realize could use event figure last model added seems bit hackish", "d": "2/2013"}, {"body": "great stuff js onadd function model thisnewmodels thisnewmodels thisnewmodelspush thisrendermodel model thisappendnewmodelscall appendnewmodels debounce function elappend thisnewmodels thisnewmodels", "d": "2/2013"}, {"body": "revive dying thread opened relates problem using events might added end debounce time realtime syncing collections tabs debounce also keeping track indexes get difficult changes proposed small hopefully resolve issue many others raised topic", "d": "2/2015"}, {"body": "hello cbtcoder github issues issues features related development backbonejs project rather application specific code questions probably try stackoverflow documentcloud irc help questions also looks like may need set properties documented section application served root url domain sure tell history root really option", "d": "2/2013"}, {"body": "happy submit patch want make sure understanding desired behavior first", "d": "2/2013"}, {"body": "hi genexp actually currently supported see test", "d": "2/2013"}, {"body": "ahh see sorry misunderstood", "d": "2/2013"}, {"body": "submitting patch", "d": "2/2013"}, {"body": "hi genexp reasons submitting patch english good unfamiliar git github still happy svn think achieve high quality official documentation think important maintained backbones main author knows best internals possible side effects style writing wrong short checking possibly ugly patch would take time jashkenas writing", "d": "2/2013"}, {"body": "created pull request update documentation first pull request project might done something wrong", "d": "2/2013"}, {"body": "merged", "d": "3/2013"}, {"body": "hi hjortureh plans though nt stop picking choosing want use check precedent", "d": "2/2013"}, {"body": "aware least one project attempts help", "d": "2/2013"}, {"body": "thats good know including whole codebase right feels bit unnecessary add size page parts never used thanks answers", "d": "2/2013"}, {"body": "actually appear option closing", "d": "2/2013"}, {"body": "similar things proposed specifically view hash see general consensus javascript inheritance nt work way ie router nt automagically merging two hashes default pass via options hash override existing alternative solution would router allow routes defined function way lot model view properties bindroutes called like coffeescript routera backbonerouterextend routes gt help help help search query search searchkiwis search queryp page search routerb routeraextend routes gt extend super tab tabnumber loadtab sort sortby sorttable sortfirstname new routera consolelog keys help search query search queryp page new routerb consolelog keys help search query search queryp page tab tabnumber sort sortby new routerb routes foo bar consolelog keys foo passing routes overrides matter", "d": "2/2013"}, {"body": "would acceptable solution well plans", "d": "2/2013"}, {"body": "open pull wink", "d": "2/2013"}, {"body": "merged", "d": "3/2013"}, {"body": "fixed thanks keeyip", "d": "2/2013"}, {"body": "right never need default", "d": "2/2013"}, {"body": "yeah wanted confirm thank", "d": "2/2013"}, {"body": "duplicate sorta basically nt want pollute api names need easy though", "d": "2/2013"}, {"body": "necessary called model context initialization changes applied comparing model mind thinking really going", "d": "2/2013"}, {"body": "ran problem yesterday planning reporting bug today seems johtso beat currently collectionupdate flow existing item updated new temporary model created thrown away manipulate source object parse method model overridden user case codebase update nested models collections source object via parse responsecomments thisget commentsco update responsecomments delete comments object wontt set alongside commentscol delete responsecomments scenario source comments object would deleted passed existing model sure move things around like set instead parse unexpected behavior backbones docs state parse method function passed raw response object return attributes hash set model nt mention source object modified parse accommodate scenarios like new collection update code running parse source passing existing object", "d": "2/2013"}, {"body": "pull requests elegantly solve issue finding preexisting model collection without initializing new one first gladly welcomed", "d": "2/2013"}, {"body": "fishmongr use altering original object better results", "d": "2/2013"}, {"body": "use fishmongr pattern well would nt expected problem caseywebdev perhaps done backbone level", "d": "2/2013"}, {"body": "philfreo yes actually looking solution busy tonight open pr soon", "d": "2/2013"}, {"body": "right problem stems fact parsing validation require existing model experimented bit behaviour stop new models created matching model found collection calling raw attributes model passed see issue raw attributes parsed way see changed would validation parsing linked creation model", "d": "2/2013"}, {"body": "way see changed would validation parsing linked creation model nt think going able guarantee people expect always corresponding model context closing", "d": "2/2013"}, {"body": "fyi using response clone response custom parse method may work complicated nested deserialization scenarios since shallow clone modifications deeper response object still associated original object even passing shallow clone line case app decided stick collectionreset instead dealing worms opened unfortunately nt time right delve submitting patch circle back time permits big release", "d": "2/2013"}, {"body": "fixed soon internal refactoring feb pm mark ledford notifications githubcom wrote fyi using response clone response custom parse method may work complicated nested deserialization scenarios since shallow clone modifications deeper response object still associated original object even passing shallow clone line case app decided stick collectionreset instead dealing worms opened unfortunately nt time right delve submitting patch circle back time permits big release reply email directly view github", "d": "2/2013"}, {"body": "\u00ba \u00ba\u30ce great", "d": "2/2013"}, {"body": "hi switzer believe backbone relies usually decision whatever ajax library using likely culprit also jquery recently started treating json responses valid errors instance endpoint returns empty response jquery consider failed probably likely case", "d": "2/2013"}, {"body": "gon na close since choice fire based ajax response ajax library choice backbone braddunbar says", "d": "2/2013"}, {"body": "searching jquery error thread comes top ten results add comment jquery adheres http protocol strict way response contains empty body cause jquery consider request error wants parse something nothing trying find justification behavior jquery nt able either api return body api return", "d": "2/2017"}, {"body": "asking would require making global variable also definitely always element looking probably best way avoid complications", "d": "2/2013"}, {"body": "yup half time callback even interested element", "d": "2/2013"}, {"body": "hi think would best add either resources section wiki languages section tutorials blog posts example sites wiki thanks", "d": "2/2013"}, {"body": "found problem problem jquerymobile property pushstateenabled set router working fine", "d": "2/2013"}, {"body": "fair sort comparator return true false", "d": "2/2013"}, {"body": "interesting maybe backbone care since chrome firefox work closing ticket since returning works", "d": "2/2013"}, {"body": "hi rpflorence reason nt want use string flavors", "d": "2/2013"}, {"body": "protip string come extra sort optimizations ca nt made function wink", "d": "2/2013"}, {"body": "function overridden callback", "d": "2/2013"}, {"body": "etagwerker looks like answer issue since jquery expecting json response error sent anything valid json response body including heard empty response see", "d": "2/2013"}, {"body": "caseywebdev nt overriden tgriesser thank solution return valid response changed line backend started working", "d": "2/2013"}, {"body": "easy implement casebycase basis nt see good fit core especially given inefficient sorting every change", "d": "2/2013"}, {"body": "see", "d": "2/2013"}, {"body": "thank pointing respond jashkenas concerns many complex views models come go events need bound unbound could function called delegate listeners current declarative syntax nt much facility dealing readding portion declared events needed could also accepts optional target argument undelegate events target could allow passed optional target would delegate events target thoughts concerns another cool idea following javascript listen thison event handler thison handler event handler thislistento property event handler thislistento property handler thislistento property handler event property handler nt exist becomes another event", "d": "2/2013"}, {"body": "see", "d": "2/2013"}, {"body": "think fine", "d": "2/2013"}, {"body": "agree philfreo", "d": "2/2013"}, {"body": "closing see", "d": "2/2013"}, {"body": "maybe something like response event", "d": "1/2013"}, {"body": "would event work called every request regardless successerror request model xhr options model collection started request server otherwise could trigger event success handler", "d": "1/2013"}, {"body": "well request event wo nt work nt trigger error dilemma collection messages initially fetch messages success fetch create new view display messages init view want attach trigger whenever new messages added collection successfully saved db updates list messages could use add event triggered data saved db chose use sync event realized right view initialized success function fetch sync event firing make sense", "d": "1/2013"}, {"body": "sounds like probably want add options creating new model add event nt fired syncs database pass wait true like wait server adding new model collection", "d": "1/2013"}, {"body": "experience event nt fire database sync", "d": "1/2013"}, {"body": "method collection time assumed using would listen add rather", "d": "1/2013"}, {"body": "wow nt feel dumb", "d": "2/2013"}, {"body": "reason never knew create method existed", "d": "2/2013"}, {"body": "init collection ton add function msg opt", "d": "2/2013"}, {"body": "glad got sorted", "d": "2/2013"}, {"body": "hold bumps dependency", "d": "2/2013"}, {"body": "reason noticed backbone docs defers underscore collection method docs findwhere documented", "d": "2/2013"}, {"body": "tgriesser nope dependency bump look change mirrors underscore implementation one would expect", "d": "2/2013"}, {"body": "mistake caseywebdev looked first", "d": "2/2013"}, {"body": "looks like findwhere missing backbonecollection", "d": "4/2013"}, {"body": "globexdesigns listed separately underscore collection functions", "d": "4/2013"}, {"body": "var collection new backbonecollection consolelog collectionfindwhere returns undefined", "d": "4/2013"}, {"body": "globexdesigns sure running backbone code fiddle run check console see", "d": "4/2013"}, {"body": "nt say findwhere sincerely joseph chapman managing director amp principal developer creatify limited apr kim joar bekkelund notifications githubcom wrote globexdesigns sure running backbone code fiddle run check console see function attrs return thiswhere attrs true reply email directly view github", "d": "4/2013"}, {"body": "ok maybe condition occurring code causing function get undefined take look get back based earlier comments seems one happened", "d": "4/2013"}, {"body": "yeah collectionfindwhere nt seem work used findwhere collectionmodels function", "d": "6/2013"}, {"body": "yup using nonissue", "d": "6/2013"}, {"body": "hi vizjerai prior cleared change however preserved next change reflects changes last change set allows us find attribute changed last unrelated note change outcome case would discourage use altogether edit forgot add code", "d": "1/2013"}, {"body": "mornin dhekke thanks pointing nt think action backbone take though deal function arguments case extra wrapper function pretty standard pattern often create separate handler think cleaner sometimes really adding bit indirection", "d": "1/2013"}, {"body": "braddunbar yeah imagined nt worthy patch thanks reply", "d": "1/2013"}, {"body": "hi bodokaiser looks like use fields set defaults use need clear extraneous attributes use case would cause large breaking change fairly small use case well leave way accomplish current functionality provided think probably leave", "d": "1/2013"}, {"body": "apologize advance dense", "d": "1/2013"}, {"body": "hey jrreed logic looking view configure private method called view constructor gets extended properties way around time guaranteed equal nt set", "d": "1/2013"}, {"body": "hey jrreed thanks pointing definitely correct arguments changed passed generally matches backbone constructors call think likely stay way therefore use need defaults", "d": "1/2013"}, {"body": "behavior fully reflect stated view constructor documentation compound objects fully copied uses underscorejs recursive means something like js scopemyview backboneviewextend attributes datafoo foo databar bar injected element", "d": "9/2013"}, {"body": "hey jseto correct underscore nt deep merge objects number reasons see jashkenasunderscore background good workaround might merge attributes view", "d": "9/2013"}, {"body": "found solution problem sure work worked scopemyview attributes datafoo foo", "d": "6/2016"}, {"body": "seems sideeffect change behavior jqueryajax jquery changelog prior ajax call expected return data type json jsonp would consider return value empty string success case return null success handler promise empty string returned json data considered malformed json throw error use error handler catch cases wondering case handled default within backbone sync since empty response delete pretty common", "d": "1/2013"}, {"body": "hi ewang thanks pointing however nt think action backbone take relies determine success failure issue lies jquery empty response fact invalid would appear server change response case", "d": "1/2013"}, {"body": "think reopened bug regardless underlying library used backboneajax response server means operation case destroy success execute given callbacks called case destroy succeeded failed case server responds destruction success forcing developers change backend deal unexpected frontend implementation decision", "d": "4/2013"}, {"body": "regardless underlying library used backboneajax response server means operation case destroy success nt server returns http status indicates http success however response data interpreted json server return json failure next logical level http transport words http status indicates success placed additional constraints type response expect actual data server returning header says response body empty string returning invalid json truly content appropriate http response would although cases may generally may blind delete request server care response code provides option caller add handlers via promises could make use information returned additional validation show status messages confirming server action code nt care value returned server returns unpredictably inconsistent responses eg html json plain text depending circumstances unable correct server code use interpretation response based string returned ignore completely", "d": "7/2013"}, {"body": "since issue today research proper way handle successful delete server http code include descriptive response message body http code require response body switched response successful delete everything handled jquery backbone properly issue backbone http response body defined textplain servers default backbone expecting json http bit opinionated", "d": "10/2013"}, {"body": "backbone jquery doubt requesting applicationjson header bit opinionated return textplain applicationjson backbone behaving correctly according http standards informational message serialized json", "d": "10/2013"}, {"body": "sorry thought saw request header said accepted json text lateearly stepping code hours hammered oct pm ryan leckey notifications githubcom wrote backbone jquery doubt requesting applicationjson accept header bit opinionated return textplain applicationjson backbone behaving correctly according http standards informational message serialized json reply email directly view github", "d": "10/2013"}, {"body": "mornin would love fix errors experiencing however afraid need details source error reproduce please provide bit background perhaps sample code illustrates problem reopen investigation thanks", "d": "1/2013"}, {"body": "error like backbone version project fix like temporarily", "d": "1/2013"}, {"body": "happens android native browser want reproduce use android mobile open page backbone click browser back next click browser forward backbonehistorylocation empty object", "d": "1/2013"}, {"body": "fix problem", "d": "6/2013"}, {"body": "ticket reopened reproduced consistently leaving backbone site pressing back button following code used reproduce load page click google link back code uploaded testing click google link back button android phone wwwgooglecom windowonerror function message url linenumber alert message url linenumber return true function var router backbonerouterextend routes home home function alert home page new router backbonehistorystart pushstate true implemented silmilar fix overidding popstate refreshing page things cleared edit tested android native browser works fine chrome phone", "d": "6/2013"}, {"body": "also anyone needs fix need changing core add code window popstate function backbonehistorylocationpathname windowlocation windowlocationhref", "d": "6/2013"}, {"body": "afraid nt understand fix working nt android device test nt match method available assigning suddenly causes fix pretty nasty thing zaptree feel free send pull request best suggested fix test case happy merge", "d": "10/2013"}, {"body": "fix put really refreshing page fix problem way detect problem refresh page nt feel something worthy putting core really sure problem even happens", "d": "10/2013"}, {"body": "chained statement like writing javascript backboneon test function alert hi return false backboneon test function alert hello backbonetrigger test chained nature first statement prevent event bound backbone object prevent event executed outside scope sure trying achieve perhaps look fits needs", "d": "1/2013"}, {"body": "jquery events work backbone either use appropriate use flag", "d": "1/2013"}, {"body": "want prevent propagation would need use like", "d": "1/2013"}, {"body": "jackwanders true jquery events backbone completely different systems example throw exception", "d": "1/2013"}, {"body": "jackwanders stoppropagation nt supported feature backbone events applies jquery events", "d": "1/2013"}, {"body": "mistake guess looked console tried", "d": "1/2013"}, {"body": "chaining event handlers like want bubble events view hierarchy plugin distinction jquery backbone events less prone confusion", "d": "1/2013"}, {"body": "less prone confusion get worry confusion wink", "d": "1/2013"}, {"body": "ajaxsolutions thanks opening issue mentioned vincentbriglia backbone events chainable interface create events chained syntax handler attached event exists independently handlers convention established jquery way proxy combine calls concepts arise standard dom events jquery wrapping normalizing since backbone events nt associated dom exception delegateevents views reimplementing functionality nt make sense need something like listen dgbeck plugin going close since understanding interpretation issue backboneevents different jquery dom events", "d": "1/2013"}, {"body": "problem completed sencha project library provides application events stopped returning false expecting backbone", "d": "1/2013"}, {"body": "check plugin composite keys lets specify array attributes use attributes joined native composite key support turned several times tried get wink going close", "d": "1/2013"}, {"body": "forget use new solved", "d": "1/2013"}, {"body": "mornin koglerjs thanks posting looks like would appropriate plugins extensions wiki though add convenience", "d": "1/2013"}, {"body": "removed slow easy duplicate need", "d": "1/2013"}, {"body": "hi iros reproduce appears fixed master thanks reporting", "d": "1/2013"}, {"body": "oh thank looked master", "d": "1/2013"}, {"body": "iros gotchu covered wink", "d": "1/2013"}, {"body": "done something similar several occasions think knowledge diff current state previously synced state could nice addition modelscollections", "d": "1/2013"}, {"body": "another option would provide function function provide access last sync attributes similar works developers could implement functions", "d": "1/2013"}, {"body": "good idea attempts make work extension take look backbonememento backboneactasmementoable gives even richer set features describing guess suggesting core backbone feature", "d": "3/2013"}, {"body": "yes feel adding core backbonemodel make sense given existence", "d": "3/2013"}, {"body": "see interested giving try please let know think shown model makes sense revert wonder want call set attributes instead gives least two benefits keeps track attributes changed triggers change event collection thinking could cache original models similar fashion savedattributes eg syncdmodels revert could call thisreset thissyncdmodels", "d": "3/2013"}, {"body": "think implementations could left user sure may want use would want silently revert attributes previous state perhaps fire different event altogether collection nt know would want add methods user wants revert model collection access model directly use implemented", "d": "3/2013"}, {"body": "yes davidinjc proposing essentially feature left comment pull request regarding saved attributes object updated", "d": "3/2013"}, {"body": "noticed pull request davidinjc curious use case feature trolling anything would like understand use case using instead relying local copy data presented scenario would seem make feature unwise thank advance time", "d": "3/2013"}, {"body": "jackwanders response nt danger destroying valid data take precedence ajax call would seem like huge usability bug end user experience frustrations certain social media company mobile app drives crazy makes sense like involved server process takes possibly seconds longer basically provide features nt idiot stale data", "d": "3/2013"}, {"body": "nt follow first concern seem concerned contents could diverge model state persistence layer localstorage database etc concern exists even without existence extend example scenario following could easily occur fetch server x server updated something else x b make different changes none b b overwrite server without every knowing changed working environment model persisted state change user utilizing clientside responsibility developer prevent data clobbering existence nonexistence create affect scenario", "d": "3/2013"}, {"body": "jackwanders right one way prevent might implement kind optimistic locking scheme", "d": "3/2013"}, {"body": "jackwanders right totally halfbaked train thought somewhere along lines right user wants revert must unless handrolling something looking feature sort alternative point nt would best scenarios assume soon data server dirty davidinjc thinking think jackwanders pointed entirely user cases ensure nt clobber data thanks guys think page agree feature would valuable worth smile considered storing absolute delta original instead copy original largest delta ever grow size original plus added fields think scenarios would considerably smaller storing copy entire original state basically nothing would stored sync change occurs original value would stored absolute delta subsequent change occurs attribute would stored want original would make simply thoughts", "d": "3/2013"}, {"body": "agree jackwanders conflict resolution backbone concern could nt option pass nt want change events fired events would completely silent adding dirty state makes haschanged changedattributes much useful could call whenever want instead change event", "d": "3/2013"}, {"body": "think something belongs application backbonejs although give primitives make easy build applications able meaningfully use diff current value last synced value applications never difference two eg always use applications able meaningfully diff two clientside another user may changed shared object server meantime backbone nt shoehorning app particular one paths instead listen stash references previous versions attributes see fit", "d": "3/2013"}, {"body": "yep synced state app code", "d": "3/2013"}, {"body": "fair enough thanks input jashkenas", "d": "3/2013"}, {"body": "look way client renders html form backed backbone model pressing submit button formmodel saved order benefit buildin model validation app execute modified value want take advantage http patch method submit changed attributes currently buildin way retrieving changed values model since returns change since last call also disagree problem concurrent modifications part discussion concurrency issues handled server side solution extend model listen event suggested jashkenas still buildin functionality would nice", "d": "4/2013"}, {"body": "giving two cents pattern believe easier achieve passing full clone like sandbox model whatever view presents mechnisms make changes often use pattern promises cancellation rejects returned promise effectively cancelling changes without revert ops resolving returned promise apply partial full overwrite model", "d": "6/2018"}, {"body": "backbone designed extendable view extend remove method call super thing", "d": "1/2013"}, {"body": "hi check precedent since easy provide lifecycle events views backbone opts let user define", "d": "1/2013"}, {"body": "yea nice event parity among viewscollectionsmodels", "d": "1/2013"}, {"body": "hi nordhagen separate event event event triggered client side failed validation would need separate handler functions events used two different purposes answer question event use ca nt passed along function expecting event signature let know nt clear things", "d": "2/2013"}, {"body": "tgriesser please read initial message described separate event handlers error invalid know difference problem get invalid event fire failed validations instead models fire error events whenever return anything null validate method", "d": "2/2013"}, {"body": "nordhagen reproduce case jsfiddlecodepen see cause", "d": "2/2013"}, {"body": "nordhagen using latest backbone release", "d": "2/2013"}, {"body": "awkward wrote example locally first using copy backbone versjon ran errorhandler called even validation failure pasted jsbin nd added backbone invalidhandler works guess fault version", "d": "2/2013"}, {"body": "sorry wrong link", "d": "2/2013"}, {"body": "version comfirms issue", "d": "2/2013"}, {"body": "tried adding success callback confirmed success callback getting called success error callback getting called validation error", "d": "1/2013"}, {"body": "change caseywebdev explains", "d": "1/2013"}, {"body": "yup check reasoning closing", "d": "1/2013"}, {"body": "online documentation still wrong", "d": "1/2013"}, {"body": "thanks pointing updated remove line mentioned", "d": "1/2013"}, {"body": "hope replaced need check modelvalidationerror afterwards ca nt get far backbone without needing know", "d": "1/2013"}, {"body": "thanks fixing docs messed time well", "d": "1/2013"}, {"body": "explained validation section line item docs model section mbhnyc sure thing", "d": "1/2013"}, {"body": "hi gugu thanks asking understand reasons changes backbone source written literate style meant improve readability comments standalone document nt think jsdoc comments included time soon", "d": "1/2013"}, {"body": "hi certain semantics describing triggering events certainly asynchronous like also pass handlers arguments event call later reason nt work elaborate use case", "d": "1/2013"}, {"body": "braddunbar suggest work one object receives use case user action view fires event one objects interested application level perform async operations event gets triggered async operations finish view continue executing rest code one async call fail get rejected view must proceed", "d": "2/2013"}, {"body": "something similar app single event allows cancellation implement include empty array one event arguments handlers push promise onto array event triggered array proceeding felt kind dirty far held well overlook wonkiness", "d": "2/2013"}, {"body": "sounds like something custom app going go wookiehangover answer close one please let us know come different solution", "d": "2/2013"}, {"body": "hi thanks pointing however using check handler presence every iteration trigger would prohibitively expensive keeping callback list immutable called keeps things simple straightforward removing adding handler iteration affect current callback list", "d": "1/2013"}, {"body": "looks like problem overwriting native image constructor call get infinite recursion try code instead", "d": "1/2013"}, {"body": "works", "d": "1/2013"}, {"body": "mornin steverandy tell comparator works whether bound current instance would mind providing sample code illustrating problem", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "thanks example steverandy running see indeed problem caused instance bound comparator issue comparators used differently based arity function using function bind function arity length preserved however coffeescript targets instead knowledge preserve function arity sure action backbone take least know cause work around", "d": "1/2013"}, {"body": "thanks braddunbar nt expose sort sortby directly feels clear", "d": "1/2013"}, {"body": "believe exposed already provides niceties like triggering event using provided comparator", "d": "1/2013"}, {"body": "question even bind context using", "d": "1/2013"}, {"body": "nt think recommended way using coffeescript use fat arrow default way define function used concept", "d": "1/2013"}, {"body": "braddunbar good run covered shim believe could covered via creative use good use case helps fallbacks support cases covered way another one limitation native bound functions property shimmed ones", "d": "1/2013"}, {"body": "thanks jdalton good reference material", "d": "1/2013"}, {"body": "think noop backbone use case easily solved skinny arrow", "d": "2/2013"}, {"body": "real solution example need fat arrow need reference variables collection instance inside comparator method", "d": "9/2013"}, {"body": "gucki nt need fat arrow context set collection instance call comparator get need collection instance", "d": "9/2013"}, {"body": "good morning directfuelinjection sure goal want create empty model instead using response return model parse expected return response object even object empty hope helps", "d": "1/2013"}, {"body": "mean parse return false model destroyed", "d": "1/2013"}, {"body": "destroyed nt quite follow mean model trigger event returns", "d": "1/2013"}, {"body": "something like", "d": "1/2013"}, {"body": "nt think need model created destroy", "d": "1/2013"}, {"body": "ok im developing dynamic page loading project im looking solution load collection fetch method sending ajax parameters url json responce looks like", "d": "1/2013"}, {"body": "current solution thisloaddynamic extend thiscollectionmodelprototype parse function responce thiscollectionupdate responcerows silent true thiscollectionviewcntpages responcetotal know horrible", "d": "1/2013"}, {"body": "well expects return array response objects something like", "d": "1/2013"}, {"body": "oh forgot thanks dude made day", "d": "1/2013"}, {"body": "glad could help", "d": "1/2013"}, {"body": "hi abritinthebay problem uses unparsed version collection compare models longer discussion matter believe issue describing would mind directing comments consolidate comments issue going close duplicate please let know think incorrect cause reopen", "d": "1/2013"}, {"body": "correct duplicate issue certainly extremely frustrating one might add makes update functionality basically useless nt perfectly formatted response format", "d": "1/2013"}, {"body": "abritinthebay look fix", "d": "1/2013"}, {"body": "use bind success error callbacks", "d": "1/2013"}, {"body": "sorry sound like workaround solution think reason stand common standard set jquery", "d": "1/2013"}, {"body": "hi srfrnk good deal discussion successerror callbacks going friends please direct comments callback signature thanks", "d": "1/2013"}, {"body": "greywolve event looking invalid updated master branch ghpages pushed fix documentation accurate please check let know anything nt look correct", "d": "1/2013"}, {"body": "two issues event name longer longer calls validate default changes since explicitly pass options hash setting validate default see jsfiddle also ps paste code github write new line backticks write code end block backticks see help page", "d": "1/2013"}, {"body": "ahh thanks tip completely forgot code rendering p thank", "d": "1/2013"}, {"body": "hi would recommend use events purpose think edit meant event", "d": "1/2013"}, {"body": "think swell idea braddunbar", "d": "1/2013"}, {"body": "thanks caseywebdev let us know nt work", "d": "1/2013"}, {"body": "braddunbar caseywebdev idea decouple two parts view able get collection state clean collection aware using signals many cases done way order actions matters agree view listen request sync signals request signal might sent collection passed view therefore view idea collection fetching consider example view gets arbitrary collection collection either fetched fetching unfetched passed view tl dr see example example signals work example view gets already fetched emty collection signals also work example important signals work view assume collectionlength unfetched view also assume given collection unfetched state state want decouple collection view view able know collection state thing goes model", "d": "1/2013"}, {"body": "ca nt collection sending view set flag collection view access also wait fire event", "d": "1/2013"}, {"body": "caseywebdev request might aborted two requests might get sent solution would connect deferred xhr javascript collectionon request function model xhr thisfetching true xhrfail function thisfetching false bind sync error function thisfetching false think might handy built hand every enhancement like got bb codebase would bloated", "d": "1/2013"}, {"body": "every enhancement like got bb codebase would bloated", "d": "1/2013"}, {"body": "think less bloating approach many different ways might want handle concurrent requests backbone provides primitives need handle gets way", "d": "1/2013"}, {"body": "might want take look writing finitestate machine purposes chaplinjs one pretty easy replicate also ifandelsemachinajs see blog post may suit specific use case", "d": "1/2013"}, {"body": "hi sydcanem see might want times views encapsulating small portion ui listening events outside something generally want need necessary always", "d": "1/2013"}, {"body": "callbacks nt called specific context new signature also best bet use", "d": "1/2013"}, {"body": "called specific context backbone documentation options says options success error callbacks jquery request options jqueryajax documentation context says object made context ajaxrelated callbacks default context object represents ajax settings used call ajaxsettings merged settings passed ajax intentional deviation", "d": "1/2013"}, {"body": "side effect backbone trying agnostic method persistence choosing", "d": "1/2013"}, {"body": "constructor also expects first argument object passing instance would make sense would also fix attribute inheritance effect seeing", "d": "1/2013"}, {"body": "ah would explain change get introduced", "d": "1/2013"}, {"body": "passing events options hash added", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "workaround like mentioned personally suggest passing option everywhere really need making configuration option backbone nt make sense people expect backbone behave one consistant way", "d": "1/2013"}, {"body": "made sense wherein nt backbone configuration option user defined model type behavior model type ultimately backbone developer tool nt make sense introducing unnecessary tedium developer whether tedium consistent perceive set already verbose workaround legacy browsers supporting property intrinsic gettersetter functions adding noise set invocations validation probably ever going game plan consuming backbone workaround provided hopefully work although might change something like clarity debugging thanks", "d": "1/2013"}, {"body": "check discussion change made", "d": "1/2013"}, {"body": "good history still modellevel optin else heeded request make optout major breaking change pretty severe certainly universally ideal validation enabled behaviors manual type checking javascript sorely lacks automatically thus uses validation default appropriate", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "know issue closed wanted follow thought sleeping perhaps consistency sought related fact backbone would cancel set action raise event continue forward even clobbering previous statement think design flaw programming flow similar vbscript error resume next command fails especially something validation succeed reversed event inappropriate actually error situation thrown flavors javascript support try catch convention sure another thread somewhere discusses trycatch used event raised instead doubtful practicalities using event handling conventions also concerned explicitly passing validate true set nt throw exception validation failure nt make sense would handled context locally scoped catch block try make everyone happy likely validation happen times opted validate function defined model result default validation raise event currently implemented validate true option passed set result failed validation throw error correct convention developers would use explicit validate true wrap try catch eventhandled code used legacy default validation behavior continue work well plus validation tracking needed nt need flow interruption debugger logging developers could use approaches trycatch critical flow control event handling", "d": "1/2013"}, {"body": "hi af thanks issue looks like dropping latest zepto build fixes router related functions element creation syntax supported tests failing pinging madrobby mislav see tests would help reveal incompatibilities jquery event binding api next official release rc cut update test library", "d": "2/2013"}, {"body": "zepto event binding api compatible jquery exception binding custom data nt supported", "d": "2/2013"}, {"body": "mislav backbone nt binding custom data zepto support delegated events syntax", "d": "2/2013"}, {"body": "yep supported", "d": "2/2013"}, {"body": "problem router syntax solved snippet javascript replace function href var link documentcreateelement linkhref href able get test working fix however event delegation ca nt seem get working believe incompatibility zepto jquery", "d": "3/2013"}, {"body": "also fix provide function el changing since zepto nt support selector", "d": "3/2013"}, {"body": "zepto please test backbone report project bugs find thanks", "d": "3/2013"}, {"body": "used validated tests tests morning would submit pull request currently one open also unable fix delegateevents undelegateevents tests", "d": "3/2013"}, {"body": "arhea heads work different branches make make multiple pull requests different branches master take look tests", "d": "3/2013"}, {"body": "ah yeah looked right posted next time", "d": "3/2013"}, {"body": "think actually going remove zepto tests including given never looked historically promises made said anyone wants send pull requests specific zepto compatibility aok try keep dependency small possible general", "d": "3/2013"}, {"body": "jorgenfb going close nt seem common problem least backbone users nt run months open issue try stack overflow freenode irc specific answer android question", "d": "3/2013"}, {"body": "experiencing problem android based phones workaround", "d": "4/2013"}, {"body": "workaround replace updatehash function one checks user using android browser chrome make sure replace false create extra history item browser chrome browser best possible solution could come javascript var oldupdatehash backbonehistoryprototypeupdatehash var nua navigatoruseragenttolowercase var isandroid nuaindexof gt amp amp nuaindexof android gt amp amp nuaindexof applewebkit gt amp amp nuaindexof chrome gt replace default updatehash function backbonehistoryprototypeupdatehash function location fragment replace", "d": "4/2013"}, {"body": "thanks jorgenfb used solution added android devices also use history without pushstate android devices supports pushstate", "d": "4/2013"}, {"body": "different making view first place elements removed document retained decide destroy view connection document view scheduled gc", "d": "1/2013"}, {"body": "sure understood tim destroy view called hopes would everything remove elements allow memory freed retains link dom tree wo nt gced specifically telling change solves eg via ok storing instance came surprise also would hold old removed dom tree", "d": "1/2013"}, {"body": "would destroy view assuming nothing else retains reference", "d": "1/2013"}, {"body": "itsuryev removed dom jquery view calling retain reference detached dom element whole listview object tree gced long reference listview cause leak js engine using referencing counting afaik", "d": "1/2013"}, {"body": "wyuenho sample complete shows problem tested recent chrome jquery indeed removed element dom view still pointers tree effectively prevents tree gced saving link subview expected view save link removed element tree really really boils question right way remove subview memory would correctly freed original thought seems correct answer confirm intended", "d": "1/2013"}, {"body": "cleaned code removed everything irrelevant key line comment line links wo nt get gced uncomment number check heap moral story nt delete objects even removed dom may still hold useful information detach object tree clean event handlers", "d": "1/2013"}, {"body": "nt get saying fact maintains tree leak build beyond could patch call", "d": "1/2013"}, {"body": "thank saving link detached tree seems feature bug find strange worth fixing wyuenho argument also solid may want access detached element tbranyen leak intended seems intended well thank time case closed", "d": "1/2013"}, {"body": "nt want change vendor code always something like meantime", "d": "3/2013"}, {"body": "bingo yohsuzuki got", "d": "3/2013"}, {"body": "listento stoplistening settled certain way among many proposed solutions see clean event bindings attached specific view none solutions clean one thing sure share love backbone loose ends work aroundish feel pairing two symmetrical sides inversion control certain structural elegance think nature beast little complex simplicity old api", "d": "1/2013"}, {"body": "actually thought either check specific flag trigger ensure view still let event system listen destroy event unsubscribing however short read issue linked think right currently better idea lets see develop maybe", "d": "1/2013"}, {"body": "", "d": "4/2013"}, {"body": "imagine like idea course present set challenges may make worth backbone directly specifically lot scenarios marionette provide event method difference executed tends important making decision call onchange method model change event called example may consequences call onchange triggering change event someone might say want called event reason way around run many times marionette often versions events marionette also times return value method used functionality example close event onbeforeclose method call whenever call marionette view instance method view close return value close though say nt think could done pointing challenges run personally would love see eventstrigger always call method version event code remove marionette always makes happy", "d": "1/2013"}, {"body": "another complexity experienced underscoreasfirstcharacter sometimes always used convention private methods objects love feature marionette find many happy occasions use", "d": "1/2013"}, {"body": "agree think full solution quite complex implemented backbone simple solution current version suggest adding something like add function similar functions accordingly leave function current implementation way think knowing item added even silent flag proxy add method would something like last resort", "d": "1/2013"}, {"body": "event handlers interdependencies ca nt control order event handlers", "d": "1/2013"}, {"body": "wyuenho completely unrelated extending collection way knowing model addedremovedetc seems way around proxy relevant collection functions", "d": "1/2013"}, {"body": "wo nt something like work", "d": "1/2013"}, {"body": "would work unless passed options", "d": "1/2013"}, {"body": "talk removing see seems another reason remove since nt necessarily want suppress handlers time", "d": "1/2013"}, {"body": "issue referenced talks model set specifically main concern regarding collection functions course option removed entirely backbone initial solution would work", "d": "1/2013"}, {"body": "issue title arguments issue body equally valid instances said case execute code event handlers called code question fairly complex nested collection bunch stuff event handlers events notified hook run handlers way order event handlers definitely help trimming nasty hacks way hack manually unshift handler yuck", "d": "1/2013"}, {"body": "think create pull request hope someone privileges notice", "d": "1/2013"}, {"body": "boriskozo would work unless silent passed options nt use suppress certain event actions take advantage custom", "d": "1/2013"}, {"body": "caseywebdev discussion opposite case someone passes still want get notification", "d": "1/2013"}, {"body": "saying nt pass wo nt make really duplicating functionality", "d": "1/2013"}, {"body": "caseywebdev could always control users backbone library writers ca nt always ask users libraries forgo backbone conventions makes unhappy library users writers", "d": "1/2013"}, {"body": "caseywebdev nt agree duplicating functionality convention frameworks net allow library writers anyone extends framework using directly control flow without jumping hoops please see derickbailey comment", "d": "1/2013"}, {"body": "wyuenho hopefully wo nt convention long boriskozo may useful extension already readily accomplished via events trigger order listen agree caseywebdev nice feature somewhat expensive think belongs plugin territory", "d": "1/2013"}, {"body": "braddunbar writing plugin collection needs track items added removed collection maintain internal data structure implement using users collection may pass add function example making internal data structure inconsistent two ways think proxy add function function solution suggested think another way overkill proxy", "d": "1/2013"}, {"body": "braddunbar would providing way order event handlers much minimalist approach problem", "d": "1/2013"}, {"body": "wyuenho none event handlers called passed matter order discussion started events order personally think events ordered like framework uses event aggregators", "d": "1/2013"}, {"body": "boriskozo think different problems solved solution calling method regardless whether passed think original idea right problem simply removing trick however use cases take care addressed alone specifically cases code must executed andor events fired way proxy methods fire events way cumbersome way order event handlers could override make sure event handlers always certain positions pattern nt allow", "d": "1/2013"}, {"body": "wyuenho already order event handlers", "d": "1/2013"}, {"body": "braddunbar handlers inserted end position ca nt changed case cooperating collections mutually listening events using handler able call beginning handler end prevent infinite loops problem always inserts end handler suppose clean states every handler executing afterwards see updated states special handler always first handler execute established way except hacking undocumented subject change anytime", "d": "1/2013"}, {"body": "wyuenho check may may helpful", "d": "1/2013"}, {"body": "think boriskozo original idea ticket getting lost chatter event priority usecase describes think understand basically library author wants able make sure hook anytime model added collection whether option passed wants rely functionality build functioning library nt result subtle bugs introduced solutions proposed far add option collections function called whenever model added collection matter silent true remove backbone altogether introduce functionality plugin library author require plugin dependency nt think covered personally think best way forward", "d": "1/2013"}, {"body": "rubymaverick thank summary could please elaborate implement maybe link another plugin something similar ca nt figure", "d": "1/2013"}, {"body": "easy enough remember", "d": "1/2013"}, {"body": "well kind hoping avoid proxying", "d": "1/2013"}, {"body": "boriskozo rough draft option could also override invoke certain functions inside", "d": "1/2013"}, {"body": "caseywebdev thanks definitely use code example", "d": "1/2013"}, {"body": "hi abritinthebay using custom local storage something similar running locally jquery works without issue", "d": "1/2013"}, {"body": "using custom sync simply copy amp paste original beforesend method attached adding custom authorization header better way backbone btw change", "d": "1/2013"}, {"body": "abritinthebay something like similar stays backbonesync", "d": "1/2013"}, {"body": "nt know nt think obvious change see improves behavior update either way", "d": "1/2013"}, {"body": "appears working ran code really sure could caused change made good know documented even simple sync change might cause issues closing", "d": "1/2013"}, {"body": "hi everybody like reopen discussion basic idea find good one success callback called every status code imho backbone well suited work rest apis nearly perfect point bugs eg save new model success callback get called rest api correctly delivers created reason stick exact status code triggers success callback like abritinthebay stated anything series codes considered success response parsed", "d": "8/2013"}, {"body": "issue seeing likely nt related status code rather data returned response jquery call success format returned match requested format option backbone case verify sending valid json save call", "d": "8/2013"}, {"body": "hi tgriesser thank much api sends nothing empty content response seems treated invalid json sending response triggers success callback nice day thank quick response", "d": "8/2013"}, {"body": "damn smart people handing around repo good call", "d": "8/2013"}, {"body": "probably fixed something like wherever options need extended success callback", "d": "1/2013"}, {"body": "seeing thing backbone underscore issue", "d": "1/2013"}, {"body": "timmywil tried suggested luck side call nt fail undefined anymore object nt seem collection appears array models contained collection neither reset update function seems like something chain causing problem", "d": "1/2013"}, {"body": "guessing easy fix nt ton investigation look pull request timmy jan pm tony lukasavage notifications githubcom wrote timmywil tried suggested luck side call nt fail undefined anymore collection object nt seem collection appears array models contained collection neither reset update function seems like something chain causing problem reply email directly view github", "d": "1/2013"}, {"body": "gets defaulted passed passed back shadowed always present onwards", "d": "1/2013"}, {"body": "wyuenho get supposed happen seeing case success callback defined appear collection object much array models", "d": "1/2013"}, {"body": "custom methods expected updated call", "d": "1/2013"}, {"body": "wyuenho definitely shadowing sounds like may purposeful brought confusion caseywebdev seems superfluous unnecessary ever time want something different var shadowing extend whatever options changed would nt take much make backbone plugins custom sync methods backwards compatible", "d": "1/2013"}, {"body": "timmywil tonylukasavage fix one internally success callback parameters reverted options model referenced closure successerror sync called single argument issues let us know reopen thanks", "d": "2/2013"}, {"body": "llllkkkk believe best way go would pass call nt applied model validated success returned server option nt want wait server call would get copy attributes returns false reset model attributes", "d": "1/2013"}, {"body": "tgriesser thanks lot", "d": "1/2013"}, {"body": "thanks issue dhruvaray believe correct behavior method meant used inside change handler docs change event method used get previous value changed attribute need know attributes model change best clone model attributes let know nt clear things", "d": "1/2013"}, {"body": "understand correctly constraint quote documentation relaxed possible get previous values even outside change handler need clone example", "d": "1/2013"}, {"body": "oh ok must mixed jsfiddle issue see functionality", "d": "1/2013"}, {"body": "yep new feature", "d": "1/2013"}, {"body": "good hear changehandler methods preserve values outside change handler updated fiddle check suspect utility given multiple updates model client end method always return true unless plan reset model state server sync case find upgrading section changehandler section backbone documentation reflect behavior change sure whether unintended side effect changes maybe folks want update sections end need exploit behavior change backboneassociations", "d": "1/2013"}, {"body": "forgot pull requests show issues closing", "d": "1/2013"}, {"body": "line correct nt explicitly set truthy value function exist considered valid function prefixed underscore imply part public api use risk may change unexpectedly internal logic refactored", "d": "1/2013"}, {"body": "fabriceleal new behavior change log model validation enforced default model save longer enforced default upon construction model set unless validate true option passed", "d": "1/2013"}, {"body": "caseywebdev tgriesser ok thanks clarification bad", "d": "1/2013"}, {"body": "change event triggered every attribute individually changes change event triggered attributes changed believe mentioned docs", "d": "1/2013"}, {"body": "right passing space separated events works like calling twice added two handlers", "d": "1/2013"}, {"body": "ok tnx caseywebdev explanation much clearer one docs guess rewrite code bind generic change add statments callback", "d": "1/2013"}, {"body": "see explanation", "d": "1/2013"}, {"body": "running code example sorry duplicating minutes faster", "d": "1/2013"}, {"body": "nt documented well yet due ambiguity catchall callback errors handled differently error returned function returned value stored pattern chosen rather callback always synchronous opposed", "d": "1/2013"}, {"body": "ok makes sense thanks please update documentation release", "d": "1/2013"}, {"body": "keeping one open docs get updated nt forget", "d": "1/2013"}, {"body": "also docs nt updated say invalid new event name instead error", "d": "1/2013"}, {"body": "everything documented one closing", "d": "1/2013"}, {"body": "documentation model validate still mentions able pass error callback set method", "d": "1/2013"}, {"body": "caseywebdev modelvalidationerror give example mentioned anywhere backbone site", "d": "1/2013"}, {"body": "derbeth documentation added public next release", "d": "1/2013"}, {"body": "wanted replace could use", "d": "1/2013"}, {"body": "great thanks posting workaround keep things clean ever decide drop support simply remove issue closed fix would jquery ajax method prioritize activexhttp object native xmlhttprequest object available idea ramifications would application could rendered unable save user disabled activex lot common disabling js long story short really fixable dropping support heh", "d": "1/2013"}, {"body": "whoa sounds like could bad bug maybe something force us reconsider supporting patch first place reopening", "d": "1/2013"}, {"body": "jquery bug", "d": "1/2013"}, {"body": "feel supporting patch backbone useful bumping issue jquery bug closed wontfix much rare corner case us deal workaround override xhr factory ajax options one situation still use ajax rewriting patch put default providing configuration could dangerous allowing patch broken would cause bug dangerous bug obviously fail vs silently destroying data could put another workaround emulatehttp patch workarounds use put implement api supporting put partial set attributes override xhr factory use activex use xhttpmethodoverride implement api support described jquery considers patch broken much edge case maybe acceptable", "d": "2/2013"}, {"body": "grrr means ca nt use partial put nt acceptable nt secondguessing jquery xhr factory ca nt assume emulatehttp supported backends take put back soon jquery changes", "d": "3/2013"}, {"body": "really useful backends support emulatehttp able use patch emulatehttp set would really sad see go use partial updates browser use fake patch http method need nt support patch method browsermsie parseint browserversion originalsync backbonesync backbonesync method model options gt method patch optionsemulatehttp true return originalsync method model options", "d": "3/2013"}, {"body": "nsb totally agree really really want include ca nt add new http method works configure server faketunnel faux http methods", "d": "3/2013"}, {"body": "way see optional use harm leaving prefer add notifaction patch supported would partial updates otherwise", "d": "3/2013"}, {"body": "backbone nt going include features going prevent app working particular common browsers period want feel free always available", "d": "3/2013"}, {"body": "k see already added comment jquery bug hopefully pick agree best solution", "d": "3/2013"}, {"body": "alright following instructions jquery team added suggested workaround minute please give master try app patch let know well works", "d": "3/2013"}, {"body": "upgraded backbone master removed sync override patch works perfect app nt run ca nt test one looking good thanks", "d": "3/2013"}, {"body": "looks good tested gives option support existing app overriding sync following work general", "d": "3/2013"}, {"body": "may also occur html given ie reasons believe operate lower version prevent include ieedge html header forces run mode resource", "d": "3/2015"}, {"body": "invoking function apply call function using first argument context pass along values array second argument case arraylike initialize called arguments rather called single argument info", "d": "1/2013"}, {"body": "omg forget focus thx", "d": "1/2013"}, {"body": "hi qbunt thanks pointing however test locally seems work without issue would mind posting code illustrates problem", "d": "1/2013"}, {"body": "problem investigation found one plugin backbonequeryparameters override regex backbone router nt include optional route segment", "d": "1/2013"}, {"body": "ah ha", "d": "1/2013"}, {"body": "dealing complex query strings still plugin available absolutely causing thanks lpproulx really appreciate jashkenas keep great work man backbone lot fun cheers guys", "d": "1/2013"}, {"body": "event definitely still removed method", "d": "1/2013"}, {"body": "yes change method using remove method", "d": "1/2013"}, {"body": "caesarli give example using little discussion", "d": "1/2013"}, {"body": "cases define model inside model define change function define collection bind add modelchange method example var mdl backbonemodelextend name backbone change function timelocalized thisget dtdate print ymd var clc backbonecollectionextend blah blah blah clcbind add function mchange", "d": "1/2013"}, {"body": "example defining backbone removal nt change anything", "d": "1/2013"}, {"body": "used option method needed update attributes multiple models triggering events still rely option case although first dismayed see feature removed finished refactoring parts app work without favor cleaner backbone internals think would help publish note change since significant release notes nt explain reasoning", "d": "1/2013"}, {"body": "ok models doesnot customized change method collection try fire change method add models refactor point removing method could u please make sure changelog written different colors especially core functions removed like getbycid change", "d": "1/2013"}, {"body": "caesarli read removed want add something like back simple enough add snippet right backbone included similarly replaced get could", "d": "1/2013"}, {"body": "tgriesser well fair one use cases queue changes model snippet nt account", "d": "1/2013"}, {"body": "neonsilk right would nt help code dependent queued silent changes", "d": "1/2013"}, {"body": "idea queued silent changes", "d": "1/2013"}, {"body": "dervalp nt one using earlier release situation definitely needed queued silent changes much discussion nt able come one", "d": "1/2013"}, {"body": "pass along whatever like extending handler", "d": "1/2013"}, {"body": "ryanthegiantlion actually little discussion error callbacks signatures implemented feel free give input like see errorsuccess signature", "d": "1/2013"}, {"body": "yes could extend modify backbone thought access perhaps given box edit soz posted closed issue look", "d": "1/2013"}, {"body": "bit roundabout way addressing currently pull request open recent pull request includes grunt accepted land source maps grunt makes way time around", "d": "3/2013"}, {"body": "found solution know best one coffeescript class modelstodo extends backbonemodel initialize thison change change change todo options todohaschanged return", "d": "1/2013"}, {"body": "provide code isolated jsfiddle help figure might causing error", "d": "1/2013"}, {"body": "first backbone project based fiddle also doesnt work anymore dont see error", "d": "1/2013"}, {"body": "fetch looks like click run works correctly", "d": "1/2013"}, {"body": "ok example working thnx problem try make jsfiddle showing problem", "d": "1/2013"}, {"body": "getting error trying fetch backbonepaginatorclientpager collection using backbonepaginator plugin switching back results error", "d": "1/2013"}, {"body": "hitchcockwill looks like might", "d": "1/2013"}, {"body": "tgriesser looks like thanks pointer", "d": "1/2013"}, {"body": "hitchcockwill actually nt think issue specifically think digging little", "d": "1/2013"}, {"body": "hitchcockwill yep sync signature changed internally stick resolution one", "d": "1/2013"}, {"body": "tgriesser think backbone correctly even overriding fine solution grabbing ajaxlibrary specific arguments", "d": "1/2013"}, {"body": "right override sync something like done backbonepaginator sync function method model options var querymap params querymap thisperpageattribute thisperpage querymap thisskipattribute thispage thisperpage params extend type get datatype jsonp jsonpcallback callback data decodeuricomponent param querymap url thisurl processdata false options return ajax params collection without special backbone success handler line collection actually response nt understand initially part whats brought understand wanting make agnostic ajax common sync provider would probably best make standard comes callback signature", "d": "1/2013"}, {"body": "reference change", "d": "1/2013"}, {"body": "make clear must callback form problem nt exist", "d": "1/2013"}, {"body": "well problem would still exist apps using code looks like example wait see jashkenas opinion one", "d": "1/2013"}, {"body": "afraid quick skim issue loss exactly problem tgriesser mind reexplaning", "d": "1/2013"}, {"body": "issue prior changes made among others could create sync function model without success function calling would work create sync function ensure success handler matching backbone signature otherwise collection line actually response seems backbonepaginator using api matching jquery seems bigish change among others", "d": "1/2013"}, {"body": "nt know much nt involved way keep consistent arguments preserving previous behavior automatic success handler created", "d": "1/2013"}, {"body": "nt think without requiring every custom sync handler something implements backbone way think also might worth revisiting change prompted pauluithol bring makes code little dryer encapsulation successerror makes difficult custom application specific sync things modelcollection without extending also discussed somewhat", "d": "1/2013"}, {"body": "jashkenas actually would consistent used prior implementation changing error function matches jquery style error callback rather inventing signature think would best way go although opinion wanting revisit changes remain edit must tired nt match take look tomorrow", "d": "1/2013"}, {"body": "really think way correct implementation currently one simple rule overriding sync override call signature mention overwritten simple agnostic pattern", "d": "1/2013"}, {"body": "issue described signature callback passed modified whereas none callbacks including etc decided alter callback well consistency however kpdecker comments maybe went wrong direction instead made callback consistent tgriesser think change still valid default assumes successful xhr successful sync think reasonable", "d": "1/2013"}, {"body": "including etc persistence method specific case whereas handled every single customized method really nt think backbone lean outside stock function changes good backbone future flexibility", "d": "1/2013"}, {"body": "braddunbar consider case dealing api returns responses custom signature actual result code etc deal currently good way call original intended error function success handler without digging internals sync sync implementations one user configurablereplaceable pieces app changes nice hiding successerror handlers inside body forces things one way nt always dev control caseywebdev likely backbone apps going using jquery equivalent using jquery definitely know would need write sync anyway simple enough match jquery signature", "d": "1/2013"}, {"body": "problem reverting change tailored specific persistence method currently agnostic wrapper looks like wrong current looks much inviting different persistence methods", "d": "1/2013"}, {"body": "functionally though second third arguments nt matter tailored specific persistance mechanism naming", "d": "1/2013"}, {"body": "well ignoring argument names breaks pretty much bb universal pattern frowning checkout pr think winwin", "d": "1/2013"}, {"body": "status override sync method", "d": "2/2013"}, {"body": "chrisabrams looks like going resolve issues related overriding sync method waiting one get pulled", "d": "2/2013"}, {"body": "sweet", "d": "2/2013"}, {"body": "still problem uncaught typeerror object object array method reset using latest source backbone backbonepaginator solved pulled", "d": "2/2013"}, {"body": "changes make easier override changes plugins would still necessary", "d": "2/2013"}, {"body": "braddunbar actually nt know case least issue paginator internal successerror functions called ajax resolvable single response parameter things work fine", "d": "2/2013"}, {"body": "good point since already passes response object first argument resolve nicely thanks pointing tgriesser even sold", "d": "2/2013"}, {"body": "gilbertwyw would mind giving source shot see fixes issue", "d": "2/2013"}, {"body": "braddunbar yep main point trying make closed pull request nt think articulated well enough", "d": "2/2013"}, {"body": "braddunbar sorry nt source moment collection backbonepaginator requestpager tried invoke fetch saw uncaught typeerror object object array method reset console tried source problem disappeared wonder paginator issue", "d": "2/2013"}, {"body": "braddunbar definitely fixes issue took look backbonepaginator issue internal sync signature change rather unrelated signature change passed option backbone sync methods cool since entirely optional make sense match event trigger signatures", "d": "2/2013"}, {"body": "problem see events triggered twice since moved back probably cut another release quickly mitigate problems", "d": "2/2013"}, {"body": "closing one resolved still issues reopen", "d": "2/2013"}, {"body": "spent couple hours digging around source figure issue found thread edge version immediately cleared issue paginator throwing error great work guys", "d": "2/2013"}, {"body": "see output result pane fiddles", "d": "1/2013"}, {"body": "see", "d": "1/2013"}, {"body": "octatone backbone got version bump try see takes care issues", "d": "1/2013"}, {"body": "see lines output backbone one chrome safari firefox os x", "d": "1/2013"}, {"body": "yeah looks like version bump happened writing bug report updated fiddle point tagged repo version instead live backbonejscom version posterity sake", "d": "1/2013"}, {"body": "see lines looks like fixed", "d": "1/2013"}, {"body": "great glad fixed", "d": "1/2013"}, {"body": "tgriesser looks like fixes issue talk timing", "d": "1/2013"}, {"body": "agree prepping model serialization nt think need add new function view preparation though easy casebycase basis consensus certainly update docs reflect", "d": "1/2013"}, {"body": "agreed nt double duty docs let drop examples view rendering extra description", "d": "1/2013"}, {"body": "recommendation always never use rendering instead use however breaks collections want objects flattened use since never prepare collections saving method works fine", "d": "1/2013"}, {"body": "addressed", "d": "1/2013"}, {"body": "tbranyen anything wrong passing model collection instance directly template ie without cloning attributes using template", "d": "6/2013"}, {"body": "domchristie often best way go usually defined highly useful methods model", "d": "6/2013"}, {"body": "jashkenas thanks perhaps documented way provide template model", "d": "6/2013"}, {"body": "actually nt think best way providing model encourage using methods complicated conditional statements template nt place kind logic keep simple possible advice provide attributes", "d": "6/2013"}, {"body": "quick side note using call function view context rarely need pass anything since use inside template favorite way go think elegant", "d": "6/2013"}, {"body": "hi tupkalov changes since release think results good deal better would mind trying copy master following get running", "d": "1/2013"}, {"body": "hope release functional thank", "d": "1/2013"}, {"body": "duplicate please discuss", "d": "1/2013"}, {"body": "hi antonzaytsev actually already fixed bug", "d": "1/2013"}, {"body": "thank response casey missing already fixed trunkmaster look latest version", "d": "1/2013"}, {"body": "yea bug fixed see latest code", "d": "1/2013"}, {"body": "confused method computechanges master glad already fixed", "d": "1/2013"}, {"body": "pattern consistent across classes though pedantic equal combination set view see line also seems like good pattern maintain", "d": "1/2013"}, {"body": "agree would handy way handles options applied", "d": "1/2013"}, {"body": "fyi discussed previously think discussion still applies since quite easy want think best left convention users deal want one would usually rather attached rather attach options directly object", "d": "1/2013"}, {"body": "understand flexibility pov inconsistency little irksome confused", "d": "1/2013"}, {"body": "agreed caseywebdev also get ianstormtaylor argument nt dumping place generic keyval store like lot view ca nt see particular reason tying view would nt also applicable classes either others removed make line optin vote latter", "d": "1/2013"}, {"body": "meh either others removed make line optin vote latter agreed totally worth backwardsincompatibility point let leave sleeping dog", "d": "3/2013"}, {"body": "totally wrong bad", "d": "1/2013"}, {"body": "mornin starkovv ca nt quite tell problem context given would mind providing bit code fiddlejsbin particular like see logic", "d": "1/2013"}, {"body": "updated version changed nt work update coffeescript autosaveattributeskeys starttime endtime isactive autosaveifneeded model gt changeskeys keys modelchanged intersectionkeys intersection changeskeys autosaveattributeskeys save isempty intersectionkeys old version working check issue", "d": "1/2013"}, {"body": "jsfiddle support backbone moment jsbin ok", "d": "1/2013"}, {"body": "thanks posting starkovv fairly certain failure due fact removed favor modelchanged think win overall hope answers question", "d": "1/2013"}, {"body": "bad thank braddunbar needs update backbone documentation", "d": "1/2013"}, {"body": "hmm even though note change seem added", "d": "1/2013"}, {"body": "hi starkovv believe fixed master pull latest let know nt work", "d": "1/2013"}, {"body": "braddunbar another attack silent", "d": "1/2013"}, {"body": "caseywebdev think issue completely disable silent option proposed actually feel silent quite handy model needs business logic done ui get updated issue backbone forget update internal state sync event btw debugging found somehow sync event still get triggered maybe internally even silent option set true", "d": "1/2013"}, {"body": "backbone forget update internal state sync event event exists default method overridden nt fire still work somehow sync event still get triggered triggered method nt check problem goes beyond agree brad removing would best letting people check event need functionality", "d": "1/2013"}, {"body": "oh set also get affected sync event wo nt help silent get turned afraid lots backbonejs users including driven crazy debugging updating codes hope better backcompatible solution thx", "d": "1/2013"}, {"body": "hi gggggdxn thanks pointing great example problems associated silencing events like like caseywebdev says fixed removing option silent get turned afraid lots backbonejs users including driven crazy debugging updating codes would mind expanding option help debug", "d": "1/2013"}, {"body": "hi braddunbar sorry nt make clearer nt use silent debug point backward compatibility", "d": "1/2013"}, {"body": "thanks clarifying gggggdxn definitely unfortunate removing backward incompatible change fix code maintain well however compared encouraging antipattern think lesser two evils", "d": "1/2013"}, {"body": "running issues set save new ids models later go destroy model id recently changed removed see issue fiddle remove silents code everything works correctly model deleted silent model never deleted", "d": "2/2013"}, {"body": "wilkins exactly type issue talking silencing change event deprives collection notification causing state incorrect hopefully patch prevent type issue future", "d": "2/2013"}, {"body": "closing one merged removing option mention thread created simple plugin make transition little easier generally avoided", "d": "2/2013"}, {"body": "fork using maven dependency module even cdn also interesting article underscore thus backbone removed amd support", "d": "1/2013"}, {"body": "think jashkenas right commit supporting particular script loader definitely make easier work properly support particular script loader neither necessary desired", "d": "1/2013"}, {"body": "loaders referring requirejs loader developers use backbone projects backbone supporting nt see single example someone would use backbone loader requirejs two books describe use backbone requirejs early pdf seems sort ideological problem loader", "d": "1/2013"}, {"body": "ajaxsolutions problem loading amd solved community obviously problem loading backbone requirejs also solved community least couple technical authors seeing problem preference anything ideological maybe idiological debate ideological someone already scratched itch go enjoy hard work", "d": "1/2013"}, {"body": "ajaxsolutions contrary used requirejs several projects enjoyed immensely particular like use compile templates loader plugin said using shim configuration less intrusive works without issue", "d": "1/2013"}, {"body": "ajaxsolutions using backbone almost years never needed requirejs commonjs works fine", "d": "1/2013"}, {"body": "chrisabrams workflow building commonjs usedeploy browser research lately browserbuild gluejs stitch still prefer using requirejs using although would gladly switch cjs", "d": "1/2013"}, {"body": "fwiw jquery nicely supports amd", "d": "1/2013"}, {"body": "realize wo nt change minds worth pointing jquery lodash developers provide amd support", "d": "1/2013"}, {"body": "acstll good example entire flow would brunchio great tool helping build backbone project commonjs also supports requirejs", "d": "1/2013"}, {"body": "clarify earlier comment requirejs amd wanted point requirejs loader used browser backbone developers", "d": "1/2013"}, {"body": "ajaxsolutions libraries considerably open minded less opinionated easier buyin developers using backbone opinionated nonopinionated loaders package managers fine since virtually every guide explains use configuration spun work usejs created specifically backboneunderscore use case personally nt made libraries amd compatible found restrictive however dojo requirejs configuration starting rethink stance", "d": "1/2013"}, {"body": "chrisabrams thank definitely give brunch try recent js dev really hard deciding amd cjs facing start big project given fact one wants write true modular code find fascinating entire discussion standards", "d": "1/2013"}, {"body": "great comes trying accomplish app", "d": "1/2013"}, {"body": "caveats amd support regarding use stock backbone modular cms plugins", "d": "7/2015"}, {"body": "", "d": "1/2013"}, {"body": "", "d": "1/2013"}, {"body": "thumbsup", "d": "1/2013"}, {"body": "maybe releases bump minor version consecutively instead arbitrarily way nt go instead would gone", "d": "1/2013"}, {"body": "think transition huge amount changes belive jashkenas reasoning behind romantic versioning smile yeah feel next one would seriously like first stable release stable api still making lot backwards incompatible changes", "d": "1/2013"}, {"body": "always imagined would shortlived would whatever changes fall", "d": "1/2013"}, {"body": "wookiehangover nt know would much backward incompatible change", "d": "1/2013"}, {"body": "sounds good ca nt legwork moment get prepped ready anyone feel like sending pull request", "d": "1/2013"}, {"body": "jashkenas see looks alright", "d": "1/2013"}, {"body": "done done", "d": "1/2013"}, {"body": "perfect thanks", "d": "1/2013"}, {"body": "see questionsuggestion comment would nt worry many listeners wanting basic derived attributes", "d": "1/2013"}, {"body": "looked also saw braddunbar comment using could definitely work clutter code also force models views know need call particular model way better design model definition opt transform dataattr setsaved concept similar database table trigger opportunity ability intercept data change entered table certainly whole concept backbone suited model listening seems inefficient suboptimal especially since talking listening order another trigger another change event nt think using existing function appropriate rather method optionally added called note happen versus", "d": "1/2013"}, {"body": "asking mutator computed properties functionality setter support backbone also good pull request suggest something like gist linked", "d": "1/2013"}, {"body": "caseywebdev earlier suggestion today", "d": "1/2013"}, {"body": "kidplug gettersetter support turned many times past convince masses could get merged", "d": "1/2013"}, {"body": "hi kidplug type functionality would use feature actually experiencing performance problems listening events anticipating listening prevent extra event cases seen listening change events sufficient performant need speedcontrol always override method despite requiring small amount boilerplate certainly best way intercept mutate arguments already two viable ways accomplish functionality think third would cause confusion", "d": "1/2013"}, {"body": "thanks feedback caseywebdev explain mean gettersetter support nt follow mean context talking optional method model would called automatically like called automatically exists would function way braddunbar example use case automatically convert incoming date string converting date object millisecond timestamp want model filtering view properly position corresponding element model may also want calculate another derived value like duration experiencing performance issues anticipating performance impact point thousands models adding weight unwanted listeners trying optimal ie low numbers event listeners much possible page question dynamic datawise uiwise", "d": "1/2013"}, {"body": "define new method use instead override wrap transformations call many easy ways go", "d": "3/2013"}, {"body": "think correct behavior save sync data client server point track diff", "d": "1/2013"}, {"body": "deteam purpose changedattributes method nt track changes stable version", "d": "1/2013"}, {"body": "get expected result first set change event triggered listeners get right information work depending changed fields sure added savesync purposes", "d": "1/2013"}, {"body": "ulitiy afaik backbone nt provide builtin way want might want something like extend backbonemodel set change check saving save model dirty set false successful model sync", "d": "1/2013"}, {"body": "lukeasrodgers good solution thanks", "d": "1/2013"}, {"body": "hi ulitiy lukeasrodgers correct meant detect whether model changed recent adding dirty flag like suggests probably good way go", "d": "1/2013"}, {"body": "definite really hard trace options bubbled options see everywhere etc", "d": "1/2013"}, {"body": "bad asis always look source could clearer", "d": "1/2013"}, {"body": "documentation already pretty decent would improve even often end digging source code get better understanding", "d": "1/2013"}, {"body": "would brilliant", "d": "2/2013"}, {"body": "feel free send pr clarification options advised try merge documentation changes overlyexplicit would make wading docs onerous like jsduckstyle annotations clarification always welcome", "d": "3/2013"}, {"body": "also ran real pain figure happening cause error deals line right set callback slot nt one defined events hash second spot ignoring callback parameter pushed fix caseywebdev braddunbar take look see see better way address one cases might issue edit yamsellem patch would nt tell method exist would nt cause runtime error would treat empty callback way noop", "d": "1/2013"}, {"body": "fixed", "d": "1/2013"}, {"body": "tgriesser would prefer app fail nothing happens isnt possible message case callback exist", "d": "1/2013"}, {"body": "would prefer throw noop one would much rather remove noop leisure deal error worse user find", "d": "1/2013"}, {"body": "yamsellem method exist nt happen backbone binding happens callback jquery events hash nt exist right empty callback passed would noop", "d": "1/2013"}, {"body": "looks good break developer put comparator collection passes arg sortedindex", "d": "1/2013"}, {"body": "kidplug good call pushing fix actually case mentioned really ca nt fixed work iterator take one argument take", "d": "1/2013"}, {"body": "yes true backbone comparator double duty maybe throw error like collectionsort comparator", "d": "1/2013"}, {"body": "work fine collection merged master", "d": "1/2013"}, {"body": "yeah realized already must something else borked setup strange sorry noise", "d": "1/2013"}, {"body": "replaced line model thismodelprototypeparse thismodelprototypeparse models models ugly since seems instance type people might use parse references stuff instance looking anyone else chime opted submit pull request get feedback", "d": "1/2013"}, {"body": "worth methods sometimes require instance say method model nt trick", "d": "1/2013"}, {"body": "work since truthy invokes collections parse models parse since backbone runs collection return back array iterates array passes object models parse model parsing basically collection parse knows get array objects models parse knows get data", "d": "1/2013"}, {"body": "ah gotcha collection parse work changes backbone right though understand want logic model parse function instead", "d": "1/2013"}, {"body": "correct current backend data actually comes like models model model collections parse return omodels basically knows nt know definition models request model takes care see going however find following statement longer fully true least confusing fetching model collection defined parse functions run fetching collection getting back new models could cause collection parse list model parsed turn functions defined", "d": "1/2013"}, {"body": "big problem also reason think using model data without parsing normally eg retrieving models idcid words take model instances argument unparsed server data using unparsed data breaks good many assumptions models parsed used compared one another data namespace wrapper one example others including composite keys otherwise altering id attribute", "d": "1/2013"}, {"body": "need special parsing always course comes overhead creating new models rather simple raw data still get", "d": "1/2013"}, {"body": "need special parsing always sure mean special parsing following normal idiomatic implementation knowledge currently work due problems described js model parse function resp return respmodel collection parse function resp return respmodels", "d": "1/2013"}, {"body": "sorry right word opening pr fix", "d": "1/2013"}, {"body": "issue currently completely complicating application flow basically get around tying view model data checking see rendered view already manually triggering change event even changes obviously sucks work around nt option use update require parse function way", "d": "1/2013"}, {"body": "simply put use parse parse option programmers said hey data needs parsed backbone uses whereas right bb exact opposite fundamentally breaking data models process", "d": "1/2013"}, {"body": "abritinthebay believe accomplish need", "d": "1/2013"}, {"body": "read like collection update method line optionsparse false models thisparse models options fixes everything might add eta note noticed update nt seem get options fetch logged seems odd", "d": "1/2013"}, {"body": "caseywebdev wo nt thing parse never called collection ever fetch update true", "d": "1/2013"}, {"body": "parse never called collection ever source says differently p version using altered", "d": "1/2013"}, {"body": "altered reproduce consistently switching fromfetch fetch update true issue added detail incredibly reproducible testing options hash always undefined update function may something changed code", "d": "1/2013"}, {"body": "clarify parse right use fetch called used fetch update true update fact collection basically becomes complete mess full recursive junk fresh copy development version bb words nt work fact actively detrimental", "d": "1/2013"}, {"body": "something else going code look working intended", "d": "1/2013"}, {"body": "strange investigate", "d": "1/2013"}, {"body": "fixed", "d": "2/2013"}, {"body": "fixed", "d": "1/2013"}, {"body": "hello mistake seajs typeerror options undefined backbonejs line please", "d": "3/2013"}, {"body": "using might solve problem see", "d": "1/2013"}, {"body": "using cool let try master thx", "d": "1/2013"}, {"body": "master works great thanks", "d": "1/2013"}, {"body": "seems calling without context set collection see code context", "d": "1/2013"}, {"body": "thank directing right direction issue backbone instead issue using requirejs ends circular dependency model passed never getting passed", "d": "1/2013"}, {"body": "problem", "d": "1/2013"}, {"body": "hey wilkins think running problem getting could tell fixed thanks", "d": "1/2013"}, {"body": "ignacioiglesias nt figured good way fix circular dependany time made small modification backbonejs collection get function", "d": "1/2013"}, {"body": "wilkins thanks ended changing code structure lil bit remove circular dependencies run situation make sure give try cheers", "d": "1/2013"}, {"body": "ok see problem even merging models new model created within collection model definition default value variable get configuration api set variable bootstrapping collection fetching new data variable overwritten collection creates new model new data merges data existing data means overwritten default value overwritten would expected collection add fresh json data existing model instead creating new unused model", "d": "1/2013"}, {"body": "bug fixed regarding merge default values see using solves problem", "d": "1/2013"}, {"body": "still fixed identical problem reoccured trying compute difference two updates array strings need compute difference means need keep version array previous update compare list current update problem ca nt save anything model collection every update creates new instance model throws away changes old model ca nt really see reason necessary create new model updating collection instead updating existing model", "d": "2/2013"}, {"body": "provide jsfiddlecodepen demonstrating problem", "d": "2/2013"}, {"body": "created jsfiddle demonstrate problem call fetch collection every fifth second data returned creates new model parses data model merges data existing model like fetching data parsing model init model existing model would expect parse update data existing model like fetching data parsing model existing model problem need parse data knowledge previous state model see data changed subtract data actually changed like new entries array nt know totally", "d": "2/2013"}, {"body": "ideally would able work correctly response data collection level model level order parse model level initialize new model simple response data circumvent model initialization since backbone openly supports complex response data meta data json etc ca nt", "d": "2/2013"}, {"body": "ok nt think fully understand try work around workaround could implement parse method collection parses response existing models backbone initiates new model merges two", "d": "2/2013"}, {"body": "done parse response previous model parsing data temporary model implemented custom function model implemented function collection javascript parse function response response function entry var model thisget entryid", "d": "2/2013"}, {"body": "carnevalle simplified", "d": "2/2013"}, {"body": "hi bazwilliams thanks pointing ca nt seem reproduce using though would mind posting code", "d": "1/2013"}, {"body": "hi braddunbar ca nt provide original model reproducing smaller scale everything worked correctly however eventually found problem occurs validation function model id set via hash constructor style validation function set aborted leaving id undefined case creating model id constructor calling fetch fetch failed due missing id url nt set validation fails due missing mandatory fields ie var model new mymodel id modelfetch validation fails due missing fields id assigned modelid results fetch using incorrect url setting modelid explicitly resolves issue", "d": "1/2013"}, {"body": "see version backbone using master branch changed bit particular models validated default request via glad figured", "d": "1/2013"}, {"body": "feels similar events fired model collection containing model braddunbar might better idea", "d": "1/2013"}, {"body": "hi hswolff triggers routes routers triggering event route shortcut filtering route events router hswolff mostly sugar think nice addition folks use multiple routers page", "d": "1/2013"}, {"body": "fair enough seemed redundant first glance makes sense thanks explanation braddunbar", "d": "1/2013"}, {"body": "agree keeping indexhtml docs date changes release would nt effect backbonejsorg would easier making updates release especially longer span releases keeping edge section change log running set changes especially big ones like validation reversal changes removal would better someone looking grab copy repo quickly see documentation reflects current state project cc jashkenas braddunbar caseywebdev", "d": "1/2013"}, {"body": "x already forget changes master since cut love idea master branch docs go master branch updates", "d": "1/2013"}, {"body": "writing changelog go great idea", "d": "1/2013"}, {"body": "wonderful idea concrete list edge changes would great brad tue jan genadi samokovarov wrote writing changelog go great idea image reply email directly view github", "d": "1/2013"}, {"body": "way backbonejsorg site could versioned docs annotated source remarkably helpful become much less using latest version", "d": "1/2013"}, {"body": "versioned", "d": "1/2013"}, {"body": "whoah mind blown thanks caseywebdev", "d": "1/2013"}, {"body": "thank github awesome url practices", "d": "1/2013"}, {"body": "ps tip future others appending link show docs html", "d": "1/2013"}, {"body": "ah yes forgot htmlpreview good call", "d": "1/2013"}, {"body": "closing since merged", "d": "1/2013"}, {"body": "calling without argument simply removes every model collection nt see trying", "d": "1/2013"}, {"body": "grydstedt maybe looking option", "d": "1/2013"}, {"body": "bug regarding squashed try using see nt fix problem", "d": "1/2013"}, {"body": "indeed outdated version code thank clarification", "d": "1/2013"}, {"body": "since function constructor also bound becomes new function context think nt use case may underscore issue backbone one implementation changed versions underscore versions backbone underscore using update underscore", "d": "1/2013"}, {"body": "underscore backbone update underscore time", "d": "1/2013"}, {"body": "also seems break update function collections class since thismodelprototypeidattribute line breaks thismodelprototype undefined", "d": "1/2013"}, {"body": "constructors allowed bound since version nt copy prototype original function bound one instance object bound function ca nt access prototype bound one set previous versions backbone prototype collectionmodel never used nt get error using version get error used function mention", "d": "1/2013"}, {"body": "although underscore bind constructor functions recommended documentation nt recommend use bindall collections models", "d": "1/2013"}, {"body": "thanks clarifying rubennorte might useful point documentation quite lot examples floating around using bindall tutorials whatnot", "d": "1/2013"}, {"body": "welcome agree might useful point documentation perhaps noticed binding section", "d": "1/2013"}, {"body": "yeah experience antipattern propagated popularized source many issues", "d": "1/2013"}, {"body": "still issue known thought safe use bindall models collections see lots tutorials extremely handy recommendation use documented otherwise seems perfectly safe awesome", "d": "2/2013"}, {"body": "simpleascouldbe would disagree main source properties collection definitions nt know someone would use time rare case encounter callback need bind use function bind", "d": "2/2013"}, {"body": "tbranyen please specific believe bindall antipattern found useful given backbone oo idioms heavy reliance seeing lot well happens add new method happens remove method remember go inialize modify call bind bind useful cut duplication ooish code lots callbacks instead something harder read like understand ultimately going cause problems see really idiomatic javascript however clear message amp reasoning", "d": "2/2013"}, {"body": "also caught", "d": "4/2013"}, {"body": "make bindall size project number bindall try delete bindall step step almost imposible change time code hope help", "d": "12/2013"}, {"body": "uses internally default triggers event collection instance nt tigger event given executed may trigger events two solutions set callback collection event give like easy implement little heavier", "d": "1/2013"}, {"body": "take closer look first code snippet see call fetch update true question infact nt work", "d": "1/2013"}, {"body": "oh excuse first code looks correct ummm could show console string following code expect added", "d": "1/2013"}, {"body": "thank much working old version backbone updated works expected", "d": "1/2013"}, {"body": "hey pauluithol based jashkenas response looks like site licensed mit good use whatever agree nice consistent set documentation backbone docs nicest seen", "d": "1/2013"}, {"body": "alright closing assuming okay", "d": "1/2013"}, {"body": "ideas something wrong", "d": "1/2013"}, {"body": "looks like need set property options application nt served base domain application served root url domain sure tell history root really option regarding query string braddunbar guy ask one pretty sure backbone ignores query parameters change log semantic cross browser reasons routes ignore search parameters routes like search amp become believe considered url may want call function router directly opposed trying navigate route already located", "d": "1/2013"}, {"body": "tgriesser thank much lot great information setting root solved problem still nt understand search ignored valid use cases example filters like list products mention lot use cases braddunbar understand importance prettyurls nt forced flexible framework backbone also crossbrowser issue related change sorry looked like agressive", "d": "1/2013"}, {"body": "fabiomcosta really issue prettyurls much related cross browser issues history query string issues see nt seem agressive nt understand question first looking glad able get sorted ideally query filtering params ajaxget requests rather actual browser url", "d": "1/2013"}, {"body": "hi fabiomcosta problem support hash based fragments requires ignore query string instance url contains query string hash looks like one however considering url like potentially two values becomes even complex transitioning hash based routing pushstate routing value use replace real query string faux one approach needlessly complex especially considering path based url human readable anyway vs search query amp page reasons issues mentioned tgriesser especially hope clears things bit", "d": "1/2013"}, {"body": "ok cool thank guys explaining everything", "d": "1/2013"}, {"body": "hi dwheeler assume referring release issues implementation simplified current master branch created jsfiddle code see handles changes properly see info changed", "d": "1/2013"}, {"body": "thanks unable find previous issue filed around specific bit right posting tried master see fixed try fix issues code brought latest master", "d": "1/2013"}, {"body": "jstxx backboneevents completely isolated could try grabbing current backboneevents object dropping see helps significant speed improvements events recent release ca nt provide much advice without knowing situation factors causing issue whether memory leaks etc may also want try mailing list documentcloud irc applicationdevice specific questions", "d": "1/2013"}, {"body": "pinging braddunbar addition", "d": "1/2013"}, {"body": "initial response would user sanitizing fragments passing backbone since complex problem users already encoding fragments passing could cause problems double encoding nwertzberger clear prevent particular type exploit run quiet automated warning", "d": "1/2013"}, {"body": "would automated warning nt know way hijack hash tag make go another site anything given current code path see issues insecure code using source hash tag without escaping yeah seeing real bug right backbone course security expert errors completely backbone stack traces looks like writing page history either start checkurl navigate look thisgetfragment source gets encoded point operations would stop whining assume could sneak one purely backbone path without compatibility issues", "d": "1/2013"}, {"body": "second insertion encoding working project requires passing security scans code put production backbone flagged thanks nwertzberger patch", "d": "1/2013"}, {"body": "nwertzberger deanapeterson would mind pointing towards analysis tools using encoding decoding fragments caused quite issues past like make sure addressing particular exploit fully understand patching", "d": "1/2013"}, {"body": "fortify tool think others might grab locationhash jquery users victims xss way pathway taken get seems unlikely occur sources different ways grab base url name method supported looks like hash way used could nt use newer method suggesting following dangerous idea know nothing useful especially using hash part nt understand one could example redirect nefarious page much worried replace logic", "d": "1/2013"}, {"body": "hp fortify", "d": "1/2013"}, {"body": "issue blocker context company huge security restrictions fortify deems issue critical like stops deployment gon na work nwertzberger solution see happens post ever solutions discover create", "d": "1/2013"}, {"body": "ok come research exploit question seems rely something like following using fragment value attacker execute arbitrary code choosing solution use similar nt evaluate html thus prevents arbitrary code execution hash certainly valid attack vector nt see encoding hash value prevent since malicious fragment values would likely come user supplied url phishing attack neither passed complete solution avoid using methods evaluate html arbitrary user input nt think proposed solution prevent attack certainly nt make change silence security warnings going close one wrong exploit another separate exploit missed please let know reopen", "d": "1/2013"}, {"body": "deanapeterson also using hp fortify issues backbone flagged similar situation critical issues fortify need addressed order compliant wondering ended order pass fortify scans", "d": "1/2015"}, {"body": "initial suggestion used pass security scans came since moved angularjs", "d": "1/2015"}, {"body": "since never used backbone router took entire router module source since moved angular jan pm simon collierbaker notifications githubcom wrote deanapeterson also using hp fortify issues backbone flagged similar situation critical issues fortify need addressed order compliant wondering ended order pass fortify scans reply email directly view github", "d": "1/2015"}, {"body": "check nt actually seem useful since lacks caseinsensitive regex modifier urls work well", "d": "9/2015"}, {"body": "hi vicenrele updated copy underscore well backbone requires underscore higher", "d": "1/2013"}, {"body": "thanks help braddunbar problem", "d": "1/2013"}, {"body": "peetertomberg think meant understand mean view attaches limited set options directly object el events classname tagname etc special meaning view functions building dom element entire options object copied reference view rather going suggested comparing prototype object trying determine items meant attach object backbone leaves part since options passed initialize would simple enough specify options attach directly like store object modelcollection directly like view let know clears things", "d": "1/2013"}, {"body": "peetertomberg even elegant way tgriesser suggested achieved using form shown backbone javascript either specifically whitelisting properties var propsyouwant query pagenum autoload extend pick options propsyouwant using form suggesting apply options alreadyexisting properties dangerous whitelisting extend pick options keys thisconstructorprototype", "d": "1/2013"}, {"body": "understand backbone currently handles seems wrong already defined object contain certain properties eg query must duplicate initialize method values copied especially since backbone already something similar", "d": "1/2013"}, {"body": "peetertomberg saying backbone class constructors look class prototypes instantiation merge defaults prototypes supplied options calling constructor sounds like good idea actually", "d": "1/2013"}, {"body": "tgriesser right idea settings options based prototype values sounds like guessing user intent certainly nt want setting options straightforward manner like suggested much better option", "d": "1/2013"}, {"body": "issue come us espeically views way handle overriding function base view class follows javascript take options passed constructor initialize function copy object per initializeoptions array also assert exist name followed initializeoptions array constructor function options var view class include property enumerates options copied object javascript myview baseviewextend classname myview explanation mark denotes required option error thrown omitted", "d": "1/2013"}, {"body": "short answer use rather case define comparator collection keep models sorted id longer answer pinging braddunbar caseywebdev one little discussion dueling api", "d": "1/2013"}, {"body": "want keep collection sorted certain way define comparator case easy regarding reset vs update would cut reset update everything reset though slower dropping models", "d": "1/2013"}, {"body": "caseywebdev nt fire add remove events often desirable", "d": "1/2013"}, {"body": "tgriesser little confused saying add remove events nt desirable", "d": "1/2013"}, {"body": "yeah could worded much better trying say addremove always desirable", "d": "1/2013"}, {"body": "feel like completely replacing models collection disregarding previous models might well create new collection instance see add remove events helpful determining collection altered leave existing update reset serve distinct purposes", "d": "1/2013"}, {"body": "see might want smartly updating collection give events along upon imagine sortable list gets autorefreshed server polling like collaborative todo list addremoveedit part already easy events frequently thing missing reordering nt want recreate dom elements users may editing items list right either want event uses sameprevious instances want", "d": "1/2013"}, {"body": "philfreo called collection ed", "d": "1/2013"}, {"body": "ah true forgot event might want base collection order order items server response even sort clientside would automatically wanted sort attribute like might changed", "d": "1/2013"}, {"body": "philfreo event new caseywebdev case think comparator likely answer certainly nt replaced reason rebind events recreate references replace current set models another", "d": "1/2013"}, {"body": "braddunbar agree think place stay", "d": "1/2013"}, {"body": "use reset function models removed use add function add models want use update function models changed models added ca nt use sort function models sorted server sort new collection models added", "d": "1/2013"}, {"body": "philfreo even sort clientside would automatically wanted sort attribute like might changed yup use case accounted try shadel created pull request would allow pass option yielding result looking", "d": "1/2013"}, {"body": "moving discussion pull request", "d": "1/2013"}, {"body": "want smart updatesort server side response already collection models philfreo said render dom wasteful behave smart", "d": "3/2013"}, {"body": "hi abritinthebay unable reproduce issue would mind putting together jsfiddle show getting error modifying directly", "d": "1/2013"}, {"body": "kind tricky isolate basically triggering app reset event view thislistento appdispatcher app reset thiscollectionreset causing error auth flow redirect authorized exit app trigger event clear models collections ca nt see could going wrong", "d": "1/2013"}, {"body": "ok maybe clue may execution order thing tell collection view collection listento dispatcher object rather view collection works without error idea might", "d": "1/2013"}, {"body": "hmm would nt work sets context callback listening object trying call view cause sorts problems want everything working fine let know nt case", "d": "1/2013"}, {"body": "ah makes sense also reveals putting syntax collection works view clear", "d": "1/2013"}, {"body": "ca nt nest scripts like many libraries exist augment backbone order achieve nice way nesting templates views check layoutmanager marionette chaplin viewmaster etc", "d": "1/2013"}, {"body": "yep probably want encapsulate templates views compose views create entire page", "d": "1/2013"}, {"body": "pindar yes new event triggered model fails validation making easier determine source error whether triggered failed validation client side event issue event", "d": "1/2013"}, {"body": "thx", "d": "1/2013"}, {"body": "would great release notes version contained mention change frustrating track upgrading", "d": "1/2013"}, {"body": "think event useful convince jashkenas favor purely using granular events", "d": "1/2013"}, {"body": "since still want event added default p event allow easier paging rendering backbonecollections jashkenas noted add behavior already success callback however experiences need event common enough explicitly add event pageable collections failing backbone application using backbone event also encourage efficient manipulations dom whereas events lend manipulating dom event event would provide convenient intuitive place update view reflect updated collection understand done backbone currently stands however find would add good value backbone adding event", "d": "1/2013"}, {"body": "let move discussion pull request", "d": "1/2013"}, {"body": "see signature removed backbonewraperror helper method overriding sync work better particular use cases change log", "d": "12/2012"}, {"body": "please take apologies actually using railsbackbone overrides backbonesync implementation seems bug solely railsbackbone side raised issue project codebrewbackbonerails", "d": "1/2013"}, {"body": "ran across tried removing backbonerailssync backbonedatalink asset pipeline manifest file made problem immediately resolved need files gem haha even going look anymore app seems still function maybe wrong", "d": "1/2013"}, {"body": "ended replacing railsbackbone plain backbonejs nt see advantages using railsbackbone project seems maintained nt even realise pull requests", "d": "1/2013"}, {"body": "views keeps options passed constructor need extra argument view constructor documentation actually mentions creating new view options pass merged default options already present view attached view thisoptions future reference", "d": "12/2012"}, {"body": "hi jessehouchins functions etc called context context function calling case would view object functions view prototype js var foo backboneviewextend id function return foo thismodelid view var new backbonemodel id var foo new foo model would create view id let know works reopen", "d": "12/2012"}, {"body": "changed recently forked wrote test indeed pass production app think looks viewel html element", "d": "12/2012"}, {"body": "nt believe example case", "d": "12/2012"}, {"body": "backbone nt anything much browser caching chrome certainly aggressive caching static assets make sure version urls properly use appropriate headers avoid", "d": "12/2012"}, {"body": "put plugin dependencies backbone requirejs amd loader issue check support", "d": "12/2012"}, {"body": "thanks tgriesser jquery missing dependency backbone seemed happy without error added jquery dep back cheers", "d": "12/2012"}, {"body": "think would foolproof relying view", "d": "12/2012"}, {"body": "vote used outside view", "d": "12/2012"}, {"body": "one question wanted check events properly cleaned view listening", "d": "12/2012"}, {"body": "seems see", "d": "12/2012"}, {"body": "fills gap think enhancements including model collection unbindings left implementors choose use", "d": "12/2012"}, {"body": "adding kind onremove method views default noop onremove called automatically remove ontop existing functionalities provided remove alternatively remove could also emit event listened optionally would allow implementors tack additional cleanup routine gets called automatically usecase would simplify cleanup nested views without overriding default remove method", "d": "12/2012"}, {"body": "adding kind onremove method views default noop onremove called automatically remove ontop existing functionalities provided remove alternatively remove could also emit event listened optionally nt seem like much benefit overriding", "d": "12/2012"}, {"body": "really good point consider people upgrading layoutmanager may still syntax instead continue clean", "d": "12/2012"}, {"body": "sorted", "d": "3/2013"}, {"body": "related also wondering properly cleaning events events automatically cleaned using everywhere cases wanting use need worry manually cleaning events presumably event fired autocleaned cases event never fired", "d": "12/2012"}, {"body": "please submit failing test case js test function var f function ok true var obj extend backboneevents objonce event f objoff event f objtrigger event passing currently", "d": "12/2012"}, {"body": "philfreo stoplistening clear events like events even nt called events called automatically removed", "d": "12/2012"}, {"body": "caseywebdev thought cleaned things attached via rather view context wrong", "d": "12/2012"}, {"body": "ah yes misread override event wonder common use", "d": "12/2012"}, {"body": "case one add like original implementation take care cases like automatically would autocleanup usages places people use instead make automatically get added events get removed called", "d": "12/2012"}, {"body": "failing spec", "d": "12/2012"}, {"body": "thanks pivotalleopold", "d": "12/2012"}, {"body": "sorry hijacking issue opened new one", "d": "12/2012"}, {"body": "looks like need composite key created plugin nt updated", "d": "12/2012"}, {"body": "specific temporary solution think override method run collection accounts class type id long term solution perspective concerned may require much knowledge internals collection duplication filtering works especially given functionality seems changed recently latest master branch also uncertain performance impact scenarios collection several models", "d": "12/2012"}, {"body": "caseywebdev plugin looks like workable solution problem give shot thanks", "d": "12/2012"}, {"body": "plugin may unexpected side effects feel free modify account new changes", "d": "12/2012"}, {"body": "discussion type problem spawned caseywebdev composite keys plugin", "d": "1/2013"}, {"body": "gabetax actually updated plugin work correctly", "d": "1/2013"}, {"body": "caseywebdev updated earlier today saw seems working well far tada", "d": "1/2013"}, {"body": "returns array collection though", "d": "12/2012"}, {"body": "hi believe philfreo correct returns array rewrap collection want use hope helps", "d": "12/2012"}, {"body": "see one solution", "d": "12/2012"}, {"body": "philfreo correct backbonedeepmodel would good way go something like good idea want change properties objects amp arrays models outside scope simple interface backbone provides model", "d": "12/2012"}, {"body": "hi adriaanlabusc think maybe fundamental misunderstanding particular understanding current functionality set regardless whether set happens inside kind change event fire one change event silent sets never fire change event entirely correct change made another change one event fired instance clear things", "d": "12/2012"}, {"body": "case nested set happens something like happens tests would fire change twice notice second test silent set javascript test change fires twice set run change function var model new backbonemodel modelon change function modelset b true ok true modelset true test nested set multiple times diff function var model new backbonemodel modelon change function modelset b true silent true ok true modelset true supposed happen", "d": "12/2012"}, {"body": "first example correct events continue triggered long nested changes second example however silent changes trigger changes address pull request", "d": "12/2012"}, {"body": "believe tgriesser fixed one please let us know case", "d": "12/2012"}, {"body": "hi abdulmannan probably get help documentcloud irc room backbonejs mailing list github issues issues improvements specific library also might want check tutorials blog posts example sites wiki", "d": "12/2012"}, {"body": "tgriesser posted looking backbone community answer question whereever see thnx", "d": "12/2012"}, {"body": "hi kpdecker would mind elaborating use case bit particular need suppress event right handler signature think change best previous signature include model like events", "d": "12/2012"}, {"body": "error custom error handler added concept ignored error background processes etc would trigger user facing error handlers signature success nt even match pattern adding model error callback echo ajax callbacks actually masks parameters ajaxlayer complete left raw ajax callbacks agree consistency argue mirror ajax callback apis rather trying thing", "d": "12/2012"}, {"body": "think probably still ignore error via custom option think probably best way passed error callbackhandler check callback signature please check updated version posted post commentsquestion", "d": "12/2012"}, {"body": "success error maybe beforesend split static properties sync object js backbonesync function backbonesyncerrorcall backbonesyncsuccesscall backbonesyncerror function backbonesyncsuccess function way could easily replaced user", "d": "12/2012"}, {"body": "success error handlers really little trigger event modelcollection normalize arguments fit backbone patterns passing model callback fairly easy ignore events get whatever options need rather complicate customization hooks completely necessary", "d": "12/2012"}, {"body": "guess use case hacked together using feels lot fuglier rather overriding instances mattered", "d": "12/2012"}, {"body": "kpdecker provide needed hook", "d": "12/2012"}, {"body": "eastridge methods could used implement behavior frankly moved use case dealing simpler rewrite method without emulation crap somehow made merged pull request kind becoming norm backbone projects since pr much fight get anything", "d": "1/2013"}, {"body": "closing one since main issues addressed changes", "d": "3/2013"}, {"body": "seeing change filtered following method computechanges function loud thischanged var already var triggers var current thiscurrentattributes var changes thischanges", "d": "12/2012"}, {"body": "hi amirrajan thanks bringing issue changes implementation validation change functionality since change amp validation pieces gone pretty big overhaul see validate changes take look ticketschanges see behavior master expecting reopen", "d": "12/2012"}, {"body": "hmm updated master validation nt raised set method executed lem step provide info reopen", "d": "12/2012"}, {"body": "amirrajan validate nt called anything except unless pass option", "d": "12/2012"}, {"body": "jsfiddle reproducing issue pointing latest version backbone windowamodel backbonemodelextend validate function attrs consolelog validating attrsname amp amp attrsnamelength gt consolelog invalid return long windowaview backboneviewextend initialize function windowappmodelbind thislog log function e consolelog event raised e windowapp windowappmodel new amodel windowappview new aview consolelog begin consolelog setting name windowappmodelset name validate true consolelog setting name windowappmodelset name validate true consolelog setting name windowappmodelset name validate true consolelog change event message nt consolelog setting name windowappmodelset name validate true consolelog end", "d": "12/2012"}, {"body": "cleaned fiddle bit nt look like change event triggered mentioned one call current value model value nothing changing values invalid value never persisted model", "d": "12/2012"}, {"body": "specific scenario save button appear value changed model error hide save button show error notification return value back original value event raised leaving view invalid state showing error", "d": "12/2012"}, {"body": "js fiddle showing particular scenario start typing text box save button appears expected type one number puts invalid state see button disappear error div appear remove additional number event raised continue remove numbers change name event raised", "d": "12/2012"}, {"body": "amirrajan think best approach would use validate particular case validate custom function see jsfiddle validations used check invalid attributes persisted rather deal ui updating", "d": "12/2012"}, {"body": "gotcha one thing note step change change name events raised however validation every subsequent edit step change name event raised inconsistent", "d": "12/2012"}, {"body": "ah great call exiting early validate leaves internal changing flags incorrect state pushed fix move higher call take care thanks pointing amirrajan", "d": "12/2012"}, {"body": "adding link commit reference", "d": "12/2012"}, {"body": "definitely though need dom sort eg jsdom also reuse templates server side leaving rendering extension client", "d": "12/2012"}, {"body": "speaking braddunbar jashkenas feel changing look like instead unnecessary dependency makes implementing environments little harder since longer relying dom library", "d": "12/2012"}, {"body": "layoutmanager fully working nodejs method override change one line", "d": "12/2012"}, {"body": "simple repro use strict var router backbonerouterextend routes create var router new router backbonehistorystart pushstate true root c", "d": "12/2012"}, {"body": "mornin macewindu seems escaped change log ignore query string parameters check background subject update change log accordingly", "d": "12/2012"}, {"body": "added change log", "d": "12/2012"}, {"body": "braddunbar change threw baby bath water already possible resolve using appropriate route pattern developers want query string support parameterization forcing router strip query string patterns option disable behavior big mistake one prevents upgrading unfortunately please reconsider", "d": "11/2013"}, {"body": "drrcknlsn looked though discussion somewhat disjointed point repeating quite bit respond would appreciate", "d": "11/2013"}, {"body": "key names json case sensitive however override keyname backbone uses model ids setting idattribute option", "d": "12/2012"}, {"body": "got", "d": "12/2012"}, {"body": "function however want deal", "d": "12/2012"}, {"body": "seems like valid usecase backbone handle correctly already handles error codes differently example", "d": "12/2012"}, {"body": "would nt handling status codes jquery issue pindar running error version backbone jquery using", "d": "12/2012"}, {"body": "caseywebdev suggestion working also agree philfreo could backbone task tgriesser save function line set function tries set empty string therefore returns false write little test next days jquery works right point calls success callback think either backbone handle special case user copy attributes like caseywebdev suggestion jquery backbone", "d": "12/2012"}, {"body": "pindar taken care let know works thanks pointing issue", "d": "12/2012"}, {"body": "tgriesser thx change tried test new master version trouble changes maybe answer new question", "d": "1/2013"}, {"body": "tgriesser finally tested changes works thx", "d": "1/2013"}, {"body": "happens response seems like something really wrong open ticket", "d": "1/2015"}, {"body": "nt get problem response must include messagebody thus always terminated first empty line header fields", "d": "1/2015"}, {"body": "get response error code error callback object key expected", "d": "1/2015"}, {"body": "cleanest solution would remove option otherwise housekeeping passed contexts still looks weird like nt really listening anything merely mediating", "d": "12/2012"}, {"body": "liked implicit context better plus makes job way cleaner always another context really", "d": "12/2012"}, {"body": "agree caseywebdev gsamokovarov", "d": "12/2012"}, {"body": "ditto context argument makes little sense monday december tim griesser wrote agree caseywebdev gsamokovarov reply email directly view github brad", "d": "12/2012"}, {"body": "lovely", "d": "12/2012"}, {"body": "purpose pretty clear convert raw server responses attributes modelcollection saying seems like valid use case mutators though computed fields setter support check backbonemutators simple gist wrote liking parts backbonemutators whether type feature might ever end backbone core debate always override model set bind one model additional work manually", "d": "12/2012"}, {"body": "yeah implemented similar functionality project back reason brought figured converting json responses meaningful data model convert back send wire implement across board make flexible saying nt mix parsing mutating purposes align", "d": "12/2012"}, {"body": "yep philfreo right idea really need parse data always think would situation describe", "d": "12/2012"}, {"body": "nt think need manually send charset perhaps problem serverside configuration anyone else confirm", "d": "12/2012"}, {"body": "looking spec think technically braddunbar talking maybe basing allowing option override", "d": "12/2012"}, {"body": "question anyone else encountering problem would thought would raised head long ago real never seen backbonerails apps", "d": "12/2012"}, {"body": "never encountered apps work use exclusively", "d": "12/2012"}, {"body": "confirm behavior chrome send contenttype applicationjson firefox contenttype applicationjson though based testing nt made difference data recorded server side gets recorded sending known characters nischi test case causes problem", "d": "1/2013"}, {"body": "yes switzerland german umlaut sample st\u00f6rchelstrasse would transfer string backbone send st rchelstrasse similiar", "d": "1/2013"}, {"body": "well know interesting chrome dev tools say sent request payload though server side gets recorded fine gets returned fine response put request code works addition maybe server side code platform working charset selection based contenttype header defaulting something else", "d": "1/2013"}, {"body": "check server side thats first idea server self iis make special put manual backbonejs chrome right chars requeset payload think would correct manual backbonejs works chrome safari little bit strange different browser send different charsets think", "d": "1/2013"}, {"body": "exactly issue also swiss characters", "d": "1/2013"}, {"body": "using iis well narenranjit", "d": "1/2013"}, {"body": "issue also tomcat railo", "d": "1/2013"}, {"body": "mdekmetzian server ubuntu", "d": "1/2013"}, {"body": "nischi application tomcat jaxrs jersey works without chrome safari tested chrome winosx safari osx without issue went reconfirmed environment sure nt affecting users isnt jashkenas tgriesser still think issue serverside time adding charset nt hurt would remove pain point least users", "d": "1/2013"}, {"body": "serverside fix sounds correct also able specify charset html meta tags believe case us shoving seems fairly wrong anticipate us cutting release change getting slew bugs folks whose simpleminded servers nt understand contenttype bizarre closing", "d": "3/2013"}, {"body": "try setting contenttype client request instead trying server solved problem guess correct client decide encoding sent", "d": "6/2013"}, {"body": "views passed options object string passing string undefined behavior", "d": "12/2012"}, {"body": "yes inconsistencies ideal vote stick backbone style callbacks stay agnostic possible available needed", "d": "12/2012"}, {"body": "seems like fine change since style exposed etc fact even used backbone internally pauluithol custom override", "d": "12/2012"}, {"body": "like caseywebdev change well keeping model first argument callbacks events would much cleaner", "d": "12/2012"}, {"body": "braddunbar yes nt really preference either resolution although always related model would nice noticed discrepancy got errors old plugin expected first argument", "d": "12/2012"}, {"body": "sounds good feel free pr merge change", "d": "12/2012"}, {"body": "coming right", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "one access remaining error handler options code changes nt complete api success error", "d": "12/2012"}, {"body": "options need access xhr stored think everything accessible sure mean complete though would mind expanding", "d": "12/2012"}, {"body": "kpdecker realized posting referring option backbone handles passed nt considered think alright pass also documented way", "d": "12/2012"}, {"body": "braddunbar zepto error include additional data explaining exact error issue http stack ajax stack ex type things like timeout parsererror others error handler place error information silently discarded way us access short zepto global ajax events without drawbacks regarding complete handler seems like consistent one way ajax callbacks either augment augment parameters data object", "d": "12/2012"}, {"body": "regarding extra zepto argument previous implementation nt provide argument either right think providing signature would fine though also accomplished via probably preferred way implement things backbone nt use internally", "d": "1/2013"}, {"body": "previous implementation exposed raw zepto endpoints perinstance basis via sync note assignment done point instance override behavior implementation still possible wrapping perinstance basis complete side think question one api internal code mucking former would argue api consistency three cases provided later arguments kind pointless safe implement anyway", "d": "1/2013"}, {"body": "check discussion", "d": "12/2012"}, {"body": "decided optin must pass want force validation place validation happens default idea invalid models locally still changing never try persist invalid model", "d": "12/2012"}, {"body": "let tag em close em folks", "d": "12/2012"}, {"body": "top bottom code act identically", "d": "12/2012"}, {"body": "nt inside collection instead view", "d": "12/2012"}, {"body": "clear", "d": "12/2012"}, {"body": "looks like wrong great news thank", "d": "12/2012"}, {"body": "problem", "d": "12/2012"}, {"body": "afraid going away soon nt issue within day two thanks", "d": "12/2012"}, {"body": "closed normal sync firing", "d": "12/2012"}, {"body": "moszeed need ignore event", "d": "12/2012"}, {"body": "braddunbar want fire save success set params save sry bad english", "d": "12/2012"}, {"body": "nt fired success callback effect right", "d": "12/2012"}, {"body": "using seem happen see", "d": "12/2012"}, {"body": "able reproduce jsfiddle using release something missing", "d": "12/2012"}, {"body": "well look used isequal set method model", "d": "12/2012"}, {"body": "apsavin correct regression brought fixed grabbing latest master fix issue time", "d": "12/2012"}, {"body": "well isvalid method latest master", "d": "12/2012"}, {"body": "apsavin validation going back different form see ticket", "d": "12/2012"}, {"body": "update", "d": "12/2012"}, {"body": "hi elob thanks pointing understand aliases would nt significant speed gain using newer form indeed case probably continue use maintain much backward compatibility possible unless deprecated currently said seem unlikely someone using latest version backbone would using jquery lt", "d": "12/2012"}, {"body": "right alias still got speed gain made change use newest jquery project iam currently developing ive done lot optimization instance aproxmatly views think maybe proxy instead bind made speed gain iam work right dont code base post benchmark later", "d": "12/2012"}, {"body": "cool using bumping jquery requirement bumped underscore latest release", "d": "12/2012"}, {"body": "agreed anyone using latest backbone likely going using jquery", "d": "12/2012"}, {"body": "speed gain would nice well", "d": "12/2012"}, {"body": "simple perf", "d": "12/2012"}, {"body": "tgriesser pr updated jquery dep docs", "d": "12/2012"}, {"body": "jashkenas cool bumping dependency guess", "d": "12/2012"}, {"body": "first birthday", "d": "12/2012"}, {"body": "bump whatever appropriate fine added said pr change vendor copy jquery latest stable version", "d": "12/2012"}, {"body": "moved bumped vendored copy discussion move", "d": "12/2012"}, {"body": "removed increase performance seem inconsistency open pr discussion", "d": "12/2012"}, {"body": "see think change mentioned changelog", "d": "12/2012"}, {"body": "believe addressed try pulling branch", "d": "12/2012"}, {"body": "sweet thank", "d": "12/2012"}, {"body": "nejj thanks issue although able reproduce jsfiddle something missing", "d": "12/2012"}, {"body": "tgriesser sure going tried code morning worked fine thanks quick response though", "d": "12/2012"}, {"body": "closing discussion moved", "d": "12/2012"}, {"body": "fine use also would using two routes exactly function distinction callbacks would receive one argument thing fixes nt think necessary", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "nice would really like see merged leads expected behaviour think", "d": "12/2012"}, {"body": "yep agree caseywebdev case bit contrived think viable use cases", "d": "12/2012"}, {"body": "biegel thanks opening issue even though quite since opened suggest still perceive problem deficiency docs please submit patch pull request discuss details context thanks", "d": "3/2013"}, {"body": "afraid able reproduce error added test case commit give look let know misunderstanding like reopen ticket feel free send pull request adds failing test case test suite", "d": "12/2012"}, {"body": "set collection", "d": "12/2012"}, {"body": "sorry double commit issues local repository added testcase fail opinion", "d": "12/2012"}, {"body": "thanks bringing tjoekbezoer work expected", "d": "12/2012"}, {"body": "took time find app nt working expected glad able help backbone pure awesome sauce", "d": "12/2012"}, {"body": "yea think one got introduced new use constructor", "d": "12/2012"}, {"body": "makes difference", "d": "12/2012"}, {"body": "nt believe ever event looking", "d": "12/2012"}, {"body": "ah appears previous developer added fetch override base collection handle loading image error handling thanks", "d": "12/2012"}, {"body": "neat stuff thanks sending note", "d": "12/2012"}, {"body": "use new event", "d": "12/2012"}, {"body": "really want truly global jquery already got covered", "d": "12/2012"}, {"body": "yup works", "d": "12/2012"}, {"body": "fwielstra thanks pointing opened pull request adds change log take look let know mind", "d": "12/2012"}, {"body": "indeed weird edge case change property listening inside event triggers listener final change called change nt occurred time final change hits change suppressed example following works makes sense would change event fired regardless added test provided fix", "d": "12/2012"}, {"body": "thank", "d": "12/2012"}, {"body": "oh spoke soon fix causes event triggered value changedattributes incorrect updated testcase", "d": "12/2012"}, {"body": "thanks updated case one sure value accurate loud change fired twice inside change loop item reflect changes time hits last event see case illustrated specific reason need trigger loud change inside listener attribute", "d": "12/2012"}, {"body": "guess expect general change event include changedattributes well individual item change events way listen either event something new data case works specific use case trying use modelbinder bind dom elements calculated model values values calculated response model item change events modelbinder binds general change event determine elements update", "d": "12/2012"}, {"body": "raindrift case loud change inside callback achieve could nt accomplished changes nested change callback", "d": "12/2012"}, {"body": "mean like need one change handler able access changedattributes since change handlers nt even mine inside packages things like dom binding autosave stuff moment first handler makes nested model change eats changedattributes subsequent handlers thanks working tricky case explain", "d": "12/2012"}, {"body": "raindrift like nt firing loud changes inside individual change handlers", "d": "12/2012"}, {"body": "oops linked wrong fiddle suggestion make decent workaround though watch model changes instead item changes seems work case since running handlers extra times nt hurt anything behavior little weird though example second change event fired twice without changedattributes times change event fire nothing changed case think make code work way though behavior definitely changed others may run problem also", "d": "12/2012"}, {"body": "gave try closer one item set inside change handler changedattributes ever contains final one example", "d": "12/2012"}, {"body": "happening fiddle sets first change handler callback invoked another loud called model currently listening turn changes state second change b handler callback level first invoked new recent set change item two called reset loud change called time change change fired amp b wo nt called third time also reset empty b triggered level empty also see related discussion nested changes conclusion nested changes difficult probably avoided particularly need know changed since guaranteed next change let know clears things ideas better solution cases", "d": "12/2012"}, {"body": "thanks explaining detail gathered reading source fwiw writing new code attempts rather bunch existing code working fine upgraded last version able sure decision replace code wellconsidered still wonder differently moment managed work around moving calculated model changes api layer little sad since adds server roundtrip cleaner anything work around client see find personal time coming week work implementation duplicates behavior thanks help", "d": "12/2012"}, {"body": "sure thing feel free open pull request something think might help similar cases", "d": "12/2012"}, {"body": "hang sec close love braddunbar done lot thinking desired semantics behavior nested changes take look specifics", "d": "12/2012"}, {"body": "thinking back regression likely introduced changecenter series commits might worth bisecting going back compare difference approach", "d": "12/2012"}, {"body": "one note playing test case bit desirable work properly second change handler nt miss attribute changes unrelated inner changes happened happen current implementation tweaked allow better go back implementation fix", "d": "12/2012"}, {"body": "issue glad found thread revert", "d": "12/2012"}, {"body": "raindrift monken pretty big changes simplify events specifically changes longer queued triggered later rather silenced entirely makes easier keep track changing attributes cases like one mentioned fiddle working take look see takes care issues reopen one", "d": "12/2012"}, {"body": "result changes modelchange gone good", "d": "12/2012"}, {"body": "monken seems consensus find little discussion feel free chime good use case needing", "d": "12/2012"}, {"body": "perfectly fine build object pass modelset instead perfectly fine", "d": "12/2012"}, {"body": "jashkenas recently said idea behind method ensure model never exists invalid state beauty method though determine exactly invalid state case probably better running even creating new invalid model", "d": "12/2012"}, {"body": "documentation says validate called set save could define properties set call instantiation error handling setup javascript var validationtestmodel backbonemodelextend validate function attrs attrsfoo foo return foo foo", "d": "12/2012"}, {"body": "caseywebdev dperrymorrow thanks replies nt think either reasonable solutions following reasons current implementation actually allows create model invalid state define invalid state missing required field must one common validation scenarios directly call prototype method every instatiation smells besides ca nt get correct context value validatemethod nt instance call also smell create model without attributes setting attributes separately nt allow create model invalid state forces define validation rule states model must defined backbone supports constructor initialization explicitly require workaround new strict handling validation breaking change many use cases codebase models created attributes often think clearer seems constructor initialization fail silently without reasonable way handling nt usage problem bug", "d": "12/2012"}, {"body": "saying define validation rules feel following happen javascript var validationtestmodel backbonemodelextend validate function attrs attrsfoo foo return foo foo var instance new validationtestmodel foo bar consolelog instance gt undefined everyone agreement could pull request", "d": "12/2012"}, {"body": "added proposed fix error function constructor options called handle error case", "d": "12/2012"}, {"body": "dperrymorrow good question happen sure even possible return constructor using consider function foo return undefined fooprototypeprotoproperty bar var isntance new foo instanceprotoproperty gt bar instantiation must fail throwing error use case might appropriate would prevent creating models partial attributes sure common use case imo changes validation handling rolled back especially validation constructor level removal", "d": "12/2012"}, {"body": "tgriesser thanks solution would fix immediate issue catching error however nt address inconsistency whole validation scheme outlined previous comment still entirely possible create invalid models required fields whose presence validated", "d": "12/2012"}, {"body": "agree fencliff dperrymorrow validation construction time breaks many common valid use cases often models constructed incomplete data data added model saved automatic enforced validation occur prior save change breaks apps imagine would break many others", "d": "12/2012"}, {"body": "think common use case minimal validation something like", "d": "12/2012"}, {"body": "tbranyen yes great example common pattern broken fleshing var usermodel backbonemodelextend validate function attrs attrsusername return username required var user new usermodel id gt id never set username missing userfetch gt fails userid undefined", "d": "12/2012"}, {"body": "yep thing tbranyen mentioned lot guess nt validations issue yet great point", "d": "12/2012"}, {"body": "relative", "d": "12/2012"}, {"body": "use pattern validate values exists actually want validate user input ensure least empty string passed validation occurs easy forms default simply run validation works", "d": "12/2012"}, {"body": "sure concrete issues solved validation changes seems stricter validation rules causing problems solving limit use cases general make difficult upgrade particular aware jashkenas position would ask reconsider changes aware reasoning behind original change nt great suggestion solve less obtrusively", "d": "12/2012"}, {"body": "fencliff think stemmed", "d": "12/2012"}, {"body": "well significant change meaning valid means state model never whereas previously referred state could persisted would guess people would assume expect previous meaning least new validate much less useful", "d": "12/2012"}, {"body": "agree andornaut consider following ruby rails pretend class person validates make sure name blank ruby person personnew name gt personsave gt false personisvalid gt false create object invalid andornaut said cant persist", "d": "12/2012"}, {"body": "think behavior accepted constructor used option good way handling issue could return previous implementation issue could solved easily although elegantly additional option would override used internally follows effect would lead api behavior compliant enable versatility usage admit ugly", "d": "12/2012"}, {"body": "fencliff curious model validation allow", "d": "12/2012"}, {"body": "wyuenho currently allow still using nt trigger validation constructor many models validation would fail triggered andornaut put well made assumption validation prevent persisting model creating", "d": "12/2012"}, {"body": "slightly different interpretation clientside validation completely different serverside validation serverside validation typically validates data whole disallows persistence data whole nt valid clientside validation different typically validate partial data user fills form form fills field correctly valid clientside user proceed next field invalid serverside data whole incomplete guess case actually serverside validation clientside right validation clientside typically caseywebdev find quite tedious longer forms days nt even use anymore serverside validation lazy", "d": "12/2012"}, {"body": "changed semantics nothing cause error tried call would something folks would generally approve", "d": "12/2012"}, {"body": "definitely use validations make optional default true use default constructor", "d": "12/2012"}, {"body": "changed validate semantics nothing set cause error tried call save would something folks would generally approve nt necessarily know better able use backbone validation often revert app changes make case", "d": "12/2012"}, {"body": "jashkenas yes definitely caseywebdev one issue used constructor imo validation run inside constructor several reasons enumerated would require workaround object construction", "d": "12/2012"}, {"body": "andornaut said use constructor", "d": "12/2012"}, {"body": "caseywebdev sounds good", "d": "12/2012"}, {"body": "jashkenas would much approve support caseywebdev presumably many others use case validation configurable default support backwards compatibility addition passing would great default would configurable prototype something like disable globally backbonemodelprototypevalidateset false disable specific model var foomodel backbonemodelextend validateset false would make consumer code much terse less kludgey application know models model never validated", "d": "12/2012"}, {"body": "jashkenas think calling save would definitely lot less confusing fits people typically think validation consistent wo nt case data valid everywhere except bootstrapping case data invalid time persist valid people seem use validation lot nt validate much preference", "d": "12/2012"}, {"body": "folks thread want really super helpful would great yall would take tgriesser patch try apps let us know works well", "d": "12/2012"}, {"body": "tested seems work covers problems discussed issue also tested previously closed regressions seems work also passing thanks", "d": "12/2012"}, {"body": "looks like good", "d": "12/2012"}, {"body": "seems like using patch true option save requires attrs object passed attrs object simply passed server yes works reason nt track changes sync send potential changes state may changed server side well ca nt assume backbone model knows sure state server times want something robust going account given limitation think current semantics nice complement want update complete representation want update specific subset attributes define cases sent never doubt", "d": "12/2012"}, {"body": "seems like using patch true option save requires attrs object passed attrs object simply passed server think happen patch true apply attrs model sync simply send attributes changed since last sync clear still sending server", "d": "12/2012"}, {"body": "nope see previous tickets nt use backbone model validation validating forms use ensure model never allowed enter invalid state validating forms often easiest use simple function knows partial validity instead adding properties model may need rolled back later really want use model add function instead using builtin", "d": "12/2012"}, {"body": "true", "d": "12/2012"}, {"body": "tag em close em please", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "yeah noted changelog lookup", "d": "12/2012"}, {"body": "hi cdata background discusses change reasons since sorts via way retrieve index model without traversing entire collection using currently", "d": "12/2012"}, {"body": "thanks response background optimization makes sense checking index added model minority use case work using facilitate insertion new item views list component recycles item elements scrolls index easily determined time handling add event disparity add remove case suggested change might unintended", "d": "12/2012"}, {"body": "also remove event", "d": "12/2012"}, {"body": "way figure index model without event", "d": "12/2012"}, {"body": "ah ha good point gone really dislike asymmetry two anyone brilliant ideas address", "d": "12/2012"}, {"body": "symmetry fwiw", "d": "12/2012"}, {"body": "nope whole idea object calling context context", "d": "12/2012"}, {"body": "adding optional context would definately speed things kind callbacks instead write manually trivial functions view delegate exact jquery method el think", "d": "12/2012"}, {"body": "maybe", "d": "12/2012"}, {"body": "using context means events easily removed cleaned view destroyed another context would mean would nt happen need manually clean events like", "d": "12/2012"}, {"body": "yeah ok makes sense way tbranyen solution perfect ty", "d": "12/2012"}, {"body": "believe bug pull", "d": "12/2012"}, {"body": "yep really bad regression introduced let cut new release soon possible", "d": "12/2012"}, {"body": "give irc channel mailing list try nt issue", "d": "12/2012"}, {"body": "removal object promote agnosticness backbone regarding server side communication using socketio example object nt make sense pass extraneous data need response body along collection data", "d": "12/2012"}, {"body": "make response carry metadata example bulk response look something like", "d": "12/2012"}, {"body": "nah caseywebdev beat", "d": "12/2012"}, {"body": "thinking issue well many public apis support pagination way sending headers eg github nt apis users backbone control changing server api question removing make old code overrides longer works answer people override also parsing headers", "d": "12/2012"}, {"body": "working solution stay tuned", "d": "12/2012"}, {"body": "understand desire stay transit agnostic use backbone localstorage frequently hand sending metadata headers seems somewhat common others trying deal change api nt control workaround less elegant fairly simple overriding collection method javascript sync function var xhr xhr backbonecollectionprototypesyncapply arguments pass xhr first reset event thisonce reset function thisonreset xhr return xhr onreset function xhr stash arbitrary headers thiscount xhrgetresponseheader count", "d": "12/2012"}, {"body": "hmmm removing seems create trouble worth see ways getting one override like use like unfortunately method works jquery moment zepto yet return like dmotz processes headers parsing ca nt conditionally parse response data according information provided headers left old code wo nt break need contortions like methods really ca nt think reason causing trouble used used convenience users need purist think go back", "d": "12/2012"}, {"body": "passed object default method add hash accessible way method keeps ajax specific code inside default function still allowing access object also opens door useful information passed overridden methods opened pr", "d": "12/2012"}, {"body": "sorry listento applies objects backboneevents mixed would work jquery object", "d": "12/2012"}, {"body": "right backboneevents methods work backboneevents dom events got jquery", "d": "12/2012"}, {"body": "thanks quick response", "d": "12/2012"}, {"body": "hi using backbone magic method right migrating custom library using jquery element would perfect prevent memory leak workaround best david", "d": "12/2013"}, {"body": "hey dfournier try using namespaces use hood removing jquery events bound view easy calling within view instance example use custom namespace want events", "d": "1/2014"}, {"body": "chrizel discussed mostly along seeing performance boost actually put place fix incorrect functionality idea change events triggered event loudly changed changing b silent trigger change said see application functionality would issues presents changes reading example sounds like select functionality actually set changing update selected state model also view attached model nt provisional change performance reasons mention custom rerender significant enough need need rerender whole view rather letting subviews render independently", "d": "12/2012"}, {"body": "particular example bug state change nt change particular use case probably number good ways model let know want explore", "d": "12/2012"}, {"body": "important use case also feel always valid state change makes valuable passing flag one work around might easier instead putting attribute preparation logic using flag overriding constructor work well", "d": "12/2012"}, {"body": "think change deliberate see commit change log also mentions", "d": "12/2012"}, {"body": "yeah saw", "d": "12/2012"}, {"body": "nt able force invalid state model still disable validation temporarily detaching validator like behavior less surprising", "d": "12/2012"}, {"body": "related pull", "d": "12/2012"}, {"body": "yep intentional change model invalid state still able invalid data nt make much sense least way backbone validation intended work easier use ensuring models never able enter invalid state want arbitrary function use different function", "d": "12/2012"}, {"body": "example nt run time would want instantiate new modelcollection child object model would instantiate child object parse true force call parse modelcollection", "d": "12/2012"}, {"body": "quite right description nature change incorrect", "d": "12/2012"}, {"body": "sorry nt get use new feature work nested child model fetch parent nt work parent json response models javascript var childmodel backbonemodelextend var parentmodel backbonemodelextend initialization fetch right place get help thanks", "d": "12/2012"}, {"body": "nope nt seem right starters prototypes work try mailing list irc room help", "d": "12/2012"}, {"body": "thought parse high level ie related prototypes feature would bubble children models fetching data parent model level thanks anyway hard useful work quick feedback", "d": "12/2012"}, {"body": "could use something like", "d": "12/2012"}, {"body": "wow event awesome documenting", "d": "12/2012"}, {"body": "definitely one product lot good discussion", "d": "12/2012"}, {"body": "thanks fell cracks", "d": "12/2012"}, {"body": "related", "d": "12/2012"}, {"body": "huh previously would already trigger events passedin model case worked nt", "d": "12/2012"}, {"body": "previously could call stand alone thing necessary second argument could stringified think issue", "d": "12/2012"}, {"body": "even events added", "d": "12/2012"}, {"body": "triggered instead consolidated brad fri dec jeremy ashkenas notifications githubcomwrote even sync error events added reply email directly view github", "d": "12/2012"}, {"body": "nervetattoo share us code specific details use case really something nt better handled", "d": "12/2012"}, {"body": "sorry unclear change migrating code indeed somewhat js var handleuserloggedout function response type xhr var def deferred resperror error render view user log back track failed requests reapply later return defreject resperror return defresolve resp backbonesync backbonesync backbonesync function method model options csrf token var formtoken configformtoken method read amp amp formtoken optionsdata optionsdata defaults optionsdata csrftoken formtoken need override sync method attaching stuff every request well piping success requests error requests different errors", "d": "12/2012"}, {"body": "playing around bit sure think wise us quite agnostic sync already nt work arbitrary objects least defined unusual data objects specific purposes adding csrf token global wrapper function recommend using jquery global ajax options instead overriding backbone sync", "d": "12/2012"}, {"body": "worse yet longer works", "d": "12/2012"}, {"body": "behavior expect jed", "d": "12/2012"}, {"body": "uh behavior written docs", "d": "12/2012"}, {"body": "think better keep option available thing quite silly make priority line something like follow need document verbosely let say true collection performs specified true performs nether option nt performs", "d": "12/2012"}, {"body": "sorry slipped cracks documentation commit take look patch let know writing nt clear enough", "d": "12/2012"}, {"body": "right give desired effect like see default behavior letting etc", "d": "12/2012"}, {"body": "nt get last comment mikeknoop calling view would remove events related event view context", "d": "12/2012"}, {"body": "omitted code since tracks exactly", "d": "12/2012"}, {"body": "totally get thanks", "d": "12/2012"}, {"body": "one listen unlisten", "d": "12/2012"}, {"body": "worth adding lm nevermind prefer", "d": "12/2012"}, {"body": "nt see many use cases anymore want views referencing model change something model changes removed view removed remains oneoff use cases addition takes care missing something backbone gradually going deprecate", "d": "12/2012"}, {"body": "look code actually calls calling storing reference event ways bound object context prefer consolidated syntax calling passed instead way around requires source modification function name callback context eventsapi name callback context amp amp callback return thisevents thisevents var list thisevents name thisevents name listpush callback callback context context ctx context isobject context amp amp contextlistento null contextlistentocall context name callback return listento function object events callback var listeners thislisteners thislisteners var id objectlistenerid objectlistenerid uniqueid l listeners id object objecton events callback return nice tediously move arguments around hundreds changes app fact already implementing get cleanup benefits free", "d": "12/2012"}, {"body": "seems like lot forms time familiar would tough see go one thing shorter opposed also something cool sides inversion available use forms sticking around yet another option would going back recommending using aliases", "d": "12/2012"}, {"body": "one thing found performancewise significantly worse layoutmanager wanted use event bubbling nt option added additional seconds run tests", "d": "12/2012"}, {"body": "tbranyen actually main reason proposing use implicit tremendously less expensive terms complexity performance", "d": "12/2012"}, {"body": "shorter best let drop put functionality rather prefer let sniff type second argument rather create new api happily using jquery api performs differently based argument type length", "d": "12/2012"}, {"body": "changing naming makes sense good enough asis braddunbar plenty room perf optimization", "d": "12/2012"}, {"body": "one thing found performancewise significantly worse wut faster", "d": "12/2012"}, {"body": "works anything extended dom events outside scope eg views bind window document currently events wo nt caught either could hash extended support event delegation elements eg", "d": "12/2012"}, {"body": "meleyal extend cases js var myview backboneviewextend delegateevents function window scroll thisonscroll myviewsuperdelegateeventsapply arguments undelegateevents function window scroll thisonscroll myviewsuperundelegateeventsapply arguments", "d": "12/2012"}, {"body": "caseywebdev thanks still propose extending events hash would nicer api", "d": "12/2012"}, {"body": "nice discussion nt see clear proposal going keep names designed avoid much confusion possible certainly deprecated going away basic primitive event binding inversionofcontrol versions may convenient specific cases always appropriate going inherently bit overhead using inverted versions track state ends would nice slim much possible", "d": "12/2012"}, {"body": "throw one comment love total elegance framework seems faint sense confusion many ways skin cat appropriate use form imagine people new backbone confronted similar sense confusion clear documentation appropriate use cases consensus would helpful also given sticking around reiterate would helpful names clearly suggest inversion control terms concrete proposal mine double symmetry much desirable opposed doubly asymmetric breaking changes one extra alias documentation update", "d": "12/2012"}, {"body": "whoops thanks", "d": "12/2012"}, {"body": "wow report issue", "d": "12/2012"}, {"body": "fixed last half hour try", "d": "12/2012"}, {"body": "fixed master min ago", "d": "12/2012"}, {"body": "better thanks", "d": "12/2012"}, {"body": "well nt know formsite works guess figured fixed problem got jquery working code always short adding noconflict helped", "d": "12/2012"}, {"body": "also whereas sure pass models methods response well wondering rename primary use", "d": "12/2012"}, {"body": "got failing test case include", "d": "12/2012"}, {"body": "hi evadnoob version underscore using change requires use", "d": "12/2012"}, {"body": "try upgrading", "d": "12/2012"}, {"body": "upgraded underscorejs problem uncaught typeerror read property user undefined getnested backbonemodelextendset backbonemodel child", "d": "12/2012"}, {"body": "ok odd may backbone deep model use thisescapedattributes subsequent call get escapedvalue never uses escapedvalue variable commented backbone deep model rolling", "d": "12/2012"}, {"body": "ah yes uses changed moving forward glad got worked", "d": "12/2012"}, {"body": "yes model defaults nt value set value would work expected nt set", "d": "12/2012"}, {"body": "understand working intended based tests however expected opposite defaults means underscore expected mean thing makes defaults less useful case push defaults back application level thanks quick response", "d": "12/2012"}, {"body": "agree tbranyen disconcerting work", "d": "12/2012"}, {"body": "braddunbar complaint naming method underscore think semantics need changed", "d": "12/2012"}, {"body": "would also problem assume created initial model like morganick original example instead passing constructor used behavior exist well", "d": "12/2012"}, {"body": "jashkenas like name wondering semantics different seems discussed tangentially documentcloudunderscore documentcloudunderscore", "d": "12/2012"}, {"body": "confusing part defaults whether null value according undefined value truly available object null considered personally json consuming always gives keys sets value treat however understand would make impossible initialize model attribute value default value", "d": "12/2012"}, {"body": "think probably change worth making mostly use case described make defaults little useful anyone really wants set nulls set em", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "thanks guys high fives around", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "going rethink parse bit think muddled moment really apply remote endpoint clientside data model case", "d": "12/2012"}, {"body": "like change patch put patch true nt mind asking", "d": "12/2012"}, {"body": "working api supports partial updates via concept already using direct xhr calls would probably easy add support api framework perhaps importantly aws elbs load balancers nt allow also rules using heroku right rails also started partial updates via eventually moving kept backwards compatibility lot apis support partial update via far fewer actually work use even technically correct http method name", "d": "12/2012"}, {"body": "looking oneliner change plus optionally documentation", "d": "12/2012"}, {"body": "aws supporting might good reason avoid patch altogether partial put anyone else opinion", "d": "12/2012"}, {"body": "although maybe included backbone aws forced finally get act together support seriousness nt think worth dropping supported particular vendor maybe adding line mentioning docs changes also philfreo believe achieve functionality looking overriding options", "d": "12/2012"}, {"body": "nice workaround", "d": "12/2012"}, {"body": "works sucks every case would handle everywhere", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "ok cool thanks", "d": "12/2012"}, {"body": "bug copying since missing return statement adding correct code case anyone else copypasting", "d": "12/2012"}, {"body": "yes feel free use master meantime", "d": "12/2012"}, {"body": "something strange going code base sure help debug rest assured remove model collection want pursue please include reproducible test case jsfiddle folks look", "d": "12/2012"}, {"body": "backbone loaded cases root global object nt called window like server side see previous tickets better way load different js environments love hear get pull request also environment loading code way nt evaluate reference global object probably break variety things", "d": "12/2012"}, {"body": "thanks providing different method detect server vs browser would problem however ensuring function return returns global object problem kanso module loading scheme mimics node request facility apparently nt modeling behavior ask fix", "d": "12/2012"}, {"body": "could nt work", "d": "12/2012"}, {"body": "good point thing use master", "d": "12/2012"}, {"body": "um", "d": "12/2012"}, {"body": "nt realize wound shipped master", "d": "12/2012"}, {"body": "master worked anyone else code must", "d": "12/2012"}, {"body": "would code define jquery", "d": "12/2012"}, {"body": "blowing require gets code work kanso project fix tue dec pm casey foster notifications githubcomwrote would code define jquery backbone windowjquery app starts reply email directly view github", "d": "12/2012"}, {"body": "ok nevermind think see removed chasing couple issues comments way speed item still stands", "d": "12/2012"}, {"body": "hi wyuenho thanks bringing sort called automatically place immediately adds n log n running time number operations called one place comparator defined remove comparator automatically calling sort methods next major version put optionsindex back adds constant time add nt think unreasonable expect users call sort comparator future version addition removal could already optional want control nt use right", "d": "12/2012"}, {"body": "operations indirectly call also calling comparator defined right solution detach comparator attach back collection call sort afterwards little awkward mean say really expect new model added end instead resorted middle collection calling cause surprising behavior careful", "d": "12/2012"}, {"body": "hmm seem odd would trigger sort especially given send pull request fix", "d": "12/2012"}, {"body": "ok addresses issue places sorting", "d": "12/2012"}, {"body": "thx quick fix however nt understand closed guess confused user expect called mean expect constant time operation inserted well known place instead call please please consider removing comparator automatic sorting next major release please api like array anyway", "d": "12/2012"}, {"body": "understand point nt think going anywhere handy fairly easy opt abstractions cost try minimize", "d": "12/2012"}, {"body": "wyuenho yes nt use comparator unless actually want hardly ever use point collection maintains sorted order times naturally expensive thing much like validate want always apply cost continual validation models damned", "d": "12/2012"}, {"body": "wyuenho pass option collection methods use sorting done iterator cake eat", "d": "12/2012"}, {"body": "let discuss pr", "d": "12/2012"}, {"body": "noooooo jquery vs patch mention extra serverside dependency", "d": "12/2012"}, {"body": "yeah give big using jquery events would really limit ability use bb modelscollections microframework environments outside node browser plus hard dependency nt control unlike underscore unless fallback internal backbone events even caseywebdev improvements look pretty solid", "d": "12/2012"}, {"body": "speed test right looking thanks casey early days backbone jquery events nt support arbitrary objects since known performance vaguely thought would worth looking thanks jsperf", "d": "12/2012"}, {"body": "merely sake accuracy believe jquery supported events arbitrary objects backbone entire lifetime nt well known", "d": "12/2012"}, {"body": "ah ha thanks correction alex", "d": "12/2012"}, {"body": "jashkenas jquery faster object event emitters would make attractive use cc ajpiano others reported problems jquery object event emitter perf jquery ui maybe", "d": "12/2012"}, {"body": "yep able rapidly trigger events many callbacks rest system update single perfimportant bit backbone view creationdelegation much stuff ajax urls performance nt consideration said think good arguments depending jquery keep backbone events working folks using models server side faster implementation would certainly attractive", "d": "12/2012"}, {"body": "nice wookiehangover another change think worth taking note optional routes syntax", "d": "12/2012"}, {"body": "reset events include previous list models added convenience unless triggered sort reason believe trigger sort instead reset different things", "d": "12/2012"}, {"body": "ooh saves ton work many thanks getting started", "d": "12/2012"}, {"body": "another change collection reset call collection parse function well model", "d": "12/2012"}, {"body": "wookiehangover also might want clarify remove ender support know tests dropped still assigned", "d": "12/2012"}, {"body": "added backboneview dispose assuming details still discussion per comments reword changelog warning added backboneview dispose unbind view model collection automatically called backboneview remove", "d": "12/2012"}, {"body": "philfreo imagined new features would link documentation rather trying explain detail tgriesser good point wonder worth mentioning also added note gsamokovarov ahh good catch jashkenas problem editing original post relevant updates arise please feel free make edits see fit", "d": "12/2012"}, {"body": "philfreo imagined new features would link documentation rather trying explain detail yes adding new method hardly accurate current state way works totally changed backwards incompatible imo unwise way", "d": "12/2012"}, {"body": "philfreo point longer form discussion appropriate documentation remove dispose fwiw added note remove behavior changing eventually would also link relevant documentation", "d": "12/2012"}, {"body": "added note remove behavior changing thanks definitely necessary", "d": "12/2012"}, {"body": "also like know exactly changed regarding querystrings routes", "d": "12/2012"}, {"body": "wookiehangover object supports global events", "d": "12/2012"}, {"body": "paulmillr added", "d": "12/2012"}, {"body": "core confettiball", "d": "12/2012"}, {"body": "caseywebdev tada", "d": "12/2012"}, {"body": "added new event", "d": "12/2012"}, {"body": "nice work wookiehangover think need upgrade guide gt goes detail changelog", "d": "12/2012"}, {"body": "yes put little upgrading section top docs", "d": "12/2012"}, {"body": "perfect", "d": "12/2012"}, {"body": "addyosmani actually started work something approaching last night list broken categories new features enhancements minor changes potentially breaking changes last category good diving rod upgrade guide", "d": "12/2012"}, {"body": "upgrading guide addyosmani proposed wookiehangover jashkenas", "d": "12/2012"}, {"body": "names pending got nice speed boost", "d": "12/2012"}, {"body": "needs note", "d": "12/2012"}, {"body": "great work wookiehangover", "d": "12/2012"}, {"body": "needs note removed handle lookups cid also", "d": "12/2012"}, {"body": "backbonemodel parse run initialization believe true pass options", "d": "12/2012"}, {"body": "attributes replaced default values specified constructor", "d": "12/2012"}, {"body": "wookiehangover confident list reasonably complete want read commits double check", "d": "12/2012"}, {"body": "happy able close ticket", "d": "12/2012"}, {"body": "fireworks woo", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "jashkenas looks like got around yes feel like reasonably complete list definitely helped sitting issue tracker couple days thanks philfreo caseywebdev paulmillr et al helping make accurate", "d": "12/2012"}, {"body": "properties designed setters getters would hard keep sync vote want id classname could simply", "d": "12/2012"}, {"body": "getting updated moreover docs say also create cached el reference move view delegated events old element new one clearly lot attach view element ca nt also update also understand problem element multiple classes right add classes view case take second argument specifying class name attach", "d": "12/2012"}, {"body": "getting updated nt div default clearly lot attach view element thing besides update cached el event delegation element related properties accessed plus two characters type", "d": "12/2012"}, {"body": "ok missed big point even getting updated think ok access directly", "d": "12/2012"}, {"body": "downside view know ahead time used use accordingly child placed parent nt concern child given following view expect b c foo class name new myview el render el view myview b viewrender el view myview c viewsetelement el render el", "d": "4/2013"}, {"body": "want comparator function nt called model context called collection context passed model first argument however want", "d": "12/2012"}, {"body": "works well thank advise", "d": "12/2012"}, {"body": "actually pretty sweet sugar ask", "d": "12/2012"}, {"body": "anything backbone multiple ways go looking believe simplest approach would create function directly calls taking options param pass errorsuccess callbacks data needed custom calls would application specific nt think anything else would added core might want check backbonesync docs take look sync handled see calloverride purposes", "d": "12/2012"}, {"body": "yep makes lot sense best way define methods models appropriate actions different folks different rest endpoints different ways communicating nt think much common ground provide beyond plus", "d": "12/2012"}, {"body": "thanks response guys", "d": "12/2012"}, {"body": "check could js var collection new mycollection store new models collectionnewest add fired new model collectionon add function model thisnewestpush model update would called new models added collectionon update function updatedomherewiththesemodels thisnewest thisnewest get models collectionfetch remove false course simplicity pr merged wink task would involved current", "d": "12/2012"}, {"body": "aye would handled pr could also handled current master taking action success callback called hoping something nt require binding add event ie return response success callback trigger new event change returns new models think definitely weakness collectionfetch method called event backbone provides act newly added models provide new models", "d": "12/2012"}, {"body": "hswolff updated pr pass models update trigger would let manually want ed models listening event", "d": "12/2012"}, {"body": "patch merged handle use case still get granular events use lazily render render wish", "d": "12/2012"}, {"body": "thanks update jashkenas however issue nt resolved main issue bind individual events event bind completed best point use callback", "d": "12/2012"}, {"body": "still work coffeescript pending collectionon add model gt pendingpush model collectionfetch update true success gt render pending", "d": "12/2012"}, {"body": "aye currently however think adding event calling would good include like event exists support updating collection bulk event exist similar reason reason type behavior best left callback opposed triggering event", "d": "12/2012"}, {"body": "event would nt know tell case clear collection composed new set models go ahead rerender case already received series granular events app responded would nt clear upon getting event without information added removed changed said want one feel free", "d": "12/2012"}, {"body": "bugging revised example without event js var collection new mycollection store new models collectionnewest add fired new model collectionon add function model thisnewestpush model updatedom var updatedom debounce function contains recently added models update dom collectionnewest get models collectionfetch remove false update true", "d": "12/2012"}, {"body": "aye many ways implement behavior thanks alternative attempt caseywebdev really think adding event calling common want batch work collections definitely way jashkenas outlined included backbonejs core something think would benefit wide range users passed event would collection array new models added array add behavior simple modifying would also save performance drag jashkenas method would add food thought", "d": "12/2012"}, {"body": "known issue fixed branch", "d": "12/2012"}, {"body": "jashkenas master charset content type", "d": "11/2013"}, {"body": "luck stack overflow backbone irc channel github issues development backbonejs troubleshooting specific applications", "d": "12/2012"}, {"body": "thanks", "d": "12/2012"}, {"body": "server response determine want send back nt ever want sync attributes clientside never return anything want subset attributes return subset attributes", "d": "12/2012"}, {"body": "get better help debugging irc channel mailing list", "d": "12/2012"}, {"body": "neat idea afraid concept fetched yet nt clear one many backbone apps talking singleuser app sure possible assume collection fetched guaranteed sync server soon one user potentially able collaborate system longer question fetched stale changed server since fetched given differing semantics best person determine whether collection sync backbone recommend setting appropriate flag collection", "d": "12/2012"}, {"body": "surely exact issues models still exists technically data potentially sync still make effort track relative state things like etc seems odd models collections thanks feedback though", "d": "12/2012"}, {"body": "nope different concept means model exists client server something possible know note model fields", "d": "12/2012"}, {"body": "maybe nt explained well described almost exactly want happy keep extending objects anyway nice contribute", "d": "12/2012"}, {"body": "lennym primary internal use determine url use ie post put collections id thus need distinction", "d": "12/2012"}, {"body": "braddunbar maybe nt", "d": "12/2012"}, {"body": "lennym nice contribute many things nt quite fit core backbone great folks package simple plugins want add models collections would great", "d": "12/2012"}, {"body": "hi kitanata one discussed quite times example please give comment still disagree thanks", "d": "12/2012"}, {"body": "see problems functionality core since jquery selector nt live caching layer subject invalidation dom structure within view changes drastically would open door issues confusion vain selectors go rerendered selector caching performance real point please correct bad assumption keep mind jquery keeps internal cache last accessed selectors within sizzle imagine folks real benefits lean towards trivial side overallperformance scale would benefit apps frequently access unoptimized slow selectors leads conclusion great functionality plugin extend backbone net benefits end negligible apps less typing really real benefit letting reference cached selectors cache eg", "d": "12/2012"}, {"body": "agree wookiehangover let leave plugins extensions", "d": "12/2012"}, {"body": "agree reasoning see clean another issue views may attached existing dom elements ui hash would need filled initialize whereas cases would need filled render appreciate clean backbone important keep way aware jquery caching however counter point although people could create hash whenever appropriate render initialize reality people new backbone end retyping selectors time want reference element sure agree bad practice work backbone might change something like code provided however elegance structure declaring dom elements property view lacking moreover still repeating selectors due events hash javascript events click input namevalue valuefldonclick render function thisui valuefld input namevalue another approach record solves redundancy issue perhaps little cleaner first approach selectors property could map element names jquery selectors names could used place selectors events hash separate property example selectors function evaluates selectors fly since jquery apparently caches us consideration dom changes return appropriate jquery object javascript selectors valuefld input namevalue events click valuefld valuefldonclick render function selectors valuefld focus shorten use els instead selectors seems like common access dom elements inside view keystroke significant principle advantages see less typing eliminate redundancy issue jquery selectors added structure help newbies avoid bad practices", "d": "12/2012"}, {"body": "conversation interesting leads believe developers making small enough views many cases find writing code like javascript events click button doaction doaction function ev var formdata form serialize little selector lookup since everything scoped view get away easily looking button totally see situational though definitely cases repeated actions single jquery object like jquery past taught cache locally javascript doaction function ev var form form formon submit function formattr action something formsubmit anyways mostly commenting saw tutorial recently marionette found rather odd lookups done declaratively way", "d": "12/2012"}, {"body": "interesting find selector lookup constantly also edited original comment oversights errors selectors evaluated fly avoid problem described wookiehangover selectors would clearly need function curious braddunbar additional thoughts cool see ideas evaluated big thanks helping awesome library", "d": "12/2012"}, {"body": "considering plugin route drop support ie implement getters way could keep declarative binding object instead function lookupscache transparently", "d": "12/2012"}, {"body": "main concern trading little typing added complexity wookiehangover says vs see savings typing already fairly short lose bit flexibility feel though hack around often agree tbranyen point many selectors usually though always sign view split", "d": "12/2012"}, {"body": "eliminating redundancy events hash added structure also significant benefits would say definitely hear added complexity concern though appreciate effort goes keep backbone light weight thanks also future reference appears question weather jquery actually caches selectors", "d": "12/2012"}, {"body": "dgbeck looks like question sizzle nt introduced core lot improvements since edit looks like sizzle cache length might recent jquery", "d": "12/2012"}, {"body": "ah cool although looks like sizzle caches compiled selector functions elements makes sense considering dom manipulation could invalidate cache elements taking step back though sure much caching elements impacts real world performance always using select elements image pretty quick go search view element food thought feature implemented would easy enough write plugin adds view option cache actual dom elements instead always evaluating selectors fly", "d": "12/2012"}, {"body": "greengit using jquery used pretty easily minimal pubsub without reliance dom would nice able something like focus underscore seems mostly functional programming helpers sure event aggregator fits well", "d": "12/2012"}, {"body": "tgriesser agree pubsub jquery also think nondom utilities available one library underscore fits bill well environments like node rhino one would generally use jquery friends think underscore providing event emitter would nice", "d": "12/2012"}, {"body": "greengit ca nt speak rhino node already nice much full featured event emitter looking minimal stand alone pubsub enough solutions many might nice nt really fit well functional nature library event mechanism would oo avoided underscore outside oop wrapper", "d": "12/2012"}, {"body": "tgriesser thanks nt know node programmer would still want underscore pubsub ability see utility library functional programming toolbox javascript example underscore methods like general purpose methods ratelimit execution function nt think anything functional programming think pubsub general useful part utility library like underscore feel nt belong backbone", "d": "12/2012"}, {"body": "greengit thanks opening issue understand sentiment entirely going close reasons proposed functionality underscore opened issuepull request backbone would nt able take advantage moving events object upstream actually exists anyway echoing tgriesser comment lots options event systems javascript client server furthermore really pining backbone exact events functionality reasonably well isolated easy enough pull use independently relavent lines look tgriesser using jquery events absence backboneevents done several projects even sample implementation backboneesque model events laying around also happened gist node eventemitter ported client side throw looking decent events implementations", "d": "12/2012"}, {"body": "agree first point opened", "d": "12/2012"}, {"body": "let tag em close issues folks", "d": "12/2012"}, {"body": "get help try irc room mailing list instead opening bug ticket", "d": "12/2012"}, {"body": "hi coodoo thanks patch think better served using plain array separate collection nt think introduce second set models", "d": "12/2012"}, {"body": "website mentions license check last sentence second paragraph", "d": "12/2012"}, {"body": "yes read nt include website", "d": "12/2012"}, {"body": "ah get really asked sorry nt know site autogenerated code documentation contained code right correct think includes site", "d": "12/2012"}, {"body": "site autogenerated still licensed mit feel free whatever like looking forward seeing translation", "d": "12/2012"}, {"body": "thanks always forget invisible files", "d": "11/2012"}, {"body": "hi lfilho much scoping backbone using example compiled following javascript since variable defined local scope value used property want use explicitly instead also leave statement altogether option js template lt var url gt null variable x compiled function x var p jarrayprototypejoin printfunction pjcall arguments p var url p return p case must always use gain great deal speed hope helps", "d": "11/2012"}, {"body": "hello brad thank response course things clearer right actually nothing backbone root cause simpler expecting maybe would nt bad idea warning reminder bb users somewhere something like use bb reserved keywords inside templates url fetch etc otherwise due scoping issues linktotechnicalexplanation model method properties get overwritten maybe somewhere could find think good thing docs mean specially explanation like course dumb think honest mistake easy made anyone agree afterall var url bla something silly one could easily say template file speaking template part view automatic already coding template file nt even remember thoughts would gladly write pull request small text snippet warningreminder thanks", "d": "11/2012"}, {"body": "definitely easy mistake make however since backbone template engine agnostic nt think warnings go anywhere warning could placed documentation underscoreorg would probably best alongside option docs since option makes issue moot", "d": "11/2012"}, {"body": "yeah although shame know many people fall trap agree bb concern take look underscores docs see something could improve regarding thanks", "d": "11/2012"}, {"body": "coming soon issue count gets bit lower see close one please", "d": "11/2012"}, {"body": "thanks caseywebdev", "d": "11/2012"}, {"body": "yes afraid fails model collection time collection wo nt error think makes logical sense would strange collection fire error event model nt contain use callback case", "d": "11/2012"}, {"body": "fact however works without wait true since add model collection ajax request", "d": "11/2012"}, {"body": "right exactly case model collection", "d": "11/2012"}, {"body": "okay thank jashkenas", "d": "11/2012"}, {"body": "hi jashkenas also reason validate signals error create wait true invalid event propagated collection appears fail silently collection point view", "d": "8/2013"}, {"body": "caeost ran issue resorted following workaround use case js var collection new backbonecollection var model collectioncreate data wait true modelvalidationerror", "d": "6/2015"}, {"body": "correct treated atomic operation want add multiple rows check potentially delete one add one time", "d": "11/2012"}, {"body": "sure mean currently added one time row added first later row b added view listens collection add event needs change collection row b added propose automatically make changes collection model added listen add event ca nt anything backbone nt finished work yet", "d": "11/2012"}, {"body": "ah see want wait backbone finish adding removing current models proceeding rest action collectionon add defer functionthatchecksforeditstateandasksfordeletes", "d": "11/2012"}, {"body": "sure exactly issue looks like though issue fixed master already tried master instead", "d": "11/2012"}, {"body": "looks like defer essentially settimeout deterministically wait call stack clear tiny chance could still fail usually need use settimeout order make sure code already finished running probably architectural problem code", "d": "11/2012"}, {"body": "sorry posted wrong pull request ended taken care point remains master", "d": "11/2012"}, {"body": "actually yes think exactly issue loop master replaced", "d": "11/2012"}, {"body": "braddunbar thoughts one", "d": "11/2012"}, {"body": "think parsing default good thing", "d": "11/2012"}, {"body": "seems like always parse true", "d": "11/2012"}, {"body": "bit confused current behavior would nt better never parse default always parse function defined", "d": "11/2012"}, {"body": "yep sounds great", "d": "11/2012"}, {"body": "like", "d": "11/2012"}, {"body": "jashkenas raised concern commit", "d": "11/2012"}, {"body": "jashkenas problem still exists reopen issue scenario server responds fetch deep data document containing data nested models collections fetching root model parse part data model nt know anything child model parsing requirements root model able pass parse flag chain child models yet instantiated perform parse part data important therefore able push parse flag chain done setting default optionsparse true indicated code original post thoughts", "d": "11/2012"}, {"body": "marcusmacinnes master", "d": "11/2012"}, {"body": "perfect thanks", "d": "11/2012"}, {"body": "legal useful backbone allow representations model merely two different models id want share model share", "d": "11/2012"}, {"body": "nt make clear want write decoupled code app share models would ideally want fetch model one place app fetch another instance object place app instances model represent consistent instance object change one model wold also change model way parts app nt know still consistent data something similar spinejs dynamic records", "d": "11/2012"}, {"body": "share model instances still decoupled code exactly go depends application structured usually use event bus system pass model instances throughout application way another technique detailed scroll sharing models views gives functionality want", "d": "11/2012"}, {"body": "thanks opening issue bug bit shocking one looks like variety workarounds fixes server ajax options quick search would lead answers", "d": "11/2012"}, {"body": "thanks figured probably come back closed bad", "d": "11/2012"}, {"body": "yes positional mapping route arguments function arguments design instead us trying decompile function detect match names use mapping function normalize arguments want use generic handler", "d": "11/2012"}, {"body": "ok thanks quick response jashkenas", "d": "11/2012"}, {"body": "quite like first two options propose event name second parameter solves common use case fairly concise elegant way without adding much api breaking existing functionality", "d": "11/2012"}, {"body": "nt think wise add forwarding feature api simply triggering event another object nt hard merely find syntax bulky alternative ways write", "d": "11/2012"}, {"body": "wondering underscore included packagejson yes feel free remove nt want", "d": "11/2012"}, {"body": "lot people using lodash way change jquery nt hard dependency able change jashkenas", "d": "3/2013"}, {"body": "hi andrejj thanks reporting sure version backbone using fixed master hope works", "d": "11/2012"}, {"body": "using latest stable one tnx quick response", "d": "11/2012"}, {"body": "probably best way obtain model collection set models collection collections sure valid easytouse hand use plain models array one attribute define basic functions need check links might useful", "d": "11/2012"}, {"body": "please try google group irc stackoverflow questions instead opening ticket", "d": "11/2012"}, {"body": "changelog mentions multiple models id longer allowed single collection", "d": "11/2012"}, {"body": "explains missed thanks behavior still belongs docs reading changelog libraryapietc necessary understand", "d": "11/2012"}, {"body": "note want latter duplicate model merge current existing one version master optional parameter merge true", "d": "11/2012"}, {"body": "thanks quick turnaround", "d": "11/2012"}, {"body": "would bet people use backbone nt use coffeescript though p easily something subclass", "d": "11/2012"}, {"body": "would also like see support put backbone core since coffeescript using good success call function", "d": "11/2012"}, {"body": "thanks answers guys know stuff already posting feature requestpull request since find appalling link lines code backbonesuper project compensate single unwritten line bb part", "d": "11/2012"}, {"body": "subclass backbone vanilla classes projects think point backbone little changes like easily accomplished without interfering others ideas vanilla class see example still want get core would set proper pull request merging click away", "d": "11/2012"}, {"body": "looking solution dealt already question original class rather accommodating another language javascript right line development version backbone make coffeescripters life easier add single extra line even characters allow javascript developers benefits", "d": "11/2012"}, {"body": "closing already discussed length primarily", "d": "11/2012"}, {"body": "back", "d": "11/2012"}, {"body": "hi integralist definitely initialize view second form need extra parentheses would nt recommend however somewhat unclear", "d": "11/2012"}, {"body": "hi ajaxsolutions thanks opening issue hoisting issues caught test suite compressors generally reduce one declaration need unless specific piece code clarity increased using one var declaration rather optimize readability", "d": "11/2012"}, {"body": "checked afraid got bad news working fine double check make sure got doctype defined site trying start history dom finished loading fine", "d": "11/2012"}, {"body": "received permission denied message documentdomain set document seems known issue", "d": "11/2012"}, {"body": "reproduce problem following code works expected code uses vanilla backbone model object extending backbone model book class code defines another question version backbone using", "d": "11/2012"}, {"body": "chris somewhat related workaround work little simply passing directly object literal", "d": "11/2012"}, {"body": "ok sorry think question version pertinent taken existing project brand new javascript development issue googled backbone jsfiddle used first entry fiddle reproducing problem project exactly assumed documentation incorrect without proper checks first nt realise project using old version jsfiddle also using older version sorry wasting time first thing checked doubt updating latest version fix problem apologies", "d": "11/2012"}, {"body": "thanks help bret", "d": "11/2012"}, {"body": "problem welcome js development", "d": "11/2012"}, {"body": "thanks massive learning curve", "d": "11/2012"}, {"body": "problem convinced something done idea since calling routernavigate way every time", "d": "11/2012"}, {"body": "afraid without test case way reproduce somehow nt much going able help never observed suggest keeping using live app adding test script quickly tries run number routes predefined order", "d": "11/2012"}, {"body": "hi charleskline would say depends number points much functionality need dozens maybe even hundreds models probably ok thousands tens thousands models probably start introduce nontrivial overhead would guess nt need model point definitely something prototype use performance data experience", "d": "11/2012"}, {"body": "hi sterlingwes already implemented master branch used via please let us know nt function properly", "d": "11/2012"}, {"body": "fantastic thanks brad letting know nov pm brad dunbar notifications githubcom wrote hi sterlingwes already implemented master branch used via collectionadd models merge true please let us know nt function properly reply email directly view github", "d": "11/2012"}, {"body": "hi beatkyo version backbone using version master work sample requires use leading trailing slash nt already would mind giving shot version master", "d": "11/2012"}, {"body": "hi sample tested master version working expected however using still wrong query parameters outputs outputs use master version next release thanks braddunbar", "d": "11/2012"}, {"body": "great glad works", "d": "11/2012"}, {"body": "surface seems convenient similar features caused rather subtle bugs instance take another model argument source quite bugs think explicit pass good thing case", "d": "11/2012"}, {"body": "hi marcvdm thanks posting really nt enough information give practical solution provide sample code illustrating problem relation backbone glad take look", "d": "11/2012"}, {"body": "hi marcvdm problem specific backbone issue common one many run using javascript browser environment variable usually defined browser pointer global scope recommended stay away using pointer scope rather something like", "d": "11/2012"}, {"body": "stillmotion thanks explanation used variable allot code never ran intro problems tested internet explorer changed new variable called smile thanks tip thou", "d": "11/2012"}, {"body": "ca nt well nt point validation ensure model never enters invalid state server wants send incomplete model relax validation add another function restrictive version", "d": "11/2012"}, {"body": "see point probably skipping validation meaningful create authentication logic current example based cookies example model validation used plugin backbonevalidationjs class session extends backbonemodel urlroot sessions idattribute userid defaults authenticated null email null password null csrftoken null validation email required true pattern email minlength password required true minlength initialize gt sync resetpassword resetpassword gt set password null silent true app initialization model fetches backend url sessionscurrent backend answers response json whether current user token cookie http header authenticated includes additional params userid email csrftoken response see initial get password model validation fail asking relax validation least initial get say turns current user authenticated backend login dialogbox appears user enters email password push login button calls modelsave loginandpasswordhere sync security purposes like reset password attribute model makes sense", "d": "11/2012"}, {"body": "yep would nt use function instead", "d": "11/2012"}, {"body": "could often times folks want change events update things initialize events attached example could get behavior removing event inside instead disabling fact", "d": "11/2012"}, {"body": "hmm events could function sometimes need trigger event handler initialize", "d": "3/2013"}, {"body": "people might find modify events object method like js var myview backboneviewextend events click foo handleclickfoo initialize function options get called initialize events hash dynamically changed fiddling method", "d": "5/2013"}, {"body": "hi mikeknoop become rather common question late rather certain backbone handling differently taking account nonpushstate browsers change url without page refresh remaining incorrect url acceptable two choices apps serverrendered content use fallback machanism described make sure app rooted correctly means nonpushstate browsers handle loading content page loaded rendered clientside use hashchange routing require page refresh nonpushstate browsers said hybrid form like use pages server rendered content client rendered content", "d": "11/2012"}, {"body": "mean starting history example see event docs nt mention anything else", "d": "11/2012"}, {"body": "nt realize documentation reopen add gist passing indicate want use hash based routing browsers nt support pushstate opting instead full page refresh would prevent swapping url mentioned", "d": "11/2012"}, {"body": "sounds like exactly want backbone already account scenario realize thanks pointing hopefully docs addition thread guide folks similar situation", "d": "11/2012"}, {"body": "hi considering javascript new backbonerouterextend routes home login login home function alert hi home page login function alert hi login page function never want hashbased routing pushstate available backbonehistorystart pushstate true hashchange false following use case serverside generated content browser capabilities example enabled disabled browse well alert alert nt want hashbased routing serverside generated content nt routing quite annoying little patch lem submit pr reference issue", "d": "11/2012"}, {"body": "fixed", "d": "11/2012"}, {"body": "closing favor", "d": "11/2012"}, {"body": "adamglass thanks opening issue opened add change future please feel free make pull request things like helps cut issue noise one follow question incorrect text may explain typescript description file backbone wrong well huh", "d": "10/2012"}, {"body": "typescript essentially javascript application scale development typed superset compiles javascript video anders explains pretty well anyway make type checking useful need essentially typed descriptions frameworks start one backbone sample people building complete one latter described reset requiring first argument looked documentation found inconsistent thus issue", "d": "10/2012"}, {"body": "jachor thanks opening issue originate real world usecase curious people actually using attributes names edit something actually tripping people", "d": "10/2012"}, {"body": "wookiehangover new js app thing hit spend time debugging list attribute names causing problem longer favorite firefox watch", "d": "10/2012"}, {"body": "theory coffee people new backbonecollection name dexter morgan profession blood spatter anaylst shoes sneaky boots name debra morgan profession miami metro lieutenant watch fossil peoplewithwatches peoplefilter person gt personhas watch peoplewithwatcheslength webkit firefox obviously many ways could affect real application like said wookiehangover interesting never mentioned", "d": "10/2012"}, {"body": "like said wookiehangover interesting never mentioned js programmers quickly learn name keys objects things like much agree problem javascript nt correct hash primitive time hottest hot code paths nt think wise us insert check every lookup said folks start run frequently reconsider", "d": "11/2012"}, {"body": "hi pistacchio say either approaches fine works application large application event driven model help keep code modular testable smaller app least one less pages keeping logic central router might work better", "d": "10/2012"}, {"body": "using mutuallyexclusive css classes real nice way workspace setmode help tab workspace setmode search tab", "d": "11/2012"}, {"body": "always enough one instance model belong many collections make perfect sense explained initializeconstructor documentation snippet creating new view options pass attached view thisoptions future reference several special options passed attached directly view model collection el id classname tagname attributes", "d": "10/2012"}, {"body": "mornin yahasana convention instance use fairly open ended take look related source fairly short read notice attached property used one time disposal convention optional think documentation covers pretty well", "d": "10/2012"}, {"body": "mornin alexeypetrushin seems app rooted tried using", "d": "10/2012"}, {"body": "thanks advice actually root fixed hack instead falling back hashurls fall back page reload solution hacking backbonejs hardcode always available wo nt redirect hashurls updating method use redirect page reload push state available maybe worth add option backbone router something like fall back redirects instead hashurls push state available", "d": "10/2012"}, {"body": "see option passing cause backbone never use hash based routing", "d": "10/2012"}, {"body": "set wo nt work router wo nt redirect good also stops recognizing urls firing correct route actions get empty screen happens function implemented disabled argument passed false return null url instead actual url correct route handler wo nt called", "d": "10/2012"}, {"body": "afraid nt quite understand provide example code illustrates problem", "d": "10/2012"}, {"body": "sample code wo nt work old browsers correctly try navigate first chrome internet explorer type home url html var router backbonerouterextend routes home home lt p gt home function alert route home url fired new router backbonehistorystart pushstate true hashchange false simple http server responding url html page javascript var http require var fs require fs req res consolelog processing requrl reswritehead contenttype texthtml resend fsreadfilesync backbonerouterhtml listen", "d": "10/2012"}, {"body": "thanks example alexeypetrushin confirm issue running locally however using backbone replacing current master solves problem would mind giving shot", "d": "10/2012"}, {"body": "backbone never attaches view dom nt know wo nt happen want event feel free trigger", "d": "10/2012"}, {"body": "hi moudy exactly use something like following accomplish goal", "d": "10/2012"}, {"body": "braddunbar yes means every template needs reflect well need tojson take option conditionally namespace parse method modifying data coming seems like would appropriate way modify data going", "d": "10/2012"}, {"body": "right way modify data going closely match original example", "d": "10/2012"}, {"body": "braddunbar means every corresponding template need account namespace distinction calling rendering view saving server seems bad template data structure coupled data server expects", "d": "10/2012"}, {"body": "pass options uses context view disable wrapping data view", "d": "10/2012"}, {"body": "yethee right written something like nice need pass options conventions set assume models render correctly json called", "d": "10/2012"}, {"body": "moudy good points nt consider nested models", "d": "10/2012"}, {"body": "braddunbar yeah rendering nested models gets tricky realized example would nt work would need something like prettiest piece code something like would nice", "d": "10/2012"}, {"body": "curious ca nt method model typically end modifying model data one way another passing template never found anything wrong additional method similar braddunbar example overriding imo extension always favored complicating method signatures", "d": "10/2012"}, {"body": "wookiehangover could able declare much nicer adding another method whether server expects attributes namespaced varies enough apps option would useful would allow projects like backbone rails need override sync add namespace main thing struggling way pass options called means needs return data server expects default generally everywhere else used rending template view maybe namespacing better suited pluginextension although found hard patch add without recreating whole method", "d": "10/2012"}, {"body": "definitely wrong using situation patching correct way add functionality certainly without replacing whole method would use something like following thanks input wookiehangover thanks sticking moudy", "d": "10/2012"}, {"body": "imo extension always favored complicating method signatures wookiehangover wonderful sentiment think backbone espouses already perhaps elevate place somewhere conspicuous reference", "d": "10/2012"}, {"body": "braddunbar got thanks", "d": "10/2012"}, {"body": "braddunbar added tao backbone godmode", "d": "10/2012"}, {"body": "tao backbone ooh pretty fun idea might make nice section homepage", "d": "10/2012"}, {"body": "would really help developers get speed currently reading backbone source effective way understand backbone underlying philosophy tao might way codify modelview also going braddunbar point think framework backbone way", "d": "10/2012"}, {"body": "yes particularly backbone lightweight people tend misuse tao section things like managing sub views amp amp events state amp shared state views view models routers etc", "d": "10/2012"}, {"body": "yes", "d": "10/2012"}, {"body": "hi pmaccart reason ca nt use event collection trigger callback", "d": "10/2012"}, {"body": "started using scale application upwards layers nested backbone views cases became unwieldy supply modelscollections way views well keeping track particular modelscollections fetched experimenting deferred pattern found much pleasant code particularly cases single view requires multiple models pattern works great single view managing collections lots nested views rely different combinations data render things break much cleaner able provide deferred fetch trust collectionmodel fetch invoked upon would provided callbacks pull request shortly", "d": "10/2012"}, {"body": "closing pull request created issue still working polishing github skills", "d": "10/2012"}, {"body": "need model fulfillment handler promise take look singleline plugin note due save still need use either", "d": "6/2013"}, {"body": "nice seems backboneesque", "d": "10/2012"}, {"body": "thanks opening issue alexeypetrushin like feature considered please reopen pull request", "d": "10/2012"}, {"body": "alexeypetrushin thanks opening issue would confuse line properties model instance model attributes would likely cause lots breaking changes", "d": "10/2012"}, {"body": "maybe nt explained clearly nt mean implement new type setter change behavior showcase one many possible usage attribute setter extensions ie proposed change wo nt change anything gives users ability easy extend setter wish right easy javascript optionsunset thisdeleteattribute attr else thissetattribute attr val deleteattribute function attr delete attr setattribute function attr value attr value", "d": "10/2012"}, {"body": "hi alexeypetrushin definitely ability already though agree wookiehangover comments nt recommend following code want without altering backbone", "d": "10/2012"}, {"body": "also though sure attribute set change event sure behave listeners expect attribute someone call", "d": "10/2012"}, {"body": "always add property models agree logic would easy alias transition immediately breaking also currently instance constructor nt consistent", "d": "10/2012"}, {"body": "heard convention capitalizing constructor variable never naming properties way except part namespace eg curiosity point example capitalized properties major js libraries open source projects etc", "d": "10/2012"}, {"body": "machineghost comes mind", "d": "10/2012"}, {"body": "looks good smile also sexy", "d": "10/2012"}, {"body": "afraid going leave lowercase indeed tend point constructor function serving variable name analogy english refer tom capitalize proper noun refer man happens tom lowercase despite referring entity ditto point", "d": "10/2012"}, {"body": "makes sense would consider case alias pronoun like tom also goes thomas exactly property also goes da boss though wink", "d": "10/2012"}, {"body": "wookiehangover sorry responding sooner discovered blue dot github menu kind moot example gave exactly meant part namespace defines defered class inside jquery namespace totally analogous class inside namespace class inside namespace still never seen serious js library capitalize nonnamespaced property though think jeremy deadon ticketclosing explanation", "d": "1/2013"}, {"body": "erikringsmuth thanks opening issue documentation pretty clear model instances passed model attributes type use case overriding function nt enough implementation docs creating instance model pass initial values attributes set model define initialize function invoked model created rare cases looking get fancy may want override constructor allows replace actual constructor function model", "d": "10/2012"}, {"body": "convention never pass custom parameter backbone model view since argument instead", "d": "3/2013"}, {"body": "mornin daemonz think good bit luck mailing list since github issues development backbone took liberty opening discussion", "d": "10/2012"}, {"body": "sure important distinction would call library usually hear described yes qunit used test backbone excellent unit testing tool often use test application code well", "d": "10/2012"}, {"body": "thanks ur answer important distinction agree think", "d": "10/2012"}, {"body": "afraid backbone intended work node module node modules supposed export things properly create global variables feel free change documentcreateelement behavior fork", "d": "10/2012"}, {"body": "create global variables nt say anything backbone creating global variables global scope backbone code root object node global scope seems consistent standard node module behavior", "d": "10/2012"}, {"body": "feel free send pull request currently sounds like asking backbone attach", "d": "10/2012"}, {"body": "yes right fact issue linked described comments code said setting root global nt work pr thanks", "d": "10/2012"}, {"body": "mornin gsklee definitely describing docs indicate like use pushstate support application use backbonehistorystart pushstate true nt need feature test backbone using tells backbone ie would like translate let know nt fix problem", "d": "10/2012"}, {"body": "hello braddunbar really woud like achieve get rid sign ie address bar way stop appearing inside address bar using backbone routing pushstate", "d": "10/2012"}, {"body": "use prevent client side routing make navigation use full page reload looking", "d": "10/2012"}, {"body": "nevermind figured like achieve technically impossible ie browsers without pushstate", "d": "10/2012"}, {"body": "could wrong cursory test seems indicate inside iife node", "d": "10/2012"}, {"body": "yes inside iife evaluated passed parameter iife means value determined outside iife point equal module global", "d": "10/2012"}, {"body": "right left end appears result also appears executed module way would expect executed", "d": "10/2012"}, {"body": "yes equal moduleexports global running module guess never mentioned running module part sort implied though guess could run backbone server module would nt people running backbone server running module never really occurred run way", "d": "10/2012"}, {"body": "definitely nt think first tests think comments read instead serverside enviroments nt often use serverside javascript vms", "d": "10/2012"}, {"body": "could nt even name serverside javascript platforms could nt say work guess saying exports moduleexports fine otoh would way cooler way make original comment accurate root global node experimenting rendering backbone views server way inject stubs backbone global scope effectively private module", "d": "10/2012"}, {"body": "kevindente updated comment accurate think useful definitely open another issue describing thanks pointing", "d": "10/2012"}, {"body": "always thought undocumented behavior bit strange soon remove situations useful", "d": "10/2012"}, {"body": "seems provide pattern providing default options view overridden options passed constructor iirc exactly think number places view defined default configuration options instantiate configure without losing previous defaults", "d": "10/2012"}, {"body": "think lets implement similar pattern defaults properties like defined view declaration overridden perinstance basis use parameterizing clientside templates sometimes", "d": "10/2012"}, {"body": "jashkenas like wish documented written bunch views defined defaults property calling defaults thisoptions thisdefaults beginning inititalize method realizing configure behavior sticking around happy take pass documenting doc sources live", "d": "10/2012"}, {"body": "indexhtml main repo", "d": "10/2012"}, {"body": "clarified master", "d": "11/2012"}, {"body": "nevermind found error", "d": "10/2012"}, {"body": "mornin cinezaster afraid nt quite understand problem provide reduced test case displays issue", "d": "10/2012"}, {"body": "read post mailing list think understand problem instead starting stopping history object create new one routes actually stored history object router", "d": "10/2012"}, {"body": "right routes callbacks stored added brad thu oct cinezaster notifications githubcomwrote thx braddunbar idea definitely works problem described figure reference route functions stored object created different routes functions understand route function backboneroute adds routes backbonehistory making new backbonehistory overwrites existing routes ca nt figure way adding routes functions probably backbone routing nt capable extended way using require load files structure appjs reply email directly view github", "d": "10/2012"}, {"body": "thx braddunbar idea definitely works problem described figure reference route functions stored object created different routes functions understand route function backboneroute adds routes backbonehistory making new backbonehistory overwrites existing routes ca nt figure way adding routes functions probably backbone routing nt capable extended way using require load files structure first routerjs define coremodelssession coreviewsauth corecollectionscubes function session authview cubescollection var approuter backbonerouterextend routes login showlogin logout dologout path loadapp showlogin function alert login viewauthrender dologout function viewauthlogout loadapp function path pathlength path home apploaderloadapp path true cubes trigger loading first needed app allowed view app app loaded require initiated means try add new routes try load new routes like know right way tried extend routerapp see know clue already made backbone applications never added new routes total new app structure existing backbone app", "d": "10/2012"}, {"body": "mlowicki believe bug created fix result case would fixed soon pending review jashkenas braddunbar", "d": "10/2012"}, {"body": "let close favor", "d": "11/2012"}, {"body": "yep see multiple models returned use want one model returned", "d": "10/2012"}, {"body": "yep good candidates", "d": "10/2012"}, {"body": "mornin dhruvbhatia think problem got method signature collection constructor bit mixed try instead", "d": "10/2012"}, {"body": "theluk thanks opening issue considered using set initial state better way achieve trying without getting caught internallyused hash documented accessor worth example implemented without ever worrying model previousattributes jsfiddle type state transitioning looking using event binding entire collection state attribute easily filter state transitions care still call resetting model states since resetting detected transition would nt matter anyway going close since known behavior unless compelling argument use case causing significant confusion", "d": "11/2012"}, {"body": "hm see fiddle didnt recognize problem talking talking three steps two third one important result correct states see updated jsdiddle please", "d": "11/2012"}, {"body": "part example pointed nt needed listen event take action state change remove updated example works expected say definitely odd behavior though", "d": "11/2012"}, {"body": "nope example behaving correctly activate function effective set system models become activated never tell system become deactivated therefore next time become activated change state fortunately example also simple fix nt use", "d": "11/2012"}, {"body": "fortunately example also simple fix nt use silent expect answer tell set something silently system know nothing change even internally right really stupid like would say like collections function oh add models effectively never tell system added models know whole thing would fixed one line unfortunately decided", "d": "11/2012"}, {"body": "logically course set something silently previousattributes must change mean trigger event still handle correct states otherwise renamve something like", "d": "11/2012"}, {"body": "expect answer glad hear current logic behaving correctly nt anything internal states looking simply point view external observer model new model state modelset state event state gt modelset state silent true event perspective app change made previous valid state model still modelprevious state gt modelset state event fired perspective app change made state still like times function modelset state", "d": "11/2012"}, {"body": "therefor collection new collection collectionlength collectionreset name foo name bar using silent add stuff collectionlength perspective app change made previous length collection still need change whole backbone silent applications perspective sourcecode", "d": "11/2012"}, {"body": "misunderstanding meaning events reset collection may use silent add internally implement function application still sees event means receive single event instead many events entire collection replaced similarly means receive event contents model changed", "d": "11/2012"}, {"body": "really thing fine thats wrong think see backbone something almost perfect dont want change anything simply correct", "d": "11/2012"}, {"body": "yes looks correct far observers concerned change value always", "d": "11/2012"}, {"body": "think logic makes sense silent true one would expect underlying state changed without firing change event hence silent however subsequent behavior change ie changes attribute cause change events", "d": "2/2013"}, {"body": "quidproquo think removed point future making moot point check", "d": "2/2013"}, {"body": "thanks opening issue theluk worth nt create inconsistent behavior unit tests modelparse still passing since reference changes also reflected change introduced addressing inconsistencies passed model constructor said internally consistent variable referenced constructor attributes gone ahead submitted pull request address", "d": "10/2012"}, {"body": "hi lperrinfano normalized property regardless value take following example instance change necessary", "d": "10/2012"}, {"body": "ok passing object wrapped model collectionremove thinking collection would handle transparently like collectionadd", "d": "10/2012"}, {"body": "collection get expects id model perhaps clarified docs", "d": "10/2012"}, {"body": "addresses documentation", "d": "10/2012"}, {"body": "thanks quick reply", "d": "10/2012"}, {"body": "get index model collection using indexof nt access collection view know model inside particular collection always get collection like would nt recommend storing index model time add additional model update index values model collection", "d": "10/2012"}, {"body": "feeling stupid thanks", "d": "10/2012"}, {"body": "correct server allowed update attributes cares set nt return attributes potentially large response semantics want clear value set", "d": "10/2012"}, {"body": "would recommend patching globally anything would use stringify backbone", "d": "10/2012"}, {"body": "thank opening issue tysonnero including resolve listed dependency docs even though browsers support json suggested order address issues old ie json either nt supported incorrectly implemented whatever reason easily override backbonesync include workaround caseywebdev going clobber global might well use crock implementation squirrel", "d": "10/2012"}, {"body": "seems even though include default ie native behavior happening read stackoverflow answer native implementation exists including overwrite native implementation", "d": "10/2012"}, {"body": "nt think going best interest libraries lots work put lots people", "d": "10/2012"}, {"body": "ca nt pretty easy determine grep underscore methods grep jquery methods", "d": "10/2012"}, {"body": "nt forget array underscore methods mapped collections", "d": "10/2012"}, {"body": "add empty model collection want means array models empty nothing added question nt fetched json returning", "d": "10/2012"}, {"body": "quite right use ensure undefined results return empty array thanks caseywebdev", "d": "10/2012"}, {"body": "great explanation thanks caseywebdev", "d": "10/2012"}, {"body": "link already updated go next release", "d": "11/2012"}, {"body": "either add function options second parameter success function passed raw response", "d": "10/2012"}, {"body": "anthonyshort right callback contain server response hope helps", "d": "10/2012"}, {"body": "great thanks", "d": "10/2012"}, {"body": "way leverage ajax deferred promise using way", "d": "10/2012"}, {"body": "recall correctly returns model ca nt use deferred methods like could instantiate new model call get behaviour", "d": "10/2012"}, {"body": "hi tracker backbonejs issues perhaps looking django project source repository", "d": "10/2012"}, {"body": "hi ndanson give try instead prototype properties indeed shared javascript instances unique value instance need set explicitly", "d": "10/2012"}, {"body": "suppose following var foo viewextend initialize function consolelog toast yummy var foo new foo view initialize overwritten foo initialize thereby variable foo wo nt available foo anymore design", "d": "10/2012"}, {"body": "always call method prototype like", "d": "10/2012"}, {"body": "thank prompt replies indeed solve issue question provide deep copy option rather keep writing boilerplate code assuming project likely hundreds views thanks", "d": "10/2012"}, {"body": "glad help sure boilerplate talking referring super call reality inheritance javascript calling super methods rather verbose", "d": "10/2012"}, {"body": "thank patience much appreciated understand inheritance js fact question would rather provide option deep copying within backbone framework example describing problem included potential solution functionality rephrase even would real world scenario objects x extend foo would share instance variables within backbone views example javascript general thanks", "d": "10/2012"}, {"body": "rephrase even would real world scenario objects x extend foo would share instance variables within backbone views example javascript general examples instance shares prototype variables functions one example also default values good examples assuming need", "d": "10/2012"}, {"body": "last question nt option deep copying", "d": "10/2012"}, {"body": "ndanson objects arrays passed reference object properties prototype items need set explicitly per instance deep copying costly performance standpoint almost every case different solution would better suited something still want find something backbone", "d": "10/2012"}, {"body": "ps technically way work around issue pretty fugly pretty ugly right warn", "d": "10/2012"}, {"body": "machineghost current master branch functionality supported calling collection function specifying collection options", "d": "10/2012"}, {"body": "additionally nt like initialized called always welcome overloadwrite constructor function including wrapping existing functionality whatever modifications wish", "d": "10/2012"}, {"body": "tgriesser awesome ca nt wait get released knowtheory overloading initialize function easy allowed even encouraged framework contrast writing constructor function essentially requires remaking backbonecollection scratch huge amount copypaste required zero support framework sure like replace reset initialize function another reset something replace real reset sane programmer would run screaming opposite direction code", "d": "10/2012"}, {"body": "machineghost overloading constructor nt bad think really different method override", "d": "10/2012"}, {"body": "tbranyen idea could extremely handy thanks hope sake bb users feature gets documented point future right bb documentation actually refers constructorinitialize one thing implying constructor enduser access initialize mention anywhere else", "d": "10/2012"}, {"body": "write user misunderstanding thought change event included attributes changed hash nt realize could call instead worked fine", "d": "10/2012"}, {"body": "download old docs pattern agree might nice formal way viewing archived docs", "d": "10/2012"}, {"body": "could documentation checked git along code every tagged release browse github also grab documentation html page render fine locally nt know business hosting old versions docs online considering fairly easy keep date", "d": "10/2012"}, {"body": "mornin aeosynth use purpose", "d": "10/2012"}, {"body": "docs specifically warn also used attributes multiple values use single values well ignore entirely", "d": "10/2012"}, {"body": "fine way go mainly parallelism override something special wish", "d": "10/2012"}, {"body": "case warning removed modified currently explicitly directly reading attributes hash", "d": "10/2012"}, {"body": "docs please use set update attributes instead modifying directly like retrieve munge copy model attributes use tojson instead nt modify using retrieve values perfectly good practice", "d": "10/2012"}, {"body": "js var collection backbonecollectionextend var c new collection curl pathtoapi seems like pretty simple solution", "d": "10/2012"}, {"body": "yep javascript object use quoted keys", "d": "10/2012"}, {"body": "ahh thought tried thanks", "d": "10/2012"}, {"body": "suggest passing data attribute view dom element attributes within view model attributes dataattr thismodelfoo losing scope reference uncaught typeerror read property model undefined", "d": "10/2012"}, {"body": "use function like", "d": "10/2012"}, {"body": "awesome works perfectly thank prompt responses", "d": "10/2012"}, {"body": "welcome future please nt use bug tickets tech support like try irc channel mailing list first", "d": "10/2012"}, {"body": "happy tried first one user documentcloud irc turjakas responding", "d": "10/2012"}, {"body": "must mistyped folks documentcloud freenode right", "d": "10/2012"}, {"body": "special alternative function gets called lets bind events specific view without mix trigger css selector string afraid reason would rather concatenate event selector found object syntax rather succinct without pass callback string rather reference pass function instead string callback also work calling directly", "d": "10/2012"}, {"body": "use jquery", "d": "10/2012"}, {"body": "syntax succinct puts two completely different things string effectively making mystery string first word trigger whitespace selector get trigger back split whitespace always going true maybe maybe using jquery el good suggestion thank", "d": "10/2012"}, {"body": "want unbind callback asynchronously asynchronously", "d": "10/2012"}, {"body": "nope either avoid creating models already know id copypaste put", "d": "10/2012"}, {"body": "certainly without copy paste return results original unless method", "d": "10/2012"}, {"body": "much much better idea", "d": "10/2012"}, {"body": "pretty sure intended behaviour calling without parameters removes events including setup collection might nicer could namespace events", "d": "10/2012"}, {"body": "event propagation model collection implemented using events invisible user model event handlers added model user nt mixed event handlers used internally backbone understand backbone behaves way currently argue current behavior bug", "d": "10/2012"}, {"body": "never personally run issue usually remove events using context see point", "d": "10/2012"}, {"body": "intended behavior internal events nt meant invisible hidden behind scenes convenience use extend disable see fit example use disable default modelcollection set events replace trigger slightly different circumstances", "d": "10/2012"}, {"body": "good morning fishmongr thanks pointing given backbone ignores search parameters every area including transition opposite direction agree ignored case addressed please let know nt work", "d": "10/2012"}, {"body": "great thanks speed patch verified patch fixed issue diff version backbone noticed ton changes since last downloaded version nt version number changing signify code changes", "d": "10/2012"}, {"body": "yep next released version backbone probably", "d": "10/2012"}, {"body": "thinking case well working different scenarios addressed concluded loud changes nested inside change blocks discouraged particularly inside individual attribute change events guaranteed particular order javascript objects guaranteed follow insert order nt sure test suggests two callbacks listening change event guaranteed previous attributes seem intuitive would case although opinion would better somehow consolidate two listeners one making special exceptions nested loud changes javascript single threaded would difficult maintain divergent model histories loud changes given special treatment inside change blocks order backbone events fire events individual attribute changes fire single model change event others finished example called first point fired loudly amp logged set silently called calls loud change definition takes current changes amp pending silent changes queued fires believe would expected behavior event would fired despite change level say general rule thumb nt fire multiple loud changes model inside nested change blocks need consolidate final event guaranteed fire last majority applications write heavily event driven nt yet run case functionality would issue could wrong braddunbar jashkenas", "d": "10/2012"}, {"body": "hello tgriesser sure js guaranteed insert order object implied eg could logged different order believe come otherwise behavior could predictable think solution issue n include threads processes seperate nested handlers environments empty pending list provision collect pendings every parallel event emission propagate collected pendings next general", "d": "10/2012"}, {"body": "stegrams would happen conflicting changes models happen level build pending list would take precedence var new backbonemodel x mon change change function md v consolelog v mon change x function md v mset mset silent true mset conflicting ysilent silent true mon change function md v mset mset silent true mset conflicting xsilent silent true mset x foo bar mchange also example functionality issue real world case", "d": "10/2012"}, {"body": "yes tgriesser case collected pendings handler overlaped ones idea bulletproof think idea promotes little project maybe future someone else get farther ahead thats suppose works nt real world case proves improvement never necessary", "d": "10/2012"}, {"body": "yep think expected desirable idea changes wait next loud change state occur case next loud change immediate already inside", "d": "10/2012"}, {"body": "hello jashkenas meaning next two changes set simultaneously loop always guaranteed case come think least note documentation loud changes inside change handlers discouraged tgriesser mentioned", "d": "10/2012"}, {"body": "nested change handlers always tricky probably avoided general case loud changes inside change handlers avoided modelon change x gt modelset value modelset x value change value change x value fine", "d": "10/2012"}, {"body": "afraid nothing backbone insecure javascript website able sniff passwords nt allow insecure javascript site xss third party scripts etc use https nt store password client side moment longer takes send server hashed", "d": "10/2012"}, {"body": "jashkenas best procedure using backbone logon area nt https totally understand passwords nt stored hence concern realised model code actually getting handled using concepts modelsviews using model could validate data usernamepassword make sure correct format even model view manually validate fields use ajax send data server form post action handle standardtraditional way https available would safe ajaxing data across assume javascript still client side intercepted unless missing something", "d": "10/2012"}, {"body": "login form http password sniffed man middle anyone unencrypted wifi network ideally entire site runs https certainly page provides loggedin functionality needs backbone nothing password present field less secure present model page", "d": "10/2012"}, {"body": "jashkenas problem understand backbone issue ask take brief moment look following code advise whether would safe assumption running https site effectively storing form fields longer model literally validating letting form submit server per traditional post method js define modelscustomerlogin backbone function customerlogin", "d": "10/2012"}, {"body": "yep use https endtoend site nt xss holes sending password server fine nt matter keep around temporarily model", "d": "10/2012"}, {"body": "jashkenas ok thanks", "d": "10/2012"}, {"body": "afraid backbonejs nt particular connection either django facebook connect good luck getting sorted", "d": "10/2012"}, {"body": "got page found error requesting login urlbut shows error shows list url url file required url looking error page page found request method get request url using urlconf defined webdevurls django tried url patterns order namehome polls admindoc admin edit customerreg checkout order upload product profile logout login p namesocialauthbegin complete p namesocialauthcomplete associate p namesocialauthassociatebegin associatecomplete p namesocialauthassociatecomplete disconnect p namesocialauthdisconnect disconnect p p namesocialauthdisconnectindividual current url login nt match list see url file url nt access", "d": "10/2012"}, {"body": "hi amirrajan definitely function need parse hope helps", "d": "9/2012"}, {"body": "looks like offending commit refactor extend", "d": "9/2012"}, {"body": "hi matthewwithanm thanks pointing nt quite understand mean though subclasses calling nt would mind providing code snippet illustrating problem js var view backboneviewextend initialize function knowledge always called constructor", "d": "9/2012"}, {"body": "hi problem nt subclasses calling calling believe subclass overridden noop version line nt really dug see problem need make subclass javascript var k backboneviewextend initialize function alert worked new k el whatevs get alert normally including ios safari mobile safari edit forgot mention see issue ios simulator hardware gt version well", "d": "9/2012"}, {"body": "thanks matthewwithanm reproduce check get chance", "d": "9/2012"}, {"body": "matthewwithanm addressed right introduced regression thanks pointing", "d": "10/2012"}, {"body": "braddunbar thanks fixing quickly", "d": "10/2012"}, {"body": "clarify mean backbone hub backbone childs", "d": "9/2012"}, {"body": "tree backbonehubjs main query main index backbonechildjs rest notice main sites use individual js like em main db table childs childs say could silly question coz db cloud opt js", "d": "9/2012"}, {"body": "investigated little bit code removes deprecated function calls issue seems zepto delegate implementation safari issue remains", "d": "9/2012"}, {"body": "created pr couple hours ago aimed fixing couple issues related zepto delegate implementation see maybe give spin see fixes issues stated also fixes bug whereby blur focus events used backbone event hash nt trigger using zepto", "d": "9/2012"}, {"body": "hi jachor thanks pointing run case causes issue practice general futureproofing type discussion experience fairly common code rely insertion order particularly worried browser vendors changing near future issue linked suggests router would fall given numeric routes never encountered realworld code", "d": "9/2012"}, {"body": "yeah general futureproofing believe need depend beahaviour subject change future optimisations js engines could completely disregard insertion order fine long one uses numeric routes opera browsers", "d": "9/2012"}, {"body": "right engines could change behavior future however doubt happen without advance warning kind backbone certainly would nt codebase affected always define routes instead object think safely leave time though definitely good food thought thanks bringing jachor", "d": "9/2012"}, {"body": "yep actually conscious choice ordering objects nt actually undefined unspecified major browsers agreed keep insertion order exception numeric keys route ordering work fine", "d": "9/2012"}, {"body": "quite right value attribute needs escaped via fixed thanks hupf", "d": "9/2012"}, {"body": "mornin integralist backbone views use fndelegate handle events specified property means selector actually used event happens point matched element used find short nt need worry caching selector", "d": "9/2012"}, {"body": "braddunbar thank feedback good news side note probably worth setting another issue way remove single event events hash see backbone method removes events want remove event predetermined point application ideas possible workarounds thanks", "d": "9/2012"}, {"body": "way remove single event events hash support however accomplish effect easily often setting flag checking handler js var view backboneviewextend events click function e thisdisabled return disable function thisdisabled true enable function thisdisabled false hope helps", "d": "9/2012"}, {"body": "braddunbar hmm could work ok probs thanks", "d": "9/2012"}, {"body": "fix tests", "d": "9/2012"}, {"body": "hi fracmak thanks issue already discussed several places including also may want take look commit history concerning removal query string fragment", "d": "9/2012"}, {"body": "case stripping query strings navigate calls think bug still valid easy call navigate user hits back button url requested nt match came shall update pull request handled somewhere else", "d": "9/2012"}, {"body": "good point nt think anyone addressed stripping query string fragment", "d": "9/2012"}, {"body": "pull request updated reverting getfragment change favor sanitizer regex run fragment passed navigate tests also updated", "d": "9/2012"}, {"body": "closing favor existing discussions mentioned", "d": "9/2012"}, {"body": "hi geon actually assertions true add event first fired model collection proxies would rather documentation say", "d": "9/2012"}, {"body": "would rather documentation say would nice mention model well creating model cause immediate add event triggered collection model mostly confused trying find add event firing model must done something really stupid code sample linked change event fires model add event fires collection model see line event triggered model well proxied collection completely missed something obvious", "d": "9/2012"}, {"body": "see mean add event firing model listening time model event fires collection event time start listening model add event already fired run debugger modified version fiddle see add event triggered", "d": "9/2012"}, {"body": "ah get bound event handler view created collections addhandler fired thanks ton", "d": "9/2012"}, {"body": "sure thing glad could help nt think issue documentation related please let know reopen", "d": "9/2012"}, {"body": "mornin integralist thanks posting nt get called entered invalid amount entered makes sense technically nothing changed error meant value nt set model still value precisely triggers events actually pending changes need event every change input trigger one need amountchanged method triggered user would say call method need using model validate form validation usually nt turn terribly well much better implemented view concern opinion", "d": "9/2012"}, {"body": "always helpful try reduce problem simplified version code exhibits problem runnable jsfiddle", "d": "9/2012"}, {"body": "philfreo help gfranko figure attribute nt actually changing apologies rookie mistake", "d": "9/2012"}, {"body": "mornin jonilappalainen yes expected behavior since prototype property shared instances return new object using function instead", "d": "9/2012"}, {"body": "exactly expected noted documentation remember javascript objects passed reference include object default value shared among instances defaults structure offers shallow copy items new model object acts exactly like prototype braddunbars advice right one case thanks braddunbar new", "d": "9/2012"}, {"body": "glad could help", "d": "9/2012"}, {"body": "thanks read small print", "d": "9/2012"}, {"body": "hi stegrams right unexpected actually discussed already would mind taking discussion", "d": "9/2012"}, {"body": "sorry totally forgot pull requests created issues", "d": "9/2012"}, {"body": "update went back changed method logged model error object error object showing ok exactly expecting everything coming back successful model seeing error reason", "d": "9/2012"}, {"body": "default backbone expects correctly formatted json response server jquery interprets error json received regardless status code sending json back response", "d": "9/2012"}, {"body": "caseywebdev thanks feedback updated php return json data avoided model triggering still ca nt see get success callback fire method called looks succeed getting ok response nt fire success callback side note seems odd backbone fails nt return json object data send back literally following php", "d": "9/2012"}, {"body": "backbone failing per se jquery function considers getting correct data type back error response look like", "d": "9/2012"}, {"body": "caseywebdev php looks like valid json data", "d": "9/2012"}, {"body": "first argument attributes second options something like log error description error function", "d": "9/2012"}, {"body": "felixhorro thanks felix advise helped resolve issue working code simplified save method var fields account thisform elements value password thisform elements value", "d": "9/2012"}, {"body": "mornin thanks pointing fairly certain already work without issue assuming sent correct status code ajax post follow redirect receive resultant resource", "d": "9/2012"}, {"body": "confirm problem still code serverendpointimplementation returning location header containing path new resource backbone nt follow link retrieve values possible fix", "d": "2/2013"}, {"body": "hi sveba want link followed immediately return similar telling browser immediately fetch created resource success status redirection status thus treated final response", "d": "2/2013"}, {"body": "hi braddunbar although true many api return location header still want backbone object updated way telling object update location header even whatever successful code would valid use case", "d": "4/2013"}, {"body": "sorry location header way go real restful api backbone really support behaviour nonsense throw rest constraints aboard javascript framework", "d": "1/2014"}, {"body": "noted specifically required also recommended server also returns characteristics created entity format specified contenttype header compatible backbone afaik automatic fetching uri given location header mandated tell", "d": "1/2014"}, {"body": "well good nothing stopping going making additional request fetch url location header right", "d": "1/2014"}, {"body": "exactly point", "d": "1/2014"}, {"body": "fact think way supposed handle edit clarify fetching uri user discretion mandatory automatic", "d": "1/2014"}, {"body": "u use location header hypermedia api want identify entities uris therefore client nt need object created need uri id uri fetch object wanted restapi abstraction layer emphasizes restful practices like backbone model support hide behaviour ease programmers work well least opinion", "d": "1/2014"}, {"body": "point applevel design decision something frameworks enforce need model behave way subclass handle differently", "d": "1/2014"}, {"body": "hi mgiraldo yes pretty easily create template similar following assuming array example reference compiled template function lt modelget name gt lt modelchildren function child gt lt template model model gt lt gt hope helps", "d": "9/2012"}, {"body": "thanks ended using something similar described basically thing mention manually put template function template view need one odd thing view reason gets drawn first pass array end foo foo foo foo foo solved passing parameter increasing every iteration checking means draw opening closing seems much hack view rendered way render gt collectioneach appendfoo appendfoo component gt view new siteviewsfoo model component myfoos append viewrender el right works fine sure proper way thanks", "d": "9/2012"}, {"body": "looks like nt get takers comments looking code bit think best leave stickit nice plugin still agnosticism like backbone core basic concerns two way binding makes sense basic form elements lot modern ui elements sophisticated javascript widgets form serialization json nt hard folks want inputs twoway bound folks want inputs twoway bound folks want inputs twoway bound click form", "d": "9/2012"}, {"body": "yeah fence current state stickit feels better plugin thanks consideration jeremyall", "d": "9/2012"}, {"body": "bug betting specialcasing along lines", "d": "9/2012"}, {"body": "also applies addressed", "d": "9/2012"}, {"body": "also generalize fix", "d": "9/2012"}, {"body": "give shot seems handle well", "d": "9/2012"}, {"body": "wow speedy fix cheers", "d": "9/2012"}, {"body": "backbone proxies underscorejs provide iteration functions backbonecollection nt documented take look underscore documentation full calling chain wrapped object cause future method calls return wrapped objects well finished computation use value retrieve final value backbone example none methods chained", "d": "9/2012"}, {"body": "requires function native array method returns array assumptions completely valid gsklee one problem nt passing function try note know sort objects need pass custom function well however would like chain use underscore method quite easy", "d": "9/2012"}, {"body": "use backbone shortcut", "d": "9/2012"}, {"body": "guess thanks pointing", "d": "9/2012"}, {"body": "would using backbone browserify backbone already works browser", "d": "9/2012"}, {"body": "browserify much requirejs alternative node browser converter code shared browser node made easy browserify simply expose module browserify also lets specify dependencies updates via npm", "d": "9/2012"}, {"body": "jacobrask addressed please let us know nt work", "d": "9/2012"}, {"body": "works fine thanks lot", "d": "9/2012"}, {"body": "mornin reason two models destroyed length collection changes destroy model removed collection loop used iterate models nt know therefore uses incorrect indices quick demonstration happens js var collection new backbonecollection id id id id id var models id id id id id collectionmodels destroy models id id id id collectionmodels destroy models id id id collectionmodels destroy models id id hope helps", "d": "9/2012"}, {"body": "braddunbar big thank yes helps presented logical merci", "d": "9/2012"}, {"body": "hi cknoxrun thanks posting seen several issues concerning lately like come solution nt quite understand getting though seems provide root url ask suppress hashchange issue instance perhaps could post information call get better picture going", "d": "9/2012"}, {"body": "hi braddunbar thanks reply tried suggested luck problem root url root site since adding backbone select pages right move towards single page app pages backbone routes site talking currently pages like screenshot show page example using backbone rest site say straight rails server side pages works fine pushstate enabled browsers server rendered pages work fine backbone ones work fine however page like converted backbone course goes home page implemented work around basically adding filter rails notifies whether page backbone picking layout start looks like", "d": "9/2012"}, {"body": "use good go remembering may need try latest version backbone work correctly", "d": "9/2012"}, {"body": "hi ryanthegiantlion thanks pointing seem logical would prepend assigning since one retrieved nt blackberry test fairly sure prepending fragment assignment would nt cause issues since leading always stripped observed failing blackberry verified change fixes issue", "d": "9/2012"}, {"body": "hi braddunbar verified issue bb os verified change would fix issue actually came across issue trying get backbone app working platform btw also checked browsers check change nt cause new issues doubt issue os upwards browser much improved devices instance os uses webkit layout engine os uses something called mango source tested using one bb simulators nt much terms debugging forced use alerts custom consolelog", "d": "9/2012"}, {"body": "awesome addressed browsers access strip leading assigning change fairly low risk thanks bug report subsequent responses ryanthegiantlion", "d": "9/2012"}, {"body": "cool prob btw saw browsers nt strip assigning locationhash rather kept assigned value added assigned value working draft windowlocation actually states value attribute must string concatenation hash mark fragment identifier see window object working draft anyway quick fyi case interested", "d": "9/2012"}, {"body": "certainly fixing bugs learning things morning thinking fragment identifier hash exluding semantics degree think important make terminological distinctions like especially communicating text", "d": "9/2012"}, {"body": "mornin mirodil thanks posting certainly extend extended views call child view js var view backboneviewextend tagname span var viewextend var b viewextend span span consolelog new tagname new b tagname hope helps", "d": "9/2012"}, {"body": "feature event triggered model collection also triggered collection directly convenience", "d": "9/2012"}, {"body": "hey oleics philfreo right feature hope enjoy", "d": "9/2012"}, {"body": "thanx quick reply nt want complain making fat bold documentation", "d": "9/2012"}, {"body": "problem minimalist documentation good argument made making docs fat bold", "d": "9/2012"}, {"body": "caps lock things trollface", "d": "9/2012"}, {"body": "mornin tenedor thanks pointing fixed live next release", "d": "9/2012"}, {"body": "mornin mikesperanza thanks pointing interesting issue think current behavior master correct change queued next time called model collection updated", "d": "9/2012"}, {"body": "hi brad appreciate events triggered next change main problem consistency data model affected meantime events postponed fine collections incorrect behaving correctly get functionality relying byid collection user code behave correctly also internal features like detection dups collectionadd work data model inconsistency issue introduce sorts issues difficult debug experienced saving silent true avoid triggering update model simply updated id server upon save arguable really change sync triggered nt update byid later sync whole collection server add detect duplicates end lot duplicate records workarounds moment use silent true saving hack client side update byid collection sync still convinced indeed problem continue using number works extremely horrible regards mike regards mike", "d": "9/2012"}, {"body": "experienced issue also hard debug aware caused byid normally guess silenttrue avoid trigger events many years experience server side programming think silenttrue works likely event level byid works data level ensure data consistency collection xiaoli", "d": "9/2012"}, {"body": "agree xiaoli modelset id silent true shoud prevent firing event update byid please fix example", "d": "10/2012"}, {"body": "mornin wshaver thanks opening issue meant flexible regard element replacing think stick proposal would fail least add benefit following situations previous element equally nonreplaceable element replacing element case would productive previous element inserted dom replacing would effect possibly throw", "d": "9/2012"}, {"body": "thanks quick thoughtful reply", "d": "9/2012"}, {"body": "issue submit pr", "d": "9/2012"}, {"body": "check", "d": "9/2012"}, {"body": "hi moll tried address would mind giving try", "d": "9/2012"}, {"body": "braddunbar umm guessing might indeed solve issue changes api removing index nt immediately think good idea commented", "d": "9/2012"}, {"body": "whether bad idea merged solving issue", "d": "9/2012"}, {"body": "already global event whenever route matched feel free use cleanup", "d": "9/2012"}, {"body": "whomever might useful could unroute using following technique unrouter function router route vars thislastroute amp amp unroutemethod routerunroutes thislastroute router unroutemethod apply thislastvars thislastroute route thislastvars vars backbonehistoryon route unrouter declaring unroutes app backbonerouterextend routes welcome view id view unroutes welcome unwelcome view unview", "d": "9/2012"}, {"body": "hey gsklee find documentation unbind backboneeventsoff alias mixed backbone objects models collections views routers", "d": "9/2012"}, {"body": "personally think router react urls", "d": "9/2012"}, {"body": "yep nt want use router certain page nt turn", "d": "9/2012"}, {"body": "want use router want handle everything inside namespace time want urls outside handled way achieve behavior without internal backbone hacking would nt natural router react urls option provided", "d": "9/2012"}, {"body": "find default intended behavior counterintuitive declare backbone app root myroot define backbone routes router usual expect routes resolved relatively root example route document id router handle route location path defined route relatively root location path router ignore path well nt match route defined relatively root router", "d": "9/2012"}, {"body": "grin describing exactly works js var router backbonerouterextend routes path id path path function id consolelog id var router new router backbonehistorystart root root pushstate true navigates logs nothing backbonehistorynavigate true navigates logs backbonehistorynavigate true using pushstate urls handled completely user", "d": "9/2012"}, {"body": "braddunbar know works nt work javascript var router backbonerouterextend routes path id path path function id consolelog id var router new router backbonehistorystart root root pushstate true changing location path outside backbone router logs shouldnt historypushstate null null also logs expecting historypushstate null null running issue backbone app part larger app location path changes originate outside backbone app believe proper fix would involve adding condition check pathname contains root path inside checkurl method", "d": "9/2012"}, {"body": "hmm wo nt anything change url right trigger event therefore never logs anything example", "d": "9/2012"}, {"body": "braddunbar right realized whole issue comes historyjs use parts app rather backbonejs specifically historyjs artificially trigger onpopstate pushstate thanks help", "d": "9/2012"}, {"body": "hi mikep main reason including search string fragment cross browser consistency since search string part hash browsers without pushstate support use meaningful way search string usually used modifiers often contains information pertinent route need include search parameters url use router would suggest put pathname instead instance become find user friendly well nicely semantic", "d": "9/2012"}, {"body": "addressed master fixed next website push", "d": "9/2012"}, {"body": "true thanks caseywebdev", "d": "9/2012"}, {"body": "mornin aeosynth already fixed latest master grab copy set", "d": "9/2012"}, {"body": "updated fiddle use latest master underscore still result json parsing errors sometimes appear clearing iframe localstorage fiddlejshellnet clears", "d": "9/2012"}, {"body": "hmm fiddle results error tried latest master appeared work", "d": "9/2012"}, {"body": "yeah reason errors appear maybe another issue works clearing localstorage tested chrome firefox show output displaying tons keys instead", "d": "9/2012"}, {"body": "", "d": "9/2012"}, {"body": "one works fine hm", "d": "9/2012"}, {"body": "localstorage script examples directory causes problem script backbonelocalstorage repo nt", "d": "9/2012"}, {"body": "todo example app sources updated backbonejs unupdated backbonelocalstoragejs would much trouble set git submodule check node module", "d": "9/2012"}, {"body": "aeosynth nt think submodule necessary updated code", "d": "9/2012"}, {"body": "thanks", "d": "9/2012"}, {"body": "ca nt cmdctrlf get sidebar first html document able jump right whatever method need", "d": "9/2012"}, {"body": "end still think request valid", "d": "9/2012"}, {"body": "apparently alphabetization nt norm todomvc stable apps alphabetized docs google emberjs yui angularjs closure gwt", "d": "9/2012"}, {"body": "hi aeosynth think much nicer things organized logically instance near clustered together right alongside knowtheory cmdctlf way go", "d": "9/2012"}, {"body": "hi prettymuchbryce thanks issue think suggesting provide something along lines right actually think rather nice nt require method call set plain properties less functions better think misconstrued request let know reopen discussion", "d": "9/2012"}, {"body": "generic organize code question backbone question common requirejs modules return object rather instance object constructing new instances nt directly problem constructing collection nt fire xhr want instance give collection could pass around module object attach objects use shared namespace see module system", "d": "8/2012"}, {"body": "sure best solution making change solves problem would appreciate advice looks correct make pr test case", "d": "8/2012"}, {"body": "braddunbar documentcloud fix seem correct suggest workaround", "d": "9/2012"}, {"body": "hi guys addressed would mind giving spin", "d": "9/2012"}, {"body": "totally feel free add whatever indexes like collections", "d": "8/2012"}, {"body": "would great", "d": "9/2012"}, {"body": "interested modularized backbonejs codebase check custombuild folder inside backbone fork keep mind backbone unit tests still pass successfully also example custom build ui would work finally blog post wrote discuss potentially using parts backbone", "d": "9/2012"}, {"body": "really appreciate idea especially part ruby dependencies gone amp grunt comes play alos situations need backbonerouter cause smth route still like use backbone organize javascript plus goes really well lodash uh hopefully one feels pissed custom builds", "d": "9/2012"}, {"body": "asciidisco nt done work integrate custom builds grunt yet idea would approach", "d": "9/2012"}, {"body": "gfranko would like see jquery like implementation since custom builds maybe fork project amp give spin weekend entirely sure enough time", "d": "9/2012"}, {"body": "asciidisco nt worry look jquery grunt file weekend see", "d": "9/2012"}, {"body": "modularizing codebase", "d": "9/2012"}, {"body": "multiple files often useful nt think backbone would benefit splitting source library rather small custom builds save kilobytes best added complexity would significant worth discussed least previously", "d": "9/2012"}, {"body": "use cases example user using jquery mobile backbonejs want include backbone routes agree default backbone source stay one file suggesting splitting source multiple files realize work maintain could also added case user want particular feature also suggested blog post allowing users include every feature backbone would make backbone even easier use corporate environment curious would added complexity", "d": "9/2012"}, {"body": "use cases example user using jquery mobile backbonejs want include backbone routes delete source rather clearly labeled quite easy curious would added complexity referring complexity new existing contributors writing code new project always daunting want encourage much possible currently backbone requires browser serve local files text editor requiring build systemtool big step said opposed custom builds general rather like tool introduce blog post", "d": "9/2012"}, {"body": "right backbone class object clearly labeled easy split codebase said nt think developers want touch source library using look requirejs nonamd compatible scripts example easy enough wrap lib inside define method wants yes hear saying trying introduce many dependenciescomplexities guess keep separate project keep code date backbone source", "d": "9/2012"}, {"body": "yep think really neat project backbone benefits simple single script backbone installed got period rely everything provides available", "d": "9/2012"}, {"body": "braddunbar delete source rather clearly labeled quite easy gah trap official build system ensure quality compatibility functionality better jashkenas yep think really neat project backbone benefits simple single script ya dig single files lodash single file still supports custom builds though jquery makes work individual files repo custom builds great give devs control lodash jquery supporting custom builds thing missing backbone", "d": "9/2012"}, {"body": "hey guys interested made grunt plugin custom backbone builds generated normal backbone source files really tested although run backbone version router amp history stuff left works well feedback welcome", "d": "11/2012"}, {"body": "asciidisco thank rock", "d": "11/2012"}, {"body": "would nice switch browserify webpack way would best worlds multiple files single file easily", "d": "5/2015"}, {"body": "would nice separate module quite useful builds custom modules optional dependencies", "d": "12/2016"}, {"body": "using backbone model collection angular angularjs projects need model collection concept concept awesome using data access layer angular providing ui layer recently wrote article benefit using backbonejs angular app would really nice split backbonejs several components include stuff need jashkenas splitting src files multiple files let build task concat one file simple single file split source files", "d": "3/2017"}, {"body": "jashkenas even rc bump npm would nice starting share backbone code server sad realize today among additionsfixes nt available npm version months seems like quite bump active project", "d": "8/2012"}, {"body": "yep time", "d": "8/2012"}, {"body": "yep", "d": "9/2012"}, {"body": "tada", "d": "9/2012"}, {"body": "time scale release reason ask embark week high scale potentially high profile application would love able utilise release new tweaks fixes features", "d": "9/2012"}, {"body": "get chance run open tickets past changes round testing documentcloudorg least feel free use meantime like essentially thing", "d": "9/2012"}, {"body": "starting go open tickets", "d": "9/2012"}, {"body": "wish luck endeavor jashkenas much cake metal", "d": "9/2012"}, {"body": "thanks lot", "d": "9/2012"}, {"body": "update dying use merge collections", "d": "11/2012"}, {"body": "got using master production quite time", "d": "11/2012"}, {"body": "indeed lt open tickets still quite feel free use master meantime", "d": "11/2012"}, {"body": "status update tickets left one bigish thing like take another deep think current implementation eye toward simplification semantics possible got start branch folks want take stab welcome", "d": "12/2012"}, {"body": "zero tickets briefly back still things including polishing hopefully simplifying setchange closing ticket favor running changelog", "d": "12/2012"}, {"body": "see sample", "d": "8/2012"}, {"body": "give version master try see suits", "d": "9/2012"}, {"body": "nope nt work likely description issue starts firefox lot stuff including webkit", "d": "9/2012"}, {"body": "hi bodokaiser thanks issue definitely would nt recommend fiddling internal implementation detail subject change collections already proxy events models listen collection model events quite speed check onmodelevent method collections think probably customize needs hope helps", "d": "9/2012"}, {"body": "comming bit late ended recommendation thanks try", "d": "9/2012"}, {"body": "apologies wait glad found solution", "d": "9/2012"}, {"body": "depends intended usage instance needed following contrived example methods bound via third argument handles context otherwise probably need bind via experience needed often js var view backboneviewextend events click render initialize function thismodelon change thisrender", "d": "8/2012"}, {"body": "mornin aeosynth thanks pointing stems fact created sure reason particular bit code perhaps default created dig bit", "d": "8/2012"}, {"body": "aeosynth causes created default avoiding error message described", "d": "8/2012"}, {"body": "braddunbar thanks", "d": "8/2012"}, {"body": "hi jasonmcaffee thanks issue instance validating input form input blur occurs provide immediate feedback user indicating field invalid nt see ca nt model considered invalid result truthy means return much little validation data need reason wo nt work", "d": "8/2012"}, {"body": "unfortunately nt work want validate field updated entire model expanded example bit demonstrate javascript validate function attrs log validate called n attrs keys attrs length keys attrs function key log validate called attr key var errors call set get validated point want validated user hasnt entered anything yet viewmodelset new val user leaves blur event want immediately provide feedback invalid nt want validate rest model attrs nt modified would mean would litter page validation messages inputs may times validation certain inputs performance hit current validation approach would ensure always suffer perf hit", "d": "8/2012"}, {"body": "may times validation certain inputs performance hit current validation approach would ensure always suffer perf hit validating attributes resource intensive probably take another approach user leaves blur event want immediately provide feedback invalid nt want validate rest model attrs nt modified would mean would litter page validation messages inputs model issue ui issue set flag input indicates whether focus yet display validation", "d": "8/2012"}, {"body": "ok give try please explain reasoning change words revalidating entire model property changed make sense comment line get behavior looking without additional work thanks", "d": "8/2012"}, {"body": "sure thing relvant reading want give look gist validating model whole specific attribute words value one attribute may affect validation another", "d": "8/2012"}, {"body": "backbone model nt suited use case setting property time immediately providing feedback property failed ui issue model part ui consider model issue put together demo functions way want conjunction backbonemodelbinder allows validation set attribute time validate attribute time submit form whole model validated error messages displayed invalid attribute created new type model applies modification allows set property time javascript fix backbone validation validates property set entire model temporarily set thisattributes validate called attributes changed passed override validate thisattributes back normal validate called risk breaking backbone changes validate function eg calls function validate called relies thisattributes function validateonlywhatchanged attrs options consolelog validateonlywhatchanged called var model backbonemodelextend override validate function validates changed validate validateonlywhatchanged thing needed fix previousattributes using modelset silent true part new function added backbonemodelbinder provides ability serializing inputs model form submit", "d": "8/2012"}, {"body": "worth agree changed set validate values changed save validate attributes isvalid similarly validate attributes", "d": "10/2012"}, {"body": "would completely agree genexp comment would seem sensible solution", "d": "10/2012"}, {"body": "genexp behavior expected", "d": "11/2012"}, {"body": "genexp", "d": "12/2012"}, {"body": "genexp", "d": "1/2013"}, {"body": "genexp", "d": "3/2013"}, {"body": "mornin docyes thanks opening issue agree sometimes useful pass multiple modelscollections view however think convention pass separate option set also listening events multiple modelscollections usually means view split making support nonissue let keep conventions simple possible", "d": "8/2012"}, {"body": "hey braddunbar thanks giving thought one reason possibly sending one modelcollection view due lack polymorphic associations good thing core modelcollection agree sending options simple reasonable approach unfortunately data complex nuance even simplistic view possibly adding collections models notice plural new special constructor arguments added instance convention would conservative explicit enhancement thanks consideration either way", "d": "8/2012"}, {"body": "thanks explaining docyes sure situations describing experience nt use multiple models collections view unless absolutely breaking views respond one modelcollection turns much modular reusable code since case think backbone avoid encouraging pattern", "d": "8/2012"}, {"body": "np braddunbar suggesting case view nested sub views operate different modelcollection best practice pass via options space sure realities view onetoone relationship data objects entirely true complex application", "d": "8/2012"}, {"body": "pass one model listen events one model nt mean subviews ca nt operate different model usually models related relationships dictate view structure instance post needs render list comments post model would likely contain list comments ie could use initialize comment views inside parent view", "d": "8/2012"}, {"body": "unfortunately happens many models collections require various compositions per view perhaps decoupling composition separate object keeps things cleaner littering mutable objects supportive drive simplicity yet time convention needs merge core", "d": "8/2012"}, {"body": "issue scenario var networkcollection new backbonecollectionextend var generatorcollection new backbonecollectionextend view extends abstractview say analysisviewjs trying access collections var new networkcollection var new generatorcollection go get undesirable results pls u explain add method adding model instances collections add callled pointers would helpful thanks advance sonali lekurwale", "d": "3/2013"}, {"body": "u mean say avoid usingreferring multiple collections single view pls correct wrong newbie backbonejs", "d": "3/2013"}, {"body": "sonio sure issue calls nt also js var networkcollection backbonecollectionextend var generatorcollection backbonecollectionextend var new networkcollection var new generatorcollection consolelog outputs consolelog outputs", "d": "3/2013"}, {"body": "oh bad actually used var networkcollection backbonecollectionextend yet facing issue pls help", "d": "3/2013"}, {"body": "sonio would mind posting example jsbinjsfiddle debug", "d": "3/2013"}, {"body": "mornin mfrobben version backbone using current master options passed fetch cloned let us know version nt work get fixed", "d": "8/2012"}, {"body": "mornin thanks pointing looks like dev branch indeed old version compat reasons", "d": "8/2012"}, {"body": "phdesign seeing happening default also given state incorrect inside nested change take look see fixes issue", "d": "8/2012"}, {"body": "thanks tim issue seems related pulled fix issue still occurring set function still sees previousattributes different attributes adds attribute pending second run thu aug pm tim griesser notifications githubcomwrote phdesign seeing happening default sync also given state previousattributes incorrect inside nested change take look see fixes issue reply email directly view github", "d": "8/2012"}, {"body": "mind look helps may helpful use case fails", "d": "9/2012"}, {"body": "already passing test performing within event save within change event natch feel free send us failing test case reopen", "d": "9/2012"}, {"body": "looking", "d": "8/2012"}, {"body": "durp yep probably linked events section docs though", "d": "8/2012"}, {"body": "cases though example says seems like sometimes callbacks passed parameter similar makes hard add extra optional parameters callback called directly parameters passed callbacks backbone nt fully documented", "d": "8/2012"}, {"body": "event also receives argument one passed documented docs master fixed next release", "d": "8/2012"}, {"body": "ok cool thanks", "d": "8/2012"}, {"body": "nt exists ca nt find arguments callback anywhere docs", "d": "4/2013"}, {"body": "looking", "d": "4/2013"}, {"body": "kjbekkelund unfortunately want know arguments provided event callback", "d": "4/2013"}, {"body": "kjbekkelund ahh see give link wanted nt expecting args different event nt expecting list thanks", "d": "4/2013"}, {"body": "nt coffeescript nt assume object property arguments automatically function", "d": "8/2012"}, {"body": "yes typo edit post issue still exists without typo", "d": "8/2012"}, {"body": "nt first example trigger times set agree case behavior seeing current github version backbone tried", "d": "8/2012"}, {"body": "nt checked old version honest check thank yes agree times tue aug tim griesser notifications githubcomwrote nt first example trigger times set dummy true clear dummy true dummy false agree case behavior seeing current github version backbone tried reply email directly view github", "d": "8/2012"}, {"body": "tgriesser recent refactor fix", "d": "10/2012"}, {"body": "jashkenas nt think valid issue begin shows times expected based change rules current master refactor", "d": "10/2012"}, {"body": "ah better", "d": "10/2012"}, {"body": "thing think like add models current collection instead replacing collection contents pass add true option fetch seen bootstrapping difficulty understanding would keep state page reloadscould elaborate", "d": "8/2012"}, {"body": "yes refresh page going lose state stored javascript memory nt want store checked database want store going put cookie session instead nt anything backbone particular", "d": "8/2012"}, {"body": "escaping nt sufficient assumes data output either tags within quoted attributes tags simple example template using quoteless attributes", "d": "9/2013"}, {"body": "mornin artyomtrityak thanks opening issue sure element trying get fairly certain grab reference using one following eventtarget eventcurrenttarget eventdelegatetarget could bit specific maybe extra context code would help understand issue", "d": "8/2012"}, {"body": "oh sry missed eventcurrenttarget sorry", "d": "8/2012"}, {"body": "problem glad got worked", "d": "8/2012"}, {"body": "use notion event bus described link rethrow events dependency views would suggest use different event case listen reindex event views using event bus", "d": "8/2012"}, {"body": "hi artyomtrityak thanks opening issue actually discussed decided backbone proxy methodobject would added opinion explicitly triggering event nearly always better choice easier understand involves less indirection", "d": "8/2012"}, {"body": "hi koc could explain situation would need use pushstate hashchange never heard request", "d": "8/2012"}, {"body": "page photorotator uses pushstate pages viewing concrete photo comments map markers wher open marker popup using hashchange page anchor", "d": "8/2012"}, {"body": "gotcha thanks explanation problem never work crossbrowser manner since ie lt nt support pushstate opening pushstate page nonsupporting browser hashchange used fallback would therefore break functionality since backbone aims provide crossbrowser functionality feature never work", "d": "8/2012"}, {"body": "case browser nt support push state using redirects fallback hashchange obtain described behavior ugly hacking backbonejs", "d": "8/2012"}, {"body": "see case needed backbone support use case", "d": "8/2012"}, {"body": "hacking library seems bad best support core possible modify routing behavior via plugins", "d": "8/2012"}, {"body": "part nt possible running errors", "d": "8/2012"}, {"body": "method like please suggest change routing history without modifying core code good way", "d": "8/2012"}, {"body": "yes want provide functionality custom method fine way go", "d": "8/2012"}, {"body": "ok thank", "d": "8/2012"}, {"body": "nt pushstate require backend support know return page every request pushstate associated page page transitions happen client side requiring backend requests moment user hits refresh url backend wo nt know unless specifically configured handle would make sense use pushstate hard view switches hash intraview state words like non single page websites work reason fallback mode pushstate using could nt encode fake pushstate hash meaning would nt conflixts would work browsers", "d": "10/2016"}, {"body": "oatkiller thanks opening issue nt seem problem triggering destroy events collections destroying models master", "d": "8/2012"}, {"body": "oatkiller unless objections going mark closed please feel free modify either test cases previous comment reproduce breaking unexpected behavior like discuss", "d": "8/2012"}, {"body": "apologies second look indeed seem mistaken", "d": "8/2012"}, {"body": "guess backbone nt support kind nesting box checkout backbone relational nt already", "d": "8/2012"}, {"body": "looks like request something make fail getting set improperly probably open similar issues underscore request backbone definitely culprit fwiw underscore using object constructor comparison may right think root cause somewhere node hurtrealbad", "d": "8/2012"}, {"body": "correction seems like actually happens overwrites anything thing living global local doesnt matter happens initially requiring request easily worked around loading request underscore backbone", "d": "8/2012"}, {"body": "easily worked around loading request underscore backbone relying order require statements good idea might always work especially modules play require statements might wrong order look like request even node issue open ticket request project thanks response", "d": "8/2012"}, {"body": "great mattijs would mind dropping link request ticket file", "d": "8/2012"}, {"body": "debugging testing look like bug node even knowtheory node issue found", "d": "8/2012"}, {"body": "wow pretty crazy object comparison constructor break like still curious including request would squash mattijs opened issues request even get eyes problem", "d": "8/2012"}, {"body": "open issue request yet thought opening one nodejs project would enough solve eventually could find reference request squashing nodejs issues shows request might even squash comparison somewhere trigger weird core behavior might well optimalisation thing test shows requiring module comparison like enough trigger altered behavior could mean request might fault since simply uses module turn requires module pretty crazy", "d": "8/2012"}, {"body": "looks like issue fixed soon", "d": "8/2012"}, {"body": "like modelset name name artyom name simple js object backbone model also backbone support sub attributes must manage like separated models artyom trityak notifications githubcom example model backbonemodelextend defaults name first last set modelset namefirst artyom maybe helpful allow reply email directly view github \u043c\u0430\u043a\u0441\u0438\u043c \u043a\u0438\u0441\u043b\u043e\u0432 mobile email kislovm gmailcom", "d": "8/2012"}, {"body": "yes case override total name object example already last name want set first name yes get object make change put back looks ugly would perfect put sub attrs listen changes event something like", "d": "8/2012"}, {"body": "found plugin allows thx anyone works totally overrides backbonemodel set function good", "d": "8/2012"}, {"body": "ca nt say surprised little demo app said pull request sanitizing contents pulled form prior creating new todo sure would welcome", "d": "8/2012"}, {"body": "people get inspired demo apps ending using production code suggest using handlebars mustache view engine get benefit auto escaping web plagued xss projects like backbone good community adopting safer methods defaults know things going even wicked", "d": "8/2012"}, {"body": "seem impression disagreed nt like said pull requests welcome purpose todo app demonstrate backbone basic feature set also presume addyosmani adapted myriad mvwtf frameworks unsurprised simple toy app nt sanitize input yet said nt think main demo app switch handlebarsmustache since point show basic features backbone", "d": "8/2012"}, {"body": "knowtheory one toylearning application purpose give developers basic view framework capable including handlebarsmustache saying people likely copy production scary might also taken backbone suggesting users opting specific templating library another probably nt want start arguments said pr autoescaping merged happily consider todomvc apps", "d": "8/2012"}, {"body": "value right way even examples help beginners get safe track templated properties simply wrapped additional dependencies needed", "d": "8/2012"}, {"body": "even easier matter using interpolate", "d": "8/2012"}, {"body": "factormystic agrees request examples design safe requiring devs sanitize user input manually nt worked else xss would nt still web security issue even decade backbone guru mustache equivalent fair job something even simpler great agree ith addyosmani backbone might promoting something manner yui yapp uses handlebars may could put notice could use one choice like yui done main sections", "d": "8/2012"}, {"body": "backbone docs already note use templating library choice", "d": "8/2012"}, {"body": "fixed disappointed trolling issue rather submitted change oh well", "d": "8/2012"}, {"body": "knowtheory understand disappointment intention definitely saying fix sharing concern promoting safe default security practices amongst developers common industry issue pointed security folks earlier well tweet pointed chrome xss auditor dom xss protection wo nt protect users nt meet chrome bad people need know getting end day", "d": "8/2012"}, {"body": "please note responsible disclosure like chrome bug report fixed shared", "d": "8/2012"}, {"body": "backbonehistory nothing events afraid", "d": "8/2012"}, {"body": "may rephrase question would best way implement cmdclick backbone", "d": "8/2012"}, {"body": "ah yep listen type click care middleclick commandclick controlclick open url desire", "d": "8/2012"}, {"body": "nt views interested new model ed collection nt working use case", "d": "8/2012"}, {"body": "case care difference singular model created vs us updated default method wanted get additional create event instead determine fact sync event", "d": "8/2012"}, {"body": "care singular model created ca nt use failing", "d": "8/2012"}, {"body": "method fire model updated return status code created return status right issue able always discriminate two would unfortunate pass custom success method every time call save get create event also nt want toplevel extension overriding save success method would also override anytime want oneoff custom success method elsewhere code know could also listen change id event still nt semantically say server created new single object code", "d": "8/2012"}, {"body": "exactly event specific ca nt use generic ca nt use singular callback elaboration bit use case would help", "d": "8/2012"}, {"body": "great use custom easy add takes little code", "d": "8/2012"}, {"body": "like braddunbar idea using method extend onto sync places use singular model need differentiate include singular membership object user joining group ticket event create implies new membership whereas update sync implies details membership updated representation singular currentuser authentication create implies login whereas update sync implies info user changed singular resource", "d": "8/2012"}, {"body": "agree event would useful want notify user object created successfully used braddunbar method", "d": "3/2013"}, {"body": "absolutely agree request expressed use case similar twitter home timeline fetch collection update true remove false wait true collection add binded append adds new pages items last visible bottom useful say infinite scroll add things bottom creates collection fire add binds append wanted add things top comes problem want creates prepend instead appending items like twitter prepends new things top appending old things bottom isnew nt seem solve use case either bottomline want display things different ways add create happen easy wayhack around telling add called back", "d": "4/2013"}, {"body": "going chime try revive thread usecase well jashkenas address question asked replies back exactly create event specific ca nt use add sync generic ca nt use singular success callback use case actually want trigger collection add event new model created need know new model created want code coffeescript class occontact extends backbonemodel class occontacts extends backbonecollection model occontact class occontactslistview extends backboneview initialize opts gt optscollection new occontacts occontacton create instance gt optscollectionadd instance could accomplished explicit success callback save happens many cases preferable would argue organize logic events problem using sync event case fired every time model interacts server includes updates deletes thanks", "d": "11/2013"}, {"body": "afraid nt follow pseudocode trying listen event contact constructor function directly nt events actually listening collection instead add event looking right", "d": "11/2013"}, {"body": "yea apologies pseudocode correct event listener constructor exist convenient imho hand posting saw suggested solution documentation site via backbonecollectioncreate seeks like may better solution global thanks quick reply alex nov pm jeremy ashkenas notifications githubcom wrote afraid nt follow pseudocode trying listen event contact constructor function directly nt events actually listening collection instead add event looking right reply email directly view github", "d": "11/2013"}, {"body": "moved pull request", "d": "8/2012"}, {"body": "hi denbad following appears work fine could elaborate bit problem", "d": "8/2012"}, {"body": "special magic global variable nt anything backbone particular", "d": "8/2012"}, {"body": "huh never heard one thanks jashkenas", "d": "8/2012"}, {"body": "thanks jashkenas", "d": "8/2012"}, {"body": "kind thing nothing particular backbone good luck js", "d": "8/2012"}, {"body": "could extended guess example tag element interactions attribute backbone could look atributes act accordingly yes try see get thanks date tue aug notifications githubcom backbone noreplygithubcom cc hotmailcom subject backbone backbone custom interactions kind thing nothing particular backbone good luck js", "d": "8/2012"}, {"body": "one points backbone move source truth dom view manage form user goes submit validate data form one shot dom attribute storage necessary", "d": "8/2012"}, {"body": "alright new backbone actually written light weight client side mvvm model trying figure incorporate interactions backbone seems promising thanks muchdate tue aug notifications githubcom backbone noreplygithubcom cc hotmailcom subject backbone backbone custom interactions one points backbone move source truth dom view manage form user goes submit validate data form one shot dom attribute storage necessary", "d": "8/2012"}, {"body": "backbone views required element bind events prior rendering case nt need wrapper element best bet append contents use change view current either parent node one subnodes eg note several downsides approach come think using definition list items backbone views one loose ability efficiently bind events view since either dealing multiple common events parent element manually bind things depending element passed", "d": "8/2012"}, {"body": "bunch ways work around fundamentally like model tree structure views going need tree structure pairs like save trouble use", "d": "8/2012"}, {"body": "hmm okay looks like going update html august jeremy ashkenas notifications githubcom wrote bunch ways work around fundamentally youd like model tree structure views going need tree structure pairs like save trouble use reply email directly view github fred kelly q email three sentences less", "d": "8/2012"}, {"body": "pull request", "d": "8/2012"}, {"body": "morning fracmak thanks isssue discussion subject consensus try blocks appropriate flow control understand concern suppressing errors inside event handlers much worse behavior skipping rest handlers something fails want know immediately continue though nothing happened", "d": "8/2012"}, {"body": "sorry reviving pretty old issue ran today pretty painful way since change events designed nestable successive changes made handling change accumulate exception change event handler causes change never finish trouble cause spooky effects road rely work case need treat changes coming server differently local changes use handler sync event since earlier exception change event caused change get stuck unfinished state always accumulates new properties looks like server sent back changes actually nt took quite figure happening even exception change handler related weird problems sync saved least solid half day work backbone caught exceptions change handlers case definitely understand exceptions valuable tool informing issues occurring prefer catching time exactly reason however backbone caught logged exceptions maybe emitted event could still alerted occurring without experiencing spooky hardtoexplain behavior much later completely disconnected point time", "d": "12/2013"}, {"body": "actually guess clarify much concerned successive events borked exception rather object event triggered left badunfinished state actually something somewhat special events opposed events general maybe another solution instead trycatch would use ensure model state eventually gets cleaned change events real trouble get stuck set file separate issue", "d": "12/2013"}, {"body": "file separate issue think working expected exceptions within change handlers stopping world breaking app want catch clean feel free made change many many folks would much harder time reliably developing applications", "d": "12/2013"}, {"body": "well trying say would able debug manage issue dramatically faster caught trouble js browsers exception nt really stop world like many environments code given event loop might stop leaves something bad state side effects might happen far later road largely unrelated part app seconds minutes later extraordinarily hard connect two issues really asking errors event handlers caught totally ok handlers fail fire etc asking models get stuck irreparably bad state nonobvious causes side effects later", "d": "12/2013"}, {"body": "suggesting settimeout something like lines javascript var self settimeout function selfpending false selfchanging false trigger relevant attribute changes silent changeslength thispending options var l changeslength lt l thistrigger change changes current changes options imperfect slight amount time previously queued events could run model still bad state big improvement current situation without changing semantics events catching exceptions", "d": "12/2013"}, {"body": "would nt correct fix figure throwing exception fix code rather hack settimeout", "d": "12/2013"}, {"body": "tgriesser issue trying address though situation text editing app someone reports bug text disappearing type intermittent extremely hard reproduce someone else reports exception happening count characters easy reproduce issues nt appear obviously connected way users reported issue nt make mention notice issue fix since obvious easy try reproduce fix since intermittent first place idea fixing fixed spend hours trying address problem think ways could occurring actually happened exception handler left model bad state opened possibility later race condition sometimes occurs sometimes desire spooky hardtoidentify side effects mask suppress errors totally agree errors obvious stop world know fix problem exception js nt exit program indication reason would assume later changes model exception thrown would report bad change information", "d": "12/2013"}, {"body": "alternatively since know way method defined never true end turn event loop could install settimeout instead repairing model state throws exception ultimately program errors errors person writing program case saying would really nice help nt necessarily mean swallowing errors", "d": "12/2013"}, {"body": "using sort error reporting mechanism help trace edge cases users", "d": "12/2013"}, {"body": "systems case airbrake nt provide information usersession triggered error", "d": "12/2013"}, {"body": "side though often turned airbrake also logs errors people generate open console poke things turned surpisingly often", "d": "12/2013"}, {"body": "reason nt use try finally block execute final cleanup code make certain nt get invalid state still let exceptions", "d": "12/2013"}, {"body": "debatable imagine exception probably already error state cleanup javascript", "d": "1/2014"}, {"body": "yet another reason nt want use named functions ie bugs surrounding pretty bad use variable instead", "d": "8/2012"}, {"body": "funny thing use named function well use cases binding event one works", "d": "8/2012"}, {"body": "also reading seems like use named functions nt mix named functions function expression giving function expression additionally name ie lt", "d": "8/2012"}, {"body": "passing named function callback works like mixed variant", "d": "8/2012"}, {"body": "hi kof thanks opening issue afraid nt quite understand question though referring arguments events something else collection add", "d": "8/2012"}, {"body": "sorry bad thought model created via collection add nt referenced collection model created directly", "d": "8/2012"}, {"body": "problem glad figured", "d": "8/2012"}, {"body": "juliankrispel thanks opening issue answer stackoverflow definitely pointed right direction try answer question backbone models unaware collection reset events due fact single model instance belong multiple collections although model canonical property nothing stopping would issues caused collection reset events bubbling models fwiw possible usecase would covered braddunbar patch", "d": "8/2012"}, {"body": "makes perfect sense thank", "d": "8/2012"}, {"body": "check", "d": "7/2012"}, {"body": "realize done way presents certain problems see avoid problems first method outlined could used however rather use awkward syntax got braces lying around method could used provide much cleaner syntax", "d": "7/2012"}, {"body": "nt present many problems want call super certainly call super coffeescript", "d": "7/2012"}, {"body": "okay cool thought would make things little simpler large number use cases really want call super", "d": "7/2012"}, {"body": "nevermind seems remove another library stack libraries including work see exactly causing problem", "d": "7/2012"}, {"body": "nt seem like great idea using collections attributes usually custom bit functionality needed specific problems want easy access lot array methods something nt actually collection wrap array underscore object parse", "d": "7/2012"}, {"body": "hi bodokaiser thanks opening issue model attributes array values tricky agree nearly always bad idea collection usually better option however method something backbone stays neutral putting squarely plugin territory thanks asking", "d": "7/2012"}, {"body": "anthonyshort hi good hint also wrap array underscore collection braddunbar okay understand descision", "d": "7/2012"}, {"body": "hi ichernev definitely working intended method mutates attribute state even behest another method specific methods change attributes call need validate attributes since neither need validate hope helps", "d": "7/2012"}, {"body": "one complicated situation yo think could wrap var beat eval get great result", "d": "7/2012"}, {"body": "think limiting optional parameters end route would completely normal limitation seeing probably nt throwing optional parameters randomy would eliminate edge cases assume nt added tell limitation additions limited javascript two extra regex helpers var leadingoptionalnamedparam w g var optionalnamedparam w g replace optionals first route routereplace escaperegexp amp replace leadingoptionalnamedparam replace optionalnamedparam replace namedparam replace splatparam guys think edge cases missing", "d": "7/2012"}, {"body": "another solution might separate way optional elements route made idea named params brackets denoting optional pieces wrapped around anything route definition would look like instead add following code javascript var optionalparam g later replace optionalparam seems like better solution actually cuz less magicful nt weird edge cases type instead perfectly fine thing regex escaping happens would need handle differently chosen syntax", "d": "7/2012"}, {"body": "closing favor pull request", "d": "10/2012"}, {"body": "regardless whether good idea general would odd represent bindings actual js objects string syntax let say wanted bind change event presumably write would mean extracting string evaling determine refers pretty gross reason makes sense use strings dom events lowerlevel methods backbone via jquery relies addeventlistenerattachevent take strings arguments", "d": "7/2012"}, {"body": "prefer fact dom events necessity separate model events outside previous technical issues raised logical reason mash model events dom events together viewevents hash would simple enough extend view modelevents hash facilitate simple mapping model events member methods would sane way go", "d": "8/2012"}, {"body": "plugin something similar overloading events nondom events seems like bit overhead", "d": "10/2012"}, {"body": "mulling ticket arguments something bit declarative persuasive still sure think use cases would actually end better animperativeapiinsheepsclothing beyond initial objections machineghost mentioned considerations view single element default times makes sense single description events also applied times models may transitory view may get one instantiated later ajax request finishes view may reference models listens events others references call methods declarative api would distinguish point event string looks like lost battle keeping js instead string better glad take closer look version ticket includes patch proposal discussion think would help flesh ins outs api bit", "d": "11/2012"}, {"body": "good point nt thought implementing modelbased events would require like method something along lines annoyance alone seems outweigh benefits able unfortunate views bind models events quite often least code shrug oh well", "d": "1/2013"}, {"body": "valid issue", "d": "7/2012"}, {"body": "seriously darn nonchalance comes pull requests starts get issue many developers wonder looking solutions", "d": "7/2012"}, {"body": "", "d": "7/2012"}, {"body": "", "d": "7/2012"}, {"body": "hi boxxxie rather interesting sure good idea need events spaces use underscores instead", "d": "7/2012"}, {"body": "simplicity sake however went edited event splitter assigned worked backbone creating events properly however backbone nt able let multiple event listeners object looks like suggestion break event system propose event system refactored would work someone wanted control eventsplitter clear eventsplitter changes event system break least experienced", "d": "7/2012"}, {"body": "simplicity sake make things simpler event names spaces", "d": "7/2012"}, {"body": "things users enter db use raw keys models also common write testing functions keys human readable sentences", "d": "7/2012"}, {"body": "see would recommend use different approach common likely comes several problems fragmenting event separators help backbone code interoperable nt pass standard litmus test features useful backbone users", "d": "7/2012"}, {"body": "understand deliberated subsequently closed wanted fire opinion since also affects events object mixed models collections views could used number ways number reasons forcing space convention upon users good default software defaults good best guesses features used nt way feature used framework creators hope leave many doors open possible think every usecase understand always tradeoffs change face change follows current conventions allows new user defined ones use backbone events object central communications bus within app sometimes event names made strings contain spaces need usual things one would normally events spaces sometimes never trigger multiple events one go wont ever step change local copy backbone make work bad practice leaves support change forever change boxxxie request within object configurable case case basis ie backboneevents object models views collections etc later enhancement would backbonedefaults object key read used define application wide backbone loaded applications would therefore option making change app wide individual basis reconsider", "d": "10/2013"}, {"body": "hi shannmcnicholl afraid still opinion remain internal introducing subtle differences events implementation seem like something would make things reliable convenient would caution using arbitrary strings event names easily cause collisions since control names directly easy enough use names without spaces", "d": "10/2013"}, {"body": "braddunbar get collisions events every module uniquely namespaced prevent things difference asking every module collapse spaces want listen event trigger one want spread logic everywhere would contrary logical solution care follow one line change would nt make backbone introduce kind difference events implementation jquery style would persist add flexibility give implementer power control app works order counteract issue wrap events object overload onofftrigger functions order collapse strings add lines code world ending hardly going cry either way grievance aired go business", "d": "10/2013"}, {"body": "introducing subtle differences events implementation seem like something would make things reliable convenient better worse exposing private function object property nt exactly something call subtle makes huge difference depending use case", "d": "10/2013"}, {"body": "mornin stevehurcombe nt know official support document knowledge backbone supports latest version chrome safari firefox opera also mobile browsers supported though nt know ones nt seen discussion support older versions though nt think would major issues please let us know help bugs old browsers get considerably less reports since used often", "d": "7/2012"}, {"body": "hi brad good know case rerun tests report back honest nt know significance may showstoppers may extreme edge cases wo nt disturb us", "d": "7/2012"}, {"body": "oh forgot mention failing tests master part ongoing effort improve test coverage routerhistory functionality believe fixed", "d": "7/2012"}, {"body": "hi tomkit thanks opening issue discussed tangentially backbone takes stance pushstate api broken way use well ignore first two arguments disagree previous reasons ignoring arguments please respond reevaluate", "d": "7/2012"}, {"body": "async try adding success callback options fetch consolelog good dealing async stuff try consolelog contactsmodels see shows anything also collections method builtin try", "d": "7/2012"}, {"body": "hi", "d": "7/2012"}, {"body": "documentcloud irc channel good place get help kind stuff documentcloud channel", "d": "7/2012"}, {"body": "thank link look around next time var contacts new usercollection contactsurl users username etarget val contactsfetch add true remove true success function contacts contactseach function contact consolelog contact ulcontactlist append contactget username", "d": "7/2012"}, {"body": "hi joezimjs thanks opening issue problem accepts two arguments attributes options nt provide attributes pass instead give following shot", "d": "7/2012"}, {"body": "awesome thanks", "d": "7/2012"}, {"body": "hi kav need reference model always listen event create adding like goes groups models reason wo nt work", "d": "7/2012"}, {"body": "well introduces extra callback flow otherwise would nt need thus functions create outside collection return model use collections need callback otherwise inconsistent thus seems strange remember tripping year ago getting way wednesday july pm brad dunbar wrote hi kav need reference model always listen event create adding like goes groups models reason wo nt work reply email directly view github", "d": "7/2012"}, {"body": "thus functions create outside collection return model use collections need callback would need callback", "d": "7/2012"}, {"body": "sorry looking listen add based solution wo nt work attributes nt include id guarantee object returned one created could store ids cids collection intersect post create ids cid list massive hack", "d": "7/2012"}, {"body": "sorry nt quite follow would mind posting code illustrates objective", "d": "7/2012"}, {"body": "much need workaround mean hell change return value add fork backbone codebase inconsistent across core collection operations particular reason subpar design therefore bug sure work around return value switched match rest core operations change anyone relying current behavior would trivial xadd add b xadd xadd b meanwhile workaround sans forking convoluted rather ugly make sense", "d": "7/2012"}, {"body": "codebase inconsistent across core collection operations particular reason disagree entirely different purposes perfectly natural return values different particular meant persist new model server meant insert models collection creating models passing workaround bug appropriate action given need reference said would like post code illustrating situation desired api glad take look", "d": "7/2012"}, {"body": "add models collection one also happens persist server nt make entirely different intend wait persisting model create add nt make sense example one create case model collectioncreate name foo stuff model add case model collectionadd name foo stuff model persisting goes initialize validate modelsave whenever decide persist today collection collectionadd name foo lt world helpful already collection reference reason might need chaining nt suggested use case hand nt reference hydrated model get need jump bunch hoops give back thing nt already rather one", "d": "7/2012"}, {"body": "whole bunch issues well ideas patch using", "d": "7/2012"}, {"body": "using cases like check support use supported oneline patch patch support old ie much sophisticated placed everywhere etc", "d": "7/2012"}, {"body": "yep much bug known limitation take care attribute keys making proposed patch would cause working code webkit firefox error internet explorer situation like avoid much possible", "d": "10/2012"}, {"body": "use", "d": "10/2015"}, {"body": "fwiw annotated source code say remove one many callbacks context null removes callbacks function callback null removes callbacks event events null removes bound callbacks events code works code commented respect argument null", "d": "7/2012"}, {"body": "hi thanks opening issue agree documentation could clear addressed", "d": "7/2012"}, {"body": "hey braddunbar actually meant comments inline code snippet says removes callback events removes callbacks events two examples equal example removes callbacks edit regard actually function run", "d": "7/2012"}, {"body": "code snippet says removes onchange callback events removes callbacks context events two examples equal example removes callbacks object would nt say equal despite fact passes nullundefined arguments certainly different maybe missing something response onchange callback events objectoff null onchange removes callbacks events objectoff null null context removes callbacks objectoff", "d": "7/2012"}, {"body": "braddunbar actually sorry nt changes event although documentation confusing closely resembled code snippet reflected exactly actually works thanks upgraded", "d": "7/2012"}, {"body": "glad could help", "d": "7/2012"}, {"body": "hi nrmitchi thanks opening issue since viewremove equivalent thisel remove would guess provided view correct", "d": "7/2012"}, {"body": "yes simply used thisel remove function instead", "d": "7/2012"}, {"body": "see would mind posting code could look", "d": "7/2012"}, {"body": "think may misunderstood initial question response write way removing view simply used thisel remove instead thisremove shortcut relevant components view javascript events click removeicon remove remove function thisel remove thisremove using thisremove opposed thisel remove producing error", "d": "7/2012"}, {"body": "issue overwritten function calling within cause infinite loop stack overflow try instead js var view backboneviewextend events click removeicon remove remove function thisremove", "d": "7/2012"}, {"body": "realized thank sorry inconvenience", "d": "7/2012"}, {"body": "problem glad could help", "d": "7/2012"}, {"body": "getting error well however removal function view called dispose got add stuff hence wrapped method boiled working remove calling like thismaptraildetails thismaptraildetailsdispose keep getting maximum call stack size exceeded error mentioned though", "d": "10/2012"}, {"body": "using edge version calls essentially calling case", "d": "10/2012"}, {"body": "issue assumed dispose safe use mistake renamed destroy works expected thank", "d": "10/2012"}, {"body": "thank issue overwritten remove function", "d": "7/2013"}, {"body": "sounds cool go backbone nt anything localstorage directly", "d": "7/2012"}, {"body": "hi machineghost believe already changed grab latest master", "d": "7/2012"}, {"body": "awesome thanks", "d": "7/2012"}, {"body": "dupe also presents solution switch canary daily builds rather dev channel weekly builds", "d": "7/2012"}, {"body": "yep think vincentbriglia right please direct comments thanks reporting zjhiphop", "d": "7/2012"}, {"body": "hi butuzgol called canonical parsed representation model used initialize model attributes opposite order would cause attributes change opportunity reinitialize model", "d": "7/2012"}, {"body": "confusing parse available options paragraphs text", "d": "7/2012"}, {"body": "would nice options broken default clear libraries handle different kinds options objects eventoptions xhroptions etc document shared options signatures single place rather repeatedly might might practical", "d": "7/2012"}, {"body": "also add todo list breakdown events may triggered method arguments passed happy help workload standard docs format agreed", "d": "7/2012"}, {"body": "options arguments documented correctly also enjoy prosaic nature docs would rather replaced giant page tables lists said objectives satisfied better", "d": "7/2012"}, {"body": "catch lot people included confused events thrown exactly braddunbar agreed explicit documentation nt mean ca nt read well personally enjoy twitter bootstrap documentation everything lots examples nt look like reading bunch auto generated docs", "d": "7/2012"}, {"body": "seems scope separate communitymaintained project fully explicitly rigourously document backbone would nt necessarily need perhaps nt official docs braddunbar correctly said simplicity minimalist nature docs great terms getting grips basics quickly easily nt mean nt valid use case finetoothedcomb version", "d": "7/2012"}, {"body": "", "d": "7/2012"}, {"body": "need something similar extjs documentation", "d": "8/2012"}, {"body": "looks like patches yet feel free send pr specific improvements docs always welcome", "d": "10/2012"}, {"body": "point actually setting either videosearchajax photosearchajax since contained within function bodies nt called set default ajax specified base search object notice also returns true", "d": "7/2012"}, {"body": "could sworn videosearchajax photosearchajax search function called life replicate", "d": "7/2012"}, {"body": "well let us know manage reproduce", "d": "7/2012"}, {"body": "update many site backbone", "d": "7/2012"}, {"body": "hey chuangbo fairly certain issue latest chrome details including chromium bug seems fixed already", "d": "7/2012"}, {"body": "many thanks braddunbar", "d": "7/2012"}, {"body": "seeing android mobile safari user agent strings offending browsers noticed fix users", "d": "11/2013"}, {"body": "adambom get exact error tried apps android device nt issue far would mind paste stack trace", "d": "11/2013"}, {"body": "yeah basically personally seeing recorded sent log using windowonerror also seeing chrome guess people still running version backbone version unfortunately windowonerror nt capture stack traces error sorry minified code beautified version", "d": "11/2013"}, {"body": "getting kind error help would great", "d": "7/2012"}, {"body": "tgriesser recently pointed proposed good solution appear regression thinking best way solve", "d": "7/2012"}, {"body": "note actually bug silent changes still trigger", "d": "7/2012"}, {"body": "braddunbar new ideas looking little day still ca nt come cases patch nt generate expected result solutions would involve heavily reworking functions", "d": "7/2012"}, {"body": "think depicted test assumptions believe every event raised different value imediate previous one case expected changes", "d": "9/2012"}, {"body": "braddunbar another idea could refactored working came across test case could nt figure would desired behavior unset would nt change correct", "d": "9/2012"}, {"body": "tgriesser test may exists attribute deletion unnotified matter contains", "d": "9/2012"}, {"body": "stegrams correct idea attribute addition deletion always generates change event", "d": "9/2012"}, {"body": "like share test issue everyone finds helpful", "d": "9/2012"}, {"body": "tgriesser nt merge fix issue nt issue closed", "d": "11/2012"}, {"body": "shoe yes closed", "d": "11/2012"}, {"body": "closing fixed leegorous please let us know problem nt solved", "d": "11/2012"}, {"body": "collection constructor place internally call reset passes silent true confident fix remove silent true forced reset", "d": "7/2012"}, {"body": "provide failing test case demonstrates undesirable behavior", "d": "12/2012"}, {"body": "nt using collection url method", "d": "7/2012"}, {"body": "poor encapsulation collection object examples view even router would object knows parameter values classes turn would responsible resetting models collection would nt want write collection url references multiple objects", "d": "7/2012"}, {"body": "already fine jquery options respected forwarded request backbone sync methods", "d": "7/2012"}, {"body": "whoa quite right seeing problem documentcloudorg even though likely fixed getting pushed chrome proper let get sorted", "d": "7/2012"}, {"body": "done poking around whatever reason backbonecollection backbonemodel function set backbonerouter constructor function particularly weird extend functions declared time modelextend collectionextend routerextend viewextend extend router view extend functions set correctly", "d": "7/2012"}, {"body": "truly bizarre behavior replacing line results following behavior first assignment returns correctly compare results line return value constructor backbonerouter backbonecollection backbonemodel interestingly however check seems correctly assigned appropriate function body looks like canary assigning correctly returning function bodies unpredictably", "d": "7/2012"}, {"body": "filed", "d": "7/2012"}, {"body": "awesome looks weird spent two hours troubleshooting code realized beyond error highcharts library time ago took quite long time corrected canary build", "d": "7/2012"}, {"body": "going close us seems pretty clearly like something nt worry", "d": "7/2012"}, {"body": "anyone looking bug seems present well", "d": "7/2012"}, {"body": "getting really erratic behavior addition issue router undefined really hope sort soon miss canary web inspector", "d": "7/2012"}, {"body": "behavior chrome devm", "d": "7/2012"}, {"body": "backbonejs site working fine since morning chrome update devm getting method bindroutes error defining model chrome browser bug even backbone official sample todo app working", "d": "7/2012"}, {"body": "running version dev hope issue nt make dev channel release", "d": "7/2012"}, {"body": "fyi think underlying issue fixed guys expect things good next chrome dev build", "d": "7/2012"}, {"body": "hope", "d": "7/2012"}, {"body": "looks like fixed version canary", "d": "7/2012"}, {"body": "hardbap still version dev channel nt supposed get updates canary", "d": "7/2012"}, {"body": "victorgama dev channel released twice weekly canary daily", "d": "7/2012"}, {"body": "hardbap nice know change release channel thank", "d": "7/2012"}, {"body": "fixed", "d": "7/2012"}, {"body": "yikes", "d": "7/2012"}, {"body": "experiencing issue version canary upgraded version canary issue nt occur longer", "d": "8/2012"}, {"body": "sorry revive old thread facing error trying run backbonejs based website android hdmi sticks ie case favi entertainment smartstick running ics webkit help would really great", "d": "1/2013"}, {"body": "collection fire reset event models inside collection fire event attributes get updated data returned fetch first fetch collection contains models get event fired collection", "d": "7/2012"}, {"body": "see updated documentation great behaviour clearer models inside collection fire change event attributes get updated data returned fetch would good addition docs since neither mention", "d": "7/2012"}, {"body": "using latest backbone source need pass update models perform fetch get events firing models", "d": "7/2012"}, {"body": "undocumented", "d": "7/2012"}, {"body": "version directly github showing could get events fire part quoted original issue actually model fetch current version backbone wo nt get change events happening models collection fetch either completely reset collection add models nt exist yet latest github get change fire models using options", "d": "7/2012"}, {"body": "ah bad great feature love backbone pollute thread suggest collectionslice collection would useful thanks hard work", "d": "7/2012"}, {"body": "change ok understand correctly gt eg actually option allow models form collection individually trigger event updated datas existing models server response right addremove new models response collection missing models collection response respectively ed thank", "d": "10/2012"}, {"body": "understand correctly backbonecollection fetch gt eg master actually merge true option allow models form collection individually trigger change event updated datas existing models server response right yes seems correct addremove new models response collection missing models collection response respectively added remove collection reset appropriate type operation", "d": "10/2012"}, {"body": "two snippets equivalent using unscoped jqueryzepto query scoped proposed property would assume create scoped selections also guessing mean syntax otherwise really fan change nt really save anything terms reducing amount code write creates nonobvious syntax creating references child elements", "d": "7/2012"}, {"body": "note created scope selection", "d": "7/2012"}, {"body": "yep proposed hash", "d": "7/2012"}, {"body": "", "d": "10/2012"}, {"body": "", "d": "11/2012"}, {"body": "", "d": "11/2012"}, {"body": "afraid nt help even equality considered distinct different criteria still communicate change feel free work particular semantics want nested models different equality send pull request moment request nebulous", "d": "12/2012"}, {"body": "changes two lines code needed added backbonemodel backbonecollection", "d": "12/2012"}, {"body": "morning bobmop knowledge backbone provide support javadoc style documentation probably know docco used generate docs backbone different style documentation", "d": "6/2012"}, {"body": "hi powmedia going think use catchall route work", "d": "6/2012"}, {"body": "worked thanks braddunbar seems string starting asterisk ok behaviour seems strange could explicit supported", "d": "6/2012"}, {"body": "fantastic think fairly straightforward", "d": "6/2012"}, {"body": "one point sure mentioned elsewhere iterating object guaranteed run order browsers definition perhaps via array otherwise case would nt work expected", "d": "6/2012"}, {"body": "reference anyone else issue wrote tiny override plugin fires event backbonehistory instance listen execute whatever functions want handle undefined routes could get method work reliably browsers due behavior explained comment struck simple fix backboneroutenotfound", "d": "3/2013"}, {"body": "powmedia intended behavior difference order allow routes added later override previous routes since routing table needs respect order intentional choice explained comment route adding logic ends taking place closing", "d": "11/2012"}, {"body": "wrote little wrapper sorts routes specificity registering naive proof concept hope nt reopen issue", "d": "5/2015"}, {"body": "also see code example", "d": "6/2012"}, {"body": "braddunbar jashkenas guys tell bad least", "d": "6/2012"}, {"body": "good morning ianstormtaylor thanks writing thoughts mostly agree pain points writing plugins initialization however disagree proposed solution problem understand plugins backbone objects meant inherited need way specify logic executed called child classes usually place since like keep clean inheriting classes calling super method required presents problem inserting method logic constructor calling proposed solution opinion already perfectly good way accomplish require child classes call parent implementation providing well understood technique requires extra explanation code situation come first place backbone attempted circumvent calling super methods nt think adding methods simplify fact think make things worse short nt think avoiding calling super methods verbosity good enough reason add complexity form configuration methods fact would advocate going direction entirely removing", "d": "6/2012"}, {"body": "view method exists parse options specify instantiating view maybe needs renamed removed also fan requiring extending classes call super methods something like method basic fundamental object extends backbone construct never implemented base type type built explicit intent never instantiated directly always extended methods well want override method choice call super method distinction mind methods exist purely extending classes implement etc vs methods core functionality backbone etc said though nt understand need run code way ticket suggests provide specific real world example one projects really needs ianstormtaylor work backbone building plugins creating project specific abstractions etc never seen need anything provide method base type", "d": "6/2012"}, {"body": "view configure method exists parse model collection options specify instantiating view maybe needs renamed removed sorry unclear meant logic included could moved constructor removed entirely case implementation detail relied upon extensions also fan requiring extending classes call super methods something like initialize method basic fundamental object extends backbone construct never implemented base type type built explicit intent never instantiated directly always extended problem multiple levels inheritance never get around issue class implemented classes extend must call parent implementation suppose fine anticipate one level inheritance certainly ca nt guarantee", "d": "6/2012"}, {"body": "problem multiple levels inheritance never get around issue class implemented initialize classes extend must call parent implementation suppose fine anticipate one level inheritance certainly ca nt guarantee nt think anything multiple levels inheritance multiple levels inheritance backbonemarionette view framework marionetteview marionetteitemview marionettelayout none base types implements method leave person extending itemview layout base types never meant instantiated directly always meant extended base types provide needed functionality without requiring call super method never get away super method calls leave core methods like alone base types require users call super base types project probably going initialize method type someone decides extend call super type initialize need implement method", "d": "6/2012"}, {"body": "backbonerelational initialization different variant boils javascript backbonerelationalmodel backbonemodelextend isinitialized false works called right constructor least close enough bit better variants wo nt override often normally want call parent implementation regardless proper builtin solution would still preferable though", "d": "6/2012"}, {"body": "way arrived solution ask extra configuration logic go baseview answer pretty simply right backbone normal configuration logic aka right lot cases could probably covered adding logic backbone logic overriding bars anyone augmenting internal backbone logic reason example change remove method decided wanted remove encourages people accessing things directly instead given gettersetters agreed upon would every across entire app ridiculous yes work janky already know want apply classes way time instead pauluithol yeah technically works hack nt hook need nt need store state augment get functionality could also grafting initialization logic well would also hack worse writing mixin need add bunch different logic potential class could mixed view override model override store initialized state collection override store initialized state router override instead could override method derickbailey think problem lot times logic beginning end constructor works means none views inherit optout nt even happened time called like mentioned ca nt override backbone core logic braddunbar used mixins wrong predefined place configuration allowing people augment support specific use case way see backbone always claims nt want support edge cases core awesome make augmenting like hard think constantly calling configuration logic calling chain baseview regardless many children deep janky workaround happen good place add configuration logic big difference logic specific type view needs initialize set specific needs versus logic know want appwide start views views right fine overriding easy models collections good place add logic", "d": "6/2012"}, {"body": "configure used mixins leading underscore lack documentation denote internal method changed removed point think constantly calling configuration logic initialize calling chain baseview regardless many children deep janky workaround happen good place add configuration logic disagree calling super method well understood method extension javascript workaround whether preferred technique case different question", "d": "6/2012"}, {"body": "ianstormtaylor provide specific example need make application behave way need behave specific example functionality need application behavior best facilitated way may help make case much stronger may help others see needs possible someone might suggest alternative suits needs possible seeing specific example would convince core contributors accept pull request", "d": "6/2012"}, {"body": "worth use inside layoutmanager without ability bind reference render inside like would possible", "d": "6/2012"}, {"body": "one case mixin adds state handling backbone class backbone state important part inlined javascript function backbone backbonemixin backbonemixin backbonemixinstate function never worry setting states states setup time called model collection view", "d": "6/2012"}, {"body": "also think tbranyen good example view configure method useful", "d": "6/2012"}, {"body": "worth use configure inside layoutmanager without ability bind reference render inside initialize would possible would nt say possible marionette without using starting see value something like ticket suggesting personally think wrong method name though methods nt messed imo meant private something along lines could great benefit plugin developers like pauluithol tbranyen applications general projectspecific abstractions layers created", "d": "6/2012"}, {"body": "derickbailey possible without creating new constructor layoutmanager works functionality provides", "d": "6/2012"}, {"body": "gladly instead going parity view edit updated pull request public", "d": "6/2012"}, {"body": "another example useful mixin would able classagnostic common hook came backbone google group", "d": "10/2012"}, {"body": "sure really follow ticket asking seems like mostly request add additional empty methods initialization step add code various subclasses without ever call response would call said something want add base model pretty easy basemodel backbonemodelextend configure function constructor function thisconfigure backbonemodelapply arguments", "d": "12/2012"}, {"body": "heya peetertomberg yes normal behavior routes checked inverse order added since instantiated last routes checked matches first since match executed handler", "d": "6/2012"}, {"body": "everything posible", "d": "6/2012"}, {"body": "heya yaroslavulanovych thanks issue definitely result fact accepts space separated events ca nt find documentation says nt use attribute names spaces though would nt recommend", "d": "6/2012"}, {"body": "run issue debugging fun space separated events seems like strange design choice use array avoiding ambiguity", "d": "6/2012"}, {"body": "since api likely change added documentation thanks pointing", "d": "6/2012"}, {"body": "recommendation party services using spaces attribute names happens us lot", "d": "6/2012"}, {"body": "sure would definitely translate modelparse", "d": "6/2012"}, {"body": "issue appears resolved close", "d": "8/2012"}, {"body": "yep think", "d": "8/2012"}, {"body": "try", "d": "6/2012"}, {"body": "swarnak probably good deal luck posting type issue mailing list backbone requirejs", "d": "6/2012"}, {"body": "afraid way api must necessarily work entire point get model reference back listen events nt want reference model id nt create clientside server send first note listen hear assigned server", "d": "6/2012"}, {"body": "hi thanks opening issue think general idea extracts array unparsed response extracts attributes unparsed model response implies use function single model responses collection responses instance would correctly parse following json collection fetch model fetch answer question", "d": "6/2012"}, {"body": "hi braddunbar thanks reply understand things done special case another catch using jathjs parse serverresponse therefore parsing done completely collectionparsemethod returning fetch goes modelparsemethod let parse xml way collection model collection capable calling server data codeduplication part avoid scenario would extract parts xml collectionparsemethod pass parts modelparsemethod raw xml thanks tobias", "d": "6/2012"}, {"body": "nt much experience situation pain separate two always pass", "d": "6/2012"}, {"body": "nope absolutely way change url without reloading page old ies exactly problem solves", "d": "6/2012"}, {"body": "thks jeremy said old ie experiencing issue old ie pleonasm", "d": "6/2012"}, {"body": "covering bases never remember exactly ie supports", "d": "6/2012"}, {"body": "good morning fauntleroy thanks pointing addressed please grab latest master give shot", "d": "6/2012"}, {"body": "works like charm thanks", "d": "6/2012"}, {"body": "hi greengit actually discussed rather recently given backbone remain flexible ease implemented think best left user fact opinion options saved view either", "d": "6/2012"}, {"body": "hi aaunel thanks issue certainly accomplish describing without extra support however sounds like want separate model storing album attributes instance think success pattern hope helps", "d": "6/2012"}, {"body": "braddunbar thanks response currently wrapping anything needs attributes well multicollection data structures models considered badpractice carry way otherwise solution would work perfectly small selections metadata cheers", "d": "6/2012"}, {"body": "braddunbar answer helped", "d": "2/2013"}, {"body": "along lines would nice backbone models aware nested models collections fetch", "d": "6/2012"}, {"body": "created jsfiddle problem see running code validation failing see error message second textarea save function still returning success see text first textarea", "d": "7/2012"}, {"body": "created page jsfiddle see running code press trigger modelsave button validation failing see error message second textarea save callback function still returning success see text first textarea claudio ortolina reply replygithubcom benjen bgunn rocketmailcom sent tuesday july subject backbone modelvalidate failing stop modelsave saving server hi would able create page jsbin jsfiddle markup well reply email directly view github", "d": "7/2012"}, {"body": "afraid nt minimal enough test case us work probably explains nt much luck getting response let know still seeing problem using latest master version backbone please post reproducible minimal test case ticket", "d": "12/2012"}, {"body": "afternoon knotschi thanks pointing looks though already fixed grab latest master fix issue", "d": "6/2012"}, {"body": "morning lucmult thanks opening issue using calls explicitly still called even relevant code js wait ing set changed attributes validate early optionswait thisvalidate attrs options return false current clone thisattributes regular saves attributes persisting server var silentoptions extend options silent true attrs amp amp thisset attrs optionswait silentoptions options return false hope helps", "d": "6/2012"}, {"body": "hi braddunbar actually code validation called passed attrs key value use case like scenario validation never called overwritten save method model", "d": "6/2012"}, {"body": "nt think cases attributes passed addressed thanks lucmult", "d": "6/2012"}, {"body": "hi starkovv right would cool integration probably wo nt added backbone proper though end writing please add wiki", "d": "6/2012"}, {"body": "morning nejcjelovcan thanks issue think private providing inheritance incidental piece backbone rather goal read", "d": "6/2012"}, {"body": "hi dombesz thanks pointing documentation actually already updated please let us know change nt sufficient", "d": "6/2012"}, {"body": "good morning greengit thanks pointing agree great deal images documentation site cached resulting typical payload small fast loading working caching disabled similar situation", "d": "6/2012"}, {"body": "let smart way change images lazilyloaded javascript viewport scrolls em good example imageoriented site see", "d": "6/2012"}, {"body": "braddunbar cherrypick change ghpages well", "d": "6/2012"}, {"body": "step pushing earlier", "d": "6/2012"}, {"body": "howdy thanks question since passed along specify custom http method like also override default js var model backbonemodelextend sync function method model options custom logic var sync backbonesync backbonesync function method model options custom logic", "d": "6/2012"}, {"body": "afternoon tonyxiao thanks pointing certain situation describing think several involving possibly newer option would mind providing snippet reproduces behavior", "d": "6/2012"}, {"body": "oops think filed bug report wrong place problem happens using backbone together backbonerelational overridden backbonecollectionprototypeadd globally resolve duplicate objects based idattribute happens created model say id client later fetch collection contains object different properties provided server backbonerelational update model wo nt trigger change event default uses suppresses events individual models sure relevant thought explain anyways", "d": "6/2012"}, {"body": "implementation commonjs talking exactly", "d": "6/2012"}, {"body": "using backbone titanium build iphone application read spec mentions following module must free variable module object module object must readonly nt delete id property toplevel id module id property must require moduleid return exports object moduleid originated say moduleid passed another module requiring must return original module module object may uri string fullyqualified uri resource module created uri property must exist sandbox", "d": "6/2012"}, {"body": "huh node implementation works anyhow think original workaround correct titanium nt tack object directly export namespace instead", "d": "6/2012"}, {"body": "seems implemented nodejs also see api", "d": "6/2012"}, {"body": "nope using brunch commonjs autowrapping way everything works broken titanium", "d": "6/2012"}, {"body": "node get something different", "d": "6/2012"}, {"body": "hey wwwboy thanks letting us know latest version tests master changed use mock location rather using directly found makes stable passes opera would mind giving try environment", "d": "6/2012"}, {"body": "closing fairly certain fixed still repro please let know thanks", "d": "6/2012"}, {"body": "thanks original message brad dunbar mailto reply replygithubcom sent thursday june wwwboy subject backbone opera fails router routes via navigate replace true closing fairly certain fixed still repro please let know thanks reply email directly view github", "d": "6/2012"}, {"body": "think completion definitely qualifies event", "d": "6/2012"}, {"body": "realized pr conflicts braddunbar easy change though necessary", "d": "6/2012"}, {"body": "problem glad update later thanks heads", "d": "6/2012"}, {"body": "sounds good go", "d": "6/2012"}, {"body": "morning aoboturov thanks pointing actually intentional meant remind passes along argument models default see details", "d": "6/2012"}, {"body": "hi davidmarble thanks pointing explicit call call collection constructor passed may may include instance following log js var model backbonemodelextend parse function resp consolelog parse return resp var collection backbonecollectionextend model model new collection reset id parse true", "d": "6/2012"}, {"body": "braddunbar yep get called models preparemodel opened issue inconsistency called models collections issue inconsistency called several ways developer may want populate collection notyetpreprocessed javascript arraysobjects ways think passing array objects collection constructor calls calling directly calling object instead initialized model developers sort work around calling objects cases send methods pointing rather inconsistent functionality automatically applied", "d": "6/2012"}, {"body": "ah misunderstood mean able called nt thought seem inconsistent", "d": "6/2012"}, {"body": "came issue assumed passing parse true collection ways mean parse collection get executed problem executed calling fetch initially load page constructing collections json parse nt called guess call manually untilif fixed", "d": "11/2012"}, {"body": "working", "d": "12/2012"}, {"body": "issue inconsistent support options views models collections confusing", "d": "7/2012"}, {"body": "news ca nt imagine persons cares", "d": "9/2012"}, {"body": "one really easy change backward compatibility problems", "d": "9/2012"}, {"body": "mornin kof interested also discussed since either pattern acceptable nt saveclone best backbone leave user especially since easy add", "d": "9/2012"}, {"body": "strange sure add backbone remains inconsistent leaving fix", "d": "9/2012"}, {"body": "heya davidmarble thanks issue could explain need order parse nested collections nt quite understand use case", "d": "6/2012"}, {"body": "well hoping add detailed use cases change nothing functionally change current use backbone allows access parse called instead noted good place extend backbone example implement nested collections many ways people come nested collections model one entry point empty overloadable method called processing occurs good place preprocess nested data access means developer access properties methods model collection within numerous ways one data member used example accessing configuration information stored call supercollection configure subcollections developer wants nest one models within supercollection", "d": "6/2012"}, {"body": "nt use case inclined leave eliminate chance regression also lots experience using creating nested collectionsmodels never needed use let know good use case reopen", "d": "6/2012"}, {"body": "nt expect quick dismiss explanation already given simplicity suggesting ca nt regression change order lines merely basic code organization decision every change project must clear use cases simple change opens opportunities coders utilize framework takes away functionality already exists adds explicit new features need defending attempt write specific use case name trying hard give back project encouraging minor improvement example code impossible write currently would possible simple change commented coffeescript compiled version though might seem involved used reading coffeescript output line gist impossible current backbonejs possible simple switch example json data source collection feeds supercollection multiple feed models json class feeds extends collection model feed url feeds constructor models options gt set instancespecific parameters options optionsparams params extend optionsparams else params super feed model includes feeditems nested collection feeditem models class feed extends model constructor attrs options bool keep track whether nested collection models parsed appended replace existing models addnested false parse response xhr handle nested feed item collection model note handles one level nesting options may important fetch methods calling parse wo nt passed embedded calls nested collection feed feeditem models little work feeds source supported collection could used fetch changes individual feed class feeditems extends collection model feeditem url feed actual feed items", "d": "6/2012"}, {"body": "fixed master needs get merged ghpages", "d": "10/2012"}, {"body": "make sure calling page finished loading", "d": "6/2012"}, {"body": "mainjs file use requirejs requireconfig paths use libsrequireuse jquery libsjqueryjquerymin jqueryui underscore libsunderscoreunderscore backbone libsbackbonebackbone text libsrequiretextmin use underscore attach require app function app document ready function appinitialize main appjs file initilized document ready still see error need wait window load", "d": "6/2012"}, {"body": "jashkenas pointed also see backbonehistorystart call without knowing rest application would ask change code check error still", "d": "6/2012"}, {"body": "filename appjs define use underscore jquery use backbone router request routerjs function backbone router var initialize function return initialize initialize routerjs filename routerjs define use underscore jquery use backbone viewsdesktop eventbus viewfactory function backbone mainhomeview eventbus viewfactory var approuter backbonerouterextend routes default default initialaction var initialize function var approuter new approuter backbonehistorystart return initialize initialize backbonehistorystart call routerjs", "d": "6/2012"}, {"body": "using modernizr check hashchange supported passing option skip haashchange app loads find solution permission denied issue remove different calls", "d": "6/2012"}, {"body": "okay fairly hard debug anyone know application refactor core problembug app code put jsfiddle bootstrapped smth stripped code assure nothing rest code causes failure could provide qunit testcase fails would even better please read github markdown guidelines syntax highlighting finished steps least fiddle ping amp try help", "d": "6/2012"}, {"body": "figured issue caused changing document domain one functions need support integration intranet apps remove code eg documentdomainxyzcom everything works fine particular supporting navigation browser back forward buttons set event window catch ignore error", "d": "6/2012"}, {"body": "similar problem backbone functions expected modern browsers gt including chrome safari firefox however bombs reliably backbonehistorystart placed code follows tag code failing gethash function called navigate called start bug reintroduced lately", "d": "9/2012"}, {"body": "experiencing issue backbone following swarnak lead found issue described need able set documentdomain support navigation made changes hacks problem disappeared diff backbonejsorig backbonejsmodified lt gethash function window lt var match window locationhrefmatch lt fragment thislocationpathname lt var loc thislocation lt thislocationreplace thisroot thislocationsearch thisfragment lt var href locationhrefreplace javascript lt locationreplace href fragment lt locationhash fragment naturally changes would nt good backbone number reasons eg tie library browsers", "d": "1/2013"}, {"body": "hi mzooms thanks opening issue fyi discussed previously", "d": "6/2012"}, {"body": "fyi todo branch refactored since rob wrote ticket pulled better worse addy changes todomvc uppercasing discuss simply objects talking global objects something tend like distinguish local variables deep function see assumption local certainly change folks feel like confusing", "d": "6/2012"}, {"body": "feels like inherits like instance also agree ensuring examples follow best practices", "d": "6/2012"}, {"body": "molily", "d": "6/2012"}, {"body": "convention global objects reference removes doubt", "d": "10/2012"}, {"body": "think leave uppercasing take look methods todosjs file reason todos collection items added changed kick things loading preexisting todos might saved localstorage initialize function", "d": "12/2012"}, {"body": "chandram check section syntax highlighting better formatted code first call template see underscore help method ca nt see called render document ready function", "d": "6/2012"}, {"body": "identical identical objects browser provided give access method method provided jqueryzeptoenderetc use wrapped form via instead fix problem", "d": "6/2012"}, {"body": "thanks opening issue preliminary suggestions tried stepping debugging tools see exactly exception coming circumstances surrounding eg stack whats info chrome dev tools reproduce result using whats currently master handful bug fixes various behaviors landed since also could create example test case bit detail use case sample jsfiddle fork get started", "d": "6/2012"}, {"body": "oddly enough happens one model using stepped chrome dev tools leaves code soon try use set method goes requireminjs creates errors nt know recreate issue jsfiddle work fine times randomly throw typeerror try find line minified js file backbone see exactly happening", "d": "6/2012"}, {"body": "issue bookmarked page note learn anything edit started using backbone cause issue improper use set wrote mymodelset myfield correct usage mymodelset myfield", "d": "9/2012"}, {"body": "closing based follow lack actionable information thereafter", "d": "11/2012"}, {"body": "think assumption overwriting provided methods less going control going use therefore would know needed account flexible arity situations fwiw also even easier way preserve ultimately falling back original method use apply instead call", "d": "6/2012"}, {"body": "agree wookiehangover using instead much nicer way ensure original arguments get passed make sure nt change calling implementation detail garnered reading source nt really relevant documentation thanks pointing molecularbear", "d": "6/2012"}, {"body": "til means thanks braddunbar", "d": "6/2012"}, {"body": "discussed think solution use instead", "d": "6/2012"}, {"body": "probably idiomatic seem like case handle", "d": "6/2012"}, {"body": "actually looking source backbone handles fine since array sliced iterating upgrading solve issue", "d": "6/2012"}, {"body": "um schrieb brad dunbar actually looking source backbone handles fine since array sliced iterating upgrading solve issue thanks", "d": "6/2012"}, {"body": "might related although described another case similar problem occurs", "d": "6/2012"}, {"body": "example root root navigating root causes url rootroot populated browser navigating mean calling actually pointing browser", "d": "6/2012"}, {"body": "braddunbar calling", "d": "6/2012"}, {"body": "mean essentially calling root fragment argument order navigate root seems incorrect though line would suggest somewhat supported use instead navigating root fact intention may quite understand", "d": "6/2012"}, {"body": "intention case root heh issue though inconsistency means things like theoretically work intentions sort aside somewhat related problem really change whether issue bug working click handler views grabs attribute clicked link uses determine navigate way link work whether using routing normal browser navigation however page place link href browser fallback link would correct manifests cases simplest case problem could find goal make flexible link click handler works inconsistency found way", "d": "6/2012"}, {"body": "ah see thanks walking use case big help solving issues like problem using precludes navigating fragment identical root root want navigate fragment way tell meant links probably less trouble remove root calling something like", "d": "6/2012"}, {"body": "thanks see rootremoval code thought supposed happen backbone code thanks helping still think inconsistency little strange may perhaps different problem", "d": "6/2012"}, {"body": "closing unless truly unresolved issue", "d": "11/2012"}, {"body": "reproduced issue process noticed additional odd behavior following routes historystart call like hitting trigger roothandler callback seems like bug", "d": "6/2012"}, {"body": "looks like duplicate bug braddunbar working another branch", "d": "6/2012"}, {"body": "nt think issue problem need extra slash root order fire empty route", "d": "6/2012"}, {"body": "definitely bit different somewhat related wondering perhaps strip trailing slash comparison works either way navigating instead seems reasonable take stab see edge cases pop", "d": "6/2012"}, {"body": "hi rquinlivan thanks issue used method describe trigger parse events seemed work fine js var model backbonemodelextend parse function resp thistrigger parse resp parse stuff return resp feel like callback needed asynchronous situation would use one parse", "d": "6/2012"}, {"body": "precisely use case considering essentially interesting js var col new mycollection colurl myurl colfetch function mycallback something requires collection already populated var view new myview viewon collection parsed mycallback basically want know collection finished parsing response", "d": "6/2012"}, {"body": "hmm case recommend using event possibly listening updating ui necessary reason", "d": "6/2012"}, {"body": "think works use case thanks", "d": "6/2012"}, {"body": "great", "d": "6/2012"}, {"body": "hi serpenthelm thanks opening issue anything wrong yes intended behavior options set model ones included viewoptions others set default could introduce naming collisions custom functions properties set manually constructorinitialize", "d": "6/2012"}, {"body": "thanks opening issue sebpiq believe things describing already possible code master first request takes option update models id instead adding maintaining model store need use factory function property js var collection backbonecollectionextend model function attrs options var model attrs amp amp attrsid null amp amp storeget attrsid model model new model attrs options return model", "d": "6/2012"}, {"body": "oh thanks info nt know well kind think extra options like come fact tweak nt better idea make hook methods like one suggested make whole process customizable main advantage classes vs functions nt add extraoption every time missing feature keep library lean", "d": "6/2012"}, {"body": "hooks often better options particularly difficult regard glad look pull request solution though", "d": "6/2012"}, {"body": "well try", "d": "6/2012"}, {"body": "also solution store problem nt work pass instances", "d": "6/2012"}, {"body": "right example would need good deal code real world situation", "d": "6/2012"}, {"body": "hi miketierney thanks submitting issue right view make fail create elements without including shim however backbone nt aim fix issues since already fixed quite well need include element polyfill order work elements ie example code works beautifully including page", "d": "6/2012"}, {"body": "think know happened situation actually using part modernizr library minor release behind therefore lacking fix issue referenced thanks prompt response", "d": "6/2012"}, {"body": "sure thing glad resolved issue", "d": "6/2012"}, {"body": "hi dombesz thanks reporting believe already fixed would mind trying code master", "d": "6/2012"}, {"body": "get issue validation nt occur unless pass object parameter save modelsave calling modelsave bypasses validation downloaded latest version backbone v", "d": "7/2012"}, {"body": "dombesz skbailey woud mind trying latest master wrong think fixed thanks", "d": "7/2012"}, {"body": "ok tried master call validate new issue getting error event model intentionally make validation fail modelon error function model error nt work", "d": "7/2012"}, {"body": "like error callback works modelsave", "d": "7/2012"}, {"body": "providing callback current code trigger event issue aims address perhaps merged soon like error callback works modelsave still nt work via would mind posting reduced test case debug", "d": "7/2012"}, {"body": "provide callback model modelon error documentation says failed validations trigger error event callback one view methods call modelsave modelsave nt trigger error modelsave triggers modelset value error function assuming suppresses error event make sense", "d": "7/2012"}, {"body": "would mind posting reduced test case take look", "d": "7/2012"}, {"body": "var mymodel backbonemodelextend urlroot example validate function attrs return never valid var mymodel new mymodel id mymodelon error function model error alert error mymodelsave produce alert doesnt", "d": "7/2012"}, {"body": "thanks skbailey addressed", "d": "7/2012"}, {"body": "hi wolfgangadamec nt know aware fairly easy use space separated events listen collection changes js collectionon add remove reset instead collectionon add collectionon remove collectionon reset way proxy events custom collection class like js var collection backbonecollectionextend initialize function thison add remove reset function thistrigger change length thislength since rather easy think probably leave user implemented hope helps", "d": "6/2012"}, {"body": "thank", "d": "6/2012"}, {"body": "hi milosdakic thanks issue actually discussed calls made order collection chance fully initialized models added eg dynamically setting property", "d": "6/2012"}, {"body": "hi braddunbar thanks linking discussion would possible option allow passing silent option construction change collection constructor would minimal", "d": "6/2012"}, {"body": "want event fire new collection call creating collection way still get event nt worry", "d": "6/2012"}, {"body": "braddunbar seems like sensible solution already achievable requires extra line code", "d": "6/2012"}, {"body": "thanks issue lamomm sure asking though mean called", "d": "6/2012"}, {"body": "may operations need adjusted initialize configuration sure whether reasonable facilitate flexible configuration el especially view class instance object", "d": "6/2012"}, {"body": "think main idea ensure view element times changing invariant means breaking lot assumptions existing code type configuration need element created", "d": "6/2012"}, {"body": "agree ensureelement processed initialize delegateevents feel though place user assume el present render time thereafter view lifecycle type change would break existing user implmentations sort dynamic attribute formatting function called prior ensureelement way user free assign dynamically generated attributes element generated view get around simply extending backboneview custom view using constructor override order execution myview backboneviewextend", "d": "6/2012"}, {"body": "ronadams js var view backboneviewextend attributes function return", "d": "6/2012"}, {"body": "true good point braddunbar good alternative solution use cases however solution works better particular application create prototype application view extends backbone add sugar bb view nt exist current library additional lifecycle methodspropertiesa common view model view model config etc subclasses extend application view provide common functionality best practice encapsulation different purposes listviewscontentviewstabviews instead forcing subclasses myviewprototypeattributesapply let handle attributes however want final manipulation attributes application view initialize function", "d": "6/2012"}, {"body": "backbone views designed element times whether element created via passed via need alter options done constructor calling super constructor element creationattachment ronadams understand use case think probably either initialization constructor alter element creation", "d": "6/2012"}, {"body": "fair enough", "d": "6/2012"}, {"body": "ajsharp thanks opening issue fairly specific use case perfect example overwrite backbonesync entirely support handle custom behavior another solution pointed documentcloud base model custom sync method inherit models need way need write behavior use need eg coffeescript class customsyncmodel extends backbonemodel sync gt fancy implementation class modelthatneedscustomsync extends customsyncmodel", "d": "6/2012"}, {"body": "hey alex encountered similar desire enforce jsonp requests across board instead adding global configuration point eg backboneoptions something recommended use wrap override backbonesync wrap original behavior add default options could easily per model basis well eg var mymodel backbonemodelextend sync wrap backbonesync function sync method model options newoptions optionsextend return sync method model newoptions friday june alex sharp wrote currently way control setting set global level problem models need use others nt backbone allows redefine model collection ideal reimplement behavior method really want alter one setting essentially want even better solution actually might ability override behavior model property reply email directly view github", "d": "6/2012"}, {"body": "nice thanks suggestion super helpful nt aware experiment solution thanks", "d": "6/2012"}, {"body": "looking nt actually think work backbonesync method currently take option looks global setting problem set elsewhere want able disable oneoff basis mutating global state risking potential race conditions attached patch potential solution problem thanks", "d": "6/2012"}, {"body": "wookiehangover sorry somehow missed comment fairly specific use case perfect example overwrite backbonesync entirely support handle custom emulatehttp behavior way actually dealing right patch nt want rewrite whole method really want set setting via local argument rather mutating global state copy pasting entire backbonesync method base class marginally better patching method ifwhen want upgrade backbone need remember update methods note upgrade scenario would nt overwrite local patch drop new backbonejs file overwriting method separate file another solution pointed mcarey documentcloud base model custom emulatehttp sync method inherit models need yea actually discussed seems pretty hackish start inheriting base class something probably included module behavior javascript problem anything probably worth asking allowing overriding via local config option deliberate design decision use case backbone team encountered yet thanks", "d": "6/2012"}, {"body": "yep yep sorry took long", "d": "6/2012"}, {"body": "hello peetertomberg indeed expected behavior find discussion issues", "d": "6/2012"}, {"body": "quite right thanks hswolff", "d": "6/2012"}, {"body": "thank much replies", "d": "6/2012"}, {"body": "molily thanks opening issue run similar issues passing option always solved info found docs", "d": "6/2012"}, {"body": "reopening one since proposed fix nt work work another one branch", "d": "6/2012"}, {"body": "thanks issue edwardmsmith success callback something easily worked around filtering new models also appears serverside project could describe briefly using backbone models", "d": "6/2012"}, {"body": "asyncparallel callback function passed job execute callback inform async job completed either successfully error depending whether pass error callbacks job collected returned final callback option asyncparallel code snippet executed passing results job array async used either server browser case attempting write code runs environments easily worked around yet elegant could testing whether model new specific case think collection garbage user working set models retrieved server additional models created client yet persisted end result couple collections things delete things createupdate collection set things delete new persisted fetched server case nt want said see sides argument workaround onerous elegant could", "d": "6/2012"}, {"body": "thanks use case nt see reason success callback nt called nt really done extensive work destroying new models jashkenas reason execute success callback new models", "d": "6/2012"}, {"body": "yep silly call new model first place probably indicates bug application logic still nt see harm triggering callback one passed", "d": "6/2012"}, {"body": "looking code actually makes bit straightforward obviates need besides nicely consistent submit patch later", "d": "6/2012"}, {"body": "jashkenas silly call destroy new model first place probably indicates bug application logic explain makes perfect sense really find hard conceive situation app may generate number unpersisted models get added various collections used various views point app might want dispose orderly way make lot opinionated statements library worked hard nonopinionated", "d": "6/2012"}, {"body": "make lot opinionated statements library worked hard nonopinionated trying helpful semantics means delete model server like means persist model server application knows model exist server yet trying delete server error remove unpersisted model call", "d": "6/2012"}, {"body": "works want remove model collection remove model collection destroy model semantically different opinion destroy conceptually valid nonpersisted model persisted model", "d": "6/2012"}, {"body": "hi jmm thanks issue change events callback method signature model options whereas change attribute model value options thinking situation desirable use callback types change events would helpful options always passed position never encountered situation using handler events desirable think encapsulates information callbacks complete listening nt need listen vice versa change attr pass new value attr name model passed anyway attr name want new value trivial call modelget attr current setup straighforward way get attr name seems callback received attr name instead value would open dynamic possibilities using callbacks multiple attributes correct attribute name accessible handler think good handlers explicitly handling one attribute otherwise event used since care one attribute already know name", "d": "6/2012"}, {"body": "hi braddunbar thanks reply sorry taking long respond never encountered situation using handler change change attr events desirable ok first noticed registering listener events listener seemed similar events similar signatures passing common arguments consistent positions would advantageous especially since recently experienced actual problem due handlebars pulling switcheroo position passes argument nt real world use case point correct attribute name accessible handler think good change attr handlers explicitly handling one attribute otherwise change event used since care one attribute already know name hmm seems counterintuitive makes important necessarily preferable handler handle change events single attr subset attrs require similar handling change useful dynamic behavior depends attr name would wrong registering handler vs putting logic handler called attr changed course could create closure handler function attr name desirable use handler multiple attrs point anyway nt real world use case argue seemed counterintuitive right bat find good use case post see think thanks", "d": "7/2012"}, {"body": "makes important necessarily preferable handler handle change events single attr performant since event triggered specific attribute changed attribute changed please let us know find use case thanks getting back", "d": "7/2012"}, {"body": "maybe described meaning poorly let say model attrs az whatever reason want use change handler e u something attr name handler case like would necessarily less performant register handler attrs register handler implement logic detect among changed attrs something specific please let us know find use case thanks getting back yeah sorry took long thanks addressing questions still think would good make documentation signatures obvious eg mention modelset", "d": "7/2012"}, {"body": "thanks issue chuangbo actually expected behavior backbone setting attribute silently delays change event next call calls setting many attributes triggering one change event", "d": "5/2012"}, {"body": "oh got feature like expected change attribute without trigger events bind", "d": "5/2012"}, {"body": "never events always get fired however choose handle passing options instance", "d": "6/2012"}, {"body": "thanks", "d": "6/2012"}, {"body": "problem behaviour nt work works var model new backbonemodel modelon change function consolelog message isnt showed youre using backbone modelchange expected bug thanks", "d": "7/2012"}, {"body": "actually code example maybe like calling backbonecollectionprototypeinitialize problem see collectioninitialize takes two params first array collections pass something array one empty model result way check remove line call fetch still empty model collection look like", "d": "6/2012"}, {"body": "morganrallen correct takes array models options object arguments string collection add interpreting string model adding see one model collection", "d": "6/2012"}, {"body": "ok obliged call otherwise server never called put seems method called two times second times empty sure", "d": "6/2012"}, {"body": "code initialize called twice certain stack trace see call coming", "d": "6/2012"}, {"body": "ok bad model also used another view therefore another instance collection initialized seems ok thanks", "d": "6/2012"}, {"body": "would also like make know phasing previously allowed invalid css selectors delegate element never work future releases way accomplishing delegateevents without using delegate also nt necessarily use syntax element think needs method getting immediate child", "d": "5/2012"}, {"body": "hi thanks issue since event selectors completely delegated jquery nt think anything backbone change way handle child selectors however run issue well solved checking parent element handler js var view backboneviewextend events click element elementclick elementclick function e etargetparentnode thisel return hope helps", "d": "5/2012"}, {"body": "talk coworker seems misunderstood delegate talked specific situation decided using estopimmediatepropagation going best alternative nt continue tree thanks input understanding alternatives definitely something easily circumvented nt necessary backbone handle", "d": "6/2012"}, {"body": "issue mainnav li applies elemnts li mainnav want click event first level child need mainnav gt li thank", "d": "9/2016"}, {"body": "hi thanks issue think looking something like js var model backbonemodelextend defaults function return myid genid", "d": "5/2012"}, {"body": "yes normal expected properties prototype shared instances class think looking something like instead coffeescript class router extends backbonerouter initialize options gt properties", "d": "5/2012"}, {"body": "rather unelegant workaround entails checking var first extend object var false reset object nt worry using initialize", "d": "5/2012"}, {"body": "hmm think erring strict side loose side nt want return true cases like true", "d": "5/2012"}, {"body": "agreed behaves way due coercion happens using value object property unfortunate unavoidable", "d": "5/2012"}, {"body": "hmm think erring strict side loose side nt want return true cases like true would nt want programmer supplying numeric operand would nt expect numeric comparison occur conversely supply string field contains numeric data fault numeric comparison occurs consistent nt think strictness would big deal seeing two different behaviors breaking principle least surprise", "d": "5/2012"}, {"body": "create collection get ids strings create new model collection id number therefore longer collection based id", "d": "8/2016"}, {"body": "", "d": "5/2012"}, {"body": "sure know behaviour wait true question different http delete returns destroy success callback call cant prevent example server response contains error message destroy event bubbles till collection backbonedestroy", "d": "5/2012"}, {"body": "server error return error message http status code callback wo nt triggered", "d": "5/2012"}, {"body": "either destroy either create http return code invoke error callback instead success", "d": "5/2012"}, {"body": "sounds great probably something would appropriate core backbone ideally urls canonical nt irrelevant query string parameters", "d": "5/2012"}, {"body": "ran using dfp need append urls debug ad scheduling problems routes trigger creates bigger problems say something would appropriate core backbone used case without change", "d": "5/2012"}, {"body": "backbone used case case add pattern route regex strips params", "d": "5/2012"}, {"body": "think one route regex one issue regular expressions great saying include good exclusions another issue conceptually simple task rapidly becomes impossibly complex deal correctly pushed regular expression design said note rather easy implement efficiently important decision costs one time thing history start common cases implemented working documenting", "d": "5/2012"}, {"body": "parsing query string parameters route regular expressions variation issue", "d": "5/2012"}, {"body": "looking lot harder thought currently tests routing pushstate true suspect absence tests browsers implement pushstate right way handle autosucceed tests tested browser implement pushstate", "d": "5/2012"}, {"body": "record backbone universally discarding query params routes", "d": "12/2012"}, {"body": "fwiw using jquery pass around deferred objects collectionmodel properties chain callbacks places code happy hacking feelsgood", "d": "5/2012"}, {"body": "two reasons think views outlived models collections references need destroy references garbage collected along objects destroying view generally involves destroying childnested views since backbone nt dictate implement childnested views rightfully way destroying reasons mind would nt stub method like points convention nt implement also functionality removing event handlers dealing child views might alright worried cause users overlook point number one though", "d": "5/2012"}, {"body": "braddunbar think stub method might useful standardize naming something common use many cases taking care two would user calling nested views destroy methods appropriately also think clear distinction something like docs would help ensure users would nt overlook point one one thing consider harm users overlook point one overlook need remove references modelscollections outlive view", "d": "5/2012"}, {"body": "braddunbar created jsperf amp jsfiddle illustrate thinking important jsperf jsfiddle first time jsperf may somehow completely missed boat supposed jsperf illustrates slightly better take consideration first point action needed view model drop reference simultaneously considerably worse ignore need destroy event references get rid cases even required jsfiddle illustration destroy function action think would good idea include bare bones destroy method similar posted extended necessary without anything childnested views", "d": "5/2012"}, {"body": "another option rather adding new method might change anyone needing functionality edit remove class necessary", "d": "5/2012"}, {"body": "even straight forward code probably simplifies issue backbonehistoryprototypeloadurl function fragmentoverride alert loadurl called", "d": "5/2012"}, {"body": "nope loadurl intended called multiple times first trying default pushstate route patch secondly checking fragment overriding want take account see last line", "d": "5/2012"}, {"body": "unless severely misunderstood something apologise tell history whether use pushstate call loadurl conditional based upon", "d": "5/2012"}, {"body": "may want use pushstate happen internet explorer case transparently falls back hashchange", "d": "5/2012"}, {"body": "ok could nt managed internally ie bootstrap works browser capabilities uses going forward", "d": "5/2012"}, {"body": "maybe feel free send pull request like", "d": "5/2012"}, {"body": "nt place debugging help try mailing list irc channel", "d": "5/2012"}, {"body": "correct using nested objects probably want define function value", "d": "5/2012"}, {"body": "thanks workaround could documentation least hint solution confident obvious anyone suspect easy get caught problem", "d": "5/2012"}, {"body": "alternatively defaults could deepcopied", "d": "5/2012"}, {"body": "idea feel free try mailing list irc need help sounds like mongoid thing", "d": "5/2012"}, {"body": "hi zon thanks issue already fixed pull master bug fixed", "d": "5/2012"}, {"body": "prevent backbone views creating element passing via option hope helps", "d": "5/2012"}, {"body": "braddunbar still nt quite understand way create view javascript windowaudiomanageview backboneviewextend el template managetemplateaudio html apply script like commet nt work", "d": "5/2012"}, {"body": "going need show us code ie collections using separate files works fine", "d": "5/2012"}, {"body": "hi vkovalskiy thanks issue sounds right many arguments used declaration sort function recently changed use directly instead declared two parameters interested discussion regarding change going well", "d": "5/2012"}, {"body": "thanks info braddunbar using one argument recent changes mention release right monitor resolutions suppose oneargument sorting comparator available pointed convenient sort something based style kind etc", "d": "5/2012"}, {"body": "definitely interesting work reproducible test case post jsfiddle similar would love see", "d": "5/2012"}, {"body": "went ahead made test case jsfiddles head nt gotten fail either environments xp vkovalskiy could take look see get reproducible error", "d": "5/2012"}, {"body": "wookiehangover thanks windows hands check tomorrow get back results", "d": "5/2012"}, {"body": "going close one reproducible time please comment reproduce reopen", "d": "6/2012"}, {"body": "stumbled upon issue actually line uses js sort instead sortby comparator function arguments nt understand ca nt think decent workaround aswell using sortby works fine js nt work probably array sortings bugs", "d": "7/2012"}, {"body": "problem comparator function binded model removed binding works ok", "d": "7/2012"}, {"body": "rsirotins coould please elaborate fixed problem thanks advance", "d": "7/2012"}, {"body": "vkovalskiy stumbled upon error use instead method defintion works", "d": "11/2012"}, {"body": "gucki wow thanks", "d": "11/2012"}, {"body": "thanks thanks use like match elements outside backbone view need special case", "d": "5/2012"}, {"body": "performed benchmarks gives gives first method faster", "d": "5/2012"}, {"body": "also available reference jquery zepto ender wrapped instance", "d": "5/2012"}, {"body": "hi sarxos thanks issue multiple root elements definitely nonstandard unsupported could probably achieve goal think would easier clear adding option work", "d": "5/2012"}, {"body": "jashkenas suppose nt understand want match elements outside need matched", "d": "5/2012"}, {"body": "sarxos", "d": "5/2012"}, {"body": "braddunbar unfortunately solution nt satisfy requirements since always add root element selector result wookiehangover property case views composed two elements one would like match contains attribute backbonemodelbinding unfortunately done without overriding either backbone backbnodemodelbinding methods", "d": "5/2012"}, {"body": "understand point braddunbar true multiple roots something really usual one solution able base keep code clean simply override function views match root elements hopefully many great thanks", "d": "5/2012"}, {"body": "hi mattotodd thanks issue actually discussed underscore methods listed according functionality like however might nice headings present backbone docs", "d": "5/2012"}, {"body": "fair enough love anyways keep great work", "d": "5/2012"}, {"body": "looks like nt see docs jquery likely moving delegate onoff", "d": "5/2012"}, {"body": "really forum whatever language using need json decode example php trick", "d": "5/2012"}, {"body": "hi yishenggudou thanks issue think get much better response mailing list taken liberty starting thread thanks", "d": "5/2012"}, {"body": "known email owner domain", "d": "5/2012"}, {"body": "music ears saxophone", "d": "5/2012"}, {"body": "hswolff still trying get docs", "d": "5/2012"}, {"body": "serious", "d": "5/2012"}, {"body": "still connection ohio whatsoever", "d": "5/2012"}, {"body": "see previous comment backbone docs still accessible dns issue fixed shortly", "d": "5/2012"}, {"body": "great sadness", "d": "5/2012"}, {"body": "several days", "d": "5/2012"}, {"body": "still", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "beginning use backbonejs fact noone get organizations primary domain registered dns lend confidence good thing many folks recommending", "d": "5/2012"}, {"body": "transfer made four days ago afraid domain status still says actions required please allow days transfer complete hang tight little longer", "d": "5/2012"}, {"body": "back", "d": "5/2012"}, {"body": "yep back online got domain sorry dns trouble", "d": "5/2012"}, {"body": "cool", "d": "5/2012"}, {"body": "domain resolving", "d": "2/2013"}, {"body": "seems indicate alright able reach anything dns", "d": "2/2013"}, {"body": "yeah back used link well check earlier", "d": "2/2013"}, {"body": "nope point wait server acknowledge destroy triggering client side events nt want wait server nt use", "d": "5/2012"}, {"body": "wanted know server started request recommendation fire nondestroy event like wait destroy event done case point additional sync event", "d": "5/2012"}, {"body": "", "d": "5/2012"}, {"body": "destroy event nt called immediately wait true called xhr request finished along collection remove case manually trigger different startdestroy event know started console output normally listen sync event nt look like bubbled leads aforementioned hackery", "d": "5/2012"}, {"body": "yes correct meant event", "d": "5/2012"}, {"body": "great catch thanks cfddream", "d": "5/2012"}, {"body": "hi provega thanks issue appears using backbone example know recently several bugs fixed related url would mind giving latest version try", "d": "5/2012"}, {"body": "sample using running look see offending code getfragment function fragment forcepushstate fragment null thishaspushstate forcepushstate fragment windowlocationpathname var search windowlocationsearch search fragment search else fragment thisgethash undefined check fragmentindexof thisoptionsroot fragment fragmentsubstr thisoptionsrootlength return fragmentreplace routestripper", "d": "5/2012"}, {"body": "think problem stems calling could happening due call callback called synchronously due custom backend cached data would exist causing error describe make sure called fragments fetched furthermore nt full picture code calling application code probably good idea let browser trigger possibly use", "d": "5/2012"}, {"body": "hi grobakh thanks issue could tell version backbone using latest would mind testing version thanks", "d": "5/2012"}, {"body": "tested work", "d": "5/2012"}, {"body": "nt forget acceptable models id", "d": "5/2012"}, {"body": "yep solid good starting poit implement old behaviour new semantics", "d": "5/2012"}, {"body": "sure escaped documentation changed discussed", "d": "5/2012"}, {"body": "thanks issue plievone going close documentation fix feel free comment open new request think current implementation changed", "d": "5/2012"}, {"body": "nt routes object instead array", "d": "5/2012"}, {"body": "francisc spelling mistake updated thanks", "d": "5/2012"}, {"body": "braddunbar please help us must hack application decodeuricomponent thank much", "d": "5/2012"}, {"body": "hi chuangbo see firefox returns encoded version hash nt seen event duplication see encoded hash get chance post jsfiddlejsbin demonstrating route triggered twice", "d": "6/2012"}, {"body": "thank braddunbar triggered twice use ones click link", "d": "6/2012"}, {"body": "thanks chuangbo helps lot", "d": "6/2012"}, {"body": "experience exact issue", "d": "7/2012"}, {"body": "braddunbar question find back forward router callback trigger callback undecoded", "d": "9/2012"}, {"body": "anyone found solution", "d": "9/2012"}, {"body": "picked one back nt see issue firefox using code current master used code gist saw route triggered anyone else seeing something different get test page wrong", "d": "9/2012"}, {"body": "braddunbar triggered twice use routernavigate ones click link", "d": "9/2012"}, {"body": "current master router patch leaves things encoded much possible fix things let us know", "d": "12/2012"}, {"body": "jashkenas fixed yet see test", "d": "12/2012"}, {"body": "braddunbar time take peek let know", "d": "12/2012"}, {"body": "bug test case routes different urls twice action see update version", "d": "12/2012"}, {"body": "yahasana bug comments line triggered twice error param use nonascii path click link ok", "d": "12/2012"}, {"body": "yup encoded browser", "d": "12/2012"}, {"body": "yahasana yes bug decoded", "d": "12/2012"}, {"body": "bug decode encoded hash done browser raw one router callback trigger twice hash ascii", "d": "12/2012"}, {"body": "yahasana updated test case using older backbone", "d": "12/2012"}, {"body": "philfreo oops update old one renew master clear bug", "d": "12/2012"}, {"body": "one inconsistent thing events different route set object see", "d": "12/2012"}, {"body": "jashkenas looked one several times able duplicate behavior", "d": "12/2012"}, {"body": "closing braddunbar good authority prs adding valid test cases test suite still warmly welcome", "d": "12/2012"}, {"body": "please check jsfiddle firefox definitly bug", "d": "12/2012"}, {"body": "log firefox", "d": "12/2012"}, {"body": "new clear test case work chrome ie opera work ff lt seem firefox encode url characters default", "d": "12/2012"}, {"body": "digging one time appears firefox bugs surrounding given url chrome js locationhref locationhash \u4e2d\u6587 firefox js locationhref locationhash \u4e2d\u6587 given results would appear use instead currently however added fix firefox bug hash always decoded going digging regarding correct behavior least bug clear chuangbo thanks patience help getting resolved", "d": "12/2012"}, {"body": "seems recently location always encoded router really sure correct behavior required add every parameter router methods good least clarify exactly", "d": "12/2012"}, {"body": "reason fragment always handled encoded router ca nt meaningfully compared decoded take instance following router given encoded fragment arguments would however decode fragment arguments would incorrectly", "d": "12/2012"}, {"body": "pardon ignorance case nt leave encoded split per parameter decode parameter passing route methods end", "d": "12/2012"}, {"body": "philfreo like idea reason already implemented splats include multiple uri components perhaps could treat splats differently though", "d": "12/2012"}, {"body": "would assume example get since seems like people using splats want ones manually split upon seems doable splats appear end route", "d": "12/2012"}, {"body": "would take extra bookkeeping probably doable seems would nice get decoded params since usually want anyway work patch", "d": "12/2012"}, {"body": "posterity bug", "d": "12/2012"}, {"body": "entered bug", "d": "12/2012"}, {"body": "response locationhref bug boris zbarsky points fact bug still certain correct reading spec certain boris expertise since firefox escaping unicode characters special characters safely decode fix chuangbo many thanks persistence getting fixed", "d": "12/2012"}, {"body": "braddunbar still planning making pr prevents routes cases described nt seem", "d": "12/2012"}, {"body": "philfreo definitely already working locally need polish bit pushing", "d": "12/2012"}, {"body": "let move conversation open pr", "d": "3/2013"}, {"body": "braddunbar think proposed change style comparators already shipped", "d": "5/2012"}, {"body": "hmm nt see much harm restricting sortstyle used arity exactly two however nt really fix problem anyone dwt issue arises want use sortbystyle curry one argument right", "d": "5/2012"}, {"body": "could wish would like methods available separated magic anymore care comparator one parameter obvious enough comparator deals therefor nt declare parameters least happened p", "d": "5/2012"}, {"body": "yes current comparator switcheroo explicitly convenience fallback folks thing would done deprecate old style entirely said want oneargument optin check allows arity use new style may even remove future folks trying use new style run problems", "d": "12/2012"}, {"body": "hi dwt thanks issue actually design discussed previously takes attributes options parameters acting accordingly", "d": "5/2012"}, {"body": "request add upgrade notes bitten quite severely", "d": "5/2012"}, {"body": "suppose could go release notes although never really supported knowledge accident due problem causing wan na write pull request effect", "d": "5/2012"}, {"body": "presumably user navigated would say triggered user said wo nt start ask via nt think understand desired behavior way understand want route events triggered user clicks link navigate url via browser would suffice listen click events instead", "d": "5/2012"}, {"body": "yes listen click event suffice want know route feature help thank", "d": "5/2012"}, {"body": "could stop using", "d": "5/2012"}, {"body": "one option would function could overridden javascript backbonemodelcreate function attributes options return new attributes options preparemodel function attrs options model thismodelcreate attrs options", "d": "5/2012"}, {"body": "essentially adding additional level indirection hooked return constructor", "d": "5/2012"}, {"body": "thought backbone stance discourage return constructor edit one", "d": "5/2012"}, {"body": "use separate factory collection time maybe come something better thinking awhile thanks discussion jashkenas", "d": "5/2012"}, {"body": "merged fix course passing undefined behavior", "d": "5/2012"}, {"body": "touch\u00e9", "d": "5/2012"}, {"body": "slow clap thanks guys great piece software", "d": "5/2012"}, {"body": "duck typing ftw", "d": "5/2012"}, {"body": "getting two different versions backbone node internally caches loaded exports object use exact reference whenever use require push code repo inspection", "d": "5/2012"}, {"body": "think nodejs caches loaded export based absolute filename exported object backbonejs files located filesystem one module directory", "d": "5/2012"}, {"body": "could lead simply two different required versions instead edit balupton said despite backbonejs version", "d": "5/2012"}, {"body": "yuchi nailed built sample app highlights problem", "d": "5/2012"}, {"body": "getting two different versions backbone node internally caches loaded exports object use exact reference whenever use require appears due nodejs internally caching results per module entire application module includes module copy backbone applications", "d": "5/2012"}, {"body": "using packagejson incorrectly packagejson exist root application module module packagejson make sense since definitions therein define package application therefore entire application single root containing single instance backbonejs nothing backbonejs solve problem entirely design decision include two redundant copies backbone might way work around issue instead try figure need multiple application configs packagejson eliminate avoid issues like", "d": "5/2012"}, {"body": "using packagejson incorrectly packagejson exist root application module module packagejson make sense since definitions therein define package application therefore entire application single nodemodules root containing single instance backbonejs tbranyen think completely missed point sorry clear anyway sample application includes directory way nt publish npm registry perfectly valid use case modules files fact npm modules work write module define dependencies publish npm registry another moduleapplicationwhatever install module via backbonejs included module files stupid decision means modules relying external dependency bad practice modules include everything need inside reopened", "d": "5/2012"}, {"body": "put whole thing bigger perspective queryengine module provides new extends however include queryengine app also include backbonejs app queryengine backbonejs app causing situation occur expect queryengine ludicrous published expect queryengine include backbonejs dependency file equally crazy earth ensure queryengine continue work backbonejs dependency external queryengine completely breaks point using specify dependencies fact using logic backbonejs nt even specify underscore dependency file even better yet file serious issue feel nt means post back asking clarification rather saying wrong closing", "d": "5/2012"}, {"body": "nothing backbonejs solve problem yes implementing flag suggested original post", "d": "5/2012"}, {"body": "going wrong creates model instance using custom model module creates collection instance using custom collection module b adds model instance collection instance mixing matching two different versions backbone together guarantee models version x work together properly collections version nt mingle two different versions error occurs right", "d": "5/2012"}, {"body": "nt mingle two different versions error occurs right correct though seems two different opinions never ever using multiple backbone copies anything support whether compatible existing code passes tests irrelevant backbone internal module dependency within different modules perfectly valid use case support added considering compatible existing code passes tests personally understand one would pull duck typing change works enables new use case counter seems personal opinion best practice rather expressed practical benefits understand practical basis never ever using multiple backbone copies seems argument expressed personal opinion finally understand case backbone exception underscore opinion allowed include multiple underscore copies multiple backbone copies seems reason latter breaks due use instanceof something willing fixed", "d": "5/2012"}, {"body": "allowed use multiple backbone copies independently mixing matching models one version collections another version hence problem like saying expecting rest continue work", "d": "5/2012"}, {"body": "stumbled across discussion trying figure instance testing gets handled nodejs dependencies know bit late think balupton misunderstood issue stripped package gets submitted npm registry exports constructor package gets submitted npm registry requires utility functions creating instances app requires install via therefore two separate package directories exact version version get installed one one create instance app using way checking instance instance even though app requiring exact version package available node sees two constructors prototypes different come different modules different filesystem paths hope helps someone else going bit crazy trying figure downside nodejs system avoid versioning hell resolving dependencies ca nt reliably test instances across modules way python come languages", "d": "5/2013"}, {"body": "thanks chiming turns one foobarnodemodulesthing one foobarnodemodulesthingutilsnodemodulesthing inside foobar copy thing thingutils use assist thingutils specifies thing inside rather inside also add thing inside development etc originally issue posted nt thing however unfortunate thing approach nt work npm linking reason requite wo nt follow chain properly follows chain original location location inside foobar enounter issue perhaps though chaining problem actually bug node module code would awesome fixed far keeping things mind able get around issue need duck typing however fixes use cases sure least use cases able get around far hope helps", "d": "5/2013"}, {"body": "lost hours instanceof failing issue within nodemodule tree thankfully cleared", "d": "6/2013"}, {"body": "help avoid using also use avoid history entry hope helps javascript loadgistugly function id thisnavigate gist id replace true thisloadgist id loadgist function id", "d": "5/2012"}, {"body": "perfect thanks tell avoid", "d": "5/2012"}, {"body": "let blog post derick bailey explain since much better job could", "d": "5/2012"}, {"body": "read comments derick post avoid trigger true simply opinion universal truth post derick coded circle navigation trigger change event model one way getting stop triggering navigation changes way get situation opinion way would done answers avoid trigger true call router method directly would require reference router every view nt really heard solid arguments trigger true", "d": "5/2012"}, {"body": "post derick coded circle navigation trigger change event model one way getting stop triggering navigation changes way get situation opinion way would done granted certainly great number ways handle situation one worked think main point keep router dumb possible anecdotally worked corner certainly solution avoiding prevent issues majority cases answers avoid trigger true call router method directly would require reference router every view views responding changes state often little need call router methods type situation obviating need reference router", "d": "5/2012"}, {"body": "use backbonehistorygetfragment get current url router uses able process internally callback function similar need describing came two first sounds like would likely better option", "d": "5/2012"}, {"body": "would enough route name passed route callback way get route name nt suggets use thisroutes backbonehistoryfragments nt work cases wher id splat present url parts project dependable url fragments backbonerouter already parsed fragments resulted particular callback route name called one might use route name implement detalisation project otherwise parse url fragments regexp double work", "d": "5/2012"}, {"body": "malandrew closing please reopen pull request ifwhen patch ready", "d": "11/2012"}, {"body": "guess nt use later often save custom router classes though reason nt work coffeescript class router extends backbonerouter constructor options gt super", "d": "5/2012"}, {"body": "view nt appear use options later either afaict convenience view subclasses seems like would handy router subclasses realize store away", "d": "5/2012"}, {"body": "sorry misread definitely useful copy options view nt see would nt apply routers well", "d": "5/2012"}, {"body": "whilst could easily add functionality top collection model well options get passed frequently pass extra options used later creating subcollections submodels", "d": "5/2012"}, {"body": "couple questions would need answered thinking implementing options created provided options cloned user reuse number particular comes areas eg sometimes point contention providing would nicety leaving implementation user also rather nice since free like", "d": "5/2012"}, {"body": "braddunbar reason exactly view already would nt acceptable answer questions", "d": "5/2012"}, {"body": "ok answer wanted make sure thought", "d": "5/2012"}, {"body": "might one thinking opposite actually nt like options copied views promotes people getting things via even getterssetters accessors exist way see viewmodelrouterwhatever copy chooses nothing options options initialization keyvalue store life instance", "d": "5/2012"}, {"body": "said decided copied copied views routers models collections", "d": "5/2012"}, {"body": "think agree ianstormtaylor backbone stay flexible let user decide want", "d": "5/2012"}, {"body": "long consistent behaviour matters", "d": "5/2012"}, {"body": "given either pattern acceptable store options throw away think best backbone stay flexible possible late views let leave option management user routers models etc", "d": "6/2012"}, {"body": "quick workaround unset case nice", "d": "5/2012"}, {"body": "actually design see previous conversations work", "d": "5/2012"}, {"body": "ah relevant thread anyone finds darn excited found backbone bug", "d": "5/2012"}, {"body": "behavior make sense real state transitions would triggered", "d": "5/2012"}, {"body": "matter taste first comment thread defer seems suited silent behavior would make sense add defer attribute revert silent behavior", "d": "5/2012"}, {"body": "yes might also case write model new backbonemodel modelset defer true modelset defer true next time model change event fired case temporary change truly", "d": "5/2012"}, {"body": "reading explanation silent nt make sense option even dont see point deferred either seems like user could easily build normal js object outside model piece piece save effect pieces silent sets also hella counterintuitive reading mentions silent docs newcomer backbone confused could nt figure app breaking checked assumptions found behavior", "d": "5/2012"}, {"body": "agree completely going option like needs way ensure never buffered triggered hack situation javascript thismodelset source thiseditorgetvalue silent true thismodelprevious source thismodelget source thismodelpreviousattributessource thismodelget source also situation identical delvarworld", "d": "5/2012"}, {"body": "seems like desired use case silent stop event triggered wanted use stop view rerendering listening attribute change event rerender certain cases found different probably better way benefit silent gives first glance skips events jarring eventually learn case maybe least make obvious docs", "d": "5/2012"}, {"body": "reading explanation silent nt make sense option even dont see point deferred either seems like user could easily build normal js object outside model piece piece save effect pieces silent sets calls may code may triggered indeterminate amount times performance reasons beneficial able silence events called seems like desired use case silent stop event triggered would want change attribute without notifying listeners eventually set directly bypass altogether maybe least make obvious docs agreed backbone skipped events assumption partially true", "d": "5/2012"}, {"body": "set directly attributes bypass set altogether nt know option considered hacky valid way would show affect change listeners line since ticket still open reading explanation seems like would nice truly silent also option case defer property twice use second one event fires vote newcomer backbone nt know larger implications would", "d": "5/2012"}, {"body": "nt know option considered hacky valid way would show affect change listeners line yes would bypass benefits getting purpose attaching event listeners change events get notifications changes nt want notifications use property instead reason need notify listeners changes", "d": "5/2012"}, {"body": "event triggering validation consistency code sometimes set property want trigger event sometimes set property nt property model nt get choice modify attributes directly branch different code opposed toggling boolean", "d": "5/2012"}, {"body": "set event triggering validation consistency code sometimes set property want trigger event sometimes set property nt would mind elaborating perhaps never encountered type situation", "d": "5/2012"}, {"body": "another thing add either change defer seems odd listening update silently modification property trigger even though already changed action triggering event nt touching seems like counter intuitive api behavior", "d": "5/2012"}, {"body": "braddunbar jashkenas etc read comments linked change request guess never made connection backbonespecified options silent etc additional arbitrary options could pass would get passed event handlers ability pass arbitrary options ability individual event listeners receive successfully fulfills needs go ahead add noop option better name come event listeners choose based option use cases similar pull request app collaborative multiple people dealing datasets simultaneously push model changes server connected clients socketio need distinguish changes made interactively user changes pushed app server think ability seems commonly overlooked find free time submit additional documentation model set events think would make clearer people", "d": "5/2012"}, {"body": "edwardmsmith wonderful agree commonly overlooked unsure document going close feel free open separate issue documentation updates proposals improvingmodifying changes", "d": "5/2012"}, {"body": "never removing route urls supposed permanent mint keep", "d": "5/2012"}, {"body": "understand wouldt remove defined route meant overriding route able remove override think example would explain better let consider app would load list custom pages server standard route overriden route usually route load standard game page defined application code source whereas case would like able override custom routes case want load particular templates loading server nt know makes sense anyone else see best way package standard app able customize thank answer anyway", "d": "5/2012"}, {"body": "instead swapping function function know call either appropriate", "d": "5/2012"}, {"body": "true seems routing logic inside one function routing functionality backbone losing interest indeed would happen app routes overridden thank anyway advice", "d": "5/2012"}, {"body": "course fire events fire events", "d": "5/2012"}, {"body": "tried events double check thanks", "d": "5/2012"}, {"body": "looks like works", "d": "5/2012"}, {"body": "thanks issue myster think probably luck mailing list taken liberty posting question", "d": "5/2012"}, {"body": "nope working model attribute clearing fire event", "d": "4/2012"}, {"body": "javascript properties prototype shared reference like classlevel properties would shared way ruby like different hash instance define function documented", "d": "4/2012"}, {"body": "hi jdkanani thanks issue already discussed would mind directing comments thanks", "d": "4/2012"}, {"body": "interesting would mind telling us quick example test adding models single call using style comparator function takes one argument style function takes two former try latter", "d": "4/2012"}, {"body": "noticed sortedindex nt used anymore model insertion instead whole collection gets resorted even one model added tried fixed send pull request think goes total different direction", "d": "5/2012"}, {"body": "fixed problem using sortedindex find position data added added passed add flag prevented sorting added data presorted add chance overlap previously added data better hindsight comparator sortby style one using js date adding single call eg adding passing array objects rather one time quite confusing took uncover upon upgrade", "d": "5/2012"}, {"body": "georgephillips sounds bizarre recently switched using style insertions backbone previously internally new single version ostensibly performance reasons actually case change mistake revert someone needs cook jsperf test prove either way", "d": "5/2012"}, {"body": "jashkenas application timeline ajax requests buffers certain length buffers models per request collection adding using single call add would say test loops adds n models time one go would probably replicate experiencing", "d": "5/2012"}, {"body": "one gets weekend think time throw together test see regards performance", "d": "5/2012"}, {"body": "jsperf looks like nt decrease speed think likely fixed", "d": "12/2012"}, {"body": "nt anything far tell jsperf reassuring thanks casey", "d": "12/2012"}, {"body": "thanks suggestion zamiang mock location object introduced mock history object included test coverage routerhistory functionality requires great deal work think well way", "d": "6/2012"}, {"body": "awesome thanks addressing seemed like something core contributor stubbing windowlocation clever luck testing pushstate true pushstate unsupported browsers scenario breakage could unknowingly trip many sites using backbone", "d": "6/2012"}, {"body": "nt gotten far yet certainly possible current setup", "d": "6/2012"}, {"body": "thanks much patch merged master specs yes would great problem hard single html page serverside support find way within qunit suite", "d": "4/2012"}, {"body": "confused change clarity discussion urls assuming router root nt specified understand correctly change backbone redirecting agree incorrect root set default nt understand correct behaviour instead redirect looks like want query param become part root section url instead encoded put fragment", "d": "6/2012"}, {"body": "dmnd pretty common misunderstanding please take moment look url spec consequences recommendation spec bottom page best explanation found example query params parsed server part url fragment whereas example thus recommended practical behavior", "d": "6/2012"}, {"body": "zamiang thanks response understand anything hash fragment sent server send query parameters server downside using fallback hash fragment browsers nt support pushstate though nt pathname sent server either problem query param sent server pathname nt either existing behaviour everything url root available use router confusing change pathname available use router query param pathname well fragment reordered perhaps understand reasoning better use case demonstrated complicated behaviour useful", "d": "6/2012"}, {"body": "routing pushstate enabled app deceptively complicated lets review issue main argument new behavior creates valid url cases reliably parsed client server old version breaks windowlocationsearch windowlocationhash would return inconsistently across pushstate supported unsupported browsers confusing breaks fundamental part lovely window object potentially breaking anything else relying windowlocation worth send query params already sending fragment want access url params serverside using pushstate app pages root single page app said one many unanticipated downsides pushstate apps use case lets go inviting people join site say friendly ie user visits mysitecomcreateaccount old behavior would redirected mysitecom createaccount page reload need parse token value hash send token back server validation changes made router coffeescript route params myroute old route myroute new myroute params gt old myroute gt new params windowlocationsearch hopefully helpful let know questions definitely nt speak backbone team fix needed particular project artsy merely reasoning fix learning go hopefully evolving patterns side note avatars look pretty hilarious discussion", "d": "7/2012"}, {"body": "jashkenas seems lost fix subsequent evolutions backbone code backbone query params lost copying fragment purpose", "d": "3/2014"}, {"body": "hi olance handling search params modified bit allow custom parsing general usage params part search component moved hash transitioning pushstate hashchange eg causing failures end love see test case attempt address", "d": "3/2014"}, {"body": "hi braddunbar thanks replying maybe something wrong happening chrome modern browsers worries ie url reloaded param read serverside inject javascript init code embedded backbone app moved hash fragment server generates page without init code init backbone coffeescript initialize app appview require viewsappview configuratorviewsappview new appview approuter require routersapprouter configuratorroutersapprouter new approuter initialize backbone history backbonehistorystart pushstate true root configurator hope clear processproblem something wrong used work well previous versions backbone", "d": "3/2014"}, {"body": "thanks clarifying see mean right work previously considered briefly making change nt think anyone using pattern sorry breakage worried nt think likely go back behavior feedback search params overwhelmingly positive would probably suggest putting parameter root instead ie possibility", "d": "3/2014"}, {"body": "well nope quite seldom use get parameter however need work must say ca nt see server access get considered bug ca nt find something instance copying query string hash fragment nt mean delete url", "d": "3/2014"}, {"body": "backbone determines sort route last used checking application app root means url like assumed pushstate already swapped leaving search parameters would cause infinite loop case nt think", "d": "3/2014"}, {"body": "think assumptions wrong treating url pushstate contains query string basic http breaking backbone might mainly used javascript clientonly apps could used apps integrate complex website server interaction forced roll back wo nt able update fix personally think bad move would love jashkenas take matter", "d": "4/2014"}, {"body": "take braddunbar spent lot time thinking ways make work best personally think using query params within backbone router bit fool game necessarily fake actually parsed server better use convention query params like point folks want use change way allowing feel free patch copy backbone behave way like", "d": "4/2014"}, {"body": "right either consistent support query params fragment query string sent server cases since utility support former overwhelmingly greater gone said several options patch put parameter path eg use root leave query string fetch need page loads pass query params always sent server monkey patch", "d": "4/2014"}, {"body": "hi certainly wo nt deny time thinking braddunbar behind feature really point know could patch backbone keeping date original repo maintain single correction nt look really optimal problem feature expecting people something special keep project working like whole web intended work could nt least way opt feature", "d": "4/2014"}, {"body": "hey olance nt think provide option behavior would require great deal complexity seldomused feature ca nt justify costs besides nt think good idea general using backbone router saying client handle portions url past root", "d": "4/2014"}, {"body": "okay see point well bad really ca nt break support right guess freeze backbone version project patch need new features later", "d": "4/2014"}, {"body": "considering model exist several different collections default feel free add methods models like", "d": "4/2012"}, {"body": "response object proper status code guess something going headers properly interpreted", "d": "4/2012"}, {"body": "afraid nt know answer question callback using jquery callback perhaps better debug example", "d": "4/2012"}, {"body": "feel something wrong", "d": "4/2012"}, {"body": "thanks issue deianvasilev already reported fixed", "d": "4/2012"}, {"body": "note parentextend extend methods also see declared backbone way note defaults declared function might need something like following inheriting multiple levels", "d": "4/2012"}, {"body": "workaround assign function defaults attribute extend javascript animal backbonemodelextend defaults eyes legs dinosaur animalextend defaults function return extend legs arms tooshort result dinosaursuper defaults var dog new animal consolelog dog dogget eyes eyes dogget legs legs var rex new dinosaur consolelog rex rexget eyes eyes rexget legs legs output", "d": "4/2012"}, {"body": "hi captncraig may work work like classical inheritance schemes certainly make behave similarly declaring function like sbrekken suggests discussed previously still discussed would mind directing discussion", "d": "4/2012"}, {"body": "think would probably use custom override something like strikes perhaps would nice passed way override necessary thoughts", "d": "4/2012"}, {"body": "big fan passing options fetch url needs changed properly lives function really highlighting fetching contents collection loading individual model really want something like right perhaps passing entire url", "d": "4/2012"}, {"body": "specifying id nt feel different specifying page number cases specifying subset collection load fact realized could even munge server side code check querystring id third approach also get coming intent collections bookfetch approach could work url handling seems bit tricky passing id may enough book could resource nested different parents would know url construct yeah seems like pass complete url maybe collection well id app generally nt used urlroot models models inherit url collection course construct whole url nt much difference original solution specify url collection fetch options", "d": "4/2012"}, {"body": "yep let leave combined fact fetch necessarily asynchronous means would nt reference complete model server came back point think well writing either listening using callback", "d": "4/2012"}, {"body": "big problem newfetch approach sequencing issue initialize parse two cases described original post sure fixed would also solve problem", "d": "4/2012"}, {"body": "hi xiaocong thanks issue also reproduce appears always get populated take closer look later", "d": "4/2012"}, {"body": "nt know relevant anymore looks like longer exposing variable globally example app", "d": "4/2012"}, {"body": "future reference ca nt retrieve model using using id key different eg need set model like", "d": "9/2012"}, {"body": "let guess rendering changereset also unloading viewsunbinding listeners add fetch calls stored array somewhere like namespaceappfetchcalls route somewhere else use jquery cancel xhr objects xhrabort array", "d": "4/2012"}, {"body": "hi tvpmb thanks issue think probably get better response type question mailing list taken liberty posting question behalf thanks", "d": "4/2012"}, {"body": "thanks brad list well kmiyashiro interesting thought correct pushing new view element route bad thing everything read people talked lot unbinding events zombies etc unbindingunloading", "d": "4/2012"}, {"body": "correct", "d": "4/2012"}, {"body": "ouch links resources could review figure fri apr kelly miyashiro lt reply replygithubcom wrote correct reply email directly view github", "d": "4/2012"}, {"body": "yes since property prototype shared instances want instances set constructor javascript var itemview backboneviewextend initialize function thisitemarray", "d": "4/2012"}, {"body": "fiddle described", "d": "4/2012"}, {"body": "hi braddunbar already used solution posted workaround yet seems like nt need quite confusing behavior nt think explain use prototype nt quite understand saying current implementation incorrect trying get clarification understand often specify view properties way spawnedc used fiddle clear properties view override initialize method aswell seems cumbersome example apps views properties specified exact way see todojs template variable specified manner course unchanging string never see sort problem correct way specify dynamic view properties surely case override init method", "d": "4/2012"}, {"body": "explain use prototype putting mutable properties arrays hashes etc prototype rarely useful experience though sure instances correct way specify dynamic view properties surely case override init method yes set property mutable value instance classconstructor constructor case called constructor example backbone sets properties instance", "d": "4/2012"}, {"body": "braddunbar create new instance would expect properties reset brand new instance nt expected behaviour missing something", "d": "4/2012"}, {"body": "hi braddunbar putting mutable properties arrays hashes etc prototype rarely useful experience though sure instances nt exactly bacbone itemarray case itemarray prototype behavior experiencing happening agree spawnedc last statement would nt expect properties shared instances sibling views", "d": "4/2012"}, {"body": "actually none properties reset unless reset constructor always prototype properties shared instances created constructor javascript var function var new var b function bprototype aconstructor b var new b var new b consolelog undefined consolelog undefined afoo consolelog consolelog consolelog true interested great explanation", "d": "4/2012"}, {"body": "nt exactly bacbone itemarray case itemarray prototype behavior experiencing happening exactly recommend creating instead prototype property", "d": "4/2012"}, {"body": "braddunbar thanks explanation link still kind weird unexpected behavior one hand hand makes complete sense share properties views read javascript garden article sure become clear", "d": "4/2012"}, {"body": "hi mathvallee thanks issue judging description could many reasons click event nt firing provide us code look", "d": "4/2012"}, {"body": "sounds like eventstoppropagation missing event handler", "d": "4/2012"}, {"body": "ca nt really show code one line call plugin wookiehangover plugin event handler backbonejs", "d": "4/2012"}, {"body": "probably backbone problem feel free ask mailing list irc", "d": "4/2012"}, {"body": "hi problem events fired expect click event using plugin contextmenu backbone", "d": "10/2014"}, {"body": "easytab uses notation trigger display tabs notation also used backbone trigger routes click tab easytab interpreted backbone routing event error logged console design issue js error", "d": "10/2014"}, {"body": "closing issue incorrectly setting route", "d": "4/2012"}, {"body": "sorry nt realize root cause problembut got really bug problem used links document said link related route routes posts id somefun get param posts actually backbonerouter ca nt deal route name plz check remove route defined routes posts id somefun fine hope fixed asap tks", "d": "4/2012"}, {"body": "one link clicked twice seems action happened second time another bug designed way sorry silly questions", "d": "4/2012"}, {"body": "docs note want avoid using leading slash route definitions seems work intended without solve issue", "d": "4/2012"}, {"body": "overriding success stopping system knowing event successful thus nt raising sync event could potentially worked around wrapping success call passed sure best behavior think would better triggering event situation", "d": "4/2012"}, {"body": "backbone already wrapping success error callbacks overriding anything", "d": "4/2012"}, {"body": "fyi previous discussion topic", "d": "4/2012"}, {"body": "thanks oddly search sync issues bug nt show", "d": "4/2012"}, {"body": "saw google bc searching way silent sync event using backbonesave way current version checked source code seems possible true add sync false option", "d": "5/2014"}, {"body": "afaik passing save fix stackoverflow irc question", "d": "5/2014"}, {"body": "saw google bc searching way silent sync event using backbonesave know experience nearly always bad idea want particular handler fire nt mean event handler fire instead check option handler want silence", "d": "5/2014"}, {"body": "thanks lot guysreally helpful", "d": "5/2014"}, {"body": "seems reasonable pull request incoming", "d": "4/2012"}, {"body": "looks like superseded moving conversation", "d": "4/2012"}, {"body": "even request asks json response error necessarily json form nt want assume often error message", "d": "4/2012"}, {"body": "thinking checking jqxhrgetresponseheader contenttype response checking applicationjson nt principal open pull request", "d": "4/2012"}, {"body": "saying principle assumption want make", "d": "4/2012"}, {"body": "dont see assumption response clearly states header type applicationjson parse header nt match body clearly bug server side backbone need handle", "d": "8/2012"}, {"body": "rereading confused thought still talking request header response header says json sure json parsing would fine reopening", "d": "8/2012"}, {"body": "thought number times fix seems like simplest way address issue without changing api follows specification response entity body", "d": "12/2012"}, {"body": "hrm second thought probably respecting jquery behavior sure assuming error response code response content type longer replies server trying give json got error instead something along lines jquery case", "d": "12/2012"}, {"body": "surely serverside fails catch erroneous format clientside early rather late using validate secondly assuming need trigger update ui definitely hook succes error option attributes rather change event assumption javascript xvalidate function attrs test return value may test xsave test wait true success function error function", "d": "4/2012"}, {"body": "vincentbriglia times verify server either case nt depend clientside verification mechanism sanitizing input server purpose wait true wait response back server setting attributes backbone regardless http response get back nt sound right", "d": "4/2012"}, {"body": "nt case backbone ed attributes onto model callback callback nt triggered server response attributes nt set like reopen ticket provide failing test case latest backbone master branch", "d": "4/2012"}, {"body": "jashkenas provided failing test case initial comment tried browser console backbone website got behavior", "d": "4/2012"}, {"body": "let start reasonable guess braddunbar looked part waitvalidatesave refactorings", "d": "4/2012"}, {"body": "looking closer causing attributes silently set server returns happening", "d": "4/2012"}, {"body": "uses get attributes means uses model current state attributes nt set model ignore looked part waitvalidatesave refactorings nt looked issue specifically", "d": "4/2012"}, {"body": "exactly got confused think reasoning behind sync uses tojson get set one way deal probably unset fields failure using previousattributes nt know cleanest", "d": "4/2012"}, {"body": "thanks reporting reverting previous attributes missed ones nt exist adding added pipeline flush", "d": "4/2012"}, {"body": "np thanks fix", "d": "4/2012"}, {"body": "handy want write tojson method see", "d": "4/2012"}, {"body": "thought purpose might although checked issues page tojson probably missed commits thanks", "d": "4/2012"}, {"body": "idiot nt underscore tell since actually setup backbone project scratch", "d": "4/2012"}, {"body": "thanks noticing", "d": "4/2012"}, {"body": "fixed reverting back min build", "d": "4/2012"}, {"body": "really sure looking answer may better luck finding live conversation irc mailing list event fundamental important difference reason exisistence former get one event model added latter get single event models added efficiency thing want completely blow away contents collection new set models", "d": "4/2012"}, {"body": "read entire post stop middle said end understand reset method throws reset trigger one time whereas add method throws add trigger model though usefulness returning context listening functions repeated know already want know useful return collection reset trigger opposed array models collection reset", "d": "4/2012"}, {"body": "chain call", "d": "4/2012"}, {"body": "something like javascript var model backbonemodelextend idattribute id parse function data var id data thisidattribute oid data thisidattribute id return data model new model id oid javadriver silly parse true", "d": "4/2012"}, {"body": "need something like may add functional", "d": "4/2012"}, {"body": "stated nested modelsids supported directly backbone type functionality provided plugin extension", "d": "4/2012"}, {"body": "exactly thank much", "d": "4/2012"}, {"body": "yep discussed bunch times instead calling simply call function wanted call first place fact option often code smell", "d": "4/2012"}, {"body": "problem closing bug key point using backbone handle parsing routes calling function based route lacking ability determine cases reload ok backbone directly something effect work yea feel like totally valid use case would nice platform", "d": "4/2012"}, {"body": "articles point towards using trigger true code smell thanks", "d": "8/2012"}, {"body": "nt articles forces serialize application state string url precise nt need calling javascript function much richer api pass objects references nt lose external state think backbone changing url browser dropping bookmark folks go back later thing need change application state", "d": "8/2012"}, {"body": "good article bad practice", "d": "3/2013"}, {"body": "though totally agree jashkenas reply top thread kind agree dotbits opinion backbone great enforcing patterns developer expected navigate trigger true always fire bound methods route events even navigating url", "d": "3/2014"}, {"body": "need table pagination deleting row want reload url reload current page table deleted row last want reload url changing page", "d": "3/2014"}, {"body": "need case ulrira", "d": "4/2014"}, {"body": "another add flexibility understand points brought quoted article really opinions end day good opinions things aware nt use delete routes still opinion driving baseline backbone users quite ridiculous", "d": "8/2014"}, {"body": "logic router determines whether logged user allowed view requested route user logs like able reload current route runs router logic checks logged user still allowed view page", "d": "9/2014"}, {"body": "user logs like able reload current route runs router logic checks logged user still allowed view page user logs call function checks user still allowed view page really opinions end day backbone opinions one nt stuff useful reusable logic onlyactivatedbyaurl callback ca nt easily call places use function", "d": "9/2014"}, {"body": "jashkenas agree ideally able call isolated function checks user still allowed view page instead recalling entire route logic unfortunately method intertwined logic makes suggestion infeasible unfortunately nt time refactor part app work suggested imo allowing backbone rerender current route fairly innocuous change would case reduce need significant refactor backbone opinions one nt stuff useful reusable logic onlyactivatedbyaurl callback ca nt easily call places use function familiar inner workings backbone completely agree methodology unfortunately dont rely routes execute logic opinion nt expressed clearly backbone docs perhaps add best practices section docs outlines ways backbone opinionated help developers avoid learning gotchas hard way", "d": "9/2014"}, {"body": "way documented backbone docs least defining route method router object truly unable refactor allowed view check function something find bit difficult believe ca nt least call method router directly", "d": "9/2014"}, {"body": "jashkenas nt good idea alternative using trigger url change associated route logic still confused antipattern code smell suggested would instead version", "d": "9/2014"}, {"body": "would", "d": "9/2014"}, {"body": "pattern scale would results extremely convoluted router file ton methods like onlogin oncheckout onpaymentreceived onviewsettingspage probably lot people prefer approach", "d": "9/2014"}, {"body": "think backbone changing url browser dropping bookmark folks go back later thing need change application state would say state machine web developer use", "d": "9/2015"}, {"body": "seems work fine chrome jsfiddle", "d": "4/2012"}, {"body": "code looks fine sure appropriate place post type issue probably get much better answers mailing list taken liberty posting question thanks", "d": "4/2012"}, {"body": "similar issues unable track able fix using newly introduced native sort rather underscoreje sort try comparator alternatively descending posted mailing list well", "d": "4/2012"}, {"body": "telling modelb undefined", "d": "4/2012"}, {"body": "upgraded backbone still nt work chrome weird cause works safari use webkit anyone else solution", "d": "4/2012"}, {"body": "issue solved thanks help guys", "d": "4/2012"}, {"body": "solve mathvallee use vincentbriglia suggestion", "d": "4/2012"}, {"body": "yeah also used sortby function", "d": "4/2012"}, {"body": "okay currently using issue closed though still working backbone", "d": "4/2012"}, {"body": "using chrome osx btw", "d": "4/2012"}, {"body": "problem nt comparator also way adding data array impossible correctly sort weird safari firefox working chrome real one", "d": "4/2012"}, {"body": "yes probably something adding data", "d": "4/2012"}, {"body": "timbrunsmo working backbone example ymichael seems work expected would mind posting code nt work", "d": "4/2012"}, {"body": "someone sanity also assess backbone posted comparators work using comparators production keep hearing nt work even though works read backbone sort method collection native javascript array sort", "d": "4/2012"}, {"body": "works expected", "d": "4/2012"}, {"body": "braddunbar time get snippet", "d": "4/2012"}, {"body": "timbrunsmo perfect thanks", "d": "4/2012"}, {"body": "braddunbar related chrome stable sorting whereas firefox safari browsers stable sorting internet explorer firefox safari browsers unstable sorting opera internet explorer arrayprototypesort chrome seems change sorting behavior depending array length array length smaller equal uses stable sort array larger uses unstable sort really issue sort collection attribute nt present models nt provide default idattribute rely orderofinsertion see stableunstable sorting action try different browsers", "d": "4/2012"}, {"body": "interesting nt know array sort nt necessarily stable sounds like nothing backbone differently though going leave one closed thanks vincentbriglia", "d": "4/2012"}, {"body": "interesting indeed saves trouble putting together snippet", "d": "4/2012"}, {"body": "hrm nt feature recently added", "d": "4/2012"}, {"body": "oops looks like fwiw version nt require null passed either eventname callback function want unbind context callback imho makes little bit cleaner others may think differently wrote like two months ago mentioned casually documentcloud submitting formally", "d": "4/2012"}, {"body": "believe tbranyen talking pull request adds similar functionality seems realistically motivate people really check play changes best bet always make pull request opinion even pr unlikely get merged always found others motivated interested code attached octocat also makes discussion around proposed changes easier also def going want upgrade master pr since testing old version nt much", "d": "4/2012"}, {"body": "damn nt refresh page realize already responded oops bowtie", "d": "4/2012"}, {"body": "yep feature added general want avoid sniffing arguments", "d": "4/2012"}, {"body": "aterris thanks advice jashkenas cool beans curiosity wrong typeof sniffing approach case someone tries use function returns event name function returns context instead providing string object", "d": "4/2012"}, {"body": "nothing wrong per se type sniffing usually means api poor instead type sniffing dynamic language without multimethods method take options object", "d": "4/2012"}, {"body": "seems like pretty edge case since primary key set user anyway think reason top head true although actually time override isnew reason remember right saying never something needed however see option called overrideisnew immediately feel like actually overriding isnew would avoid adding additional top level option backbonemodel used documented plus overriding isnew method means could override certain object set objects instead adding top level backbonemodel object initial thoughts sure commiters jump let us know thinking", "d": "4/2012"}, {"body": "thanks feedback current situation table medical codes primary key unique code entered user fact primary key ensures value entered user unique actually helpful adding extra autoincrement column table would course solve issue backbone creates meaningless unused id column well unused db index also may even allowed even make schema changes anyway particular situation moment sure may others agree magic property called overrideisnew probably terrible variable name amp nt really love another idea setter function model example yet another possibility parameter passed save method example actually prefer parameter approach nt touch model looking code could disruptive", "d": "4/2012"}, {"body": "would suggest custom models whose id generated client probably separate attribute added server check instance added server option create update put", "d": "4/2012"}, {"body": "already answered ticket reiterate right thing use actual put semantics work great way", "d": "4/2012"}, {"body": "thanks guys seems case clientgenerated primary key choice either modelisnew return accurate value else modelsave make appropriate request type ca nt scenario decided go correct semantics accept put server side rely modelisnew table think probably best approach", "d": "4/2012"}, {"body": "really internal helper function exposing regular backbone app probably nt use creating html templates sort instead nt think worth supporting version think tell use case using reopen", "d": "4/2012"}, {"body": "docs note want avoid using leading slash route definitions reason use instead", "d": "4/2012"}, {"body": "also believe duplicate would mind directing discussion thanks", "d": "4/2012"}, {"body": "thanks clarification mislead gets stripping treatment used pushstate hashchange cases plan next stable release fix included", "d": "4/2012"}, {"body": "never mind misunderstood meaning variable names selfclose", "d": "4/2012"}, {"body": "would hold back using", "d": "4/2012"}, {"body": "mean primary issue eventemitter backbone events different similar apis whereas backbonejs api nonstandard one nodejs projects issue nt want introduce nonstandard event system models rest application uses standard nodejs event system would fantastic could get work together somehow make apis compatible guess would aim trying gather feedback whether good idea anyone already attempted seems unlikely first one", "d": "4/2012"}, {"body": "could wrong node part use", "d": "4/2012"}, {"body": "note quite comparison backbonejs objecton event callback context alias bind objectoff event callback context alias unbind objecttrigger event args node eventemitter emitteraddlistener event listener alias emitteronce event listener emitterremovelistener event listener emitterremovealllisteners event emittersetmaxlisteners n emitterlisteners event emitteremit event besides new functions node eventemitter provides difference backbone argument seems logical step would override backbone functions node eventemitter shim context argument give go", "d": "4/2012"}, {"body": "sounds like good idea general feeling people using backbone server may first one encounter first one care context argument nt even necessary use anyway", "d": "4/2012"}, {"body": "interesting suggestion blocka keeping backbone specific node specific handlers may work quick attempt try tomorrow sometime coffee class backboneeventemitter extends eventemitter thanks", "d": "4/2012"}, {"body": "looks like nice approach glad working general nt think plans change backbone events api like node eventemitter anything aiming towards jquery events api case pretty comfortable writing app uses three pretty much pattern", "d": "4/2012"}, {"body": "nt actually use sortedindex yet nt use comparators often spent last minutes playing around console since sortedindex proxied underscore method writing essentially syntax sugar looks like actually expecting automatically pass comparator sortedindex methods simply proxied models passed first argument need pass final code ran backbone docs site console feels recreates issue shows get correct result c new backbonecollection ccomparator function model return modelget score cadd new backbonemodel score cadd new backbonemodel score cadd new backbonemodel score cadd new backbonemodel score cpluck score csortedindex new backbonemodel score csortedindex new backbonemodel score ccomparator underscore method passed models never able figure order always return unless comparator kind passed knows sorting models even means actually correct behavior think makes sense keep every proxy method pretty sure addresses issue missed something way base talking lem know", "d": "4/2012"}, {"body": "say true thinking collections default using comparator since using method anymore many people actually use probably fine leave", "d": "4/2012"}, {"body": "cool octocat", "d": "4/2012"}, {"body": "uk hell yeah dudes", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "cool", "d": "4/2012"}, {"body": "brother love", "d": "4/2012"}, {"body": "god", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "okay", "d": "1/2017"}, {"body": "diablo", "d": "4/2012"}, {"body": "devil", "d": "4/2012"}, {"body": "dj\u00e4vulen", "d": "4/2012"}, {"body": "obsessed", "d": "4/2012"}, {"body": "inflammatory closed", "d": "4/2012"}, {"body": "ok hero", "d": "4/2012"}, {"body": "way unoriginal troll reported github abuse kthanksbye", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "thanks opening another issue reported github abuse trollface", "d": "4/2012"}, {"body": "flagged abusive", "d": "4/2012"}, {"body": "nt happen jquery well", "d": "4/2012"}, {"body": "hmm yes seem case nodejs eventemmiter", "d": "4/2012"}, {"body": "nt happen jquery well made quick dirty jsfiddle seems may disagree think behavior rather logic real usecase binding handler twice", "d": "4/2012"}, {"body": "yep way events supposed work like function run multiple times nt bind multiple times", "d": "4/2012"}, {"body": "anyway check whether function bound event rather way check event bindings context case", "d": "9/2012"}, {"body": "gsklee backboneevent nt really geared providing list places callback set called check code looks removes particular callback context scanning callback list event asked unbind authoritatively know callback called need scan events object", "d": "9/2012"}, {"body": "knowtheory correct would add even though probably nt inspect internals runtime change rather dramatically release release last months nt cases unsure particular listener registered probably reexamine code things differently", "d": "9/2012"}, {"body": "sure mean callbacks ever defined used purpose please submit pull request failing test case proposed problem change", "d": "4/2012"}, {"body": "digging discovered backbonewraperror fallback error event process figuring utilize figure close ticket otherwise elaborate", "d": "4/2012"}, {"body": "looks like beat", "d": "4/2012"}, {"body": "hi thanks report sure using latest version backbone first version include behavior otherwise work code appears work paste console situation referring", "d": "4/2012"}, {"body": "sorry used see problem fixed thx", "d": "4/2012"}, {"body": "problem glad could help", "d": "4/2012"}, {"body": "issue resolved thanks", "d": "7/2012"}, {"body": "thisel initialized early stage ensure events always bound wheter view rendered see last comment jashkenas explains far better", "d": "4/2012"}, {"body": "ok understand fact bother fact define el field descriptive way view know wo nt present time view initialized want give hints code reader hey view dealing section dom call thisel render function null since thisel found ensureelement gt thisel overwritten null thinking would love reloadelement method would reload thisel time reloadelement called sort setelement method based initial value el defined view overwirtten would imply thisel never overwritten null ensureelement initial value kept somewhere brought later order made available reloadelement wdyt", "d": "4/2012"}, {"body": "sure fully understand want achieve want give hints code reader nt declaring id attribute creating view el sufficient", "d": "4/2012"}, {"body": "mmm right solves first part equation construction view el field filled temporary element created occasion make call able handle events take back master nested views problematic problem nested view rendered like fact viewel reloaded existing dom element loaded master view problem nested view rendered thisel targets temporary element created ensureelement given id workaround call something like thissetelement thisid order update current thisel field newly added html fragment", "d": "4/2012"}, {"body": "fyi succeeded make something neat something like myview backboneviewextend initialize function options backboneviewprototypeinitializecall options note needs jquerylivequery plugin work detect tag addition dom", "d": "4/2012"}, {"body": "problems precisely reason views supposed manage allow backbone views create elements simply insert dom ready render wo nt loadorder isthiselementreadytorenderyet issues", "d": "4/2012"}, {"body": "problem nested view responsible create first element relies role master view element available time create nested view particular case encounter every nested views ca nt define el attribute workaround found thanks florianr use id code snippet added previously", "d": "4/2012"}, {"body": "hi thanks issue docs method left undefined encouraged override custom validation logic performed javascript custom logic decides whether given set attributes valid provide method model work correctly said areas ignore nt exist assume model valid seems consistency would suggest", "d": "4/2012"}, {"body": "fixed commit thanks report", "d": "4/2012"}, {"body": "tried latest version backbone", "d": "4/2012"}, {"body": "yep project running stepped around issue temporarily removing hashchange false letting hash change good enough need today honest really crappy issue report without much clarity information going close one time prolly thursday get together sample case recreate track see something accidentally end truly seems like issue backbone seem backbone issue create new ticket morebetter info", "d": "4/2012"}, {"body": "spirit thanks aterris", "d": "4/2012"}, {"body": "", "d": "4/2012"}, {"body": "tombell quite thing extend notextend talking extend inherits used backbone classes need set inheritance something else model collection view router", "d": "4/2012"}, {"body": "simpler use constructor instead initialize var human kindextend tostring function consolelog hello", "d": "4/2012"}, {"body": "hello would give answer please direct comments thanks said use exactly way", "d": "4/2012"}, {"body": "oups sorry seen previous issues thanks response", "d": "4/2012"}, {"body": "nope urls case sensitive", "d": "4/2012"}, {"body": "confirmed loading page following reproduction steps adding todos returns array undefined elements however returns array two todo models alerts two ids proving exist", "d": "4/2012"}, {"body": "believe issue implementation get desired behavior change", "d": "4/2012"}, {"body": "looks like merged fix", "d": "4/2012"}, {"body": "nope true app configured also", "d": "4/2012"}, {"body": "think fine use case probably one worth tangling semantics additional option behavior instead add validation function call whenever model changes state nt valid trigger events need change semantics core backbone function easily add", "d": "4/2012"}, {"body": "similar problem form validation system sets input value input change validate see error show error form case want set value model even valid keep model sync values form need also wanted special behavior assigning inputname nt match model attributes nested models collections handle values could one things modify code view set different values inputname patters view care mode edge cases override method backbone model overrides little bit messy backbone add event listener change handle edge cases last solution looks clean case use set attribute even validation fails event fired case showing probably related avoiding validation case jashkenas said add behavior edge cases case could solve firing change event manually view", "d": "8/2012"}, {"body": "torn half agrees might well return information since however half feels like adding ands additional thing needs documenting inconsistency return value returning undefined called", "d": "4/2012"}, {"body": "yeah trying work around monolithic structure example support browsers like ios safari haspushstate unfortunately nt work etc looks like due refactoring agree view specific item withdraw pr", "d": "4/2012"}, {"body": "backbonehistory compare historyjs regard putting aside inconsistencies devices poorly served backbonehistory either mode operation documented recommended practice crossbrowser support", "d": "4/2012"}, {"body": "good question possible next step test integrating historyjs backbone purposes able hack around backbone deficiencies support specific cases need ios without adding bulk historyjs supports eg html browsers nt need moment want integration find reference someone already done surface googling nt find much swell basically sniff ua enable safari ios even though supports reveals bug post second regarding specific feature returns result use case moment startup want insert another entry history chain root app eg user backs entry url get root home app backing wherever came often blank page hope makes sense done router simpler way love see", "d": "4/2012"}, {"body": "closing withdrawn", "d": "4/2012"}, {"body": "nt believe would correct first hash encountered url begins fragment identifier hashes intended used part url must encoded use appropriate places instead", "d": "4/2012"}, {"body": "afraid would nt correct point history start notified app page loaded want ignore information go right ahead set flag ignore", "d": "4/2012"}, {"body": "problem per related prs want push history onto queue routing fragment launched app necessarily ignore incoming fragment also adjust options according ua eg override pushstate although may available implementation looking pretty tangled point due refactoring look see make work eg calling earlier later", "d": "4/2012"}, {"body": "ok also adjust options according ua eg override pushstate although may available already possible check ua starting history want push history onto queue routing fragment launched app seems wrong nt simply break meaning back button history real pages navigated", "d": "4/2012"}, {"body": "abstact concept merely come link interior page want also home page history queue first back takes home exit app often blank tab ie history implicitly gets crumbs along route working already replacestate see make simpler", "d": "4/2012"}, {"body": "want also home page history queue first back takes home seems wrong hope reconsider would major annoyance users wish leave able wo nt ever go back site like problems using back button contrary ingrained mechanism nt overridden alone reason existence pushstate still ideologies aside think could achieved like hope nt alerts unload matter much better solution would prominent way go back home near requested content using cookie detect passing users would indicate force merit site easily get back home still manipulate hack history please make optin", "d": "4/2012"}, {"body": "zeno thanks basically already nt one evil sites popups sure want leave etc rather deeplink app referrer opening new tab anyway hitting back would get user blank page think useful give home page app really want blank page hit back", "d": "4/2012"}, {"body": "believe already delegates add fact inserts model beginning collection already documented add model beginning collection takes options add going close think request already satisfied please let know missed something", "d": "4/2012"}, {"body": "see one issue code though called object literal opposed instance return object literal return created model get around returning first model via fix certain good idea since current implementation correct regardless", "d": "4/2012"}, {"body": "right realized replying deleted post method changed confused doc thought could pass array", "d": "4/2012"}, {"body": "ok thanks", "d": "4/2012"}, {"body": "afraid would fudging semantics confusing way instead use", "d": "4/2012"}, {"body": "went go find documentation pretty sure however seems right undocumented functionality least far could see feel like documentation completeness avoid possible naming confusion maybe undocumented avoid confusion collection show docs attribute model however usage model within collection talked faq gt nested models collections think overall documentation would benefit added", "d": "3/2012"}, {"body": "thanks fix although referring collection property model inside collection c new backbonecollection new backbonemodel consolelog mcollection undefined cadd consolelog mcollection object gets added collection c get new property collection references c collection property undocumented mcollection feel nt meant used publicly mcollection meant used documentation missing", "d": "3/2012"}, {"body": "think people would also benefit caused naming collisions problems didnt know model instance holds reference collection owns", "d": "4/2012"}, {"body": "right got mixed point collection property oops behavior describe actually enabled code documented pull request confused usage said add model collection create etc collections preparemodel method uses collection option act reference noted pull request also used url method line going update pull request make documentation accurately reflect true usage actually agree maybe property collection since really feels like internal reference even still set manually optionscollection one else gets likely make pull request tomorrow changes make reality atleast spur discussion although wonder separate issue since really documentation agreement making collection property collection documentation assuming collection figured id ask", "d": "4/2012"}, {"body": "aterris think collection property suggestion pretty good", "d": "4/2012"}, {"body": "would still like access collection model though believe common usage", "d": "4/2012"}, {"body": "yeah guessing change might cause backwards compatibility problems also accessing modelcollection projects", "d": "4/2012"}, {"body": "yea backwards compatibility would issue want go route might start accessible modelcollection modelcollection preserve compatibility use modelcollection internally would set make breaking switch ever felt worth might mean leaving best option tho", "d": "4/2012"}, {"body": "question whether modelcollection considered private public question answered always confusion like think public beneficial convenient access collection model common assign properties collections accessed model", "d": "4/2012"}, {"body": "moving conversation pull request", "d": "4/2012"}, {"body": "looks like fixed master pushed place ghpages branch yet nt able actually find commit fixed issue def seeing sentence correctly master however see typo ive site ghpages branch sure manage getting documentation updated github branch hopefully someone come update close issue well get fixes see master live docs", "d": "3/2012"}, {"body": "hi amandoi thanks question probably wo nt get much response though took liberty posting mailing list think much better luck", "d": "3/2012"}, {"body": "amandoi could try using phantomjs", "d": "4/2012"}, {"body": "correct discussed collection fully initialized including called first models added two choices situation add model constructor calling super constructor add model creating collection hope helps", "d": "3/2012"}, {"body": "yes easy way access jqxhr object would useful", "d": "3/2012"}, {"body": "afraid intended return reference model want jqxhr add model hand instead semantics failure cases think valid may reference model unable added server way reference model unable saved server", "d": "4/2012"}, {"body": "fair enough agree ok reference model failed persist want know failed succeeded one use callbacks semantics differ slightly possible pass around piggyback", "d": "4/2012"}, {"body": "nope pass concrete element view overriding default element created etc semantics want", "d": "3/2012"}, {"body": "sure follow quite enough help may better luck asking mailing list irc general javascript reference prototype chain reference shared overwritten whatever", "d": "4/2012"}, {"body": "ended something like instead", "d": "3/2012"}, {"body": "remember javascript objects passed reference include object default value shared among instances expected behavior use function defaults return object contains reference type", "d": "3/2012"}, {"body": "yes intentional different behavior provided function please see information", "d": "3/2012"}, {"body": "struggling across issue perhaps would beneficial update documentation explain slightly currently reads remember javascript objects passed reference include object default value shared among instances perhaps could change remember javascript objects passed reference include object default value shared among instances defaults containing objects passed reference defined using function wish share objects instances", "d": "4/2012"}, {"body": "benjen sounds reasonable care work pull request effect", "d": "4/2012"}, {"body": "long time position reasoning along lines duplicate models collection indicate application logic error warned early number folks appreciate sloppy adds keep trying add models collection without checking first made change forgiving feel free override copy early check error like", "d": "3/2012"}, {"body": "loose coupling models objects want observe state definitely good thing however questions regarding proposal different existing events already fired successful failed ajax calls change discussed made think would suffice fired different akin jquery think easy enough use use case showing loading status model altering state request sent rather like idea though think prefer used past overriding like given ease implemented inclined think best left apps plugins", "d": "3/2012"}, {"body": "another quick note agree also fire xhr method included", "d": "3/2012"}, {"body": "would moreorless alias per error current implementation existing event triggered idempotent operations like would fired operation completed regardless whether succeeded failed going back indicators hide loading indicator event events map jquery success error complete beforesend events known prefilters mentioned question use cases ca nt predict use cases used however like events backbone provided tool many possible applications give us tools decide use moreorless philosophy ruby backbone seems inspired hooks merrier observablesevents sane way keep realtime interface sync backend data processes backbone opinion going way provide many event hooks possible ideally events alone drive interface ui events data events communication events etc", "d": "3/2012"}, {"body": "binding sync event fetch also", "d": "4/2012"}, {"body": "love way backbone right add pretty easily need first place bloating framework hard remove also dont agree backbone inspired ruby philosophy especially since backbone encourages users implement things multiple ways stays slim focused", "d": "4/2012"}, {"body": "think braddunbar one nailed nose proposed proposed proposed probably antipattern event proposed nt something think belongs event model level given piece ui nt care whenever model starts sync editing piece ui instantiating change cares model starts sync ui cares model changes backbone wants provide right hooks possible hooks frameworks offer dozens hundred events box easily become far confusing need event inversion control something used abstraction justified", "d": "4/2012"}, {"body": "jashkenas disagree sync say part ui responsible initiating sync cares model starts sync quite assumption instance model may part many views combination events could fire sync whole idea behind events allow capture changes matter happened also nt get argument sync complete convenience event intended reduce code repetition error success blocks reason jquery complete callbacks ajax method really end requesting addition two new events allow complete handlings persistancecommunication events number requests feature clear one think better reason adds bloat required reject feature two independent lines code hardly gets way messes code yet amazing job keeping users code cleaner also nt completely appreciate closing ticket clearly resolution reached", "d": "4/2012"}, {"body": "wardrop two events requesting use use patch issues address later another request nt understand missing", "d": "4/2012"}, {"body": "concede sync error combo would negate need sync complete trigger patch like nt understand added core also suggest rename sync error namespaced sync success sync error think better describes triggers sync error ambiguous sync could mean anything sync start sync complete sync success etc error includes error events necessarily related sync errors may want handle errors sync errors errors kept catchall errors sync errors synconly errors ambiguous naming triggers always concerned thoughts", "d": "4/2012"}, {"body": "agree bit terse something generally like point somewhat moot renaming would break backward compatibility cause great deal confusion adding backbone usually trigger similar event view syncing model usually includes extra arguments specific view makes impractical inclusion originally asked use case easy enough implement one valid solution backbone probably stay indifferent done agree jashkenas generally view event model event said nt built support implement whichever way makes sense", "d": "4/2012"}, {"body": "compatible terse verb would would carry arguments would useful even views around would also flag prevent writing model sync still running agree namespaced events would better would also dictate powerful useful convention concur changing would painful also totally bought event name end world think every app subclasses customstrangereligious stuff end seems pretty innocuous popular addition already good set existing events", "d": "4/2012"}, {"body": "suggesting existing events removed yet think would safe deprecate existing events favor sync could remove change old sync error aliases later version mind thought whole idea release indicate backwards compatibility may break take extra precautions reading release notes anyone expecting seamlessly update library nt hit mistaken opinion", "d": "4/2012"}, {"body": "hrm appears might fix stay tuned", "d": "3/2012"}, {"body": "yes pull request fixes issue hopefully get merged backbonerelational soon", "d": "3/2012"}, {"body": "explicitly provided backbone provide necessary tools accomplish discussed recently would mind directing comments thread", "d": "3/2012"}, {"body": "actually check nt decide object added decides converted model added probably filter models calling possibly overriding collection", "d": "3/2012"}, {"body": "ca nt speak backbone devs experience nt like supporting use cases nt use least nt intend library words wo nt see fully supporting modelscollections attributes models objects default values case nested collections even though lots people want use backbone way suspect ticket gone days response bad news good news though devs willing support cases backbone proper problem fact think encourage people building solutions issues designed framework way pretty open modifications recommendation similar issue override preparemodel collection overridden version follows preparemodel function model options model instanceof mycollection could change backbonecollection allow collection modelcollection modelcollection set collection property original method would return model handle normal noncollection case return backbonecollectionprototypepreparemodelapply arguments nt perfect solution involves overriding underscored ie psuedoprivate method possible future versions backbone add functionality preparemodel update override accordingly ever happens however used override successfully nt mind one potential downside works great letting add collections collections", "d": "3/2012"}, {"body": "xiata would mind providing code snippet illustrating issue nt think quite understand describing seems though describing adding collection another collection instead model", "d": "4/2012"}, {"body": "app seemed logical first use collection inside models attributes might deal lot serverside oop time encountered problems methods clone tojson working events decided attach collection directly model anyway mentioned documentation even find way fix clone believe would many places collections attribute fail suggest try use anything sophisticated attributes even objects let backbone devs know mention documentation attributes limitations", "d": "4/2012"}, {"body": "added documentation brief yes model attributes work best plain flat data nested associated collections discussed faq", "d": "4/2012"}, {"body": "would likely want opposed adding backbone understand might want functionality feels specific backbones goals swoop take control navigate method whatever want quick sample something similar track page view via google analytics directly thru navigate method tracknavigate gt trackpageview trackpageview navigate windowbackbonehistoryprototypenavigate adjust navigate also calls method creation case would scroll top likely jquery oneliner", "d": "3/2012"}, {"body": "aterris right overriding listening event likely best way go", "d": "3/2012"}, {"body": "even obviously backbone issue tore bb code still dog slow", "d": "3/2012"}, {"body": "javascript closures allow access like var importantinfo important blahfetch success function importantinfo available", "d": "3/2012"}, {"body": "nt want write inline function want call function used elsewhere extremely common scenario kinds callback frameworks nt respond logical request saying workaround", "d": "3/2012"}, {"body": "uhm javascript var javascript var said agree pretty common way embed callspecific data especially coming jquery background still clean use common handlers specific code using different architecture would probably better", "d": "4/2012"}, {"body": "using jqueryproxy write way var someimportantinfo thisgogetimportantinfo importantargument blahfetch data b c success proxy thissuccess someimportantinfo error proxy thiserror someimportantinfo", "d": "6/2012"}, {"body": "pretty good workaround thepeg would work frameworks missing little bit", "d": "6/2012"}, {"body": "vbullinger really thank let suggest take look follow movableapp twitter stay date tips tutorial resources share", "d": "6/2012"}, {"body": "development thinking backbonejs cool thank author", "d": "3/2012"}, {"body": "also experiencing sometimes invoking routing page everything gets stripped user gets redirected", "d": "3/2012"}, {"body": "looks like exists fixed master use time wait next tagged release", "d": "3/2012"}, {"body": "appears addressed issue already", "d": "3/2012"}, {"body": "awesome thanks brad", "d": "3/2012"}, {"body": "must use instead reason always evaluate function one used instantiate object", "d": "3/2012"}, {"body": "happens nt know parent view constructor point script eg javascript optionsuser true viewsuser else viewsguest var initialize function thisconstructorsuperinitializecall var v new", "d": "3/2012"}, {"body": "correct changing value use naturally inside initialize value instance instead reference classes name", "d": "3/2012"}, {"body": "biggest problem completely ignores prototype chain adding special semantics function certain name initialize instead headache call super javascript var backboneviewextend initialize function options consolelog var initialize function options options consolelog coffeescript class extends backboneview initialize gt consolelog class extends initialize gt super consolelog", "d": "3/2012"}, {"body": "callback", "d": "3/2012"}, {"body": "synchronous function nt need callback whatever need next line", "d": "3/2012"}, {"body": "agree altering options undesirable copying prohibitively expensive please see discussions details", "d": "3/2012"}, {"body": "agree cloning argument expensive way solve problem please see approach", "d": "3/2012"}, {"body": "seems like complicated solution problem something like instead", "d": "3/2012"}, {"body": "solve real problem problem call expensive backbone avoids cost making options immutable application pay general idea backbone avoid cloning knows options revert changes much cheaper nt think overcomplicated basic wrapper pattern save state call wrapped function restore state soon wrapper reasonable use", "d": "3/2012"}, {"body": "braddunbar jashkenas silence mean agree last comment", "d": "4/2012"}, {"body": "maxlk issues fixed", "d": "4/2012"}, {"body": "thanks", "d": "4/2012"}, {"body": "jashkenas something want support incidental add tests effect", "d": "4/2012"}, {"body": "think probably something support", "d": "4/2012"}, {"body": "discussed issue see details change issue ran issue issue day however ended overriding constructor work around current behavior collections", "d": "3/2012"}, {"body": "thx replied", "d": "3/2012"}, {"body": "afraid nt understand question issue router working far know", "d": "3/2012"}, {"body": "like ok tab paging example become", "d": "3/2012"}, {"body": "perfectly normal since child classes share reference parent prototype properties object accessed cases believe looking following sets property instance time new one initialized hope helps", "d": "3/2012"}, {"body": "yep thanks case someone wants dig info related stackoverflow question", "d": "3/2012"}, {"body": "need use setters", "d": "3/2012"}, {"body": "paulmillr right see default implementation tojson also docs uses values", "d": "3/2012"}, {"body": "oops thanks lot great replies apologies investigating enough creating issue", "d": "3/2012"}, {"body": "mean multiple actions far know backbone already history support user clicks back button previous route triggered opportunity reload previous state something need besides", "d": "3/2012"}, {"body": "sure explain application library administration software application check check create records search catalog etc consider action many things application actions contained within tab many tabs open like history tabs tracked backbone history feature possible track tabs", "d": "3/2012"}, {"body": "sure tab associated url route backbone certainly able track browser history", "d": "3/2012"}, {"body": "could give example ca nt see would work", "d": "3/2012"}, {"body": "sure thing general structure would follows javascript var router backbonerouterextend routes function navigate function navigate know bit simplistic exactly sure looking user navigates corresponding function called ui reflects interaction user navigates corresponding function called user clicks back button url changes back corresponding function called mean", "d": "3/2012"}, {"body": "need track user tab tab", "d": "3/2012"}, {"body": "see want save state tab definitely possible probably appropriate place discuss strategies think much better luck asking mailing list", "d": "3/2012"}, {"body": "mean url nt resolve hosted using github pages yesterday outage try", "d": "3/2012"}, {"body": "reason following suffice", "d": "3/2012"}, {"body": "yes looks like would work best solution far one would also work think like better var mycollection new backbonecollection mycollectionmodel mymodel mycollectionreset jsonarrayofmodels appreciate tradeoff involved adding additional option seems like common need would useful able var mycollection new backbonecollection jsonarrayofmodels model mymodel especially people new backbone still trying understand pieces fit together", "d": "3/2012"}, {"body": "situations think snippet work however agree handy option available", "d": "3/2012"}, {"body": "like option well", "d": "3/2012"}, {"body": "return value think reasonable choice could however made explicit documentation nt seem indicate anywhere return jqxhr definitely remedied", "d": "3/2012"}, {"body": "update fixed error suggestion", "d": "3/2012"}, {"body": "correct events currently triggered however since called make sure list mutated iteration hence call creating new immutable list nodes code pass test suite", "d": "3/2012"}, {"body": "nt tried yet noticed browsing code check nt ill close issue", "d": "3/2012"}, {"body": "nt test fails unbind alter callback list closing", "d": "3/2012"}, {"body": "probably backbone maintainers tell soon backbone designed accomplish form validation use better suited jquery plugin framework", "d": "3/2012"}, {"body": "see asking essentially remove impediment building validation top backbone quite taken much prefer centralize validation logic model", "d": "3/2012"}, {"body": "really must already accomplish without extra options however purpose get invalid state building top circumventing goal seems bit self defeating", "d": "3/2012"}, {"body": "braddunbar right backbone also gives tools need build exactly behavior instead using builtin validate different purpose initialize function thisbind change thischeck check function thisisvalid thistrigger error etc etc", "d": "3/2012"}, {"body": "definitely way accomplish think ideal api would would satisfy needs", "d": "3/2012"}, {"body": "would work well", "d": "3/2012"}, {"body": "think feature would work greatly general question regarding braddunbar solution unbind listeners context model would also suggest option define model parameter resulting unbinding context events specific model", "d": "3/2012"}, {"body": "example modelviewcollectionetc would remove handlers whatever constructor happens", "d": "3/2012"}, {"body": "get makes complete sense thanks typical viewmodel scenario like hlship example would using something like instead multiple calls", "d": "3/2012"}, {"body": "personally like clean simple easy remember", "d": "3/2012"}, {"body": "bad lt facepalm white space issue please close issue", "d": "3/2012"}, {"body": "fyi close issues created see top right comment area", "d": "3/2012"}, {"body": "familiar setup nt really appropriate place question like think much succes mailing list thanks", "d": "3/2012"}, {"body": "think problem much backbone slim giving error put request presented", "d": "3/2012"}, {"body": "think actually clear model simply like reset default values", "d": "3/2012"}, {"body": "maybe would good implement could automatically deal", "d": "3/2012"}, {"body": "opinion current functionality consistent since create new empty model defaults set default call clear backbone function reset model initial state support user create class override clear method places code use even thousand calls code", "d": "3/2012"}, {"body": "really worried duplicating code use backbone extensibility adding new method", "d": "3/2012"}, {"body": "well worrying duplicating code since already fixed disadvantage sources overriding clear abstractmodel class want highlight current backbone implementation opinion inconsistent area", "d": "3/2012"}, {"body": "agreed seems correct used collections clear hand models however unable replace whole attributes would require api change sake correctness", "d": "4/2012"}, {"body": "bit digging found seems bind touch events element added dom updated jsfiddle works nice", "d": "3/2012"}, {"body": "thanks report sounds like ios bug fixed need call delegateevents get events bind certainly meantime", "d": "3/2012"}, {"body": "correct way supposed work returning objects constructors javascript antipattern use factory method instead", "d": "3/2012"}, {"body": "correct wrong nt mit license gpl compatible mit license page wikipedia license also gplcompatible meaning gpl permits combination redistribution software uses mit license", "d": "3/2012"}, {"body": "thanks clarifying question sindresorhus expert licensing indeed correct mit compatible gpl comment indicates could hosted drupal drupalorg policy hosting party libraries except necessary reasons complexity seems like drupal backbone team got bit work get backbone integrated drupal might consider adding drupal core dream point users download whole js files closing", "d": "3/2012"}, {"body": "yep mit pretty much whatever like including integrating drupal suite code let know get static using drupal plans sound interesting keep posted", "d": "3/2012"}, {"body": "correct wrong issues app stores gpl licenses transmissionbt duallicensed mitgpl seems ca nt enter mac app store case strongly prefer able sell backbonebased apps instead chance using integrated backbone amp drupal", "d": "3/2012"}, {"body": "paulmillr gpl license nothing mit license", "d": "3/2012"}, {"body": "think alright time given ca nt yet rely crossbrowser yet", "d": "3/2012"}, {"body": "right want bind object error event need reference object first", "d": "3/2012"}, {"body": "though nt defeat purpose nice error event bind object supposed use new set save instead create curious create little different new save", "d": "3/2012"}, {"body": "logical order things possibly listen event object reference object", "d": "3/2012"}, {"body": "yes understand think misled without giving model object collectioncreate create new model object validate trigger error save giving model object binded collectioncreate skip validation go straight save basically triggers bind object nt trigger bind object perhaps natural way using collectioncreate sorry trying argue want understand", "d": "3/2012"}, {"body": "hey hetsch really like route testing named params could join documentcloud freenode talk", "d": "3/2012"}, {"body": "tbranyen sure waiting", "d": "3/2012"}, {"body": "would nice afraid support arbitrary regexes routing clean route strings afraid ca nt support makes great backbone plugin", "d": "3/2012"}, {"body": "intended behavior passing delays change events fired thus delays reset later call fire events reset solve problem", "d": "3/2012"}, {"body": "scenario little bit different weird unset attribute say x silent true made ajax call populate attribute x data get unsetting attribute x change event never triggered haschanged method retruns false thus modelchange trigger change event never trigger change event point previousattributes never set null unset hoping made clear explanation let know u need example", "d": "3/2012"}, {"body": "yes clear example scenario change never fire perspective model value never changed passing tells model ignore changes next time called want behavior ca nt pass", "d": "3/2012"}, {"body": "see point thanks lot time explanation closing isssue", "d": "3/2012"}, {"body": "problem thanks taking time report way make docs clearer point get issue lot tried clarify feel like people still nt get right away", "d": "3/2012"}, {"body": "love send u pull request weekend works", "d": "3/2012"}, {"body": "wonderful thank", "d": "3/2012"}, {"body": "localstorage adapter using", "d": "3/2012"}, {"body": "using one todos app uses one version", "d": "3/2012"}, {"body": "nested save within change events fine using latest backbone important thing nt using demo localstorage adapter anything demo todo app example", "d": "3/2012"}, {"body": "clarify using exact version used todos example showing example easy reproduce issue look case provided nt think issue localstorage adapter suggesting recommended use localstorage backbone merely version shown example latter link better localstorage adapter former link documentation", "d": "3/2012"}, {"body": "regarding localstorage wiki maintained community folks post things vetting plugins listed saying localstorage example used todo app nt intended real use infinite loop save function causes change event fire change event causes save function run yes infinite loop nt much backbone feel free remove call event handler use change logic noop nt cause change", "d": "3/2012"}, {"body": "something backbone call model backbone internally calls returned attributes function supposed figure whether attributes changed believe lines trigger change event needed case localstorage adapter code incorrectly deducing returned attributes changed nt lot time track cursory step firebug object still shows changes save new attrs object model attributes causing backbone trigger change event immediately saving anyway causing infinite loop believe localstorage save synchronous saves asynchronous synchronous save causing sort race condition try dig little deeper time meaning bug report taken please tracking help fix issue", "d": "3/2012"}, {"body": "digging deeper issue seems conditional line called function registered event true conditional run set true line assume check put case functions registered events manually call however downside produces infinite loop synchronous saves registered events seems like solution create queue changes queue would solve race condition issue prevent check things like backbone internal function happy submit pull request interested change", "d": "3/2012"}, {"body": "philipwalton looks though using backbone would mind trying latest master code changed significantly since think perhaps issues would solved", "d": "3/2012"}, {"body": "braddunbar right using switching latests fixed issue infinite loop looks like still double loop synching twice stopping since likely different issue investigate post separate issue find anything worth noting", "d": "3/2012"}, {"body": "afraid nt know reproduce problem probably nt much help let reopen test case check", "d": "3/2012"}, {"body": "would primary use case would used", "d": "3/2012"}, {"body": "use case would nice routers definitely singleviewspecific normal router handle urls tens hundreds internal views nt think adopt change", "d": "3/2012"}, {"body": "clear problem options argument altered include", "d": "3/2012"}, {"body": "yes exactly thanks brad dunbar reply replygithubcom guysadger guysadger yahoocom sent wednesday march pm subject backbone backbone unset bug clear problem options argument altered include reply email directly view github", "d": "3/2012"}, {"body": "although change would convenient turns costs outweigh benefits discussed pass object throw away reference", "d": "3/2012"}, {"body": "modification immutable parameters generally usual behavior libraries although understandable reasons computational costs think behavior stated clearly function documentation", "d": "6/2012"}, {"body": "maelp changed options objects copied", "d": "6/2012"}, {"body": "okay since discussion though new default behavior mutable parameters modification imo bad behavior might lead difficulttotrack bugs amp api inconsistencies also happens collectionadd modify models parameter someone wants mymodelsasattributes mycollectionadd mymodelsasattributes lt elements replaced models model model myfunctiondoingstuffwiththeattributes mymodelsasattributes lt breaks", "d": "6/2012"}, {"body": "actually models sliced several lines modification original array happening", "d": "6/2012"}, {"body": "sorry missed", "d": "6/2012"}, {"body": "pretty sure previous version current one fixed asap", "d": "3/2012"}, {"body": "sure get diff view indexhtml state backbonesync makes mention case currently backbonesync doc says suppose could clearer modified permodel basis perhaps adding function reference underneath model doc menu like would make explicit sync overridden thoughts", "d": "3/2012"}, {"body": "override suggests redefine follows definitely imply override single model", "d": "3/2012"}, {"body": "agree nt clear detail would beneficial either directly backbonesync documentation underneath documentation backbonemodel", "d": "3/2012"}, {"body": "agree someone ask today", "d": "3/2012"}, {"body": "give irc channel mailing list try better able assist", "d": "3/2012"}, {"body": "expected behavior server sends attributes would like change client side clientside model state get blown away", "d": "3/2012"}, {"body": "expected documentation misleading fetch modelfetch options resets model state server useful model never populated data like ensure latest server state second really goes rest principles common sense server know state currently client delete attributes needed", "d": "3/2012"}, {"body": "think also related implement asked need reset collection existing models exactly server state update leaving phantom old attributes", "d": "3/2012"}, {"body": "also different resets models changes server would like add true different really adds whatever objects updating either seems like consistent behavior worse obviousexpected newcomers make poll provedisprove took time debugunderstand could turn others although backbone wonderful library overall propose changing default resetting model adding option maybe update true current behavior case anyone relies make patch agree change ps discovered never used model fetch documentcloud intentional", "d": "3/2012"}, {"body": "jashkenas even open discussion issue still think current default behavior needs reconsideration could provide code decide give try", "d": "3/2012"}, {"body": "general backbone try support commoncase default semantics get fetches state resource server clientsideonly state get destroyed similarly puting backbone model server probably nt set columns corresponding database table like different semantics great backbone give tools case easy enough", "d": "3/2012"}, {"body": "enough unfortunately model stays empty request inflight breaks things would need rewrite fetch scratch make behave commonsense default semantics would argue much common sense clientside model object local representationcache http resource fetch operation syncs resource current behavior clientonly state still getting destroyed dont write specific server code support client model get messed old attributes hanging around new attributes common sense mine maybe could open issue people could think us comment", "d": "3/2012"}, {"body": "sure thing", "d": "3/2012"}, {"body": "thanks", "d": "3/2012"}, {"body": "ok discussed irc results pro change resource optional attributes fetched several times refreshed model state screwed bug seems bizarre con change seems optional attributes prevalent natural see highlevel property names part api fex default rails get columns json property names every time even null people keep ui state model along server attributes arguably really good practice case developer must sure client attributes clash server attributes way model safely fetched client state kept mostly problem splits two really rare server resource attributes optional yet research widelyused public apis optional attributes enough reallife usage would suggest add option ala add true collection fetch case documentation must updated reflect cases currently really misleading", "d": "3/2012"}, {"body": "tend agree generally consistency nice resets collection perhaps reset model well unfortunately many cases use model let say user track model changes used reflect state ui tradeoff serverside data validation know attributes model valid ones invalid suggestion introducing collectionmodel method achieves op request existing applications need upgrading next version need change calls keep functionality already using modified version backbone collectionupdate modelupdate similar solution akin jeremy fetch overload collectionfetch resets collection models server also create new models new cid collectionupdate updates collection new models nt reset models keeps cid references alive got events bound models modelfetch resets model data server removes attributes currently set keeps cid modelupdate updates model attributes server nt remove difference attributes", "d": "3/2012"}, {"body": "closing ticket discussed still think current semantics useful default semantics functions looking currently easy write backbone said also happy take look pull request holistically addresses mergevsreset styles update", "d": "3/2012"}, {"body": "vincentbriglia worth think four methods right semantics intuitively expected wasted hour trying find attribute disappeared model server still backbone model fetch", "d": "6/2012"}, {"body": "ran problem fetch entire collection pass reset true chance could reset true option added calling fetch individual model would give behavior requested", "d": "5/2013"}, {"body": "able hack behavior adding following parse function model type question parse function resp keys thisattributes foreach function key resp key undefined resp key undefined return resp basically response server lacks attribute local model explicitly adds key response undefined value causes fetch behave correctly least deem correct behavior remove model", "d": "5/2013"}, {"body": "adding reset parameter fetch", "d": "6/2013"}, {"body": "well reset parameter least update documentation wrong", "d": "10/2013"}, {"body": "documentation clarity reset parameter trying figure backbone behaviour fetch documentation nt forthcoming hence arriving glad default behaviour nt want backbone clobber client state different semantic serverpersisted state vs clientephemeral state model know better anything passing reset option fetch bad design assumes external caller knows model modelattributes merges state single object ability override tojson control gets persisted minor effort using approach similar aratlas fetch get semantics clear attributes want fetch however easy obvious whilst backbone provides raw tools work one would like appears common use case indeed core backbone design decision ie nt clobber client state general approach would perhaps whitelist option model grunt work us warning untested ideaexample code ahead save whitelist filter attributes ensure serverside attributes get persisted fetch override parse update server attributes ensure server ca nt accidentally clobber clientephemeral state functionality would minor change backbone seems like common use case given backbones default behaviour clobber client state also easily implementable generic model class extends backbonemodel doubt others want blacklist instead different fetchsave lists finer control lists different api versions trying things creates bloat may better extensionplugin leave backbone", "d": "11/2013"}, {"body": "well given backbone provides reset true option entire collection think reasonable provide model well geting model server implies getting updated version server attributes deleted important information nt lost storing ephemeral client side data mixed attributes think ephemeral data stored wrong place request reopening ticket", "d": "11/2013"}, {"body": "worth new backbone spent better part two hours trying figure model reflecting server state attributes removed noted previous posters backbone documentation suggests fetch sync server client state expected would remove attributes personally like idea able pass reset flag agree ephemeral data mixed model attributes really ephemeral would nt matter blown away anyway would also suggest reopening ticket", "d": "1/2014"}, {"body": "yeah totally tripped well fortunately several hours took time debug word adding parameter", "d": "3/2014"}, {"body": "adding reset option model fetch", "d": "5/2014"}, {"body": "would love issue need model reset server response calling send request bad certain user interactions abort jqxhr leaving nowempty model currently resort hack accomplish seems like would simple addition would change default behavior", "d": "6/2014"}, {"body": "adding reset option save sometimes server logic may update one attribute causes another attribute change far tell ca nt make backbone update dependent attribute model even use wait true", "d": "7/2014"}, {"body": "question one solutions suggested using nt clear also clear making difficult use missing", "d": "9/2014"}, {"body": "using solution two problems attributes may used setup url function like fetch fail keep empty model loosing data implementing option fetch would keep current behavior backwards compatible add ability reset model server state valid use case backbone currently primitives handle", "d": "9/2014"}, {"body": "option wasted hour figuring bugbehavior please least update documentation", "d": "2/2015"}, {"body": "reset parameter would useful us", "d": "4/2015"}, {"body": "option", "d": "5/2015"}, {"body": "agree spent quite lot time figuring firing unset server use workaround aratlas meanwhile", "d": "10/2015"}, {"body": "figuring heck made frustrated please update documentation reset option", "d": "12/2015"}, {"body": "ran reset option", "d": "12/2015"}, {"body": "reset true option modelfetch", "d": "1/2016"}, {"body": "imho needed kek doc maybe explaining newbs", "d": "1/2016"}, {"body": "option wonder rational behind models exact behaviour present collection optional toplevel keys api highly possibility specially external api", "d": "2/2016"}, {"body": "well reasons stated consistency modelscollections expectation syncing server", "d": "3/2016"}, {"body": "reset true option modelfetch", "d": "4/2016"}, {"body": "nope indicates operation completed model successfully present collection", "d": "3/2012"}, {"body": "ah ok worries", "d": "3/2012"}, {"body": "makes sense", "d": "3/2012"}, {"body": "last two apps use collections custom urls saving models becomes really inconvenient inherit collection url", "d": "3/2012"}, {"body": "little iffy classlevel might considered less specific collection url yall agree", "d": "3/2012"}, {"body": "", "d": "3/2012"}, {"body": "jashkenas well whatever interface defines case url urlroot defined backbone model something programmer manipulate urlroot less specific specifically designed root url url generates class vs object level urlroot treated differently algorithm maybe justifies different variable indicate intention expect url property cascade able override cents", "d": "3/2012"}, {"body": "ahh see modified bad thanks", "d": "3/2012"}, {"body": "nt change make sort difficult create freefloating model separately collection code creating model adding collection later set urlroot model order able model added collection later would pick url collection longer case way accomplish scenario", "d": "3/2012"}, {"body": "kevindente well change nt affect free floating model opposite fact like dgbeck said model final word url collection needs add model collection remove model urlroot ii override concrete model url function check collection urlroot first hth", "d": "3/2012"}, {"body": "twashing ok traced bit understand going access url initializer throws new freefloating objects urlroot nt set able wrap call isnew check avoid problem sorry confusion think well", "d": "3/2012"}, {"body": "well could documentation updated generates urls form collectionurl id falling back urlroot id model part collection", "d": "10/2012"}, {"body": "tgoffman learning code rely lot documentation writing jasmine tests right trying hunt problem tests hours trusting docs true looked source voila", "d": "10/2012"}, {"body": "one way thought getting around would work way backwards serverside would anyone recommend terms performance another way would also add foreign key model direct look without going bookshelf layer like would little redundant would spare lots queries especially start nesting even deeper two levels using mongodb redundancy order gain performance denormalizing nt abnormal let assume using rdbms please advise", "d": "3/2012"}, {"body": "serverside question probably better luck irc mailing list bug ticket tracker assuming rdbms lookup book validate current user edit access delete", "d": "3/2012"}, {"body": "worth nt think server side question tried something like printing params delete request problem sending params like expect passed along jquery advice read looking send extra params backbone destroy model says gets passed serialized nt dug source find instead send information hoping", "d": "12/2013"}, {"body": "plan provide backbone goes away jquery api integration light pretty easy make mootools version see old project example", "d": "3/2012"}, {"body": "", "d": "3/2012"}, {"body": "noticed issue well however disagree documentation updated account functionality functionality changed match documentation removing line way retrieve attribute delta validate method attrs extend thisattributes attrs", "d": "3/2012"}, {"body": "merged updated documentation", "d": "3/2012"}, {"body": "lxb perfect solution easily calculate attributes delta inside method using underscorejs", "d": "3/2012"}, {"body": "sure kinds changes could fit well backbone philosophy views handle including base app object create app view nt persistent server mixin already present via extend method real class ala java js mess imho although understand kind structure useful complex app others frameworks ember better job usecases create backbone plugin seems another decent option cents curious see others opinions subject", "d": "3/2012"}, {"body": "agree second point global application object however think problem lack documentation keep backbone app maintainable tutorials find solutions authors try something like would nice forced reinvent wheel follow documented pattern app organization nt feel first point useful working coffee script imo backbone coffee works well code elegant", "d": "3/2012"}, {"body": "backbone nt intended basic objectorientationhelper library js lots backbone stay debate possible base application object good idea go right ahead windowapp appmodelscontactlist appmodelscontact", "d": "3/2012"}, {"body": "complex backbone apps total mess bad guruguys want commit rails guess lot us really need soon build something todo app try extend core fit needs since pretty much suck lowlevel javascript thing guess look another framework future needs", "d": "3/2012"}, {"body": "use coffeescript solves oop problems also brunch makes rails backbone provides cool structure days also provide bunch cool predefined stuff", "d": "3/2012"}, {"body": "never really looked coffeescript get real added value switching needtobecompiled language obvious css amp lesssass also fan indentation critical thing maybe time dig little definitely check brunch thanks pointing", "d": "3/2012"}, {"body": "though might make sense keep extend amp constructor top", "d": "3/2012"}, {"body": "quite right tries order group things logically basic standard functionality fancier things think quality worth preserving looking particular function instead scanning alphabetically use search page", "d": "3/2012"}, {"body": "still called checks options halts found validate", "d": "2/2012"}, {"body": "line causes reset never validate reset thisadd models extend silent true options reset forces silent true", "d": "7/2012"}, {"body": "pushstate api supports title hashchange api since backbone normalizes two nt add api features exist one instead set title correctly router actions probably easier passing calling first place", "d": "2/2012"}, {"body": "seems reasonable thanks prompt answer", "d": "2/2012"}, {"body": "well since navigate api determines use pushstate based browser support could use title case pushstate using hashchange", "d": "5/2013"}, {"body": "ericbdr said makes sense", "d": "9/2014"}, {"body": "right mistake documentation thanks letting us know addressed live next release", "d": "2/2012"}, {"body": "thanks updated comment change validate made folks using wanted stateless method ensured model valid state given upcoming snapshot attributes would become whole", "d": "2/2012"}, {"body": "pushstate api might handle hashes certainly nt arbitrary regexes backbone allows route afraid pass complete url intend navigate", "d": "2/2012"}, {"body": "indeed correct following line code even attrs invalid variable contain valid book model reference line code run unless willing allow exceptions need create valid models accomplish looking use", "d": "2/2012"}, {"body": "excellent work around implemented system wanted know missing something obvious thanks", "d": "2/2012"}, {"body": "hold may bug backbone dig close valid", "d": "2/2012"}, {"body": "ok backbone selector vague", "d": "2/2012"}, {"body": "understanding incorrect ignore", "d": "2/2012"}, {"body": "diff changes original addyosmani version curious take look merging changes", "d": "2/2012"}, {"body": "get diff evening", "d": "2/2012"}, {"body": "hm sure diff still nt figured github two things bothered changed custom classes assigned local variables longer global properties handler longer bound manually appropriately moved events hash also noticed added mark done functionality", "d": "2/2012"}, {"body": "figured might well submit pr would also give us diff", "d": "2/2012"}, {"body": "latest backbonelocalstorage work example please take look merge maybe updating example someone could update latest version ls well", "d": "3/2012"}, {"body": "happy update pr support latest backbonelocalstorage elfpavlik nt difficult", "d": "3/2012"}, {"body": "closing favor new pull request", "d": "3/2012"}, {"body": "model attributes nt strange settertransformed version serverside attributes unless case need", "d": "2/2012"}, {"body": "equivalent running selector thisel also bitten change docs definitely updated since longer true item upgrade notes would nice well quick write", "d": "2/2012"}, {"body": "thanks pointing addressed", "d": "2/2012"}, {"body": "think would covered", "d": "2/2012"}, {"body": "seems creating copy invocation log console behavior expect see", "d": "2/2012"}, {"body": "chromium following output firefox basically copy nt happen expected please tell nt hallucinations", "d": "2/2012"}, {"body": "oh strange ca nt imagine behavior would differ browsers", "d": "2/2012"}, {"body": "consolelog async reference evaluated lot end whole script try node synced", "d": "2/2012"}, {"body": "whew thanks sanity check nevermind", "d": "2/2012"}, {"body": "fun open console", "d": "2/2012"}, {"body": "pfff thanks info guess wo nt trust console ever sorry false alert bug tried printing nt believe seeing thought must sideeffect backbone magic", "d": "2/2012"}, {"body": "nt sound like bug root app empty string change state unless understanding incorrectly either way feel free send along pull request failing test case use case take closer look", "d": "3/2012"}, {"body": "agree type escaping important gave great excuse reread post mathias bynens sure details within scope faq maybe could mention briefly", "d": "2/2012"}, {"body": "thanks heads unfortunately little less sensitive topics backbone projects nt take untrusted user data gfxmonk suggested simple revision faq example", "d": "2/2012"}, {"body": "suggest replacing current snippets slightly unsightly modeltojsongsub include link beneath along lines gsub important going etago link brad posted confused wanting info thanks link brad nt seen appropriate good standard ruby function gsub nt know record stuff still break site trusted content smells like html tags probably insecure way broken broken", "d": "2/2012"}, {"body": "might related issue", "d": "2/2012"}, {"body": "believe intentional see test test want get old attr model test pass need change line", "d": "2/2012"}, {"body": "disagree line tests testing immediately calling models attributes correspond original attributes makes sense waiting attributes returned server updating waiting callback fire line emulates callback fired line tests attributes updated issue callback called method call would happen using local storage example model ends incorrect original attributes see commit crude solution unsets standard success callback line nt reset attributes back old ones tests pass code feel crude obtuse think someone better job hence nt raise pull request", "d": "2/2012"}, {"body": "thanks exploring jalada think patch sensible actually longer applies made success callback reasonable remove", "d": "3/2012"}, {"body": "seems error function backbonelocalstoragejs", "d": "2/2012"}, {"body": "thanks input nt hardcoding todoscollection param localstorage plugin going break update transactions nt include todoscollection", "d": "2/2012"}, {"body": "maybe try putting todoscollection projectmodelattributes", "d": "2/2012"}, {"body": "thanks converting todoscollection json saving output attribute see line projectmodel", "d": "2/2012"}, {"body": "", "d": "2/2012"}, {"body": "problem debugged backbonelocalstorage opened ticket jeromegnbackbonelocalstorage", "d": "6/2012"}, {"body": "although already exposed etc find strange use something completely unrelated models", "d": "2/2012"}, {"body": "think general rule stay howtodoobjectorientationinjavascript debate backbone might one day expose generic class object nt", "d": "3/2012"}, {"body": "nt think point declarative events instead imperative events always available times want imperative use regular better yet ignore callback instead removing dom", "d": "2/2012"}, {"body": "interesting thought could mistaken values functions reason could nt adding additional functionality key parsing seems overkill opinion", "d": "2/2012"}, {"body": "hi merrick tried doesnt seem work resize throttle testfunc throws js error backbone uncaught typeerror call method apply undefined first line stack trace throttle function line funcapply context args", "d": "2/2012"}, {"body": "maybe failing events list parsed view constructed therefore function named testfunc nt exist view yet entirely sure backbone internals seems like likely cause", "d": "2/2012"}, {"body": "cute think going stay away string programming general define function throttled debounced", "d": "2/2012"}, {"body": "backbonejsorg front page bookon change title change author also events written format event selector callback callback may either name method view direct function body nt instances string programming already exist backbone merely proposing possibility maybe could helpful along lines event selector modifier callback", "d": "2/2012"}, {"body": "anyone wants use currently implemented function pass data model serialize method sync var sync backbonesync backbonesync function method model options var tojson modeltojson modeltojson bind modelserialize model modeltojson sync method model options modeltojson tojson", "d": "2/2012"}, {"body": "might well throw example use case parse raw ticket data server parse function data unwrap attrs dataticket set following true current user notification list attrsnotificationlist attrsnotificationlistsplit attrsfollowing include attrsnotificationlist datacurrentuserid return attrs serialize ticket attributes sending server serialize function attrs add remove user notification list depending following status attrsfollowing attrsnotificationlist uniq attrsnotificationlistpush datacurrentuserid join else attrsnotificationlist without attrsnotificationlist datacurrentuserid delete attrsfollowing remove disallowed attributes delete attrsid delete attrsreporterid wrap return ticket attrs course control server kind serialization serverside whole point function backbonemodel facilitate cases need prefer handle clientside right backbone facilitates direction makes sense facilitate direction", "d": "2/2012"}, {"body": "also override problem want use feed template function return canonical json representation model return warped representation server requires", "d": "2/2012"}, {"body": "ah backwards use return representation server side add new method extract view attributes interested simple enough change required explicit already complement", "d": "2/2012"}, {"body": "thanks lot makes sense really reason ca nt pass object directly template function reads object nt change", "d": "2/2012"}, {"body": "go done", "d": "2/2012"}, {"body": "params return unparsed querystring handle right", "d": "2/2012"}, {"body": "correct see info", "d": "2/2012"}, {"body": "could always see fetch current user state use jquery error callback long server framework returns relevant http error code", "d": "2/2012"}, {"body": "manually nt think start history first know run routes nt valid logged", "d": "2/2012"}, {"body": "yes two different routes see eg information", "d": "2/2012"}, {"body": "see thanks", "d": "2/2012"}, {"body": "backbone event provide index model added code yield", "d": "2/2012"}, {"body": "use index successfully add views cases trying understand using index attribute returned eventhandlers let thought experiment javascript var model backbonemodelextend initialize function options thison change function model options consolelog model change model options thison change title function model newtitle options consolelog model change title model newtitle options thison add function model collection options consolelog model add model collection options optionsindex thison remove function model collection options consolelog model remove model collection options optionsindex var collection backbonecollectionextend var collection new collection collectionadd id title added index collectionadd id title added index collectionadd id title added index collectionremove run eventhandlers bound events respective model collection fire return attribute fire reset event ca nt index resetting collection let forget reset return eventhandler collection sorted according current comparator function short right order nt need index would need get index reset eventhandler could use get", "d": "2/2012"}, {"body": "thank going code latest release seeing among many features bug fixes added", "d": "2/2012"}, {"body": "somehow event wondering bug feature since see change log mentions", "d": "12/2012"}, {"body": "legnaleurc added change log", "d": "12/2012"}, {"body": "unit testing stub global well actually handy backbone tests stub ajax reason", "d": "2/2012"}, {"body": "braddunbar got one right stub like", "d": "2/2012"}, {"body": "advantage locally scoped function delegates also run tests server side node globals nt work way client vs server feb pm jeremy ashkenas wrote braddunbar got one right stub like whatever reply email directly view github jeffrey lage adams st apt hoboken nj email jefflage mecom iphone", "d": "2/2012"}, {"body": "jefflage tests need dom anyway sounds like use something like grunt run tests stubbed dom via phantomjs also certainly define method base view class nt seem like something majority backbone users need", "d": "2/2012"}, {"body": "nt actually need dom ever interacting dom via jquery fact even behind jquery test point view kinda irrelevant could define method would cleaner delegated domlibrary provided called setdomlibrary feb pm brad dunbar wrote jefflage tests need dom anyway sounds like use something like grunt run tests stubbed dom via phantomjs also certainly define method base view class nt seem like something majority backbone users need reply email directly view github jeffrey lage adams st apt hoboken nj email jefflage mecom iphone", "d": "2/2012"}, {"body": "purposefully ideally urls never change although code might access generate addition backbone supports routing arbitrary regexes ca nt reversed fashion", "d": "2/2012"}, {"body": "thanks quick response explanation jashkenas", "d": "2/2012"}, {"body": "yes wrong place discussion supposed occur feature requests bugs", "d": "2/2012"}, {"body": "google group however fantastic place discuss taken liberty posting topic appear shortly approved", "d": "2/2012"}, {"body": "topic posted", "d": "2/2012"}, {"body": "using backbone get changed since version version using", "d": "2/2012"}, {"body": "yes right using checked seems work fine", "d": "2/2012"}, {"body": "see compare optionsindex collectionlength still feel like state connection add event collection", "d": "2/2012"}, {"body": "would mind providing specifics nature problem correct semantics changed several concerns well way states reasons change think good hopefully address sides issue", "d": "2/2012"}, {"body": "effectively need optionsindex anyhow situation collection view collection collection reads list items add server adds bunch sync call bound add events function looked length models array determine whether set last element collection selected state something view add callback collectionlength incrementing add resulting total length collection feels wrong inasmuch serial callback add bulk callback one added easy enough fix intuitive feeling", "d": "2/2012"}, {"body": "taking closer look several bugs nested events instance adding removing another model events cause models skipped index range errors sure reconcile type problem seems reporting index adding one sort operation odds", "d": "2/2012"}, {"body": "braddunbar particular issues addressed past month still impasse push comes shove nt think need religious able handle every possible recursive pattern", "d": "3/2012"}, {"body": "nt able resolve still sure address inclined agree handling recursive cases nt necessarily desirable", "d": "3/2012"}, {"body": "alright given value solves particular ticket let leave entertain pull requests anyone use cases combinations listed", "d": "3/2012"}, {"body": "backbonejs underscorejs", "d": "2/2012"}, {"body": "believe issue similar though identical believe problems addressed", "d": "2/2012"}, {"body": "braddunbar think making faq tag issues like likely keep coming", "d": "2/2012"}, {"body": "thank much braddunbar commit solved whole problem", "d": "2/2012"}, {"body": "wookiehangover sure great deal complaints heard regarding originate dependence undocumented behavior eg setting attribute original value silent set fires think notes upgrade notes likely appropriate however assuming actually bugs change documented behavior rather stricter enforcement existing behavior", "d": "2/2012"}, {"body": "behavior correct allowed override general routes specific ones take priority reverse order add good go", "d": "2/2012"}, {"body": "hi jashkenas yep realized tested reversing order writing still ca nt get working regardless route order something spooky going", "d": "2/2012"}, {"body": "nothing spooky may reverse order expect correct specific routes go top handers array first one matches wins", "d": "2/2012"}, {"body": "hi ok fact works great browser regardless route order manually invoke using occurs amp", "d": "2/2012"}, {"body": "huh let try add test case test suite reopening bug", "d": "2/2012"}, {"body": "jashkenas added test coverage let know looks like looking ignore first commit one look theindustry seems like way make test case fail reorder routes lessspecific route first like perhaps issue binding route events like test case", "d": "2/2012"}, {"body": "seems like way make test case fail reorder routes lessspecific route first case bug supposed work", "d": "2/2012"}, {"body": "jashkenas yep seems work expected worth pull req additional coverage", "d": "2/2012"}, {"body": "like testing iterating array order iterates array order", "d": "2/2012"}, {"body": "testing iterating array order iterates array order true gt lt think useful coverage future changes route precedence demonstration test suite route order intended work", "d": "2/2012"}, {"body": "testing iterating array order iterates array order except routes defined object literal array assurance keys come back order put see instance", "d": "4/2013"}, {"body": "benanhalt practice eg major browsers kept order defined unless keys numeric would nt case routes see info", "d": "4/2013"}, {"body": "great example sites use jammit unminified js source also available gather links", "d": "2/2012"}, {"body": "used jammit nt realize flag existed aside brute force think practical way start", "d": "2/2012"}, {"body": "nope", "d": "2/2012"}, {"body": "theindustry fwiw might want take look route testing discussion", "d": "2/2012"}, {"body": "hi already seen unfortunately nt make much sense still think way important able test certain routes decoupling assigned method seems hard extract routes noninvoked router tried override routing methods instead var self thisrouter new approutersmyrouter would say would appropriate really need overwrite routing methods allow testing", "d": "2/2012"}, {"body": "brainstormed clearly doens nt work way stubmock router methods prevent invoking logic performing unit testing", "d": "2/2012"}, {"body": "think would work javascript var myrouter backbonerouterextend routes foo function var mystub myrouterextend foo function nothing set stub data use testing", "d": "2/2012"}, {"body": "definitely simple solution looking many thanks help guys", "d": "2/2012"}, {"body": "closing", "d": "2/2012"}, {"body": "well since using minified backbone really clue error might however kind error yesterday mentioning forgot include jquery backbone", "d": "2/2012"}, {"body": "sure problem seems working", "d": "2/2012"}, {"body": "hi kenn assume since using pattern already tags defined somewhere solution fairly simple giving tags attribute setting attribute create view fits javascript var new windowsomeview el var new windowsomeview el though solution nt scale tens upon hundreds lists code becomes management nightmare might recommend taking another approach make solving problem tad simpler consider views collection view view individual list item collection view attribute individual view seeing going admit tested following code written top head heavily reoccurring pattern backbone applications coffeescript class windowlistitemview extends backboneview tagname li classname tab events click child activate initialize options gt modelon change render render gt elempty html viewrender el class windowlistview extends backboneview tagname ul classname tabs initialize options gt collectionon reset onaddall collectionon add onaddone onaddall collection options gt collectioneach onaddone collection options onaddone model collection options gt view new listitemview model model elappend viewrender el basically delegating list view manages list items update collection update whole view update individual model views also automatically rerender thanks backbone evented structure hope helps", "d": "2/2012"}, {"body": "actually wanted list items clickable wrapped content child div hack would nice feature though", "d": "2/2012"}, {"body": "looks like misunderstood work read code delegateevents method show possible", "d": "2/2012"}, {"body": "ah thank guys worked pattern vincentbriglia presented gives impression could get backbone liking", "d": "2/2012"}, {"body": "see previous tickets deep objects discussion backbone intended work shallow attributes semantics deep equality identity well defined javascript traditional databases contain flat lists attributes going beyond point would require us invent jsonpath notation like dots direction backbone nt head", "d": "2/2012"}, {"body": "good catch addressed", "d": "2/2012"}, {"body": "duplicate", "d": "2/2012"}, {"body": "backbone tries minimal amount events fires default performance reasons although unlistened events quite lightweight avoid cluttering api like fire event models feel free fire one add models extending backbone", "d": "2/2012"}, {"body": "curious well ca nt seem find discussion fired success callback provided also reason implement promise returned", "d": "2/2012"}, {"body": "behavior intentional idea use specific success callback override default evented behavior always trigger event within callback like reverse true said certainly change yall think compelling use cases way around finally artsy launches general public hope submit backbone homepage", "d": "2/2012"}, {"body": "cool cool makes enough sense someone else reopen feel strongly enough way around also happy submit artsy backbone homepage open general public", "d": "2/2012"}, {"body": "think always triggering event would less confusing nt event orthogonal success callback perhaps silent property options argument could used suppress event required", "d": "2/2012"}, {"body": "nt permission reopen issue love add comment way app works want bind sync event occasional provide success callback thanks", "d": "3/2012"}, {"body": "hi khiltd reason error nt caught executed try block deferred request complete several options making work override check data override check data", "d": "2/2012"}, {"body": "makes perfect sense technically argue great design choice forces error checking extremely unnatural location one going remember two weeks later ca nt simply refrain inserting bothersome object better yet invoke error callback", "d": "2/2012"}, {"body": "controversy desired behavior case starters check amp", "d": "2/2012"}, {"body": "ran thing adding array models like collections unique problematic adding items without overriding add method anyway unique collections nice failed silently duplicate", "d": "2/2012"}, {"body": "looks like set visavis ticket duplicate model additions noop master", "d": "3/2012"}, {"body": "believe fixed would mind checking latest master make sure", "d": "2/2012"}, {"body": "actually seeing latest well even change happens also copy url hash open new tab paste go", "d": "3/2012"}, {"body": "thanks checking take another look", "d": "3/2012"}, {"body": "tried reproduce page gist root repo appears work correctly one x produced get different results submit reduced test case", "d": "3/2012"}, {"body": "yep works fine", "d": "3/2012"}, {"body": "using latest version underscorejs added function backbone depends", "d": "2/2012"}, {"body": "thanks braddunbar problem", "d": "2/2012"}, {"body": "sure broken line two reality fine", "d": "2/2012"}, {"body": "reality would fine want make sure never work", "d": "2/2012"}, {"body": "well works better solution post", "d": "2/2012"}, {"body": "khiltd thanks pointing certainly could use work come better solution please submit pull request would love", "d": "2/2012"}, {"body": "hi fact run issue issue jquery mobile considers navigation embedded page use technique monkey patch jquery mobile following way jsjquerymobilenavigationjs jquery mobile checks embedded page like removing second condition checking embedded page allow backbone handle page transition nt gotten around submitting patch jquery mobile hopefully soon though hope helps note clear disallow jquery mobile embedded pages", "d": "2/2012"}, {"body": "thanks sharing probaby isembeddedpage checks something like inside href", "d": "2/2012"}, {"body": "something like yes", "d": "2/2012"}, {"body": "ok thanks reference created issue", "d": "2/2012"}, {"body": "note tried instead works", "d": "2/2012"}, {"body": "every set event default trigger event model would need silent every set unset example get perhaps could extend backbonemodel model base class following takes option parameter new model instantiated determine whether silent always true hijack backbonemodelset function new base class check instantiation option potentially always set silent true set unset calling super bonus option hijacked backbonemodelset function unset attributes first since title issue implies looking thoughts", "d": "2/2012"}, {"body": "bialecki see every issue raised past two weeks information repurposed silent option completely different functionality really like idea compat model compatibility project uses old form silent functionality actually works way previous way module would updated along backbone rather whole extra fork", "d": "2/2012"}, {"body": "contains pull request simple replication old way silent used work well gist extended model version suggested", "d": "2/2012"}, {"body": "bialecki really use methods suggested change documentation manually trigger change event change attribute event attribute changed passing silent true set function order aggregate rapid changes model want call modelchange finished behavior mention design new backbone model attributes meant fire events changed nt want notified events nt observe", "d": "2/2012"}, {"body": "thanks feedback guys know intentional behavior turns issue issue resolved think used behavior mentioned js frameworks yui comes mind passing model setter caused value set nt notify listeners obviously backbone may good reason go different direction nt know request belongs nothing docs want use option hard time thinking situation want use use cases demonstrating use somewhere", "d": "2/2012"}, {"body": "bialecki right believe bit loaded term backbone clarification documentation probably order docs change hint nt really explain reasons using", "d": "2/2012"}, {"body": "test backbone tell us still seeing issue", "d": "2/2012"}, {"body": "issue reported experienced", "d": "2/2012"}, {"body": "bug think line since call loadurl frag expects fragment rootfragment strip root prepend also keep using indexof make sure keep mind indexof returns string found indexof evaluates string starts", "d": "2/2012"}, {"body": "sure relevant defining history backbonehistorystart pushstate true root realize setting root nt necessary app structure changed since reporting bug sure fixes original issue defining empty root seems effect routes possibly related indexof", "d": "2/2012"}, {"body": "sure state reproducing bug certainly ca nt reproduce master feel free send us patch test let us reproduce problem still trouble", "d": "3/2012"}, {"body": "jashkenas ran bug searching found tested solution commenting line fix problem way found problem looking backbonehistoryfragment wanted change url change page user switch item working rebuild route ran yielded array like user clicked change different product code produced hope helps reproduce bug please let know need information thanks", "d": "5/2012"}, {"body": "kept testing returned everything backbone stock created code solves issue url chunk code properly handles initial backbonehistoryfragment leading slash hope helps", "d": "5/2012"}, {"body": "seems reasonable addressed", "d": "2/2012"}, {"body": "expecting handler never called value called next invocation expected result think skipping change handler altogether greatly reduces utility", "d": "2/2012"}, {"body": "expecting first handler never fires change value attribute set silently", "d": "2/2012"}, {"body": "believe read another ticket silent true nt many people expect thought silent true would change value fire event read ticket silent true like set value let even model think anything changed value property different model nt think actually changed set nonsilently difference testvalue noticed therefore change event fires well see find ticket", "d": "2/2012"}, {"body": "basically silent absolutely nothing since latest changes backbone hope emulate previous way things implemented use custom triggers use change events got", "d": "2/2012"}, {"body": "change made collection dynamically set attribute others initialization models created although use cases ways change deemed correct collection fully initialized receives first model hopefully fix code writing", "d": "2/2012"}, {"body": "would open adding new ready event collection fully initialized models calculations outside collection initialize quirky collection longer selfsufficient", "d": "2/2012"}, {"body": "would open adding new ready event collection fully initialized models firstly evented thing control create collection twoliner nt float boat create method", "d": "2/2012"}, {"body": "yeah right thinking eventworthy situation ugh ok suppose write whole extra line code trigger calculations thanks quick response", "d": "2/2012"}, {"body": "since version view property changelog two new properties views el cached jquery zepto reference view element setelement used instead manually setting view el set viewel view el correctly well redelegating events new dom element", "d": "2/2012"}, {"body": "ah nt know thanks clarification", "d": "2/2012"}, {"body": "thanks bug report correct bug addressing today update issue finished", "d": "2/2012"}, {"body": "also confirmed pinpointed fixed add tests asap", "d": "2/2012"}, {"body": "fyi bug result issue", "d": "2/2012"}, {"body": "braddunbar tomasztunik fix look", "d": "2/2012"}, {"body": "jashkenas fix immediate issue event fire subsequent changes either", "d": "2/2012"}, {"body": "line causing method silencing change maybe fix delaying changes change event propagation next browser event loop change event would nt delete silenced changes happened current change event question silenced changes happen given change event propagation taken account current change event deferred next tick shall fix pull work like add tests braddunbar case", "d": "2/2012"}, {"body": "ideally want avoid possible maintain synchronous logic", "d": "2/2012"}, {"body": "tried example braddunbar version mirrors behavior fix want modify behavior change w setting attributes silently edit fix example", "d": "2/2012"}, {"body": "hmm damn tricky since use without always trigger change end silenced inside change x would end trigger change anyway would check changed attributes without using modelchange point changed would empty case like issue started discussion could still stop infinite loop setting attr silent true end whole change propagation would called would break silent behavior way employ new role stoppropagation submitting new patch move triggering change attribute morechanges loop avoid change silenced attribute wiped", "d": "2/2012"}, {"body": "actually something nt pointed basically unsilenced set acts change well triggers change attr silenced attributes way multiple changes attribute one change propagation trigger change attribute final value", "d": "2/2012"}, {"body": "hswolff right behavior however think utility event greatly decreased called consistently use getting notified changes", "d": "2/2012"}, {"body": "braddunbar someone wants set attribute silently want included set changed attributes later point nt know answer question putting forward another question attribute set silently behave directly modifying attributes object maintain setter magic case example magic retained", "d": "2/2012"}, {"body": "someone wants set attribute silently want included set changed attributes later point nt know answer question putting forward yes primary use case silent changes", "d": "2/2012"}, {"body": "jashkenas guess question apply well events think yes great deal thinking nested changes still unsure outcome cases instance attribute set set silently change event another change event last prevent", "d": "2/2012"}, {"body": "yes nested strange nt think way go nested terribly consequential long consistent think example give would leaving model state later called get", "d": "2/2012"}, {"body": "going along nested change issue noticed interesting behavior set attribute b silent change event another attribute try set attributes b silent false b still set silent true", "d": "2/2012"}, {"body": "stinkycheeseman thanks think addressed also great username stinky cheese man one favorite books kid", "d": "2/2012"}, {"body": "braddunbar haha thanks let know find anything else still favorite book p", "d": "2/2012"}, {"body": "endless loop wants fix forked file gives opportunity goes around circles opening losing windows", "d": "8/2012"}, {"body": "two approaches mention actually accomplishing two different things mutually exclusive first two code examples bind event handler event handling whether construction nt really make difference case last example uses events hash uses bind dom events triggered example never called however could trigger like note reference coffeescript class view extends backboneview events tick tock tock gt consolelog tock new view eltrigger tick documentation better job explaining though definitely check let us know unclear", "d": "2/2012"}, {"body": "curiosity instantiating twice mobile view something first instance viewport replaced another view user comes back first view getting double bindings", "d": "2/2012"}, {"body": "something like home view call different endpoints user logged event bindings login logout buttons views instantiated one rendered time login logout switch view different mode hope clear enough", "d": "2/2012"}, {"body": "still entirely clear views instantiated time bind preexisting element dom means double events nt really bug way events specifically event delegation works instantiate view preexisting element need specifically unbind events persist element node removed dom", "d": "2/2012"}, {"body": "well seemed like good idea instantiate views initialization bind root element dom render one according login mode replace elements rendering guess better way though comments", "d": "2/2012"}, {"body": "would instantiate views need view nt used need around taking memory potentially introducing side effects like seeing", "d": "2/2012"}, {"body": "tend use pattern javascript var view backboneviewextend el test events click test onclick onclick function event view new view viewrender instead tend use pattern exactly avoid zombie views result duplication events javascript var view backboneviewextend events click test onclick onclick function event view new view target append viewrender el location would use first pattern application chrome view instantiates gui javascript var application backboneviewextend el wrapper initialize function options thisrender document ready function windowapplication new application", "d": "2/2012"}, {"body": "ditto vincentbriglia said defining letting view generate element time well however want define clean events removing define method every corresponding every event example var myview backboneviewextend initialize function thismodelon change thisrender render function return destroy function thisremove thismodeloff change thisrender", "d": "2/2012"}, {"body": "thanks malandrew vincentbriglia really helps", "d": "2/2012"}, {"body": "event nt binding click el gt choose event model change gt render event", "d": "2/2012"}, {"body": "model change gt render event nt execute", "d": "2/2012"}, {"body": "nt look like choose method updates attributes model current view bound basic exercise change looking closer code might perhaps listening wrong event wrong object choose event updates choice collection nothing current views model assumption proper backbone pattern would recommend adding method collection like want get list currently highlighted table rows nt forget listen bind method collection change event might get bit without really knowing structured views much calculated guess", "d": "2/2012"}, {"body": "updating choice attribute list model also updates free attribute old choice item model new choice item model item chosen limited amount users hence free attribute causes item model change event execute added part list model problem although render functions item invite models exactly invite view nt rerender item model change executed work duplicate render method javascript windowlistm backbonemodelextend", "d": "2/2012"}, {"body": "ah get mean think following snippet give need note super property backbone exposes child parents prototype javascript invitev itemvextend template template invitetemplate html initialize function initializefn thisconstructorsuperinitializeapply arguments render function elhtml thistemplate thismodeltojson return", "d": "2/2012"}, {"body": "could see option created default behavior still remain imo", "d": "2/2012"}, {"body": "would want handle add events collection updating model would want change event fire instead see situations would valid behaviors throwaway views vs carefully managed views etc think flag would pretty swell", "d": "2/2012"}, {"body": "yes implemented something like addingremoving necessary instead replacing call soft reset nt support updating models certainly could handy", "d": "2/2012"}, {"body": "used custom extension exactly wunderkit well us one yes option rather default behavior edit hm wondering could implement kind sync behavior example fetch returns collection models gone changed added check vs models already exist also check models nt removed get removed collection well something think", "d": "2/2012"}, {"body": "used pull request checked whether snippet works backbone get track", "d": "2/2012"}, {"body": "dalyons pr awesome feature works like charm", "d": "2/2012"}, {"body": "glad entertain pull request smart resets already easy accomplish tools backbone gives etc furthermore deal number api choices right answer model present collection response delete model present response collection add work infinitescrollstyle collections fetching window models server", "d": "3/2012"}, {"body": "sorry version", "d": "2/2012"}, {"body": "hi nicholasf tried reproduce error seeing nt able observe results would mind posting code using glad debug", "d": "2/2012"}, {"body": "hi braddunbar try bit busy dig right perhaps ticket help someone else hits error", "d": "2/2012"}, {"body": "happening general javascript using backbonejs tried pass html element object jsonstringify modern browsers xmlserializer api turning html xml elements string prior json encoding", "d": "3/2012"}, {"body": "sounds like describing version backbone using", "d": "2/2012"}, {"body": "version", "d": "2/2012"}, {"body": "ok would mind posting reproducible test case", "d": "2/2012"}, {"body": "model thisspellcheck true thison change spellcheck function model color alert spellcheck change wo nt show thisset spellcheck false thisset spellcheck false goes silent", "d": "2/2012"}, {"body": "think want properties model eg tracked backbone fire change events following code appears work fine console", "d": "2/2012"}, {"body": "thanks braddunbar", "d": "2/2012"}, {"body": "great idea said foca need improvements eg happens urls mapped route method", "d": "2/2012"}, {"body": "besides problem multiple routes one url also problem reconstructing dynamic urls leads believe nt general solution problem could become backbonejs feature besides get impression tying parts app back hrefs corresponding router methods antipattern feel really dirty leads believe something best kept minimum facilitating probably hurt help", "d": "2/2012"}, {"body": "malandrew valid point however referring urls continue happen long keep using reference stuff applications nt follow traditional model though ie ruby frameworks something along lines urlfor controller action end day since reference may also change going put example expressjs found kind funny since says supported two methods applookup appmatch sound quite interesting work way around proposed urlfor though may get something jashkenas tbranyen addyosmani derickbailey think think worth", "d": "2/2012"}, {"body": "tend agree w malandrew problems difficulty would create doubt solution could flexible would fit backbone philosophy least without becoming performance drain fwiw seems benefit fraction runtime performance penalty using simple objects cache strings string replace functions js var personroutes list persons show persons id edit persons idedit var getroute function obj route routedefinitions return routedefinitions route replace id objid var person new model id var route getroute person edit personroutes gt top head something simple would work less overhead proposed ticket originally would also flexible could specify arbitrary number routes want given object type could take add additional bits replace optimize regex etc", "d": "2/2012"}, {"body": "urls ca nt really go away though apps users may want bookmark certain states application need coherent urls example means need pass around urls way point need change something happiest moment need grep around source urls change one one centralized point refer urls important imho implementation certainly contrived current needs never even thought multiple urls given route yet one solution keep names urls apart routes would complicate syntax nt like still maybe something like javascript app backbonerouterextend routes search q search search q filter search filteredsearch var app new app appurlfor search blah gt searchblah appurlfor filteredsearch blah gt thoughts", "d": "2/2012"}, {"body": "nt think necessarily lose bookmarks visit route still add bookmark page way backbone currently works lose ability right click link choose add bookmark link would bet bookmark occurs viewing actual state right clicking link may lost without urls ability app crawled google another search engine typically use tags something meant crawledlinkable however may still generate bookmarkable state resource application state want bookmarkable may try putting function model returns url state displays object time may even require extra work since url view likely mirror restful resource gt question ask implementing links used humans machines nt think attributes dynamic pages like search params really desirable bookmarkable navigatorlocation search params really link since meant crawled like derickbailey approach", "d": "2/2012"}, {"body": "said bookmarkable thinking copy paste current url paste chat something rightclick add bookmark though bad said definitely dig derickbailey approach", "d": "2/2012"}, {"body": "add bit discussion split url path part everything left search part everything right reserve path address specific resource put state search part router methods take care serving correct resource use params search part set application state cases resource one object intersection two objects example two different resources intersection math john many cases also used display resource intersection john math john math homework test scores attendance etc one resources lie intersection could url necessary may want consider getting path part url resource model collection applicable application state search part separately", "d": "2/2012"}, {"body": "afraid ca nt possibly add feature simple reason support routing arbitrary regexes obvious way given data reverse string regex could matched nice pattern include urls urltemplates api json example another nice pattern models functions easily tell appropriate url different representations model example", "d": "2/2012"}, {"body": "trigger change perspective model start value end value change occurred yes change", "d": "2/2012"}, {"body": "hi jeffwatts thanks reporting since new value undefined event fired information also update upgrade notes backbonejsorg help sorry inconvenience", "d": "2/2012"}, {"body": "seems little strange undefined beginning end clearly point time undefined call anything else queries state model perspective model equal value undefined change state model different state model still change nt like saying silent changes alter state model seems clearly untrue seems like saying state model tied firing change event rather actual state model attributes reasoning behind first glance seems backwards", "d": "2/2012"}, {"body": "guess view always simply means notify listeners perspective means something much broader find inconsistent little strange seems like model attributes define model state whether notification sent listeners understand firing change fundamental keeping model internal state consistent probably work around", "d": "2/2012"}, {"body": "point want model consider changed nt use changes silent changes way fiddling model state perhaps need temporarily perhaps changing things rapidly without firing change events means perspective rest app state change occurred go back start changes need change app thought silent changes started", "d": "2/2012"}, {"body": "correct behavior see", "d": "2/2012"}, {"body": "behaviour least mentioned change log upgrading notes clearly fundamental logic change nt mentioned whatsoever", "d": "2/2012"}, {"body": "robinduckett right intended think correct behavior obviously underestimated impact change submit patch documentation update shortly thanks taking time let us know", "d": "2/2012"}, {"body": "thanks fix code", "d": "2/2012"}, {"body": "would possible submit failing test case patch pull request afraid current extra decodeuricomponent necessary browsers serious bugs checking documentlocation return predecoded url fragment browsers nt make sure fix works firefox webkit sending", "d": "2/2012"}, {"body": "sent pull request fix", "d": "2/2012"}, {"body": "tested safari chrome firefox", "d": "2/2012"}, {"body": "thanks closing issue favor pull request test documentcloud get chance", "d": "2/2012"}, {"body": "trying fix need extra testing", "d": "2/2012"}, {"body": "yep certainly way force event model describing definitely nt change event perhaps want firing search event instead", "d": "2/2012"}, {"body": "exact request see closed wondering trigger really want means flow would nt think nice much looking much better nt right change event really change set event maybe every set always trigger set someproperty event trigger change someproperty event something really changed force property would really good addition point view therefore suggest reopening feature request", "d": "2/2012"}, {"body": "second would really handy parameterize setter operation setting intention reliably recognized event regardless whether underlying value changed result", "d": "1/2013"}, {"body": "agree paul flow exactly elegant", "d": "6/2014"}, {"body": "whole point rendering based data data nt changed nt need rerender would application nt set way want listening changes instead rerender ui scratch forcing event change occurred would foolish thing backbone", "d": "6/2014"}, {"body": "would nt write need know whether model set valid data set happened already match data model application member loaded login application requires able ship products need make sure real information account thus walk steps verify data ux chosen one button design advances step eg first namelast name section address section phone number section etc model filled piecemeal due one aggregate endpoint member data thus multiple views map one model model info collected steps confirmation step actually sends entire dataset backend chose control transitions steps listening change event custom event overriding set whose purpose prevent ui locking user satisfied existing data opts click next button without changing model requesting feature added something needed address purposes thanks making great library public consume looks like coffee script", "d": "6/2015"}, {"body": "thanks extra information problem prototype replacing version causes underscore believe incorrectly version native version prototype version handle operator way underscore causing problem fix including underscore prototype patching prototype implementation deal operator recommend former", "d": "2/2012"}, {"body": "hi davisre thanks report believe addressed please let us know still issues backbone", "d": "2/2012"}, {"body": "ah see patches great thanks", "d": "2/2012"}, {"body": "pull request adds functionality", "d": "2/2012"}, {"body": "repeat without concrete use case going wontfix previous ticket allows set backbone use object dom library switching dependency runtime middle app lifecycle break views routers afraid nt see point", "d": "2/2012"}, {"body": "context said want whichever pull request ends driven someone real project real library mind otherwise usually end implementation nt actually work sure got assumption nt real project mind clarity three real projects currently maintain modified version backbonejs issue pull request works nt like implementation break views routers done middle lifecycle work using right beginning lifecycle nt problem see middle would problematic nt interest behavior fine real use case", "d": "2/2012"}, {"body": "great love hear version jquery want use nt value ca nt set load backbone", "d": "2/2012"}, {"body": "excellent apologies explicit enough earlier use case two versions jquery page one want use backbone older version jquery code using without scoping set loading backbonejs need careful setting back loading rest code easier modify vendored backbonejs version use rather careful load orders would easier able set library dynamically application code begins use backbone rather load time", "d": "2/2012"}, {"body": "hey thanks explaining realworld use case almost always ever looking patch merged make", "d": "2/2012"}, {"body": "real world case amd convince ya hehe", "d": "2/2012"}, {"body": "ha ha actually exactly quote ever infallible wycats pm wycats amd large unnecessary dependency pm wycats nt need asynchronous loading level complexity ever pm wycats amd people admit tell use builder pm wycats cut middleman nt add complexity projects going use builder pm wycats oh shit think probably started something", "d": "2/2012"}, {"body": "shame two best mvc libraries take stance makes lot assumptions level complexity users applications well users would like share code across projects etc know beating dead horse bow thank backbone unlike emberjs reasonably patchable amd seems using patched version forever", "d": "2/2012"}, {"body": "thanks jashkenas", "d": "2/2012"}, {"body": "afraid internet explorer bugs allow delegate events ie use regular jquery bind instead", "d": "2/2012"}, {"body": "thought got attention actually works ie development version", "d": "2/2012"}, {"body": "sorry way events designed remove event already fired model destroyed model removed collection collection longer receives events model want get event destroy listen model instead", "d": "2/2012"}, {"body": "handy listen models instead collection little strange collection synchronization goes without event ok learn live thanks", "d": "2/2012"}, {"body": "understand reasoning truly awkward lot orchestration necessary may immediately apparent create sync listener models collection listen add collection create new listener added model listen remove collection call stoplistening removed model prevent memory leaks remove going fire immediately would nt get sync event guess keep cache removed models every time sync event fires check cache remove cache handle sync event stoplistening", "d": "7/2015"}, {"body": "posabsolute function invoke dom node using parens like", "d": "2/2012"}, {"body": "lol im idiot removed el put setelement sorry polluted issue tracker yet coffee morning", "d": "2/2012"}, {"body": "impractical change perhaps warning appropriate chapter", "d": "2/2012"}, {"body": "hi reinierkip thanks taking time write able reproduce issue seeing fiddle things seem working intended extended modified backbone way version backbone underscore using", "d": "2/2012"}, {"body": "pasted example console backbonejsorg worked fine printing still problem please open ticket reproducible test case", "d": "2/2012"}, {"body": "could provide test case something similar unable reproduce", "d": "2/2012"}, {"body": "confirm using latest version underscore method added", "d": "2/2012"}, {"body": "thanks lot bad", "d": "2/2012"}, {"body": "right different definitely intended behavior see context step value may changed current value changed value since last fired", "d": "2/2012"}, {"body": "generally combination implementation abstraction library like amplifyjs handle basic mechanics persisting local storage unfortunately wo nt ever see simple nested model implementation anywhere thing get basic getset logic working happy realize want observers able register change notifications top level object avoid ridiculously tight coupling spend ton time event proxying system relays messages child objects way chain turning everything tree good luck fighting cyclical references parent objects notice nt work anymore strange way implemented rewrite want generic validator handle child objects fight encounter bunch crazy bugs first time try something nt work backbone actively prevents even trying use purpose oh yeah shallow copies end big mess references think going save eventually override end full special cases want scream start lord help like change notification reliably inform specific fields actually changed nt validatetransmit save time done replaced every line backbone code come hold terribly cynical belief people tell silly realizing easy adding nested model support framework probably opinions colored fact never gone far beyond first step making getset work call liar still refuse produce simple example exists fairy tales legends", "d": "2/2012"}, {"body": "well thoroughly depressed amplifyjs advantages backbonelocalstoragejs using moment seems number live applications using backbone must possible problem must solved different groups set aside request eventually supporting tasks within tasks limit example one level nesting many projects contain many tasks task one project ca nt complicated course many live backbone apps backed online storage localstorage must possible make localstorage mimic sql db whatever live apps backed frustrating part app working fine albeit persistance proof concept ui design trying add basic persistance absolutely killing using jquery data command keep required references like array children tasks link given tasks parent etc getting messy keeping info dom working thought make much easier actual mvc pattern could keep objects model layer get advantages separation model code view code automatic binding model view persistance truthfully losing hair fast pace right broken perfectly working app demoing client get persistance ways much easier stuff old fashioned way model logic php layer server nt case issues exist different layer tried simple example faq see use collections throwing verified example work model create id initialized way create nested collection messages id way associate url collection based id point sure would way around like waiting mailbox model save first going create collection written proposal nt work suppose one perils asynchronous design wish though since framework already dependent events written example use events show one would initialize child collection successful save parent object would helpful", "d": "2/2012"}, {"body": "hey fellas fun meecect looking get immediate help particular app better luck irc freenode documentcloud mailing list still let leave ticket open place folks vent", "d": "2/2012"}, {"body": "even weirder pass silent true set behaves like would expect", "d": "2/2012"}, {"body": "hi douglasj main distinction tracks previous attributes change see gist passing setting handler event observe behavior desire help", "d": "2/2012"}, {"body": "hmmm guess source issue custom sync maps update database hoping issue update table set fieldnewvalue values actually changed rather blasting whole state database silent true indeed make backbone behave like would expect use case seems easy forget adding new code forget sync function sees cells changed nt update anything thanks clearing currently designed behaviour think slightly offnonintuitive server maybe crazy specific case following changed true update changed fields nothing flagged changed print log remind team something might amiss check silent true update whole row thanks", "d": "2/2012"}, {"body": "think still get behavior want without think", "d": "2/2012"}, {"body": "yes would possible implementation removes save logic backbonesync places handlers server code places new model fetch set save flow couldwould exist requiring place would nt work codebaseimplementation imagine could work well users though already tested implementation last comment pretty happy log message enough stop forgetful devs included including silent thanks time", "d": "2/2012"}, {"body": "hey salomvary check discusses issue great detail feel like api seesaw remain dom node change access cached jquery object noticed change behavior suit needs simply setting property hand", "d": "2/2012"}, {"body": "nope perspective model state started still change occurred", "d": "2/2012"}, {"body": "yes guess right weird corner case previous logic worked well record tt documented bug", "d": "2/2012"}, {"body": "agree simple use case could init blank invalid model write something like enable disable ui would handle javascript render function set initial state selftogglestate false toggle error triggered otherwise ie model validate thismodelbind function ev selftogglestate ev error", "d": "1/2012"}, {"body": "agree throwing error ideal way handle invalid user input data source likely cause invalid model error usual state affairs handled without throwing however difficult handle constructing model since one unable bind error handler model without reference throwing error better solution think also always handle using untrusted data construct model", "d": "1/2012"}, {"body": "work need initialize object valid hash always want javascript var mymodel backbonemodelextend validate function attributes attributesname return give name var model new mymodel game", "d": "1/2012"}, {"body": "pgherveou good point nt think", "d": "1/2012"}, {"body": "braddunbar nt think error handler needed model creation stating validation running automatically creation error thrown nt sufficient think evidence validation happen welldefined points controllable programmer", "d": "2/2012"}, {"body": "opinion broken maybe previous behavior nt ideal nt see problem approach taken release minimum would like see rollback validation strategy thought little better", "d": "2/2012"}, {"body": "sorry keep jumping thought something else validate function supposedly ensures entire model valid set single attribute time ca nt build information model one piece time validate validates whole model every set", "d": "2/2012"}, {"body": "workaround would transfer actual validate validateall could call validate like javascript validateall function thisvalidate thisattributes clone use validate attribute change validation framework expecting", "d": "2/2012"}, {"body": "would nt say opinion broken plainly ridiculous feature improves nothing anyone much like caseinsensitive filesystem innovations even want like validation shoved throat matter fired way early well even populated ed collection sure sounds neat paper validation method needs inspect value another attribute make decision whether something valid sol object nt even built yet way possibly bypass validation unsetting resetting object validation method stupid stupid stupid", "d": "2/2012"}, {"body": "agree change may force us look methods validation", "d": "2/2012"}, {"body": "agreed validation completely broken ca nt event create new model form passing bunch invalid attributes collection create method along error handler one would expect error callback gets thrown nope get ca nt create invalid model error validation gets invalid arguments first time called tells backbone nt valid backbone decides throw error instead triggering callback missing something", "d": "2/2012"}, {"body": "case someone thinks concerns esoteric edge cases nt worth worrying concrete example backbone makes flatout impossible model none fields blank must match order valid enough save request object backend backend makes sane choice providing plain text password comes back blank never stored database never populated backbone wo nt let succeed required fields blank compromise force backend spit irrelevant nonsense work around requirement still screwed validation needs call yet populated method nt even invoked yet choice rename something else like pull fast one like make sure validation never runs model initialized stupid wanted front end frameworks nt charge maintaining referential integrity make wiring things easier", "d": "2/2012"}, {"body": "reverted behavior commit also adding function checking models whose attributes set silently note docs used assert things attribute want invariants", "d": "2/2012"}, {"body": "throwing error invalid model created considered silent update", "d": "2/2012"}, {"body": "silent update set", "d": "2/2012"}, {"body": "thanks j", "d": "2/2012"}, {"body": "thanks terryroe figuring stuff", "d": "2/2012"}, {"body": "one problem terryroe backbone fires validation even remaining ones might expected workaround call awkward opinion", "d": "2/2012"}, {"body": "vkovalskiy attrs undefined though correct also find operation reason nt work", "d": "2/2012"}, {"body": "braddunbar yes making call function got check validity backbone validation mechanics really good needed point library right find vague use box actually stuck writing custom validator functions fancy silent true time jashkenas probably could settle collaborative resolution clear validation rules could suit time", "d": "2/2012"}, {"body": "vkovalskiy thanks thanks pointing observed behavior wanted reverted jashkenas man gives us goodness", "d": "2/2012"}, {"body": "adding silent causes reset never validate models always passes silent", "d": "7/2012"}, {"body": "use catch importantly adding model collection twice indicates error application logic early error", "d": "2/2012"}, {"body": "trycatch never caught error wherever put believe error happened ajax request meaning error happens inside backbonecollection fetch code inside code ca nt really catch afaik also error happens special conditions multiple places app loading models time way catch would server keep track models sent clients recently guess keep error commented", "d": "2/2012"}, {"body": "trycatch nt work either following code demonstrates adding model collection twice indicates error application logic times nt feasible application logic never duplicated model would much better way silently ignore duplicates", "d": "4/2012"}, {"body": "abraham error nt thrown anymore", "d": "4/2012"}, {"body": "kyleamathews awesome thanks tip nt noticed yet", "d": "4/2012"}, {"body": "like check current state model available case nt really best suited validating html forms best suited validating state model like validate form think simple function would easier", "d": "1/2012"}, {"body": "thing using form validation works pretty good using backbonemodelbinding backbonevalidation plugins change pretty much makes impossible would definitely like specify validation twice", "d": "1/2012"}, {"body": "btw since validate effectively prevents invalid values set model nt see need validate attributes every time attributes changed always valid", "d": "1/2012"}, {"body": "agree bit problematic understand validate method intended validate model form reasons form validation validate model attributes one time example number set operations row mode first set invalid nt want continue following sets point anyway workaround pass silent true sets let save operation call validate function", "d": "8/2012"}, {"body": "actually yes exactly operation supposed work batch changes desired run later", "d": "8/2012"}, {"body": "yeah spent trying figure one thedersen using validation library attrs passed validate function represents attrs changed line passed attrs reason merged thisattributes comment occurring would nice thisvalidate called attributes passed ultimately leads dom getting modified every attributes thedersen validation lib wrote override backonevalidate function essentially justs comments attribute merge trick worried side effects passing silent true cause validation occur need validation occur goal perform client side validation nt make round trip server want validate single input user leaves changes field provide immediate feedback indicating entered data bad format etc eg dollar field user enters tacos nt want make round trip server instead prebusiness logic validation occur immediately ultimately need easy way figuring attributes invalid commit thedersen pointed longer gives us ability", "d": "8/2012"}, {"body": "jashkenas new take see comment regarding managed skim delta far looks like still validation attributes every without possibility skipping validation eg incrementally set model attrs saving change log validation occurs even silent changes change means method removed", "d": "12/2012"}, {"body": "jacobk actually topic discussion recently looks like validation actually going different find details see works cases using validate", "d": "12/2012"}, {"body": "tgriesser awesome surprised nt find recent issue topic", "d": "12/2012"}, {"body": "depends method use remove element dom use remove bindings lost however using detach remove bindings backbone provides remove easily add method detach", "d": "1/2012"}, {"body": "correct exactly supposed work temporarily set value silently change back original value perspective app change occurred", "d": "1/2012"}, {"body": "yes definitely bug either docs new release issue", "d": "1/2012"}, {"body": "think complex initially thought removing leading root fix problem seems break navigation routes get appended url box browser rather replaced right either normal navigation work initial page load work removing leading root path", "d": "1/2012"}, {"body": "thanks fix confirmed working case", "d": "1/2012"}, {"body": "hi bumped issue using stable upgrading version backbonejs master fixed however complaining current behavior brief concern starting backbonehistory follows works ok application landing page terminating slash per server side routing whenever want navigate different pagesviews within application use go landing view go confirmation page however ing landing page always sends url terminates slash concern obsessive compulsive one afraid want urls pointing landing page end terminating slashes iscanthere way configure suggested solutions would configuration option terminates slash path writes url ends slash vice versa path send url terminating slashes send url terminating slash emulating application configuration option node express framework quoting enable strict routing default foo foo treated router thanks hany", "d": "11/2012"}, {"body": "kerdany server respond trailing slash root ca nt think situation beneficial honestly given amount issues surrounding much rather keep things simple possible", "d": "11/2012"}, {"body": "wrapping head around figure reason change wraperror behavior far tell jquery zepto always returning xhr object first argument failed find code else wraperror used outside ajax response context could alter behavior leftover changes got removed means could pretty much revert method delete remove model function params", "d": "1/2012"}, {"body": "common mistake event easy know fired validation ajax call think standarized carefully probably use use something similar unified way could great also mention issue awesome pluggable storage system imagine define plugin simultaneously one model model saved places plugins websockets custom servers etc think", "d": "2/2012"}, {"body": "thanks tomas merged fix", "d": "2/2012"}, {"body": "nope correct every route single action nt want multiple functions called potentially undefined order url loaded", "d": "1/2012"}, {"body": "disagree example one screen one active router time", "d": "1/2012"}, {"body": "yes probably usually nt routes actual html pages would served server need help try irc channel quick responses mailing list slow ones", "d": "1/2012"}, {"body": "seems like new feature documented part next release", "d": "1/2012"}, {"body": "yes correct upgrade instructions describe exactly", "d": "1/2012"}, {"body": "thanks clarification nt able find commit added el", "d": "1/2012"}, {"body": "wondering", "d": "1/2012"}, {"body": "jashkenas mentioned plans version next backbone version", "d": "1/2012"}, {"body": "hoping tag push release week want upgrade documentcloudorg first production ensure unexpected wrinkles", "d": "1/2012"}, {"body": "hm could query params always passed last paramter route expected could handled user callback route wunderkitrouter instance listening route event somewhere else would always added well considered capturing named params splats", "d": "1/2012"}, {"body": "well yes would nice query parameters passed separate parameter route functions much issue trying decided separated plugin would nice though even backbone nt include param parsing code", "d": "1/2012"}, {"body": "aye would nt go far parsing anything though believe good idea break routing something like google analytics used mentioned maybe common one page apps imagine uses apart landing pages would also nice nt lost case part url wanted something would nt drop plugin imagine situation project production servers running nice nice campaign points landing pageview app suddenly nothing works adding tracking params nice would likely super annoying debug good entry least case someone stumbled problem future googling wrong hehe", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "interesting tempted add query parameters additional argument route function suggested end think backbone apps definitely query params app urls serverside url convention nt much useful place clientside routing nt supporting default want behavior easy enough implement hey presto", "d": "1/2012"}, {"body": "jashkenas shareable urls share state without query params putting everything url convenient hard handle optional params", "d": "1/2012"}, {"body": "usually want share state relevant content page initial example certainly even sharing heavily optional state think search queries often nicer share url based clean search syntax translate query params", "d": "1/2012"}, {"body": "think closing kinda ridiculous obnoxious one usecase led post upload want amazon redirect kindly enough adds bulshit parameters fact redirects therefore since closed go hack make happy", "d": "6/2012"}, {"body": "toots would like behavior ignore query parameters", "d": "6/2012"}, {"body": "something like way ignored need", "d": "6/2012"}, {"body": "would nt allowed match query params route strings case pushstate vs hashchange thing kind destroys idea pushstate query strings always part backbone route hashchange never parity internet explorer modern browsers would difficult impossible", "d": "6/2012"}, {"body": "matching query params route seems nonsensical first uris specified path get params taken second query params order specified would match ie compatibility hashchange vs pushstate admit nt know say without diving code would consider pr", "d": "6/2012"}, {"body": "query string matching less issue fact router ignore foobar query params setting ignore affect routing traditional applications websites indeed serialize parameter data query data acceptable routes eg parameters typically handledstripped server level modrewrite rails router etc backbone however default gets caught addition may appended many third party websites facebook instance choice accept route well rather argue semantics function query parameters propose everything url left end string ignored talk parsing later potentially add functions serialize data however compatible rest modern web parameters need ignorable without hack", "d": "6/2012"}, {"body": "huge least ignoring params problem cropped us well backbone code made production external job site started redirecting back us extra params way backbone failed difficult track unreasonable least throw error make debugging clear", "d": "6/2012"}, {"body": "go ignoring code set route fuzzy match many none query string parameters issue query string params added route inadvertently party oauth redirect", "d": "6/2012"}, {"body": "quite annoying facebook canvas apps add query strings redirects also app bookmarks left side feed page work around query strings ignored", "d": "6/2012"}, {"body": "moment use regex route purposefully ignores trailing query params", "d": "6/2012"}, {"body": "thanks jeremy explain regex route possibly document alternative backbonejsorg referring regex query string replace method martynsmith details first post", "d": "6/2012"}, {"body": "pain one part site used backbone broke dramaticly normal web query params added reopened people least made aware maybe mention manual", "d": "7/2012"}, {"body": "think behavior router route like resources id preview request url ex router execute preview preview still look url decide parse whatever router route like resources id querystring preview still execute preview query string extra parameter", "d": "8/2012"}, {"body": "ericjeedunn", "d": "8/2012"}, {"body": "jashkenas reopened open pull requests implementing behaviour described ericjeedunn", "d": "8/2012"}, {"body": "yep maybe incidental query param problem pretty damning clients add garbage query params similar things links", "d": "8/2012"}, {"body": "think ignoring search params altogether good thing foobar matches foobar conditionally ignoring based route pattern seems fraught problems happens load url search params hashchange browser also copy search string hash regular search changes one use transitioning back pushstate browser seems support query strings router must ignore hashchange browsers", "d": "8/2012"}, {"body": "something tacking query params onto urls hashes instance would become working patch moment", "d": "8/2012"}, {"body": "former exactly issue describing", "d": "8/2012"}, {"body": "taken quick stab major issue running already match getting passed case really sure resolve problem would change regex matching include pretty strong feeling going break existing code people field also issue precedence routes like one gets matched visit", "d": "8/2012"}, {"body": "approach trying trying route first query string intact query string removed runs problems listed", "d": "8/2012"}, {"body": "phleet cents think good guideline uri specs make regexp work way uri parser would expected function breaks existing code means people nt reasonable expectation matched routes therefore match likewise second example usually order matters programmer wants match list restrictive least restrictive expect library clever ought", "d": "8/2012"}, {"body": "phleet commit", "d": "9/2012"}, {"body": "reference wrong pull request instead commit", "d": "9/2012"}, {"body": "thanks chiming think folks correct mixing query strings backbone app usually undesirable sneak accidentally best thing us router always ignore cases app cares query use access current value", "d": "9/2012"}, {"body": "unless reading tests wrong may looks like already behavior backbone performing route checks always based either fragment transitions real url hashchangebased browser already ignore forward query string test anyone still running problems query strings master let know ideally send failing test case", "d": "9/2012"}, {"body": "jashkenas sorry slow response think indeed misreading tests possibly applying diff current master demonstrates failure diff diff git itestrouterjs wtestrouterjs index itestrouterjs wtestrouterjs document ready function optional item optionalitem splatargsend splat firstcomplex partrest complex abc thingx thing entity args query anything anything document ready function thisroute implicit implicit thing function thing thisthingarg thing counter function thiscount document ready function equal routertesting test query string function locationreplace backbonehistorycheckurl equal routerthingarg foo test query string function locationreplace backbonehistorycheckurl equal routerthingarg bar test routes simple function locationreplace backbonehistorycheckurl query string test passes query string test fails", "d": "10/2012"}, {"body": "test fail nt think valid query string hash looks like one ignoring query strings work correctly", "d": "10/2012"}, {"body": "braddunbar ah right nt think adequately reproduce test suite running file going write small application demonstrate problem live example problem see running latest backbone nt see change would fix anywhere changelog see source", "d": "10/2012"}, {"body": "believe relevant change missing example noticed fragment used backbone longer contains search query", "d": "10/2012"}, {"body": "braddunbar ah thanks right set test server took look far tell fixed fixed master hopefully go next release", "d": "10/2012"}, {"body": "also running backbone also bit service added query param backbone url shed light use triggers page even though backbone route something like problem correctly triggers serverside serves page matter url hit", "d": "10/2012"}, {"body": "krunkosaurus suggesting strip search string seems reasonable though bit worried breaking backward compatibility fairly certain people currently use query strings fragments", "d": "10/2012"}, {"body": "definitely would nt want change breaks current apps backboneroute option ignore params", "d": "10/2012"}, {"body": "think pick strategy stick enough options", "d": "10/2012"}, {"body": "fine ignoring might decision side fence people", "d": "10/2012"}, {"body": "vote favor opting bb router parse query strings similar manner plugin passing parsequery true would cause bb parse query strings would keep backwards compatibility know would love ability thoughts", "d": "10/2012"}, {"body": "hswolff nt think parsing search params business backbone get routing search parameters semantically modifiers probably nt used use route handlers concern orthogonal best left plugin", "d": "10/2012"}, {"body": "appears current behaviour broken assume route running pushstate enabled trigger route workaround create second route triggers callback passes search params testing today seems latest code master changes behaviour triggers first route called presumably stripping search parameters parsing url however called nt trigger need add second route passed search parameters additionally observed following whether decision made ignore search parameters completely seems current behaviour inconsistent best", "d": "10/2012"}, {"body": "markreid ignoring search parameters valid choice router needs properly ignore", "d": "11/2012"}, {"body": "causing big problem mailchimp email campaign drives traffic site mailchimp adds google analytics query string site aid ga tracking referrals query string adds end link site utmsourcepopsweepsnewmembers amp amp utmmediumemail trying drive traffic homepage site firing index route running bb", "d": "12/2012"}, {"body": "duro tried changes last saw fixed", "d": "12/2012"}, {"body": "caseywebdev api compatible going troubleshoot bunch issues edit far good", "d": "12/2012"}, {"body": "api largely new features test suite would try running", "d": "12/2012"}, {"body": "duro glad hear upgrade going well attempt answer changed master question change log gt", "d": "12/2012"}, {"body": "looking see drops query params gets url fragment windowlocation pass url historynavigate query params query params make causing route matching fail guess navigate trigger false call historyloadurl url without query params using view state like column table sorted fit including url", "d": "1/2013"}, {"body": "hey mclin takes fragment full url suppose could strip query string navigate certain necessary would mind expanding use case passing fragments query strings", "d": "1/2013"}, {"body": "hey braddunbar sure index view table google analytics style date range filter imagine table showing site pages total page views within date range date range stored query args emailed bookmarked page refreshed etc page load route handler gets date range query args sets collection calls click row table takes detail view row graph stuff detail view needs date range index view graph row click get clicked model set date range call get url including query string call instead calling could directly show detail view would duplicate code route handler shows detail view well couple controllers detail index views thanks listening trigger false historyloadurl workaround working fine worries end", "d": "1/2013"}, {"body": "mclin stripping query string history navigate would solve issue nt see immediate problem gate though would probably get opinions", "d": "1/2013"}, {"body": "yea exactly would solve issue think people would also run point try saving view state query args", "d": "1/2013"}, {"body": "mclin addressed give spin please let know nt solve issue", "d": "1/2013"}, {"body": "braddunbar point backbone completely disregards search parameters actually navigate", "d": "1/2013"}, {"body": "markreid correct", "d": "1/2013"}, {"body": "sure issue seem set correctly", "d": "1/2013"}, {"body": "trantorliu would mind posting example", "d": "1/2013"}, {"body": "wwwexmaplecom somehash qquery qquery somehash respectively backbone somehash qquery respectively nt read former comment morning think problem nt", "d": "1/2013"}, {"body": "trantorliu yes merged strip example provided", "d": "1/2013"}, {"body": "hey braddunbar almost still want historywindowlocation include query string strip matching routes historyloadurl compare server side query args nt affect route gets picked still browser url bar still accessible route handler see make diff super familiar github yet", "d": "1/2013"}, {"body": "maybe restating obvious since issue still open annoyingly broken decided chime way browsers work eg chrome url like xxx abc az recognize az windowlocationsearch formatted like gets lumped windowlocationhash good backbone router must designed urls always xxx az abc query first hash last windowlocationhash windowlocationsearch happy", "d": "1/2013"}, {"body": "ok thank nt use url parameters instead use hash parameters inspired google found google using something like yesterday using routes like match etc parse route functions stating issue wiki", "d": "1/2013"}, {"body": "think suggestion hash parameters great way go issue taken months using backbone find technique would possible add sentence main docs", "d": "6/2013"}, {"body": "come across issue even desired behavior query string nt part sent router callback", "d": "4/2015"}, {"body": "found querystring useful thing router callbacks", "d": "4/2015"}, {"body": "expecting optional parameter", "d": "4/2015"}, {"body": "example routes matching query parametres using route dealsoffers statusrejected passed listoffers", "d": "4/2015"}, {"body": "ah yes try instead get two arguments every time instead variable number", "d": "4/2015"}, {"body": "surly default functionality nt desired would want query string passed expecting id", "d": "4/2015"}, {"body": "well router certainly nt know expecting smiley gave function call two routes different number parameters also remove query string entirely overwriting", "d": "4/2015"}, {"body": "fixed thanks reporting", "d": "1/2012"}, {"body": "nt think baked methods need extra call could one could something like javascript var multielementview backboneviewextend constructor function var someotherview multielementviewextend elements b b var v new someotherview el foo consolelog velements b jquery objects", "d": "1/2012"}, {"body": "means time create new jquery object make sizzle dom search call usually using templating woudl nt even access dom view rendered need make much smarter cache jquery object first search anyways nt think nt part backbone need quick references elements define render initialize method imo", "d": "1/2012"}, {"body": "something similar thecloudlesssky suggested right created base view converts jquery selectors jquery objects extend views one spinejs something like think pretty useful thanks comments", "d": "1/2012"}, {"body": "one thing thecloudlesssky suggestion possible refer jquery reference object method since calling constructor constructor invokes wont contain jquery references yet", "d": "1/2012"}, {"body": "duplicate previous tickets take look see conversation subject nt something builtin backbone", "d": "1/2012"}, {"body": "afraid ca nt part point new change able optimize slicing list models single operation breaking individual functions previous would revert improvement hopefully better override able come perhaps wrap record ids models added removed beforehand proceed", "d": "1/2012"}, {"body": "ca nt well sounds dramatic enough alright optimization probably possible going quite tricky since far uncommon adding stuff nt yet nt even yet plain object afterwards", "d": "1/2012"}, {"body": "another idea override know new models coming finishes run recorded new ones", "d": "1/2012"}, {"body": "pauluithol able work around overriding calling object passed essentially renders call noop gives list added models let know solution nt work interested reasons", "d": "1/2012"}, {"body": "overlooked one look plays extensions backbone two major things basing hooking backbone handle either use default backbone behavior take control adding action let know surprised nt throw errors testing wunderkit vs master", "d": "1/2012"}, {"body": "thanks yes looking bit reluctant relying internal method danger eliminated give try looks like work pretty well", "d": "1/2012"}, {"body": "whoa fancy loading js main window iframe applying main window would desirable", "d": "1/2012"}, {"body": "short iframe sure code unaffected whatever happens window loads code whether conflicting versions jslibraries libraries crazy stuff like messing prototypes builtins especially desirable third party javascript providers covered depth lightningjs readme", "d": "1/2012"}, {"body": "looks like fairly invasive patch something still hard time finding use third party javascript one thing think would probably never want use loaded third party script advertisements widgets business monkeying url bar given want use probably thirdparty sure change making feel free course patch copy", "d": "1/2012"}, {"body": "neat love could add link documentation backbone wiki long planning keeping date also consider posting mailing list", "d": "1/2012"}, {"body": "ca nt guarantee date yet write automated build process updates ebooks sources periodically implemented eventually", "d": "1/2012"}, {"body": "looks like folks nt favorite features suggest take run source docs", "d": "1/2012"}, {"body": "looked emberjs docs ultimately found one feature thought might worthwhile discuss including backbone computed properties may nice addition desired occasional ability ride setter getter property perform calculation aside found basic philosophical approach emberjs backbone differed significantly making ember features incompatible backbone way things", "d": "1/2012"}, {"body": "yes computed properties great think best functions magic fauxvalues need additional fanciness nt really want deal caching invalidation want put logic directly function perhaps section documentation describes simple computed properties", "d": "1/2012"}, {"body": "think section docs detail backbone way common practices would helpful lot things done backbone nt immediately obvious first glance particularly issues opened could addressed common practices section detailing suggested backbone way feature", "d": "1/2012"}, {"body": "simple imagine using kvo plugin computed field interesting updating view either firstname lastname changed however change event automatically propagate custom field already requires extra code take care ember believe declare dependencies computed fields said think ember approach incorrect well believe computed fields view logic put view model instead keeping model model pure", "d": "1/2012"}, {"body": "simple make simple often simple simply listening view fine computed property otherwise listen work well", "d": "1/2012"}, {"body": "great rolling kvo however two plugings use backbonemodelbinding synapse", "d": "1/2012"}, {"body": "sorry fo intromission proposed thing pr time rejected suited plugin feature repeat said pr could bring light big spectrum actual plugins want code api proposal included like see feature analyzed stressed thrown away could big step forward ps sure verbs wrong please sorry eventually bad use english", "d": "1/2012"}, {"body": "nwhittaker thanks reporting believe addressed nt cause issues want patch current version backbone", "d": "1/2012"}, {"body": "fix apparently currently master go backbonejsorg next release", "d": "1/2012"}, {"body": "want extend jquery create specific backbone views feel free extend jquery create specific backbone views really change backbone proposed far make", "d": "2/2012"}, {"body": "sorry nt phrase clearly proposing backbone views automaticallyoptionally attached jquery available backbone implements glue code plugin definition part make work transparently found views nice way write jquery plugins want provide familiar api using adapter guess eg compare following javascript without glue code navtabs function options optionsel new tabs options glue code navtabs tabs options could done simple way attaching widgetbridge complex stuff", "d": "2/2012"}, {"body": "hi nagyv documentation backboneview constructor several special options passed attached directly view model collection el id classname tagname thing special passing options directly attached view ease access interested relevant source modelcollection completely observe events use data iterate models etc answer question", "d": "1/2012"}, {"body": "nagyv also docs happens initialization hope helps", "d": "1/2012"}, {"body": "yes thanks", "d": "1/2012"}, {"body": "also manipulations nogo called route initializing", "d": "1/2012"}, {"body": "seems pretty straightforward thanks krebbl", "d": "1/2012"}, {"body": "found bug clone method related issue solution", "d": "1/2012"}, {"body": "krebbl good catch addressed", "d": "1/2012"}, {"body": "point silent changes allowed twiddle internal state model temporarily without actually making change later attribute actually changes validation runs events emitted would nt make sense emit event making silent change", "d": "1/2012"}, {"body": "jeremy right however behavior makes possible initialize object invalid parameter later throws validate making valid changes see example var new person name ivan vashchenko age undefined metojson object name ivan vashchenko age occupation farmer meon invalid function model error consolelog error child cid attributes object changing false previousattributes object changed mesave name alter ego person age negative false seems validation could useful initialization well", "d": "6/2013"}, {"body": "yes indeed malformed url responsible correctly encoding urls passing router", "d": "1/2012"}, {"body": "seems like still failing even encodeduri uri fat checkurl call segment calling thisgetfragment returns decoded uri trying decode checkurl call causing urierror uri malformed error reserved charaters pull requests check failing test fix", "d": "2/2012"}, {"body": "ping let know something wrong help way", "d": "2/2012"}, {"body": "thought early submitted pull request thisid thisidattribute normalized hood", "d": "1/2012"}, {"body": "hm interesting would willing elaborate link discussion somewhere sheds light thanks quick answer tbranyen", "d": "1/2012"}, {"body": "sure thing", "d": "1/2012"}, {"body": "unfortunately believe raising error made error message clear thanks ticket", "d": "1/2012"}, {"body": "call method", "d": "1/2012"}, {"body": "going say nt trigger error however thought trying realized nt really want trigger error model error case really belongs view", "d": "1/2012"}, {"body": "yes delete requests body url contain id model deleted", "d": "1/2012"}, {"body": "thanks reply understand works urlroot url ca nt call destroy method model collection mycollectionget id destroy nt work id url mycollectionget id save name newname works thanks", "d": "1/2012"}, {"body": "id url unless overridden function prevent", "d": "1/2012"}, {"body": "thanks lot undestrand know logic sorry mistake", "d": "1/2012"}, {"body": "yes need addressed patch reverted preferably", "d": "1/2012"}, {"body": "whew scared saying issue nt case router still correctly fires route actually changes documenting change leading slashes bad idea yes documented next version backbone released", "d": "1/2012"}, {"body": "jashkenas looking test nt break examples giving breaks passing multiple times note leading slash whatever defined router rooturl", "d": "1/2012"}, {"body": "right never use leading slashes described could always strip way guess", "d": "1/2012"}, {"body": "backbone prescriptive like developer wants url structure would make url look like without using leading slash somehow supported newer rooturl feature", "d": "1/2012"}, {"body": "backbone prescriptive leading slashes wo nt play well pushstate", "d": "1/2012"}, {"body": "would much much rather able clean urls choice use pushstate forced routes using pushstate begin also breaks routes page major pita mention breaking links andor favorites already deployed site expose least optional hook use pushstate allow leading slashes even default opposite", "d": "4/2012"}, {"body": "opinion thing even though modern frameworks like django make mistake allowing people redirect latter former relative paths calculated current path path must start trailing slash absolute", "d": "1/2012"}, {"body": "becomes bigger problem different frameworks different servers choose strip trailing slashes", "d": "1/2012"}, {"body": "jscheel suggest example might play bradleywright definitely see point leading slashes visavis absolute relative paths trailing slash see two cases differing", "d": "1/2012"}, {"body": "jayred bradleywright definitely see point leading slashes visavis absolute relative paths trailing slash see two cases differing web servers treat differently unless url routing used front rails django example forces implicit normalise url says web server look index file inside directory similar whereas says look file named definitely different things map directly file system google note", "d": "1/2012"}, {"body": "bradleywright server standpoint absolutely right user perspective user visits site typing expect get page preferred format right create two routes backbone accomplish", "d": "1/2012"}, {"body": "resource served two different urls bad practice wrong one redirecting canonical one whichever preference point user fine implementation detail whatever using route requests application server imo backbone nt make assumptions things like feel route put backbone canonical one mix two", "d": "1/2012"}, {"body": "yep afraid terms backbone routes nt clientside trailing slash indeed significant route looks like certainly nt making default record never using leading slashes backbone routes trailing characters business", "d": "1/2012"}, {"body": "know issue closed really ask problem leading slashes gmail twitter personally think indexhtml login much attractive indexhtml login realize may personal preference reason preventing behavior notice done", "d": "1/2012"}, {"body": "think actually forcing", "d": "1/2012"}, {"body": "way see want allow trailing slashes backbone app add duplicate routes place issue going closed wo nt fix think least legit comment explaining solve problem us philistines want allow trailing slashes awfully coded bad practice ridden app", "d": "4/2012"}, {"body": "stumbled across issue would like provide simple solution cases api framework treats urls without trailing slashes may confusing user entering result valid request webserver backbonejs router wont route apache modify htaccess redirect user nontrailingslash equivalent url rewrite trailing slashes nontrailingslash equivalents rewritecond requesturi nc rewriterule nc l", "d": "8/2012"}, {"body": "router initialization method manually added catchall route removes trailing slashes helpful anyone", "d": "8/2012"}, {"body": "", "d": "8/2012"}, {"body": "vincentbriglia thanks snippet removing trailing slashes added missing right function line added", "d": "8/2012"}, {"body": "know thread fairly old closed solution thought may help anyone looking accomplish rewrite method create router force trailing slash option adding regex additionally would like route also case insensitive also place adding attribute return value javascript routetoregexp function route var namedparam wg var splatparam wg var escaperegexp g note method exact copy one default backbone library moved variables function", "d": "10/2012"}, {"body": "joshpangell support optional groups added following", "d": "10/2012"}, {"body": "braddunbar idea next version backbone released would great feature well features fixes done since came around months ago", "d": "12/2012"}, {"body": "mindscratch soon see", "d": "12/2012"}, {"body": "yep soon", "d": "12/2012"}, {"body": "worth appreciate seo usually ignored issue single page apps based backbone allow urls without trailing detrimental sites seo page viewed duplicated previously mentioned better setting apache similar manage invalid url redirect valid one", "d": "1/2013"}, {"body": "thanks ptnplanet andrewtennison opted change framework trailing slashes would ever used using wordpress simply created custom permalink settings gt permalinks postname without trailing slash works great", "d": "1/2014"}, {"body": "braddunbar love totally worked put routetoregexp thingy", "d": "1/2014"}, {"body": "glad could help smile", "d": "1/2014"}, {"body": "frustrated backbone defined uri scheme inline http uri scheme rfc updated obsoleted rfc section states gives example empty segment path segment ending specifically addressed root uri important understand section build context around applying uri segments section also referenced examples fact rfc http rfc updated rfcs obsoleted specifically states compare urls section empty abspath equivalent abspath section section state structure request uri define requesturi absoluteuri abspath authority host port abspath query erroneous backbone treat trailing slashes nonpresent trailing slashes nonequivalent issue reopened reconsidered", "d": "4/2014"}, {"body": "eh nt mean rude extremely strong appeal authority without actually looking servers trailing slashes web currently carefully reading rfcs saying mean empty segment path empty abspath talking truly empty path ie root server well fine trailing slashes part nonempty path perhaps wrongly entirely semantic servers redirect equivalent automatically many backbone needs support use cases prefer also served user navigates broken url like let look wild say example page served without trailing slash try visiting one see get uri scheme inline http uri scheme arse", "d": "4/2014"}, {"body": "would care enlighten parts carefully reading references rfc section rfc section mean empty segment path empty abspath talking truly empty path ie root server well fine herein lies issue neither rfc states whether uri trailing slash equivalent one without fairly thorough reading interpreted mean equivalent disagree also clarify url broken user navigates broken url like uri hierarchical nature use slash character separating hierarchical components file systems character used denote hierarchical structure uri delimiter used construct file name hierarchy thus uri path look similar file pathname imply resource file uri maps actual filesystem pathname refute making appeal authority appeal authority roughly follows idea expert b b x way x right rfcs accepted become de facto specification concepts describe even claiming rfc authority appealing appeals authority necessarily fallacious seem implying misuse appeals authority problematic referencing specification misuse appeal authority fallacy expert web technologies treats trailing nontrailingslash uris nonequivalent trailing nontrailingslash uris nonequivalent subject logical fallacies consider also fallacy fallacy fallacy committed necessarily invalidate argument example example props interpretation fallacious appeal authority important developers consider happens end understand backbone treats urls differently whether agree examples support interpretation rfcs fallacious appeals authority must considered practicalities sake uri scheme inline http uri scheme arse need snark issue tracking forum roast way understanding point needing support cases perhaps form configuration option workable solution treating optional part route definition", "d": "4/2014"}, {"body": "way understanding point needing support cases perhaps form configuration option workable solution sure sounds like fine idea want cook pull request", "d": "4/2014"}, {"body": "curiosity wrong leading slashes spent time googling found several statements eg jashkenas official docs note want avoid using leading slash route definitions word", "d": "5/2014"}, {"body": "well think leading slashes stripped routes handling takes place nothing else superfluous backbone routes", "d": "5/2014"}, {"body": "technical reason using hashchange ugly trendy brief period leading slashes make sense using pushstate", "d": "5/2014"}, {"body": "got thanks", "d": "5/2014"}, {"body": "apologies revival says update included normalizing trailing leading slash behavior routes backbone continuing see issue foo foo treated differently misinterpreting intended behaviour thanks", "d": "9/2016"}, {"body": "raymondji use router routes treat routes backbone gives tools choose interpret routes doc routes trailing slashes treated part url correctly treated unique route accessed fire different callbacks ca nt avoid generating types urls define matcher capture cases", "d": "12/2016"}, {"body": "seeing c new backbonecollection backbonecollection clength", "d": "1/2012"}, {"body": "problem wanted initialize collection empty set models options used something like c new backbonecollection options instead c new backbonecollection options", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "kind problem javascript var winnermodel backbonemodelextend defaults id date lastname firstname city var winnerscollection backbonecollectionextend model winnermodel var collection new winnerscollection responsefind getpartieswinnersresult function item var data item find data data find winner function item iterate passed collection create view item collectioneach function model consolelog model collection length replace lines works normally collectionlength etc nt know var collection new winnerscollection var collection new backbonecollection collectionadd collectionpush missing something thanks", "d": "12/2012"}, {"body": "found solution id rename id wathever works think conflict beacause backbone using id property", "d": "12/2012"}, {"body": "yes documentation intended imply way backbone apps behave written clarify", "d": "1/2012"}, {"body": "great much clear", "d": "1/2012"}, {"body": "nope works fine new backboneview make b classname bold bold", "d": "1/2012"}, {"body": "tried got wrote bug jquery version using tried w sent ipod jan jeremy ashkenasreply replygithubcom wrote nope works fine new backboneview make b classname bold bold reply email directly view github", "d": "1/2012"}, {"body": "thanks reporting recent versions jquery regression prevents old behavior", "d": "1/2012"}, {"body": "problem thanks quick response", "d": "1/2012"}, {"body": "way code bomb provide test case something like", "d": "1/2012"}, {"body": "code stops working fails return code works make large scale application work work works", "d": "1/2012"}, {"body": "general documentation nt say one way another supposed return overriding particular method recommend reading source method overriding overriding", "d": "1/2012"}, {"body": "dont understand know method saying documentation say need return however order code work must stackoverflow someone said way got override work", "d": "1/2012"}, {"body": "sounds like trying chain set without providing return value logic flaw functions need return values want use return value imo need documented", "d": "1/2012"}, {"body": "always document would document understand people know never assume one line documentation clarify something simple took like minutes figure dont understand adding one sentence documentation says must return object order method chaining work understand like feature requesting sentence documentation dont understand difficult coming company embraced backbonejs really invested using read almost documentation think clarification could nt hurt simple fix", "d": "1/2012"}, {"body": "understand get set something returned example var note backbonemodelextend set function attributes options backbonemodelprototypesetcall attributes options line underneath says must return method chaining work easy fix get duh return value set return might come logically developers return hard seems logical doesnt mean logical people", "d": "1/2012"}, {"body": "documentation bug code bug", "d": "1/2012"}, {"body": "oops learning use pull requests issues properly ignore issue look", "d": "12/2011"}, {"body": "sephichan expects array tried", "d": "12/2011"}, {"body": "yep pass array", "d": "12/2011"}, {"body": "okay thanks", "d": "12/2011"}, {"body": "afraid event callback nt quite thing former notifies listeners model destroyed latter callback indicates operation including handlers finished successfully certainly would nt want callback fire one handlers raised exception", "d": "12/2011"}, {"body": "oh ok misunderstood intent callbacks thought purpose abstract sync call wrap entire life operation might good clarify docs thanks quick answer", "d": "12/2011"}, {"body": "patch welcome", "d": "12/2011"}, {"body": "update indexhtml documentation andor docbackbonehtml documentation also anyone suggestions format callback signatures", "d": "1/2012"}, {"body": "indexhtml please try keep light closing ticket favor impending pull request", "d": "1/2012"}, {"body": "brought dom library remove events come test case illustrates problem please reopen said test case", "d": "12/2011"}, {"body": "gotcha remove dom library probably shouldcould looked zepto remove function simple dom avoid event dependency believe remove function return thiseach function thisparentnode null thisparentnoderemovechild dunno feel like could go either way extent nt really think dom remove remove clear events since true backboneview constructor calls delegateevents feel like backboneviewprototyperemove ought undelegateevents", "d": "12/2011"}, {"body": "tbranyen incorrect dom element removed events also removed nothing dom library choice simply dom works manually undelegating internal events would effect slowing code", "d": "12/2011"}, {"body": "jashkenas jquery specifically removes events call remove using jquery bind events delegateevents remove call specifically method speak zepto ender", "d": "12/2011"}, {"body": "jashkenas dom element removed events also removed nothing dom library choice simply dom works small test show events handlers persisted element removed document zepto remove closer jquery detach ender starter pack uses bonzo remove clears data nt remove event handlers data associated", "d": "12/2011"}, {"body": "since backbone officially supports zepto ender maybe explicitly calling undelegateevents nt realize removes kept events", "d": "12/2011"}, {"body": "calling maintain reference element maintain reference element nothing surprising stop pointing element element events gc jdalton example pedantically correct always entirely beside point", "d": "12/2011"}, {"body": "jashkenas stop pointing element element events gc jdalton example pedantically correct always entirely beside point ie notorious single page memory leaks associated elements events tricky garbage collection even devs try destroy element references also dependency lib may store elementspecificdata nt cleared called makes destroying element references nontrivial dependency consistency issue addressed backboneview remove use available else fallback would normalize simply removing element removing eventsdata associated", "d": "12/2011"}, {"body": "wrote monkey patch undelegateevents say use problems nt nt", "d": "12/2011"}, {"body": "caught surprise well little search led seeing phantom pubsub events views thought disposed good pubsub system use backbone mediator viewdestroying method found realized honestly would intuitive either done inside", "d": "1/2013"}, {"body": "gsklee using jquery using", "d": "1/2013"}, {"body": "using jquery yep seems like jquery removing subscriptions created via backbone mediator last section readme backbone mediator states way unset subscriptions thought done automatically inside backbone view nt case baffled", "d": "1/2013"}, {"body": "see thanks explanation gsklee backbone mediator appears pubsub system separate dom events thus affected jquery events also overrides purpose somewhat different backbone purpose methods case nt think backbone calling within", "d": "1/2013"}, {"body": "afraid nt nearly enough information reproduce problem probably passing improper object somewhere hope helps", "d": "12/2011"}, {"body": "commit exposes request nt think need overriding undocumented api feel free use like", "d": "1/2012"}, {"body": "yep nt use links fake hijack unobtrusively real either way nothing backbonejs prefer write html jquery", "d": "12/2011"}, {"body": "looks like link behaves likes link nt still link tag looks like sensible alternative typically reserve buttons contentmodifying actions links navigation way relates backbone would convenient link backbone view without value given automatically prevented default action way normal links work expected fake links nt hijacked", "d": "12/2011"}, {"body": "goes sentence keys special meaning model collection id classname attached directly view", "d": "12/2011"}, {"body": "ran confusion yesterday backbone documentation clarifies brief aside super javascript provide simple way call super function name defined higher prototype chain override core function like set save want invoke parent object implementation explicitly call along lines agree reference annotated code removed clarified", "d": "12/2011"}, {"body": "see", "d": "12/2011"}, {"body": "whoops stupid close comment button", "d": "12/2011"}, {"body": "sounds reasonable always require underscore perhaps outdated", "d": "12/2011"}, {"body": "thanks", "d": "12/2011"}, {"body": "pass instances views creating instances putting view definitions sounds like antipattern", "d": "12/2011"}, {"body": "believe formalized already var view new backboneview model somemodel viewmodel somemodel", "d": "12/2011"}, {"body": "would nice feel free look previous tickets see prior discussion summarize rest semantics nt defined bulk operations always wrap collection model like add methods backbone definitely builtin", "d": "12/2011"}, {"body": "original reason initialize function could work initial set models think right able fully initialize collection first model added better", "d": "1/2012"}, {"body": "thanks lot putting", "d": "1/2012"}, {"body": "use case requires opposite change worked around thought would share initializing collection wanted iterate models call method model method would use standard modelget access model properties method also bound add change events basically check get first access properties appropriate way", "d": "2/2012"}, {"body": "change pretty regressive imo changed workflow break legacy apps current implementation makes sense maybe adding hook postinit way one expected override initialize would allow cover needs allow previous behavior along new providing way access mint models reverting previous implementation constructor think", "d": "3/2012"}, {"body": "think pick one better way stick like access new models constructing collection", "d": "3/2012"}, {"body": "yes guess providing one workflow way go really say two usecases likely common say able pass models initialization time argument unable make anything pretty useless hand legitimate need exposed issue current time extracall think providing noop default hook would get triggered initialization one dive without monkey patching requiring extramessy code backbone core", "d": "3/2012"}, {"body": "think providing noop default hook would get triggered initialization think less clear simply calling additional method", "d": "3/2012"}, {"body": "personally find current behavior calling initialize reset correct theory however practice think previous behavior widely used expected ran exact issue last week overrode constructor get desired behavior", "d": "3/2012"}, {"body": "stick extra call redef maybe adding bit doc would sweet", "d": "3/2012"}, {"body": "would mirror chikamichi request change part change log breaking change legacy applications bit difficult track", "d": "4/2012"}, {"body": "seems bit strange available also override custom functionality like nt think", "d": "12/2011"}, {"body": "take yes", "d": "1/2012"}, {"body": "btw reading code right perrouter roots seems exactly yapp", "d": "12/2011"}, {"body": "looks like knob turn make search categories part respective routes definitely right thing ca nt multiple roots single page inherent contradiction user visits url url needs resolved terms root root pick since page one url time one url root time", "d": "1/2012"}, {"body": "would adding another configuration parameter router think right case pushstate site website app nt care providing nice experience ie users comfortable giving fullpage refreshes want use jump around anchors page would make sense optout hashchange fallback", "d": "12/2011"}, {"body": "exactly web app uses old fashioned serverside html churning support ancient devices think old nokias shitty javascript support also modern singlepage experience devices iesupport fancy features really issue nt know way somehow preserve without breaking hash links able pathjs way backbone work separate routers different pages better match app", "d": "12/2011"}, {"body": "record extremely far core use case backbone intended probably going exercising small part backbone still think support", "d": "12/2011"}, {"body": "also feeling got comments earlier issue right less app common use case backbone think distinction apps websites sharp many projects really somewhere middle example nt whole lot data creation lot view updates response user interaction modelview bindings backbone extremely convenient", "d": "12/2011"}, {"body": "commit implement looking pass also speculative commit please take time grab latest master test love hear works", "d": "1/2012"}, {"body": "thank extremely useful us core application backbone works well pushstate hashchange special pages example signing want nice urls like domaincomsignup browser nonpushstate browser initial url trigger route slightly adapt case setting submit pullrequest opinion allowing optin pushstate optingout hashchange logical patch might sideeffects nt thought", "d": "2/2012"}, {"body": "agree michaf using loadurl function right need functionality app initial view built server use backbone router means initializing view javascript user app clicking around use historyrouter pull additional jsdata necessary init subsequent views without page reload anyone see reason loadurl function could cause problem open separate bug", "d": "3/2012"}, {"body": "", "d": "1/2012"}, {"body": "back button behavior inside iframes always something unreliable recommend avoiding entirely planning iframe nt use router case much backbone", "d": "1/2012"}, {"body": "issue everything works fine ffsafari chrome weirdness like forgets looses items history stack sometimes weird thing first time back button used navigate back previous route works fine second time nt using simple view manager like derick baileys manage switching top level application views following pattern shows behaviour describe start home click item navigation loads another top level application view eg shown corresponding view click back taken back homepage expected click another item navigation links another top level application view eg shown corresponding view click back point expect see home view reality taken back top level application view step eg almost browser nt register gone back first time trying replicate simple example outside app nt managed yet post discover anything", "d": "8/2012"}, {"body": "start putting littering issue tracker nonrequests", "d": "12/2011"}, {"body": "irc mailing list best place conversations", "d": "12/2011"}, {"body": "nope route nt changed route nt changed definitely action triggered want call function instead using call function", "d": "12/2011"}, {"body": "think developer used trigger true expressly want logic route called regardless whether history gets updated suggesting call function one would always need check page user first decide whether call navigate update history call function directly use case route renders view conditionally based users authentication state user auth various pages site users authentication state changes would want rerender route display relevant content logic work show already", "d": "11/2012"}, {"body": "nt think backbonehistory observing changes location calls use case fine jashkenas says call function need directly authentication", "d": "11/2012"}, {"body": "example currently problem", "d": "12/2011"}, {"body": "verry common problem one somwhere willing add something object prototype say wish add length happened everywhere used loop first backbone throw error proceeding events delegateevents function line problems appear place iterate object without checking properties", "d": "12/2011"}, {"body": "ah request hypothetical nt ever extend fine", "d": "12/2011"}, {"body": "case delegateevents function better way maybe throw exception process method exists however first place problem occur look backbonerouterbindroutes changedattributes method saying object prototype changed backbone code broken broken many places time", "d": "12/2011"}, {"body": "set issue exists within jquery well nt extend objectprototype ever using third party libs", "d": "12/2011"}, {"body": "say leaving nt extend objectprototype ever solid advice", "d": "12/2011"}, {"body": "use case issue causing problems working legacy code adds indexof lastindexof functions arrayprototype nt already present eg using hasownproperty loops causes errors thrown multiple parts code agree nt extend objectprototype ever advice feel like use case cause issue reexamined", "d": "1/2012"}, {"body": "jacobharding extending arrayprototype cause problems extending objectprototype", "d": "1/2012"}, {"body": "legacy code working extending arrayprototype diving bit deeper looks like error part working backbone order undelegate events call delegateevents method pass empty array seems like proper way would pass empty object", "d": "1/2012"}, {"body": "sounds strange also nt sound like backbone problem perhaps issue something bit", "d": "12/2011"}, {"body": "think came across issue", "d": "12/2016"}, {"body": "great little pattern nt think common enough warrant passing along api everyone personally nt vary many views bound models collections note big part idea backbone extensible feel free add functionality app equivalent", "d": "12/2011"}, {"body": "idea bindtomodelbindtocollection main idea pass events via helper automatically unbinded events fix ghost views problem lot people removing views bind models collections forgetting unbind using simple helper method format works great since nt know nice way make backbone marco events routes defaults", "d": "12/2011"}, {"body": "fortunately opinion buggy way javascript constructors work already collections polymorphic models like var library backbonecollectionextend model function attrs options condition return new publicdocument attrs options else return new privatedocument attrs options", "d": "12/2011"}, {"body": "thanks dude wrote issue working client project imma integrate diaspora better lt", "d": "1/2012"}, {"body": "thanks", "d": "12/2011"}, {"body": "see change works locally machine reason hosted example page still uses jquery html glitch involving copy jquery though jquery cdn idea using html", "d": "12/2011"}, {"body": "yes branch uses older version jquery master fixed next release", "d": "12/2011"}, {"body": "delete requests supposed body resource delete including id model supposed included url", "d": "12/2011"}, {"body": "http spec stated delete supposed body implemented exactly method sgentile pass along information body spec state body sent would seem logical backbone convert optionsdata query string request would", "d": "12/2011"}, {"body": "ok even body getting passed url", "d": "12/2011"}, {"body": "contact backbonemodelextend defaults id null firstname lastname url contactcontacts usage thismodelsave updates thismodeldestroy deletes calls delete passed url params backend httpdelete actionnameattribute contacts public actionresult delete string id httppost actionnameattribute contacts public actionresult create contact model httpput actionnameattribute contacts public actionresult update contact model", "d": "12/2011"}, {"body": "guess url specify url deletes different postsputs", "d": "12/2011"}, {"body": "nt would nt rest nt want use urls identify resources would recommend overriding described using urls query params request bodies desire", "d": "12/2011"}, {"body": "proper way set url model use savesdeletes", "d": "12/2011"}, {"body": "pardon coffeescript coffeescript class exportsvehicle extends ubermodel url type gt switch type delete return vehicles thisget id get return vehicles thisget id put return vehicles thisget id post return vehicles thats url function passed type request", "d": "12/2011"}, {"body": "thank appreciate everyone response sounds like create sync use fair enough", "d": "12/2011"}, {"body": "type passed url undefined", "d": "12/2011"}, {"body": "oops apparently calling function addition custom sync coffeescript optionsurl isstring url url else url optionstype sorry maybe worthy pull request", "d": "12/2011"}, {"body": "thanks like agree would like see sync well added well base model object support aspnet mvc controlleractions good using url deletes vs body", "d": "12/2011"}, {"body": "damn try use destroy method nt work like save try var categorie thiscategoriecollectionget catid categoriedestroy success function model response trace destroy confirmed error function model response alert error nothing send http request header", "d": "1/2012"}, {"body": "ok think solution model attributs url rooturl rooturl see id delete request header like id infortunately save method nt work nt understand works use custom function url attribut model always pass id get clean url function return servicesscriptphp id thisget id", "d": "1/2012"}, {"body": "", "d": "7/2013"}, {"body": "urlroot gives free", "d": "7/2013"}, {"body": "caseywebdev really thanks", "d": "7/2013"}, {"body": "custom url inside destroy method url constant base url", "d": "6/2015"}, {"body": "thanks", "d": "6/2015"}, {"body": "fixed added unit test nt know cleanest code open suggestions", "d": "12/2011"}, {"body": "thanks bug report pushed alternative fix commit", "d": "12/2011"}, {"body": "experiencing issue", "d": "12/2011"}, {"body": "experiencing issue", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "spent futzing answer simple calling navigate leading slash never pushed commit strips leading slashes route definitions calls jsfiddle works correctly even incorrect navigate call", "d": "1/2012"}, {"body": "makes sense thanks maybe note backbone documentation", "d": "1/2012"}, {"body": "mixing two different things confused actual situation looks like idea example", "d": "12/2011"}, {"body": "base class something along lines child impression models extend backbonemodel children would extend basemodel example docs believe note backbonemodelextend privatenote noteextend make sense want initialize childmodel var c new childmodel see alerts know initialize functions called layer abstraction classesmodels keep everything clean", "d": "12/2011"}, {"body": "try instead", "d": "12/2011"}, {"body": "look line bb source code used follows test javascript var baseclass backbonemodelextend method function alert greetings baseclass var childclass baseclassextend method function thisconstructorsupermethodapply alert childclass var test new childclass testmethod alerts gt greetings baseclass gt childclass", "d": "12/2011"}, {"body": "works nt see documentation anywhere sure user error missing documentation either way really appreciate help", "d": "12/2011"}, {"body": "actually seeing using call parent initialize would expected maybe bug", "d": "12/2011"}, {"body": "bug resulting object owns property points myclass myclass owns property maps class extended need call initialization class extended need access inside property leads", "d": "12/2011"}, {"body": "even though link said yes super intended use directly underscored name implies", "d": "12/2011"}, {"body": "true nt use meant approach correct let clarify things means execute original backbonemodel initialize function called actual body function found magic ahem nothing use nt nothing saw execute super class method called", "d": "12/2011"}, {"body": "ohhhh makes perfect sense call lack coffee new transition javascript thanks much go ahead close thanks", "d": "12/2011"}, {"body": "framerate yuchi glad guys finally came conclusion posted two hours ago", "d": "12/2011"}, {"body": "blocka misread since read coffee", "d": "12/2011"}, {"body": "blocka actually forgot say agreed message simply tried give context", "d": "12/2011"}, {"body": "even weird case want override constructor want perform code constructor call super constructor stuff constructor solution like", "d": "1/2018"}, {"body": "root problem seems backbonecollectiononmodelevent called model appmodelst example especially surprising got correctly bindall make sure collection passed instead possible chrome version native bindall implementation broken ineffective still chosen underscore", "d": "12/2011"}, {"body": "turns missing call super collection constructor prevented bindall onmodelevent caused endless recursion problem solved", "d": "12/2011"}, {"body": "got fresh backbone version seems fixed", "d": "12/2011"}, {"body": "weird happening jquery backbone combined nt know root cause able figure workaround updating call resizable initialize method full example", "d": "12/2011"}, {"body": "research looks like issue delegate method jquery small example showing subscribing resizestop event method works subscribing delegate method work using backbone example delegate method still work", "d": "12/2011"}, {"body": "ummm seems resizestop event nt bubbling reason might want file bug jquery core", "d": "12/2011"}, {"body": "thanks looking according jquery blog changed works improved performance delegated events event delegation become increasingly important size complexity pages grow application frameworks backbone javascriptmvc sproutcore make heavy use event delegation mind jquery event handling refactored eye making delegated events much faster especially common cases optimize code commonly used forms selectors examined crosssection code google codesearch nearly twothirds selectors used live delegate method calls form tag idclass one tag id class used parsing simple selectors javascript time event attached able outperform even browser nativecode implementations matchesselector event delivery complex selectors still use sizzle engine existing code continue work", "d": "12/2011"}, {"body": "yes changes system far specific use case probably still work dmethvin insight dec forrest oliphant wrote thanks looking according jquery blog changed works improved performance delegated events event delegation become increasingly important size complexity pages grow application frameworks backbone javascriptmvc sproutcore make heavy use event delegation mind jquery event handling refactored eye making delegated events much faster especially common cases optimize code commonly used forms selectors examined crosssection code google codesearch nearly twothirds selectors used live delegate method calls form tag idclass one tag id class used parsing simple selectors javascript time event attached able outperform even browser nativecode implementations matchesselector event delivery complex selectors still use sizzle engine existing code continue work reply email directly view github", "d": "12/2011"}, {"body": "target nt look like set correctly think fixed change previous versions jquery core forced target element triggered prevented several scenarios might simulating events example forcing nonbubbling event bubble", "d": "12/2011"}, {"body": "words fixed went made sure change included release", "d": "12/2011"}, {"body": "see existing patch jrburke implements", "d": "12/2011"}, {"body": "model url function would simple", "d": "12/2011"}, {"body": "sure entirely understand trying ask hard time perhaps one way tackling collectionreset lt accountstojson gt renderthecollection", "d": "12/2011"}, {"body": "also bind reset", "d": "12/2011"}, {"body": "collectionbind reset currently using render views meant make backbonejs take bash already rendered html tags ie html use within view bind events click", "d": "12/2011"}, {"body": "still nt got solution let give example let say need render html backend indexing purposes google force backbone bind existing html elements views binded click events work already rendered html elements could think way would require render backend rerender frontside think inefficient anyone else faced issue", "d": "4/2012"}, {"body": "certainly attach backbone views existing html instance following code would work html snippet javascript var view backboneviewextend events click trash trash trash function var views html map function el return new view el el reason ca nt something like", "d": "4/2012"}, {"body": "well works guess problem handling models views backbonejs going know models given collection correspond already existing html views", "d": "6/2012"}, {"body": "good question could certainly handled several ways top head either rerender list client fresher data store html match model", "d": "6/2012"}, {"body": "thanks braddunbar give shot using suggestion cheers", "d": "6/2012"}, {"body": "included pull request", "d": "12/2011"}, {"body": "thanks thanks large part reason backbone widely used simple readonefileandyouknowitall nature want use views use models use views use models custom build tool required", "d": "12/2011"}, {"body": "seems logical modularize sync history part", "d": "12/2011"}, {"body": "hey want believe parts backbone useful well written find mixing objects would great able import modules backbone thereby avoiding code duplication importing parts application one example backboneevents agree jashkenas keeping backbone one file easy read probably draw new users contributors however think able output commented assembled version able take care users bit contributors nt think serious contributors would dissuaded contributing backbone series imported modules versus one file still annotated built source able read modules think broken backboneevents backboneextend backonesync least every major chunk file", "d": "7/2014"}, {"body": "advantage selectors scoped benefit using cases probably working expected second argument added call might break something quite sure jquery handling calls first argument selector second argument also provided usecase makes sense tl dr use directly edit said might make sense add drop second argument passed support passing nonselector argument usage even tho cases probably better faster call directly", "d": "11/2011"}, {"body": "actually work", "d": "11/2011"}, {"body": "add shesek wrote write way round jquery function used either search dom elements create dom elements used searching dom elements", "d": "11/2011"}, {"body": "yep think would actually better fail fast notion creating new dom element context another one nt make sense new element nt actually present dom yet", "d": "11/2011"}, {"body": "yes events need delegated synchronously otherwise trigger one events rendering proper callback would invoked got whole second speed improvement probably optimizations like using fewer coarsergrained templates tight loops delegating higher dom element page", "d": "12/2011"}, {"body": "afraid disagree please try persuade otherwise point history api provide bookmarkable shareable urls navigate back attach history object api page navigate back page would see pasted identical url seems broken least redundant ability store arbitrary state js course browser session smells like api browser implementors thought gee would nt neat could nt consider real consequences", "d": "12/2011"}, {"body": "think making assumptions desirable app behavior also granularity history events restrictive browser api provides specifically reason framework app dictate behavior invoked uri seems perfectly obviously legitimate state given navigation path orthogonal resource encoded state identified uri presentation conditioned clearly choice individual app aside abstract argument tell would implement example bookmarkable entry form offers savediscard changes navigated away including back button using history api one two line change nt want add parameter could also made use state given via eg attribute function", "d": "12/2011"}, {"body": "tell would implement example bookmarkable entry form offers savediscard changes navigated away including back button using history api would simply store form changes different safer place session server localstorage curious folks thought position asked replies", "d": "12/2011"}, {"body": "history api deals specifically app state tied nav path distinct uri ie get maybe called hysterisis api may share uri page return viewpagestate hit back button mouse swipe back mobile back action may change app statehistory without changing uri nav transitions uri transitions share uri may lead presenting resource page nav state appreciate experience flock think goes show developers nt yet figured use api intended creators good reason framework pave also nt address question persist form values rather use pushpopstate api prompt user save changes hit back button nav away form bookmarkable uri please consider addressing", "d": "12/2011"}, {"body": "new backbone webdev general however agree tribalvibes want create web application based facebook graph api use backbone navigate function allow user go back different items view similar facebook right however without stateobject pushstate user reload item api obviously costly probably dont know common pattern problem think state object would helpful", "d": "12/2011"}, {"body": "per mdn documentation state object saved disk nt understand different saving local storage think readdressed using local storage another method saving state seems extraneous state object available history api", "d": "1/2014"}, {"body": "right contra using state object extraneous local storage cookies method saving state simply tied current url", "d": "1/2014"}, {"body": "would nt better utilize tool provided state object provides straight forward method saving accessing previous states rather sifting local storage time user arrives page historystate available would allow ability recall generic state view via url route also specific state view user might want return", "d": "1/2014"}, {"body": "view simple apps use routes use simply copy paste url full experience complex apps use routes simple entry points general areas application particular records use storage apis better represent type persistence whether user server session local using history state object defeats great simple way single page apps use urls potentially permanent bookmarks", "d": "1/2014"}, {"body": "backbone always flexible less opinionated frameworks nt understand different native windowhistorypushstate understand people wo nt like however decision using left final user please rethink", "d": "2/2014"}, {"body": "rafayepes fully agree argument love backbone simplicity api change introduces bunch problems workarounds code app store relationship url state native way interacting history api would much much easier", "d": "6/2016"}, {"body": "thanks creating issue provide detailed use case empty jsfiddle template set backbon get started", "d": "11/2011"}, {"body": "event fired attributes values set individual events fired time attributes set reason nested changes still able get events proper order instead indeterminate one inner changes finished would like wait use", "d": "12/2011"}, {"body": "nope current behavior correct model perspective first undefined called became change", "d": "11/2011"}, {"body": "defies expectations little bit well consider cases var new backbonemodel mset name joe silent true nt fire change event mset name joe fires change event var new backbonemodel age mset name joe silent true nt fire change event mset age fires change event expect setting attributes silent mean never fire change event caused operation opposed fire change event next time setwithoutsilent change called understand saying model perspective change seems unexpected choose stick current behaviour proper way setting attribute never firing event setting value directly attributes hash seems correct lose correct previousattributes behaviour manually setting seems little bit whack thanks much", "d": "11/2011"}, {"body": "choose stick current behaviour proper way setting attribute never firing event ignore event nt care particular change changes always happen silent way saying yet", "d": "11/2011"}, {"body": "point root option automatically removing paths resolve relatively mount pushstateenabled backbone app somewhere root host example could backbone app living navigate pushstateenabled route route triggered", "d": "11/2011"}, {"body": "ok got thanks", "d": "11/2011"}, {"body": "accept direct function nt reference instance view nt make much sense see", "d": "11/2011"}, {"body": "makes sense sorry open ticket next time use forum", "d": "11/2011"}, {"body": "afraid nt understand asking", "d": "11/2011"}, {"body": "afraid looks like nt tried nt think javascript", "d": "11/2011"}, {"body": "nope javascript collect garbage stop referencing views models listening one another gc like propose change please submit test demonstrates real memory leak", "d": "11/2011"}, {"body": "afraid nt backbonemootools take request elsewhere", "d": "11/2011"}, {"body": "nt heard one would nt exactly surprised think lots folks trouble integrating jquery mobile also afraid ca nt diagnose without smartphone jquery mobile app come change future think made let us know", "d": "11/2011"}, {"body": "stackoverflow link resolution noticing render method getting called twice windowhistoryback look see code known issue solution", "d": "11/2011"}, {"body": "trailing comma example consider using code quality tool jslint jshint", "d": "11/2011"}, {"body": "ah yea noticed copied code without checking nt problem thanks anyway", "d": "11/2011"}, {"body": "could also aspect programming afaik almost everything need starting point access modelcollection invoked jqhxr nt know zeptoender hook end events trivial follow idea glad see results", "d": "11/2011"}, {"body": "via jquery global ajax events also take advantage deferred objects issues fetch", "d": "11/2011"}, {"body": "true want hook ajax requests need models collection events vlucas talks way bind inside modelcollection view act little simplicistic job ps sure bind complete event jquery moved apis little much", "d": "11/2011"}, {"body": "wookiehangover acutally tried first luck sure never firing could nt get jquery global ajax events even anything bound wanted show object put outside block etc luck hence feature suggestion thanks yuchi example code look function bit ideas comments getting something like backbone could see used things well", "d": "11/2011"}, {"body": "personally like idea opinion counts much see little use cases let feature enters bb code base edit comment fallacious make jsfiddle test interested understanding happening", "d": "11/2011"}, {"body": "horrible working one", "d": "11/2011"}, {"body": "yuchi thanks nudge right direction played bit determined may actually bug jquery related jsonp datatype using full url instead path probably related fact nt actually ajax point remote script include jsonp path works jsonp full url work even domain", "d": "11/2011"}, {"body": "yep jquery ajax events better sort thing comprehensive", "d": "11/2011"}, {"body": "submit pull request would consider inclusion backbone", "d": "11/2011"}, {"body": "addressed", "d": "11/2011"}, {"body": "nope events delegated thru jquery zepto events handled backboneevents", "d": "11/2011"}, {"body": "moment backbone events named arbitrary strings desirable adding namespaces would make true anymore worth add namespaces namespacing sake useful terms backbone models views add good use case would come handy reopen", "d": "11/2011"}, {"body": "jashkenas well first rather specific usecase namespace events allows easily bind unbind events anonymous functions specific narrow use case broader context allows group events easy manipulation since backboneevents supposed generic mixin handled little broadly models views namespacing events allows things like triggering unbinding whole set events", "d": "11/2011"}, {"body": "yep well aware works jquery whole variety bubbling dom events thousands html elements handful specific events models views glad take look patch feel like cooking one still need good examples would come handy backbone app landing", "d": "11/2011"}, {"body": "use case namespaced events appear necessary using applicationwide events example something working use event aggregator object listening applicationwide events base class class gcbbaseview extends backboneview notifier extend backboneevents concrete class class gcbobjectview extends gcbbaseview initialize bindto model change coords coordschanged bindto model change scale scalechanged bindto model change display toggledisplay bindto model destroy close notifier event aggregator available view views extend baseview case app many instances objectview delete one single objectview every instance objectview ends losing chart touchstart event listening ideally able namespace event valid use case btw temp measure done work around problem class gcbobjectview extends gcbbaseview initialize nt think ideal though property every objectview rather objectview prototype", "d": "2/2012"}, {"body": "already binding objectview instance context unbinding passing context", "d": "2/2012"}, {"body": "thanks jeremy course right nt realised context parameter unbindoff reason thoughtassumed similar signature jquery unbind passing context parameter give flexibility probably need namespaced events reasons suggesting anyway cheers", "d": "2/2012"}, {"body": "clientside validations never stricter serverside validations simply asking trouble asking hacked raised successful save indicates bug app", "d": "12/2011"}, {"body": "point success error mutually exclusive nt raise time also point calling validation successful request", "d": "12/2011"}, {"body": "catch bugs like one", "d": "12/2011"}, {"body": "actually really sure bug think something wrong", "d": "11/2011"}, {"body": "right name global instance name history class docs correct agree totally confusing", "d": "11/2011"}, {"body": "clear backbonehistory becomes available instantiate least one controller", "d": "11/2011"}, {"body": "nt quote page load application finished creating routers sure call route initial url later routers created routes set properly call begin monitoring hashchange events dispatching routes", "d": "11/2011"}, {"body": "would say key part documentation history serves global router per frame handle hashchange events pushstate match appropriate route trigger callbacks nt ever create one use reference backbonehistory created automatically make use routers routes part apparently read remember", "d": "11/2011"}, {"body": "imo would replace created instantiated", "d": "11/2011"}, {"body": "issue closed fixed", "d": "12/2011"}, {"body": "yep see commit", "d": "12/2011"}, {"body": "oh sorry android client nt showing", "d": "12/2011"}, {"body": "quite right thanks noticing doc lag", "d": "12/2011"}, {"body": "yeah look way till commits issue get straightened", "d": "11/2011"}, {"body": "fixed braddunbar patches", "d": "12/2011"}, {"body": "jquery handle", "d": "11/2011"}, {"body": "element unbind handle issue mentioned want entire view theviewel unbind still doesnt work would theviewel unbind delegateevents theviewcid problem unbind child views thus app would traverse child views manually unbind well", "d": "11/2011"}, {"body": "take look think implementing baseclass views noop destroy method callextend", "d": "11/2011"}, {"body": "thanks relevant response solution something mind feels like something rolled backbone also one thing noticed thisunbind nt instead thisel unbind delegateevents thiscid tested thisunbind still events defined events object view firing", "d": "11/2011"}, {"body": "little bit preamble backbone leverages delegate events reduce amount overhead associated binding tons events even bind multiple events single view think bound one event views root element concern circular references domelements backbone view handlers since view handlers properties view object reference back view object new different view take look jquery object time way selector find tons socalled circular references unfortunately accurate going see performance issues view instances dom elements events needing deal high numbers elems suggest parent view attached entire table list whatever rely event bubbling capture events individual cells rows little bit work instantiating individual views row performance benefits pretty obvious fwiw also good use case data attributes able preserve references dom nodes backbone classes eg", "d": "11/2011"}, {"body": "okay already wrote irc get saying asume circular references real problem cases contrast case limited amount views created still think issue possibly leads memory leaks fine", "d": "11/2011"}, {"body": "laszlokorte referring old internet explorer bugs caused references dom js bugs longer issue addressed backbone create references dom js objects", "d": "11/2011"}, {"body": "thank reply aware circular references problem anymore", "d": "11/2011"}, {"body": "could though logic would get little complicated catch setting null topic exists", "d": "11/2011"}, {"body": "namelessjon really making sure validation logic mean", "d": "11/2011"}, {"body": "thanks guys nt come mind", "d": "11/2011"}, {"body": "runs backbone sets structure called inside structure function basically need augment anything backbone sets structure use need augment anything backbone sets structure use", "d": "11/2011"}, {"body": "thanks makes sense mark closed looks like want update documentation", "d": "11/2011"}, {"body": "making explicit documentation", "d": "11/2011"}, {"body": "different", "d": "5/2014"}, {"body": "hi fengdi right using recommended instead use parent directly", "d": "5/2014"}, {"body": "also raised similar question pauluithol author backbonerelational library encountered memory management issues lifecycle cached models backbonestore trying release model attributes backbonearticulation wookiehangover also relation pull request memory management hooks also suggested could bigger discussion terms hooks party library writers would put hooks memory management topics review enhanced backbonejs bigger interdependent community party plugin writers", "d": "11/2011"}, {"body": "provide detailed test case describing empty template get started", "d": "11/2011"}, {"body": "many ways handle bulk operations rest none particular specified make special request ids things want destroy client side create new bulk resourcemodel sort thing url make shit load small requests", "d": "1/2012"}, {"body": "yeah project knockout full control models still give backbone try heavy project", "d": "1/2012"}, {"body": "already consistent exception noops one line handlers appear code base every functional expression already formatted", "d": "11/2011"}, {"body": "thanks ticket could provide detailed test case behavior describing empty test case get started", "d": "11/2011"}, {"body": "yes validation run collection reset like validate nt validate like validate middle set flag collection model function check", "d": "1/2012"}, {"body": "validate run collection reset ver reset thisadd models extend silent true options silent forced validate optionssilent thisvalidate return true first line true thisvalidate never called basically validate never run collectionreset matter think", "d": "7/2012"}, {"body": "good catch test case described behavior get context purpose overriding set example thanks ticket", "d": "11/2011"}, {"body": "thanks test case project cloud storage system api return user files array filecollection file amp directory create filemodel attribute path create new file set file path directory need decide file whether new file created client put code filemodel set method thanks help", "d": "11/2011"}, {"body": "guess exclude query new file filecollection filemodel cause guess way working like want think bug another test case hope understand correct case could help", "d": "12/2011"}, {"body": "thanks fixed making assignment earlier suggested", "d": "1/2012"}, {"body": "remove events property view error", "d": "11/2011"}, {"body": "need include jquery backbone nonerroring example code note jquery backbone underscore included jsfiddle interface inlined html", "d": "11/2011"}, {"body": "timeglider thanks ticket good news behavior already supported events property may also defined function returns events hash make easier programmatically define events well inherit parent views", "d": "11/2011"}, {"body": "thanks sam glad know give try meanwhile know sample somewhere", "d": "11/2011"}, {"body": "problemo quick example", "d": "11/2011"}, {"body": "thanks much sam", "d": "11/2011"}, {"body": "anyway javascript literal object notation use expression keys following valid even following correct last case put inside expression js literal object notation keys must strings single double quote literals follows rules variable name please note json thing also requires double quotes", "d": "11/2011"}, {"body": "make sure load underscorejs load backbone", "d": "11/2011"}, {"body": "korsosm thanks ticket created test case code unable reproduce results talking test case seems inaccurate please fork post back updates", "d": "11/2011"}, {"body": "something funky got improperly return nonrandomly going steps reproduce collection call list give method takes date range calculates items list within range saves makes ajax request items within range using extra parameters importantly passing query range question removes items list prevents duplicates gets rid items deleted server within range note however time fires data already parsed added collection precalculated also note ranges overlap partially completely exactly whatever use method twice ensuring overlap testing purposes consider three groups items fall first range second ranges see funky behavior last case happens well etc collection return items want collection ids result happens items already collection removed ajax request basically would seem add item collection twice remove one breaks tested general case yet within situation reopen new issue", "d": "12/2011"}, {"body": "running issue well look byid property collection key item want actually undefined somehow", "d": "1/2012"}, {"body": "thanks legwork describe alanhogan unintended consequence earlier change allowing two different model objects id added collection without erroring situation shows mistake goes back previous behavior get early warnings adding duplicate models app", "d": "1/2012"}, {"body": "thanks jashkenas glad could help small way", "d": "1/2012"}, {"body": "ditto thanks jashkenas", "d": "1/2012"}, {"body": "thanks question without context difficult determine going code difficulty bindall please direct support requests questions documentcloud freenode irc like case something like stackoverflow issues tracker really reporting bugs tracking feature requests", "d": "10/2011"}, {"body": "thanks reply", "d": "10/2011"}, {"body": "first trailing comma example second instantiating view seem misunderstanding really reserved use within given constructor lest get confusing needed basic example properly initialize model view furthermore generic error best way track something like using debugger allows set manual breakpoints break error something built chrome check docs", "d": "10/2011"}, {"body": "new underscore method still needs added next version backbone released", "d": "10/2011"}, {"body": "returning data optionssuccess callback example javascript override sync method lookup appropriate call api backbonesync function method model options api function something url map correct data api modelurl function err object err return optionssuccess object", "d": "10/2011"}, {"body": "hey mind formatting code easier read edit ticket indent code least four spaces", "d": "10/2011"}, {"body": "sorry nt know gfm syntax highlighting issue posted formattingspaces killed even editing able format dots actually code piece code backbone sources used explain bug", "d": "10/2011"}, {"body": "great thanks", "d": "10/2011"}, {"body": "test case describing unfortunately line documentation quote referring collectionsort usage conjunction collectioncomparator comparator section comparator run inserting model collection called model updated since comparator functions potentially expensive large collections makes sense behavior default need sort collection change need call change event handler see example jashkenas tbranyen probably cool close one", "d": "10/2011"}, {"body": "understand could performance implications although would interesting compare vs insertion certainly possible manually sort however since collection allowed become unordered updates model get correct insertion index underscore uses binary search determine sortedindex user perspective insert could seem placed randomly suggest invalidates documentation reference maybe fair trade use comparator insert nt documentation least clear change comparator field ordering guarantee goes window look source confirm updates nt sort automatically assumed something wrong added sort change handler line quoted instead said something like believe would saved time edit also believe go way define comparator would seem odd would want inserts maintain ordering", "d": "10/2011"}, {"body": "agreed clearing documentation", "d": "10/2011"}, {"body": "sure bug per se seems like patch would enhancement jashkenas care chime intended behavior", "d": "10/2011"}, {"body": "think fixable backbonejs currently sorting plain transformation model sort key collections collections comparators cache sort keys models model changes collection check sort key changed trigger resort", "d": "10/2011"}, {"body": "nevermind change sort key ten models row certainly nt want resort collection ten times better current behavior call necessary", "d": "10/2011"}, {"body": "disagree performance problem automatically keeping collection sorted assume sorted collection elements one elements changes nt resort entire collection since know elements already sorted relative reposition one element cost inserting model sorted collection even scenario jashkenas describes rapidly change ten models collection resorting individual models change still cheaper even single resort possibility could revisit keep collections sorted model changes reasons missing keeping collection sorted willing work free time philosophical conflict would prevent accepted", "d": "5/2012"}, {"body": "philosophical conflict would prevent accepted lol seriously dcuddeback raises many valid point", "d": "6/2012"}, {"body": "right nt use instead", "d": "10/2011"}, {"body": "one problem add method nt return reference new model like create two lines return different values probably different issue altogether seems like collectionadd return either new model created array models created sure would break code could use collectionadd since private method felt wrong", "d": "10/2011"}, {"body": "first sounds broken previously called handlers called second nt want set hash manually always use", "d": "10/2011"}, {"body": "patch branch sort thing update use latest underscore post back believe may robust patch allows jquery loaded via amd uses one suggested formats sort multiple format registration", "d": "10/2011"}, {"body": "link branch", "d": "10/2011"}, {"body": "updated branches optamd branch commit diff placed define call line function define level indent backbonejs code would trigger noisy diff however place line indent code preferred also optamdwithtest branch testrequirejshtml file showing working amd loader also tested code node simple test backbonemodel commit node test since simple code check backbone probably want test page put core registration changes optamd branch however problem merging test page optamd branch desired treasonx everyone else diff looks good pull request mention ticket", "d": "10/2011"}, {"body": "yeah diff looks good pretty much branch minus tests think pull request order thanks", "d": "10/2011"}, {"body": "would excellent addition", "d": "10/2011"}, {"body": "let move conversation pull request ticket", "d": "10/2011"}, {"body": "good idea create close destroy method views find always needed though particular case need unbind bound method model stay alive far longer view might note two completely separate methods confused one functionality case wanted outside scope view whilst reference call collectiondriven workflow might change bit purposes", "d": "10/2011"}, {"body": "using close destroy methods views remove wo nt cut", "d": "10/2011"}, {"body": "duplicate", "d": "10/2011"}, {"body": "dunno code works app doesnt sorry opening issue", "d": "10/2011"}, {"body": "inside save method notice part comes options provide setting work expect please reopen solve problem", "d": "10/2011"}, {"body": "bad suppose assumed nt exist nt see docs indeed works said would", "d": "10/2011"}, {"body": "sounds like need alert testing strategy router code rather testing specific routes bound something underlying test coverage backbone focus testing router functions instead greatly simplifies matters need instantiate router test custom methods directly whether relying routes variables testing specific routes present routing working nt something needs test coverage one internals match routes test coverage backbone testing route working triggering route externally really integration test backbones internals better focus unit testing route handlers tbranyen care chime best practices router testing", "d": "10/2011"}, {"body": "two example routes need testing probably agree actual router methods pretty boring nothing really test instantiate models views testing separately", "d": "10/2011"}, {"body": "ok making bit sense since backbone handling attachment regular expressions already form test coverage granted specifics regex capture fwiw addresses least part pain accounting query strings routes without need custom regex reason first example ca nt look something like case needs tested validity regular expressions necessarily integrate backbone", "d": "10/2011"}, {"body": "looks interesting nt actually address testing issue example secret optional way express yeah need test regular expressions extracting separate structure able test would nt really improve things either", "d": "10/2011"}, {"body": "jasmine specs want test route definition portion route defined simply create spy handler navigate route verifying arguments expected note need eliminate anonymous functions want effectively good idea anyways discretely test given route definition value named var router var playlistroute function user permalink secret thisroute w sets w w playlist playlistroute specs characterize regular expression correctly passing arguments playlistroute describe playlist route function beforeeach function spyon playlistroute routernavigate mesetspermalinksecret true call playlistroute function expect playlistroute tohavebeencalledwith permalink secret works jasmine manualspecrunnerhtml setup sure using unit testing ninja edit wanted update add nt normally use routernavigate router specs simply call route handling function directly assert expected behavior see comment details", "d": "11/2011"}, {"body": "davemo thanks input done similar route testing using sinonjs mocking qunit", "d": "11/2011"}, {"body": "davemo use similar approach unfortunately nt work well context route function different cane set expectation coffee class appusersettingsrouter extends backbonerouter routes accountsettings accountsettings accountsettings gt consoleinfo accountsettings gets called describe usersettingsrouter gt router null beforeeach gt jasmineajaxusemock router new appusersettingsrouter call accountsettings gt spyon router accountsettings routernavigate accountsettings true expect routeraccountsettings tohavebeencalled fails accountsettings proxied spies related workaround would add another method router pass call really like would", "d": "11/2011"}, {"body": "dnagir using jquery suggest looking vertebrae plugin testing pretty much exactly written", "d": "11/2011"}, {"body": "tbranyen sure would help rewrite spec nt care persistence ajax show please", "d": "11/2011"}, {"body": "dnagir oh snap dude looking code seeing something totally different would love blame coffeescript one p backbone internally tests simply setting variable flag checking also entirely sure testing something provided backbone internally", "d": "11/2011"}, {"body": "want test backbone internals rather make sure correctly define routes router mediator views want test part ideally though like test correct data passed views navigation occurs", "d": "11/2011"}, {"body": "dnagir would nt directly call routernavigate test testing backbone internals ensure routing works advertised true unit testing approach would call routeraccountsettings verify behavior inside function works expected set two different tests follows describe usersettingsrouter gt router null beforeeach gt jasmineajaxusemock router new appusersettingsrouter describe route definitions gt defines route accountsettings gt verifies routes defined expected expect routerroutes toequal accountsettings accountsettings describe accountsettings gt logs stuff via consoleinfo gt spyon console info routeraccountsettings expect consoleinfo tohavebeencalledwith accountsettings gets called benefit clear nt test internals backbone integration test isolate units functionality test discretely", "d": "11/2011"}, {"body": "right probably much better approach additionally something like work testing single route definition coffee defines route accountsettings gt routepresent routerroutes chain pluck accountsettings compact value expect routepresent tobetruthy", "d": "11/2011"}, {"body": "want test routes real set windowlocationhash watch routes called", "d": "1/2012"}, {"body": "always navigate without slash prefix get value href strip slash prefix passing navigate", "d": "10/2011"}, {"body": "seems like reasonable addition currently patch wont apply cleanly due unrelated work gone spot", "d": "10/2011"}, {"body": "nt think validations dependent savespecific options put state model instead good use case fact needed please add ticket", "d": "11/2011"}, {"body": "well using pass mode flag abstractly validation context eg use case would properly done adding state model suggest much simpler agnostic way getting functionality equivalent eg etc also general programming standpoing since already parameter sweat pass client good practice since nonbreaking change much resistance btw ask comments issue please nt close nullfies discussion updates unless want add contributors reopen issues", "d": "11/2011"}, {"body": "ok thanks use case change committed", "d": "11/2011"}, {"body": "check gist wrote subrouting", "d": "10/2011"}, {"body": "thanks code tbranyen seems exactly functionality looking big question one incorporate prefix parameter like shown tbranyen code would go testing presume want test several different types prefixes sub sub subsubsub subsub properly test cases would nt require instantiating several routers backbone current testing scheme routers routerjs seems single router referenced following tests reason keep testing scheme still process familiarizing backbonerouter backbonehistory well qunit appreciate opinion best way go adding tests different instances router", "d": "10/2011"}, {"body": "root option already supported precisely fashion need extra code", "d": "10/2011"}, {"body": "oh man thats incredible thanks jashkenas edit seems happens global level see exactly subrouting", "d": "10/2011"}, {"body": "thanks pointing jashkenas looking wrong place looking backbonehistory instead backbonerouter", "d": "10/2011"}, {"body": "really old issue nt think link jashkenas left links right place code anymore documented somewhere", "d": "1/2016"}, {"body": "given link posted find current master git ref link uptodate would code", "d": "2/2016"}, {"body": "worth putting documentation website nt see mentioned router anywhere happy write something", "d": "2/2016"}, {"body": "takes searching documented application served root url domain sure tell history root really option backbonehistorystart pushstate true root publicsearch really history option router one", "d": "2/2016"}, {"body": "ah thanks pointing", "d": "2/2016"}, {"body": "hi already read new article elections got take look link best joel", "d": "9/2016"}, {"body": "second argument options instance properties inside initialize need set manually javascript mycollection backbonecollectionextend initialize function models options thisurl optionsurl var mycollection new mycollection url users mycollectionfetch feel address issue please feel free reopen", "d": "10/2011"}, {"body": "thanks dude", "d": "10/2011"}, {"body": "great thank helped fix similar issue", "d": "10/2011"}, {"body": "workaround works great sadly slash omitted url becomes ugly routes different root something like ends looking like one routes triggered example new route triggered back forward buttons work url wrong seems like bug chance something wrong going open stackoverflow question report back got bottom", "d": "11/2011"}, {"body": "router web app seems working hope help tested push state browsers hoping fallback nicely hash urls oldies example anchor sorry nt trimmed irrelevant content questions drop comment gist", "d": "11/2011"}, {"body": "thanks lot man looks helpful", "d": "11/2011"}, {"body": "yeah pretty cool", "d": "11/2011"}, {"body": "currently discussed", "d": "10/2011"}, {"body": "use already server uses approach different rest overwrite backbonesync implementation compatible case probably share applicable", "d": "10/2011"}, {"body": "ping jashkenas close please", "d": "10/2011"}, {"body": "definitely able manually overwrite backbonedefault options hash", "d": "10/2011"}, {"body": "test case invalidate", "d": "10/2011"}, {"body": "addressed following commit", "d": "10/2011"}, {"body": "example", "d": "10/2011"}, {"body": "came looking thing dove figured javascript farmvillecollectionsturkeys backbonecollectionextend model farmvillemodelsturkey url turkeys initialize function models options consolelog options consolelog optionsfarmer return new farmvillecollectionsturkeys sizeinkg sizeinkg farmer yourfarmer wrap model attributes array options get treated another set model attributes", "d": "10/2011"}, {"body": "line shows works arguments forwarded initialize method mdeering shows eloquently pass options using array models property", "d": "10/2011"}, {"body": "seem issue tried solution mdeering luck stackoverflow question seem missing something let know guys think", "d": "8/2015"}, {"body": "yeah tojson clone thisattributes underscore clone shallow copy references bit outputting modeltojson mucking json rendering template model comes server seems like able template abandon cause problems model", "d": "10/2011"}, {"body": "afaik nt use nonprimitives values anyway deepclone method could implemented used imo", "d": "10/2011"}, {"body": "yeah probably rathole around deep clone tojson might ought deal", "d": "10/2011"}, {"body": "solution use flatten references return clean referencefree object address problem please feel free reopen", "d": "10/2011"}, {"body": "admittedly tbranyen slow solution large datasets probably fine nt happen often", "d": "10/2011"}, {"body": "slexaxton said would make feel better p", "d": "10/2011"}, {"body": "curious made seems fine reasonably large sets", "d": "10/2011"}, {"body": "documentation validate called set save passed attributes updated maybe docs need explicit point validation nt get run instantiation also would instantiate model recreate via better add model instance collection", "d": "10/2011"}, {"body": "use way model binding library forms means new models directly instatiate new model bind form save want object created server server create works want object added collection nt want temporary object collection actually created server", "d": "10/2011"}, {"body": "think core duplicate", "d": "10/2011"}, {"body": "sounds like something better solved avoiding situations need custom events single instance view events conditional nature include first make view put whatever logic need handler could also handled making parent view class views inherit", "d": "10/2011"}, {"body": "nt come assume users extend view constructor case agree support custom events single instance view already customized process defining reusable view constructors eg widgets render dropdown autocomplete support selection models collection come across cases would convenient able take advantage delegateevents construction cases reason user would need extend view constructor timing first call delegateevents users certainly invoke delegateevents construction convenient might", "d": "10/2011"}, {"body": "could nt make dynamically binding whatever part initialize function main class provide real world example customizing class constructor bind things optionsevents insufficient", "d": "10/2011"}, {"body": "yes could make call delegateevents initializer point functionally insufficient nt seem reason events accepted constructor argument useful case reusable views possible supported case hope", "d": "10/2011"}, {"body": "nt seem reason events accepted constructor argument take crack answering events supported constructor args represent potentially large piece given view core functionality consider special properties set via constructor model collection el id classname tagname properties view nt contain functionality seems make sense alter something core function like event handlers good case either abstract reusable code parent class write custom initializer allows extending happen instantiation believe adhering l uncle bob martin solid design principles", "d": "10/2011"}, {"body": "delegateevents invoked view object time whether would make uncle bob sad bigger different issue", "d": "10/2011"}, {"body": "absolutely right call delegateevents view instantiated events object set view class extend represent merely initial state view events removed delegated afresh call delegateevents reason passing view constructor nt default behavior assumption made events object set properly prior invoking constructor already seem several fairly elegant ways handling scenario without needing add another special property automatically set via constructor options", "d": "10/2011"}, {"body": "think going agree disagree appreciate taking time considering request please consider withdrawn", "d": "10/2011"}, {"body": "thanks taking time file ticket", "d": "10/2011"}, {"body": "change implemented", "d": "11/2013"}, {"body": "hmm seems like would add extra layer confusion class instantiation need share code backbone classes cleanest approach way multiple inheritance simple example", "d": "10/2011"}, {"body": "yes agree starting use far better techniques adding magic", "d": "10/2011"}, {"body": "using expected action nt even called previous happens routes start remove slash behave hashes", "d": "10/2011"}, {"body": "similar problem", "d": "10/2011"}, {"body": "routes never start meaning hash url fallbacks", "d": "10/2011"}, {"body": "even without beginning nt work actions called anyway complete runnable demo", "d": "10/2011"}, {"body": "gents looks like bug chrome console backbone routing ansman try run demo replacing consolelog handlers alerts another logger blackbirdjs example suppose consolelog something like stdout buffer nt get cleared pressing backbutton typing hash prints stack previous log messages handlers called though", "d": "10/2011"}, {"body": "indeed use alert fires ones good catch", "d": "10/2011"}, {"body": "whew thanks ilikefm", "d": "10/2011"}, {"body": "works remove inital guess must exact match routes", "d": "10/2011"}, {"body": "indeed interesting behavior run trying force route reload ended explictly documented part api certainly gets job done seems reasonable trigger route handler called anyone else care chime", "d": "10/2011"}, {"body": "ran issue well specific use case using media queries provide responsive interface screen sizes views elements nt respond media queries wrote function listen resize events rerender page need rather reference render individual views thought would call rather reference backbonehistory would best router refresh reload method", "d": "11/2011"}, {"body": "issue ansman show routes problem leading slash automatically removed history getting hash default root", "d": "11/2011"}, {"body": "yes never leading slash either routes navigate calls said commit master forcefully strips leading slashes longer lead buggy behavior finally yes router ever fire route actually changed", "d": "1/2012"}, {"body": "would like chime explict call routernavigate route true trigger route even route changed hash", "d": "1/2012"}, {"body": "danroberts nt seem possible moment force trigger route hash nt changed tried routernavigate route trigger true nt work quick hack simply call", "d": "2/2012"}, {"body": "olalonde using wookiehangover method good results wrote custom function checks route trying go current hash calls either routernavigate historyloadurl seems reasonable could part options array something like refresh true want trigger route regardless also maybe update documentation seems order since trigger true logically going trigger route", "d": "2/2012"}, {"body": "problem closing bug key point using backbone handle parsing routes calling function based route lacking ability determine cases reload ok backbone directly something effect work yea feel like totally valid use case would nice platform fyi saw thread posted comment", "d": "4/2012"}, {"body": "backbone router allow type action listen url change event trigger routed actions need intercept control trigger action reset router action created jsfiddle example blog post", "d": "6/2012"}, {"body": "ran issue today would like add cents seems like unintuitive behavior explicitly setting wo nt trigger event unless hash changed vote favor triggering route matter condition one real world example want refresh current page would impossible current behavior", "d": "7/2012"}, {"body": "kenperkins method something similar integrated bb routers", "d": "7/2012"}, {"body": "process navigate page trigger true passed", "d": "8/2012"}, {"body": "spent hours trying find method work application think bb docs include notification issue ugly quick solution call method actual one worked option would definitely use", "d": "8/2012"}, {"body": "leaving thoughts issue today encountered seems highly unintuitive route nt called explicitly pass options hash routernavigate would love see addition option onuradsay suggested", "d": "11/2012"}, {"body": "practicality patrickod onuradsay idea", "d": "11/2012"}, {"body": "still able receive event determine app refresh called figure many hacks mentioned clean think behavior common enough put router", "d": "11/2012"}, {"body": "afraid going happen fact folks asking actually impetus remove unconditionally fire event let explain events backbone notified state changed like models trigger event second time state changed trying navigate location already change state trigger event want callback fire whenever button clicked add callback want use backbone events call objecttrigger myevent", "d": "11/2012"}, {"body": "seems like instead assume true option nt add functionality though always something like button handlers", "d": "11/2012"}, {"body": "thanks dankantor great trick", "d": "1/2013"}, {"body": "use case force reload pagehash would nt want backbonehistorygetfragment instead historyfragment nt reach history properties seems cleaner", "d": "3/2013"}, {"body": "created backbonehistoryrefresh method force reload projects override default navigate behavior reload regardless hash changed javascript extend backbonehistoryprototype refresh function thisloadurl thisfragment", "d": "3/2013"}, {"body": "method called see reference function pass option saved variable called success original success property provided overwritten new wrapped function called request completes successfully whatever domajax library using finishes success function originally passed truly exists meaning nt call success function originally passed normalized signature incredibly powerful smart way handling normalized success return varying different ajax libraries questions feel free continue commenting", "d": "10/2011"}, {"body": "implementation modify options data success field call fetch method options object several times success method options called several times per fetch increasing nesting actually good idea modify options methods always contain original data fetch method either restore original success method success optionssuccess success success model resp use another design pattern modify options", "d": "10/2011"}, {"body": "absolutely right investigate prevent perhaps extend", "d": "10/2011"}, {"body": "yes think extend work example tested fetch function options options options var model var opts extend options error wraperror optionserror model options success function resp status xhr modelset modelparse resp xhr options return false optionssuccess optionssuccess model resp return thissync backbonesync call read opts", "d": "10/2011"}, {"body": "would need happen though also prevalent etc", "d": "10/2011"}, {"body": "yes fixed well", "d": "10/2011"}, {"body": "still need add tests facing difficulty way tests currently constructed", "d": "10/2011"}, {"body": "hmm picking distinct similarities braddunbar smithclay care chime ball wax like mark issues duplicates", "d": "10/2011"}, {"body": "looks like ball wax well feel free mark duplicate issue captures looking well", "d": "10/2011"}, {"body": "smithclay thanks confirmation", "d": "10/2011"}, {"body": "nt think related issue seems granularity unbind behavior trigger think similar wookiehangover nt run specific case yet see utility removing callback specific context", "d": "10/2011"}, {"body": "braddunbar mistake thought tangentially connected issues since deal event lifecycle stuff bad", "d": "10/2011"}, {"body": "added master", "d": "1/2012"}, {"body": "interesting topic liferay every java portal uses concept portalurl parameters stored hashmap called appens serialized name parameter passes many filters prefix based portlet instance id name used parameter shared portals design quite easy implementation hard actual use way complex simple url however implementation url class also tied server bb tries server agnostic possible solution pluggable tool also collides actually use call xhr probably better solution simply implement personal", "d": "9/2011"}, {"body": "jspillers already accomplished using function property javascript mymodel backbonemodelextend example property format json define function instead string url function dynamically construct url return mymodel thisformat thisid feel achieve discussing please reopen provide pseudo code use case us discuss", "d": "10/2011"}, {"body": "could also wrap modelsset overriding", "d": "9/2011"}, {"body": "one possibility would extract entire constructor use aspects way actually add aspects top need either already implemented feature codebase example added aspect set properties without object eg obviously could done implementation method", "d": "9/2011"}, {"body": "yuchi override model problem first time hit code inside method called model constructor nt yet hit code called later model constructor code takes option attaches model method needs parent place", "d": "9/2011"}, {"body": "mean directly model creation super backbone way coffee backbonemodelprototypesetapply arguments var awesomegal new supertopmodel logs stolen behaviour", "d": "9/2011"}, {"body": "anyway way ovveride creates unnecessary references using prototype chain code correct lighter btw also use case built proposal", "d": "9/2011"}, {"body": "yuchi appreciate help think communicating point please take look model constructor matter override still called opinion every method able assume initialization occurred first time called constructor method yet called therefore logic need put things place use inside wo nt yet executed specifically initialize method sets model via object need place use inside overridden method illustrates place called since wo nt yet called", "d": "9/2011"}, {"body": "mlanza sure still relevant use method achieve functionality javascript mymodel backbonemodelextend constructor function customize set method instance thisset function attrs options override satisfy problem please feel free reopen", "d": "10/2011"}, {"body": "ok turns document ready gets triggered backbutton clicked may bbissue per se recommended ways around issue", "d": "9/2011"}, {"body": "fast fix better look problem since workaround", "d": "9/2011"}, {"body": "arvidjanson noticed currently using backbone jquery date could please give shot latest see fixes issue versions backbone jquery please reopen issue still reproducible thanks", "d": "10/2011"}, {"body": "hi problem chromium latest version glance demonstration open console navigate route second route root press back button console display time second root second result display bug chromium ideas code demonstration", "d": "12/2011"}, {"body": "atinux cowboy issues console chromium navigation think quite possibly bug within chromium", "d": "12/2011"}, {"body": "ok thanks fast answer", "d": "12/2011"}, {"body": "think inspector bug test putting alert check executed see behaviour playing routes pushstate bug nt reexecute code", "d": "12/2011"}, {"body": "marcalj problem mentioning atinux code working fine firefox ubuntu chromium exactly problem comment atinux also added consolelog routes callbacks problem still", "d": "12/2011"}, {"body": "using backbone", "d": "12/2011"}, {"body": "works properly betam", "d": "12/2011"}, {"body": "indeed like marcalj said inspector bug call route one time", "d": "12/2011"}, {"body": "mmh console getting root second root second root second root second root second root result consolelog handlers associated root second two uses back button first root page loaded first second following link second press back button getting root second root instead root expected following link second third second list console pushing back button getting root second root second root instead expected root nt appear inspector bug back button pushed handlers history effectively called chromium version firefox consolelog showing expected one call transition", "d": "12/2011"}, {"body": "test jsfiddle using executed twice without see console executing alert nt think chrome bug using chromium ubuntu", "d": "12/2011"}, {"body": "totally right alert shown expected", "d": "12/2011"}, {"body": "test case describing behavior case backbone fires reset event rather separate add events model could huge performance hit fetching large collection best way access model returned fetch bind handler reset iterate models example technique", "d": "10/2011"}, {"body": "yes add events triggered models land collection", "d": "1/2012"}, {"body": "reason choice triggering add events models particular set call added seems make sense model trigger add event soon done added collection loop causing issues testing number children list view collection length considering view listing callback fired collections add event first time fired collections length already total number passed set", "d": "3/2014"}, {"body": "let go jquery", "d": "9/2011"}, {"body": "yeah definitely worthwhile advancement", "d": "9/2011"}, {"body": "would really like change considering clash", "d": "9/2011"}, {"body": "", "d": "9/2011"}, {"body": "good solution beer", "d": "9/2011"}, {"body": "yep", "d": "10/2011"}, {"body": "nt care breaking api means quite easy search replace projects change bind could make bind alias list bind deprecatedto removed future versions", "d": "10/2011"}, {"body": "terebentina docs clear deprecated probably accessible future release", "d": "10/2011"}, {"body": "agree terebentina yuchi", "d": "10/2011"}, {"body": "", "d": "10/2011"}, {"body": "making clear also perhaps winning performance src along way", "d": "11/2011"}, {"body": "", "d": "11/2011"}, {"body": "doublemeaning bind confusing teaching backbone devs especially since functionbind part ecmascript eventbinding use different word aligning jquery would great since web devs familiar", "d": "11/2011"}, {"body": "would love went look brought", "d": "12/2011"}, {"body": "bindunbind renaming could aliased supporting main features jquery events multiple event binding passing hashes", "d": "12/2011"}, {"body": "", "d": "1/2012"}, {"body": "change committed total win method names longer work verbs callback model remember done versus bindunbind think sweetness probably worth", "d": "1/2012"}, {"body": "documentation probably use attach detach nomenclature jquery documentation perhaps something like attach event handler via might also useful call dom event dom event handler teaching backbone devs found clearly distinguishing dom events backbone events prevents lot confusion", "d": "1/2012"}, {"body": "nt think issue better opened underscorejs", "d": "9/2011"}, {"body": "apologies fence deciding post reopen", "d": "9/2011"}, {"body": "nope nt problem seeing root issue jquery ca nt really anything like reduced case though", "d": "9/2011"}, {"body": "nature event loop asynchrony nothing backbone jquery proper certainly seeing errors console catch within different stack", "d": "9/2011"}, {"body": "agree nothing backbone per se seem real jquery issue though could see piece code jquery errors would bubbled correctly gets run regardless whether set async true false trapping errors see console since one else seems issue nt ruled stupid try come minimal test case illustrate point even nothing done confirm real issue least loggeddocumented potentially saved someone else headache", "d": "9/2011"}, {"body": "content failing spec backbonerouter router routes query failedexpected mandel result undefined diff mandel undefined failedexpected ab amp cd result undefined diff ab amp cd undefined", "d": "9/2011"}, {"body": "confirmed", "d": "11/2011"}, {"body": "tbranyen informed backbonejs supports nt clearly documented anywhere need fix tagging ticket documentation", "d": "11/2011"}, {"body": "inclined let sleeping dogs lie unless get complaints think folks developing javascriptheavy web applications targeting far", "d": "1/2012"}, {"body": "jashkenas agreed issue worth noting important enough provide fix", "d": "1/2012"}, {"body": "agreed documentation comments code indicate emulatehttp trigger header parameter emulatehttp triggers header", "d": "11/2011"}, {"body": "really changed ran problem would save peoples nerves", "d": "12/2011"}, {"body": "pull req", "d": "12/2011"}, {"body": "thanks reporting behavior changed since documentation originally written", "d": "1/2012"}, {"body": "firebug console open see effect click events jsfiddle", "d": "9/2011"}, {"body": "works emptying list actually real problem render rerender listview first initialize view object passing element reference following use jquery best trying attach element another", "d": "9/2011"}, {"body": "yuchi thanks detailed response made real code much simpler html calls wrapping view", "d": "9/2011"}, {"body": "provide information many people using backbone production rails moment nt seeing behavior specifically please provide test case accurately reproduce problem", "d": "9/2011"}, {"body": "experiencing whenever navigate external url handled backbone app close tab go back open tab seeing json sure provide test case share details might give clue happening application uses delay function sync model collection server collectionfetch server ror app serves app json sync url uses headers decide needs serve whole app json array data models could problem idea browser caches latest request made server press back renders manage leave app quickly first sync request going back renders app json ideas overcome", "d": "10/2011"}, {"body": "solved problem", "d": "10/2011"}, {"body": "thanks enough", "d": "10/2011"}, {"body": "", "d": "9/2013"}, {"body": "", "d": "7/2014"}, {"body": "problem ror app solution worked thanks omenking antonlitvinenko", "d": "9/2014"}, {"body": "even better always explicitly add extension urls let browser cache json page html nt mind ie instead overwriting cache entry url otherwise miss benefits browser caching nice right", "d": "9/2014"}, {"body": "sija right changed explicit json test received problem json overwrite page idea wrong hehe tks", "d": "9/2014"}, {"body": "", "d": "2/2016"}, {"body": "yes generic event dispatchers totally great documented bit better commit nt think anything extra codewise backbone needs", "d": "1/2012"}, {"body": "afraid file generated source hopefully hard tab back play around console", "d": "1/2012"}, {"body": "test seems working would check fiddle test test latest jquery fork version sure using latest bb", "d": "9/2011"}, {"body": "sure fault ca nt reproduce behaviour anymore sorry opening bug made simple test case opening", "d": "9/2011"}, {"body": "remember jsfiddlejs jsbin friend", "d": "9/2011"}, {"body": "citing backbone source see last line assure happens every time backbonesync called searches defaulting backbonesync actually ps question support suited github issues", "d": "9/2011"}, {"body": "yes see thank chinese account stackoverflow", "d": "9/2011"}, {"body": "oh sorry possibility suggest create one stackoverflow account big active community", "d": "9/2011"}, {"body": "", "d": "9/2011"}, {"body": "seems something unrelated backbone", "d": "9/2011"}, {"body": "oh actually provoke mouseleave", "d": "9/2011"}, {"body": "fact culprit edit may suggest stop using debug use instead", "d": "9/2011"}, {"body": "thanks help problem neither backbone alert pass mouse button appear tooltip position absolute div fired mouseleave", "d": "9/2011"}, {"body": "rss actually page called rss reader contains definitions articles reader usually app web fetches content xml directly quite clear javascript even never seen app build server side script creates rss fro external app browser crawl", "d": "9/2011"}, {"body": "hey thanks quick response sorry nt write question well understand rss works theory could run backbone node use generate rss right guess getting ways reuse code written app noticed resources recommend", "d": "9/2011"}, {"body": "really know whats best show us architecture anyway yous post stackoverflow rather bb issue", "d": "9/2011"}, {"body": "project working found think looking wrong place sorry confusion thanks help alley", "d": "9/2011"}, {"body": "check recently landed commit adds", "d": "9/2011"}, {"body": "sounds good thanks still think behaviour little odd get", "d": "9/2011"}, {"body": "intended nest collections models fashion instead simply", "d": "1/2012"}, {"body": "bruth maybe start proofofconcept plugin illustrating would work way right core could still available others use", "d": "10/2011"}, {"body": "personally find whole thing quite awesome idea requiring client side computation trims requests lot status standard", "d": "10/2011"}, {"body": "tbranyen yes yuchi nt know written draft wish way show support newrevised standards", "d": "10/2011"}, {"body": "actually one jk possible contact maintainers draft get insight", "d": "10/2011"}, {"body": "emailed paul pointed mailing list read latest updates spec", "d": "10/2011"}, {"body": "created general purpose library applying patches next part create diff utility generate patch two objects would patch request body", "d": "10/2011"}, {"body": "would fantastic exploration fork think going wait bit serverside support adding backbone core", "d": "1/2012"}, {"body": "looks like rails going make heavy use patch", "d": "3/2012"}, {"body": "reference purposes latest version specification", "d": "3/2012"}, {"body": "add another voice wanting feature work using api powered dancer happily supports patch requests wish use backbone send patch requests implemented workaround allowing backbone send patch requests much nicer see ability core think", "d": "5/2012"}, {"body": "ok let reopen conversation although pull request nice thoughtthrough api would helpful point", "d": "6/2012"}, {"body": "example kick conversation rough implementation whats required producing diffpatch document optimized edge cases open console see output change rerun see different results produced things consider certain cases patch produced may larger full document somewhat counter productive send patch save anything unless patch applied larger object server prefix may useful necessary due first point control granularity patch certain depth certain condition may preferred simply replace larger object rather altering individual child memberitem", "d": "6/2012"}, {"body": "discussion bruth said certain cases patch produced may larger full document somewhat counter productive send patch save anything unless patch applied larger object server prefix interesting point think one benefit verb sequential atomic nature understand please correctly wrong processing server happens sequentially one one could see benefit application design obviously upto application implementation opinion backbone nt interfere option things consider mentioned document pointed bruth restrictions simultaneous requests whilst apply http verbs may irrelevant libraryframework something may need considerdocument also may good idea original resource becomes outdated", "d": "7/2012"}, {"body": "take look something think howwhere sync current state document copied required last saved reference generate patch", "d": "7/2012"}, {"body": "played bit initial patch implementation understand optionspatch sync filled need set manually thanks", "d": "8/2012"}, {"body": "set use patch requests sending updates server default set must defined options calling assuming update new object nonetheless still need add tests ensure behavior correct", "d": "8/2012"}, {"body": "see nt sure understand correctly currently working patch support backbone app idea let determine changed decide method use without using change event", "d": "8/2012"}, {"body": "hongymagic inferred two points lost update problem certainly concern server needs handle problem ultimately fortunately http spec two conditional request headers apply nonsafe requests resource last response header used ensure state resource changed header present used instead one side note etags generally preferred http dates since resolution second proposing logic handle go backbone something consider general dealing updates something document general solution event handler could defined track etags last modified dates resources well add correct headers outgoing put patch requests quick untested interpretation javascript keep track response etag lastmodified dates var etags lastmodifieddates ajaxsend function event xhr options var etag lastmodified", "d": "8/2012"}, {"body": "well bad think patch concurrency issues great point easy correctly", "d": "8/2012"}, {"body": "would great core", "d": "10/2012"}, {"body": "", "d": "11/2012"}, {"body": "", "d": "11/2012"}, {"body": "", "d": "11/2012"}, {"body": "", "d": "11/2012"}, {"body": "still love worried ready primetime yet aware web app frameworks support jsonpatch spec yet stilltk rails implementation sounds like basic partialput patch deleting keys etc want push forward let start pull request someone thinks good proposal simple interoperable version patch might work probably research project django rails play lift etc might able handle code thing", "d": "12/2012"}, {"body": "agreed lot work going json patch spec maintaining general purpose javascript implementation applying patches already written utility creating valid patch document given two objects question backbone patch gets applied restart conversation changes patch document syntax slows dec pm jeremy ashkenas notifications githubcom wrote still love worried ready primetime yet aware web app frameworks support jsonpatch spec yet stilltk rails implementation sounds like basic partialput patch deleting keys etc want push forward let start pull request someone thinks good proposal simple interoperable version patch might work probably research project various web frameworks code thing reply email directly view github", "d": "12/2012"}, {"body": "actually gone pushed little patch supports simple use case would send whatever pass server patch request instead complete model representation", "d": "12/2012"}, {"body": "nt know complete patch support lot web frameworks api working uses partial updates via put patch welcome", "d": "12/2012"}, {"body": "simple case current use case patch", "d": "12/2012"}, {"body": "jashkenas certainly start likely good enough people customize patch format overridden ie diff model attributes passed", "d": "12/2012"}, {"body": "missing something trying test patch overriding backbonesync use case issue chrome dev tools second xhr request nt seem attributes sent request body would expect request body", "d": "12/2012"}, {"body": "philfreo yeah following guess might need check type rather method allow trying work", "d": "12/2012"}, {"body": "philfreo fix", "d": "12/2012"}, {"body": "bruth plan continue work implementing applying patches backbonemodel", "d": "11/2014"}, {"body": "skotchio simply using also mentioned granularity patch may applicationspecific one realizes think simple enough override generate patch set appropriately option passed", "d": "11/2014"}, {"body": "fixed", "d": "12/2011"}, {"body": "thanks suggestion quite right backbone place defer call dom ready rather main app initialization point including history starting nt running dom ready added note documentation commit", "d": "9/2011"}, {"body": "yes intended behavior silent change silent allows tweak attributes temporarily without consequences see sidestep running validations update ui", "d": "9/2011"}, {"body": "dupe", "d": "9/2011"}, {"body": "yes collection property exists model knows send save fetch calls feel free add model multiple collections override function saves still happen properly", "d": "9/2011"}, {"body": "looking code seems model stores reference first collection added however added collections collection attribute changed therefore possible one super collection items builds url add items smaller collections pretty easily sound right", "d": "11/2011"}, {"body": "bjeanes able come solution need exact thing super collection models allow associate subcollections well also need able call fetch one subcollections keeping model cid set super collection tips overcame problem would appreciated", "d": "6/2012"}, {"body": "yes push code shortly created plugin lets root collection models subcollections filter super collection filter function subcollections automatically keep sync super collections replay addremove events super collection models match filter function", "d": "6/2012"}, {"body": "awesome thanks stumble across curious see implementation jun pm bodaniel jeanesreply replygithubcom wrote yes push code shortly created plugin lets root collection models subcollections filter super collection filter function subcollections automatically keep sync super collections replay addremove events super collection models match filter function reply email directly view github", "d": "6/2012"}, {"body": "well problem collection attribute model belongs one collection gets destroyed last referenced collection gets removed think could fixed tracking collections model added calling modeldestroy collections remove item also", "d": "9/2012"}, {"body": "mateusmaso try backbonerels project depends feature well master collection model caching models added collection collection binds listener models events nt matter collection property model", "d": "9/2012"}, {"body": "expect would happen", "d": "9/2011"}, {"body": "chrome safari returns outerhtml b tagit nt return object however xcode check object great outerhtml manually", "d": "9/2011"}, {"body": "afraid nt seem much backbone implementation internal function returning dom element", "d": "9/2011"}, {"body": "gotcha thanks clarification helps using zepto jquery", "d": "9/2011"}, {"body": "modeling data views nt behavior builtin default backboneevents built mixin precisely accomplish object see fit done", "d": "9/2011"}, {"body": "nt jquery global ajax options satisfy request", "d": "8/2011"}, {"body": "probably workaround override backbonesync add bit custom mapping logic thought separationofconcerns pov would nice things specific given model live model definition rather maintain separate list", "d": "9/2011"}, {"body": "patch allow override backbonesync options kick tires let know working", "d": "10/2011"}, {"body": "hey kevsmt get figured like close longer issue", "d": "10/2011"}, {"body": "yes sorry already mistake code sorry havent got back closed", "d": "10/2011"}, {"body": "problem man glad got figured", "d": "10/2011"}, {"body": "hi guillaumebiton issue backbone clearly documented use reference types inside defaults object docs pertinent line remember javascript objects passed reference include object default value shared among instances", "d": "8/2011"}, {"body": "sorry nt read part thanks pointing quickly", "d": "8/2011"}, {"body": "problem", "d": "8/2011"}, {"body": "hey similar revelation recently luckily able handle logic needed conditional believe reason handling parsing collection instead model level fetched collection", "d": "8/2011"}, {"body": "use case wrote sweet version parse models goes recursively changes attributes backbone models defined current backbone app obviously could easily duplicate logic method seems silly since really effecting models seems make sense since data put models raw filter first know mean", "d": "8/2011"}, {"body": "seems like general good approach would write method mostly delegates returns array attribute objects call instead thoughts", "d": "11/2011"}, {"body": "logic would ever want run collectionreset json directly answer never seems reasonable call parse free first rev top head thinking untested thoughts", "d": "11/2011"}, {"body": "fixed", "d": "12/2011"}, {"body": "problem still present new collection created", "d": "12/2011"}, {"body": "still problem modelparse called reset nt want repeat duplicating code collection", "d": "8/2012"}, {"body": "appears still issue even using collectionadd arrayofmodeldata fails", "d": "6/2014"}, {"body": "well server supposed return json object attributes override parse method model return attributes object based integer returning something else", "d": "8/2011"}, {"body": "nope afraid javascript dynamic language pass wrong value function get error much like one glad hear able debug", "d": "8/2011"}, {"body": "", "d": "8/2011"}, {"body": "unlike zepto swapped jquery consequence sugarjs work box backbone would require manually changing library desire write wrappers get sugarjs work underscore fundamentally different sugar modify native prototypes something like might explain unfeasible backbone try work javascript underscore array function sugarjs array foreach function", "d": "8/2011"}, {"body": "sure thing sounds like fine idea feel free go fork naturally main backbone project wo nt offer thing would fundamentally incompatible existing projects everything used version", "d": "8/2011"}, {"body": "something prevents underscore sugar coexisting box backbone typically returning wrapped objects reason app could nt simultaneously include sugar client backbone fact underscore slim tight could replace wrapper layer based sugar transparent backbone would benefits", "d": "9/2011"}, {"body": "sugar underscore absolutely coexist mostly due fact underscore avoids modifying native objects burden sugar undertaken let put way sugar coexist even prototype bottom line overwrite methods already exist important point completely understand backbone based underscore however needs basic tools lifting required underscore provides exposes methods externally plus devs use application logic well course sugar thing backbone could easily based underscore first higher profile underscore also streamlined think well backbone based perhaps ideal situation backbone would define methods needs internally underscore specialty plus backbone app benefit ability use underscore methods well hand bit overhead incurred including whole library always tradeoff bottom line definitely use together without issues", "d": "11/2011"}, {"body": "hi justok thanks reporting issue could provide reduced test case something like would greatly assist us assess issue", "d": "8/2011"}, {"body": "hi tbranyen thanks focus issue provide simple example explain problem later", "d": "8/2011"}, {"body": "test example see problem code thanks", "d": "8/2011"}, {"body": "maybe ca nt find problem download code compute run find problem thank much", "d": "8/2011"}, {"body": "issue", "d": "8/2011"}, {"body": "see", "d": "8/2011"}, {"body": "thanks filiptepper looking hopefully get jsfiddle accurately represents problem", "d": "8/2011"}, {"body": "tbranyen actually came solution though minor rewrite application required", "d": "8/2011"}, {"body": "using zepto problem using zepto change jquery problem disappears", "d": "11/2011"}, {"body": "using jquery back", "d": "11/2011"}, {"body": "seems fixed master last jsfiddle works fine", "d": "1/2012"}, {"body": "change code still seeing issue remove parameter justok mentions backbonejs unbinds work using jquery code like unbind using javascript events keydown mypopuptext keystroketextarea keypress mypopuptext keystroketextarea click mypopuptext clicktextarea click btnsubmit submitfunc click close closepopup closepopup function consolelog closing popup mypopuptext unbind keydown mypopuptext unbind keypress mypopuptext unbind click close unbind click btnsubmit unbind click mypopupholder fadeout", "d": "1/2012"}, {"body": "oh wow absolutely problem long include backbone include underscore jquery add noconflict loading scripts fine", "d": "8/2011"}, {"body": "issue one projects", "d": "8/2011"}, {"body": "stumbled third time issue current behavior definitely needs changed write patch agree", "d": "9/2011"}, {"body": "duplicate sure agree jeremy reasoning namely would make view inconsistent case problem arises bulk update specific order meaning logic change fired change b leads inconsistent state set kind error prevents set case apply bulk change unexpected behavior opinion would make sense consider change requests", "d": "9/2011"}, {"body": "hard time understanding problem could please provide code example illustrating backbone nt work way wrote test see change event triggered every attribute seem case setting individually naturally would expect change event fired immediately thanks additional clarification provide issue", "d": "9/2011"}, {"body": "updated jsfiddle provided tests problem referenced issue try describe seen second assertion need calculate value case sum either b change moment much dependent order bulk arguments passed also could different thus makes model inconsistent ca nt say sure behavior wrong others expected behave differently cases like thanks hope example clarified issue", "d": "9/2011"}, {"body": "trouble thing however believe jeremy correct firing immediately set expected behavior bulk update behavior depends attributes updated test cases pass change jeremy talking inconsistent state sounds like could case example something like view var av bv modelbind change function model data av data return av bv modelbind change b function model data bv data return av bv event fired everything updated inconsistent state change fired bv would still old value result would expect new value nonetheless must confusing many people bringing issue maybe documentation could emphasize point additionally behavior people expect modelbind changea fires completion call set may actually better make default behavior something pass like modelbind change async get old behavior backwards compatibility issues people using oh man", "d": "9/2011"}, {"body": "run problem today hard time debugging backbone changing attribute change attr handler competely weird handlers called random order previous values messed", "d": "10/2011"}, {"body": "use form databinding places silent triggered events attributes databinding trigger led trouble couple times forgot trigger changes attributes using moment", "d": "10/2011"}, {"body": "jashkenas seemingly understand jish trying explain obvious calling intended behavior model state updated consistently individual change events without guarantee ordering generic fired jish commit seems solve problem also wasted headscratching period time tracing always understood bulkset ie atomic change operation interpretation otherwise signature would thus since unordered nonsensical individual attribute events triggered attributes changing please enlighten application current behavior otherwise please accept jish pull jsermeno example convincing could elaborate part model state view state example seems support fixing issue rather keeping current behavior accepting fix current behavior could reconstructed simply calling ie sequential calls simpler tighter faster trying fix wrappers etc also provides ordering guarantee", "d": "10/2011"}, {"body": "yes modelset country se year also expected able reference latest value year example even though view listened country attribute changes jish thanks pull", "d": "10/2011"}, {"body": "tribalvibes probably difference perceived behavior event handler part view state param passed event handler model state believe following meant inconsistent view state example two parts view state event handler implies type behavior changes example returns current view state however bulk update done view state model state would dictated result view state model state sync event handler gets fired value actually gets set bulk update view state inconsistent model state firing agree may entirely intuitive however nt think example worry also backwards compatibility consider since many applications developed model", "d": "10/2011"}, {"body": "jsermeno could desired behavior equally well implemented calling need make ordering explicit otherwise seems stale cached value bug view code could nt merely refresh complementary value using eg although may mean needing make small changes app coded seems obviously consistent api simple efficient implement behavior explicitly whereas everyone else current behavior obviously misfeature easy efficient work around also hit dynamic data bindings model control input may want update multiple attributes depending values ie may mutate passed batch state change applied atomically consistently model clients views see via event callbacks", "d": "10/2011"}, {"body": "commit make fix give spin let know working", "d": "1/2012"}, {"body": "nope afraid scope backbone fancy querying observation deep json properties arbitrary javascript objects matter would require query language looking json objects based string handling arrays well objects deep equality comparison cycle detection every time feel free fire custom change events inner value changes", "d": "8/2011"}, {"body": "thu aug pm jashkenas lt reply replygithubcom wrote nope afraid scope backbone fancy querying observation deep json properties arbitrary javascript objects matter would require query language looking json objects based string handling arrays well objects bind change storebook title dochange gt pretty attractive deep equality comparison cycle detection every time incoming json unlike yaml cycles think would reasonable enforce require single documentsobjects cycles moment simple bit json returned foo b bar c b backbonejs wo nt allow add listeners fooa foo said current solution code class railsmodel extends backbonemodel initialize attributes gt set makenestedattr attributes false silent true makenestedattr attributes alltrue gt data k v attributes vconstructorname object data k new railsmodel v else data k v data parse attributes gt makenestedattr attributes true get field gt val first true p fieldsplit first val super p else allows returning undefined rather exception parent deeply nested node exist val val valget p else undefined first false val allow heirarchical setting objects example modelsetfield rootchild create path exist setfield field value silentfalse gt path fieldsplit node undefined val p fieldsplit node val val nodeget p val data val new railsmodel data p val nodeset data data data p value nodeset data silent test field trigger change field model value trigger change model perfect allows handle simple type cases example regards brad feel free fire custom change events inner value changes reply email directly view github", "d": "8/2011"}, {"body": "fallback exists initial page load even pushstateenabled browser sent link someone hashchange enabled browser history begin work correctly provide failing test case still sure exactly failing case nt supposed route matches", "d": "1/2012"}, {"body": "closing ticket reopen test case provided", "d": "1/2012"}, {"body": "hi hiddendeveloper thanks taking time report issue backbone please provide reduced case something similar assess potential bug also within test please show expected outcome resulted fixed using patch tested remove using basic example unable trigger abnormal behavior", "d": "8/2011"}, {"body": "add items collection call remove collectionmodels items left remain remove using incremented index delete collection index left next index pointing position nothing deleted see", "d": "8/2011"}, {"body": "want remove whole collection right way problem special case remove works wrong think best way handle case add smth like", "d": "8/2011"}, {"body": "asan remove work correctly hiddendeveloper falling victim one fundamental javascript rules regarding reference types since funneling exact array removed causing wonkiness check open console find removed correctly", "d": "8/2011"}, {"body": "tbranyen looks like leaky abstraction fix without overhead imo better fix ofc models", "d": "8/2011"}, {"body": "thanks feedback also little bit reading regarding reference types", "d": "8/2011"}, {"body": "pretty simply rectified counting array rather backbonecollectionremove method forked proof concept", "d": "8/2011"}, {"body": "fixed copying argument models still removed correct order", "d": "1/2012"}, {"body": "see previous tickets bulk operations", "d": "1/2012"}, {"body": "using backbone server fine without need disable ensureelement check views like set right require backbone nodejs", "d": "8/2011"}, {"body": "nt believe truly reusing backbone views server use jquery server render views short completely reusing complete mvc stack server way client backbonejs file current state comply commonjs jquery set server course needs require tbranyen wrote using backbone server fine without need disable ensureelement check views like set right require backbone nodejs reply email directly view github", "d": "8/2011"}, {"body": "morriz ca nt include jquery require load backbone", "d": "8/2011"}, {"body": "jashkenas added provide npm access seems like require jquery commonjs would go backbone able run either zepto jquery think best approach requiring backbone also think amd registration preferred way going forward let move conversation", "d": "10/2011"}, {"body": "still giving trouble feel free send us failing nodejs test case add test suite", "d": "10/2011"}, {"body": "exactly thing patching bb dont want global jquery object nodejs", "d": "1/2012"}, {"body": "hi disturbs also think model updated call server succeeds current version one following achieve pass save method error callback performs rollback thanks previousattributes method makes model change change back initial state like make server return object unchanged case error makes rollback automatic still makes object change change back initial state like either use save perform call directly server case success server returns updated object json use invoke modelset update model working fine ensures us model always sync server makes lot code write", "d": "10/2011"}, {"body": "sure problem htink internal plugins able iternal storage without calling server could get conflicts sad see movements backbone development", "d": "10/2011"}, {"body": "open new issue searched found would also like fixed reason previousattributes working clues pass data hash update modelsave error occurs call error callback even modelpreviousattributes gives new values show consolelog anything failing correctly ps really want fixed", "d": "12/2011"}, {"body": "probably function nt passed also check approach javascript var oldvalues thismodeltojson hope helps", "d": "12/2011"}, {"body": "thanks marcalj exactly", "d": "12/2011"}, {"body": "scoop backbone wants optimistic renders default situation validate clientside sure errors impossible infrequent gain whole new class responsive user interface rendering optimistically always going cases need wait server respond proceeding previously accomplished using model save finished fine nicer simply say", "d": "1/2012"}, {"body": "hmm interesting solution test official new release thanks", "d": "1/2012"}, {"body": "tested works awesome thanks jashkenas", "d": "2/2012"}, {"body": "way globally disable breaking change many cases treated classic functionality impossible without lot code editing far tell please correct wrong creates hurdle wanting upgrade get features fixes functionality feel default things already allows people upgrade easily still providing new functionality alternatively setting could add would close second solution", "d": "2/2012"}, {"body": "fearphage definitely breaking change documented think important backbone helps make interface responsive possible default always monkey patch reverse", "d": "2/2012"}, {"body": "braddunbar read understood section breaking change mixed new cool stuff guess nt called prominently expected clarity sake applies correct documentation mentions creation destruction really wish enableable feature instead feature workaround get back things used work curiosity people using handle errors remakereadd component back ui remove falsely adding", "d": "2/2012"}, {"body": "proposed global return classic functionality javascript function prototype slice create destroy save function name function method prototype name function var args slicecall arguments options argslength amp amp args argslength backbonemodelprototype slice untested may miss cases road head also sample code believe wanted undefined working interested", "d": "2/2012"}, {"body": "curiosity people using handle errors remakereadd component back ui remove falsely adding think best thing case failed request notify user retry stepping frequency successive attempt clarity sake applies destroy create save correct documentation mentions creation destruction yes also takes option also sample code believe wanted options arguments arguments undefined meant handle keyvalue arguments eg case third argument", "d": "2/2012"}, {"body": "think best thing case failed request notify user retry stepping frequency successive attempt nt account unrecoverable errors although inconvenient feels like poor default read hack make ui misrepresent happening back end feels like hack improve perceived performance missing something simplifying feels like treating symptom opinion yes collectioncreate also takes wait option thank meant handle keyvalue arguments save eg modelsave foo bar case options third argument understand", "d": "2/2012"}, {"body": "fearphage situation requests may expected fail frequently means change calls pass give desired behavior explicitly", "d": "2/2012"}, {"body": "line add", "d": "9/2011"}, {"body": "sure calling dom ready", "d": "9/2011"}, {"body": "added code line local version tested calling backbonehistorystart jqueryready still failed without fix", "d": "9/2011"}, {"body": "ran issue chrome backbone version javascript document ready function var new var new backbonehistorystart results uncaught typeerror call method start undefined", "d": "10/2011"}, {"body": "verify bug exists steps reproduce load page say googlecom nt matter long page browser history prior backbone app load backbone app start history navigate another backbone route hit back button notice goes back page step", "d": "10/2011"}, {"body": "unscene hit exact bug routers instantiated lines like perhaps bug routers created correctly", "d": "11/2011"}, {"body": "added line lukevenn mentioned instantiated router cmwelsh mentioned seems resolved issue", "d": "12/2011"}, {"body": "yes need router else backbonehistory supposed raise error", "d": "1/2012"}, {"body": "sounds like want set event", "d": "12/2011"}, {"body": "afraid change event designed triggers state changes like fire event different purpose like every time tagged clicked fire event", "d": "1/2012"}, {"body": "know use global variable donot want want customize thanks", "d": "8/2011"}, {"body": "found solution using bind pretty working", "d": "8/2011"}, {"body": "already case extra arguments provide trigger get forwarded listeners event javascript var object extend object backboneevents var callback function consolelog arrayprototypeslicecall arguments objectbind myevent callback objecttrigger myevent", "d": "8/2011"}, {"body": "rulfzid case nt calling backbonecollection code calling ca nt add arguments use options object pass extra data sure best solution options nt really meant sure better wrapping callback another anonymous function something like work javascript shipsbind add function ship collection options alert shipget name optionsfoo shipsadd name flying dutchman name black pearl foo bar", "d": "8/2011"}, {"body": "thanks guys almost shesek like var foo function ship foo bind foo myobj bar shipsbind add foo", "d": "8/2011"}, {"body": "thanks thanks nt think need junk backbone objects sort thing order help ie said feel need add objects feel free", "d": "8/2011"}, {"body": "cool though pretty easy write objectgetownpropertynames shim shown sounds like happy live incompatibility skin back", "d": "8/2011"}, {"body": "yep thanks help", "d": "8/2011"}, {"body": "pity mainstream backbone nt include workaround still minimum version enterprises ie major browser business hand big deal modify backbone usage enterprise software another workaround adding problematic methods prototype explicitly", "d": "6/2014"}, {"body": "good idea changed request", "d": "1/2012"}, {"body": "sorry clear need attributes set handler ex validatecomplete called im looking event fires right model validate method completes", "d": "8/2011"}, {"body": "best bet far using underscore defer end validate one line simple readable", "d": "8/2011"}, {"body": "model fire event attributes change adding event would entirely redundant hopefully simply use events achieve effect", "d": "1/2012"}, {"body": "well view layer extremely lightweight copied backboneview code stripped comments got lines code constructor function linebyline generate unique id view attach special options model collection el id attributes classname tagname directly view object make sure dom element around set event delegation call initialize could easily write view class follows model even better come something new better need selector engine dom manipulation events believe find various subpackages ender js could mootools prototype even flavor words reasonably trivial swap jqueryzepto say really worth try introduce abstraction layer top current view system", "d": "8/2011"}, {"body": "rulfzid thanks explanation write view jqueryzepto used view also backbone sync history also need rewrite also really dont like rewriting whole objects approach require porting changes classes view history sync every new version backbone freeze version also really great actually think dead simple introduce abstraction one class domevents one class ajax default implementation forward requests jquery api order plug something different required write lines code think approach submit pull today enough time", "d": "8/2011"}, {"body": "right nt think sync history nt clear affiliation backbone use like think worthy project say time go nothing else interesting libraryagnostic fork backbone wild", "d": "8/2011"}, {"body": "think interesting worthwhile idea pursue backbone tied single library even one popular functional jquery others exist increases adoption backbone dogma personally think would best list dependencies currently exist jqueryzepto use criteria abstraction think backbone default bundling jquery adapter system adapters could swapped dynamically would slick", "d": "8/2011"}, {"body": "submitted pull request rejected feel free cherrypick change fork", "d": "11/2011"}, {"body": "needing something like support something like ember also noconflict versions jquery people like call jquery somewhere besides windowjquery currently impossible backbone without patching copy library think twobitfool pull request reconsidered simple definitely fixes issue aligns generally good practice using noconflict libraries", "d": "12/2011"}, {"body": "backbone also works ender remember correctly", "d": "1/2012"}, {"body": "jashkenas nt think initial issue specific ember", "d": "1/2012"}, {"body": "yes big believer something lightweightsmall backbone adding level abstraction make mapping jquery ember zepto easier already incredibly easy abstraction looking already exists jquery api libraries choosing adopt someone could make object mootools behaves like jquery able drop directly backbone well", "d": "1/2012"}, {"body": "think example like object mootools actually argument api using different libraries made mootools wrapper behaves like order use backbone would either put request added line backbone assigned wait new version including change modify local version backbonejs library added line assign object windowjquery zepto ember loading backbonejs none options nice explicitly telling backbone object ish library opinion said flexibility simply line backbone goals terms simplicity get think would nice feature us would use completely transparent would", "d": "1/2012"}, {"body": "want way tell backbone use dom manipulation ajax object would great pull request send definitely line backbone goals", "d": "1/2012"}, {"body": "jashkenas nt twobitfool pull request get reopened another reason nt like could address different way", "d": "1/2012"}, {"body": "yep want whichever pull request ends driven someone real project real library mind otherwise usually end implementation nt actually work", "d": "1/2012"}, {"body": "fair enough definitely provide incoming shortly question good name would twobitfool options would", "d": "1/2012"}, {"body": "let make function value", "d": "1/2012"}, {"body": "like personally", "d": "1/2012"}, {"body": "ok", "d": "1/2012"}, {"body": "want sounds incredibly confusing imo", "d": "1/2012"}, {"body": "tbranyen sorry nt seen reply wrote mine nt meaning ignore ok seems little generic instance backbone also uses underscore internally also library could injected though seems less use suggesting unfortunately nt better idea maybe", "d": "1/2012"}, {"body": "backbone ca nt load without underscore ca nt method change", "d": "1/2012"}, {"body": "well agree tbranyen name confusing let hash merging went ahead made pull request look change name need", "d": "1/2012"}, {"body": "tbranyen recognize underscore different case still think begs question set library", "d": "1/2012"}, {"body": "like", "d": "1/2012"}, {"body": "changed name seemed best jashkenas think", "d": "2/2012"}, {"body": "ok fair enough fixes issue created functionality interested seeing", "d": "2/2012"}, {"body": "understand requesting would like use existing element dom matches currently undesirable simply provide selector thisel since specific case sure element exists feel current approach obvious happening instance developer would assume would perform kind magic hood perhaps would like create memory element nearly identical one currently dom perform simple going low prioritize simple workaround like others weigh kind change well", "d": "8/2011"}, {"body": "think woud better use someid append thisel append preserve existing content someid append generated backboneviewrender", "d": "8/2011"}, {"body": "oh issue would duplicate id dom set someid try append existing element id likely going cause trouble", "d": "8/2011"}, {"body": "current master next release made change make easier simply set view within", "d": "1/2012"}, {"body": "hi figured sorry clutter problem backbonecollection def commented everything works", "d": "8/2011"}, {"body": "problem saved going rabbit hole", "d": "11/2011"}, {"body": "use mycollectionget modelid mycollectiongetbycid modelcid implemented maps think cid client id automatically generated collection models saved yet nt id maybe set cid key override way backbone assign", "d": "10/2011"}, {"body": "reference indexes stored maps", "d": "10/2011"}, {"body": "yes collections ordered arrays maps indexed feel free use whatever keys like models", "d": "1/2012"}, {"body": "chrome nt like either", "d": "8/2011"}, {"body": "discussing irc chrome bug", "d": "8/2011"}, {"body": "var workspace backbonerouterextend routes test test new workspace backbonehistorystart", "d": "8/2011"}, {"body": "missing zepto event lib", "d": "8/2011"}, {"body": "support feature theory issue comes operations depend usage template contextdata passed template quite diverse across implementations current solution override method one possible solution facilitate use templates prevent redundant operations check defined initialization would created operations immediately depends would occur", "d": "8/2011"}, {"body": "handle nonwrapped thisels helper method backboneview uses template function define every view renders view replaces existing thisel newly rendered element uses view template fn app jquery templates therefore returns jquery object use render method", "d": "8/2011"}, {"body": "really like feature well perhaps simpler syntax though backboneviewextend el null take advantage document fragments somehow", "d": "8/2011"}, {"body": "hi feature two views unordered list list items first issue attaching events view element ended attaching events list items list views another adding attributes supported besides set dataattributes contain specific model attributes item view render method obviously would prefer using template least convenient template like option render template files server side implement mechanism creating well mimic backbone view", "d": "12/2011"}, {"body": "", "d": "1/2012"}, {"body": "like el null fix find using tagname get around", "d": "1/2012"}, {"body": "", "d": "1/2012"}, {"body": "large part advantage using backbone views fact element available times regardless whether template rendered many views multiple templates regardless wether view present dom allows create add views dom rendering later sure events bound correctly delegated come good strategy allows view complete templates preserving characteristics let talk must allow root element exist without render contents template may depend data might arrive later must allow view easily multiple templates", "d": "1/2012"}, {"body": "use workaround", "d": "7/2012"}, {"body": "regarding jashkenas requirements listed view ever needs one template templating engine supports nested templates like handlebars partials template rendered data returned server fact great way make app feel responsive render instantly click render data comes back real trick feature events since bound root element good thing template render create root elem subsequent renders mean rewire events might worth testing see hurts performance case backbone could support feature majority whose templating engine meets certain requirements would certainly improvement current workflow putting part html template js view", "d": "7/2012"}, {"body": "fguillen yeah since backbone started render template moment called replacing add dom rerender changed parts thismodel finally fetched every full render called even done calling goal jashkenas imo achieved much better convention view dommable called reduces coupling view class view template former would otherwise friends postponing dom stuff also allows unit test without useless dom creations", "d": "7/2012"}, {"body": "geddesign requirements mean simple solution would touch let people whatever want whichever method choose conventionally end call people wish available right opposed personally nt neither wish nt like tagname coupling js html regardless future today already ignore ensured element calling", "d": "7/2012"}, {"body": "jashkenas allows create add views dom rendering later sure events bound correctly delegated viewel given following document test following var demo demo var el var template click demoappend el elon click button function alert works function clonecopyevent src dest clonecopyevent elget templateget elreplacewith template following happen empty div created empty div attached dom event delegated empty div template div button replaces empty div click button event initially attached empty div works directly jquery source come good strategy allows view complete templates preserving characteristics let talk must allow root element exist without render contents template may depend data might arrive later must allow view easily multiple templates fully familiar backbone get last multiple templates part solution covers everything else anyway pov current behavior able attach events effectively nothing niche hold hand feature annoying practical implications stupid divs everywhere coupling template html application logic coupling template root elements application logic etc people binding events directly easy ensure template loaded bind events nt bind events directly though backbones click something feature even less issue problem whole div business solving also assuming problems solving existed obviously problem ca nt clean templates also ca nt time solution biased towards one frankly rather event handling integrated views annoying work views", "d": "4/2013"}, {"body": "lots issues nt think everyone thought help maintain backbone layout manager ability set unwrap problematic us node element multiple top level elements become nodelist probably would expect event binding becomes complicated top level elements well bind events top level elements separately losing benefit delegation bind parent worry cleaning elements another weird thing rerendering end first element list anyways lot issues technique hard generalize simplify problem without lots documentation", "d": "4/2013"}, {"body": "posterity supply function lose event delegation tbranyen seen code initial reaction would stay away breaks convention likely lead strange behavior since views written expecting legitimate use cases looking way elegantly require top level element", "d": "4/2013"}, {"body": "tbranyen use case needing templates one root element inside ca nt single wrapping element empty div like forced moment case think want template essentially replacement since every element would pretty normal single parent element regardless depth go personally see concatenation sets elements something outside scope template template somewhat equivalent custom tag body replacement extremely niche use case since means nt things like script tags things like wrapping element page instead stuff head imo bad practice", "d": "4/2013"}, {"body": "also maybe worth noting passed options could potentially quick oneoff views", "d": "4/2013"}, {"body": "like wrap element useful almost views templates nt include wrapper element nt think complexity view guess needs wrapper get worth could see lot bugs coming feature since backbone nt knowledge tempting system going feature similar mind better template opinions build feature", "d": "4/2013"}, {"body": "tgriesser nt template function produce function needs called data rstankov multiroot templates braddunbar following current implementation called view initialization judging code seems moment support multiple roots one template since lot assumptions made one element existing essentially reason multiple tags inside root template forced current wanky implementation backbone must generate root element remove requirement remove multiple roots argument think confusion stems see hacks get current system kindof work corner cases completely unacceptable currently essentially really difference following backboneviewextend tagname li classname something somethingelse compared backboneviewextend second flexible much better job splitting markup looks backbone glues together would deprecatedremoved properties second method", "d": "4/2013"}, {"body": "srcspider function called current view context", "d": "4/2013"}, {"body": "srcspider problem deprecating start using since jquery collection fairly easy problem element rendered active rendering happening relates rendering system using", "d": "4/2013"}, {"body": "rstankov problem element rendered active rendering happening relates rendering system using specific really following problem current system solving anything replacing original div nt", "d": "4/2013"}, {"body": "srcspider currently always sure set since called really early knowing interesting stuff example insert view dom content content arrives render view content know insert render slower render insert cases helped fetching view element template need evaluate template data add conditions complicate workflow nasty dom element replacement event binding also good thing current system call render n times content view changes element", "d": "4/2013"}, {"body": "rstankov example insert view dom content content arrives render view content would still empty default div replaced proper template replaced anything empty div replace div later nt see difference disadvantage fetching view element template need evaluate template data add conditions complicate workflow nasty dom element replacement event binding mean evaluate template data working empty div nt see dataanything actually inserting stuff using templates element using templates populate difference current way things inserting said div dom since step processing template nt really change two approaches currently place contents template inside div hence container hardcoded application second approach replace div template copy events nt require markup hardcoded application using templates throw content container using templates define actual container nothing changes use default div regard add conditions complicate workflow nasty dom element replacement event binding conditions yes would nt call want replace template nt see problem said feel current approach heavily based holding hand practical needs views nice clean independent markup able make application changing template alter way application structured ie changing using using clean using pattern add classes attributes markup going though programming hoops needing duplicate code support multiple approaches markup thinking difference probably implemented simply extra method would use want template replaced inserted", "d": "4/2013"}, {"body": "basic prototype implementation discussion purposes javascript appview backboneviewextend would use base view eg javascript function windowjquery", "d": "4/2013"}, {"body": "instead trying replace original view element define tagname function make return tag root element template example template something like html render function insert template contents working example", "d": "8/2015"}, {"body": "jvitela solution works well sometimes adds little delay dont use partial template root tags generated view moreover still workaround started learn backbone one week maybe miss something solution one saw wich fully functionnal surprising think essential feature native way define root tag template template view yes please give us example possible associated pull request one use template el thanks", "d": "9/2015"}, {"body": "hi ylacaute native way define root tag template backbone template agnostic free choose whatever want template system imposible provide generic way achieve", "d": "9/2015"}, {"body": "terminology throwing try thinking templates views backboneviews controller prefer use templateview backboneviews usually tied specific dom element whatever floats boat", "d": "8/2011"}, {"body": "matter backbone definitely modeled mvc strict adherence much like django regard free set architecture meaningful way related project done projects nt use routers using views without dom definition must follow order use framework found using backbone find missing component need order satisfy architecture nt feel though concept controller necessary want something like one make constructor work", "d": "8/2011"}, {"body": "tbranyen sometimes use object orchestrate coordinate number views call controller nt particular pattern codified backbone regular js object nicely", "d": "8/2011"}, {"body": "protip javascript", "d": "8/2011"}, {"body": "thanks comments answers line mine put c wherever fancy", "d": "8/2011"}, {"body": "nope see", "d": "8/2011"}, {"body": "anyone runs across page suffered backbone error nt instantly know meant definition list common ones", "d": "10/2011"}, {"body": "yep workaround simply rerender page content already rendered route check make sure rendering needs happen going", "d": "8/2011"}, {"body": "come two solutions check view looks exactly intends render nt rendering kind state holder tells first time app navigates nt rendering guess better solution mind checking rendering needed opinion mine pretty ugly compared simply telling navigate", "d": "8/2011"}, {"body": "three days consideration made ok next time make pull request instead", "d": "8/2011"}, {"body": "well seems simplest solution would change line preparemodel function would run validation attrs passed custom set functions", "d": "8/2011"}, {"body": "alternative solution nt involve futzing backbone core override parse javascript var mymodellist backbonecollectionextend model mymodel parse function response xhr return map response function attrs return new mymodel attrs would bypass validation preparemodel would receive preformed instances backbonemodel", "d": "8/2011"}, {"body": "agree good workaround think still bug proposed fix sounds good", "d": "8/2011"}, {"body": "seems like reasonable request mark bug", "d": "8/2011"}, {"body": "jsfiddle test case described", "d": "10/2011"}, {"body": "similar rulfzid suggests coercion modify extend passed rather overriding", "d": "10/2011"}, {"body": "try bind undefined function callback error want see", "d": "8/2011"}, {"body": "would correct check anyway throwing exception function", "d": "8/2011"}, {"body": "really fan adding functionality support external unrelated component anyone using rails would benefit feature unless course following pattern case override app add functionality basically patch", "d": "8/2011"}, {"body": "maybe put much emphasis rails earlier think change could provide value backbone users example let say want create resource also send parameters related resource ex csrf authenticity token much cleaner placing resource data scope vs", "d": "8/2011"}, {"body": "better argument would one augment json prior sent without needing override", "d": "8/2011"}, {"body": "good question particular example authenticity token applied post put requests jquery achieved ajaxsend function javascript add authenticitytoken parameters submitted via ajax document ajaxsend function event request settings nothing get request rails nt need authenticity token ie converts request method post settingstype post settingstype post settingstype put settingstype put settingscontenttype applicationjson amp amp typeof json undefined apply authenticity token json requests requires library var originaldata settingsdata jqueryparsejson settingsdata originaldata authenticitytoken authtoken settingsdata jsonstringify originaldata else would guess js frameworks prototype etc similar function", "d": "8/2011"}, {"body": "solution could equally solution scoping model data saying could nt useful feature solution transparent say supported feature also disparity augment whether dynamic static always something sent payload latter could solved relatively easily handler static setting augmenting dynamic data something predicted across implementations example solution sending csrf token would typically header context grey data sent model part model schema vs data required validationauthenticationauthorization would extra data option passed corresponding crud request would access quite things consider feature like implemented", "d": "8/2011"}, {"body": "yes agree way nonschema data attached model requires thought enough experience backbone yet propose solution somehow nt feel right use purpose also raises question whether updating nonschema data trigger event", "d": "8/2011"}, {"body": "might missing something nt tojson functions model collection javascript var book backbonemodelextend tojson function return book clone thisattributes generally javascript var scopedmodel backbonemodelextend tojson function thisscope null thisscope undefined throw new error use scopedmodel without scope return thisscope clone thisattributes var scopedcollection backbonecollectionextend tojson function thisscope null thisscope undefined throw new error use scopedcollection without scope return thisscope thismap function model return modeltojson use scopedmodels make sure add proper scope property scope model data like seems want", "d": "8/2011"}, {"body": "solution", "d": "8/2011"}, {"body": "thanks closing ticket", "d": "8/2011"}, {"body": "reference saved early nt happen every event handler calls performance difference probably relatively minimal cleaner code still unsure would cause stack overflow", "d": "8/2011"}, {"body": "must poorly written test causing issue since using patch without issue know test culprit", "d": "8/2011"}, {"body": "nt time find yet especially since opening tests locks browser quite long time", "d": "8/2011"}, {"body": "seems affect model validation tests lot collection tests sure yet typical stack trace firefox performance paranoia rather desired semantics event system tempted revert", "d": "8/2011"}, {"body": "supply code shows using altering array directly", "d": "8/2011"}, {"body": "wrote really simple version explained ca nt reproduce issue tells definitely something else code thanks response closing ticket", "d": "8/2011"}, {"body": "u idea whats causing code exactly issue code something like var tmparray modelget myarray tmparraypush item modelsave myarray tmparray binding modelbind change myarray wont trigger", "d": "11/2011"}, {"body": "never exactly figured one solution create another attribute sake changes update field well trigge view", "d": "11/2011"}, {"body": "nt deep copy array get push returned array edits models internal array set detects changes emits events javascript confusingly represents variables references values additionally several values immutable including arrays nt make deep copies objects editing edit values inside models cache well failing test case var model new backbonemodel modelset ar modelon change function consolelog changed get value change set var ar modelget ar arpush modelset ar ar meanwhile change getter make deep copy instead works fine", "d": "1/2013"}, {"body": "assuming key bound window looks like work needs method view object think manually bind scroll event window javascript var example backboneviewextend initialize function var self loadmore function consolelog loading", "d": "8/2011"}, {"body": "first case view right", "d": "8/2011"}, {"body": "yes correct work", "d": "8/2011"}, {"body": "javascript class windowmainview extends backboneview el window events scroll render initialize gt bindall render render render gt consolelog scroll javascript routes welcome welcome gt new mainview loading main page appear console scroll scroll nothing happened", "d": "8/2011"}, {"body": "try removing code leave blank let make sure understanding method gets called page load explicit call method try removing code also think need replace line pretty unfamiliar coffeescript syntax perhaps implicit missed something else either case believe needs jquery object raw dom node object", "d": "8/2011"}, {"body": "yep works thanks", "d": "8/2011"}, {"body": "sounds fine feel free add function collections backbone nt going come functions outofthebox every use case collections need taken whole validated feel free", "d": "8/2011"}, {"body": "jashkenas file pull req would consider integrating one wo nt negatively impact folks avoid could really handy", "d": "8/2011"}, {"body": "fraid easy enough add backbonecollectionprototype", "d": "8/2011"}, {"body": "concerned nt really rocket science days github wondering worth effort general case sounds like", "d": "8/2011"}, {"body": "krislab hi everyone comment want share solution problem people short solution available github repo backbonecollectionvalidation", "d": "3/2014"}, {"body": "probably feel free ask question mailing list irc channel", "d": "8/2011"}, {"body": "route support regex could technically however agree general statement would probably helpful allow type thing", "d": "8/2011"}, {"body": "could use regex wont work", "d": "8/2011"}, {"body": "javascript var routertest backbonerouterextend initialize function options backbonerouterprototypeinitializecall options thisroute public public thispublic public function var hash backbonehistorygetfragment alert hash var newhash hashreplace hash newhash thisnavigate newhash true else alert done test new routertest backbonehistorystart testnavigate public true example show get working regex always prefered define route within router initialize method happy bonus allowing regex syntax", "d": "8/2011"}, {"body": "imo code makes sure always use version url reason add anything like said want could monkeypatch backbonehistory getfragment trim fragment applicationwide", "d": "8/2011"}, {"body": "thanks nowells snippet handling route pain shesek patch", "d": "8/2011"}, {"body": "amrnt welcome totally agree shesek real solution problem consistently link page patch backbone always strip add trailing slash desire leading slash never problem set proper root amrnt might want close issue help documentcloud guys keep handle open tickets", "d": "8/2011"}, {"body": "actually trailing slashes nt dev problem user problem users type trailing slashes damn time miss yes technically two separate resources users nt care practice never kind flag router would good like accepttrailingslashes true would nice make backbone seem lot sane route handling", "d": "12/2012"}, {"body": "abritinthebay use provide optional trailing slashes hope works", "d": "12/2012"}, {"body": "strip trailing concurrent slashes redirect retrigger nt want spiders caching people sharing urls slashes end p surprised github nt redirect google said treats separate resources", "d": "12/2012"}, {"body": "exact thing tried debug result", "d": "7/2011"}, {"body": "worth able reproduce chrome macintosh intel mac os x khtml like gecko still problem master branch please respond useragent specified qunit", "d": "8/2011"}, {"body": "hey underscorejs provides methods could pop unless defined comparator function pushes models onto collection push method probably unnecessary function looking adding beginning collection think adding model index shown example best way max size seems like fairly specific use case could nt store value attribute collection", "d": "8/2011"}, {"body": "max size yes created sub class collection others know done maybe aliases operations common look push pop want implement behaviour completely necesary makes life code much easier", "d": "8/2011"}, {"body": "would love see added", "d": "9/2011"}, {"body": "enhancement close call push pop shift unshift nice already accomplish multiple models generally let close ticket folks asking really good use cases need let", "d": "1/2012"}, {"body": "certainly looked problem using see return removed element ala pop end wish used would much nicer inline js missing something please feel free point direction way would cleaner fashion", "d": "2/2012"}, {"body": "seem easy enough implement fairly well defined however defined likely expect well things might get bit slippery", "d": "2/2012"}, {"body": "pop push shift unshift ended ticket looking", "d": "2/2012"}, {"body": "adding", "d": "2/2012"}, {"body": "added thanks nudge", "d": "2/2012"}, {"body": "quick cheers jeremy", "d": "2/2012"}, {"body": "thanks jeremy", "d": "2/2012"}, {"body": "think reason multiple hash strip currently exists get set multiple times browsers want submit pull request test patch firefox safari chrome ie submitting glad merge", "d": "7/2011"}, {"body": "root issue appears escaping contents tv show name would turn javascript would look like", "d": "8/2011"}, {"body": "submitted pull request came across problem unfortunately bug firefox found via stackoverflow leads autodecoding hash fragment thus encoding hash help ran test suite safari firefox chrome jashkenas setting hash multiple times really happen wellbehaved backbone app yes using locationhref splitting backbone might option properly urlencoded firefox", "d": "12/2011"}, {"body": "pull request merged hopefully handles", "d": "1/2012"}, {"body": "agree workaround talking listening errors bind object pass activate callback bind pass dummy value force change nothing really changes", "d": "7/2011"}, {"body": "using detect errors always closing dialog error open show errors hacky", "d": "7/2011"}, {"body": "leave closing action inside callback remember pass dummy values force triggering", "d": "7/2011"}, {"body": "thanks really model particularly used webapp state gets changed lot think wait functionality", "d": "7/2011"}, {"body": "event fires whenever model successfully synced server hopefully handles case looking", "d": "1/2012"}, {"body": "using serverrelated nt solve problem wondering pluggable system persistent save systems idea add save plugin may add one trigger event every plugin magic think thanks", "d": "1/2012"}, {"body": "issue someone solution", "d": "12/2011"}, {"body": "ran would also like know error", "d": "1/2012"}, {"body": "using localstorage browser nt", "d": "1/2012"}, {"body": "chrome", "d": "1/2012"}, {"body": "", "d": "4/2012"}, {"body": "yes would nice jslike customisable collectioncomparetwo function besides existing collectioncomparator function", "d": "8/2011"}, {"body": "bump discussion kmalakoff issue emerged afaik long lived querelle unelegant es elegant patterns still prefer aesthetics es form definitely powerful particular one sorting level exempli gratia sort author title one sorting exempli gratia sort title aithortitle let user choose workaround possible every sorting level made strings numbers simply concat order still forces sorting different domain fact think even know things different way domain domain b domain b objects convenience port sortered order back domain kmalakoff done interesting work defining method underscore leverages present else compares objects directly discussion eventually came possibility declaring convention similar namely function present compared objects sidnicious replaced current bb implementation ecmascript compatible one consider instead hybrid solution checks presence found considered explicit want use sortby pattern defaults es compliant pattern waiting jashkenas community feedback personally think issue deserves attention", "d": "10/2011"}, {"body": "technically use whatever sort want collection sort reset back collection", "d": "10/2011"}, {"body": "tbranyen would concerned performance proposal use case made find solution wanted incrementally resort model list user editing name imagine reseting collection case two constraints string localized wanted handle order strings like name correctly splitting string number correctly combining sort results related note submitted pull request ago sortattribute autosort parameter useful type use case", "d": "10/2011"}, {"body": "backbone master supports semantics accomplish", "d": "1/2012"}, {"body": "awesome", "d": "1/2012"}, {"body": "hit confusion today get working went approach would much rather able pass hash options", "d": "7/2011"}, {"body": "fixed using latest version", "d": "7/2011"}, {"body": "indeed pull days ago resolves issue thanks", "d": "7/2011"}, {"body": "pull also fixed issues however download source backbone site needs updated pulled copy directly", "d": "7/2011"}, {"body": "believe pass complete response object wraperror able access everything need", "d": "1/2012"}, {"body": "really watch create infinite loops like simplest example serializing countless ways create cycles type graphs course might want take look implementation backbonerelational", "d": "7/2011"}, {"body": "great work backbonerelational paul nt know useful working thanks implementation something similar solution circular references edit others noted", "d": "7/2011"}, {"body": "nt think patched default nt models collections nonjson object attribute model want get fancier complete plugin like backbonerelational way go", "d": "7/2011"}, {"body": "well backbonerelational fullblown solution might suited everyone imo current state backbonejs allow handle quite well willing handle stuff manually working project makes heavy use modelscollections attributes models success backbonerelational sugar coats makes much easier handle nt think required quite common relations models collections backbone nt far allowing suggesting merge backbonerelational features core features like seems quite simple compared benefits get", "d": "7/2011"}, {"body": "jashkenas logic behind nt models collections nonjson object attribute model shesek patch ca nt fit project heavy making lightweight", "d": "8/2011"}, {"body": "could good idea would put backbonenested recursive tojson support thing think allowing set nestedmodel nestedcollection instead handle manually using defaults function far see pretty much use model properties appropriately features nt require fork added easily monkey patches", "d": "8/2011"}, {"body": "turadg ca nt speak jashkenas rationale nt anything attributes persist sure filter hacky instead using instance properties model instead", "d": "8/2011"}, {"body": "risk highjacking ticket think related common use case best practice using backbone rails nested models eg var task new model urlroot tasks best set steps collection loads task loaded right paths syncing", "d": "8/2011"}, {"body": "shesek sample indicate obj reference thanks", "d": "9/2011"}, {"body": "jasonshah got move replaced", "d": "9/2011"}, {"body": "also works", "d": "11/2011"}, {"body": "nt models collections nonjson object attribute model see new tag line already backbonejs want sophisticated object framework ca nt actually handle objects within objects seriously though mention anywhere could find backbone documentation attributes says attributes property internal hash containing model state model state include models b final resolution ticket closed fix seems hard believe backbone models submodels json impossible", "d": "2/2012"}, {"body": "machineghost impossible nice keep clean separate model objects database row values stuff hash together instead", "d": "2/2012"}, {"body": "thanks link despite going backbone docs hundreds times somehow managed always miss faq days ago even specifically looking list events included however understand backbone devs wanting put effort include direct support nested models still nt see ca nt prevent tojson exploding nested models put another way preventing nested models working enabling nested models posters showed would require lines code ca nt see would interfere number good patterns modeling structured data client side backbone provide foundation reason given faq supporting nesting", "d": "2/2012"}, {"body": "however understand backbone devs wanting put effort include direct support nested models still nt see ca nt prevent tojson exploding nested models supporting halfbaked solution worse supporting first place made default implementation dramatically slower folks want true nested model support still wo nt able use better override right thing app elements would needed serious patchtake ability handle array object attribute models collections values logic vivifying nested arrays objects models collections time way querying nested models collection etc etc", "d": "2/2012"}, {"body": "nt realize full scope issue fair enough", "d": "2/2012"}, {"body": "ps thanks jashkenas explanation", "d": "2/2012"}, {"body": "response shesek comment actually better", "d": "10/2012"}, {"body": "brettshwom anyone else using brettshwom solution value null fails recommend", "d": "1/2015"}, {"body": "sorry look issue see pull request solve issue", "d": "7/2011"}, {"body": "thanks merged pull request", "d": "7/2011"}, {"body": "curious know intentional well worked around calling trigger reset fetch seems behave whether add true false perhaps could able paired silent false explicitly ask rerender", "d": "8/2011"}, {"body": "turns bad js calling thistrigger reset within callback needed use thiscollectiontrigger reset", "d": "9/2011"}, {"body": "ran well events supposed triggered param", "d": "2/2012"}, {"body": "faced issue looks like snippet demonstrate thanks wookiehangover", "d": "2/2012"}, {"body": "missed add parameter", "d": "2/2012"}, {"body": "seems something funny consolelog going changed alerts fired model collection view total alerts", "d": "2/2012"}, {"body": "could reproduce backbone triggers events expectedl", "d": "3/2012"}, {"body": "think holds", "d": "7/2011"}, {"body": "glad entertain patch changes need motivated serious use case want override semantics instead using different method performance concerns going indirection every value lookup", "d": "1/2012"}, {"body": "thanks answer hm see point performance concerns however usecase overwrite method santize data precise implemented method way first looked internal object find data value available triggered search resources gather information though know could handled otherwise backbone interesting use internal object cache way ran problems returned different results", "d": "2/2012"}, {"body": "backbone provides event fires model finished synced server able case starting spinner turning returns", "d": "1/2012"}, {"body": "problem present object views", "d": "7/2011"}, {"body": "defaults property used function backboneview events nt support maybe support added could call manually events argument make sure call super", "d": "7/2011"}, {"body": "yep like use etc define member properties functions instead", "d": "1/2012"}, {"body": "rather making everyone use functions defaults propose different solution hopefully get ticket reopened backbone uses special var extend function protoprops classprops var child inherits protoprops classprops childextend thisextend return child handle subclassing simply add method extends defaults rather replacing something like var extend function protoprops classprops var child inherits protoprops classprops typeof thisdefaults function amp amp typeof protopropsdefaults function childdefaults extend thisdefaults protopropsdefaults childextend thisextend return child productionready code hopefully get idea implemented everyone could subclass heart content get use objects defaults var backbonemodelextend defaults foo bar var b aextend defaults bar baz assert new b get foo bar assert new b get bar baz", "d": "2/2012"}, {"body": "machineghost function used altering allow functionality would also change classes also using much flexible instance nt want extend parent rather replace want two specific properties ignore rest", "d": "2/2012"}, {"body": "well want something fancy clearly functions way go seems time complete bs figure someone wants default inheritance want simple inheritance ie keep values come parent parent parent unless define different value assuming oop prototypal inheritance works delete values parent class subclass dares define single value even completely different value set parent something unfamiliar anyone familiar inheritance functionality would also change classes talking five lines right five lines imagine nt change often making new modelextend copy existing function would add neither significant weight would maintainability problem change extend year change line twice year extend even change year hear saying got great simple extension mechanism less simple change way propose given getting problematically less simple given would give users kind inheritance expect inheritance framework nt worth", "d": "2/2012"}, {"body": "try show matters defaults inheritance done using two different approaches proposed form var backbonemodelextend defaults var b aextend defaults current form var backbonemodelextend defaults function return var b aextend defaults function return extend thisconstructorsuperdefaults imagine new backbone user probably nt even know defaults function b even know probably nt know thisconstructor thisconstructorsuper c even know still put together extend something easy user familiar extending stuff everyone likely nt even know need warning sign documentation defaults says hey stuff nt inherit lack inheritance bites likely keep using object form defaults expecting work issue keeping special extend function dry nt repeat forking two functions really worth causing confusion", "d": "2/2012"}, {"body": "someone wants default inheritance want simple inheritance ie keep values come parent parent parent unless define different value exactly happening value parent prototype kept unless redefined", "d": "2/2012"}, {"body": "value defaults parent prototype kept unless redefined totally one way think defaults one property implementation standpoint exactly right way think defaults literally single js property ignores backbone actually worksis used nt foomodelget foomodelget bar words attributes nt one property backbone encourages think rightly attribute property model fooget bar fooget baz even though fooattributes fooattributes argue backbone nt work directly attributes getseta bunch methods treat attribute property defaults attributes thought way single defaults property foodefault bardefault etc think way makes absolutely sense setting foodefault would effect whatsoever bardefault", "d": "2/2012"}, {"body": "might related problem changed function problem went away nt dug problem determine root cause defined object function base class extended base class instantiated several instances extended model added properties attribute var new extended new extended messages doit message consolelog messages doit message problem reference object expected making function fixed guessing deep copy defaults object done", "d": "2/2012"}, {"body": "tauren right copying defaults done nonprimitive value set used instances type using function creates new defaults object every call sidesteps issue", "d": "2/2012"}, {"body": "braddunbar yep fact docs mention need reread docs last time went quite ago remember javascript objects passed reference include object default value shared among instances", "d": "2/2012"}, {"body": "biggest pitfall see developers switching classical inheritance language prototypical inheritance javascript case backbone actually call defaults really getting cloned every time extend model view etc simple method something like", "d": "2/2012"}, {"body": "shared reference issue totally valid one stop cloning backbone easily provide actual inheritance defaults remember clone nothing wrapper around extend instead base clone extend backbone could default foo class would nt erased setting default bar class b subclasses", "d": "2/2012"}, {"body": "braddunbar issue closed documentationonly change trying advocate actual fix would also fix events issue use behavior replacing rather extending", "d": "4/2012"}, {"body": "machineghost backbone already providing prototypal inheritance scheme like property extendedchangedmerged fashion think changing paradigm one two properties cause confusion around issue mention serious backward compatibility problems would cause", "d": "4/2012"}, {"body": "backbone already providing prototypal inheritance scheme prototypal inheritance systems equal thing nt prototypal inheritance vs classical two different views implement prototypal inheritance backbone basically comes look defaults events individual properties going look attributes individual property someone set foo bar behind scenes let attributes foo bar would obviously silly attributes nt property collection properties similarly events defaults nt individual properties really think continuing pretend going cause problems make framework weaker overall soon start treating way treat attributes suddenly issue goes away likewise issue objects defaults goes away plus think usecases functionbased defaults would go away implementationwise none hard use extend call day backwardscompatability backbone nt even yet perfect time fix design decisions made past ill effects could nt foreseen b plenty strategies handling sort thing one example make model collection class implements old behavior let say simpleinheritancemodel simpleinheritancecollection make model collection use extend defaults events missing similar properties really collections properties fix add method backbone called usesimpleinheritance called method would set backbonemodel simpleinheritancemodel backbonecollection simpleinheritancecollection go every new user gets proper inheritance events defaults works rest backbone ie attributes nt require warnings like remember javascript objects passed reference include object default value shared among instances warnings easily missed confuse new users existing backbone users likely welcome changes nt take word could always make poll asking people want simple inheritance extendbased inheritance nt ca nt afford fix issues might crop add single line backboneusesimpleinheritance add time increment version number file name none affects upgrade heck maybe people even continue using option performance reasons future probably think extendbased inheritance natural quickly forget defaultsevents ever anything differently basically everyone wins approach", "d": "4/2012"}, {"body": "machineghost", "d": "4/2012"}, {"body": "got bit seems unexpected behavior conventional oo inheritance model subclasses inherit methods properties attributes parent class like see feature added nonclunky alternative provided perhaps defaults inheritabledefaults etc backward compatibility issue", "d": "2/2013"}, {"body": "moos simple answer want inheritance build see also take approach chaplin takes collect instances prototype chain chaplinjschaplin utilscoffee", "d": "2/2013"}, {"body": "nt think build inheritance js avoid use composition", "d": "7/2015"}, {"body": "link working correctly current line alerts representation artist demonstrating works", "d": "1/2012"}, {"body": "hmm seems like simple misreading documentation think id documentation pretty clear function building model url id used generate model urls default", "d": "1/2012"}, {"body": "hi see bind method context complete feature please add unbind monkey patched code could probably serve others method basically needs context parameter bit code amp amp context context list like", "d": "9/2011"}, {"body": "except unbind callbacks associated context pull request", "d": "10/2011"}, {"body": "pass context backbone events master", "d": "1/2012"}, {"body": "way go nothing jquery api documentation indicates accepts dom element looks like undocumented feature emulated zepto", "d": "7/2011"}, {"body": "zepto wants maintain better jquery api compatibility fix method also accept references dom elements open ticket", "d": "7/2011"}, {"body": "pls see also blog post also coffeescript implementation", "d": "7/2011"}, {"body": "nicer way would nt actually test work might efficient check instead creating array excluded methods using", "d": "7/2011"}, {"body": "thanks shesek really like style mon jul shesek lt reply replygithubcom wrote nicer way would nt actually test work reply email directly view github", "d": "7/2011"}, {"body": "sounds like neat trick", "d": "1/2012"}, {"body": "used dotmaster autobind gist backbone projects checking better ways become available came across issues correct implemented issue closed positive comment indicates autobind suggestion implemented looking backbone source code nt seem case something else place take care individual developer extend backbone functionality please help confused", "d": "9/2013"}, {"body": "find sort functionality usually necessary due context parameter methods underscore methods example need bind method following example js var view backboneviewextend initialize function thislistento thismodel change attr thisrender render function return others generally simply constructor", "d": "9/2013"}, {"body": "thanks good advice still using good old would better use listento instead see goes good know autobinding implemented one would like use automatic binding could look options mentioned", "d": "9/2013"}, {"body": "yes standard wo nt work js runtimes furthermore backbone models schemaless name properties advance would give strict schema", "d": "7/2011"}, {"body": "perhaps one could hook current set functionality ie passthrough attributes object except specific attributes one like handle otherwise eg id way model would stay schemaless guess wo nt available nt know browsers backbone aim support perhaps approach used pushstate could used optional kind people using firefoxchromechromeframe ie running backbone nodejs would think understand may hurdles think would enhancement perhaps keep issue open discussionthought", "d": "7/2011"}, {"body": "sorry backbone nt ever going include functionality nt work common browsers nonstandard nt exist version internet explorer", "d": "7/2011"}, {"body": "looks like becoming standard see chance revisiting", "d": "3/2014"}, {"body": "perhaps yet still needs list supported runtimes feel free use objectdefineproperty directly", "d": "4/2014"}, {"body": "feel free use objectdefineproperty directly tried adding new properties directly defineproperties long set enumerable seems generally work show one glitch always generates change event even property writeable nt tried real code yet general think might reasonable approach simple computed properties model new backbonemodel apple modelset b boy objectdefineproperty modelattributes c value cat enumerable true writable true objectdefineproperty modelattributes c get function return thisctouppercase enumerable true objectdefineproperty modelattributes get function return new date enumerable true modeltojson", "d": "12/2014"}, {"body": "run exact problem", "d": "7/2011"}, {"body": "nt see real need support polymorphic model collection relationships happy reconsider someone could provide practical realworld use case pattern acceptable solution common problem pretty skeptical", "d": "1/2012"}, {"body": "well finally found using intermediate models list widget backbone collections best approach able wrap model sort model filter model write custom modem rely several collections opposed modelcollection anymore see useful checked code place used loc including libraries hack got find time rewrite anyone explain useful edit ok close issue discussion usage backbone", "d": "1/2012"}, {"body": "model reference collection allows model compute url based collection happens vs example current behavior allow model added multiple collections last collection model added one use compute url think behavior desirable still freely add model multiple collection override wish", "d": "1/2012"}, {"body": "windowmymodel backbonemodelextend", "d": "7/2011"}, {"body": "saw tutorial nt looked documentation mistake sorry", "d": "7/2011"}, {"body": "yes", "d": "7/2011"}, {"body": "asked original question benefit change ability access promise", "d": "7/2011"}, {"body": "yes", "d": "7/2011"}, {"body": "think see goofed cs class variables need prefaced js backbonedemoview backboneviewextend classproperty blah windowdemo new backbonedemoview consolelog windowdemoconstructorclassproperty cs class backbonedemoview extends backboneview classproperty blah demo new backbonedemoview consolelog democlassproperty cs class backbonedemoview extends backboneview classproperty blah demo new backbonedemoview consolelog democonstructorclassproperty", "d": "7/2011"}, {"body": "looks like issue set please reopen need investigate", "d": "10/2011"}, {"body": "", "d": "7/2011"}, {"body": "click link homepage clicking html links certainly nt compatible pushstate would link even use", "d": "7/2011"}, {"body": "ok thanks replace tag tag div bind click event trigger router call navigate update url works use tab focus links nt think good user experience", "d": "7/2011"}, {"body": "quite ghettooldschool solve problem whoopee even click handler elsewhere example simply show could use", "d": "7/2011"}, {"body": "maybe late like click function e appnavigate attr href true return false use links normally like user nt javascript link trigger server otherwise backbone", "d": "10/2011"}, {"body": "extending bit atinux example want actions bound yet loaded views routes working back button please mind backbonehistory root option", "d": "10/2011"}, {"body": "sorry noob would place code pnbv atinux", "d": "11/2011"}, {"body": "code need executed document loaded put anywhere page need jquery ready event document ready function code handle events", "d": "11/2011"}, {"body": "please take account using pushstate makes sense also serverside representation state location way covered user refreshes page makes silly bookmark said may need use event delegation capturing link urls application uses topmain view instead router", "d": "11/2011"}, {"body": "sure need serverside representation state indeed backbone js catch url page loaded problem", "d": "11/2011"}, {"body": "yep meant want urls instead hashes opinion nt make sense one hand application hides address bar lives inside native app nt make sense different urls think may confusion rational behind history api", "d": "11/2011"}, {"body": "opinion two main use cases backbone stateful application webkit webview inside native application address bar refresh back buttons need hashes urls b browser hiding address bar one entry point use hashes stateful application serverside fallback stateless application stateful mode browser application state maps urls multiple entry points ready use urls pushstate popstate", "d": "11/2011"}, {"body": "sure belongs issues page probably suitable supportforumwiki lem shot probably consider redesign widgetpage interaction ideally relook splittg widget separate types different routes also consider happens people click widgets bookmark last clicked widget route criteria anyway probably define widget parent controller looks instances widget page namespace define router sub controllers per widget typepage maybe way link main controller page matter many hth", "d": "7/2011"}, {"body": "threepointone thanks response ask similar question irc first nt get reply nt realize backbone support group started working backbone last year nt think one existed checked site see google group great follow reply suggestions guess main thing trying figure best create master subrouters like build master router simply knows route requests appropriate subrouter whichever widget created first page would create master router inject subrouter widgets would inject subrouters perhaps master router would need splat route actually dynamically adding routes via might better way go thing unsure handle maintaining state across multiple widgets perhaps hashbang supports multiple paths sort delimiter might work perhaps one would nice portion path could sent appropriate subrouter routing", "d": "7/2011"}, {"body": "btw make sure page widget included nt use fragment identifiers sure router makes sense widgets anyway really consider breaking widget smaller ones one specific thing best luck", "d": "7/2011"}, {"body": "certainly use multiple routers page threepointone quite correct really bad idea change url small widgets url changes used considered new page pressing back button repeatedly little widget flutter around going frustrate visitors", "d": "7/2011"}, {"body": "thanks suggestions clear widgets actually intended consume entire content area provide large chunks embedded functionality hashbangs control make sense situation seem frustrating users problem user could put multiple widgets onto page widgets made allow people wordpress sites external sites embed miniapps pages ca nt control put one onto page course recommend mainly want see way support", "d": "7/2011"}, {"body": "tauren solution go end comma delimitated routes pretty much mind wondering achieve writing routing system", "d": "11/2013"}, {"body": "afraid hashbangs never good idea unless webapp actually generating pages pushstate really never need em said improved support present write still match hash", "d": "7/2011"}, {"body": "thanks reporting take look patch let know nt work tests think added", "d": "7/2011"}, {"body": "works thanks", "d": "7/2011"}, {"body": "nothing stops returns xhr request using head version backbone", "d": "7/2011"}, {"body": "ok got currently use thanks suggestion", "d": "7/2011"}, {"body": "cool please add wiki different ways associations client side work well different data models glad hear found one floats boat", "d": "6/2011"}, {"body": "seems like testing framework instead expected results check change expect happen indeed happen model changes", "d": "6/2011"}, {"body": "seems working locally try access web application web works also ie tested backbonejs", "d": "6/2011"}, {"body": "folks definitely interested please add wiki page", "d": "6/2011"}, {"body": "great", "d": "6/2011"}, {"body": "implemented using containerview class takes subviews option array references views include inside container view initialize container view runs subviews appends viewel element render runs subviews tells render pretty neat view class allows infinite views within views patterns version little specific post pretty easy implement", "d": "6/2011"}, {"body": "ulmus nice solution handle hierachical views would share script framework trend clientsideapplication backbone could defacto standard framework handling recent chasing backbone backbonelike features sproutcorelike solution nt wan na backbone become niche confusing framework compared rivals therefore nice handle collection single widget", "d": "6/2011"}, {"body": "really shareable moment much dependencies parts frameworks try break use two base views containerview templateview views inherit one two code two views respectively adapted living outside framework guarantee work get gist templateview backboneviewextend containerview containerview backboneviewextend", "d": "6/2011"}, {"body": "yep model nt valid things wo nt continue make sure actually validating want validating", "d": "1/2012"}, {"body": "override handle error handler even invoked", "d": "6/2011"}, {"body": "unfortunately visibility original optionssuccess optionserror", "d": "6/2011"}, {"body": "use case overriding nesting handler suboptimal part public api ie simply", "d": "12/2011"}, {"body": "great idea thinking something like", "d": "6/2011"}, {"body": "yep deterministic events common useful pattern available module mixed object want copyandpaste code external library go right ahead end feel free add resources section wiki", "d": "6/2011"}, {"body": "without hash page going reload backbone app going reload understand correctly including js files different pages expecting behave hash used may ask use case oh btw ni hao", "d": "6/2011"}, {"body": "gravof sorry poor english typo question want diff last slash end url edit question asap thanks lot", "d": "6/2011"}, {"body": "ah makes sense many ways achieve currently two mind either define slash flavored explicitly downside lots routes gon na repeat lot use regexp check backbone manual controllerroute need info hope helps", "d": "6/2011"}, {"body": "thank gravof helpful actually fixed issue first solution cause nt deal others routes except one like check info controllerroute try find best solution thx", "d": "6/2011"}, {"body": "ok looks like controllers purposely removed longer part tests docs removal controllers seems weird pulling somewhere else real branch currently pulling documentcloudbackbone", "d": "6/2011"}, {"body": "agad see renaming", "d": "6/2011"}, {"body": "since models wrap resulting array new new collection still point original book models book attribute changes book still referenced collections additionally wanted perform enumerable methods resulting published books use underscorejs directly array", "d": "6/2011"}, {"body": "beautiful ended using var publishedbooks new books thisbooksfilter function book return bookget ispublished thanks samuel", "d": "6/2011"}, {"body": "know closed issue would interesting hold parent collection references child filtered collections parent collection could updated refreshed etc child collections would refreshed well push child collection array perhaps bind function addremoverefresh events parent collection refresh child collections updated data", "d": "6/2011"}, {"body": "edwardmsmith would great", "d": "12/2011"}, {"body": "one may useful anyone looking functionality backbonecollectionsubset backbonevirtualcollection", "d": "2/2014"}, {"body": "never got guidance went different direction", "d": "6/2011"}, {"body": "would involve breaking change event apis got idea mind change make", "d": "6/2011"}, {"body": "would fourth parameter event handlers considered bad break api guess could break code uses", "d": "6/2011"}, {"body": "think something different add fourth param ca nt really go options hash", "d": "6/2011"}, {"body": "okay position parameter nt seem right would rather parameters latter case would nt know would ideal even disregarding api compatibility moment environment parameters believe things done existing parameters attribute model could added similar perhaps kept date though attribute could added available event ridding keep date seems bit fragile towards async callbacks though way getting index parameter attribute bit strange backbonejs nt ever change hash user gave sensible thing imho would say added model collection index using options placing would definitely break api bothered waiting next api breakage happen", "d": "6/2011"}, {"body": "like written list widget uses indirectly backbone collection model could achieved efficiently without index addedremoved model added index options order break api seems least worst solution temporary hack fyi patched backbone add function around line remove function around line always reluctant break api think proper way add parameter callback", "d": "7/2011"}, {"body": "duplicate", "d": "10/2011"}, {"body": "add remove events functions attribute options passed good go", "d": "1/2012"}, {"body": "good news first bit surprised solution chose issue somebody reported potential troubles options modified suppose optionsindex used parameter ok hacked backbonejs way got troubles", "d": "1/2012"}, {"body": "yay", "d": "1/2012"}, {"body": "correct wrong nt think backbone knows direction going either absent state machine knows hierarchy application hash changes changes nt know cause could back button could clicking link could savelocation call could happen current page depending structure app", "d": "6/2011"}, {"body": "able store something state side pushstate onpopstate occurs get state see came would managing side course without way push anything pushstate right truly way know", "d": "7/2011"}, {"body": "would possible set flag popstate event unset flag navigate called directly could test router handler whether user pressed browser back button think would work modern browsers history support better nothing", "d": "2/2012"}, {"body": "know bit dated worth would find useful feature numerous libraries detecting back button presses none least none ones tried work backbone backbone rely mechanisms stack overflow thread asking party solution backbone builtin mechanism though obviously better", "d": "6/2013"}, {"body": "done thanks idea", "d": "6/2011"}, {"body": "try using deferred ajax object think something like got around yet p", "d": "6/2011"}, {"body": "ha sure meant turns return jquery method support deferreds jquery following code works guess question mostly completeness backbone plans continue support manual callbacks perhaps also support otherwise perhaps relegate callbacks jquery deferred methods remove altogether ignore issue keep em backwards compatibility", "d": "6/2011"}, {"body": "using jquery deferred object great sort use case think leave callbacks time seeing bit special behavior beyond jquery deferred would provide triggering event fail pass error callback", "d": "6/2011"}, {"body": "quite things easier manage exactly would easier manage concrete use cases always helpful", "d": "6/2011"}, {"body": "primary thing going singleton header would adjust based changes routing state along lines generic breadcrumb implementation whole application content section header primary portion changed response route change would fine single controllerrouter could listen instance ran issues trying divide routes individual controllersrouters", "d": "6/2011"}, {"body": "setup controllerrouter notify header breadcrumb views route change better way handling spaghetti native custom events trying change things outside scope example controller notifies routechange header listens routechange breadcrumb listens routechange", "d": "7/2011"}, {"body": "case would like avoid making router aware various components need aware state introduces direct dependencies coupling components runtime important since components loaded user hits certain point flow using generic event meshes general arch backbone imo thus request", "d": "7/2011"}, {"body": "router nt aware components pubsub listenernotifier implementation", "d": "7/2011"}, {"body": "ah confused comments thought example negative case works fine single router multiple becomes quite complicated register event listener router instances basically ended current implementation request create event binding listened global manner route event described", "d": "7/2011"}, {"body": "bumping today building prototype app see backbone suitable would like various routers different parts app perform cleanup cases route changed current behavior fine switching routes within one portion app case single router leave portion another router takes control want clean still maybe even solution making every router aware routers nt acceptable seems since backbonehistory knows routers anyway would easy enough aggregate change events backbonehistory hell bent solution think clean one take care needs better method cleanup changing routes thanks", "d": "7/2011"}, {"body": "implementation working things submit pull request", "d": "7/2011"}, {"body": "delegating events routes main history object done quite simply application level adding events capabilities backbonehistory creating base route using said think still might suitable added core even done quite easily using existing tools provided backbone", "d": "7/2011"}, {"body": "see resolution", "d": "9/2011"}, {"body": "anybody needs simple route event use monkey patch", "d": "9/2011"}, {"body": "resolution closed pull request nt merged plugin wiki page nt router plugins wrong triggering route event along router xxx events would match behaviour events elsewhere eg change change xxx deleteme monkey patch triggers event history object instead router already inherits backboneevents route events triggered usecases whenever something needs happen routes decoupled actual handlers ala route xxx events like cleaning existing views", "d": "10/2011"}, {"body": "know nt point backbone nt worry particulars browser supporting", "d": "6/2011"}, {"body": "perhaps base using navigate app one case another", "d": "6/2011"}, {"body": "afraid entirely point way literal links possibly work situations use backbone links would nt worked anyway ie previous versions", "d": "6/2011"}, {"body": "backbone history sync also hard dependency think hard remove dependencies including removed dependencies backbone history use agree rtuin would better add one dependency support frameworks nt would affected", "d": "6/2011"}, {"body": "backbonejs documentation restful persistence dom manipulation backboneview highly recommended include either jquery zepto emphasis mine maybe highly recommended bit understatement maybe high recommendation applies either way ambiguous think would better say jquery zepto required backboneviews backbonesync backbonehistory", "d": "6/2011"}, {"body": "sure thing thanks clarification", "d": "6/2011"}, {"body": "use coffeescript automatic", "d": "6/2011"}, {"body": "afraid way javascript works everything lexically scoped except keyword dynamically scoped longstanding wellknown gotcha language backbone tries help automatic binding event callbacks binding every method backbone objects neither consistent javascript good idea significant performance hit involved may necessary depending method called help well", "d": "6/2011"}, {"body": "fair enough", "d": "7/2011"}, {"body": "also worth noting current behavior inconsistent uses either", "d": "6/2011"}, {"body": "fixed niallsmartbackbone pull requested", "d": "6/2011"}, {"body": "thanks much merged master", "d": "6/2011"}, {"body": "reverted issue discusses revert", "d": "8/2011"}, {"body": "mostly curious see discussion going somewhere like collectionadd idempotent model nt added twice already exists byid collection right achieving", "d": "8/2011"}, {"body": "also curious use similar patch return silently model already exists collection error need thrown case", "d": "10/2011"}, {"body": "appreciate thoughts pr", "d": "11/2011"}, {"body": "yeah sure seems complex expect backbone perhaps comparator could used really needed pluggable way define identity sun nov saimon moore lt reply replygithubcom wrote appreciate thoughts pr reply email directly view github", "d": "11/2011"}, {"body": "quote jquery docs optional eventdata parameter commonly used really want arguments builtin event functions use curry events look data really lives nt think stuffing data callback attachment", "d": "6/2011"}, {"body": "nt load elements like concrete useful advice try backbone google group documentcloud irc room", "d": "6/2011"}, {"body": "second would almost like see something specify additions special viewoptions backbone uses would prefer way add array outside source backbone", "d": "8/2011"}, {"body": "", "d": "9/2011"}, {"body": "backboneview option property behaves like covered", "d": "1/2012"}, {"body": "probably worth backbone extension bet folks would love go route add backbone wiki", "d": "6/2011"}, {"body": "ok ill", "d": "6/2011"}, {"body": "fixed", "d": "7/2011"}, {"body": "discovered jquery ui extends jquery allows subscribe remove event made post handling backbone view remove event", "d": "6/2011"}, {"body": "sounds like jquery remove covered", "d": "6/2011"}, {"body": "jquery ui event jquery nt provide event", "d": "6/2011"}, {"body": "fixed", "d": "7/2011"}, {"body": "figured issue needed instantiate view", "d": "6/2011"}, {"body": "lol cheers mistake", "d": "1/2013"}, {"body": "thanks", "d": "6/2013"}, {"body": "heh yer turns cheers", "d": "8/2013"}, {"body": "thanks", "d": "10/2013"}, {"body": "seems use modelurlroot specify base uri model associated collection right", "d": "6/2011"}, {"body": "however think problem priorities collectionurl preferable option think modelurlroot preferable collection url often contains criteria url example userorderscollection url ordersuserorders userid", "d": "6/2011"}, {"body": "yes use override entirely model exists outside collection", "d": "1/2012"}, {"body": "use backbonehistorysavelocation method nt want trigger routing", "d": "6/2011"}, {"body": "nope jquery zepto dependencies views history explained docs", "d": "7/2011"}, {"body": "thanks mean restful persistence dom manipulation backboneview highly recommended include either jquery zepto somewhere else mentioned might worth changing highly recommended need mention history needs zepto jquery", "d": "7/2011"}, {"body": "already done", "d": "7/2011"}, {"body": "glad sorted please notice date original issue june issue fixed hopefully excuses apparent ignorance", "d": "7/2011"}, {"body": "ah model changed silent allows batch changes delay change event pretend like never occurred", "d": "6/2011"}, {"body": "got fix least think rolling production tonight nt fall fork file pull request mean time diff", "d": "6/2011"}, {"body": "uh want format code correctly indent four spaces", "d": "6/2011"}, {"body": "github docs claim fence code three backticks instead indenting feature clearly need development", "d": "6/2011"}, {"body": "fixed", "d": "7/2011"}, {"body": "nt seem commit head line event still triggered model rather collection", "d": "7/2011"}, {"body": "event supposed start model", "d": "7/2011"}, {"body": "got thanks", "d": "7/2011"}, {"body": "found issue preparemodel backbonecollection wants create new empty model populate attributes fact lots people written initialize expectation attributes passed parse available nt fix yet", "d": "6/2011"}, {"body": "oh issue seriously messes backbonerelational", "d": "6/2011"}, {"body": "fixed minute", "d": "7/2011"}, {"body": "actually backbone issue far know subscribe fire element removed tested never used check please comment works something like could job", "d": "6/2011"}, {"body": "unload event belongs window element unload event sent window element user navigates away page", "d": "6/2011"}, {"body": "tested right wikipedia article must wrong anyway subscribe parent element child element removed handler fired handler log removed element attach via jquery example datastore info view object simply retrieve eg work ie must turn polling itthem", "d": "6/2011"}, {"body": "possible using jquery ui described solution blog", "d": "6/2011"}, {"body": "scratch old backbone", "d": "6/2011"}, {"body": "alternative fix something like var instance thissync window thissync backbonesync call instance read success error", "d": "5/2011"}, {"body": "patch issue tempjs backbonejs optionssuccess optionssuccess model resp var error wraperror optionserror model options thissync backbonesync read success error fix issue backbone var instance thissync window thissync backbonesync call instance read success error return var error wraperror optionserror model options var method thisisnew create update thissync backbonesync method success error fix issue backbone var instance thissync window thissync backbonesync call instance method success error return optionssuccess optionssuccess model resp var error wraperror optionserror model options thissync backbonesync delete success error fix issue backbone var instance thissync window thissync backbonesync call instance delete success error return optionssuccess optionssuccess collection resp var error wraperror optionserror collection options thissync backbonesync read success error fix issue backbone var instance thissync window thissync backbonesync call instance read success error return", "d": "5/2011"}, {"body": "would happen fix bradneuberg globally defined sync method would used changes semantics functionality", "d": "10/2011"}, {"body": "unable reproduce latest backbone could review test case reopen address issue", "d": "10/2011"}, {"body": "pass somecollection instance somecollectionview constructor binding function refresh event also work", "d": "6/2011"}, {"body": "got issue even tried make sure somecollectionview collection reference still luck actually jump fetch function add line trigger refresh event like fetch function options options options var collection var success optionssuccess optionssuccess function resp status xhr collectionoptionsadd add reset success success collection resp collectiontrigger refresh optionserror wraperror optionserror collection options return thissync backbonesync call read options works", "d": "7/2011"}, {"body": "issue refresh event changed reset", "d": "8/2011"}, {"body": "bingo", "d": "1/2012"}, {"body": "unless entire collection either use callbacks debounced version pretty easily", "d": "1/2012"}, {"body": "process output serialize something like jquery bbq convert form encoded string object graph pass save", "d": "6/2011"}, {"body": "know root cause get error sometimes sending receiving json", "d": "6/2011"}, {"body": "got issue firefox receiving ajax json callback invalid operand attrs break error thisidattribute attrs thisid attrs thisidattribute backbonejs line close issue", "d": "8/2011"}, {"body": "investigation found causes issue pass string instead object modelset case issue arose using jquerypost reason returns json object webkitbased browsers desktop chrome safari iphone ipad firefox returns string needed eval would good type checking inside modelset", "d": "8/2011"}, {"body": "try using serializeobject", "d": "8/2011"}, {"body": "afraid nt type checking make argument absolutely function javascript sounds like pointed directly line incorrect", "d": "8/2011"}, {"body": "think regular change event supposed used javascript mymodelbind change function model modelhaschanged loaded return consolelog modelget title alway bye", "d": "6/2011"}, {"body": "makes sense", "d": "6/2011"}, {"body": "modelchangedattributes also return nonempty object", "d": "6/2011"}, {"body": "issue seems fixed head", "d": "6/2011"}, {"body": "yeah way javascriptbackbone works want user object scope add function", "d": "5/2011"}, {"body": "ok thanks lot anwser close issue thanks", "d": "5/2011"}, {"body": "spine method something would like see backbonejs implementation simple", "d": "6/2011"}, {"body": "record ended adopting spine api instead", "d": "7/2011"}, {"body": "cool might also want look way spine fires navigation change event hashchange event navigate invoked manually speeds things somewhat especially mobile browsers additionally spine shim option enabled makes sure routes work internally nt displayed hashurl words routes default way navigating components spine even nt ever displayed user tue jul jashkenas lt reply replygithubcom wrote record ended adopting spine api instead reply email directly view github alex maccaw maccman", "d": "7/2011"}, {"body": "chance spine backbone merge one project think frameworks lot gain", "d": "11/2011"}, {"body": "doubt spine essentially fork complete rewrite backbone different style entire point interesting bits done differently artellectual curious hear ticket specifically think backbone could gain spine", "d": "11/2011"}, {"body": "jashkenas curious backbonejs nt written coffeescript like spine batman many modern frameworks", "d": "11/2011"}, {"body": "jashkenas think terms features would nt gain much mean almost feature sets would gain maccman core contributor would invaluable project feel many implementations frontend mvc rite need merge make merged ones stronger team think lot things still need work terms frontend mvc side things example solid localstorage implementation thats smart enough cache data server sync data back server properly offline access still keeping data real time basic things like need focused activerecord frontend mvc could say think combined effort help reach goal faster edit explore surfaces javascript mvc probably nt know talking cents form experience far", "d": "11/2011"}, {"body": "paulmillr backbone nt written coffeescript predates extracted documentcloud written javascript artellectual feature sets good bit different spine removes collections makes model class responsible aggregating every model instance patten think common fallacy applied clientside backbone relies underscore extremely useful functions manipulating model data spine nt dependency spine mobile framework building iosstyle applications backbone entirely ui agnostic maccman core contributor backbone would grand also great folks exploring pushing clientside patterns different directions think say definitively combined effort would nt get us closer activerecord frontend mvc entirely scope backbonejs plans push things direction", "d": "11/2011"}, {"body": "jashkenas backbone would essentially fit better back end technology like rails spine strives framework interacting headless backend", "d": "11/2011"}, {"body": "artellectual nt actually want activerecord frontend mvc headless backend", "d": "11/2011"}, {"body": "ah understood btw tried document cloud nice app got", "d": "11/2011"}, {"body": "sorry wrong works fine got updated version local machine", "d": "5/2011"}, {"body": "absolutely right want customize function produce custom serialization feel free override", "d": "5/2011"}, {"body": "default implementation produce invalid json nested backbone collection present returned object type still backbonecollection", "d": "5/2011"}, {"body": "correct stuffing collections invalid default", "d": "5/2011"}, {"body": "correct model id nt considered changed next change event fires model still found old id happens like trigger change event call", "d": "5/2011"}, {"body": "ahh see thank reply", "d": "5/2011"}, {"body": "fixed soonish branch backbonecontroller renamed backbonerouter clarity although still going used example app documentation better motivate howwhy want use including perhaps pointing documentcloud workspace live example", "d": "5/2011"}, {"body": "mentioned commit thanks note", "d": "5/2011"}, {"body": "welcome", "d": "5/2011"}, {"body": "patch unintentional", "d": "5/2011"}, {"body": "discussed commit patch test closing ticket", "d": "5/2011"}, {"body": "right need delete really fixed commit", "d": "5/2011"}, {"body": "plan build core backbone add events quite easily overriding model class", "d": "5/2011"}, {"body": "think app logic furthermore always override tell server want get", "d": "5/2011"}, {"body": "override fetch whatever page items want also pass jqueryajax options directly", "d": "5/2011"}, {"body": "sure anyone wants contribute simpler clearer hello world app glad host homepage", "d": "5/2011"}, {"body": "think something like html file would helpful still learning feel free make changes something improperly entry model collection entry view rendered template windowentry backbonemodelextend windowentries backbonecollectionextend model entry localstorage new store entries windowentries new entries windowentryview backboneviewextend template template entrytemplate html render function thisel html thistemplate thismodeltojson var content thismodelget content entrycontent text content return application view element input events model update hooks windowappview backboneviewextend el body events keypress newentry createonenter initialize function bindall newentry refreshentries entriesbind add thisnewentry entriesbind refresh thisrefreshentries entriesfetch create entry view append entrylist create enter newentry function entry var view new entryview model entry entrylist append viewrender el refreshentries function entrieseach thisnewentry createonenter function e ekeycode return entriescreate content newentry val windowapp new appview", "d": "5/2011"}, {"body": "later today tomorrow planning publish blog post simple example app quite hello world simple much less todo app example apps aimed beginners trying understand different backbone components work together post link thread", "d": "5/2011"}, {"body": "demo app planning write tutorial goal show different mvcc components interact simplest possible scenario something substantive practical hello world downside backboney nt show backbone core features like binding model changes syncing data server motivation writing help newcomers basics nt clear started backbone seen fair number requests discussion threads beginnerlevel examples wanted try help still fairly new backbone want make sure promoting bad practices anyone feedback would greatly appreciated", "d": "5/2011"}, {"body": "looks like nice candidate", "d": "6/2011"}, {"body": "hello backbonejs clear concise intro", "d": "6/2011"}, {"body": "hellobackbonejs introduction like started backbone", "d": "12/2011"}, {"body": "huge fan hello backbone anyone wants send pull request tutorial repo feel free otherwise linking stuff wiki great", "d": "1/2012"}, {"body": "hi look seb", "d": "5/2011"}, {"body": "looks good dealing embedded objects dont really want create separate models able reliably access nested attributes example provided would nice could personmodelget contactinfophonenumbershome rather personmodelattributescontactinfophonenumbershome believe backbone currently assumes flat data model pm sebslomski reply replygithubcom wrote hi look seb reply email directly view github", "d": "5/2011"}, {"body": "afraid flat keys json object nt valid notion perfectly valid key object changes work similarly twiddle property object identify object remains answer question plans support style attributes", "d": "5/2011"}, {"body": "think would valid way deal deep properties backbone wanted support also deep merging models would become generic eventpowered wrapper js object valuable even separate pattern bound dbtransport best regards vladimir", "d": "5/2011"}, {"body": "common javascript gotcha nt unique backbone place passing objects reference addition reliable function deep clone jquery works simple cases fails complex ones added warning commit", "d": "5/2011"}, {"body": "erm think better", "d": "5/2011"}, {"body": "yes passing dom element view initialize way go elements already extant page", "d": "5/2011"}, {"body": "yep travisci would great example glad add write paragraph", "d": "5/2011"}, {"body": "great added issue tracker", "d": "5/2011"}, {"body": "crazy master branch good bit ahead released pushed npm", "d": "5/2011"}, {"body": "ahh gotcha", "d": "5/2011"}, {"body": "looking code guess using function returns back soon finds match see loadurl function thoughts better design clubbing multiple view rendering within one route callback controller done current design multiple controllers handle different view rendering common hashroute current backbone design requires modification", "d": "5/2011"}, {"body": "better design definitely first match used instead possible matches want two different things happen accessed controller action call two functions", "d": "5/2011"}, {"body": "agree thanks response", "d": "5/2011"}, {"body": "perhaps nt want enlarge backbone public api grabbag stuff feel free copyandpaste codebase like large part reason source code annotated", "d": "5/2011"}, {"body": "nope asked look issues", "d": "5/2011"}, {"body": "also like idea configuration exta libs stated undescore one dependency reality need jquery sometimes overkill", "d": "5/2011"}, {"body": "simple overriding afraid api actually needs compatible way make backbone support frameworks add capability backbone zepto support added glad take noninvasive patches along lines", "d": "5/2011"}, {"body": "btw also tried read fix add backbonejs file thisiframedocumentopen close thisiframelocationhash windowlocationhash code made things worse nt get js error reason backbone views nt render", "d": "5/2011"}, {"body": "also add internet explorer trigger hashchange route get never ending stream object nt exist errors guessing may backbone polling thread used keeps trying call loadurl nt exist", "d": "5/2011"}, {"body": "looking buddy", "d": "5/2011"}, {"body": "presumably get id server using clientside uuidguids way set id immediately save future isnew evaluate false", "d": "5/2011"}, {"body": "hi matt nice idea would unfortunately require change default database set rails apps prefer work around issue rather see potential solution implemented yet update ticket amp stackoverflow works matt", "d": "5/2011"}, {"body": "nt think core backbone default queueing nt hard override app override ensure prior xhr finished launching next one make nice plugin would great material backbone wiki", "d": "5/2011"}, {"body": "written patch queues save requests however plugin stage anyone likes patch solution please drop line see tidy patch patch", "d": "6/2011"}, {"body": "keeping backbone simple backbone default behavior calling post multiple times waiting first one seem pretty bad", "d": "7/2012"}, {"body": "philfreo created plugin prevent behavior", "d": "7/2012"}, {"body": "think simple solution like one suggested would ideal imho default backbone behaviour", "d": "9/2012"}, {"body": "amccloud plugin abort pending requests perfectly valid different behavior deferred requests also valid solution recommended zawaideh tend lean toward abort behavior certain either solid default work cases preferably", "d": "9/2012"}, {"body": "zawaideh agree good solution except needs still return", "d": "10/2012"}, {"body": "going try solve problem submit pull request tests central issue need return like object request nt made yet best approximate return promise includes abort method easiest thing would create backbone deferred patch abort method return unfortunately zepto nt support deferreds quite yet although looks like coming best proceed use backbone deferred try create small version promise within backbone please let know get pull request asap thanks", "d": "12/2012"}, {"body": "see response glad look pull request attempts address different use cases cohesive way moment think something code best equipped handle", "d": "12/2012"}, {"body": "found little difficult implementing ajax queue backbone method generated save ie overriding queue requests would still issue two posts eg expected anybody found solution problem", "d": "11/2014"}, {"body": "richardscarrott use", "d": "11/2014"}, {"body": "philfreo gist would mean model set previous requests complete makes sense queue would handled sync models amp collections therefore views get job leaving sync worry persisting data background almost easily done nt fact sync method create update etc evaluated immediately", "d": "11/2014"}, {"body": "anybody interested managed solve problem optimisitcally setting models id parsing server generated id also meant queue could handled jquery level giving utility", "d": "11/2014"}, {"body": "sure javascript call timeout id view removed", "d": "4/2011"}, {"body": "redefine put cleartimeout inside inside handle every click event links point inside click handler explicitly call windowlocation right something terribly wrong looks tricky", "d": "4/2011"}, {"body": "nt want ever want things work properly ie use savelocation otherwise nt see anything matter", "d": "4/2011"}, {"body": "route controller points want load need trigger hashchange setting hash directly call savelocation wo nt load thank much advice", "d": "4/2011"}, {"body": "yes unfortunately longstanding bug safari android incorrectly predecode url times afraid much nudged webkit bugzilla tracker", "d": "5/2011"}, {"body": "would worth try catch", "d": "6/2011"}, {"body": "implement notifications listening events specific models looks like want single global message interchange bad pattern imo hey whatever floats boat could build one quite easily like var pubsub new backbonemodel backboneviewextend initialize function pubsubbind custom event callback backboneviewextend foo function pubsubtrigger custom event data", "d": "5/2011"}, {"body": "idea sorry check typos", "d": "5/2011"}, {"body": "noticed thing going open bug good catch", "d": "4/2011"}, {"body": "fixed branch go", "d": "5/2011"}, {"body": "sorry saw addressed previous issue", "d": "4/2011"}, {"body": "problem set undefined though means assign model different collections first one collection owns model guess situation improve", "d": "5/2011"}, {"body": "currently model owned last collection add hope makes easier track multiple collections nt persist nt think extra layer inheritance hierarchy necessary make work", "d": "1/2012"}, {"body": "yes trying resist think eventually make current unofficial backbone mailing list official", "d": "4/2011"}, {"body": "added backbonejs example application written switch app use", "d": "4/2011"}, {"body": "would resist mailing list", "d": "7/2011"}, {"body": "sure might want run code calling overriding set simply using different function right way example", "d": "4/2011"}, {"body": "point overriding set creating separate function like means attributes looped multiple times method proposal provides simple oneline solution avoids looping attributes could improve performance browsers slow javascript processing models lot data", "d": "4/2011"}, {"body": "afraid current behavior correct point change considered change point view model state example attribute value change silently change correct previous value time change", "d": "4/2011"}, {"body": "ok understand write code differently jashkenas lt reply replygithubcom afraid current behavior correct point change considered change point view model state example attribute value change silently change correct previous value time change reply email directly view github", "d": "4/2011"}, {"body": "intended behaviour ids hash update well get work something new silently saved", "d": "11/2011"}, {"body": "maybe wrong seed lines thissync backbonesync call read options model object use sync method first sync nt exist use global sync instead", "d": "4/2011"}, {"body": "documentation clear", "d": "4/2011"}, {"body": "deleting comment nt realised documentation relates tag latest backbonejs new git bad", "d": "5/2011"}, {"body": "added pull request", "d": "4/2011"}, {"body": "thanks fix merged master", "d": "4/2011"}, {"body": "see right could var view backboneviewextend events click action action negative side still use location path string save location access action directly even dependencies controllerchangelocation could really handy", "d": "4/2011"}, {"body": "transparent support caveat longstanding safari bug ready testing branch anyone wants give spin", "d": "5/2011"}, {"body": "updated backbonejs point release removed file master branch avoid future confusion", "d": "4/2011"}, {"body": "see thanks", "d": "4/2011"}, {"body": "ended solving like events keyup subdomain checksubdomain initialize function thisgetsubdomain debounce bind thisgetsubdomain checksubdomain function e var subdomain etargetvalue thisgetsubdomain subdomain getsubdomain function subdomain called every seconds consolelog subdomain", "d": "4/2011"}, {"body": "meleyal thank documenting found useful project working", "d": "10/2011"}, {"body": "came across issue solved way events keyup subdomain checksubdomain initialize function thisgetsubdomain debounce thisgetsubdomain checksubdomain function e called every seconds consolelog subdomain defining events events object method already bound proper context seems working fine far", "d": "2/2012"}, {"body": "know already closed looking solution tested following bit strange suppose stranger previous ones seems work javascript events keyup subdomain checksubdomain checksubdomain debounce function something", "d": "7/2012"}, {"body": "jsoncorwin nothing strange problem original code meleyal returns new debounced function time though technically debounced new one createdcalled keyup defeating point debouncing call merely delayed since called waits never called executes right solution call use return value every time accomplish calling modeldefinition time hopefully brings clarity happeningwhy solutions work", "d": "9/2012"}, {"body": "either write also", "d": "1/2016"}, {"body": "always create debounced edit bound throttled memoized version function initialize method earlier delay dynamic", "d": "1/2016"}, {"body": "jsoncorwin approach best yet", "d": "2/2017"}, {"body": "best way reverse sort collection return negative value comparison criterion", "d": "4/2011"}, {"body": "supposed work sorting alphabetically string value", "d": "8/2011"}, {"body": "string values maybe convert date problem solved", "d": "1/2012"}, {"body": "works dates converted numbers prefix arbitrary strings want sort alphabetically", "d": "1/2012"}, {"body": "course right assumed still talking dates like op date convertible string mistake", "d": "1/2012"}, {"body": "next version backbone current master support orderings comparators instead able define usual way", "d": "1/2012"}, {"body": "multiple usecases collection shown one order reverse comparator sort implementations pick one direction nt seem collectionreverse able quickly switch sort directions ascending vs descending", "d": "9/2013"}, {"body": "maintain collection instances collection clone may help", "d": "9/2013"}, {"body": "particularly useful take example situation collection represents grid data repeatedly sorting multiple directions nt make sense try maintain two different sources data switch one data object manipulate needed", "d": "9/2013"}, {"body": "stored multiple comparators collection swapped needed js var collection backbonecollectionextend comparators function b function setcomparator function key thiscomparator thiscomparators key return var collection new collection collectionsetcomparator sort collectionsetcomparator b sort", "d": "9/2013"}, {"body": "better workaround although still nt understand workaround necessary instead backbone simply supporting reverse method", "d": "9/2013"}, {"body": "could also", "d": "9/2013"}, {"body": "nope ca nt bound event model created object bind onto suggest writing pattern like", "d": "4/2011"}, {"body": "makes sense thanks jeremy", "d": "5/2011"}, {"body": "reason nt really want set view element external dom object avoid makes depend specific rendering order ui much better leave view alone simply insert dom ready way views created events delegated convenient order", "d": "4/2011"}, {"body": "jashkenas hoping clear confusion thought events ca nt delegated inserted dom case thanks", "d": "2/2012"}, {"body": "large part point using declarative events backbone views delegated time regardless view happens dom", "d": "2/2012"}, {"body": "ah thanks response definitely would make sense know reason declarative events would get stripped delegated view inserted dom part event callback example model view inserts dom none declarative events subviews bound yet running firebug works perfectly events set another observation call individually subviews view object code block firebug callback run events get set originally thought issue views yet inserted dom", "d": "2/2012"}, {"body": "darbyw think issue likely due repetitively calling element replacing content jquery cleans html replaced includes removing event handlers likely handlers removed jsfiddle illustrating issue prevent using detach", "d": "2/2012"}, {"body": "braddunbar many thanks problem many different places", "d": "2/2012"}, {"body": "post issue well", "d": "2/2012"}, {"body": "similar problem cause thinking replacing callback want remove empty function fiddling callbacks directly later could purge empty functions callbacks necessary least would affect size array callbacks lie otherwise course ugly suppose could also make model extending existing one though starting sound like bad idea p", "d": "4/2011"}, {"body": "would wrapping around callback need", "d": "4/2011"}, {"body": "yes removing element list iterating nt great idea nt problem specific backbone callbacks removal use make sure ever gets called callback third function calls onetime function appropriate good options", "d": "4/2011"}, {"body": "great idea remove item list explicitly iterating remove concern could happen accident backbonejs eventdriven framework lot seemingly unrelated things happen triggering events point view one defer every single time unbinding avoid possible problems unbind kinds bugs take unproportional chunk time realized", "d": "4/2011"}, {"body": "tehmou got particular patch like propose ears", "d": "4/2011"}, {"body": "jashkenas triggering loop check whether list valid list list apply arrayprototypeslicecall arguments else listsplice unbind set callback null instead splicing array trigger purge nulled callbacks described sounds feasible missed something", "d": "4/2011"}, {"body": "ok added sophisticated event handling able unbind event middle triggering go next release thanks bringing issue", "d": "4/2011"}, {"body": "thanks listening appreciate sorry slow constructive proposals took process problem side note pushing backbonejs recommended framework inside company bulletproof", "d": "4/2011"}, {"body": "know issue closed ran issue couple days ago thought share fix little simpler nt require nulling callbacks found cloning array calling reassigning property clean solution cheers aron edit updated ticket remove example code broken", "d": "5/2011"}, {"body": "think following solution function trigger suitable need modify", "d": "7/2011"}, {"body": "added entry", "d": "4/2011"}, {"body": "yes either bind catchall route handler rely fact returns initial route matches", "d": "4/2011"}, {"body": "great info thanks", "d": "4/2011"}, {"body": "problem adding entry like need add routes initialization routes matched order inserted routes added route never matched historystart solution works page load still think worthwhile feature add", "d": "5/2011"}, {"body": "note work catch path", "d": "6/2012"}, {"body": "jeremiahlee point routes evaluated order defined make sure add catch route end always", "d": "8/2012"}, {"body": "working multiple routers becomes issue needs better solution", "d": "8/2012"}, {"body": "like detect dead links either inside application external source application adds routes arbitrary times like callback route matches could event router listen", "d": "10/2012"}, {"body": "currently achiving adding following catchall route end routes router invalidroute showerrorpage", "d": "10/2012"}, {"body": "love clear time routes added might suffice workaround reset routes added spawn problems later much nicer would get callback route matches pretty please", "d": "10/2012"}, {"body": "also patch trigger whatever events like instance", "d": "10/2012"}, {"body": "um schrieb brad dunbar also patch trigger whatever events like instance good point thats probably still feel functionality supported framework monkeypatching reliable way regards martin", "d": "10/2012"}, {"body": "right altering ideal included could use custom history like following history api rather stable relying behavior fine idea write patch", "d": "10/2012"}, {"body": "added", "d": "10/2012"}, {"body": "view events backbone jquery event stop propagation let continue needed look handle events jquery good go", "d": "4/2011"}, {"body": "nt realise used jquery events thanks", "d": "4/2011"}, {"body": "override global model collection specific basis giving function allow accomplish describe", "d": "4/2011"}, {"body": "hm nt know override get work wondering improve", "d": "4/2011"}, {"body": "sometimes two requests valid first returned", "d": "2/2012"}, {"body": "great point buys often perhaps key options parameter mike phone feb jeremy ashkenas reply replygithubcom wrote sometimes two requests valid first returned reply email directly view github", "d": "2/2012"}, {"body": "turns ca nt modify collection iterating normal though mentioned documentation little strange calling destroy model automatically removes collection simply copy array first eg using arrayslice destroy items iterating", "d": "4/2011"}, {"body": "implementation probably nt safe kind operation happens lot lists implementations every language framework review data structure notes", "d": "9/2012"}, {"body": "thank eordano instructive got answer", "d": "9/2012"}, {"body": "yes redefine idattribute whatever name id models", "d": "4/2011"}, {"body": "idattribute sorry rename id attribute backbone model id checked annotated source code see id hardcoded ca nt renamed repeat couchdb ids stored id backbone id one needs redefined renamed otherwise direct json communication nt possible thank hints", "d": "4/2011"}, {"body": "read around line", "d": "4/2011"}, {"body": "oh see trunk tried sorry still working expectations save model back couchdb put id name id used json id server side rename id id save assume synch method needs fixed somehow id paramsdata named like idattribute", "d": "4/2011"}, {"body": "always change tojson function model", "d": "4/2011"}, {"body": "yes could think sould implemented backbone respect idattribute tojson function", "d": "4/2011"}, {"body": "may stumble across created gist provides way accommodate overriding tojson method models amp collections also hoping something like would supported natively sure reasons nt issue also apply mongodb ran", "d": "5/2013"}, {"body": "stumbled upon agree binarykitchen fixed core overridden way around needed nt really moment halfassed surprising functionality would open discussion doubt nt break things sane people rest adjust", "d": "1/2015"}, {"body": "two weeks passed comment nt seem relevant anymore huzzah", "d": "1/2015"}, {"body": "dunno afraid ca nt debug app brief description problem turning browser debugger let get full stacktrace exactly going", "d": "4/2011"}, {"body": "websockets great backbone models wellequipped work together smoothly nt something backbone builtin external plugin integrates backbone websockets solution like socketio", "d": "4/2011"}, {"body": "duplicate", "d": "4/2011"}, {"body": "sorry afraid way packaging works moment minified version regenerated version changes repo gets merged directly ghpages branch using decent asset packager ever need use unminified version hopefully", "d": "3/2011"}, {"body": "like keep code date using minified version things differently using unminified version sure version number increased code still work would nt make sense minified version date aswell using git commit hook something similar kind problems would nt exist", "d": "3/2011"}, {"body": "nope changing minified version file constantly git repo would massively bloat repository making practically unusable", "d": "3/2011"}, {"body": "mean backbonejs changed backboneminjs changed also bloat unusable keeping files sync ought another option andri suggested would delete minified version master altogether current situation creating possible problems could explain worries keeping sync", "d": "3/2011"}, {"body": "jeremy minjs file master repo akin compiled binary version control github pages branch requires go ahead keep solely ghpages branch putting separate asset packing aside moment minified ver meant rebuilt usage currently tracked git repo mark changed every time used also applies underscore repo", "d": "3/2011"}, {"body": "require help get packaging system changed nt depend generatedprocessed files minjs repo would give pointers start", "d": "3/2011"}, {"body": "persuasive removed minified versions underscorejs backbonejs respective repos rebuild branch thanks pushing issue", "d": "4/2011"}, {"body": "awesome rock", "d": "4/2011"}, {"body": "thanks clarified jquery zepto required history support", "d": "4/2011"}, {"body": "sounds like programming minified version great idea development use development version", "d": "3/2011"}, {"body": "views share behavior able simply extend would class example documentcloud", "d": "4/2011"}, {"body": "implement event handlers dialog event handlers timelinedialog use extend parent child events property overrides parent events property child events bound right", "d": "4/2011"}, {"body": "yes currently need override constructor child merge properties prevent constructor blowing away events defined parent least stay example might nice cleaner solution box works", "d": "4/2011"}, {"body": "works better class quicknuminputview extends forminputview plusid elementid plus minusid elementid minus template label events extend forminputviewprototypeevents click plus doplus click minus doplus locates solution near problem still love able make generic seems events really method could class quicknuminputview extends forminputview plusid elementid plus minusid elementid minus template label events extend super click plus doplus click minus doplus", "d": "5/2011"}, {"body": "hmm guess spoke soon nt look actually problem sorry bother", "d": "3/2011"}, {"body": "solved issue extending remove method view making sure call method leave view view method simply uses unbind event handlers initialize used bind actually pretty straightforward pretty hard handle magic provided framework least current event implementation", "d": "3/2011"}, {"body": "remove dom events view element sharing dom element among multiple views use custom approach", "d": "4/2011"}, {"body": "found issue searching solution similar problem recently new function called undelegateevents committed hth", "d": "9/2011"}, {"body": "recentish patch copy closest version prototype chain making overridable inheritable", "d": "4/2011"}, {"body": "following pattern getting overridden behavior using latest version code described patch javascript var baseview backboneviewextend extend function alert extend called return backboneviewextendcall arguments var subview baseviewextend nothing var baseviewprototypeextend alert shown use case identical want add postextension hook ideas problem could", "d": "3/2012"}, {"body": "cervantesvive attempted thing issue intended work think object passed extend become prototype properties seeing behavior end something like following", "d": "9/2012"}, {"body": "without investigating apply used instead call see reference backbone model constructor var baseview backboneviewextend prototype properties baseviewextend function alert extend called return backboneviewextendapply arguments lt use apply var subview baseviewextend alert shown", "d": "11/2013"}, {"body": "goranvukovicoskyinteractive absolutely thanks catching", "d": "11/2013"}, {"body": "options forwarded correctly refresh perhaps added since issue opened", "d": "4/2011"}, {"body": "afraid aware particular examples backbone draganddrop integration open codebase perhaps would good question mailing list", "d": "4/2011"}, {"body": "awesome thanks forum must new", "d": "4/2011"}, {"body": "say meta questions never ever okay anywhere ask nicely wrong place told right place", "d": "3/2011"}, {"body": "place channel irc", "d": "3/2011"}, {"body": "google group", "d": "3/2011"}, {"body": "google group never official place ask questions hopefully get shut soon", "d": "3/2011"}, {"body": "ok good know removed wiki", "d": "3/2011"}, {"body": "new github know ask doubts asking please help solve issue thanks advance trying control mouse help image processing using dsp processor davinci board know interrconnect opencv code board", "d": "2/2015"}, {"body": "afraid roadmap page nt added empty removed glad talk little plan next major release run currently open tickets goes without saying implement optin history support pushstate replacestate make less assumptions onecollectionpermodel ie default implementation removed take look ideas table deeply nested collections ie ligamentsjs see anything worth pulling revisit naming potentially confusing functions like vs", "d": "3/2011"}, {"body": "nice hear upcoming promising improvements things appreciate merge method collections better support classy models mixins class methods better handling extended models btw yesterday revive closed methods direct properties bug increased core robustness yesterday constantly ran error regarding line", "d": "3/2011"}, {"body": "take look ideas table deeply nested collections ie ligamentsjs see anything worth pulling may also suggest option ormrelational type stuff working fairly good", "d": "4/2011"}, {"body": "update check current progress branch", "d": "5/2011"}, {"body": "sure mimicing relational stores way go prefer see kind json document model complete events example able something like interesting project implements css selector type language json imagine process similar binding events using jquery ui events dom except binding events json model using abitrary json selectors instead css selectors idea would take achieve would neat regards thanks awesome library brad", "d": "6/2011"}, {"body": "new backbone nt run need nested collections yet get bit single collection per model problem already big one also happy see default url dependence collection scrapped seen tickets related createdestroy events models word think goes handinhand multiple collections per model personally also think going orm direction right way go lack orm actually made spend much time getting know appreciate backbone like idea unobtrusive event based models without complication personal use case creating single page application synchronizes collections models across clients server via socketio events rest orm low priority elaborate interested thanks hard work looking forward next release", "d": "6/2011"}, {"body": "change log available notes upgrading", "d": "7/2011"}, {"body": "pass jquery options backbone save fetch sync call including additional headers", "d": "3/2011"}, {"body": "doh makes sense thanks", "d": "3/2011"}, {"body": "afraid nt possible current implementation instance method model model call also may take advantage model internal state may may exist time implement function terms see fit", "d": "3/2011"}, {"body": "example collection", "d": "9/2011"}, {"body": "know old kidkarolis thanks suggestion also nt create new instance model use", "d": "9/2012"}, {"body": "call backbonehistorystart creatinginitializing controller", "d": "3/2011"}, {"body": "reason nt work day gah thanks", "d": "3/2011"}, {"body": "backbone could implement fe like var documentrow backboneviewextend events click openclick function", "d": "3/2011"}, {"body": "one solution dependencies could naming conventions classes used view used styling still mapping step every selector action handler could removed fe underscore convention classes naming var documentrow backboneviewextend click open function", "d": "3/2011"}, {"body": "afraid proposal bit halfbaked point backbone events map dom elements properlynamed actions nt want rely special properties inherent html said like modify version backbone watch attributes go right ahead", "d": "3/2011"}, {"body": "said could done without data attributes however data perfectly fitts purpose far know intent mapping step selector event function think function names really important case views nt want invoke directly think last example", "d": "3/2011"}, {"body": "think function names terribly important case views case object big fan last example", "d": "3/2011"}, {"body": "well problem event handlers really good portableusable event object passed first argument want call handler directly emulate event object function needs valid use case function nt use event object inconsistent always take care function usable know mean", "d": "3/2011"}, {"body": "want say views shold nt provide api classes work functionality provided api land controllers classes", "d": "3/2011"}, {"body": "using view methods api way broken like prototypejs super thingy", "d": "3/2011"}, {"body": "feature already present master go next release", "d": "3/2011"}, {"body": "great idea patched", "d": "3/2011"}, {"body": "thanks jeremy", "d": "3/2011"}, {"body": "noticed issue already created pull request duplicate closing", "d": "3/2011"}, {"body": "like guess better way", "d": "3/2011"}, {"body": "glad see found nice way mapping json array legit", "d": "3/2011"}, {"body": "actually munging need json way fit model collection somehow moment happens outside whole pass collection", "d": "3/2011"}, {"body": "sure take look model parse collection parse", "d": "3/2011"}, {"body": "parse called backbone whenever collection models returned server fetch since fetch happening call manually tried following namespace remains appproductscollection backbonecollectionextend", "d": "3/2011"}, {"body": "yes fetch happening map json want fit model collection add convenience function", "d": "3/2011"}, {"body": "see thanks would great backbone models could support reading static file data smoothly reading url think", "d": "3/2011"}, {"body": "might want look set tools query static lists specifying querystrings", "d": "3/2011"}, {"body": "problem jquery thinking request treated jsonp seems double thinks string contains jsonp callback parameter string value getting internal function automatically creating handle response slightly clear jsfiddle case", "d": "3/2011"}, {"body": "consensus jquery bug guess fixed jquery", "d": "5/2011"}, {"body": "fact fixed jquery see", "d": "5/2011"}, {"body": "looks like actually set calls validation method set called save function pass attributes reason initialize method passes silent true set prevents validation looks like intentional sure initialize function would bypass validation like since commit", "d": "3/2011"}, {"body": "think real issue silent true probably skip validation option implies skip dispatching events ideally another option skipping validation", "d": "3/2011"}, {"body": "see saying also see makes sense disable validation silent set true validation errors model constructor takes options parameter think best fix would change line thisset attributes silent true thisset attributes options way whatever options passed construction passed set", "d": "3/2011"}, {"body": "right totally makes sense hand always option silencing validation error events still running validation", "d": "3/2011"}, {"body": "validation errors fail silently", "d": "3/2011"}, {"body": "created pull request address issue", "d": "3/2011"}, {"body": "also find validation logic original example ticket bit counterintuitive especially docs modelsave say model validate method validation fails model saved fact true pass attributes hash save method attributes provided begin eludes since feel unnecessary duplication set bit offtopic", "d": "3/2011"}, {"body": "came across well six weeks late think assumption validate validate setting new attrs validating model rest us use validate new attrs validate whole model new attrs makes sense call validate modelsave null options everything make sense ended ugly solution well unless nt like new case elegant models commonality decorated backbonemodel class call modelinit instead new model allows trap instead var new model msave var mymodelinit msave covers init used var new model attrs return new mset attrs return way though", "d": "7/2011"}, {"body": "alright addressed", "d": "1/2012"}, {"body": "great ends npmed node would post version well", "d": "1/2012"}, {"body": "huh model methods real methods object nt example code posted nt work would call", "d": "3/2011"}, {"body": "oops fault must overlooked yesterday excessive debugging session", "d": "3/2011"}, {"body": "hmm seems ticket nt entirely wrong code bar method works expected foo nt become real method", "d": "3/2011"}, {"body": "apparently might want try backbone google group", "d": "5/2011"}, {"body": "trying refresh class collection instance class words instantiate runners collection like var runnerset backbonecollectionextend var runners new runnerset id bacons bffid rubber false stolenat loverid rememberedat runnersfirst get id", "d": "3/2011"}, {"body": "thanks guess documentation really meant say quotes twice loading bootstrapped models app first loads common set initial models know going need order render page instead firing extra ajax request fetch nicer pattern data already bootstrapped page use refresh populate collections initial data documentcloud erb template workspace something along lines accountsrefresh lt accountstojson gt projectsrefresh lt projectstojson collaborators gt true gt", "d": "3/2011"}, {"body": "many backbone tutorials still refer refresh think doc updated order explain refresh renamed reset", "d": "11/2011"}, {"body": "sounds like trying access dom initialized", "d": "5/2011"}, {"body": "sort paging would indeed useful collections maybe something like", "d": "3/2011"}, {"body": "found implementing method turned look less exactly like existing fetch method except calls instead method takes care specifying pageoffset might nice built existing option", "d": "4/2011"}, {"body": "branch takes option allows get behavior easily", "d": "5/2011"}, {"body": "looks like duplicate", "d": "5/2011"}, {"body": "right passed reference simultaneously iterated amp altered patch fixes issue test case also adds test case missing anyway", "d": "4/2011"}, {"body": "call effectively remove models additionally pass second parameter silence events", "d": "4/2011"}, {"body": "cool handy even think modified handle special case way works results unexpected behaviour", "d": "4/2011"}, {"body": "special case remove objects using really want remove objects cloning outside collectionremove call necessary handle special case removing members referencing words wanted remove handful models sending new array anyway", "d": "4/2011"}, {"body": "nice would make decent backbone plugin", "d": "5/2011"}, {"body": "rather old curious know progress created quick version plugin based seems work even automagically expose members looking defaults object one exists uses hacks like wrapping backbonemodelextend looks like works pretty well tests feedback would appreciated", "d": "4/2012"}, {"body": "changed windowview projectview windowview new projectview", "d": "3/2011"}, {"body": "hi research help stackoverflow answer problem db locking caused fact using sqlite development nt like many requests coming quickly locks lame deployed heroku postgres db problem closing bc really nothing bb db shenanigans curious know wanted delete items would sending delete requests api really way creating batch delete suggesting actually sound idea anything fundamentals rest suggest requests must atomic batch thanks", "d": "3/2011"}, {"body": "one restful way handle batch delete delete resource represents example", "d": "3/2011"}, {"body": "creating separate resource expects array input delete give whirl thanks much jeremy", "d": "3/2011"}, {"body": "would nt easier maybe logical override save method", "d": "3/2011"}, {"body": "got point", "d": "3/2011"}, {"body": "considering models return value comparator order would undefined nt think particularly surprising nt want use comparator nt pass one", "d": "5/2011"}, {"body": "updated whenever point release backbonejs", "d": "2/2011"}, {"body": "missed earlier agree would good see", "d": "3/2011"}, {"body": "afraid javascript works backbone models nt defined schemas arbitrary hashes passed way go want create backbone plugin behavior sure would popular wiki", "d": "5/2011"}, {"body": "hah nice catch", "d": "5/2011"}, {"body": "", "d": "4/2011"}, {"body": "sure models nt store either least anymore general local variables preferred instance variables possible", "d": "5/2011"}, {"body": "define validate function model called set call", "d": "3/2011"}, {"body": "please reopen assume current behavior requires options param validation true passed set even validate function model makes impossible generally enable validation without redefining set cancels validation", "d": "1/2013"}, {"body": "encountered similar issue today seems something fact backbone records previous attributes whole instead ones changed", "d": "5/2011"}, {"body": "thanks bug report previously known limitation synchronous change events nested think way fix take look commit let know think", "d": "5/2011"}, {"body": "works", "d": "5/2011"}, {"body": "hi issue fix ticket closed", "d": "6/2011"}, {"body": "link online test case allows reproduce problem perhaps jsfiddle", "d": "6/2011"}, {"body": "hi jashkenas sorry able fixed removing lines removed using controllers anyway something wrong lines thanks feedback", "d": "6/2011"}, {"body": "sounds like good go", "d": "6/2011"}, {"body": "old issue ie may helpful someone backbonehistorystart called dom built domelement body defined fix backbonehistorystart called dom built jquery document ready function backbonehistorystart", "d": "10/2011"}, {"body": "running exact issue amp race condition going going hard define test case repro sometimes works sometimes nt", "d": "8/2012"}, {"body": "mikeobrien believe need ensure dom loaded like alekzonder work", "d": "8/2012"}, {"body": "yeah saw solution using requirejs initially impression require method called dom loaded wrong assumption alekzonder solution trick", "d": "8/2012"}, {"body": "ca nt load scripts bottom page would nt effectively remove need domready considering dom loaded time script tags parsed amp executed mark mcdonnell friday august mike obrien wrote yeah saw solution using requirejs initially impression require method called dom loaded wrong assumption alekzonder solution trick reply email directly view github", "d": "8/2012"}, {"body": "nature extend allow overwrite anything name basically hash merge second view add event events initialize function call thisdelegatevents afterward", "d": "3/2011"}, {"body": "juggy answer workaround obvious ugly extend could deep merge nt hurt jquery wo nt hurt underscore", "d": "3/2011"}, {"body": "agree needs fixed events delegation feature best feature view class working around every time extend crappy", "d": "4/2011"}, {"body": "strange reason closed two months important problem still something solved", "d": "6/2011"}, {"body": "clearly much simpler elegant way merge inherited events added events", "d": "6/2011"}, {"body": "implemented feature made pull request anyone interested changes commit added version mataspetrikas original superclass events object gets overwritten gets shadowed prototype chain another backboneview subclass events object classes created extend simply merges properties two objects created using prototype chains interested google pseudo classical inheritance see ca nt use function like extend jqueryextend case implementation added walks prototype chain given view instance collects events objects defined along way end objects merged single events object used set event delegation", "d": "8/2011"}, {"body": "afraid nt agree change go prototype chains javascript actually work makes impossible view subclass ignore events parent view listens current situation possible create events hash choosing whereas automatically merged events parent way disable need something fancy call hash something call function set liking view backboneviewextend initialize function thisdelegateevents thisbuildevents", "d": "8/2011"}, {"body": "jashkenas trying ignore events superclass subclass means likely something wrong oo design nt extending superclass first place wrong level abstraction code superclass trying much however always override handler methods subclass wanted ignore certain events right easy way events extend subclass without fairly ugly workarounds completely duplicating events bad something like remembered developers use like mentioned calling delegateevents manually implementing scheme using another variable name remembered developers may looking documentation thinking works another way however one thing could see problem might automagical people easily recognize going events would inherited rather overwritten people probably nt extend past backboneview anyway leave decide may convenient developers decide implement provided method could overridden delegateevents collects events hash use method would simply return default implementation could overridden allow prototype walking implementation like mine btw implementation nt go prototype chains work actually takes advantage fact walkable chain unlike lexically scoped variables best greg", "d": "8/2011"}, {"body": "mirror current pattern model happens function call instead treating hash use super call merge parent events desired coffeescript class subview extends parentview events gt extend super", "d": "8/2011"}, {"body": "fixed", "d": "8/2011"}, {"body": "hmm unfortunately still requires developers remember something subclassing believe actually like extend workaround better function anyway would instantiationtime overhead create merged hash actually going memoize collectevents method created avoid overhead figured start simple first see merged changes best option really think point overridable method retrieves events instance changed first line call method retrieve events backbone could still ex delegateevents function events events events thiscollectevents return default overridable implementation collectevents function return thisevents would allow plugin override written anyone wanted events inheritance feature however think almost liking fact need workaround prototype explicitly says subclass events extending superclass events like workaround posted earlier problem newbies wo nt know perhaps adding something documentation says workaround want feature", "d": "8/2011"}, {"body": "since lot tiny backbone extension use big tripping point hash manipulating subview also changes original view backbone fails hard example original view helper means nt worry making function", "d": "10/2012"}, {"body": "like change behavior recommended override", "d": "5/2011"}, {"body": "connected pull request", "d": "2/2011"}, {"body": "like see happen well", "d": "3/2011"}, {"body": "nt creating pull request idea core dry eases maintenance", "d": "5/2011"}, {"body": "afraid url reversing nt sound concept routes able take arbitrary regular expressions arbitrary regular expressions ca nt reversed even django addition good urls nt change code changes url reversing general kind antipattern humble opinon try stay away even serverside", "d": "5/2011"}, {"body": "already setting default function returns hash attributes", "d": "2/2011"}, {"body": "thanks note commit updated documentation make clear friends useful course event", "d": "5/2011"}, {"body": "sure many people confused would better current named something else answers question respect last model object", "d": "6/2011"}, {"body": "related event naming seems logical one thing missing able pass array check multiple attributes time", "d": "6/2011"}, {"body": "thorough analysis personally making server give rpcish responses form vs allows directly patch chrome model ie use vanilla update attributes response allows listen display errors would vladimir", "d": "2/2011"}, {"body": "vladimir thanks feedback approach sounds intriguing although seems unrestful degree clear exactly returning backbonemodel structure model attribute contains real model information perhaps could show full json sample happens server simply respond result since serverside validations failed want display error message next form field seems would need get back array unless something missing solution", "d": "2/2011"}, {"body": "really lovely ticket thanks research said sure concrete path forward proposed tauren considered trying turn ideas patch", "d": "5/2011"}, {"body": "jashkenas hoping get thoughts best handle building patch main concern solution probably backwards compatible high likelihood patch would rejected overall intent make sure error handlers receive consistent set parameters consistent order information lost along way several options proposed stand preferred way forward error handlers passed possible parameters null values nt make sense error handlers passed single object properly named properties properties nt make sense defined call save multiple error handlers instead one would mean would validationerror syncerror handler additional events error sync error validation somewhat leaning toward option would nt apibreaking change would acceptable", "d": "5/2011"}, {"body": "api breaking ok especially context major release backbone going hand complicating interface much would indeed probably get rejected current master callbacks events always passed true error object could clientside validation jquery response options may bit bit less processed nt think major issues anything simple ca nt solve none three options seem like real improvements", "d": "5/2011"}, {"body": "see committed change always passes options happening simple able solve problem case latest commit given perhaps would best leave user figure failed complicate", "d": "5/2011"}, {"body": "hi nerian got intention correct backbone currently light dependency either jquery zeptojs want use mootools dojo legwork port jquery pieces nt hard old version mootools adapter available", "d": "2/2011"}, {"body": "nice seems quite simple run tests", "d": "2/2011"}, {"body": "open testtesthtml browser page looks like", "d": "2/2011"}, {"body": "nerian would interested know progress make thanks", "d": "3/2011"}, {"body": "sure code currently tests pass view test pass working got errors kind weird maybe take look", "d": "3/2011"}, {"body": "running tests view remember change line", "d": "3/2011"}, {"body": "babu guessing error handler running model validate failing understanding following steps happen modelsave modelset executed attributes passed save instance modelsave name john run modelset name john modelvalidate executed within modelset validate fails set fails save fails error handler passed save would called without ajax sync call made assuming model validates set sync called save get successful response response passed set update model new data server set call validate new data validate fails set fails causes save fail error handler get called case betting validate fails step backbone expecting updated data response nt get attempts update model empty data validate method fails causes save fail call error method may need return model json put api make work alternatively could add parse method model would massage response something validate nt tested might worth trying create new issue regarding similar topic might want check", "d": "2/2011"}, {"body": "hi tauren thanks response nt validate method model object however indicated may put method returning empty response tried return model json put method worked thanks rails using respondwith model update controller method nt return anything response body status changed render json gt modeltojson returns json backbone working expected thanks explanation babu", "d": "2/2011"}, {"body": "yep feel free define bulk modification individual resources something outside scope simple rest nt onesizefitsall implementation go wind good conventions bulk saves bulk deletes bet would make highly successful backbonejs plugin", "d": "5/2011"}, {"body": "nope looks like bug code probably mean call bind also probably want define fat arrow", "d": "5/2011"}, {"body": "right accounts fixed ago forgot close sorry", "d": "5/2011"}, {"body": "make custom validate model perform additional validation hands made whole backbone async given jquery introduced promises much useful way deal async stuff promises calls normalized would nt matter whether sync async", "d": "2/2011"}, {"body": "thanks custom validate model yet far tell way add async process without async support baked backbone using jquery deferredspromises well think backbone needs async support well uses jquery promises happens zepto users personally think async support critical understanding suggestion different way make custom validate would allow", "d": "2/2011"}, {"body": "yep point entirely synchronous clientside like perform serverside validation feel free run validation change clientside state calling another option assume validation pass allow server reject change passing back either error resetting model back previous attributes three options work fine", "d": "5/2011"}, {"body": "need modern browsers profiled large backbonejs app documentcloud heavy use memory leaked", "d": "3/2011"}, {"body": "desktop memory really nt issue mobile app working discovered large allocations backbone views list items bound respective models course cause noticeable slowdowns mobile safari android even crashes one occasion testing caching reusing views much possible helped type cleanup would definitely help lot manually", "d": "4/2011"}, {"body": "probably effects dom seeing true browser certain extent want optimize piece ui hundreds thousands items good way go turn single dom insertion means instead hundreds views one inside single template loop builds html models documentcloud use technique entities tab potentially thousands items", "d": "4/2011"}, {"body": "great advice something well clarified list view displaying items time slowdown saw happening list simply refreshed times row time views created responsiveness got worse worse list items completely solved issue far tell caching views model id reusing list refreshed simply updating model attributes fresh data server rerendering", "d": "4/2011"}, {"body": "tried profiling memory use chrome heap profiler perhaps references dom fragments holding", "d": "4/2011"}, {"body": "great thought nt seeing slowdown desktop plenty memory mobile safari ios android nt occur try found whole lot areas could optimizing thanks", "d": "4/2011"}, {"body": "jashkenas case view registered event listeners associated model collection remove view dom modelcollection still holds reference view wo nt garbage collected johnny answer stack overflow question addresses issue nicely first comment answer dmitry polushkin also brings good point destruction nested views think backbone provide mechanism view remember objects hold references via event listeners listeners could removed automatically view removed would receptive something like backbone core", "d": "3/2012"}, {"body": "would receptive something like backbone core sure ends something useful apps apps tend throw away views models time nt ever run issue", "d": "3/2012"}, {"body": "would useful jashkenas backbone viewmodelcollection paradigm makes quick easy devs write complex stateful apps ends happening happened company new product time one discovers memory leaks abundance listeners attached model collection nested view ref parent view nt necessarily gced even parent view dom elements removed makes extremely difficult work solution builtin way track references even way track viewsmodelscollections added context view traverse array removing parent views listeners would spectacular", "d": "10/2012"}, {"body": "mjefferson view dispose recently added backbone think lays pretty good groundwork view disposal conventions check discussion topic disposing child views probably something backbone dictate easy enough provide semantics", "d": "10/2012"}, {"body": "think general thought seo matters web pages applications application marketing web page seo", "d": "2/2011"}, {"body": "guess link could help", "d": "2/2011"}, {"body": "main problem person disability lot screen reader able run js lot work make backbonejs accessible google blind work make read js need easystandard way make stuff like works box search engine read js look roles see content actions know lot peoples nt care want play json fun stuff tell going major barrier web applications public market least documented", "d": "3/2012"}, {"body": "pretty good article topic idea use pushstate backbone supports update browser url needs combined type server side technology render html accessibility seo clever way use nodejs reuse backbone render html server side think might meteor framework roadmap", "d": "5/2012"}, {"body": "web apps integrated frontend backend facebook example would app frontmatter pages accessible regardless js capabilities probably still single javascript code base build facebook style app one single backbonejs code base", "d": "7/2012"}, {"body": "think would happen output data backbone would output part site seoizable form idea", "d": "10/2012"}, {"body": "created service beta allows easily allow seo automatically generates sitemapxml backbonejs single page apps", "d": "10/2012"}, {"body": "nice idea nt think reinventing dom event bubbling terms backbone views always use dom events jquery custom events like might make popular backbonejs plugin", "d": "5/2011"}, {"body": "realize old ticket still mind check guy", "d": "1/2013"}, {"body": "replicated issue sample page demonstrates problem gist", "d": "2/2011"}, {"body": "came across issue one projects believe caused permission denied reference thisiframelocation controllerrouting sections backbone taking thisiframelocation allows hashchange events work correctly lose history support looking source ben alman jquery hashchange plugin think fix would set documentdomain iframe didnt get time test make fix project working history support wasnt essential", "d": "2/2011"}, {"body": "quick debug seems iframe location getting set first time window hash changes iframe window hash sync next time two hash locations polled iframe hash still unset backbone seeing back button invocation resetting window hash back value iframe hash ie blank historyjs might good place find fix starting line iframe opened closed soon created order add initial history state append iframe documentbodyappendchild iframe create initial history entry iframecontentwindowdocumentopen iframecontentwindowdocumentclose backbonehistory subsequent hash changes seem work still need save location opening closing iframe appropriate points savelocation logic little coupled noniframe stuff need teasing apart probably need sort history support project currently working try get fix tests next couple weeks", "d": "2/2011"}, {"body": "looks like adding right iframe created solved problem", "d": "3/2011"}, {"body": "made changes works", "d": "3/2011"}, {"body": "hi folks bumped one official fix released apply singleline monkey patch find backbonehistoryprototypestart function line backbone add following line updates iframe location match windowlocation cheers", "d": "3/2011"}, {"body": "realised certain circumstances wo nt actually set iframe hash instead using code", "d": "3/2011"}, {"body": "bug reproduced confirm fix works", "d": "3/2011"}, {"body": "patch really helped jonleighton thanks", "d": "4/2011"}, {"body": "jon leighton patch fix issue backbutton seems work ideas solve backbutton problem hashurls saved browser history", "d": "4/2011"}, {"body": "sorry chiming late reason exists clicking regular url like nt save history ie instead urls like also try jump anchor page want use correctly create history entries browsers still bug reproduced calling", "d": "4/2011"}, {"body": "note get permission denied errors make sure none code accidentally removes iframe dom eg replacing entire contents elements", "d": "4/2011"}, {"body": "anyone still working backbone ie history supported extjs history dojo history historyjs reason backbonejs outsider currently url bookmark causes ie lt redirect visitor empty hash write pull request fix lots pulls hanging already backbone supported", "d": "5/2011"}, {"body": "thanks nudge commit fix issue would incorrectly blank window hash iframe hash initial page load initial loads url containing hash", "d": "5/2011"}, {"body": "jonleighton thanks patch saved lot time nerves", "d": "5/2011"}, {"body": "jonleighton thanks patch saved lot time nerves", "d": "6/2011"}, {"body": "kkaefer thanks solved problem", "d": "2/2012"}, {"body": "kkaefer props mate", "d": "7/2012"}, {"body": "yes backbone default restful thing put complete representation resource server like send changed state default overriding way go", "d": "5/2011"}, {"body": "afraid perfectly valid key javascript object want custom object comparisontraversal going write logic", "d": "5/2011"}, {"body": "thanks tips followed three suggestions", "d": "2/2011"}, {"body": "great thanks link hunting", "d": "2/2011"}, {"body": "thanks fixed link", "d": "2/2011"}, {"body": "confirm behavior may similar problem mentioned", "d": "2/2011"}, {"body": "similar issue describing concerns validate called nt called sent server current workaround instantiate new instance model apply new attributes using modelsave success callback calling modelset response adding model collection", "d": "2/2011"}, {"body": "another side effect attributes applied creation attrs available initialize function furthermore since adding attrs directly creation views applied change events nt fired ca nt used work around rolled back avoid fix", "d": "3/2011"}, {"body": "commits around feb fixed validation issue maybe help guys try replacing collectioncreate using latest one give shot find collectioncreate starting line source code still problem attributes available initialize function however", "d": "4/2011"}, {"body": "hopefully fixed master go still trouble let reopen ticket", "d": "5/2011"}, {"body": "", "d": "3/2011"}, {"body": "nt think makes sense prefix routes underneath true page level especially actual support master certainly override like", "d": "5/2011"}, {"body": "sorry jquery issue fixed jquery", "d": "5/2011"}, {"body": "like add custom events feel free idea backboneevents mixinable object supporting custom event like better accomplished overriding function simply passing options directly jquery", "d": "5/2011"}, {"body": "believe ticket duplicate anyway rails control behavior toplevel node json setting activerecord baseincluderootinjson false see", "d": "2/2011"}, {"body": "looking solutions first solutions add small helper ror project like indicated another way use create method instead create like showed last like use small extension backbonejs extension take anybody knows better solutions pls give note", "d": "2/2011"}, {"body": "look bootstrapping data since need right away example", "d": "2/2011"}, {"body": "case data json stream makes sense separate request html cached aggressively data nt change often use similar approach bootstrapping example load data initializing controller starting history thanks hint", "d": "2/2011"}, {"body": "like stick github issues time poor experiences past google groups spam control etc feel free ask questions instant discussion ask irc", "d": "2/2011"}, {"body": "using setting rails change behavior without issue", "d": "2/2011"}, {"body": "found setting investigating see json posted root nodes original code working ca nt seem get working collectionfetch", "d": "2/2011"}, {"body": "sure exactly going wrong still giving trouble feel free drop irc help debugging putting example somewhere public online second question ca nt expose json attributes directly access prefer", "d": "2/2011"}, {"body": "thanks note taken stab fixing issue test", "d": "2/2011"}, {"body": "looks like right fix thanks", "d": "2/2011"}, {"body": "javascript prototypes nt support inheritance classlevel properties instancelevel properties expected behavior could start manually copying class properties fragile thing calling way go using instance method nt care using different object entirely", "d": "2/2011"}, {"body": "yeah eventually understood nt work expected solved using class helper augment works similar extend return new constructor function introduces new prototype though linked original override methods old prototype classconstructor methods appended thogh little hacky works us rack middleware automatically generates backbonemodels activerecord classes support validators wanted able extend classes application code function augment extra methods still allowing us call original methods need overrides", "d": "2/2011"}, {"body": "sure thing added", "d": "2/2011"}, {"body": "hmmm nt add remove together models change length stays think wontfix unless got really compelling use case sleeve add remove ca nt handle", "d": "2/2011"}, {"body": "implementing data binding based events whether display pager driven length collection may compelling something", "d": "6/2014"}, {"body": "patch", "d": "1/2011"}, {"body": "holds empty record", "d": "1/2011"}, {"body": "sure mean commented code added unless input something record invalid hence would fire expected happening still fires refresh page see empty entry managed slip", "d": "1/2011"}, {"body": "mean check condition holds eg", "d": "1/2011"}, {"body": "nt seem problem even set always fail still save record", "d": "1/2011"}, {"body": "checked ever gets called", "d": "1/2011"}, {"body": "quote original ticket yes preventing view new record created though firing described documentation", "d": "1/2011"}, {"body": "confirmed failing really preveng backbonesync firing effectively means prevent view rendered nt help stopping model sent storage remote otherwise design intended", "d": "1/2011"}, {"body": "personally treat bug moreover one calls validation nt occur call coded pity could nt get documentcloud reply whether bug feature admit serverside validation localstorage case serverside", "d": "1/2011"}, {"body": "problem example app calls rather whilst validation function still called model created manually fires model added list forces save best fix well firstly nt used situation however bug collectioncreate still save models invalid data fix change julio let make pull request", "d": "1/2011"}, {"body": "tried product defined checking whether number backbonesync still firing even though validation failed hence started thinking bug though considered might missing something question whether design decision bug name chrislloyddiditformebutstillletmedoit open suggestions", "d": "1/2011"}, {"body": "one fundamental things backbone took understand dirty attributes exist dom model reflect server bulk saving attributes always called argument nt passed attributes validate validations run equivilant running fix could lie checking validation save called arguments would wait jashkenas chime design decision easily worked around mean time", "d": "1/2011"}, {"body": "right keep looking previous fix sent nt working way fires working development version differs lot head know bad assumption header files said case take empty object nt prevent either version", "d": "2/2011"}, {"body": "feel spending much time sure wo nt last point replacing line actually prevent happening problem called calls internally calls forced least times come definitive solution make pull request", "d": "2/2011"}, {"body": "krisjordan submitted pull request bug validations used merged", "d": "2/2011"}, {"body": "would wary solving problem way problem objectarray combo talking still perfectly valid javascript however due way browsers handle javascript currently possible access data implement run risk browser changing behavior ever slightly destroying security way typically seen done add prefix kind data prefix valid javascript eg throw text javascript ca nt parse either way point ensure crossdomain request via tag fail able get data solutions slightly better less likely constructs become valid future although still possible said advice browser security handbook advocates slightly different solution note quite json interfaces intended crossdomain consumption rely somewhat fragile defense assumption certain specific object serializations param value meaningless prefixes amp amp amp start amp amp amp parse via endless loop prefixes prevent interception remainder data cases assumptions likely futuresafe better option require custom xmlhttprequest headers employ parserbreaking prefix unlikely ever work long basic structure javascript maintained one example string followed newline", "d": "1/2011"}, {"body": "seems suggestion require xrequestedwith xmlhttprequest header set best way handle much better js tweaking nt make assumptions javascript syntax implementations way think get around http request splitting exploit via proxy return data xhrs protected origin policy tags get data", "d": "1/2011"}, {"body": "security obscurity data given harvested weird format original poster could nt understand nothing stopping throwing data php page using jsondecode throwing database secure way way making sure request originating internally hence edit authenticating get session stored id changes request", "d": "1/2011"}, {"body": "radiosilence using prefix nt security obscurity plenty stopping throwing data php page origin policy mechanism ensures request originating internally cases allowing attacker site access documentcookies api site allowing attacker site make xhr request api site xhr method much simpler implement", "d": "1/2011"}, {"body": "coderrr please elaborate stops data nothing stopping using regex simply filter yeah method advocating", "d": "1/2011"}, {"body": "radiosilence please elaborate extract data element way aforementioned js hacks things like would prohibit", "d": "1/2011"}, {"body": "coderrr right xrequestedwith radiosilence nt seem understand origin policy check", "d": "1/2011"}, {"body": "okay malicious script loads data url text using authenticated cookie sends data text php script whatnot strip etc parse data missing something", "d": "1/2011"}, {"body": "saying js refuse use cookie load url", "d": "1/2011"}, {"body": "part missing malicious script loading data using authenticated cookie", "d": "1/2011"}, {"body": "something like jquery get would use cookie", "d": "1/2011"}, {"body": "exactly origin policy nt allow authenticated crossdomain requests via xmlhttprequest", "d": "1/2011"}, {"body": "riiight okay sorry clears csrf work around origin", "d": "1/2011"}, {"body": "typically using xmlhttprequest forge crossdomain postget request using plain javascript easiest way build fake form html use javascript submit allows make crossdomain requests ca nt see results though nt matter long request causes user take action website attacking instance lets pretend facebook nt protections place prevent possible cause person poke another person b making get request uid user id person poke could trick people browsing url would make poke target user edit clear though would nt work goal retrieve contents page", "d": "1/2011"}, {"body": "thanks nealpoole patched adding hash end linksactions work via get compared changing value session link work certain routes attack data compromised work", "d": "1/2011"}, {"body": "addressed much detail original description issue look top links flask documentation json security practical csrf json security give brief overview though basically passing back data considered valid javascript via get request malicious site use tags load data make authenticated crossdomain requests via tag returning actually javascript accessing data trivial json data depending format may possible get access data ie overriding constructors", "d": "1/2011"}, {"body": "great discussion post hn article linking consensus relying current javascript bugs lack thereof nt great way secure json parserbreaking prefixes betteryet requiring xhr headers way go", "d": "2/2011"}, {"body": "looks like header solution nt secure least according latest rails security fix impact certain combinations browser plugins http redirects used trick user browser making crossdomain requests include arbitrary http headers specified attacker attacker utilise spoof ajax api requests bypass built csrf protection successfully attack application users running affected release upgrade apply patches immediately guessing referring various types http request splitting", "d": "2/2011"}, {"body": "sure case could link quote closest thing found glancing commit quickly quite sure purpose changes cve references nt public yet help either", "d": "2/2011"}, {"body": "sorry noise discovered issue actually discusses", "d": "1/2011"}, {"body": "thanks idea mind clarifying use case exactly modeling helpful client get significantly sync server sure another user nt changed server state meantime", "d": "2/2011"}, {"body": "understood dave correctly also want see would make implementing modelrevert undoing local changes nice easy fact always assumed modelprevious modelpreviousattributes turns deal happens change events found bit confusing honest", "d": "3/2011"}, {"body": "sorry delay missed post february use case exactly stated used easily compare backbone thinks server compared current model assists logic displaying save button rolling back changes previous save version validation data element fails", "d": "3/2011"}, {"body": "nice glad easy implement use case nt think makes sense core backbone despite client might think server state may nt really know server state actually situation state could modified another user cached state simply incorrect client know client state check server instead assuming", "d": "5/2011"}, {"body": "tifroz understand coming certainly look odd counterintuitive model event would triggered collection event next time try opening github issue backbone proxies model events collection model currently contained", "d": "1/2011"}, {"body": "understand coming certainly worked hard make sound like nitpicking source code created issue try listener collection never received event stepped code went haha came across part obviously shortcoming somewhere else likely code resume investigation left thanks answer amp sorry came wrong way big fan backbonejs", "d": "1/2011"}, {"body": "backbone proxies model events collection model currently contained happens model contained multiple collections", "d": "5/2011"}, {"body": "please let us leak jquery code ideas backbone instead could accept array events mean providing comma separated tokens right best regards vladimir", "d": "1/2011"}, {"body": "vladimir right new backbone used philosophy behind api comment using array makes sense j", "d": "1/2011"}, {"body": "might also find useful best regards vladimir", "d": "1/2011"}, {"body": "afraid events arbitrary strings particular specified format addition nt want get habit supporting either multiple singular arguments every function closing one", "d": "2/2011"}, {"body": "actually use modified version flash uploader uploadify order get multiple document uploads browsers nt much backbone except server response creates new document model polls updates document ready server responds complete attributes document model view updates polling stops", "d": "2/2011"}, {"body": "one projects uploading backoffice backoffice targeting modern browsers use xhr upload formdata implemented jquery ajax transport handle xhr uploads directly set model attribute file object way working default backbone sync ps juste info server side use rails carierwave", "d": "2/2011"}, {"body": "tchak implemented jquery ajax transport handle xhr uploads directly set model attribute file object way working default backbone sync sample code", "d": "11/2011"}, {"body": "thiloplanz tchak guys ever discuss transport tchak xhr upload separate request via formdata backbone attribute request via ajax datatype json backbonesync default serialize model attributes formdata", "d": "3/2012"}, {"body": "thought wanted moment realised binds definition view state app point eg object must instantiated view defined temporal coupling never nice especially order classes defined personally write simple wrapper function view calls desired object method object passed view instantiation", "d": "2/2011"}, {"body": "code lets specify menu system app completely client side thing written coffeescript lets say things like menuinfo optmenu pages ioids id ioidbuttonsitecleaner text sitecleaner events click gt ioidsforsitecleanertrue displayioids false id ioidbuttonreplacer text replacer events click gt ioidsforsitecleanerfalse displayioids false still little hacky atm moreso app menu system p needs improvement nonetheless menu created ie menuopt ioids call delegateevents updated events gets information like think perhaps worthwhile feature even necessarily encouraged", "d": "2/2011"}, {"body": "sure follow usecase entirely imagine wrapper function would way go remember nt use complicated things use jquerydelegate whatever functions like", "d": "5/2011"}, {"body": "wondering well written code specific application manages instances type model ensures ever one instance overriding add method collection well checking see whenever model instance created sure limitations method would happy generalize time future submit review backbonejs hope get discussion going first determine best way architect addition would best even include backbone could potentially external module backbonemodel subclass currently backbonecollection subclass currently super messy know thoughts", "d": "4/2011"}, {"body": "also running issue would like know best solution handling nested models collections", "d": "5/2011"}, {"body": "cuboxbackboneatlas good ideas nested models amp collections work duplicates yet", "d": "5/2011"}, {"body": "nt see one could check backbonerelational pretty sure need javascript var user backbonerelationalmodelextend var project backbonerelationalmodelextend relations type backbonehasmany key members relatedmodel user type backbonehasone key manager relatedmodel user reverserelation type backbonehasmany key manages instantiate users projects match usersprojects id like desired syntax id name projecta members manager", "d": "5/2011"}, {"body": "multiple valid ways model object relationships clientside true object graph flat sql tables remote backbone agnostic model clientside relationships different circumstances work well different use cases deep nested attributes instead models example tags array strings post model nested collections true models example documentsfirst notes collection foreignkey style manytomany relationships example documents collection notes collection refer even fancier schemes possible even desirable need optimize things heavily approach tend use documentcloud described", "d": "5/2011"}, {"body": "cool helps lot thanks fri may jashkenas lt reply replygithubcom wrote multiple valid ways model object relationships clientside true object graph flat sql tables remote backbone agnostic model clientside relationships different circumstances work well different use cases deep nested attributes instead models example tags array strings post model nested collections true models example documentsfirst notes collection foreignkey style manytomany relationships example documents collection notes collection refer even fancier schemes possible even desirable need optimize things heavily approach tend use documentcloud described reply email directly view github", "d": "5/2011"}, {"body": "thanks idea calling definitely allow override previouslydefined routes patched backbone give spin let know think", "d": "2/2011"}, {"body": "update looks perfect local version backbone patched like time encountered issues", "d": "2/2011"}, {"body": "thanks note patched throw error attempt start history one time", "d": "2/2011"}, {"body": "would great code constantly things like coffeescript initialize bind event pollserverforchanges event state created state completed would lot cleaner initialize bind state created state completed pollserverforchanges", "d": "3/2011"}, {"body": "sure", "d": "3/2011"}, {"body": "nt think need change api call twice add helper function", "d": "5/2011"}, {"body": "sorry ignore forgot doh ca nt see delete issue otherwise would", "d": "1/2011"}, {"body": "link already fixed master deployed shortly thanks note", "d": "2/2011"}, {"body": "documentation reflects recent release next version goes updated match api", "d": "2/2011"}, {"body": "afraid actually one line backbonejs added provide nice coffeescript support property nt intended used manually whereas javascript write something like coffeescript write", "d": "2/2011"}, {"body": "ok thanks another reason give coffeescript try", "d": "2/2011"}, {"body": "use javascript code find convenient referencing extended constructor prototype definitely appreciated docs figured looking source code think current content quite misleading looks like explicitly reference base class kind example would appreciated ie explain attribute refers parent prototype need use ensure right value parent method invoked seem couple advantages form expresses intent better eg easier reader distinguish call method extended constructor vs call method totally unrelated constructor change base class even name nt worry explicit references method overloads issues missing suppose counterpoint change name change references guess understand wanting couple backbone documented features coffeescript even things change eg coffeescript stops looking think could still set backbone another alternative set property equivalent use javascript code maybe something without underscores try avoid problem side note make docs might also worth mentioning use ca nt clever tried looks like many people since breaks levels super calls thanks", "d": "5/2013"}, {"body": "considering ca nt delete location browser history proposing work", "d": "1/2011"}, {"body": "sorry please remove question moment frustration complex hash changes given certain object states late night grasped way hence question working fine though", "d": "1/2011"}, {"body": "could nt use historyreplace replace current state noop", "d": "1/2011"}, {"body": "nt tried issue renderinginitializing different views based hash wanted modify hash different times page view based various object states multiple savelocations single page view good thing ended simply using global variable represent revised hash using generate modified views one savelocation end modified hash different backbonehistorygetfragment", "d": "1/2011"}, {"body": "thanks code example share using ie binding", "d": "1/2011"}, {"body": "mostly ui update stuff basic exemple saving label form data saved backend also expense lines view line successfully created create new empty line right bind change id new comers would much practical bind create save update etc", "d": "1/2011"}, {"body": "cases callback seems better suited generic event spinnershow saving modelsave attrs success function spinnerhide rowsave attrs success function addnewrow", "d": "1/2011"}, {"body": "actually access save function put success callback tend rely binding heavily old os x dev habit seems setup views listen many events refresh accordingly save triggered outside view success event still catched view exemple controller saves model another view trigger save must hard decide must go must stay keep framework simple", "d": "1/2011"}, {"body": "sure hard sort decisions need based around concrete use cases sounds like good one different controller view calling save indeed reopening ticket got events like see added", "d": "1/2011"}, {"body": "far couple hundreds coffeescript lines using backbone events really missing", "d": "1/2011"}, {"body": "im agreeing jashkenas love javascripts event based world lets remember events used callbacks used event listeners perfect something needs happen sometime event triggered real dependencies nt always know whats event queue ahead behind callbacks used something must triggered code happen precisely called function running including callback run uninterupted done guaranteeing callback run event listener even event triggered callback block code provided weird async behavior via ajax web workers callbacks fired function finished garbage collection eventloop start running see runs next going argue existing code supports callbacks perfectly obviously desparately want event fire trigger one callback underscore jquery etc bind trigger custom events choosing god wrote muchbut hope helps move discussion along", "d": "1/2011"}, {"body": "mix event callbacks exemple error event also called backbonesync fails might lead confusion look sproutcore event loop events triggered async start event loop one first newbie mistake events also called specific order simplicity like use events callbacks backbone build around events facilities within framework use mechanism favor callbacks", "d": "1/2011"}, {"body": "wow absolutely right events backbone events callbacks still think best treat events asynchronous submit patch turn current triggering async event loop based one tying dom time id create custom trigger called save whatever need wrap save handler function trigger think best help move project actual async events first thanks insight sorry nt read bind trigger code prior commenting", "d": "1/2011"}, {"body": "quick note turning current triggering async event loop based one tying dom really really bad idea events pattern inversion control necessarily imply asynchronicity use events instead method calls whenever multiple objects notified central object state changes without central object aware observers done avoid models tightlycoupled ui example instead model like business model concerned views may may present page time instead allows model oblivious ui ui register events model changes making events async necessary browser involve extreme amount computation browser appear lock code much calculation means use break smaller chunks events async default merely slows things introduces nondeterminism none needed sorry strong opinion listening sproutcore messes confusion runloop recently", "d": "1/2011"}, {"body": "opinion sproutcore events async stuff whenever use confused stuff happens", "d": "1/2011"}, {"body": "thanks input understand decoupling difference callbacks events thought juggy wanted asynchronous approach side note nt believe async browser lockups avoid appearance code written async environment already written handle nondeterminism implicit environment fairness nt write way beginning hard get head around coded handle later date perhaps middle ground sproutcore messes neverintroduceasync approach hey give take", "d": "1/2011"}, {"body": "also come across couple personal use cases would like able insert callbacks save method modified model save function trigger events save request sent save successful response received watched view allow indicate model currently saved juggy done also using save event record copy attributes returned server check send attributes updated comes saving model use cases like seems like backbone could benefit set eventscallbacks similar provided rails models would allow model hook part save process would flexible bindtrigger system would also easily allow multiple callbacks would also nice callbacks called save could cancel save way rails however looks complicated add current architecture nt essential make useful features also would like say big thank backbone made development app much easier really fun work great job", "d": "2/2011"}, {"body": "besides save successerror found implementing fetch startdoneerror nearly collections makes trivial example bind visibility spinner collection view juggy preferring events callbacks whenever available sidenote notifying events nt listeners nt terribly expensive add couple commonly requested ones real downside see effort maintaining backwards compatibility road", "d": "3/2011"}, {"body": "exposing ajax request deferred using jquery per would also allow handle scenarios like much nicer using version latest request exposed property var req modelsave request callbacks executed whenever request finishes right away finished already req done function response textstatus xhr success callback fail function response textstatus xhr error callback function response textstatus xhr called complete", "d": "4/2011"}, {"body": "news possibly including new events discussed gather discussion would pretty nicely line current philosophy events vs callbacks", "d": "6/2011"}, {"body": "one use case using one backbone apps instead ensuring callbacks around every call make code dryer model method called every save like activerecord way bind events model savecreatedelete", "d": "9/2011"}, {"body": "looks like approved never implemented currently needing well use case nested models city communities families people pulling entire data city massive nt worry creating viewsnested models initialize method also override tojson strip data nt want store like cid thing nested model updated independently page community family person etc updated data sent server need know happens update parent items case get saved displayed afterwards javascript city model initialize function thisset communities new communities thisget communities keep parent model date child saved independently thisget communities bind save success function updated thisset communities updated override tojson strip model nondata stuff like cid tojson function return extend clone thisattributes communities thisget communities tojson chance events making also easierbetter way nested models backbonejs seen suggest leads duplicate data place time nested model changessaves data longer sync one accidentally uses newyorkget communities instead newyorkcommunities accessing stale data", "d": "9/2011"}, {"body": "see pattern model method ajaxrelated trigger method success method save events however destroy method currently triggers destroy event upon success make things backwardcompatible consistent guess method method error events", "d": "10/2011"}, {"body": "taking liberty implementing events realize backbone actually triggers event ajaxrelated methods nt passed error callback see document however says event triggered model validation fails save call fails server incorrect would like fix sure fixed source code document triggering event ajaxfailed methods bad idea possible app display different error messages different ajaxrelated methods ie error deleting comment vs error saving comment using event makes hard impossible differentiate error events simply binding listener finished implementing triggering method event ajaxrelated method fairly simple stuck error events sure left change method error different methods", "d": "10/2011"}, {"body": "another use case save events would helpful model successfully saved model b needs fetch update server side changes asave may happen many places making success callback bfetch impractical course ways work around limitation simple bind event would much easier", "d": "11/2011"}, {"body": "missing something like jquery ready event models sometimes stuff needed done model loaded also trigger event listener attached model got ready thoughts", "d": "1/2012"}, {"body": "event emitted whenever model successfully server think used easily implement features discussed", "d": "1/2012"}, {"body": "also need append post fooid issued instead post foo", "d": "1/2011"}, {"body": "reason ca nt new record created put rest point view put means place resource specified location tend think backbone current implementation correct change serverside logic create update put fine", "d": "1/2011"}, {"body": "right constrains serverside wo gain plus consider user chooses id signup accidently overrides stuff user x already chose login id iow serverside distinguish create bail id already exists update real problem", "d": "1/2011"}, {"body": "gain correctness putting representation resource specified location put definition fine put nt mean update also mean create want pass special parameter along request feel free setting id allowing server decide wants respect value", "d": "1/2011"}, {"body": "right passing additional params spoil model continues live clientside model containing collection parameters pure service need draws collection create becomes helper method call want persist", "d": "1/2011"}, {"body": "running exact issue years later due fact creation seen update instead create wrong event firing collectioncreate must depend sync event instead create event adding items collection deciding whether model new based whether id counterintuitive", "d": "8/2012"}, {"body": "yes share options object going share callbacks nt think special behavior backbone handling differently", "d": "2/2011"}, {"body": "case closed", "d": "2/2011"}, {"body": "guess way call model", "d": "1/2011"}, {"body": "nevermind found modelpreviousattributes sorry closed guess", "d": "1/2011"}, {"body": "right however prepared multiuser environment become outdated", "d": "1/2011"}, {"body": "look work done", "d": "1/2011"}, {"body": "nathanstitt thanks sharing ideas going give try kind scenario juggy backboneorm project looks interesting unfortunately written coffeescript barrier entry many many developers wo nt even look incorporate application would need include coffeescript adding yet another library download need alter build process compile javascript coffeescript opinion tools like coffeescript used creating custom client code frameworks libraries written plain javascript widely used chance converting javascript least provide precompiled javascript version simplify using", "d": "1/2011"}, {"body": "added compiled version", "d": "1/2011"}, {"body": "juggy wow fast", "d": "1/2011"}, {"body": "juggy like approach better mine better separation existing backbone model amp collection classes also like method causes two relations refer back one another unclear call relation namespace porkepic though extraction existing project also agree taeren big fan coffee script know quite smart people though maybe one things nt get yet thanks much bringing attention think going investigate using project", "d": "1/2011"}, {"body": "coffeescript matter taste butyou save much keystroke code much readable ca nt live used namespapce porkepic solutions company reference something shorter needed much work done project especially big data different relations loaded lazily andor completed different backend request play code something extend would really like see", "d": "1/2011"}, {"body": "nathanstitt wrote something similar solution belive basically except shortcut sync method prevent single sub models sync themself server json representation created jackson straight java classes also single sub elementmodels list write setupchild setupchild function parent type name var result new type parentget name resultname name resultparent parent parentbind change name function resultset parentget name example domain setup would look something like plan backbonemodelextend url function return thisget baseurl planhtml id thisget id initialize function bindall extsetupchildlist pagelist pages extsetupchild page singlepage extsetupchild metadata metadata look link code json string like could write code like simulate ajax call server backbonesync function method model success error success preloadjson tried pull isolated working code codebase pasted someone intressted", "d": "2/2011"}, {"body": "added following base class heirarchy require backbone class railsmodel extends backbonemodel tojson return attributes initialize attributes data get field val first true p fieldsplit first val super p else val valget p first false val allow heirarchical setting objects example modelsetfield rootchild create path exist setfield field value silentfalse path fieldsplit windowrailsmodel railsmodel initialize method also parses nested json builds nested models", "d": "6/2011"}, {"body": "mentioned pull request backbone nt intend support nested associations directly", "d": "1/2012"}, {"body": "", "d": "1/2011"}, {"body": "would nice see logic statements made explained kind alternative history proposal would nt require special handling server", "d": "1/2011"}, {"body": "looking backbonehistory code say implementing pushstate possible server side nt problem project case serving essentially page location letting js rendering hashchange clients get redirected root path hash fragment comuserdetails com userdetails worth bothering real patch wiser monkeypatch including modified backbonehistory additional file", "d": "1/2011"}, {"body": "case nt aware project pushstate shim older browsers nt work ideally think backbone would allow integration otherwise optional use pushstate also planning looking besides redirects web application also possible rewrites url server level", "d": "1/2011"}, {"body": "adding pushstate support backbone app like certainly solution everybody fits needs pretty well let know need help", "d": "2/2011"}, {"body": "want add vote getting pushstate support built backbone also like see better explanation currently dismissed mentioned briefly docs least make optional us want fan hashbased state would nt use", "d": "2/2011"}, {"body": "integrating tackle bugsincompatibilities browsers degrades hashes browsers looks like good stepping stone new history api", "d": "2/2011"}, {"body": "created little plugin project replaces backbone history historyjs support nt cover every use case might help others", "d": "3/2011"}, {"body": "join chorus saying also think supported least optionally would also like hear better explanation currently dismissed thanks", "d": "3/2011"}, {"body": "author historyjs glad help provide assistance implementing historyjs backbone mrjjwright solution uses native api rather historyjs said confused", "d": "3/2011"}, {"body": "balupton decided try solution cleaner zero dependencies might easy possible going keep think", "d": "3/2011"}, {"body": "well opinion quite biased obviously author historyjs want see included everything however history api implemented differently every browser makes api less nonstandard broken followed natively sad think historyjs necessary regardless bias otherwise people end coding workarounds anyway see notes compatibility section historyjs homepage", "d": "3/2011"}, {"body": "rstacruz way commenting another account lazy logout mrjjwright added two improvements solution seen gist linked let know using solution app developing keen see official solution integrated backbone soon also historyjs convinced needed benefit adding methods implemented history states method fallbacks way timer listener way backbone already", "d": "3/2011"}, {"body": "historyjs lowercase h much smaller lines sloc kb uncompressed got working ok either way history could optional component", "d": "3/2011"}, {"body": "yes history support planned next major version backbone purely optin basis entirely slam dunk old ies nt support end minting two different urls content true version hash version support server also capable rendering page reached url", "d": "3/2011"}, {"body": "sinefunc let convince issue history api every browser handles differently want working solution following spec nt enough providing want support one browser hash fallback browsers handle differently options see nt use polyfill incur browser differences bugs code history api polyfill use already existing historyjs free open actively developed information browser differences see notes compatibility section also totally open get historyjs even smaller latest compressed support figure ways get code even let know sinefunc gregwebs like setup website shows native historyjs forte historyjs compare test suite", "d": "3/2011"}, {"body": "yeah would really like know missing fork forte historyjs", "d": "3/2011"}, {"body": "merged upcoming branch master support optin basis start history get pushstate instead hashes routes note requires server able handle pushstateminted urls using nonpushstate browser ie still get usual hashes ie user sends hashbased link pushstate user get transparently upgraded pushstate version url pushstate user sends realurl ie user first route change page refresh hashbased version url changes point involve page refresh hopefully allows us best worlds backbone support urls nothing optional hidden state parameter pushstate api hopefully avoid many known bugs said still fairly major safari bug makes difficult putting urlencoded parts routes like arbitrary search queries careful safari autourldecodes information coming windowlocation incorrectly means urlencoded indistinguishable literal backbone perspective want try early give current master spin", "d": "5/2011"}, {"body": "previous version struggling issue well switching views events handlers removed causes problems way manually", "d": "3/2011"}, {"body": "ended setting instead adjusting render philosophy create new elements worked option played method force event bindingremoval calling render something like former ideal", "d": "3/2011"}, {"body": "figured use viewunbind store current view instance view variable controller action run simply overwrite unbind method view case need unbind events well eg events binded collection make sore run unbind method think new backbonejs make sense", "d": "3/2011"}, {"body": "ahhh bug agree bug bit instanciate view twice parent element later child element change events child element trigger twice", "d": "4/2011"}, {"body": "ping jashkenas", "d": "5/2011"}, {"body": "issue problem use event delegation unbind anything use undelegate thisel get work", "d": "6/2011"}, {"body": "encountered problem create destory view repeatedly fixed bug project view replaced another view call oldviewremove explicitly previous binded events gone", "d": "7/2011"}, {"body": "also problem rendering view solved undelegating", "d": "9/2011"}, {"body": "still fuzzy issue affecting people would seem problem reusing dom element multiple views creating new view element instead rerendering old view correct", "d": "11/2011"}, {"body": "use case yes parent view child views inherited functionality something like inherited parent set existing dom element inheriting views binding dom element moved solution referenced solved rather setting set adjust render method insert dom rather setting new content sure either approach conceptually better worse former nt really work might expect something subset people trying given people attached issue perhaps documentation change alleviate", "d": "11/2011"}, {"body": "think former case expect binding parent view element events binding child view element duplicates events would expect events called twice", "d": "11/2011"}, {"body": "nt duplicate events problem ran multiple children added removed events children sticking around banging original issue filed change functionality much earlier version backbone earlier version events element unbound versus specific view worked nt perhaps others chime different situations", "d": "11/2011"}, {"body": "issue updaing app number pages home search results booking predefined structure number div id used switch pages recreate views passing id el option go search results back home home view recreated dom element double events causing weird bugs", "d": "11/2011"}, {"body": "able clear delegated events shared dom element calling view", "d": "1/2012"}, {"body": "jashkenas easier fix would disallow binding event element multiple times expected events created destroyed together view new view started scratch without events bound helps little still goes expectations", "d": "1/2012"}, {"body": "necessarily event perfectly legal two different views applied element different sets functions keyed event targets really giving trouble recommend suggested backbone thing never assigning directly ensuring view unique alwaysavailable element delegate really makes life much simpler", "d": "1/2012"}, {"body": "jashkenas thanks", "d": "1/2012"}, {"body": "would great see backbone compatible frameworks find abstraction layers useful server side plug different databases orm whatever however client side important keep file sizes small possible sort abstraction layer going require code biggest concern would increasing size backbone much really like backbone small personally use jquery makes happy looking code nt look bad requires many boilerplate function definitions adds bytes backbone course could optimized degree ie renaming frameworkadapter adapter fa something small overall minimized probably would nt increase size much", "d": "1/2011"}, {"body": "nice idea afraid agree tauren sticking light dependency approach time framework adapters rarely compatible example probably nt behave way specific patch enables support another framework nt take many lines code ala zepto integration feel free send patch otherwise maintaining fork good idea really nt difficult upstream patches apply cleanly", "d": "2/2011"}, {"body": "probably comes jquery similar bind used events however case agree using bindall bind confusing changing would okay", "d": "1/2011"}, {"body": "agree little confusion jquery user would argue keep bind events change underscore bind bindall context contextall something like either case change would break backwards compatibility sure worth trouble two cents", "d": "1/2011"}, {"body": "need break underscore bindbindall deal function object instead consider aliasing backboneevents bind backboneevents would ok mark backboneevents bind deprecated possibly stub could way", "d": "1/2011"}, {"body": "totally agree confusing bad underscore jquery use bind mean two different things would nice jquery underscore backbone could similar apis think could happen especially since two three libraries managed documentcloud obviously nt way change jquery point especially massive user base reluctantly agree martindrapeau name change underscore would preferred dilute meaning bind could handled alias well break existing code mark bind deprecated say reluctantly really prefer bind dealing events leaving underscore alone would certainly simpler easier much larger install base backbone simplest solution suggested dvv alias events bind events since backbone needs changed since backbone fairly new late change recommended approach use events instead events bind yet keep bind deprecated backwards compatibility bottom line something done approach taken less importance long two different bind methods different meanings nt used right next initialize could dang confusing less experienced developers", "d": "1/2011"}, {"body": "want add note deprecation consolelog recently app break firefox users nt firebug installed using consolelog take route please make sure consolelog exists function", "d": "1/2011"}, {"body": "also agree bind ambiguity horrible honestly official definition bind inline underscore functionbind even though jquery huge believe proper definition bind used thus would prefer attach listen whatever anything bind events side note thanks great library difficult think pattern first adore structure brings", "d": "3/2011"}, {"body": "new user really confused", "d": "5/2011"}, {"body": "vote changing ecmascript bind method function prototype accept move away jquery convention see", "d": "5/2011"}, {"body": "", "d": "5/2011"}, {"body": "patch worked ago make backboneevents like node eventemitter", "d": "5/2011"}, {"body": "heart", "d": "5/2011"}, {"body": "heart", "d": "5/2011"}, {"body": "", "d": "7/2011"}, {"body": "renaming due ambiguity personally nt like publish subscribe", "d": "7/2011"}, {"body": "also like see delegateevents accept non dom event handlers", "d": "7/2011"}, {"body": "also thinking aliasing correct solution deprecate nt remove bind", "d": "7/2011"}, {"body": "", "d": "8/2011"}, {"body": "version jquery also supporting moving events see new event apis time jquery evolved three ways attach events elements bind live delegate underneath though three event apis call browser event system lead surprising interactions example document unbind click remove live click events since delegated events attached document also use event namespaces current event apis going away soon address inconsistencies introduced new simple pair event methods work three elems events selector data fn elems events selector fn selector provided delegated event otherwise directly bound features old apis example events spaceseparated string event names andor namespaces object keys events values event handler functions looks like good time start supporting backbone well", "d": "10/2011"}, {"body": "currently tracking", "d": "10/2011"}, {"body": "yes work perfectly fine couple caveats models ca nt conflicting ids wo nt able use make new instances", "d": "1/2011"}, {"body": "conflicting ids might issue means use id mapper id prefix thanks reply", "d": "1/2011"}, {"body": "documentation nt demonstrate custom overridden version nt need override cases nt method", "d": "2/2011"}, {"body": "looking also got confused wonder jashkenas thinks nt need override take example customer model contains attributes firstname lastname added fullname method want use fullname inside template called like fullname accessable think use different approach pass customer object like template instead", "d": "2/2012"}, {"body": "duplicate addressed minute", "d": "2/2011"}, {"body": "yes totally large part backbone good", "d": "1/2012"}, {"body": "afraid nt builtin way view hashes routes created hashes routing strings also pass regex directly function said use get ahold internal array routes callbacks", "d": "1/2011"}, {"body": "thanks jeremy application case storing hash every state change ui url link used get right back users example hash workflow amp buttondocuments amp zoomworkflow plan log url visited user server usage analysis must say extremely impressed good backbone creating sophisticated ux thanks", "d": "1/2011"}, {"body": "take quick peek previous ticket let know think solutions presented workable", "d": "1/2011"}, {"body": "issue raised several times taken initial stab non attribute support override permodel basis globally models note still proxied property models keep public api consistent able true name", "d": "2/2011"}, {"body": "cool awesome actually transformations example mongodb objectids ids unwieldy work urls etc convert use model id able set id field directly objectid really appropriate however certain cases ids objectids helpful thank", "d": "2/2011"}, {"body": "sure actually dom element page time js first loaded", "d": "12/2010"}, {"body": "yes moved backbone code document ready one point also tried id none worked stumped going conceptually achieving binding", "d": "12/2010"}, {"body": "going replacing new element manually probably something nt want try removing line adding bottom instead right calling", "d": "12/2010"}, {"body": "wow almost backbone made new div subordinate selector event unclickable changed using wrap events narrow selector wrap element wanted clicked new element strictly made event rendering view displays regardless thanks jeremy", "d": "12/2010"}, {"body": "hi fred using ie perchance merely setting windowlocationhash nt enough record history event browsers suggest using backbone purpose", "d": "12/2010"}, {"body": "hi jash use ie absolutely testing purposes using chrome savelocation works great storing hash history need hashchange triggered controller route new page way trigger change", "d": "12/2010"}, {"body": "backbonepreferred way simply call function want route calling call think dropping bookmark waypoint want able go back later", "d": "12/2010"}, {"body": "perfect thanks backbone beautiful thing", "d": "12/2010"}, {"body": "view option provided mere convenience common case certainly views listen events disparate models collections views perhaps something like", "d": "12/2010"}, {"body": "little fuzzy specific proposal want able trigger route without url actually changing testing app browser", "d": "12/2010"}, {"body": "exactly probably good idea nt log tickets late night", "d": "12/2010"}, {"body": "share use case patch specific thing writing accomplish", "d": "12/2010"}, {"body": "trigger event exactly like jquery", "d": "12/2010"}, {"body": "mean specifically trying accomplish app", "d": "12/2010"}, {"body": "sorry misunderstood fetch todo server renders collection items complete want select specific one bind event make sense", "d": "12/2010"}, {"body": "hi jeremy want see app building send mail set martin planboxcom", "d": "12/2010"}, {"body": "yep think would cleaner use success callback fetch call instead binding removing event", "d": "12/2010"}, {"body": "well oversimplified example complicated cascade events occur need catch last one makes sense", "d": "12/2010"}, {"body": "sure trying discover answer question would want event triggered callback would nt work accomplish fired time nt understand possible use", "d": "12/2010"}, {"body": "method first call cascade events first call successerror callbacks code triggers start cascade binds last event catch different collections involved throughout cascade admit usage rare nonetheless useful plus implementation offers performance hit one never used", "d": "12/2010"}, {"body": "hi jeremy conclusion", "d": "1/2011"}, {"body": "thumbs often find needing kind functionality could easily use underscorejs leaves unnecessary callbacks internal callback array", "d": "5/2011"}, {"body": "seems little app specific make backbone", "d": "5/2011"}, {"body": "need implemented app similar views view removed call eliminate loose ends unbind things necessary avoid memory leaks applies models want cleanup time particular used models made models topic model hosts number property models properties occasionally removed topic events within property need cleaned", "d": "9/2011"}, {"body": "backbone development whole different app still find needing nt see app specific btw even evenemitter nodejs one well also jquery", "d": "9/2011"}, {"body": "agree appspecific answer jashkenas implemented way seems simpler though see pull request", "d": "10/2011"}, {"body": "believe may settled already", "d": "10/2011"}, {"body": "seem way see reply", "d": "10/2011"}, {"body": "thank contributing patch currently evaluating pull requests", "d": "10/2011"}, {"body": "updates missed function several projects added backbonejs sucks modify backbonejs every time new project", "d": "8/2012"}, {"body": "included reasons rarely ever come across case really needed", "d": "8/2012"}, {"body": "well look comments might one", "d": "8/2012"}, {"body": "paratron curiosity use underscore order need", "d": "8/2012"}, {"body": "objects extended backboneevents use objecton append event listener objectonce would cleanly apply event listener performs detaches using underscores method completely meaning", "d": "8/2012"}, {"body": "still see strong case backboneeventsone event listener registration function really would nt require much code", "d": "11/2012"}, {"body": "jeremy hit issue model event never get triggered shallow cloning use deep cloning method thanks martin", "d": "3/2011"}, {"body": "issue underscorejs seems like nt want add support foor deep cloning real reliable way", "d": "7/2011"}, {"body": "yep deep cloning nt well supported often desirable js backbone attributes intentionally shallow using reflect database columns rows things line nicely", "d": "1/2012"}, {"body": "could pass data js object also able set value desire", "d": "12/2010"}, {"body": "chance pass optionsdata since get first model object wo one must pass object looking like valid model even wants pass optionsdata thus issue", "d": "12/2010"}, {"body": "alright made viable solution patch sha thanks ticket", "d": "12/2010"}, {"body": "thanks issue patched sha", "d": "12/2010"}, {"body": "responses tend send back model attributes handle non model related errors want return json whatever else", "d": "12/2010"}, {"body": "serverside validation fails return appropriate http code like say error message like send format choosing text json passed callback call invoked model response nt pass callback get event triggered model also passing response second argument", "d": "12/2010"}, {"body": "added bit explanation sha", "d": "12/2010"}, {"body": "nt see error seeing version errors mind little research try couple options source let know ones work without triggering errors blank javascript false javascript void javascript", "d": "12/2010"}, {"body": "tested bit looks like real issue issue running compatibility mode running genuine copy", "d": "12/2010"}, {"body": "ah yes indeed running guess really nt issue maybe stub empty page solution dev mode assuming lot mac devs running issue", "d": "12/2010"}, {"body": "whew record compatibility mode completely broken really ca nt rely behave like real copy ie fashion js window properties css rendering", "d": "12/2010"}, {"body": "wow good know always thought reliable make sure test real double check make sure particular issue nt present project", "d": "12/2010"}, {"body": "testing thing ietester standard tool used interface developers test sites multiple browsers able test css ietester using backbonejs big downside compatibility mode problems done testing using ietester empty page works fine rest tests done changing backbone sourcecode directly using blank crashes browser using javascript false gives error using javascript void crashes browser using javascript crashes browser using crashes browser using crashes browser really mess see way", "d": "5/2011"}, {"body": "issue ietester windows bits error thrown sure compatibility mode solved changing code using", "d": "7/2011"}, {"body": "installed virtual machine xp error nt thrown could ietester problem see without ietester", "d": "7/2011"}, {"body": "ok ietester problem virtual machine nt thrown error", "d": "7/2011"}, {"body": "think definitely improvement allow something sophisticated current last collection wins moment model needs know collection currently order generate appropriate url say got belongs save later pick move different list save url agree keeping array collections would great long figure rules model url generated", "d": "12/2010"}, {"body": "better patch see pull", "d": "1/2011"}, {"body": "resolved", "d": "1/2011"}, {"body": "override smart function knows whether check localstorage make ajax request throw pseudocode backbone give tools need make work well nt matter side data originates arrives good go", "d": "12/2010"}, {"body": "honor possible querystring moreover syntax denote optional named parameter splats param way greedy vote querystring special passed intact handlers completely optional accidentally clash routes mean certain route match uri wo querystring vladimir", "d": "12/2010"}, {"body": "also escape literal char routes way could catch special chars mean eg notice first autoescaped otherwise treated vanilla char breaks assumptions token", "d": "12/2010"}, {"body": "patched started test issue realizing premise funky part url dealing posthash part query strings nothing probably nt encoding faux query strings location hash first place bnolan proposal delimit dashes afraid dashes valid characters urls often parts literal named param case slugs accounts documents plenty dashes closing ticket", "d": "12/2010"}, {"body": "escape literal char routes afterhash url browser takes want single page app aheterhash route nt escape search queryp page example p treated special regexp char consider vladimir", "d": "12/2010"}, {"body": "dvv thanks raising issue patch escaping regex characters literal route parts sha give try let know think", "d": "12/2010"}, {"body": "curiosity framework", "d": "12/2010"}, {"body": "djangotastypie checked looks perfectly valid answer create", "d": "12/2010"}, {"body": "patch pull request agree xmlhttprequest object available jquery sure minimal version backbone work quick look zepto page shows call success function request object believe would passed undefined case", "d": "12/2010"}, {"body": "sam hit issue day zepto updated pass along xhr madrobbyzepto", "d": "12/2010"}, {"body": "merge patch amended thing collections well going go route nt seem little hacky rely actual xhr object passed success callback actual response server need order complete action", "d": "12/2010"}, {"body": "jashkenas point ajax callback wouldnt say hacky mean whole result ajax request passed normally jquery zepto also api return success resource creation set location header new resource sound reasonable point backbonesync could look hacky especially local persistion storage use request sure maybe results sync operation passed back callback function without thinking arguments", "d": "12/2010"}, {"body": "another alternative would make default function smarter handle sort location header redirect resource new url would preferable presuming currently making ajax call inside function nt see right way go time triggered actual data hand", "d": "12/2010"}, {"body": "check response empty location header parsing \u00ecd specific thing sure saved object change attributes really nt care server return whole object case resource could changed saved api really return object representation resource method could add callback fetch resource would suboptimal would spend requests seems logic", "d": "12/2010"}, {"body": "looks like present master passed json body reference xhr request", "d": "1/2012"}, {"body": "mybad retrieving json contained key called attributes", "d": "12/2010"}, {"body": "ended extending model collection methods mymodel backbonemodelextend destroy function options options options thisselected thisunselect options optionssilent thistrigger destroy options thiscollection thiscollectionremove options return mycollection backbonecollectionextend clear function options options options thislength gt thisat destroy options optionssilent thistrigger clear options return", "d": "12/2010"}, {"body": "two things first destroying models collection client server second simply removing models collection clientside reason backbone nt former builtin standard basic rest wo nt want encourage folks submitting individual http requests one destroy item special endpoint perform bulk destroy empty collection clientside done like", "d": "12/2010"}, {"body": "happens code watches particular model would never know got removed would nice event triggered rest call made hence implementation destroyclear rest calls server specialized methods deletedeleteall model trigger destroy event watchers get notified admit nt like current implementation clean server calls could made optional events always triggered happy", "d": "12/2010"}, {"body": "certainly collection hold different types models well models different sets attributes defined able listen events defined attributes", "d": "12/2010"}, {"body": "sure one tend rendered synchronously whereas tend happen asynchronously get model reference returned callback mind fleshing think api would look like bit", "d": "12/2010"}, {"body": "assumption create triggered client however consider server pushes new model created another user use case mind method would require model id thinking could pass option collection method add called forceupdate private helper add could update existing model exists instead shooting error bit background usage backbone building collaborative list list collection items item represented model updates insertions initiated user ie client pushed server initiated another user", "d": "12/2010"}, {"body": "great new todo comes server", "d": "12/2010"}, {"body": "already code would nice option add collection", "d": "12/2010"}, {"body": "would think simply making behave like currently throws error model already exists within collection", "d": "12/2010"}, {"body": "may break existing functionality others would work", "d": "12/2010"}, {"body": "hi jeremy conclusion", "d": "1/2011"}, {"body": "hi started using backbone ran exact issue today ask throws error adding exact model think would okay add took option let merge throw error maybe nt anything could make default throw error would nt break existing code people nt want throw error pass option would suppress errors", "d": "3/2011"}, {"body": "added method fork commit something similar discussed pass attributes either updates existing instances using adds new instance collection seems like easy way satisfy use case since makes assumptions persisting model using extensively ajax callbacks remote forms rails", "d": "5/2011"}, {"body": "done pretty much kylefox said matching existing models collection id amp updating using set however added standard collectionfetch method hiding new option sync reason fetch already accepts option add collectionfetch method three modes reset default add sync think", "d": "6/2011"}, {"body": "bit edge case consider one incoming records missing id attribute raise create new model append collection raises also happens models collection arent incoming data automatically deleted collection calls remove", "d": "6/2011"}, {"body": "love see implemented backbone solution would propose exactly one proposed dalyons", "d": "6/2011"}, {"body": "please look pull request implemented feature call inplace update collection models use code one deployed apps seems work far p check collectionupdate meat", "d": "6/2011"}, {"body": "dalyons solution writesubmit something similar", "d": "8/2011"}, {"body": "ide really like feature implemented default dalyons solution seems great", "d": "1/2012"}, {"body": "great feature make easy implement app backbone nt builtin default", "d": "1/2012"}, {"body": "pretty simple patch wanted put pull request diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs return thismodels index get next model collection next function model return thisat thisindexof model get previous model collection prev function model return thisat thisindexof model force collection resort nt need call normal circumstances set maintain sort order item added sort function options diff git atestcollectionjs btestcollectionjs index atestcollectionjs btestcollectionjs document ready function ok isequal collast attributes aattributes test collection next function equals colnext colfirst get label c equals colnext collast undefined test collection prev function equals colprev collast get label b equals colprev colfirst undefined", "d": "12/2010"}, {"body": "looks good think", "d": "12/2010"}, {"body": "interesting idea think method collection model thought", "d": "12/2010"}, {"body": "would think", "d": "12/2010"}, {"body": "hi jeremy still plan putting want martin", "d": "2/2011"}, {"body": "would love checking issues writing patch also would sweet insert index used add create made accessible somehow would make possible easily render new node dom without rerender everything use second indexof call", "d": "3/2011"}, {"body": "pretty new backbone stumbled upon need well using collin proposed patch hoping makes master branch soon enough nextprev logic model much sense really make see models isolated objects never need know siblings nt exact purpose collections missing something", "d": "8/2011"}, {"body": "personally would nt want models sort thing use backbone often models one collection", "d": "8/2011"}, {"body": "yeah discussed online someone last night quite easy create new collection dupes resetting current collection duplicates", "d": "8/2011"}, {"body": "used top implementation code worked really well views paging model collection easily", "d": "9/2011"}, {"body": "always get around using new model method pass get previous get next return nt find anything", "d": "9/2011"}, {"body": "use either solutions inside model validate function particular next run model created however since collection indexof returns adding direciton next return ie model incorrectly compared first element array adding extra check cause function return false instead incorrect element little messy add collection methods model validation case building velocitytime graph segment represented model need add validation ensure breaking laws physics", "d": "10/2011"}, {"body": "available events tell collection added removed model located given returns index model reference proposed feature gets bit messy light fact model multiple collections inclined leave unless specific use cases raised", "d": "1/2012"}, {"body": "thanks tip fixed", "d": "12/2010"}, {"body": "comment unbind call delegateevents test fails think want remove events previously added via delegateevents none events", "d": "12/2010"}, {"body": "easy fix make tests pass anyway cache delegated events new delegatedevents property view clean top delegatedevents nt feel right though delegateevents adds events user decide add ca nt think happier removing unbind call delegateevents making peer function undelegateevents runs unbind happy fork give go including updating doctest cases etc notion adding undelegateevents makes sense course perfectly happy oneliner removal unbind well", "d": "12/2010"}, {"body": "pmuellr quite right twoline patch uses jquery namespaced events cause ever unbind events bound please give patch try let know think", "d": "12/2010"}, {"body": "works great thx", "d": "12/2010"}, {"body": "supposed behave notified model observing changes even listen events treated specially set direct property model object convenience particular reason think behave differently", "d": "12/2010"}, {"body": "looking problem problem behaving way got unexpected event saw listed assumed mistake nt noticed real problem test fails nothing changed yet got change event also inside change callback call get sure seems like bug", "d": "12/2010"}, {"body": "sure thanks reporting patch fix", "d": "12/2010"}, {"body": "hmm perhaps although call property function lot folks choosing override using rest tell us little using overridden function", "d": "12/2010"}, {"body": "using jsonp lot basically means using backbonesync function one two changes datatype method like really much trouble rewrite function since keep figured might worth exporting thing thought though strays farther current code setting default geturl method models collections returns thisurl url explicitly set returns could override geturl entirely return something else backbonesync always call modelgeturl might adding much complexity small convenience", "d": "12/2010"}, {"body": "second point think effectively overriding ah jsonp love default backbonesync support seamlessly feel like cooking patch enables either option simply jquerystyle detecting remote urls also changes jqueryajax works may want take look", "d": "12/2010"}, {"body": "ok take shot patching seems like could simple passing datatype option somewhere autodetection would nice see make work", "d": "12/2010"}, {"body": "recent commit added support pass arbitrary options actual call jsonp easy", "d": "12/2010"}, {"body": "saw thought thing handy thanks", "d": "12/2010"}, {"body": "indeed try", "d": "12/2010"}, {"body": "nope legit bug thanks bringing patch fixes tests let know works", "d": "12/2010"}, {"body": "works great thanks", "d": "12/2010"}, {"body": "seeing problem running test script produces alert seeing sounds like bug jquery nothing complicated going", "d": "12/2010"}, {"body": "indeed right result shenanigans code thank much looking amp apologies unnecessary distraction", "d": "12/2010"}, {"body": "apologies year response perhaps help others using exoskeleton need use reference view explained like nt aware might easily missed", "d": "3/2017"}, {"body": "couple things throwing away callback also server responds json representation model attributes send including set model need use callback triggering sideeffect", "d": "12/2010"}, {"body": "great success response preserved sorry right update id server json response nt namespaced model works beautifully thanks great work backbone", "d": "12/2010"}, {"body": "hi collin order bootstrap initial models page load time recommend serverside code print js array use like documentcloud like", "d": "12/2010"}, {"body": "added little section bootstrapping documentation", "d": "12/2010"}, {"body": "awesome thank", "d": "12/2010"}, {"body": "hi know issue closed long time felt best place ask best way loading js asynchronously via labjs async loader backbone code js might still loading organizations accounts projects objects may available going example one option load jquery synchronously rest code asynchronously currently although hoping get point everything asynchronous use nice bind trigger functions jquery provides however still feel suboptimal solution two reasons still load jquery synchronously slowing time page ready fired end code like find bit repetitive lacking elegance js done loading trigger event better option imo simply place data script tag use myprojects object js loaded one problem splits js across multiple files leaves anyone reading code wondering data loaded thoughts even better", "d": "9/2011"}, {"body": "yep use course event detect changes previous version object example using documentation bind callback event model give looking alternately building changes model without triggering event passing function expect call triggering event clearing changeset", "d": "12/2010"}, {"body": "thanks makes sense building changes model think looking thanks", "d": "12/2010"}, {"body": "sorry sounds like bug requirejs might something screwy object backbone looking order detect commonjs relevant bit backbone", "d": "12/2010"}, {"body": "thanks file", "d": "12/2010"}, {"body": "nope missing anything collection methods indeed return arrays models use underscorejs rewrap array like continue perform collection operations", "d": "12/2010"}, {"body": "handy thanks big fan underscore missed wrapper style entirely", "d": "12/2010"}, {"body": "tried using wrap array version nt know backbone models like collection version would need call rather access perhaps wrapper function like also knows models would useful", "d": "12/2010"}, {"body": "ah yes special case use conjunction get list active thing names like trying either", "d": "12/2010"}, {"body": "running similar issue difference really need perform collectionspecific actions way convert array collection", "d": "6/2011"}, {"body": "comes using ca nt run tojson", "d": "8/2011"}, {"body": "posabsolute wrapping return underscore collection backbone collection get backbone collection backbone methods like available wrap whatever collection using inherits backbonecollection instead example applying op code", "d": "9/2013"}, {"body": "thanks asked years ago p", "d": "9/2013"}, {"body": "posabsolute haha yea know passing thought answer future readers", "d": "9/2013"}, {"body": "thanks guys helpful", "d": "9/2013"}, {"body": "way late party came across need extended backbonecollection base collection added wrap function like usage looks like cheers backbone users maybe cleanest syntax job minimal hackery", "d": "1/2017"}, {"body": "hi tauren question asked several times comment led finally add faq section backbone documentation take look bit nested collections let know answers questions let know", "d": "12/2010"}, {"body": "think feel way would awfully nice able instantly convert form backbone attributes viceversa however found forms least little bit custom probably spend time hacking around mapping gain first place said include jquery backbone already form serialization athand", "d": "12/2010"}, {"body": "one thought closing ticket interest backbone probably start life backbone plugin proves popular", "d": "12/2010"}, {"body": "agreed far jquery thing goes want test assertion first blush nt look like fnserializearray function would actually work according docs serializes forms like would think would need like work set thought either way page far potential relevance plugin", "d": "12/2010"}, {"body": "yes array object deal duplicate keys", "d": "12/2010"}, {"body": "care look something like modelset form serializearray reduce function set h set hname hvalue return set", "d": "3/2011"}, {"body": "possibly something like", "d": "12/2010"}, {"body": "override tojson models", "d": "12/2010"}, {"body": "think agree collin time adding line like slightly easier let leave things time arises common question add option also note accomplish thing models overriding", "d": "12/2010"}, {"body": "wo nt mess collection tojson though seems bit weird endpoint config tweak json representation things", "d": "12/2010"}, {"body": "depends endpoint expecting nt used internally backbone anything like discuss livelier fashion feel free pop", "d": "12/2010"}, {"body": "thanks irc chat try overriding tojson backbonesync posterity also note accomplish thing models overriding backbonesync since models nt know names ca nt tweak backbonesync done go configure models least know names doable course", "d": "12/2010"}, {"body": "putting solution documentation would really nice awesome framework way", "d": "2/2011"}, {"body": "someone using backbone rails app standard style wants put together paragraph detailing best way get things integrated glad drop faq homepage", "d": "2/2011"}, {"body": "please reopen issue either documentation set rails conventions logical sane defaults one wants update action every little attribute model one update action fine thank reviewed go core", "d": "12/2011"}, {"body": "hi henrik nice idea moment event names arbitrary strings restrictions format think feature worth keeping example change would nt work attribute key contains space think pattern perhaps better served something like", "d": "12/2010"}, {"body": "ah see point still think keep things cleaner another option would pick delimiter like comma example also think idea supporting third context argument", "d": "12/2010"}, {"body": "forgot respond bit sorry able pass context object means need rebind function need rebind function object identity wo nt match time go left function ca nt reference", "d": "12/2010"}, {"body": "fair enough thanks taking time respond building cool stuff backbone big client let know wild thanks", "d": "12/2010"}, {"body": "problem looking forward seeing wild like get quick answers questions like feel free pop", "d": "12/2010"}, {"body": "one possibility would initialize subviews main view nt creating new view objects every render render reduce values rendered subviews top head nt tried also probably want us backbonecollection instead array gist could create view collection main view call render view individual items collection main view may little bigheavy handed need", "d": "12/2010"}, {"body": "patterns rendering collection modelviews still like implement nt single pattern fits levels performance convenience small numbers models rendering templates loop inserting mainview element fine large numbers models probably want single template generates entire html models end single dom insertion single page reflow", "d": "12/2010"}, {"body": "sure sort question come several times added section faq let know nt help answer question", "d": "12/2010"}, {"body": "thanks first must say much like backbonejs learned much javascript allready looking forward last get structure gui code thing try nested collection backbone would like service server returns something like title footitle description desc subpages title title page body body till title page title title page body body till title page one single get request would also like post string one single request get atomic post model looks something like windowiup backbonemodelextend initialize function bindall thissubpages new pagelist sync function method model success error success model windowpagelist backbonecollectionextend reference collection model model page initialize function bindall addquestionpage tried shortcut sync method sucess still struggle get run smoothly updatesave nested subpage collection think madness totally wrong could done", "d": "12/2010"}, {"body": "thanks reporting pushed fix tests closing ticket", "d": "12/2010"}, {"body": "would nt worry wrapper good practice view nested single node easily removed dom time comes really want avoid view element avoid using methods depend event binding scoped selector would nt recommend", "d": "12/2010"}, {"body": "nt centralized way options already laid either passing create new view setting may red herring though part idea backbone views maintain reference model object necessary ever look model id stored dom modelbacked views id properties html element specific patch way autosetting dom ids like propose", "d": "12/2010"}, {"body": "much looking model accessing model via outside context view giving view dom element randombutmeaningful attribute case original intention aside fits perfectly could definitely following red herring outline one recent scenarios turning jquery ui sortable list whose gets renderedappended sortable require support ordering update etc callbacks problems almost certainly stem trying mix legacy code case lots vanilla jquery ui widgets respective events nt specific patch mind conclusion something wrong manually assign curry cheers help b", "d": "12/2010"}, {"body": "couple options tag model extra information set onetime flag view render next change event trigger listen different event", "d": "11/2010"}, {"body": "two first solutions nt work consider views b changing model around time way know originator event handler last option would work requires views listening model understand events nt scale could pass options object handler argument options object passed set save clear etc could set originator options handler would know triggered event would", "d": "11/2010"}, {"body": "sure thing commit makes possible take look let know think", "d": "11/2010"}, {"body": "yes triggers change attr would nt hurt append options arguments well error event performvalidation harm standardizing collection well", "d": "11/2010"}, {"body": "sure thing", "d": "11/2010"}, {"body": "point see attributes changed since last event priority constructor change value appears like avoid use regular inside constructor function added test cases around issue backbone behaving correctly case", "d": "12/2010"}, {"body": "bug changed set true haschanged returns false haschanged attr returns true see general need super silent nt ever tell anyone setter function add icognito option set would better another setter function", "d": "12/2010"}, {"body": "thanks making distinction patch fixes pulling calls outside checks", "d": "12/2010"}, {"body": "change good nt comment suggestion extra option set think", "d": "12/2010"}, {"body": "like hear usecase first main thing need distinguish calls trigger events calls nt think handles adequately point going might well", "d": "12/2010"}, {"body": "use case think initialization model case want complete set attributes model read code constructor see previousattributes set calling initiatilize", "d": "12/2010"}, {"body": "could nt know initialization changed default value attribute however nt alternative also override constructor long remember call", "d": "12/2010"}, {"body": "documentation implies constructor initialize nt know distinction might want update doc clear tell user constructor overwritten silently set attributes end replace initialize constructor things fine thanks martin", "d": "12/2010"}, {"body": "actually nt work attributes created constructor way call set inside overloaded constructor call super", "d": "12/2010"}, {"body": "good point", "d": "12/2010"}, {"body": "let step back explain need collection items display list fetched server js add selected attribute user select interactions need set upon construction model maybe attribute right way thoughts", "d": "12/2010"}, {"body": "ok pulled selected attributes set property model firing select unselect events setting attributes quietly initialize directly call thispreviousattributes clone thisattributes consider case closed thanks", "d": "12/2010"}, {"body": "default comparator function strings would certainly normalize case comparing however since write comparison functions something", "d": "11/2010"}, {"body": "sure using latest version backbone test models ids zero", "d": "11/2010"}, {"body": "ordering problem work either ca nt remove event within event current situation allow event removed firing wo nt affect current triggering event sure preferable", "d": "11/2010"}, {"body": "two scenarios need able delete bindings event perform one time action upon destruction view model seems john resig used proxies jquery handle see code bind one would nice support box", "d": "11/2010"}, {"body": "would sufficient clone list callbacks looping trigger way ensure callbacks called even one got unbound callback", "d": "11/2010"}, {"body": "yes works thanks raising issue patch clones list tests closing ticket", "d": "12/2010"}, {"body": "works thanks", "d": "12/2010"}, {"body": "mean post jashkenascoffeescript please move issues page", "d": "11/2010"}, {"body": "oops thanks sorry sure happened", "d": "11/2010"}, {"body": "issue would like something like ideas tanks", "d": "11/2010"}, {"body": "danigb possible use extensively want inherit two separate classes method used original post solution could find layout along lines issue every time add method want inherit prototype specifically wo nt happen soon add method parent class", "d": "11/2010"}, {"body": "true sorry mess issue thanks", "d": "11/2010"}, {"body": "answer issue could nt get working sub views", "d": "10/2011"}, {"body": "allright got work see gist actually quite like current approach apart scoping thing maybe smarter way", "d": "11/2010"}, {"body": "maybe could leverage jquerydatalink plugin oneway twoway binding lets customize bindings add converters alter values think could add couple converters convertfn know work backbone models collections wrap link function automatically create settings map tells plugin use converters binding backbone model collection think", "d": "11/2010"}, {"body": "yeah makes sense like backbone everything jquery approach good helpers would cool nt looked datalink plugin play around", "d": "11/2010"}, {"body": "thanks excellent question part idea backbone make easy accomplish efficient data binding models views means explicitly supporting style syntax directly binding attributes models attributes dom elements way nice granular makes extremely difficult manage necessary bookkeeping maintaining application performance instead backbone targets coarsegrained views default behavior simply rerender view model state changed done nt manually wire model attribute several bits ui update model attribute causes single innerhtml change single browser reflowrepaint course nt straightjacket coarsegrained renders nt like view expensive rerender prefer granular update events available interested hearing think rationale", "d": "11/2010"}, {"body": "hey jeremy playing around bit actually makes lot sense especially browser allows start quickly binding updates optimize much want plus sideeffect making related properties update change make sure get rerendered cool koen", "d": "12/2010"}, {"body": "cloned project github took look causing events get bound found problem really stemmed way rendering things first problem came across way setting render function djangomodelfieldview changed per view render went ahead changed initialize function djangomodelfieldview following reasoning nt set el something nt exist since generated per view el lastly went ahead modified appview createfield function little bit changing bottom part something makes use changes made djangomodelfieldview side note would probably change appview createfield code bit like matter personal preference suppose think better save selector etarget beginning function since using function save calls finally would suggest come documentcloud ircfreenodenet would like get help backbonejs appropriate problems like imho", "d": "11/2010"}, {"body": "applied changes worked gives better idea backbone works thanks", "d": "11/2010"}, {"body": "used sample project hope find useful", "d": "11/2010"}, {"body": "correct module loading support nt think torequirejsornottorequirejs anything backbone really personal opinion javascript module loading place web applications concatenating compressing gzipping js assets single file app loaded single cacheable http request preferably farfutures expires headers stab sort thing context rails app available dynamic module loading make sense context truly enormous js apps like gmail talking megabytes javascript loaded portion app accessed good asset packaging still useful things like requirejs still overkill", "d": "11/2010"}, {"body": "agree module loading nt relevant backbone want clarify requirejs lets specify dependencies development code create combined minified optimized files production using optimization tool browserbased js goal nt much let module loading production let develop small units functionality express dependencies know generate optimized code done", "d": "12/2010"}, {"body": "thank rebecca nt time reply basically thoughts subject asking module system people using either part typically used others using requirejs everywhere including backend worked james flush bugs app uses lot frameworksprojects works perfectly modules built work environments far mostly form validation objectstorage serializationdeserialization used helpful saying", "d": "12/2010"}, {"body": "thanks ticket bit reluctant change means changing api bit think best patch makes possible pass jquery parameter option call method relies", "d": "12/2010"}, {"body": "great gives us much control requests sent thanks", "d": "12/2010"}, {"body": "somehow get problem overwrite fetch method like fetch function options queryobj var url thisurl use fetch query params", "d": "10/2011"}, {"body": "callbacks removed using array correctly spliced nt need extra check mind bit logging figure current state many elements thinks callback removed", "d": "11/2010"}, {"body": "well weird set first page load ideas", "d": "11/2010"}, {"body": "got sorted overriding constructor without calling closing ticket", "d": "11/2010"}, {"body": "note model markable gets called via namespacemoveview backboneviewextend tagname td template template movetemplate html initialize function bindall render render function thisel html thistemplate thismodeltojson return lt consolelog thismodelcid gt lt consolelog thismodelmarkable gt div id square lt gt lt j gt class square squarerow lt gt squarecolumn lt j gt lt mark gt", "d": "11/2010"}, {"body": "looks like nt actually method defined right looking", "d": "11/2010"}, {"body": "changing nt work either thing either inside laterondefined witch case seems like chicken egg issue either hidden behind proxy function somewhere", "d": "11/2010"}, {"body": "oh course collection class constructor function instance collection like make instance need", "d": "11/2010"}, {"body": "indeed issue basic mistake thank", "d": "11/2010"}, {"body": "thanks feedback default backbone think going keep pattern awfully convenient view element times render regardless happens dom", "d": "12/2010"}, {"body": "nt look like attach documents code rendered page messagetracer report approval lt tr class report amp lt activatedat active amp gt gt lt td gt lt input class active type checkbox amp lt activatedat checked checked amp gt gt lt td gt lt td class reportname gt lt td gt lt td class reportdestroy gt lt td gt lt tr gt amp lt active amp gt lt span class reportsactive gt lt span class number gt amp lt active amp gt lt span gt lt span class word gt active lt span gt lt span gt amp lt amp gt amp lt total amp gt lt span class reportscount gt lt span class number gt amp lt total amp gt lt span gt total lt span class word gt amp lt total report reports amp gt lt span gt lt span gt amp lt amp gt lt cdata function inputactive click function consolelog click amp gt reportjs function report model basic report model attributes windowreport backbonemodelextend report collection collection report backed rails app windowreportlist backbonecollectionextend create global collection reports windowreports new reportlist approvaljs jqueryready function report view dom element report windowreportview backboneviewextend application reportapproval toplevel piece ui windowreportapproval backboneviewextend finally kick things creating app windowapp new reportapproval server response reports name test createdat activatedat updatedat id nominatedat", "d": "11/2010"}, {"body": "completeenough example able try locally put somewhere take look action get started probably drop debugger function trace backwards original calling function", "d": "11/2010"}, {"body": "action tried debugging safari inspector times hit toggleactive backtrace nt helpful showed cases change context jquery see target element ie shows", "d": "11/2010"}, {"body": "first draft pushed master", "d": "11/2010"}, {"body": "problem escape method moment nt preserve whitespace pointers deal", "d": "4/2011"}, {"body": "sorry ignore comment", "d": "4/2011"}, {"body": "one way leaves burden right escaping smack shoulder developers would much rather prefer template engine deal knows template rendered escaping required perfectly like templating engine using model cache escaped values scale needs work way dev nt remember every time need escape something also exactly reasons rails django switched auto escaping template layer default", "d": "8/2011"}, {"body": "dwt simply always use instead never worry", "d": "8/2011"}, {"body": "one workaround always get escaped values ca nt easily decide template need unescaped value maybe stepping back bit proposal assumes hand real model object template right tend currently use tojson hand returned dict together patch template system changes autoescape default makes much shorter sweeter like retain", "d": "8/2011"}, {"body": "deal vs add remove general methods simply optimization wish use leave fine way go relatively small numbers models note also implement terms example context view list models idea provide way convey idea collection changed much easier rerender everything scratch render one model time touching dom tight loop would adding oneatatime performance killer especially internet explorer notion makes possible efficient rendering large numbers models single dom insertion single reflowrepaint", "d": "11/2010"}, {"body": "easy clear dom element types views consider view shows collection map layers ca nt blow away every map layer whenever collection says refresh figure changed map layers nt added collection", "d": "11/2010"}, {"body": "per discussion jeremy irc specific use cases warrant able fetch refresh rather clearing collection triggering refresh want individual addremove events based added generally ideal dom manipulations say subscribing unsubscribing live feed model collection cases want know item removed discussing good api pass options object ideas include current frontrunner individual think", "d": "12/2010"}, {"body": "functionality much needed especially dealing nested collections", "d": "1/2011"}, {"body": "agree regards nested collections", "d": "1/2011"}, {"body": "making common case simpler cases ca nt live performance hit leave default implementation open overriding default syncfacility common case override necessary", "d": "3/2011"}, {"body": "one sitting long enough think quite ready close nt see anything would continue compatible permodel events someone good pull request concrete suggestion removing favor something comfy glad reopen see new ticket", "d": "1/2012"}, {"body": "use pass array models working properly", "d": "11/2010"}, {"body": "works hoping something bit elegant honest fetching data collectionurl seems intuitive framework handle something like rather creating ajax request handler spoonfeed data collection append option calling fetch would certainly help usecases", "d": "11/2010"}, {"body": "sounds like nice addition want take stab figuring best api based usecase", "d": "11/2010"}, {"body": "ckorhonen patch merged", "d": "12/2010"}, {"body": "actually binary insertion sort effectively point welltaken disabling comparator sorting triggering events seems like best way go", "d": "11/2010"}, {"body": "actually given javascript performance may think like see benchmark proves problem large collections decide problem cook one", "d": "11/2010"}, {"body": "see splice algorithm insertion middle array n comes", "d": "11/2010"}, {"body": "commit changes backbone resort collections fire change events models list added makes impossible us report indices directly event think folks need simply use find", "d": "1/2012"}, {"body": "looks like latest backbone index reported event accurate loops sorted collection triggering add events added models order appear sorted collection", "d": "3/2012"}, {"body": "yes ugly thisget desapear", "d": "11/2010"}, {"body": "great idea patch adds attribute suggest along documentation tests thanks closing ticket", "d": "11/2010"}, {"body": "change rails default behavior omit namespaces suitable activerecord baseincluderootinjson false read", "d": "11/2010"}, {"body": "thanks", "d": "11/2010"}, {"body": "added documentation thanks ticket", "d": "11/2010"}, {"body": "great questions nt originally include method personal experience opinion found almost never need load single model clientside js always search list working single model probably already loaded clientside experience tells differently love hear usecase using app terms query params filtering collections using something add perhaps explicit method adding query params often come realurl form example documentcloud search nt use explicit parameters looks like urlencoded actually running databasestyle queries javascript think bit inappropriate server would nt able trust js query conditions would able validate make sure browser nt trying look something nt allowed access better use url endpoint query accepts whitelisted parameters think", "d": "11/2010"}, {"body": "app document editor always dealing single document edited want open different one fetching list available documents choose items list contain documents contents meta data like title modifiedat etc document gets selected eventually fetch full version contents convenient model get id leaving collection untouched however since working realtime editor makes use websockets anyway tempted use whole clientserver communication particular look seems nice solution providing interface server client however rather offtopic wonder stick backbone models using rmi approach regarding queryparams might right suggesting urlencoded params get requests leaving task user terms transparency however urlencode everything explicitly something always disrupted would rather use declarative approach imo specifying params always work way matter dealing get post put delete problem special case get params part url requestbody two concepts mixed somehow correct saying somehow wrong however http works api point view one would need workaround desired jqueryajax provides data property specify params get requests without urlencode manually maybe would make sense collection fetch take optional data property urlencoded combined existing url backbone internally", "d": "11/2010"}, {"body": "nt particular usecase refreshingexpanding contents alreadyexisting model already handled", "d": "11/2010"}, {"body": "mhh rather given loaded document doca user usually wants load switch different document docb replacing current model new one updating property calling would work however feels somehow wrong", "d": "11/2010"}, {"body": "say get terms retrieving new model fetch terms refreshing contents existing model", "d": "11/2010"}, {"body": "think going close ticket time seeing semantic problem get ca nt return reference model synchronously nowhere store example nt work get must async feels like overkill", "d": "11/2010"}, {"body": "good use case fetch one model might grabbing current user settings might one singleton resource like settings currentuser suggest always returning array one object case", "d": "4/2011"}, {"body": "argh body issue disappeared updated issue title typing whole thing", "d": "11/2010"}, {"body": "thanks taking time retype fixed bug pushed backbone closing ticket", "d": "11/2010"}, {"body": "thanks hopefully update makes clearer think places mention go let know", "d": "11/2010"}, {"body": "tried windows windows xp chrome dev working expected gist code send link example app working", "d": "11/2010"}, {"body": "one thing try using javascript call instead literal urls seeing makes difference", "d": "11/2010"}, {"body": "test page reproduces problem provide evidence works chome dev virtual xp instance reboot see somehow fixes problem end", "d": "11/2010"}, {"body": "ok github needs move comment close button away currently located need look clicking argh sorry", "d": "11/2010"}, {"body": "nt worry reopen easily", "d": "11/2010"}, {"body": "ok tested example page windows still works properly think something going setup andor example code recommend trying different example", "d": "11/2010"}, {"body": "rebooting still seeing exact behavior going try machines around lab next see many affects helpful even recorded screencast since odd see among things forward button never gets activated click back history looking examples online using backbone history amp routing support ca nt find point one gladly try meantime try see hook listen going see going wrong", "d": "11/2010"}, {"body": "chrome webkit issue seems problem occurs even using backbonejs js page matter even works push one two three cnn closing since backbone problem", "d": "11/2010"}, {"body": "see pull request", "d": "11/2010"}, {"body": "ideal way get behaviour override function model something like outset backbone namespaced responses built via removed", "d": "11/2010"}, {"body": "thanks jeff right overriding tojson parse model works fine", "d": "11/2010"}, {"body": "closing modelside solution available", "d": "11/2010"}, {"body": "finish ticket mean json support serializing model attributes within root node", "d": "11/2010"}, {"body": "sorry meant backbone serializing model attributes default json", "d": "11/2010"}, {"body": "wish provide old behavior globally monkey patch prototype tojson method like", "d": "11/2010"}, {"body": "back button working closing ticket duplicate discuss", "d": "11/2010"}, {"body": "mentioned following browser chrome dev win also backbutton pressed forward button enabled browser thinks action taken backbutton fresh event truly going backwards history", "d": "11/2010"}, {"body": "accidentally closed argh definitely nt intend", "d": "11/2010"}, {"body": "interesting idea mind sharing code use case showing would easier access params globally instead passing", "d": "11/2010"}, {"body": "second thought ca nt nt necessarily names parameters could stick values global array would nt know route coming refer better handle route action knows meaning arguments another reason ca nt routing executed changed outside call would cause global params incorrect", "d": "11/2010"}, {"body": "fix merged master thanks patch", "d": "11/2010"}, {"body": "actually working correctly call model default implementation backbone trigger two calls thus two calls clientside model sent server server responds new attributes updated client taking todo list example toggle checkbox todo item first get call change attributes localstorage finished saving model get another call time including generated localstorage plugin well", "d": "11/2010"}, {"body": "would change validate make work", "d": "11/2010"}, {"body": "something like var todo new todo todobind error function err todoset content", "d": "11/2010"}, {"body": "well still gets added even fails validation honestly see value validate method works way get new todo without content even though validate works said", "d": "11/2010"}, {"body": "nt know related happily move new issue found calling collectioncreate method results validation called empty attributes object creating new model running save method model triggers validation correctly create method passing attributes correctly model returns attributes validation method returns empty attributes object model validate method", "d": "11/2010"}, {"body": "beseku thing said still append something useless view create instance object", "d": "11/2010"}, {"body": "nope seems work fine", "d": "11/2010"}, {"body": "news issue also tried use validate function ca nt really get head around get called twice somehow understandably explained jashkenas still ca nt see good reason behavior besides keep good work backbone really enjoy working", "d": "2/2011"}, {"body": "hi problem similar create method expected following work todo implement somethign better end callback success never seems get called hack todo hack nt know right var thiscollectionfetch success function thatcollectionviewtrigger triplist change error function todo implement somethign better alert failed load collection nt looked implement second bit code expected behaviour", "d": "3/2011"}, {"body": "looked issue regarding validate working correctly todo demo tried worked saving letter word javascript windowtodoprototypevalidate function attrs consolelog attrs object content test done false order proto object object content test done false id order proto object modify code slightly javascript windowtodoprototypevalidate function attrs attrscontentlength lt return todo short need gt characters windowtodoprototypeinitialize function var init windowtodoprototypeinitialize return function thisbind error function model msg consolelog msg expected result console item added", "d": "8/2011"}, {"body": "please reopen questions", "d": "10/2011"}, {"body": "overhauled master validations get complete new state instead delta", "d": "1/2012"}, {"body": "agreed", "d": "11/2010"}, {"body": "addition jr akefile build pieces together also minification would nice", "d": "11/2010"}, {"body": "mulling little time like stick singlefile library allows us setup namespacing within single closure provides common baseline functionality assumed load backbone library bigger compressed perhaps worried give take half k nt much concerned real power user suggest replacing version copy backbone", "d": "11/2010"}, {"body": "ok agree point", "d": "11/2010"}, {"body": "reason backbone sends model attributes update restful performing model representation specific url benefits well send attributes changed request possible two different clients update model mutually conflicting attributes restful request model always consistent state reason calling rails django always saves attributes model overhead incurred sending attributes minimal compared ajax request model heavy enough starting problem", "d": "11/2010"}, {"body": "according issue bug think documentation updated since states contrary savemodelsave attributes options save model database alternative persistence layer delegating backbonesync attributes hash set contain attributes like change keys nt mentioned wo nt altered", "d": "9/2011"}, {"body": "docs changed rchampourlier suggested spent good portion afternoon trying figure nt saving subset", "d": "1/2012"}, {"body": "sure thing", "d": "1/2012"}, {"body": "nt major datastomping issue let say two users viewing model time first user saves change one attribute second user saves change different attribute immediately current logic overwrite changes made first user data get stomped opinion backbone send put request changed attributes entire model definition perform sync submitting put request ask user confirm overwrite made also nt sending entire model definition save going massively slow operation large schema definition would much efficient send attributes wish update missing something", "d": "3/2012"}, {"body": "notice issue closed guessing wo nt fix workaround problem avoid data stomping described example", "d": "8/2012"}, {"body": "globexdesigns datastomping describe concern restful api whether using backbone optimistic locking would typically use scenario http added support optimistic locking new headers like etags ifmatch blog post detailed writeup topic restful service generates etags representation checks ifmatch header put delete modifications make sure clients nt stomping changes made since last retrieved data client code extended backbonemodel automatically extract etag header fetch called add ifmatch header save destroy calls calling save destroy model objects handle precondition failed results tell server data changed since last retrieved handle depends scenario perhaps simply refetch data reapply changes top may need user review changes first", "d": "8/2012"}, {"body": "jashkenas mentioned two reasons restful need restful library handy one concurrent updates problems nt fixed existing way avoids mutually conflicting attributes data stomping instead nt see reason existing approach reason proposed one avoid lots checks order save unchanged attributes server side cause event sourcing pollute history", "d": "8/2012"}, {"body": "ericwright concern restful apis obvious solution seriously put question usability looks like others tried fix issue introducing merge patch operations mix workaround proposed etags solution feels messy mention fact constant etag header parsing probably add significant performance overhead suppose disagreement restful design general simply nt work web application cases application got users making hundreds thousands requests per second restful full object data passing inefficient dangerous scenario real solution think case keeping backbone existing design place would work object update check server object changes may occurred ask user confirm object changed since last edited essentially means doubling number requests made server update ie check changes save object data written patch backbone adds partial boolean parameter backbonemodel objects enabled change save function send updated data something would considered pull request completely violate backbone structural design methodology", "d": "8/2012"}, {"body": "globexdesigns data stomping partial updates two different issues treated separately note partial updates help reduce frequency stomping users generally modify different data model proposed partial boolean parameter still nt prevent two users stomping modifying field model let stomping occur lastwritewins policy use optimistic locking approach etags prevent accidental overwrites come scheme like one proposed separate issue open adding patch support backbone worth reading discussion since covers many issues given rails server technologies adding patch support seems likely backbone go route rather adding partial put support nevertheless since already written partial put support could submit pull request see jashkenas says", "d": "8/2012"}, {"body": "practicality camp models sometimes include denormalized data multiple serverside entities one update care entity id data transferred presentation ui example address models country region city convert address json server encode current country countryid countryname region city user interface uses autocomplete fields dynamically select existing country region within country city within region update nt need want names need ids would favor approach could supply either blacklist fields exclude updates easy way filter values overriding tojson right way", "d": "8/2012"}, {"body": "prefer approach updates attributes passed save team work around app call makes use part used model method see", "d": "10/2013"}, {"body": "pity issue closed backbone definitely play well partial model update seems developers dont listen users workaround", "d": "10/2014"}, {"body": "seems like users dont read docs workaround particularly bit", "d": "10/2014"}, {"body": "suspect comments except really rude one end predate support patch attribute added dec", "d": "10/2014"}, {"body": "conversation surrounding original decision unify indeed case want truejson request fauxhttp application server using prefers combination", "d": "11/2010"}, {"body": "using backbone iis yes easily get raw data posted server json request iis easily really work put delete verbs", "d": "11/2010"}, {"body": "oh also sent pull request got assigned issue case guys agreed nt feel like reimplementing", "d": "11/2010"}, {"body": "nt use quite patch commit separates two bits note capitalization change closing ticket", "d": "11/2010"}, {"body": "thanks really appreciate adding back", "d": "11/2010"}, {"body": "sure particular reason", "d": "11/2010"}, {"body": "preserving header comment includes licensing information good users dotting crossing versions easier find version currently using project know newer version got", "d": "11/2010"}, {"body": "alright go thanks ticket", "d": "11/2010"}, {"body": "thank also checked underscore think would useful thing", "d": "11/2010"}, {"body": "done", "d": "11/2010"}, {"body": "thanks", "d": "11/2010"}, {"body": "whoops thanks fix patched pushed master closing ticket", "d": "11/2010"}, {"body": "give try", "d": "11/2010"}, {"body": "nt change anything perhaps nt explained precisely happens get typeerror result expression thismodel undefined object render function view select control defines change event handler understand change event fires select control causes model get updated causes model change event fire causes view render function get called fine nt understand thismodel undefined within render function undefined render triggered change event perhaps something really stupid ca nt figure another way select controls update model cause view change", "d": "11/2010"}, {"body": "ahh sorry try adding line function bind current instance add functions call ensure preserved take look docs underscore details", "d": "11/2010"}, {"body": "ah seems trick nt understand render method useful people without though thought people would eventually see render called within event handler many thanks help great code share", "d": "11/2010"}, {"body": "depends call within event handler calling like bind advance calling like problem", "d": "11/2010"}, {"body": "sure thing thanks explanation change patch fixes closing ticket", "d": "11/2010"}, {"body": "say two main options first leave items vanilla attribute backbone uses deep equality check attributes change inner item updated document know option pull items document attach models right inside collection stuck document something along lines documentcloud example roughly speaking either work well", "d": "11/2010"}, {"body": "would recommend also add document property back document object could accessed needed items", "d": "11/2010"}, {"body": "believe binding items change event document save missing piece although adding document itemset looks helpful well try today let guys know turns", "d": "11/2010"}, {"body": "worked well biggest issue mongoid thanks help guys", "d": "11/2010"}, {"body": "would go saving items nt want make request time item changed want save single request user action thinking collecting everything document saved updating document items attr good solution", "d": "5/2011"}, {"body": "long items set document documentsave items sent server well", "d": "5/2011"}, {"body": "let say add item collection runtime nt get added items attribute also automagically new model added collection wo nt sent server ca nt see changes collection could propagate model attributes sent save", "d": "5/2011"}, {"body": "handeling document default items array initialization overloaded set method create new items collection attributes set document class document extends backbonemodel defaults items set attrs options gt items attrs items items isarray items isempty attrs items new documentitemscollection newitem new item attrs items add newitem silent true else attrs items new documentitemscollection items point deal items collection methods get set add remove nt mess dot notation even methods document class called additem deleteitem fire change events document save document call tojson item collection honestly simple case documents even deeper subdocuments dealing amount complexity backbone overloading several methods models real big pain ass looking replacing backbone sproutcore future deal really complex documents would suggest looking extjs sproutcore backbone great small project simple models falls apart pretty quickly objectsinteractions start ramping", "d": "5/2011"}, {"body": "new best practices", "d": "3/2013"}, {"body": "eranation nope pretty much using pattern like keep attributes hash nt keep sync requires pull object response parsing add back serializing see aside might want put logic rsim put method instead use instead semideprecated find much easier attributes shallow hash nested collections models etc possible seems work well even deeplynested schemas see docs", "d": "3/2013"}, {"body": "thanks great example much appreciated", "d": "3/2013"}, {"body": "deal unbinding callbacks zepto never remove callback", "d": "11/2010"}, {"body": "using combination overriding child class similar patch zepto calls callbacks object pain remove events call like jquery anyhow opened ticket", "d": "11/2010"}, {"body": "correct wrong looking zepto source seems like places mentioned places mentioned kinda seems like zepto still halfbaked point way unbind events added", "d": "11/2010"}, {"body": "exactly think oversight zeptos part something backbone worry", "d": "11/2010"}, {"body": "let freeze one zepto gets little baked currently jeff ticket still nt addressed", "d": "11/2010"}, {"body": "anything else neededdesired zepto would useful invest time write needed functionality zepto", "d": "11/2010"}, {"body": "got backbone tests passing modified fork zepto", "d": "11/2010"}, {"body": "alright zepto backbone zepto support thanks taking care hard work sam closing ticket", "d": "12/2010"}, {"body": "nt think need much complexity set id either create model id advance view function set id correctly based model call", "d": "11/2010"}, {"body": "good idea thanks pointing", "d": "11/2010"}, {"body": "duplicate", "d": "11/2010"}, {"body": "reason backbone coercing empty strings two indistinguishable html point view return empty string input cleared usually want column database happens said agree poor behavior messing bit data may meaningful distinction application removed line closing ticket", "d": "11/2010"}, {"body": "think great idea initially concerned compatible would send fulljson requests language like php ca nt even handle http put configurations likely backends able accept bodied requests", "d": "10/2010"}, {"body": "good point guess nt realize rare clean rest endpoints really trying play java framework nice clean rails like web framework perfect almost every way nt support json body mappings java pojos maps params since ghandi said change want see world really nt use quote keep projects", "d": "10/2010"}, {"body": "ok gist overrides backbonesync want", "d": "10/2010"}, {"body": "hold minute reopening ticket like servers nt put delete nt think would nice let correct default provide fallback legacy servers", "d": "10/2010"}, {"body": "perfect want submit pull also get rid placing model property called model imo confusing nt function", "d": "10/2010"}, {"body": "working send post put delete set param send model param json string setting either send body otherwise body sent applicationjson right", "d": "10/2010"}, {"body": "think need change name existing option match would look wacky plan sounds good except option sets right", "d": "10/2010"}, {"body": "right affects encoding pull request sent nt modify rails example nt quite sure look", "d": "10/2010"}, {"body": "patch looks gorgeous nicely done still want investigateexperiment bit merging things like nt instill great confidence especially bottom page", "d": "10/2010"}, {"body": "think ok default approach backbone easily supported rails rails clean restful route agreed verified creating sample rails project put body applicationjson works expected rails issue referenced bug occurs emulating http put post param sending body applicationjson backbone would equate setting flags correct backbone default put json approach work fine rails rails emulatehttp flag work well however setting flags rails instance would route correctly without patch seems pretty good", "d": "10/2010"}, {"body": "couple things could help emulators add httpxhttpmethodoverride header whenever flag set solves rails routing bug might help servers flags set stringify whole body json including method param instead model param today pass jquery ajax call formurl encoded believe rails expects contenttype json requests make tweaks agree", "d": "10/2010"}, {"body": "closing ticket favor second pull request", "d": "11/2010"}, {"body": "please note perfectly clean perfectly restful way sending data upwards happens bad data format hierarchical data hierarchical data needs encoded via encoding convention railsjquery encoding mechanism good would certainly support sending data upwards better formats json yaml xml would retain option sending data upwards", "d": "11/2010"}, {"body": "gist gather thread sending ajax data server contenttype preferred could give explanation source see sites like github google twitter use latter ajax requests reason preference", "d": "7/2014"}, {"body": "use use function keep models consistent sort order times change function call resort set listening events everything update correctly automatically hope helps", "d": "11/2010"}, {"body": "thanks yes makes sense case refresh add etc would need clear view correct example comparator sorting models first name already displaying bob charlie add albert would need clear view render", "d": "11/2010"}, {"body": "refresh add etc would need clear view correct yes event would clear rerender entire list models comparator sorting models first name already displaying bob charlie add albert would need clear view render insert new views appropriate location dom instead simple jquery might want use put albert right place", "d": "11/2010"}, {"body": "insert would efficient way find neighbours collection thinking bind add event get index newly inserted model could check see next index something like", "d": "11/2010"}, {"body": "yep get position within collection look adjacent elements either direct reference models record code handles case looks like", "d": "11/2010"}, {"body": "cool thanks help", "d": "11/2010"}, {"body": "querying logic part interface application number ways handle change collection returns include current search query next time models replaced models match current search useful collections contain search results run regular jquery ajax call collection results happen method add collection like want include tags nested response photos model pull turn tag objects thoughts", "d": "10/2010"}, {"body": "yes got quite right added instead assuming namespace point bit documentation needs updated", "d": "10/2010"}, {"body": "thanks jeremy", "d": "10/2010"}, {"body": "cheers", "d": "10/2010"}, {"body": "spot method handles aborting save triggering event observed model collection level hopefully works specifics best validate models left define nt want clutterupstraightjacket core backbone bunch static typing attributes considering enforced schema particular mode attributes begin said think enhanced validation usual suspects etc would make great backbone plugin", "d": "10/2010"}, {"body": "thanks pointing method schema looking way define expectedrequired attributes backbone model explicitely looking todo example app spot comments see attributes method expects comments often outofsync actual code prefer model signature eg required attributes listed would also nice specify default values missing attributes", "d": "10/2010"}, {"body": "yes couple caveats would awfully nice see jsperfcom tests change make sure instead nt hurt performance much would configurable globally per collection per model sure easier map implementation", "d": "10/2010"}, {"body": "last point good one maybe config option default backbonesync implementation", "d": "10/2010"}, {"body": "mongoid otherwise work seamlessly existing yes making configurable backbonesync sounds nice wrapping function also pretty easy var oldsync backbonesync backbonesync function method model success error modelid modelattributesid modelid success var oldsuccess success success function resp respid respid oldsuccess resp oldsync method model success error could similar mapping entirely serverside", "d": "10/2010"}, {"body": "sure easy point general interest default implementation really sure common enough issue bother know mongid one couchdb orms issue", "d": "10/2010"}, {"body": "alright let leave open see folks say", "d": "10/2010"}, {"body": "seems something dealt server want payload send back server pure orm agnostic goodness coupling bad orthogonality good saying goes case couchapps needing attribute think custom couchapp sync best like jeremy suggested", "d": "11/2010"}, {"body": "sounds like nt many folks issue closing wontfix time reopen later necessary", "d": "11/2010"}, {"body": "maybe somebody interest couchdb application come works well little advantage wrapping backbonesync eg backbonecollectionget works even collection bootstrapped via backbonecollectionrefresh data using id property greetings johannes", "d": "1/2011"}, {"body": "overrode tojson rails app id id instead reason might cause problems seems working little bit tested", "d": "1/2011"}, {"body": "think overriding tojson server side suggested zmbmartin way go guess something like def tojson options supermerge id gt id end mongoid guess method mongoid document module", "d": "2/2011"}, {"body": "issue raised several times taken initial stab non attribute support override permodel basis globally models", "d": "2/2011"}, {"body": "really like think going support functions perhaps implement method overridable perhaps also remove prefix default originally added futureproofing safety definitely common case need thoughts", "d": "10/2010"}, {"body": "yeah sounds like good solution another idea would able somehow perhaps backbonesync define collections models parsed retrieved getting multiple models one response could actually parse time thus using one ajaxrequest something like whenever request documents fired mydocumentsmodel well mytags would get refreshed idea would need better api work practice think could neat feature think", "d": "10/2010"}, {"body": "patch addresses implemented model collection assumes server returns direct attributes direct array models instead namespaced closing ticket documented released part backbone", "d": "10/2010"}, {"body": "terrific", "d": "10/2010"}, {"body": "possibly probably great place start would design backbone plugin feel free extend views much see fit way able start using see merging seems like good fit", "d": "10/2010"}, {"body": "awesome start repository get work obviously input anyone would greatly appreciated", "d": "10/2010"}, {"body": "leave ticket open post examples code snippets like go along folks able comment", "d": "10/2010"}, {"body": "subviews willing guess continue writing view classes wrap presentation elements going want stay dry", "d": "10/2010"}, {"body": "would mind giving idea like see implemented", "d": "10/2010"}, {"body": "afraid sure mind view enhancements mentioned top ticket first two pretty easy hide function thisel hide destroy function thisel remove subviews whole nother worms nt know much could look like sorry", "d": "10/2010"}, {"body": "cool wanted make sure gave people plenty room input probably start working let people critique thanks", "d": "10/2010"}, {"body": "actually think subviews rather simple idiom wise sure implementation thoughts", "d": "10/2010"}, {"body": "think talking nested child views subclasses general views something already example currently heirarchy backboneview dcuidialog dcuiaccountdialog dcuiuploaddialog dcuiembeddialog dcuitimelinedialog", "d": "10/2010"}, {"body": "sorry sure nt working thought rather silly nt", "d": "10/2010"}, {"body": "yeah intended would probably better called childviews subviews views attached controlled toplevel views working couple days repository fully working example application application simple contact manager working getting github page try online always clone run locally child views implemented controller class think covers ground childviews would step right direction", "d": "10/2010"}, {"body": "working example", "d": "10/2010"}, {"body": "nice could even persist changes address book using localstorage backbonesync nice refreshcapable demonstration also would really neat search box filtered contacts type spwa project seems like main component notion controller routes hashurls actions via events something considered adding backbone initial release decided include one hand urlrouting usually quite small part clientside application plenty existing modules given success sammyjs people expect urlrouting provided folks think would make sense add capabilities similar chris", "d": "10/2010"}, {"body": "bunchesofdonald awesome including something like backbone personally would prefer defining routes via regexp specifying parameters interpolation foo name project called pineapple similar things backbone ultimately backbone came found prefer backbone experimenting ideas project one thing think pineapple pretty well basically define routes event event think event nice gets overlooked lot looks like define route routes defined strings get coerced regexp easier escape backslashes time appdefineroute foo w function course backbone would probably use oo approach rather closure style pineapple think two important things want get across awesomeness regexp routes using regexp groups rather foobar param style well entrance exit hooks ben alman jquery hashchange good choice opinons come get chance really look code", "d": "10/2010"}, {"body": "also able something like must", "d": "10/2010"}, {"body": "exactly looking played around view manager framework found backbone complemented nicely jquery mobile seems nice way dealing spwa currently evaluating may worth taking ideas well sub views found views nt leave history state usually required annoying using hash change event navigation agree hash change logical semantically correct method dealing nav enter exit methods would useful allow setupcleanup animations", "d": "10/2010"}, {"body": "nice demo really fills holes far common use cases documentation also excellent especially like backbonespwacontroller hashevent router xejs templates could definitely see something like useful apps however like see backbone handling handleevent delegation behind scenes", "d": "10/2010"}, {"body": "fitzgen definitely think regex way go routes stands get running things way gotten put together really like exit idea would much better thishideall view could decide wanted lost focus also need redirect rather locationhash owz really looked jquery mobile quick glance looks like trying aim somewhere inbetween something like cappuccino sproutcore cheaproc thanks bit kludgy parts", "d": "10/2010"}, {"body": "jashkenas great ideas example course would big backbone something like", "d": "10/2010"}, {"body": "backbone controller would useful", "d": "10/2010"}, {"body": "example updated suggestions jashkenas much better way thanks thinking routerenterexit thing think come elegant solution early stages would think dropping controller class favor router class make views subscribe router events via regex get event hash subscribed entered well exited router class would similar backbone events saves us nasty code controller thishideall thisgetview etc think also helps complexity child views view would know current state application could respond accordingly", "d": "10/2010"}, {"body": "make views subscribe router events via regex get event hash subscribed entered well exited feels much natural routes manage views based enterexit events rather views subscribe certain route events think would make views much think views fine others feel", "d": "10/2010"}, {"body": "worth look way sammyjs handles issues also useful snippet posted back jashkenas", "d": "10/2010"}, {"body": "poking around bit think still pretty skeptical including router core backbone dealing fauxurls important part clientside app small one documentcloud probably models views urlroutes singlepage apps like todo list example nt benefit routes example check wild section sammy wiki one three sites actually seems use hashurls fashion one effectively static html site start might make sense plugin starters see many folks find useful", "d": "10/2010"}, {"body": "probably good way handling right simple applications page reload ok probably would nt benefit time probably sites also think single page applications way web going go makes much desktoplike application also sammy nt really provide data modeling really views backbone would consider huge roadblock spwa", "d": "10/2010"}, {"body": "started work mostly lots code borrowed based modular without http verbs stuff found mor disturbung helpful client side try add tests docs real example application week end tchakbackboneplugins moment routes handling actions filters plan add views integration lately", "d": "10/2010"}, {"body": "worth reading topic", "d": "11/2010"}, {"body": "prodding discovery sammy work never worked internet explorer lt starting earnest work far", "d": "11/2010"}, {"body": "reimplement logic make ie lt handle back buttons ben alman already created jquery plugin widely adopted used community unless missing something first admit possible nt see ca nt integrated build script also found common view want clean next route entered reason particular emitting events enter exit events right specifically think would cool trigger specific route exit events way controller nt bind global level route events exit enter events particular route think lot cleaner every single route bind every route change clean hinted conversation thoughts", "d": "11/2010"}, {"body": "reason include exit events urls supposed stateless able navigate new url fragment without knowing anything state currently loaded share couple examples use exit events pineapple project ben alman project fine resource first released big fan far longer complex necessary serializes state fairly gross urls default lines code jquerybbq backbone hashchange stuff included", "d": "11/2010"}, {"body": "would think exit would perspective running application instance exit could hide view previously showing cleanup order pass focus application new view", "d": "11/2010"}, {"body": "example give exit event basically whenever going new route found usually rerendering large portion page activating new widgets etc start entering given page globally disablehidedestroy everything replace new stuff overkill would easier every route perform page purging let route clean way nt telling widgets already disabled disable ones need disabled get message psuedocode jquery bbq yes bbq large arguably bloated however ben alman also released jquery hashchange plugin implements logic needed back button quite bit smaller bbq built top hashchange whatever floats virtual boat speak", "d": "11/2010"}, {"body": "ahh beauty mutuallyexclusive css class names instead blowing away entire tree uiviews tab away recreating tab back much nicer set css class highup node even example loading workspace tag looks something like change tabs say documents help class name maintabhelp makes faster tabbing around single dom repaint instead expensive ui building helps keep things stateless nt need worry wether projects rendered entities ready rendered times thoughts", "d": "11/2010"}, {"body": "clever like technique lot question remains though add remove classes body example changes like", "d": "11/2010"}, {"body": "naturally simple thing something bit sophisticated handles mutuallyexclusive classes actually almost part initial backboneview got pulled release right little extension documentcloud makes view enter mode modes mode group mutually exclusive modes group setting update view modes hash well set html class mode group view element convenient way swap styles behavior backboneviewprototypesetmode function mode group thismodes thismodes thismodes group mode return thisel setmode mode group thismodes group mode fnextend see backboneview setmode setmode function state group group group mode var new regexp w group g var mode state null state group thiseach function thisclassname thisclassnamereplace mode replace ssg return mode view opens call get entitiessidebar class blowing away sidebar classes also say get back advocating extension perfectly sufficient needs lot stuff mutuallyexclusive classes handy", "d": "11/2010"}, {"body": "backbonejs includes controllers hashchangebased routing closing ticket", "d": "11/2010"}, {"body": "thanks reporting patch fix problem refactor constructor little nicer test closing ticket", "d": "10/2010"}, {"body": "figured series underscore functions return different types things useful return naked array filter reject models actually methods would make sense return collection map collection books expect array strings collection models containing single attribute finally collection constructor function might sort important side effect ajax call performs ca nt call willynilly", "d": "10/2010"}, {"body": "makes perfect sense clears lot thanks", "d": "10/2010"}, {"body": "good question handleevents used use bind delegate wait html rendered thisel calling current situation barring change events ie could otherwise always call constructor assigned hmm folks think safety desirability", "d": "10/2010"}, {"body": "one way get around creating class called say var handledview backboneviewextend initialize function thishandleevents return var handledviewsubclass handledviewextend render function render el knowing events bound kind think keeping explicit good sometimes want bind events model saves like example progress bar confirmationclose model saved", "d": "10/2010"}, {"body": "play devil advocate could easily create subclass example calling handleevents could default think really easy common case binding event handlers immediately", "d": "10/2010"}, {"body": "would say would nice convenience automatically call long called thisinitialize nt see calling immediately problem nt want someone custom event handlers added removed inside handleevents would nt chance added constructor", "d": "10/2010"}, {"body": "nevermind last comment deleted bgrins good point currently way add constructor unless repeat whole constructor call initialize question would custom event handled object", "d": "10/2010"}, {"body": "internet explorer always stickler ie nt ever bubble change events means bound directly element question instead delegated change event call handleevents render element available initialize sure edit ticket bunch confusion reference", "d": "10/2010"}, {"body": "problems missing calling", "d": "10/2010"}, {"body": "yall think limiting use exclusively documenting trouble ie events bound manually call automatically defined", "d": "10/2010"}, {"body": "meant bring earlier think ie issues submit events ran one months ago sure jquery solved issue suspect think rather say ie sucks change events know work around would better provide consistent interface browsers declare documentation change submit events supported browsers thisevents want bind type event render time last thing want start worrying making high level js app cross browser compatibility would rather go lowest common denominator mental overhead frequently rebinding ie share knowledge necessary", "d": "10/2010"}, {"body": "full list events need deprecate ie delegation perhaps name function renamed", "d": "10/2010"}, {"body": "heading bikeshedding territory quick digress decided would like call method whatever named constructor", "d": "10/2010"}, {"body": "patch rarely call removed places used call manually documentcloud workspace everything working smoothly closing ticket go part backbone", "d": "10/2010"}, {"body": "awesome work", "d": "10/2010"}, {"body": "bug fixed latest version backbone grab homepage data ever sent requests", "d": "10/2010"}, {"body": "oh awesome nt realize updated since last night thanks quick reply", "d": "10/2010"}, {"body": "completely agree take good look patch ideally add event listener model entire collection way provide general catchall case failed validations server requests particular view better display error able override suppress event specific cases ideal patch standardizes arguments callbacks makes pass error callback callback used instead general event example look like sound like plan", "d": "10/2010"}, {"body": "means bind different signature validation errors callback eventname argument unless validation error model error argument little skeptical guess expecting one two anything long backwards compatible existing bind method changing signature event type bad idea still sort prefer setting error property model solution provided sufficient well error property way little simpler imo downside polluting model object ever check save set failed returned false anyway nt see actual problems lastly model passed error callback example nt error callback already getting called context model perhaps consistency binderror version", "d": "10/2010"}, {"body": "nope signatures roughly error objects may differ modelbind error function model error modelsave null error function model error better agree slightly verbose solution nt think setting magic property sticks around fact clutter things really acceptable api models first argument error callbacks may generic error handler bound specific model", "d": "10/2010"}, {"body": "alright buy modelshouldbepassedin argument meant differing callback signatures modelbind error function model error also modelbind change function eventname want say arguments callback depend event", "d": "10/2010"}, {"body": "arguments callback get passed depending event trigger subsequent arguments forwarded along however terms builtin backbone events argument signatures relatively similar never passed first argument always every event second argument passed two cases error events second argument error object change key events second argument new value key", "d": "10/2010"}, {"body": "hmm okay withdraw statement", "d": "10/2010"}, {"body": "still prefer setting toplevel attribute model instance example extra attribute model instance would set validation accessible via since stored internal attribute accessible doubt would considered polluting model object plus side filter objects collection easily say sending persistence layer", "d": "10/2010"}, {"body": "flag nt make much sense model method models always valid nt allow set invalid properties", "d": "11/2010"}, {"body": "thanks excellent ticket patch addresses three counts let know think", "d": "10/2010"}, {"body": "great looks good", "d": "10/2010"}, {"body": "backbone properly sets prototype chain able extend subclasses model view collection far see fit nt working something screwy going example hope helps check typos code", "d": "10/2010"}, {"body": "yep bug sorry interruption thanks fast response", "d": "10/2010"}, {"body": "entirely much like model view layers connected disconnected models reference specific view default although certainly pass one choose one end extreme models views separated entirely controller creating data object view render inside controller var data title modelget title author modelauthorfullname viewrender data model reference view corresponds onetoone backbone tries provide minimal set groundlevel functionality undogmatic possible respect structure clientside code", "d": "10/2010"}, {"body": "agree frameworks nt completely prescribe structure code think whole point extent like application frameworks instead using custom mvc implementation provide common structure applications allowing developers quickly get speed projects mention another ticket mvc vague implementations vary wildly however key concept pattern decouple code allow modular approach development creating concrete references views inside model layer makes extremely difficult imo least discouraged framework architecture", "d": "10/2010"}, {"body": "agree frequent pattern onetomany model views cases often model rendered partially represented many different pieces ui model knows nothing views naturally contain references model serves data source particular piece documentation like see changed clarified make point clear", "d": "10/2010"}, {"body": "cancel", "d": "10/2010"}, {"body": "empty", "d": "10/2010"}, {"body": "sorry accidently committed without text fixed", "d": "10/2010"}, {"body": "notion mvc muddy muddy water original guicentric idea contorted fit structure htmlgenerating web applications data access object model layer divided remerged django view rails controller backbone applies general modelviewcontroller style javascript projects precise terminology nt dogmatic general outline models contain data business logic operates data controllers specified backbone arbitrary js objects created orchestrate interactions models views views tied specific dom elements handle updates html well interactions coming dom events make change either alter model directly go controller function templates hold actual html sound good", "d": "10/2010"}, {"body": "answer original poster question absolutely model data business logic properly belongs controller job coordinate view model", "d": "10/2010"}, {"body": "backbonecollection model would considered controller frameworks behavior similar cocoa arraycontroller facilitates event forwarding set data inform views membership changes partly like see data binding concept separated concept model mvc sense see issue", "d": "10/2010"}, {"body": "ah opposite impression think important emphasize functionality labeling almost called traditional gui mvc controllers handle input events views display ui means javascript templates would view get different people commenting ticket probably slightly different takes concept", "d": "10/2010"}, {"body": "let talk goals custom events indeed separate module already mixed collection views bind fire events see fit talking notion attributes set get previous changedattributes goodies entail point things effectively model accomplish composition instead mixing view model property prefer would need concrete use case set clear examples backboneobject would improvement two options addition would nt make sense outside notion model simple convention passing along attributes object method choosing without model attributes much meat alternative choosing composition instead mixing seems logical", "d": "10/2010"}, {"body": "main goal mind make functionality key value binding objects collections separate concept data network sync layers application point building event binding functionality objects via composition valid solution although still wonder would nt handy base level object provided functionality classes framework also use backbonemodel provide event binding another object via composition network synchronization code included seems unnecessary state involved purely clientside overall like idea separating lower level modules function building complex classes composition modules", "d": "10/2010"}, {"body": "problems specific case separating databinding idea model idea databinding function intimately tied model function uses determine attributes valid also special case properties model concern certainly makes sense models make sense arbitrary objects special property figure way solve issues kvo case build mixing kvo module think would nice think current network code stay model entirely modelspecific", "d": "10/2010"}, {"body": "yes separating kvo behavior really desirable part separating network code model probably premature point although road could envision advantageous framework used different types contexts different types backends", "d": "10/2010"}, {"body": "ticket around bit going close time let reopen patch cooked accomplishes separation along clear usecase want mix something nt represent", "d": "10/2010"}, {"body": "fixed thanks", "d": "10/2010"}, {"body": "ok sorry thought template already implemented implement", "d": "10/2010"}, {"body": "use template underscorejs", "d": "10/2010"}, {"body": "added information documentation hope clears things", "d": "10/2010"}, {"body": "added note documentation explains rationale current behavior think much nicer api sort commonly referred certainly use arbitrary comparison functions take multiple properties account comparator function return thisget lastname thisget firstname comparator function return thisget posy thisget posx", "d": "10/2010"}, {"body": "would one go sorting one field ascending another descending simple cases agree sortby style convenient somewhat limited perhaps could made switch sort mechanisms automatically based arity comparator function use standard javascript sort api passed comparator function expects arguments otherwise use sortby maybe could implemented underscore make transparent backbone", "d": "2/2011"}, {"body": "would really nice elegant way reverse sort string field workarounds hard swallow", "d": "6/2011"}, {"body": "comparator function return thisget posy thisget posx ist solution expensive comes values like timestamps", "d": "12/2011"}, {"body": "kmalakoff done good work method probably gone far imho offer good features", "d": "12/2011"}, {"body": "ticket oldie goodie pushed commit master allow specify comparator either semantics", "d": "1/2012"}, {"body": "thanks detailed ticket things mentioned omissions documentation tried fix patches take look andor homepage let know questions nt answered", "d": "10/2010"}, {"body": "thanks additions docs updates clarify things especially templates views html live partials usual pulled js context via jammit similar library example using passing js array makes sense curious however would tie model updated gist created function named initializes new model renders view appends whatever selector also event instance model resulting code event callbacks performing operation independently example callback calls task similarly bind callback collection pattern could call would perform operations callback albeit implementation sparse contrived point feel comfortable enough moving forward creating small app throw github learning exercise gist", "d": "10/2010"}, {"body": "usually create view particular model tracks pass create view yes intended optimized rendering large list items added changed many efficiently call touch dom item instead get single event single dom update bring everything date perhaps understanding question", "d": "10/2010"}, {"body": "think hovering around answer vague look callbacks gist performing essentially operation callback touching dom item rather performing single dom update updated version callback perform single dom update tasksbind refresh function tasks var els taskseach function task var view new taskview model task viewrender tasksbind change viewrender elspush viewel body append els nt like approach callback would contain near identical implementation callback difference collecting objects array performing single dom update vs touching dom item dry example tasksbind add function task var view new taskview model task id listtask taskcid taskbind change viewrender body append viewel viewrender tasksbind refresh function tasks var els taskseach function task duplicate var view new taskview model task id listtask taskcid body append els perhaps dry approach function viewfortask task return new taskview model task id listtask taskcid tasksbind add function task var view viewfortask task render body append viewel still duplicate taskbind change viewrender tasksbind refresh function tasks var els taskseach function task var view viewfortask task render body append els last example still duplicating handle scenario need initialize sense new instance model via adhoc vs bulk insertion", "d": "10/2010"}, {"body": "initialize view using function way nt bind model way two places var taskview backboneviewextend initialize function thismodelbind change thisrender new taskview model task render bound task change event ideally functionality view model collection set regulated within class definition injected outside", "d": "10/2010"}, {"body": "hmm going back history see demos removed particular reasoning behind", "d": "10/2010"}, {"body": "nice getting started example big missing piece working one actively let leave ticket open get released answer specific questions global versus specific collections depends using documentcloud global collection called contains documents currently present page however document collection notes lazy loaded retrieve titles notes first document could write recommended way initially populating collections bootstrap json models know need initial page load lazyload rest ondemand perhaps using application rails partial called bootstraphtmlerb includes lines like one projectsrefresh lt projectstojson gt", "d": "10/2010"}, {"body": "also default models added automatically linked collection", "d": "10/2010"}, {"body": "great info thanks working demo", "d": "10/2010"}, {"body": "agree really want give backbone try client side webgame nt know start initial html homepage display short presentation forms sign insign forms created attach event handlers instantiate player sign playersession sign object top page happened submit form change interface display map yes getting started way things would useful backbone seems cool host example apps supposed built ones creating tool", "d": "10/2010"}, {"body": "saw link sample app using backbone sinatra", "d": "10/2010"}, {"body": "sample app would awesome took look sinatra one bgrins posted pretty simple something involving many views multiple collections models would great figuring things go love see best practice type tips showing documentcloud uses backbone", "d": "10/2010"}, {"body": "solid example app building something already want see approach lines intended used", "d": "10/2010"}, {"body": "know substitute links real example apps meantime added quick example models homepage hopefully least little helpful", "d": "10/2010"}, {"body": "also interested relationships handled eg restresponse follows thus document would tagsproperty also want collection tags currently loaded documents contain eg showing list tags could used filtering documents would require either manually parse entire json response populating collections map documents refresh create tags imagine tags would tens thousands loading certainly nt good choice due memory bandwidthlatency best way solve types nn relationships", "d": "10/2010"}, {"body": "one nice way solve things lazyloading nt need render tags documents defer loading open document need show initialize function thistags new tags ensuretags function callback thistagslength return callback thistagsfetch success callback callback actually renders tags approaches small number distinct tags large number documents many taggings nice model top level collection document refer tags nt map documents possible tags readytohand alternatively tens thousands distinct tags probably better download client instead autocomplete filtering tag names ajax request like would autocomplete words dictionary webapp example tag names come server turn real find useful course probably nt want show items paginating use represent current page tags documentcloud collection works searching entire archive tens thousands potential results stores displays ten time expanded mode thumbnail mode summarize best way solve relationships depends data good choices nested objects attributes containing arrays json objects referencing external collection databasestyle lazyloading collections upon first request caching data clientside using collection transparent proxy thin slice giant set models server", "d": "10/2010"}, {"body": "frekw something like sure would scale fit needs working well far", "d": "10/2010"}, {"body": "jashkenas well think first option need still would nt able way pretty without refresh callbacks etc collection tags exist loaded documents apptagsfind tags documentsfirst tags find referencing tagsinstance kyleslattery quite liking solution look", "d": "10/2010"}, {"body": "sure model one collection like either direct reference making copy", "d": "10/2010"}, {"body": "happy say finally really nice example app good tinkering might discussion afternoon closing ticket", "d": "10/2010"}, {"body": "awesome thanks", "d": "10/2010"}, {"body": "closed small typo", "d": "10/2010"}, {"body": "glad like thanks reporting issue", "d": "10/2010"}, {"body": "thanks note fixed master", "d": "10/2010"}, {"body": "yes absolutely issue talked internally want address currently specify function call become constructor subclass problem need call order things continue work example would look like course calling like really nasty alternative would propose convention method called model collection view think preferable function called", "d": "10/2010"}, {"body": "definitely like declare initialize function using call seems much simpler keeps users library needing understand internals used always use type thing real reason taking close look naming conventions may preferable since use instead instead best keep things consistent", "d": "10/2010"}, {"body": "think unless every member function like basejs find typing whole lot anyway may better hide nature javascript behind method first principles argument anyhow little framework work method like convenient majority time get inheritance chain gets little messy line example parent class sets method later child class nt need use functionality pain reconcile guess comes constructor initialize behavior stick state even view interested answers bc sure", "d": "10/2010"}, {"body": "yeah nt really consider issue inheritance guess pattern would handle gracefully exactly would handle case describe run constructors starting child class really sure best answer last question either long documented override constructor least way get around first thing wanted could nt", "d": "10/2010"}, {"body": "pushed patches add function called end constructor functions model collection view take look code docs looks groovy push point release evening ps overridden like called way would", "d": "10/2010"}, {"body": "realized came little strongly really meant point edge case watch pretty great idea thinking something like really kinda wrong something initialize anyhow would probably better go mixins anyway like backboneevents looks good", "d": "10/2010"}, {"body": "awesome pulled code works like charm understand inheritance bit correctly wanted superclass initialization code run likely would would need call inside nt want code run could either declare childclass would declare include call superclass seems like good tradeoff get rid boilerplate common case require uncommon complicated case already example project help docs working something nt know good example", "d": "10/2010"}, {"body": "yeah add initialize method nt call super class initialize method would inherited superclass otherwise", "d": "10/2010"}, {"body": "hi brian edit question format code correctly drop gist take look thanks", "d": "10/2010"}, {"body": "yeah updated", "d": "10/2010"}, {"body": "going wrong way render function refers probably want bind passing callback try changing line correct perhaps implement convenience binding functions beyond underscore provides", "d": "10/2010"}, {"body": "ah yeah never used underscore nt even think suggest change docs search modelbind change viewrender include bind call would really nice viewrender always called view context since unlikely would want anything else also docs search render handleevents section render function thanks quick response keep going demo let know else fail", "d": "10/2010"}, {"body": "thanks tips patch", "d": "10/2010"}, {"body": "afraid way native api works agree name less ideal patch improves documentation", "d": "10/2010"}, {"body": "ah course doc makes clear", "d": "10/2010"}]