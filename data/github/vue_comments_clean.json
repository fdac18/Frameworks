[{"body": "others want use direct access simply feels natural", "d": "10/2018"}, {"body": "posva ah cool definitely helps computed methods added well future", "d": "10/2018"}, {"body": "probably implement userland sun oct notifications githubcom wrote posva ah cool definitely helps computed methods added well future receiving mentioned reply email directly view github mute thread gt eduardo san martin morote", "d": "10/2018"}, {"body": "working expected see docs need manually set values case", "d": "10/2018"}, {"body": "thank searched lot", "d": "10/2018"}, {"body": "void element thus always include end tag", "d": "10/2018"}, {"body": "justineo used self closing tag example valid vue template avoid confusion updated example separate start end tag thanks", "d": "10/2018"}, {"body": "sandbox nt seem reflect ssr issue provide configured repo order reproduce problem", "d": "10/2018"}, {"body": "closing repro provided", "d": "10/2018"}, {"body": "sorry ca nt find similar site support ssr possible see issue simply adding snippet component way found issue space next mustache cases nt cause hydration issue could avoid issue even issue fixed test test test", "d": "10/2018"}, {"body": "use", "d": "10/2018"}, {"body": "watchers nt fire immediately design prevent watcher firing multiple times single tick queued run later need wait watchers done firing use", "d": "10/2018"}, {"body": "ok option could set force immediate dispatch even fired multiple times looked nt seem like would something could added near future nexttick trick wo nt work thanks", "d": "10/2018"}, {"body": "need something fire right away might better design use method call method need logic run", "d": "10/2018"}, {"body": "many properties watch nt want create method one watch system vue seemed good fit totally integrated app would extremelly useful use well ok bad try find another way thanks", "d": "10/2018"}, {"body": "generally watchers sideeffects lot properties depend one another may better results leveraging computed properties computed properties executed ondemand sounds like want careful use sideeffects", "d": "10/2018"}, {"body": "allright try path see actually use needs saw couple techniques use computed properties watchers even set system watch multiple properties single callback seems convoluted taste guess create custom system top vue thanks lot time", "d": "10/2018"}, {"body": "right feel free take conversation discord need help anything else take care", "d": "10/2018"}, {"body": "duplicate", "d": "10/2018"}, {"body": "kidding pulling wrong file", "d": "10/2018"}, {"body": "added new example list html entities including whitespace zero width characters decoded also noticed mathiasbynenshe two entries one without simicolon one simicolon might shot dark could influence result", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "10/2018"}, {"body": "need provide initial value variable passed vmodel also nt forget set every option", "d": "10/2018"}, {"body": "translated posva answer fiddle", "d": "10/2018"}, {"body": "right thank", "d": "10/2018"}, {"body": "happen know ow version node running node instance would trouble import syntax", "d": "10/2018"}, {"body": "boiled repro necessary thank", "d": "10/2018"}, {"body": "boiled repro necessary thank posva close", "d": "10/2018"}, {"body": "happen know ow version node running node instance would trouble import syntax geedew", "d": "10/2018"}, {"body": "boiled repro necessary", "d": "10/2018"}, {"body": "boiled repro necessary posva", "d": "10/2018"}, {"body": "boiled repo entire project", "d": "10/2018"}, {"body": "boiled repo entire project posva real project official vue demo updated dependencies move without changing source code see error need build project run go localhost want leave one link routing understand requirements", "d": "10/2018"}, {"body": "boiled means tye minimal code show problem follow vue ssr guide google thu oct ilya skorik notifications githubcom wrote boiled repo entire project posva receiving mentioned reply email directly view github mute thread gt eduardo san martin morote", "d": "10/2018"}, {"body": "nt use vif vshow component one", "d": "10/2018"}, {"body": "forbidden using one leave dom element remove addresses use case sometimes needing hide element perform transition time needing remove element also perform transition works expected enter transition nt work leave transition", "d": "10/2018"}, {"body": "seems something", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "10/2018"}, {"body": "tell webpack typescript aliases insert file project root content like js const path require path function resolve dir return pathjoin dirname dir moduleexports chainwebpack config gt configresolvealiasset libs resolve libs could obviously make exercise", "d": "10/2018"}, {"body": "leopiccionia thank", "d": "10/2018"}, {"body": "would suggest simple way register alternative vue observer implementation vue indeed implement new proxybased observer implementation independent package also implement alternative version uses getterssetters based reactivity system ie compatibility something like likely possible though details still consideration", "d": "10/2018"}, {"body": "fact interesting hooking underlying observe logic much exposed proxy means probably thing generally less something like every time x gets invalidated also call extra code gets rerun call well", "d": "10/2018"}, {"body": "vmodel works components remember syntax sugar around inputs vmodel implementation handles either implement use computed setter inside setter best option", "d": "10/2018"}, {"body": "duplicate", "d": "10/2018"}, {"body": "already saw discussed many times going happen however achieve user memoize helper lodash one", "d": "10/2018"}, {"body": "memoize work use memory least going changed would nice update docs clarify filters executed every rerender", "d": "10/2018"}, {"body": "need boiled repro memory leak reports", "d": "10/2018"}, {"body": "responded vue forum well maybe issue works using scoped slot", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "10/2018"}, {"body": "probably race condition get around setting", "d": "10/2018"}, {"body": "probably race condition get around setting good ideathank", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "10/2018"}, {"body": "work fyi lazy change event listener input change related enter pressed maybe browser testing emitting event maybe use form submit event want detect enter", "d": "9/2018"}, {"body": "work fyi lazy change event listener input change related enter pressed maybe browser testing emitting event maybe use form submit event want detect enter mean inputvalue vuedata vuedata updates well inputvalue still spite getter called vue input updates press enter", "d": "9/2018"}, {"body": "posva", "d": "9/2018"}, {"body": "makes every tool ecosystem outdated clear benefits use sublime text", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "nt make root app functional", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "setter applied assignment", "d": "9/2018"}, {"body": "application setter reactive array operation considered feature future", "d": "9/2018"}, {"body": "think could moment use method put side effect", "d": "9/2018"}, {"body": "code provided seems outdated actually vue prefers native bind already see", "d": "9/2018"}, {"body": "nt use vueextend mixin mixins plain objects", "d": "9/2018"}, {"body": "use typescript nt", "d": "9/2018"}, {"body": "provide example handle using typescript posva", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "still use file entry point component include script tag attribute pointing separated script file", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "next time take time add repro added", "d": "9/2018"}, {"body": "use chinese key", "d": "10/2018"}, {"body": "", "d": "10/2018"}, {"body": "babel actually used intemplate strings see sure anything changed regarding", "d": "9/2018"}, {"body": "make filters pure functions prevent said filter provided pure function", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "unwatching nexttick also work use btw", "d": "9/2018"}, {"body": "thanks interest looks like working saucelabs maybe updating generation svgs", "d": "9/2018"}, {"body": "thank much", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "adding fix problem", "d": "9/2018"}, {"body": "use nested transition info docs", "d": "9/2018"}, {"body": "nested apply transition classes node leaves dom would seem indicated docs default use transitions specified entering leaving mean bug understanding use", "d": "9/2018"}, {"body": "appear render dom first time already visible leaving nested transitions make sure durations applied correctly", "d": "9/2018"}, {"body": "take stackoverflow sandbox showing mean transition classes applied inner properly entering leaving", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "vue changed syntax please read documentation first thanks", "d": "9/2018"}, {"body": "keycode works fine firefox fixed", "d": "9/2018"}, {"body": "seems solve problem thanks still think lean towards may easier use less error prone posva could communicate feature request create another issue maybe make", "d": "10/2018"}, {"body": "tye code using version works ie", "d": "10/2018"}, {"body": "yes mean still support keycodes part automatic key modifiers use instead due reasoning explained", "d": "10/2018"}, {"body": "", "d": "9/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "9/2018"}, {"body": "bug getter needs touch vue knows track dependency try also mutation nt changing value", "d": "9/2018"}, {"body": "sirlancelot want achieve user change anything rolelist go another role changes reset go back original data right change anything also change storestate dont want preserve original data need deep clone", "d": "9/2018"}, {"body": "please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "error axios vue", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "taking", "d": "9/2018"}, {"body": "\u6dfb\u52a0\u552f\u4e00", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "sandbox seems working expected expected result", "d": "9/2018"}, {"body": "sandbox show props overrided one really overrided expected result two props overrided showing working maybe normal behavior vue currently said bug someone code camelcase use eslint vuerecommended", "d": "9/2018"}, {"body": "sorry bad fast copy pasting sandbox sandbox really show mean", "d": "9/2018"}, {"body": "fyi deep selector part vueloader please wait repro open issue", "d": "9/2018"}, {"body": "posva please read description close answered questions fyi deep selector part vueloader although maybe lessjs bug seems vueloader exactly vuecomponentcompilerutils maybe angular use familiar relays work since vueloader repo seems active report let users could find already many issues deep selector think wo nt offensive please wait repro open issue sorry busy build issue needed provide repo weekend probably nt need probably nt need bold imply necessary provide demo give wrong code chain already shows one line let create repo clone run show whether terminal sounds ridiculous rule convenient maintain repos also say needed based read links give rather close", "d": "9/2018"}, {"body": "always provide repro exceptions busy", "d": "9/2018"}, {"body": "reserved keyword js nt still work though", "d": "9/2018"}, {"body": "kaelwd said see language specification", "d": "9/2018"}, {"body": "ok see think also key es cause thx", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "works correctly chrome would advise go forum discord server details may something full code causing problem", "d": "9/2018"}, {"body": "functional component way go need one root element yes still ca nt multiple root elements regular component provided example order fix wrap template app single div error disappear", "d": "9/2018"}, {"body": "sure understand one root element template", "d": "9/2018"}, {"body": "test becomes two elements", "d": "9/2018"}, {"body": "ah see problematic since whole point avoid extra wrap break template functional component one solutions proposed issue locked solution third party library use undocumented attributes hacky according author throw error try import", "d": "9/2018"}, {"body": "multiple possible names nt look like good idea use case", "d": "9/2018"}, {"body": "reason lot libraries provide multiple aliases functions allows easier use certain applications specific use case building piece much larger app consumed casebycase basis particular slot name commonly used various ways sometimes abbreviated sometimes sometimes dropped word", "d": "9/2018"}, {"body": "imho essential keep consistent vocabulary across whole team especially larger apps let collaborators refer slot different names nt seem good practice think wo nt accept thanks", "d": "9/2018"}, {"body": "agree justineo also main concern", "d": "9/2018"}, {"body": "aight disagree nt good practice every application figured would ask thanks", "d": "9/2018"}, {"body": "mmh due rendering works want prevent select rendered therefore get updated value selected put component problem select element wo nt fire event mouse button released element replaced mouse pressed wo nt work fix would prevent replacing select element middle template possible", "d": "9/2018"}, {"body": "understand point replacing solving problem nt vmodel supposed sugar syntax", "d": "9/2018"}, {"body": "components reason working binding selected value select issue appear", "d": "9/2018"}, {"body": "seems odd whole template redrawn rather affected parts presumably good reason", "d": "9/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "9/2018"}, {"body": "would happily help implementation", "d": "9/2018"}, {"body": "even though vue used event bus one require flexible implementation bus use many packages even create", "d": "9/2018"}, {"body": "hi may try make improvement first contribution already situations duplicated keys warning would helped", "d": "9/2018"}, {"body": "course nobody working", "d": "9/2018"}, {"body": "added pull request new test case solution", "d": "10/2018"}, {"body": "said discord really bug related vue reusing dom elements rerendering state changes particular case select first two options reused reason ok might small bug remain bound initial values two ways fix bind values second select use distinct key explicitly tell vue reuse", "d": "9/2018"}, {"body": "use key attr perfect solution thank", "d": "9/2018"}, {"body": "components include script tags even vue errorwarning talking something else could please provide small repro", "d": "9/2018"}, {"body": "using vue ssr without intention hidrate surely use scripts styles templates see condition error appear repro", "d": "9/2018"}, {"body": "mmh true added", "d": "9/2018"}, {"body": "thanks", "d": "9/2018"}, {"body": "turns even disable escaping entirely still escapes quotes script", "d": "9/2018"}, {"body": "html var x var something rendered like html var x amp quot amp quot var amp quot something amp quot", "d": "9/2018"}, {"body": "guys thank help really appreciate pls note little next knowledge programming coding anyways sw code something cut paste share thanks nbaules get outlook ios slee woo notifications githubcom sent tuesday september pm vuejsvue cc ngerikl baules manual subject vuejsvue ssr escape raw nodes var x var something rendered like var x amp quot amp quot var amp quot something amp quot receiving subscribed thread reply email directly view github mute thread", "d": "9/2018"}, {"body": "time replacing disable escaping render valid script", "d": "9/2018"}, {"body": "unfortunately features added full rewrite would require huge changes vue could even lead breaking changes something considered next major version thought", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "see deep selectors", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "thank read linter trouble producing result need understand vfor happening first vifvelse happens per iteration wanted share scenario vforvif combination yielded particularly unexpected behavior vfor would applied velse element", "d": "9/2018"}, {"body": "working expected consistent vif applied vfor", "d": "9/2018"}, {"body": "clear bug reporting nt vfor happening vif vfor applied code outside iteration happening expected behavior", "d": "9/2018"}, {"body": "style guide explains avoided actual render function example", "d": "9/2018"}, {"body": "looks actual behaviour expected thanks behaviour answer issue expected order checks render render order starts iterating says checks render render pair happens times even confusing behaviour would introduced referencing last one iterated outside iteration imagine something yeah writing gives headache someone wrote style guide must experienced", "d": "9/2018"}, {"body": "vif first would nt able use current item vfor", "d": "9/2018"}, {"body": "confused disputing happen fine vif velse even confusing behaviour would introduced velse referencing last one iterated vif outside iteration imagine vif something actually think would less confusing since nt syntactically referencing element probably require syntax like supported admit confusing perhaps confusion resolved mutual exclusivity enforced vue", "d": "9/2018"}, {"body": "think workaround available moment set bundle renderer manually insert template proper order reading client manifest assume even using would result ordering issues", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "code isnot useful", "d": "9/2018"}, {"body": "dom api nothing vue method allowed called windows opened script using windowopen method", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "windowopener null windowopen self windowclose", "d": "9/2018"}, {"body": "anything", "d": "9/2018"}, {"body": "defining things prototype dangerous thing pretty much everything object js means every single object data computed collision comes nt add things prototype object really avoided cost js project", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "vworld hook functions using function syntax object function first one behavior correct called directive bound element also every time component updated explained docs", "d": "9/2018"}, {"body": "thank answer problem vhello vword instructions update data elements bound respective elements triggering update hook function vhello vword instructions think called template bound element updated", "d": "9/2018"}, {"body": "chenrenxing provide reproduction issue afraid nt quite understand problem", "d": "9/2018"}, {"body": "sqal first thank click change event trigger nt think hook function alert update vworld vhello instructions triggered", "d": "9/2018"}, {"body": "chenrenxing triggered click button change property value changed trigger update component template let see documenttion says directive update hook update called containing component vnode updated possibly children updated see code works expected notice click button second time hooks called nt changed therefore vue nt need rerender component", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "modify value coming slotscope parent could property object nt either read property remember using somewhere js generated statement similar would nt work scopedslot creating kind local variables exactly like", "d": "9/2018"}, {"body": "native dom works", "d": "9/2018"}, {"body": "except read route instance store instance respectively copy data one instance put new vue instance trying clear ask go forum discord server ask questions first need come back elaborated feature request regarding usecase right clear", "d": "9/2018"}, {"body": "posva sorry stupid issue noticed next time", "d": "9/2018"}, {"body": "stupid issue missing information feature request", "d": "9/2018"}, {"body": "reproduction link computed property two dependencies modified link computed property one dependency always changed component updated workaround use instead function expressions", "d": "9/2018"}, {"body": "inline function one recreated every time template renders therefore prop changes computed property needs evaluated every component hcysunyang suggested method would make work similar thing happens plain objects since function created inside function template compiled hoist prevent", "d": "9/2018"}, {"body": "makes sense solution works thanks", "d": "9/2018"}, {"body": "already fixed vuejsvue land master part vue", "d": "9/2018"}, {"body": "ok thanks", "d": "9/2018"}, {"body": "use", "d": "9/2018"}, {"body": "typo reproduction link", "d": "9/2018"}, {"body": "related whether component asynchronous nonasynchronous components also problem vue htmlparser process following entity content", "d": "9/2018"}, {"body": "added map update right also eacute example nt work manually entities correctly converted fixed", "d": "9/2018"}, {"body": "would better use something like package", "d": "9/2018"}, {"body": "actually vue already using nodejs compiletime ssr leveraging dom api browser side perform entity decoding seems attribute values decoded using mentioned sure intentional miss", "d": "9/2018"}, {"body": "change api read documentation understand means", "d": "9/2018"}, {"body": "svg casesensitive need use", "d": "9/2018"}, {"body": "kaelwd said use instead fix problem", "d": "9/2018"}, {"body": "works", "d": "9/2018"}, {"body": "result behaviour slightly different one indeed setting element property modify text check", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "could", "d": "9/2018"}, {"body": "meant", "d": "9/2018"}, {"body": "nt think change lot things could like properties etc would painful check everywhere enabled course think maybe implement somehow", "d": "9/2018"}, {"body": "yes would painful kill outcome type safe code tbh nullcheck painful use typescript check missing update issue pr thanks letting know", "d": "9/2018"}, {"body": "discussion pr would leave closed see version bring", "d": "9/2018"}, {"body": "declared prop component", "d": "9/2018"}, {"body": "duplicate", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "looks like nt know make sure date tools node npm create project vuecli run work fine problem vuecli go fix codepen empty", "d": "9/2018"}, {"body": "please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "9/2018"}, {"body": "using vbindsync literal object vbindsync title doctitle work many edge cases consider parsing complex expression like", "d": "9/2018"}, {"body": "simple data object like vbindsync mail test gmaicom would also falling criteria guess case get prop reactive best practice would reassign data object within created method reactive data object like thanks", "d": "9/2018"}, {"body": "pass object reactive pass", "d": "9/2018"}, {"body": "makes sense however passing data laravel blade template vue js logic compiled external js files loaded client side passing data directly data like wo nt work case need go longer route via passing data attribute html component reactive another option instead reassigning data created method would assign data within blade template window object reassign data like blade template js file however feel like clean approach", "d": "9/2018"}, {"body": "need put data", "d": "9/2018"}, {"body": "mrjingles case suggest using regular events instead another way event", "d": "9/2018"}, {"body": "javoski thanks input try till thought sync syntactic sugar update event", "d": "9/2018"}, {"body": "till thought sync syntactic sugar update event exactly something like", "d": "9/2018"}, {"body": "hmm ok seems choice choose one suggested approaches either reassign data object within created method assign globally window object within blade template reassign vue component thanks input", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "computed properties may made multiple attributes example person name consists first name last name bound vmodel split new value first name last name input value changes", "d": "9/2018"}, {"body": "option initialized option could nt access computed properties inside option", "d": "9/2018"}, {"body": "explain first group using vmodel computed work well", "d": "9/2018"}, {"body": "jsvoski try made formconfig computed still working", "d": "9/2018"}, {"body": "anyway fixed issue please see code change way use origin setter getter computer missing", "d": "9/2018"}, {"body": "think explicit rather undefined makes sense also look like invalid key", "d": "9/2018"}, {"body": "sounds good looking way conditionally prevent caching", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "implemented userland little effort wo nt add api encourage ask help forum stack overflow discord chat happy help", "d": "9/2018"}, {"body": "reproduction link malformed html needs inside root element", "d": "9/2018"}, {"body": "oh sorry fixed problem still exists", "d": "9/2018"}, {"body": "putting outside root element vue app", "d": "9/2018"}, {"body": "mhldtna nt look like link updated case still works html toggle message", "d": "9/2018"}, {"body": "javascript objects works object key contain hyphenspace unless inside quotes paste chrome console get syntaxerror", "d": "9/2018"}, {"body": "happening however happening trying transition property property works expected", "d": "9/2018"}, {"body": "strange nt matter transitioning important thing move class transition", "d": "9/2018"}, {"body": "unclear css transition nt triggering however transition seems using leave using enter try changing durations", "d": "9/2018"}, {"body": "thanks pointing issue posva apologies finding right transitioncb concern fluke discovered unused arg points cue provided solution suspected relevance stepping code noticed trick defined transition util file utilised transition module nests call remove transition class wondered timing issue since happens asynchronously user defined callback leads alternative appropriate solution thiswidth px enter el windowrequestanimationframe gt windowrequestanimationframe gt elstylemarginleft null leave el elstylemarginleft code brittle since arguably reliant happening internally suggest user defined hooks actually run within cb else dom change hook appears actually paint hence transition never occurs area code relevance", "d": "9/2018"}, {"body": "components depend sure right approach pretty sure saw documented maybe using dynamic import one components cc chrisvfritz", "d": "9/2018"}, {"body": "register component correctly first argument must string", "d": "9/2018"}, {"body": "go", "d": "9/2018"}, {"body": "posva thanks lot kaelwd first argument vuecomponent must string make example nt use vuecomponent use modules webpack", "d": "9/2018"}, {"body": "yeah kinda glossed bit lol still error repro though codesandbox usually better multicomponent examples like especially something caused webpack", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "pretty trivial mixins edit updated minmax single value", "d": "9/2018"}, {"body": "would achievable userland helper functions passed validator also see", "d": "9/2018"}, {"body": "vue seems work fine also use plain passing values component want cherrypick properties vue", "d": "9/2018"}, {"body": "thanks sirlancelot said already supported object", "d": "9/2018"}, {"body": "well embarrassing either totally missed docs completely forgot thanks", "d": "9/2018"}, {"body": "\u8bf7\u63d0\u4f9b\u53ef\u4ee5\u8fd0\u884c\u7684 demo", "d": "9/2018"}, {"body": "\u53d1\u73b0\u662f\u6211\u672c\u5730\u8c03\u8bd5\u9519\u4e86", "d": "9/2018"}, {"body": "expected vue reuse components case use attribute least one force vue reuse", "d": "9/2018"}, {"body": "see also implement components putting logic mixins importing different components based environment variable mycomponent folder mycomponentmobilevue mycomponentwebvue indexjs takes right component adds common logic export", "d": "9/2018"}, {"body": "share code try use ca nt helloworldindexts repo show", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "error says place script tag inside vue template probably want update app parts search ask forum discord server help", "d": "9/2018"}, {"body": "template interpolation vue twoway binding", "d": "9/2018"}, {"body": "\u5e0c\u671b\u5c24\u5927\u80fd\u770b\u5230\u7ed9\u70b9\u610f\u89c1", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "documentation", "d": "9/2018"}, {"body": "nt think circular references components self referenceed js proname import vue vue import component vueclasscomponent component name tree must defined props pro object export default class tree extends vue", "d": "9/2018"}, {"body": "two component circular reference turely one component use self", "d": "9/2018"}, {"body": "link points recursive components circular references components", "d": "9/2018"}, {"body": "get thank patience", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "maybe link piece component name section would helpful open issue documentation repo", "d": "9/2018"}, {"body": "hey time please use forum discord server stackoverflow questions guess could include vue something similar", "d": "9/2018"}, {"body": "time sorry found questions topic suggest", "d": "9/2018"}, {"body": "expected see properties start proxied vue instance may conflict vue internal properties api methods access vm dataproperty", "d": "9/2018"}, {"body": "found remove available found lines guile think nt rule conflict", "d": "9/2018"}, {"body": "conflict style guide still able use prefixed reactive property via", "d": "9/2018"}, {"body": "would componentid affix yield allowing every attribute behave class style would indeed expensive", "d": "9/2018"}, {"body": "think users would implement logic application layer anyway repeating vue done may need feature attributes accept spaceseparated tokens requires vue maintain list attributes think tradeoff worth considering still one problem users asks nt work claim special treatment passed attributes logic might accurate anymore", "d": "9/2018"}, {"body": "justineo definitely worth considering little bit frustrated confused applying class style difference props attributes little bit fuzzy well posva situation would yield something like passed string prop ideally would array might instead write componentid affix similar really think best way describing ideal api like class style work wonder calling providing utility functions something nt really seem fall within vuey realm things", "d": "9/2018"}, {"body": "expose stringifyclass somehow", "d": "9/2018"}, {"body": "kaelwd going ask code considering writing filter since understand hugely likely request would get priority buyin another approach might component level allow option set something like avoid unnecessary overhead", "d": "9/2018"}, {"body": "directive simple enough write syntax could similar suggested example vs similar could handle nonaria attrs well probably make longer", "d": "9/2018"}, {"body": "chinese doc", "d": "9/2018"}, {"body": "settimeout performance timeline shows massive calls caused array access vmodel familiar code perhaps pr would fix quick workaround maybe correct way case use object since using hash map direct access key rather array see", "d": "9/2018"}, {"body": "working thank", "d": "9/2018"}, {"body": "another solution worked oneway binding click event handler", "d": "9/2018"}, {"body": "please check documentation intended makes things easier opt option", "d": "9/2018"}, {"body": "thanks reply think better way default want use inheritance set think explicit means rather current representation", "d": "9/2018"}, {"body": "imo cases need developing reusable component certainly nt want enumerate possible html attributes manually eg etc cases want transparently output attributes root element defaults large chance would set loop properties output root element component btw also use dynamic object based value", "d": "9/2018"}, {"body": "justineo large chance would set true seems correct component related native tag almost form like inputbuttonvideoaudioselectformtable need feature components created libraries iview elementui internal teams need set developing components scenarios components developing applicationsapps default behavior little bad probably need set components use btw also use dynamic vbind object based value workaround seems correct needs us add judgement like need use problem solve another problem", "d": "9/2018"}, {"body": "seems correct component related native tag almost form like inputbuttonvideoaudioselectformtable need feature actually lot html global attributes may need example making accessible web app global attributes essential needs handcrafted differently scenario impossible encapsulate annotation inside component libraries workaround seems correct needs us add judgement like vbind foo prop need use problem solve another problem pass component options object filter object checking specific prop declared rendered component see sandbox", "d": "9/2018"}, {"body": "ok fine trade though seems codesandbox fussy use imo", "d": "9/2018"}, {"body": "intended prefer explicit things also allows vue setup reactivity system", "d": "9/2018"}, {"body": "maybe provide warning modifier nt exist except numbers", "d": "9/2018"}, {"body": "would help would useful consistent behaviour across browsers aka nothing unknownnonexisting modifiers although clear entirely within vue control", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "pick api nt exist nt even know function available js", "d": "9/2018"}, {"body": "posva hi get api source code inherits constructor api", "d": "9/2018"}, {"body": "var vuecomponent testa data return null methods saybye consolelog bye saytest consolelog hello test mixins created function thisa b function thissaytest mounted function consolelog thisab function consolelog aaa template var vm new vue el app", "d": "9/2018"}, {"body": "tbh fan feature css property accept multiple value types even unitless today nt mean stay unitless forever vice versa language evolves maybe someday unitless property take length units accept length units take unitless values property use accept unitless values later changed accept would never know true semantics behind number supported appending default", "d": "9/2018"}, {"body": "hi justineo see point think little bit exaggerating concern know css implementation relation units values css properties nt changed much versions take width height example ever since birth css nt changed much nt go unitless also certain properties would nt go unitless particularly properties involved like example far css maturity concerned pretty much sure wo nt seeing something like future anyway implemented reactjs much problem vue since definitely improve productivity", "d": "9/2018"}, {"body": "fan either means keep another list unitless properties keep date added runtime property name could dynamic", "d": "9/2018"}, {"body": "hi posva think necessarily need list unitless nonunitless properties could list commonly used properties real world scenarios like cases assign properties via javascript", "d": "9/2018"}, {"body": "unfortunately would nt consistent confusing users", "d": "9/2018"}, {"body": "hi posva yes right", "d": "9/2018"}, {"body": "actually slot scoped slot name case rendering slotsscoped slots template vue looks scoped slot specified name first slot providing anonymous slot scoped slot slot chance render see renderslotjs caveat seems missing docs think add cc chrisvfritz", "d": "9/2018"}, {"body": "emmmmm right render fine", "d": "9/2018"}, {"body": "use render functions actually picking exact slot render working", "d": "9/2018"}, {"body": "usecase behind", "d": "9/2018"}, {"body": "permit optimisation builds larger parameter object given event event actually received component emitted", "d": "9/2018"}, {"body": "explained parentchild events already think posva interested understanding use case requires emit listen event within component instead example calling method set component local data something ever come across far reason asking use case adding new api purpose fringe use case nt really anything would consider right understand prevalence severity use case new apifeature add", "d": "9/2018"}, {"body": "linusborg listening event component simply listening event programmatically call instead directly template event nt show events provided template something using ditojsadmin vuejs based framework build admin ui simple pojo schemas since much connecting happening code processing schema listen vents template since one exposed wondering nt", "d": "9/2018"}, {"body": "oh use case clear nt want component nt listening event building payload event expensive", "d": "9/2018"}, {"body": "since one exposed wondering nt nt exist vue something added lot people asked useful example pass listeners like pass props happens lot functional components hocs otoh one asked asked far nt think adding need api nobody wanted far since much connecting happening code processing schema listen vents template quick search nt bring use codebase github code search ignoring special chars helping care link one", "d": "9/2018"}, {"body": "mostly used outside schema events get installed framework uses internally current workaround", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "9/2018"}, {"body": "version reproduction link steps reproduce hello world hello worldssshello scoperow", "d": "9/2018"}, {"body": "note needed put source code sandbox component", "d": "9/2018"}, {"body": "never mutate props silencing error message definitely something want allow parent component renders lose modification may look like works right break soon parent component renders suppress warnings", "d": "9/2018"}, {"body": "yes know avoid said component sandbox case needs access update props nt care parent rerendering append developer livetesting component since parent loaded important thank answer", "d": "9/2018"}, {"body": "maybe better idea render sandbox left editable fields must update visible child component values child test component right needs updated editing sandbox fields fields generated sandbox parsing child component props", "d": "9/2018"}, {"body": "mutating props antipattern going add warning silence ignore works specific scenario though want ask questions please use forum discord server stackoverflow", "d": "9/2018"}, {"body": "ok find way thank time cheers beer", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "duplicate fyi shipped enhancement caused regression included", "d": "9/2018"}, {"body": "clearly stated doc find trying compose templates using vhtml try rethink solution using components instead plus breaking change considered moment", "d": "9/2018"}, {"body": "object constructor function", "d": "9/2018"}, {"body": "thanks reply javoski replace simple object inside component empty object received prop still well filled take look screenshot please", "d": "9/2018"}, {"body": "hook called prop changed use computed property", "d": "9/2018"}, {"body": "thank help javoski used watcher prop value changes value update", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "think make issue vuecli sorry", "d": "9/2018"}, {"body": "erwinwahyura looks like project configured know check webpack config real dependencies correctly installed", "d": "9/2018"}, {"body": "please open corresponding repo vuejsorg repo", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "9/2018"}, {"body": "hard type", "d": "9/2018"}, {"body": "custom components support bindings need define prop event handler missing reproduction ie following suggestions doc", "d": "9/2018"}, {"body": "hi justineo added event handler sandbox nt work check sandbox", "d": "9/2018"}, {"body": "also need declare prop custom component", "d": "9/2018"}, {"body": "nt work either", "d": "9/2018"}, {"body": "working", "d": "9/2018"}, {"body": "option selected using google chrome btw", "d": "9/2018"}, {"body": "chrome", "d": "9/2018"}, {"body": "open private tab works thank", "d": "9/2018"}, {"body": "submit pr fix issue well thanks", "d": "8/2018"}, {"body": "pr submitted", "d": "9/2018"}, {"body": "hi linusborg see added labels issue anything else need kick review process referenced pull request thanks", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "plz take look", "d": "9/2018"}, {"body": "note dug issue use vshows instead vif else works transitiongroup tag works even vifelse however practical case components transitiongroup children works", "d": "8/2018"}, {"body": "also thought nesting transitiongroups divs apply vifelse get error added code codepen", "d": "8/2018"}, {"body": "add attribute well remove error error nt appear indeed", "d": "8/2018"}, {"body": "posva thank workaround", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "imho think docs clear enough lookup good behavior makes debugging easier want add property want vue treat directive using data attributes instead", "d": "8/2018"}, {"body": "maybe would make sense resolve directive show error like value", "d": "8/2018"}, {"body": "posva guess could work", "d": "8/2018"}, {"body": "duplicate", "d": "8/2018"}, {"body": "came open issue contenteditable couple states contenteditable reference", "d": "8/2018"}, {"body": "possible sometimes may want use index key really think open pr docs add note transitiongroup said issue", "d": "8/2018"}, {"body": "would never want use index key transition causes error demonstrated something wrong example showing error", "d": "8/2018"}, {"body": "yeah right nt think makes sense use index scenario transitiongroup sure easy add warning though", "d": "8/2018"}, {"body": "get point free time least look code able add kind thing perhaps dev object tracks features used render ie transition used index found ie template render would tracked well conflicts could found features used know easy say kind thing whole thing actually build high level dev theorize", "d": "8/2018"}, {"body": "tested using latest version vue count deps goes back array emptied memory leak", "d": "8/2018"}, {"body": "oh ok sorry misinterpreted deps array purpose", "d": "8/2018"}, {"body": "function returned stop rest code executing", "d": "8/2018"}, {"body": "fan adding prop argument think return string validator function let vue treat error counter proposal", "d": "8/2018"}, {"body": "removing feature breaking change wo nt reduce much packet size", "d": "8/2018"}, {"body": "talking components indeed explained different input vmodel please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "8/2018"}, {"body": "posva documentation talk per report input model immediately updated android typing plenty issues reported vue regarding specific use case already either documentation needs updated reflect vue internally handle better automatically picks correct way update element based input type nt particularly sound correct", "d": "8/2018"}, {"body": "search quite bit also agree least docs could updated unexpected inconsistency example text input docs reproduction link behaves differently androidchrome compared desktopchrome record angular issue regardless composition mode", "d": "8/2018"}, {"body": "see docs say languages require ime chinese japanese korean etc notice vmodel get updated ime composition want cater updates well use input event instead also happening english languages nt require ime ime autocompleteword suggestions disabling gives desired behaviour", "d": "8/2018"}, {"body": "made pr add documentation", "d": "9/2018"}, {"body": "events firing correctly keys removed object normal", "d": "8/2018"}, {"body": "seems intentional guess ca nt accidentally access computed properties via method edit", "d": "8/2018"}, {"body": "nt understand bad would happen access computed properties via method", "d": "8/2018"}, {"body": "nt exist yet", "d": "8/2018"}, {"body": "uh nt use property use function exist may turn instead native vue still friendly typescript maybe proficient vue anyway thanks helping", "d": "8/2018"}, {"body": "yeah know bit silly guess might done", "d": "8/2018"}, {"body": "vue typescript way access methods function", "d": "9/2018"}, {"body": "since appears typing issue runtime issue ugly workaround available cast type additionally omit store reference method executable outside current scope eg pass child via prop", "d": "10/2018"}, {"body": "vue better type declaration support typescript seems broken", "d": "10/2018"}, {"body": "hi please make sure follow issue reporting guidelines opening issue provide valid repro use thanks", "d": "8/2018"}, {"body": "type union type use type means function return vue constructor component options object think use concrete type return type", "d": "8/2018"}, {"body": "function loads components via webpacks requirecontext also esmodule type async comps hints component also vuecomponent overload foreach member type component union think problem typescript able check correctly", "d": "8/2018"}, {"body": "another indicator ts problem following works", "d": "8/2018"}, {"body": "well valid component", "d": "8/2018"}, {"body": "ofc point ts somehow finds correct overload ts type component typeof vue componentoptions functionalcomponentoptions const first const firstcomponent component first vuecomponent first first ok vuecomponent firstcomponent firstcomponent ok const second functional true const secondcomponent component second vuecomponent second second ok vuecomponent secondcomponent secondcomponent ok const third vueextend const thirdcomponent component third vuecomponent thrid third ok vuecomponent thirdcomponent thirdcomponent ok declare function getcomponent component const final component getcomponent vuecomponent final final type error typescript problem ts seems like doesnt allow multiple overloads match final case requiring", "d": "8/2018"}, {"body": "plain typescript example demonstrating problem", "d": "8/2018"}, {"body": "see use case sure union type sometimes passes overload replace fallback overload method type", "d": "8/2018"}, {"body": "expected key controls vue reuses elementscomponents therefore crucial transitiongroup read guide", "d": "8/2018"}, {"body": "respect time please understand nt put bug report without looking answer first please respectful time nt dismissive found new error well search see example end search documentation searched documentation entirely either bug undocumented documented reasonable place search index transition guide looked every single instance could find read guide know unreasonable usually ask seriously looked everything even searching online found nothing topic provide link documentation search results index shows times transitions guide mention effects index transitions transitions section index shows times list rendering guide mention transitions index shows times api docs none reference context transitiongroup transitions updated example new error found found one example cookbook using index key fails worse example instead last item animating entire block fades inout example", "d": "8/2018"}, {"body": "using index key default behaviour propositions notes add docs open pull request proposal vuejsorg repository maybe transitiongroup page right place last example keys changing vue replacing every single li remember use forum discord server get quick feedback questions", "d": "8/2018"}, {"body": "megacromulent vue perspective used identify unique items list let give example assume rendered list array using keyed items indexes remove list telling vue item item item removed transition occurs elementcomponent got addedremovedshowedhide view last item transitioned", "d": "8/2018"}, {"body": "justineo thanks explanation certainly clears errors happening results look like errors documented anywhere could find easily found posva open pull request proposal vuejsorg repository nt even consider idea never done pr hope nt make mess thanks guys edit error vuejsorg cookbook", "d": "8/2018"}, {"body": "also experiencing issue switched different keys works megacromulent also never done pr would interested collaborating want second pair eyes", "d": "10/2018"}, {"body": "hey thanks offer thing would put documentation nt js skills contribute library like vuejs thanks offer though wed oct david golden notifications githubcom wrote also experiencing issue switched different keys works megacromulent also never done pr would interested collaborating want second pair eyes receiving mentioned reply email directly view github mute thread", "d": "10/2018"}, {"body": "really nt preference implementation though arrow function would cleanest maybe splat operators could work idk", "d": "8/2018"}, {"body": "actually already computed property use attribute", "d": "8/2018"}, {"body": "awesome", "d": "8/2018"}, {"body": "posva please update code add return line", "d": "8/2018"}, {"body": "intentional", "d": "8/2018"}, {"body": "well remove arrow fn get errors found gt without", "d": "8/2018"}, {"body": "returns object fine though", "d": "8/2018"}, {"body": "works without arrow function declare property method computed property", "d": "8/2018"}, {"body": "need use modifier bound dynamic component done automatically binding input", "d": "8/2018"}, {"body": "thanks clarification", "d": "8/2018"}, {"body": "hi please make sure follow issue reporting guidelines opening issue list steps reproduce important make sure clean unecessary dependencies like vuex also provide simple jsfiddle codesandbox instead github repo using old version cli would make things much easier us test thanks", "d": "8/2018"}, {"body": "thanks version vue upgraded works well", "d": "8/2018"}, {"body": "nt object", "d": "8/2018"}, {"body": "using number key object recommended actual case identifier type number appreciate use number object", "d": "8/2018"}, {"body": "sure allowing implicit type conversion typings think enough convert id string using constructor", "d": "8/2018"}, {"body": "js conversion implicit want use strict typing cast number string js implicitly access thing said typescript allows without warning think support", "d": "8/2018"}, {"body": "note inverse true arrays ts const record false true const b boolean b false element implicitly type index expression type number b true could also go fully strict instead might annoy people ts declare function set object key k value const c record const boolean const e foo bar baz foo bar set c false set c false nope set c string nope set false nope set false set string nope set e false nope set e false nope set e foo string nope set e bar baz nope set e foo baz", "d": "8/2018"}, {"body": "thank comments fully understand behavior object also agree better use constructor since access object using number implicit use string project well ok close issue", "d": "8/2018"}, {"body": "nt close may add support", "d": "8/2018"}, {"body": "ok", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "expected behaviour convenience prop supposed boolean either present absent therefore true false", "d": "8/2018"}, {"body": "reason velocity calling callback pretty much question disguised issue want one visible make sure put everything transition change mode please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "8/2018"}, {"body": "hello eduardo look wrote forum nobody answer check use greensock gsap mode outin problem still next animation start previous end please give minute work time little help", "d": "8/2018"}, {"body": "please check", "d": "8/2018"}, {"body": "thank link apparently possible using laravel suggestions", "d": "8/2018"}, {"body": "pretty sure something like webpack laravel laravelmix maybe anyway google forums discord friends", "d": "8/2018"}, {"body": "thanks posva tried vue discord said try fix made worse guys suggested post thing laravel uses already uses ca nt upgraded guess going try work make use use standalone compiler", "d": "8/2018"}, {"body": "support functional components already making afaik mentioned vuejs sprint summary lately", "d": "8/2018"}, {"body": "believe already tracked akryum somewhere else akryum reopen really want track sides", "d": "8/2018"}, {"body": "devtools functional components displayed need merge able display props", "d": "8/2018"}, {"body": "could also lt component vif foo foo gt component found produce result", "d": "8/2018"}, {"body": "better achieved userland render function could also make sure component exists computed property returning component fallback example although nt know usecase behind seems really weird dynamic component use nonexistent component", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "\u624b\u52a8\u622a\u53d6\u4e0d\u5c31\u597d\u4e86", "d": "8/2018"}, {"body": "nt show chrome either windows adding fixes chrome firefox edge", "d": "8/2018"}, {"body": "weird works official build windows", "d": "8/2018"}, {"body": "seems related element removed dom", "d": "8/2018"}, {"body": "related vue also vue moment", "d": "8/2018"}, {"body": "thanks memory leak since properties arbitrarily added object control events added bus btw cleanup creating new object", "d": "8/2018"}, {"body": "hmm nt issue nt completely clean created", "d": "8/2018"}, {"body": "imagine would break quite things want default value pass instead", "d": "8/2018"}, {"body": "kaelwd said", "d": "8/2018"}, {"body": "kaelwd thanks give example", "d": "8/2018"}, {"body": "convert values pass prop nt produce nullable values", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "kaelwd thank much", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "\u4e00\u822c\u7528boolean\u7c7b\u578b\u53ef\u4ee5\u89e3\u51b3\u4f60\u7684\u9700\u6c42\u5427", "d": "8/2018"}, {"body": "already accept null", "d": "8/2018"}, {"body": "kaelwd easy know debuged asserttype function jsfiddle link snap", "d": "8/2018"}, {"body": "guess get githubbing phone", "d": "8/2018"}, {"body": "want accept null make either nonrequired use validator ps next time take time create small fiddle help us", "d": "8/2018"}, {"body": "posva must required use validator wrote knew validator one solution verbose think feature request", "d": "8/2018"}, {"body": "validator fine remeber prop validation happens development", "d": "8/2018"}, {"body": "nt sync inner value prop updates see correct example using nested", "d": "8/2018"}, {"body": "vuex meant apps libraries use injectprovide shared object sharing data lib", "d": "8/2018"}, {"body": "posva thanks advice ultimately issue using plugin depends public api provided vue successfully install subclass vue plugin happens vuex nt matter discussion could plugin maybe wants silence logging set public api intended usage unit test vue prove point able install plugin subclass without polluting root", "d": "8/2018"}, {"body": "nt understand explicitly talking vuex problem", "d": "8/2018"}, {"body": "talking fact properly subclass vue including static props making required know implementation details plugin implemented order use subclasses vue simple reproducer using hello world plugin made demonstrate", "d": "8/2018"}, {"body": "honestly nt understand wrote anything actionable maybe could use forum discord server discuss come back different formulation", "d": "8/2018"}, {"body": "related directly vue repro", "d": "8/2018"}, {"body": "please provide reproduction link source code probably caused facebook app browser webview supporting javascript features using make sure correctly set babel transpile javascript support older browserwebviews", "d": "8/2018"}, {"body": "thank response link website check websites used vue found issue", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "vue currently provides wellknown limitations probably addressed upcoming release see fits needs", "d": "8/2018"}, {"body": "actually deal vueloader data specifically key passed implicitly template could open issue nt exist yet writing js usually data contains attribute passed parent", "d": "8/2018"}, {"body": "believe belongs vetur repo", "d": "8/2018"}, {"body": "nothing related vue core", "d": "8/2018"}, {"body": "please read instructions provided issue helper issue list reserved exclusively bug reports feature requests means accept usage questions open issue conform requirements closed immediately strict usage questions please use following resources read docs watch video tutorials ask forums ask chat look ask questions stack overflow also try search issue may already answered even fixed development branch however find old closed issue still persists latest version open new issue using form instead commenting old issue", "d": "8/2018"}, {"body": "benefit asynchronous server rendering offer argue little primary reason async vue internal scheduler works async well making completely synchronous process without altering behaviour app nt really possible incomplete knowlde internals happy corrected making rendertostring function async guarantees oldest requests processed nt highest priority bad freely admit expert http request performance etc bad", "d": "8/2018"}, {"body": "possible see", "d": "8/2018"}, {"body": "typescript bug also removes error", "d": "8/2018"}, {"body": "kaelwd works", "d": "8/2018"}, {"body": "\u30c4 type signature idea try reproduce without vue open issue", "d": "8/2018"}, {"body": "codesandnbox image loaded nt exist error coming webpack btw makes sense closing webpack question unrelated vue import working make sure getting right thing", "d": "8/2018"}, {"body": "posva like said description codesandbox link fully working look gitlab repo original code add svgs assetsfalight make work already posted another issue webpack community", "d": "8/2018"}, {"body": "oh nevermind import svg used component however put data pass directive", "d": "8/2018"}, {"body": "posva know like described use svgloader webpack loader possible use component ca nt problem", "d": "8/2018"}, {"body": "posva tried using data without loader got error", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "repro work encapsulated behaviour component nt manipulate dom manipulated vue modifying even worse touching parent component please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "8/2018"}, {"body": "maybe wrong way operation two popular vue ui frameworks bug encountered accidentally triggered using iview modal elementui dialog component lifecycle mounted iview modal component directive scenarios operations may necessary avoid writing", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "truth need build anything specific use axios file export functions js import axios axios const contacts axioscreate baseurl export function getcontacts q return contacts get params q response gt responsedata export function getcontact id return contactsget id response gt responsedata framework agnostic allows easily mock things tests well", "d": "8/2018"}, {"body": "benhayat also always make something part vue adding instance property even official example access axios", "d": "8/2018"}, {"body": "thanks guys", "d": "8/2018"}, {"body": "see", "d": "8/2018"}, {"body": "prefixes apply necessary next time please provide steps reproduce like element look repro really complex", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "u need help go reactnative side ask rules creating issues", "d": "8/2018"}, {"body": "weex vue separate projects also feel free use whatever like nt really care", "d": "8/2018"}, {"body": "u sure somebody bad knowing proj search", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "\u9ebb\u70e6\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684 github", "d": "8/2018"}, {"body": "probably typo", "d": "8/2018"}, {"body": "posva say typo created fix", "d": "8/2018"}, {"body": "sodatea \u9ebb\u70e6\u5e2e\u5fd9\u770b\u4e00\u4e0b", "d": "8/2018"}, {"body": "footer \u7c7b\u6ca1\u6709\u52a0 \u88c5\u9970\u5668", "d": "8/2018"}, {"body": "sodatea \u8fd8\u8981\u52a0\u4e00\u4e2acomponent", "d": "8/2018"}, {"body": "sodatea", "d": "8/2018"}, {"body": "thanks proposal usually functions come methods arrow functions defined computed property function defined outside quite uncommon get much less could even achieved helper adapt specific needs times want use methods fat arrows besides prefer explicit behaviours app preferable", "d": "8/2018"}, {"body": "expected array modified", "d": "8/2018"}, {"body": "need add well property realising documented create pr", "d": "8/2018"}, {"body": "got", "d": "10/2018"}, {"body": "duplicate pr", "d": "8/2018"}, {"body": "thanks", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "limitation put debugger new vue get see vue receives template limitation nt exist string templates vue files", "d": "8/2018"}, {"body": "posva jacekkarczmarczyk thanks understanded", "d": "8/2018"}, {"body": "probably related closing duplicate however modifies original array create new one first work", "d": "8/2018"}, {"body": "probably looking arguments", "d": "8/2018"}, {"body": "unfortunately said looking something like vbind vbind vbind use props directives", "d": "8/2018"}, {"body": "need much dynamicity probably time use render functions js", "d": "8/2018"}, {"body": "ca nt reproduce ios amp webview app", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "eem sure happen kind website content completely provided users set whole href attribute instead similar case makes sense sanitize data applications one would never write link whole url coming nonverified user content adding special handling would negative impact performance specific use case people need developer responsibility say docs pretty much explicitly writing code leads xss nt see anyone would write code besides testing purposes think would make sense either add entry cookbook page xss docs cc chrisvfritz sdras", "d": "8/2018"}, {"body": "posva agreed possible performance impact try xss filter check compile phase meanwhile detailed xss explanation docs could great", "d": "8/2018"}, {"body": "posva opengg working security page speak", "d": "8/2018"}, {"body": "btw far upcoming security guide regarding specific issue url like potential security issue url sanitized prevent javascript execution using libraries sanitizeurl help note ever url sanitization frontend already security issue userprovided urls always sanitized backend even saved database problem avoided every client connecting api including native mobile apps unfortunately vue also help guarantee userprovided urls lead safe destinations feedback welcome", "d": "8/2018"}, {"body": "chrisvfritz mention maybe also occur security checks may impact performance possible checking development mode warning people potential xss vulnerabilities detected", "d": "8/2018"}, {"body": "really possible add warning development mode know data untrusted could warn find something like data means developer already aware see vulnerability closing since chris working documentation", "d": "8/2018"}, {"body": "opengg mention event attributes like", "d": "8/2018"}, {"body": "thanks interesting however nothing changes regarding existing arguments event always bound single elementcomponent looks like need pass function scoped slot let parent use function example unclear could done like could clarify exactly problematic trying write template", "d": "8/2018"}, {"body": "posva bare bones git repo trying suggestion using still ca nt get work wrong hoping achieve datefilter component emit event two dates selected start end user clicks apply button nt example datatable component listen event call server request new data date filters edit also apologize creating example renamed datepicker datefilter idea srcappvue import datatable componentsdatatablevue import datefilter componentsdatefiltervue export default name app components datatable datefilter srccomponentsdatatablevue table cell table cell table cell export default data return methods querydata eslintdisablenextline consolelog querying data server calling api endpoint etc srccomponentsdatefiltervue select export default data return", "d": "8/2018"}, {"body": "yeah solved using function check repository right could help codesandbox", "d": "8/2018"}, {"body": "posva sure understand solved tried recommended could nt get work even said response reopen get working solution", "d": "8/2018"}, {"body": "asking question closed asked forums discord server however offer help provide codesandbox", "d": "8/2018"}, {"body": "rationale allowing vue components composed almost like html elements yet able listen events way crux request create html elements vue components nest manner html also allow events work way javascript three issues still nt understand anything single multiple components slot html listen events number child elements ie works link link documentqueryselector div addeventlistener click function e epreventdefault consolelog clicked yet vue compose elements way ca nt listen event emitted way ie ca nt listen event emitted relationship still clearly since workarounds called listening parent still tightly couples two stopping us bubbling event slot parent keeping mental model events line html javascript codesandbox help would appreciated", "d": "8/2018"}, {"body": "posva open new ticket request request vue match event bubbling composition html since already similar", "d": "8/2018"}, {"body": "please nt open new issue precisely nt bubbling implicit leads problems mon aug ian notifications githubcom wrote posva open new ticket request request vue match event bubbling composition html since already similar receiving mentioned reply email directly view github mute thread gt eduardo san martin morote", "d": "8/2018"}, {"body": "posva help understand mean precisely nt bubbling implicit nt implicit mean bubbling happening level", "d": "8/2018"}, {"body": "posva hey guys anything could even link understand meaning seen event bubbling issue pop github stackoverflow vue forum spent days searching explanation finding anything makes sense precisely nt bubbling implicit leads problems mean", "d": "8/2018"}, {"body": "looking feature like", "d": "8/2018"}, {"body": "theianjohnson implicit refers default behavior proactively asked opposed explicit many cases would lead confusions gotchas eg javascript implicitly type conversions use operator true generally considered design flaw", "d": "8/2018"}, {"body": "fnlctrl appreciate explanation relate event bubbling listening vue specifically firing event component nt pretty explicit", "d": "8/2018"}, {"body": "posva fnlctrl still concrete answer event bubbling vue components nt act line html event bubbling expanding implicit problems leads", "d": "9/2018"}, {"body": "hey theianjohnson use provideinject provide event handlers inside component later injected component child components chooses inject methods might solution asked least create strong coupling like proper documentation pretty easy manage example event bubbling events caught parent bubble root component reason another handler event name trouble makes also much harder see explicit connections especially component tree changes component longer ancestorchild specific component", "d": "10/2018"}, {"body": "hey theianjohnson nt know ideal works appvue helloworldvue vue export default mounted const slot slotsdefault switch slotcomponentoptionstag case embedded slotcomponentinstance shout gt consolelog aw yeah break default break embeddedvue", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "let keep progress one place ts check would need add specific behaviour plugin typescript much vue", "d": "8/2018"}, {"body": "return value async function instance", "d": "8/2018"}, {"body": "hi return value async function instance use template modified fiddle suppose work", "d": "8/2018"}, {"body": "may want use vuepromised things like", "d": "8/2018"}, {"body": "justineo code work static given example data loops call method mounted", "d": "8/2018"}, {"body": "sodatea promise still returns empty object", "d": "8/2018"}, {"body": "help please sodatea could please ask issue creator issue resolved closing issue", "d": "8/2018"}, {"body": "filing bug report actually expected behavior issue closed maintainers nt ask permission justineo code work str static given example data loops items call method mounted loop make multiple network requests maintain resolved value local data array something vue take care decide organize application logic", "d": "8/2018"}, {"body": "javascript syntactic two snippets basically identical passing instance vue template engine calls underlyingly template interpolations get stated issue helper page issue list reserved exclusively bug reports feature requests usage questions please use following resources read docs watch video tutorials ask forums ask chat look ask questions stack overflow", "d": "8/2018"}, {"body": "sometimes using key intentional said docs thanks interest think example fine like warning includes link docs quite opposite confusing confusing would read x undefined undefined function", "d": "8/2018"}, {"body": "sometimes using key intentional said docs yeah right thanks fast checking", "d": "8/2018"}, {"body": "see", "d": "8/2018"}, {"body": "thanks pointing could nt find updated fiddle showcasing use cases really quite gotcha though feels little bit unfortunate transitions supposed optional use case highly decomposed components", "d": "8/2018"}, {"body": "also put transition inside component wrap root element prop provided", "d": "8/2018"}, {"body": "vuerelated event fired input element form element nt bubble works expected html submit export default name helloworld data gt msg validated yet methods handlesubmit thismsg submit event fired handleinvalid thismsg invalid event fired", "d": "8/2018"}, {"body": "true manually addeventlistener invalid form element works correctly", "d": "8/2018"}, {"body": "link vanilla working javascript", "d": "8/2018"}, {"body": "missing vue version", "d": "8/2018"}, {"body": "yeah posva beat works capture since event nt bubble thought solution first", "d": "8/2018"}, {"body": "perfect working expected thank", "d": "8/2018"}, {"body": "normal release fixed security bug affect ssr thus included client version vue", "d": "8/2018"}, {"body": "ok thanks sorry noise", "d": "8/2018"}, {"body": "\u8fd9\u662f\u4f60\u8fc7\u53bb\u534a\u5c0f\u65f6\u5f00\u7684\u7b2c\u4e09\u4e2a\u76f8\u540c issue \u8bf7\u4e0d\u8981\u80e1\u4e71\u586b\u5199 issue \u53cd\u9988\u8bf7\u5e26\u4e0a\u53ef\u4ee5\u590d\u73b0\u7684 demo", "d": "8/2018"}, {"body": "nt supply repro link description incredibly nonhelpful probably either vuejsvuerouter", "d": "8/2018"}, {"body": "\u8bf7\u4e0d\u8981\u80e1\u4e71\u586b\u5199 issue issue helper", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "hey ca nt really help without runnable code look", "d": "8/2018"}, {"body": "know show firefox safari well znck akryum possible always display remote devtools something else need changed", "d": "8/2018"}, {"body": "take", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "already party tools like vueplay", "d": "8/2018"}, {"body": "work try put seconds transition see yes one element tag else need use works way example bind value element like use instead vif ca nt render elements time vshow technically even never going happen condition", "d": "8/2018"}, {"body": "maxirozay said", "d": "8/2018"}, {"body": "hi maxirozay posva stated observed used vif mode specified clearly moment one element exists place trying use vshow two different custom components simple example using transitiongroup apparent drawback layout clashing mode attribute supported reason trying use vshow use vshow prevent component destroyed keep component state tried use keepalive seems keepalive designed case make sense feature request support vshow suggestion keepalive needs sincerely", "d": "8/2018"}, {"body": "nt see keepalive would nt work would rather discussion forum discord server sure find way", "d": "8/2018"}, {"body": "posva thank look case", "d": "8/2018"}, {"body": "nothing deal vue please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "8/2018"}, {"body": "closed", "d": "8/2018"}, {"body": "\u8bf7\u67e5\u4e00\u4e0b", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "please see", "d": "8/2018"}, {"body": "yes thread refers file found undocumented development file latest version commitment part standard builds heart feature request also almost year ago last comment june thread looks dead also notice url provided implies file version build trust spend time testing long term expectations glad see topic discussed evan hope makes esm build official", "d": "8/2018"}, {"body": "pr still open", "d": "8/2018"}, {"body": "sure trying snarky dismissive feel way recommendations could help ensure feature gets attention often times reason feature produced people ask hate see die legitimate request dismissed without discussion feedback", "d": "8/2018"}, {"body": "going land", "d": "8/2018"}, {"body": "great news thank taking time reply evan guess ca nt get anymore authoritative response great day", "d": "8/2018"}, {"body": "remove vue demo still get result self closing tags xhtml syntax outdated never use see", "d": "8/2018"}, {"body": "please read following things make type inference works set compiler option annotate return type computed properties", "d": "8/2018"}, {"body": "thank", "d": "8/2018"}, {"body": "happens input bind text value text value never changes change keydown method like keydown keyevent thistext keyeventkey", "d": "8/2018"}, {"body": "guess attribute changes change invoke render element wanted attribute change vue well done demand demo", "d": "8/2018"}, {"body": "expected changing variable triggers rerender passed input vue set renders want keep changes use another property", "d": "8/2018"}, {"body": "expected need use unique identifier otherwise vue reuse different elements index change remove element array", "d": "8/2018"}, {"body": "normal naming comes name use option property used places like devtools", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "already works asking vueloader handling transformation done vueloader remember askedadded time ago", "d": "8/2018"}, {"body": "posva hmm tried adding appropriate buble vueloader options config looks like still ca nt make work", "d": "8/2018"}, {"body": "hi posva sorry pinging closed topic quickly feel nt get proper answer question spent half day trying solve problem tweaking vueloader config without success tell wrong functionality even supported sfc appreciate help time matter", "d": "8/2018"}, {"body": "recall correctly nt transpiled sfc works browsers support time remember seeing feature request vueloader yet could nt find", "d": "8/2018"}, {"body": "also ca nt find anything vueloader repo move discussions vueloader repo pin feature request label", "d": "8/2018"}, {"body": "see", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "work nt provide repro please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "8/2018"}, {"body": "works shows warning chrome console", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "screenshot error message reproduction", "d": "8/2018"}, {"body": "try reproduce jsfiddle behaves difference jsfiddle local pc nt show warning info jsfiddle", "d": "8/2018"}, {"body": "probably something different code please use forum discord chat", "d": "8/2018"}, {"body": "add reproducible reason think happens vue trying reuse reuse selected property get brought along", "d": "8/2018"}, {"body": "expected nt happen bind attribute use also use key nt need host variable", "d": "8/2018"}, {"body": "also anybody know html escape function vue source would like try modifying project mine", "d": "8/2018"}, {"body": "html escape talking similar keep mind js escapes need unescape specific set characters method pass may interested forum discord server stackoverflow get faster answers", "d": "8/2018"}, {"body": "posva know already know nt cut trying trying keep codebases clean neat without using hacks workarounds using highly inelegant especially considering lack features compared mustache expressions since nt want use could possibly point codebase html gets escaped way build version escape function", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "well diving looks like setting property using js breaks using csstext stylewebkitbackgroundclip works setting find reported bug webkit tracker", "d": "8/2018"}, {"body": "found issue list issue create issue", "d": "8/2018"}, {"body": "posva revisited issue seems style settings actually working though chrome providing wrong value attribute see fiddle actually works syncing value back cssom chrome got us devtools also got actually got change value like everything seems working expected seems something wrong within syncing process style idl attribute content attribtue", "d": "8/2018"}, {"body": "error throw like specified value valid number value must match following regular expression dddd ee", "d": "8/2018"}, {"body": "please provide runnable reproduction message comes browser sure related vue without reproduction", "d": "8/2018"}, {"body": "sorry find problem browser", "d": "8/2018"}, {"body": "also try babel plugin", "d": "8/2018"}, {"body": "intend introduce nonstandard js syntax vue template expressions", "d": "8/2018"}, {"body": "element actually set attribute elements", "d": "8/2018"}, {"body": "really want figure example vmodel work perfectly vbind nt think value input equal vmodel help appreciated", "d": "8/2018"}, {"body": "think value input equal vmodel components form elements behaviour adapted said select elements changed setting selected attribute options elements use forum discord server stackoverflow questions", "d": "8/2018"}, {"body": "\u8bf7\u63d0\u4f9b\u53ef\u8fd0\u884c\u7684\u91cd\u73b0", "d": "8/2018"}, {"body": "\u8bf7\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684 link", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "functional components work supposed pass attributes manually supported functional components", "d": "8/2018"}, {"body": "apologies one last thing literal object array component data object seems work fine use store mixin anything like retrieve object array issue persists", "d": "8/2018"}, {"body": "nt use template", "d": "8/2018"}, {"body": "nt fix problem though", "d": "8/2018"}, {"body": "problem comes comparing plain objects dates compared correctly looks like using function first option always one selected however pass whole object option", "d": "8/2018"}, {"body": "hmm okay yeah binding instead options works something vue source js thing ya figure going insane edit checked source yep thanks dude", "d": "8/2018"}, {"body": "sure intentional come back know", "d": "8/2018"}, {"body": "vuetifyjsvuetify stuckouttongue", "d": "8/2018"}, {"body": "loosequal implementation defect comment check two object shape b looseequal looseequal consistent model directive value type regexes sets maps array buffers typed arrays etc insane implementation looseequal must think twice acurate version complex", "d": "8/2018"}, {"body": "actually duplicate already submitted pr", "d": "8/2018"}, {"body": "tested code removing element ui worked fine ie", "d": "8/2018"}, {"body": "please see demo screenshot issue point binded expression newlines", "d": "8/2018"}, {"body": "keep sending jsfiddles nt work", "d": "8/2018"}, {"body": "sorry nt know parse html code editorso copy code single html file open", "d": "8/2018"}, {"body": "ok although think services work editor removing linefeeds pasting nt understand would someone write html file linefeeds instead regular also confused fails transforming html vues gets", "d": "8/2018"}, {"body": "thank maybe like issue points searched uses windows newlines rn uses posix newlines n", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "see", "d": "8/2018"}, {"body": "sodatea", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "justineo", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "8/2018"}, {"body": "probably delay rendering engine browser definitely related vue nt remove content page scroll", "d": "8/2018"}, {"body": "posva thats figured wanted make sure nt missing something thank response", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "8/2018"}, {"body": "using index key expected behavior", "d": "8/2018"}, {"body": "could tell best practice picking key compoent better make code jsfiddle work thanks", "d": "8/2018"}, {"body": "working expected need describe expected behavior clearly items list identical", "d": "8/2018"}, {"body": "justineo said steps reproduce section follow steps click second item click button thank", "d": "8/2018"}, {"body": "bigradish working example difference provided reproduction working example provided reproduction set splice vue removed item whose index working example set splice vue removed item whose essential always provided unique always represent exactly element", "d": "8/2018"}, {"body": "leopiccionia thank much perhaps key assigned elements defined data otherwise vue recognize", "d": "8/2018"}, {"body": "bigradish described docs default mode efficient suitable list render output rely child component state temporary dom state eg form input values binding loop indexes equal default mode identifying unique item according place list leopiccionia said items actually changed removing item recalculated identifying item new item item new item vue perspective knows item data changed item removed get expected result need specify truly stand uniqueness item data instead index", "d": "8/2018"}, {"body": "justineo thank information", "d": "8/2018"}, {"body": "deal", "d": "9/2018"}, {"body": "\u89c1\u4ece vue", "d": "8/2018"}, {"body": "scoped slots functions slot scope filled different arguments time called use multiple component current component would expect point simply possible", "d": "8/2018"}, {"body": "looks like duplicate", "d": "8/2018"}, {"body": "problem occurs scope slot child node thought way add new render helper add function file srccoreinstancerenderhelpersindexjs js import renderslot resetrenderedflag renderslot export function installrenderhelpers target targetr resetrenderedflag newly added js function genscopedslot key string el astelement state codegenstate string elfor amp amp elforprocessed return genforscopedslot key el state const fn pay attention elif genchildren el state undefined undefined return originally wanted submit pr better way", "d": "8/2018"}, {"body": "use method right away import instance mount inside function please go vue forum chat chatvuejsorg need help closing", "d": "8/2018"}, {"body": "istanbul support source map nt think utilities implemented core library", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "", "d": "8/2018"}, {"body": "hi understand correctly bug prevents conditional block rendered condition evaluates false preventing vue parseevaluate slot example still trying access whether renders compiled render function app component notice still accessed say expected behaviour vif prevents rendering parsingevaluation afaik hope helps", "d": "7/2018"}, {"body": "correct evaluate contents falsey might thinking evaluate block whether shown demo vue exampleshouldnotbecalled vue exampleshouldnotbecalled", "d": "7/2018"}, {"body": "hi see comment nt state clearly talking context every situation bad however say expected behaviour everything parent template compiled parent scope source parent component exist matter may maybe docs reflect edge case somewhere least warning", "d": "7/2018"}, {"body": "sure commenting issue asking help reporting bug", "d": "7/2018"}, {"body": "expected behavior afontcu explained parent slot content rendered vnode eagerly passed child slot resolution want lazy use scoped slots future may make slot content lazy default opportunity make breaking changes ie", "d": "7/2018"}, {"body": "\u611f\u8c22\u5bf9 vue github issues \u53ea\u7528\u4e8e bug", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "already pr tracking", "d": "7/2018"}, {"body": "ok thank much searched related question issue pull request", "d": "7/2018"}, {"body": "props already mixed component instance sure requesting", "d": "7/2018"}, {"body": "want parameters mixins create functions take parameters return custom mixin", "d": "7/2018"}, {"body": "used scoped style sfc example remove attribute tag everything fine", "d": "7/2018"}, {"body": "\u611f\u8c22\u5bf9 vue github issues \u53ea\u7528\u4e8e bug", "d": "7/2018"}, {"body": "sodatea \u7528vue component\u5bfc\u51fa\u539f\u751fhtml\u4e0d\u7b97\u7279\u6027\u8bf7\u6c42\u5417", "d": "7/2018"}, {"body": "\u4f60\u81ea\u5df1\u770b\u770b\u4f60\u662f\u5982\u4f55\u586b\u5199 feature request", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "\u7ed9\u4e2a\u601d\u8def\u4e5f\u597d\u554a", "d": "7/2018"}, {"body": "hi stated evan errorhandler capture errors following render functions watcher callbacks lifecycle hooks component event handlers evan said dom event handlers currently included probably might working btw codesandbox button calling nonexistent named method methods object", "d": "7/2018"}, {"body": "thanks quick response answer question nt seen issue would strongly request list added documentation without unreliable use error handling functions nature error handling one know coved wo nt since question answered close issue leave open request docs updated request add error handling dom events sure process whoops thanks pointing typo fixed codesandbox worth", "d": "7/2018"}, {"body": "closing favour mentioned documentation ideas improve pr welcome", "d": "7/2018"}, {"body": "selects first element among siblings see examples need remove first three elements make work", "d": "7/2018"}, {"body": "sorry thinking looking class element", "d": "7/2018"}, {"body": "vdom works get thing react angular anything else", "d": "7/2018"}, {"body": "indeed expected behavior", "d": "7/2018"}, {"body": "think two points fixed first html parser allows xml qname second allows potentialcustomelementname", "d": "7/2018"}, {"body": "hi elaborate use case feature want make sure feature achieving maximum flexibility lacks real use case strongly recommend following rules custom tag names alllowercase must contain hyphen understand mentioning spec custom tag names actually want apply restrictions fact tell intention warning message already component names contain alphanumeric characters hyphen must start letter technically subset html still htmlcompliant applying extra restrictions like wo nt break standard", "d": "8/2018"}, {"body": "hi let explain cases working tax reporting software korea many items required tax reporting many terms used items korean first time tried translate terms english failed nt standard translation translation different meaning subtle difference meaning nt efficient translate therefore changed mind use korean terms new way works server side dbms perfectly also works plain javascript however vuejs nt support unicode names cases want make work think case rare case lots developers want use native language code especially developing software uses many complicated terms technically subset html still htmlcompliant applying extra restrictions like wo nt break standard understand right need fix improvement", "d": "8/2018"}, {"body": "funny page justineo faced problem well french projects used french terms things difficult translated difference ignore accents \u00e7 use plain letters", "d": "8/2018"}, {"body": "going could tell whether issue would accepted", "d": "8/2018"}, {"body": "nt like ymmv nt find writing components like often usually several children complicating factor another difference various ways define templates fragments code harder scan reorganize reuse uses vertical space include linebreaks even less readable dont nt even saved much typing fact editor autoinserts closing tags pretty sure typing", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "issue", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "7/2018"}, {"body": "try use variable instead string inside see example", "d": "7/2018"}, {"body": "thanks webther seem cover cases however problems well vhtml accept direct string input instead goes looking data props parent component think parents aware contents children vhtml also work content includes vue components since inserted raw html instead compiled using slot instead work since comment longer case nice inspect content outside component", "d": "7/2018"}, {"body": "want use inline html string think encode html tags like see example", "d": "7/2018"}, {"body": "still treated html comment rendered text second example renders correctly relies data property parent instead allowing text rendered directly template server side prevue workaround append detect empty area amazing requires code every affected template may affect styling since least works interested seeing whether behavior bug intended", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "hi thanks report would please reduce issue minimal reproducible example current reproduction link undebuggable us depends vue vuex vuerouter main logic lying remote bundled js file", "d": "7/2018"}, {"body": "closing due inactivity week please open new issue reference one follow information", "d": "8/2018"}, {"body": "would please provide runnable reproduction look otherwise much help thanks", "d": "7/2018"}, {"body": "closing due inactivity week please open new issue reference one follow information", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "please provide real reproduction look otherwise much help thanks", "d": "7/2018"}, {"body": "closing due inactivity week please open new issue reference one follow information", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "7/2018"}, {"body": "\u8bf7\u5230\u6587\u6863\u9879\u76ee vuejsvuejsorg \u6216 vuejscnvuejsorg", "d": "7/2018"}, {"body": "valid reproduction also vue nt able change default styles elements please check application code", "d": "7/2018"}, {"body": "apple audio nt play automatically", "d": "7/2018"}, {"body": "updated codepen thu jul haoqun jiang notifications githubcom wrote hi thanks report would please reduce issue minimal reproducible example current reproduction link undebuggable us depends vue vuex vuerouter main logic lying remote bundled js file receiving authored thread reply email directly view github mute thread", "d": "7/2018"}, {"body": "autumnwoodberry sorry reproduction perfectly fine look later previous reply meant another issue deleted seems still received email", "d": "7/2018"}, {"body": "seeing well others getting workaround provide prop passes necessary data directive sometimes results chain props nt ideal terrible either eg vue parentvue childvue export default name child props activeinput", "d": "7/2018"}, {"body": "guess happening expecting input update value current tick since using directive shortcut triggered neither ensuring component updated played codepen little bit got result componentupdated personally expected using one fix issue best workaround found wait nexttick directive", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "good idea api like nt good cause problems existing components props", "d": "7/2018"}, {"body": "boolean props default define component like set simply passing", "d": "7/2018"}, {"body": "understand problem resolved", "d": "7/2018"}, {"body": "sure connection rendering slot multiple times vue reason thinks already rendered", "d": "7/2018"}, {"body": "dug code yet think maybe scoped slots rendered like function call keep rendering slot inside time rerender component", "d": "7/2018"}, {"body": "use named slots avoid duplicate slots working example", "d": "7/2018"}, {"body": "comment confused heck realized something nt mean api take default slot certainly scoped slot anything else awkward looking api updated sandbox api default slots gets passed scoped slot exposed", "d": "7/2018"}, {"body": "found calls recursively casuses bug bug gone converting recursive calls loop style see noted recursive call still remains sure best way solve issue works least simple case components break indents intentionally illustrate strategy diff srcserverrendercontextjsold srcserverrendercontextjs next true const laststate thisrenderstates thisrenderstateslength isundef laststate return thisdone thisrenderstatespop laststatetype element thiswrite laststateendtag thisnext else thisnext recursive call still remains return break case component thisrenderstatespop thisactiveinstance laststateprevactive thisnext break case componentwithcache thisrenderstatespop bufferlength bufferindex componentbufferlength bufferindex thisnext break", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "7/2018"}, {"body": "function synchronous ca nt dynamically import something inside", "d": "7/2018"}, {"body": "see", "d": "7/2018"}, {"body": "resolved nt use customize show keepalive use keepalive include", "d": "7/2018"}, {"body": "seems fixed", "d": "7/2018"}, {"body": "seems fixed note reverted released due regressions", "d": "10/2018"}, {"body": "also ran similar issue today expect fix released ca nt use things broke tried reverted back problem cause headaches would nice fix released", "d": "10/2018"}, {"body": "use expression gets evaluated immediately triggers update due line leading infinite loop nt think anything vue", "d": "7/2018"}, {"body": "sodatea thank quick response", "d": "7/2018"}, {"body": "corrects", "d": "7/2018"}, {"body": "merged may assume expected behavior using create reactive custom string keys arrays intentionally allowed pr removing feature maybe think bug would introduce breaking change gon na accept atm", "d": "7/2018"}, {"body": "right still considering give treatment arrabc may work truly want enable reactive nonnumerical prop array know arr handled observerprototypeobservearray nonnumerical prop ignored made reactive distincted object also modified snippet see reactive notify dep arrdef notify dep first call therefore watchers activated nt activated sequence array changed activated using watcher record value arrabc nt change value watcher executes callback dep notified notify dep first call point many conflicts handling object array suggest better disable reactive prop array please forgive syntax errors english speaker happy accept corrections someone willing help", "d": "7/2018"}, {"body": "dom events imo see want distinguish way handle dom events actually custom event object payloads like even something like function control flow afterwards like dom events though standard syntax user land think name problem iscan working like dom events", "d": "7/2018"}, {"body": "get native event object dealing native objects everywhere makes sense overlap user properties using fairly reasonable going introduce breaking change", "d": "7/2018"}, {"body": "thanks atention guys think little things discussed understand reasons current implementation course reason break version wanted bring discussion listen guys think future come back thoughts arguments defend views believe best team work together course taken forum hihi thank", "d": "7/2018"}, {"body": "vmodel sugar top input tag using vmodel use value prop input event case vbind attrs binding parent component html attributes select means value attribute also set far know works expected reading documentation", "d": "7/2018"}, {"body": "vmodel works expected current behaviour equivalent mounted ref select tag select refsselectvalue attrsvalue set selected option however attributes especially value checked copied attrs behave like real attributes vmodel used eg mounted ref select tag select refsselectsetattribute value attrsvalue set selected option", "d": "7/2018"}, {"body": "actually works vue uses dynamic bindings static", "d": "7/2018"}, {"body": "keep mind attribute taking account uppon page load working expect check modifiers docs", "d": "7/2018"}, {"body": "fair point setattribute example however trying point necessary add extra code make custom select component work like builtin select managed work around produce think correct behaviour", "d": "7/2018"}, {"body": "fyi need use selected attribute options elements", "d": "7/2018"}, {"body": "need move please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "7/2018"}, {"body": "ca nt use attributes props pass input element vue component anyway move data undefined value get result", "d": "7/2018"}, {"body": "nothing ca nt undefined value", "d": "7/2018"}, {"body": "maybe want use propsdata", "d": "7/2018"}, {"body": "created inputcomponent vue component input element inside component attributes property passed input element example type number ok pass attributes component template worked previous vue versions used migration", "d": "7/2018"}, {"body": "expected behaviour run beginning supsequent rerenders start custom directive wo nt applied initial render run event dispatched since custom directive nt applied nt react event becomes component rerenders applies custom directive nt called component already mounted instead called custom directive listening event never happen", "d": "7/2018"}, {"body": "course solved less minutes making issue mdl function fix elements like added fix jsfiddle relevant bit", "d": "7/2018"}, {"body": "github issues \u53ea\u7528\u4e8e bug \u76ee\u524d vue \u5bf9 typescript \u5df2\u77e5\u7684\u4e00\u4e9b\u5c0f\u95ee\u9898\u53ef\u4ee5\u5728 open issues \u7684 typescript \u5982\u679c\u78b0\u5230 bug \u7684\u8bdd\u6b22\u8fce\u5230 github issues", "d": "7/2018"}, {"body": "\u597d\u7684", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "important vuejs healthy chinese community feel community disregard nonchinese users ultimately damaging vuejs frustrating efforts vue evangelists west important vuejs healthy englishspeaking community feel community disregard nonenglish users ultimately damaging vuejs frustrating efforts vue evangelists east would nt sound bit condescending towards part world serious note success vue small part due adoption chinese market happened vue creator evan chinese provided great documentation support chinese still actually simple fact right many developers china simply nt speak english much problem english issues chinese ones empathise request place right makes sound bit like western market somehow superior important chinese part community forced adapt wo nt side company sees problem big part community chinese instead seeing value global adoption library problem yes biggest libs china yet good english docs others greatest libs like vuetify west someone would see negative beyond", "d": "7/2018"}, {"body": "many issues actually chinese moment one current open issues really problem sounds like company asiaphobic", "d": "7/2018"}, {"body": "linusborg think guys got wrong way saying tell chinese devs ca nt speak chinese rather try ask use english makes issues understandable everyone invites collaboration everyone chinese speakers ultimately like bring communities closer together possibly even communities collaborate stuff way saying west better great respect chinese tech amazing stuff manage apps like wechat fact matter likely chinese web developer able understand english western developer understand chinese saying west better english inclusive amongst developers used whenever possible communities nt splinter different groups based first languages know maybe one issue currently usually one wanted voice potential issue trying promote vue adoption companies start discussion people problems disregardable try bring issue colleagues thanks attention sorry bothered guys nonissue discussion also special thanks linusborg giving additional points bring debates get ridiculous sometimes people using everything defend favorite framework choice tricky vue evangelists since new kids block", "d": "7/2018"}, {"body": "rather try ask use english makes issues understandable everyone invites collaboration everyone chinese speakers chinese speakers community would convince us encourage everyone file issues chinese makes issues understandable everyone invites collaboration everyone english speakers ironically chinese developers actually lot chinese community encourage people use english github provide english documentation oss unfortunately everyone fully express english issue need detailed elaboration use chinese instead least chinese speakers understand better provide help issue chinese content discussion right good example suppose one evan mentioned earlier given discussions already english many provided chinese speakers want ask still trying eliminate chinese usage community show little empathy maybe think try explain bear see chinese character screen instead", "d": "7/2018"}, {"body": "rather try ask use english makes issues understandable everyone invites collaboration everyone chinese speakers everyone speaks english english issues understandable everyone understandable people hemisphere", "d": "7/2018"}, {"body": "justineo thanks efforts trying encourage also sure mention linusborg feel one good things development web particular first languages much barrier real life web international big part fact english common language understand speak english especially new chinese developers starting feel important encouraged learn use brings larger community tears walls built around first languages well opens new doors work outside china give conferences learn nonchinese tutorials first language english either nt feel offended way speaking online andor expected instead feel like great thing bring us together break silly language boundaries would splintered us otherwise suggest justineo said simply encouraging especially new devs use english least little bilingual time understand china different russia india romania etc especially comes internet chinese users used internal communities rather part global internet experience another issue altogether unfortunately hands feel confident enough nonissue chinese community already working hard mitigate", "d": "7/2018"}, {"body": "also fyi new issue creator already explicitly encourage chinese users use english literally first thing see still opt use chinese likely english skills nt allow clearly explain problem trying describe cases forcing use english makes problem harder understand everyone involved final comments unsubscribe absolutely disregard nonchinese users given actual percentage chinese issues quite low sure get impression impression simply wrong communication channels release notes twitter blog posts documentation issues conferences using english first cases language colleagues manager cites presence chinese issues reason adopting vue probably pulling misleading arguments like vue focused china lacks western community ask prove ask check many open issues actually chinese ask search twitter medium stackoverflow see many vue articles discussions english ask search vue conferences meetups going around globe ask read documentation ask really think going problem", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "e", "d": "7/2018"}, {"body": "\u62a5 bug \u8bf7\u65b0\u5f00", "d": "7/2018"}, {"body": "maintain cookbook recipes website see vuejsvuejsorg repository post cookbook idea", "d": "7/2018"}, {"body": "duplicate", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "7/2018"}, {"body": "used file condition false ou click consequently vue remove file input dom file disappears use vshow instead", "d": "7/2018"}, {"body": "thank much replaced resolved issue spent hours try figure finally works wished learned difference actually mentioned guide thank learned lot", "d": "7/2018"}, {"body": "similar issue usingto step different part form next clicked increment step variable different part shows back button decrements step variable show previous page like stepwizard noticed uploaded files disappears dom still available local file variable data section back clicked guess take time go vuejs documentation nt miss vital details save trouble lesson learned", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "7/2018"}, {"body": "personally think better simply use methods bind method directive introducting new option solve problem overkill", "d": "7/2018"}, {"body": "thank quick response could provide example mean exactly", "d": "7/2018"}, {"body": "simonwep member vue team personal opinion example vue export default methods handler alert hello vue", "d": "7/2018"}, {"body": "ah problem opinion equally worth oh see mean yeah would solution thanks", "d": "7/2018"}, {"body": "transition try modify element vfor rendered vif use vshow instead vif render element best solution would filter list computed property give filtered list vfor", "d": "7/2018"}, {"body": "maxirozay hi maxime thanks reply actual use case rendering list inside different components using template jsx conditionally rendering children using statement child component render function nt want show compent returned return function try change set still think would better vue able handle cases like mine since code normal anything wrong anyway work", "d": "7/2018"}, {"body": "welcome fangzhou work still list best solution still filter list give filtered list jsx component care rendering component never return null yes weird transitiongroup trying transition something nt exist easily avoided maybe somebody knows look", "d": "7/2018"}, {"body": "add event current instance update listeners listeners readonly initialized vm optionsparentlisteners", "d": "7/2018"}, {"body": "expected behavior cyclic dependency components", "d": "7/2018"}, {"body": "link", "d": "7/2018"}, {"body": "\u8fd9\u4e2a\u4e0d\u662f child \u53ea\u6709\u5728\u4e0b\u6b21\u6e32\u67d3\u7684\u65f6\u5019\u624d\u80fd\u5f97\u5230\u66f4\u65b0\u8fc7\u7684 nexttick", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "\u4f60\u4f1a\u53d1\u73b0 props \u548c data \u6b64\u65f6 data", "d": "7/2018"}, {"body": "\u7b80\u5355\u7406\u89e3\u4e3a", "d": "7/2018"}, {"body": "qxzm \u5b9e\u9645\u4e0a\u76f4\u63a5\u6539 props props", "d": "7/2018"}, {"body": "\u8c22\u8c22\u5927\u4f6c\u89e3\u7b54", "d": "7/2018"}, {"body": "riophae said use toggle function calling function get date values", "d": "7/2018"}, {"body": "\u4e5f\u53ef\u4ee5\u5728\u5b50\u7ec4\u4ef6\u7684watch\u91cc\u9762\u8fd9\u6837\u5199", "d": "7/2018"}, {"body": "changes improve performance functions", "d": "7/2018"}, {"body": "done events modifiers may good benchmark comparison speed want see actually gain worth small size increase would add", "d": "7/2018"}, {"body": "posva easy benchmark garbage collector work try measure speed function bunch event handlers modifiers try measure memory footprint", "d": "7/2018"}, {"body": "yes specified speed interesting factor thu jul sergii stotskyi notifications githubcom wrote posva easy benchmark garbage collector work try measure speed render function bunch event handlers modifiers try measure memory footprint receiving mentioned reply email directly view github mute thread gt eduardo san martin morote", "d": "7/2018"}, {"body": "way applicable events modifiers also events contains expressions html well converted anonymous function", "d": "7/2018"}, {"body": "thanks suggestion real blocker possible handler reference scope variables basically makes uncacheable case temp variables may appear eg scoped slots require proper scope analysis identify handlers really cacheable gain marginal unless benchmark showing handlers causing real memory problems go", "d": "7/2018"}, {"body": "handlers cacheble outside quite easy add caching provide poc tomorrow could please keep open working benchmarks poc", "d": "7/2018"}, {"body": "even component generated handlers inside component template cacheble inside inner vfor", "d": "7/2018"}, {"body": "apologies reproduction link reproduce one since clue triggered function last describe scenario happens giving zero context leaves us stepping dark bit probably check given val greater equal since negative value also cause exception new array even makes sense real problem probably check performed function called generally happen think understanding scenario triggered crucial debugging", "d": "7/2018"}, {"body": "closing repro provided", "d": "7/2018"}, {"body": "without changes value input update value time since prop changed vue wo nt update internal state set first time event triggered", "d": "7/2018"}, {"body": "although bit magical essentially syntax sugar updating data user input events plus special care edge cases next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "7/2018"}, {"body": "justineo actually think strange behavior using react vue nt update internal state make sure output equal state sodatea thanks suggestion", "d": "7/2018"}, {"body": "nt honestly see practical benefit less characters less explicit", "d": "7/2018"}, {"body": "seems leak nonproduction mode fine production", "d": "7/2018"}, {"body": "thanks return posva also created issue since memory usage gets way heavy using using vuevirtualscroller destroy create lot components paginate scroll page nt know much related two packages together complex deeper components structure taking lot memory usage even production mode looking google task manager app tab increases item scroll downup one destroyedcreated processes less minute scrolling get get almost memory usage production mode developer tools closed gc nt go much route used core code vue looks like installed components structure getting copied nested component app gc ca nt clean destroy nested components way installs really nt know data makes think", "d": "7/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "goal may much complicated looks like edge cases nevertheless something implemented userland feel free post back plugin create one", "d": "7/2018"}, {"body": "use appvue waring happen think report vueprogressbar first instead directly filing bug report", "d": "7/2018"}, {"body": "hello plugin compatible ssr please report bug thanks", "d": "7/2018"}, {"body": "thanks replying soon actually confused strange situations mentioned reposition happened maybe ssr early use p eduardo san martin morote notifications githubcom closed receiving authored thread reply email directly view github mute thread", "d": "7/2018"}, {"body": "actually vue nt replace elements moved certain cases moving elements transition stop working fyi case patching process goes like following changing html b c b c b c b c b c b c changing html e f e f e f e f e f e f see later one nt move element transition retains former one moved elements transition gone guess probably vue patching algorithm always guarantee elements stay original position think might space optimized though", "d": "7/2018"}, {"body": "duplicate", "d": "7/2018"}, {"body": "posva method avoid urgent", "d": "7/2018"}, {"body": "aware maybe find way solve using transition component could nt tell cheers", "d": "7/2018"}, {"body": "fyi decide whether want close issue close ca nt demand keep open paid support", "d": "7/2018"}, {"body": "sure get problem use deep selector makes possible keeps styles scoped trading verbosity conveniencescoping see may want pass prop change attributes button instead everything css also multiple blocks vue file making global would apply without anything extra nature css css div header would actually work scoped styles would apply component used inside one containing style believe discussion handle would recommend head forum discord chat share discuss thoughts topic", "d": "7/2018"}, {"body": "indeed posva good point say makes perfect sense thank swift reply still serious issue go trough lines styles ensure one applied browser tools nt need deep selecting might take hours use vuejs convenience time saving case quite opposite please consider nt rush close issue", "d": "7/2018"}, {"body": "actually nothing deal vue rather css strategy partly using vueloader scoped styles case told way nt possible gave looks like solution first point discussed another channel first definitely nt rush close issue gave reasons", "d": "7/2018"}, {"body": "imo absolute convenience tradeoffs scoped styles designed isolate component styles thus gain better encapsulation changing parent styles wo nt cases introduce style regression children another kind convenience regarding maintainability btw use css custom properties product whey provide another mechanism style inheritance goes children according dom structures defining child style using custom property means would explicitly expecting styles parents may better balance point parentchild situation", "d": "7/2018"}, {"body": "expected filters cached like methods want cache value use computed property also try recommend", "d": "7/2018"}, {"body": "duplicate presence slot would cause errors think common resue slot maybe remove warning", "d": "7/2018"}, {"body": "liximomo see link posted earlier easy removing warning", "d": "7/2018"}, {"body": "justineo think vnode slot always ref last rendered htmlelement last get patched", "d": "7/2018"}, {"body": "possible render functions instead templates may well side effects though worked use cases far something similar coincidentally used breadcrumbstyle ui", "d": "8/2018"}, {"body": "kyis vue currently nt allow slots rendered multiple times understand losing reactivity see", "d": "8/2018"}, {"body": "justineo thanks link makes sense document", "d": "8/2018"}, {"body": "convert static slots compiled functions like like scoped slots unify migration path isnt hard implement either replace slot property accessor dev mode triggers deprecation warning create scoped slot function", "d": "8/2018"}, {"body": "actually close proposing may recursively clone children well understand update nt breaking change library authors switch scoped slots slots cases also wo nt break using templates library authors also provide transparent updates users manually fallback using render functions", "d": "8/2018"}, {"body": "mean normal anyway dev history perspective retrospect scoped slot approach flexible need split approaches anymore work child component check deprecate altogether mirror properties cloning functions trigger deprecation trying use library author needs anything case except making release next major vue version deprecated stuff gets kicked", "d": "8/2018"}, {"body": "please make happen", "d": "9/2018"}, {"body": "another benefit always using scopedslots insteadof slots lazy evaluation slot content imagine component following template loading comp wouldnt display slot content item becomes truthy normal slots rendered eagerly causing errors despite slot content displayed", "d": "9/2018"}, {"body": "fyi ignoring getters done purpose due added exception gettersetter pairs fix use case nt know whether ignoring pure getters right either way clear somebody unhappy", "d": "7/2018"}, {"body": "seems difficult compatible use cases", "d": "7/2018"}, {"body": "please post repros using libraries error could come make sure nt come original library first post bug report boiled repro without external lib nuxt thanks", "d": "7/2018"}, {"body": "may want give look need selectively apply options webpack config depending part app bundling also help question", "d": "7/2018"}, {"body": "posva thanks reply already studied completely finding error occurs fixing building errors using split code", "d": "7/2018"}, {"body": "posva used inside vueclissrexample got fixed adding worked like charm replaced directlyimported helloworld component one split code", "d": "7/2018"}, {"body": "tested worked", "d": "7/2018"}, {"body": "weird yarnworkspacesinstalled one build errors npminstalled one nt still project vueclissrexample however using make code actually split showed server console visited site started js files got error server rendering posva", "d": "7/2018"}, {"body": "posva modified one run visit site error occur changed lines codes mentioned", "d": "7/2018"}, {"body": "problem find solution", "d": "7/2018"}, {"body": "think problem come css chunk sure", "d": "7/2018"}, {"body": "zickat sadly nope nt clue think due css chunk well tried config gave another think issue raised minicssextractplugin", "d": "7/2018"}, {"body": "forgot say may want give look", "d": "8/2018"}, {"body": "posva zickat please try webpack miniextractcssplugin write css vue file index login appvue find problem document defined see content vuessrserverbundlejson document", "d": "8/2018"}, {"body": "error using also realized problem content inside", "d": "8/2018"}, {"body": "yekver ever overcome issue vue cli nt seen solve", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "binding native events components", "d": "7/2018"}, {"body": "unfortunately problem coming firefox setting input value empty string nt reset value input disabled file bug bug tracker nt exist already meantime workaround enabling directly setting value added date input", "d": "7/2018"}, {"body": "workaround make sure always node conditionalslot component sure green actually would style wrapper component leak slot written parent", "d": "7/2018"}, {"body": "also part component receives scope case example ends green text directly fact node present components time", "d": "7/2018"}, {"body": "problem comes radio buttons name try removing attribute", "d": "7/2018"}, {"body": "posva thanks fast response absolutely right blind thanks", "d": "7/2018"}, {"body": "please provide simple reproduction nt include third party library fiddle provided offering much information issues bugsfeature requests vuejs seeking free help debugging app using vuejs", "d": "7/2018"}, {"body": "use forum discord server stackoverflow questions feel free come back open issue turns bug boiled repro", "d": "7/2018"}, {"body": "justineo posva sorry use issues wrong way thank reply", "d": "7/2018"}, {"body": "way much repro please make sure problem nt come libraries first create boiled repro next nest il", "d": "7/2018"}, {"body": "reproduction easy set clone project install dependencies npmyarn start server yarn start dev open page get error come libraries already tried install nuxtjs vue comes vueserverrenderer managed vue thank taking request account", "d": "7/2018"}, {"body": "nt boil nt help us really want help us make sure problem nt come libraries first nt create boiled repro next nest sure problem comes vueserverrenderer create repro package thanks", "d": "7/2018"}, {"body": "see note even vueclasscomponent still prefer composition inheritance caveats calling parent methods child class noted", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "wahengchang use mixins feature", "d": "7/2018"}, {"body": "research line think mixin one solution feeling weird user moving class cant extend functions call", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "7/2018"}, {"body": "want know view source code", "d": "7/2018"}, {"body": "problem", "d": "7/2018"}, {"body": "working expected listen events emitted contenteditable event default binding one way", "d": "7/2018"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "7/2018"}, {"body": "move two blocks everything works great", "d": "7/2018"}, {"body": "thanks lot apologize issue", "d": "7/2018"}, {"body": "take look people seem made work problem libraries tell make libraries ssr compatible smile", "d": "7/2018"}, {"body": "posva ty", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "add property onto first property named reactive proxy see source code always use instead manually adding property", "d": "7/2018"}, {"body": "debugger mode remove cache key destroyed console ok", "d": "7/2018"}, {"body": "api docs match first checked component name option local registration name key parent components option name option available anonymous components matched set option components", "d": "7/2018"}, {"body": "linusborg set name components problem still", "d": "7/2018"}, {"body": "mounted hook called anymore set component name missing something please point precise possible", "d": "7/2018"}, {"body": "okay seeing issue", "d": "7/2018"}, {"body": "linusborg thanks reply tested problem still maybe nt understand faceing importrant step still call mounted", "d": "7/2018"}, {"body": "yeah got assume manually destroying component like messes ache keepalive sure consider valid usecase first place", "d": "7/2018"}, {"body": "use debug mode manually clear destroyed component cache cached ok problem caused destroy cache cleard", "d": "7/2018"}, {"body": "suspect yes", "d": "7/2018"}, {"body": "example foo fooid foo component cached keepalive foo bar foo component destroyed mixin cache still bar foo foo component still cached keepalive note exclamation point javascript function render var slot slotsdefault var vnode getfirstcomponentchild slot var componentoptions vnode amp amp vnodecomponentoptions componentoptions check pattern var name getcomponentname componentoptions var ref var include refinclude var exclude refexclude included include amp amp name matches include name excluded exclude amp amp name amp amp matches exclude name return vnode delete cache go else cache key vnodecomponentinstance cache key componentinstance make current key freshest remove keys key keyspush key else cache key vnode keyspush key prune oldest entry thismax amp amp keyslength gt parseint thismax prunecacheentry cache keys keys thisvnode", "d": "7/2018"}, {"body": "could nt use hook simulate nt destroy component", "d": "7/2018"}, {"body": "destroy component keepalive cached component condition eg includeexcludevif destroyed component condition foo fooid destroyed return go foo need keep status foo bar destroyed return go foo need init status summary parent url subset url need destroy parent returning subset need keep original state ps parent url subset url similar restful url", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "linusborg pr commit failed work think pr minutes thanks lot", "d": "7/2018"}, {"body": "asking way prune cache keepalive like check reasons possible top linusborg recommendation also extract state store tell without looking codebase becomes question posted relevant channels forum discord stackoverflow", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "please fix reproduction link thanks", "d": "7/2018"}, {"body": "solved", "d": "7/2018"}, {"body": "understanding render replace", "d": "10/2018"}, {"body": "vue already failing specific scenario nt failing please provide repro", "d": "7/2018"}, {"body": "posva nt think returns object like indication compilation error warn message dev environment", "d": "7/2018"}, {"body": "oh indeed errors returned thought", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "intended behaviour requirement met vue warn browser javascript console especially useful developing component intended used others intended usecase nothing", "d": "7/2018"}, {"body": "documentation never stated props validator would side effect console warning development build might need computed properties use case", "d": "7/2018"}, {"body": "might want use something like force prop specific value", "d": "7/2018"}, {"body": "linusborg sodatea thank quick answer understand statement think validator feature meaning currently nt prevent component misbehaving also understand computed value could better option although may wonder validators exist computed values used validators posva thank think exactly looking personal opinion wonder core feature vue makes sense validators currently", "d": "7/2018"}, {"body": "ynk removed advantages computed properties still access original value prop forced explicit giving coerced value name differentiates value passed prop", "d": "7/2018"}, {"body": "coercing computed property nt want add another api thing smile created package feature existed vue people find expressive actually harmful new developers beware", "d": "7/2018"}, {"body": "think validator feature meaning currently nt prevent component misbehaving develop minimized version vue nt give warnings dont think use version gives warnings development warning hve meaning meaning feature give warnings props values nt pass validator", "d": "7/2018"}, {"body": "sorry nt check migration guide docs carefully sodatea ok get advantages agree thought would real computed values computed values validation written space computed block gives meanings posva package solves posva read package readme harmful using coerced coerce function think kinda ok right feels natural separate prop validation computed properties also readable since coerce prop definition written inside prop definition block rather apart computed block could sometimes lot lines away linusborg understand point validators development tool real life validators intended impact component nt feel way first since wording validator looked practical production oriented guess read doc second time sorry", "d": "7/2018"}, {"body": "try computed attributes looks clearer", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "render rootnode default ca customized attribute however clearly documented think using special attribute actually try use tag used element root node may seem confusing actually pretty useful used element often used way turn domtemplate component since elements would hoisted befoe vue touch template terms usecase would html consequence code actually renders literal element root node neither native html element vue component placeholder meant rendered dom really solution ping chrisvfritz document", "d": "7/2018"}, {"body": "hm wondering feasible would make exception still fall back tag would behave expected need document gotcha linusborg think", "d": "7/2018"}, {"body": "would totally feasable described nt default behaviour vue rather intentional decision code component", "d": "7/2018"}, {"body": "possible passing argument eg improving docs", "d": "8/2018"}, {"body": "innerhtml supposed work svg per spec see apparently shim would allow set quick search", "d": "7/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow need set selection since vue replacing html", "d": "7/2018"}, {"body": "posva close issue solve solution work konw meaning issue", "d": "7/2018"}, {"body": "bad nt work updated comment better reflect closed issue wink", "d": "7/2018"}, {"body": "posva technique powerful give advice vue update html impossible reselect previous selection vue responsible issue updating dom element vhtml every component updated vue also hava reselect issue understand real meaning issue", "d": "7/2018"}, {"body": "calm plz vue update html impossible reselect previous selection course need decide record previous selections even vue responsible issue updating dom element absolutely using like explicitly rerendering existing content selections discarded appending content try keep previous content much possible selection preserved check btw nt take free help granted", "d": "7/2018"}, {"body": "justineo example may written error", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "nt found google results thanks", "d": "7/2018"}, {"body": "syntax write equivalent details vue api docs", "d": "7/2018"}, {"body": "leopiccionia thanks", "d": "7/2018"}, {"body": "first third related context js cases object bind said default values prop nt rely anything component want reuse method extract function outside put places call default function adding methods", "d": "7/2018"}, {"body": "sadly ca nt put function outside needs access values stored component data", "d": "7/2018"}, {"body": "still use function really encourage read contexts javascript enlighten wink", "d": "7/2018"}, {"body": "one two wo nt right one also possible", "d": "7/2018"}, {"body": "dvdbot try", "d": "7/2018"}, {"body": "browser esm build available yet", "d": "7/2018"}, {"body": "browser module version another one please refer track slightlysmilingface", "d": "7/2018"}, {"body": "recursive functions need stop conditions looks like none", "d": "7/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "7/2018"}, {"body": "need minimal reproduction try using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "7/2018"}, {"body": "see", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "7/2018"}, {"body": "please provide valid reproduction opening issue next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "7/2018"}, {"body": "package nuget published vuejs team official nuget support right reach publisher report issue", "d": "7/2018"}, {"body": "reached owner nuget package thanks", "d": "7/2018"}, {"body": "owner vue nuget package nuget recommended import frontend packages normally use bower package manager refer jscss static contents way visual studio totally new package manager aspnet static content reference named libman please review happened bower library manager details", "d": "7/2018"}, {"body": "seems bug opencollective side", "d": "7/2018"}, {"body": "interested becoming sponsor either patreon opencollective", "d": "7/2018"}, {"body": "thanks looking incorporating vue apps saying something consider something planned happened poking around notice twice thought would share best way way tell whether would busted amex signed right away point also thanks fast response michael barbine managed services daingerfield rd suite alexandria va evan notifications githubcom replyto vuejsvue reply replygithubcom date tuesday july vuejsvue vue noreplygithubcom cc michaelbarbine michaelbarbine author author noreplygithubcom subject vuejsvue sponsor urls give interested becoming sponsor either patreon opencollective receiving authored thread reply email directly view github mute thread notice confidentiality privacy customers partners employees paramount received email error please notify sender delete inbox right away learn handles privacy optout marketing emails please click email privacy", "d": "7/2018"}, {"body": "sidenote commit also causes bugs component", "d": "8/2018"}, {"body": "reverted original intention change avoid unnecessary rerenders computed property dependencies changed computed value remains unchanged however requires computed properties dependencies become eager reevaluate synchronously whenever one dependencies change leads issue described chained computed properties pretty common likely common case originally tried prevent computed property deps changed value remains importantly original behavior lead duplicated computation even worst case scenario nowreverted behavior could lead potentially much wasted cpu cycles reverting change", "d": "9/2018"}, {"body": "importantly original behavior lead duplicated computation even worst case scenario nowreverted behavior could lead potentially much wasted cpu cycles reverting change probably true statistically still unfortunate situations computed property heavy calulation previous computed property often updates always returns value guess situations user must manual caching computed property use memoized method instead", "d": "9/2018"}, {"body": "still unfortunate situations computed property heavy calulation previous computed property often updates always returns value yes exactly situation reported seeing duplicate trying use computed props elegant way cache intermediate results actual behavior surprising may others constructing computed props intermediate caches expectation better performance getting due incorrect belief recompute behaviors guess situations user must manual caching computed property use memoized method instead yes need instead would love eventually memoization behavior built computed props", "d": "9/2018"}, {"body": "fyi usecase prevent certain calculations happening rapid events example", "d": "9/2018"}, {"body": "indirectlylit accomplish caching state note illustrates generic pattern case probably update inside event anyway probably less code much simpler solution almost equivalent previous buggy dep tracking making eager recompute way every template code essentially forcing recomputation change words always eager hand computed value always waiting explicitly requested words always lazy personally find much simpler reason could propose potential solution think might viable add something like additional computed option would effectively translate pattern like", "d": "10/2018"}, {"body": "thanks frizi yup adding watchers exactly ended example simplification actual usecase see full code change context appreciate might case implementation details lazy vs eager evaluation might need bubble vue api exposed way ideal world though love kind combination gets used underthehood eagerly set dirty flags without recomputing lazily recompute dirty values requested nt know enough dep tracking internals vue know feasible practice", "d": "10/2018"}, {"body": "ideal world though love kind combination gets used underthehood eagerly set dirty flags without recomputing lazily recompute dirty values requested rereading original issue see similar already said possible full fix would involve either traversing full dependency graph deep dependants first collecting array like previous implementation", "d": "10/2018"}, {"body": "indirectlylit ideal world though love kind combination gets used underthehood eagerly set dirty flags without recomputing lazily recompute dirty values requested exactly happening standard computed values computed values lazy watchers mean dependency change dirty flag set value requested cached one used recomputed dirty important part transitive dependencies always treated like direct dependencies means computed value calls computed value b dependencies b copied done like b dependency change request value recomputed risks outdated changing behaviour first check b actually changed simple keep deferred point requested dependant computed value caring recompute possible think achievable complexity much bigger many cases might turn benefits outweighs costs complexity speed today hardware memory fetch usually slowest action take caching every trivial computation like actually serious performance hog still place methods", "d": "10/2018"}, {"body": "closing realised caused htmlwebpack plugin rather bundle renderer", "d": "7/2018"}, {"body": "nt doable userland non tested", "d": "7/2018"}, {"body": "fact works would nt feel comfortable modify builtin functionality like honest", "d": "7/2018"}, {"body": "would comfortable hide behind plugin", "d": "7/2018"}, {"body": "nt tell nt know pretty contrary using though", "d": "7/2018"}, {"body": "fwiw change could done userland way", "d": "7/2018"}, {"body": "half joke though fit promise callback async code callback function called synchronously event triggered nothing sure callback triggered using promise makes code succinct write specific scenario usage still quite debatable think kept userland", "d": "7/2018"}, {"body": "like humbly disagree called synchronously event origin usually asynchronous nature via user interaction however nt even think promises specific async code say much flow control ergonomics makes useful pretty much places onetime callback would suitable point knowing promise ever resolve makes feel uncomfortable well nt think rational objection really different callback never called however think obligation us agree topic thanks discussing issue ps fwiw nodejs team currently basically discussion going", "d": "7/2018"}, {"body": "recall correctly planned may added issues pr", "d": "7/2018"}, {"body": "nt look related vue core think please remove dependencies repro may want open issue vuetestutils instead vuex error happens test environment", "d": "7/2018"}, {"body": "posva think bug indeed related vue core vue handles calling hook kind environment required accept bug report", "d": "7/2018"}, {"body": "minimal possible test environment external libraries jsfiddle took look code trying access nonexistant property normal error", "d": "7/2018"}, {"body": "posva please take look actual unit test issue description property set hook line", "d": "7/2018"}, {"body": "indeed ignore", "d": "7/2018"}, {"body": "created issue vuetestutils suppose might related mount components still suspect vue core underlying problem however guess better first eliminate test utilities problem", "d": "7/2018"}, {"body": "confirm problem vue test utils components extend localvue constructor", "d": "7/2018"}, {"body": "please provide repro github repository makes easier closing repro provided", "d": "7/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "6/2018"}, {"body": "problem solved", "d": "7/2018"}, {"body": "behaviour vhtml setting replacing whole node could problematic regarding current vue limitation one single root node doable userland though reactive though", "d": "6/2018"}, {"body": "yeah nt passed maybe remove dompropsvalue oninput model context need pass data", "d": "6/2018"}, {"body": "thought vmodel supposed syntactic sugar separate undocumented property vnodedata make difference pass instead using calls exist way see nonfunctional components example intended native elements clearly nt work components", "d": "6/2018"}, {"body": "turns someone relying ca nt find way allow without breaking bunch shit", "d": "7/2018"}, {"body": "yes us included rely inject server side validation vuetify input", "d": "7/2018"}, {"body": "kaelwd attempt fix enough", "d": "7/2018"}, {"body": "worried removing listener prop binding like ends less flexible approach users want use listener binding instead model would great check major ui libraries vue see nt break make sure prepared change", "d": "7/2018"}, {"body": "mean using component instead", "d": "7/2018"}, {"body": "using time yeah know nt seen fair bit", "d": "7/2018"}, {"body": "tested works cases without double update maybe later write unit tests demonstrate", "d": "8/2018"}, {"body": "solution fixed vue", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "able recreate easily apart looks reasonable", "d": "6/2018"}, {"body": "content nt easily recreatable meant said straight way recreate behavior specific importable vue sources option cases", "d": "7/2018"}, {"body": "expected access", "d": "6/2018"}, {"body": "chrisvfritz think add note proxied style guide", "d": "6/2018"}, {"body": "definitely think mentioned style guide using vue six months nt know never needed ca nt recall place documentation actually used either wager people forgot ever read edit thanks quick help though much appreciated", "d": "6/2018"}, {"body": "actually since property names recommended least according style guide guaranteed conflict vue nt make sense proxy", "d": "6/2018"}, {"body": "discussion pr unfortunately nt remember pr remember final outcome", "d": "6/2018"}, {"body": "encountered behaviour started follow style guide thoroughly seemingly fill mixins methodscomputedhooks messy stuff like everywhere opinion unnecessarily hurts readability since adriangoransson said conflicts expected situation", "d": "8/2018"}, {"body": "find docs taken hour searching data property nt work would better support dollar prefixed properties", "d": "9/2018"}, {"body": "vitorluizc", "d": "9/2018"}, {"body": "similar issue type", "d": "6/2018"}, {"body": "vmodel components know value bound input text type apply behaviour input would implemented userland ideally think could solved custom modifiers closed moment may rediscussed moment best approach prop instead modifier since right accessible component handle logic component", "d": "6/2018"}, {"body": "component testa value passed prop gt key value present attrs variable nt declare prop always considered attr component testb value passed vmodel gt attrs empty extends prop need declare prop see offtopic empty objects instead undefined consistent cc chrisvfritz", "d": "7/2018"}, {"body": "ok need change code bit questions topic changed example clear docs say following vmodel behaves combination von vbind case define prop define prop difference want forward vmodel child component little possible code example example tried forward vmodel childwithmodel component understand correctly must add prop value parent create computed value combination attrs prop result following code solution much boilerplate code", "d": "7/2018"}, {"body": "vmodel create prop child component must add prop named component order make support", "d": "7/2018"}, {"body": "vmodel mapping vbind von search another solution", "d": "7/2018"}, {"body": "point done outside component add prop definition component used", "d": "7/2018"}, {"body": "understand difference first example without prop without vmodel added vbind von vmodel used vmodel result clearly", "d": "7/2018"}, {"body": "change behavior exactely vbind von", "d": "7/2018"}, {"body": "dattn looks interesting thanks cc posva think could work", "d": "7/2018"}, {"body": "reopening visibility", "d": "7/2018"}, {"body": "yes could work think makes consistent", "d": "7/2018"}, {"body": "make easier create high order component pr accepted use", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "made slightly reduced case lul works thinking probably vuematerial", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "maybe could add something like force unaltered rendering", "d": "6/2018"}, {"body": "additional test show plain javascript behaves vue issue sorry close", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "trick second capitalized tag names interpreted variables see demo", "d": "6/2018"}, {"body": "duplicate please keep eye start merging pull requests soon", "d": "6/2018"}, {"body": "\u91cd\u73b0\u7684\u8981\u6c42\u662f", "d": "6/2018"}, {"body": "\u70b9\u51fb li \u5220\u9664 storestate \u7684 \u53ea\u6709\u5f53\u70b9\u51fb update storestateitems \u8d4b\u503c\u7ed9 vmitems \u65f6\u624d\u66f4\u65b0\u89c6\u56fe", "d": "6/2018"}, {"body": "corrected link", "d": "6/2018"}, {"body": "\u5c06 \u6539\u4e3a", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "starstaysky please report issues component library repo related vue", "d": "6/2018"}, {"body": "use loops places specially perf critical places find anywhere switching loop would increase performance happy review pr corresponding perf benchmarks comparison", "d": "6/2018"}, {"body": "check prs first create pr start discussion possible improvements right repository", "d": "6/2018"}, {"body": "oh right bad thanks", "d": "6/2018"}, {"body": "workaround change new style apply", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "doable userland reusable transition providing state transition scoped slot end writing something like", "d": "6/2018"}, {"body": "thanks lot works", "d": "6/2018"}, {"body": "thanks proposal rely attribute order instead use computed property bind events object events bound", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "hi may try fix first bug", "d": "7/2018"}, {"body": "zaggy sure", "d": "7/2018"}, {"body": "guess would issue fixed causes sure would exclude version testing reason form field processed button enter tapped whereas processing content soon changed", "d": "9/2018"}, {"body": "status", "d": "10/2018"}, {"body": "issue still remains", "d": "10/2018"}, {"body": "see vuejsroadmap", "d": "6/2018"}, {"body": "see also", "d": "6/2018"}, {"body": "noted thanks", "d": "6/2018"}, {"body": "duplicate think need address issue docs nt going released time soon", "d": "6/2018"}, {"body": "official documentation really little typescript", "d": "6/2018"}, {"body": "got errors vue typescript fixed holding vue instance variable giving type ensures ts know vue properties instatiate using options object var vueapp vue var app new vueapp el app data return count methods initialize thiscount count work", "d": "8/2018"}, {"body": "trick typescript need define interface component implements blessing curse statically types languages take instance example nav component vue typescript navnavbar role navigation arialabel main navigation navbarbrand anavbaritem href img src alt bulma modern css framework based flexbox width height anavbarburger role button arialabel menu ariaexpanded false span ariahidden true span ariahidden true span ariahidden true div vbind class navbarmenuclass import component prop vue vuepropertydecorator const navbarmenubaseclass navbarmenu interface inav menuisactive boolean component export default class nav extends vue implements inav menuisactive boolean false computed return navbarmenuclass navbarmenubaseclass thismenuisactive isactive added interface definition getting type errors thismenuisactive", "d": "9/2018"}, {"body": "bug local state defined component reference props directly modify headercellclick method equivalent directly modified props words modified local state parent component datatable solution modify method component btw parent component collects parent component local state dependency parent component data changes trigger rerender child component collects prop dependency reference prop change child component trigger rerender", "d": "6/2018"}, {"body": "hcysunyang foremost thank much time effort apologies catching mistake realizing mutating prop apologies consuming time", "d": "6/2018"}, {"body": "child component input tag may vmode binding according idea sync modifier seems emit input events", "d": "6/2018"}, {"body": "hoping suggest clean way extend vmodel connection parent without manually write emitter apologies example implementation nt perfect idea vmodelsync variable set prop got passed parent could nt local vmodel binding name", "d": "6/2018"}, {"body": "although feature interesting still convenience thing already made convenience also major flaw would mean vmodel could modify component used creating watcher something similar currently possible looks like want easy way setup prop meant used v model sync recommend give look computed setters", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "bug", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "sodatea", "d": "6/2018"}, {"body": "bug", "d": "6/2018"}, {"body": "", "d": "9/2018"}, {"body": "dbflower \u4e86", "d": "9/2018"}, {"body": "falstack \u4f60\u662f\u4e0d\u662f\u7528\u4e86ssr \u6211\u7528ssr \u5728 created", "d": "9/2018"}, {"body": "dbflower \u6211\u5728 appvue \u91cc\u8bbe\u7f6e\u4e86 store", "d": "9/2018"}, {"body": "falstack \u51c6\u786e\u6765\u8bf4\u6211\u662fhtml\u91cc\u9762\u7528\u4e86store\u91cc\u7684\u6570\u636e store html \u91cc created \u94a9\u5b50\u91cc \u52a0\u4e0assr", "d": "9/2018"}, {"body": "expected behavior validators designed make sure always valid prop values want validate props hook", "d": "6/2018"}, {"body": "yes point validating value", "d": "6/2018"}, {"body": "oh sorry seems nt quite understand issue correctly earlier unchanged prop validated every time parent updated think investigate see make improvement", "d": "6/2018"}, {"body": "exactly updated title resume thanks", "d": "6/2018"}, {"body": "validator heavy trigered multiple times considerably slowdown whole execution validator nt heavy keep mind run development mode help developers provide correct data components make clear prop incorrect instead seeing nonreadable js errors", "d": "6/2018"}, {"body": "right posva already fixed validator bottle neck thought report issue anyway good point though far concerned consider issue solved", "d": "6/2018"}, {"body": "know open issues good intentions thanks helping us", "d": "6/2018"}, {"body": "thank reporting could try check using windows performance analyzer two cases windows performance analyzer english article japanses article cases invoke developer tools invoke developer tools breaking issue tiny parts order find ie developer tools causing memory leak", "d": "6/2018"}, {"body": "installed windows performance analyzer know analyze first try use look source url presented memory leak reproduced merely increasing number items following minimum configuration thinking manage somehow", "d": "6/2018"}, {"body": "leak demo maybe ie waiting long release memory", "d": "6/2018"}, {"body": "thank confirmation continued identify leak points modified vuejs body ie able fix suppress memory expansion problem write vuejs seems missing recognized bug ie issue pullrequest first time organize send request since would like use vuejs good integrate get confirmation", "d": "6/2018"}, {"body": "ryutayamaguchi thank efforts waiting pr", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "ryutayamaguchi", "d": "6/2018"}, {"body": "ryutayamaguchi", "d": "6/2018"}, {"body": "removed purpose makes things harder track doable user land seen library ca nt find right post find", "d": "6/2018"}, {"body": "strange emit make one step amp ca nt method make steps much developer want dont need library make include example post", "d": "6/2018"}, {"body": "also message functions supported", "d": "6/2018"}, {"body": "duplicate", "d": "6/2018"}, {"body": "hmm would imply complexifying lot function usage specific use case readability readable version would use create component using render function handle correctly", "d": "6/2018"}, {"body": "znck told assignment ternary leftside forbidden makes sense disallow well", "d": "6/2018"}, {"body": "official guide step step guide deploy vuejs vps like ucloud aws alibaba cloud digital ocean linode currently helpful step step information google someone blog also helpful forum post helpful question deploy receive comment", "d": "6/2018"}, {"body": "first time open issue vuejs follow guide using format somehow still wrong let know thanks", "d": "6/2018"}, {"body": "forum post helpful receive comment receive comment", "d": "6/2018"}, {"body": "hi think question could answered search engine like deploy use static web assets mainstream cdn services actually nt need special things vuejs thanks", "d": "6/2018"}, {"body": "deploying vue app deploying static website node app ssr nt need anything specific vue duplicate", "d": "6/2018"}, {"body": "thanks posva jinjiang", "d": "6/2018"}, {"body": "see", "d": "6/2018"}, {"body": "datacolor synchronized propcolor", "d": "6/2018"}, {"body": "values specified initial data expected value automatically updated always use manually update ing value", "d": "6/2018"}, {"body": "ktsn thank clarification may worth updating documentation explicit regarding limitation", "d": "6/2018"}, {"body": "seems work move watcher instance array changing sure trying please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "6/2018"}, {"body": "duplicated", "d": "6/2018"}, {"body": "use globals templates put warning rely always accessible", "d": "6/2018"}, {"body": "development builds case vue use native detect datamethods defined component instance call intercepted production builds case validation logic removed call finally fallbacks validation requires runtime check relies ca nt compilation keep runtime check experience browser compatibility issues kind bloat code size think better remember caveat avoid using global functions inside templates thanks", "d": "6/2018"}, {"body": "\u5b9e\u9645\u7684\u6548\u679c", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "sorry find error captured call render close issue", "d": "6/2018"}, {"body": "problem always false", "d": "6/2018"}, {"body": "sorry reproduction link wrong", "d": "6/2018"}, {"body": "said issue need explicitly pass slot", "d": "6/2018"}, {"body": "thank advice", "d": "6/2018"}, {"body": "see discussions case likely patch code generation suppress value emission type dynamic vmodel set thanks pointing", "d": "6/2018"}, {"body": "sodatea thanks clarification agree suppression would right way go", "d": "6/2018"}, {"body": "upon inspection proposed api sufficient sure look like yet solution problem still needed", "d": "6/2018"}, {"body": "closing realized nt really necessary vueserverrenderer handle solve downstream appjumpstartmercuryvue", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "see", "d": "6/2018"}, {"body": "javoski please consider reopening official guide section sync documented states recommend always use kebabcase event names bitten well either docs needs fixing code", "d": "6/2018"}, {"body": "feliperaul", "d": "6/2018"}, {"body": "documentation says including key fine list render output rely child component state temporary dom state eg form input values warning rather error vdom algorithm could deal expense considerable performance deterioration using without still considered antipattern chose keep warning escape hatch intentional requirevforkey rule eslintpluginvue available detect use case might consider adding check core", "d": "6/2018"}, {"body": "simple example could verbose imagining big content inside container code would duplicated", "d": "6/2018"}, {"body": "yes currently use function implement conditional wrapper lot content instead introducing modifier maybe would rather use something like", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "achieve creating really simple component", "d": "6/2018"}, {"body": "sqal said feasible userland functional component", "d": "6/2018"}, {"body": "googd", "d": "6/2018"}, {"body": "tried apply component functional nt achieve desired result multiple elements inside container render function ca nt return multiple root node elements add div", "d": "6/2018"}, {"body": "functional component check jsfiddle akryum", "d": "6/2018"}, {"body": "yes want template compilation need use version want template compiler node dedicated package case would breaking change", "d": "6/2018"}, {"body": "posva one vue clientside script compiled babel something like works surface way specify build runtimeonly build used kenokabe said least nt make much sense usually module exported full build someone wanted scaled back build get useful workaround requiring appropriate opinion directory change", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "guess need something like", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "looks like misunderstood purpose actionsmutations vuex never update state inside action function need commiting mutation instead state action readonly fixed reproduction", "d": "6/2018"}, {"body": "sqal feng shui request server data associated bug computed human hold return different data time mystery", "d": "6/2018"}, {"body": "bug report clear sqal pointed need use mutation change state", "d": "6/2018"}, {"body": "\u4e00\u76f4\u90fd\u5728\u7528vue \u91cc\u6784\u5efa\u5546\u57ce\u9879\u76ee \u6548\u679c\u5f88\u597d \u800c\u4e14\u6211\u4eec\u4e09\u4e2a\u5e73\u53f0\u7684\u7ad9\u70b9\u90fd\u5728\u7528 \u73b0\u5728\u968f\u7740js \u5728\u539f\u751f\u6253\u5305\u4e0a\u7684\u5e94\u7528\u8d8a\u6765\u8d8a\u591a \u60f3\u77e5\u9053\u80fd\u5426\u540e\u671f\u51fa\u4e00\u4e2a\u7c7b\u4f3creactnative \u8fd9\u6837\u7684\u89e3\u51b3\u65b9\u6848 \u5168\u9762\u652f\u6301\u539f\u751f\u8fd9\u4e2a\u65b9\u5411 \u8c22\u8c22", "d": "6/2018"}, {"body": "\u8bf7\u53c2\u89c1weex", "d": "6/2018"}, {"body": "vue", "d": "6/2018"}, {"body": "\u8c22\u8c22", "d": "6/2018"}, {"body": "\u53c3\u898b", "d": "6/2018"}, {"body": "", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "ca nt reproduce problem safari btw reproduction concise possible helpful much irrelevant code", "d": "6/2018"}, {"body": "able reproduce safari", "d": "6/2018"}, {"body": "jonaskress tried using latest minor version see fixed later version", "d": "6/2018"}, {"body": "nt think vue issue root cause two functions chrome returns safari returns application set default language safari however api response contain key thus leading error", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "today surpassed react", "d": "6/2018"}, {"body": "hi thanks interest definitely going abandon vuejs feel free use projects vuejs working quite stably healthy ecosystem critical bug core pick time without worrying maintenance active development actually commits chart nt reflect developments done open pull requests nt merged base branch yet vuejs large ecosystem companion libraries including vuecli vueloader etc core team major focus vue cli aims standard tooling baseline vue ecosystem brings whole new developer experience reached release candidate phase check released stable version vue cli expected done coming weeks come back core start merging pull requests actually already reviewed approved lot prs expecting new version stay tuned production usage nt wait", "d": "6/2018"}, {"body": "nt named export", "d": "6/2018"}, {"body": "thanks report would please reduce issue small reproducible example eg github repository together instructions get problem without runnable example would difficult us find going wrong", "d": "6/2018"}, {"body": "hello thanks reply project bit big uploaded google drive please download files run refresh page using several times quickly times see happens files", "d": "6/2018"}, {"body": "looks like called twice lodash appjs entrymixinsjs", "d": "6/2018"}, {"body": "omg stupid trying solve issue week thank much", "d": "6/2018"}, {"body": "need stop vue observing deep nested data objects much easier", "d": "6/2018"}, {"body": "posva ok check", "d": "6/2018"}, {"body": "posva checked works partial version gives example create able important add element intact form later able get element change object frozen way unfreeze possibile added new fields raises reconsideration", "d": "6/2018"}, {"body": "yeah point preventing vue observing changes limitation able add anything freeze nested objects though everything left unchangeable", "d": "6/2018"}, {"body": "current behavior html deals white spaces using filter something like would better instead inventing new syntax", "d": "6/2018"}, {"body": "thanks interest issue raised several times generally nt add features easily achieved userland avoid code bloat use cases custom filter would sufficient", "d": "6/2018"}, {"body": "oh great didnt know filter works", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "imho private apis may best idea rely always subject change", "d": "6/2018"}, {"body": "yeah probably would nice usable though functional components nt reliable way access far know", "d": "6/2018"}, {"body": "ok figured bit workaround using fills parent rerenders anything like tell functional components apart private interfaces", "d": "6/2018"}, {"body": "also even really private api nt prefix pretty common see working directly vnodes", "d": "6/2018"}, {"body": "duplicated key object", "d": "6/2018"}, {"body": "justineo fix attr nt work", "d": "6/2018"}, {"body": "style binding worked expected animation showing referenced keyframe exist yet need define css markup first", "d": "6/2018"}, {"body": "sodatea solve yet close animatecss project work", "d": "6/2018"}, {"body": "works provided jsfiddle snippet", "d": "6/2018"}, {"body": "sodatea ok works thanks great help", "d": "6/2018"}, {"body": "expected triggering rerender value saved lazy vue applies old value", "d": "6/2018"}, {"body": "explain fact changing initial values empty strings instead nulls changes behaviour one expect reapply empty string plus rerender connected second input edit checked one thing removing second input without modifying first one changes behaviour either", "d": "6/2018"}, {"body": "posva", "d": "6/2018"}, {"body": "vmodel making things easier initialise value empty string btw", "d": "6/2018"}, {"body": "reproduce macos chrome safari could update issue description include operating system browser version misunderstood issue first glance bug", "d": "6/2018"}, {"body": "temporal workaround blur input focus used ref input", "d": "6/2018"}, {"body": "another workaround suited replace vmodel appropiate", "d": "6/2018"}, {"body": "worked think bug", "d": "6/2018"}, {"body": "according comment sourcecode focused element never updated bug seems like update function called unless user press enter blur anyways seems redundant", "d": "6/2018"}, {"body": "well worked without changes fixes", "d": "6/2018"}, {"body": "works well", "d": "6/2018"}, {"body": "bug introduced commit reverting reopen fix solve bugs revert commit along nexttick implementation adding nexttick related label", "d": "6/2018"}, {"body": "sodatea please review pr need revert entire commit restriction updating lazy elements focused", "d": "6/2018"}, {"body": "tonyraoul remove restriction cause another issue described", "d": "6/2018"}, {"body": "annoying resolved next version", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "duplicate", "d": "6/2018"}, {"body": "rerender happens whole template renders let mark duplicate", "d": "6/2018"}, {"body": "\u8fd9\u4e2a\u73af\u5883 jsfiddle \u662f run \u4e0d\u8d77\u6765\u7684", "d": "6/2018"}, {"body": "fnlctrl \u6211\u53ef\u80fd\u6ca1\u6709\u8be6\u7ec6\u7684\u8bb2\u6e05\u695a\u95ee\u9898 work \u8fd9\u4e2a\u73af\u5883 jsfiddle \u662f run \u4e0d\u8d77\u6765\u7684 server \u6253\u5f00\u9759\u6001\u9875\u9762\u53bb\u590d\u73b0 \u6bcf\u6b21 click work \u80fd reopen", "d": "6/2018"}, {"body": "\u8fd9\u4e2a\u771f\u4e0d\u662f vue jsfiddle tbsstudioexe \u539f\u8c05\u6211\u4f7f\u7528\u4e86 ts \u8bed\u6cd5 let arrayprototype arrayprototype typeof arrayprototypefind function typeof arrayprototypefindindex function let stringprototype stringprototype typeof stringprototypeendswith function typeof stringprototypestartwith function", "d": "6/2018"}, {"body": "\u7ec8\u4e8e\u627e\u5230\u4e86\u4e00\u53f0 android \u7528\u7684\u534e\u4e3a mate \u4e3a linux android wv khtml like gecko mobile nettypewifi languagezhcn \u65e0\u6cd5\u590d\u73b0 \u4f60\u8bd5\u8fc7\u5176\u4ed6 android", "d": "6/2018"}, {"body": "sodatea \u6211\u4eca\u5929\u6765\u5c1d\u8bd5\u4e00\u4e0b", "d": "6/2018"}, {"body": "run \u5c31\u662f ok \u7684 \u7ebf\u4e0a\u7684\u4ea7\u54c1\u4e5f\u80fd\u6b63\u5e38\u4f7f\u7528\u4e86", "d": "6/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server stackoverflow toggle click handler use instead add directive markup create onetime binding detailed explanation", "d": "6/2018"}, {"body": "issues bug reports feature requests maybe discuss forum discord", "d": "6/2018"}, {"body": "also works chromium", "d": "6/2018"}, {"body": "using chrome fiddle working expected", "d": "6/2018"}, {"body": "justineo ok think need try restart browser macos really strange sigh", "d": "6/2018"}, {"body": "justineo tried macos latest chrome still problem restart system browser anyone help double check try imac tonight btw found chrome updated official build", "d": "6/2018"}, {"body": "anyway guess caused chrome extensions close try incognito mode works sorry bothering everyone", "d": "6/2018"}, {"body": "typo webapck webpack", "d": "6/2018"}, {"body": "sorry subjective best adding alternative syntax creates extra api surface learning cost maintenance cost documentation complexity nt think worth adding", "d": "6/2018"}, {"body": "perhaps issue transferred vuecli furthermore please provide version vuecli os thanks", "d": "6/2018"}, {"body": "closed due wrong repository lack necessary information btw could network problem initialization based experience", "d": "6/2018"}, {"body": "please provide executable reproduction thanks", "d": "6/2018"}, {"body": "many things involved easy copy wonder solution problem namely watch value heard parent component thanks justineo", "d": "6/2018"}, {"body": "many things involved easy copy since even nt willing copy want others help solve problem", "d": "6/2018"}, {"body": "justineo ulivz", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "add prevent input also adding newline modifies value well", "d": "6/2018"}, {"body": "kind hack lol long works", "d": "6/2018"}, {"body": "might bug open collective", "d": "6/2018"}, {"body": "closing resolved upstream", "d": "6/2018"}, {"body": "expected behavior slots inside component exposed parent want specify slot content outside parent define named slot parent rendered corresponding child slot", "d": "6/2018"}, {"body": "shoul nt manually move content dom handled vue relies perform updates moving", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "sorry use template correctly recreate issue", "d": "6/2018"}, {"body": "think since specific one combination events solved userland", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "know typescript supporti mean idea create vuets write", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "use equivalent passed", "d": "6/2018"}, {"body": "believe intended would nt beneficial enough check everything set updating hand something expensive every update prevent setting variable really changed", "d": "6/2018"}, {"body": "vuevuexvuerouter \u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5404\u79cd\u62a5\u9519", "d": "6/2018"}, {"body": "hi anything vuejs seems code posted vuejs", "d": "6/2018"}, {"body": "code probably adds babel applies everyone writes vue", "d": "6/2018"}, {"body": "put additional packages started project vuecli", "d": "6/2018"}, {"body": "valid repro use forum discord server ask questions", "d": "6/2018"}, {"body": "exactly expected behavior babel corejs native promise implementation absent buggy polyfill projects utilizing babel transpile code async functions transpiled regeneratorruntime abovementioned promise polyfill corejs case check pass bad case import babelpolyfill project choose transpile async functions imported thirdparty untranspiled codebase execute untranspiled code devtools would nt think issue worth fixing", "d": "6/2018"}, {"body": "use ssr bundle nodejs use native async syntax nodejs use babel node js run vue ssr", "d": "6/2018"}, {"body": "time move react", "d": "6/2018"}, {"body": "moving react nt solve problem feel free though may want learn provide reproduction specified issue requirements learn post issues correct repo help regardless framework work", "d": "6/2018"}, {"body": "properties start proxied vue instance may conflict vue internal properties api methods access please check official guide use prefixes behind", "d": "6/2018"}, {"body": "hi justineo thanks suggestion nt bit weird properties coming mixin proxied documentation says create mixin variable names less prone conflicting vue api component properties", "d": "6/2018"}, {"body": "nt bit weird properties coming mixin proxied documentation says rule limited mixins understand", "d": "6/2018"}, {"body": "found works explicitly define property nt work box component either try use naming convention thanks", "d": "6/2018"}, {"body": "properties defined manually reactive", "d": "6/2018"}, {"body": "\u751f\u4ea7\u73af\u5883\u7684 spa \u8f6e\u8be2 websocket reload \u7684 issues \u53ea\u7528\u4e8e bug", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "according use opera mini support css transitions cases opera mini processing done via opera servers often prevents js working correctly btw error message seems raised thirdparty js file imported codepen", "d": "6/2018"}, {"body": "using variable template twice", "d": "6/2018"}, {"body": "ouph real thx notice big mistake code send undefined method", "d": "6/2018"}, {"body": "valid reproduction", "d": "6/2018"}, {"body": "open project vue run code console global promise polyfill work async await promise async functions global promise", "d": "6/2018"}, {"body": "sorry babel use vue create testpromise use new promise helloworld file open chrome", "d": "6/2018"}, {"body": "problem solved babel use custom promise", "d": "6/2018"}, {"body": "duplicate", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "functional components nt instance ca nt key component rather functional component key element could potentially return multiple elements vue ca nt reliably decide apply key one provided", "d": "6/2018"}, {"body": "saw scoped slot still passed invoking since function give undefined user nt provide slot actually get still call function check user provided scoped slot content", "d": "6/2018"}, {"body": "think logical set value anyway slot vif away twisted case still nt work first component accepts scoped slot component passes subcomponent check user provided one current logic subcomponent either receive user scoped slot either undefined scope still set value subcomponent subcomponent wants pass optional scoped slot subsubcomponent mechanic subcomponent check scoped slot exists always true fallback wo nt happen user gave scoped slot beginning would nt happen empty instead providing undefined function let know makes sense way passing scoped slots wrong thanks", "d": "9/2018"}, {"body": "ran today find strange regular slots scoped slots behave differently vif would expect scopedslots work like op proposed regular slots work", "d": "9/2018"}, {"body": "also important note working standard implement filters javascript standard adopt since seems exactly filters context see clear documentation benefits filters serve way different methods applied new pipeline operator", "d": "6/2018"}, {"body": "see clear documentation benefits filters serve way different methods applied capitalize value new pipeline operator value gt capitalize benefit normal methods mainly nt pollute component app instance namespace formatter methods end quite number formattersfilters need everywhere main benefit pipeline operator pipeline operator nt exist yet p also using pipeline operator would also mean filter present instance method certainly reevaluate assessement piplelineoperators done start working vue", "d": "6/2018"}, {"body": "proposed change would breaking change land codebase agree documentation could improved addressing filter bitwise issue open issue submit pr", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "ooops duplicate see answer", "d": "6/2018"}, {"body": "bug code fixed made appear like deepness issue nt updated reproduction link issue description accordingly also forgot mention outputting value variables correct using class work see reproduction", "d": "6/2018"}, {"body": "application elementui referencing different versions vue fault", "d": "6/2018"}, {"body": "would invalid first place validate watcher set invalid value back", "d": "6/2018"}, {"body": "validate data actually mutate target", "d": "6/2018"}, {"body": "\u542f\u52a8\u7684\u65f6\u5019\u5148 validate \u4e00\u904d", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "gu yiling notifications githubcom sent wednesday june vuejsvue cc nicefan author subject vuejsvue watch prevent data change receiving authored thread reply email directly view github mute thread", "d": "6/2018"}, {"body": "equal already discussed guide instead", "d": "6/2018"}, {"body": "justineo thanks", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "6/2018"}, {"body": "bug seems caused slot caching mechanism vdom algorithm new vnode tree old one despite different roots share reference named slot thus leading confusion patching process", "d": "6/2018"}, {"body": "workaround attach attribute element instead", "d": "6/2018"}, {"body": "marking duplicate reflect underlying issue", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "please provide boiled repros vue without external libraries backends reporting bugs", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "6/2018"}, {"body": "notice sentence wo nt trigger child updated", "d": "6/2018"}, {"body": "posva right got build observer dom change containing component possible vue support one hook like support child component update based current one way flow possible", "d": "6/2018"}, {"body": "nt observing dom updates scenarios data instead possible using bus store may better solution", "d": "6/2018"}, {"body": "wrote works use backticks please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "repro mandatory", "d": "5/2018"}, {"body": "got error transitiongroup customcomponent ca nt reproduce quite random transition group triggered socketio sometimes call fast crash error basically client wait request customcomponent take name parameter request sometimes request sent fast customcomponent crash refuse change investigate", "d": "6/2018"}, {"body": "azurons want reproduce reliably add artificial timeout like pseudo code", "d": "6/2018"}, {"body": "done userland may want promise data give try", "d": "5/2018"}, {"body": "please open issue vue loader repo", "d": "5/2018"}, {"body": "youre using html template everything gets converted lowercase vue gets asked multiple times able find extra information necessary also section docs", "d": "5/2018"}, {"body": "read red tip", "d": "5/2018"}, {"body": "also said demo case transition actually css one js hook part set maxheight determined using script looked source code function length effect read provided try detect transition end css interestingly behavior linked gt leave transition run gt leave transition run gt leave transition run gt leave transition run see another demo", "d": "5/2018"}, {"body": "done callback optional used combination css optional mean optional call optional add add argument however call nt add vue knows wait css finish behaviour parameter similar libraries provide done callbacks testing frameworks like mocha jasmine jest ava etc pp", "d": "6/2018"}, {"body": "expected behavior arguments length must call callback", "d": "6/2018"}, {"body": "linusborg using css transition provide call make work example trying use css transition supposed work check originally intended accidental discovery provide using css transition working unexpectedly tend think browser limitation event looping css transition code run transition", "d": "6/2018"}, {"body": "doc says providing means intend explicitly control end timing transition eventually calling point disables cssbased auto transition end timing detection rule thumb listed arguments must call regardless type transition using", "d": "6/2018"}, {"body": "think making clear css transition working parameter css slidedownenteractive slidedownleaveactive transition ease overflow hidden js beforeenter el elstylemaxheight enter el elstylemaxheight afterenter el elstylemaxheight beforeleave el elstylemaxheight leave el elstylemaxheight afterleave el elstylemaxheight file another issue sorry description confusing", "d": "6/2018"}, {"body": "\u5148\u770b\u4e0b\u9762\u4e00\u4e2a\u4f8b\u5b50 leave el elstylemaxheight afterleave el elstylemaxheight enter run result beforeenter elstylemaxheight enter elstylemaxheight afterenter elstylemaxheight leave run result \u521d\u59cb\u503celstylemaxheight beforeleave elstylemaxheight leave elstylemaxheight afterleave afterleave elstylemaxheight elstylemaxheight gt gt gt afterenter \u4ece\u53d8\u4e3a jackysee", "d": "9/2018"}, {"body": "may want use", "d": "5/2018"}, {"body": "handle stuff like mixins usage directly calling methods edit nt rtfm looks perfect try see well actually works though might massage types bit get working", "d": "5/2018"}, {"body": "ktsn close anything could vue core improve situation", "d": "5/2018"}, {"body": "plugin nt work everything seems assume exports edit still get error wrap component", "d": "5/2018"}, {"body": "fine use ideal creates standalone instance would nice vue still resolved component references everything else way bare options objects nt really problem anyway unless one users messes somehow ends two different vue imports", "d": "5/2018"}, {"body": "alternatively may try detect duplicate vue imports", "d": "5/2018"}, {"body": "yeah would helpful current errors nt really indicate actually going well current setup likely problem vuetestutils though vuejsvuetestutils seems similar one", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "months ago asked help issue related one stackoverflow living temporary solution since passing vue instance library initializer importing vue library happy stuck vuetify also started use typescript creates separate vue instance clear tell webpack vue always instance used solution provided top thread help much since using babel aware existing solution package dependencies written typescript compiled webpack share vue instance", "d": "7/2018"}, {"body": "solution also allow use vue files packages original proposal top thread would probably possible", "d": "7/2018"}, {"body": "seems go open issue", "d": "5/2018"}, {"body": "see sorry", "d": "5/2018"}, {"body": "intentional afaik", "d": "5/2018"}, {"body": "mentioned wrong repository yes intentional", "d": "5/2018"}, {"body": "please provide valid repro opening issue note ask questions dircord server forums", "d": "5/2018"}, {"body": "forgot listen leave event transition component enter", "d": "5/2018"}, {"body": "sorry bad cache problem demo bin shall create new issue proper demo", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "according docs template expressions sandboxed access whitelist globals attempt access user defined globals template expressions possible reasons behavior guess security avoiding sideeffects template rendering workaround case creating method calls global function", "d": "5/2018"}, {"body": "working expected option stands single html element vue instance mount uses hood first element matches selector selected ca nt mount single vue instance multiple html elements", "d": "5/2018"}, {"body": "duplicate", "d": "5/2018"}, {"body": "something like vue feel free way people use way want personally rather build models backend sometimes type objects typescript frontend regarding proposition also vague hang around discord chat forum discuss ideas others get something interesting could open issue keep mind objects easy powerful time want complexify things box also things talked able find things issues want explore ideas", "d": "5/2018"}, {"body": "valid repro please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "order consistent ref used vfor loop must use array probably know nt need bind different refs resulting ref array nt think worth adding docs feel free tell chrisvfritz may different opinion", "d": "5/2018"}, {"body": "ref used vfor loop must use array case like said docs says ref used together vfor ref get array containing child components mirroring data source sorry using said docs missleads developer probably know nt need bind different refs resulting ref array element holding vfor would agree case", "d": "5/2018"}, {"body": "looks like language issue used nt mean used element component", "d": "5/2018"}, {"body": "click url changed params changed template", "d": "5/2018"}, {"body": "everything works expected route object reactive means change route changes results update template updated hook called remove reactive property template change route nt update reactive data would update template fix simply watch changes object update article data", "d": "5/2018"}, {"body": "thanks sqal", "d": "5/2018"}, {"body": "problem nt rerender using template", "d": "5/2018"}, {"body": "think liximomo right problem explained comment see code looks like transpiling plain js edit actually fixed time ago commit published version codesanbox uses version plugin upgrade dependencies project", "d": "6/2018"}, {"body": "thanks sqal also works raw render functions", "d": "6/2018"}, {"body": "reproduction far beyond minimal sorry ca nt locate problem reproduction like", "d": "5/2018"}, {"body": "please provide repro reporting may bug", "d": "5/2018"}, {"body": "works normal according test maybe need provide info", "d": "5/2018"}, {"body": "closing info provided", "d": "5/2018"}, {"body": "ca nt parenthesis expression valid css property value nothing vue", "d": "5/2018"}, {"body": "thx missed", "d": "5/2018"}, {"body": "functional components need pass", "d": "5/2018"}, {"body": "posva thank answer actually used nt render function real code used single file component vueloader related problem", "d": "5/2018"}, {"body": "yes", "d": "5/2018"}, {"body": "\u65e0\u6cd5\u91cd\u73b0 \u53e6\u5916\u4e2d\u6587\u6587\u6863\u6709\u81ea\u5df1\u7684\u4ed3\u5e93", "d": "5/2018"}, {"body": "", "d": "7/2018"}, {"body": "use capture bindings component selectively forward native html element see binding native events components", "d": "5/2018"}, {"body": "justineo oh nt learned great feature tried nt seem work vue musicplayervue logged musicplayer hook like result empty object without property however remove modifier see function using vue expected nt work modifier", "d": "5/2018"}, {"body": "use modifier see contains parentscope von event listeners without native modifiers", "d": "5/2018"}, {"body": "justineo nt quite get explained binding native events components use listen inner elements comes doc stating ca nt use", "d": "5/2018"}, {"body": "actually works escape hatch using thirdparty components nt provide specific events need using would make code coupled implementation components used decouple parts whether event listener transparent component user means use bindings without", "d": "5/2018"}, {"body": "justineo see btw since version use", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "justineo thanks closing issue", "d": "5/2018"}, {"body": "stylistic difference", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "relevant issues nuxtjs", "d": "5/2018"}, {"body": "nuxt issue please open", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "working expected invoked use computed property instead handling api data fetching may find insteresting please next time consider using forum discord server stackoverflow questions first come back open issue turns bug", "d": "5/2018"}, {"body": "issues repo also require valid reproduction link think better report discuss issue element ui team first", "d": "5/2018"}, {"body": "justineo said need boiled repros external libs te check bugs", "d": "5/2018"}, {"body": "looking probably code repeatedly calling component definition request without minimal reproduction little", "d": "5/2018"}, {"body": "see", "d": "5/2018"}, {"body": "duplicate", "d": "5/2018"}, {"body": "think hyperscript inside function quite close proposed api touch real dom inside string templates render functions", "d": "5/2018"}, {"body": "html code use build step precompilation", "d": "5/2018"}, {"body": "write custom registration logic like js function globalregister component prefixedname const name subcomponents component const realname prefixedname name vuecomponent realname component objectkeys subcomponents foreach subname gt const subcomponent subcomponents subname globalregister subcomponent use like tested get point assume", "d": "5/2018"}, {"body": "justineo good solution global register sometimes also need componentlevel register js appvue import list components export default name app components list course make helper function extract full components js appvue import list components import extractcomponents utils export default name app components extractcomponents listname list import extra codes increase cost use", "d": "5/2018"}, {"body": "achievable user land custom webpack loader directly specifying sub components main component overloading vue component method creating global mixin feel free create library reference prefer keep explicit way core", "d": "5/2018"}, {"body": "justineo posva thank published plugin implement feature", "d": "5/2018"}, {"body": "nt put vue files put html template", "d": "5/2018"}, {"body": "thanks quick response evan unfortunately actual use case nt allow add html template since images nested lowerlevel component read lot docs nt seen anything sfc miss something chance consider issue", "d": "5/2018"}, {"body": "looking vueruntime bit actually looks like issue production guess deal would nice console errors development thanks", "d": "5/2018"}, {"body": "seems come vueissuehelper open issue", "d": "5/2018"}, {"body": "yep nt aware repo yet thanks letting know moved closing issue", "d": "5/2018"}, {"body": "come vueissuehelper open issue", "d": "5/2018"}, {"body": "yep thanks letting know moved closing issue", "d": "5/2018"}, {"body": "sorry still wrong repository looking one", "d": "5/2018"}, {"body": "seems bug chrome old versions like case android using chrome checked tested chrome got chrome last version required prefixes properties assume nothing vue side", "d": "5/2018"}, {"body": "justineo got", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "production link local url provide information issue better make minimal reproduction problem codesandbox reproduction repo github", "d": "5/2018"}, {"body": "way much code repro nt look related problem want show also external library involved closing boiled repro provided also appreciate take time create issue english anybody answer also benefit", "d": "5/2018"}, {"body": "reload dev seems acceptable fairly large application unless expect app times larger already future", "d": "5/2018"}, {"body": "thanks responding anticipating app grow pages making concerned single json file containing code without least ability split common chunks scale us also subjective course noticeable penalty every refresh app", "d": "5/2018"}, {"body": "would willing bet file redundant code external libraries never recompiling external libraries bunching bundle file analyze bundle file make sure app proprietary code inside page template business logic routing logic state management logic see vue library set alarm bells always externalize vendor libraries server client everywhere another rule thumb npm run build takes longer seconds something wrong axe redundant code notice real app actually something along lines tops jsonparse back bearable speed", "d": "8/2018"}, {"body": "thanks analysis care ecosystem zeltice correct externalizing vendor libraries size goes amount reduction see use nt quite unfortunately decent brings us next big chunk file made sourcemaps disabling unsurprisingly gives us reduction first party code course also means ca nt debug disabling nt option important know nt code wrote running large website toplevel page components many features across pages although tolerable nt believe singlejsonfile approach scales well said time spent parsing json file reading perhaps lowhanging fruit optimize maybe using alternative serialization format maybe allowing sourcemaps file", "d": "8/2018"}, {"body": "regards source maps likely working two environments dev amp production dev never source maps enabled since js minified anyway therefore source map size bytes production build stage webpack creates separate file source maps never part js bundle unless misconfiguration remember source maps retrieved separate files separate http requests production source map urls hinted specialized commented hints minified packaged js css files regardless original problem slow development experience dev environment source map exist dev", "d": "8/2018"}, {"body": "thanks comment zeltice webpack combines source files single bundle uses loaders compile source templates styles js thus disabling source maps development would mean would get postcombineandcompile bundlespecific line amp column numbers stack traces instead sourcefilespecific line numbers making difficult identify source errors", "d": "8/2018"}, {"body": "see must source maps dev try cheaper still effective source map solutions going balance filesize speed company use source maps dev advice based experience years ago used cheapevalsourcemap good enough identify file line number problem yet fast enough second delay updates every code change", "d": "8/2018"}, {"body": "vue wraps observed array mutation methods also trigger view updates examples", "d": "5/2018"}, {"body": "please read also", "d": "5/2018"}, {"body": "please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "nt mind closed open order keep tracker bugs ping though", "d": "5/2018"}, {"body": "see also", "d": "6/2018"}, {"body": "chance could get discussion going sodatea would better way interact", "d": "7/2018"}, {"body": "also try log testinfo destroyed hook see new value object destroyed", "d": "5/2018"}, {"body": "happens right tearing vue instance normal watchers trigger would trigger instance destroyed making watcher functions invalid call watcher hook instead changing data", "d": "5/2018"}, {"body": "would say would nice mention documentation cause called right vue instance destroyed stage instance still fully functional", "d": "5/2018"}, {"body": "vmodel codesanbox keep mind select elements use need attribute option please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "sorry", "d": "5/2018"}, {"body": "normal sequences whitespace collapsed newline characters source handled whitespace lines broken necessary fill line boxes", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "qualified reproduction please provide something real thanks", "d": "5/2018"}, {"body": "special attribute used vue maybe could add warning", "d": "5/2018"}, {"body": "posva special ca nt find comment docs", "d": "5/2018"}, {"body": "yozman element useful work around limitations indom templates", "d": "5/2018"}, {"body": "justineo think case different functional component", "d": "5/2018"}, {"body": "reserved word use something else want us treat keyword element use component would breaking change feasable vue", "d": "5/2018"}, {"body": "linusborg roadmap must feature render vnode vnodes", "d": "5/2018"}, {"body": "linusborg somecase use render function define templates red warning ca nt use slot except fixed", "d": "5/2018"}, {"body": "roadmap vue none yet havent started working finished plans must feature render vnode vnodes somecase use render function react define templates red warning ca nt use slot except fixed nt understand trying say normal slots scoped slots templates use render functions exactly feature functionality missing", "d": "5/2018"}, {"body": "anything listed reserved going change even", "d": "5/2018"}, {"body": "composition mode accents languages like japanese see underline completely normal composition nt finished browser nt inform something typed", "d": "5/2018"}, {"body": "understand correctly happen keyboards current documentation implies happen keyboards require ime", "d": "5/2018"}, {"body": "way still update model directly wait event working live search android simply working adding space moving focus etc idea live", "d": "7/2018"}, {"body": "ok dont know another solution issue solved simple directive using like works fine android chrome android firefox", "d": "8/2018"}, {"body": "browser nt inform something typed inform something typed via standard event simplest workaround example adding input element issue", "d": "8/2018"}, {"body": "vmodel already supported functional components need things manually render functions though also use datamodel see", "d": "5/2018"}, {"body": "thank answer posva think work better balance conveniance low level features lot edge cases covered vmodel getting lost mean lot js input text domprops value value input function event eventtargetcomposing return value eventtargetvalue input radio domprops checked q value null change function event value null input checkbox domprops checked arrayisarray value value null gt value change function event var value el eventtarget c elchecked true false arrayisarray var v null v elchecked lt amp amp value aconcat v else gt amp amp value aslice concat aslice else value c input range domprops value value r function event value eventtargetvalue select change function event var selectedval arrayprototypefilter call eventtargetoptions function return oselected map function var val value ovalue ovalue return val value eventtargetmultiple selectedval selectedval code even including vmodel number lazy trim modifiers low level rendering mean automatically loose conveniance vmodel could set listeners workarounds object real input code could choose use directly input ignore completely adjustments perhaps technical limitations ignoring case", "d": "5/2018"}, {"body": "seems duplicate already pr work correctly revert according discussions", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "repro nt even run ie fixing problems nt seem issue btw looks like trying mimc vmodel", "d": "5/2018"}, {"body": "oh yeah forgot say use template inside inbrowser templates browsers strips", "d": "5/2018"}, {"body": "thank much", "d": "5/2018"}, {"body": "example provide display flex applied case find bug investigation vueloader repo", "d": "5/2018"}, {"body": "apart bit much vue also involves bundling done since modules create scopes writing instead may yield different results sure possible make sure warning reported incorrectly also rare problem since people use cli scaffold project already comes indexhtml file", "d": "5/2018"}, {"body": "happen call without explicitly importing warning using eslint either way vue responsibility", "d": "5/2018"}, {"body": "need add manually data object", "d": "5/2018"}, {"body": "yep works thx nt docs", "d": "5/2018"}, {"body": "listed end data object", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "use", "d": "5/2018"}, {"body": "justineo tried", "d": "5/2018"}, {"body": "please open issue thank", "d": "5/2018"}, {"body": "please follow instructions issue template thank", "d": "5/2018"}, {"body": "justineo", "d": "5/2018"}, {"body": "recommend reread vbind", "d": "5/2018"}, {"body": "modify use", "d": "5/2018"}, {"body": "call trim value binding attribute value global trim option likely add hard debug bugs increase vue size something already doable easily", "d": "5/2018"}, {"body": "reproduction url vue \u7684 bug", "d": "5/2018"}, {"body": "justineo", "d": "5/2018"}, {"body": "justineo \u62ff\u90a3\u4e2a\u5730\u5740\u5728\u6d4f\u89c8\u5668\u6253\u5f00\u770b\u5230\u7684\u662f\u66ff\u6362\u4e4b\u540e\u7684\u56fe\u7247", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "nt use english everyone understand", "d": "5/2018"}, {"body": "harshob \u82f1\u8bed\u6211\u4e0d\u592a\u884c", "d": "5/2018"}, {"body": "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u5728\u56fe\u7247\u94fe\u63a5\u540e\u9762\u52a0\u4e0a\u65f6\u95f4\u6233", "d": "5/2018"}, {"body": "hotao thistailoringnum thisuserphoto", "d": "5/2018"}, {"body": "repro working", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "ourt documenttion repository url indicates looking documentation version feel free open issue right repository ask team make version appearant old docs", "d": "5/2018"}, {"body": "link provided thing nearly indicating version number text looking docs", "d": "5/2018"}, {"body": "suggested open issue correct repository", "d": "5/2018"}, {"body": "keep mind name optional devtools already pick name could added behind flag vueloader open feature request", "d": "5/2018"}, {"body": "working expected happening component nt rerender prop nt changed basically already want constrain input value modify actual element another solution always sync value use computed property component use valid value watcher communicate new value options one probably fit project better something discuss communication channels like discord forum", "d": "5/2018"}, {"body": "similar problem think answer may help understand going possible solution", "d": "5/2018"}, {"body": "problem approach fundamentally breaks encapsulation like workaround posva even though requires developer component aware manual sync give context using snabbdom context custom elements web components ca nt freely reach arbitrary nodes interested seeing vuejs take since exhibits behaviorbug reported us developers certainly expecting change since dramatically perf implications everywhere thanks quick responses", "d": "5/2018"}, {"body": "see properties start proxied vue instance may conflict vue internal properties api methods access", "d": "5/2018"}, {"body": "understand yet following style guide mixins still error message comprehensible developers able fix problem without reading whole docummentation words think better error message would appropriate", "d": "5/2018"}, {"body": "want webpack smaller using vue files webpack always codesplit components check async components docs please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "superior route jumps tab page routing memory leaking time created life cycle tabs page switch memory leaks memory leaks", "d": "5/2018"}, {"body": "valid repro must minimal editable otherwise would difficult us know problem comes implementation vue us forum discord server stackoverflow seek help", "d": "5/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "5/2018"}, {"body": "using components fine give guide read", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "doable via custom webpack loader much done vue actually extremely long split multiple components need create new props communicate subcomponents even use tightly coupled", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "reproduction link essential bug reports thanks", "d": "5/2018"}, {"body": "please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "workaround key span", "d": "5/2018"}, {"body": "fyi bug introduced amp appears specific scenario root node conditional rendering expression reused new root sets prop reused dom nodes vue calls patch real dom abovementioned commits set children gets cleared immediately descendent element hook gets called corresponding dom node detached already therefore error would thrown line dom node reused returns true since given reproduction second attribute returns true first gets binding eg etc returns true", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "\u4f60\u7684 packagejson \u91cc\u9762\u7684 browserslist", "d": "5/2018"}, {"body": "need setup watcher specific point already lifecycle want prefer bloat api", "d": "5/2018"}, {"body": "check right click collect gc button removed", "d": "5/2018"}, {"body": "posva nt understand button say made next tests dev tools chrome number dom nodes increase production version chrome incognito mode chrome number dom nodes increase production version firefox memory snapshots see memory leaks", "d": "5/2018"}, {"body": "tried firefox see memory increasing wait seconds maybe minutes goes back normal around mb", "d": "5/2018"}, {"body": "maxirozay experience minutes nothing changed real app time wait minutes example pagination seconds get dom nodes click big problem performance", "d": "5/2018"}, {"body": "browser needs memory call garbage collector directly wo nt need wait maybe browser calling garbage collector tried chrome linux memory nt increase like firefox number node always vnodes vif false true document dom tree always someone else try try another latoposbrowser", "d": "5/2018"}, {"body": "maxirozay problem vshow problem vif", "d": "5/2018"}, {"body": "sorry meant vif", "d": "5/2018"}, {"body": "tested normal behaviour browser waits cleaning memory", "d": "5/2018"}, {"body": "look button looks like trash use force gc typically engine wo nt gc unless", "d": "5/2018"}, {"body": "reason nt jump reactively setting data see reactivity caveats docs use see behaviour contenteditable needs special treatment would bloat vue code supported box instead recommend using third party plugins see", "d": "5/2018"}, {"body": "clear something nt bandwidth yet either also think early open discussion also sometimes people really mistaken performance vs easytouse tradeoff important vue want make easy people start using vue web asm yet going big impact performance bottleneck dom still sure mention ssr web assembly going change ssr works", "d": "5/2018"}, {"body": "posva ssr key browser support according caniuse could ignored serverside hence migrated completely webassembly whole idea compiling binary drop vueserverrenderer package aspects architected moment simplicity talking nothing major important keep mind js called webassembly vice versa therefore absolutely nothing change majority users continue write absolutely code webassembly triggered based browser support clientside serverside completely rewritten current approach dropped", "d": "5/2018"}, {"body": "one performance examples strong proponent serverless architecture could bring extreme performance improvements well cost savings", "d": "5/2018"}, {"body": "expensive face detection algorithm normal see improvement said main slow thing dom manipulations anyway feel free add points may useful", "d": "5/2018"}, {"body": "believe two things consider makes vue better alternative react angular natural webassembly integration might key brings much attention vue leading increased community nt move back react angular imagine react implements would make community continue using vue going cost much infrastructure perspective file sizes much bigger operates much slower forgetting apps reactnative thinking web perspective could major blow already talks react webassembly believe important community prepare competition arise doubt hopefully vue integrates webassembly sooner later", "d": "5/2018"}, {"body": "imagine react implements webassembly means react lin clark aka linclark reacteurope help performance react applications browser truth shortterm immediate impact performance nt clear euphemism posva said perf bottleneck dom api javascript virtual dom diffing algorithm meaningless speed something already takes like lt still spending dom apis besides webassembly nt magic great limitations ca nt expect compile nodomaccess javascript ca nt use objects wasm barely imagine js library live implement objects top bytes file sizes much bigger operates much slower contrary wasm files way much larger compiled binary thinks size c source code vs compiled executable also check true wasm powered ui framework compiled c see demo gt gzipped files took seconds load baretothebone app counter fetch json truly amazing mind blown fast transitioning views counter fetch data still took power wasm lies boosting cpuintensive applications like face recognition demo shared us help core problem ui frameworks slowness native dom apis", "d": "5/2018"}, {"body": "fnlctrl reference video pointing video year old presenter makes lot points process changing importantly garbage collection gt ongoing work access dom api gt list highlevel goals ongoing work video points contrary wasm files way much larger compiled binary true comparison experimental project alpha stage march strange stating weigh less bytecode false everyone web states well referenced presenter webassembly makes less network overhead resulting faster downloading code hence performance improvements please take look additional runtime passed net anything like running absolutely js gt vm performance power wasm lies boosting cpuintensive applications referenced presenter believes runs faster please keep mind year ago webassembly improving another magnitude javascript ie much faster since many things need improvements expert area nt also make sense games gpuintensive nt playable web playable webassembly also webvr webassembly nobody tells ready make switch however start making progress better later optimizations available might happen time initial preparations made question starting help us better understanding project architecture dom access garbage collection available", "d": "5/2018"}, {"body": "could help change happen faster believe js developers take closer look webpack wasm loader walt syntax sugar top javascript", "d": "5/2018"}, {"body": "fnlctrl said real bottleneck current js framework cpu consumption dom related operations fixed current mvp webassembly standard hand lot overhead executing pointer switching javascript webassembly context another problem need concern olzhasalexandrov btw think need learn dose webassembly work strength kind frontend situations would suitable using current webassembly materials information thanks", "d": "5/2018"}, {"body": "becavalier saying hand lot overhead executing pointer switching javascript webassembly context another problem need concern analyzed short answer incorrect might true exact moment logically right future think would anyone write native nodejs addons switching native modules js would produce less optimized apps would correct task almost nothing anything major one benchmarks obviously find also welcome watch talks could hear mixing js webassembly nt bad thing one point webassembly gained support webpack since version gained first class support year already", "d": "5/2018"}, {"body": "olzhasalexandrov yes agree webassembly change web current time future postmvp standard complete overhead javascript context webassembly context would narrow application scenarios current webassembly pure computing applications graphic processing compressing library related applications apps need frequently switching two context environments really save lot cpu consumption get good running efficiency help webassembly frontend frameworks like vuejs without implementation gc webassembly really help lot nt need much math computing even using virtual dom wrapper real dom diff algorithm still good performance good implementation vuejs deep optimization javascript engine last least cg wg member really trying best achieve post mvp standard webassembly also better llvm backend webassembly think look forward day webassembly change web", "d": "5/2018"}, {"body": "webassembly amp vue think great discussion vue would ultimate number one within jsframeworks high time think", "d": "5/2018"}, {"body": "referenced presenter believes runs faster please keep mind year ago webassembly improving another magnitude javascript ie much faster since many things need improvements nt see chromeffedge recent release notes stating anything vast performance improvements wasm specs changed specs actual implementations also performance talking point wasm fast doubt faster without proper context meaningless many pointed wasm nt speed dom apis giving wasm dom access nt help either removes context switch overhead dom apis still going slow comparison experimental project alpha stage march strange fully functional wasm ui framework today latest release march shows exactly still development could taken advantage wasm improvements talked please enlighten another one better blazor real world example wasm ui framework experimental everyone web states well referenced presenter webassembly makes less network overhead resulting faster downloading code hence performance improvements far referenced talks specs everything look good paper someone actually tried build things would please show us lease one concrete example wasm providing great performance boost size reduction building simple spa requires calling dom apis let propose better question ever since talk wasm really good ui frameworks reactangular announced wasm rewrite plan core", "d": "5/2018"}, {"body": "without getting mixed discussion came across thread accident nt clue wasm makes sense project want add two cents currently process migrating fairly large project asmjs wasm actively following wasm performance browsers said performance improvements browsers straight wrong example take bugticket bugfix increased performance app twofold ff yet nt show ff release notes word advise instead checking browser release notes check release notes javascript engines performance increases implemented also check ticket trackers publicly available also stuff like streaming compilation recently added firefox chrome without much fanfare also nt know relevant project reactnativedom announced reacteurope layout powered wasm", "d": "5/2018"}, {"body": "find topic interesting interested wasm vuejs first bit context actually used wasm real world use case viewing big jpeg images several gb browser run image processing expert get hands dirty play little bit promising new technology vuejs part must confess newbie month two makes happy simplicity expressiveness excellent doc thanks team observations thoughts wasm wasm fast seen times faster javascript image processing algorithm convolution talking algorithm written javascript rewritten c compiled emscripten wasm information emscripten also generate optimized javascript times slower wasm convolution algorithm surprisingly faster algorithms always performance depends lot context conclusion wasm promise speed fullfilled javascript engines also optimised perform well clear win wasm files small already noted fact one requirements mvp wasm file created emscripten big blazor example part emscripten bring code standard library one core advantage wasm compilation target emscripten bring legacy cc code base browser done google earth autocad game etc often lower parts code like physics engine actual display code agree overhead calling wasm js js wasm manipulating dom wasm first identified use cases clearly benefit wasm ui ones experience guess wasm good candidate performance improvement vuejs note olzhasalexandrov everything moving new technology things improve future one want go path guess best first identify bottlenecks vuejs measuring things check wasm good candidate improve performance experiments said killer feature vuejs simplicity prefer slightly slower solution easy use fast one complex wasm used means development technology walt something else comes maintenance cost dev team compromises", "d": "5/2018"}, {"body": "vuejs already typescript support wonder much would take work assembly script vue option may somewhat offtopic issue someone really likes use vue would certainly enjoy taking paradigmframework context game ui would take ton effort would interesting able use vue paradigm compose interact webglui via something like html canvas offscreencanvas ontopic nt think webassembly good firstclass target vuejs unfortunately significant belief browsers never implement firstclass dom api access webassembly get implemented wo nt seeing time", "d": "5/2018"}, {"body": "spent time thinking topic want add extra thoughts lose considering personal experiences using vue hard time believing bottleneck vue js dom api benchmarks showcasing personal experience using vue performance using makes designing ui elegant experience runtime typechecking props ridiculous callstack depth exceptions still thread seem leaning wonder wasm js interop layer would slowdown honestly vue core team really sold wasm performance boon vue olzhasalexandrov want help vue make jump wasm need benchmarks wasm speeds expensive image processing nt mean vue bottlenecks core team really ca nt underestimate power builtin runtime typesafety wasm could give vue manually checking typeof instanceof really nt ideal potential performance boosts hand might possibly include using vuex wasm environment via web workers theoretically possible nt know anyone tried", "d": "5/2018"}, {"body": "core team task exact tech requirements glad assist beginning suggest start replacing bundle renderer production please let know benefits json parsing bundle created vueserverrenderer besides ease debugging ignore production normal usual straightforward rendering please observe reasons bad approach initial comments issue ssr optimization bring value", "d": "5/2018"}, {"body": "short look bad vueserverrenderer link source serverless first cold start triggers huge json parsing lot checks treeshake dependencies since function nt access dependencies bundles file sorry devs using including imagine great would compile wasm", "d": "5/2018"}, {"body": "another cents short look bad vueserverrenderer link source serverless statement answer question webassembly used address mentioned issues fact issue description also nt assumptions webassembly capabilitiesstrongsides less bytes performant examples unrelated usecases meet vue believe better ways fixing mentioned issues without utilizing webassebly webassembly integration lets take look glimmer example nearly close vue goals built compiler compile handlebars templates binaries glimmer vm aims increase network dom updates performance compiler vm still written typescript far know plans webassembly version please note templatingengine part whole thing already clue much effort needed achieve goal mean possible replace one compiler another get webassembly binaries place javascript sources lot work nearly viable reason imho anyone sees possible path vue implement integration guess welcome discuss though", "d": "5/2018"}, {"body": "oevgeny many already highlighted benefits migrating webassembly cons current approach ssr continue repeating things build previously said suggest try rewrite use assemblyscript better walt whole vue ecosystem rewriting small package ssr function vueserverrenderer primitive task start common approach divide big project bunch small pieces experimenting small package vuejs ecosystem good starting point", "d": "5/2018"}, {"body": "webassembly integration lets take look glimmer example far know plans webassembly version pr porting initial small part glimmer rustwasm understanding part mostly done waiting dependency binaryen allow run browsers like lack wasm support dependency ready soon possible see wasm adoption glimmer point", "d": "5/2018"}, {"body": "pr porting initial small part glimmer rustwasm great news happy glimmer team pr title says initial stab porting rust think lot related rustwasm changes pr quite big maybe things go smoother assemblyscriptwalt anyway example assemblyscript walt integration existing js productionready projectlibrary really appreciated rewriting small package ssr function vueserverrenderer primitive task start sure maybe smart enough", "d": "5/2018"}, {"body": "blazor story entirely different blazor runs top mono net runtime compiled wasm actually executes real net assembliesdlls interpreter mode interprets msil guys building stated many times addressed mono team miguel de icaza creator xamarin mono working ahead time compilation make possible compiling blazor apps straight wasm currently entire net vm downloaded app standard libraries plenty meaningless code like file io make sense browser gt size things get optimized enough pretty sure app written angular blazor smaller blazor run faster blazor given angular switched wasm may want take look one way manipulate dom rust interpreting vm vm plain wasm", "d": "5/2018"}, {"body": "mihailshishkov would please build stdweb demo namely todomvc example put repo nt include prebuilt one ca nt seem get demo compile windows machine guess also much hassle people want see demo install complete rust toolchain", "d": "5/2018"}, {"body": "installed ubuntu vm rust toolchain finally built stdweb todomvc demo js wasm todomvc demo gzipped js gzipped wasm gzipped compared vue todomvc demo gzipped js gzipped runtime bigger size perhaps nt complete waste hours setup rust env compile demo since least confirmed assumption actually trying leave built demo see yes course still experimental guess wait see size advantage future perhaps performance difference since todomvc demo simple timeline adding todo item vue stdweb guess wait complex demo find keep assuming wasm wo nt bring much performance improvement traditional applications heavily uses dom apis draw ui", "d": "5/2018"}, {"body": "cases extreme performance requirement skilled programming language ecology important fragmentation technology avoided use performancerelated attempts", "d": "6/2018"}, {"body": "arrow function expression shorter syntax function expression", "d": "5/2018"}, {"body": "note vuejs docs well use arrow functions options property callback created gt consolelog thisa vm watch newvalue gt thismymethod since arrow functions bound parent context vue instance expect often resulting errors uncaught typeerror read property undefined uncaught typeerror thismymethod function", "d": "5/2018"}, {"body": "used use arrow function forgot basic shame thank guys", "d": "5/2018"}, {"body": "diegolipinskidecastro use arrow functions data definition access component data first argument passed function also mentioned docs p", "d": "5/2018"}, {"body": "sqal last lines yeah thanks", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "closing open right way", "d": "5/2018"}, {"body": "diegolipinskidecastro please nt falling fat arrow scope caveat search ask discord server well known js caveat nvm late party", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "update issue mentioned vueloader pelase see link sorry lack attention", "d": "5/2018"}, {"body": "longer case though documented functional components case either use", "d": "5/2018"}, {"body": "hi posva thanks feedback could nt find part guide api reference usage want make pr adding info guide", "d": "5/2018"}, {"body": "thank let keep sure internal property people use one instead", "d": "5/2018"}, {"body": "cli officially released yet also docs repo", "d": "5/2018"}, {"body": "repost docs nt required", "d": "5/2018"}, {"body": "required update docs cli officially released", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "nt think link qualifies reproduction fiddle sort", "d": "5/2018"}, {"body": "expected behavior computed properties considered immutable never mutated directly", "d": "5/2018"}, {"body": "supposed work object two functions named actually getters setters see proper get shorthand syntax", "d": "5/2018"}, {"body": "fact try native get set syntax app try simpler repro see works thanks", "d": "5/2018"}, {"body": "managed get working think real app issues dealing scope lost able access able create getterssetters proper function method body syntax arrow functions got working repro also used validate computed property nt rerun every time field changed makes sense since returning gettersetter delegates thanks putting back track evan", "d": "5/2018"}, {"body": "import one component inside right order makes sense case vue concern rather bundler", "d": "5/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "5/2018"}, {"body": "browser feature nothing deal vue", "d": "5/2018"}, {"body": "posva forget im said dont know tt", "d": "5/2018"}, {"body": "\u8bf7\u4e0d\u8981\u4f7f\u7528issue\u63d0\u95ee", "d": "5/2018"}, {"body": "using regular slots vue reuses warning important use scopedslot generates different vnodes time", "d": "5/2018"}, {"body": "posva nt warning sometimes customize slot template without scope", "d": "5/2018"}, {"body": "hi thanks filling issue checked link adding log final state clicking checkbox array order correctly reflected dom link vue issue please check implementation", "d": "5/2018"}, {"body": "hi thanks response actual error happening sorting check look console object cloned sorting happening correctly parse stringed facets object becomes reactive reason changes order array reactive variable see code happens anything get sorted happens chrome possible reopen issue", "d": "5/2018"}, {"body": "updated logging position array order changed assigned vue instance", "d": "5/2018"}, {"body": "issue related vue guess uikit library works happens using indom html template check", "d": "5/2018"}, {"body": "rendered context root instance rather case use refer parent component like", "d": "5/2018"}, {"body": "javoski thank response see use please reopen explain access directive opinion access passed component via", "d": "5/2018"}, {"body": "please reopen explain access somemethod click directive sure got point clearly actually access directive according tests invoke function directly", "d": "5/2018"}, {"body": "maoberlehner way ca nt work method defined main vue instance directive evaluated scope main app template everything correct", "d": "5/2018"}, {"body": "javoski linusborg oh sorry idk copy pasted custom directive snippet fault look access value correct way apologize trouble", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "nt see anything wrong repro want vue keep using element use attribute even case would better use another data property bind inputs", "d": "5/2018"}, {"body": "\u8bf7\u4e0d\u8981\u5728\u7ec4\u4ef6\u91cc\u9762\u624b\u52a8\u7ed9 dom \u6216\u8005\u81ea\u5b9a\u4e49\u6307\u4ee4", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "dom dom vue javisperez \u5728 dom", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "hi nt modify outer component props child even less vnode considered readonly instead use scoped slots provide information child parent ways communicating components tightly coupled case work nested trees well", "d": "5/2018"}, {"body": "hi posva thanks quick response look injectprovide want clarify something something working reason breaking change modifying props child setting props children components parent rendering suggested correct approach anymore", "d": "5/2018"}, {"body": "never fair workaround scoped slots need fri may juan p osorio notifications githubcom wrote hi posva thanks quick response ill look injectprovide want clarify something something working vue reason breaking change modifying props child setting props children components parent rendering suggested comment correct approach anymore receiving mentioned reply email directly view github mute thread gt eduardo san martin morote", "d": "5/2018"}, {"body": "intended check option docs think looking", "d": "5/2018"}, {"body": "anything starting pretty much private please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "ok thank sorry bother", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "hey discussed earlier others issues want achieve keepalive want cache last x component rendered actually create component basing keepalive source code exposing function actually go declarativity scenario looks like using prop work", "d": "5/2018"}, {"body": "", "d": "7/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "behaviour may seem weird never directly modify value input use splitting source truth instead use computed property setter sets text uppercase value want keep lazy behaviour play two variables", "d": "5/2018"}, {"body": "thanks posva reply say", "d": "5/2018"}, {"body": "cc", "d": "5/2018"}, {"body": "need probably mixins case please provide information need possible use cases etc", "d": "5/2018"}, {"body": "fnlctrl nt need mixins want custom key load components instead different key name please provide information need possible use cases etc want follow pattern gt might css want javascriptvue components also distinguish components objects article another harry object signify something object may used number unrelated contexts one currently see making modifications types components could potentially knockon effects lot unrelated places tread carefully example component signify something component concrete implementationspecific piece ui changes make detectable context currently looking modifying safe side effects example", "d": "5/2018"}, {"body": "fnlctrl looking reply", "d": "5/2018"}, {"body": "honestly find hard understand trying achieve custom fields eg accessed please note issues well defined feature requests used seeking help nt know want discuss forum first", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "ie support object property shorthand use instead", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "", "d": "7/2018"}, {"body": "priority vif vif wrong times hence velse rendered times see correct usage", "d": "5/2018"}, {"body": "compiler works fine strict mode maybe mean strict csp either way need provide information reproduction inbrowser compilation works regardless strict mode works", "d": "5/2018"}, {"body": "posted issue seeing gave much clarity hack suggested caused code work however try new function syntax make strict mode work", "d": "5/2018"}, {"body": "also working salesforce problem described issue using runtime compilation getting error keyword add around keyword library work better practice way", "d": "5/2018"}, {"body": "changed main vue code salesforce still threw error saying strict mode code may include statement", "d": "5/2018"}, {"body": "nt unmuting directly manipulating dom instead mutate state let vue vue job making sure dom sync state", "d": "5/2018"}, {"body": "thanks mentioned mutating attribute via state nt work pauses video comparison fluidly unmute targeting element directly trying custom video controls ios compatible way achieve vue missing related new policies ios", "d": "5/2018"}, {"body": "evvvritt right updating muteunmute via state works desktop ios", "d": "7/2018"}, {"body": "vue functional component define stateless component case applicable functional components pack stateful component", "d": "5/2018"}, {"body": "yunfong feature request asking functionalstateless components support obj question use methods functional components add making functions accessible via functionaltemplate nt make component stateful happy open pr fr approved", "d": "5/2018"}, {"body": "could open issue vue loader instead please", "d": "5/2018"}, {"body": "posva would change core adding object component context compilation step necessary template able access methods syntax like", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "right repo something achieve using proxy custom plugin", "d": "5/2018"}, {"body": "oops sorry put vuex repository posva elaborate little though think done part custom development instead supported natively builtin behaviour seems inconsistent", "d": "5/2018"}, {"body": "let keep discussion forum get something elaborated feature request note component composition works better web applications works well html structure", "d": "5/2018"}, {"body": "feature", "d": "5/2018"}, {"body": "something interest working", "d": "5/2018"}, {"body": "closing nt follow issue requirements way reproduce", "d": "5/2018"}, {"body": "empty text node preserving white space think", "d": "5/2018"}, {"body": "", "d": "5/2018"}, {"body": "expected whitespace preserved default nt want whitespace filter use preservewhitespace false vueloader options", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "setting different last line please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "5/2018"}, {"body": "sorry messed example try read read source code linked briefly easy see talking title issue asking design decision way", "d": "5/2018"}, {"body": "im sure get question vue detect assignment need set", "d": "5/2018"}, {"body": "posva think jjpandari would like use make property reactive already added like example nt see use case property already exists think would good provide development warning users know done something wrong example previously created without nonreactive think warning like would useful think", "d": "5/2018"}, {"body": "seems fine also think hardly useful warning ok", "d": "5/2018"}, {"body": "chrisvfritz would see logged browser console something would build process thinking taking stab", "d": "5/2018"}, {"body": "runtime dev warning want add", "d": "5/2018"}, {"body": "think valid use case setting set existing properties application code object initially empty call getting object api called get updated object sent api nt really want check property exist using set since would verbose", "d": "5/2018"}, {"body": "fnlctrl bit unclear way issue initially worded chris codepen good example real issue jjpandari real issue created nonreactive property later called nonreactive property expecting would switch property nonreactive reactive pull request added also addressing usage call set nonproduction environment check trying set nonreactive property case would get warning said property reactive", "d": "5/2018"}, {"body": "see though another question make work already nonreactive property nt see limit", "d": "5/2018"}, {"body": "fnlctrl thinking someone first creates unreactive property tries make reactive later reference property two events likely create difficulttodiagnose bug showing warning make property reactive start encourage best practice eliminates window bugs occur", "d": "5/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow btw vuetify discord server", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "issue", "d": "5/2018"}, {"body": "\u89c1", "d": "5/2018"}, {"body": "duplicated", "d": "5/2018"}, {"body": "thx", "d": "5/2018"}, {"body": "ok", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "would even put null type say prop anything done custom validator always returns true", "d": "5/2018"}, {"body": "basic type check matches type also seen mentioned guys quite issues seems work fine regular js", "d": "5/2018"}, {"body": "impossible current typing schema cast manually might change future version exploit conditional type model prop type however might breaking change", "d": "5/2018"}, {"body": "personally prefer rewrite typing schema vue said typing validator impossible current type files let patiently wait vue", "d": "5/2018"}, {"body": "would breaking change vue required specific version typescript nt considered breaking happy help implement", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "5/2018"}, {"body": "please read docs", "d": "5/2018"}, {"body": "still property anymore", "d": "5/2018"}, {"body": "expected behaviour keepalive component removed cached component go", "d": "5/2018"}, {"body": "sanchitgn explicitly convert string eg", "d": "5/2018"}, {"body": "bound value boolean use way nt need falsy values bound elements", "d": "5/2018"}, {"body": "expected behavior", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "5/2018"}, {"body": "either use vcloak separate template", "d": "5/2018"}, {"body": "thank kaelwd good workaround hand wonder worth special handling core though problem might also occur ssr nevertheless write directive like focus input hydrated", "d": "5/2018"}, {"body": "tried fix luck think similar issue trying fix idea wo nt work since works differently nature since runs page loads think solution must calling element component mounted nt find implementation use little guidance possible", "d": "5/2018"}, {"body": "workaround simply avoid using indom templates use string templates precompiled templates instead", "d": "6/2018"}, {"body": "easier workaround add vue attribute", "d": "6/2018"}, {"body": "using vuejs laravel also noticed problem php environment avoid using indom templates acceptable solution working could avoid using vuejs kind things better", "d": "6/2018"}, {"body": "suppose use php also valid workaround nt indom template", "d": "6/2018"}, {"body": "setting new array like fine think actually docs closing question know rules", "d": "4/2018"}, {"body": "totally fine absolutely sure mentioned docs", "d": "4/2018"}, {"body": "nothing vue link reproduces issue vanilla js basically browser feature pressing back button restore final state checkboxes also dom modifications done via javascript ignored scenario speculate browser go link browser takes snapshot final state checkboxes modified javascript second third checked go back browser tries restore state initial load second third checkbox checked vue kicks second checkbox gets unchecked solve simple avoid dom template", "d": "5/2018"}, {"body": "thanks taking time look yaodingyd", "d": "5/2018"}, {"body": "quite interesting problem nt notice translation bug report vue included webpage backforward cache longer works ios safari means navigating back url event prop always equals scroll position get preserved investigation found caused line instance created vue initialization process prevents safari caching page understand correctly uses microtask default used deferring dom event callbacks maybe consider alternative", "d": "4/2018"}, {"body": "long delay quite indeterministic likely revert always using microtasks using fixed edge cases caused problems end", "d": "4/2018"}, {"body": "sodatea could share steps used locate bug seems even assign empty implementation bfcache still work website checking still nt know narrow problems", "d": "5/2018"}, {"body": "anyone may interested debug bfcache setup webkit project follow tutorial debug method vue case fail activedomobject called", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "4/2018"}, {"body": "goodqd \u8fd9\u4e2a const asynccomponent gt \u9700\u8981\u52a0\u8f7d\u7684\u7ec4\u4ef6 \u5e94\u8be5\u662f\u4e00\u4e2a promise \u5bf9\u8c61 component import mycomponentvue \u5f02\u6b65\u7ec4\u4ef6\u52a0\u8f7d\u65f6\u4f7f\u7528\u7684\u7ec4\u4ef6 loading loadingcomponent \u52a0\u8f7d\u5931\u8d25\u65f6\u4f7f\u7528\u7684\u7ec4\u4ef6 error errorcomponent \u6beb\u79d2 delay timeout", "d": "6/2018"}, {"body": "pretty sure missed async components work vue", "d": "4/2018"}, {"body": "looking array perfectly create function loads array components names decided runtime using webpack probably others vue handle promises return component descriptors per prefer factory api feel free create plugin leverages vue async api release plugin closing question btw use official forum discord server questions", "d": "4/2018"}, {"body": "thank attention time excellent work however question sincerely understand frame want use webpack already custom workflow much light easier debug fundamental issue posting feature request current async component api demands component name list want component name list absolutely need function vue receives name components needed runtime dinamically load component name rules please see file current approach", "d": "4/2018"}, {"body": "sorry important question even necessary nt explain simply said absolutely necessary obviously necessary others first time get anyone asking anything like unless strong reason could potentially useful others well nt see convincing reason consider", "d": "4/2018"}, {"body": "even necessary order architecture app hundreds organized components loaded demand crucial part without build step understand high traffic application need optimization opportunities build step provides however company case especially backend engineers want able give maintenance support shipped applications short staffed frontend engineers s\u00f3 leave heavy development us applications require constant changes business requirements want quickly used old way things one page jquery commands think could deliver necessary changes much faster back without build step case performance applications satisfatory clients need deliver changes faster bottleneck development team time time recognize develop modern complex application organized fashion need break components defining clear separation concerns way develop components separately deploy without build step loading asynchronally runtime defined naming pattern structure way components must created rules tell vue load components without predefined component name list without build step would manually mantained reason believe simple change one break backward compatibility simply defining one function gives app opportunity resolve component constructor runtime really shame need really nt possible achieve without modificating framework api constructors pretty well established named components think really nt add complexity future updates framework costly feature designed absolute bare minimum requirements build upon", "d": "5/2018"}, {"body": "want component name list really simple write component loader loads component id runtime", "d": "5/2018"}, {"body": "fnlctrl thank answer considering buildless architecture two problems think top head components loaded dynamically asynchronally every single one replace every single direct component invocation dynamic loader implementation detail obscures unecessarily every component definition noticed dynamic loader example without build step works render functions templates expect backend engineers mantain update nt possible support templates spoiler need one function", "d": "5/2018"}, {"body": "components loaded dynamically asynchronally every single one replace every single direct component invocation dynamic loader component dynamic give invocation different name ca nt would equivalent defined static component name list must least using something like syntax proposed noticed dynamic loader example without build step works render functions templates use templates long use runtimecompiler build vue using render function demo purpose demo using template", "d": "5/2018"}, {"body": "component dynamic give invocation different name ca nt would mean defined static component name list must least using something like syntax proposed exactly beauty elegance approach simply function vue calls searching component constructor definition today already search searches named property component object function vue call voil\u00e1 longer need defined static component name list really awesome check working sites necessary changes diff srccoreinstancelifecyclejs export function initlifecycle vm component vmwatcher null vminactive null vmcomponentloader noop vmdirectinactive false vmismounted false vmisdestroyed false srccorevdomcreateelementjs export function createelement let vnode ns typeof tag string let ctor ns context vnode amp amp context vnodens configgettagnamespace tag configisreservedtag tag platform builtin elements vnode new vnode configparseplatformtagname tag data children undefined undefined context else isdef ctor resolveasset context options components tag else isdef ctor resolveasset context options components tag contextcomponentloader tag component vnode createcomponent ctor data context children tag else unknown unlisted namespaced elements check runtime may get assigned namespace parent normalizes children vnode new vnode tag data children undefined undefined context else direct component options constructor use like javascript myplugininstall function vue options let cache optionscache vueprototypecomponentloader function id id matches expected pattern return component constructor probably async constructor otherwise return nothing normal process continues var factory cache id factory return factory var prefix optionsprefixtolowercase var plen prefixlength idsubstr plen tolowercase prefix var path idsubstr plen replace g var last pathlastindexof last pathsubstr cache id factory getloader path last return factory function getloader path last load component ajax return function resolve reject var html js var done function done html amp amp js jstemplate html resolve js var href optionsbaseurl path last utilsloadscript hrefjs function err err return reject message error loading component path script error err js optionscomponentmap path done utilsloadajax url hrefhtml cb function err response err return reject message error loading component path template error err html response done utilsloadstylesheet hrefcss function err err consolelog error loading stylesheet component path css optional stop component created vueuse myplugin prefix myprefix baseurl mybaseurl components component defines constructor global variable makes script easy debug developer tools componentmap myglobalvarcomponents already spent much time writing answer second point later thank", "d": "5/2018"}, {"body": "similar need environment nt allow use node webpack also support ie yuck reverted storing templates strings separate file tried use never worked", "d": "7/2018"}, {"body": "warp component function import example load component click e fired load compnent const helloworld gt import componentshelloworldvue export default name home data return toggler false components helloworld", "d": "9/2018"}, {"body": "creativspeed thank question simply async components already exist problem need function already registered component loaded modifications pr exactly register load component called template", "d": "9/2018"}, {"body": "misnamed getter please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "4/2018"}, {"body": "posva thanks reply made many changes debug missed typo anycase changed yet options still rendering please reopen", "d": "4/2018"}, {"body": "sorry besides repro contain full server create simple codesandbox maybe fetch data server extra setup needed take quick look", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "issue automatically closed", "d": "4/2018"}, {"body": "property name used component template issue closed nt meet requirements new issues please use issue helper create new issue", "d": "4/2018"}, {"body": "please read bot message explains exactly closed issue", "d": "4/2018"}, {"body": "work single space space", "d": "5/2018"}, {"body": "would anyone write code way", "d": "5/2018"}, {"body": "syntacticsolutions nt matter fact bug right", "d": "5/2018"}, {"body": "thanks danielsharkov bug root cause different behavior indent bellow maybe add r pattern text interpolation regexp", "d": "5/2018"}, {"body": "expected getusers keeps original value return function replaces db users array", "d": "4/2018"}, {"body": "woops figured wrong exactly thanks answer future reference interested gon na explain little problem misconception regarding arguments passed functions js forgot mutable objects arrays plain objects opposed primitives passed reference callbyreference copy referenced object callbysharing meaning mutate referenced object reassign local scope original object wo nt updated bad", "d": "4/2018"}, {"body": "works using instead though", "d": "4/2018"}, {"body": "tested captured allocation timeline dom nodes retained pressing go back means correctly gced pressing collect garbage wo nt effect something already gced", "d": "4/2018"}, {"body": "oh sorry blindly trusted performance monitor tab added click dummy component dom nodes js event listeners successfuly gced visible taking snapshot memory", "d": "4/2018"}, {"body": "hmm reproduce issue opened page pressed add button couple times sure nt pages renderer process", "d": "4/2018"}, {"body": "video sure nt pages renderer process recorded one tab open", "d": "5/2018"}, {"body": "use something like getclass return staticclass whatever want return", "d": "4/2018"}, {"body": "armandomendivil feature request data objects specifically often used functional components question issue", "d": "4/2018"}, {"body": "functional component nt need merge outer classes", "d": "4/2018"}, {"body": "guess assumed option accept objects actually accepts string literals need proposed alias", "d": "4/2018"}, {"body": "guess assumed option accept objects actually accepts string literals think assumption fault nt make clear current docs fixing also honestly forgot accepts interface class binding including arrays well", "d": "4/2018"}, {"body": "chrisvfritz fault know vue demonstrating old story happened documentation happen others fnlctrl object string array know works thing different case result lot vue plugins libraries use little frustrating documented alias would great way make accessible seems obvious doc", "d": "4/2018"}, {"body": "staticclass different class little frustrating documented nt understand undocumented behaving different could reason include another alias intentionally left undocumented reduce api surface avoid questions people may though fact stable enough use production would never removed vue enforces strict compatibility different versions runtimecompiled code seen libs use want use cool intended part public api would remain undocumented", "d": "4/2018"}, {"body": "maybe warning would better nothing alias chrisvfritz idea better nothing intentionally left undocumented reduce api surface hurting helps", "d": "4/2018"}, {"body": "templates makes possible use counter intuitive nt work could left undocumented least work", "d": "4/2018"}, {"body": "made work introduce complexities work arrayobjects like merged take precedence override nt see value adding another way exactly thing potentially lead confusions already good enough solve original use case already one single way bind classes throughout documentation see need introducing another alias breaks consistency", "d": "4/2018"}, {"body": "could work element already within templates another alias breaks consistency consistency already broken since nt included normal html attributes", "d": "4/2018"}, {"body": "could work class static element already within templates made work string literals make note documentation nt work arrayobjects merges normal instead overriding people would recall look docs touching code uses imo unnecessary mental burden consistency already broken since class nt included normal html attributes meant using exact one way achieve exact one goal documentation beginning stated clearly vue use field manipulate classes technically special html attribute native dom api use manipulate classes styles unlike attrs use nt see sane tutorial would tell people manipulate classesstyles something potentially confusing probably better introduce first place", "d": "4/2018"}, {"body": "lot vue plugin libraries use little frustrating documented emileber understand frustration tricky situation still think end result documenting would confusion people misuse nt fully understand subtle behavior attrs alias would great way make accessible seems obvious doc fnlctrl still agree would useful html attributes intuitive users allowed thinking though emileber think nt easily feasible way handle internally may something fix without breaking changes give little background find way currently treat problematic html attributes nt ca nt included nt included nt respect long story short agree obviously great work inside may something wait vue general overhaul", "d": "4/2018"}, {"body": "understand discussion documented issues better nothing thanks guys", "d": "4/2018"}, {"body": "another confusing thing remembered static classes applied functional component parent applied default like normal component present data object properties available undocumented", "d": "5/2018"}, {"body": "pretty sure feature request already could nt find since api freeze nt think add nt feel readable explicit vifvelse inconveniences switch statement one code smell adding many ifelse harder adding many switch cases instead could probably refactor code multiple functions templates time nt many vifvelse sometimes easier write render function", "d": "4/2018"}, {"body": "agree lot logic inlined templates like generally code smell awkward test maybe computed property method used instead said feature would probably difficult implement brief look around nt see anything npm looking small side project interest iwe could work", "d": "4/2018"}, {"body": "really nt much free time skills nt think interested see done lol think would valuable lot people", "d": "4/2018"}, {"body": "might try give shot week one downside need extra outer div anyway might closed soon throw link come anything", "d": "5/2018"}, {"body": "awesome happy help way testing etc", "d": "5/2018"}, {"body": "updates", "d": "5/2018"}, {"body": "sorry small hack nothing usable yet try get working state weekend thanks reminder", "d": "5/2018"}, {"body": "try repo npm demo similar proposed api nt work since expression javascript needs string variable named work progress leave issue input nt tested super heavily seems working okay let know useful might expand api match javascript statement etc", "d": "5/2018"}, {"body": "cool give try middle perfect use case", "d": "5/2018"}, {"body": "vdefault would cool", "d": "5/2018"}, {"body": "lmk going seems useful add pretty easily ps use case", "d": "5/2018"}, {"body": "simple use case right last option could vdefault", "d": "5/2018"}, {"body": "cool working expected application hope add pretty easily probably tonight within maybe make issue repo move discussion away issue", "d": "5/2018"}, {"body": "thinking could implement switch vue completely untested solution use components rather directives benefit nt render additional html switch cases render functions bring child components", "d": "5/2018"}, {"body": "pretty neat vuecompose library looks cool well check constantly learning new neat things vue either works personally think directive api little readable said think happy write render function use regular statement js posva alluding earlier", "d": "5/2018"}, {"body": "let close api freeze wo nt add enough benefits worth adding happen many ifelse conditions refactor code multiple components use computed property display one use render function either use function refactor statement also possible directly write", "d": "5/2018"}, {"body": "benefits quite debatable add things mainjs file case something implemented loader plugin feel free create feel useful people", "d": "4/2018"}, {"body": "debatable debate thanks", "d": "4/2018"}, {"body": "said something implemented loader plugin added vue core also prefer keeping things explicit vue please next time keep negativity away opening commenting appreciated", "d": "4/2018"}, {"body": "stumbled upon found culprit would nice execute object maybe reason like", "d": "5/2018"}, {"body": "think better component options structure json changed json maybe", "d": "5/2018"}, {"body": "case representing object string tostring made believe jsonstringify used make prettier outputs object array nice tostring formatting might get around checking object tostring method last prototype chain way use tostring added prototype", "d": "5/2018"}, {"body": "right checking object tostring parameter object tostring edited file", "d": "5/2018"}, {"body": "comprehension looks good thanks want submit pr", "d": "5/2018"}, {"body": "mathieutu umm tested failed like bash summary tests completed tests failed failed tests directive vhtml support value types phantomjs linux expected webpack lt shift webpack lt webpack lt flushcallbacks webpack lt directive vtext support value types phantomjs linux expected webpack lt shift webpack lt webpack lt flushcallbacks webpack lt make elaborate", "d": "5/2018"}, {"body": "take look get time likely next monday", "d": "5/2018"}, {"body": "hey guys took time work night thanks help", "d": "5/2018"}, {"body": "mathieutu looks good using something like checks method overwritten without comparing values think would better performance", "d": "5/2018"}, {"body": "actually kind already nt compare values function references tostring defined difference check value plain object place value used ca nt say anything term performance", "d": "5/2018"}, {"body": "mathieutu ah nt know used way awesome maybe isplainobject check needed maybe move last check could performance testing", "d": "5/2018"}, {"body": "ok tested solution complicated test nt work test value like result one want needed avoid arrays fact could make comparison arrays tried benchmark tests nt anything really relevant ways", "d": "5/2018"}, {"body": "mathieutu use check object returned works fine check also seems work correct way checking case", "d": "5/2018"}, {"body": "mathieutu hmmm happens compare trying avoid seems like work objects method", "d": "5/2018"}, {"body": "gaya nt time right explain everything let play unit tests test arrays avoiding ca nt really count nt know first prototype val check doc", "d": "5/2018"}, {"body": "selenium devdependency version affect", "d": "4/2018"}, {"body": "party plugin issue even related vue reported vuerouter repo route object immutable mapping current url design never attempt mutate route object instead trigger navigation", "d": "4/2018"}, {"body": "feature javascript related vue variables reference object look deep clone solve problem", "d": "4/2018"}, {"body": "setting method pandemm said references javascript", "d": "4/2018"}, {"body": "regex second rule starts comment first rule reason issue comment breaks attribute style properties comment ignored coming effect true breaks second property properties preserved working improving update pr ready", "d": "4/2018"}, {"body": "honestly though ca nt think good reason use support need comments inline styles probably use object computed property adding extra logic handle incurring perfcode sizemaintenance cost", "d": "4/2018"}, {"body": "maybe case use developmentscaffolding temporarily disable properties technique chrome uses unchecking single property web tools opinion vue strive far possible change behavior templates understand nt prioritize", "d": "4/2018"}, {"body": "existing regex changed top head leave posva take call whether would like pr imo would like vue allow", "d": "4/2018"}, {"body": "blur event triggered input removed condition becomes false normal browser behaviour vue nothing", "d": "4/2018"}, {"body": "unfortunately html limitation tag names converted lower case limited using vue files please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "4/2018"}, {"body": "using work fine said cases trying control behaviour precisely harder creating necessary methods restore state need", "d": "4/2018"}, {"body": "posva actually written earlier use case big template inside using named use would mean maintain two templates exactly except keep alive wrapper hence looking boolean turn functionality onoff something like following would much better", "d": "4/2018"}, {"body": "see concern one cases wher jsx easier templates nt need write chunk code twice since using exact component thought using hooks related", "d": "4/2018"}, {"body": "sure easytough would add jsx typescript vueclasscomponents easy would translate code jsx event hinting manually destroy component true think would code smell case actually code interface developers open component dialog extra options like following ts import tiles componentstilesvue import ceiling componentsceilingvue import sdialog servicessdialog imports component export default class settings extends vue someopendialogmethod sdialogopen component tiles keepalive true options like anotheropendialogmethod sdialogopen component ceiling keepalive false may boolean dynamic options like", "d": "4/2018"}, {"body": "small generic functional component easily achieve conditional wrapper element javascript conditionalwrapperjs export default functional true props tag type string default div show boolean render h ctx return thisshow h ctxpropstag ctxdata ctxchildren thisslots default html headerpropstitle fullscreenexit fullscreen dialogoptionsfullscreen fullscreen fullscreen close close", "d": "4/2018"}, {"body": "linusborg thanks man cool solution", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "expected nonprops bound attributes actually feature scenario use computed property return object adapted component solve problem", "d": "4/2018"}, {"body": "afraid answer completely clear ca nt omit property custom component passed component used within look mycell component implementation maybe nt understand idea correctly", "d": "4/2018"}, {"body": "ah ok forget computed property thing need prevent attribute added root element component nt declared prop either declare prop yeah sounds dumb use functional component props option everything prop easily set false nt automatically set nonexistent props attributes hope helps", "d": "4/2018"}, {"body": "nt understand issue vue able mobx use vue hidden ui control subcomponents think work like description", "d": "4/2018"}, {"body": "yeah testing evaluating bunch different frameworks store combinations clear someone would really even need mobx vue since could set store vue instance dataprop would become reactive existence vuemobx repo made bit confusing closing however one thing note maybe eventually providing demo vue vs react mobx would help clarify far scope vue really", "d": "4/2018"}, {"body": "use vue nonui instance actually whole idea behind global bus pattern antipattern way vuex store actually wrapped vue instance see details wrapper providing extra features", "d": "4/2018"}, {"body": "nt post vuerouter repository", "d": "4/2018"}, {"body": "please nt create duplicate issues leave open", "d": "4/2018"}, {"body": "use templates nt refer vue instance", "d": "4/2018"}, {"body": "posva get correct initial value", "d": "4/2018"}, {"body": "sure nt use templates access data", "d": "4/2018"}, {"body": "change compiled template depending function scope", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "4/2018"}, {"body": "reproduction link defined components component", "d": "4/2018"}, {"body": "badnow corrected mistake changed repo link problem still remains", "d": "4/2018"}, {"body": "always better use computed property watcher see api docs", "d": "4/2018"}, {"body": "thank reply nt perform domdependent operations updated hook calledand according vue lifecycle one component destroyed updated hook nt calledbut repo condition happensi ca nt figure happens", "d": "4/2018"}, {"body": "met problem news", "d": "5/2018"}, {"body": "maybe work together hahaha", "d": "5/2018"}, {"body": "please provide valid repro", "d": "4/2018"}, {"body": "use parent", "d": "4/2018"}, {"body": "thanks somewhere docs use case mean would really helpful others", "d": "4/2018"}, {"body": "fact yes would helpful docs nt know nt open pr docs", "d": "4/2018"}, {"body": "darkylmnx sorry poor documentation add later", "d": "4/2018"}, {"body": "kazupon prob thanks", "d": "4/2018"}, {"body": "sure open another issue asking since functional components instance possibile use local components absolutely defined components globally nt said docs either update seems discussed", "d": "4/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow nt manually remove vue relies element normal removed", "d": "4/2018"}, {"body": "works setting element therefore work nt produce element", "d": "4/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow need correctly pass slots", "d": "4/2018"}, {"body": "oops thanks listview global nt want set name listview need set name uservue", "d": "4/2018"}, {"body": "expected please see", "d": "4/2018"}, {"body": "thanks properties start proxied vue instance may conflict vue internal properties api methods access vm dataproperty", "d": "4/2018"}, {"body": "actually use want dynamic elementcomponent template render functions allow dynamically build dom tree end different trees", "d": "4/2018"}, {"body": "oh idea accepts actual components plain element tags thanks feature nt seem documented least clearly room improvement believe working fiddle demo case anyone else stumbles question", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "still much please take time boil strict minimum electron extra file download leak best simple html file think use forum discord server stackoverflow first could find answer", "d": "4/2018"}, {"body": "already people discord look issue seemed quite competent nobody see issue code small case already leading actually interested looking problem happier close issues resolve sat apr eduardo san martin morote lt notifications githubcom wrote closed receiving authored thread reply email directly view github mute thread", "d": "4/2018"}, {"body": "nt interested looking problem would nt asked smaller repro asked smaller repros repros way smaller repro contains electron components router store one module top ask us download extra file huge even leakspeed issue looking someone else fix problem free people want help open source project spend time boil issue see difference clearly every week top attitude clearly showing willing help personally attacking something tolerate", "d": "4/2018"}, {"body": "please also remember current version using beta clearly explained release notes could cause issues supply performance profile information much simplier situation reproduce could dealt likely even vue issue forsee going garbage collection issue update cycle blocked gc", "d": "4/2018"}, {"body": "please provide repro using jsfiddle github repository make sure provide boiled reproduction download file like security reasons closing valid repro provided", "d": "4/2018"}, {"body": "okay boiled reproduction github repository requested", "d": "4/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "4/2018"}, {"body": "wrote issue make sure problem bug asked irc chats discord ventrilo ts nobody answered put issue way thanks somebody helped issue", "d": "5/2018"}, {"body": "glad found problem fyi reporting issues make sure provide boiled repro external dependencies problem come", "d": "5/2018"}, {"body": "duplicated", "d": "4/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "4/2018"}, {"body": "thinking today think makes sense make consistent always return array", "d": "4/2018"}, {"body": "cool would great possible without breaking existing code way think allow return either single node array contains single node would still work feasible sound like horrible idea something simple seems work testing diff else vnode vmvnode arrayisarray vnode amp amp vnodelength vnode vnode return empty vnode case render function errored vnode instanceof vnode processenvnodeenv production amp amp arrayisarray vnode warn multiple root nodes returned render function render function return single root node", "d": "4/2018"}, {"body": "commentary still run problem every day edit seems problem actually fixed libraries nt updated return problem really confusing though", "d": "9/2018"}, {"body": "please make sure nt come first come back vueonly repro also impossible us look amount code please boil strict minimum", "d": "4/2018"}, {"body": "indeed sorry false alarm", "d": "4/2018"}, {"body": "mixin nt bring style actually meant pure js objects vue components template meant mix logic want share style components much easier natural create separate file import one said something would need fixed vueloader injected mixins meant used", "d": "4/2018"}, {"body": "posva thanks reply think right mixin pure objects logic try use instead still get error", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "programmatically invoke event scenario event dispatching possible bubbling happen synchronously think current nexttick implementation right", "d": "4/2018"}, {"body": "jake archibald loop jsconfasia", "d": "4/2018"}, {"body": "yaodingyd sodatea see thank guys", "d": "4/2018"}, {"body": "purposely removed coerce achieved computed property sanitizer thing actually created plugin may find fr help", "d": "4/2018"}, {"body": "leveraged behaviour small package case interested", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "html limitation always use kebabcase attribute names make sure code works dom templates vue sfc", "d": "4/2018"}, {"body": "looks like bug chrome", "d": "4/2018"}, {"body": "hauntedsmores could report chromium", "d": "4/2018"}, {"body": "javoski posva thanks guys ill put chrome bug", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "4/2018"}, {"body": "works fine fiddle posted revisit add correct steps reproduce fix repro thanks", "d": "4/2018"}, {"body": "working fine template tag missing source need template tag remain source code use jquery later laraveladmin works", "d": "4/2018"}, {"body": "even put template tag inside div vpre tag rendered missing", "d": "4/2018"}, {"body": "ah nt get said first place sure good idea template special meaning html moment use completely escape html indeed leave compilation phase", "d": "4/2018"}, {"body": "hi use giving template tag one outside vuejs exactly problem using vhtml works complicate works would nice easier vpre works template tag thanks", "d": "4/2018"}, {"body": "familiar laraveladmin solve problem", "d": "4/2018"}, {"body": "maybe work template tag inside blade file put script inside root vue element get another warning think moment vhtml best way thanks", "d": "4/2018"}, {"body": "please follow issue reporting guidelines ask questions forum discord server gitter stackoverflow", "d": "4/2018"}, {"body": "raised evernote web clipper disable extension make chrome get rid error", "d": "8/2018"}, {"body": "gentle ping thanks", "d": "4/2018"}, {"body": "think need change vue core doable vueloader plus necessary vue plugins btw editor looks pretty cool", "d": "4/2018"}, {"body": "definitely understand fact something anyone would want course need core primary concern get vue squad board maybe get help guys implementing changes also trying reach react angular teams parallel speak familiar vue codebase time one trying tie loose ends together help would appreciated", "d": "4/2018"}, {"body": "add source info start amp end index add template compiler module pr get merged", "d": "4/2018"}, {"body": "gzzhanghao looks great thanks feature separate pr instead making big pr even bigger", "d": "4/2018"}, {"body": "note use von onclick vue detect later workaround adding one elements", "d": "4/2018"}, {"body": "noted onclick attribute test issue use case link von clickonce supposed call server one supposed redirect another page js involved issue click link redirect actually call server thanks help works adding key attribute", "d": "4/2018"}, {"body": "want prevent default action event please use modifier", "d": "4/2018"}, {"body": "seems properly destroyed", "d": "4/2018"}, {"body": "english native speaker best describe reason problem element reuse existing elements usually reused efficiency rendering want make function like want need add key input key must unique value", "d": "5/2018"}, {"body": "\u4e0e\u5176\u6bcf\u6b21\u4fee\u6539\u5b8c\u90fd\u8981\u8bb0\u5f97 \u4e0d\u5141\u8bb8\u76f4\u63a5\u7528\u7d22\u5f15\u64cd\u4f5c\u6570\u7ec4 \u6bcf\u6b21\u64cd\u4f5c\u5b8c\u4e0d\u8981\u5fd8\u8bb0 \u5c31\u4f1a\u9020\u6210\u5927\u91cf\u7684\u4f7f\u7528 set \u6216\u662f\u6570\u7ec4\u4e0b\u53d8\u5f02\u7684\u65b9\u6cd5", "d": "4/2018"}, {"body": "\u548c class gt \u800c\u4e14\u5982\u679c\u7528 set set \u8fd8\u6709\u5c31\u662f\u65b9\u6cd5\u7684\u8c03\u7528\u60c5\u51b5 \u4f46\u662f\u5982\u679c\u662f\u7528 apply apply", "d": "4/2018"}, {"body": "\u89c6\u56fe\u66f4\u65b0\u662f\u5f02\u6b65\u7684 \u591a\u6b21\u8c03\u7528 set", "d": "4/2018"}, {"body": "set \u4f1a\u8c03\u7528\u591a\u6b21 dep notify \u800c\u4e14\u4e0d\u662f\u8ba8\u8bba set apply", "d": "4/2018"}, {"body": "vue notify", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "\u73b0\u9636\u6bb5 vue \u7684\u4e00\u4e2a\u539f\u5219\u662f\u9664\u975e\u6709\u91cd\u5927\u610f\u4e49\u5426\u5219\u4e0d\u6dfb\u52a0\u65b0\u7684", "d": "4/2018"}, {"body": "\u55ef \u53ea\u662f\u4e2a\u5efa\u8bae", "d": "4/2018"}, {"body": "since api freeze already feasible pretty much extra code still edge case probably happen move inside handler create watcher hook sure one enough nt know code", "d": "4/2018"}, {"body": "luoxlgh also write wrapper function", "d": "4/2018"}, {"body": "posva thanks luoxlgh team want call watch handler first time second advice hook helps us solve problem better calling watch handler nexttick time maybe learn lifecycle hooks called", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "4/2018"}, {"body": "repro nt run ie function shorthand objects fixed runs properly ie", "d": "4/2018"}, {"body": "confirm whitespace options return whereas works fine chrome instance littlegrayss asked considered bug handled vue thank", "d": "4/2018"}, {"body": "white space tag removed used option value would return undefined ca nt say desirable vue enforce trimming white space tag better include first place", "d": "4/2018"}, {"body": "using inbrowser templates selfclosing tags working expected anything containing map nt working things passed vue expect element indeed warn existing element warning button changing title issue reflect", "d": "4/2018"}, {"body": "ah forgot valid html element even nt use selfclosing tags component named nt work", "d": "4/2018"}, {"body": "work need use beacuse browser use uppercase element names", "d": "4/2018"}, {"body": "hmm ok well seems uppercase works first character foobar gt works foobar gt nt work", "d": "4/2018"}, {"body": "checkout style guide section docs help", "d": "4/2018"}, {"body": "ok thanks case warnings would useful wasted quite hours trying figure wrong", "d": "4/2018"}, {"body": "posva comparison reserved vue html tags vs specs already vue html mdn whatwg abbr abbr abbr acronym address address address applet area area area article article article aside aside aside audio audio audio b b b base base base basefont bdi bdi bdi bdo bdo bdo bgsound big blink blockquote blockquote blockquote body body body br br br button button button canvas canvas canvas caption caption caption center cite cite cite code code code col col col colgroup colgroup colgroup command content content data data data datalist datalist datalist dd dd dd del del del details details details dfn dfn dfn dialog dialog dialog dir div div div dl dl dl dt dt dt element element em em em embed embed embed fieldset fieldset fieldset figcaption figcaption figcaption figure figure figure font footer footer footer form form form frame frameset head head head header header header hgroup hgroup hgroup hr hr hr html html html iframe iframe iframe image img img img input input input ins ins ins isindex kbd kbd kbd keygen label label label legend legend legend li li li link link link listing main main main map map map mark mark mark marquee menu menu menu menuitem menuitem meta meta meta meter meter meter multicol nav nav nav nextid nobr noembed noframes noscript noscript noscript object object object ol ol ol optgroup optgroup optgroup option option option output output output p p p param param param picture picture picture plaintext pre pre pre progress progress progress q q q rp rp rp rt rt rt rtc rtc ruby ruby ruby samp samp samp script script script section section section select select select shadow shadow slot slot small small small source source source spacer span span span strike strong strong strong style style style sub sub sub summary summary summary sup sup sup table table table tbody tbody tbody td td td template template template textarea textarea textarea tfoot tfoot tfoot th th th thead thead thead time time time title title title tr tr tr track track track tt u u u ul ul ul var var var video video video wbr wbr wbr xmp edited posva collapsed table took much space", "d": "4/2018"}, {"body": "warnings work components registered globally eg imported registered locally warnings triggered eg html import map jscomponentsmap export default components map", "d": "4/2018"}, {"body": "case warnings would useful wasted quite hours trying figure wrong pqvst use indom template vue warn use something like parsed browser first vue got element tagname", "d": "4/2018"}, {"body": "thinking working upload pr", "d": "4/2018"}, {"body": "able find error coming vue function errors always link instead error coming", "d": "6/2018"}, {"body": "ok working browser default setting tag names lowercase vue still looking elements upper case letters resulting working proof need replace everything else stay", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "children", "d": "4/2018"}, {"body": "vonce vfor iteration rendered ex children originally child added later child rendered scenario key provided vfor idea patch element inplace ex item example existing children rerendered hence binding persists jsfiddle example comp behaving expected vfor vonce placed vfor child text change jsfiddle example component behaving expected vfor vonce placed vfor child yay yay text change hell naw bug given expected behavior vfor still bound data render children array count changes child render scenario vonce behavior required children parent short behavior currently consistent except component element js line working fine line", "d": "4/2018"}, {"body": "may chromium bug preact similar issue", "d": "4/2018"}, {"body": "works fine end closing looks similar yaodingyd shared", "d": "4/2018"}, {"body": "get following errors try jsfiddle would nice would fix", "d": "4/2018"}, {"body": "also line refers current current vue instance instead write", "d": "4/2018"}, {"body": "timotheejeannin said need use arrow function valid", "d": "4/2018"}, {"body": "apologies timotheejeannin posva fairly new vuejs still learning curve problem actually arrow function actually directive rendering data function utilising module make http request curious know works local production environment something wrong would love insights", "d": "4/2018"}, {"body": "warning dev mode would fine", "d": "4/2018"}, {"body": "set element prop attribute attribute taken account upon page loading setting attribute would worthless", "d": "4/2018"}, {"body": "humbly ask reconsider issue correct taken account upon page load using prerendering serverside rendering property present upon page load also using standard clientside rendering implementation call template render browser honor property regardless thank hard work excellent product", "d": "4/2018"}, {"body": "indeed useful ssr nt checked added yet", "d": "4/2018"}, {"body": "see", "d": "4/2018"}, {"body": "working update created pr", "d": "4/2018"}, {"body": "nt bug using index key", "d": "4/2018"}, {"body": "kaelwd hahaha hours life lost trifle thanks", "d": "4/2018"}, {"body": "technical restriction due javascript", "d": "4/2018"}, {"body": "posva tell exactly technical restriction", "d": "4/2018"}, {"body": "js objects references please ask questions forums discord server", "d": "4/2018"}, {"body": "ca nt copy data object hood benefits using function instead deep cloning objects copy data object hood causes heavy performance overhead bloated code deep clone implementation better use function create fresh object every time", "d": "4/2018"}, {"body": "posva thanks yes mean ca nt use clone data object", "d": "4/2018"}, {"body": "deep", "d": "4/2018"}, {"body": "probably reason vnode update mechanism since deleted element parentnode null could successfully insert made following changes code shows normally", "d": "4/2018"}, {"body": "generally bad idea remove elements directive vue also control specific example basically", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "adding select elements one fixes issue", "d": "4/2018"}, {"body": "use keys", "d": "4/2018"}, {"body": "see code wrong error console check make sure using nonminified version vue test please check opening issue open issue please boil make sure actually bug always ask questions often get faster answers forum discord server stackoverflow", "d": "4/2018"}, {"body": "problem coming keyboard emitting events although think intented imagine implement workaround vue core would terrible impact need still workaround bigger delay specific input", "d": "4/2018"}, {"body": "reproduce maybe happening specific browser case please specify issue closing details provided", "d": "4/2018"}, {"body": "os uname linux dontshootme smp wed mar utc gnulinux browser mozilla firefox bits also tested os android browser firefox mobile os android browser firefox mobile behaviour present", "d": "4/2018"}, {"body": "tested latest firefox everything worked fine", "d": "4/2018"}, {"body": "reproduce windows firefox happening chrome edit also works fine ie edge", "d": "4/2018"}, {"body": "yes test done latest firefox browser mozilla firefox bits click try mutliple click fiddle unstable sometimes behavior appears sometimes", "d": "4/2018"}, {"body": "hi posva little know thank", "d": "5/2018"}, {"body": "tested firefox nt flicker may browser plugin something nt look like vue problem", "d": "5/2018"}, {"body": "tested firefox windows experience flickering transitioning div removed new div nt come tick probably windows firefox issue sure anything vue could workaround could add constant height wrapper around transitioning elements", "d": "5/2018"}, {"body": "fnlctrl seems like windows firefox issue gt tested linux android thank answers", "d": "5/2018"}, {"body": "oh yeah updated docs good chance make contribution", "d": "4/2018"}, {"body": "posva mean intentional probably leaving item open either sync supports kebab docs updated would nice", "d": "4/2018"}, {"body": "related vue happens without vue well probably chrome bug report", "d": "4/2018"}, {"body": "please reduce reproduction whole projects valid repros", "d": "4/2018"}, {"body": "feature request devtools core", "d": "4/2018"}, {"body": "logs also shows user instantiated views name like component", "d": "4/2018"}, {"body": "idk exactly got implemented checked working", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "already access every property", "d": "4/2018"}, {"body": "yeah know access template talking", "d": "4/2018"}, {"body": "access context render function case write template", "d": "4/2018"}, {"body": "yeah knew well thinking might useful access context script tag example access vuex store using ssr anyway get closer coverage render function sfcs nt deem useful enough worth issue close conversation otherwise try pr get bit spare time", "d": "4/2018"}, {"body": "need full javascript access better use render function", "d": "4/2018"}, {"body": "see thank", "d": "4/2018"}, {"body": "wontfix reasoning necessary encode html entities inside attribute values decoding map html parser handling browsers autoencoding behavior example extract element browsers return instead decoding vue performs meant type edge cases simply put encoding anything inside attributes want vue handle case showed repro need convincing reason first place", "d": "4/2018"}, {"body": "use case include newline char aka code html entity inside html title attribute think legit reason use encoded char template", "d": "4/2018"}, {"body": "also template source come anywhere necessarily existing part dom extract outerhtml case pulling html standalone html template file seems intuitive valid html html file interpreted properly vue used template", "d": "4/2018"}, {"body": "thanks least understanding issue giving meaninful response posva grasping previous issues", "d": "4/2018"}, {"body": "similar usecase kidplug like newlines inside title attributes vue wo nt allow though could considered edgecase fairly common requirement", "d": "4/2018"}, {"body": "workaround", "d": "4/2018"}, {"body": "thank much arrived close using title data computed properties closer native shame ca nt intuitive approach perhaps directive passthrough vanilla html attributes", "d": "4/2018"}, {"body": "want set unicode icon font html attribute css like html like think better way thank much", "d": "5/2018"}, {"body": "workaround mentioned api doc ran placeholder", "d": "5/2018"}, {"body": "new vue el app template components app something changed version", "d": "4/2018"}, {"body": "tried fiddle could nt repro please next time provide actual repro fiddle similar edit actually using instead inside normal variable gets set exactly using", "d": "4/2018"}, {"body": "sorry referring", "d": "4/2018"}, {"body": "typo exactly try inside javascript linter able catch", "d": "4/2018"}, {"body": "arrow function work change context value use regular functions please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "4/2018"}, {"body": "please nt open duplicate issues obligation framework x support behavior framework", "d": "4/2018"}, {"body": "also use escape codes", "d": "4/2018"}, {"body": "posva thank disappointed", "d": "4/2018"}, {"body": "think tradeoff maintainability supporting mustaches inside mustaches would increase complexity code parser means possible bugs uncommon use plain strings mustaches inside mustaches easy workaround use variable computed property probably common use case js escape character using computed property make code maintainable situations faster", "d": "4/2018"}, {"body": "use", "d": "4/2018"}, {"body": "think following example workaround would work myulfuncjs import myulfunccss export default functional true render h context const data contextdata props contextprops tag ul name slide return h transitiongroup data contextchildren myulfunccss slidemove transition transform cubicbezier render everything need regardless think workaround exists still would great able sfc", "d": "4/2018"}, {"body": "would also work sfc ugly", "d": "4/2018"}, {"body": "hi thanks filling issue functional components nt share behavior automatically applying attributesclassesstyles stateful components documented normal components attributes defined props automatically added root element component replacing intelligently merging existing attributes name functional components however require explicitly define behavior skipping auto binding behavior would remove performance overhead always merging classesstylesattirbutes normal components functional components made fast design using last comment actually correct way workaround", "d": "4/2018"}, {"body": "ugly", "d": "4/2018"}, {"body": "btw nothing passing class style functional component even annoying work regular functional component written javascript depicted previous example ca nt least make functional components behave without additional plumbing", "d": "4/2018"}, {"body": "may possible future change behaviour flexibility past templates functional components nt possible made sense pass js also easier", "d": "4/2018"}, {"body": "thinking would possible use vue file render function one mentioned looking single file containing everything like sfc fail see point separate css file describe animation keyframes", "d": "4/2018"}, {"body": "think sfc seem powerful like much export default functional true render h data children gt children slidemove transition transform cubicbezier elegant", "d": "4/2018"}, {"body": "would also use feature pretty extensively writing powerful mixins work functional components becomes much difficult nt access options object rendering context", "d": "4/2018"}, {"body": "forgot ask could please share specific scenarios would useful also keep mind already possible putting object variable exporting", "d": "4/2018"}, {"body": "use case writing mixin handle reading checking type list custom property vue components checks attributes applies specific css attribute name matches given types specified vue instance type property works fine full nonfunctional components functional components ca nt access custom properties render function ca nt access type properties set nt exist object actually composing styles component fine export option seems odd nt present object given vue instance attributes", "d": "4/2018"}, {"body": "one scenario project want make vue route components responsive javascript const baseresponsive functional true render h context options extended component ca nt accessed base render workaround using injections looks weird let component contextinjectionscomponents getdevicetype return h component contextdata const routes path foo component extends baseresponsive inject components default desktop mobile path bar component extends baseresponsive inject components default desktop mobile", "d": "4/2018"}, {"body": "caikan quite different need import vue files see", "d": "4/2018"}, {"body": "would write mixin functional components apart", "d": "4/2018"}, {"body": "initial idea let functional components extended dynamically extended components render logic different options think found another workaround using factory function", "d": "4/2018"}, {"body": "posva custom options great options writing mixins encapsulate reusable behavior nt rely reactive data would nice able use custom properties mixins forced pollute prop list things nt going change publicly exposed component api properties accessible mixin", "d": "4/2018"}, {"body": "still nt get trying share piece code please", "d": "4/2018"}, {"body": "sure disclaimer though fairly new vue pretty extensive experience front end frameworks new adopting vue real chance something ridiculous unintuitive use case nt strike way personally suppose mixin takes custom property types component definition assuming present checks matching attributes component host element concatenates string styles derived attributes specified component element match type specified component definition might using styled components hopefully familiar library suppose component define base styles fontsize typographysizemedium color colorsblack add styles based types provided attributes context optionstypedstyles set mixin return context slotsdefault types bright dark bold light mixin import keys intersection values lodash export default beforemount function let styles looks intersection components attribute specified types intersection keys optionstypes values attrs foreach gt styles stylesconcat thistypes concatenates styles attaches custom options component optionstypedstyles styles unfortunately work object provided render function", "d": "4/2018"}, {"body": "lifecycle functional components call render thing put mixin functional components props edit oh inject may missing think instead set functions return object options directly use object render function also looks straightforward imo", "d": "4/2018"}, {"body": "ah nt realize lifecycle methods nt exist functional components like said vue newb yes actually ended suggested end probably cleaner figured give original use case case gave additional perspective original request", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "supposed work use computed property instead", "d": "4/2018"}, {"body": "write code error amp see really expected return value expected result svelte svelte example", "d": "4/2018"}, {"body": "also escape", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "unfortunately something vue anything garbage collection fully automatic nonaccessible js land except debug builds forcing garbage collection devtools everything looks fine", "d": "4/2018"}, {"body": "tried find difference finally find commits may cause bug", "d": "4/2018"}, {"body": "think problem slot twice template modified jsfiddle show conditional rendering slots works expected note last slot working version works described", "d": "4/2018"}, {"body": "workaround attach slot attribute element instead", "d": "6/2018"}, {"body": "passing null value content passing nothing properly pass js null content null remember bound attribute text inside quotes used literally used js expression evaluated datascope vue instance", "d": "4/2018"}, {"body": "maybe warning added dev mode", "d": "4/2018"}, {"body": "kidplug example given correct pass along null value something like php though still fails acts given anything entire compilation breaks bothersome part right actually supplying value", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "note supposed fail definition using means content treated javascript expression equivalent writing following javascript giving proper compilation warning instead runtime error good first contribution", "d": "4/2018"}, {"body": "like try", "d": "4/2018"}, {"body": "related", "d": "4/2018"}, {"body": "way suggested jacekkarczmarczyk work numbers since converted strings way", "d": "6/2018"}, {"body": "numbers numbers strings means strings instead numbers", "d": "6/2018"}, {"body": "evan said said nt something done modifier kind event pingpong typically leads brittle code long run components relying implementation details way proposed length explicit better keep way button needs promise makes sense pass component pass factory function returns promises component control execution promise", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "example uses script texttemplate html source puts dom using nonvue direct insert also using vue title resulting element dom vue corrupted fine plain insert", "d": "4/2018"}, {"body": "said vue nt set html like using set using setting vanilla js yields result", "d": "4/2018"}, {"body": "posva explain ampersand character working properly example making sense afraid", "d": "4/2018"}, {"body": "posva example comparable vue see", "d": "4/2018"}, {"body": "posva need seek second opinion one", "d": "4/2018"}, {"body": "posva also maybe looking problem wrong level wrong step perhaps problem vue interpreting characters template set dom", "d": "4/2018"}, {"body": "posva look example see entities lt gt quot amp rendered properly vue apos codebased entities think parsing template perhaps vue looking named html entities inside attributes", "d": "4/2018"}, {"body": "posva aha look vue source line function decodeattr var decodingmap includes four named entities plus ironically newline tab var shoulddecodenewlines logic passing false parsing attribute value whole approach using decodingmap limited naive html entity valid inside html attribute maybe submit new bug decodeattr function", "d": "4/2018"}, {"body": "workaround stumbled trying set newlines title attribute component template", "d": "4/2018"}, {"body": "need newline conditionally title attribute edit fyi simple workaround whew use unicode escape found", "d": "5/2018"}, {"body": "posva aha look vue source line function decodeattr var decodingmap includes four named entities plus ironically newline tab var shoulddecodenewlines logic passing false parsing attribute value whole approach using decodingmap limited naive html entity valid inside html attribute maybe submit new bug decodeattr function hi kidplug ever get submit bug think bug fixed apparently many affected though", "d": "10/2018"}, {"body": "made workaround decodeattrs content reason nt want textarea decode otherwise would work example decode everything else keep object notation also works perfectly", "d": "10/2018"}, {"body": "guess accurate say unicode vs ascii codes", "d": "4/2018"}, {"body": "html escapes different js escapes using escape js nt work", "d": "4/2018"}, {"body": "sorry wrong response example calling setattribute like example require html escaped values way equivalent entity template string look example good span title vs bad span title vue consistent named html entity works properly codebased html entity vue reescaping value expect html template inserted dom directly without modification vue", "d": "4/2018"}, {"body": "check example template declared string js raw chars pulled script tag template note inconsistency vue handling good vs bad span title", "d": "4/2018"}, {"body": "posva seeing comments", "d": "4/2018"}, {"body": "wrong place questions like", "d": "4/2018"}, {"body": "probably related webpack settings broken cache caused cacheloader etc try clearing cache files link provided nt valid reproduction since run please provide github repo error persists", "d": "4/2018"}, {"body": "could add reproduction examples make easier understand point view", "d": "4/2018"}, {"body": "minimal example click ps sorry inline templates lazy create files", "d": "4/2018"}, {"body": "okay reproduction confusing follow please next time spend time organising spent minutes trying work ambitions still nt understand proposed feature bug fix please define requirements output clearly triage issue", "d": "4/2018"}, {"body": "nt understand would able perhaps describe problem instead via discord sure describing bug feature request likely usage question", "d": "4/2018"}, {"body": "closing feature requests thoroughly carefully elaborated technical usage examples use case motivations ideas quite fully formulated please discuss discord first opening issue", "d": "4/2018"}, {"body": "general adding syntax sugar particular use case imo common enough warrant new addition also simplify bit userland", "d": "4/2018"}, {"body": "unable reproduce osx sure nt browser bug could try adding classes manually without vue", "d": "4/2018"}, {"body": "example without transition system far chrome bug idea edit windows confirm osx users reproduce either", "d": "4/2018"}, {"body": "fyi linux chrome working", "d": "4/2018"}, {"body": "johnleider assuming commit fixes issue thus close ticket feel free reopen issue persists issue", "d": "4/2018"}, {"body": "commit fix issue discovered issue debugging chrome related bug contain css property vuetify", "d": "4/2018"}, {"body": "problem seems popup window select file happen change event registered internet explorer reason nt work first time real problem register new change event time upload method called notice alert popup many time keep selecting files solution declare change event outside everything works fixed fiddle", "d": "4/2018"}, {"body": "closing based gudradain solution user land", "d": "4/2018"}, {"body": "triggering click event adding change event also gudradain said", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "4/2018"}, {"body": "ca nt reproduce chrome browser upd sorry reproduced", "d": "4/2018"}, {"body": "problem seems vueset called inside computed property also able reproduce bug without vuex", "d": "4/2018"}, {"body": "seems caused take issue", "d": "4/2018"}, {"body": "sodatea yes please", "d": "4/2018"}, {"body": "nt side effect vuenosideeffectsincomputedproperties vueset inside computed mutate data property vuex state", "d": "6/2018"}, {"body": "issue initial render nt populated overall though say code probably good nt used inside templates escape hatch used code avoid bug adding method component calls linked component like", "d": "4/2018"}, {"body": "use method inline function instead closing already", "d": "4/2018"}, {"body": "mixed order working fiddle", "d": "4/2018"}, {"body": "bad thanks", "d": "4/2018"}, {"body": "work please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "4/2018"}, {"body": "thank much posva sorry", "d": "4/2018"}, {"body": "well component nt function technical sense still use options object internally describe one reasons ca nt simply use function would collide way async components work javascript vuecomponent myasnccomponent gt import somecomponentvue locally component components myasnccomponent gt import somecomponentvue javascript vuecomponent functionalcomponet function h context return h div hello world code break since vue nt expect render function clean way tell render function loader function async component really possible implement current api", "d": "4/2018"}, {"body": "thanks answering understand possible current api something vue would like implement", "d": "4/2018"}, {"body": "surely think make functional components easier work towarda vue still log time road", "d": "4/2018"}, {"body": "pushing refernece object array multiple times create new distinct objetcs make example work eg", "d": "4/2018"}, {"body": "thanks peculiarity object", "d": "4/2018"}, {"body": "reproduction link broken due several failing resources hosted unknown maybe internal domain please provide valid reproduction described problem might related workaround subsequent discussions event loop issue likely revert always using microtasks evan stated", "d": "6/2018"}, {"body": "reproduction nt seem related problem describing passing original object expected behavior use alongside individual bindings cases final scope object needs merged anyway current behavior consistent easily work around using instead pass individual prop use destructuring", "d": "4/2018"}, {"body": "hi evan actually thought destructuring trying renaming variables like newvariable oldvariable stated mdn nt work thought posting issue reproduction create new issue needed thanks", "d": "4/2018"}, {"body": "destructuring alias works intended nt work need open bug report proper reproduction", "d": "4/2018"}, {"body": "confused reproduction earlier post updated try create another reproduction issue facing thanks", "d": "4/2018"}, {"body": "confirm insert line generated render function chrome example ie ps vue problem", "d": "4/2018"}, {"body": "vue revert commit problem disappears", "d": "4/2018"}, {"body": "also problem", "d": "4/2018"}, {"body": "probably changes regex dont work", "d": "4/2018"}, {"body": "yes output chrome output", "d": "4/2018"}, {"body": "may replace ss", "d": "4/2018"}, {"body": "hallo yeah fix problem lt nt include white spaces nonbreaking space thin space included planning run", "d": "4/2018"}, {"body": "vue nt support", "d": "4/2018"}, {"body": "updates", "d": "4/2018"}, {"body": "update vue version error reporting nt know resolved thanks", "d": "4/2018"}, {"body": "need use wait next release version change", "d": "5/2018"}, {"body": "right two options yes", "d": "5/2018"}, {"body": "need one fixes also patch search replace worked decided revert anyway nt need changes", "d": "5/2018"}, {"body": "use version ok", "d": "8/2018"}, {"body": "version still getting issue damn ie", "d": "9/2018"}, {"body": "anyone still experiencing issue symmetriq tip spot reverting solves assume also correct regex adjustment", "d": "9/2018"}, {"body": "using fixed seeing problem", "d": "10/2018"}, {"body": "vue ok", "d": "10/2018"}, {"body": "link repo", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "justineo said please provide repro instructions please open new issue reproduction", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "4/2018"}, {"body": "interested feature feature confirmed implemented willing work edit currently working please feel free jump", "d": "4/2018"}, {"body": "utatti also ready help needed", "d": "4/2018"}, {"body": "besides also another enhancement simple code parent component know wrong usage think provided field call change type seeing issue think maybe choice default function function", "d": "4/2018"}, {"body": "regarding transform basically vue removed feature request different name locally prop transform feature asked many times already achievable userland", "d": "4/2018"}, {"body": "posva updated fr description", "d": "4/2018"}, {"body": "give life also much interested regarding feature would though call stay line props", "d": "5/2018"}, {"body": "vue mixin including series useful enhancements vue components props transform props enumtype props numerictype props listen receiving props twoway data binding props hope helps", "d": "6/2018"}, {"body": "going bring status feature request confirmed already implemented proposed solve issue simply want alias prop names would nt write time willing work feature confirmedimplemented", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "4/2018"}, {"body": "sorry bug vue nested close", "d": "3/2018"}, {"body": "promised looking options moving tests chrome headless test failing chrome headless hence fix anything else holding vue back move", "d": "3/2018"}, {"body": "closed via", "d": "8/2018"}, {"body": "works fine please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "use statement discouraged may result forwardincompatible code supposed readonly", "d": "3/2018"}, {"body": "leopiccionia known vuejs use oh noo method works problems scope", "d": "3/2018"}, {"body": "use new function instead eval", "d": "3/2018"}, {"body": "closing nt even provide reproplayground hacking way around vue talk forum chat instead explain trying achieve", "d": "3/2018"}, {"body": "looking looseequal handle dates correctly added check dates looseequal sure best way go could use second pair eyes", "d": "3/2018"}, {"body": "time think suggested solution use render function result array items", "d": "3/2018"}, {"body": "ejweiler supported functional component", "d": "3/2018"}, {"body": "sqal need output multiple elements root level component might current option use functional component", "d": "3/2018"}, {"body": "duplicated", "d": "3/2018"}, {"body": "much better would comfortable way similar way riot opts nt look like api propose html looks much like simply passing creating instance looks like adding properties props could imply", "d": "3/2018"}, {"body": "thanks linusborg quick response tried implement example propsdata like nt work nothing appears template vue browser extension tells undefined html javascript import vue vue import myroot myrootvue const el documentgetelementbyid myroot new vue el el propsdata eldataset render h gt h myroot hello firstname export default props firstname however even would work several downsides assumes working ids let myroot call pagination want one pagination page need specify options props within template vue file maybe wrong overseeing something nt seen way yet pipe data markup non vue origin template least way easy riot really simple custom tag markup vue root elem custom attr like easy access tag file vue component template via propsdata solution nt meet demand", "d": "3/2018"}, {"body": "update found way works although somehow nt feel straight forward looks like time using pagination realistic example homehtml html lorem ipsum srcpaginationjs srcpaginationvue vue current page optspage export default data return opts rootopts easier way nt think need simplify via vue may close feature request", "d": "3/2018"}, {"body": "previous two comments two suggestions wo nt able drop right might give something consider try vue instance wrapped html closer level body could pass variables like paginationvue template paginationjs template alternatively possible solve plugin inspired way using vuex gives stores children could make plugin provides props components javascript const useroptionsfromserver const userdataplugin install vue vuemixin created thisopts useroptionsfromserver vueuse userdataplugin", "d": "3/2018"}, {"body": "thank ejweiler help correct wrong template syntax example requires vue compiler client right interpreted vue runtime reason breaking components pagination search etc independent files instead one big bundled appjs want load less code page possible thus using vue without compiler since html gets build backend ca nt precompile ssr vue option thus precompile vue files way posted one found far let include component page different dataoptions backend", "d": "3/2018"}, {"body": "sassninja nt realize constraints option trying plugin", "d": "3/2018"}, {"body": "posva would mind taking look", "d": "4/2018"}, {"body": "try", "d": "3/2018"}, {"body": "uhm feel slightly stupid always worked way", "d": "3/2018"}, {"body": "already works added minor releases back think also works way lifecycle methods would helpful well think seems missed document opened issue", "d": "3/2018"}, {"body": "alright thanks fast", "d": "3/2018"}, {"body": "also happens latest version vuejs", "d": "3/2018"}, {"body": "well move definition async component render otherwise recreate move save component instance", "d": "3/2018"}, {"body": "issue partially resolved end goal dynamic component creation asynchronously exactly like asynchronously addition create called twice vuecomponent create vueextend template create header", "d": "3/2018"}, {"body": "already opened topic nun forum please ask additional questions issue resolved since bug present", "d": "3/2018"}, {"body": "linusborg thanks replied forum", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "well empty array beginning nonexistant things usually easier js classic events internal property anyway discourage using applications", "d": "3/2018"}, {"body": "posva thanks answer apidoc vm event callback listen custom event listener removed triggers first time want know removed mean code like beforemount register events via let l l var name eventoncel name gt thisevents func func mounted emit let l l var name eventoncel emit name name done thisevents empty object demo codepen", "d": "4/2018"}, {"body": "means removed listener native events", "d": "4/2018"}, {"body": "well zero listener events remove event array make confused least get confirmed official thanks lot posva", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "might variable shadowing problem", "d": "3/2018"}, {"body": "zllovesuki dont think could problem changed variable names issue persists", "d": "3/2018"}, {"body": "indeed skipping callbacks sure easily fixable without breaking something else", "d": "3/2018"}, {"body": "posva actually able reproduce skipped events even chrome turn slowdown cpu throttling practically though mainly problem falling back introduces minimum delay also case scroll events triggering many layoutspaints prop updated vue resulting huge lag app think correct defer application updates settimeout happy submit pr idea want solve actually wonder paving fundamental problem", "d": "4/2018"}, {"body": "posva thoughts want approach eager start working pr severely impacting application", "d": "4/2018"}, {"body": "sorry something know help", "d": "4/2018"}, {"body": "posva needs done order move forward", "d": "4/2018"}, {"body": "needs done happy contribute", "d": "4/2018"}, {"body": "similar case chrome loading images dont remember browsers month ago vue images loader read file images would loaded long youre scrolling page keep scrolling without stop loaders would never disappear sadly didnt much time dig deeper thought one thoses javascript situations image loading initiated within settimeout guessing part reason could try reproducing maybe", "d": "4/2018"}, {"body": "sodatea willing work however need small amount guidance core team wants see high level opinion incorrect reverted however suspect well received", "d": "6/2018"}, {"body": "likely reverted according discussion several related issues", "d": "6/2018"}, {"body": "justineo specific issue tracking discussion also could label nexttick related label make sure considered alongside nexttick issues", "d": "6/2018"}, {"body": "really hurting app keeps track scroll position renders based ie using settimeout causes scroll events always cut line settimeout resulting view never updating stop scrolling right resorting circumventing vue rendering updating scroll position since shippable like updates status discussion regarding nexttick debacle seems radio silence please labeled well cc justineo posva", "d": "9/2018"}, {"body": "changing use instead fix issue open different worms", "d": "9/2018"}, {"body": "check modified codepen changed component logic match default native multi checkbox behavior", "d": "4/2018"}, {"body": "emanuelmutschlechner nt think codepen relevant though appreciate working toward solution adding explicit prop original pen putting prop field works around bug seen modified pen point nt need done passing already original pen nt way picking", "d": "4/2018"}, {"body": "pearofducks want pick defined component explicitly bind custom component", "d": "4/2018"}, {"body": "emanuelmutschlechner please read previous response nt necessary pretty confident valid bug appreciate trying help", "d": "4/2018"}, {"body": "get point sure bug need feedback core team solution partly based example code bound explicit used disabled attribute inheritance source", "d": "4/2018"}, {"body": "maybe issue somewhat related", "d": "4/2018"}, {"body": "hello changes go might solve confusion", "d": "3/2018"}, {"body": "yeah know nt really understand get error duplicates slot rerender", "d": "3/2018"}, {"body": "looks like slot inside scoped slot rendered", "d": "4/2018"}, {"body": "justineo rerendered changes nt cause problems think thinking", "d": "4/2018"}, {"body": "cents another reproduction issue notice warning raised modal shown hand jsx version component raising warning", "d": "4/2018"}, {"body": "experiencing thing anything triggers rerender inside slotscope causes warning duplicate slot presence issue seems line slots rendered subsequent executions block true presumably first render would imagine something setting back false rerender triggered admittedly know almost nothing vue works hood wild guess bug seems like unlikely edge case happened couple times recently big fan pattern writing renderless components paired concrete implementations trying pass content consumer concrete implementation issue arising", "d": "5/2018"}, {"body": "try mycomponent app especially slot vfor", "d": "8/2018"}, {"body": "note using vuejs may see error trying use going solution either update vuejs use scope instead slotscope hope helps anyone else finding google like ps using vuejs remember need use element ca nt put slot scope boundary miscellaneous element little realworld example", "d": "9/2018"}, {"body": "solution either update vuejs use scope instead slotscope still issue really annoying trying build renderless component abstractions comes quite often", "d": "10/2018"}, {"body": "reported instead", "d": "3/2018"}, {"body": "object rather path string read parse outside", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "\u5e76\u4e0d\u662f\u6587\u4ef6\u8def\u5f84", "d": "3/2018"}, {"body": "likely case props oldprops newprops refer object", "d": "3/2018"}, {"body": "ca nt create component whose kebabcase name name html tag names reserved suggestion name kebabcased", "d": "3/2018"}, {"body": "know reserved however vue handles fine use pascalcase naming template component replacing slots working properly example", "d": "3/2018"}, {"body": "leopiccionia said nt name components html tag names better prefix component", "d": "3/2018"}, {"body": "short think need support syntax", "d": "3/2018"}, {"body": "intention directive wrote huge fan using object syntax html code argument feature subjective opinion could also say click already short enough nt need proposal nt aim short solution also offer better syntax use case single class bound", "d": "3/2018"}, {"body": "syntax would helpful single file components inline templates would require template compiler updates html attributes case insensitive used browser would end class would say definitely worth trouble", "d": "3/2018"}, {"body": "ok valid point close request keep using custom directive projects", "d": "3/2018"}, {"body": "marked bug improvement sure intended work could also improvement", "d": "3/2018"}, {"body": "sure issue adding two elements default slot also causes first one ignored would nt surprise learn intentional odd work stop working changed warning message", "d": "7/2018"}, {"body": "test right sure happen without vue", "d": "3/2018"}, {"body": "indeed behavior different ie related vuejs fiddle problem without vuejs code", "d": "3/2018"}, {"body": "found could update even invoke modify data", "d": "3/2018"}, {"body": "something vue fix ie breaks dom nodes replaced innerhtml", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "typo simply", "d": "3/2018"}, {"body": "sirlancelot sorry", "d": "3/2018"}, {"body": "looks like duplicate using typescript issue please provide example github repo reproduce", "d": "3/2018"}, {"body": "exactly duplicate breaks overloading function last alternative overloading picked type nt included workaround manual annotation ts import vue propoptions vue vueextend props myprop type array propoptions", "d": "3/2018"}, {"body": "recommended read documentation carefully create issue child component update foo value needs explicitly emit event instead mutating prop", "d": "3/2018"}, {"body": "thanks solved adding input emit update input input textfield", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "think responsibility developers framework", "d": "3/2018"}, {"body": "hi thanks filling issue developers enable warnings development", "d": "3/2018"}, {"body": "fnlctrl yes right responsibility developers fucking project enable warnings access repertory setup framework makes wasting much time fixed problems like read property withtask undefined", "d": "3/2018"}, {"body": "hi looks like mixed custom component events native dom events modifier dom events please check revision demo see whether meets expectation", "d": "3/2018"}, {"body": "get mixup modifiers however expectation clickstop fire node bubble see console see event bubbling end whole tree data instead clicked node", "d": "3/2018"}, {"body": "click event fires toggled event manually bubbled everything looks fine", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "believe documentation problem constructor vue subclass created", "d": "3/2018"}, {"body": "first argument function async factory finally resolve component definition see", "d": "3/2018"}, {"body": "maybe documentation changed clearly states html tag name component options function returning one required", "d": "3/2018"}, {"body": "want use function first argument code looks like going cause infinite loop working", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "\u6211\u53ea\u662f\u5efa\u8bae \u554a", "d": "3/2018"}, {"body": "test edge right may related name edge giving name actually failing good first issue fix wrong fix help someone get contribution", "d": "3/2018"}, {"body": "woohoo managed break something", "d": "3/2018"}, {"body": "give issue try", "d": "3/2018"}, {"body": "cause welcome", "d": "3/2018"}, {"body": "coordinate using getboundingclientrect method get value getboundingclientrect method value display none change line vuejs c block c c value taken", "d": "3/2018"}, {"body": "hey wlkuro believe right cause supposed make changes dist files self generated file change suggested work", "d": "3/2018"}, {"body": "wlkuro think better solution add element execute like", "d": "3/2018"}, {"body": "see exactly entercb", "d": "3/2018"}, {"body": "sorry seeing pr entercb executed enter transition finished move transition triggered think better similar behavior executed would lose enter transition", "d": "3/2018"}, {"body": "related vue best case could related vueloader please consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "ever find resolution", "d": "5/2018"}, {"body": "key usually attribute object passed component case still create prop named key pass property use key", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "ssr", "d": "3/2018"}, {"body": "jounqin", "d": "3/2018"}, {"body": "\u722c\u866b\u8bbf\u95ee\u9875\u9762\u4e0d\u4f1a\u6267\u884c", "d": "3/2018"}, {"body": "um case using symbol polyfill vue recognize properly prop types checking", "d": "3/2018"}, {"body": "jkzing nt explicitly add symbol polyfill new barebones vuejs build understanding documentation vuejs supports symbol prop type box ca nt seem find information different way use symbol prop types", "d": "3/2018"}, {"body": "seems working native symbol use build setup probably polyfills symbol based browser targets targeting typically suboptimal use symbol polyfills targeting browsers native symbols make sure tweak browser target either way bug vue core likely setup issue vuecli webpack template", "d": "3/2018"}, {"body": "sounds good try perhaps still bug warning message generated though think see expected prop type rendered blank right comma", "d": "3/2018"}, {"body": "\u4f60\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a\u6587\u4ef6 import \u4e4b\u540e declare \u554a", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "feature request want report bug use proper format", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "already unless nt really understand mean", "d": "3/2018"}, {"body": "mean give way proxy props elsewhere avoid data name conflict indeed possible add local prefix data attribute idea items example sometimes would like declare data attribute name prop possible thanks quick reply", "d": "3/2018"}, {"body": "really related vue setting value input cursor resets read set", "d": "3/2018"}, {"body": "please provide reproduction repo issue seems libraries outdated typing", "d": "3/2018"}, {"body": "closing due inactivity week please open new issue reference one follow information", "d": "9/2018"}, {"body": "please nt use issues ask questions", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "linusborg remember components reused default least versions prior behavior change intentional probably documented", "d": "3/2018"}, {"body": "new behaviour vue always reused components situation like vfor splice array", "d": "3/2018"}, {"body": "right tested older versions behavior though still think surprising behavior component state reused instead dom state indicated document", "d": "3/2018"}, {"body": "yes surprising new users expected anyone familiar virtual dom implementation also think talk section explains use context improve docs effect vuejsorg repository issue closed", "d": "3/2018"}, {"body": "imho cases proxy events would intuitive case want different things different events vue onanyevent eventname eventargs switch eventname case click case input vue", "d": "3/2018"}, {"body": "idea wrap every event treat equally like reemit wrapper component", "d": "4/2018"}, {"body": "vue security rule never ever feed untrusted content template compiled vue period nothing vue save xss", "d": "3/2018"}, {"body": "understand argument vue supposed parse template even using html entities example would never feed vue component directly input server rendered page common serverrendered content unfortunately goes inside app root aside using directive one supposed properly escape user input serverrendered pages tailor every specific page restrict vue app root strict safe context", "d": "3/2018"}, {"body": "believe ranting trying solve problem believe many devs worried based reading sorry poor english common vue app root top level element render generic server side content inside interact vue app imagine user profile malicious user changed name xss string another idea way completely disable braces interpolation allowing usage directives know change delimiters vue app something esoteric option completely disable braces interpolation allow render directives suppose app would run faster problems would solved write components using would nt difficult migrate braces usage thanks advance sorry sounded rude anyway", "d": "3/2018"}, {"body": "problem essentially telling vue compile template usergenerated content source exactly like user put content file template part add see vue compiler sees template solve could either put escaped user content js variable replace double curly braces something else", "d": "3/2018"}, {"body": "example", "d": "3/2018"}, {"body": "akryum tried replacing double curly braces html entity equivalent seems javascript read dom tell html entity actual curly brace understand never use user generated content inside vue component imagine enhancing existing traditional serverbased app slowly use vue components common approach far could find tutorials vue app root element encloses app content unfortunately enhancement approach user generated content could fall inside vue app root way disable double curly braces completely would solve problem generally use render content know change delimiters something esoteric bypass project working limitation time completely rewrite spa could disabled imagine app would faster would check templates fiddling runtimeonly version could get work yet nt know asking thanks attention", "d": "3/2018"}, {"body": "akryum tried replacing double curly braces html entity equivalent seems javascript read dom tell html entity actual curly brace html entities entities encode characters html javascript get real decoded one except sensitive ones fiddling runtimeonly version could get work yet nt know asking wo nt help nt template compilator made work wrapping tags nt need convert html entities", "d": "3/2018"}, {"body": "akryum clever solution worked flawlessly thanks lot", "d": "3/2018"}, {"body": "experiencing issue well using tailwind css vue sfcs helpful break class names onto multiple lines avoid long single lines n character breaking class names hopefully makes next release", "d": "5/2018"}, {"body": "finally got time dig opened pr", "d": "5/2018"}, {"body": "nt think causes issues render correct nt rendering mentioned add improvement label something fixed destructive bug", "d": "4/2018"}, {"body": "user ssr vshow cause style ca nt displayed", "d": "5/2018"}, {"body": "see point would pretty huge breaking change would wait vue long time away", "d": "3/2018"}, {"body": "thining loud hand could maybe transform slots object way replaces propertys like getter lazily evaluates vnodes would keep public api intact would nt hm otoh would nt work using render functions would", "d": "3/2018"}, {"body": "hmm talking could find current behavior defined inside api maybe wrong nt see anyone would rely expressions evaluated result discarded anyways saying possible solution thinking breaks changes ca nt use behavior latter example extrapolate ah ok people might want access content inside component defines slot referring right evaluated differently using slot scopes look code", "d": "3/2018"}, {"body": "maybe compromise would add attribute internally acts slot scope defined allow usage attribute without actual value assignment would break anything costs line code opens room dom optimisations using slots srccompilerparserindexjs edit ah incomplete get idea make simply alias", "d": "3/2018"}, {"body": "hmm talking could find current behavior defined inside api maybe wrong nt see anyone would rely expressions evaluated result discarded anyways point example render function resulting template looks roughly like computed prop evaluated parent order generate vnodes passed component available current publi api guarantees returns array vnodes content passed default slot parent vnodes already generated parent skipping evaluation parent would require something like scoped slots namely wrapping code generates slot vnodes kind function would pass child according public api nt return function returns array vnodes would find way evaluate function someone accesses keep api consistent return array vnodes initial gut reaction replace e g prop getter allow us evaluate function property accessed gut reaction though", "d": "3/2018"}, {"body": "already got thanks lot depth explanation using getter sounds good nt tests define api passes current tests would good go anyways another solution case really pressing issue keep good work cheers", "d": "3/2018"}, {"body": "really like see vue performance reasons would allow us conditionally render things slots provide concrete use cases interested currently possible scoped slots however ca nt declare scoped slot without slotscope nt plausible solution nt props pass slot", "d": "3/2018"}, {"body": "nt see conditional rendering possible well yeah vnodes created parent matter part equation performance set aside nt think point", "d": "3/2018"}, {"body": "playing around idea using slots conditionally render templates state available application consider following component vue export default computed user return storestateuser could use remove conditionals child component render available vue username export default computed user return storestateuser username need check user exists guarded execution ifloggedin return storestateuserfirstname storestateuserlastname possible scoped slots currently scoped slots exist declare something attribute", "d": "3/2018"}, {"body": "linusborg causing issues use case similar portal basically slotscopes preserve reactivity moving slot another location see comment well nt making slotsdefault getter essentially saying making slots reactive slots refs reactive always struck strange since nt really much overhead presumably already logic vue causes change slotsdefault trigger render would happen naturally slots reactive agree general idea future nt distinction scopedunscoped slots unscoped slot really scoped slot invoked passed data yes would breaking change could possibly option component like name pending would let us make change opt way consensus linusborg general direction willing work pr", "d": "4/2018"}, {"body": "closing original issue expected behavior although theoretically improved something consider technically breaking likely make slots lazyevaluated like scoped slots", "d": "8/2018"}, {"body": "found solve metro must initialized hook thank vuejs", "d": "3/2018"}, {"body": "part backend code", "d": "3/2018"}, {"body": "unfortunately related vue able find answer stackoverflow also seek help forums", "d": "3/2018"}, {"body": "rely defined vue instance need add root instance prototype vue access everywhere", "d": "3/2018"}, {"body": "need put template outside app template vue lt div gt v lt div gt", "d": "3/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "3/2018"}, {"body": "hi please make sure follow issue reporting guidelines opening issue provide repro reporting bug thanks", "d": "3/2018"}, {"body": "leaving callbacks trigger late change template wo nt render anymore need display something different need delay toggling one tick wrapping transition component manually delaying hiding hacky version would modify element manually component actually destroyed leaving transition happens", "d": "3/2018"}, {"body": "idea proposed", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "think syntax would better object embedding", "d": "6/2018"}, {"body": "passing string instead number usually warning using minified version", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "literal prop passed string number", "d": "3/2018"}, {"body": "thank information helpful understand issue literal prop string passed vbind prop somehow coerced still think documentation make mention however obvious mistake make trying use prop range parameter immediately obvious thing technical editor add paragraph saying something along lines note rangeparameter may property component property must integer followed example mistake example working solution also nt get warning jsfiddle using minified file real dev environment using full esm even shows warnings like developmentmode warning never saw warning chances discovering cause solution basically nil", "d": "3/2018"}, {"body": "coerced use binding whatever quotes evaluated javascript difference like vs javascript", "d": "3/2018"}, {"body": "get warning technically possible iterate string vfor well", "d": "3/2018"}, {"body": "think order rendering functional components rendered child using slot gets rendered case normal components", "d": "3/2018"}, {"body": "think might unwanted right solving depending current behavior seems fragile", "d": "3/2018"}, {"body": "related seem odd failures bootstrapvue several people flagged occuring beforehand", "d": "3/2018"}, {"body": "likely confirm", "d": "4/2018"}, {"body": "flagging important due downstream issues libararies", "d": "4/2018"}, {"body": "removing regression tag behavior along", "d": "4/2018"}, {"body": "going wontfix behavior difference functional normal components explicit since beginning functional components eagerly rendered parent context stateful ones passed placeholder node instantiated patch likely change behavior make consistent ie making functional components behave like normal stateful components however requires significant changes functional components work would breaking change", "d": "6/2018"}, {"body": "also related regression found bootstrapvue", "d": "6/2018"}, {"body": "want shorthand use arrow function less magic javascript", "d": "3/2018"}, {"body": "also think necessary note prop validation stripped production builds beware objects enum though", "d": "3/2018"}, {"body": "less magic javascript want less magic maybe quite vue current shorthand syntax would unnecessary even case actually shorthand type checking imo depends whether folks think use array value clear enough stands validating enum values btw needs polyfilled write want wider browser support although nt cost much bothers quite developers including repeat every single time beware objects enum though cases enum values primitive ignore objectarray values warn", "d": "3/2018"}, {"body": "implied behavior indeed ambiguous regarding objectsarrays handled actually think better explicit", "d": "3/2018"}, {"body": "also feels little bit like typescript", "d": "8/2018"}, {"body": "seems confusing conflicts directly existing vue interpretation field", "d": "9/2018"}, {"body": "nt think common enough problem merit solution core easily create helper js const onlyvalues values gt str gt valuesindexof str const props position type string validator onlyvalues top left bottom right also validators nt run production anyway development helper", "d": "9/2018"}, {"body": "dkushner conflict field currently allow primitives constructors", "d": "9/2018"}, {"body": "conflict field add field", "d": "9/2018"}, {"body": "tested firefox nightly seems gone gif firefox reflects op saying nt appear always", "d": "3/2018"}, {"body": "hmm noticed nt reset id counter removing item works fine", "d": "3/2018"}, {"body": "think triggers component renders empty list items add new one reactives item already animation happens ideally deactivate component transition finished keepalive component would nt make sense use vshow without keepalive", "d": "3/2018"}, {"body": "warning appears try override prop value component modifying array still possible discouraged indeed emit event parent modify array javascript behaviour regarding objects passed reference would costly watch every single property observed sake development warning", "d": "3/2018"}, {"body": "component option like etc prop", "d": "3/2018"}, {"body": "yep defined export files using name prop could little confusing apologies also tried prop original project sheer desperation", "d": "3/2018"}, {"body": "test right seen", "d": "3/2018"}, {"body": "looks right little unintuitive must got frustrated document put following mainjs everything right world js import entitycomponent componentsretrieveentitycomponent import relationshipcomponent componentsretrieverelationshipcomponent vuecomponent entitycomponent entitycomponent vuecomponent relationshipcomponent relationshipcomponent thanks pointer posva", "d": "3/2018"}, {"body": "come instead export default foo export default name foobar use component unless declare mainjs import want use get found error another component using loads fine", "d": "8/2018"}, {"body": "docs use components recursively inside components vue get confused one resolve first defining components mainjs ie components rendered get around problem components nt used recursively import usual", "d": "8/2018"}, {"body": "possibly related", "d": "3/2018"}, {"body": "seems explained see also", "d": "3/2018"}, {"body": "please read document first simple", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "mixin", "d": "3/2018"}, {"body": "thanks", "d": "3/2018"}, {"body": "normal long value object agree notice docs would helpful please directly open pr docs repo", "d": "3/2018"}, {"body": "trigger certainly document objectarray case works", "d": "3/2018"}, {"body": "nt manually move dom controlled vue think looking portal implementation", "d": "3/2018"}, {"body": "posva understood ca nt vue give warningsuggestion instead breaking understand likely edge case though", "d": "3/2018"}, {"body": "something users supposed may hard vue detect things prs kind things usually accepted impact users performance undesired warnings specific scenario may difficult find right spot nt think worth adding prooved wrong", "d": "3/2018"}, {"body": "tracked bit seems come vue treats custom components differently regular element like regular inputs vue looks value finds browser emitting regular inputevent object custom components like ioninput seems vue expecting value emitted directly subclass event vue looks value rather behaviour documented probably done make coding custom components simpler developer would nt need instantiate new event emit simple fix uneducated guess part would get rid special case custom components check ed actually event object wrap event nt", "d": "9/2018"}, {"body": "leaving comment may helpful others whilst definitely handled inside vue project meantime looking solution right created compile directive configurable allows use syntax webcomponents proper solution place would nt mind creating pr getting something implemented vue unknowns regarding handled example web components use handlers even expose property event target eg components created via think needs thought terms", "d": "10/2018"}, {"body": "creating custom component userland use case forcing content seems specific use case even shorter", "d": "3/2018"}, {"body": "posva problem although zerowidth space supposed invisible produce extra line box acts like following elements slightly different nothing actual use case creating layout component possible different parts optional eg may component like vue alert content bordertop solid ccc content firstchild bordertop none slot title empty use like html something went wrong oops something went wrong something went wrong although use prop control rendering optional slot may easier type providing special syntax component like automatically makes slots clearable otherwise component authors may provide different ways handle scenario btw earlier today discussed jinjiang found clearing named slot nt possible according current webcomponents implementation would creates another problem vue components compiled wcs found currently seems named slots wcs accept already different vue slot implementation sure", "d": "3/2018"}, {"body": "last comment interesting tried empty string seems work well updated comment", "d": "3/2018"}, {"body": "posva inserts actual html element makes selectors like nt work expected", "d": "3/2018"}, {"body": "damn tested chrome", "d": "3/2018"}, {"body": "afraid nt work even chrome case element nt match", "d": "3/2018"}, {"body": "kind fence whether vue allow clearing slot fallback core seems little hacky possible get exactly want userland though created sample update turns nt use functional component works", "d": "3/2018"}, {"body": "turns nt use functional component works confirmed feels like real hack functional component renders nothing behaves differently normal one may unwanted consistency vue handle slot contents vue clear slot provide nothing slot later considered bug fixed guarantee future versions would nt happen hack", "d": "3/2018"}, {"body": "sirlancelot issued bug report current behavior nt think expected", "d": "3/2018"}, {"body": "vue clear slot provide nothing slot later considered bug fixed logical behaviour explicitly provide empty slot therefore want clear default slot easiest logical solution nt get ca nt way anyhow explicit little verbose empty keyword would fine least provide way please", "d": "5/2018"}, {"body": "closed wontfix rely current behavior feature request stably worked aroud userland though still feels hacky close gon na implement core", "d": "6/2018"}, {"body": "probably mean way around foo vuecomponent foolink true vuecomponent foolink false true", "d": "3/2018"}, {"body": "posva right sorry bad recently tried use vuerouter nt work looked repo saw got confused however actual released version using still", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "check find need", "d": "3/2018"}, {"body": "definitely something weird going added log functional component render function inspect slots received weird thing rendered twice explained receives slot namedslot default even though setup", "d": "3/2018"}, {"body": "afraid render right see", "d": "3/2018"}, {"body": "gebilaoxiong sure test case applies situation elaborate test case linked incorporates one functional component passing slot content another different situation issue", "d": "3/2018"}, {"body": "linusborg simple example think difference understanding template compb compb rendered generates structure similar follow html text render stateprop compa rendered slots think render right", "d": "3/2018"}, {"body": "perhaps deleted compb rendered maybe right", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "replaces element whole replace element whole interpolates useful want mix literals", "d": "3/2018"}, {"body": "leopiccionia thanks additional info still curious performance like ones use less resources etc suggesting braces may use resources need interpret mixed literals", "d": "3/2018"}, {"body": "issue losed", "d": "3/2018"}, {"body": "nt understand asking want way display placeholder component nested async components loaded", "d": "3/2018"}, {"body": "yes sorry wording confusing mon mar evan notifications githubcom wrote nt understand asking want way display placeholder component nested async components loaded receiving authored thread reply email directly view github mute thread", "d": "3/2018"}, {"body": "unfortunately something easily done vue moment somewhat doable userland know components may loaded tree tricky get right suggestion avoid oversplitting since nested async components result waterfall requests", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "duplicate", "d": "3/2018"}, {"body": "others may run problem possible get lot better performance push waiting nexttick shift multiple pushs shifts happen cycle without triggering issue", "d": "3/2018"}, {"body": "working expected js becomes nt valid number", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "whan qkdreyer said", "d": "3/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "3/2018"}, {"body": "think bug", "d": "3/2018"}, {"body": "bugs need provide minimal repro", "d": "3/2018"}, {"body": "bug occurs situationi cant reproit strange erroranyway going ask forum", "d": "3/2018"}, {"body": "solved someone gets error even code right make sure named componentsi named components dont get error", "d": "3/2018"}, {"body": "met issue today longtime debugging finally found bug insistent filename caseless git caused mixin vue component", "d": "7/2018"}, {"body": "encountered error solved changing line component", "d": "9/2018"}, {"body": "set throws aways current textnodes inside element creates new ones however vue still holding textnodes subsequent updates note recommended mutate nodes via unless absolutely need said change text without replacing text nodes use", "d": "3/2018"}, {"body": "happens firefox chrome", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "need ur help could u plz fix", "d": "3/2018"}, {"body": "mentioning evan get help faster read every issue priorize issues accoring grater needs vue ecosystem", "d": "3/2018"}, {"body": "using converting instance vnode like object reason seeing expected result although usage worked previous version recommend use standard way vue vuecomponent valuevnode functional true render h props gt propsvalue", "d": "3/2018"}, {"body": "hhm sure whole vnode type gets lost need bind one value use one single prop pretty much jkzing said writing comment got published", "d": "3/2018"}, {"body": "op usage covered board usage support nonplain object hand returning non vnode data render function nt make much sense might invalidate js engine type speculation might harm runtime performance sure", "d": "3/2018"}, {"body": "jkzing maybe helper function change use clonevnode", "d": "3/2018"}, {"body": "actually pretty agree herringtondarkholme render function return vnode data returning non vnode object working previous version warning would reasonable fix", "d": "3/2018"}, {"body": "jkzing nt think vbind alias like jsx case work like vbind mean bind something whatever u nt want support u guys change think", "d": "3/2018"}, {"body": "bind something whatever sadly vue works vue vnode two fields handled differently internally means vue create two separate objects extract props attrs hand react flavor jsx one props passing object makes sense", "d": "3/2018"}, {"body": "herringtondarkholme matter work meaning u guys change", "d": "3/2018"}, {"body": "well nt get define means", "d": "3/2018"}, {"body": "herringtondarkholme jkzing linusborg works well untill breaking change", "d": "3/2018"}, {"body": "breaking change", "d": "3/2018"}, {"body": "works well untill breaking change never intended work breaking change u guys change vbind vbind object hand would big breaking change props named would longer work expected", "d": "3/2018"}, {"body": "linusborg u guys fix nt", "d": "3/2018"}, {"body": "ringt still nt see fix since worked first place far tell far far understand right nt see anything fix maybe find way improve behaviour could also document bit better improve men found", "d": "3/2018"}, {"body": "linusborg key point render return works untill nt work u guys say nt work ok could u please give api like make work import class", "d": "3/2018"}, {"body": "yozman already gave proper usage want pass vnode via props rather whole vnode explicitly bind prop like", "d": "3/2018"}, {"body": "jkzing think trick solution ok u guys nt like jsx support think support", "d": "3/2018"}, {"body": "jkzing ui library support thousand user fxxking breaking change u know", "d": "3/2018"}, {"body": "need swearing simply lock issue ca nt discuss civil manner", "d": "3/2018"}, {"body": "without argument works example explained nt used way really persist using without argument like js vuecomponent opvnode functional true render h props gt propsnode vuecomponent oprow template", "d": "3/2018"}, {"body": "breaking change never intended work considered breaking change usage explicitly documented public api library thousands users nt mean get demand arbitrary changes vue valid workaround suggested multiple times need update implementation publish patch release library instead waiting vue change received warning swearing blocked vue repositories", "d": "3/2018"}, {"body": "got sorry bad words", "d": "3/2018"}, {"body": "linusborg jkzing must trouble vnode case javascript import opbutton opbutton import opcol opcol import opform opform import oprow oprow import opvnode opvnode import slots srcmixinsslots const template html export default template components opbutton opcol opform oprow opvnode mixins slots data gt expanded false computed grid expanded getgrid slots slots gt getgrid slots reduce getgrid slots control expanded slots length mathmin slots length methods getgrid arr item index thisexpanded amp amp index gt return arr index return arr item arr arrlength push item return arr know computed add make observerable use like javascript import opui wnpmopui const template html const component template components opui data gt fullscreen false select date time export default component path list change view nt update everything works well untill use", "d": "3/2018"}, {"body": "yozman please open separate issue proper reproduction thread personal support line", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "performance analysis according environment please", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "happens second component registration first one shadowing components feature printing warning unfortunately possible", "d": "3/2018"}, {"body": "thank response reproduction subtle bug described typing first letter focus lost", "d": "3/2018"}, {"body": "loses focus component gets replaced soon template renders happens type", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "created computed property instead usually would nt recommend putting complex computation directly template", "d": "3/2018"}, {"body": "duplicate", "d": "3/2018"}, {"body": "need put element fixed example", "d": "3/2018"}, {"body": "nt clear enter also changes variable add make work way want please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "thank guess input works nt change value seems like able change value enter changed ah well want enter submit new line shift enter clear prevents enter working manually add n works cool ps tried googling minutes find solution posting always easy find answers", "d": "3/2018"}, {"body": "duplicate", "d": "3/2018"}, {"body": "still get error nt got time put together reproduction case right know exists still going back resolves issue error looks like traverse function error", "d": "3/2018"}, {"body": "also get error tries bind dom configuration element set storeconfig via mutation function called root element mounted edit happens store strict mode", "d": "8/2018"}, {"body": "confirming issue store strict mode using nuxt", "d": "9/2018"}, {"body": "confirming", "d": "10/2018"}, {"body": "mutating state affecting output ssr would effect", "d": "3/2018"}, {"body": "work ref basically different attribute", "d": "3/2018"}, {"body": "particular reason qualifies bug", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "introduced workround use something like", "d": "3/2018"}, {"body": "hotfix upd released", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "case failed error exists computed array reactive components set watcher deep true computed", "d": "4/2018"}, {"body": "feature request", "d": "3/2018"}, {"body": "request help asking", "d": "3/2018"}, {"body": "please use forum chat room help clearly stated issue list reserved exclusively bug reports feature requests", "d": "3/2018"}, {"body": "thanks", "d": "3/2018"}, {"body": "use double binding set attribute", "d": "3/2018"}, {"body": "maxirozay said also listen event please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow vue span check", "d": "3/2018"}, {"body": "seems problem related functional components transitiongroup changed title", "d": "3/2018"}, {"body": "component nt get could wrap like", "d": "3/2018"}, {"body": "nt function component get key transitiongroup", "d": "3/2018"}, {"body": "seems implemented", "d": "3/2018"}, {"body": "see warning simply pass reference object root element component", "d": "3/2018"}, {"body": "glad sometimes sqal", "d": "3/2018"}, {"body": "pretty", "d": "3/2018"}, {"body": "single file component bind contextdata sqal posva maxirozay", "d": "3/2018"}, {"body": "things start internals private api things start things public api start nt collide data props methods computed properties added user", "d": "3/2018"}, {"body": "vue needs root element mount please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "sorry template get three app", "d": "3/2018"}, {"body": "either put template option set html vue pick template option first please move kind discussions discord chat forums people able give feedback", "d": "3/2018"}, {"body": "please follow errors provided console version errors following console errors please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "posva use index instead item work around error throw reason show error templated child component expected replated computed expected expected computed rendered replaced", "d": "3/2018"}, {"body": "functional components render multiple vnodes according seems ca nt vnode wrapped another functional component", "d": "3/2018"}, {"body": "fixed released yet", "d": "3/2018"}, {"body": "process writing composition much programming send request problem due inadequate english skills great", "d": "3/2018"}, {"body": "bring precision plugin seems install method root component child component access method example differ use plugin directly global instance extending vue example", "d": "3/2018"}, {"body": "mistake assuming would work previous comments make fully operate base constructor additional internal flag needs set made default likely exposed via public api", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "hey something fixed vue core related either webpack config vueloader usage maybe check may extracting css scenario nt want webpack question prefer use channels like forum discord server ask", "d": "3/2018"}, {"body": "something build setup really nt designed probably want use different build setup want component target iframe instead relying final style insertion remove make last loader css handle insertion js import css foocss export default mounted insert css", "d": "3/2018"}, {"body": "thank clarification actually worked", "d": "3/2018"}, {"body": "technically could possible integration layer connection c js something planned yet think something community probably going bring team every language compiles web assembly also web assembly support still limited", "d": "3/2018"}, {"body": "personaly think huge potential performance fe gaining kind integration plus ecosystem advantages plus adoption early stages however know might ways come similar results", "d": "3/2018"}, {"body": "like building completely new framework similar syntax definitely something core team interested bandwidth would nt discourage anyone interested try", "d": "3/2018"}, {"body": "ok thanks", "d": "3/2018"}, {"body": "featurenotbug computed calculate called getter accessed render function", "d": "3/2018"}, {"body": "ouch debugging half day suddenly got stuttering animations lately smile", "d": "3/2018"}, {"body": "vue utility library utility functions contained private parts change remove refactor without worrying breaking users code fact intentionally removed lot utility functions exposed perfectly fine use dedicated library purpose", "d": "3/2018"}, {"body": "recognize maintenance benefits philosophy also fosters dependency proliferation code bloat apps javascript linker would nt say alas suppose vue provided unstable api section wherein function signatures could change across mx mnx releases many utilities attributeescape presumably highly stable", "d": "3/2018"}, {"body": "take issue", "d": "3/2018"}, {"body": "course", "d": "3/2018"}, {"body": "posuva since first contribution tell startoff", "d": "3/2018"}, {"body": "ajomadlabs suggest searching string file go case", "d": "3/2018"}, {"body": "posva replace value actual value encountered correct wrong", "d": "3/2018"}, {"body": "ajomadlabs goal allow dev see value generated error name props failed test guessing string could something like defined consistent vue messages also sure display type value adding quotes string like quotes number like", "d": "3/2018"}, {"body": "alexandrebonneau thanks", "d": "3/2018"}, {"body": "since nothing happened days wondering could taker one first contribution", "d": "3/2018"}, {"body": "dczombera working getting stuck middle", "d": "3/2018"}, {"body": "need particular help getting unstuck ajomadlabs feature highly anticipated around", "d": "3/2018"}, {"body": "alexandrebonneau think found", "d": "3/2018"}, {"body": "shipit", "d": "3/2018"}, {"body": "issue grab seems like since progress made", "d": "4/2018"}, {"body": "kotapi created pr issue days ago closed yet think waiting decisions vue team", "d": "4/2018"}, {"body": "alright yuriyalekseyev", "d": "4/2018"}, {"body": "folks update pr would love merged", "d": "4/2018"}, {"body": "seems related", "d": "3/2018"}, {"body": "duplicate", "d": "3/2018"}, {"body": "seems related element gets moved necessary causing blur wonder inserted could called end rather exactly inserted valid workaround focus element", "d": "3/2018"}, {"body": "work confirmed", "d": "3/2018"}, {"body": "case element reused hook fired moved technically diffing could probably improved since need really move guaranteed cases provided safer always focus nexttick", "d": "3/2018"}, {"body": "posva take issue", "d": "3/2018"}, {"body": "even stupid situation sfc compiler nt throw error least config seems invoke sassloader eslint sass got transpiled worked intended behavior", "d": "3/2018"}, {"body": "also multiple tag exists last tags simply ignored", "d": "3/2018"}, {"body": "workaround moment use instead", "d": "3/2018"}, {"body": "moment debounced used local property works wanted let know bug", "d": "3/2018"}, {"body": "may dup", "d": "3/2018"}, {"body": "oh yeah nt even check code see vshow transitiongroup expecting seems related may caused different things think keep open moment", "d": "3/2018"}, {"body": "fixed released yet", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "autoclosed wow good", "d": "3/2018"}, {"body": "vitalyt", "d": "3/2018"}, {"body": "frlinw thank still think milestones maintained standard way planning update plus developers github check first also roadmap nt show much done toward next release ie indication progress", "d": "3/2018"}, {"body": "auto closed clear issue policies issue template obviously nt read github milestones nt mean use maintainers decide manage plans project also next time make suggestions open source project consider using tone actually sounds like suggestion rather making demands like paying customer", "d": "3/2018"}, {"body": "polite suggestion saying pay get make suggestions rest dance around maintainers decide manage plans project sounds positively autocratic", "d": "3/2018"}, {"body": "anyone make suggestions given proposed proper manner request also valid suggestion bit entitled side please stop stretching words", "d": "3/2018"}, {"body": "already planned", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "wow prompt reply thank expected release time update", "d": "3/2018"}, {"body": "possible way fix whenever property like removed remove property starting name force adding style", "d": "3/2018"}, {"body": "way see removing property since shorthand sub properties like removed well expected nt want removed apply remove individual properties instead lot css propertiesshorthands like top head font border grid flexbox really vue scope deal imo", "d": "3/2018"}, {"body": "phanan exactly problem even though model still contains sub properties ignored style reappliment case bug kind wysiwyg editor user able apply css styles object merged base values thus possible object properties", "d": "3/2018"}, {"body": "matwaligora think add back tag styles applied makes things clearer", "d": "3/2018"}, {"body": "slowly getting idea still reduce simple fiddle tell reproduce issue without need fullblown sfc app", "d": "3/2018"}, {"body": "ok refactored reproduction project something smaller", "d": "3/2018"}, {"body": "ok nt enough time play sandbox right looks like something related change tag either element prevent vue reusing dom problem go away", "d": "3/2018"}, {"body": "yeah solution problem", "d": "3/2018"}, {"body": "wontfix impractical handle possible shorthand variations diffing algorithm solution use shorthand properties inline styles really eg allowing user edit css arbitrarily workaround giving element question key equivalents hash inline styles forces element replaced fresh inline styles change", "d": "3/2018"}, {"body": "yes issue closed nt respect issue usage please check use issues bug reports feature requests", "d": "3/2018"}, {"body": "check nuxtjs want statically rendered websites please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "thanks get", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "thanks proposals doable userland overriding method call original api freeze nt forget override", "d": "3/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "3/2018"}, {"body": "looks like ie triggering focus displaying modal thus reflecting changes variable focuses modal closed set variables probably work around blurring input creating modal behaviour consistent across browsers please nt open issues external libraries checking error nt come demo external libraries reproduces problem interested checking", "d": "3/2018"}, {"body": "\u7531\u4e8e\u91cd\u65b0\u6e32\u67d3\u5f97\u5230\u7684 vnode listeners test bug \u90a3\u4e48\u7ec4\u4ef6\u5728\u70b9\u51fb\u540e\u4f1a\u6267\u884c listeners", "d": "3/2018"}, {"body": "add property inform vue reuse vnode", "d": "3/2018"}, {"body": "hi luobotang work around exists issue think listener updated still bug since reusing vnode case work vue update listeners case remove listeners well", "d": "3/2018"}, {"body": "herringtondarkholme agree", "d": "3/2018"}, {"body": "originally added", "d": "3/2018"}, {"body": "bug fixed last year new release published", "d": "3/2018"}, {"body": "oh lol saw date nt even ask question", "d": "3/2018"}, {"body": "jquery actually trigger native events instead adding logic vue make work specifically jquery make sure indeed triggering native events", "d": "3/2018"}, {"body": "makes sense function defined think defining provided jquery general adding something doc explain trigger events andor something jquery little confusing new comers", "d": "3/2018"}, {"body": "yes probably add section regarding interop jquery cc chrisvfritz", "d": "3/2018"}, {"body": "best solution found moment create plugin also create helpers tests ember understand scope vue maybe better create plugin check time fits goals", "d": "3/2018"}, {"body": "think would something best covered specific cookbook example sarahedo good know time javascript thing rather vue thing think jquery probably make note misleading behavior docs though", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "documentation issues submitted vuejsvuejsorg", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "\u63d0\u4f9b\u4e00\u4e0b\u590d\u73b0\u4ee3\u7801\u4f1a\u6bd4\u8f83\u597d", "d": "3/2018"}, {"body": "closing provided information enough error probably comes code ran ie", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "3/2018"}, {"body": "inside tags escape like regular html html lt foo gt lt foo gt even vue ignored component config would still see nothing html would parsing", "d": "3/2018"}, {"body": "posva implemented directive strip automatically use vue compiles", "d": "3/2018"}, {"body": "posva btw way ignore custom components talking vueconfigignoreelements first global ignores ignoring vue custom components", "d": "3/2018"}, {"body": "oh thought used code anyways said need escape caret character like regular html comes string use looking better workflow put code samples files html vue use custom webpack loader handle transformation string goes beyond vue", "d": "3/2018"}, {"body": "posva nt comes string imagine page demo component description use something like toast use vrawvhighlight html custom directive escape html code highlight syntax", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "possible component used inside another component one scope referring first one second one", "d": "3/2018"}, {"body": "feel need ambiguity pointed posva indeed problem probably need form special syntax get rid ambiguity", "d": "3/2018"}, {"body": "confusing working", "d": "3/2018"}, {"body": "convinced directive something wrong different name like apart looking different thing nice short relates clearly personally nt like much beginning semantical meaning thus nt read like stuff vue", "d": "3/2018"}, {"body": "anselwong requires", "d": "3/2018"}, {"body": "posva true primary reason using means becomes new reserved prop ie user components longer use prop name", "d": "3/2018"}, {"body": "", "d": "10/2018"}, {"body": "use computed property setter emit event", "d": "3/2018"}, {"body": "mean alternative proposed change information could also copy props data use deep watcher proposed syntax seems still much cleaner actually nt know could implement computed setter see example course throws warnings changing data nt actually supported yet", "d": "3/2018"}, {"body": "model option apply components form fields inside components", "d": "3/2018"}, {"body": "oh right supposed given child component new option supposed given component contains renamed updated proposal", "d": "3/2018"}, {"body": "nt quite flexible api expression vmodel may name prop second thought something nt solved extra property would apply every vmodel nt feel intuitive rest api two choices first one expanding one one use computed properties setters could also create helper function generates computed properties similar way vuex", "d": "3/2018"}, {"body": "application developer puts expression currently would assignable course also provide callback handle expression see problem yes point new option apply every vmodel component exactly default feels like arbitrary choice nt cover many important use cases manually expanding might work components still less intuitive nt work checkboxes radiobuttons selects sure something like would workaround example problem would still require listing modelnames nt understand better force user catch computed setter instead allowing changed first place", "d": "3/2018"}, {"body": "fyi checkboxes radios selects emit events", "d": "3/2018"}, {"body": "also skip rendering using way stop going deeper nonexistant nested object js please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "3/2018"}, {"body": "fixed via", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "import tableitem tableitemjs lt js must vue", "d": "3/2018"}, {"body": "keep mind unit test different component exports raw component exporting wrapped component one work though", "d": "3/2018"}, {"body": "nt public api nt included typing may ask need access test", "d": "3/2018"}, {"body": "nt concrete use feel ought possible test specifically case test thing unit testing tutorial using typescript case fair enough perhaps unit testing tutorial example changed", "d": "3/2018"}, {"body": "doc might conctrived indeed", "d": "3/2018"}, {"body": "docs example improved root difference plain object options vs extended constructor closing nothing fixed type definition", "d": "3/2018"}, {"body": "change component use sure anyway still problem ca nt access hook true nt realistic example perhaps second example try call function suffers problem", "d": "3/2018"}, {"body": "eg", "d": "3/2018"}, {"body": "use template tag wrap elements would use display text", "d": "3/2018"}, {"body": "supported template used container structural directives text use double mustaches", "d": "3/2018"}, {"body": "maxirozay nt worry white space renders screen tags eg vs mydata working large teams simplifies ui inconsistencies white space introduces html lots devs nt realize white space rendered screen", "d": "3/2018"}, {"body": "gave valid reason", "d": "3/2018"}, {"body": "said use double mustaches spaces renders also something like", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "3/2018"}, {"body": "issue goes away remove suspect actually safari bug", "d": "2/2018"}, {"body": "looks like safari bug seems happen adding class sometimes style removing element vue feel free use fiddle report bug safari edit tried find workaround using setting position absolute also triggers bug find complex workaround safari fixes bug", "d": "3/2018"}, {"body": "thank posva submitted bug safari", "d": "3/2018"}, {"body": "imo problem implementation vueautonumeric description component using separate watchers imperatively produce side effects changes different values two values coupled order importance correct implementation get rid order dependence use watcher watches values watch getter function expression produce desired side effects even better use computed properties", "d": "2/2018"}, {"body": "warning telling use template", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "tldr maybe indeed allow required default value check saying prop required expect user always provide value making default value defeats purpose prop required require prop means need information user way provide fallback value otherwise enforce prop never null also providing default value prop value provided values always skip validation want take deeper look prop validation works check research past issues found comment hmm yeah needs accurate indicates value explicitly marked present remain indicates value present default value used available indicates neither allowed unless default used agree could confusing existence vs language design trying stay close values designed represent js changing would break", "d": "2/2018"}, {"body": "yeah currently issue implies prop absent prop value nully validation skipped altogether way enforce prop nonnully times without hence prop omission disallowed also think docs could clear precise definition option", "d": "2/2018"}, {"body": "validation always skipped nully values though validation always skipped nully values though contributions docs always welcome", "d": "2/2018"}, {"body": "validation always skipped nully values though given", "d": "2/2018"}, {"body": "javoski confirmed section code", "d": "2/2018"}, {"body": "right undefined validation skipped nonrequired props", "d": "2/2018"}, {"body": "new flag", "d": "3/2018"}, {"body": "toooooooooooo long hope find keyword one word", "d": "3/2018"}, {"body": "toooooooooooo long also reads awkwardly one thinks personally go adding declaration using flag realize little outside typical vue approach", "d": "5/2018"}, {"body": "issue issue issue", "d": "2/2018"}, {"body": "coolzjy", "d": "2/2018"}, {"body": "\u8bf7\u81ea\u884c\u5173\u95ed\u8fd9\u4e2a issue", "d": "2/2018"}, {"body": "coolzjy konw\u4e86", "d": "2/2018"}, {"body": "\u5230forumvuejsorg team member \u68c0\u7d22\u73b0\u6709\u95ee\u9898", "d": "2/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "2/2018"}, {"body": "inherent javascript nature objects passed reference components end modifying object btw declare initial data sure hardcoding values example maybe want please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "2/2018"}, {"body": "nt think good idea easier handle application level displayed internet connection need dynamic approach retry fetching component implement userland using data property set result promise resolves component making easy trigger new request", "d": "2/2018"}, {"body": "done wrapper component nt need builtin", "d": "2/2018"}, {"body": "expected behavior inline template nt access parent scope fact one reasons recommend using inline templates", "d": "2/2018"}, {"body": "thanks evan pretty impressive response time added code inline templates simple example nt mean draw attention aspect github issue clarify main concern warning causing minified unminified versions vue different things lead code working production development chose use unminified version development updated issue name make clear thanks ryan", "d": "2/2018"}, {"body": "looks like warning displayed scenario", "d": "2/2018"}, {"body": "warning displayed usage wrong development breaks app since deploying app breaks development production nt think really need fix behavior behavior dev production guaranteed consistent app works properly development production lot runtime checks removed assume fix development", "d": "2/2018"}, {"body": "ups sorry thought failing parse property simply misread", "d": "2/2018"}, {"body": "solved userland actually already exist made together shentao", "d": "2/2018"}, {"body": "incrementing value attribute also reading vue observing rerendering everytime changes stops rendering times template modify values use index iteration instead method compute value based parameters", "d": "2/2018"}, {"body": "rule thumb never produce side effects templates", "d": "2/2018"}, {"body": "problem call signature returns ts gets wrong inference think best solution await conditional type ts cc ktsn", "d": "2/2018"}, {"body": "yes seems handle dateconstructor without conditional types fyi manually annotate", "d": "2/2018"}, {"body": "valid issue misspelled", "d": "2/2018"}, {"body": "yaodingyd right misspelled", "d": "2/2018"}, {"body": "ups thanks nt see typo either", "d": "2/2018"}, {"body": "passing children specify place although would agree would make things easier assigned automatically corresponding think writing template way would note explicitly name slot say slot need things render functions example functional nonfunctional components sure giving right solution think pr document although sure approach take cc chrisvfritz documentation shows attribute nt section pass slots render functions", "d": "2/2018"}, {"body": "posva think difference templates nt concept since meant used transparent wrappers components exactly transparent wrapper know slots child order explicitly pass sound like bug", "d": "2/2018"}, {"body": "thank", "d": "3/2018"}, {"body": "heads likely going revert change commit led regression revisiting change believe technically incorrect support passing raw array mean discarding named slots information use case creating transparent wrappers pass named slots asis work around js helper explicitly passes named slots passed function mapslots h slots return objectkeys slots map name gt return h template slot name slots name const compa functional true render h slots return h compb mapslots h slots obviously verbose workaround necessary ensure correct behavior common use case also consider easier way pass named slots render functions pretty much like", "d": "6/2018"}, {"body": "ok thanks warning", "d": "6/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "2/2018"}, {"body": "feature request methods resolve vue give handsome", "d": "2/2018"}, {"body": "actually sent wrong reply issue looks like bug report would like see boiled repro", "d": "2/2018"}, {"body": "need let vue know use templates either add data", "d": "2/2018"}, {"body": "thanks fixed issue still suboptimal make huge list types using solve automating possible write proper fix vue make happen limitation workaround fixes second searched docs instanceof find anything related miss something fix explaining somewhere", "d": "2/2018"}, {"body": "fix need explicitly add classes way add data using instances data usually good idea serializable making hard use ssr applications nt found docs", "d": "2/2018"}, {"body": "generateui fix issue adding class vueprototype nt work", "d": "3/2018"}, {"body": "indexjs works see also indexjs file", "d": "3/2018"}, {"body": "approach use method first import class definition implements method test use", "d": "6/2018"}, {"body": "seems regression feature internal change tried seems work well found workaround yet", "d": "2/2018"}, {"body": "likely related considered fix related issue", "d": "2/2018"}, {"body": "would argue vue intended used animations rapidly changing style value bindings would horrible performance simple components rerender whole component every scroll event opinion rather done dom level ie custom directive dedicated animation library biger things", "d": "2/2018"}, {"body": "looks like deferred rerendering triggered event handler produces problem add scroll event listener manually inside hook avoid example", "d": "3/2018"}, {"body": "link vuenexttick doc shows nexttick callback executed next dom update may breaking change vue necessary better vue", "d": "3/2018"}, {"body": "currently callbacks longer assured invoked dom updates stated docs may lead confusion way normal developers know caveat would good knowledge internal mechanism order use without breaking code us one vue best part developers would nt dig internals create rather complicated yet performant applications works", "d": "3/2018"}, {"body": "think likely revert always use microtask change fixed really niche edge cases incurs quirks like actually problematic ones fixed", "d": "3/2018"}, {"body": "update lack correctconsistent nexttick really causing problems trying ensure vue nonvue parts ui updated frame", "d": "9/2018"}, {"body": "add class right element added dom browser able trigger css transition browser checks transform also check transform applied turns none therefore skips transition need make work demo vue", "d": "2/2018"}, {"body": "previous understanding transition nt work vanilla js example event loop finish task queue clear stack first proceed render queue case first renders already rendering element test loaded class thus transition possible reference pensive however vue case thought mounted means executing code component already mounted rendered already initial transition state rendered first different vanilla js case one initial state already element test loaded class", "d": "2/2018"}, {"body": "closed via", "d": "3/2018"}, {"body": "solved problem also meet question", "d": "3/2018"}, {"body": "version also problem", "d": "3/2018"}, {"body": "nt solve however bundle renderer works think would nice solved point basic approach straightforward purposes would sufficient", "d": "3/2018"}, {"body": "importing bundling inside application requiring another copy vue via commonjs two conflicting copies vue script need externalize vue webpack config bundle script using copy vue see", "d": "3/2018"}, {"body": "currently option called preservewhitespace vue loader choose strip empty text nodes using single file components actually option vuetemplatecompiler afaik exposed runtime api yet", "d": "2/2018"}, {"body": "thing happens regular html empty lines css apply html want spaces however remove white spaces template html item closing sure new line replaced empty space behaviour consistent automatically removing whitespaces using newlines regular html would yield result", "d": "2/2018"}, {"body": "want spaces however remove white spaces template really practical solution though putting everything one line turns unreadable mess anything trivial templates closing sure new line replaced empty space behaviour consistent automatically removing whitespaces using newlines regular html would yield result vue collapse everything inside single line already chomping newlines turning spaces instead wants preserve newlines sure would consistent vanilla html acts nt currently results unintuitive justineo using seem get intended result said available via moment way activate single node bit icky turn entire project want behavior single template even single part single template great directive like could used individual node briefly looked writing directive get end result reasonable hook use seemed changing element point led inconsistent results probably good place touch html", "d": "2/2018"}, {"body": "way activate single node like evan said except might solved css think better keep consistent across whole project custom directives may work remove whitespaceonly text nodes instead setting directly", "d": "2/2018"}, {"body": "like evan said except might solved css think better keep consistent across whole project nt really work reusable components library ca nt least nt force users change projectwide settings also applicable using moment custom directives may work remove whitespaceonly text nodes instead setting innerhtml directly right seemed make work nicely example directive anyone comes across looking solution javascript function trimemptytextnodes el let node elchildnodes nodenodetype nodetextnode amp amp nodedatatrim noderemove vuedirective trimwhitespace inserted trimemptytextnodes componentupdated trimemptytextnodes open question remains regarding vue chomping newlines single space rationale behavior chomped newlines nothing rather single space would work box", "d": "2/2018"}, {"body": "collapsing new lines white spaces consistent behavior html", "d": "2/2018"}, {"body": "html renders consecutive whitespaces including newlines everything single space chomping consecutive whitespaces single space results exact render output reducing payload intended fact consistent expect styling plain html css", "d": "3/2018"}, {"body": "unless use tag general", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "maybe meaning", "d": "2/2018"}, {"body": "jounqin yeah changed description", "d": "2/2018"}, {"body": "perhaps means behave like von works way something like passed sure nt executed template parsed event emitted", "d": "2/2018"}, {"body": "jangjoe exactly", "d": "2/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "2/2018"}, {"body": "ie problem firing input event happens without vue listen another event also emitted ie", "d": "2/2018"}, {"body": "guess problem webpackdevserver instead vue try replace directory ie wo nt recognize babel wo nt work anyway solved mine worth try", "d": "2/2018"}, {"body": "much without minimal reproduction consider using forum discord server stackoverflow ask help need share code want others help", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "oltika use forum discord server stackoverflow questions", "d": "2/2018"}, {"body": "please actually read responses keep opening issues ignoring policies block", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "supported intentional extra properties arrays jsonencodable", "d": "2/2018"}, {"body": "wo nt work even future", "d": "2/2018"}, {"body": "point consistency reassign different empty array extra properties reactives change array content extra properties reactives change extra property array extra properties reactives extra properties array jsonencodable impossible get work nt want support", "d": "2/2018"}, {"body": "property never reactive reassign change array content triggers component rerender accidentally pulls latest value property update caused property technical limitation bestpractice enforcement state jsonencodable leads problems debugging tools serverside rendering", "d": "2/2018"}, {"body": "know getterssetters array extra properties meant feels like reactive confusing reactives metadata array wrap object big deal well arrays objects thanks explaination ssr amp debug needs", "d": "2/2018"}, {"body": "duplicate make sure open issue right repo", "d": "2/2018"}, {"body": "value got string modifier helpful", "d": "2/2018"}, {"body": "thanks quick reply works charm", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "remove check actually would nt solve problem", "d": "3/2018"}, {"body": "eddyerburgh simulating ssr mocking browser environment", "d": "3/2018"}, {"body": "would running unit tests serverside code process tests clientside code vue test utils two vueservertestutils would good run tests using libraries process set differently depending method used js import rendertostring vueservertestutils import shallow vuetestutils rendertostring testcomponent yes shallow testcomponent html", "d": "3/2018"}, {"body": "think leave users run tests ssr code correct environment making isserver writable makes possible write tests pass fail production", "d": "3/2018"}, {"body": "forgot prop component", "d": "2/2018"}, {"body": "posva mean add warn change version really works well without adding", "d": "2/2018"}, {"body": "course also need remove using correctly", "d": "2/2018"}, {"body": "please update document copied code straight away posva", "d": "2/2018"}, {"body": "done nt forget also nice contribution", "d": "2/2018"}, {"body": "think returning string definitely worth better writing string regarding array containing strings could create textnodes", "d": "2/2018"}, {"body": "nkovacs problem creating root node output returning would look like valid within vue requires root element either wrap tag directly instead defining template pass wrapping element tag name like component", "d": "2/2018"}, {"body": "functional component multiple root elements allowed example works fine even workaround works fine strings converted text nodes", "d": "2/2018"}, {"body": "okay bad never used functional components way ended multiple roots", "d": "2/2018"}, {"body": "fixed", "d": "3/2018"}, {"body": "consistent indeed name components camelcase fix error btw probably normalization going working correctly", "d": "2/2018"}, {"body": "yes mostly use pascalcasing actual code camelcasing thought name comes third party library help though bit tricky naming done party libraries consistent normalization good cheers", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "intentional even error telling templates responsible mapping state ui avoid placing tags sideeffects templates", "d": "2/2018"}, {"body": "hmm thinks bit unfortunate inlining svgs may ship default styles", "d": "2/2018"}, {"body": "agree styles inside svg maybe kept", "d": "2/2018"}, {"body": "unfortunately tags inside svgs scoped svg element indeed global side effect nt think treat differently", "d": "8/2018"}, {"body": "root vue component always created javascript land would pass data using standard javascript objects want query dom data away", "d": "2/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow maybe looking", "d": "2/2018"}, {"body": "need use instead even without vue", "d": "2/2018"}, {"body": "please provide proper reproduction believe behavior correct misleading jumping directly feature requests makes difficult evaluate enough context", "d": "2/2018"}, {"body": "thought bit warning like nt make sense perfectly normal computed prop collected dependency initial render used part template conditionally rendered yet would create strange warnings perfectly fine situations hand useful rare ones think evan misunderstood request bit would agree keep closed really doable way creating unnecessary misleading warnings", "d": "2/2018"}, {"body": "linusborg thinking would warn computed prop never consumed anywhere including conditional logic computed way would extra warnings idea warn computed props legitimately unused possibility ever evaluated current logic", "d": "2/2018"}, {"body": "thinking would warn computed prop never consumed anywhere would require vue go meta component analyse understand component code data flow wo nt even possible included babel vue generating warning question could maybe write eslint rule eslintpluginvue statically checks sure eslint clever", "d": "2/2018"}, {"body": "afraid would say", "d": "2/2018"}, {"body": "use imperative api", "d": "2/2018"}, {"body": "imperative api called lifecycle hook degree defies point watch simple semantic convenience layer internal api course could use watch api craft solution way think worthwhile give users watch syntax track multiple dependencies beginning least leaving considerationdiscussion vs closing prematurely", "d": "2/2018"}, {"body": "thought bit build pluginmixin concerning quickly closing issues practically api freeze add things large usability impact lot people order keep size api surface small enough useful lot people come wo nt probably nt invest limited resources", "d": "2/2018"}, {"body": "linusborg thought end number priority keep components clean possible also consistent documentation others reuse edit yes could add code component even fork vue code mentioned every component soon cross line code longer consistent understandable also know internals well yet lot easier yell guys", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "documentation mention lazy evaluation reported documentation linked disclose lazy evaluation misleading documentation", "d": "2/2018"}, {"body": "described computed properties often reevaluated underlying data changes bug aware situations case need provide bug report reproductions", "d": "2/2018"}, {"body": "true false computed property used dom anywhere else reevaluate even data changes", "d": "2/2018"}, {"body": "long discussion forums mainly refers computed props evaluated accessed access directly indirectly render function example wo nt value devtools example think mention docs would fine since otherwise people confused computed prop nt update even though one dependencies changed reason might part render tree using next rerender skipped conditional people using computed prop might confused nothing logging console documentation issues opened vuejsvuejsorg repository", "d": "2/2018"}, {"body": "linusborg thanks translating apologize posting wrong repo nt see one initially thanks tip", "d": "2/2018"}, {"body": "related issue mentioned well user understand computed props updated accessed think critical point otherwise mistaken bug source frustration", "d": "2/2018"}, {"body": "since works makes sense also support checkbox", "d": "2/2018"}, {"body": "looks like bug probably check replaced", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "translate may good job looks want way abort transition", "d": "2/2018"}, {"body": "\u4f60\u7684\u65b9\u6cd5\u4e2d\u6a21\u7248\u5b57\u7b26\u4e32\u6f0f\u4e86", "d": "2/2018"}, {"body": "\u540c", "d": "2/2018"}, {"body": "feel free submit pr feature request", "d": "2/2018"}, {"body": "actually already done", "d": "2/2018"}, {"body": "accepted", "d": "2/2018"}, {"body": "would reallife scenario useful trying yo bff earns situation would apply listener child component later upfront", "d": "2/2018"}, {"body": "nt think good idea replay previously cached events whenever attach event listener looks like specific use case implemented userland replacing custom implementation call original one", "d": "2/2018"}, {"body": "usage sound like good idea slots definition indeterministic may single component may also multiple components single element multiple elements ref behavior really ambiguous directly calling methods ref component code smell use events state management pattern", "d": "2/2018"}, {"body": "agreed", "d": "2/2018"}, {"body": "wip translation effort nt know active suggest get touch anyway correct repo discussing documentation including translations vuejsvuejsorg", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "hello intentionally removed see details", "d": "2/2018"}, {"body": "asking coerce come back intentionally removed favour computed properties", "d": "2/2018"}, {"body": "problem computed properties nt replace functionality creating unwanted aliases need one variable", "d": "2/2018"}, {"body": "point method manually implementing coerce vue via plugins essential use case", "d": "2/2018"}, {"body": "may able use prop read value coerce removed basically computed property realiased better values explicit approach", "d": "2/2018"}, {"body": "duplicate", "d": "2/2018"}, {"body": "duplicate may want enable", "d": "2/2018"}, {"body": "leebenson want say thanks revelation consistently experienced issues webpack typescript resolving imports properly turns using works actually returns null", "d": "4/2018"}, {"body": "thank much ktsn works like charm heart sparkles", "d": "7/2018"}, {"body": "note double single quotes vue directive values javascript expression recommended way represent string literal compiles plain javascript see directive literal modifier removed", "d": "2/2018"}, {"body": "thanks replies know singledouble quotes trick still looks ugly easy miss make typo different solution mentioned solution appropriate", "d": "2/2018"}, {"body": "quote another api change occur think reasoning proposal might rejected similar issue proposal syntax eg prop result different values based component prop type expectations consumer component need understand complex conversion rules gets casted b props expects type amp b together order infer eventual value something casted comparison simpler rule set prop xxx always string prop xxx always expression true false use well prop true type boolean special case makes sense easy tell", "d": "2/2018"}, {"body": "sirlancelot said", "d": "2/2018"}, {"body": "like idea since getting common would probably nice thing", "d": "2/2018"}, {"body": "feature would great add another example currently works workaround catch error try catch block could nt find way trigger error vue instance possible thought maybe convention emitting event might work think something similar could helpful", "d": "4/2018"}, {"body": "think comfortable vuex actions wish implemented asap vuexactionsjs javascript async postsomething commit params await requireauthaction mainjs", "d": "6/2018"}, {"body": "issue fixed using hacky mixin catch errors thrown async methods send errorhandler javascript import vue vue mixin fixes following issue errorhandler work async component methods export default beforecreate const methods optionsmethods objectentries methods foreach key method gt methodasyncwrapped return const wrappedmethod function args const result methodapply args const resultispromise result amp amp typeof resultthen function resultispromise return result return new promise async resolve reject gt try resolve await result catch error errorhandled const errorhandler vueconfigerrorhandler consoleerror errorhandler error errorhandled true reject error wrappedmethodasyncwrapped true methods key wrappedmethod", "d": "7/2018"}, {"body": "doeke way get working hook glance nt seem like would", "d": "8/2018"}, {"body": "erikbjare could loop component check existance hooks personally went back catching exceptions manually components using send actual unhandled rejections analytics works chrome", "d": "8/2018"}, {"body": "hi expanded doeke mixin simulate propagation errorcaptured hooks may also async sure works spec may help someone temporarily issue resolved javascript import vue vue mixin fixes following issue errorhandler work async component methods async function propagateerrorcaptured component error vm let continuepropagation true const ec component optionserrorcaptured ec instanceof array let lt eclength continuepropagation ec apply component error vm typeof continuepropagation object amp amp typeof continuepropagationthen function wait promise continuepropagation await continuepropagation continuepropagation break component parent amp amp continuepropagation return await propagateerrorcaptured component parent error vm else return continuepropagation export default beforecreate const methods optionsmethods objectentries methods foreach key method gt const wrappedmethod function args const result methodapply args const resultispromise result amp amp typeof resultthen function resultispromise return result return new promise async resolve reject gt try resolve await result catch error const continuepropagation await propagateerrorcaptured error continuepropagation vueconfigerrorhandler vueconfigerrorhandler error else reject error methods key wrappedmethod", "d": "9/2018"}, {"body": "doeke code nice catch error reject", "d": "10/2018"}, {"body": "pass without curlies vue nt magic interpolation javascript expression", "d": "2/2018"}, {"body": "use button android event something vue fix need site work mobile avoid relying keyup events submit logic", "d": "2/2018"}, {"body": "looks like firefox selecting value vue rerenders happens timestamp updating every second vue needs rerender case renders whole template solution actually quite simple isolating select component nt rerender outer content rerenders", "d": "2/2018"}, {"body": "duplicate", "d": "2/2018"}, {"body": "export default created var style documentcreateelement style styletype textcss styleid name stylesetattribute scoped styleinnerhtml content dynamic generated styles documentgetelementsbytagname head appendchild style problem also like small difference problem issue trying lot deep also gt gt gt still nt get another solution one thanks", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "duplicate need things booleans set different type prop reality booleans", "d": "2/2018"}, {"body": "whenever call set array whole array flagged dirty track array index access expected behavior trade prioritize correctness improved switch proxies", "d": "2/2018"}, {"body": "probably mean caveats whenever call set array call set array call set item array reworked example make visual", "d": "8/2018"}, {"body": "expected behavior router view functional component registers route dependency component using", "d": "2/2018"}, {"body": "need add nested one appearing nt apply transition first time rendered", "d": "2/2018"}, {"body": "posva thanks working used inside single file component code ideas", "d": "2/2018"}, {"body": "work well create reprodiuction open issue reproduce", "d": "2/2018"}, {"body": "posva linusborg hi tried found leave transition missing enter transition work appear attribute help please", "d": "4/2018"}, {"body": "need reproduction understand problem ca nt help ca nt provide", "d": "4/2018"}, {"body": "would mean check properties accept units opposite checking unit provided unit provided many possible units em rem px ms well people probably expect check validity units prevent typos like pb depends keyboard try plain page set style element number see browser nt print warning error nt even add element ignores browser problem frontend libraries suffer rather see warning browser console warning emitted different frontend frameworks imo belong vue", "d": "2/2018"}, {"body": "true also good alternate behavior would least lead tohint path discovering working vue converted number without unit simple invalid value", "d": "2/2018"}, {"body": "vue converted number without unit simple would strange afaik vue nt mess strings style bindings way", "d": "2/2018"}, {"body": "vue nt convert unit absolute works units nt need one try console see nothing happens", "d": "2/2018"}, {"body": "following example updating input width correctly stuck unless specifically add px unit style binding", "d": "2/2018"}, {"body": "think warn styles frontend framework good idea style behaviors defined specific platform put warnings plugin appropriate way css length could number without unit weex seen taking default unit another word pass number could valid using vue weex", "d": "2/2018"}, {"body": "spacemon ys expected behaviour like guide shows vue doesnt add add posva explained validating css syntax even development surely complex integrate", "d": "2/2018"}, {"body": "alright seeing mentions even feature weex guide section must missed fine asis guess something put nt work check list", "d": "2/2018"}, {"body": "believe bug typescript cast ts import vue propoptions vue vueextend props myprop type array propoptions", "d": "2/2018"}, {"body": "herringtondarkholme know specific issue track related", "d": "2/2018"}, {"body": "guess problem overloading commenting last overloading signature solves", "d": "3/2018"}, {"body": "boiled reproduction ts type prop declare function test prop declare function test prop toggle line var test array apush", "d": "3/2018"}, {"body": "issue tracked nothing vue let close wait ts team fix manually annotate prop definition shown", "d": "3/2018"}, {"body": "\u8fd9\u662f element ui vue \u8fd9\u91cc\u6765\u62a5", "d": "2/2018"}, {"body": "got thx", "d": "2/2018"}, {"body": "like", "d": "2/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "2/2018"}, {"body": "jounqin thank help dll bundle prebuilt uploaded cdn later think may necessary write dll file webpack mfs use dllplugin webpack server build require statement built app bundle like normal node require statement fine", "d": "2/2018"}, {"body": "sharing codes development simply add dll script template html like", "d": "2/2018"}, {"body": "yeah script necessary", "d": "2/2018"}, {"body": "hi thanks filling issue due fact javascript object literals key please quote key instead", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "use vue expecting valid javascript expression attribute value neither values js expressions want surround value single quotes like since providing static string better remove entirely vbind documentation", "d": "2/2018"}, {"body": "ok thanks", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "oops sorry thought posted somewhere else", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "fiddle nt params actually pass params way want please next time consider using forum discord server stackoverflow questions first feel free come back open issue vuerouter repository turns bug", "d": "2/2018"}, {"body": "js common pitfall beginners vue said editor linter", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "\u8fd9\u4e2a\u5230", "d": "2/2018"}, {"body": "think better explicit magical imo easily made painless editor snippet", "d": "2/2018"}, {"body": "see", "d": "2/2018"}, {"body": "coolzjy thanks response think issue regarding unless failing see connecting dots agree comments nt want propagate return values saying expected return value handlers exactly method returns unexpected apparent called inline handler wo nt return result case specifically", "d": "2/2018"}, {"body": "think makes sense behaviour consistent", "d": "2/2018"}, {"body": "thank suggestion making similar control spent morning trying figure could nt await async event handler refactoring gets desired behavior", "d": "9/2018"}, {"body": "nothing prevents using getelementbyid code also pass elements around dispatching actions closing since nothing vue preventing access html elements looks like question check forum discord server stackoverflow questions", "d": "2/2018"}, {"body": "come ask question nt answer forum chat keep issues bug reports feature request please respect maybetry sharing code forum question likely people help provide code", "d": "2/2018"}, {"body": "already think share code forum help element problem really really need help people known vuejs well", "d": "2/2018"}, {"body": "template add tag name need send somewhere pass argument usual ref documentation", "d": "2/2018"}, {"body": "pass function missing need put everything yes xxx please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "2/2018"}, {"body": "staticrenderfns vuecompile yes xxx staticrenderfns add correct thanks", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "need change bind method copy example reference", "d": "2/2018"}, {"body": "thanks gotraveltoworld taking time reply works expected still considering behaviour example buggy api docs states used without argument used bind object containing attribute namevalue pairs note mode class style support array objects example mentioned whats wrong use case note set attribute wanted take advantage gon na try set explicitly rest argument", "d": "2/2018"}, {"body": "altered example surprise solution bind argument specifically use bind rest arguments dont understand behavior updated example", "d": "2/2018"}, {"body": "probably creating component named could nt reproduce jsfiddle next time please take time provide proper repro using one links provided vue issue helper thanks", "d": "2/2018"}, {"body": "posva mistake component named thanks much", "d": "2/2018"}, {"body": "\u76d1\u542c\u4e2d\u6587\u6587\u672c\u8f93\u5165\u4e0d\u80fd\u7528 input", "d": "2/2018"}, {"body": "get value composition ends please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "2/2018"}, {"body": "handled", "d": "2/2018"}, {"body": "used development runtime faster building also using ts", "d": "2/2018"}, {"body": "sorry bug report nt help debug apps", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow discord chat happy help", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "2/2018"}, {"body": "make sure include css libraries first js mainjs import vue vue import bootstrapcssbootstrapcss nt know import app app rest code please next time consider using forum discord server stackoverflow questions first feel free come back open issue relevant repository template vueloader case turns bug", "d": "2/2018"}, {"body": "thanks comment fixed way already used write css component scope overridden global css component level css priority right wrong please correct", "d": "2/2018"}, {"body": "also depends css rule specificity completely different topic unrelated vue", "d": "2/2018"}, {"body": "arrow functions nt please refer updated demo", "d": "2/2018"}, {"body": "also directives longer instances means inside directive hooks instead receive everything might need arguments really must persist state across hooks el", "d": "2/2018"}, {"body": "sqal know used nt think good way child els may removed must write another data container saved child els status avoid conflict container connected parent made redundance associatefor example destroy container destroy directive manually", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "consistent happens expands onto something reconsider next version change breaking change feel free improve section docs could definitely small example instead would great could submit pr", "d": "2/2018"}, {"body": "posva sure glad open pr get chance another approach instead breaking change would slowly introduce eg start printing console warning event names emitted snake case deprecated transition period several versions snake case camel case event names could supported eventually snake case would phased", "d": "2/2018"}, {"body": "hhm usually goes header outside nt think use content use browser detection include scripts want even better serve different page based browser using useragent using vue inside ie comment looks like overkill", "d": "2/2018"}, {"body": "also conditional comments nt go inside head example outlook use case could email editor ui", "d": "2/2018"}, {"body": "hi thanks filling issue conditional comments gets translated ie soon html parsed elements therefore manipulated meant static manipulated javascript verify behavior going open example ie say open inspector wo nt see conditional comments dom tree even add one manually editing html comment gets transformed real html elements comment seen edited", "d": "2/2018"}, {"body": "easier use package like browser detect toggle content", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "component exported property input looks like might eg nt able change componentsinputsinput file could override name using vueextend", "d": "2/2018"}, {"body": "hi thanks filling issue repro ca nt put jsfiddle try using github repo thanks", "d": "2/2018"}, {"body": "thank right changed name", "d": "2/2018"}, {"body": "also getting warning using name marked reserved tag name html tags transformed lower case svg tags fnlctrl consistent", "d": "2/2018"}, {"body": "hi thanks reporting however elements teated component vue compiler generates different code component native element kind issue guess please use directly", "d": "2/2018"}, {"body": "duplicate", "d": "2/2018"}, {"body": "actually add directly like besides already working like react fragment", "d": "2/2018"}, {"body": "jzking emits errors use component root element may contain multiple nodes", "d": "2/2018"}, {"body": "duplicate", "d": "2/2018"}, {"body": "fragment table vue item vue \u70b9\u6211 import table table import fragment fragment export default name vcfragmentbasic components vctable table vcfragment fragment methods handleclick e id alert \u4f60\u70b9\u51fb\u4e86\u6211 u ca nt like", "d": "10/2018"}, {"body": "requirement add quotes around class using render functions hu would news elaborate", "d": "2/2018"}, {"body": "nt keyword used property key identifier also code goes compiler like babel quote wo nt break even obsolete browsers", "d": "2/2018"}, {"body": "ah thanks linusborg docs led astray", "d": "2/2018"}, {"body": "actually valid point docs would open issue vuejsorg repository", "d": "2/2018"}, {"body": "check implies define reactive property using keywords including computed properties adding extra check comouted seems redundant", "d": "2/2018"}, {"body": "user defines computed prop allowed expect use template ca nt inconsistent behavior", "d": "2/2018"}, {"body": "use objectdefineproperty prevent vue picking reactivity large datasets", "d": "2/2018"}, {"body": "need matters actual value data", "d": "2/2018"}, {"body": "agree value important however case trying dynamically generate nested subcomponents based toplevel json schema json schema lets describe generated ui using richer metadata eg required fields alternate label texts etc important understand path eg foobarbaz original expression navigate path json schema", "d": "2/2018"}, {"body": "could something like job", "d": "2/2018"}, {"body": "understand fiddle passing original expression via second parameter nt seem dry nt relying second parameter exactly mirroring first without enforcement would seem prone copypaste errors", "d": "2/2018"}, {"body": "actually custom directives provide less functionality want con nt know bug feature element ca nt twice directive arguments fiddle notice using arbitrary arguments", "d": "2/2018"}, {"body": "already vue working demo wonder done frameworks feature highly reflective nature like asking source string arguments parameters passed function", "d": "2/2018"}, {"body": "leopiccionia like custom directives approach however componentlevel custom directives used child components seems way use toplevel component", "d": "2/2018"}, {"body": "think kennardconsulting problem probably solved stated reading prop expression highly reflective use case mentioned probably nt weigh performance overhead would incur", "d": "2/2018"}, {"body": "modifying active array nt work vue reactivity must use vueset one vueset thistabs idx active true", "d": "2/2018"}, {"body": "please fork test solution first switching tabs works fine problem related code breaks works think something wrong vue reactivity thinks need rerendered fact necessary", "d": "2/2018"}, {"body": "hi thanks filling issue direct reason updated child component render function call modified demo demonstrate behavior due vue updates view render function gets called parent child example updated root render function called first render function calls tab slotsinput outdated finally render function updates slotsinput therefore nothing vue could code actually working vue fundamental update logic trying get child render result inside parent child rendered please consider changing implementation", "d": "2/2018"}, {"body": "nice sample", "d": "2/2018"}, {"body": "hi thanks filling issue loops accesses properties prototype need hasownproperty check related vue common javascript pitfall", "d": "2/2018"}, {"body": "hi fact vue property computed property run twice forloop yes may vue changed property doubt way vue doest similar performance common js add demo common js see", "d": "2/2018"}, {"body": "may reopen", "d": "2/2018"}, {"body": "old issue rejected heavy example", "d": "2/2018"}, {"body": "nt think ssr cache behavior expected either however component cache also needs cache component lifecycle rendering type definition documentation outdated", "d": "2/2018"}, {"body": "actually nt see cache component lifecycle rendering component rendered template cached string html part currently stored object component get fetched cache template static depend store nt see register child components course browser takes back hand make dynamic like every components miss something", "d": "2/2018"}, {"body": "tried remove component registration see breaks inline styles cached version still looking solution store cache external data store", "d": "2/2018"}, {"body": "atinux issue told suggestions could help ssr would love ear", "d": "3/2018"}, {"body": "nt believe caching nt work oo maybe pr help fix still opened february one use cache", "d": "10/2018"}, {"body": "", "d": "2/2018"}, {"body": "\u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c angular js \u043c\u044b \u0447\u0435\u043c vue \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0447\u043d\u0443\u044e \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u043c\u043e\u0441\u043a\u0432\u0435 \u5728 notifications githubcom receiving subscribed thread reply email directly view github mute thread", "d": "2/2018"}, {"body": "\u8fd9\u79cd\u8c04\u5a9a\u7684\u6807\u9898\u8ba9\u4eba\u770b\u7740\u5c31\u6765\u6c14 \u8fd8\u6307\u671b\u6709\u4eba\u613f\u610f\u5e2e\u4f60", "d": "2/2018"}, {"body": "please provide minimal repro opening issue example redis nuxt redis example working docs please open pr instead", "d": "2/2018"}, {"body": "expected vfor higher priority conditionals like vif vshow put one element executed item vfor loop use template tag", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "hello achieved userland component similar untested", "d": "2/2018"}, {"body": "thank u", "d": "2/2018"}, {"body": "added fontsize vleave vleaveto result expect transition fontsize", "d": "2/2018"}, {"body": "relevant vue try fiddle removes vue dependency use web transition need specify fontsize explicitly like", "d": "2/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow maybe want repro issue talking properties", "d": "2/2018"}, {"body": "hey thanks opening issue actually expected behaviour functional components get rendered parent component passed component however simple trick using function example scopedslots make sure functional component rendered call course also use function prop", "d": "2/2018"}, {"body": "happens functional component taking named slot nothing need pass child using expect would quite problematic could produce unexpected side effects slots leaking descendant children specific example functional component look like", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "2/2018"}, {"body": "wait component fully patched use nexttick", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "made mistake code complex event listeningbinding place forgot unregister event listeners beforedestroy hook hence still old context empty refs working thanks much help", "d": "2/2018"}, {"body": "would useful custom elements accept either attributes props name adding whole extra amount awesome convenience", "d": "1/2018"}, {"body": "worth noting attribute prefixed legal dom throw taking symbol vue templates nt get way dom usage", "d": "1/2018"}, {"body": "although interestingly dom element starts attribute like html string attribute gets parsed forbidden set via example", "d": "1/2018"}, {"body": "great idea consider", "d": "1/2018"}, {"body": "think set path object case stuff like following elements js elrotation elrotationy following could convenient template", "d": "2/2018"}, {"body": "anything shorthand beyond original scope proposal nt think magic path extensions good idea like reaching child component private state", "d": "2/2018"}, {"body": "interesting suggest refactor custom elements attributes properties like following makes javascript api less clean live could even automatically map etc", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "yeah easy work around concerned performance like follows adding properties custom elements plus makes clear attributes map directly properties without reaching places represented attributes maybe good thing looking forward prefix notation", "d": "2/2018"}, {"body": "plus makes clear attributes map directly properties without reaching places represented attributes maybe good thing well maybe moot also possible exists custom element instance without attribute part element html api example ssr would send data client attribute js hydration send data element instance property case notation like would work", "d": "2/2018"}, {"body": "reactive changing caused rerender happens pull latest value b well reactive means mutating value trigger rerender", "d": "1/2018"}, {"body": "role child component component wrapper sth like", "d": "1/2018"}, {"body": "reemit child passes prop remember syntax sugar", "d": "1/2018"}, {"body": "sync across multiple layers bad practice anyway unless coupled components used app context consider using global state management solution", "d": "1/2018"}, {"body": "posva make sense way get rid things make wrapper lighter weight like react", "d": "2/2018"}, {"body": "looks like reused component keeping event listeners workaround moment add attribute one components", "d": "1/2018"}, {"body": "checking git version looks like already fixed thanks reporting edit duplicate", "d": "1/2018"}, {"body": "well ca nt work sfcs processed build time javascript code component run later runtime browser", "d": "1/2018"}, {"body": "ca nt even considered enhancement future could possible way achieve ca nt possible", "d": "1/2018"}, {"body": "ca nt even considered enhancement future simply logically impossible could possible way achieve sure context want something like sure something similar stitched together would question forumvuejsorg suggest start discussion topic information requirements feature wo nt happen would would happen vueloader vue would thewrong repository anyways", "d": "1/2018"}, {"body": "nt put script js file use several components", "d": "1/2018"}, {"body": "akryum make lot vue files really nt want", "d": "2/2018"}, {"body": "ok lot html files smile", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "misunderstanding capturing event effect interceptnig event triggered nested child element use capture element triggered event real effect see mdn topic event listeners attached event target event target phase rather capturing bubbling phases events target phase trigger listeners element order registered regardless parameter mode works browsers dont think work around behaviour gets vote", "d": "1/2018"}, {"body": "nt understand want making feature request please make proper one", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "hm indeed odd completeness version using prop updates", "d": "1/2018"}, {"body": "linusborg nt think anything wrong going prop used template root instance normal render changes matter update comes", "d": "1/2018"}, {"body": "yeah ok update twice row nt make sense", "d": "1/2018"}, {"body": "especially since updates nt access prop child see fiddle", "d": "1/2018"}, {"body": "mmh point showed maybe nt see correctly bad", "d": "1/2018"}, {"body": "javoski think would best data whole child component initialization think reactive dependency child component", "d": "2/2018"}, {"body": "xiaodemen sorry ambiguity pr title component props reactive nt collect dependencies initialization data option", "d": "2/2018"}, {"body": "javoski know data option case nt collect dependencies eg component created hook mount hook immediate watch many cases think better pause dependency collection restart perspective lifecycle rather simply reseting case occuring", "d": "2/2018"}, {"body": "xiaodemen yes right nt aware try figure better solution", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "public option vue components yet see vuejsvuejsorg might problematic use outside vue core atm suggest give details current use case help core team consider thoroughly behavior finally make public", "d": "2/2018"}, {"body": "closing due inactivity", "d": "2/2018"}, {"body": "decademoon looks like nt need maintain js vuecomponent checkbox template value checked unchecked props value type boolean default false methods toggle emit input thisvalue gives additional control eg html allows maintain model changes outside component mean emitting event nt mean state changed indicates change full control believe exists", "d": "1/2018"}, {"body": "oevgeny thank response solution wo nt allow component used without check fiddle see checkbox component still toggled without requiring state specified hence necessary", "d": "1/2018"}, {"body": "checkbox probably bad example ca nt imagine use case want checkbox without better example would tabs component sometimes nt care selected tab component maintain state situations need control selected tab parent component prop binding needed", "d": "1/2018"}, {"body": "solution wo nt allow component used withou exactly think ok want components datastate driven want control outside create uncontrolled one utilizing controlled checkbox note nt prop means pass initial value ca nt use hand also emits input event listen changes gives us cleaner separation checkbox state mix controlled uncontrolled outside state one components example becomes unclear state use like shown make sense better example would tabs component approach used driven components guess", "d": "1/2018"}, {"body": "component nt new component wraps necessary state duplicate props forward emitted events order fully mimic checkbox bad example lot components complex nt checkbox wo nt methods checkbox", "d": "1/2018"}, {"body": "believe controlleduncontrolled input something nt mixed usage example provided uncontrolledcheckbox component nt checkbox yes nt hand need generic component checkbox could wrap one time set use explicitly know checkbox although nt solve problem props routing", "d": "1/2018"}, {"body": "think achievable userland via global mixin need manually set watchers provide additional keys", "d": "1/2018"}, {"body": "mixin created automatically update prop value response event emitted component demo js vuemixin created optionsprops const prop objectkeys optionsprops const config optionsprops prop const checkbox template value checked unchecked props value type boolean default false syncon input methods toggle emit input thisvalue vue output warning prop mutated", "d": "1/2018"}, {"body": "disable console error like sweat js const error consoleerror consoleerror gt prop value consoleerror error", "d": "1/2018"}, {"body": "decademoon updated implementation support mapping prop another field added case internal state could sync state provided parent component see", "d": "1/2018"}, {"body": "solved elegantly using computed setter vue vuecomponent checkbox template internalvalue checked unchecked props value type boolean default false computed internalvalue get return thisvalue set v emit input v methods toggle thisinternalvalue thisinternalvalue", "d": "1/2018"}, {"body": "posva component wo nt work without done hide emitting input event setter make writing controlled components easier since nt litter throughout code still original problem needing use everywhere wanted avoid first place oevgeny believe controlleduncontrolled input something nt mixed agree think settle making components controlled even means need use make work even nt plan using data parent component thank help everyone", "d": "1/2018"}, {"body": "work though maybe talking checkbox appearing checked", "d": "2/2018"}, {"body": "posva main idea create component state could driven without provided uses falls back internal state providing way react state changes", "d": "2/2018"}, {"body": "prop getting set changing definition template fixes issue want change vue behavior pass prop see documentation model information", "d": "1/2018"}, {"body": "thanks answering really appreciate", "d": "2/2018"}, {"body": "\u4e0d\u8981\u7528 issue", "d": "1/2018"}, {"body": "working expected according tests", "d": "2/2018"}, {"body": "verified yes seems work intended think typo javoski pointed recommend closing issue", "d": "2/2018"}, {"body": "nt typo still destroyed even empty forgot leave comment last time tried dig issue", "d": "2/2018"}, {"body": "fnlctrl tried fiddle posted saw digging little deeper keeping clear watch array issue actually related vue click multiple times multiple cached versions cache vue actually tracks element still completely destroyed screenshot see multiple versions living array try empty cache repeatedly till gone also throws function accordingly might want use set instead array prevents duplicates", "d": "2/2018"}, {"body": "vue line vue settimeout \u6539\u6210 settimeout", "d": "1/2018"}, {"body": "\u53d1\u73b0 vueconfigdevtools \u6539\u6210 settimeout", "d": "1/2018"}, {"body": "looking like custom renderer", "d": "1/2018"}, {"body": "couple considerations using custom renderer resolution use case api design allow nodes analogue xml tags eg rendered output tag name possibility run custom renderer alongside standard renderer eg using standard vue renderer create canvas element dom use custom one scene would great able use existing vue devtools custom renderer otherwise fine suggestion future solution thank time edit looking proposed api perhaps would possible implement argument differently custom renderer accepts constructor function etc first point may need consideration", "d": "1/2018"}, {"body": "reproduction please", "d": "1/2018"}, {"body": "ca nt find way stop production tip directly change vuejs file", "d": "2/2018"}, {"body": "shepelevstas", "d": "2/2018"}, {"body": "codepen demo show", "d": "2/2018"}, {"body": "fixed", "d": "2/2018"}, {"body": "fyi video accessible", "d": "1/2018"}, {"body": "link weibo link china upload videos vk try link posva", "d": "1/2018"}, {"body": "lol case appreciate somebody test nt devices", "d": "1/2018"}, {"body": "also seeing webview android transition finishes quickly flickers complete also first link video works takes bit time load also similar seeing", "d": "1/2018"}, {"body": "also upload video vimeo try posva", "d": "1/2018"}, {"body": "hi iphone se ios vue transitions seems work like final state displayed short time transition plays expected maybe bit faster played transitions official vuejs transition site play strange way animation animatecss velocity plays expected ios pc vuejs version edit updated device latest ios version seems animations work properly", "d": "2/2018"}, {"body": "tested nt reproduce issue guess appears ios", "d": "2/2018"}, {"body": "think classes correctly applied original video showing custom application thanks checking jkzing", "d": "2/2018"}, {"body": "hi thanks filling issue able get results latest chrome vue vue following logs seen either vue version vue version nt matter watcher watcher closing simply race condition caused implementation whether move mouse immediately clicking nothing oschromevue version", "d": "2/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow please provide minimal repro reporting bug", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "stateful filters bad idea explicitly removed vue method calls refers reactive state update automatically either state reactive bug believe bug please open bug report reproduction", "d": "1/2018"}, {"body": "method refer reactive state wanted use global value way restart method const storemixin beforecreate const options options const translatemixin methods translate value return storetranslate value value", "d": "1/2018"}, {"body": "define reactive property translate method see", "d": "1/2018"}, {"body": "thanks forceupdate worked component new vue instance", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "expected need pass object realising note docs though create pr", "d": "1/2018"}, {"body": "understood thanks much", "d": "1/2018"}, {"body": "posva would happen know possible vueloader", "d": "1/2018"}, {"body": "nt written code handles functional components vueloader think blakenewman sorry nt know", "d": "1/2018"}, {"body": "easy way intelligently merge classes way docs mention normal components", "d": "2/2018"}, {"body": "way", "d": "9/2018"}, {"body": "notice two data properties classes inside use", "d": "10/2018"}, {"body": "think intentional vue warning ignored scenarios use instead eg vuerouter", "d": "1/2018"}, {"body": "unfortunately warnings nt come stack traces", "d": "1/2018"}, {"body": "documentation referring boolean attributes sure want add magic specific attributes removed value moment use workaround js vuecomponent myprogress functional true render h data gt numberisfinite dataattrsvalue delete dataattrs return h progress data", "d": "1/2018"}, {"body": "workaround implicitly removing falsy values would breaking change nogo time adding modifier seems like overkill since niche use case also explicit control condition attribute removed", "d": "1/2018"}, {"body": "template compiled js codes function changed called function called", "d": "1/2018"}, {"body": "jounqin delete loop template fragment see console happen also changed different result loop tempate influence method strange", "d": "1/2018"}, {"body": "misunderstanding question removed template vue render changes vue knows reference template", "d": "1/2018"}, {"body": "expected calling method template vue call every time renders also come handy", "d": "1/2018"}, {"body": "posva jounqin seems behavior react framework methods relationship data model method recalled data model change little strange change title function way also console twice", "d": "1/2018"}, {"body": "exactly react", "d": "1/2018"}, {"body": "yes mistakes test react framework behaviorand one question axios scenario fact want load data sync request render response template one time need rerender changed data idea", "d": "1/2018"}, {"body": "please follow reporting issue guidelines", "d": "1/2018"}, {"body": "duplicate", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "valid object way vue know intended", "d": "1/2018"}, {"body": "sure vue issue ios really terrible detecting show onscreen keyboard web browsers times likely ios bug could reproduce simple vanilla javascript showhide", "d": "2/2018"}, {"body": "giwayume exact code showing keyboard focus vue vue show keyboard ios device try links edit using vanilla js thing keyboard shown", "d": "2/2018"}, {"body": "arnesten understand nt change code pointing vue would coding workarounds ios bugs phone responsibility show keyboard since javascript api tell", "d": "2/2018"}, {"body": "giwayume nt know classified bug ios since specification onscreen keyboard behave think problem much delay user click vue updating dom setting focus input vue delay shorter worked fine ios quite common search icon mobile web app click show focus search input opening keyboard instead requiring second click relatively big ux issue case hopefully fix least workaround downgrading vue found situation", "d": "2/2018"}, {"body": "guess another issue micromacro task introduced ios requires user input showing keyboard vue uses micro task user click counts valid trigger keyboard however uses macro task ios longer treats trigger", "d": "2/2018"}, {"body": "still issue addressedfixed example parent component child component", "d": "8/2018"}, {"body": "resolve issue html submit area fixed default display none open dialog", "d": "8/2018"}, {"body": "generating fails older browsers fyi arguments", "d": "1/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow open bug report please add repro provide different versions expected vs actually happening", "d": "1/2018"}, {"body": "even better way intercept hooks components something like set function one place get called beforeafter component hooks modify vuex store update templates however like show loading progress", "d": "1/2018"}, {"body": "doable global mixin point anything want hook well count", "d": "1/2018"}, {"body": "hook defined guaranteed run hooks individual components", "d": "1/2018"}, {"body": "called", "d": "1/2018"}, {"body": "case would set false set true component initialization work done rely templates would already true even though component hook nt completed would nt work solve problem", "d": "1/2018"}, {"body": "use different mixin make execute", "d": "1/2018"}, {"body": "demonstrates exact problem want hidden end set true beginning even using mixin suggested set false beginning true hook component finished", "d": "1/2018"}, {"body": "oh sorry meant using instead updated snippet want trigger timeout may consider using promises waiting finish able achieve method showed please move conversation discord forums want help", "d": "1/2018"}, {"body": "try codepen example nt work either timeout example would normally asyncawait request codepen nt support nt work locally asyncawait either may consider using promises waiting finish mean component issue component nt set vue set global mixin nt working", "d": "1/2018"}, {"body": "\u53ef\u4ee5\u770b\u770b vm attrs", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "javoski attrs\u6ca1\u6709\u5305\u542b\u901a\u8fc7vmodel\u4f20\u5165\u7684value", "d": "1/2018"}, {"body": "ziqiangwang \u5bf9 component \u7684 \u548c dom \u5143\u7d20\u7684 \u548c \u5b83\u4f1a\u5305\u542b \u7684 value", "d": "1/2018"}, {"body": "\u5e94\u8be5\u662f vbind props", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "thank kind words find donate project cheers", "d": "1/2018"}, {"body": "ca nt run right code write consolelog print vue component sure current component instance docs vueclasscomponent state work", "d": "1/2018"}, {"body": "ran linusborg said vue instance closing since something need fixed one libraries fix anything vue core", "d": "1/2018"}, {"body": "oki", "d": "1/2018"}, {"body": "something need fixed one libraries posva nt think real fix array functions behave classes assigned class properties", "d": "1/2018"}, {"body": "maybe thinking transform code passing babel plugins therefore black magic", "d": "1/2018"}, {"body": "dealing tables html templates general careful browser html vue gets parse take vue take look html see vue sees gets templates help understand one template nt work creates documentfragment think fixable nt checked behaves consistently among browsers", "d": "1/2018"}, {"body": "frozen feature likely deprecated future adding changes improvements", "d": "3/2018"}, {"body": "use case attributes starting numeric chars doubt use case worth extra handling", "d": "1/2018"}, {"body": "sorry clear issue nonalphabetic attributes numeric attributes one use case nonalpha attributes second use case amazing forms one encode valid attributes use cases indeed academic motivated wanting abuse attributes kind cheap dsl certainly commercial usage know possible ultimately agree nonalpha attributes marginally useful shall close puppy thank much time", "d": "1/2018"}, {"body": "price progress compliant parsers create dom element attributes subsequently js unsettable via setattribute following workaround albeit slower accesses full possible attribute namespace using setattributenode function attrnode ele attr value", "d": "1/2018"}, {"body": "working expected attributes set names purpose works older browsers", "d": "1/2018"}, {"body": "posva okay fine nt really suggesting solution appropriate one", "d": "1/2018"}, {"body": "reason muted autoplay browsers require value nt something working tested mobile browsers everything worked fine", "d": "1/2018"}, {"body": "posva safari iphone nt recognize throws notallowederror try play", "d": "1/2018"}, {"body": "tested safari worked correctly could give information please versions could share stackstrace", "d": "1/2018"}, {"body": "posva actual use case navigatormediadevicesgetusermedia mediastream true work ios devices ipads particular iphones iphone users day telling nt work reason muted autoplay browsers require value muted muted makes sense default behavior eg bare nt understand nt able override", "d": "1/2018"}, {"body": "case may probably related something else feel free come back manage get information ps need set codesandbox simple repro much faster use jsfiddle", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "example without vue thing happens fix need call native method select text case vue additionally need call method handler dom updated", "d": "1/2018"}, {"body": "sqal said", "d": "1/2018"}, {"body": "related answer personally think add development would potentially create problems would make debugging harder also necessary keep sync updating html would take quite effort questionable gain aware vue devtools make vue apps debugging much easier", "d": "1/2018"}, {"body": "posva actually quite easy add feature already using development function createelement function bind", "d": "1/2018"}, {"body": "see point implementing thing dedicated devtools unit tests useless one testing everything executed anyway", "d": "2/2018"}, {"body": "something done vue chrome already gives ability inspect listeners arbitrary dom elements", "d": "3/2018"}, {"body": "however think chrome inspector listeners shown vue apps readable", "d": "3/2018"}, {"body": "mmh weird may something wrong version without vue mimics vue also fails chrome think layout calculation may enforcing values early thus triggering transition", "d": "1/2018"}, {"body": "truly strange maybe chrome bug vue example issue safari firefox solution wrap child component additional div seems solve problem wonder bug solution", "d": "1/2018"}, {"body": "maybe chrome triggers event layout calcultion", "d": "1/2018"}, {"body": "vue example nt limited chrome though happening firefox safari able solve wrapping child component another parent div makes think might vue bug solution", "d": "1/2018"}, {"body": "thanks lot stuckouttongueclosedeyes stuckouttongueclosedeyes stuckouttongueclosedeyes", "d": "3/2018"}, {"body": "props meant readonly able suppress warning acknowledging sometimes acceptable otherwise may want wrap vuetable component best option contact author send pull request create fork wrap component use template sometimes render function may make things easier", "d": "1/2018"}, {"body": "component wrapped via mixin issue stems wanting edit template editing template use different prop name wo nt work understand idea read actually conforms render defining prop based another prop however default use another prop initialized moves setting little lifecycle using key idea solution effectively anything lets set default later lifecycle without triggering warning cover use case tried making pull request got lost code lifecycle witch decided make issue open discussion first keep thinking may open another issue pull request example discussion manage add", "d": "1/2018"}, {"body": "talking pull request vuetable vue wrapping component done via mixin wrapping code showed template vue myvuetablevue", "d": "1/2018"}, {"body": "guess using example vuetable bad idea really related problem nothing could add pull request helps also wrap described well issue want adjust styles especially case using css modules nt think would also happen scoped css though needs context active component parent brings interesting easy get around issue needing override component keeping template intact see example first message wrapping prop div passes css module class normally would think override prop vuetable set default since readonly see prop within default function mean end day looking suppress warning dev set default prop value point values props available used defer prop props set", "d": "1/2018"}, {"body": "nt work automatically correct neither work automatically nrmoal components set", "d": "1/2018"}, {"body": "linusborg nt really understand answer could provide complete working example please tried implement vmodel functional component ended far complex implementation one assignment", "d": "1/2018"}, {"body": "hi thanks filling issue works vue template compiler special logic taking first argument input handler like manually nt work functional components case compiler could nt know whether use input handler since impossible know render function would return runtime therefore always uses default generating input handler instead way make work linusborg said though entirely correct add native html elements nt use manually call demo cc shameleo closing nothing vue without putting great effort trying analyze arbitrary runtime behavior manually written render functions", "d": "2/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "1/2018"}, {"body": "vshow bind none boolean value", "d": "1/2018"}, {"body": "definitely something convenience exactly like using", "d": "1/2018"}, {"body": "mounting components work want properly test vue components recommend check want render components server check please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "adding directly templates would big overhead template compilation also runtime handle async data completely doable userland scoped slots though created small package basic functionality showcase", "d": "1/2018"}, {"body": "feature request", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "answer", "d": "1/2018"}, {"body": "duplicate", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "vue nt handle kebapcase camelcase attribute values expressions prop attribute names nt makes sense attribute values forced lower case browser", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "even calling help case hmm apparently made mistake component version guess need call specific comoponent root instance fixes issue version without custom component still seems need even call forceupdate make template rerender", "d": "1/2018"}, {"body": "workaround moment change value force render works noncomponent approach edit another workaround would disable checkboxes unticked easiest one force checked status checkbox works cases unsure something component scenario since browser toggling state make sure prop nt change therefore component never rerenders afraid may scenario noncomponent version nt render state changed", "d": "1/2018"}, {"body": "workaround mind manually trigger data change js ontogglestate key event const checked eventtarget thisstate key checked nexttick gt thisstate key true", "d": "1/2018"}, {"body": "setting value checkbox setting value seems work scenarios", "d": "1/2018"}, {"body": "missed without touching dom part previous comment", "d": "1/2018"}, {"body": "hi posva thank solution settings indeed fixes issue yeah also wonder whether improved inside vue react somehow least explain users docs current behaviour confusing say even working vue almost years could nt figure another example opinion user easily fall trap simple text field want control value field accept case reproduce issue follow steps set new value value goes back expected set time stays would expect", "d": "1/2018"}, {"body": "technically expected behavior although admit confusing extent vue reactivity system trigger rerender state actually changed case setting value already vue figures nothing needs update perform another aspect problem ignoring whatever happening dom fact state element modified user reflecting back state checkbox unchecked state nt updated one way justineo suggested explicitly sync dom state back app state first resetting another way let note case always syncs dom state back app state handler would trigger update necessary case handler simply react case actually perform value check always results update calling react similar mutating state calling", "d": "3/2018"}, {"body": "thank appreciate explanation", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "sorry akryum opened new one p closing", "d": "1/2018"}, {"body": "likely issue parcel ts plugin vue plugin working together properly vue core problem please open issues related projects instead", "d": "1/2018"}, {"body": "ok opened issue", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "use text shown put different tag first one shown", "d": "1/2018"}, {"body": "one thing causing fact vue renders one root node try html lt div gt lt div gt labletitletwo lt div gt lt div gt labletitle lt div gt lt div gt", "d": "1/2018"}, {"body": "api", "d": "1/2018"}, {"body": "would even better nt see need nt scale since nt really know show method comes yes know comes mixin explicitly included component idea mixin reuse behaviour across components explicit transparent way would apply things like hooks want namespace functions related component want use mixin add namespace easily way proposed dynamic name using function js function buildnotificationmixin namespace return created namespace namespace show gt componentvue const component mixins buildnotificationmixin notifications use computed group things related", "d": "1/2018"}, {"body": "nt vue core mixin mechanism already flexible enough", "d": "1/2018"}, {"body": "tests vue may need run phantomjs based tools like scrapers backwards compatibility", "d": "1/2018"}, {"body": "strange costs bytes every build maybe support delete code building time rly dont need carry users", "d": "1/2018"}, {"body": "wait carry polyfill case vuejs site scrapped increase bundle size every build case nt understood", "d": "1/2018"}, {"body": "evan said backwards compatibility would breaking change wont mjor release plan one near future general", "d": "1/2018"}, {"body": "fyi extra size small enough worth happens multiple things also supported browsers like internet explorer", "d": "1/2018"}, {"body": "site built vue site scraper built phantomjs used able scrape site patch update site suddenly break scraper tradeoff bytes vs use case bytes vs backwards compat", "d": "1/2018"}, {"body": "nothing vue number big", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "already returns promise specify callback", "d": "1/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "bet transformation done vueloader", "d": "1/2018"}, {"body": "would useful library authors might use spec create modules interesting things example tool generates custom elements vue components specs internal rendering custom element content rendered defined component people may try want map custom element attributes object properties based definition need define standardized custom element classes problem custom element class defined asynchronously means library author simply export class synchronously provide promise callback end user receive class order use would ideal", "d": "1/2018"}, {"body": "foo component spec mutated tested code samples poi produces array logs please make sure error nt come one dependenciesloader provide repro opening bug report", "d": "1/2018"}, {"body": "using vuecli make basic app part code think triggers sure yet let investigate push get desktop", "d": "1/2018"}, {"body": "alright found causing simple reproduce vue export default props bar js import foo foovue import vue vue consolelog foo props sync fooprops bar vueextend foo mutates consolelog foo props sync fooprops bar type null async case turns someone relying component spec may control someone else extends therefore becomes async problem without deterministic way run logic happened", "d": "1/2018"}, {"body": "forgot say passed message mutating original component come back confirmation", "d": "1/2018"}, {"body": "one solution normalize vueloader component definition already normalized state imported", "d": "1/2018"}, {"body": "made new issue", "d": "1/2018"}, {"body": "closing favour", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "reopened", "d": "1/2018"}, {"body": "ran exact issue nice workaround", "d": "2/2018"}, {"body": "learning vue struggling past hours thanks bringing", "d": "2/2018"}, {"body": "another workaround avoids global component looks pretty js import somechildren somechildrenvue export default props components type object default return somechildren", "d": "3/2018"}, {"body": "think worth mentioning error message quite unintuitive error bubbles first instance component reason feature local functional component registration get implemented least add dev warning says something effect also awkward registering unknown component first parent instance component clears error without polluting global component name scope strange coupling components though choose hack suppose", "d": "3/2018"}, {"body": "ywwhack workaround great made improvements use injections instead props props polluted code looks little prettier vue import somechildren somechildrenvue export default inject components default somechildren", "d": "4/2018"}, {"body": "update implementing components option functional components workarounds good seems pretty hacky imo especially mentioning must fore dynamic components known components", "d": "4/2018"}, {"body": "expected side effect way functional components work since functional components nt instances immediatly evaluated parent scope generated vnodes passed slot content means component already run rendered normal component like immediatly rendered parent context passed component vnode rendered render cycle functional component ca nt inject content provided already run content provided indeed documented clearly context provideinject generally another side effect example functional component main instance example reason functional component rendered parent render cycle would kind open issue docs team take care would course also open pr first shot documenting feel", "d": "1/2018"}, {"body": "another side effect example contextparent functional component main instance example ah see thank detailed response although nt expect behavior mismatch would great update docs according added proposal though see linked issue", "d": "1/2018"}, {"body": "using array index doesnt work changes uniquely identify distinct item array use real id", "d": "1/2018"}, {"body": "linusborg use like want delete item", "d": "3/2018"}, {"body": "nt see attribute would course ca nt recommend using internal id anything", "d": "3/2018"}, {"body": "loop array objects use key value allow delete item array view rendered real time", "d": "3/2018"}, {"body": "please open issues using guide", "d": "1/2018"}, {"body": "\u624b\u52a8\u827e\u7279\u5927\u4f6c", "d": "1/2018"}, {"body": "\u5728 test coverage", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "\u7ed3\u5408 chromedevtools", "d": "1/2018"}, {"body": "hmm looks like pr nt fix supposed fix curious around year since also looks like nt take account ordering ordering nt impact", "d": "1/2018"}, {"body": "progress experiencing problem well", "d": "3/2018"}, {"body": "feel free open pr docs repo propose improvement", "d": "1/2018"}, {"body": "\u8bf7\u95ee\u8fd9\u4e2a\u95ee\u9898\u89e3\u51b3\u4e86\u5417", "d": "3/2018"}, {"body": "", "d": "1/2018"}, {"body": "called data changes virtual dom rerendered patched means exactly means generated ed virtual dom node applied real dom tree hand api means method generate virtual dom mean drawn real dom admittedly overloaded chrisvfritz idea", "d": "1/2018"}, {"body": "think indeed mismatch since description indicates mutate state applied entails hooks called virtual dom render functions called give proper thought next week", "d": "1/2018"}, {"body": "saw updated guys really think good idea resolving simply revising wording api docs nt think first never exactly meaning target following term ie dom especially vue using virtual dom people coming react background always consider running function using terms generating virtual dom nodes course unless vue wants unique one secondly decide take path updating docs match current behavior api description needs revised also lifecycle diagram link since two places consistently indicate like current behavior nt believe deliberately designed called hence functional bug instead documentary allowed changeupdate states component without triggering additional lifecycle hook much less useful developers point view common case developers matter coming react angular updating states components per changes props know called various cases like state changed props changed even parent forcing update react similar separate hooks allow developers detect changes even update states calling link however unlike react vue one lifecycle hook documented able detect changes update states becomes hopeful place suppose perform common practices", "d": "1/2018"}, {"body": "nobelhuang nt worry nt considered resolved yet fault issue accidentally closed nt remove pr discussing problem detail herringtondarkholme", "d": "1/2018"}, {"body": "thanks passionate discussion doc issue accidentally closes reopen issue since still review api description needs revised also lifecycle diagram think beforeupdate called render give example called beforeafter render give significant difference old doc said state change occur however think might inappropriate state changing lead infinite loop whether called render however disallow state changing dispatch action flux store words triggering rerender wonder matters call beforeafter render allowed changeupdate states component beforeupdate changing state use case discussed suspect proper usage react recommend course vue nt want unique vue one lifecycle hook beforeupdate becomes hopeful place suppose perform common practices real proposal right difference prop change topdown component execute lifecycle trigger state change execute finally one state change however lead infinite loop request use perform state change", "d": "1/2018"}, {"body": "herringtondarkholme thanks comments give example called beforeafter render give significant difference surely said state changing disallowed nt matter called doc diagram indicate allows tried found led infinite loop calling order matters way also tried changing states beginning know wrong operation see circumvent situation turned infinite loop calling order matter also ticks given never read vue source code correct wrong changing state use case nt think changing state running use case react still provides allow operation developers need yes think keep current behavior would better new lifecycle hook like request use watch perform state change actually curious could nt find filed bugs regarding weird behavior filed guessed mentioned people could use achieve goal cases however think component rerendered changed could also parent forcing update even changed approach sufficient addition one uncommon case many say want state changes matter prop changed way specify props watched explicitly anyway think functional bug would good like lifecycle thanks guys awesome works", "d": "1/2018"}, {"body": "doc diagram indicate allows imho whenever called new doc removed suggestion beforeupdate executed beforeafter render differs change state probably issue yet reported please provide concrete example need change state beforeupdate nt think changing state render running use case react provides componentwillreceiveprops allow operation developers need agree useful indeed uncommon component large prop set eg bridging component google map seen developers uses helper function dynamically watch props change say summarize discussion list points whether allow state change call vue provide helper wrap thread", "d": "1/2018"}, {"body": "okay seems provide couple examples came examples randomly example jsfiddle imagine timer initially set years months days hours minutes seconds respectively count values also changed anytime want start new timer however new timer starts counting would short pause signal countdown indicate currently paused counting see whenever matter time props timer changed need update states like could done easily efficiently state changing allowed course achieve result using might invoked times time props change example jsfiddle imagine jigsaw puzzle game board component host puzzle pieces pieces added board board could show different background color hint player indicating heshe approaching goal see actually changes detected component state change based reactive parent forcing rerendered convenient update state course know use method work value replacing use used many times template method would called many times one render process case know write function alleviate nt think easier feeling lost point thread wrap want state api doc lifecycle diagram consistently indicate change states nt think initially designed allow hence think functional bug", "d": "1/2018"}, {"body": "reopening kingwl probably closed accidentally pr fork", "d": "2/2018"}, {"body": "real use case vuerelay need listen change refetch relay store update accordingly attempted following methods issue refetch trigger another rerendering fired watch props separately works correctly brings performance penalty multiple props changed callback runs multiple times latest version logic avoid running refetch data multiple time logic still run multiple times watch ideally exactly want apparently proxy never changes watch computed value uses props modified based suggestions method works perfectly triggers callback level issue worked around last method really ugly would nice lifecycle hook addresses issue natively", "d": "3/2018"}, {"body": "sorry wrong operation", "d": "3/2018"}, {"body": "considered bug behavior adjusted match lifecycle diagram previous docs description revert docs", "d": "3/2018"}, {"body": "sure whether still bug case attribute root element real dom still rendered hook miss time access existing attribute addremove class chrisvfritz", "d": "8/2018"}, {"body": "progress", "d": "1/2018"}, {"body": "hi fujisunny able reproduce issue ie following code vue export default props value type string render h return h textarea input e gt emit update value etargetvalue still facing issue suggest open github repro upload problematic code give repo address back us", "d": "1/2018"}, {"body": "jkzing still facing problem push reproduction code ie version hope reproduction would help", "d": "1/2018"}, {"body": "fujisunny investigation found get work simply replace vue patch mechanism caused root cause different behavior chrome see fiddle sure need improvement wontfix", "d": "2/2018"}, {"body": "jkzing much thanks investigation scenario would like use solution hope would happen situation", "d": "2/2018"}, {"body": "jkzing unfortunately comes another problem solution works adding text textarea press backspace omit text till text textarea throws error says something like arguments invalid gone vue code pass thisvalue createelement wo nt cause error pass thisvalue createelement would go settextcontent method nodewholetext error solutions suggestions ps reproduction", "d": "4/2018"}, {"body": "provide little bit background think related vue also sharing cpomplete project us minimal runnable reproduction", "d": "1/2018"}, {"body": "ho sorry maybe report vue template thought would config could allow facebook iframe load site", "d": "1/2018"}, {"body": "would ask question post makes think related template", "d": "1/2018"}, {"body": "probably use forum aka help implementing feature", "d": "1/2018"}, {"body": "linusborg said please use whole project repro boil repro feel free open new issue repro", "d": "1/2018"}, {"body": "duplicate", "d": "1/2018"}, {"body": "hopefully screenshot help reproduce configfiltercount visible items configitemcount existing vuex", "d": "1/2018"}, {"body": "supposed attached screenrecording well seems got attached mail thread sorry anyway seemed lil bit laggy trying freeze ui thomas kle\u00dfen notifications githubcom image bildschirmfoto um hopefully screenshot help receiving subscribed thread reply email directly view github mute thread telefon", "d": "1/2018"}, {"body": "thx quick reply add screenrecording tidy code bit", "d": "1/2018"}, {"body": "click toggle showinfo reflects itemcomponent wich renders stuff click jop nope times buttons nt exist app assume referring add toggle counter main counter shows items right toggle takes around seconds nothing unusual situation generally vue fact needs time updating elements rendering list items never good idea justifiable common use case opinionexperience real problem situation specifically getter performance sinkhole items called times running times array items normalize data keeping ids array content object keyed id lookups much much faster adding since returning function getter update components everytime add remove items really cachable like normal getters suspicion would much rendering getter calculation killing performance short bug problem implementation sidenote machine running", "d": "1/2018"}, {"body": "linusborg refactoring prototyp bit solve real problem right assume real problem amount data reactivness clients handle long story short dev everything fine macbook production tablet ui got freezes items render expected build performance prototype played bit got freezes macbook started panicking thats wrote issue apologies investigated seems problem limitations device right change prototype something like benchmark devices abilities want know affects itemcount usecases affects dummycount usecases affects filtercount usecases usecases change single itemdetailcount showcounter onoff items vshow instead vif add itemdetailscount press button increment counter done next thing want showing time freeze include benchmark button witch test defined values three variables provides graph somehow decide much items target", "d": "1/2018"}, {"body": "sorry items expected behavior bug fixed expect us help tune performance app becomes support request simply nt issues rendering many items almost always call bad idea especially mobile ddevices suggested consider using virtual scrolling library", "d": "1/2018"}, {"body": "please implement like", "d": "1/2018"}, {"body": "edge case people encounter nt need added vue core since extracted single function separate package", "d": "1/2018"}, {"body": "done userland nt see included default", "d": "3/2018"}, {"body": "nt default behaviour rationale vue sharing global state across vuecomponents read", "d": "9/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow nt use full project repro take look", "d": "1/2018"}, {"body": "misusing usually static string reference like array using array see also", "d": "1/2018"}, {"body": "jounqin got source code insert ref vfor tag parent children mean children ref record array know good solution nt know fire children function parent function", "d": "1/2018"}, {"body": "define element children inside difference repeated inside matter repeated self change code use work correctly", "d": "1/2018"}, {"body": "thanks explanation jounqin", "d": "1/2018"}, {"body": "users interface augmenting already please read official typescript doc", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "alias sure syntax jsx pass spread whole object something working work everything looks fine fire issue also think could improve docs adding sample code guide make sure open pr", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank", "d": "1/2018"}, {"body": "already handle events callback well magic parameter event works native events ca nt implement normal way custom events also work custom events nt know trying vue already know angularjs normal use vue tools therefore different implementation use forum discord server want share thoughts devs get feedback", "d": "1/2018"}, {"body": "oh definitely documented seeing doc vm emit event arguments string event args trigger event current instance additional arguments passed listener callback function event handling listening events method event handlers methods inline handlers nothing else", "d": "1/2018"}, {"body": "may want pr guide end js function passing objects another js pattern", "d": "1/2018"}, {"body": "ok understood vue support specifying param name support full js spec surprise template define arrow function template extract first object param simulate named params event works arrow function template edit straightforward way guessing works", "d": "1/2018"}, {"body": "support full js spec surprise template define arrow function template extract first object param simulate named params nt support reuses code makes browser execute yes ways please hijack issue post usage question use appropriate channels suggested also take look source code generates function provide one", "d": "1/2018"}, {"body": "generates function provide one supported files still think good idea support named params natively less confusing less code need write arrow function straightforward maybe allow using raw string templates please hijack issue post usage question use appropriate channels suggested also take look source code generates function provide one ok", "d": "1/2018"}, {"body": "possible duplicate", "d": "1/2018"}, {"body": "asking way using templates", "d": "1/2018"}, {"body": "looking way nt work see slot template parent slot data number grandchild", "d": "1/2018"}, {"body": "simply need repeat pattern used", "d": "1/2018"}, {"body": "way via templates", "d": "1/2018"}, {"body": "nope least moment closing duplicate", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow also related vuerouter turns bug make sure open issue boiled reproduction", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements order ensure every issue provides necessary information us investigate require use issue helper creating new issues thank issue issue issue \u5411\u5bfc \u6765\u521b\u5efa\u65b0", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "dot think want put additional logic tagname string", "d": "1/2018"}, {"body": "extra parsing hurts performance even users use feature add h wrapper though", "d": "1/2018"}, {"body": "ok determined tag name tag skipped closed sorry inconvenience", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "receive data changed callback watch multiple properties one call know one triggered watcher", "d": "1/2018"}, {"body": "please precise opening feature request fr short translator gives meaningless sentences done multiple times", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "referring already namespace events vue gives plain event familiar anyone already dealt native events js", "d": "1/2018"}, {"body": "coming object passed reference change deep copy object via jsonparse could via objectassign external library see code achieve desired result nt know better method making deep copy case take look vuex way store data unrelated components could also update modalsetting object modal component click save", "d": "1/2018"}, {"body": "antoninarquey said bug", "d": "1/2018"}, {"body": "alright works thanks", "d": "1/2018"}, {"body": "please make sure boil repros strict minimal reporting bug error looks like providing transitionduration animation fail ever styles initialized empty string default may want know forum discord server lot people active ask questions", "d": "1/2018"}, {"body": "made repros bug look please thanks please clone project npm install amp npm run unit show errors posva remove directive vloading error", "d": "1/2018"}, {"body": "still many things like vuerouter elementui sure used though please use forums discord first come back find bug", "d": "1/2018"}, {"body": "returns instead empty string node const jsdom require jsdom undefined const jsdom jsdom undefined const dom new jsdom undefined domwindowdocumentqueryselector p style cssstyledeclaration color values color red importants color length onchange function domwindowdocumentqueryselector p stylecolor red domwindowdocumentqueryselector p styleunexisted undefined solution like fix issue annoying", "d": "5/2018"}, {"body": "seeing issue sudden tests running ci server ca nt quite explain suddenly cropped conditions basically identical ci locally nt make sense seems intermittent rerunning multiple times resulted success eventually timing bug", "d": "7/2018"}, {"body": "yes usually reproduced tests concurrent", "d": "7/2018"}, {"body": "javascript works want pass copy need copy", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "embedding jsx parsing inside template parser lot work plus related issues regarding syntax highlighting tooling support etc nt think justifies use case", "d": "1/2018"}, {"body": "well validator function could nicer sent builtin errorwarn handler get nice component trace something likely add", "d": "1/2018"}, {"body": "bind value objects compared using shallow equality need give option unique property differentiated", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "issues bug reporting ask questions discord forums props readonly trying mutate thus change input value prop modified value restored next update use data property computed setter instead computed setters prop sync modifier", "d": "1/2018"}, {"body": "\u628a\u8fd9\u4e24\u4e2a\u5143\u7d20\u5305\u5728\u4e00\u4e2a\u7ec4\u4ef6\u91cc\u5c31\u884c\u4e86", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "nt play well virtual dom render function approach ya pen vue would require major changes underlying architecture something likely nt want point opinion curiosity kind app building relies heavily inserting html like perception escape hatch edge cars something one replies regularly experience", "d": "1/2018"}, {"body": "using prismic headless cms prismicdom library returns field values html course example use illustrate make use triple curly braces prismicdom returns field values cms html string frontend components structure values way eg imgimg p love know better way approach though", "d": "1/2018"}, {"body": "joining potential html together html", "d": "1/2018"}, {"body": "maybe make work tags", "d": "1/2018"}, {"body": "wo nt work", "d": "1/2018"}, {"body": "admittedly hacky less performant way would render vue instances pievce html extract vnodes use dnymaically created functional component display ugly works edit updated fiddle reusable", "d": "1/2018"}, {"body": "thanks linusborg akryum really helpful think go akryum solution see takes definitely works example shown report back gets tricky sophisticated use case", "d": "1/2018"}, {"body": "\u53d1\u81ea\u6211\u7684vivo\u667a\u80fd\u624b\u673a andyqin notifications problem feature solve flutter sdk \u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u5355\u4e00\u4ee3\u7801base\u8de8\u4e09\u4e2a\u5e73\u53f0 android ios fuchsia proposed api look like \u6211\u7684\u5efa\u8bae\u662fvue\u53ef\u4ee5\u5728flutter \u4e4b\u4e0a\u5f00\u53d1vue receiving subscribed thread reply email directly view github mute thread", "d": "1/2018"}, {"body": "\u672a\u6765\u53ef\u80fd\u66f4\u591a", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "weex \u548c nativescript", "d": "1/2018"}, {"body": "weex\u5f3a\u70c8\u63a8\u8350", "d": "1/2018"}, {"body": "\u5f3a\u529b\u63a8\u8350vuenative", "d": "8/2018"}, {"body": "solved put custom directive instantiation main vue instance still strange works yet generates warning", "d": "1/2018"}, {"body": "need use option looks like option", "d": "1/2018"}, {"body": "please open issues involves party libs repos first", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "sorry difficulty understanding part done scoped slots try explain assume want passing props cloneslot component directive think want props passed instance formrow component difference nt want pass props like html want happen instead props passed kind background could use", "d": "1/2018"}, {"body": "want happen instead props passed kind background exactly props generated component user nt need specify template last example user knows nothing props note nt exist component proposed way clone default slot n times rescursively put proposed api look like section maybe nt given enough context problem trying solve trying build set generic components vuejs handle django formsets purpose split problem basically three components well defined responsibilities responsible generating whatever user provides children component example would generate n components properties exclusively generated passed whatever defined children precise need pass row index initial data prefix boolean value component charge cloninggenerating whatever defined children example inputs props need passed children generated component exclusively also responsible hidingdisplaying delete button accordingly acts proxy component mediator example two components functionality irrelevant trying explain mention think generates children nothing regular text input field notifies changes parent still difficulties understanding scoped slots solves problem without without specifying etc template template raised issue read people solutions similar use cases vuejs forum websites fall back implementing render function plus custom js function clone vnodes never seen something different scoped slots provideinject assumed way go felt use case simple enough yet way code straightforwardeasy way even implementing render function currently experimenting path got stuck call createelement pass custom props slotsdefault think possible correct wrong could something like still need provide detailed implementation trying achieve set jsfiddle nonworking implementation comment everything detailed way discuss proposing scopedslot plus pi fits use case thanks time update formsets note added better expose trying achieve working moment hope piece code better exposes difficulties facing come solution also reread pi documentation due suggestion problem provide prop generated vfor think nt possible thing right pi designed inject objects wellknown point injection trying provideinject something generated template", "d": "1/2018"}, {"body": "thanks detailed input something work short time right trx answer long form later", "d": "1/2018"}, {"body": "niche use case add firstclass template syntax also risks making slot syntax ambiguous usage outside different potential ways consuming component make use slot said doable render functions essentially treat meta data construct new vnodes based manually cloning mutating props needed requires become familiar render functions vnode interface however discussion exactly done scope issues", "d": "3/2018"}, {"body": "values always booleans explicit imo include whitelist aria attributes impractical modifier seems unnecessary cast", "d": "1/2018"}, {"body": "escaping using happens html put js nt work vue escaping found working", "d": "1/2018"}, {"body": "see thanks clarification", "d": "1/2018"}, {"body": "use method work", "d": "2/2018"}, {"body": "ca nt pause css transitions afaik use js transitions instead certainly possible depoending animation lib used outside scope vue solved party library developer", "d": "1/2018"}, {"body": "unfortunately nt think even technically possible", "d": "1/2018"}, {"body": "copy array modifying next time please ask kind questions forum discord channel stackoverflow", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "transition applies direct child div rather use also reproduction code functional issue fullfil requirements", "d": "1/2018"}, {"body": "thank solved problem", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "think correct higher priority nt mean priority calling behavior mixin extends seems", "d": "1/2018"}, {"body": "order seems correct think classes always call right beginning would also breaking change feasible right", "d": "1/2018"}, {"body": "posva difference maybe doc needs modified", "d": "1/2018"}, {"body": "contributions improving docs always welcome make sure open pr think could clearer", "d": "1/2018"}, {"body": "posva reason put two options", "d": "2/2018"}, {"body": "maybe mixins takes higher priority extends source", "d": "3/2018"}, {"body": "\u8fd9\u4e0d\u662f feature issue", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "please read use latest vue version using example", "d": "1/2018"}, {"body": "sqal awesome thanks", "d": "1/2018"}, {"body": "thanks report js engines nt optimize fnbind past record fact comment js engines constantly evolving implementation slower haha since functionprototypebind used js world believe js engines optimize native usage like seems better use native one", "d": "1/2018"}, {"body": "issues concerning documentation opened", "d": "1/2018"}, {"body": "update ok misled vue document link thinking written enough understand bidirectional binding js vmodel ischecked const mycheckbox props value render h return h input attrs type checkbox domprops checked thisvalue change e gt emit input etargetchecked js vbind checked const props checked render h return h input attrs type checkbox domprops checked thischecked change e gt emit input etargetchecked \u6211\u88abvue vmodel\u5176\u5b9e\u662f", "d": "1/2018"}, {"body": "warning message added able see", "d": "1/2018"}, {"body": "ok want dynamic input type", "d": "1/2018"}, {"body": "actually think warning nt emitted inputs dynamic type binding may skip conflict check actual available yet compiler made pr resolve issue", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "thank hard work", "d": "1/2018"}, {"body": "vuecli installed", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "reinitialize existing project", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "1/2018"}, {"body": "moved", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "please post template related issues template repo", "d": "1/2018"}, {"body": "sorry bad", "d": "1/2018"}, {"body": "nt really see duplicated scoped slots name necessary even good idea", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "know forceupdate used force update ui inter computed data see also", "d": "1/2018"}, {"body": "jounqin pointed force view rerender computed properties computed property contain external nonreactive variable time makes impure", "d": "1/2018"}, {"body": "reference make updatable time work ui", "d": "9/2018"}, {"body": "known limitation type system manually annotate computed properties likely wontfix otherwise would already implemented part herringtondarkholme ktsn might able provide insights", "d": "1/2018"}, {"body": "documented also issue tracking underlying type system improvement however evan said fixed vue side", "d": "1/2018"}, {"body": "herringtondarkholme thanks info keep eye underlying ts issue", "d": "1/2018"}, {"body": "vue nt know element end bound attribute instead property need explicitly bind property using", "d": "1/2018"}, {"body": "confronted something strange vue rescue totally reasonable answer even docs could worth adding note guide somewhere entirely sure thanks quick reply building vue given reason enjoy frontend development", "d": "1/2018"}, {"body": "worth mentioning nt work use using syntax", "d": "1/2018"}, {"body": "well known issue typescript community use webpackrollup workaround esmcommonjs interop issue sadly fix vue community alternatively please patiently await proper interop", "d": "1/2018"}, {"body": "worth aforementioned typescript issue fixed requires one add make things work done however run another roadblock error message raised idea possible use build contains compiler typescript tired trying get work go back react", "d": "2/2018"}, {"body": "issue got gulpfile transpile typescript bundle browserify app bundles one vendor bundle got working mostly however followed code results tried setting flag nt work dependencies ideas resolve", "d": "2/2018"}, {"body": "managed get working using plugin flag transform rather using passing result", "d": "2/2018"}, {"body": "\u8bf7\u95ee\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 \u73b0\u5728\u8fd8\u662f\u6ca1\u6709\u6548\u679c", "d": "5/2018"}, {"body": "\u8fd9\u76ee\u524d\u8fd8\u53ea\u662f\u4e00\u4e2a feature", "d": "5/2018"}, {"body": "justineo \u597d\u7684 \u8c22\u8c22 \u4f60\u73b0\u5728\u5982\u4f55\u5728ssr \u60c5\u51b5\u4e0b inline", "d": "5/2018"}, {"body": "may get answer", "d": "1/2018"}, {"body": "duplicate said jkzing", "d": "1/2018"}, {"body": "way configure instances placed next dom generated component instance would sweeeeeeeeeeet would mean could keep styles cascading child components using shadowdom see comment", "d": "1/2018"}, {"body": "alright thought workaround nt tried yet set vueloader option extract styles using location knowing filename shadow roots duplicates styles shadow root bunch unnecessary styles components least work official solution would great idea yet could", "d": "1/2018"}, {"body": "vue nt consider shadow dom designed way vue move style around know move anyways however insert style right next element mont make work like described article please provide smaller repro next time todo list unnecessary showcase problem save us time said could also handled bundler level maybe loader top vueloader closing since something solved vue core", "d": "1/2018"}, {"body": "posva thanks insight make shorter pen next time thing converting vue component custom element skatejs like nt access style inside sfc may even written sfc general purpose tool looked imported component object nt see style content anywhere miss super helpful tool could easily inject shadow root thought vueloader adding component spec gets exported vue file see imported object could runtime extract rules stylesheet based id inject styles shadowdom heavier", "d": "1/2018"}, {"body": "ah looking nt seem like difficult give go", "d": "1/2018"}, {"body": "components generated designed nonshadowdom usage moment likely alternative loader generates web component directly", "d": "1/2018"}, {"body": "got styles working shadow roots copying global new element inside shadow roots copy rules match components rendered inside given shadow root implemented vuewebcomponent meets requirements vuecustomelement able elements instantiated elements nestable composable elements distribute expected shadowdom elements generated tool otherwise work exactly expect custom element without knowing caring internal implementation uses vue", "d": "1/2018"}, {"body": "expected behavior dom inout elements automatically stringifies anything set property behavior nothing vue", "d": "1/2018"}, {"body": "sorry really scope question specific setup resolved issues issues bug reports originates vue", "d": "1/2018"}, {"body": "solved following langts import vueconstructor vue const vue require vue vueconstructor cast vueconstructor get typings const app new vue template hello world similar different situation using output typescript webpack one similarity op using typescript option something definitely wrong standard import typescript using vue setting ssr node typescript looks like tried number workaround including trying load vueesmjs file via property without success getting exact error op put together reproduction opened new issue", "d": "1/2018"}, {"body": "ran issue understanding vuejs file setting variable like vueclasscomponent vueclasscomponentjs line vueclasscomponent file special case handle missing default export vue works vueclasscomponentjs line unfortunately typescript compiler output special case handling missing default however typescript new option fixes issue set output contains function called handles missing default property properly", "d": "1/2018"}, {"body": "duplicate", "d": "1/2018"}, {"body": "believe fix appropriate setting string really actually ca nt string variables seem bit weird take look think alright simply make code say properties set strings always undefined technically value set value becoming undefined next tick evidenced open node terminal type wordletter terminal output reason error also consolelog wordletter straight try access property via key undefined nt see harm returning undefined", "d": "1/2018"}, {"body": "feel free submit pr adds warning development mode test ofc", "d": "1/2018"}, {"body": "posva wo nt issues reactivity", "d": "1/2018"}, {"body": "set must used object anyways", "d": "1/2018"}, {"body": "yes look warnings implemented tested add warning method", "d": "1/2018"}, {"body": "look vue get ready start working guys", "d": "1/2018"}, {"body": "hi sent pull request issue", "d": "1/2018"}, {"body": "according documentation supposed using way think", "d": "1/2018"}, {"body": "\u5e94\u8be5\u7528function\u4f5c\u4e3aprovide\u7684\u503c \u539f\u56e0\u7c7b\u4f3cdatamustbeafunction", "d": "1/2018"}, {"body": "thanks", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "app grows bigger split components instead cramming methods component", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "\u76f8\u5bf9\u4e8e el \u6765\u8bf4\u53ea\u662f\u4e2a\u4eba\u66f4\u559c\u6b22", "d": "1/2018"}, {"body": "\u81ea\u5df1\u559c\u6b22\u52a0\u4e2a mixin \u5c31\u597d\u4e86\u554a \u4e0d\u8981\u603b\u60f3\u7740\u5f80 vue \u6838\u5fc3\u5305\u52a0\u975e\u901a\u7528\u6027\u529f\u80fd\u6765\u89e3\u51b3\u81ea\u5df1\u7684\u4e2a\u4eba\u9700\u6c42", "d": "1/2018"}, {"body": "\u6dfb\u52a0\u4e00\u4e2a api api", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "problem trying fix see default export vue min js workaround try use import vue vuepropertydecorators way get working keep mind real solution", "d": "1/2018"}, {"body": "thanks works use normal fix deployed", "d": "1/2018"}, {"body": "seems nothing config points module umd build included ts compiler resolving using main field commonjs build need specify mapping using tsconfig", "d": "1/2018"}, {"body": "thanks sorry mistake", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "1/2018"}, {"body": "related vue project need read document popular gesture libs carefully", "d": "1/2018"}, {"body": "\u770b\u4e0d\u61c2\u8bf7\u597d\u597d\u5b66\u82f1\u8bed", "d": "1/2018"}, {"body": "want know gesture library use", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "giving pull request according suggestion", "d": "1/2018"}, {"body": "thanks sounds reasonable suggestion ktsn kazupon op suggests vmodel update value composition happens discussed especially affects japanese input android ime like google chinese input nt exhibit problem android check dates back long ago looks like leave untouched code base yup chinese input stop firing input event composing japanese input correctly fires input correctly set eventiscomposing true however vue uses btw whitey test case almost valuable collected album hehe", "d": "1/2018"}, {"body": "translate english extensive discussion thank reasonable reply", "d": "1/2018"}, {"body": "hi actually developing application nuxtjs need exact behaviour reported application expected behaviour android need vmodel binding behave composing android keyboard iphone everything working fix thank", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "prop created template changed every time updated trigger watcher", "d": "1/2018"}, {"body": "jounqin explained using object literal prop binding causes child component think prop changed every render behavior likely improved future manually compare new old values watcher avoid unnecessary updates", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "proposal would handle booleans unless require documented custom default value sake compatibility vue moment attributes need explicit values browsers work probably ie end syntaxes valid boolean attribute declared render key true even better key true improved performance passing native implementation unfortunately browser works attributes always stored strings declared nt need render happens right put nutshell remove current behaviour adding values would break browser support make attributes always string value would differ native html attribute handling ps make sure use lowercase attribute html browser convert anyway", "d": "1/2018"}, {"body": "reading spec boolean attribute without value assigned eg checked implicitly equivalent one empty string assigned ie checked consequence represents true value values true false allowed boolean attributes represent false value attribute omitted altogether two points absolutely blow mind implicit behaviors yuck choice choice anyway helped understand inner logic better thanks", "d": "1/2018"}, {"body": "nt use feature requests ask questions", "d": "1/2018"}, {"body": "since two types provided issue tools", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "\u90a3\u662f windows \u4e0a\u7684 ie", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "special use case application developers design nofitication event sorry framework handle", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "1/2018"}, {"body": "datacards array items", "d": "1/2018"}, {"body": "problem solved wujunchuan said used instead look exactly case try use ajaxloader loading images empty images src", "d": "1/2018"}, {"body": "expected please use", "d": "1/2018"}, {"body": "javoski want use ajaxloader temporary empty images alright project border remove", "d": "1/2018"}, {"body": "issue related vue ask questions stackoverflow forums", "d": "1/2018"}, {"body": "asifarran right create event subscriptions add condition handler case need even events would never fire actually another simple way handle case pass computed property listeners object null condition met example", "d": "1/2018"}, {"body": "maybe need", "d": "1/2018"}, {"body": "kingwl still adds listener op wants avoid sqal suggestion actually valid workaround simplified", "d": "1/2018"}, {"body": "yes sqal solution good one inlining like shows close enough mind thanks leads deeper issue though rebind happens data change upon evaluation condition changes generally event spec object passed von different existing event subscriptions cleaned still hopefully disposed end component lifecycle von rebinds may edge case large impact scenarios reference scenario complex svg need optionally attach mouse overout handlers specific elements based logic component long lived one underlying data changes leading rebinding need attach event handlers different elements rebind hence need dispose previous subscriptions nt dangle orphaned sad drink memory typical solution going end set one top level event listener per event type let events bubble explain motivation trying vue way first quite bit processing happen handlers intended precalculate bake right event subscriptions handlers less quicker fluid response invoked elements nt require opposed filtering relying dom queries handler", "d": "1/2018"}, {"body": "vsevolodtrofimov whole point avoid event subscription happening applying condition handler satisfy requirement please note comments provide satisfactory resolution closing issue reflect", "d": "1/2018"}, {"body": "possible pass arguments handler", "d": "1/2018"}, {"body": "pmayer curry handler use", "d": "1/2018"}, {"body": "suggested solution way apply modifiers like stopprevent", "d": "3/2018"}, {"body": "hey vsevolodtrofimov solution suggested using really working latest vue getting error looks like vue actually trying fire handler instead unbinding event", "d": "4/2018"}, {"body": "dawidmyslak change work handler called", "d": "4/2018"}, {"body": "nice one pbastowski", "d": "4/2018"}, {"body": "thank guys", "d": "4/2018"}, {"body": "may want wrap inline function calling handler custom data something like", "d": "6/2018"}, {"body": "vue docs", "d": "7/2018"}, {"body": "unfortunately adding modifier undeclared variable explicitly telling vue wait till input blurred set therefore design everytime vue renders use value nonexistent fill input clears ideally declare always possible isolate template component make sure nt get rerendered", "d": "12/2017"}, {"body": "thank explanation", "d": "2/2018"}, {"body": "hi thanks suggestion see problem ate trying solve however dot like mixture virtualdom real dom since dom element created properties virtual dom node counterpart information required copyclone vnode sure slots contain vnodes normal elements component supersimple slot also contain components bit complicated since data children component vnodes found different properties stitched together javascript function clonevnode vnode const children vnodechildren vnodechildrenmap x gt clonevnode x const iscomponent vnodecomponentoptions const tag iscomponent vnodecomponentoptionsctor vnodetag const data iscomponent clonecomponentdata vnode objectassign vnodedata const clone createelement tag data children clonecomponentdata vnode const data objectassign vnodedata hooks undefined dataprops vnodecomponentoptionspropsdata dataon objectassign dataon vnodecomponentoptionslisteners realize easy someone familiar vnode api goal work virtualdom possible take feature request yes may sometimes good easy way clone element render function nt want use dom elements render functions deal virtual dom real one alternative suggestion would rather offer nice way clone vnodes either vue core small libplugin community", "d": "12/2017"}, {"body": "playing around however found strange nt produce current work around right referenced cloned actually clone need use clonenode however also caused problem tag one another exposing vnode api propose expressed like avoid cluttered", "d": "1/2018"}, {"body": "closing since original proposal doable userland implementation details scope issues", "d": "3/2018"}, {"body": "fact vue supported interpolation inside tags back amp see fiddle issue seems quite similar like mentioned inefficient style needs recalculated updated back css custom properties becoming widely supported inject custom property declarations scope component root elements rather interpolate whole style tag content thus style recalculation optimized inside rendering engines gon na limit reactivity affect custom properties need way map custom property names reactive data necessarily writing custom property declarations directly inside tags", "d": "12/2017"}, {"body": "thank richardtallent detailed proposal would argue limit reactivity within custom properties thus would totally doable userland actually example extracted standalone vue plugin", "d": "1/2018"}, {"body": "tested realized last night vue existing attributes used set custom css properties reactively properties used child pseudoelement selectors one would expect thought autowiring css variables block compilation match hyphenatedprefixed propdatacomputed element feels bit conventionbased could cause issues variable intended defined modified child component root tag since vue compiler would naive regex search since reasonable solution already go ahead close issue thanks everyone making vue awesome", "d": "2/2018"}, {"body": "vue server side rendering requires call php via", "d": "12/2017"}, {"body": "may completely wrong please try understand tried calling php talking existing template projects already well php already server rendered case hook vue component directly sync markup js vue component work well vue router short server side rendering without dependancy consider scenario project going distribute among several client ca nt force everyone install php js extension", "d": "12/2017"}, {"body": "sure understand mean obviously mount vue components existing markup simply replaces whatever previously", "d": "12/2017"}, {"body": "yes mount existing markup instead like markup state sync vue component", "d": "12/2017"}, {"body": "remove dash seems work", "d": "12/2017"}, {"body": "way vue converting camelcase props kebabcase pretty simple inserts hyphen upper case letters convert lower case think much numbers adding hyphens around consecutive numbers breaking change", "d": "12/2017"}, {"body": "josephuspaye", "d": "1/2018"}, {"body": "behavior hard say whether right wrong since changing would breaking existing code leave", "d": "3/2018"}, {"body": "hi timevalue seems control error debian chrome versi\u00f3n build oficial bits console get error vue warn property method timevalue defined instance referenced render make sure property reactive either data option classbased components initializing property see found warn", "d": "12/2017"}, {"body": "browsers emit partiallyfilled input typetime values input field partiallyfilled value blank string agnostic javascript framework knowledge way obtaining value partiallyfilled timedatedatetime field nt know older browsers would work treat text field yes could obtain value might nonstandard prestandard way obtaining value", "d": "12/2017"}, {"body": "thanks comments kasseltrankos bingolumity point would like minutes seconds need hours case would rather avoid need forcing user always set hours break app", "d": "12/2017"}, {"body": "create custom component use existing one browsers work would see behaviour using vanilla javascript try getting value console see empty string", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "\u8bd5\u8fc7\u4e86 \u8fd8\u662f\u62a5\u9519", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "assuming available template result code would course valid callback function string making constants avaliable templates whatever way wo nt solve problem", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "use javascript import mapactions vuex import storekeys export default name minimaltest methods mapactions terminputchanged onupdatesearchterm", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "\u4f60\u8ddf\u6211\u95ee\u9053\u4e86\u540c\u6837\u7684\u95ee\u9898 \u4f60\u53ef\u4ee5\u770b \u6211\u7684issue\u88abclose\u4e86", "d": "12/2017"}, {"body": "nt use templates code shared valid vue template contains invalid javascript issue obviously feature request abusing ask question issue guidelines meant bug report missing required runnable reproduction \u6211\u4eec\u7684\u4e2d\u6587\u652f\u6301\u8bba\u575b\u5c31\u5728\u8fd9\u91cc", "d": "12/2017"}, {"body": "first variable seems nothing related proposal constant data second discussed constant data self pluginmixin easy", "d": "12/2017"}, {"body": "template \u9ed8\u8ba4\u5c31\u662f\u4ee5 vm \u4e3a", "d": "12/2017"}, {"body": "already opened issues question second issue also received answer explained newissuevuejsorg issue tracker meant support questions please use forum forumvuejsorg chat chatvuejsorg open issues topic might consider blocking", "d": "12/2017"}, {"body": "linusborg second issue tip invalid issue ans right perfunctory distinguish questions bug", "d": "12/2017"}, {"body": "linusborg ask question", "d": "12/2017"}, {"body": "ans right perfunctory since nt share runnable code snippet template ca nt actually tell erorr error see shared use third issue rules well since reproduction nt reproduction codepen template snippet lines vue code making work harder opening issues nt follow rules please nt distinguish questions bug doubt ask others forum chat first lock issue reason", "d": "12/2017"}, {"body": "\u8bf7\u4ed4\u7ec6\u770b\u6e05\u695a\u5f00 issue issue", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "using template remove variable template jsx", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "zdream \u70b9\u8fd9\u91cc\u67e5\u770b\u6587\u6863 issues\u4e0d\u662f\u63d0\u95ee\u7684\u5730\u65b9 \u8fd9\u79cdissues\u4f1a\u88ab\u5927\u4f6c\u5ffd\u7565\u7684", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "properties arrays reactive recall correctly", "d": "12/2017"}, {"body": "\u4f60\u7684", "d": "12/2017"}, {"body": "\u4e0d\u751f\u6548\u8bf7\u53bb vueloader \u5f00\u5bf9\u5e94 reproduction", "d": "12/2017"}, {"body": "diff \u548c render", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "looks like firefox highlights inputs soon touch using js imagine could add condition sure firefox bug", "d": "12/2017"}, {"body": "ran issue worth angular implemented additional condition check posva mentioned order workaround commit", "d": "7/2018"}, {"body": "maybe applicable", "d": "12/2017"}, {"body": "use key avoid component reuse", "d": "12/2017"}, {"body": "schoonc said key needed avoid component reuse", "d": "12/2017"}, {"body": "currently supported including reactivity supported new version coming early", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "sure raw template using lowercase changed properly preserved generated render function", "d": "12/2017"}, {"body": "oh right bad thanks", "d": "12/2017"}, {"body": "unfortunately expected elements level telling vue said need add suffix prefix let vue treat differently may think working pre warning always working warning simply missing", "d": "12/2017"}, {"body": "thanks quick reply clap makes perfectly sense know considered anonymous component vue think word template key doc could help others especially doc said serves invisible wrapper smile", "d": "12/2017"}, {"body": "contributions docs always welcome think invisible wrapper accurate try use template also get error looks covered ofc open pr docs found case covered", "d": "12/2017"}, {"body": "posva thx reply hard find mistake", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "stated issue helper instructions issue list place seek help please use forum discord chat", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow btw write vue pass", "d": "12/2017"}, {"body": "posva thx response eventtargetid returning clicked id every time clicking fast tabs bug call like eventtarget event catch target node giving time anyway thx answer try another way", "d": "12/2017"}, {"body": "keep mind native event problem probably related vue", "d": "12/2017"}, {"body": "posva thx yeah got ya used onclick consolelog thisid von click work even fast clicks using eventtargetid eventtoelementid eventsrcelementid working times fast click looks like dom nt existed mean time probably vuejs inner stuffs could nt catch id eventtarget hope got yeah thx time", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "specific xmlns xaml feature looking", "d": "12/2017"}, {"body": "guess something similar op probably wants way import symbol files template code script code currently must import symbols script section attach vm order use template", "d": "12/2017"}, {"body": "herringtondarkholme right request different issue request something like assigning context request feature support using external variables object class enum nonviewmodel member template uwp examle look root element page default uses vm use import external things xaml", "d": "12/2017"}, {"body": "\u4f7f\u7528\u67d0\u79cd import filter", "d": "12/2017"}, {"body": "template vm created \u91cc\u9762\u6302\u8f7d\u5230 vm \u5b9e\u9645\u4e0a\u8fd9\u6837\u7684\u9700\u6c42\u7528 render function tsx", "d": "12/2017"}, {"body": "forgot webpack configuration javascript const path require path const webpack require webpack const extracttextplugin require extracttextwebpackplugin const manifestplugin require webpackmanifestplugin const chunkmanifestplugin require chunkmanifestwebpackplugin const require const cleanwebpackplugin require cleanwebpackplugin moduleexports entry dashboard assetsjspagesdashboardjs dashboard part issue js fiddle provided settings assetsjspagessettingsmainjs output filename processenvnodeenv production js name chunkhash js js name js path pathresolve dirname webdist publicpath dist module rules test pngjpggif use loader fileloader options name name ext outputpath images test js include pathresolve dirname assets use babelloader test ttfeotsvg loader urlloader amp namefonts name ext test scss include pathresolve dirname assets use extracttextpluginextract fallback styleloader use cssloader resolveurlloader sassloader sourcemap test css use extracttextpluginextract fallback styleloader use cssloader resolveurlloader test vue loader vueloader options loaders scss vuestyleloader cssloader sassloader sass vuestyleloader cssloader sassloader indentedsyntax resolve alias jquery jquerysrcjquery vue vuedistvueesmjs plugins new extracttextplugin filename processenvnodeenv production css name chunkhash css css name css new webpackprovideplugin jquery jquery jquery new new manifestplugin basepath dist performance hints false devtool sourcemap processenvnodeenv production moduleexportsplugins moduleexportsplugins concat new webpackdefineplugin processenv nodeenv production new webpackoptimizeuglifyjsplugin minimize true comments false compress warnings false new webpackloaderoptionsplugin minimize true new cleanwebpackplugin dist root pathresolve dirname web verbose true dry false also message get console", "d": "12/2017"}, {"body": "sorry really special case question stated nt take questions issues", "d": "12/2017"}, {"body": "including production", "d": "12/2017"}, {"body": "think may lead subtle issues regarding timing component definedextended vs global one registered prefer keep explicit", "d": "3/2018"}, {"body": "opinion fully stated something ever consider obsessing html validity something eventually rendered browser pointless also changing syntax point practical impossibility whole ecosystem built upon existing syntax", "d": "12/2017"}, {"body": "changing syntax point practical impossibility whole ecosystem built upon existing syntax well case closed guess thanks clarifying", "d": "12/2017"}, {"body": "using inline templates nonspa website even vue converts markup valid executed would nt valid initially page loads little confused seems seen issues forum answers recommended imposed way use vue single file components previously compiled despite progressive incrementally adoptable approach know nt common practice anymore cases like use vue library add functionality existing html wordpress theme instance yet valid html worried anyway", "d": "5/2018"}, {"body": "considered anecdotal running forum regular chats stackoverflow ca nt recall single question naming lead confusion realting angular furthermore concept scoped slots exists since vue standard vue vocabulary point introduced html scope slotscope slotprops might well confuse anyone worked scoped slots previously could improve understanding others said certainly wo nt deny always potential confusion vue concept angular said nt seem widespread problem would also would say could turn back time introduce feature synatx since right start going would probably better point time however established concept vue community nt think suggestion offers enough improvement warrant essentially deprecation current syntax adding another special attribute could collide existing apps bottom line would unconvinced opposed either", "d": "12/2017"}, {"body": "linusb thank time helpful explanationconsideration yes agree assessment", "d": "12/2017"}, {"body": "linusb bad must admit personal confusion slotscope fogged evan stretching word scope one many genius vue features one point randomly stumbled lowlevel runtime javascript diagnostic revealed exactly transpiling scope attribute freaking clever technique yes perhaps misleading name still find wherever socks blew linusb kind comments educational thanks history time working documentation example may helpful share integrate recent discovery socks land happy new year", "d": "12/2017"}, {"body": "genedronek runtime referring im trying dive vue internals might good starting point", "d": "12/2017"}, {"body": "link fortuitous slot discovery slot scope compiling perhaps choice calling runtime arises learning nuxt framework ssr serversiderendering vuejs see exploding templates later ssr clientside runtime evaluation", "d": "1/2018"}, {"body": "enough", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "issue requirements stated please use issues ask questions", "d": "12/2017"}, {"body": "anyway original question useful additional info part optional", "d": "10/2018"}, {"body": "unsure judge behaviour vue wrong happens recieves array children foobar component slots causes rerender since empty array everytime would strictly necessary question verify reliably performant way ie array content previous render cause update would hagve compare optimize thing jsx plugin appearantly creates empty arrays components nt slot first place definitely triage issue independently depending one gets judged", "d": "12/2017"}, {"body": "think pretty rare special case caused incorrect transpilation jsx plugin empty array eliminated whenever possible done template compiler let track jsx plugin repo reasoning updating linusborg explained pretty well note even slot content content change still fresh vnodes need diffed order ensure consistency special case empty arrays nt really meaningful improvement terms perf", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "try replace difference please provide valid repro reporting bug", "d": "12/2017"}, {"body": "posva sorry ignoring github editor self encoding updated written instead", "d": "12/2017"}, {"body": "would need escaped could provide repro please", "d": "12/2017"}, {"body": "posva parsed comment tag html files injecting code tag would found nothing rendered android webview sorry could nt provide real repro private project found simple way reproduce yet really useful replace treated comment tag prevent code execution", "d": "12/2017"}, {"body": "ah see repro version browser failing change minimal want make sure actually problem", "d": "12/2017"}, {"body": "vue version android system version", "d": "12/2017"}, {"body": "weird happen unless inlining entire vue codebase inside html would", "d": "12/2017"}, {"body": "optimization strategy hybrid web page wide range android device used users lowerend means low performance network speed use devices webview native cache reliable time would wasted network requests found injecting jscss files html effectively improve speed open pages really reduce rtt roundtrip time weaknetwork environment also offline packages supported native app would really fast native app could prefetch html cache circumstances page loaded locally without ssr need machine labor costs would good practice inject js css files html get significant performance optimization users use lowerend phone weaknetwork environment", "d": "12/2017"}, {"body": "deal objects inside incoming props array object keys steps deep maximum", "d": "12/2017"}, {"body": "props mutable recommended approach clone props data need change far dont know makes browser crash tbh dont even know happening anyway give error console problaly bug", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "12/2017"}, {"body": "hello diego thank answer know props stay untouched mutate thought arrayprototypesort confirmed pure function approach return new sorted array without mutating first one bad arrayprototypesort mutate input array dont know reference incoming array props inside two computed properties arrayprototypesort method inside crush browser vue dev tool sad console error given way browser stop responsing", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "system memory usage skyrocketed almost trying reproduce issue browser crashed memory freed check blue line screen print", "d": "12/2017"}, {"body": "happen program run incoming infinite loop pretty sure happened sometimes", "d": "12/2017"}, {"body": "wonder could happen far judge computed properties act like everything js run completion first one computed property evaluated another one infinite loop case figure", "d": "12/2017"}, {"body": "idea put computed method test easier debug also return void looks weird isnt causing maybe return false would maybe better sure", "d": "12/2017"}, {"body": "check helpful", "d": "12/2017"}, {"body": "rewrite component logic using method calls sorting data instead computed props result pass tests works great even stupidly trying mutate props wisely make shallow copy incoming array props sort result figeout using two computed property logic inside trying mutate props cause system memory disappear", "d": "12/2017"}, {"body": "think found looking case vue aware computed property depends props update bindings depend computed property props changes exact point get infinite loop first computed prop mutate props trige another computed prop fire computation", "d": "12/2017"}, {"body": "first computed prop mutate props really nt computed properties nt side effects eslint rule help prevent happening code", "d": "12/2017"}, {"body": "always aware props must treated immutable inside child component point view make exact case mistake official docs attempt mutate prop inside child component vue warn console trying say vue warn working props reference type array say browser going crash infitite looop tons memory leack computed properties depand props maybe add red warnings docs case", "d": "12/2017"}, {"body": "thanks everyone great vuejob", "d": "12/2017"}, {"body": "yeah happening cannot say compiling either interpreting infinite loop going happen", "d": "12/2017"}, {"body": "changed title", "d": "12/2017"}, {"body": "hmmm nt seem template strings change arrays seems vue interpolating either console custom elements report strings containing stuff like passed case vue interpolating arrays values passed custom elements would form rather arrays converted string show commaseparated list values vue interpolating attributes", "d": "12/2017"}, {"body": "hmmm looks like got working sure working made changes using single file components babel compile opposed vue compile templates runtime codepens honestly got clue maybe sure", "d": "12/2017"}, {"body": "replaced repro correct one use non minified version warns problems workaround moment add attribute button", "d": "12/2017"}, {"body": "likely nothing vue version number please investigate build tool chain starting mix", "d": "12/2017"}, {"body": "nt need wait us build services vue scope everybody like think vuex goes well vue free use something else precisely nt come baked right vue offer alternatives vuex know nt fit everybody mindset created different solutions use well google similar end want pretty much doable already nt need provide function use vue instance purposes store event bus may small memory overhead compared using barebones solution overhead comparable another component page therefore low even create custom properties store make global mixin merges properties hook", "d": "12/2017"}, {"body": "hey posva thanks reading reply certainly right doable right thought would get short shrift nt really memory honest api general complexity got weird edge case recently vue store services essentially broke app hours severely dented confidence vue stores discovered nt alone maybe issues could solved struck breaking reactivity system would useful side note recently made service vuex pretty cool see data programatically added store right situations cool", "d": "12/2017"}, {"body": "duplicate", "d": "12/2017"}, {"body": "thing explicitly showing element adding vshow parent counts override put another way declared style eg fontsize child hellovue override parent appvue one parent would take precedence intentional allow users override componentspecific attributes case always move nested similar directly provide prop toggle visibility", "d": "12/2017"}, {"body": "know solve problem easy way still case need logic think tabs table support search keyword tab use vshow control tab show table record vshow check show use solution match plan logic", "d": "12/2017"}, {"body": "nt think put logic another component child component good solution", "d": "12/2017"}, {"body": "even fail every time need proper boiled reproduction example able remove vuex vuerouter github repository important boil minimal may even find problem came way need make sure reporting bug asking question forum discord server closing moment boil still think vue bug come back open new issue", "d": "12/2017"}, {"body": "ok thanks", "d": "12/2017"}, {"body": "symbol nt even supported using polyfill", "d": "12/2017"}, {"body": "yeah checkout external resources section using babelpolyfill", "d": "12/2017"}, {"body": "hesitant say issue symbol polyfill specifically since works change parent component found bug reproducible symbol converted string parent using wrapper component also providing arbitrary data", "d": "12/2017"}, {"body": "reverting related changes", "d": "12/2017"}, {"body": "array must contain vnodes things created weird expecting find information typings allow returning vnode arrays nt know typing wrong never intended forgotten typings", "d": "12/2017"}, {"body": "\u8fd9\u4e2a\u4e0d\u5c5e\u4e8e core", "d": "12/2017"}, {"body": "nt think guarantee regarding getters invoked case need traverse observe returned value getters invoke getter also bad idea rely getters side effects getters pure", "d": "12/2017"}, {"body": "sorry nt get thing guarantee nt suggest traverse properties get value property despite fact used property getter see parameter necessary method usecases function think omitted without harm calculated property getter thank aware getters thing using carefully saving development time reason think change usefull may common usecase using getters props data source lags costly getter functions unintended behaviour", "d": "12/2017"}, {"body": "deylak property data object processing function property trying set value property later defined function executed new value observedhowever observed new value never relied upon think modify method shown following code add judgment conditions existence ensures property accessor propertyif accessor property method return directly", "d": "4/2018"}, {"body": "hcysunyang feel free submit pr", "d": "4/2018"}, {"body": "ok submit pr", "d": "4/2018"}, {"body": "think question plugin makes little sense add additional properies", "d": "12/2017"}, {"body": "hi issue definitely breaking change caused pull request already broken lots cases far completely ok add custom property prop used later custom transformations actions documentation also saying anything customization trading spell checking loosing flexibility framework seems quite odd would rather leave spelling checks static code analysis tools case change must one possible solution adding concrete custom property cases used besides type default required validation greetings plamen", "d": "12/2017"}, {"body": "seems something like", "d": "12/2017"}, {"body": "imho prop plain javascript object take possible abstraction thus custom fields possibly serve advanced logic vue component indeed dedicated serve purpose vue framework still object different property inside mistake thrown exception warning possibly yes javascript exception many possible cases errors cause troubles actually help case typo examples code base defines object later used props custom vue components case need sanitize objects order use props hit error custom logic involves additional evaluation props prop name suitable enough context needed zdravkov nicely suggested custom field put context like idea another great example", "d": "12/2017"}, {"body": "reverting warning since causing issues existing use cases strict validation still applied opting tools like eslint plugins typescript", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow also recommend read mdn doc note also various browsers ignore result event ask user confirmation document always unloaded automatically", "d": "12/2017"}, {"body": "render anything vue uses template parent component defined template option script tag template incorrect using default slot instead namd slots label field template html block almost correct need wrap paragraphs component fixed example suggestion use nested slot vue yes course everything well explained documentation read using named slots vue named slots good luck", "d": "12/2017"}, {"body": "sqal yeah fixed example worked situation want pack child tag inside parent tag used convenient people use parent tag two slots instead using parent tag child tag", "d": "12/2017"}, {"body": "slot name respected level content gets passed child becomes default slot", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "\u6211\u611f\u89c9 vue", "d": "12/2017"}, {"body": "\u6211\u4e5f\u89c9\u5f97\u5f88\u7b80\u5355", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "missing babel plugin syntax supported browsers yet", "d": "12/2017"}, {"body": "already support officially", "d": "12/2017"}, {"body": "talking write typescript definitelytyped dts vue sfc written using javascript rather support typescript", "d": "12/2017"}, {"body": "ask question official forum chat room stackoverflow issue list exclusively reserved bug reports feature request", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "expected nested keys recognized validator try change string use vue version warn warning message telling using incorrect way prop validator want validate need define", "d": "12/2017"}, {"body": "jounqin think using validate key complex config works simply define prop array object elements", "d": "12/2017"}, {"body": "bug feature request", "d": "12/2017"}, {"body": "also think done function returns true false based validity prop really nt complex give another chance", "d": "12/2017"}, {"body": "many potential problems syntax require exact shape length keys object deep go object happens contains one builtin keys done writing custom validator factory function reuse project", "d": "12/2017"}, {"body": "crucial defect syntax type info props type permanently lost standard vue component definition syntax impossible even libraries like vuetsxsupport recover typescript definition unless wrap syntax simple object definition done vuepropertydecorator", "d": "5/2018"}, {"body": "aware lazy modifier", "d": "12/2017"}, {"body": "yes situation wait multiple input finished think detail think custom directive implement emit", "d": "12/2017"}, {"body": "use data props temporarily store data", "d": "12/2017"}, {"body": "vue global variable default", "d": "12/2017"}, {"body": "oh thanks ktsn embarrassing nt know", "d": "12/2017"}, {"body": "happens setting message mounted trigger new render using plain objectin vbind triggering watch creates new object every time renders object data instead would nt trigger watcher value wtf prop would nt changed mounting", "d": "12/2017"}, {"body": "hello posva thanks explanations maybe know would better need prop wtf object type need watcher prop becase parent components may update message watcher need call prop changes really example mounted event triggers fresh data delivered axios another version message ca nt see fresh data prop wtf update message old lt happens first time works good upd happens use component without parent component", "d": "12/2017"}, {"body": "create computed property nt create new object everytime renders", "d": "12/2017"}, {"body": "would nt say even technically valid html parsers vue template parsers different levels error tolerance html parsers implemented intentionally tolerant syntax errors fact never explicitly fail personally think bad idea vue parser mirror level error tolerance potentially leads types mistakes implicitly ignored wontfix", "d": "12/2017"}, {"body": "understand pov also annoyance figure html working nt added vue", "d": "12/2017"}, {"body": "also worth noting like react people writing html inside js opposite vue people likely write regular html apply vue designerfriendly way", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "\u6211\u4e5f\u53d1\u73b0\u4e86\u8fd9\u4e2abug", "d": "3/2018"}, {"body": "\u6240\u4ee5", "d": "3/2018"}, {"body": "moment always set updating parent yes triggers children updates use render function maybe could prevented making sure listeners updated setting", "d": "12/2017"}, {"body": "unfortunately even shallowequal check setting specific example would still rerender listeners created new anonymous function render technically different similar passing different anonymous function prop every render", "d": "12/2017"}, {"body": "made plans implement check", "d": "10/2018"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "please read document carefully first", "d": "12/2017"}, {"body": "hello page use tag inner table ul ol code less clean english french china japan", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow use template string wo nt limited dom limitations", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "closed", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "mmh looks like dynamically adding element doc makes behaviour appear sure something workaround vue moment use workaround set input js", "d": "12/2017"}, {"body": "yes thanks workaround ended using vue initialize form field project think something vue address breaks expected behavior app entire page div id app vue instantiated affects pages nt use vue convention laravel comes box feeling developers might affected", "d": "12/2017"}, {"body": "keep mind breaks expected behaviour safari bug laravel comes convention imagine also possible workaround like give hints pr sure add workaround", "d": "12/2017"}, {"body": "see safari bug nt think resolved vue maybe contribute note documentation browser quirk instead sure warrants inclusion docs though", "d": "12/2017"}, {"body": "ran issue well bzarzuela mentioned well app also wrapped app div page load date field empty value set setting manually later selecting another date date shown disabling vuejs worked like expected", "d": "12/2017"}, {"body": "proposal describes want nt explain want need provide full context use case need assume trying implement something like custom renderer already feature request actually looking something different please follow details", "d": "12/2017"}, {"body": "typeerror read property innerhtml undefined javascript import loader import tsloader libplugints import vue vuedistvue create jsdom document loaderregister loaderuse tsloader consolelog vue import options temptestvue const vm new vue options mount consolelog vm elinnerhtml consolelog vm elinnerhtml consolelog documentdocumentelementinnerhtml consolelog documentdocumentelementinnerhtml work javascript import loader import tsloader libplugints create jsdom document loaderregister loaderuse tsloader import vue vuedistvue consolelog vue import options temptestvue const vm new vue options mount consolelog vm elinnerhtml consolelog vm elinnerhtml consolelog documentdocumentelementinnerhtml consolelog documentdocumentelementinnerhtml", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "use event tags need specifically probably works vue cause problem indeed event supported ieedge tags source", "d": "12/2017"}, {"body": "oh thank event used vuejsonschema library working ie open issue ie problem sorry checked mdn first", "d": "12/2017"}, {"body": "andreiglingeanu said nt think vue anything", "d": "12/2017"}, {"body": "correct points input nt work even polyfilled problem hit replacing change solves issue issue saved ton time thanks", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "tried fresh build everything seems work fine please provide reproduction possible", "d": "12/2017"}, {"body": "figured forcing ie give error output using ajax call back function thanks", "d": "12/2017"}, {"body": "known limitation using dombased templates simply allow placed inside work around need use stringbased templates instead", "d": "12/2017"}, {"body": "tried implementing string based templates luck since multiple root elements also allowed template since multiple tds ca nt really wrap div ideas", "d": "12/2017"}, {"body": "repro requirements clearly stated expect minimal reproductions must inspectable source code full apps", "d": "12/2017"}, {"body": "updated link jsfiddle thanks", "d": "12/2017"}, {"body": "wondering different templates instead using logic directive template", "d": "12/2017"}, {"body": "templates intended used component always template use vue logic directives display different content based data", "d": "12/2017"}, {"body": "thank try localized templates template id different translations want give ability switch language without full page reload", "d": "12/2017"}, {"body": "jounqin features available premium users want parts templates visible even page source", "d": "12/2017"}, {"body": "wrapper take optional argument set cache object explicitly place passed way template cache accessible userspace cleared manually", "d": "12/2017"}, {"body": "template cache something intend expose user app logic rely template self language express dynamic information work within template outside nt want expose template source use precompile step eg", "d": "12/2017"}, {"body": "thank checked vueloader seems work webpack please advise done server renders vue template translations eg action names labels etc user changes locale server renders new content markup different translated phrases script tag way vue continue render template old locale way see use locale suffix template ids require global js variable used looks dirty upd moving translations js acceptable app", "d": "12/2017"}, {"body": "saying changing locale page reload simply fetches new templates via ajax updates nodes", "d": "12/2017"}, {"body": "maybe need", "d": "12/2017"}, {"body": "yes use turbolinks replaces body one fetched via xhr akryum thank get right lib clientside translations able move translation logic frontend scope current tasks", "d": "12/2017"}, {"body": "one issue faced rendering old templates deploying updates server renders updated vue template applied user reloads page", "d": "12/2017"}, {"body": "want create complex widgetscomponents describe one dynamic templates also notice issue template cache call change prop value component works fine gon na core problem", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "\u7684 targets", "d": "12/2017"}, {"body": "vue vuerouter vuex mintui axios \u5b89\u5353uc\u6d4f\u89c8\u5668\u548cqq\u6d4f\u89c8\u5668\u7a7a\u767d\u9875", "d": "12/2017"}, {"body": "caosenvip", "d": "12/2017"}, {"body": "babelhelpervuejsxmergeprops \u591a\u4e86 babelpluginsyntaxjsx \u591a\u4e86 babelplugintransformvuejsx \u591a\u4e86 connecthistoryapifallback \u5c11\u4e86 eventsourcepolyfill \u5c11\u4e86 functionbind \u5c11\u4e86 nodenotifier \u591a\u4e86 portfinder \u591a\u4e86 postcssimport \u591a\u4e86 postcssloader \u591a\u4e86 shelljs \u591a\u4e86 uglifyjswebpackplugin \u591a\u4e86 webpackdevserver \u591a\u4e86 webpackdevmiddleware \u5c11\u4e86 webpackhotmiddleware \u5c11\u4e86", "d": "12/2017"}, {"body": "\u73b0\u5728\u53ef\u4ee5\u786e\u5b9a\u662f\u81ea\u5df1\u7684\u95ee\u9898", "d": "12/2017"}, {"body": "checkbox\u91cc\u9762 \u540c\u65f6\u4f7f\u7528\u4e86vmodel checked", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "\u9700\u8981\u4fee\u6539babelrc", "d": "12/2017"}, {"body": "fengjiel", "d": "12/2017"}, {"body": "\u55ef \u6342\u8138", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "vue webpackdevserver", "d": "12/2017"}, {"body": "merge \u4e4b\u524d\u53ef\u4ee5\u624b\u52a8\u62c9\u6211\u7684\u5206\u652f\u91cc\u7684\u6539\u52a8", "d": "12/2017"}, {"body": "webpack scope hoisting webpackoptimizemoduleconcatenationplugin plugin \u540e\u6062\u590d\u6b63\u5e38", "d": "12/2017"}, {"body": "\u6211\u4e5f\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898 \u4e0d\u8fc7\u73b0\u5728\u5df2\u7ecf\u89e3\u51b3\u4e86 \u4e3b\u8981\u539f\u56e0\u662f static \u9759\u6001\u6587\u4ef6\u4e2d\u6709 \u7684\u8bed\u6cd5 \u800c babel \u7f16\u8bd1\u65f6\u4e0d\u4f1a \u7f16\u8bd1 static \u4e2d\u7684\u6587\u4ef6 \u89e3\u51b3\u65b9\u5f0f \u7b2c\u4e00\u79cd gt \u628a static \u6587\u4ef6\u653e\u5230 src \u4e2d \u7b2c\u4e8c\u79cd gt \u624b\u52a8\u628a static \u6587\u4ef6\u4e2d\u7684\u6539\u6210 \u9700\u8981\u6267\u884c npm run build \u4e4b\u540e\u518d\u770b npm run dev \u7684\u65f6\u5019\u6682\u65f6\u6211\u8fd9\u8fd8\u4e0d\u884c \u53ef\u80fd\u662f dev \u7684\u65f6\u5019\u4e0d\u4f1a\u6267\u884c babel \u8fdb\u884c\u7f16\u8bd1 \u4f46\u662f build \u4e4b\u540e\u7684\u6587\u4ef6\u662f\u53ef\u4ee5\u5728 \u9489\u9489\u6216\u8005\u4e0d\u652f\u6301", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "wmui \u89e3\u51b3\u4e86\u6211\u7684\u56f0\u6270", "d": "3/2018"}, {"body": "webpackdevserver \u8fd8\u662f\u4e0d\u884c", "d": "5/2018"}, {"body": "", "d": "12/2017"}, {"body": "\u5176\u5b9e\u5173\u4e8e iview jingsam vuejs \u5927\u90e8\u5206\u4eba\u4f7f\u7528\u7684\u662f webpack iview \u4e00\u5f00\u59cb\u501f\u9274\u7684 vuejs \u6587\u6863\u4e2d\u4e5f\u6709\u8fc7\u5bf9\u8fd9\u79cd\u7528\u6cd5\u7684\u5f3a\u70c8\u63a8\u8350 \u6bd4\u5982\u5728 webpack \u800c\u4e0d\u662f \u89c9\u5f97 vuejs webpack \u4e0b\u7684\u6807\u7b7e\u540d\u505a\u5c0f\u5199\u8f6c\u6362\u5373\u53ef vuejs thanks", "d": "12/2017"}, {"body": "\u6211\u4e5f\u4e60\u60ef\u7528 table button", "d": "12/2017"}, {"body": "icarusion template\u4e0d\u80fd\u533a\u5206\u5927\u5c0f\u5199\u662f\u56e0\u4e3a\u6d4f\u89c8\u5668\u5c06\u6a21\u677f\u704c\u5230compiler\u524d\u8fdb\u884c\u4e86lowercase", "d": "12/2017"}, {"body": "\u89c4\u8303\u89c6\u89d2 vue template compiler svg vue template compiler \u89e3\u6790\u5668\u89c6\u89d2 vue template compiler kebab \u7528\u6237\u89c6\u89d2 \u8fd8\u662f tag \u5bf9\u4e8e \u603b\u7ed3 html", "d": "12/2017"}, {"body": "pascalcase dom \u6a21\u677f\u4e2d\u603b\u662f kebabcase dom", "d": "12/2017"}, {"body": "\u8001\u5927\u51fa\u6765\u8bf4\u660e\u4e00\u4e0b", "d": "12/2017"}, {"body": "button", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "\u548c iview \u751a\u81f3\u662f\u65b0\u63a5\u89e6 vue vuejs \u6587\u6863\u4e2d\u4e5f\u6709\u8fc7\u5bf9\u8fd9\u79cd\u7528\u6cd5\u7684\u5f3a\u70c8\u63a8\u8350 \u6bd4\u5982\u5728 webpack menuitem \u800c\u4e0d\u662f menuitem vuejs", "d": "12/2017"}, {"body": "vueesmjs vue warn use builtin reserved html elements component id circle vueesmjs vue warn use builtin reserved html elements component id switch", "d": "12/2017"}, {"body": "html \u89c4\u8303\u80cc\u9053\u800c\u9a70\u771f\u7684\u662f\u4e00\u4e2a", "d": "12/2017"}, {"body": "\u4f60\u6709\u5199 \u4e5f\u6709\u5bf9 html warning", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "please read requirements make proper bug report", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "\u8fd9\u4e0d\u7b97 bug \u542f\u52a8 node \u7136\u540e\u624b\u52a8", "d": "12/2017"}, {"body": "trouble understanding want code nt even runnable assume looking way force trim input even user typing case call right input component", "d": "12/2017"}, {"body": "\u4f60\u90fd\u8bf4\u4e86\u8fd9\u662f ios vue \u672c\u8eab\u7684", "d": "12/2017"}, {"body": "expected behavior special logic handling changed options using direct bindings need add bindings options instead", "d": "12/2017"}, {"body": "definitely help make initial mistake nt believe worth fattening vue src handle trivial mishap make mistakes imho nt seem essential", "d": "12/2017"}, {"body": "job linter see eslintpluginvue", "d": "12/2017"}, {"body": "watch option write way", "d": "12/2017"}, {"body": "oops sorry noise strange typescript nt catched though", "d": "12/2017"}, {"body": "typescript error following code please clarify kind error happening error happening parcel parcel got", "d": "12/2017"}, {"body": "error error happening parcel parcel want use esm release going wait parcel support alias use", "d": "12/2017"}, {"body": "wouldnt typescript path mapping allow thing", "d": "12/2017"}, {"body": "yes work temporary solution", "d": "12/2017"}, {"body": "feature typescript working essentially babel webpack would nt call temporary solution really parcel added support aliases would even better course", "d": "12/2017"}, {"body": "getting error line fix use typescript path mapping exactly use", "d": "6/2018"}, {"body": "report explicitly mentions newlines double escaping also occurs escape sequences like", "d": "12/2017"}, {"body": "looks like attribute first escaped using call finally whole string template escaped using inside causes double escaping", "d": "12/2017"}, {"body": "could fix problem applying following patch function", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "g", "d": "12/2017"}, {"body": "docs place want go go discord server somebody probably give examples improvements proposals docs repo", "d": "12/2017"}, {"body": "ok thx wo nt create discord account though really building integration nt want create new accounts understand opensource library works guess play around understand thank anyways since nt use vue intention probably wo nt contribute sorry project goes expected might rethink", "d": "12/2017"}, {"body": "one last thing warning development quite right warning absolutely right since dom structure relying random data dom generated server sent client differs dom clientrendered virtualdom representsexpects find hydration hence app runs error sure hint would expect hope something like condition server another value client disappoint would require kind ai analysing component render function code interpreting intelligently possible understanding issue facing point expected behaviour pretty much unavoidable hydration succeed reliably data responsible defining dom client server component something random like example nt render server skip first render client nice example easily found otherwise would try find way skip random part data generation first render instead use data created server eg storing vuex", "d": "12/2017"}, {"body": "random emphasize error make easier reproduce happen kind external data unforeseeable reason may differ server client concerned uncaught error understand clientserver data mismatch something avoid bail rerender like done development mode instead isolate error component failing see problem inside small component levels deep app structure would expect component fail render instead makes whole app stop working least could avoidable great otherwise sorry waste time", "d": "12/2017"}, {"body": "easy hydration whole app rendered first attached dom trot happen inside component really wanted check dom node every component really belongs performance suffers performance whole point ssr lose valuable ms hydration verify every piece dom stop ssr warnings development production", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow error probably happen using template without declaring", "d": "12/2017"}, {"body": "posva tks u reply use vuecli init easy project export default name helloworld data return msg welcome vuejs app created function consolelog error appear consolelog thismsg ok", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow examples vuerouter repo may find useful", "d": "12/2017"}, {"body": "posva \u6211\u8fd9\u662f\u7ed9\u4f60\u4eec\u63d0\u529f\u80fd\u9700\u6c42", "d": "12/2017"}, {"body": "transition", "d": "12/2017"}, {"body": "", "d": "1/2018"}, {"body": "\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c \u521d\u59cb \u7684 transform \u4ee5\u4e0a\u4e24\u70b9\u7f3a\u4e00\u4e0d\u53ef", "d": "1/2018"}, {"body": "niceue", "d": "1/2018"}, {"body": "\u6211\u6ca1\u52a0transition\u4e5f\u9047\u5230\u4f60\u8fd9\u4e2a\u95ee\u9898", "d": "1/2018"}, {"body": "ps", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "giving component name check component name example", "d": "12/2017"}, {"body": "sqal strings nt unique like said post looking sure way ideally via strict equality object references working components used parties nt want risk name collision also concern time", "d": "12/2017"}, {"body": "achieved userland use custom logic verify correct component used slot following snippet demos approach ensure type child components vue listitemvue import listitemtype componenttypes export default group listitemtype vue listvue import listitemtype componenttypes export default render h const children slotsdefault return h div childrenmap vnode gt vnodecomponentoptions vnodecomponentoptionsctor return vnode vnodecomponentoptionsctorextendoptionsgroup listitemtype return vnode consolelog vue warn invalid use vnodecomponentoptionstag child component comp return vnode working demo", "d": "12/2017"}, {"body": "znck definitely achieved userland issue nt opened question find custom solution point feature request request official support", "d": "12/2017"}, {"body": "feel would increase vue api surface additional benefit think added vue reopen issue", "d": "12/2017"}, {"body": "think extra property reference original component offer credible convenient way confirm identity hence integrity vnode question cost one property added vnode gain official way assure right component passed vnode think good deal", "d": "12/2017"}, {"body": "vuejscollaborators comments", "d": "12/2017"}, {"body": "znck might want reopen want discussion collaborators closed issue sea notifications drowned personally ca nt say much nt understand original problem enough check nt work karma etc moment", "d": "12/2017"}, {"body": "might worth noting problem occurred using vuetestutils however filing bug fr supporting way accurately identify component vnode", "d": "12/2017"}, {"body": "work checking caches constructors created raw options imo use case lowlevel specific create dedicated api", "d": "12/2017"}, {"body": "would recommend identify vnode component surely reading slot vnodes nt uncommon able tell kind vnode would useful sure mean code snippet returns constructor function references object would never equal example guessed may meant nt evaluate true expected either", "d": "12/2017"}, {"body": "fyi believe nt able strict equality deep clone vuetestutils turned cloning clone false", "d": "12/2017"}, {"body": "\u901a\u5e38\u7528\u6765\u6807\u793a xml \u7ea7\u522b\u7684 html", "d": "12/2017"}, {"body": "component defines method name defined mixin component method overrides method defined mixin could lead unexpected bugs typescript implementation loudly tells method collision think warn collisions mixins component using ideally follow mixin namespacing rules avoid collisions", "d": "12/2017"}, {"body": "hi znck override mixin method defining another method compiler complaining override mixin method", "d": "12/2017"}, {"body": "octref ktsn please look", "d": "12/2017"}, {"body": "type parameters mean additional properties property types component example provide mixin type type parameter component options follow type type check failed also current expected provided types manually used type inference component options object may support use case future typescript compiler handle use case currently", "d": "12/2017"}, {"body": "ktsn thanks understand types inferred trying use methods mixin component trying work around issue manual typing solved issues however want mixin two different mixins wo nt work basically problem single vs multiinheritance possible support inferring types mixins array", "d": "12/2017"}, {"body": "impossible infer component type array need use wrapper function", "d": "12/2017"}, {"body": "closing wontfix", "d": "12/2017"}, {"body": "closing nt appear vue issue sorry trouble frustrated spending lot figuring fiddle without using vue interested issue chromium issue tracker", "d": "12/2017"}, {"body": "want display creating feature request please add realworld use case make request worth implemented", "d": "12/2017"}, {"body": "theoretically cool idea requires fundamental rethinkrewrite architecture achieve potentially break lot logic relies synchronous nature lifecycle hooks benefits must substantial order justify change otherwise considered plan full breaking upgrade unlikely happen soon closing feel free follow concrete reasoning use cases implications", "d": "12/2017"}, {"body": "posva understood apologize actual use case one component receives page route parameters fetches actual user data database server using command like refers field part component ideally want line code executed component created available component actually mounted template safely use interpolations without getting errors undefined values might noob nt change adding keyword call lifecycle hooks like etc vue land", "d": "12/2017"}, {"body": "actual code want awaited would part component", "d": "12/2017"}, {"body": "worries imagining use case better handle described vuerouter docs opens different ways displaying loading state already wait data rendering component btw", "d": "12/2017"}, {"body": "ok makes sense however user component stripped version user page say like component appears hover user name facebook peek profile router involved passed property component", "d": "12/2017"}, {"body": "taking big picture view functions javascript either synchronous asynchronous lifecycle hooks functions way think functions support asynchronousity demonstrated use case intuitive reach approach using", "d": "12/2017"}, {"body": "many ways simplest one using variable starts null fetch data set toggling actual component vif exotic version would function resolves component use please nt hijack issue question use forum discord", "d": "12/2017"}, {"body": "really nt want help code actually already implemented workarounds similar suggestions trying say much intuitive use js async features", "d": "12/2017"}, {"body": "part nt realize asynchronous synchronous code fundamentally different nature synchronous code forced adhere asynchronous code without fundamentally changing asynchronous code saw immediately took time understand comment completely thanks time guys sorry miscommunication part somewhere way", "d": "12/2017"}, {"body": "use case would like get suggestion workaround method main container call ajax init get user info commit vuexstore child inside would like call different api calls stage according user role come vuexstore lifecycle call asyncawait flow would follow order parent beforecreate parent create child beforecreate child create child mounted understand correctly component lifecycle currently get user info get workaround would like keep init api called inside used many pages container vuerouter posted question stackoverflow thanks", "d": "1/2018"}, {"body": "hackish workaround worth js created function thiswaitdata asynccall mounted function thiswaitdatathen function data", "d": "4/2018"}, {"body": "possible flat solution", "d": "4/2018"}, {"body": "thing yet", "d": "6/2018"}, {"body": "working fifman mentions", "d": "7/2018"}, {"body": "breadadams yes course functions inside method awaited however function vue instance call instantly long running processes finished", "d": "7/2018"}, {"body": "ah bad darrendev different use case side see issue thanks clarifying", "d": "7/2018"}, {"body": "breadadams problem cases glad could clarify", "d": "7/2018"}, {"body": "async lifecycle hook good implementation next major version", "d": "8/2018"}, {"body": "seems allowing async support lifecycle methods encourage bad ux practices default async functions used requests completed immediately eg longrunning network requests forcing vue delay creation mounting lifecycle methods wait network request longrunning asynchronous process impact user noticeable ways imagine user coming site wait seconds blank screen component waits user spotty cell connection finish network request negatively impact user also sacrificing control situation nothing developer make users perceived load time quicker show determinate indeterminate progress indicators building ability vue nt making web better place enabling bad practices much better plan design asynchronous case getgo kick asynchronous process wherever make component skeleton structure worst spinner wait api return user permissions much better ux nt sacrifice control vue nt add code deal asynchronous lifecycle functions keeping bundle smaller win win", "d": "9/2018"}, {"body": "seanfisher raise valid point architecturally speaking designing around asynchronous set events handled developer way portray message correctly disclaimer following written idea page generation mind definitely valid usecases argument invalid however dictating design patterns developer left framework using argument waiting phase complete different phases created mounted stage everything basically happening completely ignoring created stage okay literally time ever since early vue hooked created inject something vue needed rely nothing setup layout page however wait short async tasks run would much better page got rendered hooking firebase authentication methods create waiting complete mounted would reduce need hacky workarounds completley remember argument vue nt tell im developing wrong provide desired functionality", "d": "9/2018"}, {"body": "however dictating design patterns developer left framework using um frameworks built specifically limit guide frame developer certain design patterns practices main purpose good framework offer smart api precisely offers clear obvious way work framework yet also constraining yes paradoxical framework offers certain abilities yet also constrains developer time certain design practices exactly opinionation within frameworks either help hurt hard find right balance think vue rather evan vue dev team done great job making judgement calls scott", "d": "9/2018"}, {"body": "never argue well designed framework extended design pattern argument framework ca nt dictate correct saying matter good framework end developer still open whatever wanted nt touched actual argument making created mounted events asyncs added opinion nt wrong opinion generally leads huge derail", "d": "9/2018"}, {"body": "never argue well designed framework extended design pattern argument framework ca nt dictate sorry makes sense please show one framework nt dictate extended thought saying evan co making good judgement calls would show opinion clear mounted created lifecycle hooks nt need work asynchronously rather fact work synchronously helps reasoning application logic waiting needs accounted ui anyway asynchronous code still ran hook argue necessary beforemount mount hooks might thing two might need mounted instance ca nt yet access created like compiled render function scott", "d": "9/2018"}, {"body": "vue opinion one way async lifecycle hooks nt matter speculation need speculate standards apis guides best practices vue adopts provides recommends available read evan original reply async lifecycle hooks standard api necessarily bad idea benefits substantial enough justify cost implementation opinion bad practice make user wait async lifecycle hook without indicator something happening argument made vue supported async hooks maybe provides something could called phase templates would also solve problem could easy implement", "d": "9/2018"}, {"body": "opinion bad practice make user wait async created lifecycle hook without indicator something happening really even problem scott", "d": "9/2018"}, {"body": "issue maybe someone suggest appears problematic vue application rather large uses vuex extensively quite vue components create lifecycle set via storedispatch items store obviously however come attention storedispatch always returns promise even underlying logic function async put async created await storedispatch fooaction noted actually fails also using typescript complains rather bitterly nt await storedispatch calls floating promises best way use vuex storedispatch lifecycle ca nt async cheers", "d": "9/2018"}, {"body": "discussion vue specific opinions whether frameworks impose opinions aside could beneficial document behavior clearly", "d": "9/2018"}, {"body": "hope author fix", "d": "12/2017"}, {"body": "please follow contributing guidelines opening bug report repro course also need steps reproduce", "d": "12/2017"}, {"body": "hi please describe problem mean", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow opening bug reports please provide repro happens specific browsers list browsers test", "d": "12/2017"}, {"body": "facing problem", "d": "12/2017"}, {"body": "sorry full project valid repro boiled minimal please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "12/2017"}, {"body": "posva uploaded code routing basic issue code perfectly working okay development machine soon made production stops working", "d": "12/2017"}, {"body": "first button indeed warn user duplicate keys second button change vue file nonminified version", "d": "12/2017"}, {"body": "think warning thrown click first button fixed second one throw js error make page unusable production env important fixed even thought repeated key correctly common js error introduced framework happen write valiant script", "d": "12/2017"}, {"body": "error expected code never deployed dev warningserros help prevent", "d": "12/2017"}, {"body": "think good case case fire error special data hard exposed dev sometimes hidden bug crash app day", "d": "12/2017"}, {"body": "sorry changes job recently follow late may feel strange nt trigger warnning new array length longer old last one duplicate key need perform insert operation operation check warning message case duplicate key included data warning triggered think needs checked two cases checked development mode agree posva reasons performance even production environment would like good way", "d": "12/2017"}, {"body": "\u8fd9\u4e0d\u7b97 feature", "d": "12/2017"}, {"body": "jsfiddle works fine ca nt reproduce", "d": "12/2017"}, {"body": "yes exactly scenario wont work laravelvue project using vue", "d": "12/2017"}, {"body": "well sure evaluate possible bug without reproduction likely made mistake suggest ask forums chat forumvuejsorg chatvuejsorg provide runnable minimal reproduction problem reopen issue", "d": "12/2017"}, {"body": "please elaborate bit asking need attribute", "d": "12/2017"}, {"body": "guess looking yeah", "d": "12/2017"}, {"body": "code black box like may need use implement like try idea current api may loginname gender age birthday createtime try compare two ui table implement iviewui vs element ui posva linusborg", "d": "12/2017"}, {"body": "sorry closing simply enough feature request missing basic information like problem solving proposal recommend using forum discord server stackoverflow questions feel free come back open issue turns bug manage better describe feature request", "d": "12/2017"}, {"body": "still think would happy", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "please use access component instance hooks methods", "d": "12/2017"}, {"body": "akryum since function receives vm instance first argument", "d": "12/2017"}, {"body": "pr", "d": "12/2017"}, {"body": "think fix adding second arg function", "d": "12/2017"}, {"body": "funny log error", "d": "12/2017"}, {"body": "accessing instance working fine usecase hook also argument unecessary example", "d": "12/2017"}, {"body": "ca nt reproduce jsfiddle may issue related codepen", "d": "12/2017"}, {"body": "well already possible write plugin creates object simply proxies fields vue instance seems already achievable today although without getting rid name conflict", "d": "12/2017"}, {"body": "oh right forgotten recent addition thanks may write small plugin create object crafts templates unambiguously", "d": "12/2017"}, {"body": "sure following renders value expected renders rendering value probably something wrong need bug report reproduction", "d": "12/2017"}, {"body": "nice cheers makes sense", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "12/2017"}, {"body": "would nt interesting add props libs usually use object syntax already long stripped build productions think could nice add something like maybe prepending attributes special character could even better something like clearly make distinction", "d": "12/2017"}, {"body": "part component options api seems nt serve particular purpose vue runtime behavior case would commentbased syntax reasonable stripped default using component option would require extra toolchain changes properly strip", "d": "12/2017"}, {"body": "possible read comments language server", "d": "12/2017"}, {"body": "hey specific bootstrapvue needed component typings long time ago first iteration exactly using component runtime instance extract props autogenerating documentation componentdocvue implementation pros nt adds extra bytes runtime general purpose used document type vue components fly even runtime used sfcs js components cons add custom description prop add additional field props costs lots unneeded runtime comments custom slots events supported added custom meta descriptor components inside used making full set docs hintings example methods used nuxt based docs also generateveturhelpersjs written alexsasharegan maybe unify metadata structure used bv onesen vuetify handcraft autogenerate meta component library either file way like part vue ecosystem tooling delegated library authors may also provide helpers making process easier forcing use specific syntax like jsdocs cc tmorehouse egoist mosinve alexsasharegan", "d": "12/2017"}, {"body": "something cool discovered far project polymer component documentation spec nice cli analyzes components jsdocs extracting meta json using similar component like use visually render docs exporting via vuelanguageserver usage", "d": "12/2017"}, {"body": "would great vuelanguageserver parse jsdoc inside components", "d": "12/2017"}, {"body": "part component options api seems nt serve particular purpose vue runtime behavior case would commentbased syntax reasonable stripped default disagree imagine lot cases vue warnings devtools could improved extra information examples using component option would require extra toolchain changes properly strip yes think changes would quite simple since already manipulating options exported sfcs possible complexity realizing though please correct case really like avoid manage separate types file find fall date quickly accuracy enforced compiler plus remembering check another file every time want update component pretty significant cognitive overhead", "d": "12/2017"}, {"body": "chrisvfritz sfcs manipulate options runtime big description strings included bundle minified dropped special babel plugin hacked buble transform", "d": "12/2017"}, {"body": "posva possible read comments language server wo nt easy possible since typescript server supports analysis jsdoc added custom meta descriptor components inside packagejson used making full set docs hintings agree chrisvfritz one strength vue sfc sensible way organizing related information colocating htmlcssjs unvuelike put component specific information centralized place idea make possible write components selfdocumenting spirit jsdoc javadoc etc also helps reading vue libraries source code something look amp learn part component options api seems nt serve particular purpose vue runtime behavior case would commentbased syntax reasonable stripped default nt agree nt help runtime would bloat code size compiled away build time think achievable babel plugin though however thinking think jsdoc might better approach either way ca nt runtime info easily need parse script find descriptions parser reused vuetemplatecompiler redesign descriptions go another idea make custom block sfc like chose yaml since looks cleanest export default name vcard props width height description card component props width width rendered card component height height rendered card component libraries using js components convert format putting js file tag extra description info custom tag compiled away compile time also makes super easy extract description data mentioned info used vetur component doc generator etc better dx go beyond one example elementui use info enhance warn user runtime check", "d": "12/2017"}, {"body": "like idea custom block pattern already used vuejsecosystem libraries like kazupon sure easily strip block away compile time", "d": "12/2017"}, {"body": "wrote vuedocparser generate sfc doc supports extract component name name field filename extract component description keywords support define keywords symbol like extract component props extract component data extract computed properties dependencies extract component events extract component slots extract component methods sample vue unamed checkbox simple checkbox component author s\u00e9bastien export default name checkbox props checkbox model model value type array required true initial checkbox value checked type boolean default true data return initialvalue null computed id return checkbox thisinitialvalue created emit component loaded emit loaded methods check checbox check event identifier name emit check true generate something like js header entry name checkbox component name props entry vmodel type array required true comments checbox model entry checked type boolean default true comments initial checbox value data visibility public description null keywords value null name initialvalue computed visibility public description null keywords value object name id dependencies initialvalue slots name label comments use slot set checkbox label events name loaded comments emited component loaded name check comments event identifier name methods entry check type functionexpression comments check checbox", "d": "12/2017"}, {"body": "thanks clarifying little research see difficult babel plugin would much amazement accidentally created working proofofconcept definitely babel expert could issues seemed work codebases tested without breaking anything could even expanded strip properties needed production like props change thoughts feasibility", "d": "12/2017"}, {"body": "however thinking think jsdoc might better approach either way ca nt runtime info easily need parse script find descriptions parser reused vuetemplatecompiler redesign vuejsvuecomponentcompiler comment descriptions go descriptormetadata descriptordescriptions octref saw comment say ca nt access information easily difficult thinking would way could help explore possibilities ask personally prefer avoid jsdoc already meta information properties like component name prop types comments lose ability use additional information vue warnings devtools custom block would solve problem assuming vue template compiler could parse javascript object still issue component meta information fragmented included component option new custom tag things bother use information vue warnings devtools made dev features exclusive sfcs nt really need nt make meta information exclusive sfcs vetur would learn parse anyway people chose use custom block education perspective personally prefer avoid introducing completely new concept sfcs", "d": "12/2017"}, {"body": "chrisvfritz thinking along line using typescript extract data use supplement html completion actually nt way one independent tool takes commands tool generates manifest file user edit vue files add documentation manifest file regenerated vetur reloads manifest file enhance html editing task exist independent vetur also used tools", "d": "12/2017"}, {"body": "might want include non sfc components functional components ie files", "d": "12/2017"}, {"body": "octref like idea tooling create manifest file vetur eslintpluginvue tooling would never worry parsing information still available vue warnings devtools best worlds separate tool like might issues though since properties javascript means could runtime dependent eg solve problem wonder could build manifest file perhaps manifest file per component runtime stored manifest files standardized location vetur tools would able check location extra information added bonus parsing would agnostic syntax eg babel typescript coffeescript etc remotely possible thoughts", "d": "12/2017"}, {"body": "tmorehouse could tricky babel plugin detect nonsfc vue components since files unrelated vue could export similarlyshaped js objects also functional components exist files well nt really reason use sfcs kind component using build system would expecting babel plugin strip properties production", "d": "12/2017"}, {"body": "generating es style builds transpiling es directory module structure currently vuetemplate compiler handle situation one nt conclude every one using sfcs ran issue generating es module build bootstrapvue allow user better tree shaking files causing ssr errors due differences vueloader options converted using render functions instead files", "d": "12/2017"}, {"body": "tmorehouse according chrisvfritz idea still es style builds sfcs source custom props strippingextracting comments using babel build metajson", "d": "12/2017"}, {"body": "summary nice comments something think us agree need final manifest something like demsking suggested used documentation ide hintings big questions declare typings extract sfcs seems best place put inside jsdocs ts new custom block inline props stripped production compiling got possible methods extracting manifest using parse files extract needed parts adding support extract meta loading sfcs making external cli tool job manually document components imo enforce combination methods still forcing toolchain methodology task agree standard manifest structure let developers make choose best tooling recommend add support best method probably something else ps sorry talking lot little excited enhancement", "d": "12/2017"}, {"body": "want add observations vetur report users use third library global plugin eg elementuibootstrapvue provide global components would hard vuelanguageserver find components third lib nt specify library component manifest declaration extraction also crucial spec another problem ship component library support shipping component sfc format well compiled js already done awesome summary thanks", "d": "12/2017"}, {"body": "another problem ship component library support shipping component sfc format well compiled js sfc preferred js component render functions built two ways javascript function browser build string concatenation ssr build experimenting utility library define prop validation rules shimming utility functions production build using prepack extra meta dropped think similar techniques used documentation maybe babel plugin analyze ast export meta compile time", "d": "12/2017"}, {"body": "agree evan seem serve particular purpose want allow feature however like idea adding inside prop", "d": "12/2017"}, {"body": "time ago interested creating vetur integration quasar framework rstoenescu delayed approaches quasar deliberately huge toyed simple jstoveturlike json converter make things sane brief experience two cents community going settle custom block approach js eg object import custom logic seems like better alternative structuredtext formats like yaml jsdoc due use cases avoid duplication thus improving maintainability like following components extending components components sharing common properties disconsider message doable otherwise missing something", "d": "1/2018"}, {"body": "one also use propdocs presents pretty neat although maybe original way write documentation vue components add descriptions notes even explanatory code flags etc even render documentation separate component", "d": "5/2018"}, {"body": "made proposal feedback welcome proposal json format editor behavior part nt know library building current helper json files vetur hope get feedback alexsasharegan rstoenescu asialmatagawa jtommy qingweili nekosaur also would interested collaborating build json new format library add documentation library source code amp work tool extract metadata json work probably would need help library authors still open questions amp author data leopiccionia point components attribute feels messy descriptions scattered vue files", "d": "9/2018"}, {"body": "see thread mentioned continuing proposal discussion want comment encourage issues raised proposal repo", "d": "9/2018"}, {"body": "things write typing data source code store amp distribute data data look like amp editor based data continue discussion open issues", "d": "9/2018"}, {"body": "regarding write typing data favor first way proposal illustrates put typing data put npm module publishing add key vuetypes points path file benefit json always right version effect following existing behavior things like familiarity good nt seen sideeffects approach packagejson approach also means library authors use buildtime scripting generate uptodate set component definitions permissions manage publishing apart required publishing library general second option listed publish verilytyped automatically publish vuetypes nt know worth hassle benefit separate repository mutually exclusive packagejson distribution allows community members produce component defs libraries nt available definitely valuable far less pressing relationship two distribution methods exactly see already typescript community embedded library definitions communitycontributed definitions definitelytyped think good balance embedded publishing primary concern community registry secondary one", "d": "9/2018"}, {"body": "alexsasharegan topic made explicit topic write data source code jsdocs fields default export custom block etc", "d": "9/2018"}, {"body": "ah bad move comment proposal repo nt mind", "d": "9/2018"}, {"body": "like jsdoc ts reason use jsdoc nt break code dev long time use props seem easy think nt good design vue", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "note happens without vuerouter well html document memory leaks toggle let zombie template lt div gt text lt div gt props text string let smallcomponent name smallcomponent template small component let bigcomponent name bigcomponent components zombie template lt div gt lt div gt lt div gt big component lt div gt lt div gt lt zombie vfor elem bigarray key elemid text elemdata gt lt zombie gt lt div gt data return bigarray created let lt thisbigarraypush id elem data element vuecomponent ca smallcomponent vuecomponent cb bigcomponent const app new vue data currentcomp ca mount app", "d": "12/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow turns bug manage boil necessary open issue", "d": "12/2017"}, {"body": "component control slot explicit less flexible current solution explicit imo controlling position slot quite advanced usage doable render functions also able add prop reuse value", "d": "12/2017"}, {"body": "posva although may become less flexible quite difficult write custom components current solution need inserted different slots without slot attr define", "d": "12/2017"}, {"body": "difficult specify slot attribute", "d": "12/2017"}, {"body": "fact code example copy", "d": "12/2017"}, {"body": "posva specify slot attribute difficult sub component think slot attribute nothing redundancy case extreme example looks silly", "d": "12/2017"}, {"body": "imagine writing ending redundant use slots place order written user", "d": "12/2017"}, {"body": "imo better use explicit slots added core however possible implement render functions inspect resolve slot vnodes custom logic eg checking", "d": "12/2017"}, {"body": "thanks providing viable solution", "d": "12/2017"}, {"body": "first time troll around vue issues looks like projecting anger understood nt like vue template syntax really want feel better ask questions forums discord chat plenty people enjoying coding vue probably willing help people feel way well", "d": "12/2017"}, {"body": "yes ridiculous virtual dom slower viperhtml preventing direct dom manipulation helpful console errors nt take issue", "d": "12/2017"}, {"body": "please read docs computed properties code contain valid js syntax fixed example please next time ask questions discord chat many people stack overflow", "d": "12/2017"}, {"body": "sqal said", "d": "12/2017"}, {"body": "nt know coming may happen nature js pass nested object passing reference therefore modifying modify original object well actually clone deep cloner like lodash please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug also website repro need editable boiled reproduction", "d": "12/2017"}, {"body": "hi posva im sorry consider bug explain simple way maybe im missing something example store new variable props store props testes items call method expand store new value thisitemslist expanded true storage affects original props testes affect thisitems hope clarified issue", "d": "12/2017"}, {"body": "bug needs reproduction please read requirements", "d": "12/2017"}, {"body": "like posva wrote bug javascript works use case clone prop initializing note cloning large objects impact performance vue ca nt behalf", "d": "12/2017"}, {"body": "hello nt quite understand asking transforming first version second one know prefer add ways already doable things unless gain justifies", "d": "12/2017"}, {"body": "first version drawbacks creates wrapper function level first wrapper wrapper wrapper breaks fallback content default template feature transform first case compiles actual output pseudo show difference second compile", "d": "12/2017"}, {"body": "also note even works vue versions prior found today suggested workaround works accident guarantee wo nt broken future versions", "d": "12/2017"}, {"body": "shameleo hit problem think sort feature along lines suggested excellent idea aside valid drawbacks highlight basic problem repeated boilerplate case generations also current boilerplate might reducing composability several components injecting via common component ui used across projects even current two slots ugly", "d": "1/2018"}, {"body": "see", "d": "3/2018"}, {"body": "working expected clone self", "d": "12/2017"}, {"body": "javascript works clone object jounqin said", "d": "12/2017"}, {"body": "css event occur earlier js necessary js first fulfill logic", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "find solution modify babelrc", "d": "12/2017"}, {"body": "include regeneratorruntime rather use increase bundle size", "d": "12/2017"}, {"body": "sorry stackoverflow question valid bug reproduction", "d": "12/2017"}, {"body": "seem posted wrong fiddle doesnt contain xtemplate", "d": "12/2017"}, {"body": "oh sorry cant really put exact code pretty much like blade file put xtemplate landing page component chrome works perfectly ie doesnt show anything", "d": "12/2017"}, {"body": "thanks real link clears define templates outside element mount app also define root element inside template well mounting element replaced vue", "d": "12/2017"}, {"body": "thanks reply unfortunately nt seem fix issue tried installing npm various polyfill packages unlucky", "d": "12/2017"}, {"body": "oh well xtemplate component missed first look define template main instance course empty nt know want render inside either define content directly inside mount element define xtemplate main instance notice case ca nt use must use call way example nt even contain proper script tag vue could nt run still nt work please provide proper reproduction actually runnable", "d": "12/2017"}, {"body": "ok post bladephp file problem lines html irrelevant", "d": "12/2017"}, {"body": "remove irrelevant lines runnable example take look", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "first one blade file second register component third vue file", "d": "12/2017"}, {"body": "works chrome", "d": "12/2017"}, {"body": "would put template outside vue file whole point precompile requires template vue file honest may still work somehow never tried nt see would use vue file nt intend put template inside also use sepearate plugin nt maintain idea compatible external xtemplate main file still looks nested template inside part page controlled main instance ca nt tell nt show main instance set seems way template directly beneath custom element nt main instance use custom elements compiled javascript inserted end page anyway ca nt debug basic setup many moving parts guess would ca nt use xtemplate andor probably rather open thread forumvuejsorg details andor open issue vuecustomelement repo", "d": "12/2017"}, {"body": "afterthought since works chrome add polyfill custom elements ie nt support", "d": "12/2017"}, {"body": "hmm nt putting outside vue files need lot blade methods use inside template pass prop could get messy maybe suggest alternative better communication within blade files vue components", "d": "12/2017"}, {"body": "idea much appreciate help polyfill custom elements fixed issue thank much", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "12/2017"}, {"body": "currently vue support reactivity supported upcoming version targets modern browsers", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hey please stop spamming new issues nt help us everything explained", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "node npm \u90fd\u662f\u6700\u65b0\u7684", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "funny thing warning technically incorrect symbol primitive type allow symbols keys people would try use done inside computed property would change every time array changes symbol always returns new symbol think would worthy also add docs people correctly use symbols people still use plain string numbers id", "d": "11/2017"}, {"body": "use however considered private api use risk recommend using method purpose", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "razor syntax character meaning actually vue related bug guess may need use directly get option vue compiler configure character shortland uses", "d": "11/2017"}, {"body": "yes using von alternative hope plugin something supports vuejs razor page", "d": "11/2017"}, {"body": "razor cshtml files must escape another like plugin would done razor files get compiled long vue gets hold", "d": "11/2017"}, {"body": "closing nt solved vue side", "d": "11/2017"}, {"body": "sirlancelot thanks tip surely use alternative posva try drop feature enhancement aspnet core section", "d": "11/2017"}, {"body": "vueruntimejs", "d": "11/2017"}, {"body": "fnlctrl webpack vueloader \u4e0d\u5e26\u6a21\u677f\u7f16\u8bd1\u5668\u7684vue vueruntimejs \u9884\u7f16\u8bd1\u7684\u6a21\u677f", "d": "11/2017"}, {"body": "wed nov notifications githubcom wrote fnlctrl webpack vueloader \u4e0d\u5e26\u6a21\u677f\u7f16\u8bd1\u5668\u7684vue vueruntimejs \u9884\u7f16\u8bd1\u7684\u6a21\u677f import vue nodemodulesvuedistvueruntimejs receiving mentioned reply email directly view github mute thread", "d": "11/2017"}, {"body": "fnlctrl webpack vueloader \u5df2\u7ecf\u914d\u7f6e\u597d webpackconfigjs \u6709\u4e00\u4e2a\u5355\u72ec\u7684 componentvue \u6587\u4ef6 indexhtml \u91cc\u5f15\u5165\u7f16\u8bd1\u540e\u7684 appjs \u6587\u4ef6 html appjs \u7f16\u8bd1\u524d\u7684 js", "d": "11/2017"}, {"body": "fnlctrl appjs", "d": "11/2017"}, {"body": "wed nov notifications githubcom wrote fnlctrl appjs new vue el mainwrapper compolents comp receiving mentioned reply email directly view github mute thread", "d": "11/2017"}, {"body": "fnlctrl work", "d": "11/2017"}, {"body": "handler simply registered native dom event listener element create dispatch dom event using native apis", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "reproduction", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "duplicate", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "question need specific make qualify feature request also belongs vuex repo core", "d": "11/2017"}, {"body": "pass error done callback completely unrelated vue edit bad sorry tried run repro missing dependencies could nt actually see nt working", "d": "11/2017"}, {"body": "posva somewhat related deserves explanation returns promise callback passed promise comes scheduler queueing possible instead error captured vue sent set simply rethrows error correct way deal", "d": "11/2017"}, {"body": "sweet idea idea returns promise arguments tried argument gone end perhaps could use documentation maybe happy send pr edit clarify stuff said message documented api docs nt need improving nt know context testing feel could use improvement", "d": "11/2017"}, {"body": "yes please something states order return promise call without arguments could nice imo", "d": "11/2017"}, {"body": "actually already vue api docs feel could use improvement pretty easy miss get promise nt provide arguments unless looking send prs projects soonish", "d": "11/2017"}, {"body": "pr vuejsorg pr vuetestutils", "d": "11/2017"}, {"body": "fyi parameters", "d": "11/2017"}, {"body": "also need prefetch files related current user langage user langage stored serverside application also expose application currently serverside rendering least context", "d": "11/2017"}, {"body": "ping", "d": "10/2018"}, {"body": "unfortunately ie bug ie nt fire input event thought already closed issue could nt find must imagination", "d": "11/2017"}, {"body": "found old bug tracker last comment ms fix", "d": "11/2017"}, {"body": "note assume want preserve state determine whether input field dirty patch fixes initial rendering subsequent change dynamic binding used still trigger events ie happens tags well consider wontfix involves significantly complex workarounds marginal benefits", "d": "11/2017"}, {"body": "thanks", "d": "11/2017"}, {"body": "happens vue reuses element optimize rendering control behaviour keys docs demo", "d": "11/2017"}, {"body": "number becoming expected happens js numbers need zeros want string number happens user changes focus imo ux want localization handled browser vue scope browser makes syntaxes work differently different computers custom component behaves told behave modifies value adapt either number part may confusing change null valid backspace changes back valid number triggers render changes input well cc linusborg part thought might improve", "d": "11/2017"}, {"body": "thanks feedback included plain fiddle check behaviour cases see clear trailing zeroes actually also nt see problem stripping trailing zeroes blur think clear changing cases fiddle original post make cast values numbernull numberstring made proposal clear implement understood linus said may good vue provide feature please check original post hi found first comment info", "d": "11/2017"}, {"body": "nt see done without separate fields string keep fine numeric app possible somehow prevent rerender input event think could solve issues", "d": "11/2017"}, {"body": "think clear changing happens custom input explanation part may confusing change null valid backspace changes back valid number triggers render changes input well vmodelnumber cast values number empty string course free create custom component handles things differently using modifier", "d": "11/2017"}, {"body": "happens custom input see case fiddle fill input though malformed value course free create interesting vue team provide typestrict interface error prone errors easy leave exceptions misuse also check input empty enough also requires every place used", "d": "11/2017"}, {"body": "happen getting instructions typing backspace also requires val null amp amp val every place used either number null example null initial value giving vue job link value input state make number whenever possible modifier empty string actually useful allows know input contains valid number makes flexible use different scenarios", "d": "11/2017"}, {"body": "example checks repeated times empty string actually useful sure useful value empty string invalid value locales delimiter invalid returns valid returns empty string ambiguous different meanings", "d": "11/2017"}, {"body": "example completely different value initialized explicitly set undefined checking input dirty yet another different thing unrelated numbers sure useful value empty string invalid value locales delimiter invalid returns valid returns empty string ambiguous different meanings browser setting empty string number validation vue scope anyway waiting linusborg input could improved", "d": "11/2017"}, {"body": "checking input dirty providing solid typestrict interface returns numbers return empty string string returning empty string workaround think fixed please treat feature request ask maintainers look also wonder implement userspace took code internals still allow input input missing something upd checking chrome safari allows input clears trailing zeroes removing last digit ff respect os locale settings ignores formatted numbers still issue removing last digit", "d": "11/2017"}, {"body": "printercu try making numeric input component uses empty valid value issue typed invalid number ca nt clear setting value ca nt distinguish empty valid", "d": "12/2017"}, {"body": "lbogdan looks great thank slightly changed also works instead give try app soon please help previous comment also wonder implement vmodelnumber userspace took code internals still allow input input missing something", "d": "12/2017"}, {"body": "hi works perfectly fine need details like web browser", "d": "11/2017"}, {"body": "hi thanks reply however investigation company problem seemed related issue machine cpu apologies closing issue", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "11/2017"}, {"body": "one might also ask vue insists using kind obsolete tool phantomjs ca nt really keep webstandards chrome headless hand date much faster phantomjs even though filesize bigger mac linux win chrome mb phantomjs", "d": "11/2017"}, {"body": "madskonradsen nt think vue insists using nobody gotten around adding pr switches chrome headless willing make pr sure accept", "d": "11/2017"}, {"body": "eddyerburgh tried recently unrelated pr transitions tests must adapted nt work chrome headless", "d": "11/2017"}, {"body": "wanted submit pr ignore test failing", "d": "11/2017"}, {"body": "yes probably pass ci", "d": "11/2017"}, {"body": "transition test cases involves css transitions timeouts somewhat flaky depending machine run failing case fails passes time seen ci made stable increasing transition durations tests would make tests run slower kind tradeoff another option completely refactor way test transitions get rid flakiness backlog moment phantom usage intentionally staying phantom refactor transition tests work properly chrome headless", "d": "11/2017"}, {"body": "think would good idea make temporary note githubcontributingmd make less confusing", "d": "11/2017"}, {"body": "eventual markup compliant keep mind spa applications html template production pass validator test see info closing question", "d": "11/2017"}, {"body": "posva hi talking spa found vuejs best rapid clientside behavior programming classic roundtrip environment aspnet specific render partial view server side vue directives inside incredible fast easy way also afaik framework suites perfect really sad vueconfig removed happy dmitri provided solution really helped hovewer still issue consider vuefor iterating img tag cant provide correct src point real problem way using vuejs therefore doesnt suit great case assumed first place", "d": "5/2018"}, {"body": "vuejsorg also valid", "d": "7/2018"}, {"body": "valid properly parsed major browsers validation pretty much pointless honestly nt understand people obsess", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "missing reproduction", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "executed event emitted listening use preserve component use emit event please consider using forum vueland stackoverflow questions", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "try", "d": "11/2017"}, {"body": "thanks reply tried ot didnt work found reason thow binding slot component result gets copied", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "please create computed prop use vue issue web severs logic", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "11/2017"}, {"body": "circular import cycle try remove cycle use instead importing router instance", "d": "11/2017"}, {"body": "yes exactly problem thank", "d": "11/2017"}, {"body": "ca nt reproduce memory consumption fiddle tab constant around looking memory allocation chrome devtools time nt show anything significant either memory consumption windows task manager ican far many influencing factors reliable measurement memory leak anyway noticable devtools least share details", "d": "11/2017"}, {"body": "possible using instance data certain way eg sending electron main process makes unable garbage collected also make sure using devtools believe electron memory snapshots instead window manager", "d": "11/2017"}, {"body": "hi thanks quicky reply usually use devtools mentioned tasks manager faster possible see consumption real time know possible devtools without press collect whats happing switch routes project vuecomponent increase sorry cant share project cause private github file sorry size big project route component comment line line thatset line variable memory increase much catalogorderpagezip im sure im sendind variable main process", "d": "11/2017"}, {"body": "well using webworker eacht time send receive data gets copied essentially depending worker set might release memory previous copies data passed referenced somewhere else hundreds line code ca nt debug like way complicated setup reproduction sorry personal sidenote big project true keep logic one component file nt nightmare navigate", "d": "11/2017"}, {"body": "yes like said set variable problem occur think problem webworker logic one component thats file project distribute much could file controls shopping cart lot intelligence complications ok thanks trying see example declare data try update manually computed params way memory increase thats point think problem vue reactive data", "d": "11/2017"}, {"body": "big memory leak simply making data reactive would know already like basic functionality vue everyone uses would couple dozen issues simpler scenarios ca nt must least combination thing setup", "d": "11/2017"}, {"body": "yes mean problem vue surely something wrong wanted way find", "d": "11/2017"}, {"body": "hope find wo nt able help unless slim drastically sorry close issue good luck", "d": "11/2017"}, {"body": "thanks guys got resolved really webworker made compact page elements tested see memory trapped thank excellent work", "d": "11/2017"}, {"body": "mobile browsers allow programmatic audio play task tick user interaction change indeed causes behavior imo somewhat expected watchers asynchronous design instead using watcher react url changes call method sets url start playing function nt really see point using watcher especially need executed event handler tick", "d": "11/2017"}, {"body": "thanks response simple demo show reason play mobile browsers music app design using vuex set vuex getter calculate like component may play song clicking button outside component like component commit mutation set watch component call audio play changes may say use sync watcher tried cause another problem feature set loop mode changes sync random must change committing mutations use sync watcher handler called twice expected use async watcher default handler called next tick currently fixed problem setting global function function vuejs init macrotask use works hack way wish vuejs core may consider kind situation", "d": "11/2017"}, {"body": "", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "typo wathcer watcher thank fix", "d": "11/2017"}, {"body": "hi thanks lot taking time dive look understand came however would appreciate boiled repro without thirdparty libraries also make sure use last version vue repro reloads forever", "d": "11/2017"}, {"body": "problem sure exactly happening nt able create working mean failing minimal repro try though repro reloading forever codepen issue guess", "d": "11/2017"}, {"body": "please open issue vuetify repo first track bugs known caused vue core", "d": "11/2017"}, {"body": "took create repro without external libs expected visible text visible actually happening visible rendered info text visible returns iscontentactive true lines commented component functional vue used", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "please remove third library showcase leak bootstrap babel", "d": "11/2017"}, {"body": "opened issue bootstrapvue first seems like better place start investigation core team unlikely familiar component better chance coming isolated repro", "d": "11/2017"}, {"body": "sure thing open one side reference one", "d": "11/2017"}, {"body": "issue fixed bootstrapvue side thank guys", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "works op nov om heeft kelvin ferreira notifications githubcom het volgende geschreven version reproduction link steps reproduce open page expected see backers images actually happening possible see images happening repository github receiving subscribed thread reply email directly view github mute thread", "d": "11/2017"}, {"body": "showing way images loading opened chrome image dont show well dont crash prints taken firefox", "d": "11/2017"}, {"body": "think nt logo look would nice displayed default icon something fix end", "d": "11/2017"}, {"body": "oh get thanks taking time investigate", "d": "11/2017"}, {"body": "still get error", "d": "11/2017"}, {"body": "correct throws error works index parameter", "d": "11/2017"}, {"body": "sqal sometimes want add remove easily works fine", "d": "11/2017"}, {"body": "mirari fixed", "d": "11/2017"}, {"body": "still one case still work correctly array destructuring example using latest vue actually found reading first two examples works fine third one index argument gives error", "d": "11/2017"}, {"body": "change data nt update dom immediately need execute like javascript printnow value thisprint value nexttick gt windowprint", "d": "11/2017"}, {"body": "anhulife said", "d": "11/2017"}, {"body": "want computed recomputed variableproperty referencing must changed empty loop like touch change changing value objects watched deeply property recomputed every modification object computed depend directly certain property use method", "d": "11/2017"}, {"body": "pretty much dodas said use watch computed properties meant side effects meant return new values get recomputed dependencies change therefore need inside computed property vue nt recompute property", "d": "11/2017"}, {"body": "computed watcher option regarding question care whether computed gets evaluated unless performance reasons point computed property returns value gets recomputed value depends reactive state changed long returned value uptodate evaluate little possible wanting force recompute computed property sign using incorrectly", "d": "11/2017"}, {"body": "ended using deep watch started computed actual component logic jsfiddle supposed emit vmodel indicate component passes business validation yes implementable watchonly approach oh brilliant work framework btw", "d": "11/2017"}, {"body": "already case local components take precedence global ones please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "11/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "build specific scenario need template multiple root nodes using bootstrap tables vue since beginning never needed multiple root nodes", "d": "11/2017"}, {"body": "provide custom attribute indicate element attached fyi use easily pass things element want multiple root elements functional components personally actually like fact one root clears questions listed one possible answer", "d": "11/2017"}, {"body": "specific table use case component would like contain two root elements first show category information second list category items details main category body control visibility second one want look something like categoryvue know could move two separate components communicate really belong together computed properties methods share yes move mixin makes everything bit complex regarding bootstrap recently stumbled using needed something like html vifvelsevshow necessary course found way work around nt clean simpler approach wanted achieve frameworks truly love vue really neat picking would nice option nice thing feature nt want nt use even think keep wrapping everything div", "d": "11/2017"}, {"body": "fyi use listeners props easily pass things element want wondering remember reading long time ago could nt find thanks tip", "d": "11/2017"}, {"body": "new react version fragment using syntax vue", "d": "11/2017"}, {"body": "honest question even need wrap everything single root element technical limitation arbitrary decision", "d": "11/2017"}, {"body": "technical due diff algorithm written obviously possible update takes significant changes current algorithm react complete rewrite", "d": "11/2017"}, {"body": "got thank details", "d": "11/2017"}, {"body": "sirlancelot one case using nuxt everything vue sfc", "d": "12/2017"}, {"body": "honest question even need wrap everything single root element technical limitation arbitrary decision technical due diff algorithm written technical implement easily transpiled thus solving problem idk easy", "d": "1/2018"}, {"body": "proof works nt seem like requires update diff algo", "d": "1/2018"}, {"body": "trusktr technical challenge conversion template render function implementation virtualdom render function builds nodes child component represented parent virtual dom single current implementation diffing algorithm responsible comparing current old virtualdom patching differences real dom rely fact every vnode child component single matching html element real dom next vnode virutaldom child component vnode guaranteed match next html element real dom sidenote fiddle functional components nt restriction represented vnode parent since nt instance nt manage virtualdom allowing fragments requires significant changes algorithm since would somehow keep parent informed times many root nodes child currently managing real dom parent rerenders knows many htmlelements skip reach next html element nt belong child component intricatecomplicated piece code heart vue critical render performance important make work correctly also make highly performant pretty hefty task evan mentioned react waited complete rewrite rendering layer remove restriction", "d": "1/2018"}, {"body": "implying opting convert multiple roots template multiple roots render function works performance nonetheless would work make fiddle shows nt work", "d": "1/2018"}, {"body": "implying opting convert multiple roots template multiple roots render function works performance nonetheless would work saying current virtualdom diff amp patch algorithm heavily relies fact child component always exactly one root element would break completely one root node child component saying making work one root component complicated adds additional logic challenge make change without negatively impacting render performance current implementation", "d": "1/2018"}, {"body": "still convinced multiple roots even needed core team currently working supporting great nt feel like roadmap already every time thought hey might need multiple root nodes puts dangerous path adding much complexity single component always end better simpler solution lives well within single root node paradigm solutions usually rely scoped slots highly recommend learning use well never need think multiple root nodes", "d": "1/2018"}, {"body": "core team currently working supporting great nt feel like roadmap already nice roadmap wo nt happen anytime soon would also breaking change component written multiple root nodes would nt work otherwise solid advice complexity scoped slots", "d": "1/2018"}, {"body": "one show rewrite fiddle scoped slots show possible output two elements time component outer component like example using template instead render function tried using slots wouldnt let put slot element root component linusborg ability return array function removed", "d": "1/2018"}, {"body": "linusborg ability return array render function removed would think would remove anything returning array render function nt work never worked continue work vue notable exception functional components reasons l laid need help specific challenge implementing feature forumvuejsorg chatvuejsorg approriate place issue", "d": "1/2018"}, {"body": "functional components nt restriction represented vnode parent since nt instance nt manage virtualdom last checked though possibly changed since vue sfc support multiple root elements within given comment would fairly straightforward allow within functional template sfcs think might go long way addressing many desired usecases without requiring rewrite fundamental architecture", "d": "1/2018"}, {"body": "oh see works well nt need help writing singleroot components converting singleroot components multiple roots allows useful patterns otherwise certain patterns doable without multiroot components react added community needed trying understand removed useful issue hoping feature added seems valid let people compose freely fwiw sort composing nt currently doable custom elements virtual component systems allow moment component instances nt actually get placed dom css style coming soon currently behind flags allow web components achieve thing ie achieve multiroot rendering would vue among things example chatter problems stackoverflow", "d": "1/2018"}, {"body": "trying understand removed useful refers removal vue vue design decision mainly much easier performant virtualdoms generally worked vue nt use virtualdom react rewrite whole rendering engine get setup performant way understand useful scenarios tradeoff usefulness amount work required make happen", "d": "1/2018"}, {"body": "understand useful scenarios tradeoff usefulness amount work required make happen linusborg thoughts earlier question allowing functional template sfcs would sufficiently low work", "d": "1/2018"}, {"body": "tbh nt aware nt work still test yeah rust fixable problem template compilation", "d": "1/2018"}, {"body": "would nice allowed multiple root elements", "d": "1/2018"}, {"body": "could someone open issue vueloader", "d": "1/2018"}, {"body": "multiple root elements template would nice js libraries ui frameworks seems necessary far reached workaround like defining dummy component export default data function return parent null children null beforemount function thisparent elparentelement thischildren elchildnodes thisparentremovechild el jquery thisparent append jquery thischildren mounted function consolelog dummy thischildren test import header componentsheader import nav componentsnav import dummy componentsdummy export default components dummy header nav mounted function consolelog index mounted way could nt manage fix without using jquery", "d": "2/2018"}, {"body": "another use case struggling parent component defines grid multiple named templateareas ideally child component would since child component single wrapping element nt work work around causes problems", "d": "2/2018"}, {"body": "could someone open issue vueloader", "d": "2/2018"}, {"body": "also struggling lack support multiple root elements components reviewed comments issue written problem layout uses css grid css grid grid areas apply direct child element since vue component must single root element possible component represent multiple grid areas eg multiple rows columns essentially problem tochoromero raised single component represent multiple elements use case best workaround found forgo component use instead second example trusktr mentioned coming soon used imperfect workaround problem css grids say imperfect semantically equivalent replacing parent div children dom seen first example selector applies div children response sirlancelot created fiddles show issue keen see sirlancelot would work around issue problem since useful range options available example using single root div component example workaround tables want component represent multiple possible using root element discussed possible component represent multiple nt think help us linusborg permit meta question best place continue discussion implementation feature", "d": "2/2018"}, {"body": "euoia real place yet middle setting seperate repository rfcs suggested discussed community would probably best place available soon properly announced time come", "d": "2/2018"}, {"body": "pretty compelling realworld case sure proceed without access multiple root nodes developing essentially tableaccordion table adds rows click show details entry table located researcher groups component subcomponent appresearchergroupentry researchergroupentry using vuematerial problem would using plain anyway structure kind like researchergroupentryvue keyboardarrowdown keyboardarrowright indexvalue groupdatalabel group addbox add client client type settings settings problem comes want able expand clients like mockup would trivially easy could add another researchergroupentry component unfortunately wrapping div span tag wo nt work messes table wasnt using vue material might considered using jsx component could simply use map parent create array components based two variables might still able vfor directives sure may create props crazy pseudo array merging parents children uuuuugly code", "d": "2/2018"}, {"body": "feel like compelling reason simply nt forced using arbitrary sfc especially many use cases cause problems component page root element want overlay list loads wrap need whether solution passing adding nt think matters needs solution real problem people using hacks solve like frightening clever piece", "d": "5/2018"}, {"body": "think agree say missing feature vue developpers say currently difficult implement diff algorithm one solution create child component use case split parent component multiple render functions compose parent easier jsx javascript const genchildren h gt return h div somestuff h div stuff parent component render h return h mygridwrapper genchildren h", "d": "5/2018"}, {"body": "titouancreach would work getting multiple root elements error assume would renderless component rendering slot render function whatever throw going get error tried pretty much everything noavail", "d": "5/2018"}, {"body": "workaround adding wrapping basically around multiple nodes workaround use functional component nt single root limit lose datamethods normal components", "d": "5/2018"}, {"body": "saying current virtualdom diff amp patch algorithm heavily relies fact child component always exactly one root element would break completely one root node child component saying making work one root component complicated adds additional logic challenge make change without negatively impacting render performance current implementation fyi preact currently trying figure well issue asking current pull request linking case gives vue rendering engine developersmaintainers inspiration useful ideas obviously different engines apologies nothing helpful", "d": "5/2018"}, {"body": "another use case know could without multiple root nodes please tell kindof stumped details need two elements component reference could abstract data seems messy scoping weird wrap two elements div anything elements dynamically positioned page elements ca nt elements covering stuff block mouseover events could disable mouse events parent wrapper invisible box seems pointless dataset stuff set script another component listed take granted tname func export default name popups data return tshow false tname tfunctions tcorner methods goto let target documentgetelementbyid targetbox datasetdest target routename return routerpush name target thistshow false hover let target documentgetelementbyid targetbox let popup documentgetelementbyid contextpopup update context popup info thistname targetdatasetname thistfunctions targetdatasetfunctionssplit figure corner render contextpopup let l targetdatasetl true l r let targetdatasett true b thistcorner l position corner popupstyleleft targetdatasetpopleft px popupstyletop targetdatasetpoptop px render popup thistshow true unhover thistshow false", "d": "5/2018"}, {"body": "titouancreach work functional component way aside jquery hacks", "d": "5/2018"}, {"body": "work anything nt create children splitting compose render function pure javascript", "d": "5/2018"}, {"body": "tochoromero solve issue bootstrap came via problem bootstrap really specific ordering addons extra wrapping div breaks update big discussion issue bootstrap including mentions vue anyone else runs many workarounds", "d": "5/2018"}, {"body": "bbugh really nt solve tried make component generic possible still wrapping class", "d": "5/2018"}, {"body": "another possible workaround besides using using grid could set something like html child content child content child content render following html child content child content child content", "d": "6/2018"}, {"body": "yes solution still ends parent element whole point able render without parent aka fragment", "d": "6/2018"}, {"body": "parent element virtual one confused mean render element shouldnt could like fragment absolutely whole issue rendering extra element necessarily using another component wrapper", "d": "6/2018"}, {"body": "elements example render parent element sure mean top hit google posting example nt mentioned work around actual fragments example posted works use case", "d": "6/2018"}, {"body": "wo nt work sense portal component adds wrapper element stateful component still constrained solution good case used definitely really need parent elements stuck vue actually adds functionality checking hack maybe suffice time", "d": "6/2018"}, {"body": "sorry posting stupid answer still rookie vuejs think kinda found suitable solution supports requirements fragment root functional guys check experimental jsfiddle", "d": "6/2018"}, {"body": "understanding vdom nt allow ssr main problem finding parent fragment enabled node seems impossible find exact place inserted nt know mystery mesmerizing anybody help would welcome", "d": "6/2018"}, {"body": "ynk done adjustments solution allowed fix breakpoint component nothing rendered elements add ssr known issues unless fix one well", "d": "6/2018"}, {"body": "thanks lot feedbackscorrections trying hard work ssr case really crack yet", "d": "6/2018"}, {"body": "added totally transparent within tree parent children linked correctly without vfragment node anyone reviewcorrectcontributetossr", "d": "6/2018"}, {"body": "additional note solves issues cases generates two need bit hack simplified case currently impossible without kind wrapper hack anything inside ignored browser change behavior could applied example someone clue could try improve current code support least start point devs could try help vue team", "d": "7/2018"}, {"body": "rentalhost vue dev thank usecase curious elaborate bit usecase wanting elements output different template one outputs", "d": "7/2018"}, {"body": "effulgentsia basically api returns file tree like pastebin user select file folder final structure like jsfiddle note innerfolder indent inside outerfolder problem due original api structure best way like vue approach impossible collapse api json single level got something like pastebin could build yet compatible way like vue seems simple collapse method considered part new complexity", "d": "7/2018"}, {"body": "two solutions existed quite time use vue functional component see second comment issue use vuefragments thirdparty extension posva get thread locked future readers see solutions", "d": "9/2018"}, {"body": "even though generated swagger declared instance properties really want use constructor otherwise vue wo nt pick still nt look right pick investigate bit side note criticising swaggerio practice declaring instance properties prototype super weird usually put data want share across instances like functions soon change value local instance becomes new property instance", "d": "11/2017"}, {"body": "fyi fix could check make work perf comparison obviously slower extra check support consistency think much", "d": "11/2017"}, {"body": "agree mis using prototype rather weird main reason redeclare props first place getting potentially incomplete even empty instance prop immediately expanding missing properties via set delete proto set restore proto hm combo would actually work unless something happens async another model instance gets initialized proto temporarily incomplete otherwise could live low perf also hasownproperty mind though definitely considering rare constellation seems", "d": "11/2017"}, {"body": "intended behavior order make another use case possible classbased model objects gettersetters defined prototype note explicitly recommend using classprototype based objects data general rule thumb vue reactivity system leaves everything prototype chain alone assume user wants original behavior prototype chain suggestion instead trying expand missing properties postobserve inside watcher preobserve feed object vue instances ie setting properties onto object properties letting vue making reactive", "d": "11/2017"}, {"body": "thanks explanation makes sense preobserve would perfect reactivity work fine properties set e g default prop constructor instance init seems different set aspect bad suitable location prop expansion chain models nested property model instance another model therefore ideal solution would pass modelbased property appropriate subcomponent would autoexpand corresponding model would allow transparent hierarchical binding via vmodel contrary evaluatingexpanding child model parent would completely defeat purpose splitting models separate components anyway implementing codegen would provide readytouse instances weird prototyping likely cause problems future", "d": "11/2017"}, {"body": "provided editable repro moment get rids event listeners setup component looks like still references events element removed event listeners freed agree event listeners native elements removed instance destroyed", "d": "11/2017"}, {"body": "intended behavior vm destroyed associated piece dom considered discarded managed vue dom detached garbage collected modern browsers correctly discards event listeners process well usually recommended call imperatively call dom left behind reused calling removes dom time", "d": "11/2017"}, {"body": "tried dom stays", "d": "3/2018"}, {"body": "", "d": "11/2017"}, {"body": "error version", "d": "11/2017"}, {"body": "alexmalyita note warning appear use element fix removed warning custom components", "d": "11/2017"}, {"body": "error following snippet create group radio boxes", "d": "11/2017"}, {"body": "chagamkamalakar make sure update latest version", "d": "11/2017"}, {"body": "error still current version vue", "d": "11/2017"}, {"body": "chagamkamalakar please open separate issue proper reproduction", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "error coming new setup coming existing project please help", "d": "11/2017"}, {"body": "error gone deleted nodemoduels folder run npm install gone", "d": "11/2017"}, {"body": "could see one problem custom components watcher value props getting called initially gets called emitted custom component", "d": "11/2017"}, {"body": "warnings ignored every warning fixed", "d": "11/2017"}, {"body": "investigation wonder usage worth major redesign reactive system vue two reactive components hood quite like execute callback changes problem component acting like executes callback notifies watchers observables computed values subscribers mock watcher dep optimize memory usage probably need new reactive component like however new class might optimize limited usage op already stated quite hard write code would really affect users bug", "d": "12/2017"}, {"body": "rely cross component styles unless know going rendered together", "d": "11/2017"}, {"body": "problem solved bootstringtable still wants provide jquery refreshing dom", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "11/2017"}, {"body": "requirement problem vue nt way refresh dom jquery posva", "d": "11/2017"}, {"body": "problem related directly vue rather integrate third party libraries vue lot resources integrate jquery vue case usage question please use proper channels forum chat", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "11/2017"}, {"body": "ok prepare one provide later", "d": "11/2017"}, {"body": "js", "d": "11/2017"}, {"body": "vue vue \u4ec5\u7528\u4e8e\u5bf9\u5355\u4e2a\u5143\u7d20\u7684\u76f4\u63a5 dom", "d": "11/2017"}, {"body": "also memoize calls check nt know memoize values people seem enjoy using", "d": "11/2017"}, {"body": "good idea posva thank code suffers thing could use approach cons executed everytime rerender occures translation costs", "d": "11/2017"}, {"body": "keep mind example simple need invalidate cache somehow load new translations probably handle edge cases", "d": "11/2017"}, {"body": "technically invalid though listen javascript suppose add note docs", "d": "11/2017"}, {"body": "case information stated open prs warnings similar commit implemented warning conflicting methods started related", "d": "11/2017"}, {"body": "posva new title correct want warn computed properties would thought warning would data computed methods data happy help need sure needs", "d": "11/2017"}, {"body": "second thought sure introduce warning would show warnings many plugins devusers purposely use mark internals like vuelidate could however something similar commit referenced computed properties chrisvfritz already proposed add warning functionality another config flag flood existing plugins using maybe could go way around adding error conflicting data properties proxying well", "d": "11/2017"}, {"body": "think main issue example data property begins warning says data property defined could confusing data property begins console warning shown along lines docs say properties start proxied vue instance may conflict vue internal properties api methods access vm dataproperty", "d": "11/2017"}, {"body": "rpemberton perfectly fine breaking anything feel free pr thank", "d": "11/2017"}, {"body": "posva little bit confused private property names rule vue style guide prefixed property data makes sense rework rule provide better way define private properties", "d": "11/2017"}, {"body": "reading issue order understand could help nobody working already seems invalided feature implemented without breaking things right guys update issue remove contribution tag", "d": "11/2017"}, {"body": "let close moment thanks reminder", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "designed scoped css means css scoped current component parent children", "d": "11/2017"}, {"body": "regarding bug scoped introduce js outside manipulate elements add corresponding subelements elements time newly added subelements design style scoped removed used normally", "d": "5/2018"}, {"body": "manipulate elements manually case encapsulate really lowlevel dom operations like directives", "d": "5/2018"}, {"body": "current declaration designed scenario still need use class component want restrict implementation interface", "d": "11/2017"}, {"body": "assume wontfix", "d": "11/2017"}, {"body": "far aware vue allows element essentially wrapper within template error bug works", "d": "11/2017"}, {"body": "could find feature documentation thanks feedback greetings italy fabio receiving authored threadreply email directly view github mute thread", "d": "11/2017"}, {"body": "open console warning telling problem make sure check warnings opening issues", "d": "11/2017"}, {"body": "imo behaving incorrectly fixes behavior design fallback content appears slot receives nothing whitespace clearing slot fallback content empty slot sounds like hack however still want use zerowidth space slot content", "d": "11/2017"}, {"body": "using zerowidth space express clearing fallback content slot sounds like hack either better way us solve explicit semantics", "d": "11/2017"}, {"body": "always add prop usedefaultslot defaults true use like default content thu nov gu yiling notifications githubcom wrote using zerowidth space express clearing fallback content slot sounds like hack either better way us solve explicit semantics receiving subscribed thread reply email directly view github mute thread", "d": "11/2017"}, {"body": "fnlctrl consider complex component multiple slots would nt want expose kind prop using slots means prefer declarative way define content otherwise ignore slot syntax pass render functions", "d": "11/2017"}, {"body": "fnlctrl maybe add attribute provide global config indicate default override behavior", "d": "11/2017"}, {"body": "justineo complex component multiple slots even provided official api suppress default content users would still declare slots suppressed eg nt think better declaring props userland best way think simply use empty whatever tag like simple declarative", "d": "11/2017"}, {"body": "actually seeing behavior back undesired declaring users already explicitly overriding fallback content otherwise would nt declare want conditionally override fallback content apply like nt think better declaring props userland overriding slot fallback content common scenario builtin syntax definitely help users build apps lower overhead designing kind api helps vue users understand underlying logic template across different vue projects", "d": "11/2017"}, {"body": "think fallback content different default content defined fallback content behavior make content empty considered hack first point agree hack zerowidth space good define conditional fallback content fnlctrl provided set content empty never define fallback content default content thanks", "d": "11/2017"}, {"body": "consistent solution create empty functional stateless better performance component element completely layoutless element using tag introduce useragent margin html export default name vempty usage seem natural recently upgraded ended", "d": "4/2018"}, {"body": "completely layoutless even empty dom elements match css selectors like etc bare element performant functional component imo element always valid child given parent element eg etc", "d": "4/2018"}, {"body": "bare element consistent encapsulated solution better imo creates problem use valid pretty much everywhere componentbased development suggest refraining pseudo selectorselements implicitness con older days used save markup longer issue since components reduce average amount code write anyway instead pseudo selectors use classes explicit give better control", "d": "4/2018"}, {"body": "basically special semantics shares categories neither used inside lot elements instead pseudo selectors use classes explicit give better control yes remind old days support want clean solution prevent developers leveraging modern technologies pseudo classes", "d": "4/2018"}, {"body": "well opinionated year developing library nt find much use sense absence using tags nt sound probable see", "d": "4/2018"}, {"body": "sad closed also would like able clear default slot content empty slot eg default separator slot sometimes iterated components may htmltags break float css styles also clean use empty tags would logical use empty template using vif quite verbose exists override default value behaviour logical else one define template default content want default content shown simply remove empty template", "d": "5/2018"}, {"body": "justineo would nice posted fix", "d": "7/2018"}, {"body": "nt seem fixed classes ref ref open new issue expected behaviour", "d": "3/2018"}, {"body": "", "d": "11/2017"}, {"body": "upon investigation actually nothing vue called every svg node cases even browsers virtual dom patch cheap fast look profile closely see expensive calls actually called patching toggled class root cause seems simply extremely inefficient toggle class element contains large amount svg elements performance issue reproduced without vue involved", "d": "11/2017"}, {"body": "bug sure even possible within typescript close wontfix cc ktsn herringtondarkholme feel free provide info", "d": "11/2017"}, {"body": "typescript compiler infer assignment statement impossible thought supporting use case manually providing nonreactive properties type type parameter current ts compiler allow providing part type parameters infer remaining type parameters arguments", "d": "11/2017"}, {"body": "thanks ktsn clarification let first explain technically js side coding merely using vscodetsforjs languageovervue service look back marvelous word plugged together chain technologies certain flux point view open end user read open means certain feedback lacking read loggingtraceabledocumented without experience reading github issues keep reasoning certain things softwareland might happened hard vscode ts config ts language service ts version code using instance variables vue created method bugorfeature please say prominently nowissue part issue would appreciate hearhave kind feedback points additionally certain best practiceworkflow learningdebugging testing kind issue preferred way reaching kind issue triage upon multiple productprojects involved bugorfeature plan give consideration jsfirsttstypings usageexperiencedocumentation based understanding typings js necessary point help learning microcoding usagescompletions meant done prevent certain bugs upfront ide red squiggle lines really get alerted even bugged falsepositives related op question open using packaged much possible nt get wrong jsfirstts seems promising may eventually result fun confidence js coding subpoint browsers nowadays get compatible natively happy throw away babel workflow somewhat reluctant work annotations ts language anything involves additional layer future magic failure last least current pain points related around op question created vue mixin separate js file tsjsdoctyped per herringtondarkholme suggestion typing certainly got squiggle lines away using vue component side mixin side get tstyping love learn include ts magic workaround changed mixin code begin vueextend get coding completionfeedback eventually argumented sign codesmell neither documented per valid option valid option per vue dts error squiggle lines understand ramifications may seems work hmm situation end using vue component side mixin give tstyping love either mixin neither data methods anything included mixin please document bugorfeature lacking something elsewhere mixin side computed prop ts type interference certainly breaks see issued triage ps ever reach line personally thank taking time star", "d": "11/2017"}, {"body": "managed initialize nonreactive variables typescript need use vueclasscomponent import vue vue import component vueclasscomponent interface mycomponent myvar number component class mycomponent extends vue created thismyvar export default mycomponent note interface", "d": "8/2018"}, {"body": "currently workaround", "d": "11/2017"}, {"body": "works fine android test ios known issue ios safari emitting events autocompleting unfortunately sure something vinceg must event listen instead checking value every maybe listening event work", "d": "11/2017"}, {"body": "nt think something fix framework level buggy behavior one specific browser firing events autocomplete userland workaround seems way suggest adding know specific browser alternatively perform manual sync submitting", "d": "11/2017"}, {"body": "wrap elements trigger onchange event", "d": "10/2018"}, {"body": "expected behavior pushes callback deferred queue callbacks pushed event loop fired tick triggering another watcher queue already flushing pushes callback end current queue instead firing immediately", "d": "11/2017"}, {"body": "get expected results", "d": "11/2017"}, {"body": "hi thanks filling issue difference empty object undefined reason added practice could often making verbose access eg use shorthand simplify", "d": "11/2017"}, {"body": "interesting use word alias means exactly said pointed doc people use found supported going make compatible get confuse errors doc yes", "d": "11/2017"}, {"body": "explicitly stated issue requirements please provide runnable repro", "d": "11/2017"}, {"body": "appear issue example working expected", "d": "11/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "11/2017"}, {"body": "listeners attached via added child instance parent propagation event emitted child captured child child instead parent child parent communicate purely javascript need explicit event bus imported", "d": "11/2017"}, {"body": "thanks explanation however statement listeners attached via von added child instance parent clearly missing piece statement documentation addition parent component listen events emitted child component using von directly template child component used see warning note explaining fact ca nt used think documentation improved listeners added child propagation self explaining parent listen child nt exclude propagation ca nt used", "d": "11/2017"}, {"body": "feel free propose pr docs repo", "d": "11/2017"}, {"body": "crap think would better trying use css transforms want dynamic animations", "d": "11/2017"}, {"body": "nt think repro clearly demonstrates problem related vue involves potential problems way use svg please provide repro intended animation working plain svg know actually vue issue cc sdras", "d": "11/2017"}, {"body": "hey welcome problem nt vue svg rather logic asking fire condition isopen returns true initial page visit sorry say side note nt suggest continue using smil chrome pausing deprecation moment chopping block microsoft says never ever support ieedge browsers better support highly recommend using greensock tweenmax eventually run cross browser inconsistencies transform origins otherwise check demo fork example threw together pretty quickly probably need tweaks let know questions", "d": "11/2017"}, {"body": "thanks explanation sarah", "d": "11/2017"}, {"body": "hit trying use spinner component look greensock", "d": "6/2018"}, {"body": "\u7236\u5b50 \u7ec4\u4ef6\u4f20\u9012\u6570\u636e \u6587\u6863\u91cc\u4e0d\u662f\u5f88\u8be6\u7ec6\u5417", "d": "11/2017"}, {"body": "\u4f60\u9700\u8981\u7684\u5e94\u8be5\u662f props \u8fd8\u6709\u81ea\u5b9a\u4e49\u7ec4\u4ef6\u7684 \u662f\u652f\u6301 object", "d": "11/2017"}, {"body": "\u6211\u4ee3\u7801\u4e2d\u628a value\u5bf9\u8c61\u5b9a\u4e49\u5230\u4e86 export default \u7684 data \u5c06value \u5bf9\u8c61\u653e\u5230 export default \u7684 props \u7236\u5bf9\u8c61\u901a\u8fc7 vmodel \u5982\u679c\u5b50\u5bf9\u8c61\u6ca1\u6709\u5b9a\u4e49 props value \u4f46\u662f\u5982\u679c\u5b50\u7ec4\u4ef6\u7684value\u5bf9\u8c61\u5b9a\u4e49\u5230\u4e86 data", "d": "11/2017"}, {"body": "think dealt compiletime warning parsing phase detected element", "d": "11/2017"}, {"body": "getting compiling errors warnings npm run dev code base rpemberton linusborg update running vue vuetemplatecompiler", "d": "11/2017"}, {"body": "fix supposed work first place", "d": "11/2017"}, {"body": "thanks reply removed value thanks", "d": "11/2017"}, {"body": "options intentionally omitted part public api", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "got request short answer shipping pure esm directly production still nogo foreseeable future also lack support recommended toolchains eg singlefile components hotreload preprocessors etc means build would useful prototyping however prototyping include vue via nt make much difference worth complexity adding yet another dist format", "d": "11/2017"}, {"body": "dunno know necessary check params defined", "d": "11/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "11/2017"}, {"body": "sorry link source code valid repro", "d": "11/2017"}, {"body": "replacing behavior would also breaking change though think preserving semantically correct among two current behavior reasonable disregarding combined usage think goal really make work together retaining semantically correct behavior currently workaround mentioned although straightforward requires understanding internals", "d": "11/2017"}, {"body": "yeah fan workaround feels bit hacky would think suggesting following pattern instead", "d": "11/2017"}, {"body": "chrisvfritz actually reasonable explicitly overwriting parent input listener", "d": "11/2017"}, {"body": "excellent updated docs issue probably closed agree longterm really would nice listeners automatically work ideally listeners components could check emitted payload yes check choose appropriate element listener use normal behavior components payload assumed new value", "d": "11/2017"}, {"body": "sorry ca nt help error happens machine please try provide production actually look", "d": "11/2017"}, {"body": "hi evan thank quick answer try another service nt encapsulate console output codepen seems copy paste code run locally stills happens", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "please use forum open ended discussions short answer investigated ric raf want nexttick exists primarily scheduling rather deferring work want microtasks much possible", "d": "11/2017"}, {"body": "thanks answer", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow inside directive function get access element first argument", "d": "11/2017"}, {"body": "please use forums chat ask questions usage open issues sure found bug", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow using computed setter allows emit event anything want", "d": "11/2017"}, {"body": "vshow current implementation simply need toggle style property single element making recursively invoke hooks components contained inside element makes exponentially complex marginal benefits use computed property vshow condition instead", "d": "11/2017"}, {"body": "unlike hooks methods merged return values", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "\u5bf9\u4e8e", "d": "11/2017"}, {"body": "hi klehelley thanks detailed reproduction going chrome opens file picker event programmatic invocation happened userinteraction ie user clicking button surface happens right user clicks add file file input added clicked programmatically issue vue update mechanism data changes runs asynchronously call stack original add file click event already finished new component created therefore call new component hook triggered userevent chrome perspective consequently ignored see chrome behaviour without vue simplified solve suggestion would change component would add hidden file input component use every new file file selected read input add file list reset file input way component would never contain actual file input nt work actually need input per file ca nt think reason might well one come another way input already dom button clicked maybe always new file list hide last entry user selected something whatever closure amp support think something solve vue internals asynchronous update queue stay rather find ways work around described need help please join us forumvuejsorg chatvuejsorg work", "d": "11/2017"}, {"body": "thanks detailed answer nt aware mechanism chrome makes sense working changing internals component single element", "d": "11/2017"}, {"body": "bug guarantee event valid asynchronous callback used basically save whatever need case use instead event variable directly", "d": "11/2017"}, {"body": "posva documentation statement nt think wrong never seen heard", "d": "11/2017"}, {"body": "could nt find see vue", "d": "11/2017"}, {"body": "searching somewhere kind documentation dom events lifespan found nothing jsbin crown example thousands link seriously last time issue hybrid vm called titanium elements mapped java objectc counter parts would disappear vm deemed unused never thought would see browser today day tada", "d": "11/2017"}, {"body": "javascript need quote keys", "d": "11/2017"}, {"body": "works using plain js object instead class", "d": "11/2017"}, {"body": "took quick look renderslot function found extend function best guess instance class merged object literal prototype methods discarded iterating enumerable properties object constructor amp defined methods nonenumerable properties class prototype object using object literal instead class instance would best workaround possible nt chance check actually happening try come back done", "d": "11/2017"}, {"body": "expected behavior scoped slot props bound via passed directly object always copied plain object imagine another alongside needs merged keys found behavior needs consistent cases", "d": "11/2017"}, {"body": "wrapping class instance object bypasses problem", "d": "3/2018"}, {"body": "mean give example", "d": "3/2018"}, {"body": "instead something like let mywrappedclassobject object myclassobject mywrappedclassobjectobjectvalue", "d": "3/2018"}, {"body": "works thanks also utilise shorthand properties object destructuring make cleaner component parent", "d": "3/2018"}, {"body": "according use contextmenu instead docs probably updated see", "d": "11/2017"}, {"body": "modifiers work click event actually fire right clicks middle clicks instead fired respectively confusing implemented normalization compiler transforms respective equivalents unfortunately supported universally use instead perfect since would fire even click start element close enough draggedmiddleclick seems extremely rare operation", "d": "11/2017"}, {"body": "attribute casesensitive see", "d": "11/2017"}, {"body": "javoski said", "d": "11/2017"}, {"body": "undocumentedinternal api wo nt declare dts use", "d": "11/2017"}, {"body": "ktsn vue util contains useful outside internal api maybe move somewhere else", "d": "2/2018"}, {"body": "", "d": "9/2018"}, {"body": "guys extend types projects risk", "d": "9/2018"}, {"body": "unfortunately design hack around using object referring children recommended could break future versions vue", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow already check examples", "d": "11/2017"}, {"body": "want hire programmer", "d": "11/2017"}, {"body": "read docs", "d": "11/2017"}, {"body": "reproduction mean isolated boiled example reproducing problem check use fiddle provide simple html file create reproduction", "d": "11/2017"}, {"body": "vue", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "\u4e0d\u8fc7\u73b0\u5728\u662f\u5185\u7f51\u5730\u5740", "d": "11/2017"}, {"body": "\u4ee3\u7801\u7cbe\u7b80\u5230 \u53ea\u6709\u4e00\u4e2a iframe", "d": "1/2018"}, {"body": "zjxpcyc \u6211\u6700\u540e\u5728\u81ea\u5df1\u5de5\u7a0b\u5185\u5bb9\u91cd\u65b0copy\u4e86\u4e00\u904d\u4ee3\u7801", "d": "1/2018"}, {"body": "expected behaviour since passing functional component slot functional component rendered main instance scope main instance render function result passed slot content execution happens actually instantiated rendered nt think easy solution particular situation used insice slots functional components eagerly rendered parent scope nt instance could evaluated slot later child would render template instead error would captured expected", "d": "11/2017"}, {"body": "explained linusborg functional components eagerrendered render functions invoked directly render function component uses error captured another component template scope nt think way fix unless change way functional components rendered making longer eagerrendered might benefits making functional components behavior consistent stateful ones close issue since different topic", "d": "11/2017"}, {"body": "thanks linusborg detailed information one last remark need answer strange behavior may expected vue core developer normal vue user behavior stays strange normaly errorboundary compent container either shows children case errors thrown children error details really feature work nonfunctional child components would great vue team would reconsider eagerrendering thing near future major versions thanks lot great job guys vue library ps look things work opinion", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "keep mind windows os x case insensitive default however related vue rather one loaders used webpack template nt handle uppercased extensions default add want adding case insensitive regex used urlloader line", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "something mind definitely something valuable thanks suggested api design", "d": "11/2017"}, {"body": "seems pretty important future vue chance added somewhere official roadmap even backlog consider also react angular already example take look list react custom renderers", "d": "4/2018"}, {"body": "updates nearly six months since gotten love vue contributor", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "bug first refresh page", "d": "11/2017"}, {"body": "\u662f\u5426\u5728", "d": "11/2017"}, {"body": "\u53ea\u662f\u5728vfor\u4e2d\u8fd4\u56de\u6570\u7ec4 \u5982\u679c\u4e00\u4e2a\u9875\u9762\u4e0a\u6709\u4e24\u4e2a\u76f8\u540c\u7684ref\u8fd4\u56de\u6570\u7ec4\u8fd8\u662f\u5bf9\u8c61 \u6211\u89c9\u5f97\u8fd9\u91cc\u5f88\u6a21\u7cca api\u4e5f\u6ca1\u6709\u8bb2", "d": "11/2017"}, {"body": "\u8bf7\u770b\u8fd9\u91cc\u7684\u4f8b\u5b50 \u5982\u679cref\u540c\u540dchild\u65e0\u6cd5\u83b7\u53d6\u7b2c\u4e8c\u4e2a \u56e0\u4e3a\u8fd4\u56de\u7684\u662f\u5bf9\u8c61 \u800cvfor\u4e2d\u7684\u53ef\u4ee5 \u56e0\u4e3a\u8fd4\u56de\u7684\u662f\u6570\u7ec4 \u8fd9\u4f1a\u5bfc\u81f4\u5c06vfor\u4fee\u6539\u4e3a\u6b63\u5e38\u7684\u975ehtml\u5185\u5bb9 \u5c06\u4f1a\u5bfc\u81f4\u4fee\u6539js\u83b7\u53d6 refs\u8fd9\u5757\u7684\u4ee3\u7801", "d": "11/2017"}, {"body": "interesting thought imo something added core vue provides several ways handle currently conditional inside template passed slot parent hoc custom vue template sections etc", "d": "11/2017"}, {"body": "also possible add core could added vueloader would transformed something like personally think better keep kind magic webpack template nt improve way write templates enough write loader put front vueloader make transformation", "d": "11/2017"}, {"body": "want wrap slot better let component user intention clearer user write clearly shows things put together related", "d": "11/2017"}, {"body": "understood approach correctly solution problem described would means either repeat create separate component write extra boilerplate seem suboptimal might well write instead html content content took look two issues sure way related please expand", "d": "11/2017"}, {"body": "thanks suggestion however parallel mechanisms solve similar problems complexity big nogo terms api consistency something consider core welcome try implement userland", "d": "11/2017"}, {"body": "made pr expose meantime manually annotate function", "d": "11/2017"}, {"body": "version try vue set export error", "d": "12/2017"}, {"body": "relign try importing code", "d": "5/2018"}, {"body": "nt warning appear client anyway", "d": "11/2017"}, {"body": "least initial ssrgenerated page load nuxt shows warning client arrive page actually valid point would also expect client emit error initial load ssrgenerated page", "d": "11/2017"}, {"body": "fyi expected behavior warn server possible user wants render real custom element instead vue component warning safely performed client check element registered real custom element previously warning even clientside hydration fixed", "d": "11/2017"}, {"body": "workaround moment add attribute one two slots containers", "d": "11/2017"}, {"body": "wow amazing cloned built tested works evan best thank much", "d": "11/2017"}, {"body": "btw already", "d": "11/2017"}, {"body": "also work slotscope", "d": "1/2018"}, {"body": "faragos accomplished passing slots grandchild uses slotscope", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow define accessible everywhere use defineproperty prevents overwrite user need data reactive use like vuerouter case seems enough", "d": "11/2017"}, {"body": "ok thanks promise ask questions forum future extending prototype work tried using definereactive resolve problem gracefully method writen docs read code vuerouter sure right way know vuerouter official module", "d": "11/2017"}, {"body": "true relying fully secure api may change future without notice example definereactive example using another vue instance reactivity version using public api", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "11/2017"}, {"body": "sorry mistake forgot remove reference parent component key word leads problems", "d": "11/2017"}, {"body": "yes problem come electron sets configurable false getters setters everything work fine il add configurable true electrondistelectronasarrendererapiremotejs file see", "d": "11/2017"}, {"body": "would move element anymore", "d": "11/2017"}, {"body": "think understand asking unfortunately properly implementing introduces many unresolved questions eg list changes leave transition changes move brings complexity whole different level rather tackle standalone package core", "d": "11/2017"}, {"body": "sorry insist waste time understand problem list changes leave transition changes move nt change actual behavior already make shuffle middle leave hook make another move transition callback called like press multiple time shuffle list move transition example sorry assumptions wrong nt know flip implemented nt big picture problem like wrong point right direction implement vue package posva nt want move element rest list elements rearrange list prefer try example shuffle add remove item import lodash export default data return items nextnum methods randomindex return mathfloor mathrandom thisitemslength add thisitemssplice thisrandomindex thisnextnum remove thisitemssplice thisrandomindex shuffle thisitems shuffle thisitems leave el next settimeout gt elstyledisplay none working cause vue watch elstyledisplay none next replace lines next true p display flex flexflow row wrap span flex auto width margin backgroundcolor tomato textalign center listcompletemove transition transform listcompleteenteractive transition opacity listcompleteenter listcompleteleaveto opacity listcompleteleaveactive transition opacity", "d": "11/2017"}, {"body": "used real nodes sets inner text element used template however add warning", "d": "11/2017"}, {"body": "expected nt produce visible content unless combined structural directive like", "d": "11/2017"}, {"body": "example combined structural directive posva work ssr js const vue require vue const app new vue template foo data foo hello const renderer require vueserverrenderer createrenderer rendererrendertostring app err html gt err throw err consolelog html emits html hello exactly expected code work browser however see jsfiddle nt inconsistency problem", "d": "11/2017"}, {"body": "let put way equivalent setting property node nt work node fact works ssr coincidental probably fix maintain consistency clientside behavior rely", "d": "11/2017"}, {"body": "using instead vue adjusts event firing order prioritizing correct behavior vue event listeners behavior external listeners mutates application state guaranteed", "d": "11/2017"}, {"body": "right thanks", "d": "11/2017"}, {"body": "expected behavior think way around leave transition triggered removal element transition state ephemeral reflect virtual dom state virtual dom element considered already destroyed want something element finally removed real dom use transition hooks instead", "d": "11/2017"}, {"body": "incapsulate destroying garbage collecting inside components hook inside components use destroy components transition parent page finishes screencast illustration problem caused behavior", "d": "11/2017"}, {"body": "plashenkov believe referring using transitionend", "d": "11/2017"}, {"body": "autumnwoodberry thanks kind workaround though example transition used triggered example transition applied directly component parent component page example component nt know parent container uses transition believe strong straightforward event needed help us detect last moment component really needed anymore destroy", "d": "11/2017"}, {"body": "known best practice wait transitions finish outside current component eg page transition around vuerouter example need wait page transitions fix", "d": "3/2018"}, {"body": "designed usage modifiers limit handler fired proposed modifiers fall different category imo makes concept overloaded syntax convenience custom behavior goes beyond firing better done javascript reuse method wrapperdecorator", "d": "11/2017"}, {"body": "browser escaping passing attribute add see looks like escaped twice", "d": "10/2017"}, {"body": "made cases jsfiddle might help explain problem first case get turned second case long list characters one escaped third getting list characters retrieving regular character nt escape", "d": "10/2018"}, {"body": "seems like fixed", "d": "11/2017"}, {"body": "javoski true checked last version fixed", "d": "11/2017"}, {"body": "like question recommend ask forum discord server happening change computed property clone prop encourage take look need modify original variable make change", "d": "10/2017"}, {"body": "case reason clone occurring thisitem coming vuex nt want mutate data outside store handle situation also confusing think clone create new variable ca nt use separately original variable", "d": "10/2017"}, {"body": "probably want use computed setter like", "d": "10/2017"}, {"body": "already name components namespace generate though achievable userland plugin checks nested objects transforms property hook keep mind libs already namespace components example vuetify", "d": "10/2017"}, {"body": "posva vuetify \u7684 thank feasible way indeed supported basic use namespace nt notice thank hint mean libs already namespace components example named namespace like namesapce said means name \u4e0d\u8fc7\u4f60\u8bf4\u7684 \u591a\u6570\u5e93\u5df2\u7ecf\u7ed9\u5b83\u4eec\u7684\u7ec4\u4ef6\u547d\u540d\u8fc7\u4e86 could transforms property hook could find property origin component object already extended instanced way understand preprocess component object extends matter hook \u5728 thank much", "d": "10/2017"}, {"body": "duplicate personally think pipes become part js could adapt syntax pipe syntax widely known shell", "d": "10/2017"}, {"body": "posva \u548c\u95ee\u9898\u5e16 \u5185\u5bb9\u91cd\u590d js slightlysmilingface shell thank sorry open duplicate issue think use necessary moment", "d": "10/2017"}, {"body": "fyi pipeline operator proposa stage l", "d": "10/2017"}, {"body": "fnlctrl feel comment full sense humor xd", "d": "10/2017"}, {"body": "unfortunately unrelated vue however add file something like", "d": "10/2017"}, {"body": "try really want", "d": "10/2017"}, {"body": "javoski thanks new vue may ask difference two ways", "d": "10/2017"}, {"body": "workaround default vue call method passing pass function instead calling", "d": "10/2017"}, {"body": "nt think afford warning runtime build though summarize variable naming rules single asciionly regular expression javascript would characters long ecmascript unicode", "d": "11/2017"}, {"body": "alternative method suggested work occurred might work tried work nt", "d": "11/2017"}, {"body": "tracking click event looks like vue treat unicode names differently behind scene method name like doit button click invokes boundfn directly method name unicode name button invokes something like click event handler instead", "d": "11/2017"}, {"body": "order use method name directly shorthand needs alphanumeric identifier expression alphanumeric identifier treated function body instead case needed adding shorthand support full unicode herringtondarkholme pointed expensive worth", "d": "11/2017"}, {"body": "thanks addressing still wonder feedback could provided case maybe something like used nonalphanumeric identifier intended add workaround", "d": "11/2017"}, {"body": "problem expensive detect nonalphanumeric identifier maybe unicode identifier full expression", "d": "11/2017"}, {"body": "excuse miss something obvious realize expensive decide identifier legit unicode identifier pointed however thought detecting identifier nonalphanumeric easier like checking matches would require developer check legit unicode identifier feedback would better none suppose anyways unicode naming wide use plus alternative solution thanks community support totally understand edge case low priority picked time soon thanks patience time", "d": "11/2017"}, {"body": "gon na track", "d": "11/2017"}, {"body": "thank", "d": "11/2017"}, {"body": "think error thrown", "d": "10/2017"}, {"body": "nothing template compile malformed ca nt magically make syntax errors right also leads another point strongly recommend using dynamicusergenerated content part template security bad practice lead xss", "d": "10/2017"}, {"body": "fair enough thought maybe error could contained element containing error could skipped create warning rather throwing uncaught error clarify xss content app generated cms accessible loggedin editors suppose constitutes vulnerability presently components registered underneath global component decision made first building site learning vue suppose could decoupled registered separately thanks prompt reply", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "thanks showcasing focus issue still problem refocusing arbitrary elements every dom update could expensive probably many edge cases problem comes fact elements rerendered instead actually changed nt actually see issue repro focused element disappears want focus first one manually", "d": "10/2017"}, {"body": "yeah exactly posva possible make work pretty decent imagine use external library self maybe settimeout nexttick case vuevirtualscroll handling updating dom nt callback update case ca nt sure safe focus correct element even would probably need done nexttick thus increasing latency desired functionality pressing key focus next element see example tries set focus first element played around issue quite bit nt gotten work without major timing issues example imagine holding key constantly focusing next element maybe scrolling scrolling last visible element focused case timing issues sometimes make style focused element scroll position sync result chunky experience compare experience virtual scrollers made using frameworks like react angular notice impossible achieve get around using focus removes built functionality one would need reimplement agree root cause elements rerendered edit main problem illustrated flow determine item selected remove items frontafter put focus element set correct style elements beforeafter removed complete rerender triggered focus lost put focus element looking flow could guess focus updated style elements would run tick rerendering occur ticks later could big problem want style focus synchronized example", "d": "10/2017"}, {"body": "please nt reopen issue clearly marked duplicate known issue", "d": "10/2017"}, {"body": "ones publishing nuget package think contact guy nt know anything end automate nt know package manager net took account js packages well", "d": "10/2017"}, {"body": "vue officially support nuget repository", "d": "10/2017"}, {"body": "managed party developer", "d": "10/2017"}, {"body": "could please ask update nuget packages last versions", "d": "10/2017"}, {"body": "wait someone else dont n account probably one see link contact publisher mon oct notifications githubcom wrote could please ask update nuget packages last versions receiving commented reply email directly view github mute thread gt eduardo san martin morote", "d": "10/2017"}, {"body": "ok thank suggestion create account send email thought keeping vue js ts versions date popular repositories part vue team work someone else reason wrote forum", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "vue issue pressing enter issue submit event trigger next button event seems implicitly assumes without declaring problem resolved demo problem without vue", "d": "10/2017"}, {"body": "linusborg thank", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "", "d": "6/2018"}, {"body": "lizijins", "d": "9/2018"}, {"body": "", "d": "9/2018"}, {"body": "please use forumvuejsorg chatvuejsorg questions", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "wjtgithub case", "d": "10/2017"}, {"body": "already fixed released soon", "d": "10/2017"}, {"body": "reply soon efficiently thx", "d": "10/2017"}, {"body": "missing reproduction", "d": "10/2017"}, {"body": "", "d": "11/2017"}, {"body": "currently capture errors following render functions watcher callbacks lifecycle hooks component event handlers dom event handlers currently included probably", "d": "10/2017"}, {"body": "status", "d": "4/2018"}, {"body": "plans fix", "d": "9/2018"}, {"body": "using vuex track error might come display error right way error prone feature would remove need", "d": "10/2018"}, {"body": "vue html works continuous whitespaces displayed single whitespace probably need learn tags", "d": "10/2017"}, {"body": "hi evan thanks answer however fact due vue html see fiddle provided comment vue instantiation output code displayed indentations also worth mentioning happens even set vpre container span element understand vpre tell vue ignore element children test fiddle well", "d": "10/2017"}, {"body": "talking html pre tags vpre", "d": "10/2017"}, {"body": "seems arbitrary pointless limitation firefox side think makes error messages less useful long warnings also pretty rare suggest debug using different browser", "d": "10/2017"}, {"body": "see example nt come correctly forgot wrap code blocks suggest leaving code output putting actual message start", "d": "10/2017"}, {"body": "please find attached reproduction folder run local server using something like python simplehttpserver view device distzip", "d": "10/2017"}, {"body": "likely missing promise polyfill sat oct pm imran nazir notifications githubcom wrote please find attached reproduction folder run local server using something like python simplehttpserver view device distzip receiving subscribed thread reply email directly view github mute thread", "d": "10/2017"}, {"body": "hi evan many thanks responding response reply added tag closing tag neither effect repo looking actually seems vue dev dependency seems template built older browsers mind users likely latest phones important least backward compatibility please advise many thanks responding", "d": "10/2017"}, {"body": "reproduce problem minimal jsfiddle html page dependencies packages vue please", "d": "10/2017"}, {"body": "note self older browsers need babelpolyfill add features window", "d": "10/2017"}, {"body": "need quote key names javascript also learn actually make repro nt lazy", "d": "10/2017"}, {"body": "\u8fd9\u4e2a\u662f\u56e0\u4e3a\u540c\u4e00\u7ec4\u4ef6\u5728 flip flip flip loading", "d": "10/2017"}, {"body": "changing condition specific event js fixed version vueprototype function event string array fn function component const vm component argumentslength vmevents objectcreate null return vm array events arrayisarray event let l eventlength lt l event fn return vm specific event const cbs vmevents event cbs return vm fn vmevents event null return vm js current version vueprototype function event fn var", "d": "10/2017"}, {"body": "thanks nice description analysis chengkang submitted passing test", "d": "10/2017"}, {"body": "closed via", "d": "11/2017"}, {"body": "supported future versions see nt think support arbitrary arraylike objects line actual object vs arraylike blurry stick arrayisarray case support array subclasses also since subclassing array feature likely implement reimplement reactivity system proxies", "d": "10/2017"}, {"body": "posva thanks reference good know looking address point future needed addressed sooner rather later forked project applied solution view like test cases passing continue usage project interest taking contribution happy make btw one test cases failing even made changes test transition outin async component resolve leave complete fyi anyone finding wanting use workaround vue team ready introduce feature created branch forked repo includes built files changes use", "d": "10/2017"}, {"body": "thanks purtuga interesting approach core probably hold things improved fork particular creating fresh prototype object every array observed technically need create wrapper prototype object original prototype object cost avoided map serves cache", "d": "10/2017"}, {"body": "thank taking time look fork good point caching prototype normally use type stuff could usages vue codebase find use map inside perhaps create property original prototype store vuejs wrapped prototype potential issue approach prototype frozen thanks looking forward feature lands vuejs", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "keepalive cache anonymous components without include prop bug break change", "d": "11/2017"}, {"body": "see reproduction console panel link vue version see without include anonymous components ca nt cahce mounted without activated", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "believe pr tackles issue", "d": "12/2017"}, {"body": "clarify esm build also disables transpilation addition allowing direct import browser module", "d": "12/2017"}, {"body": "could translate english", "d": "10/2017"}, {"body": "somebody translate english", "d": "10/2017"}, {"body": "close favour", "d": "10/2017"}, {"body": "problem already create keys moment namely nt use set change works expected", "d": "10/2017"}, {"body": "works update fiddle", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "closing since assume issue resolved", "d": "10/2017"}, {"body": "nt think worth complicate options even", "d": "10/2017"}, {"body": "also simply give key ensure replaced", "d": "10/2017"}, {"body": "tried solution codepen still cant get working tried", "d": "10/2017"}, {"body": "u need dom structure input look update dom input tag", "d": "11/2017"}, {"body": "actually input element first remove document move places example first renders like focus input input words virtual dom insert parentinsertbefore input moves input element comment element eventually lose focus delete comment node think could use vshow better avoid insertbefore move problem remove document insert reference node case comment default action virtual dom vue nt replace comment node", "d": "12/2017"}, {"body": "also simply give key ensure replaced element focus lost either case", "d": "12/2017"}, {"body": "seems like one", "d": "12/2017"}, {"body": "tried fix issue encountered problem got way access vnode html element want get vnode path find good way missing something better solution", "d": "1/2018"}, {"body": "please read requirements carefully runnable reproduction minimal usage question", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "type code successfully inferred type expected behavior infer actual function signature option information want strict need manually annotate props type vid would introduced via", "d": "10/2017"}, {"body": "thanks lot javascript import vue vue interface setfunction number number string export default props test object gt setfunction data thistest return reference thistest get correct parameter types question use component trees props refs vue options api get contextual type perhaps topdown downtop infer types", "d": "10/2017"}, {"body": "currently cases typescript compiler analyze template need make additional type checker want check tsxrender function may able type check props type parent component discussion thread", "d": "10/2017"}, {"body": "thanks learn", "d": "10/2017"}, {"body": "angular aot compiler check template type also option think vue template compiler check template type ktsn may ask whether movement make possible", "d": "8/2018"}, {"body": "fyi", "d": "8/2018"}, {"body": "ktsn great job work vetur possible run vue cli lint", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "type inference goes cyclic adding return type function would fix problem ts import vue vnode vue vueextend render h vnode return h div thismessage include caveats docs", "d": "10/2017"}, {"body": "make pull request vuejsorg", "d": "10/2017"}, {"body": "sorry usage support many possible edge cases consider make vue compatible arbitrary modifications builtin types", "d": "10/2017"}, {"body": "thank quick response although example showed manipulation array instance directly example proper one would actually subclass array cases would supported following works expected chrome vuejs alter prototype break subclassed array javascript const class extends array constructor super although know vuejs alters data structure slightly enable reactivity expectation would actually lose functionality might data paul", "d": "10/2017"}, {"body": "pursue discussion somewhere else forums found thread regarding issue certainly nt want spend time opening discussion going entertain pursuing solution", "d": "10/2017"}, {"body": "probably open fresh feature request support reactivity subclassed arrays", "d": "10/2017"}, {"body": "automatically bound dom property tag statically using dynamic makes bound attribute binds initial value input use force property instead", "d": "10/2017"}, {"body": "also facing similar issue trying generate one dynamic component using specific code update depvalue please help", "d": "11/2017"}, {"body": "hi varadekd think ask question stackoverflow think help trying change value value click depvalue", "d": "11/2017"}, {"body": "hi mahersoua nt want two different buttons load two component want single click component loaded ie click show twocomponent loaded", "d": "11/2017"}, {"body": "varadekd case assign value depvalue something like", "d": "11/2017"}, {"body": "go like getcomponent thisvalue thisdepvalue", "d": "11/2017"}, {"body": "another thought ca nt change may also real component case must bound normally extracted component prop please use suggest workaround explicitly adding modifier", "d": "11/2017"}, {"body": "like take look one yet", "d": "10/2017"}, {"body": "seems strongly related dynamic type", "d": "10/2017"}, {"body": "seems need add pre condition", "d": "10/2017"}, {"body": "misoguy ok come first", "d": "10/2017"}, {"body": "also need consider sorry dirty issue", "d": "10/2017"}, {"body": "digging issue realized simple roughly implemented working code think need write test haha make case work well work send pr", "d": "10/2017"}, {"body": "gebilaoxiong browser nt refresh nt see comment pr commenting guess issue closed", "d": "10/2017"}, {"body": "misoguy thought one process repaired nt know problem", "d": "10/2017"}, {"body": "gebilaoxiong commented gon na work weekends bad tried code tested text well nt think problem regarding issue", "d": "10/2017"}, {"body": "misoguy use code open pr merge code", "d": "10/2017"}, {"body": "gebilaoxiong would ok implementation test code seems much better mine open pr suggested let decide whether merge mine", "d": "10/2017"}, {"body": "gebilaoxiong opened pr suggested included code check since nt want get credit work regarding would nice contribute first time way implementing first pr found wonderfully maintained test codes written great library", "d": "10/2017"}, {"body": "misoguy nice day", "d": "10/2017"}, {"body": "thank", "d": "10/2017"}, {"body": "expands value binding nt make sense use explicit binding side side", "d": "10/2017"}, {"body": "ok thanks note example replace dynamic type static type everything ok expected", "d": "10/2017"}, {"body": "yes vmodel expands different props depending type binding", "d": "10/2017"}, {"body": "understand tying create widget fits input data type new vue el app data model options value text foo value text foo value text foo computed multiple return arrayisarray thismodel understand never work possible warned dev mode case", "d": "10/2017"}, {"body": "looks issue", "d": "10/2017"}, {"body": "exporting variable specified properties exported", "d": "10/2017"}, {"body": "really translate one think sure exactly want vue well way declare scope container", "d": "12/2017"}, {"body": "translation updated solander", "d": "12/2017"}, {"body": "changing import data datajs export default data import data datajs export default datasomedeepprops", "d": "12/2017"}, {"body": "atinux thanks comments also cautious feature provide shortcut v export props implementation feature sometimes useful resulta resultb seems heavy complicated implementation hope get feedback feature xd", "d": "12/2017"}, {"body": "atinux thanks comments austio help right person", "d": "12/2017"}, {"body": "also would like able use mentioned syntax resulta resultb able access deep properties without use long names like", "d": "2/2018"}, {"body": "sort style notation like javascript thoughts javascript keyword blockscoped consistent ed values accessible child nodes", "d": "2/2018"}, {"body": "declare nt", "d": "2/2018"}, {"body": "alexandrebonneau nt make sense", "d": "2/2018"}, {"body": "thoughts would still need computed property method cases data coming api bc possibility nullundefined keeping separation template presenting data marginally verbose gains clarity also reduction size vue core", "d": "2/2018"}, {"body": "userland solution works highly recommend use may useful move logic separate component make template cleaner", "d": "2/2018"}, {"body": "oevgeny nice workaround thanks however simpler directive could prevent cluttering template additional tags think feature request still valid", "d": "2/2018"}, {"body": "note xsl concept const variable splitting templates using computed method always possible without breaking logical blocks reducing readability", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "updates ran well", "d": "8/2018"}, {"body": "issue available beforecreated hook although available every hook version componentoptions interface beforecreate v void created void beforedestroy void destroyed void beforemount void mounted void beforeupdate void updated void activated void deactivated void errorcaptured boolean void", "d": "10/2017"}, {"body": "see since recommend use enable better type inference prefer object literal style need explicitly add type hook", "d": "10/2017"}, {"body": "one point still make sense beforecreate", "d": "10/2017"}, {"body": "use data beforecreate create moment annotate type prevent infer wrong type default contextual type hook", "d": "10/2017"}, {"body": "data nt created beforecreate beforecreate null void declaration says explicitly beforecreate hook", "d": "10/2017"}, {"body": "type beforecreate user defined data", "d": "10/2017"}, {"body": "distribute content use slots template render incompatible one precise template compiled render function placed property side note mixin template render function quite strange makes sense put component extend", "d": "10/2017"}, {"body": "found change parsemodel might culprit prior change vmodel bindings form foobar would rewritten set foo bar v relevant issues", "d": "10/2017"}, {"body": "either way using like directly recommended", "d": "10/2017"}, {"body": "understand however reproducible nt really reflective trying accomplish written simple data grid accepts arbitrary vue template strings render column contents header column rendering checkbox whose data bound computed property containing component one instantiates data grid checkbox reflect selected state rows grid changing update underlying selection flags rows implemented declaring method findparent via global mixin looks offending parent component accessing computed property like prior worked nicely however updating code broke workaround turning computed property question data property using watch sync value individual selection flags hardly ideal", "d": "10/2017"}, {"body": "coincidentally fixed", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "slot name extracted compile time scoped slots might normal slots well future slot name really parent context make sense means recommended dynamically add slot names directly", "d": "10/2017"}, {"body": "looks like race condition happening work around also set one elements", "d": "10/2017"}, {"body": "logic updating value options change inside called however case presence directive toggled element", "d": "10/2017"}, {"body": "fergusean sorry close issue soon", "d": "10/2017"}, {"body": "closed via", "d": "11/2017"}, {"body": "breaking change going happen simply adding listener check event key call filter input chars", "d": "10/2017"}, {"body": "yes would nice little inclusion directive add least allow directives function calls model updated check things", "d": "10/2017"}, {"body": "actually better changing generic type constructor default breaking change encode return constructor typed plus typed jsx enabled make complex typing file complicated let first make stable wait feedback like idea please vote emoji cc ktsn octref", "d": "10/2017"}, {"body": "sounds nice would nice vue supports typed jsx default small library add types component typed jsx aamof issue comes btw current typing loses information props required optional necessary typed jsx", "d": "10/2017"}, {"body": "current typing loses information props required optional fairly nt think make typing current api least current ts type system support example", "d": "10/2017"}, {"body": "using library mentioned think first step make props optional using tsx partial unless passing declared interface enhancement ts support think also create ts issue make awareness requirement linking back issue believe support typed tsx box props inferred unfortunately ultimately great vue api also custom attributes tsx scoped slots events need cater interfaces still required far see however possible reduce needed typing especially duplication occurs prop definitions", "d": "10/2017"}, {"body": "approach like works type definitions become complicated", "d": "10/2017"}, {"body": "wonderfulpanda could form requiredprops props object", "d": "10/2017"}, {"body": "blakenewman may impossible obtain requiredprops props compile time example type", "d": "10/2017"}, {"body": "yes sorry forgot", "d": "10/2017"}, {"body": "builtin alias vue checking pass event constructor however chrome ignores option seems bug although technically deprecated might simulate event using old fashioned way want pass probably make supported somehow", "d": "10/2017"}, {"body": "well rerender see anything changed understand may think could simply diff new vnodes parent pass child diff unfortunately nt take account possible edge cases easy way around current architecture also assuming could go route would performance tradeoff would still diff vnodes child diff vnodes two times means components light receive large slot contents performance would worsen think large slot trees pretty common even nested quite often concerning situation encountering performance issues options optimize useful probably extracting heavy part another child component nt receive slot using large node trees need render component lifecycle", "d": "10/2017"}, {"body": "hm took look issues mentioned one indeed suboptimal share insight", "d": "10/2017"}, {"body": "already plan improve tracked", "d": "10/2017"}, {"body": "thank", "d": "10/2017"}, {"body": "wow weird feeling seeing answer seeing almost verbatim gave recollection reply glad improved though", "d": "10/2017"}, {"body": "turns john came across thing months ago", "d": "11/2017"}, {"body": "nt looked deeply whole updaterender pipeline speaking conceptually curious dependency changes alone ca nt determine componentslot rerender", "d": "2/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "thinks necessary users functional components otherwise hardly work expect", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "already works work browsers support feature natively use webpack transpile js", "d": "10/2017"}, {"body": "man posva quick see syntax supported great nt work make new project vuejstemplateswebpack shown understand tell post question instead since got attention thought try asking", "d": "10/2017"}, {"body": "hm probably objectrestspread operator stage anymore stage included preset operator would kind open issue template repo track fix find time edit nope included look repo please open issue webpack repository", "d": "10/2017"}, {"body": "thanks reply linusborg new issue tried using dice made changes dev branch repo case continue convo issue", "d": "10/2017"}, {"body": "please provide repro whole project use fiddle set", "d": "10/2017"}, {"body": "posva able reproduce fidlle codepen may relelated fact using webpack vueloadertemplate compiler guess try question though captured states vm instances first load hit media query breakpoint drawer switch persistent component drawer rendered default slots idea children first load children something expect started looking vue js code must say understanding vdom rendering details pretty low", "d": "10/2017"}, {"body": "keep core feature requests suggest moving eslintpluginvue instead", "d": "10/2017"}, {"body": "intentional change fix couple bugs caused event firing orders fact try firefox see behavior chrome consistent behavior browsers considered fix", "d": "10/2017"}, {"body": "curiously use force vuejs render dom props", "d": "10/2017"}, {"body": "reduced reproduction firefox wo nt respect attribute set later", "d": "10/2017"}, {"body": "herringtondarkholme firefox problem", "d": "10/2017"}, {"body": "curiously use force vuejs render dom props herringtondarkholme thanks use time next step file bug firefox", "d": "10/2017"}, {"body": "nt think firefox bug actually vue keep without value weird also warning muted used modifier code nt seem trigger", "d": "10/2017"}, {"body": "want see", "d": "10/2017"}, {"body": "aha thanks", "d": "10/2017"}, {"body": "note mutating rather replacing object array old value new value reference objectarray vue keep copy premutate value see", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "solution options null select nt rendered rendered options becomes nonnull value case array thus initial value options bearing furthermore reproduce behavior separating loading indication options see behavior seems works expected select wrapped template see looks like problem element shares vmodel vif regardless given magically switches correct value data vue instance mutated believe unintended behavior aka bug", "d": "10/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "possible inline templates compiled part parent tree", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "currently working names modifiers really since mouse modifiers already clashed keyboard modifiers avoid future name issues perhaps include something pointer device mouse related like introducing twoword modifiers nt seem like good idea though case related stuff main signifiers suggestions might confusing since fired mouse buttons except primary one suggestions suggestions previous names course kept deprecated warnings", "d": "11/2017"}, {"body": "using would consistent name third typically middle button", "d": "12/2017"}, {"body": "discussion kinda moved pull request evan okayed naming", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "please provide reproduction failed recovery white screen", "d": "10/2017"}, {"body": "able boil another issue running safari", "d": "11/2017"}, {"body": "appears bug safari sort function andor type coersion nodechromeetc returns would expect looking null true true sort b gt lt b true true null safari null true true sort function b return lt b null true true switching using comparitor function renders properly", "d": "11/2017"}, {"body": "still would like see makes sense way detect production would helpful think would rather development behavior production rerendering invalid markup order prevent white screens", "d": "11/2017"}, {"body": "would awesome cause also problems sometimes whitescreeen node append errors production would really nice able see production", "d": "11/2017"}, {"body": "bumping get thoughts subject approach also happy make pr allow check happen production happened us hard failure results white screen content rendered today mobile safari wrap span nossr component renders mount cycle everything renders fine according html li spec allows flow content inside contained nodes", "d": "12/2017"}, {"body": "flag component methods always type unless enable make pr docs later mention", "d": "10/2017"}, {"body": "ktsn thanks", "d": "10/2017"}, {"body": "ktsn think better mention also required p", "d": "10/2017"}, {"body": "also call methods emit events functional components templates", "d": "10/2017"}, {"body": "use regular component need", "d": "10/2017"}, {"body": "support local directives would awesome need respond action use plain old functions js event handler function onclick context e consolelog clicked div component export default functional true render h context return", "d": "12/2017"}, {"body": "yes scottbedard thank know ca nt functional html template vue emit click log click import logclick logg", "d": "12/2017"}, {"body": "yea would great right ca nt really expose things template clean way technique thought prop default value works looks terrible opinion unnecessary bloats component api", "d": "12/2017"}, {"body": "plans ahead supporting local directives functional components would allow among others convert advanced components functional features could replaced directives assume technical limitations would like know planned requires etc least know must keep using normal components", "d": "2/2018"}, {"body": "opened pr supporting functionalcomponents opened separate issue regarding making accessible functionalcomponents open pr feature request gets approved", "d": "5/2018"}, {"body": "holding pr almost months since opened", "d": "8/2018"}, {"body": "would love see merged", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "data template like", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "open issue repos please duplicate vuejsvuerouter could save somewhere state first time component appeared trigger different transitions even put custom component uses transition component", "d": "10/2017"}, {"body": "hi problem description lacking bit detail reproduction produces three alerts show node nname nt encounter errors nt see problem file method", "d": "10/2017"}, {"body": "linusborg check check dependencies need vue", "d": "10/2017"}, {"body": "okay indriguingly odd tested outside codesandbox seems issue way codesandbox magic reason event object replaced object currenttarget object dom object event came objects created commmunic shared workers though channel messaging api see mdn vue use anywhere source object come somewhere else fact happens since good startingpoint investigate", "d": "10/2017"}, {"body": "test project problem", "d": "10/2017"}, {"body": "mean problem please verify also ends like something else", "d": "10/2017"}, {"body": "yes", "d": "10/2017"}, {"body": "one example", "d": "10/2017"}, {"body": "okay weird sidenote generally bad idea save htmlelements event contains namely vue attempt make object reactive element lots child elements lead stack overflow wondering somehow done intentionally nt think unsure cc", "d": "10/2017"}, {"body": "linusborg", "d": "10/2017"}, {"body": "vue specific behaviour occurs also vanilla javascript sure suppose gets cleared event bubbling example", "d": "10/2017"}, {"body": "transient value become event propagation finishes used micro tasks nexttick triggers updates event propagation resolves led number hard fix bugs use macro task waits dom events propagated resolved even access frame become need pass currenttarget around save another variable still access", "d": "10/2017"}, {"body": "iterate general advice save objects like dom events html elements component data anyway reactification elements quickly break app large element trees", "d": "10/2017"}, {"body": "linusborg send event prop", "d": "10/2017"}, {"body": "eddimensi save need another variable pass evan said", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "\u53bb\u6389 css safariios \u7684 css bug", "d": "10/2017"}, {"body": "\u603b\u7b97\u627e\u5230\u4e86\u539f\u56e0 \u662f\u8fd9\u4e2a", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "nt input blur event fires first hello clicked actually", "d": "10/2017"}, {"body": "make click first", "d": "10/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow probably better use component purpose let dev pass components use slots also allows combine jsx templates one project", "d": "10/2017"}, {"body": "would breaking change unfortunately", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "duplicate", "d": "10/2017"}, {"body": "well actually real problem case nt performance loss rerendering per se fact focus lost elements removed readded dom trying use virtual scroller ca nt navigate keyboard since rerendering removes focus way found go around listen blur event refocus introduces significant delay ruins experience alternative handle dom directly kind defeat purpose using vue case create new issue bit specified really important order create usable virtual scroller keyboard navigation", "d": "10/2017"}, {"body": "ping posva created ugly hack instead using slice series shift unshift push pop divided inside outside nexttick ugly hack performant since divided twice many ticks ordinary slice really hope recommended vueway said think needs addressed order able create virtual scrollers keyboard navigation thoughts", "d": "10/2017"}, {"body": "yeah issue input issue using key trick guess ask help forum chat need", "d": "10/2017"}, {"body": "nt understand posva codepen repro key used sure would help also see key attribute used working repro since complete rerendering occurs specific conditions", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "kovensky solve issue", "d": "11/2017"}, {"body": "", "d": "10/2017"}, {"body": "\u4e0a\u9762\u7684\u4f8b\u5b50\u5c31\u662f\u6700\u597d\u7684\u8bc1\u660e \u548c \u7248\u672c\u90fd\u80fd\u6b63\u5e38\u4f7f\u7528 \u9664\u4e86vue\u7248\u672c\u4fee\u6539\u8fc7\u4ee5\u5916 \u5176\u4ed6\u7684\u90fd\u6ca1\u6709\u53d8\u8fc7 elementui \u548c iview \u4e24\u4e2a\u7ec4\u4ef6\u7684\u65e5\u671f\u9009\u62e9\u63a7\u4ef6\u90fd\u53d7\u540c\u6837\u7684\u5f71\u54cd", "d": "10/2017"}, {"body": "zsedcbm \u6211\u8fd9\u8fb9\u6d4b\u8bd5\u6ca1\u95ee\u9898 \u5177\u4f53\u662f\u4ec0\u4e48\u95ee\u9898", "d": "10/2017"}, {"body": "feichao chrome \u4e2d \u4f7f\u7528\u65b0\u7248\u7684vue \u65e5\u671f\u65e0\u6cd5\u9009\u4e2d \u540e\u6765\u4f7f\u7528\u4e86chrome \u4e24\u4e2a\u7248\u672c\u7684vue\u90fd\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528 \u5947\u602a\u7684\u4e00\u70b9\u662f \u6211\u5728 devtools\u4e2d \u4e0b\u65ad\u70b9\u7684\u65f6\u5019 vue\u65b0\u7248\u672c\u4e5f\u662f\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\u7684\u53bb\u9664\u65ad\u70b9 \u53c8\u51fa\u73b0\u95ee\u9898\u4e86 \u4e0d\u77e5\u9053\u662f\u6d4f\u89c8\u5668\u5185\u6838\u7248\u672c\u4f4e\u7684\u95ee\u9898 \u8fd8\u662fvue\u7684\u95ee\u9898", "d": "10/2017"}, {"body": "feichao \u8fd9\u4e24\u4e2a\u4e5f\u662f\u53cd\u6620\u7684\u540c\u6837\u7684\u95ee\u9898", "d": "10/2017"}, {"body": "likely related", "d": "10/2017"}, {"body": "\u770b\u4e86\u4e0b\u4f3c\u4e4e\u53ea\u6709\u5728\u65e7\u7248\u672c\u7684 chrome", "d": "10/2017"}, {"body": "removed transition finished responsibility ensure element default state correct position", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "make following animation want list animated xaxis element changed state display none display block result list animate mean jumped origin konw link", "d": "10/2017"}, {"body": "expected behavior functional components merge class parent may return one nodes need explicitly bind", "d": "10/2017"}, {"body": "thanks info mentioned anywhere docs look posting issue could nt find anything", "d": "10/2017"}, {"body": "tried vuepropertydecorator ts import vue vue import prop component vuepropertydecorator interface foobar foo string bar string component export default class app extends vue prop foobar foobar", "d": "10/2017"}, {"body": "like idea type would hide internal detail type declaration looks intuitive syntax sandangel proposal related decorators would help us declare type easier canonical api", "d": "10/2017"}, {"body": "pr easier since would simple change", "d": "10/2017"}, {"body": "ferdaber yes please", "d": "10/2017"}, {"body": "minimal reproduction", "d": "10/2017"}, {"body": "use", "d": "10/2017"}, {"body": "ktsn last checked typeof vue definition returns string magic going behind closed doors would use typeof vue provided repro", "d": "11/2017"}, {"body": "ktsn according vuedts const export vue vueconstructor", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "wontfix emitted events need correct order fixed happened work previously native event emitted first overwritten custom event preserve old behavior emitting custom event overwrites native event", "d": "10/2017"}, {"body": "data object must plain", "d": "10/2017"}, {"body": "well seems missed bit documentation good point phanan would great vue throw errormessage devtools using non plain data object", "d": "10/2017"}, {"body": "imho bad idea restrict data plain objects working components props validation using modelclasses type parameter like would nt work without typed models", "d": "10/2017"}, {"body": "confirm addition label mean track fixed asking whether revert vue wait fix attempt restructure code specifically class used reactive object using custom setter property side effects used work vue", "d": "10/2017"}, {"body": "might related", "d": "10/2017"}, {"body": "prefer revert feature properties class declare located prototype instance want check prototype may check entire prototype chain side effect big benefits brings", "d": "10/2017"}, {"body": "in\u52a0 \u539f\u578b\u5224\u65ad\u4e0ehasownproperty\u5224\u65ad\u5c5e\u6027\u7684\u533a\u522b\u662f\u5565", "d": "7/2018"}, {"body": "js class model constructor thisfoo thisbar null get bar return thisbar set bar newvalue thisbar newvalue new vue data function return data new model js foo bar null proto get bar function return thisbar set bar function val return thisbar val", "d": "7/2018"}, {"body": "hello apachera thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem necessary create repository us clone minimal reproduction repositories actual projects generally accepted necessary thank", "d": "10/2017"}, {"body": "guarantee hook order components array", "d": "10/2017"}, {"body": "explicitly stated take questions", "d": "10/2017"}, {"body": "indeed work typed props definition sure reason though herringtondarkholme danielrosenwasser would appreciate look", "d": "10/2017"}, {"body": "currently computer guess bit right probably assignability error props general better future versions typescript currently branch works better thing even branch best inference get", "d": "10/2017"}, {"body": "ts import vue vnode vue vueextend name workaround props foo type string bar prop render h vnode return h div thisfoo think inferring empty prop type lenient lot options empty field results empty type parameter make inference default many errors hidden unintended", "d": "10/2017"}, {"body": "closing one please keep eye merged", "d": "11/2017"}, {"body": "said key set button problem due vue using inplace patch strategy explained doc", "d": "10/2017"}, {"body": "hi phanan inplace patch great vue patch element inplace reset status completely including event bindings classes etc reset focus status", "d": "10/2017"}, {"body": "focus status part node state two possibilities case want change button text maintaining focus want replace button resetting focus simply way vue tell intention unless use key", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "arrow autogenerated gitbook link next item menu right either way issue belong", "d": "10/2017"}, {"body": "okay thanks flagging", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "meet problem", "d": "12/2017"}, {"body": "please strip nonrelated packages like vuebootstrap move project container image nt need build image test", "d": "10/2017"}, {"body": "setup ssr nt follow guidelines laid ssr guide really specifically use used like meant returns resolved promise nt wait resolve router ready please try follow guide ask forumvuejsorg get stuck open issue find problem persist following guide", "d": "10/2017"}, {"body": "everything ok", "d": "10/2017"}, {"body": "git clone local disk space show error nothing others", "d": "10/2017"}, {"body": "idea commenting saying sorry", "d": "10/2017"}, {"body": "try like said thanks help linusborg", "d": "10/2017"}, {"body": "nt work passing component data root vnode contains ref reference simply fixed repro", "d": "10/2017"}, {"body": "either tab line break replaced every browser chrome validate data instead like said resolve issue correct link nt think vue tamper data case trimming funny characters url words belongs userland imho", "d": "10/2017"}, {"body": "phanan case seems actually tamper remove initialization vue codepen encounter described behaviour looks like invalid html entity magically added end link", "d": "10/2017"}, {"body": "changes whole html talking real lists control one reused using attribute", "d": "10/2017"}, {"body": "posva sorry provided wrong fiddle link one right test button causes rerender", "d": "10/2017"}, {"body": "ah thanks sure something improved sure may due strategy used patch nodes", "d": "10/2017"}, {"body": "seems strange push shift causes rerender push ok unshift also ok pop unshift also fine btw wrap unshift settimeout fixes issue want use hacks", "d": "10/2017"}, {"body": "duplicate", "d": "10/2017"}, {"body": "close via", "d": "10/2017"}, {"body": "hi know new release includes fix released approximately thanks awesome project", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "ca nt use codesandbox reproduce error try add dependencies gives internal server error anybody take look anyway please", "d": "10/2017"}, {"body": "could provide repository github run extremely difficult debug printed code", "d": "10/2017"}, {"body": "linusborg created one using docker makefile run everything create container image run testable want client version got webpack dev server sidenote hot reloads nt work still nt figured kill server rerun make command sorry", "d": "10/2017"}, {"body": "linusborg properly", "d": "10/2017"}, {"body": "sorry nt understand requesting vue core library nt offer testing ajax functionality", "d": "10/2017"}, {"body": "pretty much linusborg said would proper modification jquery axios side nothing done vuejs core", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "\u4ec0\u4e48\u610f\u601d", "d": "11/2017"}, {"body": "browser strips element becaue allowed according html spec vue templates nt work like handlebars others loop pieces html markup treat text conditionally print woirk complete speccompliant elements understand suggest reading guide section render functions templates compiled expected behaviour", "d": "10/2017"}, {"body": "way thank much", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "ulisescarreonalvarez issue belong quick google search led thread might help", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "issue template reason ca nt reproduce", "d": "10/2017"}, {"body": "nothing vue nt see would run development server production environment anyway", "d": "10/2017"}, {"body": "nt know fixed would suggest users explicitly use compiler hard time infer directive first expand consider example first expand right add option nt seem right template compiled update maybe use simpler strategy always prefer expanding unless binding", "d": "10/2017"}, {"body": "usage indeed ambiguous also suggest using explicit wrapper need add warning case", "d": "10/2017"}, {"body": "looks like warning possible solve cases see", "d": "2/2018"}, {"body": "tried safari checked true", "d": "10/2017"}, {"body": "firefox event input event change triggered checkbox newly opened tab middleclick refresh thing happening text input elements", "d": "10/2017"}, {"body": "tested vue nt react input event checkbox model updated text next checkbox changes fire change event checkbox", "d": "10/2017"}, {"body": "basically vuejs updates select checkbox input radio input elements change event input event firefox follows mdn fires event change change committed user middleclick refresh change automatically done firefox therefore user consequently input event fired", "d": "10/2017"}, {"body": "wondering reasoning behind first point would happen changed linked would probably need lot browser compatibility testing", "d": "10/2017"}, {"body": "trying possible solutions closing wontfix imo something fixed firefox behavior normal refresh middleclickrefresh inconsistent fires one specific case every browser fires technically possible vue address behavior however introduces nontrivial complexity codebase listening ff causes listeners fired twice nonefficient may cause unnecessary rerenders microtasks fire use event input types ff breaks user code expects trigger updates manually dispatching events tradeoff nt really worth niche case", "d": "3/2018"}, {"body": "mostly certain problem setup familiar systemjs probably want adjust use es modules build", "d": "10/2017"}, {"body": "vue declaration switched es module style declaration need use want use es module requirejs systemjs seem support es module may need migrate tool supporting es module want use gt typescript", "d": "10/2017"}, {"body": "switch systemjs use esmjs add pointless babel plugin transpile compiled js systemjs complain process undefined fix config since metaglobals override config supported cjs global module formats driving slightly mad seems could fixed simple bottom vue runtime commonjs ie vueclasscomponent ping ktsn danielrosenwasser", "d": "10/2017"}, {"body": "still pretranspiled thing left export syntax sounds pretty odd systemjs ca nt simple global replacement using es modules shim", "d": "10/2017"}, {"body": "trying shim right suppose include thing windowprocess env nodeenv development vueenv client", "d": "10/2017"}, {"body": "maybe missing something understanding systemjs gives intended behavior default imports need turn typescript flag", "d": "10/2017"}, {"body": "boil simple example logints import vue vue export default class login extends vue compiled loginjs use strict objectdefineproperty exports esmodule value true const require vue class login extends lt crash exportsdefault login allowsyntheticdefaultimports nt affect emitted code compile time nt fix issue compiled code whether", "d": "10/2017"}, {"body": "looks like emitting commonjs default nt sort default synthesis since already targeting systemjs might well switch target things work well", "d": "10/2017"}, {"body": "familiar systemjs thread seems systemjs author think default synthesis handled transpiler quite sure typescript handle synthesis design need another transpiler trying daniel suggestion listed thread linked", "d": "10/2017"}, {"body": "thanks danielrosenwasser trick nt aware systemspecific module target", "d": "10/2017"}, {"body": "point duplicated values note even vue nt reset selected item user interaction still selecting first matching option fresh render key information array vue infer ie key exist view data data view update key information imo duplicate values like intrinsically broken design instead directly bind entire object value unique id available value comparison", "d": "10/2017"}, {"body": "video issue show", "d": "10/2017"}, {"body": "see comparison get list flash larger size flashes even firefox", "d": "10/2017"}, {"body": "doits try", "d": "10/2017"}, {"body": "fritx still flashes resizing", "d": "10/2017"}, {"body": "also see ie edge", "d": "10/2017"}, {"body": "issue definitely seems fixed chrome still see issue safari firefox also see issue safari firefox well situations like css changing appearance vue changing appearance wanting work exactly moment safe say done css done vue make sure things changed exactly time", "d": "10/2017"}, {"body": "doubt vue problem simply attaches native event listener believe caused vue please reduce reproduction involves much unrelated logic party library", "d": "10/2017"}, {"body": "hi updated codepen remove third party library unrelated logic click change handler thank much", "d": "10/2017"}, {"body": "seems browser behavior quirk calling input trigger native change event jquery probably compatibility hacks cater really vue responsibility", "d": "10/2017"}, {"body": "ooh see btw suggestion make works vue try wrap input label tag remove click handler hope trigger native event thank much", "d": "10/2017"}, {"body": "sorry really nt see provides", "d": "10/2017"}, {"body": "names parent child original example meant classlike inheritance tree components updated example make things clear point many places internet able extend complex component overriding something scriptlevel also small overrides template level simplest way achieve per example would html stuff import base base export default extends base components base base big bug waiting happen nonsimple safe ways proxying props methods slots events around andor lots custom vars sprinkled template author put cumbersome fragile love vue precisely allows ooplike multiple inheritance mixins fact templates extendable manner ruins fun pretty quick case makes development unnecessarily difficult code hard understand newcomers project highly simplified example still convincing enough provide reallife code become unnecessarily complex due lack template inheritance extensively discussed seemed agree issue although obviously nt agree severity perceived us however rejected proposed solution extra composition model greatly muddles structure program reasonable argument proposal solves issue preserves composition model looking natural clean", "d": "10/2017"}, {"body": "xlotlu really like approach making use existing slot mechanism component extension sure whether proposed syntax best least good starting point discussion finally decided add two cents still bit surprised frustrated hours research thinking tinkering stumbled upon article helped feel completely dumb unable figure solve problem existing means someone else already said fact people use templating libraries like pug component inheritance proof enough demand completely ignored problem approaches think using existing mechanisms like mixins slots want change javascript markup always end implementing composition elements least two times slot mechanism expects data passed parent child parent template resides child actually whereas class inheritance within javascript works opposite way something couples together would useful nt think using scopes define potential child component able merge additional content parent template bad op points nt see feature would collide conventional scopes feature request defining rules existing scopes could used way round within child component enable semantically correct component inheritance said neither vue javascript expert therefore certainly overlooked important points speak feature also anyone think elegant way implement component inheritance like described linked article pure vue please share thoughts", "d": "1/2018"}, {"body": "xlotlu sorry really nt see provides get right example whole new instance parent component created proposed approach child component parent actually instance created situation parent either serves prototype child directly used level markup tree equivalent independent instances possibility inherit extend parent within child template makes possible couple class extension script level would therefor enable full component inheritance imho template inheritance makes sense conjunction component class extension also understand aiming help look content distribution templates component class extension separately claimed mechanism bring two together therefor provide api content manipulation child parent destroying original semantics slots system see want", "d": "1/2018"}, {"body": "shameless copypaste comment issue mentioned currently running kind issue extending component purpose render something canvas parent component component called canvasbox want extend component add separate logic specific use case use case also need add elements canvasbox slots extending template least filling slots without proxying props events etc like justineo said introducing another language like pug able looks overkill introducing native vuejs way filling slots would amazing btw ca nt include canvasbox component new component template logic canvasbox created hook rendering canvas using canvasbox component template would cause run logic twice last least would also love easy way extending template least filling slots component extended", "d": "6/2018"}, {"body": "also want make proposal eyes better syntax follows html default header html import base basevue export default name somecomponent extends base", "d": "6/2018"}, {"body": "dvdbot straightforward obvious remains problem default slot though fact currently multiple template blocks nt make sense vue related note feature wanted could define subcomponents locally eg html import thing thing import subthing subthing export default thingextend components subthing subthingextend template subthingtpl currently running kind issue extending component purpose render something canvas incidentally encountered similar scenario using rendering vue datahandling backbone", "d": "6/2018"}, {"body": "default slot gt", "d": "6/2018"}, {"body": "currently using cheaty workaround p works p", "d": "6/2018"}, {"body": "understand arguments actual extend template built language using parent version template initializes another extra unnecessary component nt optimal performance agree weird nt built language avoid extra component simplify props passing however pattern using parent element slot quite easy since one first google results topic clean solution worked well us vue base component special label export default name basecomponent props label type string required true vue inheriting component extraprop extraprop import basecomponent basecomponent export default name inheritingcomponent components basecomponent extends basecomponent inheritattrs false props extraprop type string default goodbye data return somemodel test usage output html special hello world extraprop nevermind", "d": "6/2018"}, {"body": "problem running using example bbugh got logic created hook draws something canvas using example created hook called base extending component want drawing done twice also ca nt override created hook without adding custom merge logic adding custom merge logic global local component far know adding custom merge logic may cause unfurseen side effects", "d": "6/2018"}, {"body": "cheated props part using following using vbind props", "d": "6/2018"}, {"body": "also extending basecomponent", "d": "6/2018"}, {"body": "bbugh covered approach initial rebuttal rejection called big bug waiting happen reason dvdbot hooks watchers nt aware still nt solve problem", "d": "6/2018"}, {"body": "xlotlu dvdbot could get thoughts possible solution", "d": "7/2018"}, {"body": "imho would great template inheritance part vue core components inheritance mean js part nt template inheritance child vs parent template shortly becomes pain case extracted base components example editform child fields buttons save save amp continue cancel copypaste html code suggestion use parent separate component inside child template also nt work nt like want one child component levels script template", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "dup", "d": "10/2017"}, {"body": "please check closed issues opening new ones dup", "d": "10/2017"}, {"body": "also facing issue using vue local dev environment production use minified version version issue nt happen", "d": "10/2017"}, {"body": "facing issue fix", "d": "10/2017"}, {"body": "dup", "d": "10/2017"}, {"body": "problem", "d": "10/2017"}, {"body": "please check closed issues opening new ones dup", "d": "10/2017"}, {"body": "dup", "d": "10/2017"}, {"body": "please put actual template lead output", "d": "10/2017"}, {"body": "version vue using token represent change event radio checkbox anymore using vue run code generated", "d": "10/2017"}, {"body": "javoski example ui libraries released compiled code work webpack browser imo might little difficult assure party libraries project always compiled minor version seems resulting breaking change party libs suggest documented", "d": "10/2017"}, {"body": "true people need rebundle libs think communicate remember something similar past", "d": "10/2017"}, {"body": "fyi unintended preserve backwards compat next patch release", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow set every property want transition", "d": "10/2017"}, {"body": "fnlctrl nt dup many others", "d": "10/2017"}, {"body": "joy joy joy looks like close wait release", "d": "10/2017"}, {"body": "dup", "d": "10/2017"}, {"body": "looks like already fixed", "d": "10/2017"}, {"body": "related upgraded rollup build system revert build system changes run dev build worked see sure dev dependency causes still needs investigation new build file", "d": "10/2017"}, {"body": "well caused rollup let see line removed rollup tree shaking used reflow document", "d": "10/2017"}, {"body": "\u4e0d\u4f1a\u5148\u641c\u4e00\u4e0b\u5417", "d": "10/2017"}, {"body": "use", "d": "10/2017"}, {"body": "actually think like", "d": "10/2017"}, {"body": "similar issue one tag also renders", "d": "10/2017"}, {"body": "please tag soon", "d": "10/2017"}, {"body": "source code getlist function main html var getdataasync apijoinus amp categoryid thiscategoryid get null function data datastate thisdatajoinsplice thisdatajoin thisdatajoinconcat datadata thisdatajoin datadata nexttick function main removeclass gaodu else alert \u6570\u636e\u8bf7\u6c42\u5931\u8d25", "d": "10/2017"}, {"body": "valid reproduction", "d": "10/2017"}, {"body": "never set anything execution computed prop always returning null changes computed prop considered uptodate sure brush changes tracked", "d": "10/2017"}, {"body": "apologies clear expecting variable updates recalculate computed prop see comment return null line indeed happen", "d": "10/2017"}, {"body": "expand previous post nt even see calculating futuretime log message unless comment line leads believe vue nt properly tracking interestingly add another statement check eg see via console logs computed prop recalculated although still set null expected due line inconsistent tracking behavior seems like bug pretty new vue", "d": "10/2017"}, {"body": "totally expected behavior return line accesses even evaluated registered dependency computed property fact desired behavior case return result nothing recalculating changes unnecessary becomes truthy recalculate track returned value depends", "d": "10/2017"}, {"body": "thanks quick responses got actual code working expected learned vue change tracking well posterity adapting suggestions", "d": "10/2017"}, {"body": "gave shot possible add think could introduce inconsistent behaviors complexify validation example weird used type expect rules validate course could say user responsible type validation inside validator could even add warning people may want use time bit similar attribute example moment validator runs field set value provided maybe late tired", "d": "10/2017"}, {"body": "sure follow concern posva nt see feature effecting current behavior could missing something would nt continue behave currently", "d": "10/2017"}, {"body": "wouldnt right non required prop value never runs validator means order support usecase run validator even value provided show warning throw error depending validator people using actually validate information basically think wrong place could maybe support function gets passed props stripped production edit sur letting function good idea", "d": "10/2017"}, {"body": "damn see concern one two props required neither passed neither validator ever run warning thrown dedicated function might better place keep brainstorming apis thanks", "d": "10/2017"}, {"body": "closing since seems able find good solution concerns possible implement logic lifecycle hooks eg", "d": "3/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "try remove extra look example docs", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "\u5982\u6587\u6863\u6240\u8bf4", "d": "10/2017"}, {"body": "\u4e0d\u597d\u610f\u601d \u6211\u8fd8\u5f97\u8ffd\u95ee\u4e00\u53e5 \u5728\u8fd0\u884c\u65f6 children\u786e\u5b9e \u4e0d\u9700\u8981\u4fdd\u8bc1\u987a\u5e8f \u4f46\u662f\u521a\u521a\u542f\u52a8\u5b8c\u6210\u65f6 \u987a\u5e8f\u662f\u5bf9\u7684 \u6211\u89c9\u5f97 \u5728\u70ed\u90e8\u7f72\u72b6\u6001\u4e0b \u5e94\u8be5\u548c\u65b0\u542f\u52a8\u72b6\u6001\u4fdd\u6301\u4e00\u81f4 \u5f88\u4f9d\u8d56\u73b0\u5728\u7684\u70ed\u90e8\u7f72\u673a\u5236 \u5f53\u7136\u901a\u8fc7\u670d\u52a1\u7aef\u6e32\u67d3\u4e5f\u5e94\u8be5\u80fd\u8fbe\u5230\u6548\u679c \u4f46\u662f\u8d44\u6e90\u6709\u9650\u8fd8\u662f\u5e0c\u671b\u70ed\u90e8\u7f72\u53ef\u4ee5\u652f\u6301\u7c7b\u4f3c\u521d\u59cb\u5316\u65f6\u6b63\u786e\u7684\u987a\u5e8f", "d": "11/2017"}, {"body": "purposely setting variable", "d": "10/2017"}, {"body": "involves party library please either provide clean repo using plain vue open issue elementui repo instead", "d": "10/2017"}, {"body": "tested still seeing issue understand busy especially release want make sure issue nt get lost since handling errors serious issue anyone ssr async components thanks", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "belongs vuejsvuejsorg something probably add cookbook pull request start discussion initial material even appreciated", "d": "10/2017"}, {"body": "need understand difference component definition component instance trying call method directly definition wo nt instance point", "d": "10/2017"}, {"body": "hi dwcy sorry quasar perfoming way expect topuic vue issue tracker understand think might something vue ca nt wo nt analyse whole quasar app performance issues adress quasar community find specific behaviour vue reproduce small example quasar like unuusual cpu spikes memory leaks feel free open issue though", "d": "10/2017"}, {"body": "issue actually css keyframes animation working well multiple updates found noticed chrome rendering feature exists turned paint flashing fps meter directly vue problem close", "d": "10/2017"}, {"body": "collections supported browsers support yet thought discussed another issue could nt find case something added drop support older browsers", "d": "10/2017"}, {"body": "ah found thanks clear something plan add future version", "d": "10/2017"}, {"body": "\u8bf7\u628a issue", "d": "10/2017"}, {"body": "either npm network problem", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "prop nt optional props bypass type check", "d": "10/2017"}, {"body": "seems like confusing behavior bypass type check nt default value used one provided binding could warn situation occurs", "d": "10/2017"}, {"body": "value purposefully assigned overwriting default would unexpected", "d": "10/2017"}, {"body": "guess questions bypass type check", "d": "10/2017"}, {"body": "specify prop without essentially saying prop may present present type string value expressing type present say expect type check enforced cases add", "d": "10/2017"}, {"body": "specifies type present nt default value used seems contradictory", "d": "10/2017"}, {"body": "hmm yeah needs accurate indicates value explicitly marked present remain indicates value present default value used available indicates neither allowed unless default used agree could confusing existence vs language design trying stay close values designed represent js changing would breaking", "d": "10/2017"}, {"body": "would adding warning dev mode situation acceptable would nt breaking would help people detect edge scenarios three situations seem unlikely desired property default value type requirement binding value property default value without specify default value nt required really use case letting people bypass default value binding property default value type requirement binding value", "d": "10/2017"}, {"body": "working expect mixin takes precedences try adding something child childmixin components put mixin child childmixin would overwrite well", "d": "10/2017"}, {"body": "inerhit merged thus resulting inerhited method override final according docs behavoir describe happen either", "d": "10/2017"}, {"body": "unlike lifecycle hooks methods merged overwritten", "d": "10/2017"}, {"body": "options expect object values example methods components directives merged object component options take priority conflicting keys objects docs inaccurate", "d": "10/2017"}, {"body": "b two methods objects edit ooh mean mixin vs component", "d": "10/2017"}, {"body": "key problem apparently consistently behave noted docs well aware two components true using combination happen logical oop paradigm", "d": "10/2017"}, {"body": "explain inconsistent fair mixins nt exist oop nt see referring", "d": "10/2017"}, {"body": "scenario like component class method mixin method component class b inerhits component mixin b method inerhited component mixin merged method already found inerhited componentb method used whereas currently like component class b inerhits component mixin b mixin merged mixin method used inerhition ignored", "d": "10/2017"}, {"body": "take well sure mixins standard documentation could say mixins override anything component inherits via thing right undocumented", "d": "10/2017"}, {"body": "well according wikipedia would say common sense mixins also would nt say works consistently hand documenting accurately would saved nerves", "d": "10/2017"}, {"body": "imo mixin local take precedence extended component happens local properties take precedence mixins", "d": "10/2017"}, {"body": "nothing oop different options vue different merge strategies lifecycle hooks merged way preserves hooks inheritance chain return values instead produce side effects methods name simply overwrite parent value methods return values would cause ambiguity value return merged single function assetregistration options like see op means essentially problem options comes take higher priority options coming mixin", "d": "10/2017"}, {"body": "ok still think current behavior expected example mixin applied instead mixin considered part options would overwrite whatever inherited mixin applied directly see logged instead however general nt like idea overapplying oop composing ui components especially confusing overrides like", "d": "10/2017"}, {"body": "nt think consolelog template saw easily doable userland also add call template", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "use note nt populated hook refs get populated first render access using hook", "d": "10/2017"}, {"body": "good idea instead exposing option id expose option make script selfremoving even think removed default turned development", "d": "10/2017"}, {"body": "even better shall work pr", "d": "10/2017"}, {"body": "markbrouch yes please", "d": "10/2017"}, {"body": "well think tag nt read entryclient implementation usually nt think automatic removal possible one thing could provide boolean option append attribute tag could read vuex storereplacestate removed", "d": "10/2017"}, {"body": "script registers global variable permanent side effect removing nt make variable go away", "d": "10/2017"}, {"body": "oh see getting script tag delete immediately since already dumped global context", "d": "10/2017"}, {"body": "tested latest vue build seems still case using removed vue router well memory leaks better provide html pages heapshot way way faster take html document home foo const home name home template lt div gt text lt div gt data function return text home const foo name foo template lt div gt text lt div gt data function return text foo lt p gt new vue el app data msg hello world comp home components home foo removing prop stops object count increment keeps increment retained size component sure intended edit herringtondarkholme add repro link", "d": "10/2017"}, {"body": "preliminary investigation tells discrepancy cached vnode parent parent contains stale child case home thus entire list component instances nt collected", "d": "10/2017"}, {"body": "nt investigated tried guess reading keepalive component could also come place interested fix though memory leaks interesting js", "d": "10/2017"}, {"body": "code seems still problem test", "d": "10/2017"}, {"body": "thank much works", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "\u8c22\u8c22 \u7b80\u5355\u7684\u4e1c\u897f\u5f04\u590d\u6742\u4e86 \u73b0\u5728\u6253\u4e2a\u5305\u80fd\u6210\u529f \u65e0\u6cd5\u8fd0\u884c \u63d0\u793arouter\u4e3aundefined", "d": "10/2017"}, {"body": "\u5df2\u7ecf merge \u4e86", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "please open pull request vuejsvuejsorg instead feature request", "d": "10/2017"}, {"body": "ca nt special behavior expressions custom directives something like", "d": "10/2017"}, {"body": "removing check would nt fix break existing usage transpiled modules need way check object native module object dynamic import", "d": "10/2017"}, {"body": "mean remove check ie change", "d": "10/2017"}, {"body": "safe enough imo would break user somehow defines custom option called found way detect native namespace object checking", "d": "10/2017"}, {"body": "note fix needs route async components work", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "vue expression validation parse expressions supported node version using object spread supported unless use node", "d": "10/2017"}, {"body": "thanks lot", "d": "10/2017"}, {"body": "hello giorgiomartini thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow discord chat happy help", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "10/2017"}, {"body": "expected behavior hook instead", "d": "10/2017"}, {"body": "fyi already pr tracking", "d": "10/2017"}, {"body": "close via", "d": "10/2017"}, {"body": "think behavior added data computed docs", "d": "10/2017"}, {"body": "expected behavior data changes updates dom trigger events events triggered change came user interaction control use watcher instead dom event listener otherwise manually dispatch synthetic event watcher", "d": "10/2017"}, {"body": "referring using watch docs say use isnt referring suggest something add via javascript doesnt require anything vuejs use listen changes select vmodel makes thanks feedback huge fan vuejs really appreciate amazing framework built", "d": "10/2017"}, {"body": "talking abbout vue watchers nothing linked", "d": "10/2017"}, {"body": "tonystar reading issue get intention drupal tries rewrite frontend using vue could read additional ux improvements admin ui please clarify think many people miss point moment", "d": "10/2017"}, {"body": "could read additional ux improvements admin ui think first step drupal vue core easily use theme framework frontend admin ui pages soon get vendor js framework library vuereact means point use another library inside project choice vuereact admin ui equal choice main jslibrary whole drupal infrastructure", "d": "10/2017"}, {"body": "adubovskoy exactly initially meant let gently highlight dawehner others theme framework frontend admin ui pages choice vuereact admin ui equal choice main jslibrary whole drupal infrastructure", "d": "10/2017"}, {"body": "precaucious note vue maintainers please comment discussions meaningful argument contribute nt clog useless vote vue comments something similar wo nt help use way intend critizise react factbased civil manner argue vue rather react feel need write witnessed endless flood useless comments similar thread wordpressguttenberg tonystar could link comment op even better edit", "d": "10/2017"}, {"body": "linusborg note added also particular issue intended involve vue team selection process discussion", "d": "10/2017"}, {"body": "thanks also particular issue intended involve vue team selection process discussion really clear thanks", "d": "10/2017"}, {"body": "think discussing future web components really important large discussion nt know lot topic seems like react saying nt care web components last paragraph section talks vuejs web components future project also totally feasible offer deeper integration vue web component specs custom elements shadow dom style encapsulation however moment still waiting specs mature widely implemented mainstream browsers making serious commitments think clarifying statement vuejs core team thoughts since article written would aid discussion one reasons like vuejs seems like easier transition web components specs mature frameworks like react think lot people look towards comparison article inform framework decisions", "d": "10/2017"}, {"body": "closing issue accomplished goal raising awareness discussion better continued drupal threads", "d": "10/2017"}, {"body": "thanks comprehensive answer exactly expected issue", "d": "10/2017"}, {"body": "posted also make sure specify changes made fresh scaffold repro commit history look", "d": "10/2017"}, {"body": "fyi directives server needs implemented completely different fashion vnode transforms dom access also nt see point creating fresh directive instances request somehow inject app piece application state accessed across app instance request", "d": "10/2017"}, {"body": "thanks taking time review say somehow inject parsedlangheaderlanguage app piece application state accessed across app instance request think cases appropriate consider example desired translation directive html hello could instead html hello feels verbose application given vue exsiting api dont see avoid understand directives nt dom access server feature request likely naive make easy provide application state directive creating time per request doesnt passed directive throughout entire application", "d": "10/2017"}, {"body": "expected javascript works sharing object reference nothing cloning correct solution", "d": "10/2017"}, {"body": "thanks", "d": "10/2017"}, {"body": "technically event named ca nt assume bad syntax due decoupled nature events possible active detect wrong event names without writing explicit code telling us events child component may possibly emit quite straightforward write userland plugin checks assert valid", "d": "10/2017"}, {"body": "ts inside export class try get error gt expected guess babel similar reach state template testmethod valid straightforward plugin good idea think case would obvious framework", "d": "10/2017"}, {"body": "normal vue makes things added onto data reactive add something wo nt reactive example want creating new vue instance data", "d": "10/2017"}, {"body": "posva create reactive properties plugin possible ps application plugin another file", "d": "10/2017"}, {"body": "look fiddle also look plugins like vuex see achieve reactivity", "d": "10/2017"}, {"body": "example ignored nt exist context used exist component however show error saying defined", "d": "9/2017"}, {"body": "think isshow defined get false still display", "d": "10/2017"}, {"body": "using scoped slot nt make sense case abstract container inner template add warning though", "d": "10/2017"}, {"body": "know put vif parent tag redundancy invalid", "d": "1/2018"}, {"body": "want control existing since nt make sense invalid add wrap like", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "probably kind outofsync issue sure solve anybody knows examples wrapping axios function shared manyk vue components could find good one online", "d": "9/2017"}, {"body": "taozhaolib nt return anything function function asynchronous ca nt assign variable like correct usage component", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "herringtondarkholme thanks", "d": "10/2017"}, {"body": "storing options vue instance know nt fix issue might temporary workaround", "d": "9/2017"}, {"body": "html works removes spaces text vue gets text one space specify value spaces directly element yield result expect", "d": "9/2017"}, {"body": "fyi general never rely multiple whitespaces html text use explicit bindings", "d": "9/2017"}, {"body": "thank replys solved problem", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow use user component class check myclass auto clear vue formwork expected behaviour probably handle class addition hook directive well always keep", "d": "9/2017"}, {"body": "working expected bad practice modify input user typing however force value input nexttick also listen blur set back value fyi value equal even though input nt reflect", "d": "9/2017"}, {"body": "thanks explain work nexttick", "d": "9/2017"}, {"body": "changes value browser actually displays", "d": "9/2017"}, {"body": "nt consoleerror error instead throwing inside errorhandler point error handler throw error", "d": "9/2017"}, {"body": "patch submitted raven lot logic errorhandler increase value reported error good stuff actually without careful trycatches mention things made suspect nt run vue plugin production much said failure mode silent catastrophic hard debug figured quick trycatch around errorhandler might save people future headache", "d": "9/2017"}, {"body": "think nt throw errors errorhandler treat generate new one ignore throwing", "d": "9/2017"}, {"body": "agree however nt think app nt crash especially since easy prevent error becoming catastrophic", "d": "9/2017"}, {"body": "throwing errors js make apps crash", "d": "9/2017"}, {"body": "almost anywhere vue app throwing error", "d": "9/2017"}, {"body": "dts actually throw error vue app commit way anymore would need testing vuejs app google chrome using cypress want let test fail error change possible anymore would actually raise error happens inside vue component", "d": "8/2018"}, {"body": "context would helpful guess may able set error handler hook cypress letting exceptions escape usually ideal caught reported somewhere error handler", "d": "8/2018"}, {"body": "ca nt computed properties different components may rely different source state bound different instances", "d": "9/2017"}, {"body": "use method", "d": "9/2017"}, {"body": "markdown content execute hundreds times per second sliw app computed property executed isnt", "d": "9/2017"}, {"body": "use would execute multiple times well want caching need use computed anyway", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "simply watch value", "d": "9/2017"}, {"body": "firefox amp chrome handle clicks checkboxes differently way sure either checked value kkszymanowski pointed listen event vue internal logic ensure model uptodate userland event handlers fire handlers attached correct events case edit interesting reading around issue eventsjs", "d": "9/2017"}, {"body": "listens event different browsers fire different orders unfixable vue different browser behaviors suggested instead using click listener use watcher instead care state click event", "d": "9/2017"}, {"body": "easily userland creating higherorder transition component", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "well way", "d": "9/2017"}, {"body": "know use normal html comment tags components eg top section wondering best recommended solution yes js use", "d": "9/2017"}, {"body": "hi nt want comment code per line html js question fact describe components general way grtz johnny", "d": "9/2017"}, {"body": "many ways using comments top script tag would go generally comment component would comment code", "d": "9/2017"}, {"body": "think question new block singlefile templates custom blocks already possible vueloader documentation regarding already use block ignored vueloader", "d": "9/2017"}, {"body": "thanks everybody time reply pandemm indeed custom block trick nt know existence possibilities thank link pointing right direction kind regards", "d": "9/2017"}, {"body": "comment block code vuejs", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "take one", "d": "9/2017"}, {"body": "imo requires much internal refactoring potential complexity cater niche use cases personally yet run case even need use reaching child component instances really meant workarounds recommended practice", "d": "9/2017"}, {"body": "thanks evan case facing fed column holds rendering header default component render well cellrender special function special function retrieved table slots rendered part table template works great simple functional data rendering advanced features cellrendering requires access column instance render select column trigger events example smart way missing", "d": "9/2017"}, {"body": "went finally using slots directly provide enough information render cell directly although advanced features still access column instance necessary slot object attribute moment rendering results undefined technical limitation thank time looking", "d": "9/2017"}, {"body": "checking moment table rendering childs nt yet inited cells rendered meaning instance associate opted simple workaround assigning children table local data forcing rerender time instances available try find right instance say try easy way know associate slot instance far using node tag props", "d": "9/2017"}, {"body": "run situation useful instance currently writing component enable layout list items nonconstant order columns different layout modes different purposes ca nt use flexbox purpose due browser compatibility cases like knowledge vue way within get children rendered order without explicitly letting component know items like parent component able act without knowledge yes bit edge case found people problems google searching led thread", "d": "4/2018"}, {"body": "create event emitter components question tackle problem", "d": "4/2018"}, {"body": "nblackburn well content passed via slot therefore listen events emitted instances via slot within component guess fine nt solve problem source items array displaying corresponding set fields sidebar allow deletion addition reordering said items add item reorder ordering lost know fix means passing original array items may maintain internal map items child components correct order little cleaner children maintains correct order plus want component work places content dynamic array items make prop optional increases chances developer forget pass array items use case used document template editing system way component used many times single template would forgotten introduce bug may easily escape testing ca nt help feel like nt make sense children array would reflect actual order components kind feels like something old version internet explorer would childnodes property element", "d": "4/2018"}, {"body": "plus comment says example provided op thread components coupled design suggests emitting events parent via parent advocate use parent advise using children feels little inconsistent add understand development nt straightforward change may incur fair deal work wanted add two cents name consistency sake consistency", "d": "4/2018"}, {"body": "caelanstewart nt mean allow demonstate create file house event bus javascript import vue vue let eventbus new vue export default eventbus import eventbus components want communicate across emit event comonent createdmounted destroyed javascript created eventbus emit columnadd beforedestroy eventbus emit columnremove simply handle event parent component like give instance independent components allows track order mounted works added", "d": "4/2018"}, {"body": "nblackburn doest allow track items reordered though mounted destroyed hooks items called second time move element array one index another take look jsfiddle demonstration see initial array items root vue component root vue components mounted hook simulate user reordering items components already mounted take look console mounted hooks fire initial instantiation components two seconds items reordered see updated hooks fired components problem idea new index items inside updated hook information passed argument plus response suggestion event bus use event bus use multiple instances going work compare parent component check indeed child parent child another instance would better use child component done js fiddle", "d": "4/2018"}, {"body": "anyway regardless fix said previous comment already solution ideal point introduce faff able track reordering components get array components correct order wanted add cents problem introduces inconsistency one seems vue like least knows enough people end agreeing maybe happen", "d": "4/2018"}, {"body": "caelanstewart never suggested direct answer decoupled way parentchild communication could applied get closer something works become hurdle try think issue different way nt think problem vue solve", "d": "4/2018"}, {"body": "nblackburn okay fair enough bit confused suggesting something nt fit case", "d": "4/2018"}, {"body": "amongst huff adding two retrospectively cents neglected properly read responses thread see miljanaleksic used slots solution indeed work access child components correct order", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "ehm didnt help", "d": "9/2017"}, {"body": "need use vueloader vue", "d": "9/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow related vue put font folder refer", "d": "9/2017"}, {"body": "posva thanks reply felt bit like grey zone try forum instead cheers", "d": "9/2017"}, {"body": "\u662f\u7531\u4e8e\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0bvueloader hrm\u63d2\u5165\u4e86require vue \u5bfc\u81f4vue\u6a21\u5757\u4f7f\u7528\u7684vue\u4e0e\u5168\u5c40vue\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61", "d": "9/2017"}, {"body": "\u662f\u7531\u4e8e\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0bvueloader hrm\u63d2\u5165\u4e86require vue \u5bfc\u81f4vue\u6a21\u5757\u4f7f\u7528\u7684vue\u4e0e\u5168\u5c40vue\u4e0d\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 hxfdarling", "d": "4/2018"}, {"body": "hxfdarling", "d": "5/2018"}, {"body": "\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528vue\u65f6 import \u8fdb\u6765\u5373\u53ef", "d": "5/2018"}, {"body": "hxfdarling", "d": "5/2018"}, {"body": "\u4e0d\u8981\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u5373\u53ef", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow discord chat happy help", "d": "9/2017"}, {"body": "expected think renders controlled content hides initial render modal rendered accordingly defined transition triggered hook called understand expect transition run since defined value parent component child component ca nt know circumstance transition still runnning solution use instead", "d": "9/2017"}, {"body": "reason ca nt use transition transition design outer container use control display inner transition wo nt trigger show set false modalvue component uses modal vue title content cancel confirmtext ok import card srccomponentscard import fadetransition srccomponentsfadetransition import modal srccomponentsmodal import vbutton srccomponentsbutton export default name confirmpopup components card fadetransition modal vbutton props title content confirmtext resolve data gt show true created documentbodyappendchild mount el methods confirm bool thisshow false thisresolve bool settimeout gt destroy documentbodyremovechild el way remove prop simulate feature vue export default props show data show false mounted nexttick gt thisshow thisshow simulate appear feature", "d": "9/2017"}, {"body": "expected behavior applied wrapping slot content whether modal shown concern", "d": "10/2017"}, {"body": "reproduction meet requirements", "d": "9/2017"}, {"body": "exports es module need", "d": "9/2017"}, {"body": "", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "printed document see changed correctly changed correctly switches class correctly applied missing", "d": "9/2017"}, {"body": "linusborg changes dom print tag however using event instead makes work", "d": "9/2017"}, {"body": "linusborg posva took look happening simpler fiddle think flow events leading bug user changes selection event fires componentupdated function called handler updates value reverts selection back original value binding since vue nt received event yet event fires loop select options reset step nt update vue instance correct value far solution think want make sure event handled user added event handlers thinking could normalizeevents think possible reorder handlers event create pull request little guidance would helpful note replicable firefox unless put breakpoints actuallysetselected listener callback vue adds input element events unit test issue please select alpha beta mount documentbodyappendchild vm el vm elchildren selected true triggerevent vm el input waitforupdate gt triggerevent vm el change gt expect vm elvalue tobe alpha done", "d": "10/2017"}, {"body": "fyi ie edge trigger elements probably use instead anyway", "d": "10/2017"}, {"body": "value nt change vue nt update dom", "d": "9/2017"}, {"body": "works feels like cracking nut sledgehammer guess force update input via ref maybe vue shoud update elvalue every time input event triggered way even binded value nt change node value date", "d": "9/2017"}, {"body": "actually described previous message would nt work value filter nt done directly parent component case even forceupdate nt work nt force children rerender following tree one filtering value passing component tree force rerender", "d": "9/2017"}, {"body": "since turned questiondiscussion please move forum chat room instead", "d": "9/2017"}, {"body": "would still consider small bug attribute node actual value unsynched actually changes currently quick workaround rerenders current component children post find workaround others use", "d": "9/2017"}, {"body": "would suggest use", "d": "9/2017"}, {"body": "thanks suggestion problem would bind cleave would nt able parent components using input dirty solution found following following component tree adds attribute way input event triggered force node value update sanitized value hacky works case element component nt need support browsers nt support", "d": "9/2017"}, {"body": "instead api like simply define two components override js const baselogic const bootstrapversion extends baselogic template bootstrap const semanticuiversion extends baselogic template semanticui want single point entry external users define functional component renders internal component based config value", "d": "9/2017"}, {"body": "thanks", "d": "9/2017"}, {"body": "nt think currently defined act element provided begin would nt classify bug certainly room improvement least transition skipped componentb rendered work around adding wrapper div", "d": "9/2017"}, {"body": "wrap div transition wo nt take effect data loaded", "d": "9/2017"}, {"body": "pretty sure error past tried use without root node using multiple root nodes", "d": "9/2017"}, {"body": "found ugly solution add empty every router view component needs wait data", "d": "9/2017"}, {"body": "expected behavior vdom definition needs generate virtual elements iterate find diffs obvious way optimize please submit pr", "d": "9/2017"}, {"body": "add wrapper example arraypush arrayfilter make possible computed properties basis vue understood elements array changed", "d": "9/2017"}, {"body": "calculations take think pretty decent score large array curiosity checked react case takes around ms render size array pc vue said ms", "d": "9/2017"}, {"body": "native js action takes ms exception layout update layer tree vue ms huge difference sure make possible tell vue particular part array changed", "d": "9/2017"}, {"body": "modifying dom manually always faster skip data update virtual dom diffing parts thing ca nt realistically write dom manipulations directly building medium big app become complex eventually end buggyunmaintenable code vue abstracts dom away nt need think definition abstractions cost", "d": "9/2017"}, {"body": "understand still think possible prompt vue changes data need pay attention ones propose get rid vdom want possible flexibly organize rendering could tell vuejs added element array change vue could take previous version vdom add one element rerendering rest synchronizing vdom dom case vue would know elements changed would added one new think quite feasible would greatly enhance rendering performance", "d": "9/2017"}, {"body": "sure could applied case dividing multiple components way cache parts vdom", "d": "9/2017"}, {"body": "adding one item array always means adding one element domlist may complicated template looks like html add message message", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "\u7528 import message messagevue \u4ee3\u66ff require messagevue import vue vue import message messagevue let alertconstructor vueextend message", "d": "11/2017"}, {"body": "maysnow mint\u7684\u6e90\u7801\u4e5f\u8fd9\u6837\u5199\u7684", "d": "12/2017"}, {"body": "skottiewang \u5bf9\u7167\u8fd9\u4e2aissue\u770b", "d": "12/2017"}, {"body": "mix require export ca nt mix import moduleexports skottiewang notifications githubcom maysnow mint\u7684\u6e90\u7801\u4e5f\u8fd9\u6837\u5199\u7684 receiving mentioned reply email directly view github mute thread", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "vue\u6587\u4ef6\u4e2d\u7684script\u6807\u7b7e\u80fd\u5426\u76f4\u63a5import\u4e00\u4e2ajs\u7684\u7c7b\u800c\u4e0d\u662f\u4e00\u4e2a\u5bf9\u8c61 \u76f8\u5f53\u4e8e\u5df2\u7ecf\u4f7f\u7528vueextend \u5bf9\u8c61 \u540e\u7684\u7c7b", "d": "9/2017"}, {"body": "already use async components please read docs", "d": "9/2017"}, {"body": "using directives components api suggesting close already exists components", "d": "9/2017"}, {"body": "wish could create custom directives way create custom components think sentence says", "d": "9/2017"}, {"body": "api usage different", "d": "9/2017"}, {"body": "appreciate support vue proposed api something would consider vue used similar functionalities directives end duplicating everything directives components concept becomes convoluted similar angular directives essentially god concept anything intentional decision vue limit directives one dedicated purpose low level dom manipulation nothing else also due rendering mechanism vdom directives instances thus componentlike api feasible first place point time want achieve directives achieved components functionalities simulated leveraging directive hooks expand directive api unless strong use case solved", "d": "9/2017"}, {"body": "understand reasoning behind cool able everything need custom attribute one thing binding like let say click button value changes hook function called nt found way react changes suggestions", "d": "9/2017"}, {"body": "tochoromero sounds like bug please open separate issue reproduction", "d": "9/2017"}, {"body": "actually bad bug trying reproduce bare minimum showed bug thank taking time answer rock", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "9/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "9/2017"}, {"body": "meant receive nt argument perhaps warning development would help alleviate confusion already documentation", "d": "9/2017"}, {"body": "actually get similar made think could directly bind string adding warning could helpful want see something making users understand use something else object", "d": "9/2017"}, {"body": "posva sure exactly picked probably reading code open source projects replicating behavior could certainly ignorance part putting together wrt syntax pretty positive never read nt think reference api docs directly picked general usage looking examples reading different parts docs", "d": "9/2017"}, {"body": "ok thanks changed title", "d": "9/2017"}, {"body": "take one add warning", "d": "10/2017"}, {"body": "known happen use keyindex component reused current version key required ca nt add unique key array element easily yeah also local state todo component note use prop value input see expected behaviour manually add key said fairly easy opinion unfortunately keys necessary removing elements array used", "d": "9/2017"}, {"body": "tested make sure everything working correctly problem case nt belong vue core may related template recommend ask forum discord server case someone error", "d": "9/2017"}, {"body": "thanks would post forum instead happen machine node node may someone encountered issue forum suspect would issue webpack vue anyone encountered issue maybe trying switching node work", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "vue replaces dom element mounted make sure instantiate jquery plugin mounting vue instance preferably hook", "d": "9/2017"}, {"body": "still nt work jsfiddle initialize clicking button initializes still nt update data field good measure one initialize mounted also nt work work vue change mounted ready", "d": "9/2017"}, {"body": "right vue also dropped support jquery events need proxy jquery events real native dom event", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "problem related vue happens plain js", "d": "9/2017"}, {"body": "posva currently problem child get scroll try stop event propagation parent work talk plain js solution", "d": "9/2018"}, {"body": "creates reactivity specific property object inner structure created hook without reactivity move code hook function whole properly reactive", "d": "9/2017"}, {"body": "think find way construct hook today passed via props tomorrow may requested server question use build reactive cool even use redesign using building inside", "d": "9/2017"}, {"body": "realize properly tracking nested substructure required convert however nt really understand overwriting whole prop object instance inside component still cause reactive changes changing property nt question stackoverflow example", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "found works set first later first fail case always set first nt work expect demo nt work", "d": "9/2017"}, {"body": "fixed", "d": "9/2017"}, {"body": "using reproduced", "d": "9/2017"}, {"body": "current useragent guess line nt run works edge changed sqal said sure much thanks", "d": "9/2017"}, {"body": "well little study seems demo ieedge correct html spec safarichrome wrong says parsed value greater equal maximum value current value progress bar maximum value progress bar demo set first setting current value greater maximum value current value set set end position element anyway nt mean syntax vue template wrong correct browser implementations seems using directly without browser detection matches spec thanks", "d": "9/2017"}, {"body": "think related browsers handle updates nonie browsers seem resolve values current javascript event loop ie resolves soon attribute set keeping block ieedge nt think spec actually mandates handled setting attributes sequentially", "d": "10/2017"}, {"body": "agree actually already issue follow keep watching", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hi rename methodes methods", "d": "9/2017"}, {"body": "sorry thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "related explained avoid iteration cost freezing array nt expect mutated longer necessary though", "d": "9/2017"}, {"body": "wait cause cause access already computed property slow put watcher two computed properties working great see even faster also project changes still reflected properly million times faster", "d": "9/2017"}, {"body": "seregpie test wrong watcher called also added tests second one access cached values performant expected third one adds new object base property see value correct final value test watcher nt fired yet reality still accessing cached value get super fast access value results test incorrect make think watcher called instantly also using make watcher detecting potential changes nested arrays unlike computed property default comparison wrong performance issue comes vue building dependencies evaluating computed properties accessing computed properties multiple times adds even dependencies slows component one thing kind performance heavy computed properties access computed property assign local variable example proposed solution may find fact performant using watcher see corrected version watcher test watcher manually added first evaluation computed property times right added next tests also little overhead compared previous withoutwatcher code watcher timer includes call promise constructor notice time taken watcher fire update new element added array tl dr inside computed properties use local variables store computed properties avoid accessing directly multiple times", "d": "9/2017"}, {"body": "\u4e3b\u8981\u662f\u4f60\u90a3\u4e2a\u53d1\u751f\u6539\u53d8\u7684\u7ec4\u4ef6\u548c translate english temporarily easily change html html avoid rerender custom component middle component element tag without propsattrs hard detect update details exactly add special attribute solve thanks", "d": "9/2017"}, {"body": "use div mark however improved sure", "d": "9/2017"}, {"body": "\u8c22\u8c22", "d": "9/2017"}, {"body": "\u770b\u4e0d\u61c2\u54df", "d": "9/2017"}, {"body": "key importatnt", "d": "9/2017"}, {"body": "take stab", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "reproduce", "d": "9/2017"}, {"body": "like idea linking docs error messages", "d": "9/2017"}, {"body": "better reported nuxtjs instead vue core gc log far enough determine cause leak need provide actual code leads leak", "d": "9/2017"}, {"body": "would even start provide code stack solely shows every crash different line general significant clue initwatch createwatch like seems build collect memory watcher dies doubt nuxtjs wraps around watch functionality vue nt see framework could involved", "d": "9/2017"}, {"body": "think first discussed nuxt repo opening issue bug actually ssr engine reference small guide memory leakage reports nuxtnuxtjs", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "vue supports standard dom events", "d": "9/2017"}, {"body": "forgot add every element array", "d": "9/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "expect wrappercontains css selector toequal true", "d": "9/2017"}, {"body": "mmh nt understand point use case lib component gather errors adding properties arrays functions rarely data locally adding functionality adding reactivity", "d": "9/2017"}, {"body": "posva op lib allow users declare asyncmethods vm instance say transform async method add corresponding data property eg also special properties like indicate async method completed op try notify rerendering vuerx also alternative imho vue skip watching non plain objects intention supporting watching functionarray needs handle many edge cases", "d": "9/2017"}, {"body": "thanks explanation herringtondarkholme limitation place method child fetchdataexecute property instead fetchdata especially clunky calling method code thisfetchdataexecute separates async methods normal methods called thisfetchdata understand may feel clunky usecase using different variable name make things better personally prefer serializable data move kind state store methods component root instance", "d": "9/2017"}, {"body": "code illustrates changes needed support functions well couple added tests npm test runs ok existing tests fail would expected failures seems behaviour functions undefined", "d": "9/2017"}, {"body": "new vue js please check fiddle show use reactivity arrays functions little trick please comment paragraph see effect dont understand vue js", "d": "11/2017"}, {"body": "nt think really makes reactive happens update since another property also changes suspect using bvalue computed make computed reevaluate bvalue changes", "d": "11/2017"}, {"body": "herringtondarkholme undesirable add functionality universal behavior would possible add explicit operation instead something like instance counterpart would called working something quite similar mokkabonna library representing async action function invoke action properties representing state approach option vue reactivity system lends really clean way represent state async behavior ui opinion anyway may pure way go packaging state invocation single entity keeps things nice clean concise selfcontained end something like html fetchcommentsisloading loading fetch comments commentbody fetchcommentserrormessage", "d": "2/2018"}, {"body": "add able make work manually calling property want reactive", "d": "2/2018"}, {"body": "nt think want support arbitrary properties nonobject types least default rare nonrecommended usage performance overhead need extra property enumerations function arrays initial observation yes explicitly calling possible workaround", "d": "3/2018"}, {"body": "nt know missed calling manually trick use case solved published new npm version", "d": "3/2018"}, {"body": "less dup closing comment payload checks something handled typings like typescript", "d": "9/2017"}, {"body": "sure understand issue aware extends option", "d": "9/2017"}, {"body": "reread issue", "d": "9/2017"}, {"body": "expected behavior instantiate something nt even resolved yet", "d": "9/2017"}, {"body": "also issue policy explicitly states nt take questions issues please respect rules", "d": "9/2017"}, {"body": "yes want instantiate component resolved yet think feature suggestion would nice async components used way normal ones currently find way vue exposes manually resolve component also spend hours searching solution via channels stakoverflow forums etc", "d": "9/2017"}, {"body": "maps sets currently supported vfor heard possible vue", "d": "9/2017"}, {"body": "currently supported core reactivity detection data structures use simulate", "d": "9/2017"}, {"body": "sqal ok got thanks reply", "d": "9/2017"}, {"body": "thanks", "d": "6/2018"}, {"body": "", "d": "9/2017"}, {"body": "please read licence mit", "d": "9/2017"}, {"body": "mit", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "thanks rrandom issue related svg namespace attached element within gets unexpected behavior trying fix ps seems also broken previous vue version check checks lowercased something", "d": "9/2017"}, {"body": "seems parameter method casesensitive", "d": "9/2017"}, {"body": "related bug unintended feature ref available first render behavior seems come recent release", "d": "9/2017"}, {"body": "workaround using top level buffer div seems super hacky solve problem", "d": "9/2017"}, {"body": "working expected also need root element putting vif root element component probably giving warning error console however use vshow instead always root element component", "d": "9/2017"}, {"body": "seems little quirky though ref first render viffalse", "d": "9/2017"}, {"body": "problem", "d": "10/2017"}, {"body": "someone submitted pull request days ago hopefully satisfactory fix issue looking forward", "d": "10/2017"}, {"body": "unfortunately vue reactivity system designed provide information put another way entails nontrivial changes additions provide api marginal benefits object may used multiple components different relative path information keeping track path information would prohibitively complicated expensive deep watcher recursively registers every property dependency inside reactive objectarray used caution performance implications cases heavy reliance watchers indicate design rethought improved remove reliance deep watchers particularly would probably better discuss actual use cases forum discord chat opening feature request", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "assume", "d": "9/2017"}, {"body": "trusktr called vue caches afterwards please use official chat forum ask questions", "d": "9/2017"}, {"body": "interesting wondering indeed good feature however even foo never logged let see going also indeed saw bot message made forum post instead thanks", "d": "9/2017"}, {"body": "sorry wrong misread output indeed logged thanks tip", "d": "9/2017"}, {"body": "trusktr change values instead check known caveats", "d": "9/2017"}, {"body": "think know work fine", "d": "9/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow lookup vuehackernews github", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "9/2017"}, {"body": "okey found csp version vue looks like version csp version worked webextensions use doc thx", "d": "9/2017"}, {"body": "note also work csp need precompile templates build step", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "normal behavior change permissionkey fire vfor input recreated key uniq case nt", "d": "9/2017"}, {"body": "oh wow bad thought key bound index thanks wszerad input changing value used attribute input rerendered therefore gets focus solution would manually focus key changes using watcher", "d": "9/2017"}, {"body": "use modifier", "d": "9/2017"}, {"body": "actually related lib think using gets stripped nt exist abstract component nt render tag tried using work another solution would wrap component div span", "d": "9/2017"}, {"body": "yeah vshow work vshow vif works well", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "resolve promise vue instance rather promise function returning vue instance proposed solution implies returning promise function wrong usage call function promise current implementation unwrap promise returned server entry code", "d": "9/2017"}, {"body": "sorry find another way resolve problem thanks", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "thanks proposal already deep watching detect nested property changes", "d": "9/2017"}, {"body": "already opened issue vuerouter", "d": "9/2017"}, {"body": "nt need vbind", "d": "9/2017"}, {"body": "keepalive include works component names route names foo component nt name", "d": "9/2017"}, {"body": "happens given home component name", "d": "9/2017"}, {"body": "sqal thank woks", "d": "9/2017"}, {"body": "hi sqal problem fiddle amp solution fiddle components names sure say happens given home component name kindly clarify thanks", "d": "6/2018"}, {"body": "warning message said valid svg element reserved use another name instead", "d": "9/2017"}, {"body": "doh like filter html element svg nt even occur sorry", "d": "9/2017"}, {"body": "bit surprised namespaces ignored hey ho", "d": "9/2017"}, {"body": "limitation watching mechanism watched value object watcher may fired result new property added object fire safe tradeoff correctness vs overfiring cases overfiring would harmless unless extremely expensive callbacks alternatively perform custom check eg shallow compare properties callback avoid real work unlikely change fixed upgrade reactivity system using proxies", "d": "9/2017"}, {"body": "hi problem adding property watched object firing could expected rather adding property parent object", "d": "9/2017"}, {"body": "know explaining possible scenario cater safety measure leads behavior seeing something changed trivially", "d": "9/2017"}, {"body": "thanks insight looking forward proxybased system others running written small pluginmixin use watchexact custom option saves original value fires function new value differs", "d": "9/2017"}, {"body": "scoped slots stored different property", "d": "9/2017"}, {"body": "currently way around suggest normalizing data structure something like another solution would provide api customize stringifying function use something like note also need use parse stringified state client", "d": "9/2017"}, {"body": "thanks reply like use second solution lot work normalizing existing data structure api use custom stringify function serialize initial state found uses eager suggestion using solution", "d": "9/2017"}, {"body": "maybe try gulprolluprolluppluginvue", "d": "9/2017"}, {"body": "try help send email", "d": "9/2017"}, {"body": "gulp task runner vue files module source format must combined sort module bundler work rollup might simplest one moment chrisvfritz repo different strategies integrating vue rails also rails already supports scaffolding webpack vue box flag", "d": "9/2017"}, {"body": "yes true rails going check one question lets say upgrade start using webpack happily continue use old pipeline start using webpack vue new stuff add slowly migrate whatever js stuff need thanks", "d": "9/2017"}, {"body": "giorgiomartini yes check strategies repo evan linked using rails webpacker one reasons prefer managing webpack integrate asset pipeline however want slowly migrate assets like mentioned", "d": "9/2017"}, {"body": "thanks gwildu please refer need write template", "d": "9/2017"}, {"body": "code working seems like introduced", "d": "9/2017"}, {"body": "returning api makes object reactive set vnodes api makes vue attempt convert vnode slot nodes deepcloned rerender fix bugs makes render function register entire vnode reactive dependency mutating vnode triggers rerender workaround could either vnode make api injection reactive", "d": "9/2017"}, {"body": "fix works great thanks", "d": "9/2017"}, {"body": "checkout vuerouter code use strategy hook", "d": "9/2017"}, {"body": "astraygit believe related es module component trying run reproduction first run sfc find several workarounds use commonjs require component use async component like use export object directly maybe move issue vueloader also maybe issue related different ways module resolve es module commonjs always run first enable strategy loading router", "d": "9/2017"}, {"body": "looking built assets confirm issue related difference es module commonjs js es module input import vue vue import vuerouter vuerouter vueuse vuerouter import foo foovue es module output const vue require vue const vuerouter require vuerouter const foo require foovue vueuse vuerouter means es module resolve module first run codes commonjs follow codes order time wrapps sfc vue component already exporting object directly resolve problem believe fix issue", "d": "9/2017"}, {"body": "issue connected hot reloading temporary workaround might js import vue vue import app appvue import home homevue import foo foovue import vuerouter vuerouter vueuse vuerouter processenvnodeenv production fooctor null", "d": "9/2017"}, {"body": "push \u548c curr", "d": "9/2017"}, {"body": "\u4e0d\u662f\u66ff\u6362", "d": "9/2017"}, {"body": "use like following", "d": "9/2017"}, {"body": "think proposed syntax nt solve problem deep watching want specific paths instead whole objectarray changed way already done jounqin pointed", "d": "9/2017"}, {"body": "said need use want prop scoped values slot tag already consumes name attribute internal purposes personally adopted convention wherein use scoped slots loop put item prop well like using component becomes something like course objectdestructuring attribute need babel", "d": "9/2017"}, {"body": "right get around curious reason would works object attribute directly prop check prop bound bind uses attribute inside named slot", "d": "9/2017"}, {"body": "completely valid bind dynamic slot name done first example essentially written two attributes tag one dynamic static compiles something completely different hardcoding attributes use livecompiler see vue compile template", "d": "9/2017"}, {"body": "bind dynamic slot name thank explaining forgot use", "d": "9/2017"}, {"body": "problem named scoped slot render vuecomponent mycomponent template new vue el app", "d": "10/2018"}, {"body": "mikeevstropov codepen linked working see nothing wrong pasted code comment either", "d": "10/2018"}, {"body": "sirlancelot thank reply codepen updated works upgrade vue latest", "d": "10/2018"}, {"body": "relies static information tag used generate appropriate code compilation used generates componentspecific code instead native form element code simply something nt support due compilationbased nature use branches instead", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "ssr html ssr html", "d": "9/2017"}, {"body": "vueloader options", "d": "9/2017"}, {"body": "\u6211\u5728createbundlerenderer \u4f20\u5165 inject false \u540e \u8fd9\u6837\u5199 vue \u91cc\u7684style\u6807\u7b7e\u662f\u8fd9\u6837\u5199\u7684", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "\u4f60\u53ef\u4ee5\u628a\u4f60\u7684\u4ee3\u7801 push \u5230 github", "d": "9/2017"}, {"body": "defcc", "d": "9/2017"}, {"body": "experiencing regression reverting give info available", "d": "9/2017"}, {"body": "fixed", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "locked packagejson vue version work", "d": "9/2017"}, {"body": "perhaps reason question chrome bug documentbodyinnerhtml old value var documentgetelementbyid test cache old textnode var cachetextnode achildnodes update innerhtml ainnerhtml new value output old textnodeparentnode consolelog cachetextnodeparentnode chrome gt null chrome amp chrome gt", "d": "9/2017"}, {"body": "old chrome version point textnode last chrome version point textnode", "d": "9/2017"}, {"body": "textnode dom tree seems get buggy behavior maybe could attach extra info parent node patching dom props workaround eg check oldvnode children mark parent element contains text node", "d": "9/2017"}, {"body": "honestly nt think cater obvious buggy behavior outdated version browser versions behind fix also lets platformspecific code leak core patching algorithm reason app must run older version chrome give two divs different keys work around behavior update seems old chrome higher market share thought", "d": "10/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "9/2017"}, {"body": "weex components recognized svg elements set svg namespace hacked ignore weex components works fine afterwards released fix problem pls check", "d": "9/2017"}, {"body": "ok solved problem", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "reporting vuerouter repo better", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "one final note proposal would also need standarize names transition hooks though nt see huge drawback", "d": "9/2017"}, {"body": "actually move every hook already creating reusable transitions almost solution actually wrap child component inside transition allow pass transition name prop although discourage use approach magic thanks suggestion transition hooks like events want handle way events without introducing different api", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "problem correlates solution", "d": "9/2017"}, {"body": "greabock said", "d": "9/2017"}, {"body": "modifiers mapping dom values back javascript values way around convert strings real booleans initializing app", "d": "9/2017"}, {"body": "use vmodel foo integer bar boolean", "d": "8/2018"}, {"body": "", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "moonou \u8fd9\u91cc\u6a21\u5757\u662f\u6307es", "d": "9/2017"}, {"body": "see", "d": "9/2017"}, {"body": "thanks clarification nt find original issue", "d": "9/2017"}, {"body": "sorry skipped part docs", "d": "9/2017"}, {"body": "define properties initialization work correctly reproduction neither see also", "d": "9/2017"}, {"body": "jounqin thank reply solutions sometimes ca nt define properties initialization example define customer bind properties customer object ajax server get customer informations lot properties need defined", "d": "9/2017"}, {"body": "first binding property template means already know field exists beforehand declare beforehand default create reactive properties however trick force add reactive properties using bracket syntax see still strongly recommend declaring properties beforehand easier time debugging maintaining code long run", "d": "9/2017"}, {"body": "nt know happen component update value ouside without emit", "d": "9/2017"}, {"body": "think jsfiddle implementation pattern tl dr object array must updated child component see value reassigned seen warning props must updated props mutation caught pushing element array deeplevel mutation cause address change javascript world make parent props change reflected child components think vue must keep address variable might wrong vue extend variable vue also watch change parent value ideal would fantastic find way avoid deeplevel object manipulation nt think possible language without another performance cost", "d": "9/2017"}, {"body": "allenhwkim said also explicitly raised warning docs", "d": "9/2017"}, {"body": "error nt seem relate vue calling inside vue method nt make difference work outside vue method unfortunately without repro really help", "d": "9/2017"}, {"body": "thanks evan yes works outside vue method try create repro kr gio", "d": "9/2017"}, {"body": "hello add solution others could problem tha answer message error seems keyword used sharepoint creates problems instead use use simple kr giovanni", "d": "12/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "\u8fd9\u662f expected behavior \u4f5c\u7528\u4e8e toggle \u7684\u65f6\u5019 loading \u5e76\u6ca1\u6709\u88ab activated", "d": "9/2017"}, {"body": "vuerouter loading loading loading \u7ec4\u4ef6\u7684 component", "d": "9/2017"}, {"body": "\u5c31\u662f\u56e0\u4e3a\u8fd9\u5c42\u591a\u51fa\u6765\u7684 loading \u4f7f\u5f97 keepalive", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "met thing today workaround", "d": "9/2017"}, {"body": "ios system issue ca nt much vue core workarounds add hidden optgroup options make sure initialize select default value matching option", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "please instence input number value empty vue watch work title number new vue el body data return number watch number val oldval consolelog val oldval", "d": "9/2017"}, {"body": "hi nt think watch supposed work type wait type number soon type number watch function properly executed", "d": "9/2017"}, {"body": "expected behavior set span replaces inner textnode vue updating original textnode removed due operation give force recreated", "d": "9/2017"}, {"body": "another feature found domoperate affects deep children first child template work fine without key", "d": "9/2017"}, {"body": "one limitations dom templates due browsers see", "d": "9/2017"}, {"body": "reproduction link gets added added", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "cc ktsn herringtondarkholme", "d": "9/2017"}, {"body": "sure add", "d": "9/2017"}, {"body": "closed via published", "d": "10/2017"}, {"body": "far know vuejs support android android uses separate web engine android version nt matter see quote caniuse android browserwebview version numbers refer version android os support listed android core noted many hardware vendors samsung htc etc use altered version default browser may include morelessbuggy support starting android web engine updated separately latest chromium version number used instead", "d": "9/2017"}, {"body": "site lowest support android written could nt find information however found compatibility note stating compliant browsers supported valid support table", "d": "9/2017"}, {"body": "saucelabs dropped support android tests longer shows support way", "d": "9/2017"}, {"body": "awesome think greenlight switch vue", "d": "9/2017"}, {"body": "seems normal", "d": "9/2017"}, {"body": "repro working intended", "d": "9/2017"}, {"body": "kingwl sorry test others case forgot change back important code html block expand true element block expand false element four case click event listen works well click event listen works well click event listen change true ok change back click event listen change false change true", "d": "9/2017"}, {"body": "happens inner click event fires triggering update nexttick microtask microtask processed event bubbles outer div update click listener added outer div dom structure outer div inner element reused event finally reaches outer div triggers listener added update turn triggering update quite tricky fix libs leverages microtask update queueing also problem eg preact react nt seem problem use synthetic event system probably due edge cases like work around simply give two outer divs different keys force replaced updates would prevent bubbled event picked html block expand true element block expand false element", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "guess standard behavior", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "works nicely copied code fiddle project overkill may want ask help forum discord server", "d": "9/2017"}, {"body": "works jsfiddle well meant mention late try discord progess bars nt work within vue document put outside template work fine guess github nt place get help", "d": "9/2017"}, {"body": "edited original post realized assigning number rather variable thing", "d": "9/2017"}, {"body": "see tired happens webpack quite strange may something webpack config vueloader maybe transpiled drop support ie", "d": "9/2017"}, {"body": "appreciate looking trying look vueloader familiar enough going go back hand rolled progress bars thanks", "d": "9/2017"}, {"body": "posva actually still think bug remove dynamic value binding example stops working looks like value needs added using domprops attrs working example using custom component guess progress element check needs added btw edge problem", "d": "9/2017"}, {"body": "sqal right dom prop since find culprit let pr unsure test necessary maybe compiler test thanks lot btw", "d": "9/2017"}, {"body": "posva hmm played bit turns issue related dompropsattrs adding tag map nt change thing still works value string add line check ieedge browser like issue gone sure throwing correct fix though wo nt affect things think leave issue someone core team fix", "d": "9/2017"}, {"body": "thank much looking sqal always comforting know nt something wonky", "d": "9/2017"}, {"body": "mmh really weird work using test right though", "d": "9/2017"}, {"body": "fails using stringbased templates change fiddle use string template instead indom template would fail adding map fix sqal probably nt build import correct file test project", "d": "9/2017"}, {"body": "working", "d": "9/2017"}, {"body": "vue gives power setting ssr setup project feels natural want prerender pages instead ssring setup tooling tooling part vue core", "d": "9/2017"}, {"body": "think discussion regarding nuxt", "d": "9/2017"}, {"body": "think order better differentiate vuejs project purpose post comparing reactjs example even amazing boilerplates like vuehackernews combining ssr prerendering imho one thank however using nuxtjs remember looking every message gitter issue github nt remember examplestalks also tried searching logical keywords google repo result", "d": "9/2017"}, {"body": "actually useful usually listening events component may want trigger method another component one", "d": "9/2017"}, {"body": "would emit event triggers method component call method", "d": "9/2017"}, {"body": "usecase find atm reopen thank", "d": "9/2017"}, {"body": "thanks valid bug freezes browsers node", "d": "9/2017"}, {"body": "nt think bug nt meant work promises right", "d": "9/2017"}, {"body": "nt matter need accept promise api freeze browser node server users give vue wrong input", "d": "9/2017"}, {"body": "oh yeah agree fixed possible unreasonable freeze platform reason saying bug perspective bug situation working edit misread code got tricked syntax thought promise using call way around", "d": "9/2017"}, {"body": "preliminary investigation shows vue relies function context resolve async component case render function always return new function instance handle vue attaches async component function lost vue think component nt properly resolved fix simple move inline arrow function outside stable identifier fix vue find context previously attaches function guess really one using api also solution fix nt clear", "d": "9/2017"}, {"body": "exactly herringtondarkholme said promise resolves cause current component rerender resulting new async factory function thus entering infinite update loop also nt see simple fix supported usage anyway guess documenting behavior async component section", "d": "9/2017"}, {"body": "workaround use case want dynamically load component based data loaded nt want specify component outright something like", "d": "12/2017"}, {"body": "tried realized feature forked branch also write ut condition several another uts failed think change comprehensive reliable", "d": "9/2017"}, {"body": "unfortunately breaking change unlikely happen", "d": "9/2017"}, {"body": "closing feature request causes breaking change nt breaking changes supposed go major versions feature merges props actually super nice something manually every time common scenario creating complex components get breaking change add feature roadmap something besides point closed ticket could suggest elegant reusable way achieve kind behavior could maybe write plugin thanks time", "d": "4/2018"}, {"body": "matteogabriele ulivz agree everyone says behavior want override one attributeproperty mean provide properties said achieved behaviour props student type object default function return labels type object default function return computed mergedlabels function return objectassign billing billing firstname first name generalinfo general info middlename middle name lastname last name dob date birth gender gender placeofbirth country birth nationalities nationalities gradelevel grade level thislabels labelsfirstname mergedlabelsfirstname thislabels last argument otherwise value passed user overridden", "d": "8/2018"}, {"body": "fyi set default value option empty string case selecting first option selecting similar value nt normal fix application", "d": "9/2017"}, {"body": "\u4f60\u7684\u7a7a\u9009\u9879 value \u662f \u6708\u7684 value \u4e5f\u662f \u6708\u7684\u65f6\u5019 sync", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "passive amp capture modifier problem", "d": "9/2017"}, {"body": "seems fst callback inputonce event handler modified data push microtask update queue update task execute callback input event handler refresh dom props sync callback input event handler get dom props value updated idea fix", "d": "9/2017"}, {"body": "vue capture errors thrown asynchronously similar try catch wo nt catch async errors responsibility handle async errors properly eg using promisecatch", "d": "9/2017"}, {"body": "ok thanks", "d": "9/2017"}, {"body": "let think provide config let make lifecycle hooks promise function catch asynchronous error like code created hook async function impossible catch error vue deals function like promise catch catch async error javascript import axios axios export default data return async created await axiosget user", "d": "12/2017"}, {"body": "interesting suggestion consider", "d": "12/2017"}, {"body": "hey made mixin wraps component methods tracks status returned promises lets use thisasyncpending inside components intercepts async errors passes vue errorhandler kinda hacky also super useful think javascript import vue vue vueconfigerrorhandler err gt consolelog handling error err mixin tracks component asyncpending state catch async errors wrapping methods vuemixin data gt asyncpending beforecreate const methods optionsmethods const key objectkeys methods const method methods key methodbusytracked return const wrappedmethod function args const result methodapply args const ispromise result amp amp typeof resultthen function ispromise return result", "d": "1/2018"}, {"body": "everything read apart modifying vnode wo nt anything intentional reduce scope directives want play around vnode modify content html use component instead", "d": "9/2017"}, {"body": "decided probably implemented vue instead run script cleaning dom vue initializes", "d": "9/2017"}, {"body": "bug fyi use modifier make event handler triggered eventtarget element", "d": "9/2017"}, {"body": "list objective benefit computed props computed methods computed property like computedconfig neat solution nt also computed props might add api surface get users confused computed props computed methods also see info", "d": "9/2017"}, {"body": "default value runs every time needed exactly already computed property let avoid adding api surface something already doable way", "d": "9/2017"}, {"body": "unfortunately solution inelegant polluting api component component public api almost like forced create contrived name really want use directly moreover initially pass prop later need make computed update everything component references property computed property name ca nt change prop name every place references component change well cleaner elegant deal one property component", "d": "9/2017"}, {"body": "hmmm would rather argue design vpre ignore directives eg slot need tag slot wrap template fix", "d": "9/2017"}, {"body": "doc also says example doc illustrates main idea exact implementation details see updated example", "d": "9/2017"}, {"body": "dup use empty string undefined", "d": "9/2017"}, {"body": "expected datepicker changing therefore value changes whole template renders used input value used fill therefore clean case used since using jquery date picker need react event sent datepicker change remove input augmented datepicker since used", "d": "9/2017"}, {"body": "see makes sense unfortunate seeing comments see heated debate jquery community changes value inputs triggering events normally nt use jqueryui masking plugins never noticed spoiled guess got ta add overrides jquery sigh thank though clear answer problem could wrap head around", "d": "9/2017"}, {"body": "glad find useful personally try find plugin wraps create mine component", "d": "9/2017"}, {"body": "could provide minimalwhole project reproduces error find problems code tsconfig", "d": "9/2017"}, {"body": "seems rather issue laravelmix vue", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "dup", "d": "9/2017"}, {"body": "fak", "d": "9/2017"}, {"body": "mounted hook", "d": "9/2017"}, {"body": "\u6211\u7684\u5efa\u8bae\u662f\u8d77\u7801\u7236\u7ec4\u4ef6\u5e94\u8be5\u8981\u6709\u4e00\u4e2a\u7c7b\u4f3c\u975e\u5f02\u6b65\u7ec4\u4ef6\u7684 nexttick\u7684\u4e1c\u897f\u6216\u8005\u4e8b\u4ef6 \u77e5\u9053\u5b50\u7ec4\u4ef6\u5df2\u7ecf\u6e32\u67d3\u5b8c\u6210", "d": "9/2017"}, {"body": "\u7236\u7ec4\u4ef6\u4e3ap \u6211\u5df2\u7ecf\u6e32\u67d3\u597d\u4e86 \u7136\u540e\u904d\u5386\u51fa\u961f\u5f02\u6b65\u4e8b\u4ef6\u961f\u5217ds\u6267\u884c\u89e6\u53d1 \u800c\u4e8b\u4ef6\u961f\u5217ds\u4e2d\u7684\u6bcf\u4e00\u9879\u81ea\u5df1\u53bb\u68c0\u6d4b\u9700\u8981\u7684\u5b50\u7ec4\u4ef6\u662f\u5426\u52a0\u8f7d\u5b8c\u6210 \u5982\u679c\u52a0\u8f7d\u5b8c\u6210\u6267\u884c\u5373\u53ef \u751f\u547d\u5468\u671f\u6dfb\u52a0\u6240\u6709\u5f02\u6b65\u5b50\u7ec4\u4ef6\u6e32\u67d3\u5b8c\u6210\u4e8b\u4ef6", "d": "9/2017"}, {"body": "\u5f02\u6b65\u4e4b\u95f4\u7684\u4e8b\u4ef6\u6d41\u7a0b\u7ba1\u7406\u4e0d\u5c5e\u4e8e vue eventproxy", "d": "9/2017"}, {"body": "\u597d\u5427 \u8c22\u8c22\u4e86 \u6211\u5728\u63d0\u95ee\u4e4b\u524d\u5df2\u7ecf\u6309\u7167\u4e0a\u9762\u7684\u6b65\u9aa4\u4f7f\u7528vue\u7684 on\u548c emit\u901a\u8fc7\u4e00\u4e2avue\u5b9e\u4f8b\u505a\u4e8b\u4ef6\u603b\u7ebf\u5b9e\u73b0\u4e86", "d": "9/2017"}, {"body": "\u8bf7\u5148\u7406\u89e3\u5f02\u6b65\u7ec4\u4ef6\u662f\u5e72\u561b\u7684", "d": "9/2017"}, {"body": "\u6211\u7684\u5efa\u8bae\u662f\u8d77\u7801\u7236\u7ec4\u4ef6\u5e94\u8be5\u8981\u6709\u4e00\u4e2a\u7c7b\u4f3c\u975e\u5f02\u6b65\u7ec4\u4ef6\u7684 nexttick\u7684\u4e1c\u897f\u6216\u8005\u4e8b\u4ef6 \u77e5\u9053\u5b50\u7ec4\u4ef6\u5df2\u7ecf\u6e32\u67d3\u5b8c\u6210", "d": "9/2017"}, {"body": "\u5b50\u7ec4\u4ef6\u4f20\u4e2a\u4e8b\u4ef6\u5c31\u884c\u4e86", "d": "9/2017"}, {"body": "\u597d\u7684 \u8c22\u8c22 \u8bf7\u5173\u6ce8\u53e6\u5916\u4e00\u4e2a\u7531\u8fd9\u4e2a\u5f15\u8d77\u7684\u5144\u5f1f\u7ec4\u4ef6\u901a\u4fe1\u95ee\u9898", "d": "9/2017"}, {"body": "point right place nt would forum", "d": "9/2017"}, {"body": "right place ask kind things nt know would right place twitter discord forum sure people created tools like probably nuxt plugin recommend look", "d": "9/2017"}, {"body": "use nuxt generate wed sep eduardo san martin morote lt notifications githubcom wrote right place ask kind things nt know would right place twitter discord forum sure people created tools like probably nuxt plugin recommend look receiving subscribed thread reply email directly view github mute thread", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "sure missing thanks reopening", "d": "9/2017"}, {"body": "mistaken config creates separate bundle includes duplicated copy vue bundles included loading two copies vue page disabling warning copy main entry bundle see webpack docs proper vendor chunk splitting", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "use element access function look dos examples", "d": "9/2017"}, {"body": "put data dom anyway", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "quite understand posva method used add refs like write isactive method even solved duplicate code still happens", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "modifier supported since", "d": "9/2017"}, {"body": "please update tutorial document nt contains passive modifier", "d": "9/2017"}, {"body": "cc chrisvfritz seems event section guide missing modifiers added newer versions", "d": "9/2017"}, {"body": "add", "d": "9/2017"}, {"body": "feature request please use bug report format provide reproduction", "d": "9/2017"}, {"body": "pushtip days thank comment much", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "probably related", "d": "9/2017"}, {"body": "yes error", "d": "9/2017"}, {"body": "thank check jsx", "d": "9/2017"}, {"body": "nickmessing work jsx since basically alias feel free pr jsx test case", "d": "9/2017"}, {"body": "still seeing error replace indexvue jsxvue edit mistake looks issue jsxvue also noticed breaks", "d": "10/2017"}, {"body": "ran similar issue functional component using innerhtml render entity default value functional component prop changed html markup user ssr renders inner html browser using innerhtml converts entities actual characters ie converted browser via native innerhtml ultimately causes rehydration bail rerender component spew errors dev mode html entities also fail hydration used innerhtml etc minimal markup recreate ssr hydration bail issue using sfc template non functional component issue nt appear", "d": "11/2017"}, {"body": "tmorehouse please open separate issue", "d": "11/2017"}, {"body": "makes bug destroycreate order matter sounds like creating side effects affect component instance created hooks really recommended practice", "d": "9/2017"}, {"body": "thanks evan answer nt know makes bug behavior fresh template install works expected matters use hooks handle event listeners global bus fired twice registered created component removed beforedestroy also want register unregister module store fly got errors", "d": "9/2017"}, {"body": "vue bus specialist creating listeners fly seams like really bad idea sure destroycreate order least problems since appear development may suggest really want keep way check listener already exists add easily", "d": "9/2017"}, {"body": "yes today hook removes everything ca nt find solution try plugin approach thanks help", "d": "9/2017"}, {"body": "problem beforedestroy removes listeners create next time component mounted", "d": "9/2017"}, {"body": "current vdom behavior creates new nodes destroying old ones unfortunately changing would breaking change suggest try add checks ensure component instance remove listeners registered", "d": "9/2017"}, {"body": "think might valid reason bug using amp hooks register amp unregister vuex modules development hot reload component registers vuex module instead register module second time unregistering output log better way component register vuex module ticket reopened", "d": "9/2017"}, {"body": "two repos triying first repos external vue app main conponent main app embed component integration page wanted make tool self register store problems described registering component inside nuxt app solved problem things right way", "d": "9/2017"}, {"body": "encounter exactly problem sirlancelot hot reloading becomes useless case vuex use manually refresh time", "d": "1/2018"}, {"body": "sirlancelot classikd dynamic module registration vuex bug think maybe way avoid lovely code javascript import mytinystore tinystore component export default class tinycomponent extends vue beforecreate storestatetinystore prevent duplicate register multiple event dispatch storeregistermodule tinystore mytinystore destroyed modulehot prevent webpack hrm destroy store production please go away storeunregistermodule tinystore", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "\u4f20\u503c\u4e00\u76f4\u4e0d\u5bf9", "d": "9/2017"}, {"body": "thanks instead reporting bug please submit prs directly directly via github interface", "d": "9/2017"}, {"body": "sure", "d": "9/2017"}, {"body": "feel scope vue designed ie exposing primitives building alternative reactivity system especially different syntax requirements fact easily use unmounted vue instances reactive data sources similar mobx nt sound right reconstruct sake api similarity requiring vue expand api surface accommodate", "d": "9/2017"}, {"body": "fact easily use unmounted vue instances reactive data sources yes thought constructor lot unnecessary viewrelated stuff usage models optimal performance point view", "d": "9/2017"}, {"body": "never mount viewrelated stuff minimal small overhead creating instance", "d": "9/2017"}, {"body": "small overhead creating instance yes exactly talking want make model instantiation cheap possible may lot ca nt expose internals already course asking make part public api help people like trying develop lowlevel tools", "d": "9/2017"}, {"body": "problem exposing part public api either library depends apis break without notice may change internal implementations maintaining public api avoid breaking stuff time longer able make big internal changes suggest benchmark actual overhead asserting going expensive", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "nt dup", "d": "9/2017"}, {"body": "posva yes similar situation dynamically clear cache runtime", "d": "9/2017"}, {"body": "jkzing", "d": "9/2017"}, {"body": "okjesse", "d": "9/2017"}, {"body": "jkzing \u6309\u7167\u60a8\u7684\u65b9\u6cd5", "d": "9/2017"}, {"body": "jkzing", "d": "9/2017"}, {"body": "jkzing\u770b", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "destroy", "d": "9/2017"}, {"body": "fadexiii", "d": "9/2017"}, {"body": "okjesse \u6211\u7684keepalive \u91cc\u9762\u5305\u542b\u7684\u662f\u4e00\u4e2a\u7528includes\u7684\u65b9\u6cd5\u4e0d\u8d77\u4f5c\u7528", "d": "9/2017"}, {"body": "okjesse", "d": "9/2017"}, {"body": "fyi implemented", "d": "10/2017"}, {"body": "fadexiii", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "\u770b\u5230", "d": "11/2017"}, {"body": "wanyaxing \u6211\u4e5f\u9047\u5230\u8fc7\u4f60\u7c7b\u4f3c\u7684\u95ee\u9898 \u6211\u7528\u4e86keepalive", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "wanyaxing b c alive \u7136\u540e\u6211\u5728b\u9875\u9762\u8fdb\u884c\u5224\u65ad\u5982\u679c\u662f\u8fd4\u56de\u4e0a\u4e00\u7ea7\u9875\u9762 go destroy", "d": "12/2017"}, {"body": "\u8fd9\u4e2a\u662f\u6211\u6574\u7406\u7684", "d": "12/2017"}, {"body": "fadexiii keepalive includes login \u4e3a\u4ec0\u4e48\u6211\u628a includes", "d": "12/2017"}, {"body": "\u9879\u76ee\u8d1f\u8d23\u4eba\u63a8\u8350\u4f7f\u7528 include wanyaxing \u770b\u4e86\u4f60\u63d0\u4ea4\u7684pr remove cache \u7684api \u4e5f\u884c\u7684\u5427", "d": "7/2018"}, {"body": "vuemixin beforerouteleave function next amp amp frommetarank amp amp tometarank amp amp frommetarank gt tometarank vnode amp amp vnodedatakeepalive vnodeparent amp amp vnodeparentcomponentinstance amp amp vnodeparentcomponentinstancecache vnodecomponentoptions var key vnodekey null vnodecomponentoptionsctorcid vnodecomponentoptionstag vnodekey var cache vnodeparentcomponentinstancecache var keys vnodeparentcomponentinstancekeys cache key keyslength var index keysindexof key index gt keyssplice index delete cache key destroy next", "d": "7/2018"}, {"body": "wanyaxing \u6211\u662f\u901a\u8fc7\u8def\u7531\u6765\u63a7\u5236\u9875\u9762\u7684\u7f13\u5b58 executedchart \u6211\u540c\u6837\u662f\u7528 mixin \u65b9\u6cd5hack \u8def\u7531\u79bb\u5f00\u65f6\u5019 javascript \u652f\u6301\u9875\u9762\u4fdd\u6301 vuemixin beforerouteleave next wanyaxing linusborg \u6c9f\u901a", "d": "7/2018"}, {"body": "wanyaxing \u6211\u4e00\u76f4\u5728\u627e\u62ff\u5230 cache", "d": "7/2018"}, {"body": "\u4f7f\u7528 vuerouterthen methods clicksomeone function value emit input value routergo", "d": "7/2018"}, {"body": "fadexiii \u4f60\u7684\u610f\u601d\u662f \u6240\u5305\u542b\u7684 \u5e94\u8be5\u662f routerjs viewsavue include \u4e2d\u5e94\u8be5\u5b58\u7684\u662f componenta xxxa", "d": "7/2018"}, {"body": "yiwuyu xxxa", "d": "7/2018"}, {"body": "jkzing", "d": "9/2018"}, {"body": "\u6211\u4e5f\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u4e86 \u5728router\u5165\u53e3\u52a0\u4e0a meta keepalive true \u9700\u8981\u88ab\u7f13\u5b58 \u70b9\u51fb\u5173\u95ed\u7684\u65f6\u5019\u8bbe\u7f6e\u4e3afalse \u63a5\u7740\u7528\u76d1\u542c\u5668 \u6539\u4e3atrue \u5177\u4f53\u770b \u73b0\u5728\u6d4b\u8bd5\u8fd8\u6ca1\u95ee\u9898 \u4e0d\u77e5\u9053 \u540e\u9762\u4f1a\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898", "d": "9/2018"}, {"body": "tab\u5207\u6362\u7684\u65f6\u5019\u7f13\u5b58 \u5173\u95ed\u7f13\u5b58\u8981\u9500\u6bc1\u53ca\u4e0b\u6b21\u6253\u5f00\u91cd\u65b0\u52a0\u8f7d \u591a\u91cd\u5d4c\u5957\u5b50\u8def\u7531\u9875\u9762\u4e5f\u662f", "d": "9/2018"}, {"body": "vshow", "d": "9/2018"}, {"body": "vuemixin beforerouteleave function next amp amp frommetarank amp amp tometarank amp amp frommetarank gt tometarank vnode amp amp vnodedatakeepalive vnodeparent amp amp vnodeparentcomponentinstance amp amp vnodeparentcomponentinstancecache vnodecomponentoptions var key vnodekey null vnodecomponentoptionsctorcid vnodecomponentoptionstag vnodekey var cache vnodeparentcomponentinstancecache var keys vnodeparentcomponentinstancekeys cache key keyslength var index keysindexof key index gt keyssplice index delete cache key destroy next", "d": "9/2018"}, {"body": "liudapeng \u5f00\u542f \u4e0d\u4f7f\u7528 keepalive \u7684cache", "d": "9/2018"}, {"body": "wanyaxing problem call destory dynamic component work find js heaps goes higher numbers nodesit appears dynamic component created doms without destroying", "d": "10/2018"}, {"body": "work must switch condition eltablecolumn large number props want copy", "d": "9/2017"}, {"body": "nt make sense slot either scoped also question bug", "d": "9/2017"}, {"body": "yes work way read information", "d": "9/2017"}, {"body": "intended behavior please read linked docs details", "d": "9/2017"}, {"body": "oh thanks nt know best practice pass value understand cloned passing child component", "d": "9/2017"}, {"body": "please provide actual reproduction", "d": "9/2017"}, {"body": "woops looks like messed link copy pasting anyway trying put one back together", "d": "9/2017"}, {"body": "repro", "d": "9/2017"}, {"body": "sure quite understand trying want use js variables inside style tag could bit specific trying accomplish maybe share jsfiddle illustrates problem", "d": "9/2017"}, {"body": "okay sharing sample fiddle component focus described issue see struggle use props inside tags impossible dynamically change trigger image change case whatever", "d": "9/2017"}, {"body": "already bind computed objects styles", "d": "9/2017"}, {"body": "static design since may extracted plain css files instead injected managed dynamically hand props known runtime way modify already extracted css runtime convention dynamic toggling styles case write possible classes toggle class name dynamically prefer fully dynamic styling always use cssinjs option vue instead", "d": "9/2017"}, {"body": "see comment previous issue vue already implements similar optimizations", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "already includes similar optimizations please read release notes", "d": "9/2017"}, {"body": "thanks suggestion imo feature add significant benefits warrant addition essentially write little less code vs yet another api remember", "d": "9/2017"}, {"body": "difference projects created via may private intended public use license nt necessary cases copyrights implicit nt make sense require license every project intend make code public add license field", "d": "9/2017"}, {"body": "using old version happen latest version", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "yes issue also closed use framwork fortunatley thousands", "d": "9/2017"}, {"body": "dup", "d": "9/2017"}, {"body": "wrong using consolewarn consoleerror", "d": "9/2017"}, {"body": "mean like nt think guess could solution see two eventual problems first times vue comes eslinting like vue init console messages usually disabled second console message added existing one always output generic error cause confusion compared message like per example bash vue warn invalid prop must enter digit number prop example found srccomponentswordcountwordcountvue srcappvue pattern may something similar bash vue warn invalid prop prop found srccomponentswordcountwordcountvue srcappvue custom validator check failed displayed like always basically idea", "d": "9/2017"}, {"body": "note called synchronously call consoleerror validator immediately vue builtin warning warning good enough", "d": "9/2017"}, {"body": "herringtondarkholme good point", "d": "9/2017"}, {"body": "built message would far useful told prop value passed obvious information include imo would fulfill probably people need custom message indicated", "d": "6/2018"}, {"body": "repository vue question vuerouter issues usage questions forumvuejsorg chatvuejsorg issue nt match requirements missing reproduction", "d": "9/2017"}, {"body": "hello working intended find better explanation smile", "d": "9/2017"}, {"body": "give slot", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "9/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "9/2017"}, {"body": "closing favor see three potential solutions need feedback core team figure one best", "d": "9/2017"}, {"body": "agree much better issue mine glad picking", "d": "9/2017"}, {"body": "related somehow", "d": "8/2017"}, {"body": "diffed input update retrigger flip animation workaround splitting separate component update decoupled parent context", "d": "9/2017"}, {"body": "following suggestion wrapping transitiongroup component nt seem fix problem missing something tried wrap whole thing div issues still persists", "d": "9/2017"}, {"body": "misunderstood meant", "d": "9/2017"}, {"body": "closing since nt think easy way fix instead probably add note caveat workaround docs cc chrisvfritz", "d": "10/2017"}, {"body": "", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "please explicit kind directive would need please configuration could extracted one single js file import different directives mean nt think cumbersome redundant mean setting configuration using directives template well think much better explicitly give directive configuration making depend injected value somewhere else could lead hard debug bugs side note injectprovide meant advanced usage libs want make things easier use without user worry connecting explicitly many things together discouraged applications makes things implicit harder understanddebug", "d": "9/2017"}, {"body": "nt think really needed really want global configuration directives would vuex store object would even make easy update need", "d": "9/2017"}, {"body": "jsnanigans sure mean plugin access user vuex store global configuration contextaware configuration", "d": "9/2017"}, {"body": "thinking could define config store component get config pass directive think misunderstood trying accomplish provideinject directives want avoid passing config directive attribute write config provided components injected directive", "d": "9/2017"}, {"body": "posva understand provideinject advanced usage trying change saying provideinject work way directives already components reasons let give concrete example apologies done start plugin provides directive directive takes javascript function example executes passing object function returns string css styles directive generates css class name styles injects styles page appends css class name elements property object passed function directive value passed plugin beforehand way one way pass plugin installed ok works globally want use different themes app suggestion greetings features components config objects different themes directive inject config object instead getting install user pass directive value saying passing directive value cumbersome redundant would look like please get hung somewhatcomplex cssinjs example think use cases well immediate use case", "d": "9/2017"}, {"body": "really think directives probably want use css js example looks perfectly fine using config primarycolor yes looks cumbersome think adding provideinject directives would allow users easily mess things make really hard debug understand provideinject advanced usage trying change want reemphasize meant libs applications", "d": "9/2017"}, {"body": "would much easier even class", "d": "9/2017"}, {"body": "really think directives probably want use css js strongly disagree use case fits within guides description lowlevel dom access plain elements perfect example directives exist first place directive changing class value single element user wants litter app bunch higher order components deliver class name think adding provideinject directives would allow users easily mess things make really hard debug yes agree downside could say provideinject functionality components already vue could also say react context want reemphasize meant libs applications sorry nt really understand provideinject used components right components used applications", "d": "9/2017"}, {"body": "yes agree downside could say provideinject functionality components already vue could also say react context imagine dirty throw dump sorry nt really understand provideinject used components right components used applications components added libs", "d": "9/2017"}, {"body": "posva fair summation saying saying debating provideinject pros cons pretty much pointless already framework feature solves problem react context need contextaware data delivery issue components receive data way directives much harm components feature exists anyway maintainers maybe even decided pros outweigh cons con applies directives nt also apply components components added libs yes directives added libs", "d": "9/2017"}, {"body": "trying say adding pi directives could make harm help pointed link talks purpose provideinject last part comment provocative unnecessary found offensive trying help", "d": "9/2017"}, {"body": "posva sorry intention wanted clarify anyone reading directives components installed via libraries difference two considering whether one legitimate use pi", "d": "9/2017"}, {"body": "wanted clarify anyone reading directives components installed via libraries difference two considering whether one legitimate use pi like difference use case apart css one mentioned", "d": "9/2017"}, {"body": "like difference ok difference referring quoted incorrect legitimately trying figure mean another use case involving input validation much different use case already laid essentially convenient way set configuration nt specify long within certain context seems like whole point pi feature feel like dismissing use case without giving reason clear advocating feature library author end goal make using library easier event library api better suited use directives instead components", "d": "9/2017"}, {"body": "stumbled onto well would liked write directive access shared object injected components inaccessible directive shared object main instance application gives us access state case whether running phone tablet desktop etc based information vresponsive directive would behave slightly differently setting appropriate classes bound element duplicate detection code still wo nt able allow consumer application instance override within instance one screen scenarios overriding also required ssr btw", "d": "12/2017"}, {"body": "give main instance well", "d": "12/2017"}, {"body": "useful situations want add contextual meaning example slot body want dismisshide popover user clicks particular link way kind contextual directive popover component popover provide instance everybody inside easily get", "d": "12/2017"}, {"body": "use scoped slot", "d": "12/2017"}, {"body": "linusborg ca nt use scoped slot need bind whatever event vue files ca nt shows error telling duplicated attributes also nt want make template handlers complicated duplicate attribute click update also create scoped popover directive ca nt use inside provided slots shows error failed resolve directive vdismisspopover", "d": "12/2017"}, {"body": "shows error telling duplicated attributes also nt want make template handlers complicated valid opinion personally think scoped slots worthy learn everyone arsenal update also create scoped popover directive ca nt use inside provided slots shows error well nt issue trying use scoped slots instead directive", "d": "12/2017"}, {"body": "linusborg cases popover content different components ca nt easily access popover close dialog clicking selecting somethid use case cannedresponses inside surveylist need close popover user selects survey possible way currently emit event times reach popover", "d": "12/2017"}, {"body": "would probably solid usecase provideinject nt want pass scoped slott callback levels directive component regular way personally would probably still prefer component emit event something selected even better simply use vif parent edit way jus give perspective seems like actively try resist adding feature generally try challenge feature request thoroughly want try keep filesize api surface increases minimum codebase already grown since want keep eye every new feature request comes potential unclear challenge arguing ones arguing see options solve adequatly current api tried found suffice consider feature request make core", "d": "12/2017"}, {"body": "although behaviour worked around agree would useful allow directives access providers use case wizard component component trigger instructional animation presents hints tooltips point could achieved wrapping component instruction component verbose unnecessary would easily allow contextual help opinion instance component responsible describing help information rather instruction wrapper written library sidesteps shortcomings work described ideally would like use regular vue logic accomplish results", "d": "6/2018"}, {"body": "", "d": "8/2017"}, {"body": "issues", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "nt find relevant cancellation api document", "d": "8/2017"}, {"body": "hi use instead option", "d": "9/2017"}, {"body": "javoski thank", "d": "9/2017"}, {"body": "want ask many functions monitored component affect performance javoski", "d": "9/2017"}, {"body": "valid value contenteditable valid", "d": "8/2017"}, {"body": "\u8bf7\u4e0d\u8981\u76f4\u63a5\u4e22\u4e00\u5768\u4ee3\u7801\u6307\u671b\u522b\u4eba\u5e2e\u4f60\u6539", "d": "8/2017"}, {"body": "please open issue vuerouter repository one please provide minimal reproduction complete application please descibe situation deployment better properly configure server work history mode explained vuerouter documentation", "d": "8/2017"}, {"body": "hi would rather argue nt leakage expected leakage installs plugins global constructor using plugins dynamically nt recommended better install plugin entry point case reevaluate component code every request node module file persistent object heap plugins repeatedly applied one vue thus using memory even removed leakage still happen consider plugin maintain objects assign constructor said recommendation maintaining installedplugins wo nt use much memory used correctly nt apply plugin dynamically use plugin entry point consider using", "d": "8/2017"}, {"body": "herringtondarkholme thanks advice demo may bit confuse demo say reproduce problem real problem case runinnewcontext true even using plugins entry point memory leaks long plugins build server bundle vue use node module problem vue official didt say plugins server must defined node module also consider changing runinnewcontext think case memory leak problematic hope vue repair", "d": "8/2017"}, {"body": "see code indeed used release leakage problem sadly runinnewcontext true every new request create new plugin object many copies one plugin functionality different identities imho deprecate", "d": "8/2017"}, {"body": "note bug vue way registering plugins guaranteed cause leak way us fix important understand thus avoid certain patterns using simply understand probably use", "d": "9/2017"}, {"body": "\u8bf7\u9075\u5b88 issue", "d": "8/2017"}, {"body": "place reporting element issues please write online demo issue posva please close one", "d": "8/2017"}, {"body": "tests difference browser running unfortunately running chrome flakiness related launcher eg switch window launching test terminal launched chrome considered background mode throttles animations thus causing transitionanimation tests fail cases default stable used reference", "d": "8/2017"}, {"body": "unfortunately vue using content template data stored dom element mounting vue instance gone vue uses html string compile render function need initialise jquery plugins event make sure kept", "d": "8/2017"}, {"body": "sorry nt really understand problem vue ecosystem simply provides libraries distributed npm packages default workflow cli templates bundling code distribution want avoid transpiling babel configuration question want use modules directly browser generic workflow question framework agnostic reported", "d": "8/2017"}, {"body": "record provide esm build actually default export npm package documented well go ahead try interpret think really asking really clea transform vue files modules without bundled webpack browserify use build process answer would wwwgithubcomvuejsrolluppluginvue part anyway issue closed nothing main repository want propose additional documentation please wwwgithubcomvuejsvuejsorg questions template open issue template repository already mentioned asked couple places without luck understand frustration stuck repository wrong place ask specific question bump thread forum find quickly surely continue discussion", "d": "8/2017"}, {"body": "sorry nt really understand problem want able use vue transforming vue files transpiling bundling removes modules want vue cli without configuring webpack babel vue ecosystem simply provides libraries distributed npm packages default workflow cli templates bundling code distribution want use webpack babel least directly want vue cli options use webpack babel except vue transformations want avoid transpiling babel configuration question want use modules directly browser generic workflow question framework agnostic reported think asking something unreasonable admit ignorant details vue files eventually converted vanilla htmlcssjs want simple solution use modern browser chrome safari canary native modules full support need unnecessary workflow", "d": "8/2017"}, {"body": "transform vue files modules without bundled webpack browserify use build process yup bump thread heres url", "d": "8/2017"}, {"body": "imo bug reason works like expected custom components vue add runtime code compile time custom components result vue using retrieve selected value like find behaviors use case use computed value get set could trick", "d": "8/2017"}, {"body": "indeed expected behaviour try set html element object convert string actually setting value jkzing proposed computed property good way go", "d": "8/2017"}, {"body": "jkzing thanks prompt reply workaround trick perspective new user vuejs confusing read documentation try apply component work expected architecturally understand decision made totally understand explanation posva original assumption first ran issue reading section doc convinced correct found bug believe interface framework consistent however wrong right interface may behavior work outside components great seeing behavior inside component confusing least casual user beginner", "d": "8/2017"}, {"body": "well work custom select component correctly implemented point one using using", "d": "8/2017"}, {"body": "easily using functional component demo", "d": "8/2017"}, {"body": "use", "d": "8/2017"}, {"body": "thanks lot", "d": "8/2017"}, {"body": "took look jsfiddle version vue structure async component faulty component seems work expected using one child want foo bar tablerows ca nt get work multiple childs get tablerows", "d": "8/2017"}, {"body": "nt something could js hooks transitions maybe inside even", "d": "8/2017"}, {"body": "indeed using hook transition allows control since probably always related animations transition getting access element removed dom using transition looks like right way go may worth adding sake consistency nt forget add transition", "d": "8/2017"}, {"body": "posva jsnanigans thanks solved problem", "d": "8/2017"}, {"body": "believe problem vue detect change children properties updated explicitly used template solution would recreate whole object changing one style force update easily done spread operator instead setting new background color like like keep everything overwrite background propery working example", "d": "8/2017"}, {"body": "jsnanigans think analysis right workaround would probably work nt necessary vue pick react", "d": "8/2017"}, {"body": "linusborg suggestions fix interested cleanest way get work thanks alex", "d": "8/2017"}, {"body": "fixed", "d": "8/2017"}, {"body": "test right using listener yields result probably something wrong ie messing", "d": "8/2017"}, {"body": "nt know sure going source could cause definitely listener nt use instead use works fine test ckittelmann imagine using barcode scanner need listen keyup event nt need twoway databinding might solution", "d": "8/2017"}, {"body": "pressing several buttons time fires several input events one button keyboard sends ok ok vmodel binding fact every event handler gets fired input value changed pattern like char added input value input handler fired input handler fired char added input value suspect may something nexttick behavior btw timerfunc called half time unlike example chrome ff", "d": "9/2017"}, {"body": "finally could test also weird keep keys pressed gets repeated vmodel fixes work around ie crazy behaviour definitely messing things sure mark improvement bug workaround use listener yield expected result want", "d": "9/2017"}, {"body": "thx jsnanigans workaround look application think need two way binding tested behaviour occurs examples test version version", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "try compare ecosystem first lol", "d": "8/2017"}, {"body": "believe moon needs compare vue way around obvious reasons", "d": "8/2017"}, {"body": "please move vuejsvuejsorg nt know anyone team knows moon enough make comparison much like idea moon nt think used enough add entry page comparing every possible framework rather compare people might choosing use scenario personal opinion moon vue preact react expect see comparison moon github website", "d": "8/2017"}, {"body": "use otherwise vue reuse component instance efficiency", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi nt vnode returned vue interpolation string number plain object use toggle showing text element", "d": "8/2017"}, {"body": "closing since expected behaviour", "d": "8/2017"}, {"body": "case op wants combine dynamic render function template authoring one reassign field manually call", "d": "8/2017"}, {"body": "found correct project", "d": "8/2017"}, {"body": "basically impossible modifiers allows valid expression looks like nt understand modifier please check documentation questions please use official chat forum ask questions", "d": "8/2017"}, {"body": "also far see docs functionality removed migration", "d": "8/2017"}, {"body": "yes modifier removed reintroduced agaion later although different scope mechanic", "d": "8/2017"}, {"body": "sure completely understanding situation provide small example issue facing thanks", "d": "8/2017"}, {"body": "really easy need define variable ie data instead check variable execute function alternatively could leave attribute check function javascript myfn thisdisablechange return would also give control gets disabled", "d": "9/2017"}, {"body": "sounds like usage question nt think provide dedicated api specific use cases", "d": "9/2017"}, {"body": "hmm many problems moment implement syntax currently possible note spaces possibles would common source error want avoid people want use events readability could use characters like though realistic version current syntax would nt work one arg directives would lead modiers object put nutshell syntax like could possible new syntax people need learn replace something already feasible personally think second version straightforward easier read imo pass think worth listening others opinions", "d": "8/2017"}, {"body": "spaces possible limitation parser html perhaps former case could possible modify parser accepts spaces particular case really like version since really hard read looks like events perhaps character visible think would prefer character since unlikely used custom event name whereas could likely could possible new syntax people need learn replace something already feasible indeed already possible verbose less legible opinion solution would bit like using instead anyway thanks taking time review", "d": "8/2017"}, {"body": "posible", "d": "8/2017"}, {"body": "would somehow inverse current order know sure reversed use multiple callbacks way go likely confuse users", "d": "8/2017"}, {"body": "syntax mentioned possible brackets let users know kind event handling inverse think syntax clearer since posva said spaces possible attributes part nt put events modifiers value part one function call brackets something like users know difference", "d": "8/2017"}, {"body": "would totally different syntax could add events single attribute like sure realistic since might conflicts normal syntax think lot readable grasp adding extremely long attribute", "d": "8/2017"}, {"body": "seems topic people passionate great really creative ideas tackle also great however personally every syntax proposal far still seems complicated abstract far away html amp js great save keystrokes get rid repetition cost easy grok syntax generally increasingly opposed new syntax least nt bring new features opinion api surface big enough would rather see get working modifiers would trivial write helper method like keep listener definitions templates", "d": "8/2017"}, {"body": "good point linusborg think extending directive accept array objects like one passed previous comment think quite nice listener definitions templates", "d": "8/2017"}, {"body": "agree linusborg syntax simplier realistic", "d": "8/2017"}, {"body": "sure follow linusborg syntax means multiple events would something like case problem today lot duplication advantage go point without repetition think taking listener template prevent get full picture going looking listener defined template others elsewhere seems optimal long attribute notation would shorthand already exists prefer use one line per event duplicate handler name fine handler definition long use nonshorthand definition format guess events calls handler could perhaps divide template multiple lines", "d": "8/2017"}, {"body": "yes saying vbind syntax showed working currently normal events nt native modifiers trivial write helper function like one showed creates object vbind would mean nt introduce new template syntax instead solve lines js", "d": "8/2017"}, {"body": "config setting define custom events bit like keycodes api idea", "d": "9/2017"}, {"body": "events one place template gives good idea component react sure putting logic elsewhere help achieve goal sorry shooting ideas x", "d": "9/2017"}, {"body": "thinking might need listen set events multiple places could help avoid repeating could cause lot problems putting global config would also make informant components want could also give declarative names like also goal easily pass multiple events function", "d": "9/2017"}, {"body": "goal indeed able use function multiple events without copypaste function name x times template need listen set events multiple places point moot since goal call function within component need js js hand thinking calling function multiple components think feature request scope would use order keep dry", "d": "9/2017"}, {"body": "general trying avoid adding alternative syntax templating system case benefit saving keystrokes really nt worth addition imo fact use spaces attribute name makes proposals impractical linusborg suggested might best solution however many modifiers actually compiled code compilation phase thus making costly add runtime support think best path forward would userland library exposes method implements runtime behavior modifier internally instead duplicating vue core", "d": "9/2017"}, {"body": "general trying avoid adding alternative syntax templating system case benefit saving keystrokes really nt worth addition imo thinking currently thing opinion much difference avoiding repetition fact use spaces attribute name makes proposals impractical yes way around solution bit dead water still think kind repetition makes components behavior harder comprehend perhaps creating complex components right way oh well", "d": "9/2017"}, {"body": "complex syntax already syntax add nt break vue js please kiss guys smart see would want", "d": "4/2018"}, {"body": "find concatenating handlers dots ampersand everywhere pretty hard parse reading template", "d": "4/2018"}, {"body": "adding new type syntax necessary cover probsbly use cases anyway mon apr alexandre notifications githubcom wrote find concatenating handlers dots ampersand everywhere pretty hard parse reading template receiving commented reply email directly view github mute thread", "d": "4/2018"}, {"body": "seems doable user land let assume making regular http requests restlike api make smart components global mixin looks given key component time makes request simply adds request array attaches array ssrcontext simply promiseall done moving graphql assuming using vueapollo seems already supports something like check docs", "d": "8/2017"}, {"body": "sideeffect fixed", "d": "8/2017"}, {"body": "unless misunderstand something possible basically js function return b function b return moment call enter infinite loop even computation nt directly depend computed property eg statement computed property know changes usually less expensive recompute top two computed properties depend looks weird interested factual case leads situation summarised direct possible", "d": "8/2017"}, {"body": "thank hope make request bit clearer current version vue tries something like infinite loop javascript function return name othername b name function b return name b othername name hope vue become bit smarter hood javascript var name gt othername gt bname var b name gt b othername gt aname following case leads infinite loop much simplified look calculation javascript new vue data initialcourse imported via ajax elsewhere initialclasses example values also included via ajax nrofstudents properties class nrofstudents properties class computed course function var course clone thisinitialcourse coursenrofstudents sumby thisclasses nrofstudents lt return course classes function var classes thisinitialclassesmap clone var ifactor classes nrofstudents thiscoursenrofstudents lt example values result get work used following workaround javascript new vue data initialcourse imported via ajax elsewhere initialclasses example values also included via ajax nrofstudents properties class nrofstudents properties class computed course function var course clone thisinitialcourse return course coursenrofstudents function return sumby thisclasses nrofstudents classes function var classes thisinitialclassesmap clone var ifactor classes nrofstudents thiscoursenrofstudents", "d": "8/2017"}, {"body": "see thanks clarification makes sense create intermediary computed property prevent infinite loop imagine also aggregate one computed property extract two computed properties", "d": "8/2017"}, {"body": "thank aggregation extraction interesting suggestion take suggested solution changing dependency tracked vue much work doable use resources something since leave issue closed asking think technically possible probably missing trying suggest would make things much easier intermediate calculations needed whatever reason think vue amazing terrific job thank time leave", "d": "8/2017"}, {"body": "html nt allow selfclosing tags", "d": "8/2017"}, {"body": "linusborg modified still error see", "d": "8/2017"}, {"body": "hm superweird works normally idea could except elements appear belong hardly related", "d": "8/2017"}, {"body": "okay found vuejs file original vuejs file someone changed file note contains real file contains expected nice try joke someone find slap p sidenote would suggest use file could mailicious code", "d": "8/2017"}, {"body": "someone find slap p nt someone girlfriend", "d": "8/2017"}, {"body": "linusborg thank much checked svn record really tell", "d": "8/2017"}, {"body": "vue pre treat prop local data property child component direct use data whatever want worries change father component data child would either receive updates prop parent anymore lose local changes receives updates parent reason copy local data property intend mutate value need copy work independently updates come parent", "d": "8/2017"}, {"body": "receive updates prop parent anymore yes know parent data changed child need update prop immediately think achieve feature frame level user write watch computed props like fact code appears app components however works auto complated vue frame lose local changes receives updates parent one component unlikely two functions update prop immediately amp amp save current local data whatever child component broadly separated two categories readonly operable readonly component prop changes ok operable component suppose saving child component current data necessary need like code add watch prop data changed save current local data whatever want vue user want write code less application scenarios component need local data prop edit directly worries change parent component data linusborg", "d": "8/2017"}, {"body": "\u90fd\u7528 ts \u4e86\u4e3a\u4ec0\u4e48\u8fd8\u8981\u7528 script \u5f15\u5165 anyway bug", "d": "8/2017"}, {"body": "\u4f7f\u7528typescript\u4f46\u662f\u4e0d\u7528webpack\u6253\u5305 \u76f4\u63a5\u7528\u5fae\u8f6f\u7684tscexe\u7f16\u8bd1\u751f\u6210\u7684js\u6587\u4ef6 \u7136\u540e\u4f7f\u7528script\u6807\u7b7e\u5f15\u5165 \u4e0d\u8fc7\u73b0\u5728\u66f4\u6539\u4e86dts\u5b9a\u4e49\u8fd9\u4e2a\u95ee\u9898\u5c31\u89e3\u51b3\u4e86 \u8c22\u8c22", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "actually could already done custom prop validator case", "d": "8/2017"}, {"body": "jkzing would absolutely work usecase creating component use case interested however using components vendor code vendor component checks string type nothing manually call object little janky two good reasons vendor package check type want use methods type prototype like parent prototype methods available wrapper objects nt issue want use argument type printing string iterating array etc neither usecases broken allowing users pass wrapper objects inherent value strictly checking type literals checking something strictly string gains nothing checking something properties string think akin failing test user provides extends", "d": "8/2017"}, {"body": "rather argue mixing primitive values wrapper objects code smell javascript eg supporting checking api means vue implicitly indirectly encourages code smell consider vendor code returns two wrapper objects underlying primitive value vue treat two objects different case primitive value users libraries explicitly convert wrapper primitive value cast tostring", "d": "8/2017"}, {"body": "could give example situation example would apply hard time understanding situation could pass two wrapper objects single prop nt see issue far code smell believe code smell indication something might wrong guarantee something wrong nt buy argument allowing people use language feature like wrappers vue somehow endorsing encouraging also nt buy wrappers moral evil framework like vue must take stand language feature good bad reasons use decide design framework prevent people using wrappers badly also prevent people using well think programmers trusted", "d": "8/2017"}, {"body": "consider route updated value say code trigger rerender object value also allows wrapper object users check prop primitive using use validator current api", "d": "8/2017"}, {"body": "understand saying would good seems like one hand switching instanceof run risk developer writing bad code triggers unnecessary renders seems passing object needlessly resets value unnecessarily would always cause rerender string typed prop onus developer object case deal issues hand prevent developers using wrappers code even best solution nt apply code also large commonly used libraries like lodash uses wrappers commonly used method obvious case partly selfishly also principle prefer scenario gives developers freedom use wrappers generally whatever language feature fits problem best also saddles responsibility dealing fallout edgecases great power comes great responsibility like said think developers handle responsibility think adding feature right move also understand open source opinion one matters leave community decide thanks fun discussion", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "already srcplatformsweex", "d": "8/2017"}, {"body": "files references weex also high level diagram read understand framework interested contribute evan notifications githubcom sent friday august vuejsvue cc sharma rahul author subject vuejsvue weex code branch main vue code closed receiving authored thread reply email directly view github mute thread", "d": "8/2017"}, {"body": "see", "d": "8/2017"}, {"body": "guess ios simply listens event hood possible case voice preventing events firing properly someone try make vanilla js repro would help", "d": "8/2017"}, {"body": "reconstructed vanilla js using event listeners issue identical issue see vue breaks voiceover codepen vanilla stars input using makes work scenarios though codepen vanilla stars change guys whether like care circumventing kind issue vue using vue wanted circumvent could definitely think worth ticket apple though make one later today", "d": "8/2017"}, {"body": "unfortunately nt think obvious way work around vue core use force listen events instead though", "d": "8/2017"}, {"body": "aminimalanimal easy way fixing would replace way downside fact event trigger followed one may lead collisions complicated scenarios solution somewhat better using listens events may want everytime", "d": "8/2017"}, {"body": "thanks help workaround good know going hood certainly makes update andreiglingeanu mentioned nice also event handling ui state updates immediately user adjusting went using usual adding codepen vuetiful stars workaround filed ticket apple link apple nt make issues publicly viewable", "d": "8/2017"}, {"body": "aminimalanimal cool please link login see feedback one side coffeescript thing looks strange though nt touched quite time already", "d": "8/2017"}, {"body": "andreiglingeanu impression issues filed bug reporter nt accessible anyone apple team dev reported link apple bug tell view logging", "d": "9/2017"}, {"body": "coffeescript partially helpful partially appreciate syntactic sugar fewer braces indentationbased missing lot sugar provides", "d": "9/2017"}, {"body": "aminimalanimal nah getting bug exist access error amazed someone still uses coffee", "d": "9/2017"}, {"body": "say love enforced proper indentation nt like managing brackets p bad bug report sure safeguard horrible security issues nt easily discoverable", "d": "9/2017"}, {"body": "already declare function data computed recreate function template renders say recommended way functions floating template much js template unlikely noticeable negative performance impact unfortunately adding check every prop everywhere may actually noticeable tell misunderstood something since already easily achievable prefer introduce new condition check could lead slower performance", "d": "8/2017"}, {"body": "correct easily achievable however throwing arrow function template often matter characters convenient developers may realize performance impact reason use vue small learning curve large ease use regardless understand", "d": "8/2017"}, {"body": "fyi also technically correct two functions may well string content declared different scopes invoking would result different results probably uncommon still possible", "d": "8/2017"}, {"body": "great point feel like documentation warn using anonymous functions way performance hazard temptation real arrow functions compact", "d": "8/2017"}, {"body": "would even possible generate warning development build vue trivial use tostring determine function anonymous", "d": "8/2017"}, {"body": "\u4ece\u6570\u636e\u7ed3\u6784\u5c42\u9762\u53bb\u601d\u8003\u5427", "d": "8/2017"}, {"body": "expected behaviour simply supported", "d": "8/2017"}, {"body": "may interested edit suggest ask real problem forum discord server sure come way help", "d": "8/2017"}, {"body": "posva tried sure anything changed changing although docs seems pretty much without using function seems popular workaround creating child component treat root component throwing children sort looks like looking thinking root instance different component instances essentially component guess main use see avoiding duplication php code declare prop multiple places components putting actual value root children use root prop value declared say want change code setting prop value currently need change components new code whereas pass prop root one place change", "d": "8/2017"}, {"body": "looking thinking root instance different component instances essentially component props passing data form parent component child component main instance root component parent component html attributes element mount props hence making work want would require extra code vue core act mount element kind parent component pass attribute values props would advise go main child component really established pattern", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "actually browseros firing event inputs meta key pressed try using try releasing enter without meta key pressed", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "parse error vueloader please open issue well template compiler code resides repo maybe ok", "d": "8/2017"}, {"body": "hey reviewing code think comes vuetemplatecompiler vuetemplatecompiler built vuesrc compiler open issue", "d": "8/2017"}, {"body": "add backslash slash escape", "d": "8/2017"}, {"body": "javoski works obviously parse bugsolve problem uglily found bug happenedif time give pr", "d": "8/2017"}, {"body": "actually default html parser maybe browsers interpret within javascript string end script tag nt think vue", "d": "8/2017"}, {"body": "jakovski right part html spec nt parse javascript inside looks expected hccde check astexplorer", "d": "8/2017"}, {"body": "javoski nickmessing true inline script html need escaped browsers nt know js string vue exact vuetemplate distinguish js string tag name vue file one script section meet string nt take close tag immediately look behind look ahead find another look behind utill find last one correct close tagas mentioned vue vue template solve problem elegantlyit shoud better browsers ca nt may many inline script sections like", "d": "8/2017"}, {"body": "generated javascript codes eventually embedded html files ok codes separated js file depends building process nt think good idea", "d": "8/2017"}, {"body": "javoski thus usual situation considering code may embedded html files right", "d": "8/2017"}, {"body": "vendor prefixed sniffing even unreliable likely get removedchangeddeprecated future versions browsers", "d": "8/2017"}, {"body": "interesting thought feel unwarranted web platform prioritises backwards compatibility ie amp detections locked never change never release new versions browsers chrome detection would break lot things removed github search reveals results existed safari chrome amp firefox existence deemed important edge also implemented compatibility reasons github search reveals hits equivalents many millions results assume autoprefixed ios detection less well known also results github worried touchscreen mac released would also exist safari could also check absence existed desktop safari since need also add leaves edge list prefixed properties existed since edge launched nt changed perhaps testing would better since native os accessibility feature fyi supported css features mention obtained via opening browser comparing output since january", "d": "8/2017"}, {"body": "personally think opting esoteric techniques platform sniffing opens whole new worms honestly sure actually better worth unless concrete examples current sniffing strategies leading unintended behaviors certain devices intend keep", "d": "8/2017"}, {"body": "unless concrete examples current sniffing strategies leading unintended behaviors certain devices intend keep tested firefox android nt behaving incorrectly conditions codebase also android tablet pretends ios gave test case could see happens", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "would love see solution well", "d": "9/2018"}, {"body": "catch errors thrown asynchronously similar responsible anything thrown within promise chain", "d": "8/2017"}, {"body": "guess dirty hack would something like", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "\u8bd5\u4e86\u4e0b \u5b9a\u4e49\u6210 \u666e\u901a\u6570\u7ec4\u53ef\u4ee5", "d": "8/2017"}, {"body": "unfortunately would breaking change probably lot component packages expose sync props compiled vueloader using packages new version vue contains changer would break packages would emit vue app would listen", "d": "8/2017"}, {"body": "agree linusborg revisit", "d": "8/2017"}, {"body": "personally find consistent reference props camelcase javascript said changed going breaking", "d": "8/2017"}, {"body": "please revisit issue think listening camel case events dom templates impossible talked wish could consistent components default solved problem implementing helper function issues events versions edit seems like vue introduced solves dom issue still think aim consistency", "d": "1/2018"}, {"body": "definitely add note documentation today spent half hour trying figure nt work problem documentation custom events event names states reasons recommend always use kebabcase event names always like always unless emit event add note also documentation custom events sync modifier would change example use property multiple word name single word nt help problem andor add note event name incosistency previous recommendation always use kebab case page", "d": "5/2018"}, {"body": "good suggestions put issue vuejsorg repository go unnoticed issue old closed", "d": "5/2018"}, {"body": "done", "d": "5/2018"}, {"body": "current behaviour goes directly docs bug ask see event names sync modifier sections docs state exact opposite shortdiv made pr could released running bug large client would great could remove custom event patches go production", "d": "6/2018"}, {"body": "\u7528 css \u8bbe\u7f6e\u7684\u89c4\u5219\u7528 style \u672c\u6765\u5c31\u53d6\u4e0d\u5230 \u8fd9\u8ddf vue", "d": "8/2017"}, {"body": "remove prop name hellovue component work", "d": "8/2017"}, {"body": "posva hierarchy props prop", "d": "8/2017"}, {"body": "issue sorry confusion may cause", "d": "8/2017"}, {"body": "oh right let move vuerouter", "d": "8/2017"}, {"body": "hi like would javascript need wrap quotes valid js identifier demo", "d": "8/2017"}, {"body": "doh thank", "d": "8/2017"}, {"body": "actually already achievable userland probably keep way components functions return promises handle fetching template inside promise working example jsfiddle using promises", "d": "8/2017"}, {"body": "thank thisthe jsfiddle provided still fetches inline html tag html file looking box solution like angularjs also work application", "d": "8/2017"}, {"body": "need use axios similar lib fetch file ask questions forum discord server", "d": "8/2017"}, {"body": "jsfiddle provided still fetches inline html tag html file fiddle fake fetch ca nt put html file jsfiddle real project absolutely make request server retrieve html file example fetch api easy seen posva example posva said use anything want retrieve template content looking box solution like angularjs works outofthebox nt need additional library vue also way powerful angularjs since limited template fetch options entire component definition asynchronous way also work application reason nt work", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "boringer unfortunately reactive plain javascript objects arrays primitive types supported want find way around limitation try asking chat forum github issues bugs feature requests expected", "d": "8/2017"}, {"body": "note props readonly change value declared example nt happens everytime template renders object reinitialized change ignored need save object", "d": "8/2017"}, {"body": "works get warning vue setting properties data represent props common usecase maybe nt maybe warning reevaluated", "d": "8/2017"}, {"body": "root", "d": "8/2017"}, {"body": "hoc rendering includes everything slots please doublecheck functional component slots api", "d": "8/2017"}, {"body": "probably correctly express idea want slots saved using hoc component idea", "d": "8/2017"}, {"body": "simply mistake imports import syntax wrong exports options object default export usual import statement notice misssing brackets nt use defualt export bracket notation correct case", "d": "8/2017"}, {"body": "doh thanks linusborg going go bury", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "\u5728 san martin morote notifications githubcom closed receiving authored thread reply email directly view github mute thread", "d": "8/2017"}, {"body": "better handle bug reports feature requests", "d": "8/2017"}, {"body": "ok thx \u5728 san martin morote notifications githubcom better handle bug reports feature requests receiving authored thread reply email directly view github mute thread", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "proposed many times past please check", "d": "8/2017"}, {"body": "sqal said dup", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "please want report bug provide reproduction nt ask us also able use template make even easier", "d": "8/2017"}, {"body": "ok anyway thanks", "d": "8/2017"}, {"body": "flow used dev dependency flow syntax stripped built files end users vue eg consuming npm nothing related flow distributed code nt make affected flow license way concerning case would probably someone forking vue thus using source code directly even flow code governed licensepatent grant distributed way either doubt mere usage flow syntax subject license think valid concern moment logistic costs migrating blocking factor maybe someone team familiar flowts evaluate much effort entails cc herringtondarkholme ktsn octref", "d": "8/2017"}, {"body": "makes sense interesting jsx creative commons attribution international license flow nt really clear vuejs end migrating typescript also help effort", "d": "8/2017"}, {"body": "considering fact typescript team members interested vue would vote migrating typescript however use flow daytoday basics one great feature miss typescript probably research flow use return type function ts", "d": "8/2017"}, {"body": "hi think clear reasoning let explain technical issue migrating typescript doable requires many changes use option ts ts nt accept type annotation js flow means need migrate one single shot including building system changes ts flow still many subtle syntax differences differences small ubiquitous eg flow ts potential issues might tsflow checking rules eg flow allows ts nt know much code impacted trying migrate", "d": "8/2017"}, {"body": "created issue flow say facebook bsdpatents license syntax typescript flow similar cases typescript allows strict typescript interested vue perhaps vue request features flow nickmessing mentioned", "d": "8/2017"}, {"body": "features could find already requested issues looks like typescript team really busy need clear issues backlog", "d": "8/2017"}, {"body": "forgive random outside opinion would really worth seems like benefit would potential licensing problem nt really affect anything outside vue", "d": "8/2017"}, {"body": "herringtondarkholme said obviously much human effort need done big code freeze probably nt much human effort available still open discussion", "d": "8/2017"}, {"body": "end users vue eg consuming npm nothing related flow distributed code actually whole folder distributed npm package however sure could treated something flowrelated end user", "d": "8/2017"}, {"body": "would suprised find facebook patent type annotation syntax considering done since actively using neither flow vue source files using anything flowrelated anyway", "d": "8/2017"}, {"body": "linusborg flow license bsd patents react license granted hereunder terminate automatically without notice subsidiaries corporate affiliates agents initiate directly indirectly take direct financial interest patent assertion facebook subsidiaries corporate affiliates ii party patent assertion arises whole part software technology product service facebook subsidiaries corporate affiliates iii party relating software notwithstanding foregoing facebook subsidiaries corporate affiliates files lawsuit alleging patent infringement first instance respond filing patent infringement counterclaim lawsuit party unrelated software license granted hereunder terminate section paragraph due counterclaim opinion means proprietary product develop facebook come develop thing without fear lawsuit file suit using flow react bsdpatent licensed facebook software github license use software terminates invalidating proprietary claims may tl dr yes think using flow syntax alone impact vuejs legal standpoint lawyer opinion", "d": "8/2017"}, {"body": "file suit using flow react bsdpatent licensed facebook software github license use software terminates invalidating proprietary claims may using flow nothing vue code use contains hint flow fact vue maintainers used flow build process create files hadhave licence flow concern using flow patented technologies one could find applications far every interpretation would crazy would mean people use patented technology could get legal problems product use build patents legal crazy true stop writing software alltogether sued anything everything second would mean someone held patent something used webpack would stop using already built files built webpack still legal", "d": "8/2017"}, {"body": "linusborg may right like said lawyer expert law think licensing goes general nature open source dumb types threads considerations even need exist", "d": "8/2017"}, {"body": "say decide convert would happy help lot successpractice lately converting projects helping much eslint typescript compatibility work would lot reasons including patent issues understand majoritycore team", "d": "8/2017"}, {"body": "vue codebase rewriting ts full ts support like angular", "d": "8/2017"}, {"body": "vue typescript take learnings polymer", "d": "8/2017"}, {"body": "would interested helping convert typescript well needed", "d": "9/2017"}, {"body": "nt causes longer learning curve angularlike nature starting longer time waiting first update due vue team learning experimenting new technology yes coming ones may become faster makes ts must learnt technology diving vuejs loses vue one greatest points angular react shorter learning time idea migrating ts", "d": "9/2017"}, {"body": "khalednuur typescript would used vue source code similar flow nt mean need use still need learn types flow would typescript difference one support bigger community", "d": "9/2017"}, {"body": "khalednuur also understanding angular really tries enforce full typing use typescript pretty silly feel like ability choose type one strengths example nt tend type application code much break something module component type document way months make application change nt need go reread component makes sense understanding angular kinda forces nothing", "d": "9/2017"}, {"body": "article javascript libraries written typescript codebase typescript nt mean application developer needs use typescript angular less targeting enterprise developers largely benefit typescript codebase also doubled decorators looks better typescript compared code examples would always look better typescript also support nt really advertise much js angular syntax function app const appcomponent ngcore component selector myapp template first angular app class constructor function constructor windowapp windowapp typescript component selector myapp template first angular app class appcomponent ngmodule imports browsermodule declarations appcomponent bootstrap appcomponent class appmodule vue codebase nt really mention using typed language problems people mentioning typescript repo already flow even vue uses typescript nt need use decorators vue api would look example", "d": "9/2017"}, {"body": "going relicensing flow mit hope relieves concerns", "d": "9/2017"}, {"body": "mroch wow big news guess closed", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "issues debug", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow doc may help", "d": "8/2017"}, {"body": "sure actually possible guess could move generated render function statics value true problem behind fr nt clear nt trying achieve", "d": "8/2017"}, {"body": "yes essentially trying achieve seems like one extra unnecessary listener since async data case never false case ran providing nice semantic observable status messages suppose could use following template render status seems lot simpler also acknowledge rendering trivial another example less trivial streaming updating list objects finalized nt want keep updating", "d": "8/2017"}, {"body": "data never updates probably nt need optimise anything else nt think intent clear btw would without read condition met render basically sure much extra work needed achieve keep mind nt want add syntax sugar vue moment want keep lib small may revisit future though moment already achieve using ifelse proly pass", "d": "8/2017"}, {"body": "perhaps modifier could used seems less ambiguous although ca nt speak dev effort thanks consideration", "d": "8/2017"}, {"body": "hi vonce used static content doc tell compiler nt add responsive functionalities save cpu time otherwise content responsive methods could used save kind cpu time use control done never change component never invokes responsive code watcher performance lost code running fastest code", "d": "8/2017"}, {"body": "plasmatium pointed essentially compiler optimization hint nt really make sense make dynamic syntax also makes feel bit confusing also meant optimizing large trees plain element nodes nested components inside component already serves update boundary props passed components change updates happen downstream", "d": "9/2017"}, {"body": "would nt conflict default slot", "d": "8/2017"}, {"body": "rayrutjes slots make sense template property render function right", "d": "8/2017"}, {"body": "rayrutjes", "d": "8/2017"}, {"body": "conflicts default api importantly template behavior consistent inspecting parent template alone behavior vary based definition child component intentional design decision beginning going change", "d": "8/2017"}, {"body": "seems edge case related tracked", "d": "8/2017"}, {"body": "thanks looking jkzing closing dup", "d": "8/2017"}, {"body": "easily without changing api javascript quick amp dirty ajaxplugin toastplugin loadingplugin alertplugin foreach vueuse vue safer ajaxplugin toastplugin loadingplugin alertplugin foreach x gt vueuse x see arrayprototypeforeach", "d": "8/2017"}, {"body": "sirlancelot oh good idea thank", "d": "8/2017"}, {"body": "ca nt clone every must unique", "d": "8/2017"}, {"body": "sirlancelot really problem jjvainav vnodes representing child components different format vnodes representing elements example ca nt simply reuse use depending weither tag registered globally nt component template nt come parent ca nt inject child component without component using bug usage question please use forum chat", "d": "8/2017"}, {"body": "injected values resolved first actually provide values based", "d": "8/2017"}, {"body": "rayrutjes sorry ca nt understand please explain detail", "d": "8/2017"}, {"body": "provided values able rely data data able rely injected values order must inject state provide", "d": "8/2017"}, {"body": "rayrutjes oh see function use state", "d": "8/2017"}, {"body": "js import util util const parent new vue provide util computedlike util mounted thisutilsamecodeforuse const child new vue parent parent inject util mounted thisutilsamecodeforuse without watch nice", "d": "8/2017"}, {"body": "paulopmx change class rerender new class new value remove make work use instead", "d": "8/2017"}, {"body": "reseting input value blank resets input value bound prop always empty", "d": "8/2017"}, {"body": "nickmessing thanks reply actually simplified example actually bound defined prop parent defined", "d": "8/2017"}, {"body": "paulopmx option effect components nt effect root app nothing works", "d": "8/2017"}, {"body": "paulopmx check defined add every render reset value see console", "d": "8/2017"}, {"body": "updated code works yeah looks like right must miss something bindings", "d": "8/2017"}, {"body": "\u8be5\u7c7b\u95ee\u9898\u8bf7\u5230 \u6216", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "\u8c22\u8c22", "d": "8/2017"}, {"body": "elements inside keyed", "d": "8/2017"}, {"body": "checkbox checkbox", "d": "8/2017"}, {"body": "\u8c22\u8c22\u5927\u5bb6", "d": "8/2017"}, {"body": "use attribute", "d": "8/2017"}, {"body": "thanks sorry trouble start javascript vue django must say fun takes time understand details", "d": "8/2017"}, {"body": "worries recommend check discord server get fast feedback", "d": "8/2017"}, {"body": "dup", "d": "8/2017"}, {"body": "thanks proposal right lean adding syntax sugar reason one exists inputs able use components especially ui components makes code readable adding new syntax something already feasible short nt direction want go however think improve docs happily take pr", "d": "8/2017"}, {"body": "hello repro actually reproduce issue neither provided data trying assign tried infer data description unable reproduce issue closing likely issue somewhere else able provide working repro feel free open new issue", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow nt defined look console better hint", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "want help project ask questions forum discord server gitter stackoverflow reporting bug need reproduction please provide one", "d": "8/2017"}, {"body": "ok ask thanks", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "nice neat considering data attributes temporary variables outside", "d": "8/2017"}, {"body": "sure understand need looking example wrap component handles drag events vue export default methods draghandler event debugger directives supposed super simple dom abstractions need maintain state invocations use dom data attributes need handle something complicated state like functions likely better using proper component directives vue used stateful removed favor using proper components much overlap", "d": "8/2017"}, {"body": "goto solution save state html element sirlancelot said want keep directives simple limit responsibility become complex using component way go", "d": "8/2017"}, {"body": "adding posva said directive ability vue deliberately removed essentially custom directives vue similar components abilities made unclear use vue decided make destinction clear need state generally use component directive directives responsibilities reduced lowlevel dom work higher level woirk done components need state directive arises edge case use element store workaround", "d": "8/2017"}, {"body": "want manage semicomplicated state directive could use solution like slippery slope though take care", "d": "8/2017"}, {"body": "listeners intervalstimeouts state need store somehow could cleared unbind", "d": "2/2018"}, {"body": "either store directly element save using element key", "d": "2/2018"}, {"body": "cztomsik still cleanup code sample provided describes share common state different hook calls want add cleanup", "d": "2/2018"}, {"body": "", "d": "8/2017"}, {"body": "sirlancelot thanks", "d": "8/2017"}, {"body": "property applied sibling nodes case move property wrapper", "d": "8/2017"}, {"body": "tag allowed according html spec stripped automatically browser use template option", "d": "8/2017"}, {"body": "writing two times", "d": "8/2017"}, {"body": "see nt believe showed colleague submitted bug nt see amp amp amp checking make sure copypasta nt happen still effect happening project maybe doubleescaping sure enough double escaping back end", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "dup", "d": "8/2017"}, {"body": "repro link nt contain", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "would kindly tell us vmodel code found source website wo nt search site nt even form", "d": "8/2017"}, {"body": "sorry false alarm", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "closing instead opening discover really affect vue", "d": "8/2017"}, {"body": "looks like bug thanks reporting looks like introduced looks like problem happens patch vnodes though edit looks like false vnode patch making call mount disappearing node tree", "d": "8/2017"}, {"body": "fixed note changing element wrapping slots element considered replaced thus slot content including components destroyed recreated unfortunately vdom patching works unlikely change", "d": "8/2017"}, {"body": "sounds good thanks ballpark date next release", "d": "8/2017"}, {"body": "also wondering next release occur meantime way install version thanks", "d": "9/2017"}, {"body": "clone repo build files run use local version vue rough instructions", "d": "9/2017"}, {"body": "two mistakes fiddle shortland shoud use unique key instead using index directly see fixed", "d": "8/2017"}, {"body": "hi glad hear vue used microsoft production thanks reporting meanwhile track progress improved typing main blocker blocking change declaration need transition plan introduce new change also help transition inferring optional generic type parameter make compatible api without losing precise inference let first close issue concentrate discussion pull request thanks", "d": "8/2017"}, {"body": "second one sounds rather like mistake part b bug could provide small reproduction problem appears sidenote aware refs vfor end array", "d": "8/2017"}, {"body": "nickmessing think solved instead adding yet another warning core lib would bug true would remove label ask op suggest rule repo ok", "d": "8/2017"}, {"body": "linusborg agree", "d": "8/2017"}, {"body": "disagree problem refs might specified programatically case warning would issued even though would save user lot trouble possibilities linter would warn even though nt two cases mutually exclusive linter nt enough information reliably determine duplicate references runtime enough information", "d": "8/2017"}, {"body": "incidentally try come simple test case original second example next week", "d": "8/2017"}, {"body": "concede linter catch dynamic refs many cases would implement warning mechanism however simple check nt enough either totally valid overwrite refs would somehow register ref assignments run render function check ne assignment assigned privously render run think feasable", "d": "8/2017"}, {"body": "linusborg one easy way need wait drop ie support sweatsmile", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "11/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks use jsfiddle starting point", "d": "8/2017"}, {"body": "lastest chrome works computer doesnot work maybe jsfiddle alse work donot know describe want know someone encounter write jsfiddle", "d": "8/2017"}, {"body": "maybe ask forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "guess relevant vue input software please try remove vue dependency see still happen", "d": "8/2017"}, {"body": "maybe check somehow help ddcouples possible provide minimized demo contains necessary code reproduce problem without nothing else thanks", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "sounds reasonable especially vue automatically prefix template identifiers", "d": "8/2017"}, {"body": "actually sometimes use demonstration purposes people coming react background nt think prohibited since works perfectly fine rather part recommended instead forbidden ps though herringtondarkholme think reasonable remove prohibited keywords make sense support expression ex", "d": "8/2017"}, {"body": "nickmessing nt think allow since promote inappropriate logic template like example give would think probably belong method vm", "d": "8/2017"}, {"body": "nt think prohibited since works perfectly fine ah see nt realize prefix works fine", "d": "8/2017"}, {"body": "since users actually use inside templates prohibiting breaking change nickmessing suggested think would better make rule eslint plugin instead", "d": "9/2017"}, {"body": "nt akryum wrote similar issue rely find phone", "d": "8/2017"}, {"body": "nvmd something different textareainput nt working either different components input behaving instead treating input marked regression still nt checked introduced fix something else", "d": "8/2017"}, {"body": "fix issue", "d": "8/2017"}, {"body": "mosinve nt", "d": "8/2017"}, {"body": "seems commit breaked", "d": "8/2017"}, {"body": "maybe could check whether real custome component apply gencomponentmodel method posva could nice first contribution try fix weekend case someone wants try", "d": "8/2017"}, {"body": "defcc agree points", "d": "8/2017"}, {"body": "defcc problem idea expression dynamic bindings nt really know compile time whether component original intention really meant dynamic component switching cases allowing upgrading normal element component primarily using indom template html element placement restrictions eg trying use component inside somehow feel current behavior sticks intention better unfortunately fix break cases users casting custom component specific cases like component libs probably better manually handle events instead using finergrained control looked latest bootstrapvue code seems split separate components think better direction", "d": "9/2017"}, {"body": "thanks good explanation directive", "d": "9/2017"}, {"body": "riophae achieve using computed prop like", "d": "8/2017"}, {"body": "define props based props directly default value order props resolved decide default value however object order keys thus making props value depend lead unexpected behaviour instead use computed property add property hold actual variable change hook combine necessary", "d": "8/2017"}, {"body": "yeah computed property solves problem actually possible determine order js var propswithdefaultfunction var propswithdefaultfunctionthatreliesonothers var otherprops var key props var prop props key typeof prop object amp amp typeof propdefault function propdefaultargumentslength propswithdefaultfunctionpush key else propswithdefaultfunctionthatreliesonotherspush key else otherpropspush key first resolve default values otherpropsforeach resolve default values propswithdefaultfunctionforeach last resolve default values propswithdefaultfunctionthatreliesonothersforeach", "d": "8/2017"}, {"body": "riophae relies relies", "d": "8/2017"}, {"body": "nickmessing yeah impossible", "d": "8/2017"}, {"body": "riophae actually possible using calling everything fake objects reasonable limits browser support computed properties approach works great scenarios", "d": "8/2017"}, {"body": "try", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow nothing deal vue akryum faster give answer", "d": "8/2017"}, {"body": "related webpack indeed", "d": "8/2017"}, {"body": "akryum works posva asked thought alias work style tag", "d": "8/2017"}, {"body": "vivekroy repository vuejs library webpack template problem webpack vue find template repo", "d": "8/2017"}, {"body": "thezealousfool well found use nt need set another alias work", "d": "7/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "specifying option overwrite whatever template dom property advanced syntax needs promise resolves component", "d": "8/2017"}, {"body": "typo makes enumerable fixed pr merged", "d": "9/2017"}, {"body": "jounqin sure even enumerable still present nt got time properly investigate issue yet", "d": "9/2017"}, {"body": "ah sorry read wrong know issue try figure later used extract styles first chunk also another async chunk generate property correctly nt encountered problem however sounds good getter always", "d": "9/2017"}, {"body": "style invalid change color red work need use object syntax", "d": "8/2017"}, {"body": "also tested using color red still work updated fiddle", "d": "8/2017"}, {"body": "problem initial value setting color height using string syntax nt work want object syntax", "d": "8/2017"}, {"body": "fixes fiddle actual project get back information thanks", "d": "8/2017"}, {"body": "correct problem invalid string syntax forgotten standard browser behavior modify style style set invalid value remembered since relying behavior css stylesheets accomplish graceful degradation many cases may worthwhile development build vue validate style actually set warn nt least object notation used since graceful degradation nt possible anyway using object notation relatively easy mistake make hard debug forgot golden rule forgot understand considered outside scope vue", "d": "8/2017"}, {"body": "note understand would nt possible scoped slots however optimization might help even scoped slots would trigger rerender child component rerender parent component generated delta actual slot content", "d": "8/2017"}, {"body": "well think would possible implement something would diff slot contents updateiung components ignoring difficulties implementing moment ca nt say much right would come performance tradeoff proposal would save rendering virtualdom child nothing slot changed everytime diffing slot content find changes slot content would diffing slot content twice render function child run new vdom diffed essentially means children big templates small slot contents would run better children small templates big slots woudl run worse changes happen sure better also technically child would keep outdated virtualdom content slot nodes parent created fresh nodes rerendered suspect might technical hurdle", "d": "8/2017"}, {"body": "case slot component uses vfor loop apply hundreds repeats case unquestionably faster calculate delta wonder reasonably detected", "d": "8/2017"}, {"body": "wonder reasonably detected hardly compile time runtime would require analysis compilation would derminate template expensive set flag component resolts slot diffing runtime nt cheap components sounds easy measuring expensiveness would tricky considering big impactr temnplate actually expensive small fact statically analyse compilation big arrays render runtime etc pp new api would thinkable set flag manually least theory", "d": "8/2017"}, {"body": "would say either slot used inside loop slot contents smaller template time probably worth test delta particular case would save make rather unintuitive changes structure library used lot developers company", "d": "8/2017"}, {"body": "also calling render function typically much slower performing diff two strings data", "d": "8/2017"}, {"body": "hi issue still active", "d": "1/2018"}, {"body": "yes", "d": "1/2018"}, {"body": "linusborg everytime diffing slot content find changes slot content would diffing slot content twice render function child run new vdom diffed would possible introduce new watcher boundary api would internal implementation template slot content would compile way slot content would nt even rerender data depends nt change since nt rerender nt need diffed", "d": "6/2018"}, {"body": "show another usecase bumped vue computed properties currently ca nt take arguments instead want use calculated data loop generally need pass data computed resort one using regular method however using regular method means data recomputed every render bad performance create separate functional component list item create instance component item list component rerender data passed changed want however putting template component ideal usually small snippets nt really warrant template b component uses template needs file makes solution feel even heavier already solution came component calculate data render html via default slot thereby forgoing template altogether get crux issue pass content slot child component always rerender along parent means data also recalculated every single totally negates benefit got using regular method demo action potential solution would property within child component component longer functional rendering big list using functional components makes huge difference", "d": "6/2018"}, {"body": "create computed prop returns array total order values orders", "d": "6/2018"}, {"body": "jacekkarczmarczyk problem orders changes order totals recalculated", "d": "6/2018"}, {"body": "good news seems like resolved vue compilergenerated slots functions invoked child component render call ensures dependencies slots collected dependencies child instead parent means slot content changes child rerenders parent rerenders child slot content change", "d": "9/2018"}, {"body": "app containing component template syntax error broken app definition runtime exception something developer responsibility fixing deploying app", "d": "9/2017"}, {"body": "also closing issues quickly think premature course app broken entire app work broken template comes play make issues way harder debug necessary development prototyping especially since error applies compiler case anyway html template code case allow developers designer fully live edit templates live preview live data fact specific template nt yet render emits error fine entire application becomes useless annoying instantiate second vue instance test compiler pipeline using works course one reason html applications successful resilience many error scenarios alternative wpfxaml like experience slightest compilation runtime mistake renders nothing long term goal rendering layer try least somewhat resilient errors vue already aforementioned case rendering renderable html break everything especially might easy fix would hope might least open us propose pull request find time investigate pipeline best make fix affect performance maintainability regards ps case prototyping phase components turned server side rendered components automatically course valid", "d": "9/2017"}, {"body": "mmh sure want force behaviour flexible allow user specify offset per child css really think want work absolutely positioned said overlap", "d": "8/2017"}, {"body": "assumes guess cause correct nt think happening absolute positioning think ordering flip calculations applying style changes remove three items one go collapse towards location first removed item first fall directly downwards seems flip calculation works correct animation applying absolute positioning works fine long single item removed issue two items removed calculation fails correctly calculate item end position seems make sense absolute positioning applied transitiongroup iterates children seems make changes classesstyles goes items multiple elements removed change affects subsequent items unexpected way previous elements removal already removed flow calculates end position explains issue single removal problem seen multiple items removed would work user expects transition group firstly calculated flip positions removed elements currently stand without yet mutating classesstyles made changes classesstyles elements way elements would animate expected", "d": "8/2017"}, {"body": "nt think happening absolute positioning think ordering flip calculations applying style changes remove three items one go collapse towards location first removed item first fall directly downwards really remove many clicking remove one see behaviour", "d": "8/2017"}, {"body": "ah yes sorry quite right made fiddle test unless would make good feature request something like element removed absolutetransformed position calculated relative parent held leave animation applies nt bug suppose closed", "d": "8/2017"}, {"body": "actually intended said try set value input something impossible value transformed empty string vue consistent aspect set something js like html attributes strings makes sense vue use instead would also breaking change", "d": "8/2017"}, {"body": "working expected change prop value look console happens change th ename parent parent renders passes static value name thus overriding changes solve use data property save current state", "d": "8/2017"}, {"body": "posva thanks use data refer name yes works thanks", "d": "8/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "8/2017"}, {"body": "simple repo using nuxt ssr frameworks eg ream issue pretty convinced vuessr bug", "d": "8/2017"}, {"body": "would help make vanilla vue thanks", "d": "8/2017"}, {"body": "nailed issue replacing html entities rendered output updated example code nt know would necessary since browsers anyway adding rendered opening tag browser understand trigger clientserver dom mismatch warning opened pr remove html entity conversion", "d": "8/2017"}, {"body": "thanks concise repro looks like bug thanks proposing pr", "d": "8/2017"}, {"body": "expected behaviour methods contain arbitrary code cached therefore every time component renders get called inside method change something triggers render method get executed careful enters infinite loop nt precise enough use performancenow get infinite loop look console put nutshell change data used template method called template infinite loop example even though changing content elements changing adjacent element template whole template renders therefore method gets called goes index many workarounds depend use case one could using component ask question forum discord server gitter stackoverflow get personal help", "d": "8/2017"}, {"body": "issue foo change data every time nt rerender occur data changed comparison angular vue angular", "d": "8/2017"}, {"body": "example even though changing content li elements changing adjacent element template whole template renders therefore method foo gets called vfor goes index every call changes displayed adjacently therefore rerenders vfor well template calls", "d": "8/2017"}, {"body": "okay noticed even angular runs infinite digest date replaced performance two questions though angular still faster nt vue avoid list items rerendered endtime changed since nt rely endtime", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "think api feels bit confusing took times grasp trying fact think easier externalize backend api bundle bundle server code require backend api directly", "d": "9/2017"}, {"body": "", "d": "8/2017"}, {"body": "cdn \u8fd8\u6709\u4e00\u79cd\u53ef\u80fd\u662f\u4f60\u7535\u8111\u91cc cdn \u9759\u6001\u8d44\u6e90\u7f13\u5b58\u8fc7\u4e86\u6240\u4ee5\u611f\u53d7\u4e0d\u660e\u663e translation issue talking jsfiddle sometimes blocked china keep eye thanks", "d": "8/2017"}, {"body": "\u56fd\u5185\u67d0\u4e9b\u8fd0\u8425\u5546\u7684\u7f51\u7edc\u662f\u4f1a\u6253\u4e0d\u5f00 \u786e\u5b9e\u6bd4\u8f83\u7a33\u5b9a", "d": "8/2017"}, {"body": "", "d": "3/2018"}, {"body": "", "d": "4/2018"}, {"body": "\u9047\u5230\u540c\u6837\u95ee\u9898", "d": "4/2018"}, {"body": "", "d": "6/2018"}, {"body": "", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "looking relation issue well also one location selfexplanatory", "d": "8/2017"}, {"body": "yes definitely warnings referring", "d": "8/2017"}, {"body": "right jumped vue would realy help debug html code request related pr", "d": "3/2018"}, {"body": "", "d": "8/2017"}, {"body": "\u4f60\u7684 repro", "d": "8/2017"}, {"body": "\u8bf7\u597d\u597d\u63d0\u4f9b repro", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi drdaemos maybe use relevant thread jsfiddle good luck", "d": "8/2017"}, {"body": "yep expected plasmatium explains use want pass props root instance rarely case", "d": "8/2017"}, {"body": "yeah thanks accept use guess would helpful add vue warning usage", "d": "8/2017"}, {"body": "would breaking change done instead adding modifier strips tags easily handled computed property utility function", "d": "8/2017"}, {"body": "clarify saying changing default behavior would breaking change guess ideally would nice sanitized default suggestion using modifier sounds great would look like", "d": "8/2017"}, {"body": "hi two cents would seems unnecessary vue maintain html sanitizer given libraries already well argue appropriate places perform sanitization also allow better developer control ideas sanitize html persisting database returning json response sanitize html vue computed property would useful unable modify wordpress backend might try calling library property also worth mentioning docs appropriate warnings guide reference sections", "d": "8/2017"}, {"body": "rpkilby sanitizehtml seems great work use case still think would nice vue automatically added security measure absolutely hear concerns thanks input link", "d": "8/2017"}, {"body": "nt think good idea vue add builtin htmlsanitizer either introducing new config eg compromised way", "d": "8/2017"}, {"body": "agree rpkilby shipping builtin sanitizer would add extra bundle weight rare use case use cases trusted content also trivial add setting", "d": "8/2017"}, {"body": "know older thread setting throws uncaught referenceerror sanitizehtml defined know sanitizehtml defined previously imported used vue called", "d": "1/2018"}, {"body": "braunson work fine using vue build spa vuex vuerouter version command line one problem default would remove fix", "d": "9/2018"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "8/2017"}, {"body": "sorry provide minimal jsfiddle github repository ssr case find read source code see vueserverrenderer source code may understand say save data attribute make cache get bigger bigger vueserverrenderer source code javascript function cached fn var cache objectcreate null return function cachedfn str var hit cache str return hit cache str fn str function escape return sreplace lt gt amp g escapechar var cachedescape cached escape function renderattr key value isbooleanattr key isfalsyattrvalue value return key key else isenumeratedattr key return key isfalsyattrvalue value value false false true else isfalsyattrvalue value return key typeof value string cachedescape value value return", "d": "8/2017"}, {"body": "would get bigger using property", "d": "8/2017"}, {"body": "cachedescape cached attributte value value difference every request", "d": "8/2017"}, {"body": "please develop situation exactly leading leak please maybe naive attributes", "d": "8/2017"}, {"body": "posva issue normal static attributes think leaks eg ids used attribute values cache could eventually contain every single id database use ids database entries attribute values example time users request pages different items server cache would grow grow containing item ids db could potentially happen data db used element attributes might rather need lrucache limited size", "d": "8/2017"}, {"body": "linusborg thinking issue nt clear beginning problem leak never released memory edit hate github longer logs change title", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "\u6211\u5728state\u91cc\u4f7f\u7528\u4e86require", "d": "9/2017"}, {"body": "hi wormgirl thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow note reproduction link needs minimal app repo note link another website thanks", "d": "8/2017"}, {"body": "problem likely template definition uses template literals nt work ca nt verify right use normal strings instead use babel option fiddle verify please", "d": "8/2017"}, {"body": "yes sir changed normal string worked think use babel orther avoid errors since rely heavily ie customers thanks reply", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "please read documentation expected behaviour nt clone arraysobject wo nt change", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "tab key yet current input element lose focus keyup event tab actually fired next input element last input element behaved differently demo", "d": "8/2017"}, {"body": "bug documentonkeydown works going javoski", "d": "8/2017"}, {"body": "sure really want nt know javascript keyup event works mean maybe use instead close cuz demo worked expected according tests", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow btw reporting bug asking help providing strict minimal augment chances getting help", "d": "8/2017"}, {"body": "", "d": "9/2017"}, {"body": "transition", "d": "9/2017"}, {"body": "\u91cd\u73b0\u5e94\u5f53\u5c3d\u91cf\u7cbe\u7b80 vue \u7684 bug \u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u91cd\u73b0\u610f\u5473\u7740\u5b83\u7cbe\u786e\u5730\u5b9a\u4f4d\u4e86 bug \u672c\u8eab \u5b83\u5e94\u5f53\u53ea\u5305\u542b\u80fd\u591f\u89e6\u53d1 bug bug", "d": "9/2017"}, {"body": "\u6211\u4e5f\u9047\u5230\u540c\u6837\u7684\u95ee\u9898 \u4f60\u89e3\u51b3\u4e86\u5417", "d": "3/2018"}, {"body": "thanks reporting fixed", "d": "8/2017"}, {"body": "closing duplicate", "d": "8/2017"}, {"body": "found issue vscode ide problem nature", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow real problem webpack mix config vueloader really bug", "d": "8/2017"}, {"body": "posva vueloader sourcemap correct real problem webpack mix ara sure give issue webpack", "d": "9/2017"}, {"body": "vueloader import vuescript babelloader nodemodulesvueloaderlibselector typescript amp find problem babelloader create sourcemap correct", "d": "9/2017"}, {"body": "xiachaoxulu solve problem", "d": "12/2017"}, {"body": "sgehrman use carriage return line feed characters crlf aka new line use web", "d": "8/2017"}, {"body": "note atom users default os default crlf windows change setting lf", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "using also nt work would intuitively expected domdiffing applying change attribute value like one would expect", "d": "8/2017"}, {"body": "thing broken using selfclosing input tag", "d": "8/2017"}, {"body": "fiddle showing works vanilla htmljs raises concern vue dom diffing like claims attribute would end modified value inputted text would remain inside input", "d": "8/2017"}, {"body": "syropian suggested add dummy workaround works intuitive wasteful", "d": "8/2017"}, {"body": "trusktr attribute special expected behaviour without carry around think even", "d": "8/2017"}, {"body": "nickmessing intuitive please fix sort thing work vue works browser sure switching wo nt work case could rerender would whatever browser actually otherwise vue nt dom diffing like one would assume switching work vue make intuitively easy nt framework like vue goal make things easy", "d": "8/2017"}, {"body": "see fact someone telling unituitively use vmodel workaround problem frustrating library issue gets closed library author easily improve library benefit users cost small onetime extra effort library author side library author chooses perhaps author convenience true benefit user could instead leave open suggest pr made much better choice", "d": "8/2017"}, {"body": "trusktr well rerendering diffs indeed let imagine simple scenario step first render dom looks like step add text dom looks like consider describing domprop attr step change vue calculate diff apply result value gets removed intuitive understand virtual dom based rerendering remove new helps replaced see", "d": "8/2017"}, {"body": "example nt really applicable case also mentioned implementation details end users nt need care case simple thing changing type type vice versa optimize dom diffing expected case end users wo nt run unexpected behavior another way put simply change type type using vanilla domjs simple vue vue extension people expect vanilla dom honestly good enough reason make optimization end case similar cases make intuitive possible end users", "d": "8/2017"}, {"body": "updated title remove question mark even hack dom diffing working vue destroying existing element creating whole new one rather modifying attribute really bad destroys interoperability outside code example bootstrap validator stops working reference nolongerexisting element vue supposed incrementally adoptable interoperable outside code fe jquery plugins simply acceptable", "d": "8/2017"}, {"body": "nickmessing vue always domdiffing like claims fiddle work start typing input field see values logged console toggle showhide password vue domdiffing properly would changing attribute input case continue see output console case input console time showhide toggled vue replaces entire element new one broke simple tool lead code leak unused dom memory", "d": "8/2017"}, {"body": "example using react domdiffing works expected", "d": "8/2017"}, {"body": "trusktr indeed makes sense change goes one textlike input another vue never claiming rather vue guarantees keep sync actual dom virtual dom using reactivity system impossible predict going since internal api change time bug since keeping sync actual dom virtual dom defined template probably suboptimal replace whole input switching one textlike another try optimize vue never designed friendly jquery plugins", "d": "8/2017"}, {"body": "impossible predict going since internal api change time true guarantee atomicity proposed regardless implementation attribute supposed change based vue template thing dom change corresponding real attribute suboptimal replace whole input switching one textlike another probably suboptimal ever replace input matter type transition changing type text file dom changes empty string nt think user going try though simply use either needed make choice way would vanilla dom case nt think need replace input element regardless type change happens simply ca nt predict user fair vue make assumptions even unintentional", "d": "8/2017"}, {"body": "fiddle shows events type change think interest tool work existing standardized dom functionality working expectations dom works", "d": "8/2017"}, {"body": "fyi intentional mechanism dealing bindings different bindings toggle say eventvalue bindings generated compile time would different straightforward replace element cases toggling use case considered easy fix", "d": "8/2017"}, {"body": "vue uses underscore prefixes internal methods advised", "d": "8/2017"}, {"body": "prs add warnings check methods names welcome guess yeah nt name methods starting underscore", "d": "8/2017"}, {"body": "nt note docs think unreasonable expect people respect naming strategies methods however understand may simple make change make pr add warnings make notes documentation", "d": "8/2017"}, {"body": "posva believe similar prs existed add warning turned adding warning nt easy vue adds methods one one hard tell word internal", "d": "8/2017"}, {"body": "damn nt think hard case worth pointing docs future versions use prevent right", "d": "8/2017"}, {"body": "posva still unfamiliar vue codebase symbols seem like great way mitigate issue entirely idea though breaking change simply namespace methods something like updating docs pr nt really see good place add note naming methods guide perhaps deserves heading still trying understand codebase rather write guide something nt completely understand", "d": "8/2017"}, {"body": "posva herringtondarkholme justinbeaudry might misunderstanding would possible provide warning perhaps also", "d": "8/2017"}, {"body": "chrisvfritz trying something like locally morning see would work seems instead trying warn collisions specific names warning method names seems best bet warning almost nt seem harsh enough though imo", "d": "8/2017"}, {"body": "chrisvfritz problem library use prefixed method names hide implementation warn based prefix library users undesired warning", "d": "8/2017"}, {"body": "herringtondarkholme prefixed names nt used due possible namespace collisions seems unreasonable find every internal method used warn method conflicts imo either warn every prefixed method name warning namespace methods", "d": "8/2017"}, {"body": "herringtondarkholme agree justinbeaudry case sounds like suggest use underscoreprefixed datumpropcomputedmethod names ca nt guarantee vue wo nt conflict future means plugins could already break moment including patch release think better onetime soft break warning suggests alternate strategy maybe prefix could officially reserved private plugin properties suggested namespace like avoid conflicts plugins use similar strategy even applicationspecific pluginsmixins property registration could display warning", "d": "8/2017"}, {"body": "slight aside private methods specifically taking advantage js scoping might make sense example js export default function myprivatefunc vm", "d": "8/2017"}, {"body": "chrisvfritz agree introducing new naming pattern good enough safely use", "d": "8/2017"}, {"body": "imo either warn every prefixed method name warning namespace methods say warning introducing new naming method convention make lot library creators warnings fill console people using plugins making difficult debug furthermore people come complain create issues nothing vue repository also plugins even vue add methods one one create static list methods names nt used ca nt", "d": "8/2017"}, {"body": "posva even vue add methods one one create static list methods names nt used ca nt unfortunately ca nt create static list private property names might used future maintaining list would pain easily falling sync introducing new naming method convention make lot library creators warnings fill console people using plugins making difficult debug necessarily could start introducing new config eg enabled could throw actual errors stack traces see exactly method defined release could reach biggest plugin authors personally suggesting enable default tests plugin authors trained could include softer warning default eg way anyone still affected see warnings instead scarier errors apps wo nt break even dev unless already broken due real conflict warnings still include stack traces users see exactly problem came obvious name message could even describe possible plugin causing naming conflict people probably using many plugins ca nt narrow even good reading stack traces future could continue used compatibility conventions want establish decided warn component names without dash using standalone build suggestion making right btw thoughts", "d": "8/2017"}, {"body": "looks like huge amount work little benefit think easier answer every issue may arise future little contacting every big plugin author pov note docs best option using front property user must aware recommending using looks like good trade", "d": "8/2017"}, {"body": "reproduced property well updated issue", "d": "8/2017"}, {"body": "posva agree right problem relatively small least far measure since overriding private properties produce difficulttodiagnose errors worse subtle bugs nt even produce error since difficult track report might remain largely invisible problem longer wait something like plugins exist conflicts arise vue pluginsmixins feel like wait bigger problem guaranteed keep growing vue popularity even work point justinbeaudry yes warn toplevel properties data props computed properties methods", "d": "8/2017"}, {"body": "still think pragmatic way document people built plugins work probably got around naming restriction already really think trying solve problem nt exist may happen future new users trying create plugins face issue find thread end fixing couple hours max", "d": "8/2017"}, {"body": "posva sounds like primary concern whether worth effort accurate think work towards eslint rule already done would nt mind writing optional warnings behind config flag devonly feature also would nt add weight production build sound acceptable place start", "d": "8/2017"}, {"body": "chrisvfritz main concern think careful adding warnings impact development experience everybody may help dozen persons sometimes think adding documentation eslint plugins better", "d": "8/2017"}, {"body": "posva impact development experience trying avoid behind config flag would nt affect experience care future compatibility always positive way think hiding important warning behind compatibility flag likely make people angry offering chance take minutes prevent apps breaking future see similar many security issues use ssl even though user credentials probably wo nt stolen eliminating especially ugly scenario despite relatively low likelihood occurrence cases easy fix make entire vue app could break time way would difficult diagnose possibly even detect feel worth couple minutes fix even probably wo nt happen", "d": "8/2017"}, {"body": "development experience also mean time impact performance nt clear sorry really depends check happen flag deactivate tipwarning looks reasonable", "d": "8/2017"}, {"body": "ah see since check happens initialization already iterating property checks impact minimal", "d": "8/2017"}, {"body": "transition must one element vif allows use development version see error", "d": "8/2017"}, {"body": "thank answer seen error console beforehand seems like mode outin work transitiongroup would one achieve desired effect use hooks trigger animations manually cleaner way", "d": "8/2017"}, {"body": "personally use vif transitiongroup nt seem fit use case please ask questions forums discord", "d": "8/2017"}, {"body": "thank sorry inconvenience", "d": "8/2017"}, {"body": "worries", "d": "8/2017"}, {"body": "code works fine mean ie instead ms edge change code", "d": "8/2017"}, {"body": "thx work", "d": "8/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "workaround use latest node flag build", "d": "8/2017"}, {"body": "nickmessing thanks work around still problem solution possible always include workaround made affected projects less portable future es features always land babel plugins node even flag", "d": "8/2017"}, {"body": "justineo personally would like change mechanism move away babeltemplatecompiler would result runtime errors make hard track mistakes templates another way try parse babel instead slow need research actual performance impact", "d": "8/2017"}, {"body": "justineo unfortunately using parse expression breaks current solution since parses keywords successfully ex adds extra dependency looks like option limited use code supported node expressions solves spread problem moment", "d": "8/2017"}, {"body": "thanks nick think better point docs prevent confusion make pr later nt mind", "d": "8/2017"}, {"body": "learned lot", "d": "8/2017"}, {"body": "closing issue nt seem consider", "d": "8/2017"}, {"body": "nickmessing reason could nt use instead build step webpack template", "d": "8/2017"}, {"body": "chrisvfritz would nt recommend using babelnode performance overhead", "d": "8/2017"}, {"body": "posva much slower talking though think predictable behavior worth slightly slower builds even moderately slower builds nt already tradeoff choosing write tests include build system compiles predictably supported javascript", "d": "8/2017"}, {"body": "concern adding note documentation wo nt sufficient people encounter problem nearly impossible find note could easily waste day trying figure feature nt working correctly probably likely give assuming vue template compiler buggy lied supporting babel features really nt feasible find consistent workaround think need way communicate users like catch errors vue template compiler provide warning behavior", "d": "8/2017"}, {"body": "chrisvfritz nt tested using babelnode webpack template know possible remember keep slightly bad memory using node projects", "d": "8/2017"}, {"body": "posva chrisvfritz option anyway since nt transpire code think know way make work make dependency template compiler considered", "d": "8/2017"}, {"body": "nickmessing posva investigate would either mind reopened make sure nt forget since really problem documentation solve thinking close one prevent issue completely templates vuetemplatecompiler directly provide user warninghint error raised may caused unsupported feature node last resort decide neither feasible encountering difficulttodiagnose behavior one horror stories vue users tell late night around campfire nickmessing think users nt concerned size dev dependencies would alright would make things work users expect", "d": "8/2017"}, {"body": "chrisvfritz unfortunately nt know without bundling babylon runtime build", "d": "8/2017"}, {"body": "chrisvfritz worries", "d": "8/2017"}, {"body": "nickmessing ah see crazy idea could avoid pulling babylon template compiler something like beginning function closer pseudocode real solution think strategy getting might feasible", "d": "8/2017"}, {"body": "chrisvfritz actually yes try way", "d": "8/2017"}, {"body": "spread operators natively supported node close wontfix order use object rest spread templates need use node configure option targeting ie make sure include polyfill likely coordinate configuration project able use object rest spread without configuration", "d": "11/2017"}, {"body": "linusborg vue cli builds perhaps also emit warning older versions node", "d": "11/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "thanks lot good job look nice simple wait evan input", "d": "8/2017"}, {"body": "vuex logo looks dopest would really love could alternatives vuerouter though cents", "d": "8/2017"}, {"body": "loving vuex logo think vuerouter similar reactrouter logo", "d": "8/2017"}, {"body": "hi ergenekonyigit first thanks lot logos appreciate contribution however sorry direct nt feel designs polished enough hope understand designer pretty picky details yet come logos vuexvuerouter happy also explained prefer vue ecosystem stick one logo consistency", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "usage question please post forumvuejsorg", "d": "8/2017"}, {"body": "ping ktsn kazupon herringtondarkholme", "d": "8/2017"}, {"body": "thought wrote typings sure necessity since used webpack config write webpack config typescript", "d": "8/2017"}, {"body": "hi foisonocean would mind provide information far know clientplugin webpack nt think many users use ts webpack setup plus clientplugin contains almost nothing signature also seems adding work vueserverrender", "d": "8/2017"}, {"body": "yes using typescript write webpack config", "d": "8/2017"}, {"body": "woo", "d": "8/2017"}, {"body": "oh nt know webpack officially supports config file written typescript create declaration", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "\u5f00 issue", "d": "8/2017"}, {"body": "working expected destroys recreates toggled slot content second component recreated wrap slot inside div works expected", "d": "8/2017"}, {"body": "\u8fd9 ie \u7684 bug \u800c\u4e0d\u662f vue \u7684\u95ee\u9898 \u5efa\u8bae\u4f60\u7528", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "vue", "d": "8/2017"}, {"body": "know binding template already know fields discussed unfortunately current behavior wo nt change allowing templates dictate data structure breaks single source truth", "d": "8/2017"}, {"body": "expected information edit button custom event", "d": "8/2017"}, {"body": "tested works fine plugin installed installing eslintpluginvuelibs make sure updated version npm delete nodemodules", "d": "8/2017"}, {"body": "posva thanks update npm works fine", "d": "8/2017"}, {"body": "update npm btw still quite old", "d": "8/2017"}, {"body": "posva thanks lot reinstall nodejs stable version npm update nodejs trying read hope contribute source code", "d": "8/2017"}, {"body": "personal thing anything else think node comes major improvements", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "want generate random keys generated time create items add array call functions template keys created every time component renders completely defeating purpose keys recommend use forum discord server gitter stackoverflow get help", "d": "8/2017"}, {"body": "thanks use channels solve problem", "d": "8/2017"}, {"body": "hi hegangsz \u4f7f\u7528", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "expected overwriting global component local component options ca nt get data since exporting data want use globally registered components execute vue", "d": "8/2017"}, {"body": "please provide real reproduction", "d": "8/2017"}, {"body": "version update computed property statement feat warn assigning computed property setter must add setter computed property", "d": "8/2017"}, {"body": "trying set property state getter mapped instance may happen pass computed property handled another component find case happening nt please tell reopen", "d": "8/2017"}, {"body": "posva thanks used sync would change property updateanotherstate val gt property val sync always trying set property immediately use sync", "d": "8/2017"}, {"body": "try implied templates similar use component", "d": "8/2017"}, {"body": "implied templates similar use component data gotcha whittleddown example case came across definitely kosher use case set like specifically highlight fact bound parent outside tag inside reason bound parent within tag seemed nonintuitive thought worth ask", "d": "8/2017"}, {"body": "nt use inside template", "d": "8/2017"}, {"body": "missed", "d": "8/2017"}, {"body": "code editor turns nt realize serverside handlebars interpolating template code never made client pasted viewsource fiddle thanks sorry wasting time guys joe", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "prefer", "d": "8/2017"}, {"body": "sirlancelot described declare expression", "d": "8/2017"}, {"body": "sure understand works objects", "d": "8/2017"}, {"body": "use property object telling vue longer wish reactivity property deleting basically keyword bring back reactivity deleted property need use want delete object property still wish remain reactive without needing use try setting property instead", "d": "8/2017"}, {"body": "lost reactivity used vuedelete checked api docs vuedelete says vuedelete works arrays vuedelete target key arguments object array target string number keyindex works array index guys say mistake docs must another problem code caused issue look thank replies", "d": "8/2017"}, {"body": "omerzfira docs sat array index supported starting mean lost reactivity deletes property longer property reactive nt exist something like supposed work reactively removes property property reactive since nt exist", "d": "8/2017"}, {"body": "way since github issues issues questions close ask questions forum chat stackoverflow", "d": "8/2017"}, {"body": "seem misunderstand objectpreventextensions method prevents new properties ever added object ie prevents future extensions object mdn emphasis mine vue nt add new properties adds getters setters existing properties fine objectpreventextensions demo vanilla javascript probably want rather use", "d": "8/2017"}, {"body": "linusborg perhaps post titled differently please see console timings reproducer posted see clearly bug vue recursively walking array effort make elements reactive want following code take vue similar thing plain objects however prevent behavior currently prevent vue looping elements array though causing significant performance degradation project large array need able index nt need reactive", "d": "8/2017"}, {"body": "simpler reproducer nt involve takes gt simply set property large array edit another one showing hack currently", "d": "8/2017"}, {"body": "edit following wrong see next reply seem misunderstand explanation objectpreventextensions prevent reactivity design objectfreeze design bug intentional design decision solution problem use objectfreeze", "d": "8/2017"}, {"body": "revert apologize claiming sure worked instance reality wrong turns fact wrong vue respect objectpreventextensions test original jsfiddle log array console added vue without notice one without property means reactive one nt also checked adding breakpoints vuejs line defined called twice reason defined called reach array element items passed function reactivity system apologies claiming something factually wrong issue stays closed vue already behaving like want", "d": "8/2017"}, {"body": "ah see surprised different way prevent reactivity object vs array chrome still taking freeze array items seems depend length array would possible introduce different way indicating vue iterate array actually need object frozen change behavior vue", "d": "8/2017"}, {"body": "side note function still getting invokedthe array iterated however mistaken thinking culprit performance issue", "d": "8/2017"}, {"body": "would possible introduce different way indicating vue iterate array discussed couple times previously already wo nt happen really want skip reactivity add array directly instance instead assigning property derived", "d": "8/2017"}, {"body": "okay going take step back think initial debugging led think problem something nt reproducer close actual scenario building virtual grid large source array compute start index normally would based scroll position case added button simulate scrolling template renders rows jsfiddle array never change thing changing start index however enormous amount lag profile see issue core nothing reactivity solely performance seem like something perform poorly realize issue kind gone rails originally posted let know open new issue", "d": "8/2017"}, {"body": "sure new issue order behaviour really something work around within reactivity functionality said need raw performance reactivity add array normal instance propety discussions improving specific performance challenges probably rather happen forumvuejsorg unless specific improvement suggest would warrant new issue feature request", "d": "8/2017"}, {"body": "linusborg due respect find really hard believe considered acceptable performance especially considering fact marked array extensible entire array subarrays iterated every time property read viewmodel reproducer template renders rows reads template expression problem far worse number rows increased performance basically n number elements array number times array referenced render function believe fixed changing line nt able buildtest due however sure break tests believe makes sense given fact vue respect nonarray objects", "d": "8/2017"}, {"body": "good idea honestly sure consequences fenduru reopened rename topic better reflect issue could edit op comment linking got heart issue thanks chime evan fenduru suggesting keep running getter array nt extensible could negative consequences thinking could interfere reactive objects within notextensible array accessing prop object would trigger object reactive getter accessing object whole eg passing child component reading keys object array objectkeys might go unnoticed skipping right deep enough topic say walk array could nt maybe find way called per render cycle watcher instead times array accessed render array ca nt change anyway spontaneous idea could totally rails first call add prop like watcher subsequent calls make sure array cache already watcher called empty cache javascript set would much better arrayisarray value amp amp deptargetarraycacheindexof value dependarray value deptargetarraycachepush value depjs export function poptarget deptargetarraycache null deptarget targetstackpop code walk arraycache time check presence would assume number array component much smaller length biggest array component situations performancewise would imporvement", "d": "8/2017"}, {"body": "according description needing properties reactive top level think real issue whether data object array observed shallowly instead whether called upon opinion works mean prevent properties added object original properties still required reactive since likely referenced templates instance even called specific array whose items referenced templates changes items inside array still need demonstrated view layer case invoked recursively makes lot sense line think really matters figuring way defined properties instance object shallow style", "d": "8/2017"}, {"body": "reading keys object array objectkeys might go unnoticed skipping dependarray right behavior would consistent behavior objects indexing keys reactive values index reactive everything still work walk array dependarray could nt maybe find way called per render cycle watcher instead ntimes array accessed n render thinking well performance hit applications right even ones want reactivity called many times per tick suspect could reduced per tick cases however case still advocating avoiding calling altogether used jacelynfish clarify mean reactive top level mean want reactivity system detect array reference changed array immutable time contents change array reference changes vue reactive arrays contents waste performance", "d": "8/2017"}, {"body": "fenduru array wo nt immutable calling", "d": "8/2017"}, {"body": "jacelynfish application guarantees array immutable regardless whether object technically mutated", "d": "8/2017"}, {"body": "linusborg thoughts would like file pull request however unable get working dev environment per", "d": "8/2017"}, {"body": "jacelynfish linusborg fenduru idea using objectpreventextensions disable array reactiveness ob added therefore changes happen elements watched array immutable issue right", "d": "8/2017"}, {"body": "fenduru sorry late response yes way get rid cost preventing array extensible however linusborg pointed lead potential scenario frozen array containing objects already made reactive elsewhere would cause changes nested objects ignored although cases extremely rare entirely sure safe sacrifice correctness use case mentioned ultimately somewhat bruteforce workaround deal incapability detecting array indice access object property addition case exist later added way guarantee detection sadly cases costly price pay ensure correctness luckily planned rewrite reactivity system using proxy longer need work around see great perf boost scenarios running", "d": "9/2017"}, {"body": "ca nt replicate behavior expecting case understand bruteforce workaround however seems like reason give people way opt behavior impacting every vue component references array imagine person relatively large array index opened think considered unless scenario shown differ objects arrays even seems kind unreasonable someone explicitly opt change detection array surprised change detection nt happen within array edit side note think proxy perfect kind use case supported ca nt polyfilled ie impacted browser things performance going away time soon nt think ignore issue favor proxies", "d": "9/2017"}, {"body": "fenduru one extra level nesting object registers dep see case", "d": "9/2017"}, {"body": "see however actually inconsistency objects arrays exactly point change array object frozen recognized arguing makes sense indicated object nt reactive", "d": "9/2017"}, {"body": "fenduru true guess actually better keep consistent", "d": "9/2017"}, {"body": "think going way far tons possible typos accept handling one handle much future writing writing nothing prevents user property called make binding valid btw colon way add arguments directives", "d": "8/2017"}, {"body": "could handled rule eslint though", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "modifier available necessary components native elements since listen native events native element using modifier element nt make sense", "d": "8/2017"}, {"body": "ran issue copy pasting event component native element think least warning generated modifier used native element", "d": "3/2018"}, {"body": "yeah ran times copypasting click logic warning would nice though admittedly quick google leads solution", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "wrote vue ssr runtime make sure behaves like vue would case codepen using unminified version vue render comment node placeholder elements currently displayed nt happen production minified version though codepen befixed simply using html renderer produces output different vue would depending environment issue fix renderer implementation vue", "d": "8/2017"}, {"body": "oops feel stupid", "d": "8/2017"}, {"body": "little bit explicit happening considering vifs supposed show hide stuff naturally errosrs forced play detective understand part behaviour intended select district restaurants list changes accordingly nt seer problem see", "d": "8/2017"}, {"body": "linusborg thank helping recorded video make issue clear issue open jsfiddle link see open another jsfiddle link se everything working fine changed location nothing else", "d": "8/2017"}, {"body": "ok think understand mean probably keying different elements following advice", "d": "8/2017"}, {"body": "ok solves issue thank team great work great framework", "d": "8/2017"}, {"body": "better sitation situation begin us improve error messages understand mistake part lead error mention optimally hear might consider helpful error message", "d": "8/2017"}, {"body": "hinted better error message api change section sorry unclear able get source file error name component causing issue thanks", "d": "8/2017"}, {"body": "issue caused message accidentally tried render component recursively error message tells name element error possibly retelated recursive component render used vueloader usually also get filename component causing issue generated component trace sure helpful especially since stil fully understood mistake made trigger error hard improve message mistake demonstration", "d": "8/2017"}, {"body": "issue importing component defining via components prop component allready imported globally via vueuse component beeing called recursively probably parent component instance know component instantiate error unclear overriding allready existing component generally speaking current error message generic covers multiple errors one intended cover", "d": "8/2017"}, {"body": "hm point really ask reproduction generally overwrite component problem instance probably parent component instance know component instantiate error show show use tag template vue nt know registered recursively call component missing property things explained error message errors catched", "d": "8/2017"}, {"body": "repro soon worries", "d": "8/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "expected behaviour using function function gets executed every time component tries renders basically function called well thus creating infinite loop please next time provide actual repro code also could followed information issue created", "d": "8/2017"}, {"body": "ok thanks wo nt always rendered data nt change", "d": "8/2017"}, {"body": "work", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow result exactly without vue", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum official chat stackoverflow", "d": "8/2017"}, {"body": "close found fix webpack config resolve alias vue vuedistvuejs", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "close found fix webpack config resolve alias vue vuedistvuejs", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "8/2017"}, {"body": "usage question encourage ask forum discord try use issue tracker bug reports feature requests question need key items", "d": "8/2017"}, {"body": "think demo worked expected", "d": "8/2017"}, {"body": "thanks response", "d": "8/2017"}, {"body": "likely issue ms edge nothing vue remove vue dependency get behavior edge", "d": "8/2017"}, {"body": "thanks confirm vueless fiddle works firefoxchrome edge", "d": "8/2017"}, {"body": "closing", "d": "8/2017"}, {"body": "awesome also seems like already filed bug edge nt find earlier little hard search cool beans", "d": "8/2017"}, {"body": "reference similar issue remains open angularjs tracker well", "d": "8/2017"}, {"body": "possible workaround fixed edge html export default name forminput props value type string number methods updatevalueinedge e edge trigger input event arrow keys used change value key codes used microsoft browsers others use arrowup arrowdown ekey ekey thisupdatevalue e updatevalue e emit input etargetvalue", "d": "3/2018"}, {"body": "curiosity problem facing undefined accessing edit also asking equal undefined attrs actually useful", "d": "8/2017"}, {"body": "greegus case something like using babelplugintransformoptionalchaining", "d": "8/2017"}, {"body": "would judge expected behaviour debatable", "d": "8/2017"}, {"body": "ping greegus", "d": "8/2017"}, {"body": "ran definitely unexpected ever example writing todo app starts todos would strange make list begin instead add statements optional chaining app case similar niche cases user wants check exist still possible use case still covered part really convinces bug though set empty object prop passed component op points currently really checking exist would require strategies", "d": "8/2017"}, {"body": "chrisvfritz convinced bug", "d": "8/2017"}, {"body": "linusborg looks like one working bug currently may pr", "d": "8/2017"}, {"body": "sure", "d": "8/2017"}, {"body": "unfortunately rendered parent context gets access different", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "8/2017"}, {"body": "nt considerated bug", "d": "8/2017"}, {"body": "shared whole project asked help vuex two way binding furthermore vue repo vuex want report bug need send concise reproduction please ask help channels pointed come back turns bug thanks", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "gebilaoxiong", "d": "8/2017"}, {"body": "stevecruise", "d": "10/2017"}, {"body": "sure understand problem use nt want components stay around aware options", "d": "7/2017"}, {"body": "draw interface based schema nested json components switched others say input widget validated phone number string number components stay alive long user editing tree schema changes commonly tree builds different nested input widgets old ones stay behind inactive state point reusing inactive components anymore schema might require different widgets data random example point phone number temperature widget lingering node requires geographical coordinate object data builds interface user interacts interface part consists keepalive widgets different possible swappable representations data changes interface changes components get destroyed inactive components linger point nt make sense keep typespecific components node nt allow types anymore either way nt possible query component keepalive active", "d": "7/2017"}, {"body": "schema changes commonly tree builds different nested input widgets old ones stay behind inactive state point reusing inactive components anymore schema might require different widgets data state want keep right keep mind component destroyed wrapping component gets destroyed either way nt possible query component keepalive active looks strange use makes imperative instead declarative using makes declarative", "d": "7/2017"}, {"body": "toplevel component pulls data component template never gets replaced nt think installed helpful vue devtools noticed list dead background components extensive schema testing understand point declarative versus imperative templates largely static wrapper component nt see obvious way drop reload least toplevel perhaps one could create wrapper wrappers nt sit directly toplevel component without way destroy inactive children", "d": "7/2017"}, {"body": "think making clear check example use make drop components", "d": "7/2017"}, {"body": "think made case clear difficulty adapting usecase sorry trying patience main typeswitching widget keepalive input data validation switch types change interface validate input according provided models component related data rightfully play around main loads different schema might might need respective inactive component context changed data value worthless long context use include relevant widget components hence drop unnecessary ones depending loaded schema included widgets still old state data since nt get reset model underneath changed nt notice way tell kill reset pristine state guess solution find way exclude components longlived toplevel components might change context significantly data trees change inactive components get destroyed components tree rebuilds", "d": "7/2017"}, {"body": "well old state intentional use activated deactivated hooks change", "d": "7/2017"}, {"body": "ok let add link example post dynamic components found internet admin panel manage posts tab create post tab create post component makes sure user nt lose data switch back manage posts tab excellent imagine add selector chose set tabs fly admin user panel approval panel might still end create post component user component component name data admin panel inactive create post tab likely completely irrelevant reuse component sure context changed maybe approval panel create post tab template never gets unloaded way actually get rid backgrounded component signal interface changed short dynamic list widgets switch list changes unloaded template cached widgets might either required anymore data might become irrelevant widgets switch wait change list old list new ones end old cached components unreachable reachable likely stale data switch cache dynamic might fix data part problem hooks nt help think maybe watcher inactive component would trying explain problem dynamic context", "d": "8/2017"}, {"body": "maybe approval panel create post tab keepalive template never gets unloaded way actually get rid backgrounded component signal interface changed problem meant used kind scenario looks like using without needing", "d": "8/2017"}, {"body": "well need much little example app link avoid user retype data different inner ui widget chosen happens actual set components data inside also dependent outside deeply nested components data issue also contained outer dynamic context makes cache whole lot likely irrelevant components thinking ways signal empty cache invalidate children reset without think problem component dynamic context inactive children taken datadriven loop end stale outer context changes works fine onetomany efficiently manytomany fine way reset inner outer changes might need invalidate signal components even usecase nt immediately clear common usage", "d": "8/2017"}, {"body": "still think nothing new add use case must clear allowing imperatively reset keepalive component cache really looks like bad usage goes declarative rendering last example reset using attribute component", "d": "8/2017"}, {"body": "create reused component declarative data eventually watchers wo nt stale data ever reused example use watchers detect context changed reset form unused components use dynamic include keepalive", "d": "8/2017"}, {"body": "fyi instance destroyed cached components destroyed well unless misunderstood scenario actual code shown think original concern nt even problem first place", "d": "9/2017"}, {"body": "wvh solve problem", "d": "10/2017"}, {"body": "similar problem wanted reload components manually fetching fresh data server one simple brutal solution found force reload web application via clears confirm dynamic include also works expected allows avoid full app reload edit added dynamic include solution", "d": "12/2017"}, {"body": "expected behaviour syntactic sugar reactive property vue nt know something changed nt render component known caveat way around vue requires declaring data property component", "d": "7/2017"}, {"body": "would really useful could warning console wasted hours tracking learning vuejs", "d": "7/2017"}, {"body": "kichik track rootlevel methodsprops used template declared nested ones triggers error nt way current reactivity system vue drop support internet explorer change reactivity possible exactly specific caveat information official tutorial", "d": "7/2017"}, {"body": "familiar reactivity system yet solution non ie still useful enabled nonproduction builds browsers", "d": "7/2017"}, {"body": "kichik solution complete rewrite reactivity system smile considered unless drop ie support", "d": "7/2017"}, {"body": "bad thanks thoroughly explaining", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "hi thank submitting issue right repository repost vuejsvuejsorg", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "normal behavior close html tags", "d": "7/2017"}, {"body": "kocal according html specs selfclose scenario nice catch mysticatea", "d": "7/2017"}, {"body": "quote specs dt element end tag omitted dt element immediately followed another dt element dd element dd element end tag omitted dd element immediately followed another dd element dt element content parent element", "d": "7/2017"}, {"body": "well works expected closings would make sense support vue actually asks omit element closings vue vue warn error compiling template tag matching end tag tag matching end tag tag matching end tag tag matching end tag found even work sure want add support considering pretty different existing ones impossible predict tag going returned component compiling template want support correct behaviour", "d": "7/2017"}, {"body": "sure thought vuejs supports autoclosing opened issue deprecated feature wo nt fix problem found rewriting vueeslintparser report html syntax errors eslintpluginvue case syntax error", "d": "7/2017"}, {"body": "technically even errors sincd vue template compiler shows error console even working expected think need support disable vue errors code like work expected html suggest supporting html specific closings officially need find evan thinks", "d": "7/2017"}, {"body": "ah sorry found behavior reports lacking end tags errors added looks going deprecation please feel free close issue", "d": "7/2017"}, {"body": "mysticatea still changed moment works differently html specification according specs possible inside", "d": "7/2017"}, {"body": "rules omitting end tags rather casebycase straightforward since close another one encountered however etc terminated open tag element want strictly adhere spec hardcode possibilities imo worth users intentionally write speccompliant imo sloppy html since already closing tag warning place essentially enforcing vue templates slightly stricter subset html imo fine considering tradeoff", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "vuecli issue vue core issue wrong repo template designed work box deploy root deploying nonroot modify root deployment eg also solves relative path problems using relative publicpath simply wrong please learn webpack maybe read issue reporting guidelines learn open constructive issues opening one", "d": "7/2017"}, {"body": "likely vue add aditional nonjavascript syntax optional chaining stage nt think considered yet", "d": "7/2017"}, {"body": "currenly stage proposal ecmascript actually similar functionality requested past stance extend template expressions non javascript syntax case helper method achieves already multitude options available like lodash add functionality core solved better libs already advice would use lodash something similar add prototype helper filter instances", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "please read warning message telling possible mistake checked", "d": "7/2017"}, {"body": "thanks found problem caused picker components mintui information", "d": "7/2017"}, {"body": "vs", "d": "7/2017"}, {"body": "realised problem vue really sorry womanfacepalming", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "working intended slot name appear look console need use scoped slots pass components render functions", "d": "7/2017"}, {"body": "use without directive arguments", "d": "7/2017"}, {"body": "javoski seems clear use like code right especially object many properties", "d": "7/2017"}, {"body": "although see point proposal nt feel particularly needed way encourages passing multiple values object avoid specify multiple props easy abuse object props tucking properties making sort super prop however think explicit list props makes component interface easier understand", "d": "9/2017"}, {"body": "wheel onwheel event", "d": "7/2017"}, {"body": "please stop adding comments edit original post jsfiddle instead works expected", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "\u56e0\u4e3a\u4f60\u5e94\u8be5\u9075\u5b88\u63d0issue\u7684\u89c4\u5219 \u4f60\u7684\u8fd9\u4e2a\u95ee\u9898\u4e0d\u662f\u5d4c\u5957\u8def\u7531\u89e3\u51b3\u7684\u5417", "d": "7/2017"}, {"body": "\u6216\u8005\u6211\u9700\u8981\u7684\u529f\u80fd\u662f\u8fd9\u6837\u7684 routerview \u600e\u4e48\u624d\u80fd\u5177\u6709 component \u7684\u7279\u6027 eg component slot currentview", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "think wrong repository", "d": "7/2017"}, {"body": "see", "d": "7/2017"}, {"body": "ah see dynamically needed use vueset target key value instead particpantspush date thank time", "d": "7/2017"}, {"body": "use keep mind always required vue", "d": "7/2017"}, {"body": "posva see issue using index key key give data objects unique id keyed properly posva know show list nt need many edit things", "d": "7/2017"}, {"body": "vvpvvp point vue know developer wants work unique key example time looking vue know wanted", "d": "7/2017"}, {"body": "nickmessing want vfor question use normal example wrote common table component used vfor list data operate staffs nt know data key prop key completely used object key advocated nt use key problem expected see issus", "d": "7/2017"}, {"body": "thought forcing use key nt always need keys need unique keys objects probably kind id nickmessing said vue guess guess using index", "d": "7/2017"}, {"body": "posva thought missing point using index key key nt want force use key nt use something wrong link steps click add twice click last line click click first line delete", "d": "7/2017"}, {"body": "told use index generate unique id every object case need trying tell", "d": "7/2017"}, {"body": "hi vvpvvp posva said generate key workaround eg", "d": "7/2017"}, {"body": "vvpvvp point vue infer unique key vue already infer key based index operations like add delete elements list really generate unique simply counter could trick", "d": "7/2017"}, {"body": "kingwl understand question difference generate vue generate vue yes nt know want told key data use vfor need edit data thing else could please generate unique keys us", "d": "7/2017"}, {"body": "vvpvvp calm friend generate unique keys complex cover case hard generate unique key user imo behavior normal try improve got advice", "d": "7/2017"}, {"body": "vue generate unique keys nt know add delete items super easy add id without using hash use incrementing id", "d": "7/2017"}, {"body": "told add key resolve", "d": "7/2017"}, {"body": "imo feature supporting object type keys constructive likely implemented future see know unique key must attached item object automatically generated inside vue may cause problems users unaware really feel troublesome generate unique ids objects write common util function achieve similar workaround kingwl provided much lighter may lead performance test app js const uniquekeyprop uniquekeyprop const keyprefix keyprefix datenow let uid const isobject val gt val null amp amp typeof val object const genuniquekey obj gt isobject obj uniquekeyprop obj return obj uniquekeyprop const value keyprefix uid objectdefineproperty obj uniquekeyprop value return value return obj vuemixin methods genuniquekey html demo", "d": "7/2017"}, {"body": "default vue uses index items since thing without guess developer wants vue wo nt generate unique keys point developer needs provide unique keys vue ca nt guess also vue mutating objects would wrong opinion data nt field could used unique keys something right ask backend team", "d": "7/2017"}, {"body": "posva super easy add id ugly easy add id simple demos easy add id complex datas complex system data nested structure nested nested nested finally good nt need key know vue mechanism changed wonder way handle helpful tips vfor problems adjacent element directive used nt add key also problem kingwl english good maybe words readability sorry also peaceful", "d": "7/2017"}, {"body": "ugly easy add id simple demos easy add id complex datas complex system data nested structure nested nested nested nt fields data make unique make relations objects finally good nt need key want default behavior use index note nt need looping html standard elements", "d": "7/2017"}, {"body": "wrote slowly complete answer always new answer javoski kindly function wrote problem vue ca nt change datas define also ca nt change data used ui components like table component wrote ui toolkit used kind function maybe hard really nt like way", "d": "7/2017"}, {"body": "akryum nt want answer many times index useful please read demo link steps click add twice click last line click click first line delete", "d": "7/2017"}, {"body": "vvpvvp answering part comment know issue resolved provide unique key item data", "d": "7/2017"}, {"body": "let move discussion discord server forum people able help insights specific project vvpvvp thanks", "d": "7/2017"}, {"body": "vvpvvp came similar situation using vue components inside list edited addremove items change order using vuedraggable items nt unique id generated data within form solution found use shadow list save unique ids rendering purpose edit lists user interaction example using code", "d": "9/2017"}, {"body": "nauzethc thank much must explain know solution solve question better nt need key ordinary way problem use met many inexplicable problems development", "d": "9/2017"}, {"body": "vvpvvp understand problem main problem key data realy unique ids create new items listtable add blank ids like goes server generates proper uids far edit mode adding new items nt realy want generate ids server needs em blank handle problem add another one ids realy something want adding option would generate keys inner vue use seems legit request", "d": "9/2017"}, {"body": "came across issue resolved adding key attribute datenow value key", "d": "3/2018"}, {"body": "e good solution mean give use inplace patch strategy", "d": "3/2018"}, {"body": "mohdisa unsafe method iteration loop may take place one datenow period look used screenshot actually problem appears cases ca nt get uid item items could change come props ex take place simultaneously transitiongroup ex thats point ca nt set simply index etc imo best way provide buildin mechanism generating uids nt hard write helpers hard every time every project include generator vue core add helpers maphelpers vuex", "d": "7/2018"}, {"body": "please refer see implications setting vue needs component using datenow keys bad idea tell vue never reuse components time using index iteration fine component state list may change new elements removed reordered make sure use id uniquely represents object passed component example component displays contact information prop use contact usually coming db builtin mechanism generate uid place vue related building interfaces sometimes use content unique like names cleaner way generate new version list augment items uids", "d": "7/2018"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "7/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "8/2017"}, {"body": "expected ca nt use filters vue directives change", "d": "7/2017"}, {"body": "vue filters used inside mustache interpolations vbind expressions latter supported filters primarily designed text transformation purposes complex data transforms directives use computed properties instead use method instead", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "try", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "\u60a8\u597d \u5173\u4e8e objectobserve\u5e9f\u5f03\u5bfc\u81f4\u7684\u540e\u671f\u6dfb\u52a0\u7684\u5c5e\u6027\u65e0\u6cd5\u68c0\u6d4b\u5237\u65b0\u8fd9\u70b9\u5df2\u7ecf\u660e\u767d\u4e86 \u867d\u7136\u8fd8\u662f\u66f4\u559c\u6b22\u54ea\u79cd\u66f4\u7075\u6d3b\u7684\u7528\u6cd5 \u90a3\u5173\u4e8e\u7b2c\u4e09\u65b9\u63a7\u4ef6\u95ee\u9898 \u662f\u5426\u662f\u80fd\u591f\u89e3\u51b3\u7684\u5462 \u8c22\u8c22\u60a8\u7684\u56de\u590d", "d": "7/2017"}, {"body": "\u597d\u597d\u8bfb\u4e0b\u6587\u6863 usage question issue let close", "d": "7/2017"}, {"body": "please nt create issue twice gets closed", "d": "7/2017"}, {"body": "vue \u8fd9\u662f\u56e0\u4e3a\u4f60\u6240\u7528\u7684\u63d2\u4ef6\u5728\u9009\u62e9\u65e5\u671f\u540e\u6ca1\u6709\u89e6\u53d1 input \u5143\u7d20\u7684 datepicker \u5c31\u53ef\u4ee5\u5411\u4e0b\u9762\u8fd9\u6837\u4f7f\u7528\u4e86 vue", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow repo way big ever find real bug boil using smaller template like take look", "d": "7/2017"}, {"body": "question differences problem number questions said big see accept use shorter text explain problem thanks", "d": "7/2017"}, {"body": "html message itemname itemage js new vue el app data message hello vuejs list methods chooseform thisgetsomeinfor methods getsomeinfor actural ajax request use settimeout function settimeout gt consolelog thislist name age name age name age name age name age mounted function thischooseform obtain already render dom height consolelog documentgetelementsbyclassname inforlist offsetheight also obtain already render dom height using nexttick nexttick gt consolelog documentgetelementsbyclassname inforlist offsetheight", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow code works expected data empty height happens vue calls method calls calls starts timer call stack gets cleared back timer nt finsh yet still emptry array height adds next function end event queue timer still nt finish stack gets completely cleared event loop pulls first thing added event queue call stack executes timer still nt finish list still empty height still time vm pulls function event queue event loop pulls event queue call stack executes want get height need wait moment example links find call stack event loop work modern javascript vms", "d": "7/2017"}, {"body": "nickmessing nice answer thanks lot thanks patience detailed", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "key unique primitive value also documented expected value", "d": "7/2017"}, {"body": "also think better vue relax restrictions keys supports object", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "code running successfully today update version", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "messageboxalert message title options gt typeof message object options message title undefined message undefined else options options return messagebox merge type alert title message options", "d": "7/2017"}, {"body": "issue comes simple html file codes listing follow todo var template lt div id todolistexample gt lt ul gt lt item vfor todo index todos vbind index index vbind title todo von remove remove gt lt item gt lt ul gt lt div gt var item template lt li gt mytitle lt button von click remove gt x lt button gt lt li gt data function return mytitle thistitle props title index methods remove function emit remove thisindex new vue el app template template data newtodotext todos methods addnewtodo function thistodospush thisnewtodotext thisnewtodotext remove function index thistodossplice index components item item", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow using index key scenario wo nt work need use unique keys example element removed elements takes place use key work", "d": "7/2017"}, {"body": "thank much big help", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "yes expected vue rather webpack insert remove styles seem think injected head component renders never removed common pattern extarct css single css file production would result", "d": "7/2017"}, {"body": "styles injected head component renders never removed linusborg thank believe means case initially route component rendered nothing injected first component rendered route switch injected second component rendered route switch injected overwrites previous route switches inject anything component already rendered last used therefore stays authoritative one therefore fallback binding outside container class current component also updated question details feel free make answer interested delete mine case", "d": "7/2017"}, {"body": "vdom already optin ui framework responsibility make easy customise vues provide scoped slots props make customisable", "d": "7/2017"}, {"body": "sure understand problem conclusion virtual dom optional", "d": "7/2017"}, {"body": "css frameworks find difficult provide options well port components something virtual dom basically good lists small portion css framework fact deal component table", "d": "7/2017"}, {"body": "would say first question nt care works automatically least nt require another abstraction accomplish basically work close would work component literal values huge part problem nt able solve cases want use enum constants know nt exist js typescript using similar convention js module option values always string thus solution would work types value props literalsexpressions proposal maybe would possible make work similar smart enough warn direct prop mutation really needed way getting prop attributes allowed get access nonprop ones", "d": "7/2017"}, {"body": "robertbcolton example would work hint", "d": "7/2017"}, {"body": "nickmessing thanks much seem work ca nt seem make following work without vue warning directly mutating prop vue key export default props items type object required true value methods update event consolelog eventtargetvalue emit input eventtargetvalue ideally would nt want want add another data section similar would seem redundant way achieving simple component without getting verbose", "d": "7/2017"}, {"body": "robertbcolton github issues asking questions time online official chat try stack overflow forum", "d": "7/2017"}, {"body": "first impulse got try using got little sad nt work would amazing feature imo two options inclined agree first seems simpler far understood", "d": "7/2017"}, {"body": "victoram could experiment implementing option component like simple example", "d": "7/2017"}, {"body": "sure desirable first added make easier pass things parent component child component improve situation hoclike components making work goal original discussion secondly somehow make work use component element component feels like essentially recreated intercomponent twoway bindings originally dropped vue good reason yes hood technically still sending events updating parent happened hood never problem made data flow harder follow recreate weekness allowing seamless chain many components nested element form feels like would", "d": "7/2017"}, {"body": "linusborg think might misunderstand proposal state syncing components used parent component check example issue description agreed work another issue comment suggested like avoid state maintained parent child use case proposal nt related feature request", "d": "7/2017"}, {"body": "oh right sorry misunderstood completely", "d": "7/2017"}, {"body": "works differently components native elements therefore guess making smarter trivial input event probably needs modified manually inner component outer component etc app wrapping third party component adding custom style thought work noticed adding also required think bit weird component declared nt thinking twice guess automatically added accepted due thus included non recognized props anymore however exist unless specifically declared perhaps could added manually specified prop", "d": "8/2017"}, {"body": "think bit weird component declared nt frandiox might misunderstood mean seeing value attrs", "d": "8/2017"}, {"body": "well child properly declared prop would expect see props attrs happening", "d": "8/2017"}, {"body": "linusborg think frandiox suggesting seen automatically registered prop child component due use parent nt noticed behavior personally", "d": "8/2017"}, {"body": "linusborg chrisvfritz passing attribute manually normal however think normally pass internally expanded need manually pass omit value included attrs included unless specified component used internally though declared prop agree included however declared nt included considering also adding", "d": "8/2017"}, {"body": "frandiox ah thanks example agree strange nt appear easily fixable assume registered prop adding instead works cases", "d": "8/2017"}, {"body": "made time afternoon fix reviews welcome", "d": "8/2017"}, {"body": "definitely something wantneed looks like increasing popularity hoc made necessity", "d": "8/2017"}, {"body": "finally gave proposal proper investigation ends complicated seems problem lies within consistency different input types current implementation assumes text input ignores noninput events simplifies wrapping plain text input fields makes whole thing inconsistent feels like specialcase convenience hack managed make work requires component specify option injecting event type prop type back component handler already messier hoped even works becomes prohibitively complex mimic full behavior native eg checkboxes array binding radio select point feel implementation cost inconsistency outweighs simplification change would bring taking step back whole idea component opening finergrained control twoway binding form inputs simplifying job expanding sugar consistently pair input output letting fill details mixing feels like magic nt belong", "d": "10/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow see ways use inputs numbers", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "thats normal guess nonminified build statements would removed minified uglifyjs production use removed", "d": "7/2017"}, {"body": "okey dokey", "d": "7/2017"}, {"body": "using scoped slot syntax instead pass normal slot course scopedslotsdefault empty please read documentation nt help ask forumvuejsorg chatvuejsorg", "d": "7/2017"}, {"body": "rather takes precedence think adding something like would much", "d": "7/2017"}, {"body": "kind api freeze except useful additions new features syntax sugar generally category think", "d": "7/2017"}, {"body": "agree nt seeing syntax sugar really something new achieved moment personally think nit picking nodes render vue vue scope much edge case really performance issues could solved fr doub actually add fr", "d": "7/2017"}, {"body": "well since vueloader already caches static child trees purely static parts template already rendered", "d": "7/2017"}, {"body": "actually thinking cases author component unsure context component appear", "d": "7/2017"}, {"body": "linusborg sure tried quickly using vuecompile wo nt add robertbcolton point using situation", "d": "7/2017"}, {"body": "posva question referring actually user component using vonce prevent", "d": "7/2017"}, {"body": "posva see template generate static render function html text hello imo costs implementing feature heavily outweigh benefits", "d": "7/2017"}, {"body": "really used chunks template significantly large costly render otherwise benefit would negligible applications perform perfectly fine without need cost introducing additional directivesconcepts technical api surface increase really worth", "d": "9/2017"}, {"body": "segmentfault \u4e0a\u6709\u4eba\u63d0\u4e86\u540c\u6837\u7684\u7591\u95ee", "d": "7/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "7/2017"}, {"body": "seems problem indeed sure already fixed nt released yet though", "d": "7/2017"}, {"body": "posva nt find code dev pr fixed problem", "d": "7/2017"}, {"body": "workaround jsfiddle example fixed probably nt work ssr work forked op jsfiddle", "d": "8/2017"}, {"body": "thank", "d": "8/2017"}, {"body": "element tags except striped automatically browser according html spec use attribute avoid see html js var brokenexample new vue el brokenexample template", "d": "7/2017"}, {"body": "api proposed cause syntax error javascript use declare validation prop", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "think", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "hello thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow discord chat happy help", "d": "7/2017"}, {"body": "fwiw took look personal interest work cases edited example since closest solution edit still issue slots investigating", "d": "7/2017"}, {"body": "might solved slots hardcoded trivial solve", "d": "7/2017"}, {"body": "seems solution along method lbogdan createelement way taking slots like take scopedslots however still lot effort create hoc lot remember pass react render wrappedcomponent props", "d": "7/2017"}, {"body": "thought simple solution let know missing something", "d": "7/2017"}, {"body": "based examples given linusborg lbogdan minimal hoc implementation handle components slots javascript const hoc wrappedcomponent gt props typeof wrappedcomponent function wrappedcomponentoptionsprops wrappedcomponentprops render h const slots slots const scopedslots objectkeys slots map key gt scopedslots key gt slots key blocka mentioned still lot effort create hoc vuejs", "d": "7/2017"}, {"body": "seems pass test course would adjust depending whether wrappedcomponent constructor object need pass slots events props", "d": "7/2017"}, {"body": "still lot effort create hoc vuejs apart issue slots due fact vue complex api react scenario disadvantage admire reacts minimal api kinds use cases vue designed slightly different deign goals hocs nt come easily react fairly trivial create helper function wraps initial setup nt", "d": "7/2017"}, {"body": "well really depends end goal understand goal hoc somehow change decorate original component wrappedcomponent add inject props methods event listeners etc much like mixin really smile variant changes component definition nt change way instantiated", "d": "7/2017"}, {"body": "blocka goal hocs often get state eg redux vuex inject wrapped component props would work approach", "d": "7/2017"}, {"body": "linusborg right knew good true forgetting something obvious", "d": "7/2017"}, {"body": "think good example implementing real use case hoc vue", "d": "7/2017"}, {"body": "vue hocs would awesome plus since almost always brought vue vs react debate perhaps official repo could created develop vuehoccreator package way could work robust supported implementation", "d": "7/2017"}, {"body": "btw got better way use createelement parent component instead hoc make child resolve slots correctly", "d": "7/2017"}, {"body": "cute reason official tool nt keep reinventing code sun jul pm thorsten l\u00fcnborg notifications githubcom wrote btw got better way use createelement parent component instead hoc make child resolve slots correctly receiving mentioned reply email directly view github mute thread", "d": "7/2017"}, {"body": "sorry coming official solution yet glad think cute though solution perfect either problems sort ie scoped slots wo nt work latest trick edit oh never mind work official solution probably done least would expect thorougly thought tested", "d": "7/2017"}, {"body": "okay played around way make easier look happy api rough idea sketch able anything able take care copying props component swapping witht parent proper slots resolving add name second argument provided example renders component passes props attrs listeners normal slots scoped slots nt useful course fun happens second argument simple component object want write render function course want extend props attrs listeners use helper create render function like default one described merge pass parent want write render function use helper transform object proper array pass comments wanted", "d": "7/2017"}, {"body": "linusborg nice think would help coming real life hoc use cases solving using primitives", "d": "8/2017"}, {"body": "absolutely", "d": "8/2017"}, {"body": "mentioning issue edit mybad since using undocumented createelement api would worth documenting plugin developers", "d": "8/2017"}, {"body": "link wrong unless really wanted link issue yes technically api still missing api page", "d": "8/2017"}, {"body": "alexandrebonaventure issue vue days smile also documented", "d": "8/2017"}, {"body": "function documented argument render function available via open issue", "d": "8/2017"}, {"body": "linusborg basically function gets sent function right", "d": "8/2017"}, {"body": "exactly documented clearly also available outside render function via instance method", "d": "8/2017"}, {"body": "play example couple issues using complex scenario hence need official repo couple notes createrenderfn check attrspropslisteners functions evaluate would allow dynamically set props etc based existing props composability component second parameter entire createhoc method curried could easily chain multiple hoc creators together hoc added mixin try chain hocs together ie second hoc access parent props example", "d": "8/2017"}, {"body": "hey folks looking writing implementation let know think look publish soon also thinking writing recomposestyle package", "d": "8/2017"}, {"body": "recompose style package would great really could used something like withstate recently sat aug jack notifications githubcom wrote hey folks looking writing implementation let know think look publish soon also thinking writing recomposestyle package receiving mentioned reply email directly view github mute thread", "d": "8/2017"}, {"body": "jackmellis great take lead couple thoughts feedback gave previously think curried version great point default way hocs generally done nt good point problem mixins already idea mitigate nt one moment gut feeling mitigatable combination curried variants created using also thought naming nt like something like would meaningful make sense scenario embed nodes javascript render h return h div staticclass somestyling rendercomponentwith props", "d": "8/2017"}, {"body": "end opted componentfirst noncurried curried variant react ecosystem functionalfocused unlike vue acts like oop framework think best keep consistent rest vue still offer functional alternative added code deal rather whole hoc mixin manually merge hoc options together using optionsmergestrategies problem optionsmergestrategies expects vm last parameter merging instantiation vm quite happy since exactly put together less think people use directly general usage something like perhaps nt quite understand example", "d": "8/2017"}, {"body": "perhaps nt quite understand example think right track thoughts going similar direction thought last reply initial poc included people could add additional markup around rendered component would mean really hoc anymore would bring ui well", "d": "8/2017"}, {"body": "yes think attempting render additional content gone outside hoc territory might well create sfc handle", "d": "8/2017"}, {"body": "published vuehoc npm also working vuecompose quick documentationsessionaway ready well although similar recompose vue handles lot clever stuff like caching computations encourages use actually nt need quite complex functionalstyle syntax", "d": "8/2017"}, {"body": "fyi", "d": "9/2017"}, {"body": "fwiw", "d": "10/2017"}, {"body": "works differently used achieve similar results true close since think jackmellis project provide solid foundation nt intend include way create hoc core mainly nt see large benefit mixins extends", "d": "10/2017"}, {"body": "mainly nt see large benefit mixins extends linusborg react already abandoned hoc brings lots benefit article analyzed benefits contract component mixins implicit use mixins single component begin clash mixins tend add state component whereas strive less think vue team consider support hoc carefully although easy seems vue designed way", "d": "12/2017"}, {"body": "convinced hocs superior concept implicit contract potential clashes happen hocs well example see talk maintainer reactrouter said nt think bad either useful many situations magic bullet praised react world though downsides evident discussion implementing hocs vue nt trivial react vue api functionality broader edge cases taken care surely talk improve long nt require breaking anything vue hoc nt worh breaking change view", "d": "12/2017"}, {"body": "", "d": "2/2018"}, {"body": "personally think consistent across project global compiletimeonly option first place since solved css avoid adding yet another option runtime api", "d": "9/2017"}, {"body": "since solved css avoid adding yet another option runtime api respect decision esp performance implications full clarity white space always solved css give example html html glued word footnote browser width narrow enough forced go proceeding line word footnote travel however following html occur move word footnote appear preceding line html footnote far seen css get around without unintended side effects setting parent font size zero child font sizes reset using floating elements using flexbox things introduce complexities unintentional side effects project brought issue ultimately decided remove whitespace manually pretty gets job done anyway thought weigh mention thanks", "d": "9/2017"}, {"body": "like expected behavior works event fire textarea loses focus specific repro code type character event fired get executed caused rerender rerender vue render value textarea still empty till event never fired process", "d": "7/2017"}, {"body": "looks like template compilation adding many things edit think jkzing right happening render", "d": "7/2017"}, {"body": "closing working expected edge case though workaround putting texarea component", "d": "7/2017"}, {"body": "vue repository vuex repository essentially style question one better documentation design vuex extension vuex documented plugin interface answered question forum assume close wrong place", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "\u8fd9\u662f webpack", "d": "7/2017"}, {"body": "problem resolved latest version enhancedresolve", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "imo issue", "d": "7/2017"}, {"body": "sorry", "d": "7/2017"}, {"body": "deferred done \u63a5\u6536\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a promise", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "looks like regression", "d": "7/2017"}, {"body": "event triggering beginning well nt", "d": "7/2017"}, {"body": "error message reproduction pleaser provide code leads error likely nt define symbol allowed type prop", "d": "7/2017"}, {"body": "see", "d": "7/2017"}, {"body": "return plain objects provide recommend taking look provide inject", "d": "7/2017"}, {"body": "used work stopped working problem occurs trying recursively merge objects add smarts detect object clone properties thanks", "d": "7/2017"}, {"body": "posva meaning behind note note provide inject bindings reactive intentional however pass observed object properties object remain reactive took mean reactive objects default behavior could used implemented", "d": "7/2017"}, {"body": "jasonsanjose means pass objects observed injected properties become reactive", "d": "7/2017"}, {"body": "posva thanks clarification give try", "d": "7/2017"}, {"body": "would also like chime received issue trying upgrade regression unhelpful error message made really hard track also anything weird copypasting mixin project edit created", "d": "7/2017"}, {"body": "use elementui elupload compoent veevalidate happens wrong info maximum call stack size exceeded mergedata", "d": "7/2017"}, {"body": "posva still looking solution time chime would really appreciate hopefully someone else might ideas least situation updated example based last fiddle added grandchildren references injected directly references computed property based injected goal mixin properties component tree let inherited specific way contrived example let say building library form components nested want mixin state form components also want state propagate sub tree example say property requires subtree become want able get reactive update changes", "d": "8/2017"}, {"body": "jasonsanjose problem injected reactive whole new object every time setting root really think twisting feature much looks like need way sharing state components injectprovide meant", "d": "8/2017"}, {"body": "posva thanks feedback found creative solution involves watchers injected properties bit indirection pretty easy follow seems work hopefully still playing within rules least going trip future behavior changes", "d": "8/2017"}, {"body": "better example cascading breadcrumbs", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "use mixin instead sharing script", "d": "7/2017"}, {"body": "apologies using issue helper definitely another issue thanks quick reply take look mixins thank", "d": "7/2017"}, {"body": "could please remove images make smaller include steps reproduce well description bug please bonus points english", "d": "7/2017"}, {"body": "hi solution elements disappear rendered set scrolltop number let browser dispatch scroll event show like", "d": "7/2017"}, {"body": "thanks solution", "d": "7/2017"}, {"body": "\u725b\u903c\u6bc5\u54e5", "d": "4/2018"}, {"body": "duplicated", "d": "7/2017"}, {"body": "\u6211\u671f\u671b\u7684\u6548\u679c\u662f\u6570\u7ec4\u5b57\u7b26\u4e32\u5bf9\u8c61\u53ef\u4ee5\u81ea\u7531\u8f6c\u6362", "d": "7/2017"}, {"body": "used method buttons check value html", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank specific reason provided reproduction link reproduction vue repository", "d": "7/2017"}, {"body": "nt see could anything since ca nt access attribute value ie", "d": "7/2017"}, {"body": "instantiate vue app inspect element ie elattributes vbind settings result component alpha worksinie false nt know display markdown tab characters still perfectly preserved later manually instantiate app get error invalid expression meanwhile firefox exactly except component successfully renders manually inspect element replace tabs spaces instantiate app successful something evaluating string contains tabs ie like", "d": "7/2017"}, {"body": "unfortunately nothing linusborg said error unrelated vue happens vue even gets parse template", "d": "7/2017"}, {"body": "strange since returns exactly string firefox ie saying vue uses different method access attribute values would return different values ffie", "d": "7/2017"}, {"body": "saying error unrelated vue happens vue runs btw runs fine", "d": "7/2017"}, {"body": "try explain confusion produced new example html eliminating variable pug template renders ff ch ie renders ff ch ie reiterate particular ie ie dozens users found issue due bug reports missing field first example render second example difference two tab characters edit first example remove tabs one one moment remove final tab component render correctly still something considered relevant vue would able point toward part source code reads attribute values", "d": "7/2017"}, {"body": "il reopen take closer look maybe related template parsing", "d": "7/2017"}, {"body": "guessing instead using domnodes vue uses innerhtml tested indeed return different value ff ie versus whereas using elattributes vbind settings returns value case tab characters could still decoded understand issues", "d": "7/2017"}, {"body": "ok thanks explanation makes sense thought error ie vue generating error nt know get error ie", "d": "7/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "7/2017"}, {"body": "happens still running clear beforedestory vue export default name test mounted thisinterval setinterval gt consolelog refstest beforedestroy clearinterval thisinterval", "d": "7/2017"}, {"body": "see", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "comment needs inside root element preserved", "d": "7/2017"}, {"body": "thank effect", "d": "7/2017"}, {"body": "ah forgot mention docs option works using full build inbrowser compilation work single file components", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "personally never used cucumber issues questions like posted please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted discord chat forum stackoverflow thanks", "d": "7/2017"}, {"body": "think new featurei want cli new choice cucumberjs", "d": "7/2017"}, {"body": "kinanson vuecli initialises project whatever template want want option available clone vuejstemplateswebpack make template support anyway vue issue locking conversation", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "bug report usage question please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted discord chat forum stackoverflow thanks", "d": "7/2017"}, {"body": "got nonanswer apparently", "d": "7/2017"}, {"body": "problem themes suddenly got using vue material background valid item theme gives message default primary blue accent pink background rgb preferred option background valid theme error", "d": "9/2017"}, {"body": "add online demo", "d": "7/2017"}, {"body": "bind value domprops actually attrs think already fix test could anyone help test", "d": "7/2017"}, {"body": "jsx transform issue see nickmessing think would make sense treat necessary attributes domprops default babelplugintransformvuejsx", "d": "7/2017"}, {"body": "next hours sorry offtopic please merge pr", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "minimal repro", "d": "7/2017"}, {"body": "exected behaviour tag child blocks parsed see one root element html limitations ps information available", "d": "7/2017"}, {"body": "complete list elements close available", "d": "7/2017"}, {"body": "", "d": "9/2018"}, {"body": "hello working intended find explanation smile", "d": "7/2017"}, {"body": "thanks much", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "want keep use string instead boolean", "d": "7/2017"}, {"body": "nt work false argument variable", "d": "7/2017"}, {"body": "stringify variable", "d": "7/2017"}, {"body": "ktsn genius thanks", "d": "7/2017"}, {"body": "reference requested past", "d": "7/2017"}, {"body": "rpkilby ask filing prs smile thanks heads close dupe", "d": "7/2017"}, {"body": "purpose preventing binding showing dom use new option", "d": "7/2017"}, {"body": "sure quite looking along right lines want disable one binding rather whole lot really confused behaviour initially using like suggest changed reported seemed decided nt expected work child components", "d": "7/2017"}, {"body": "apologies modifier would indeed make work components disables dom attribute fallthrough seems solve exact issue unless want rely behavior cases experience quite rare time use affected dom attributes want pass suggest make props bind explicitly child components", "d": "7/2017"}, {"body": "ah cool good know going insane spot weird inconsistency though fiddle demonstrate reported issue nt see docs nt affect solve need thanks much bikeshed would nice somehow behaviour could controlled parent user rather child needing know might ignore stuff probably matter taste", "d": "7/2017"}, {"body": "already series top element template achieve exact example work reason template ca nt multiple root elements second template root level wrapped", "d": "7/2017"}, {"body": "actually asking multiple toplevel elements component something useful right currently requires nontrivial changes vdom implementation support something falls within obviously nice area focus revisit working substantial improvements vdom future", "d": "7/2017"}, {"body": "click one radio list example second item id attribute radio element appears first time console bind value attribute radio id attribute appears time dont understand mean elements seem work great styles applied correctly log printed ot console item click exactly wrong edit maybe want", "d": "7/2017"}, {"body": "linusborg please follow steps open console click one items serveral times see different log find differences first log others first log id others", "d": "7/2017"}, {"body": "however understood problem id seems disappearing expect id converted string issue use vmodel wrong unset id vale every radio selected since id vue ca nt bind id attribute please see pen provided previuos reply correct usage additional questions using vmodel radio inputs offer support forumvuejsorg chatvuejsorg", "d": "7/2017"}, {"body": "linusborg problem add value itemname input radio see logs nt know", "d": "7/2017"}, {"body": "vmodel still still wrong want show pen", "d": "7/2017"}, {"body": "linusborg replace vmodel itemid vmodel itemname problem still existam use vmodel wrong delete vmodel ok please give similar example usage thank", "d": "7/2017"}, {"body": "please look example still wrong need answer questions issue bug usage problem side alrady suggested please post question forumvuejsorg chatvuejsorg happy help forum", "d": "7/2017"}, {"body": "reactive", "d": "7/2017"}, {"body": "simplesmiler know reactive reactive", "d": "7/2017"}, {"body": "explanation hook cached value change keeps still key autocache", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "error add proper error handling", "d": "7/2017"}, {"body": "symptoms suggest recursive import let take look check going", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow sharing whole repo valid reproduction", "d": "7/2017"}, {"body": "posva understand opened task thought error report due checks made solution needed solution new vue decided open issue nickmessing even take look actually problem recursive import solution work still find explanations form presents error simple way import store inside script work normally still believe bug know vue webpack still investigating", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "tiagofelipe hi problem fixed day suffering include mean import store auth like webpack automatically understand import course last line perfect code write everything gon na fine hope somehow helped", "d": "8/2018"}, {"body": "maybe use", "d": "7/2017"}, {"body": "like considering somehow similar api pass callback get promise", "d": "7/2017"}, {"body": "suppose supported", "d": "7/2017"}, {"body": "whoops sorry missed", "d": "7/2017"}, {"body": "oh check console", "d": "7/2017"}, {"body": "switching input types lead strange behaviors format model value nt match type", "d": "7/2017"}, {"body": "javoski yes list textlike inputs mentioned description ps works value string example", "d": "7/2017"}, {"body": "another way clearly current release avoid ternary example written vuejs codestyle guide better try use simple expressions components attributes move complex ones callback functions", "d": "7/2017"}, {"body": "likely support full dynamic type next minor release closing one", "d": "9/2017"}, {"body": "bug edge going fixed soon reason us add workaround meantime much easier use patched version meanwhile break something could provide repro using vue please", "d": "7/2017"}, {"body": "ms issues prefer write like test work fine", "d": "7/2017"}, {"body": "hi posva thanks looking following link triggers issue edge project supported ie nt quick access machine link might even trigger code path ie may fail load earlier sounds like benvirus reproduced ie maybe provide link sample code monkey patch using benvirus snippet change pushed edge leave implement workaround ie said would surprised also issue ie since quick google search returns long history issue ms browsers", "d": "7/2017"}, {"body": "mean minimal repro use", "d": "7/2017"}, {"body": "unable reproduce jsfiddle sure suspect may related jsfiddle wraps document around yet another iframe dynamically loaded order things evaluated state inside iframe seems hard predict triggering ms edge bug outside vue trivial basically accessing inside iframe minimal repro report filed ms ok feature request rejected ms bug thought would nt hurt ask workaround happy dive deeper need feel free close ticket implementing workaround nt look like priority would nt blame reject thanks", "d": "7/2017"}, {"body": "oh nt worry simple html file enough well bugs affects matter", "d": "7/2017"}, {"body": "tried simple vue examples unable trigger bug minimal app hard isolatereplicate state triggers application javascript stack trace browser croaks general error console console link code causes points function able see first repro link posted interested pasting simple html vue code code used ms bug report link provided sorry ca nt provide targeted repro html html consolelog xxx documentactiveelement", "d": "7/2017"}, {"body": "sorry concrete feature request support question please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted discord chat forum stackoverflow thanks", "d": "7/2017"}, {"body": "maybe related seems modifier nt working properly", "d": "7/2017"}, {"body": "also using render function working great example", "d": "7/2017"}, {"body": "think nt work attr", "d": "7/2017"}, {"body": "nt know works nt plain attr find using makes work", "d": "7/2017"}, {"body": "issue related using", "d": "7/2017"}, {"body": "regression though", "d": "7/2017"}, {"body": "yeah also break things using", "d": "7/2017"}, {"body": "confused manage reproduce consistently think really need use though repro first input component nt update changes works vue", "d": "7/2017"}, {"body": "mutating method copy array calling", "d": "7/2017"}, {"body": "broke world couple years sure mutating method alone", "d": "7/2017"}, {"body": "faced problem alone", "d": "11/2017"}, {"body": "runnable reproduction please provide small repository similar demonstrates issue lifecycle created commit mutation logger vuedevtool nt understand sentence sorry", "d": "7/2017"}, {"body": "asked issue please use forums chats ask questions", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow", "d": "7/2017"}, {"body": "sure caused problem changed devclientjs file var const stupid", "d": "7/2017"}, {"body": "looks need small changes", "d": "7/2017"}, {"body": "read docs", "d": "7/2017"}, {"body": "freezing js process loop", "d": "7/2017"}, {"body": "use instead", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "virtual dom", "d": "7/2017"}, {"body": "\u56e0\u4e3a\u4f60\u5728computed \u91cc\u5f15\u7528\u4e86\u554a \u8fd9\u4e0d\u5c31\u662f\u76f8\u5173\u5417", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "jkzing", "d": "7/2017"}, {"body": "zoroweb", "d": "7/2017"}, {"body": "", "d": "8/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow need visible class put directly attribute since toggle visibility anyway current code removed end transition style removed though end turns something actually bugs gladly take look repro without semantic ui plain css", "d": "7/2017"}, {"body": "special merge behaviors typically used explicitly styling root element child component implicitly passing might result unexpected layout results due nesting obvious user want component expose way style nonroot element exposing dedicated props purpose eg cases suggest exposing datadriven props manage styling inside component", "d": "7/2017"}, {"body": "implicitly passing might result unexpected layout results due nesting obvious user could nt said attributes well eg nesting may obvious user definitely nt obvious nt handled way attributes alone caused unexpected layout results using wrapper component would expect regular html attributes passed wrapped element", "d": "7/2017"}, {"body": "reasoning meant passing generic nonstyling related attributes almost always styling related actually noted docs probably make prominent talking expected result user talking user component provided user framework authoring components nt think good idea encourage user directly style component via classes inline styles said prefer pure data props manage styling inside component example could user component nt even need know class", "d": "7/2017"}, {"body": "agree mrcsmcln avoiding unexpected results good rationale behavior excluding certain arbitrary attributes less transparentconsistent simply causes unexpected results different way though clear documentation appreciated case argue consistency clarity important additionally appears currently way apply bindings child element instead root without using custom props existing behavior would still achievable two attributes excluded op suggests binding selectively would verbose also explicittransparent compounded inability one root element forces us use wrapper elements eg hocs may want apply bindings side note documentation seems imply included", "d": "4/2018"}, {"body": "ran trying text input component needed div making input font awesome span textbox time styling applied input div would nice could get inheritstyle option would also include class say even kind nicer way merge classstyle data deal adding specific property passing styling input annoying non intutitve generally agree exposing styling inner components like sometimes simple ones makes sense even complex ones may default item apply style times jcupps mentioned vue forces us abuse div tags thinks might root element even though know never cant use template tags get around contrived simple example cant node types different vue nt like else different node type class gets applied div regardless inheritattrs even though vue anything gets way html thats different topic", "d": "4/2018"}, {"body": "causing grief use props unobvious names pass class attributes reusable components stated authoring components nt think good idea encourage user directly style component via classes inline styles mind whole point making reusable components flexible styled container thus making easy use without refactoring every time want change say background colour text size name property inheritattrs imply exactly maybe renamed inheritmostattrs way new users would get clue write computed properties components deal applying classes styles inner elements quite frankly annoying wastes time forget personally think default behaviour changed exclude attributes flag false however would breaking change related property inheritstylinginattrs would default false include setting true would force behaviour looking would expected first place", "d": "4/2018"}, {"body": "stumbled upon design flaw wanted create accessible icon component would become first obstacle ca nt multiple root elements okay wrap span discovered class excluded way suppress rename attribute working ugly component follows export default inheritattrs false props xclass string alt string sronly boolean data function return tooltip thissronly null thisalt used like works needlessly complicated could use use regular attribute nt problem would also make jumping class definition component instance work editor nt even know class attribute yes could put span inside make one example", "d": "8/2018"}, {"body": "reopened freedom attach element want ca nt given freedom", "d": "8/2018"}, {"body": "personally think focus support since nonstandard likely completely replaced", "d": "7/2017"}, {"body": "agree nickmessing adding really nt bad imo", "d": "7/2017"}, {"body": "need use computed property moment date inputs widely supported something probably skip date widely supported", "d": "7/2017"}, {"body": "okay guess using vue datepicker library currently best option", "d": "7/2017"}, {"body": "plain javascript object thus supported reactivity", "d": "9/2017"}, {"body": "hi right wiki nt maintained anymore guess could even deactivate dont use kind documentation website", "d": "7/2017"}, {"body": "yeah wiki disabled", "d": "7/2017"}, {"body": "vue even reach year", "d": "7/2017"}, {"body": "dude showed forum triggering real dom event works like hour ago jquery whatever god knows behind scenes seem work agreed concern aim compatible vanillajs first foremost close lock issue discussion continue forum", "d": "7/2017"}, {"body": "also request ask default injections maybe could consider together", "d": "7/2017"}, {"body": "showcase problem minimal jsfiddle looks ilke looking default values jkzing said keep issue opened instead", "d": "7/2017"}, {"body": "yes issue considered together purpose avoid warning missing inject", "d": "7/2017"}, {"body": "simply pass", "d": "7/2017"}, {"body": "empty string", "d": "7/2017"}, {"body": "using quick fix fiddle", "d": "7/2017"}, {"body": "please see updated link", "d": "7/2017"}, {"body": "listens event detect changes nt trigger event", "d": "7/2017"}, {"body": "yes send documentqueryselector input nametype trigger change", "d": "7/2017"}, {"body": "nt need nt use jquery using vue following would recommend read vue guide particular handling user input might misunderstanding vue used", "d": "7/2017"}, {"body": "use jquery plugin working project select list time plugin make many operation want resive result plugin setting value hidden input variable clean simply way work vue massege accepted state must change value jquery plagin trigger vue update variable work vue update variable", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow vue listen back setting value directly dom element", "d": "7/2017"}, {"body": "please see bug reports writed solved make work may bug nt please help solve problem", "d": "7/2017"}, {"body": "ask", "d": "7/2017"}, {"body": "html export default name app case context styles contextrenderstyles returns empty string contextrenderstyles \u7ed3\u679c\u4e00\u6837\u662f empty string", "d": "7/2017"}, {"body": "reproduction runnable please provide actual repo", "d": "7/2017"}, {"body": "repo npm run prod run server product mode ssr appapp component scoped style src appcss import testcss client side works fine server side contextrenderstyles empty renderer creation code servicesssrjs use apicontrollersindexcontrollerjs", "d": "7/2017"}, {"body": "ok looked setup using essentially component also root component ssr css injected component hook however created root instance render starts injected css never got registered need make root component wrapper js app new vue router extends app store app new vue router store render h gt h app", "d": "7/2017"}, {"body": "thank much lt work like charm king god maestro emperor code meister vuejs forever xd", "d": "7/2017"}, {"body": "\u8fd9\u662fexpected", "d": "7/2017"}, {"body": "jkzing hard got time please translate robotic translate crazy smile", "d": "7/2017"}, {"body": "jkzing", "d": "7/2017"}, {"body": "nickmessing basic idea click \u6d4b\u8bd5\u4e00\u4e0b fiddle hooks get called children like", "d": "7/2017"}, {"body": "jkzing oh told expected behaviour see close issue", "d": "7/2017"}, {"body": "nickmessing yes could close", "d": "7/2017"}, {"body": "iixxoo \u5f3a\u5236\u91cd\u65b0\u6e32\u67d3 \u6307\u7684\u662f\u91cd\u65b0\u751f\u6210\u4e86vdom", "d": "7/2017"}, {"body": "jkzing thank", "d": "7/2017"}, {"body": "dom", "d": "7/2017"}, {"body": "\u591a\u4e2a \u5b9e\u4f8b \u7684data \u4e2d\u53ef\u80fd\u5b58\u5728\u6570\u636e", "d": "7/2017"}, {"body": "\u5982\u679c\u4f60\u7684\u903b\u8f91\u4f1a\u56e0\u4e3a updated hook", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "hook", "d": "7/2017"}, {"body": "bug components resolved based component template used need expose user register together component using", "d": "7/2017"}, {"body": "vue wrapping functions one function register instead listeners simply wrap listeners function instead pushing array", "d": "7/2017"}, {"body": "imagine jsx pass data child components rerender parent component way around see example actually used method expected behaviour", "d": "7/2017"}, {"body": "provide actual reproduction hackernews repo running using scoped styles renders styles server eel scenario working please fork repository edit demonstrates issue", "d": "7/2017"}, {"body": "caused bug resolved upgrade", "d": "7/2017"}, {"body": "boolean string number technically warning asks still look see boo leans fine", "d": "7/2017"}, {"body": "fyi turn boolean number prepending guess adding warning enough could also make check vaule boolean", "d": "7/2017"}, {"body": "online code prevent default wrong event problem paste please provide reproduction new issue", "d": "7/2017"}, {"body": "linusborg thank much got another problem actually problem vuematerial bind clicking dropping would try paste next", "d": "7/2017"}, {"body": "would problem ask forumvuejsorg", "d": "7/2017"}, {"body": "usage question bug please ask question chatvuejsorg forumvuejsorg", "d": "7/2017"}, {"body": "bug may vuejs process message", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "bug even providing valid repro link please ask kind consulting questions forumvuejsorg would glad help", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "question bug report also related party library please make sure follow issue report requirements", "d": "7/2017"}, {"body": "nt possible autorun blaze data affect vue instance update", "d": "7/2017"}, {"body": "yes could see easy way determine one props attrs updating needed", "d": "7/2017"}, {"body": "wrap component inside vue instance example", "d": "7/2017"}, {"body": "yes assigns defined target component props get mapped automatically", "d": "7/2017"}, {"body": "want set attributes", "d": "7/2017"}, {"body": "oh support nonprop attributes could still bound reactive value would like fully support vue", "d": "7/2017"}, {"body": "point root tag inside component le dim juil mitar notifications githubcom \u00e9crit oh support nonprop attributes could still bound reactive value would like fully support vue receiving commented reply email directly view github mute thread", "d": "7/2017"}, {"body": "user set attributes without developer component knowing see description rationale would like support blaze well possible big deal vue would function would allow programmatically set update props attrs like template language would easy", "d": "7/2017"}, {"body": "generally use nonvue libraries likely write least one vue component wrap expose features props events point using vue components blaze anyway", "d": "7/2017"}, {"body": "think needed could directly use vue components least aiming package", "d": "7/2017"}, {"body": "nt get fr already programmatically create vue instances sharing object state allow reuse data multiple instances needed trigger functions things change use watchers missing", "d": "7/2017"}, {"body": "would programmatically create component would equivalent without knowing props component accepting become attributes", "d": "7/2017"}, {"body": "templates render functions access available props diff pass", "d": "7/2017"}, {"body": "trickier seems use render function modify anymore get warning afterwards toplevel component anymore", "d": "7/2017"}, {"body": "still nt see missing", "d": "7/2017"}, {"body": "sorry comment bit rude modify props pass feel like nt dug enough problem time looks like understand average user asked forum discord get help", "d": "7/2017"}, {"body": "worries know sometimes hard communicate online also understand background asked anything forum think good enough grasp vue code read currently possible nt feel questions would need answer course maybe missed something issues using forum try login get ca nt log mitar ip address different issue working blaze integration vue current code issue relates could create nice api render vue components blaze templates ideally wanted support something like following syntax blaze puts arguments object passes code would include vue values reactively change code rerun new object new value allows one push updated values vue component instance two questions know values props args somebody using code push new values instance even care developer using syntax care care using push new values given getting new object new values one approach would ask developer specify props args asking pass arguments something like would prefer developer tried two approaches one wrapping component one without wrapping component code something like object works two issues know props attrs could inspect component options figure manually would require duplicate code already existing vue would great could pass object vue figures update props attrs change without recreating whole component maybe component keeps important state form loose existing user input tried something like throws warning one changing nonroot props directly moreover idea change attributes similar way second approach tried want update props works alternatively suspect could setting values object directly might propagate vue yet tried issue approach know pass attrs manually filter props attrs working wondered api would match template api vue figures one prop one attr maybe instead could vue would split needed augment object detect changes observe provide method think doable without help vue issue think simpler maybe complicating though easier way", "d": "7/2017"}, {"body": "fyi get normalized props metadata component via group raw args blaze props raw attributes based metadata mistaken solve desired use case", "d": "3/2018"}, {"body": "every warning cared warnings exist nt btw warning would gone production", "d": "7/2017"}, {"body": "nt see good reason support ignore warnings", "d": "7/2017"}, {"body": "vforkeys warning really good certainly save time debugging later case problem", "d": "7/2017"}, {"body": "thank consideration agree warnings important observed situation thought might miss warnings console flooded warnings less falsepositives think situations vfor key warning would useful example vfor accepts parameter type array object number string case iterating collection objects nt necessarily know keys object ahead time get around injecting guid field object data loaded iterating array arrays string number would able address warning missing key either way understand edgecase thanks responses vue awesome", "d": "7/2017"}, {"body": "sorry replying closed issue think belongs get plenty warnings come kind iterations key could use warnings dont add value instead clutter console mean dom content simple live warnings", "d": "2/2018"}, {"body": "quick addition proposed api api wraps instead", "d": "7/2017"}, {"body": "events already cleaned point", "d": "7/2017"}, {"body": "misunderstood html listeners functions called directly take example time click create new component adds event emitter destroys previous components yet despite destroyed emit listeners still hit emit event button", "d": "7/2017"}, {"body": "um could done via mixins reason make particular case inside vue nt use deal kind situation frequently", "d": "7/2017"}, {"body": "must know least handful vue devs attach event listeners created store somewhere remove one destroyed functions considering one vuejs big points ease use common patterns larger apps always binding events different sources html templates would huge pain relief larger apps could always keep applying mixins considering html templates already clean things automatically sounds logical api event listeners also way clean things automatically", "d": "7/2017"}, {"body": "fiddle really different attaching events another source linked vue instance calling function way normal clean make clear listeners setup cleaned instance destroyed without event ok memory leaks etc note", "d": "7/2017"}, {"body": "fiddle really different attaching events another source yup point example global event bus want component listen event must created function destroyed function event bus may passed via prop imported module ref anywhere usual case seen common work using event bus common pattern sure could call different vue instance functions common pattern know people already simple function wrap nicely within vue makes life bit easier larger apps", "d": "7/2017"}, {"body": "using external event emitter even though vue instance responsible handling suggest create plugin mixin post link", "d": "7/2017"}, {"body": "posva mixin first message thread works fair people see use similar lot code seen applies events forget clean without noticing bugs leaves behind built would help number people", "d": "7/2017"}, {"body": "specific case nt know think super common using instance event emitter useful small projects larger projects use vuex incrementing size vue small projects second thought cool add mixin docs could submit pr", "d": "7/2017"}, {"body": "sure thing specifically would fit familiar repo", "d": "7/2017"}, {"body": "think go", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow vue provide template compiler package well", "d": "7/2017"}, {"body": "maybe project help jaweii", "d": "7/2017"}, {"body": "lovermaker thanks tried vuep compile template", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum discord server gitter stackoverflow unfortunately depends jquery plugin", "d": "7/2017"}, {"body": "current behavior untouched explicitly passed via passed template actually passed removed functional component resolves prop", "d": "7/2017"}, {"body": "yeah guess wondering props removed added always identical", "d": "7/2017"}, {"body": "feel functional component explicitly declares props intercepting functional component meant serve pass wrapper simply declare props use implicit props", "d": "11/2017"}, {"body": "honestly idea trying", "d": "7/2017"}, {"body": "imagine dialog component named cdialog template like used like problem far component defines content buttons like cform form creates contentblock buttonsblock could nt simply create use like buttonsdiv cform would end maintag cdialog instead footertag solve problem idea would multiple returnslots maybe vue already way simply nt found yet", "d": "7/2017"}, {"body": "splitting sub components like give user use fill content dialog component allow customisation", "d": "7/2017"}, {"body": "instead using one single component fill different slots use different components one slots", "d": "7/2017"}, {"body": "ok thank idea think would work case try", "d": "7/2017"}, {"body": "fyi referring something like", "d": "7/2017"}, {"body": "two small remaining problems order order elements resulting htmlcode ca nt controlled cdialog case big problem use flexbox reorder css solve general case replacement cdialog component let call cpage ca nt change code cform cpage needs work dialogbody etc dialogbody render differently cpage cdialog would need something like dispatching parent optionsname dialogbody bit cumbersome seem problem usecase think solution works", "d": "7/2017"}, {"body": "complexifying things quite lot maybe render functions appropriate suggest ask questions forum discord server gitter stackoverflow", "d": "7/2017"}, {"body": "desired end result", "d": "7/2017"}, {"body": "alternatively way make slot ignores wrapper element would still semantic provide outermost element lost rest injected slot perhaps signifying lose top level way indicate", "d": "7/2017"}, {"body": "demonstrates problem trying solve", "d": "7/2017"}, {"body": "generated html", "d": "7/2017"}, {"body": "alexbowers use tag vue render children vnodes simply pass title prop", "d": "7/2017"}, {"body": "sqal use slot template tag work top level nothing else template though correct still nt semantic allowing child slot rendered children nodes", "d": "7/2017"}, {"body": "use case header bar site may title subtitle buttons breadcrumbs etc would like passed semantic way possible", "d": "7/2017"}, {"body": "please edit title actually requesting", "d": "7/2017"}, {"body": "sorry sure title came changed", "d": "7/2017"}, {"body": "want explain provide examples need something like discord provide", "d": "7/2017"}, {"body": "sqal said want semantic using component put inside tag problem approach user must specify classes solution create sub components like sbheadertitle user nt care original style still able adds personal opinion sqal said semantics matters page rendered developed always use meaningful names like title", "d": "7/2017"}, {"body": "posva sqal provided nt solution solves problem though would example modal header button body content way valid html ie tags within", "d": "7/2017"}, {"body": "creating subcomponents html valid surely means slots effectively useless right circumstances slot wo nt work sub component always work use slot", "d": "7/2017"}, {"body": "creating subcomponents html valid surely means slots effectively useless right circumstances slot wo nt work sub component always work use slot create sub components like sbheadertitle user nt care original style still able adds replaced state style typo", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "\u7f51\u901f\u592a\u6162 \u7ec8\u4e8e\u77e5\u9053\u600e\u4e48\u8fde\u63a5\u4e86 \u8fd9\u91cc\u662f\u94fe\u63a5", "d": "7/2017"}, {"body": "fyi also happens situations eg", "d": "7/2017"}, {"body": "\u521d\u59cb\u503c n\u548cslct \u4e0d\u7b26\u5408\u8981\u6c42 \u4f46\u90fd\u4fdd\u6301\u4e86\u521d\u59cb\u503c \u548c aa \u5f53\u6539\u53d8 n\u548cslct \u65f6 \u4e24\u4e2a\u503c\u4ecd\u4e0d\u7b26\u5408\u8981\u6c42 \u4f46 n \u4fdd\u6301\u4e86\u8d4b\u7ed9\u7684\u503cbb \u800c slct \u5219\u88ab\u5f3a\u5236\u6539\u4e3a\u4e86 undefined \u6211\u60f3\u8bf4\u7684\u662f \u65e2\u7136\u9009\u9879\u4e2d\u90fd\u6ca1\u6709\u5408\u9002\u7684\u503c \u4e3a\u4ec0\u4e48\u521d\u59cb\u53ef\u4ee5\u5b58\u5728 \u4f46\u6539\u53d8\u540e\u5c31\u4e0d\u80fd\u5b58\u5728\u4e86 \u88ab\u5f3a\u884c\u6539\u6210\u4e86undefined \u8fd9\u4e5f\u548c vmodelnumber \u8868\u73b0\u4e0d\u4e00\u81f4 \u503c\u6ca1\u6709\u88ab\u5f3a\u884c\u6539\u4e3aundefined", "d": "7/2017"}, {"body": "hi jstcodes using set value found tag ca nt change behivor may bind another varible tag eg make watcher watch changes non value set value changes remains label unchang", "d": "7/2017"}, {"body": "hi plasmatium \u611f\u8c22 \u8be5\u65b9\u6cd5\u53ef\u4ee5\u4f5c\u4e3a\u51b3\u89e3\u95ee\u9898\u7684\u65b9\u6cd5\u4e4b\u4e00 \u5728\u9879\u76ee\u4e2d\u5f02\u6b65\u83b7\u53d6 slct \u548c option\u9009\u9879\u96c6\u65f6 \u6211\u5c06 select\u7684\u8d4b\u503c\u653e\u5728\u4e86\u4e24\u4e2a\u5f02\u6b65\u64cd\u4f5c\u4e4b\u540e\u8fdb\u884c\u4e5f\u53ef\u4ee5\u907f\u514d \u53ea\u662f\u51fa\u73b0\u4e86\u8fd9\u4e2a\u95ee\u9898\u6709\u70b9\u7591\u60d1 \u65e2\u7136 \u90a3\u53ea\u80fd\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u6765\u907f\u514d\u4e86 thank", "d": "7/2017"}, {"body": "print blocking think much however easily fixable userland creating custom print function", "d": "7/2017"}, {"body": "hi posva unfortunately nt quite work reliant laying stuff javascript depending screen dimensions need read dimensions element inside css media query listener callback like see printed page nt show updated value soon close print preview text updates width measured page print preview looked css usecase could find solution hence bit layout javascript ouch", "d": "7/2017"}, {"body": "hmm well force update sure expose public api though edge case", "d": "7/2017"}, {"body": "ah yep works agreed seems overkill make public api thanks much help david", "d": "7/2017"}, {"body": "vue reusing elements components possible unless tell otherwise", "d": "7/2017"}, {"body": "sorry false report appreciate help linus", "d": "7/2017"}, {"body": "call twice gif call gif", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "got kind similar situation got two components parentcomponent childcomponent parentcomponent deleted vif condition met triggers beforedestroy parentcomponent seems remove dom elements within parentcomponent thus childcomponent beforedestroy childcomponent triggered childcomponent looks something dom nt anymore nt childcomponents beforedestroy triggered first better approach solve problem", "d": "7/2017"}, {"body": "zhangdroid bartdonninger troubled problem many days", "d": "7/2017"}, {"body": "actually expected element longer dom triggers fortunately specific scenario need get element size append back document element compute sizes removing", "d": "7/2017"}, {"body": "posva thanks reply still got trouble try build vue version reactoverdrive need get size position component destroyed way get thanks", "d": "7/2017"}, {"body": "zhangdroid please use forum chat questions alternative consider instead", "d": "7/2017"}, {"body": "zhangdroid hey buddy trying build vue version reactoverdrive", "d": "7/2017"}, {"body": "report way generic please try narrow least error stack trace", "d": "7/2017"}, {"body": "html html msg javascript var appnew vue el app data msg test consolelog vue consolelog app el console", "d": "7/2017"}, {"body": "nt see element id vue could mount", "d": "7/2017"}, {"body": "linusborg", "d": "7/2017"}, {"body": "yeah sorry missed read mobile anyway run code test never used nwjs ca nt verify", "d": "7/2017"}, {"body": "ok problem really vue issue need use full build vue default runtime build nwjs libs required run separate background page different main window use vue mounts instance element background page instead fix need pass vue preselected element main window", "d": "7/2017"}, {"body": "working case says cant find app ist another solution", "d": "8/2017"}, {"body": "need mount vue div", "d": "8/2017"}, {"body": "know already import vuejs like everything working working use npm version", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "seems error happen development environmentthis error disappear production environment", "d": "7/2017"}, {"body": "realyalso throw production", "d": "7/2017"}, {"body": "first detect prop mutation direct binding detecting mutation inside arrayobject prop value adds much overhead perf complexity really worth also mutating toplevel prop binding leads scenario mutated value gets reset parent updates directly mutating nested values without changing binding problem although still recommended valid usage", "d": "7/2017"}, {"body": "expected behavior unlikely change would technically breaking piece vdom transitioned destroyed moment leaving transition starts unfortunately polling solution might necessary workaround directives mutates dom directly", "d": "7/2017"}, {"body": "ran issue nt need poll transition poll el still present dom", "d": "1/2018"}, {"body": "unbinding removed elements page resulting jarring transition elements created directives bad practice", "d": "1/2018"}, {"body": "elements created directives bad practice using native js plugins like packery comfortable way go directive destroy packery instance unbind directly layout goes drain nt destroy producing memory leak slows every following instance packery think relevant issue", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "ditto request typically find overriding injected property data order provide default", "d": "7/2017"}, {"body": "also feature currently components nested within parents provide info children warning always pops root component nt provider injected property specific use case nested layout splitters", "d": "7/2017"}, {"body": "working component library utilizes provide inject certain components behavelook slightly differently context another component library since components used engineers development warnings injection found keeps showing environment would love feature implemented add mentioned like see attribute indicate whether injection required optional", "d": "8/2017"}, {"body": "realized pass data attribute directly closing", "d": "7/2017"}, {"body": "issue revert back", "d": "7/2017"}, {"body": "turns bug fixed", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "sorry introduced fault try fix", "d": "7/2017"}, {"body": "worries reverted meantime harm done", "d": "7/2017"}, {"body": "also happens trying extend component implements syntax guess issue", "d": "7/2017"}, {"body": "frandiox yes root cause fixed get merged sorry", "d": "7/2017"}, {"body": "fixed customize merge strategy inject option make workaround kinda like", "d": "7/2017"}, {"body": "please upgrade", "d": "7/2017"}, {"body": "others version lock vue pkg", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "please update", "d": "7/2017"}, {"body": "okay thanks", "d": "7/2017"}, {"body": "fixed", "d": "7/2017"}, {"body": "thanks qucly solution great make npm download", "d": "7/2017"}, {"body": "upgrade", "d": "7/2017"}, {"body": "review historic changes pacjkage saw error previos revisio expect inside try itand tell us", "d": "7/2017"}, {"body": "yes solved using using npm vue solved great", "d": "7/2017"}, {"body": "hi compiling got error c throw new error error vue packages version mismatch vue vuetemplatecompiler may cause things work incorrectly make sure use version using vueloader gt simply update vuetemplatecompiler using vueloader lt vueify reinstalling vueloadervueify bump vuetemplatecompiler latest object c modulecompile objectmoduleextensionsjs moduleload trymoduleload functionmoduleload modulerequire require object c solve must uninstall vuetemplatecompiler reinstall vit version vue npm uninstall vuetemplate compiler npm vuetemplatecompiler completed solved installation compilation thanks", "d": "7/2017"}, {"body": "take closed issue", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "release fix error", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "got error ps node npm", "d": "7/2017"}, {"body": "got error temporarily changed npm err darwin npm err argv npm err node npm err npm npm err code elifecycle npm err errno npm err vue postinstall npm err exit status npm err npm err failed vue postinstall script node buildinstallhooksjs npm err make sure latest version nodejs npm installed npm err likely problem vue package npm err npm npm err tell author fails system npm err node buildinstallhooksjs npm err get information open issue project npm err npm bugs vue npm err nt available get info via npm err npm owner ls vue npm err likely additional logging output", "d": "7/2017"}, {"body": "got error npm node zcdll zcdllinfisa npm install nodesass install node scriptsinstalljs cached binary found vue postinstall node buildinstallhooksjs throw err error find module functionmoduleresolvefilename functionmoduleload modulerunmain run startup npm warn optional skipping optional dependency fsevents nodemodulesfsevents npm warn notsup skipping optional dependency unsupported platform fsevents wanted os darwin arch current os linux arch npm err code elifecycle npm err errno npm err vue postinstall npm err exit status npm err npm err failed vue postinstall script npm err probably problem npm likely additional logging output npm err complete log run found npm err", "d": "7/2017"}, {"body": "got error node version", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "node neither works", "d": "7/2017"}, {"body": "nt work", "d": "7/2017"}, {"body": "npm err linux npm err argv install vue npm err node npm err npm npm err code elifecycle npm err vue postinstall npm err exit status npm err npm err failed vue postinstall script node buildinstallhooksjs npm err make sure latest version nodejs npm installed npm err likely problem vue package npm err npm npm err tell author fails system npm err node buildinstallhooksjs npm err get information open issue project npm err npm bugs vue npm err nt available get info via npm err npm owner ls vue npm err likely additional logging output npm err please include following file support request npm err homejgurepostrdmonfrontnpmdebuglog", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "node npm yarn fails", "d": "7/2017"}, {"body": "vue postinstall hometonytestnodemodulesvue ode buildinstallhooksjs throw err error find module hometonytestnodemodulesvuebuildinstallhooksjs functionmoduleresolvefilename functionmoduleload modulerunmain run startup got error", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "fixed", "d": "7/2017"}, {"body": "entire thing reported fixed realtime", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "happy make pr deletes script commiting publishing npm unless already working", "d": "7/2017"}, {"body": "vue", "d": "7/2017"}, {"body": "jounqin thank sad story", "d": "7/2017"}, {"body": "lavyun works please close issue", "d": "7/2017"}, {"body": "working expected setter work setting value jsbin", "d": "7/2017"}, {"body": "nt think necessary many users successfully using current vue types vscode maybe ktsn octref idea either way actionable", "d": "7/2017"}, {"body": "hmm nt think add current declaration seems expose vue typings global namespace declaration intentionally written module usages shipped via npm would suggest declare local declaration file project expose vue types global ts vueglobaldts import vue require vue export vue export namespace vue", "d": "7/2017"}, {"body": "thank suggestion", "d": "7/2017"}, {"body": "seems wrong import vue vue files see sample setup", "d": "7/2017"}, {"body": "octref know could use npm prefer using use vue global variable instead happen use plain javascript want intellisense way importing possible javascript vscode get intellisense jsdoc comment prefer", "d": "7/2017"}, {"body": "vetur covers sfc nt much plan supporting html file imports vue cdn like general jsinhtml support open issues vscode", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "source issue", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "call install please ask questions forum gitter next time", "d": "7/2017"}, {"body": "realizing probably postprocessor good idea would one using computed filed others could use expect cursor maybe preprocessor would suitable", "d": "7/2017"}, {"body": "difference", "d": "7/2017"}, {"body": "issue asking allow iteration custom objects arraylike things especially able specify multiple things maybe better integrate reactivity object could inform vue values changed like order modified one particular item array changed others maybe allow custom conversion arraylike array object rest code explain key use iterate way help make plugins allow developers return object convert arraylike array instead asking developers pass arraylike objects could also seen sugar top", "d": "7/2017"}, {"body": "post processors something done directly inside computed property really nt see gain registering way configure default key iterate case could check postprocessor cursor set default key iterate prefer explicit setting unlikely happen", "d": "7/2017"}, {"body": "post processors something done directly inside computed property really nt see gain yes would mostly sugar one manually convert arraylike object every time make query similar blaze works people used prefer explicit key setting unlikely happen understand general magic tricky case minimongo pretty clear key", "d": "7/2017"}, {"body": "case going pass adding postprocessors computed properties something extra api worth cost keep mind added plugin parses computed properties add extra post process", "d": "7/2017"}, {"body": "keep mind added plugin parses computed properties add extra post process wanted hear link example plugin", "d": "7/2017"}, {"body": "one issue also realizing postprocessing maybe best approach wrote realizing probably postprocessor good idea would one using computed filed others could use expect cursor maybe preprocessor would suitable way preprocessing", "d": "7/2017"}, {"body": "aware using mixin hook transforms object way preprocessing would computed property", "d": "7/2017"}, {"body": "would computed property note part computed property also used purposes", "d": "7/2017"}, {"body": "wo nt add something already something working vfor amp comp", "d": "7/2017"}, {"body": "vue version put computed property helper function get warn could nt find vuex state think warn may consider condition codes like js storejs import vue vue import vuex vuex vueuse vuex const state isloading false const mutations updateloadingstatus state payload stateisloading payloadisloading export default new vuexstore state mutations js appvue import loading vux import mapstate vuex export default name app components loading computed mapstate isloading state gt stateisloading", "d": "8/2017"}, {"body": "plortinus happens trying change value mapstate create getters probably make things work binding handle update committing mutations", "d": "8/2017"}, {"body": "posva thanks loti tried use modifier handle problemit works wondering solution good practice notthe purpose codes show loading toast switch one page another page spa js import loading vux import mapstate vuex export default name app components loading computed mapstate isloading state gt stateisloading", "d": "8/2017"}, {"body": "whywhen would component ever want change value isloading component hardly know process nt see need sync vmodel anything like", "d": "8/2017"}, {"body": "update value beforeafter action js routerbeforeeach function next storecommit updateloadingstatus isloading true next routeraftereach function storecommit updateloadingstatus isloading false", "d": "8/2017"}, {"body": "yeah sure value go parent component compoent loading component value changed component situation would need maybe missunderstanding props work least combination computed properties", "d": "8/2017"}, {"body": "\u521a\u770b\u5230\u7684", "d": "1/2018"}, {"body": "think would result lot code due way current virtual dom works still something similar transform vue apps custom elements app scoped shadow dom", "d": "7/2017"}, {"body": "nt solve problem unless use ignoredelements vue config", "d": "7/2017"}, {"body": "avoid mixing templates like instead mount instance injs template string onto empty element either way nt think add api use case way niche", "d": "7/2017"}, {"body": "ps \u7c7b\u4f3c\u95ee\u9898\u8bf7\u81f3", "d": "7/2017"}, {"body": "see", "d": "7/2017"}, {"body": "expected behaviour input recreated specific situation due way vdom diffing works make vue better aware specific elements", "d": "7/2017"}, {"body": "tried adding input nt work nested div appears attribute needs level vif otherwise still replaced probably documented feel stupid trying", "d": "7/2017"}, {"body": "expected behaviour render function reacting data property prop changing working version edit explanation nt clear mean changing value parent prop changing data still linked old reference set property normal component rerender", "d": "7/2017"}, {"body": "stands placeholder represents component parent vdom tree root component parent vdom tree", "d": "7/2017"}, {"body": "maybe need", "d": "7/2017"}, {"body": "looks like check reason behaviour expected ps another potential case", "d": "7/2017"}, {"body": "ok bug vue per html nest inside template gets reformatted browser passed vue template parser would work using purestring template probably avoid regardless", "d": "7/2017"}, {"body": "argh sorry nt think also limited aspect", "d": "7/2017"}, {"body": "thanks taking look amp posva due respect nt trying nest inside attempt common practice nesting inside especially navigations understand limitation may due order events vue control still feel like maybe something worth addressing posva workaround wrapping child template nt difficult least bit significant reason avoiding alternatively potentially way bypass browser reformatting using sort vue custom element setting attribute child eg appreciate", "d": "7/2017"}, {"body": "limitation html problem wont appear compiling templates using vue files tue jul chase giunta notifications githubcom wrote thanks taking look amp posva due respect wasnt trying nest inside attempt common practice nesting inside especially navigations understand limitation may due order events vues control still feel like maybe something worth addressing posva workaround wrapping child template nt difficult least bit significant reason avoiding alternatively potentially way bypass browser reformatting using sort vue custom element setting tag attribute child eg child appreciate receiving mentioned reply email directly view github mute thread", "d": "7/2017"}, {"body": "get around use string template instead indom template see difference logs", "d": "7/2017"}, {"body": "design functional components rerendered every time something affects changes even something unused parent component idea functional components nt cached nt track dependencies toggle button look console always improve docs vuejsvuejsorg repo suggestions please tell us opening issue thoughts even better directly open pr", "d": "7/2017"}, {"body": "yeah looks like fact makes directive bound differently nt working correctly either using instead fix issue render function generated transforms directive pair thanks reporting", "d": "7/2017"}, {"body": "thanks also like add thing happening elements prop likewise dropped", "d": "7/2017"}, {"body": "faster ever", "d": "7/2017"}, {"body": "would also like point run fiddle get following console window vue", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "current userland fix", "d": "7/2017"}, {"body": "declared dts intentionally since actually undocumentedprivate api", "d": "7/2017"}, {"body": "making hoc since vue requires props declared front need grab wrapped component done without reaching options", "d": "7/2017"}, {"body": "may consider exposing definition future closing since easy workaround", "d": "7/2017"}, {"body": "wanted point ktsn relying", "d": "7/2017"}, {"body": "javascript data \u4e2d\u7684\u503c\u4f5c\u4e3a source truth \u6240\u4ee5\u5e94\u5f53\u5c3d\u91cf\u4ee5\u5728 js", "d": "7/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted discord server gitter chat room forum stackoverflow thanks", "d": "7/2017"}, {"body": "\u662f\u6211\u81ea\u5df1\u641e\u9519\u4e86", "d": "7/2017"}, {"body": "previous attempt opening issue", "d": "7/2017"}, {"body": "branch contains development code may stable would even install branch install package skip npm postinstall script needed bu main purpose repository used dev environment package", "d": "7/2017"}, {"body": "use fork repo without publishing important one provide dependency directly git fork inside sure define git dependency", "d": "7/2017"}, {"body": "want install fork anyway remove postinstall repository needs script development process remove obviously", "d": "7/2017"}, {"body": "suggest removing hook fork hook necessary enforcing workflow main repo alternatively take pr makes hook noop repo installed via npm instead local development", "d": "7/2017"}, {"body": "issue effects command git directly wtvuepurenpminstallbug npm install vue save vue postinstall workspacestestingvuepurenpminstallbugnodemodulesvue node buildinstallhooksjs throw err error find module workspacestestingvuepurenpminstallbugnodemodulesvuebuildinstallhooksjs functionmoduleresolvefilename functionmoduleload modulerunmain run startup npm warn vuepurenpminstallbug description npm warn vuepurenpminstallbug repository field npm err code elifecycle npm err errno npm err vue postinstall npm err exit status npm err npm err failed vue postinstall script npm err probably problem npm likely additional logging output npm err complete log run found npm err ok wtvuepurenpminstallbug npm install vue save npm notice created lockfile packagelockjson commit file npm warn vuepurenpminstallbug description npm warn vuepurenpminstallbug repository field vue added package", "d": "7/2017"}, {"body": "confirm working fresh installation laravel immediately run outputs error message previous comment adding tag continue installation without warningserror", "d": "7/2017"}, {"body": "", "d": "7/2017"}, {"body": "fyi script renamed causes normal installs fail well", "d": "7/2017"}, {"body": "anyone bandage trying get fresh laravel install working", "d": "7/2017"}, {"body": "say told glad got resolved finally", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "documentation clear matter works inside mustache interpolations vbind expressions way works call function declared object edit realized use syntax", "d": "7/2017"}, {"body": "sqal said", "d": "7/2017"}, {"body": "definitely sqal discovered best solution perhaps documented using completely defeats purpose using filter might well create method still want use filter documentation mention bind innerhtml dom property", "d": "9/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "design vue", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "reopen even though meeting issue standards since assume meant discussion start see solve goal issue quite clear", "d": "7/2017"}, {"body": "first thank reopening think would good thing could solve problem better solution avoid problem except using directives could discussedif problem could solved next release better solved problem using setinterval updating audio time lazy avoid problem using vmodelbut need know data updates real time need use settimeout input event cumbersome elegant", "d": "7/2017"}, {"body": "description clear saying scrolltype together queue stops working altogether ie nothing updates anymore use promise whenever available microtask queue gets flushed earlier timer queue ideally want fallback uiwebview ios gt tricky part reliable way detect environment empty hack seems work cases never run case described please try provide reproduction steps answer question yes", "d": "7/2017"}, {"body": "answer yes prepared demo tests time everything seems right realized misunderstandingunlike time removed library used think might libraries indirectly cause problem team leader found removed project solve problem one conditions decides whether use native mobile phone testers tested undefined rewritten requires promise polyfill browser carelessness nt keep looking reason great sorry taken valuable time thank reply", "d": "7/2017"}, {"body": "cool good know maybe file issue babel regarding polyfill behavior", "d": "7/2017"}, {"body": "meanwhile created simple reproduction always red toggle color expected see console devtools infomation", "d": "7/2017"}, {"body": "similar parent update slot content vdom reference leading vdom patcher updating dom short treat slot content immutable entity modify accordingly eg", "d": "7/2017"}, {"body": "thank simplesmiler much similar react purecomponent references path certain variable object new one made happen tried also worked thank much", "d": "7/2017"}, {"body": "plasmatium correct safer always clone new node internal helper likely expose future versions", "d": "7/2017"}, {"body": "iterating object see documentation cf", "d": "7/2017"}, {"body": "hi modified observed variable trigger rerender add new member modify variable invoke setter vue watch add new member would invoked getter related document could found add new members observed object observed object member new members would add observer automatically modified would triggered rerender assign new value find member changed rerender triggered triggered watcher next tick means code line executed rerender may try code find rerender triggered modified variable watch responsible add new member kind modified", "d": "7/2017"}, {"body": "see", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "pass argument filter please read docs", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "solve issue", "d": "7/2017"}, {"body": "please follow issue reporting guiddlines issue reported vetur", "d": "7/2017"}, {"body": "vue reusing elements conditions may need add div like vue click click cancel ref", "d": "7/2017"}, {"body": "closing jkzing right", "d": "7/2017"}, {"body": "schema", "d": "7/2017"}, {"body": "prsth version fiddler vue seems ok env amp steps update latest version works well anyone else could help check", "d": "7/2017"}, {"body": "reproduce either safari either way like safari issue rather related vue anyway", "d": "7/2017"}, {"body": "things start contain js expressions others like contain text like html attributes intended make things consistent", "d": "7/2017"}, {"body": "thank clarification", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "reserved attributes little value changing imo", "d": "7/2017"}, {"body": "thank answer see", "d": "7/2017"}, {"body": "doubly confusing vue seems remove ref attribute rendering", "d": "9/2018"}, {"body": "cases expose api", "d": "7/2017"}, {"body": "sure find issue app feel like app pretty ugly create many watchers instead one object watcher thanks taking time look", "d": "7/2017"}, {"body": "create generic userland helper exposes api want implementing core would complex due arbitrary depth objects", "d": "7/2017"}, {"body": "specifically used avoid ambiguous use scoped slot vs props agree bit verbose imo necessary ensure always instantly notice scoped slot read code later", "d": "7/2017"}, {"body": "something like feel api verbose", "d": "7/2017"}, {"body": "yep think shortcuts like props javascript simple documentation really emits suggest simple suggest event must bound emits suggest true props style emits suggest required true argument documentation amp validation emit emits suggest required true args name term type string required false default name callback type function required true", "d": "7/2017"}, {"body": "could also offer shortcut describe", "d": "7/2017"}, {"body": "thoughts ping posva chrisvfritz defcc linusborg", "d": "7/2017"}, {"body": "thinking thing", "d": "7/2017"}, {"body": "actually pass function prop event handler easier check whether exists case declare prop instead use", "d": "7/2017"}, {"body": "tend agree fnlctrl already passing callbacks props adding enw api increase api surface code size fo library little gain recently discussed api added unless feature sufficient use large group people ca nt implented currently available options reasonable effort think feature request falls category useful useful enough similar thing achieved", "d": "7/2017"}, {"body": "guess problem really want target request standardised documented way describe events component emits moment one rely component authors either describe events code comments external documentation often find scanning source code components figure events consume another benefit documentation generators could pull information terms functionality priority mentioned fnlctrl alternative ways pass callbacks wanted point useful case emitter definition selfsatisfaction", "d": "7/2017"}, {"body": "whole point events decoupled nt care whether listener many listeners documentation seems whole different issue nt think responsibility api yes nice somewhat selfdocumenting code adding api code self documenting seems wrong approach really care events usage components probably document regardless users nt really care would nt use api even exists", "d": "7/2017"}, {"body": "agree long nt add much value documentation purposes worth thanks help thoughts topic", "d": "7/2017"}, {"body": "would make case far documentation making better software enforcing notifying type violation occurs catching errors happen type checking systems check input also check output c java typescript say vue wants provide type checking props makes sense type check emitted events input output component type check neither", "d": "10/2018"}, {"body": "sorry fault", "d": "7/2017"}, {"body": "unfortunately flip animations entirely css transition driven would difficult provide js driven api behavior would also likely bloat codebase future may split transition system standalone packages add optin features", "d": "9/2017"}, {"body": "however callback moment scenarios like recalculating scrollbar eg final callback would really handy", "d": "9/2018"}, {"body": "sorry still valid repro need extract problematic code think make runnable jsfiddle otherwise see issue seen", "d": "7/2017"}, {"body": "available vue vue option", "d": "7/2017"}, {"body": "nt affect results", "d": "7/2017"}, {"body": "ah think finally understand problem missing documented porovide actually runnable reproduction problem happy new working version", "d": "7/2017"}, {"body": "thank add key every element use directive velse work", "d": "7/2017"}, {"body": "\u7248\u672c\u592a\u65e7 \u91cd\u73b0\u6253\u4e0d\u5f00 debug", "d": "7/2017"}, {"body": "\u8bf7\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u8fd0\u884c\u7684repro", "d": "7/2017"}, {"body": "\u4ee5\u540e repro link", "d": "7/2017"}, {"body": "yes maybe could check context via bot check try", "d": "7/2017"}, {"body": "ok sorry first time use", "d": "7/2017"}, {"body": "tried add debug info imgsrc amazing el nt match use vif change velse result rightdoes involve component reuse use vif company velse", "d": "7/2017"}, {"body": "element reused rerender process exactly one dom element directive bind hook call one time look sure expected add keys work around", "d": "7/2017"}, {"body": "valid reproduction ca nt run please respect maintainers time provide something actually debugged", "d": "7/2017"}, {"body": "bleekbless see component fiddle", "d": "7/2017"}, {"body": "know loading times", "d": "7/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue especially adding repro thanks", "d": "7/2017"}, {"body": "likely problem device powerful enough already lags computer imagine opening phone vue even binding anything removing seems yield result unfortunately nothing manage provide minimal repro much html even take look happily take look otherwise probably related amount html using", "d": "7/2017"}, {"body": "remove vue initialization page loaded fine works iphone ios iphone ios nt nt think related device works even ios maybe somehow related vue creates virtual dom", "d": "7/2017"}, {"body": "may straw broke camel back", "d": "7/2017"}, {"body": "page contains extremely large amount markup mount vue entire page mount part need interactivity", "d": "7/2017"}, {"body": "tried mount need interactivity stuck dividable parts example list products quite complex markup product around lines html need interactivity", "d": "7/2017"}, {"body": "would huge breaking change ca nt happen probably wont happen dont think problem actually exists say found always need declare variables keeping vue instance calling subobjects specificaly subobjects referring experience arrow functions solve problems nicely", "d": "7/2017"}, {"body": "nt agree always need declare variables keeping vue instance always need declare variables maybe need lambda linusborg said would huge breaking change", "d": "7/2017"}, {"body": "special es directly associated scope lives would correct say directly associated execution context libook would easier us help provided examples need assign variable within vue instance variable needed within example provided javascript methods thisisamethod const vm vmaproptie value javascript methods thisisamethod thisaproptie value places trip async callbacks array methods like map etc usually get around using arrow functions binding function explicitly set value might help", "d": "7/2017"}, {"body": "use manipulate component instances using instances classes using new keyword good old functions passing argument would make sense functional oriented approach reuse functions well maybe missing libook", "d": "7/2017"}, {"body": "would great someone could provide example passing argument would advantageous current approach using thanks", "d": "7/2017"}, {"body": "ca nt done due breaking change easily implement", "d": "7/2017"}, {"body": "thank help yes example good enough use arrow function time arrow function replacement function always use functions names make huge complicated programs simple clear sometimes use objects maybe programs heavy yes heavy dashboard complicated features well idea completely break whole design vue may bad idea", "d": "7/2017"}, {"body": "also facing issue workaround", "d": "7/2017"}, {"body": "expected behavior controls outer transition nothing trigger hooks inner transition inner transition constant child never toggled trigger regardless using", "d": "7/2017"}, {"body": "patrickhousley hello experience angular please try describe exactly module example usecase", "d": "7/2017"}, {"body": "imo framework like vuereact idea trying think almost everything way prefer composite components rather", "d": "7/2017"}, {"body": "jkzing looking would agree think really looking could handled honestly really want way cleanly split app pieces router already component level routes still loaded statically making lazy loading large chunks app little problematic", "d": "7/2017"}, {"body": "patrickhousley take look vue async components vuerouter lazy loading vuex async modules merged yet ssr pwa results handy mechanism code splitting high performance know lot gets really easy use get practice", "d": "7/2017"}, {"body": "guess related vue rendering mechanism instead clearly see even put consolelog change value vue instance already changed", "d": "7/2017"}, {"body": "made temporary fix wrapping content getposition delay solves problem somehow see remove animationmove class problem disapears exemplo test variable happens", "d": "7/2017"}, {"body": "suppose nt like little digging accessing cause rerender rendering function remove class fired class added try find way get fixed", "d": "7/2017"}, {"body": "btw try get work around wrap better idea", "d": "7/2017"}, {"body": "closing dup", "d": "8/2017"}, {"body": "comments necessary actually make things consistent blake pointed also use refs instead btw", "d": "7/2017"}, {"body": "thanks opening issue adding option vue constructor mount automatically want control mounts remove property call result way run checks mounting", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "usage questions please use", "d": "7/2017"}, {"body": "valid repro part project like question bug report please either reduce scope minimal repro ask via channels instead", "d": "7/2017"}, {"body": "trick data empty component mounted get asynchronously need additional guard", "d": "7/2017"}, {"body": "shortand actual directive part vuetemplate processed compile time runtime lazy load recommend making custom component like need help please ask forum stack overflow gitter prefer gitter always someone online willing help", "d": "7/2017"}, {"body": "nickmessing suggested use component instead custom directive", "d": "7/2017"}, {"body": "use deep true watcher", "d": "7/2017"}, {"body": "jounqin thanks much", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "7/2017"}, {"body": "guess really want", "d": "7/2017"}, {"body": "knowledge behaviour ca nt access computed properties props", "d": "7/2017"}, {"body": "mixins resolved instance created creation props resolved computed properties much often computed properties rely props rather way around behavior going change changing would breaking affected whether propscomputed defined mixins use case nt understand need prop default value use value directly", "d": "7/2017"}, {"body": "thanks quick response explanation makes sense reason noticed issue use mixin glad see behavior specific mixins jsfiddle example minimal example issue real use cases calendar control locale date properties default values involve logic would convenient locate mixin create components rely similar logic workaround simple enough component use computed property defaults mixin computation rather expecting via prop default key documentation nt cover limitation prop default see send pr enhance section", "d": "7/2017"}, {"body": "create pr chinese version description wish suggestion", "d": "7/2017"}, {"body": "feel like rather use original way understandable string one", "d": "7/2017"}, {"body": "dsonet opinion function original way u meant better data need transform string like getter alias javascript component computed breadcrumb rootviewbreadcrumblist class demo extends vue get availablebreadcrumb return rootviewbreadcrumblistfilter breadcrumb gt breadcrumbstatus clear also u better", "d": "7/2017"}, {"body": "rather prefer computed properties would get context argument could nt add magic makes shorter", "d": "7/2017"}, {"body": "like way proposed nick think added little change string syntax much magic though however trying create aliases could achieved plugin transforms computed properties take account new alias property still go nick syntax instead string one though", "d": "7/2017"}, {"body": "like nickmessing suggestion also concerning makes harder infer types statically deriving property using string path", "d": "7/2017"}, {"body": "like nickmessing idea separate issuepr also need accompanying typing updates ideally merged pending ts typing pr going implement string shorthands obvious disadvantages strings syntax highlighting auto completion type inference error messages", "d": "7/2017"}, {"body": "actually able achieve nickmessing proposed see", "d": "7/2017"}, {"body": "javoski work nickmessing nice job ur good way minimal magic string computed like watches alias mean feature way sad wish u think app bigger data really need short alias like watches option maybe use setter use vuex root data enough cases user nt need know vuex concept", "d": "7/2017"}, {"body": "\u5148\u8bf4\u4e0b\u6211\u7528 vue \u5927\u90e8\u5206\u5f00\u53d1 vue \u7684\u65f6\u5019\u6211\u662f\u4e0d\u4f7f\u7528 vuex \u56e0\u4e3a\u6211\u89c9\u5f97\u5176\u5b9e flux \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u628a\u9700\u8981\u5168\u5c40\u5904\u7406\u7684\u6570\u636e\u653e\u5230 \u7684 javascript import data store new vue data \u6240\u4ee5\u8fd9\u91cc data \u6ca1\u6709\u7528 function \u7684\u8bdd\u5185\u5bb9\u5927\u6982\u8fd9\u6837 javascript import storea storea import storeb storeb export default storea storeb storeajs export default list active storebjs export default list \u5728\u5b50\u7ec4\u4ef6\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u662f\u6700\u5f00\u59cb\u63d0\u5230\u7684\u65b9\u5f0f \u867d\u7136\u7edf\u4e00\u8bbe\u7f6e\u4e00\u4e2a getter setter \u6211\u89c9\u7684 \u5bf9\u4e8e computed \u7684\u610f\u4e49\u5c31\u548c \u91cc\u7684\u89e3\u6784\u4e00\u6837 syntax highlighting auto completion type inference error messages \u4f46\u6b63\u5982 alias \u53ea\u662f\u4f5c\u4e3a\u4e00\u4e2a \u5e76\u4e0d\u662f \u6b63\u5982 \u4f55\u4e0d\u8ba9\u6709\u4f7f\u7528\u573a\u666f\u7684\u4eba\u66f4\u723d\u5462 \u6700\u540e\u5e0c\u671b vue \u8d8a\u6765\u8d8a\u597d\u7528", "d": "7/2017"}, {"body": "working according tests anyway really want feature write plugin may tested function parsepath", "d": "7/2017"}, {"body": "javoski work", "d": "7/2017"}, {"body": "would inconsistent removed would different number children different positions render please provide reproduction filing issues like difficult understand context furthermore sure need go deep dom api could use api many features", "d": "6/2017"}, {"body": "thanks reporting nt happening indeed nt dig workaround moment specifying transitiongroup element", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "vuejs", "d": "7/2017"}, {"body": "\u8fd9\u4e2a\u95ee\u9898\u89e3\u51b3\u4e86\u5417", "d": "7/2017"}, {"body": "reject issues nonenglish language", "d": "7/2017"}, {"body": "yes make simple solution add command method like", "d": "7/2017"}, {"body": "xavescor sorry poor english still think chinese necessary", "d": "7/2017"}, {"body": "problem english poor", "d": "7/2017"}, {"body": "\u7167\u4f60\u8fd9\u4e48\u5199\u8fd8\u662f\u6ca1\u7528\u554a", "d": "9/2018"}, {"body": "think constantness variable would best conveyed defining data uppercase instead expanding api performance optimizations would allow realized using reactive getset", "d": "6/2017"}, {"body": "property define instance available template achieve desired result simple hook", "d": "6/2017"}, {"body": "would work imo still clear explicit way declaring uppercase could used coding style allows", "d": "6/2017"}, {"body": "proposed syntax shorter showed generally nt need nonreactive data template often think bit cleanness justifies new api try keep api slim possible new api need benefit beyond cosmetics imho", "d": "6/2017"}, {"body": "hm reasoning quote think better explicitly define data strcuture code component selfexplanatory feature clearly based reasoning need benefit beyond cosmetics think feature would useful addition api use right created simple plugin named vueconstants", "d": "6/2017"}, {"body": "also using create disadvantage already use constantdeclarations buried code go concept explicitly define data structures wrong way also write example object someoptions created every instance component memory cheap today still means wasting resources course pull declaring module local constant requires even code still think vue make live easier requiring unnecessary boilerplate code nt find optimal", "d": "6/2017"}, {"body": "thanks creating plugin nt want bloat api add code size vue features already achieved unless benefits worth cost pass also demonstrated achieved user land anyone wants syntax quite subjective personally even keep constants component different file js import foo constant export default created use foo need constants need add components way keep one place well use javascript", "d": "6/2017"}, {"body": "hm reasoning quote think better explicitly define data strcuture code component selfexplanatory feature clearly based reasoning need benefit beyond cosmetics still seem misunderstanding argument argued data used template initialized compoent never template current issue arguing component vs template arguing introducing new api component two different arguments wo nt mix think feature would useful addition api use right created simple plugin named vueconstants nt doubt useful well people surely fully respect however maintainers judge wether useful enough sufficiently large percentage users justify introduction codebase doubt judging personal experience kind questions answer day day forum discord places team members might agree issue still open discussion giving opinon also using create disadvantage already use constantdeclarations buried code go concept explicitly define data structures wrong way agree certain degree doubting use case constants prevalent enough warrant new api argument useful sufficiently useful compared solutions possible current api justify adding another api documented explained tested argued blog post use simple rules could possibly require breaking change future versions every new api introcuces bit technical debt adding one good use case case yes introducing constants created clean simply doubt required often enough justify new api argue accept tradeoff using instances required people rather want api use plugin publish plugins posva right declaring outside component prevent reinialization would reactive share across compoents specifically talking using data templates nt reactive would exist instance properties form", "d": "6/2017"}, {"body": "posva right declaring outside component prevent reinialization would reactive share across compoents specifically talking using data templates nt reactive would exist instance properties form imo nt need exist really want use thing use computed property well think also agree enough add code new api vue", "d": "6/2017"}, {"body": "discussion makes clear would fit better apis would promote standard way things instead people use data computed properties code created etc constant data important part every codebase still think vue support instead promoting various less readable idioms", "d": "6/2017"}, {"body": "personal opinion people think complicating things real benefit write javascript reality must really careful incrementing size vue new features adding property subjective choice possible userland plugin prefer leave way thanks suggestion thought", "d": "6/2017"}, {"body": "reasoning adding feature well explained trivial write plugin purpose thought add comment regarding general philosophy new features vue stage already decently sized api surface say bigger wanted opinion size lib grown since release really try keep api surface size small general take somewhat conservative stance new features proposed api value subjective cosmetic stylistic pass proposed api functionality cleanly implemented userland without hacks pass unless strongly needed significant majority user base ie seen raiseddiscussed multiple times proposed api added value justify added code size complexity maintenance cost pass example requires significant chunk code internal changes deal niche use case need think twice rule nt affect fixes correctness though cc vuejscollaborators", "d": "7/2017"}, {"body": "principle totally agree quite subjective considered cosmetic stylistic case consider quite fundamental especially considering vue seems intend promote certain coding styles linusborg wrote another issue constant declarations part every modern programming language using instead mutable data often possible considered fundamental modern programming creating nonconstant data via data computed properties nonobvious initialisation code sensible solution problem using plugins often possible also possible lots things part vue api talking features people need features single right implementation exits like vuex routing etc yes plugin better option everybody need constant fields somewhere code also quite straight forward needs lines implement wo nt require significant chunk code using plugin always requires additional work also need know plugin exists", "d": "7/2017"}, {"body": "many things solve without need vue internals created hook creating plugin feature needs integrated core however could documented please feel free create issue pr", "d": "7/2017"}, {"body": "could move issue vuejsvuejsorg repository thanks", "d": "6/2017"}, {"body": "simple copy paste fine", "d": "6/2017"}, {"body": "sure", "d": "6/2017"}, {"body": "done", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "makes think caused vue fri jun pm wangbagang notifications githubcom wrote receiving subscribed thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "props readonly modify instead emit event update vue props readonly use ps suggest primitive props string bool number", "d": "6/2017"}, {"body": "ah ok understand get second point vuejs way handling html form component easiest way reason pass object prop form input work property object obviously causing sort issues", "d": "6/2017"}, {"body": "read input components guess looking", "d": "6/2017"}, {"body": "replace method", "d": "6/2017"}, {"body": "yes issue jsfiddle nt know code uses though nt work safari working jsfiddle trouble trivial examples versus real code still defect", "d": "6/2017"}, {"body": "intentional filters pure functions dependent context need use computed property method eg", "d": "6/2017"}, {"body": "take parameter filter function also think better support context take advantage style example code like clearer simpler", "d": "7/2017"}, {"body": "think encountered case would nice context filter creating app core module projection real coordinate space screen objects space represented vue components though filters would trick props given real unit like meter compute filtered value need values viewport dimensions previously generated scale value understand use methods actually using em wondering options case", "d": "4/2018"}, {"body": "believe use cases need access filter example ssr project implementing filter need create different translate instances every request different languages access different instance via server workaround change people prefer filter also implement hacky way overwrite method however something slower filter related source codes", "d": "4/2018"}, {"body": "absolutely convinced filters must way access context question core team going", "d": "4/2018"}, {"body": "yes agree option use vue context filter similar child components eg able access parent component nt see reason filters pure functions pipe syntax looks better readable method calling eg number formatting need access locale set parent component vs", "d": "8/2018"}, {"body": "also agree component context filters point providing percomponent filters opposed global filters point able access component component filter able access component global filter", "d": "9/2018"}, {"body": "also agree component context filters point providing percomponent filters opposed global filters actually different thirdparty components may use different filters name need isolation prevent collisions", "d": "9/2018"}, {"body": "absolutely convinced filters must way access context question core team going sorry opinion changed filters access context need context use method", "d": "9/2018"}, {"body": "cited populated component rendered reactive think use dynamical referring components try use", "d": "7/2017"}, {"body": "might something case change populated initially unexpected", "d": "7/2017"}, {"body": "actually call function generate string attribute full reactive support although somehow difficult even possible change child component add new data parent event child tell parent change although may pollute code", "d": "7/2017"}, {"body": "\u6d89\u53ca\u5177\u4f53\u5e93\u7684\u95ee\u9898\u8bf7\u4e0d\u8981\u968f\u4fbf\u6765\u8fd9\u91cc\u5f00", "d": "6/2017"}, {"body": "\u6709\u89e3\u51b3\u7684\u65b9\u6848\u6ca1", "d": "7/2017"}, {"body": "thanks franckfreiburger try reproduce issue mac windows ok please provide information mean reload page", "d": "7/2017"}, {"body": "windows node tested latest google chrome amp firefox cloning demo modified add tag run first time page loaded issue happens issue happens page reload using google dev tools pause script execution issue markup dev tools elements tab foobar continue script execution markup become foobar data network tab seems correct initial http get request contains foobar note issue happens instead", "d": "7/2017"}, {"body": "thanks got trying look", "d": "7/2017"}, {"body": "franckfreiburger seems bug according specification single newline may placed immediately start tag pre textarea elements element contents intended start newline two consecutive newlines thus need included author line break immediately following pre tag ignored vue html compiler seems try fix", "d": "7/2017"}, {"body": "need component use constructor position rerenders vue reuse existing instance", "d": "6/2017"}, {"body": "ops forgot sorry", "d": "6/2017"}, {"body": "see", "d": "6/2017"}, {"body": "seems dom attribute element one blamed case needs deeper investigation", "d": "6/2017"}, {"body": "wait passing vnode prop component assignment would make whole vnode object reactive something like jsx hellovue childvue slotsdefault", "d": "6/2017"}, {"body": "jkzing thank reply mean different passing vnode props slots try tomorrow thank suggestion fine different vs simple", "d": "6/2017"}, {"body": "jkzing said use slots close still feel bug feel free open", "d": "6/2017"}, {"body": "chairuosen sure could say making vnode object reactively behavior would expectable", "d": "6/2017"}, {"body": "znck know solution avoid bug nt know reason nt know works fine also think usage code nt weird often pass vnode props react still think bug reopen button page lol could please reopen issue thank", "d": "6/2017"}, {"body": "chairuosen actually passing vnode prop made happen assigning property component working react simple react would make object reactive reflect changes", "d": "6/2017"}, {"body": "jkzing yeah guess blackbox view ca nt explain case", "d": "6/2017"}, {"body": "chairuosen case using reactive", "d": "6/2017"}, {"body": "jkzing using slot using slot vnode prop case case", "d": "6/2017"}, {"body": "observation nt know happening jsx attribute infinite look attributes hidden html causing rerender", "d": "6/2017"}, {"body": "fyi feature dropped time bug", "d": "6/2017"}, {"body": "sure preferred think could help situations although using still make arrays disposing components destroy array destroy components inside may result empty arrays take look example pay attention console output", "d": "7/2017"}, {"body": "thanks lot information demo problem bit deeper string refs fine normally use asis cases callback refs far powerful especially cases use templates let say develop kind extension library vue lack callback refs may really show stopper facebookreact switched string refs callback ref moreover vue possible use refs templates functional components would require callback refs react possible cases nonfunctional component may possible simulate behavior callback refs using unique generated ref names additional logic certain lifecycle methods would really ugly cases slow powerful feature allow ref callback would open vue really interessting new possibilites", "d": "7/2017"}, {"body": "changed mind regarding suggested signature callback function think would better make callback signature somehow compatible react make easy wrapper whatsoever libraries provide something could used react vue instead would suggest means myrefcallback either called rendering removing react second argument ref callbacks first argument would behave exactly like react", "d": "2/2018"}, {"body": "also interested vue implementing callback refs much powerful opinion situation workaround resorted storing reference whose component instance want ref delegating get ref later time unfortunately way knowing instance createdmounted undefined pulling instance instead relying push framework", "d": "6/2018"}, {"body": "frankly speaking nt think good idea function allows crazy side effect stuff moreover create internal state using closures recreate internal state time render function called render function functional components called together parent render function eventually may performance issues", "d": "7/2018"}, {"body": "problem lies first time element nt exist takes account additions data property reuses element ignoring everything add check vnode modify work vue prevent unnecessary renders nt think support rerendering pretty advanced stuff users wont adding layer observation slow everybody share team", "d": "6/2017"}, {"body": "big problem checks though probably would done something completely crazy nt mention sure use thanks sure keep open leave pleasure nothing comes", "d": "6/2017"}, {"body": "slot nodes reused child update parent update vdom diff two nodes identity considered skipped diffing means mutating vnodes passed parent really need make deep clone slot nodes child render function alternatively wrap slot nodes fresh vnodes created directly control dropdown using parent scope property parent template instead", "d": "6/2017"}, {"body": "hmm nt know components like think could use jsx spread props", "d": "6/2017"}, {"body": "us would great wrap inputs label styling ux purposes agree could drop jsx instead templates much easier everyone follow", "d": "6/2017"}, {"body": "austio unfortunately payback templates wait maybe could think way props vue templates", "d": "6/2017"}, {"body": "like feature personally seems break consistency vbind behavior like sometimes still need bind property root element use pair directives getter setter like inside component define anchor using vue", "d": "6/2017"}, {"body": "jkzing looks awesome looks like basic spread potential problems like would define", "d": "6/2017"}, {"body": "ca nt means keep modifiers like runtime part vuetemplatecompiler atm", "d": "6/2017"}, {"body": "nickmessing looks like basic spread thing talking bring something like spread template users von shortland nt means vbind", "d": "6/2017"}, {"body": "jkzing link description lot bindings", "d": "6/2017"}, {"body": "nickmessing um bindings another topic imo like event bubbling", "d": "6/2017"}, {"body": "jkzing whole concept afaik make properties go certain element component", "d": "6/2017"}, {"body": "nickmessing ca nt sure original proposal nt think event listener considered", "d": "6/2017"}, {"body": "jkzing probably considering common example gt different props want get yout inside custom component without ton code", "d": "6/2017"}, {"body": "personally use filter exclude props nt want apply way apply multiple props input indeed vexpose might useful wrapper components inputs specify html props cane reduced filteredprops might computed property", "d": "6/2017"}, {"body": "cristijora using problem solution excessive properties added html attributes would great could filter properties accepted component dynamic nt know props filter computed property although possible extract use", "d": "6/2017"}, {"body": "really feasible directive", "d": "6/2017"}, {"body": "posva nt think work directive per se part vue template engine something like spread internally event propagation", "d": "6/2017"}, {"body": "posva userbuilt directive nt think might using wrong language mean special attribute", "d": "6/2017"}, {"body": "chrisvfritz thoughts api would used specifying expose add child could see similar use provideinject concept", "d": "6/2017"}, {"body": "austio might understanding question provide thoughts api original post", "d": "6/2017"}, {"body": "hey chris meant additional thoughts using similar provide inject declare exposable parent using child", "d": "6/2017"}, {"body": "ah see sure need information already passed via props slots even private properties parent accessed though think best avoid pattern austio particular use case thinking", "d": "6/2017"}, {"body": "chrisvfritz would work render functions think maybe would better provide option disable autoinheritance attributes root node expose attributes example naming tbd use vbind add wherever like much like already showed would added benefit working practically identical jsxrender functions", "d": "6/2017"}, {"body": "linusborg like way think way much intuitive sidenote think api place next major version vue could even remove attribute autoinheritance altogether crosscomponent communication could remain explicit sides", "d": "6/2017"}, {"body": "would possible depreciate remove behaviour yes worth possibly required changes many components libs etc decided discussed community especially ui collection authors prob posed feature information already available functional components via feature would give basically identical functionality instance components", "d": "6/2017"}, {"body": "yes exactly main purpose mind make work simpler ui component authors internal currently lot cases something like necessary new property could shorten though suppose still nice way also exposing events maybe empty directive could forward event listeners parent element end multiple concerns want bundle might back something like turned broader discussion simplify building ui components rather specific feature request relabel issue", "d": "6/2017"}, {"body": "late topic thoughts well current solution amp disadvantages first already use love feature powerful example bootstrapvue internal link component gets used everywhere buttons navs dropdown lists etc component pivots becoming native anchor vs router link based vs amp presence quite lot properties conditionally pass components solution put props mixin use computed object works great still lot overhead adding mixin components using link component possibilities using personally like concept maybe could work like default slot named slots use modifiers access named attribute slots default attribute slot would always pass attributes component change named targets could specified component perhaps something like inside event proxying nt lot add except amazingly powerful modifier solved lot problems seems largely unknown vue devs though see good amount ui lib issues get solved exposing devs feature placed pr website add docs search support site potentially optimized google search", "d": "6/2017"}, {"body": "coming argument api surface another issue must repeat fan idea introduces another way things work nt work jsx without also implementing something special etc one thing respect react folks commitment slim api using language features much possible spirit reusing pattern already props attributes seems much better introducing another abstraction", "d": "6/2017"}, {"body": "ahh see saying like currently available would addition instead", "d": "6/2017"}, {"body": "rereading comments tracking", "d": "6/2017"}, {"body": "yes would addition also would need option turn current default behaviour applying attributes root element like html export default applycomponentattrstoroot false defaults true name tbd obviously data options stuff could become default setting vue decide resulting breaking change", "d": "6/2017"}, {"body": "linusborg thoughts dealing events side things follow strategy supposed could also add property might look like perhaps could accept object similar one issue foresee events since works slightly differently components elements also nt know want suppose available modifier might obsolete", "d": "6/2017"}, {"body": "also regarding option perhaps would good name set could disable automatically applied attributes event forwarding might also nice able disable entire application via well single component", "d": "6/2017"}, {"body": "recently similar idea also avaliable functional components via would end sounds fine also asking object syntax like used would fit right unsure native modifier make work component events native listeners api would end much complicated use questionable since native event listener applied root element would still catch desired event bubbling might mnot necessary assign specific element template", "d": "6/2017"}, {"body": "general say lowlevel component libs render functions preferred templates getting awkward work agree following would valuable disabling default behavior auto applying bindings found props attributes root element related problem affect bindings well exposing easier way inherit external bindings component onto inner element nt necessarily root ideally consistency templates render functions", "d": "7/2017"}, {"body": "ia kie like vue simple tools", "d": "7/2017"}, {"body": "want say pr excellent", "d": "7/2017"}, {"body": "releases note combining allows us simplify component like seems nice quite true since kind components designed work vmodel far know vmodel wrapping component working box example forward vmodel wrapping component onto input example simplest way found maybe functional component working along template would straightforward", "d": "7/2017"}, {"body": "kind components designed work vmodel far know vmodel wrapping component working box would think vmodel syntax sugar prop event listener attr props thus easily passed suppose thing would require knowledge child options would child changed defaults true would possible read depending circumstances", "d": "7/2017"}, {"body": "sure syntaxic sugar mean could confusing read combining allows us simplify component like actually based example ca nt pass listeners directly achieve control eg use von input emitinput eventtargetvalue anyways pr valuable good job", "d": "7/2017"}, {"body": "alexandrebonaventure works slightly differently components elements dom events provide event object callbacks component events provide value directly result work bound value dom event object think correct would desirable work sure best place solve would ideas maybe nonenumerable property could added eg help detect uses cases object passed listener could wrapped one downside throwing away data someone wants access example luck however modifiers supported object syntax could fix making disable automatic wrapping behavior linusborg thoughts feasibility edge cases missing", "d": "7/2017"}, {"body": "oh see referring vmodel rral form elements thinking components cantshouldnt use props anyway without pr advanced apps rather uncommon use though achievable", "d": "7/2017"}, {"body": "linusborg want make sure page given component template would nt expect code work", "d": "7/2017"}, {"body": "would expect work way understood alexandre referring vmodel element component eventually works mutating local state", "d": "7/2017"}, {"body": "trying say chrisvfritz explained latter post english native language sorry", "d": "7/2017"}, {"body": "linusborg problem latest release still considered antipattern triggers warning mutating state extremely useful working value property something string take example combo component trying use enums imported library values select options vue key export default props items type object required true value example one lists use items parent use combo component trying make work days still getting really frustrated problem eventtargetvalue always string evaluated like", "d": "7/2017"}, {"body": "linusborg alexandrebonaventure robertbcolton opened issue focus future discussion problem", "d": "7/2017"}, {"body": "reproduction link obviously reproducing anything ssr jsfiddle", "d": "6/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "6/2017"}, {"body": "created branch repo reproduction code steps reproduce production mode open compare server browser consoles reproduction code component", "d": "6/2017"}, {"body": "sorry nt notice repo link also attached issue thought code services like jsfiddle permitted", "d": "6/2017"}, {"body": "reactivity ssr", "d": "6/2017"}, {"body": "expected behaviour want better control code executed key filtering inside event callback keep one single handler", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow could add property array elements use bind rows", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hmm sounds like good idea naming really intuitive think", "d": "6/2017"}, {"body": "tried poc works opened pr think need discuss naming anyway", "d": "6/2017"}, {"body": "like well think useful feature", "d": "6/2017"}, {"body": "also agree simple valid use cases", "d": "6/2017"}, {"body": "ah request exact thing almost exact reason would like add extended mouse clicks clickleftnone clicknone", "d": "6/2017"}, {"body": "truefusion expected behaviour mouse clicks", "d": "6/2017"}, {"body": "nickmessing click event plain event modifier trigger key modifier held would leave default click event available complex cases would conflict left middle right combined", "d": "6/2017"}, {"body": "truefusion actually way implemented already solves", "d": "6/2017"}, {"body": "hi cloned repository wrapping code statement incur memory error probably means nothing wrong library code note memory consumption snapshot fairly low work load server code reasonable reclaim memory provide information", "d": "6/2017"}, {"body": "tried use interval ms run server memory used increasing way small number happened production enviroment request almost per day fortuneately found reason made computed function correctly wonder happend way thanks help", "d": "6/2017"}, {"body": "please update code illustrate problem", "d": "6/2017"}, {"body": "alreay updated", "d": "6/2017"}, {"body": "ok reproduced commenting throw new error keep memory low", "d": "6/2017"}, {"body": "reproducible browser js var timer setinterval function const vm new vue computed test function throw erro happened try vmtest catch e", "d": "6/2017"}, {"body": "mon jun pm xltxlm notifications githubcom wrote problem feature solve proposed api look like vuewatch receiving subscribed thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "value treated default already want", "d": "6/2017"}, {"body": "oh nvm yeah validations place honestly though nt think change current behavior value provides somewhat subjective introducing api churn", "d": "6/2017"}, {"body": "saying change default somehow nt think like stated understand somewhat subjective reasons mentioned think look common use cases consider changing default opened issue since noticed pattern repeat practically vue projects quite varying vast vast majority elements write using modes rare exceptions subjectivity also reason like see default configurable would love others pitch issue kept open nt really understand api churn point", "d": "6/2017"}, {"body": "changing default breaking change breaking change subjective reasons nogo fyi create higherorder transition component", "d": "6/2017"}, {"body": "proposing configuration parameter setting default projecttoproject basis exactly reason guess provide set wrapper components guys easily avoid common mistakes future gets us around actually deal mode parameter altogether", "d": "6/2017"}, {"body": "nt think default worth adding config option though hoc solution looks nice imo", "d": "6/2017"}, {"body": "use hook", "d": "6/2017"}, {"body": "jounqin thanks lot", "d": "6/2017"}, {"body": "maybe use vuerouter use pathtoregexp route matching", "d": "6/2017"}, {"body": "thanks lot try still ca nt void string enough", "d": "6/2017"}, {"body": "\u8fd9\u79cd\u505a\u6cd5\u5b9e\u9645\u4e0a\u662f\u8ba9\u5185\u90e8\u7684value\u770b\u8d77\u6765\u50cf\u662f\u53cc\u5411\u7ed1\u5b9a\u7684 understand description please explain", "d": "6/2017"}, {"body": "\u53ef\u80fd modifier", "d": "6/2017"}, {"body": "sure understand problem usually one way binding value listen changes coming eg event checkbox change value gets updated parent inner values consider computed setters", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "think quite difficult express pure templates would suggest using render functions sophisticated use cases like", "d": "7/2017"}, {"body": "ericwangqing thread might interest", "d": "7/2017"}, {"body": "rayrutjes thanks lot", "d": "7/2017"}, {"body": "agree laugharn prefetch resources controllable case would like avoid big scripts like pdfjs pdfjs worker downloaded early", "d": "8/2017"}, {"body": "great thanks", "d": "10/2017"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests stated contributing guidelines thanks", "d": "6/2017"}, {"body": "fyi skip limitation functional components", "d": "6/2017"}, {"body": "something consider improving already roadmap however nt definitive date land", "d": "6/2017"}, {"body": "works syntactic sugar example essentially clearly wo nt work", "d": "6/2017"}, {"body": "seems intended found code background reason", "d": "6/2017"}, {"body": "kingwl jkzing see", "d": "6/2017"}, {"body": "gebilaoxiong found wrong commit delete", "d": "6/2017"}, {"body": "found docs well maybe make clear component section", "d": "6/2017"}, {"body": "welcome submit pr vue docs repo", "d": "6/2017"}, {"body": "asking window document need use vue lifecycle hook case mounted want", "d": "6/2017"}, {"body": "jkzing thank replying check method provided", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow issue jkzing said", "d": "6/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "6/2017"}, {"body": "desever \u611f\u89c9\u662f nodejs \u7684\u4e00\u4e2a bug nodejs webpack \u76f8\u5173\u7684", "d": "6/2017"}, {"body": "hello malinasab thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "thanks reporting open issue vueloader repository well feature would require work repositories like idea semver number", "d": "6/2017"}, {"body": "thanks request since kept backwardscompat old generated code mind making new changes believe working well far essentially change causes runtime incompatible render functions generated older version compiler considered breaking change keep library authors nt recompile libraries avoid broken", "d": "3/2018"}, {"body": "imagine also want make clear interfacing dom directly nogo however well goes development", "d": "6/2017"}, {"body": "use full build vue includes compiler build used services like jsfiddle codepen generates actual errors describe", "d": "6/2017"}, {"body": "hi chooin thanks reporting issue however valid runnable reproduction please provide one", "d": "6/2017"}, {"body": "linusborg webkitkeyframes hash empty", "d": "6/2017"}, {"body": "chooin provide github repo reproduce situation \u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2agithub", "d": "6/2017"}, {"body": "tested vueloader chooin said prefixed version nt scoped style non prefixed closing related vueloader postcss btw unless supporting safari nt need prefix keyframes", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "thanks suggestion nt pass object items props", "d": "6/2017"}, {"body": "really pass object prop like indexvue data return pageinfo totalpage currentpage onpageclick function currentpage pagesize evt consolelog currentpage pagesize evt hope pageinfo ca nt merge default valuebut get component", "d": "6/2017"}, {"body": "ha wanted expression jsx like", "d": "6/2017"}, {"body": "use directly another option situation", "d": "6/2017"}, {"body": "apart fact probably would require breaking change think would make props definition api unnecessarily complicated use computed property", "d": "6/2017"}, {"body": "jkzing linusborg said cn solve problems need type check better pass one one use jsx feature cause good enough effect cost achieving relatively large", "d": "6/2017"}, {"body": "many thanks", "d": "6/2017"}, {"body": "want achieve possible ended looking object looks like take note brackets thanks endoplasmic", "d": "7/2018"}, {"body": "getter", "d": "6/2017"}, {"body": "jounqin thank giving information dispelled doubt changed code got ok kind code confusing debugging maintaining would know ssrcontext ready use even code safe source code optimized like", "d": "6/2017"}, {"body": "happens root component nt easy fix", "d": "6/2017"}, {"body": "use inline plain javascript otherwise", "d": "6/2017"}, {"body": "nickmessing registered filter vuefilter nt want repeat new vue", "d": "6/2017"}, {"body": "according docs vue filters used inside mustache interpolations vbind expressions latter supported since filters primarily designed text transformation purposes complex data transforms directives use computed properties instead considering want pass aditional arguments think filters good way go prefer html import mycoolfilter filtersjs export default computed dosomething mycomputed return mycoolfilter thisdosomething b filters pretty bad design decision imo anywhere simple text processing like", "d": "6/2017"}, {"body": "access filters component like could write", "d": "6/2017"}, {"body": "nirazul thanks", "d": "6/2017"}, {"body": "nirazul filters directives intentionally removed vue intense discussions sorry say wo nt bring back situation nt changed", "d": "6/2017"}, {"body": "linusborg ok think meant leupom", "d": "6/2017"}, {"body": "oh right thanks", "d": "6/2017"}, {"body": "example using vbind", "d": "2/2018"}, {"body": "alexandretperez expected behaviour vue built virtualdom vue source truth never mutate dom generated vue manually gets overwritten next vue tick", "d": "6/2017"}, {"body": "nickmessing said", "d": "6/2017"}, {"body": "nt think really needed though", "d": "6/2017"}, {"body": "notice example quite right template instead concerning example works developer must always think edge cases receiving object array remember deal unification would let api easier use cases array object would syntax", "d": "6/2017"}, {"body": "useful use indexes objects", "d": "6/2017"}, {"body": "think become little confused using collection value selectec collection array value one want access key object index array one use right unified syntax would inded one use iterate use template collection array variable empty point index object array index beeing populate object syntax make reusable one receive either object array array case value one need remenber index empty arrays empty objects", "d": "6/2017"}, {"body": "unified syntax would inded yes one use value key index iterate use index template collection array index variable empty question happen would rely index object loop really make sense use thought", "d": "6/2017"}, {"body": "syntax exists objects usefull point usefullnes consistence api bugs could arise one forgets index empty try use", "d": "6/2017"}, {"body": "value key index syntax exists objects usefull well wonder well third argument original collection", "d": "6/2017"}, {"body": "case think deprecated future version breaking changes added", "d": "6/2017"}, {"body": "close issue wo nt changed made internal note long list", "d": "7/2017"}, {"body": "present intentionally removed couples logic component hierarchy think arbitrary comp comp communication either user vuex use global event emitter bus creating empty instance docs manually bubbling events possible encourage people use one solutions mentioned instead", "d": "6/2017"}, {"body": "react using render functions regardless fully implementable userland nt need part core", "d": "6/2017"}, {"body": "thanks", "d": "6/2017"}, {"body": "annoying hoc must declare props wrapped components two annoying things props normalized sometime array sometimes string keep reimplementing function every project maybe core somewhere component either object literal work figure kind component dealing branch accordingly get props react get props sent hoc directed wrapped component", "d": "7/2017"}, {"body": "blocka understanding correctly situation facing discussing fyi", "d": "7/2017"}, {"body": "blocka already", "d": "7/2017"}, {"body": "jkzing skimmed discussion nt see directly relevant situation referring apologize advance contrived example see order work props need defined component returned hoc example pretty simple wrappedcomponentprops dealing mixing hoc props wrappedcomponent props things get pretty hairy reasons explained earlier", "d": "7/2017"}, {"body": "peeking around seems undeclared props hangout still little awkward seems work considered stable api", "d": "7/2017"}, {"body": "oh sorry wrong relevant", "d": "7/2017"}, {"body": "", "d": "6/2017"}, {"body": "lose arguments passed get one", "d": "6/2017"}, {"body": "use", "d": "6/2017"}, {"body": "regardless question closing favor forum discussion", "d": "6/2017"}, {"body": "array things passed see according docs instead see", "d": "6/2017"}, {"body": "nt know certainly works js vuecomponent examp template lt input input emit ex event hi gt new vue el app data methods handle event args consolelog event args ouput event istrusted true type input target input currenttarget input eventphase hi", "d": "6/2017"}, {"body": "intentional think better explicitly define data strcuture code component selfexplanatory data mutation preferably happen component code template vmodel create reactive properties dynamially would work vue actually proposed removed reason", "d": "6/2017"}, {"body": "understand intention also creates lots boilerplatecode forms used create data easy run stange behaviour backend sends undefined data removed jsonstringify leads loss reactivity also components create arrayforms forms adddeletebuttons create multiple rows data always require providing datainitializationcode often unnecessary undefined standard value maybe providung least option like using set modifier would give developer choice use", "d": "6/2017"}, {"body": "also bit inconsistent reactivify creation wanted providing vueset wrong exists use vmodel vue really wants enforce silently losing reactivity nt good thing imo case vmodel create code checks existence key first raises error key nt exits", "d": "6/2017"}, {"body": "also bit inconsistent reactivify creation wanted providing vueset wrong situations necessary necessary use behaviour plainly visible code instead abstracted away hidden template utility function providing different integrating hood one mostused features framework former enables users create reactive properties fact really latter accepts behaviour norm hides away want support patterns lead readable maintainable code even means bit boilerplate situations adding proposed behaviour would contribute goal opinion", "d": "6/2017"}, {"body": "least check vmodel nonexisting keys moment often leads invisible loss reactivity point field nt created happen quite easily setting value undefined try evaluate see problem use vue edit data provided rest service uses jsonstringify", "d": "6/2017"}, {"body": "also documentation updated instead due limitations modern javascript abandonment objectobserve vue detect property addition deletion since vue performs gettersetter conversion process instance initialization property must present data object order vue convert make reactive paragraph explaining limitations modern javascript fact intended behaviour", "d": "6/2017"}, {"body": "agree warning would helpful look something equally helpful however concerning example rest api leaves properties like describe elaves props nt bad api design book client api lib take care data normalized job ui add back propertiesdata missing datamodel taken care central place", "d": "6/2017"}, {"body": "writeback course normalized backend still necessary backend needs validation ca nt trust data gets frontend also sometimes useful distinguish null undefined values works vue use code like value undefined jsonstringify omits fields undefined values fact easy way initialize fields undefined receiving backend requires lot boilerplate code", "d": "6/2017"}, {"body": "also sometimes useful distinguish null undefined values agreed somethimes times initialize fields undefined receiving backend requires lot boilerplate code really generally oneliner lot boilerplate would deal objects lot kinds properties", "d": "6/2017"}, {"body": "also nt see frontendcode crucial datamodeling backend writing letting template define fields value via vmodel would less boilerplatey write posting value backend real datamodels live validation anyway nt see necessity vue forcing jumping hoop", "d": "6/2017"}, {"body": "even oneliners become lots boilerplate necessary lots places also dry", "d": "6/2017"}, {"body": "also documentation updated instead due limitations modern javascript abandonment objectobserve vue detect property addition deletion since vue performs gettersetter conversion process instance initialization property must present data object order vue convert make reactive paragraph explaining limitations modern javascript fact intended behaviour mxining two different things pararaph vmodel addition aproperty normal javascript means limitation technically ca nt detect new poperty created matter done developer ca nt make reactive exists choice nt use implementation independent fact detect properties added without make reactive automatically", "d": "6/2017"}, {"body": "also nt see frontendcode crucial datamodeling backend nt see trivial unimportant nt hink either concerns validation integrity predictability always added props missing visiting form could add prop without user anything little clicking input leaving depending concrete implementation would choose would keep mind property could exist exist various places app depending wether user prevously openened form might added could make code amp data much brittle inconsistent compared code would normalize data receives api basically meant earlier better code data integrity cost bit boilerplate necessary", "d": "6/2017"}, {"body": "vmodel always added props missing visiting form could add prop without anything little clicking input nt see problem clearly stated code writing vmodel look declarative point view using vmodel would sufficient also dry couse may argue template output nt contain code changes data vmodel would wrong anyway also always use longform template allowing vue already goes beyond simple template shows things concept assume concept vue pragmatism enforcing certain paradigms otherwise templates models much decoupled reactflux example also problem vmodel simply inherited behaviour described js limitation quoted paragraph docs also applies vmodel vue would detect field addition watched objects vmodel would also create new fields fact already nt makes reactive", "d": "6/2017"}, {"body": "bites times vote least generate warning case encounters case introduce boilerplate form content dynamic eg multiple instances created button example html inputs add new item often happened added new input template forgot add key method least warning would nice property better practice particular use case", "d": "6/2017"}, {"body": "forms like follow structure wherein define js empty set fields like want form allow multiple entries clone empty object still mildly inconvenient remember add field emptyfields object add corresponding input element form least documented code well creating variable called emptyfields conceivably contain form fields empty state linusborg points actually helps write better code however still agree least development warning emitted attempting assign nonreactive property", "d": "6/2017"}, {"body": "still think framework nt dictate code style much let developers decide least submitting warning would improvement otoh least prototyping using vueset would real timesaver would still prefer least ability use global option use example vmodelset activate behavior", "d": "6/2017"}, {"body": "data validation needs done backend malicious user could always post arbitrary data forcing developer specify data structures backend frontend unnecessary dry leads boilerplate useful frontendonly structures general forms frontend displays data posts back typical crud operations moment vue makes unnecessarily cumbersome also prefer use undefined value unspecified values nt work vue json omits fields undefined values use null instead problematic certain situations write code initializes data frontend receiving backend another example arraybased fields entry array creates new subform moment need solution like sirlancelot one instead seeing template specification data instead writing template also create maintain templateobject write createmethod bind method arrayeditcomponent bigger projects code adds without really making everything readable instead looking template see happening also check boilerplate conceptual point view vue template active bind mutations fact used place also js handles undefined fields similar fields value undefined many occasions nt think itt plausible draw quite arbitrary line allowing change datafields create", "d": "6/2017"}, {"body": "case done refactoring backend keys renamed would prefer see warning well key nt exists", "d": "9/2017"}, {"body": "open pull request add warning", "d": "10/2017"}, {"body": "reread whole thread decided going allow create reactive properties nt exist cases one level deep means following work assuming empty object still throw error read property baz undefined reasoning dev experience forms declare nested properties indeed chore silently failing also obviously bad also seen question resetting form data popping many times terms convenience autosetting would simplify resetting empty object consistency even warnings current behavior inconsistent cases dynamic key segment eg already using internally ca nt statically declare property known runtime another case binding array via index also use ensure array updates longerterm concern move proxies detecting property addition would become trivial would fact difficult add property without making reactive code quality framework opinion originally changed behavior bit opinionated data declaration changing back certainly weakens opinion think ok middle ground autoreactivepropertycreation limited onelevel deep declare requirements also still exist rootlevel properties pretty much leaves us objects dedicated form bindings still good practice declare properties also see able omit speed prototyping luckily javascript type systems become quite mature think start leave opinions enforced via optin tools like typescript flow", "d": "10/2017"}, {"body": "also seen question resetting form data popping many times resetting form data came see second code snippet think pretty good solution vue wondering somehow nativesuggested way", "d": "10/2017"}, {"body": "break application fix problem using models represent data entitities customer product using kinds shiny new features classes proxies put simply using classes models property holds data class constructor returns proxy getter setter traps cool getter checks object requested property returns exists otherwise returns property object property defined undefined setter directly sets property since direct manipulation object properties supposed happen initialization however updating started notice weird behavior directly mapping model attributes input fields work correctly longer following behavior user would input something property would get updated intended instead object would get new properties solution digging core discovered vue respects use defined getters setters makes call find exist created another trap specifying setter handful properties like javascript simplified class model constructor attributes thisattributes attributes static getproxyattribute model attribute return modelgetattribute attribute static setproxyattribute model attribute value modelsetattribute attribute value getattribute attribute attribute return attribute setattribute attribute value thisattributes attribute value notice property exception necessary vue work properly conclusion likely elegant solution want encourage everyone enhance solution make better seems work entirely happy", "d": "10/2017"}, {"body": "know done closed wanted say extremely happy functionality available building data centric app maintain blank samples data objects otherwise forms editing dynamically generated simplifies much pain dealing thank open loosening opinions framework opinions tend like without overbearing flexibility listening feedback considering real world usage opt inout ability vue stands thanks", "d": "10/2017"}, {"body": "give one canvas prevent node reused", "d": "6/2017"}, {"body": "nice work add tip vue document", "d": "6/2017"}, {"body": "actually docs", "d": "6/2017"}, {"body": "welcome pr", "d": "6/2017"}, {"body": "would great could directly pr closing since issue chinese doc", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "see", "d": "6/2017"}, {"body": "bug want prevent navigation need click event sample vue compiles template see still properly adds", "d": "6/2017"}, {"body": "thanks sirlancelot", "d": "6/2017"}, {"body": "expected behaviour objects arrays passed reference explained documentation", "d": "6/2017"}, {"body": "sorry", "d": "6/2017"}, {"body": "problem hard feelings better one issue much one tend keep messages short save time", "d": "6/2017"}, {"body": "lot digging seems type command nt trigger input change events eventually realised sendkeys way go sure worked hypothesis probably dynamic compilation templates render functions", "d": "6/2017"}, {"body": "dup", "d": "6/2017"}, {"body": "posva although issue similar difference proposed api one significant issue reopened", "d": "6/2017"}, {"body": "see api different examples one using native events using custom events object syntax miss something keep one issue opened though feel free share thoughts issue", "d": "6/2017"}, {"body": "understanding correctly trying use modifier means want bind property component defined omit far know modifier designed bind property dom instance suppose current behavior correct", "d": "6/2017"}, {"body": "ok perhaps luck worked nt expect work would worth note docs saying using prop modifier binding incompatible components thanks david", "d": "6/2017"}, {"body": "jkzing said modifier meant bind dom properties documented would like know made think would work first place blog post advocating use incorrectly docs modifier page sent", "d": "6/2017"}, {"body": "read docs one thing nt clear target object set property using prop component component nt clear answer decided try found properties set component would seem set component perhaps something like go docs clear future people like bind dom property instead attribute tag component component el target object property set", "d": "6/2017"}, {"body": "sure pr docs welcome tue jun david hewitt notifications githubcom wrote read prop docs one thing nt clear target object set property using prop component component vm component el nt clear answer decided try found properties set component vm would seem set component vm el perhaps something like go docs clear future people like prop bind dom property instead attribute tag component component el target object receive property receiving modified openclose state reply email directly view github mute thread", "d": "6/2017"}, {"body": "thanks see", "d": "6/2017"}, {"body": "well nt possible plain javascript well expected iframe content origin outer inner frame ca nt interact", "d": "6/2017"}, {"body": "linusborg see browser issue electron app issues way implement via vuejs directives", "d": "6/2017"}, {"body": "would rather suggest wrapping iframe small component need help join us forums forumvuejsorg gh issues meant", "d": "6/2017"}, {"body": "hi thanks report explain changes made relate memory leak would helpful", "d": "6/2017"}, {"body": "see commit history global mixin plugin global component plugin tricky part unable find related leak plus leak turn", "d": "6/2017"}, {"body": "global mixins lead memory leaks use externalizing vue mixin registration code called every render vue externalized mixin gets registered careful using also recommend using instead alternatively make plugin autoprevents duplicate registration", "d": "6/2017"}, {"body": "made plugin registering global mixin see autoprevent duplicate registration using", "d": "6/2017"}, {"body": "bug expected behaviour filter create new state change format expected behaviour everytime dependency changes virtualdom whole component rerendered diffed", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "sorry ca nt help without reproduction please try make one also stack trace nonminified build would help", "d": "6/2017"}, {"body": "close switched back rendertotext everything works", "d": "6/2017"}, {"body": "fyi found problem following element problem cause vue trying run class code comment think cause invalid servercachekey items got cache key arent cause show ribbon", "d": "6/2017"}, {"body": "html code like id b type myproducttype value myproductid von click greet vue js code like data myproduct id type text", "d": "8/2017"}, {"body": "browsers nt fire event use case better call function guess also create event trigger form", "d": "6/2017"}, {"body": "posva close mean work safari use vueit worked use jsdom change vuele name know create event onsubmit also check eventmonitoring safari ca nt trigger submit", "d": "6/2017"}, {"body": "wo nt work chrome safari closed related vue misunderstand something", "d": "6/2017"}, {"body": "lazyhero rely event invoking submit method reproduction \u5728 chrome \u4e0b\u62a5\u7684\u662f\u7f3a\u5c11 onsubmit", "d": "6/2017"}, {"body": "posva related vue sure think nt understand reproductionyou open let others try solve chinese \u5728chrome\u4e0b \u6253\u5f00\u63a7\u5236\u53f0 \u8bb0\u4f4f devtoolsconsole \u8fd9\u662f\u6b63\u5e38\u7684\u53cd\u9988 \u6ca1\u6709\u8fdb\u5165onsubmit\u662f\u56e0\u4e3a\u5728\u53d1\u9001post\u524d \u800c\u5728 safari\u4e0b \u662f\u6ca1\u6709\u4efb\u4f55\u53cd\u9988\u7684 posva\u7684\u610f\u601d \u4ed6\u7684\u610f\u601d\u662f \u53ef\u80fd\u662f safari \u53ef\u4ee5\u89c2\u5bdf\u5230 \u4f1a\u53d1\u73b0 \u6709\u8fd9\u4e2a \u6211\u7591\u60d1\u7684\u662f \u4e3a\u4ec0\u4e48\u5728vue\u6e32\u67d3\u4e0b", "d": "6/2017"}, {"body": "yes even tried thing removing vue code put fiddle shared", "d": "6/2017"}, {"body": "crossjs reproduction \u7f3a\u5c11submit\u5bf9\u5e94\u65b9\u6cd5 \u8fd9\u4e2a\u6211\u53bb\u6389\u4e86 \u4e4b\u524d\u7684\u91cd\u73b0\u4ee3\u7801\u5197\u4f59 \u65b9\u6cd5\u7684", "d": "6/2017"}, {"body": "submit submit", "d": "6/2017"}, {"body": "worries definitely confusing", "d": "6/2017"}, {"body": "crossjs \u8fd9\u4e2a\u94fe\u63a5 \u6ca1\u6709\u7528vue", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "crossjs \u662f\u554a \u4f60\u53ea\u8981\u52a0\u4e0a\u4e00\u53e5new vue el \u5305\u8d77\u6765", "d": "6/2017"}, {"body": "crossjs safari\u4e0b\u4f9d\u7136ok", "d": "6/2017"}, {"body": "lazyhero", "d": "6/2017"}, {"body": "crossjs \u591a\u8c22 \u6211\u4e5f\u4f1a\u7422\u78e8\u4e0b \u8f9b\u82e6", "d": "6/2017"}, {"body": "lazyhero", "d": "9/2017"}, {"body": "guarantee element already document use make sure", "d": "6/2017"}, {"body": "vuejs javascript", "d": "6/2017"}, {"body": "yurovant elaborate bit aware afaik coding styles nt matter parser", "d": "6/2017"}, {"body": "hi laraveldeep please consider answer", "d": "6/2017"}, {"body": "vanilla js demo proof", "d": "6/2017"}, {"body": "thanks gotcha learned hard way", "d": "6/2017"}, {"body": "thanks \u0634\u0643\u0631\u0627 lt", "d": "8/2018"}, {"body": "may help also see", "d": "6/2017"}, {"body": "merged", "d": "6/2017"}, {"body": "hm indeed thanks reporting seems introduced nt think intended think regression original intended behaviour would agree", "d": "6/2017"}, {"body": "thanks reporting linusborg actual introduced seems regression fault", "d": "6/2017"}, {"body": "glad found pulling hair happening look updating childobjmsg component also updates someobjmsg parent tt", "d": "6/2017"}, {"body": "darival use warning child component attempts mutate injection binding props imo nt mutate injection react context", "d": "6/2017"}, {"body": "personally considered change feature bug", "d": "6/2017"}, {"body": "rayrutjes injected properties left unreactive pretty much reason op provided inject arbitrary objects inlcuding complicated ones background left untouched need reactivity pass already reactive object best worlds", "d": "6/2017"}, {"body": "linusborg injected array changed even really reactive", "d": "6/2017"}, {"body": "linusborg think makes sense wondering affect existing code base", "d": "6/2017"}, {"body": "kingwl could make pr revert behaviour", "d": "7/2017"}, {"body": "linusborg going try tomorrow", "d": "7/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "think bug", "d": "6/2017"}, {"body": "time open issue question think bug need include proper boiled repro", "d": "6/2017"}, {"body": "thanks ask vue forum", "d": "6/2017"}, {"body": "\u76f8\u5173\u89e3\u7b54\u8bf7\u67e5\u770b vuejs \u4e0d\u652f\u6301 vuejs \u4f7f\u7528\u4e86 \u4e0d\u80fd\u6a21\u62df\u7684 ecmascript vuejs \u652f\u6301\u6240\u6709\u517c\u5bb9 ecmascript", "d": "6/2017"}, {"body": "\u5728 notifications githubcom closed receiving authored thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "always attempt hydrate root node attribute dev mode failed hydrate warning nothing happens worked prod mode assumes markup correct", "d": "6/2017"}, {"body": "sorry reopen answer nt address primary concern thanks responding though happens prod mode vue hydrate app become static point", "d": "6/2017"}, {"body": "bjunc ca nt happen prod mode strips away warnings behavior logic remains exactly works dev work prod", "d": "6/2017"}, {"body": "believe good business case ssr wysiwyg content big reason pursuing ssr seo currently getting valuable usergenerated content ca nt trust works dev want make sure content admin nt brick app saving improper html production despite checks might put place nt want go offtopic better way address seo aspect dynamic content maybe moot topic", "d": "6/2017"}, {"body": "allowing users save arbitrary html worry could potential xss use display usergenerated content vue wo nt attempt diffhydrate anything inside node ca nt lead hydration failures otherwise pure vdombased hydration possibly fail bug vue finally hydration failures prod also cause vue throw away existing dom render afresh wo nt brick app", "d": "6/2017"}, {"body": "well take proactive measures also want reactive measures arbitrary html feel better redundancy checks server client really great hear though think ultimately addresses concern also good hear refresh although would defeat point seo figured catching exception could help us pinpoint pages issues think good knowing nt part diffhydration process thanks backandforth", "d": "6/2017"}, {"body": "ca nt happen prod mode strips away warnings behavior logic remains exactly works dev work prod well actually happen actually seems hard debug", "d": "12/2017"}, {"body": "actually reared head user entered bad markup closing tag wysiwyg caused page render serverside clientside render failed well way catching hydration failure would least give way knowing certain pages failing due user generated content", "d": "12/2017"}, {"body": "bjunc also need ssr seo displaying html wordpress content huge concern well latest issue content inside share code well html passed taking shot dark usecase involving wrapping content inside anchor tag html post edit delete contained anchor tags would get warning good news able work around using outside anchor tag additionally actually able reproduce even break html within vhtml even put nested anchor tags blog post html fine", "d": "3/2018"}, {"body": "curtisbelt nt recall exact markup caused hydration error case hydration issue may simply nesting div block element anchor see stack overflow question proactive workarounds validating wysiwyg probably anyway etc still nt know ca nt get reactive exception thrown hydration fails", "d": "3/2018"}, {"body": "bjunc ah yes know nested block anchor invalid meant highlight broke hydration template html blogposthtml causes invalid html together blogposthtml invalid code put invalid html inside blogposthtml nt break hydration anymore also tried omitting closing tags seemed ok see renders without warning even though violation hope makes sense maybe nt really helping sorry unable break inside vhtml alone thought maybe component html could similar issue html post edit delete however find example breaks vhtml please let know intend monitor topic much possible launch client months", "d": "3/2018"}, {"body": "tried version looks like normal", "d": "6/2017"}, {"body": "thanks reporting beta may contain bugs assure vue work unstable releases may want open ticket side though", "d": "6/2017"}, {"body": "nt", "d": "6/2017"}, {"body": "special toplevel treatment attrs needs nested donnysim pointed", "d": "6/2017"}, {"body": "exact position two toggled trees reused instead recreated want force remount give different keys", "d": "6/2017"}, {"body": "behavior intentional syncing composition often leads awkward ux use case", "d": "6/2017"}, {"body": "example expect type search work like type text", "d": "6/2017"}, {"body": "use case asking want incomposition string show", "d": "6/2017"}, {"body": "nt want incomposition string show using type search want want like type text", "d": "6/2017"}, {"body": "search \u8f93\u5165\u6846\u4f5c\u4e3a text", "d": "6/2017"}, {"body": "ok get", "d": "6/2017"}, {"body": "android problem handle composition events", "d": "8/2017"}, {"body": "stumbled issue handling composition events mvc way seem doable current browser behavior breaker live searchlive autocompletion functionality best way handle make form input element reread every compositionupdate event seems hack works uc browser reason uc update inputs inside forms composition yet gives undefined event data good standard way set upstream handle proper explanation bug nature across browsers docs afraid cross browser solution involve hardcoded hack major browser version", "d": "3/2018"}, {"body": "use", "d": "6/2017"}, {"body": "vueconfigerrorhandler nt work already tested stated docs handle catches errors render runtime error occurs component render passed global vueconfigerrorhandler config function set", "d": "6/2017"}, {"body": "fyi error captured vue always sent", "d": "6/2017"}, {"body": "thanks made work jsfiddle order seems important able make work project using components heavily spa nt work error comes components update post could pinpoint issue", "d": "6/2017"}, {"body": "problem working components", "d": "7/2017"}, {"body": "vueconfigerrorhandler catching errors inside methods run render button throws error call method vueconfigerrorhandler wo nt catch neither windowsonerror", "d": "8/2017"}, {"body": "problem figure", "d": "10/2017"}, {"body": "nt", "d": "10/2017"}, {"body": "use catch errors", "d": "10/2017"}, {"body": "set indeed", "d": "10/2017"}, {"body": "work vue version", "d": "3/2018"}, {"body": "zhaoqize question u find problem", "d": "10/2018"}, {"body": "fyi support prop", "d": "6/2017"}, {"body": "thanks elevate featurerequest general expect consistent behavior dynamic components including able wrap multiple conditionally rendered elements declared explicitly", "d": "6/2017"}, {"body": "already however unlikely happen anytime soon due complexity involved", "d": "6/2017"}, {"body": "good know thanks", "d": "6/2017"}, {"body": "refs guarantee order see", "d": "6/2017"}, {"body": "ssr directives perform vnode data manipulations way access dom nodes dom ever created need modifying", "d": "6/2017"}, {"body": "\u8fd9\u4e2a feature request", "d": "6/2017"}, {"body": "vue bug webpack related question", "d": "6/2017"}, {"body": "dynamic require works suitably img src updated see img browser error dynamic require work say webpack related question thx", "d": "6/2017"}, {"body": "error happens happen vue nt error comes vue vue executing piece code", "d": "6/2017"}, {"body": "\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5b89\u88c5 vue", "d": "6/2017"}, {"body": "sorry \u5176\u5b9e\u6211\u73b0\u5728\u5c31\u662f\u76f4\u63a5\u5b89\u88c5 vue \u611f\u89c9\u4e00\u81f4\u597d\u4e9b \u8fd9\u91cc \u53ef\u4ee5\u63d0\u793a \u65b9\u6cd5 \u4e5f\u8bd5\u8fc7\u53ef\u4ee5\u4e86 vue \u7684 dts \u7531\u4e8e\u6309\u6a21\u5757\u8f93\u51fa\u7684 vue \u7c7b\u4f3c \u6211\u4f7f\u7528\u7684\u662f \u8fd9\u6837\u4e00\u4e2a \u7279\u6b8a \u671f\u5f85\u7684\u573a\u666f \u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u76f8\u5bf9\u8def\u5f84\u7684\u6587\u4ef6", "d": "6/2017"}, {"body": "types alias", "d": "6/2017"}, {"body": "nt think support arbitrary arraylike objects line actual object vs arraylike blurry stick case support array subclasses also since subclassing array feature likely implement reimplement reactivity system proxies", "d": "6/2017"}, {"body": "offtopic seen discussion nt want switch proxies reactivity creates new object instead editing initial one changed", "d": "6/2017"}, {"body": "sounds good thanks btw seems necessary qualify interpreting object array logging square brackets seems numerical function", "d": "6/2017"}, {"body": "alternative could use iterator protocol works way iterable structures array arraylikes", "d": "6/2017"}, {"body": "nickmessing difference still introduce breaking changes also browser compatibility constraints means", "d": "6/2017"}, {"body": "offtopic already plan maybe nice idea discussion issue possible breakingbrowser compatibility changes", "d": "6/2017"}, {"body": "nickmessing currently planned change reactivity system browser compatibility dropping ie evergreen browsers breaking changes would minimal terms observed object equality api remain", "d": "6/2017"}, {"body": "using seen people asking support old browsers gone available everywhere ps solves issue", "d": "6/2017"}, {"body": "nickmessing yup also supported", "d": "6/2017"}, {"body": "clarify nt believe subclassing array feature inherit style function collection arrayapply collectionprototype objectcreate arrayprototype objectassign collectionprototype methods", "d": "6/2017"}, {"body": "true subclassing see details supports something like", "d": "6/2017"}, {"body": "support objects defining iteration protocols instead relaying inheritance could check object defines iterator use iterate would probably break backwards compatibility could done already", "d": "7/2017"}, {"body": "mitar said comments ago vfor using drop support old browsers actual implementation works differently nt think good idea support new iteration support", "d": "7/2017"}, {"body": "reference implemented support iterators meteor vue fork see breaking anything would already implemented call", "d": "7/2017"}, {"body": "mitar evan call looks like decided part point view support code work newer browsers", "d": "7/2017"}, {"body": "hm good question nt know existing vue code uses nt want use", "d": "7/2017"}, {"body": "iteration protocol ensure iterator rewound like generators means break render function called also arraylikes generally nt simply read values memory extra work nt repeated render said nt think would need able iterate arraylike custom object directly instead need array representation underlying values e g computed property always native array possibly builtin iterable supported", "d": "7/2017"}, {"body": "iteration protocol ensure iterator rewound like generators obtain new iterator object want iterate iterate call many times want happens manually obtain iterator use js syntax", "d": "7/2017"}, {"body": "closing lack actionable items", "d": "9/2017"}, {"body": "fiddle nt really reproducing issue give vague feedback designed case one direct child component toggled ca nt work inside work wrap entire unless toggling transition group instead importantly nt think good idea using state preservation like especially involved inherently working lists instead single toggled child recommend thinking another angle hoist ratings state shared state object vuex store unaffected components lifecycles", "d": "6/2017"}, {"body": "ran issue well authored fiddle keepalive documentation indicates wrap multiple elements conditionally rendered reasonable expect behavior would hold multiple children declared instead explicit list apologize fiddle incomplete fiddle simply wraps observe issue need inspect dom see elements staying around obviously way show working", "d": "6/2017"}, {"body": "difference render multiple elements renders one", "d": "6/2017"}, {"body": "posva thanks insight good distinction keep mind compa compb kept alive one rendered time based predicate perhaps documentation could improved clarify multiple conditional children supported rendered mutuallyexclusively note uncommon mutuallyexclusive rendering using well example conditionally rendering based currentindex granted would difficult vue know used mode usagesyntax sugar perspective love able combine convenience optimizations offered currently implemented must unroll explicitly element wrapped removes incredible convenience also makes difficult maintain genericreusable dynamic components", "d": "6/2017"}, {"body": "instead using vfor vif use computed property filter array improvements docs always welcome", "d": "6/2017"}, {"body": "great suggestion thanks help submit doc pr thanks", "d": "6/2017"}, {"body": "need specify attribute specific case using works need find real id vue nt reuse nodes", "d": "6/2017"}, {"body": "posva understand tried index nt work eg bigger underlying issue event uses right index value inside nt appears scope inside parent due arrow function nt notified change prop wonder issue sure closed right away", "d": "6/2017"}, {"body": "need unique key try said see working check info", "d": "6/2017"}, {"body": "hi condition scopedslots demo could append scopedslots abstract component thanks", "d": "9/2017"}, {"body": "benjarwar hi like need expose public html let uid export default data uid return uid mycomponentlabel uid", "d": "6/2017"}, {"body": "vm reserved internal use important keep private rely user code keep flexibility change behavior potential future use cases userland use cases suggest generating uids write simple moduleservice generates uids import components want every component make global mixin", "d": "6/2017"}, {"body": "benjarwar needed uid exact reason creating uid fairly simple recommend using mixin sets variable component data object make uid observable necessary set one within hook closest lifecycle hook internal uid property set js let uuid export default beforecreate thisuuid uuidtostring uuid", "d": "6/2017"}, {"body": "thanks replies nirazul one aforementioned work still kinda wishing public id component outofthebox understand need keep value private", "d": "6/2017"}, {"body": "also agree builtin officially endorsed way uniquely identifying component would nice expecially since useful making things properly accessible using library returning id number components particularly unique go forward mixin method outlined", "d": "1/2018"}, {"body": "incorrect usage reuse vnodes alway create fresh vnodes render", "d": "6/2017"}, {"body": "think maybe improvement could access assign array item via string type index fact equal refer could check key try convert number type", "d": "6/2017"}, {"body": "probably check string integer index", "d": "6/2017"}, {"body": "thanks peterwf", "d": "6/2017"}, {"body": "technically think problematic framework using simulate providing necessary properties would break lot code expects run universally checking environments could share details detect browser environment intentional use simple check want use inbrowser behavior vue used inside node jsdom", "d": "6/2017"}, {"body": "hi thanks quick reply contacted owner custom framework today introduce framework depth explain reason use window object way several days later provide details", "d": "6/2017"}, {"body": "hi discussed guy custom framework team use framework server rendering web pages contain many window variables might problem left history order reuse old code runs browser simulate node framework also met problem trying use vue ssr solution modify code vue locally know strong reason fix point maybe accept solution give framework", "d": "6/2017"}, {"body": "tanmichael another option might wrap vue module store object temporary variable assign require vue restore could work assigned top level scope vue imported first time aware internal framework variable moved behaviour change anytime precise something like create file follows js const windowcopy window window undefined const vue require vue window windowcopy moduleexports vue instead importingrequiring directly use", "d": "7/2017"}, {"body": "closing due lack actionable items", "d": "7/2017"}, {"body": "hi understand reason refuse change detect way simulating nt providing necessary properties problematic still think code robust always detect right env matter variables users simulate always special ones follow rule great framework tolerant", "d": "6/2018"}, {"body": "yeah improve docs regarding special case key fact reserved attributes bound using object syntax cc chrisvfritz", "d": "6/2017"}, {"body": "fixing ping add error warn", "d": "6/2017"}, {"body": "gebilaoxiong ah realized indeed fixable check special keys", "d": "6/2017"}, {"body": "ok boss", "d": "6/2017"}, {"body": "vue ships variants runtimeonly runtime use build use instead ps please ask questions use forum gitter instead opening issues github", "d": "6/2017"}, {"body": "nickmessing thank try", "d": "6/2017"}, {"body": "import vue vuedistvueesmjs caused uncaught syntaxerror unexpected token export vueesmjs uses module export ca nt recoginized meteor even add poorvavyas package import vue vuedistvuejs works", "d": "6/2017"}, {"body": "properties prefixed historically used internally vue nt think enough reasoning change", "d": "6/2017"}, {"body": "nt think makes much sense define methods computed props etc components internal using underscore convention generally considered internal public api component defined props events access methods data component programmatically eg something rarely happening considered edge case", "d": "6/2017"}, {"body": "accessing methods happen trying hide properties user prepending illusion", "d": "6/2017"}, {"body": "yes used internally huge difference provides useful documented public api provides bugprone unexpected behaviour yes true unexpected part somewhat documented nobody tells really nt use underscores anything unless like pain argument simple frankly seems compelling newcomer bugprone people shoot foot due unexpected behaviour many issues tracker proving though think related experience worst yet seasoned developers love nt alienate unnecessary getting rid one simple search amp replace away", "d": "6/2017"}, {"body": "unlikely happen certainly break someone existing code gain arguable raise warnings users declare datapropscomputedmethods start open pr", "d": "6/2017"}, {"body": "using arrow function data actually good idea makes readable forces build state object therefore nt really want warn also note nt say bad use arrow functions docs", "d": "6/2017"}, {"body": "fyi detected runtime tell whether function authored arrow function done via static analysis probably rule wip official eslint plugin", "d": "6/2017"}, {"body": "unfortunately possible given way vue template compilation rendering works however mount multiple vue instances share data object", "d": "6/2017"}, {"body": "vue text interpolation use instead recommend read guide", "d": "6/2017"}, {"body": "try", "d": "6/2017"}, {"body": "add self prevent jounqin said", "d": "6/2017"}, {"body": "creating pr docs thanks feedback", "d": "6/2017"}, {"body": "transition represented one css class would need multiple classes applied transition fyi works already", "d": "6/2017"}, {"body": "see example sometimes need append two classes uikit example need append class reverse animation want swap multiple components need append class leaving entering component make position absolute another component animation", "d": "6/2017"}, {"body": "nt need add classes add direct classes modify behaviour transition even use array object syntax", "d": "6/2017"}, {"body": "html", "d": "6/2017"}, {"body": "nt need classes transition would nice feature stuck fine html", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "\u53d1\u73b0\u53ea\u8981", "d": "6/2017"}, {"body": "\u4f60\u53ef\u4ee5\u9605\u8bfb\u6587\u6863 acodercat", "d": "6/2017"}, {"body": "\u6587\u6863\u8bf4next \u6216\u8005 next path", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "really nt understand feature missing definitely vue rather vuerouter issue looks like usage question ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "validators executed prop change please provide repro", "d": "6/2017"}, {"body": "ah mistake encountered case passing array prop manipulating element via validator prop enforces elements numbers learned issue reactivity must updated via component acknowledge change object properties declared datacreation reactive ca nt array indices", "d": "6/2017"}, {"body": "limitation converting array indices would lead big performance loss really worth", "d": "6/2017"}, {"body": "known hacky workarounds use nondocumented compiler method use poorlydocumented method behavior partial result", "d": "6/2017"}, {"body": "provide raw text", "d": "6/2017"}, {"body": "worked thank lot may want add information documentation currently text say children vnodes", "d": "6/2017"}, {"body": "greencoder would great could make pr", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "\u8fd9\u4e2a issue \u5e94\u8be5\u53d1\u5230\u4f60\u4f7f\u7528\u7684 cli \u6a21\u677f\u7684\u4ed3\u5e93 \u8d34\u9519\u8bef\u65e5\u5fd7\u7684\u65f6\u5019\u8bf7\u7528 markdown log \u91cd\u73b0\u7684\u94fe\u63a5\u8bf7\u4e0d\u8981\u968f\u4fbf\u4e71\u8d34\u4e00\u4e2a", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello sorry reproduction look reproduction boiled minimal code editable use base repro", "d": "6/2017"}, {"body": "posva issue happens binding data display inline element safari", "d": "6/2017"}, {"body": "thanks clarification please provide boiled repro take look mon jun kyle notifications githubcom wrote posva issue happens binding data display inline element safari receiving mentioned reply email directly view github mute thread", "d": "6/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "6/2017"}, {"body": "underneath really array replacement heuristics replace array indeed trigger update expected behavior real cause putting call directly inside handler means component validated updated every input even extra whitespace nt make trimmed text change instead trigger actually changes using watcher fixed fiddle", "d": "6/2017"}, {"body": "thanks response intentionally make code inefficient making revalidate input method also called every time even error bag empty reason veevalidate code something similar seems happening array replacement caused issue ca nt type spaces textarea component patched code use inplace array modification fixed know code work create errorbag callback behaviour difference inplace array modification component always supposed update array replacement even array may contain values expected design perhaps documentation suggest wary array replacement bit", "d": "6/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "6/2017"}, {"body": "sorry valid reproduction", "d": "6/2017"}, {"body": "discovered injection may related temporarily closing investigate", "d": "6/2017"}, {"body": "really want string value pass string instead boolean booleans toggle attribute element convenient cases", "d": "6/2017"}, {"body": "agree answer thank much", "d": "6/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue repro thanks", "d": "6/2017"}, {"body": "already follow issue guide ssrclientplugin work well multi entrys", "d": "6/2017"}, {"body": "please give message", "d": "6/2017"}, {"body": "sorry keep github issues bug reports feature requests ask questions forum gitter stackoverflow find really issue please open new issue repro", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow use splice without argument remove element", "d": "6/2017"}, {"body": "hi posva thanks quick response behavior splice without argument behaviour looking offsets following indices breaks associative array feel behaviour non intuitive inline javascript specification sparse arrays specifically requesting myarray remove feature seemed past allows remove element index array without disturbing indices without introducing undefined array iterate later", "d": "6/2017"}, {"body": "aah case use", "d": "6/2017"}, {"body": "sorry tried already offsets indices following elements nt mean bother think edge case currently elegantly solved currently associative array use object instead array vueset vuedelete work array vue implements method mimicking behaviour javascript defined delete array index probably cases like sparse array order keys matter using object wo nt trick see subtlety talking", "d": "6/2017"}, {"body": "tested adding template using gets updated twice corresponding value need help please use forums gitter post questions btw associative array object js complicating life", "d": "6/2017"}, {"body": "nt need help probably tested wrongly example remove try access id reporting consider either bug missing feature depending intent library designer wo nt bothering anymore already lost enough time semantics array vuejs implements different semantics javascript array probably wo nt cost much implement javascript specs delete user ask delete splice user ask splice btw associative array object js need able iterate key order care nonquadratic performance javascript array like std map javascript object like std unorderedmap nt get please get chain someone thank time", "d": "6/2017"}, {"body": "provide jsfiddle repro look", "d": "6/2017"}, {"body": "fyi little point using sparse arrays js ensure enumeration order need keep copy indices anyway iteration speed difference getset might think faster object always run benchmark instead making assumptions", "d": "6/2017"}, {"body": "hi sparse arrays guarantees order objects nt important distinct primitive sometimes need currently encountered problem agents simulation every timestep simulation agents agents born store sparse array incrementing id agents dies remove structure living agents sparse arrays operations log nremainingagents use objects lose information order agents created use dense arrays remove operations become n making simulation step quadratic insurmountable problem work sparse js array added data vue constructor vue nt get control keep vue copy sync via object mapping inelegant kind point using vue get sparse array probably feature developers wo nt use may useful simplify life new users breaking somewhat hard understand semantics javascript arrays probably could faithful javascript specs inexperienced users wo nt see difference advanced users get expected behaviour thank time", "d": "6/2017"}, {"body": "answer linked mdn article links already stated spec guarantee enumeration order sparse arrays engines part spec wrong rely proper way deal keeping extra array containing ordered keys use object also usually inaccurate reason js performance big notations much underlying engine decides implementoptimize different cases pretty sure sparse array leads deopt would nt performant think", "d": "6/2017"}, {"body": "answer linked tell foreach implemented almost everywhere proper way deal keeping extra array containing ordered keys nope middle modification would lead quadratic behaviour proper way use tree underlying data structure js array javascript specs written developer enjoy minimal useful primitives code efficiently tree maps hash maps two useful distinct beasts algorithmically different somewhat natural give access programmer decent browser engines implementation forced using right primitive otherwise would nt match specs would piss poor performance optimizations bigger numbers next guy javascript today bad part browser implementers decided respect underlying theory vuejs great please nt drag us mud removing constructs would allow us rise", "d": "6/2017"}, {"body": "slower manual loop direct key access object due additional checks per spec plus cost invoking iterator function item given care performance avoid using also defeats point using sparse array sparse arrays work properly used use raw loops iterate data empty item still render block unlikely us change behavior technically breaking lead performance regressions makes sense make behave like native arrays separate method indexmodifying behavior currently however breaking change far nt think use case argument behind strong enough warrant breaking change change want likely happen suggestion keep using object instead also strongly suggest actually benchmarking app assuming object slower sparse array may strong algorithmic intuitions js land benchmarking way find truth", "d": "6/2017"}, {"body": "ok problem thanks advices", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "getting vuebot notifications githubcom hello issue closed conform issue requirements please use issue helper create issue thank receiving subscribed thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "reproduction link data applicationxhtmlxml reproduction please provide minimum runnable code deomnstartes problem", "d": "6/2017"}, {"body": "linusborg copy paste data uri chrome edge browser look developer console", "d": "6/2017"}, {"body": "content data uri", "d": "6/2017"}, {"body": "would need use case", "d": "6/2017"}, {"body": "use case team serves web content applicationxhtmlxml successfully decade across desktop mobile embedded applications found extremely useful use strict html aggressive standards compliance mode eliminates historical idiosyncrasies html selfclosing vs tag capitalization cdata browser quirks prevents certain types xss attacks disallows harmful things like documentwrite ie conditional comments fails fast many types errors extra strictness xhtml syntax caught offending line patch technically invalid html html xml syntaxes valid html whatwg html specs xml representation deprecated discouraged considered outdated standards body aware browsers support xml formulation html documents natively since ie lot obsolete fud xhtml people understood difference content type doctype nt want serve polyglot documents ie lt also confusion relationship xhtml obsolete never finalized xhtml alive well nt help situation making content compatible content types syntaxes trivial tiny patches like one accepted google facebook akamai advertising networks several open source projects years often conversation like one given rest vue seems nearly compatible applicationxhtmlxml documents already hoping accept patch nt maintain fork backwards compatible single character change selfclosing slash really problem ideological reasons writing code would resolve issue totally standards compliant", "d": "6/2017"}, {"body": "dvdckl ha bit confused nt realize fix simple mean blizzard start using vue", "d": "6/2017"}, {"body": "created pr right start actually", "d": "6/2017"}, {"body": "yeah realized well totally missed", "d": "6/2017"}, {"body": "sorry nt see related pr earlier removed commit merged", "d": "6/2017"}, {"body": "wow", "d": "6/2017"}, {"body": "overwrite innerhtml like whenever set throws away dom nodes vue controlling previous html also string nt contain data", "d": "6/2017"}, {"body": "hi evan solution problem instead windowdocumentbodyinnerhtml used thanks advance", "d": "9/2017"}, {"body": "lzxb would need use computed properties initial data imo data schema component use data side rather put data side actually need", "d": "6/2017"}, {"body": "special cases need like", "d": "6/2017"}, {"body": "calculated attribute data dependent requirement accessible", "d": "6/2017"}, {"body": "nothing mixins order vs current behavior expected way often reasonable depend way around also change would breaking obvious gain", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "indeed special handling present native basic idea type whitespace parent value gets updated trimmed value triggers update parent child however textarea child still focus update blocked blur input update happens parent value already trimmed system thinks nothing changed easily simulate native behavior extra textarea custom component", "d": "6/2017"}, {"body": "thanks answer indeed fix issue whitespace still showing custom component part whitespace b remove b instantly trims whitespace remains happens still live", "d": "6/2017"}, {"body": "thomhurks find solution backspace issue", "d": "3/2018"}, {"body": "tegola quirk application day one noticed think users nt often make typo directly space often make typo middle word mistype first letter word space delete space deleted think still fix might try using vmodel components rolling making prop syncs custom code trimming sending input event", "d": "3/2018"}, {"body": "thomhurks unfortunately one users noticed looking fix actually component nt event use wanted every textbox trimmed without specifying every binding added prop component stripped version html export default props value string number trim type boolean default true methods oninput event const value eventtargetvalue emit input thistrim valuetrim value onchange event const value eventtargetvalue emit change thistrim valuetrim value behavior though looks identical backspaceing last char also removes space know old thread maybe something missing", "d": "3/2018"}, {"body": "yeah bit weird nt says however textarea child still focus update blocked nt seem case deleting characters delete character whitespace present character whitespace trimmed immediately input control even input still focus nt completely understand mechanics anyway seem solve nt update event event still using component parent use following behaviour value parent always trimmed value child trimmed blur deleting character preceding whitespace preserved nt send event parent immediately however value parent lag behind display value somewhere else correspondence immediately typing case objection though tegola solution work", "d": "3/2018"}, {"body": "thomhurks changing configuration indeed help would loved keep input event least something like alas nt work keep change event fact normal inputs handle backspaces fine bothers thanks help", "d": "3/2018"}, {"body": "thing", "d": "6/2017"}, {"body": "expected behaviour looking guide realize nt properly documented far see ping chrisvfritz wrong", "d": "6/2017"}, {"body": "counter intuitive override value would nt something get merged overrides want explicitly ignore always use text value declare prop use", "d": "6/2017"}, {"body": "wostex one slightly controversial features seems little strange giving component undocumented api assuming parent component knows child component root element practice though found feature rarely causes problem long nt try use applications use enjoy though ymmv personally feel meant component library authors eg integrating bootstrapmdl reported finding helpful since difficult predict component might used example bootstrap plugins require adding new attributesclasses ability add arbitrary attributes means authors nt work hard accommodate edge cases docs linusborg right nt see anywhere docs thinking back wondering purposefully left personally consider antipattern application code include warnings escape hatches props events workflow use sparingly mostly serve escapehatch prefer using props events parentchild communication except implicit passing attributes possible violate workflow accidentally despite feelings many find useful want know acquiesce opened pr would love hear thoughts explanation linusborg posva wostex hopes dreams next major version vue might make another push behavior disabled default even altogether since functional components technically used explicitly pass arbitrary attributes root element element desirable even normal component custom props used powerful explicit attribute passing vue label pattern also allows inspecting arbitrary attributes provide warnings example set classes nt used together user trying use external plugins outdated conflict user trying add classesattributes deprecated", "d": "6/2017"}, {"body": "thanks explanation chrisvfritz thought bug seems line common vue concepts although people benefit using maybe feature documented update see already done pr", "d": "6/2017"}, {"body": "chrisvfritz really think kept removing would enforce using render function every component lib inapp specific ui component", "d": "6/2017"}, {"body": "posva wonder compromise new directive could added specify primary element one attributes added since may always root element think could mostly solve problem users know implementation details components example case simple component following template html people might surprised adding class css still nt work right component authors selectively forward attributes defining props specifying applied way could set sane default instead going much work trying imagine every possible scenario think", "d": "6/2017"}, {"body": "think want control attributes like class go better always use props would also work reuse class put different attributes different children needs prop must used multiple places class example bit weird imo using ui lib check actual html trying add classes probably end something like", "d": "6/2017"}, {"body": "posva cases like though tedios set lot props bindings able set different primary element would make element much simpler props could used anything attribute passed element make sense also writing sitting right next weird", "d": "6/2017"}, {"body": "indeed primary element component looks like something useful enough maybe referring main property adding short inperson discussion", "d": "6/2017"}, {"body": "seems chrome bug work fine firefox", "d": "6/2017"}, {"body": "still seeing firefox windows macos also tried chrome canary firefox beta channel really noticeable toggle transition group slice array using button", "d": "6/2017"}, {"body": "looking bit looks like dynamic transition greatly adding lag sensation setting improves lot looks like something editing inline styles many components one animated may wrong", "d": "6/2017"}, {"body": "figured dynamic name adding lag remove name completely setup style without transition applied still pretty noticeable pause becomes pronounced complicated vfor instance table app lot data functions generating table display lag pretty big bummer since actually interested animating entire list might try see way animate additions without wrapping vfor transition group", "d": "6/2017"}, {"body": "observation enables flip technique default however requires least one call source forces style recalculation layout reflow chart show usually cheap small style sheet full blown css framework recomputing styles expensive", "d": "6/2017"}, {"body": "nt think fixable vue framework though tried way optimize away call requires causes style recalculation well since transitiongroup designed flip technique little chance avoid least one style recalculation call fairly click event listener still respond even cpu slowdown seems acceptable css framework adds many rules well flip technique something might want avoid", "d": "6/2017"}, {"body": "thank investigating explanation makes sense even without specific classes applied obvious semanticui others making changes elements like body text etc directly thus causing recalculation load", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "may cleaner js code stream", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "thank looks perfect smile", "d": "6/2017"}, {"body": "vuerouter issue look console giving hint fix issue dup", "d": "6/2017"}, {"body": "think similar problem two pages b listen event event bus switch b vuerouter trigger event page also response event component destroyed switching router listener still", "d": "6/2017"}, {"body": "simonalia probably unrelated op problem likely forgot use unregister event bus listener component hook vue doesnt use event bus questions please ask forumvuejsorg issue focus op problem", "d": "6/2017"}, {"body": "yeah got thank linusborg", "d": "6/2017"}, {"body": "thanks looks like indeed memory leak going identified source working fix", "d": "6/2017"}, {"body": "thank much help", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "issue version example fast clicking button see chrome de tools performance monitor nodes listener removed", "d": "5/2018"}, {"body": "commenting year old closed issue hardly noticed please file real bug report", "d": "5/2018"}, {"body": "already", "d": "5/2018"}, {"body": "also happen actually use unique keys keys unique explained docs", "d": "6/2017"}, {"body": "yes updated fiddle sure", "d": "6/2017"}, {"body": "linked fiddle still duplicate keys edit also replace array items way vue track react thirdly method pushed string array contain objects like", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "yea sorry update link think code view model causes duplication replace array assign arraysplice works ok remove one tr template problem goes away updated code use arraysplice problem still tried detect duplicated items code var counts thisordiniforeach x gt counts xid counts xid consolelog counts thanks helping really driving crazy", "d": "6/2017"}, {"body": "first fiddle still duplicate keys last one nt use please take look version fiddle previous reply works without errors need support suggest open thread forumvuejsorg help well issue closed appearant bug", "d": "6/2017"}, {"body": "duplicate key means duplicate declaration template duplicate value array clear sorry found problem indeed duplicated key another template page thanks linusborg support", "d": "6/2017"}, {"body": "instead considered children maybe issue may need write btw fiddle using vue", "d": "6/2017"}, {"body": "lookup algorithm provide inject child looks provided attributes loops hierarchy search provided props root could nt get fiddle run ran fiddle parent undefined child component got lookup context least start issue rendering slots relationship components", "d": "6/2017"}, {"body": "looks like functional component rendered slots resolved", "d": "6/2017"}, {"body": "kingwl correct kind technical requirement", "d": "6/2017"}, {"body": "remember raised point getting crazy end looked normal functional components attached component rendered therefore used slot get attached outer component however case nonfunctional components container injects renders html edit alidcastano updated fiddle comment since nt even using vue", "d": "6/2017"}, {"body": "haha sorry using wrong vue version fiddle caught able configure jsx nt realize posva thanks fixing example issue functional component ca nt receive provided properties functional component rendered slot linusborg technical requirement mean workaround behavior intended container created serve passes props example design would change example seems unnecessarily bloated since essence parent component already entailed data needed provide child open discussion guys suggest", "d": "6/2017"}, {"body": "change anything slot rendered context", "d": "6/2017"}, {"body": "technical requirement mean workaround behavior intended behaviour result way functional components work consider set components pass functional component another component slot rendered befor passed child child component receive resulting vnodes slot content context example means moment component renders available parent outer component consequently injections available functional component available well current implementaiton virtualdom works functional components change would require quite changing quite lot internal mechanics", "d": "6/2017"}, {"body": "posva linusborg got thanks explaining due requirements way use provideinject functional components props provided context sure constraint clarified documentation please go ahead close issue nt anything else needs done clarified thanks", "d": "6/2017"}, {"body": "maybe find way improve functional component slot moment done like posva linusborg said", "d": "6/2017"}, {"body": "kingwl thanks keeping open finally time try incorporate vuemobiledoceditor plugin using advice one problem foresee component needs used instance difficult allow flexibility nested components used example export components already registered app instance export default vueextend render h return provide data needs injected functional components return msg hello components parentcomp childfunccomp understanding user using plugin would like template script import supercoolcomponent supercoolcomponent export default mounted mounted gt new supercoolcomponent mount somewhereinapp emit mounted implementation correct severely limits usage provideinject functional components since allowed individually import register components wish use", "d": "6/2017"}, {"body": "would use full components instead support provideinject", "d": "6/2017"}, {"body": "trying resolve maybe long", "d": "7/2017"}, {"body": "kingwl able resolve", "d": "9/2017"}, {"body": "vs", "d": "6/2017"}, {"body": "actually go nodemodules directory see directory called like probably find something called something like work import vuerouter vuerouter vueuse vuerouter", "d": "6/2017"}, {"body": "shame", "d": "6/2017"}, {"body": "using already via webpack vueloader try", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "quoting evan took time respond really fan proposal nt immediately clear turned tried felt weird realize semantic implication html attributes values usually boolean attributes attribute value indicates presence attribute truthiness implicitly expanding binding overloads perception addition prop child component declared type presence attribute indicates true value would cause different meanings technically breaking change arguments issues evan raised would close feature request duplicate also sirlancelot mentioned nice workaround make something like possible current api", "d": "6/2017"}, {"body": "thank sirlancelot approach tried works great linusborg agree evan argument thank bringing close", "d": "6/2017"}, {"body": "still actuall define prop", "d": "6/2017"}, {"body": "thanks lot make pr docs regarding requirement", "d": "6/2017"}, {"body": "would helpful yes thanks", "d": "6/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "6/2017"}, {"body": "met problem seems solution issue found", "d": "8/2017"}, {"body": "got error within component function fixed adding html element match example op insde component code extract javascript componentwithrenderfunction js part component thisrender function return scopedslotsdefault item dataitem thing understanding create scoped slot markup available function", "d": "10/2018"}, {"body": "warnings default development mode way detect newly added nonreactive property", "d": "6/2017"}, {"body": "thanks reviewing feature request bad reactivity detection warning shadowing ie properties getters methods names", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "warning inlinetemplate components must exactly one child element", "d": "6/2017"}, {"body": "thanks reply sorry missed docs general point still stands sometimes best documentation occurs action code error andor console message would really help silent failure rarely best course action", "d": "6/2017"}, {"body": "open browser console", "d": "6/2017"}, {"body": "wow believe looked console multiple times saw nothing maybe accidentally console filtered see clear day plnkr example apologies perfect", "d": "6/2017"}, {"body": "warning error console either", "d": "5/2018"}, {"body": "explained previous issues expected behavior controls js side things related component guarantee made dom left behind hand attempt reuse dom leave document remove dom get properly garbage collected", "d": "6/2017"}, {"body": "remove event listeners perhaps works added listeners vs template bindings destroying dom element calls listener focus seems way focus element cleanup vue component listeners without causing vue called means test needs blur element cleaning make method less susceptible npe actual case", "d": "6/2017"}, {"body": "removes custom vue event listeners dom listeners yes blur cleaning", "d": "6/2017"}, {"body": "use works intended seems fires late timer may get fired input value change event firing", "d": "6/2017"}, {"body": "attribute controls initial state need use instead", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "designed type navigation need stacklike navigation library going part core", "d": "6/2017"}, {"body": "zuibunan success try something like", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "e first please write issue correctly people help solve problem quickly seems right", "d": "6/2017"}, {"body": "need use function make work fixed markup issue case want take look consider using forum gitter stackoverflow question get faster feedback", "d": "6/2017"}, {"body": "makes sense whatsoever want use method reaction click event", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "use virtual list solution renders visible something solves use case", "d": "6/2017"}, {"body": "really need convert string use vueserverrenderer really recommend use virtual scrolling list", "d": "6/2017"}, {"body": "posva use vueserverrenderer nt compile webpack works server check virtual scroller showed see good enough", "d": "6/2017"}, {"body": "virtual scroller requires element height order prevent display glitches case chat messages also vueserverrenderer wo nt work close ticket find idea interesting", "d": "6/2017"}, {"body": "want directly generate real dom nt see need even go vue rendering pipeline use plain html string concatenation would give control better performance possible implement virtual scrolling handle dynamic height currently solid vue implementation yet still consider problem dealt userland rather core", "d": "6/2017"}, {"body": "expected vue nt create copies data info", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "try async component dynamic import require", "d": "6/2017"}, {"body": "think expected behavior explicitly specify types prop casting would performed consistent stateful components declare prop implicit type", "d": "6/2017"}, {"body": "thanks raising however suggest posting forums gitter instead issue list reserved potentially actionable items vue", "d": "6/2017"}, {"body": "thanks vvpvvp need provide minimal reproduction us look could create github repo reproduce", "d": "6/2017"}, {"body": "link really nt helpful please try provide actual reproduction", "d": "6/2017"}, {"body": "got problem scoped slot ok works", "d": "6/2017"}, {"body": "sunslaven please provide reproduction scoped slots related specs passing ca nt really tell wrong without repro", "d": "6/2017"}, {"body": "sorry problems testi proved nothing version", "d": "6/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "6/2017"}, {"body": "vvpvvp encountered seems like problem build tools try updating vueloader amp vuetemplatecompiler", "d": "8/2017"}, {"body": "think looking", "d": "6/2017"}, {"body": "use directive updated link", "d": "6/2017"}, {"body": "commented issue behaviour incosistent quite weird using fixes issue", "d": "6/2017"}, {"body": "type usage wontfix works wiping away preexisting content completely new nodes however use bindings vue attempt diff text nodes likely made sync browsers handlesplit text nodes completely unpredictable", "d": "6/2017"}, {"body": "confirmed trick thanks", "d": "6/2017"}, {"body": "helped", "d": "7/2018"}, {"body": "autumnwoodberry updated fiddle use shuffle array bug still reproduce", "d": "6/2017"}, {"body": "wrong notice nt actually click button make happen original array starts items bug happen", "d": "6/2017"}, {"body": "autumnwoodberry thank point updated description fiddle", "d": "6/2017"}, {"body": "thanks case like use key could refer docs", "d": "6/2017"}, {"body": "although pr may solve problem better use string number type value key attributes using plain object implement map structure inside vue native object treat object type value key another object automatically convert string", "d": "6/2017"}, {"body": "recall correctly always literal thought added docs", "d": "6/2017"}, {"body": "defcc posva type restrict prop mentioned docs however nonprimitive necessary sometimes property object", "d": "6/2017"}, {"body": "reason nt support object keys performance diffing part code extremely perfsensitive extra memory allocation vs object key lookup negligible add warning nonprimitive keys probably using native map solve problem less perf hit would make vue behavior inconsistent depending browser support likely supported future version longer supported nt really seen case object keys absolutely necessary cases make sure objects ids create somewhat inconvenient nt think worth perf tradeoff", "d": "6/2017"}, {"body": "thank explanations documentation yet mention though", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "expected children overwritten", "d": "6/2017"}, {"body": "nt think dealing vue issue chromefirefox throttling timers inactive tabs simply reduce ramcpu usage ca nt rely settimeout running every x second want solution problem rather simple pause animation user leaves another tab restart comes back fixed example", "d": "6/2017"}, {"body": "makes sense thanks lot quick response still got ta ask anything checking transition classes already exsist change occurs regarldess whether transitionendanimationend fired", "d": "6/2017"}, {"body": "think issue also occurs tab still active hidden getting following adding several elements transition group docs state enterto class removed transition finishes", "d": "7/2017"}, {"body": "yunyu could please check issue related situation", "d": "7/2017"}, {"body": "jkzing actually yeah seems affect well transitions put enteractive class nt work ones enterto move example issue", "d": "7/2017"}, {"body": "yunyu thanks already quite clear reproduce", "d": "7/2017"}, {"body": "going create new issue found one bug different seems might help solve current issue created simple situation reproduce transition bug reproduction link steps reproduce click showhide button switch another browser tab seconds go back jsfiddle see message displayed expected works like switching browser tabs clicking showhide button fiddle waits seconds hides message fiddle waits second shows message actually happening clicking showhide button switching another browser tab seconds come back see message element", "d": "1/2018"}, {"body": "alexbazilev think case different situation created separate issue nvm situation saying sorry spam", "d": "1/2018"}, {"body": "expected behaviour documented guide note objects arrays javascript passed reference prop array object mutating object array inside child affect parent state much intentional sense would want allow twoway flexibility inevitable otherwise would clone object passed prop would come host new problems like performance memory impacts", "d": "6/2017"}, {"body": "info yes vue follows semver stated anywhere personally consider default library open issue docs repo instead please thanks", "d": "6/2017"}, {"body": "allright thanks think good know since vue didnt cheers", "d": "6/2017"}, {"body": "looks like bin actually using update latest version odd change event firing nt", "d": "6/2017"}, {"body": "nt think change website reproduce vue vuetemplatecompiler dev actually found problem clicking reset button setting value empty quote since option value vmodel ca nt match option available dom set thistest undefined workaround put first select dirty works nt know really issue feel fre tell change way handle select", "d": "6/2017"}, {"body": "dup intended possible option exist variable set", "d": "6/2017"}, {"body": "expected handle dynamic classes vue", "d": "5/2017"}, {"body": "think bug behaviour means ca nt use vue conjunction pieces javascript example class independent vue method adds class element happens also class added class removed seems like reasonable use case work", "d": "5/2017"}, {"body": "let put another way manage classes vue alone use pluginlib custom code manipulate classes wrap vue component bug really", "d": "5/2017"}, {"body": "one core principles vue works well frameworks existing projects taken opening paragraph vue guide unlike monolithic frameworks vue designed ground incrementally adoptable core library focused view layer easy pick integrate libraries existing projects say use vue manage everything completely contradicts core principle nt see technical reason vue ca nt preserve dynamically added classes think bug convert feature request", "d": "5/2017"}, {"body": "actually easy integrate libs vue need help always ask forum dynamic class issue facing discussed many times already looking issues may help", "d": "5/2017"}, {"body": "expose methods parent component customising component content using slot use scoped slots pass methods way pass variables html", "d": "5/2017"}, {"body": "thanks raising point setting expression jsx pure js makes sense since already pass arbitrary expression evaluated set value render functions add warning vue important part updating docs playground edit makes sense use expression directive", "d": "5/2017"}, {"body": "ah see suggestion automatically evaluating using", "d": "5/2017"}, {"body": "possible expression evaluated template compiler use directly value", "d": "5/2017"}, {"body": "see oh well thanks time", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "wrong", "d": "5/2017"}, {"body": "created called rendered call routerpush called component rendered", "d": "5/2017"}, {"body": "use nexttick inside mounted support please refer forums", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "pretty easily define wrapper component keeps components rendering ssr postpones rendering client hydration works correctly egoist like lines code could viable workaround request discussed", "d": "5/2017"}, {"body": "get \u0e1e\u0e04 franck freiburger notifications githubcom problem feature solve many component yet compatible ssr may require large changes support partial ssr rendering could allow use component meanwhile eventually ported directives could also benefit behavior components may mandatory seo could allow better clientsideserverside load balance proposed api look like vue component export default allowserversiderendering false receiving subscribed thread reply email directly view github mute thread", "d": "5/2017"}, {"body": "thanks fine", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "sorry found solution click isa isa reversemessage", "d": "5/2017"}, {"body": "markdown actually uses spaces list indent doublespace likely display expected eg seen result github markdown also regardless whether behavior correct issue markdown library marked instead vue", "d": "5/2017"}, {"body": "set", "d": "5/2017"}, {"body": "due things watcher keeps track dependencies new reactive property added watcher fire designed handle case may exist initial watch thus wo nt collected dependency watcher fires new value old value primitive strictly equal watcher wo nt trigger callback however new value old value objects arrays may mutated trigger callback safe long story short overfire cases ensure correctness entire system design constraint aware practice wo nt lead logical errors critical perf problems wontfix may check see improve rewriting reactivity system using proxies", "d": "5/2017"}, {"body": "got lead logic errors using vuex store shared cache adding new item item object cache depending upon cache items triggered leads considerable performance problem item object callbacks relating called making unwanted logic results understand hard detect object changed easy way fix try using rx instead vue reactive system guys suggestions use case", "d": "5/2017"}, {"body": "halfsolution using finergrained computedwatchers whenever possible prefer making final computed watched value primitive know might always feasible though logicwise since watcher callback definition called multiple times always able safely overwrite previous sideeffects called value could lead logical errors would even likely lead logical errors called different values", "d": "5/2017"}, {"body": "yes temporary solution like suggested stringifying object saving vuex cache however drawbacks since component uses cache item would make redundant copy string parse new object memory consumes cpu memory objectwatching worked fine would one copy object memory stringifyparse needed another possible solution order avoid unwanted firing callbacks since watcher function called super frequently might consume much cpu dig logic see possible make safe repeating redundant callbacks think rxjs help case", "d": "5/2017"}, {"body": "improved logic use events instead notify change cache works fine thanks", "d": "5/2017"}, {"body": "use", "d": "5/2017"}, {"body": "use wait updates change also bug report", "d": "5/2017"}, {"body": "ktsn would interested working api surface big relatively straightforward", "d": "5/2017"}, {"body": "done", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "manually destroyed obviously created also never manually call component mounted vue component ed suggestion using computed property prop control page keptalive", "d": "5/2017"}, {"body": "thanks ur reply maybe use wrong way think u nt get point mean manual destroy b b gt click gt b gt c gt b b runs lifecycle think gt b b cached b gt c gt b use cached componentb however b created ps b gt c trigger c gt b triggered", "d": "5/2017"}, {"body": "child components reproduction works child components provided root instance", "d": "5/2017"}, {"body": "ktsn hm generic html tags treated child components component children give paragraphs", "d": "5/2017"}, {"body": "docs functional component render context component instance see", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "support files mentioned typescript git repo essentially said spoken evan supporting vue files would something ideally language service extension would take see details would like request extension files gets written", "d": "5/2017"}, {"body": "language service implementation vscode octref currently working", "d": "5/2017"}, {"body": "currently nt plan implement standalone project want idelike experience need use vscode vetur maybe octref able extract language service standalone project future", "d": "5/2017"}, {"body": "tracked going happen soon since language service undergoing major rewrite better template intellisense previously dealing htmlcssjs regions using multiple language services separately combining together vetur provide even advanced intellisense template using info cssjs sections", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "use add new keys reactive objects", "d": "5/2017"}, {"body": "thanks looks like bug thanks concise clear repro", "d": "5/2017"}, {"body": "seems async component rendered early", "d": "5/2017"}, {"body": "solved wait minute rendering need use hidden element placeholder", "d": "5/2017"}, {"body": "sure solves async component transitions new vue likely bug code repo still exhibits transition outin bug incoming component nt wait fade complete note using named async component transition bug demo", "d": "6/2017"}, {"body": "indeed still failing repro transition starts right away clingor said", "d": "6/2017"}, {"body": "posva looks like version contain fix code", "d": "6/2017"}, {"body": "fix released yet closed issues patch lands branch might public release yet contains single fix memory leak higher priority", "d": "6/2017"}, {"body": "bad saw commit release thought strange would release notes anyway", "d": "6/2017"}, {"body": "sorry misunderstanding thank confirming issue", "d": "6/2017"}, {"body": "nt appear fixed yet still pending release async component transition bug demo", "d": "7/2017"}, {"body": "clingor sure jsfiddle works nicely", "d": "7/2017"}, {"body": "fiddle work correctly code example github repo still exhibits behavior could helper library maybe something code example simple created demonstrate issue franckfreiburger would vuejs changes require update", "d": "7/2017"}, {"body": "put issue jsfiddle without loader take look", "d": "7/2017"}, {"body": "schrieb chris lingor notifications githubcom nt appear fixed yet still pending release async component transition bug demo receiving subscribed thread reply email directly view github mute thread", "d": "7/2017"}, {"body": "culprit steps reproduce see click b button", "d": "7/2017"}, {"body": "posva able reproduce", "d": "7/2017"}, {"body": "franckfreiburger open new issue thanks btw", "d": "7/2017"}, {"body": "actually intended behavior name slots resolution follows rule work children nodes parent component node created rendering context case created context root instance created context functional component slot names ignored one hack work around use root instance create instead rendering context nodes", "d": "5/2017"}, {"body": "caikan second case change code code may cause two div element template allowed vue first sample code results one template one div template", "d": "5/2017"}, {"body": "curious ca nt template contain multiple nodes become avoid nested single div reasoning pick element want root ca nt solved", "d": "6/2017"}, {"body": "larryu thanks sometimes want use wrapper elements posiblle", "d": "6/2017"}, {"body": "would technically require much complex analyzing template structure sure worth achieve equivalent html", "d": "7/2017"}, {"body": "implementation process complex temporarily use warning instead compilation error allow first child node root element btw used component root element vue nonfirst child node discarded think warning treated way ok think may use instead root elements wrapper", "d": "7/2017"}, {"body": "feature request make root elements otherwise layout would break vue sindex tr th nthchild tr th nthchild tr td nthchild tr td nthchild hack fixed column vue export default name copyfirst props arr array", "d": "10/2017"}, {"body": "comes generating tables simplifies things", "d": "11/2017"}, {"body": "causes problems adds unecessary wrappers cracks layout", "d": "11/2017"}, {"body": "perhaps something simple allowing root component wrapper element used could return everything within element root wrapper", "d": "12/2017"}, {"body": "react nice implementation current version", "d": "12/2017"}, {"body": "add fragment root like web component shadow root", "d": "12/2017"}, {"body": "another use refactoring component order make easier maintain form various parts fall css grid extra wrapper required group several related elements component causing grid treat whole component one griditem sure work around hope end fragment syntax like react nt already thing", "d": "2/2018"}, {"body": "marktnoonan point looked issue begin trying solve css grid end use vue could nt achieve without either nested elements creating big giant vue file", "d": "2/2018"}, {"body": "primary need maintain valid html component generates table rows different rendering depending different logic ca nt give div parent without violating html rules accessibility priority table good html structure semantics important fairly certain satisfy need render bummer sacrifice clean declarative implementation", "d": "3/2018"}, {"body": "marktnoonan mentioned css grid issue make crazy", "d": "5/2018"}, {"body": "njleonzhang worth though nt tried yet recently learned portalvue feel workaround may possible relatively easy many cases component structure vue needs different dom structure want actually end looking forward playing post demo get time create clean example wanted go ahead share library anyway others maybe check", "d": "5/2018"}, {"body": "markbrouch currently make grid items one component provide customize component try next time tnx information", "d": "5/2018"}, {"body": "error annoying white hole fooder template", "d": "6/2018"}, {"body": "handle problem way barvue common cols special col export default props value name bar computed get return set val emit input thisvalue val provide provide return bar slotvmodel extends component make contain define components special dirty export default name inject bar created set thisbarvalue dirty last use slot contains col wrapper element problem define multi col components compose meet different requirement method somehow dirty help hope help someone still struggling problem", "d": "6/2018"}, {"body": "whole issue could irrelevant fragments supported instead reason disallowed really patching algorithm already works arrays fact starts node iterate children instead starting iterating array visit nodes array similar issue vuelidate ported simplified version dom patching validation tree find differences virtual validation tree required support multiple nodes level guarantees data shapes turned pretty easy turn algorithm upside treat array entry point", "d": "7/2018"}, {"body": "reason property nt exist adding nothing either ie element therefore anything sure something give deeper look", "d": "5/2017"}, {"body": "sure issue though stuff renders fine svg nodes example probably better position judge app renders different svg layers based svg strings everything works fine really element nt svg data works fine hope helps bit", "d": "5/2017"}, {"body": "maybe works things moment wo nt work elements missing idea ie thought", "d": "5/2017"}, {"body": "maybe wording g element properly support innerhtml use time hope figure though may pm eduardo san martin morote lt notifications githubcom wrote maybe works things g moment vhtml wo nt work elements missing innerhtml idea ie thought receiving authored thread reply email directly view github mute thread", "d": "5/2017"}, {"body": "lt nt work without vue involved", "d": "5/2017"}, {"body": "hmm indeed seems polyfill takes helps directive render contents open issue repo seems polyfill nt handle images properly thanks guys", "d": "5/2017"}, {"body": "running issue thedutchcoder ever get workaround", "d": "5/2018"}, {"body": "include svginnerhtml make work svgs", "d": "5/2018"}, {"body": "justineo worked thanks", "d": "6/2018"}, {"body": "expected behavior called initial insert inside kept alive wo nt trigger similar hook components", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "ca nt open repro link please provide github repo instead explanation also vague nt seem related vue way vue core nt use promise internally tests passed sure upgraded vue libs please try isolate problem", "d": "5/2017"}, {"body": "u open", "d": "5/2017"}, {"body": "could problem related latest version webpack", "d": "5/2017"}, {"body": "closing believe nothing vue would lead error please make sure provide repro shows error caused upgrading vue", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "seems problem edge applying property elements open bug report tracker may limitation tables", "d": "6/2017"}, {"body": "current behavior create reactive fields exist although value set nt trigger updates design encourages declare model fields upfront instead using empty object however using dynamic path segments binding seems impractical declare fields beforehand added patch makes code work said seems better use array already works current version", "d": "5/2017"}, {"body": "expected behavior mount vue instance piece indom template vue uses merely template extracts outerhtml element parses virtual dom render fns generate new dom structure replaces original element use custom elements template initialized page load vue generates dom simple fix move app template tag makes custom elements dormant vue mounts", "d": "5/2017"}, {"body": "content inside considered fallback content means proposal implemented without breaking changes personally feel makes slot composition overly complicated", "d": "5/2017"}, {"body": "trying understand better problem would need te discard component create new one current user kind state held vuex", "d": "5/2017"}, {"body": "using vuex maybe something look user data comes promise returning service implementation look something like export default name profile created userservicegetuser user gt thisuser user know could check see fresh data using hook component reused user see old state view network request get new user data resolves would prefer new instance profile component created know user data changed due user interaction elsewhere app", "d": "5/2017"}, {"body": "already props dynamically updated extra api feels redundant also imo controlled outside rather inside component", "d": "5/2017"}, {"body": "already fixed guess via pr", "d": "5/2017"}, {"body": "sqal said", "d": "5/2017"}, {"body": "components sugar syntax nt support modifiers using event nt change anything components actually use prefer", "d": "5/2017"}, {"body": "posva simple testing discovered appear work custom input components nt inspecting component root element see property lists modifiers present ie inspecting property nt appear would nice able check within component modifier set vmodel one could change event ed change fired suppose one could create prop component would nice option detect modifier custom input would work like standard input", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "changing attach name props named users everything goes rightbut nt reason", "d": "5/2017"}, {"body": "understand need first understand vue performs updates templates first compiled render functions render functions called every time component updated since using inline literal prop value new literal array created every time parent component rerenders causes prop watcher fire every time solution avoid using inline literals use constant value instead", "d": "5/2017"}, {"body": "ok thank explanations", "d": "5/2017"}, {"body": "\u662f\u9488\u5bf9\u83b7\u5f97 key", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "\u56e0\u4e3a\u5916\u9762\u7684 li todo key todo \u90fd\u88ab\u91cd\u65b0\u521b\u5efa\u4e86", "d": "5/2017"}, {"body": "please include reproduction link small repository would helpful", "d": "5/2017"}, {"body": "also desription unsure actual problem saying parent hook fires child everything else seems like expected behaviour would indeed strange shoud fired called means child nt begin exists point", "d": "5/2017"}, {"body": "parent created mounted child created mounted console log parent created parent mounted child created child mounted parent created child created child mounted parent mounted", "d": "5/2017"}, {"body": "ok could loader bundle problem code loading vue use webpack components name vue cause problem vuecomponent child component child works import child componentschildvue vuecomponent child child question causes problem wrong render sequence components themselve work bundler return promise vue use vue uses promise accept dynamic loaded components", "d": "5/2017"}, {"body": "rendering sync process hwever lazyload component webpack happens asychronously parent finish rendering sychronously child lazyloaded rendered execution order lficecycle hooks different sync render expected", "d": "5/2017"}, {"body": "thanks thats thought feature request enable use lazy loaded components", "d": "5/2017"}, {"body": "case parent lazy loaded component", "d": "5/2017"}, {"body": "feature request enable use lazy loaded components using right nt discussion done forum", "d": "5/2017"}, {"body": "\u63d0\u4ea4\u9519\u5730\u65b9\u4e86", "d": "5/2017"}, {"body": "\u8fd9\u91cc\u8ddfnative\u4e8b\u4ef6\u7684", "d": "5/2017"}, {"body": "javoski \u758f\u5ffd", "d": "5/2017"}, {"body": "\u7528 arguments \u5c31\u53ef\u4ee5\u4e86 tue may pm yuri notifications githubcom wrote javoski \u758f\u5ffd receiving subscribed thread reply email directly view github mute thread", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "\u8bf7\u7ed9\u91cd\u73b0 tue may pm yuri notifications githubcom wrote receiving mentioned reply email directly view github mute thread", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "arguments tue may pm yuri notifications githubcom wrote receiving mentioned reply email directly view github mute thread", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "", "d": "9/2017"}, {"body": "", "d": "11/2017"}, {"body": "", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "\u5b98\u65b9\u6587\u6863\u597d\u50cf\u6ca1\u6709\u5199\u554a", "d": "1/2018"}, {"body": "dengshenkk \u4f7f\u7528\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u7684\u8868\u5355\u8f93\u5165\u7ec4\u4ef6 \u4e2d\u6709\u6d89\u53ca", "d": "1/2018"}, {"body": "", "d": "5/2018"}, {"body": "zerogog arguments\u662f\u4f5c\u7528\u57df\u5185\u53ef\u8bbf\u95ee\u7684\u53d8\u91cf", "d": "6/2018"}, {"body": "commit lead think using modifier better explict way value html input elements always returns string see", "d": "5/2017"}, {"body": "expected according browser default behavior adding modifier directive meet expectation", "d": "5/2017"}, {"body": "thanks solution vmodelnumber pengchongfu javoski", "d": "5/2017"}, {"body": "yeah works components think could include warning noncomponents", "d": "5/2017"}, {"body": "posva okay way make transition noncomponent cached component nt want create new component noncomponent", "d": "5/2017"}, {"body": "actually everything component noncomponent element", "d": "5/2017"}, {"body": "closing seen must use components inside", "d": "5/2017"}, {"body": "guess current behavior expected one beause syntax sugar seem make scene event handler delete property object maybe break reactivity property", "d": "5/2017"}, {"body": "find work around thank", "d": "5/2017"}, {"body": "saw expected behavior reason allow user know value provided input otherwise could entered user also empty input", "d": "5/2017"}, {"body": "posva understanding vue reactivity returning null would definitely better option rather returning string", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "", "d": "6/2018"}, {"body": "calendar vshow show \u6216\u8005\u8fd9\u91cc\u5199\u6210vif show showsync show export exportdate", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "could expected behavior vue force update component children", "d": "5/2017"}, {"body": "jkzing force update component occasion", "d": "5/2017"}, {"body": "rlsz sure let wait core members answer", "d": "5/2017"}, {"body": "jkzing", "d": "5/2017"}, {"body": "expected behavior child component slot content slot content may changed parent rerender force update child necessary", "d": "5/2017"}, {"body": "actually child component without slot also updatedthe determinant child component look like means wo nt updated parent changes updated parent changes whether child slot besides said slot content may changed parent rerender possibility vue trigger child updated even uncertain child content changed right", "d": "5/2017"}, {"body": "rlsz yes determine whether content changed needs diffed however content part child vdom tree way diff force child update", "d": "5/2017"}, {"body": "think make sense child component nt slot content", "d": "5/2017"}, {"body": "thanks point better way think determine whether child content changed differ outerhtml child vdom tree", "d": "5/2017"}, {"body": "rlsz outerhtml updates vdom nodes", "d": "5/2017"}, {"body": "javoski try", "d": "5/2017"}, {"body": "rlsz really meant content inside tag rendered child component intend render slot content related topic updated hooks reply actually child component without slot also updatedthe determinant child component look like means wo nt updated parent changes updated parent changes whether child slot", "d": "5/2017"}, {"body": "javoski suggestion", "d": "5/2017"}, {"body": "rlsz thing ancestor component changes without regenerate child vdom tree diff old ones know whether child updated even child nt need still updated also happens vdom implementations like always rerender child component whether without", "d": "5/2017"}, {"body": "jkzing imperfection react also vue think", "d": "5/2017"}, {"body": "properties start proxied vue instance may conflict vue internal properties api methods access vm dataproperty", "d": "5/2017"}, {"body": "mutates original array nt want create shallow copy avoid also make sure use attribute rendering lists", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "default webpack isomorphic use instead", "d": "5/2017"}, {"body": "thanks lot quick check helps ps nt chance attend vue meeting beijing chance access media like videos meeting thanks", "d": "5/2017"}, {"body": "works fine may looks like blur event never bubble wo nt trigger outer div", "d": "5/2017"}, {"body": "blur event triggered element captures focus eg use attribute make element focusable", "d": "5/2017"}, {"body": "afaik electron support devtool extensions", "d": "5/2017"}, {"body": "way silence message", "d": "10/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "looking feature implemented outside via userland setup done demo app", "d": "10/2017"}, {"body": "spec clearly defines value truefalseundefined usecase boolean value also string", "d": "5/2017"}, {"body": "ah indeed thanks pointing thanks time", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "meet problem example print lifecycle components abc destroy component b b gt c b run b lifecycle u see b destroyed got recommended ues manual clear cached component", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "think problem way import image try import image file assetdefaultjpg", "d": "5/2017"}, {"body": "use crazy works", "d": "10/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "nt export symbol separate file import chunks", "d": "5/2017"}, {"body": "posva nt solve problem still asynchronously load file actually complicates wo nt able leverage vue async component feature block declaration component till chunk loaded file longer component", "d": "5/2017"}, {"body": "meant asynchronously loading chunk since small unnecessary nt change rest code specially async component part", "d": "5/2017"}, {"body": "posva perhaps mentioned entry points suggesting synchronously load symbol file inlined entry points create two different symbols", "d": "5/2017"}, {"body": "oh right symbol different although raised point right start trying async load two components use inject suppose creating app lib wonder need use injectprovide targeted towards libs imo relate two components way chunk app wise", "d": "5/2017"}, {"body": "posva making library", "d": "5/2017"}, {"body": "code split library even though looks like bad idea put components chunk", "d": "5/2017"}, {"body": "posva library modular many entry points accommodate specific usecase besides point feature request wo nt going details normally nt issue webpack chunking async loading inconvenience fact vue async components loader nt function evaluated async components loaded asking make take function seems like reasonable feature request could benefits thanks trying help looking solutions problem least thread would like issue regarded simply feature request", "d": "5/2017"}, {"body": "ah see get multiple entrything said earlier thanks trying help looking solutions problem least thread would like issue regarded simply feature request regarded feature may convenient need know problem exists makes necessary pretty normal ask questions", "d": "5/2017"}, {"body": "problem fr solves described first post understandable fine ask questions concerned way kept offering alternative solutions steering fr thread offtopic", "d": "5/2017"}, {"body": "nt worry sceptical fr usually worse concerned pattern could impact usage injectprovide usage injectprovide provided definitely good one part sceptical part referencing parent child basically right inject access component static limits behaviour purpose making function makes super flexible also dangerous ps feel like really bothers asking questions understand usecase may super clear bother make clearer", "d": "5/2017"}, {"body": "posva part sceptical part referencing parent child basically parentsomething accessible context component instance hence note referring instance parent component declaration example closer context child instance tripleequals declaration safer imported explicit dependency rather implicit dependency crucial parent immediate parent child poor assumption make right inject access component static limits behaviour purpose making function makes super flexible also dangerous dangerous literally every method lifecycle event handlers render nonfunctional data provide methods computed etc function access instance access retrieve components component declared global ones anyway putting declaration component apart feature request already something helps understand fr better consider symbol separate file like said reason put component declaration purely convenience organizational leverage vue async component feature ps feel like really bothers asking questions understand usecase may super clear bother make clearer probably confused overlooking wrote understandable fine ask questions concerned way kept offering alternative solutions steering fr thread offtopic reiterate fine ask questions", "d": "5/2017"}, {"body": "discovered work around withdrawing fr", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "datawowdelay", "d": "5/2017"}, {"body": "know bind lines arrtibute datawowdelay nt know deal lines without atawowdelay lines list", "d": "5/2017"}, {"body": "pass anyway element wont care get attribute need true components specify prop props access even pass throw hope helped", "d": "5/2017"}, {"body": "thanks micaso", "d": "5/2017"}, {"body": "tested fresh firefox works nicely must plugin extension messing style make sure open kind issues vuejsvuejsorg repo", "d": "5/2017"}, {"body": "suspect ffox ubuntugnome sorry posting wrong queue nonbug wasting time thanks", "d": "5/2017"}, {"body": "nt understand description problem asking question qualify steps reproduce transitions part problem problem exists without well distract makes think bug", "d": "5/2017"}, {"body": "linusborg pointed due transitions original element still dom animated anyway query dom result instead logic computed property", "d": "5/2017"}, {"body": "hi bramu depends specified dependency see update manually packagejson run recommend use", "d": "5/2017"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "5/2017"}, {"body": "nt think jsx need cause syntactic sugar createelement suppose want load render component usual time scenario want load exactly component new attrs props added original binded event disabled removed importantly want keep template component pure possible instead modifying adding extra logic achieve goal think best way modify ast directly compile render function hope guys catch point", "d": "5/2017"}, {"body": "address needs still interested concretedetailed usage example concrete mean problem solve project rainfore also provide examples kind plugins think written", "d": "6/2017"}, {"body": "cxhtml team planning create ide vue support editing single component ui library even webapp project simple demo final result following steps handling template necessary editing vue file compile template ast remove original events component add attributes events ast workspace nt want trigger original events modify ast easier modify template render function generate render function modified ast trigger hot reload update living component saving vue file get working ast restore events ast maybe user add remove events attributes regenerate template ast write file issue pr pushed really need api generate render function directly ast template maybe solution better thought hoping get advice btw according also need function like postcss", "d": "6/2017"}, {"body": "discussion find using plugin pattern expose ast nt address needs either reason simple time generate render function means compile method plugin options ast always generated parse method need modify ast object obtain compile method pass generate method get render func addition digging compilercodegen source code directly use ast api compilefromast proposed ast object modified like xxprocessed attributes added arrayshift method used generate method called means next time call generate method render function may generated expected wonder possible make generate method pure function matter many times call generate ast like parse method hmm also expose parseoptimizegenerate method plugin options rainfore mention", "d": "6/2017"}, {"body": "cxhtml mentioned pr nt address needs completely close pull request present", "d": "6/2017"}, {"body": "still quite sure plugins would nt enough use case maybe try explain chinese", "d": "7/2017"}, {"body": "request stale meanwhile actually allows inject custom compiler modules via option module api defined theoretically enable standard use cases alternative codegens imo much control given userland", "d": "9/2017"}, {"body": "nt return anything would difficult imagine supposed return consider fact could fire several different functions none", "d": "5/2017"}, {"body": "sirlancelot alternative call component method return value without", "d": "5/2017"}, {"body": "found guid vuejs parentchild component relationship summarized props events parent passes data child via props child sends messages parent via events alternatives want return calculated value parent method want reuse want duplicate code props really trustable two way", "d": "5/2017"}, {"body": "turn poorman vuex store supplying constructor starting object use create computed property seeing original post nt strictly issue vue team definition may able get better assistance forums gitter stack overflow", "d": "5/2017"}, {"body": "ianpatel encourage ask questions forum gitter try use issue tracker bug reports feature requests question pubsub trying called rpc instead emitting event provide method called barebones implementation fills calls function name without dedicated api", "d": "5/2017"}, {"body": "intended behavior hook used manipulate dom elements called every single item respectively", "d": "5/2017"}, {"body": "thanks response best practice tips managing events aggregate good ol counter system got nt love idea manually syncing number transition elements counter logic", "d": "5/2017"}, {"body": "perhaps using namespaced keys filtering checking match although regular html elements children would checked well", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "iceuncle", "d": "8/2017"}, {"body": "vueissuebot", "d": "8/2017"}, {"body": "created\u91cc\u9762\u6dfb\u52a0 windowfunctionnamethisfunctionname", "d": "8/2017"}, {"body": "yuxingfafu window functionname thisfunctionname", "d": "4/2018"}, {"body": "window functionname thisfunctionname \u6b63\u89e3", "d": "9/2018"}, {"body": "", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "delimiters changed using runtime compilation full build work files keep files syntax consistent also version yet", "d": "5/2017"}, {"body": "oh okay thanks haha yeah realized cli upsidedownface also thanks great work love vue", "d": "5/2017"}, {"body": "thanks", "d": "7/2017"}, {"body": "interesting change files inconsistency applications harder change craft see change lexers globally even could find would likely break craft plugins expect twig default think argument could made applications may reasons change lexers think allowing components change delimiters would make sense however agree argument changed globally vue application reason imho best way allow developer choose change even component file", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "use", "d": "5/2017"}, {"body": "reproduction link link vuejs repository see problem page", "d": "5/2017"}, {"body": "sorry need repro somehow simulate reasonable way feel free open new issue", "d": "5/2017"}, {"body": "hi problem wrote use barcode reader input filled fast char skipped directive helped ugly work case think onchangeinput event bind value cycle problem input fast lt browser opera customers use", "d": "8/2017"}, {"body": "maybe help", "d": "8/2017"}, {"body": "using simply replace amp directives single vue rest still able reproduce input fast issue even using tool like keepass autotype fields", "d": "8/2017"}, {"body": "problem us opera said customers use browser vmodel syntactic sugar vmodellazy try found exact problem", "d": "8/2017"}, {"body": "checked opera works without problems", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "create issue vuejsvuecli", "d": "5/2017"}, {"body": "okay thanks znck", "d": "5/2017"}, {"body": "first use option able reproduce situation appear html parsing safari element wrapped template tag results normal form element removed know gt outhtml add associated class everything right nt think bug much like safari approach", "d": "5/2017"}, {"body": "lonelyclick said related safari wonder allowed include form inside custom tag mds says wo nt happen use template strings files", "d": "5/2017"}, {"body": "repro seem using plugin handle async computed may post issue ask gitter forums stackoverflow", "d": "5/2017"}, {"body": "since vue default filters shipped free create search found one", "d": "5/2017"}, {"body": "indeed look like want google beforehand found nothing googlefufailure", "d": "5/2017"}, {"body": "maybe report", "d": "5/2017"}, {"body": "looks fine may fixed meantime kind problems better directly send pr vuejsorg repo", "d": "5/2017"}, {"body": "chrome see console output change value browser using", "d": "5/2017"}, {"body": "nirazul use last version chrome osx sierra see input field variable filtered values use variable input field logically influences filtered values recalculated every time change variable strange", "d": "5/2017"}, {"body": "dom gets updated vue therefore methods get applied filter sure expected use computed property need caching", "d": "5/2017"}, {"body": "posva looked generated render function saw filter function called every time function component called behaviour vue different performance nt need create computed property every transformation value transform function called dependent values changed called every rendering list many elements slow new behaviour similar dirty checking angular sad", "d": "5/2017"}, {"body": "imo expected change lead vm call render function invoke myfilter mymethod may improved keep dependencies relation object vnode states depend", "d": "5/2017"}, {"body": "wrap elements rely vue component avoid example", "d": "5/2017"}, {"body": "xujiongbo course create child component case case list need create new component every list item sometimes verbose fact think filters become useless behaviour expected also reactive computed properties much better need application great performance creating new component every small list item one big overhead looked like choice lesser two evils performance", "d": "5/2017"}, {"body": "also problem every property need created computed properties transformed data example property type date js want display two places different formats momentjs fact good performance create two new computed properties looked bit verbose looked like view layer model layer move model layer due performance issues", "d": "5/2017"}, {"body": "deshadow well different data changed update dom element vue directives associated dom need calculate data change go recalculate expressions vue need regenerate new tree compare old one process needs recalculate expressions value change vue going modify last use fact request simple want ability cache result like", "d": "5/2017"}, {"body": "first expected behavior component entire render function called updated second perf problem really rather vue taking calculating dates good maybe try memoizing calculation filters use faster alternative third values component nt sound like good idea maybe consider splitting component smaller ones splits updates well result better perf", "d": "5/2017"}, {"body": "well boss right", "d": "5/2017"}, {"body": "gebilaoxiong ok understand position values list items chat loaded messages every message date need show fact request simple want filter ability cache result like computed property absolutely right think performance improvements logically right nt agree ok", "d": "5/2017"}, {"body": "think use instead", "d": "5/2017"}, {"body": "please provide better steps reproduction component repository affected", "d": "5/2017"}, {"body": "also please remove vuejsuibpagination lib make repro easier make sure problem within vue lib", "d": "5/2017"}, {"body": "thank lonelyclick linusborg simple really visualization previous next labels affected lsaquo rsaquo escaped posva create single tag attribute inside template value", "d": "5/2017"}, {"body": "please take look srcpagesdashboardvue reproduction link html", "d": "5/2017"}, {"body": "please take time create proper repro", "d": "5/2017"}, {"body": "thank patience posva smile expect helps see appvue symbol escaped", "d": "5/2017"}, {"body": "escaped appvue tested using works nicely", "d": "5/2017"}, {"body": "devdependencies development buildjs development script need custom set packages installed custom build vue fit specific use case find workaround explain problem dockerize vue app wo nt install devdep", "d": "5/2017"}, {"body": "require checkversions processenvnodeenv production var ora require ora var rm require rimraf var path require path var chalk require chalk var webpack require webpack var config require config var webpackconfig require webpackprodconf var spinner ora building production spinnerstart rm pathjoin configbuildassetsroot configbuildassetssubdirectory err gt err throw err webpack webpackconfig function err stats spinnerstop err throw err processstdoutwrite statstostring colors true modules false children false chunks false chunkmodules false nn create image based official node image dockerhub create directory app placed run mkdir p usrsrcapp change directory commands run inside new directory workdir usrsrcapp get code needed run app copy usrsrcapp install dependencies run npm install run npm run build set environmental variables todo pulled due npm install rather npm install production default resulting pulling dev dependencies well env nodeenv production expose port app runs expose serve app cmd npm start code dockerfile way pluck dependency container moving nodeenv see todo bottom kinda bizarre packagejson see nt want put dependency production container build script depends pull inside container anyways", "d": "5/2017"}, {"body": "explaining problem nt install vue package", "d": "5/2017"}, {"body": "posva make concise want make builds happen inside docker container building outside container copying makes reuse modules sometime clogs packages nt cleaned unexpected way build script depend devdep packages cleanly build dependency packages also fast cuz much fewer packages anyways depends still pull devdeps order build whilst packaging container viztor u mean building outside container copying", "d": "5/2017"}, {"body": "posva talking building vue talking building app docker container question nothing vue hardly anything webpack template might used changed quite bit question essentially optimize webpack build minimum packages installed repository place conversation suggestion improve webpack template please open issue wwwgithubcomvuejstemplateswebpack", "d": "5/2017"}, {"body": "linusborg acknowledge fact issue derived vue directly although whole buildjs built automatically vuecli issued made issue terms previous framework used angularjs implicit cli build tool abstracts packages dependencies build tool needs one shot made seem clean probably use webpack well included whole abstracted tool package dep devdep anyways thanks regards", "d": "5/2017"}, {"body": "bug browser moving element outside table vue get replace", "d": "5/2017"}, {"body": "already issue today according docs need use special attribute custom component hoisted invalid content thus causing errors eventual rendered output corrected fiddle", "d": "5/2017"}, {"body": "try putting function instead", "d": "5/2017"}, {"body": "expected behavour vue virtual dom nt know changes applied dom jquery similar tools always overwritten removed whenever component rerenders reapply styles want persist", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "using user defined tag xline working", "d": "5/2017"}, {"body": "wiiikiii thanks response seems work isit legal table layout", "d": "5/2017"}, {"body": "exact issue today solved using multiple tags table rows use css style element component w rows output", "d": "5/2017"}, {"body": "rebz thank response already tried case recursive use multiple tags table rows like example would like component output html parent id parent name parent description child id child name child description child id child name child description see fiddle talking get inside breaks table layout way illegal table layout wiiikiii solution seems working nt know best way legal layout", "d": "5/2017"}, {"body": "looking issue discovered another one", "d": "5/2017"}, {"body": "bug components require root node technical limitation vdom implementation try use functional components though functionality limited nt need root element please use stakc overflow forum forumvuejsorg take discussion", "d": "5/2017"}, {"body": "case somebody still interested could recursion thing figured solve two lines dom manipulation jquery hooked custom rows lifecycle events could look like table template row template best solution code clean works bet could quite easily without jquery jquery project anyway nobrainer took several hours tinkering decided like moves dom element child row correct location table initially mounted destroy ensures sub elements removed needed correct parent child hierarchy dom gets destroyed", "d": "7/2017"}, {"body": "mannikj best solution yes best solution would impractical dirty hack big excelsheetlike structure use jquery hundreds dynamic rows sacrifice huge performance would unacceptable solution situation exactly wonder anyone find proper solution", "d": "10/2017"}, {"body": "meanwhile open question stackoverflow link cihadturhan finally forget idea use table element use div elements jsfiddle hope resolve issue", "d": "10/2017"}, {"body": "thanks already found stackoverflow question jsfiddle link used one plausible solution see assigned bootstrap classes like make height equal across rows maybe realized assign border divs width div px border width two issues made worried visual details going solution flattening data use wo nt worry width columns honest never liked recursive solution rendering thanks help cihad", "d": "10/2017"}, {"body": "please nt disguise question feature request ask questions forum stackoverflow pass around functions way pass objects declaring functions suffice", "d": "5/2017"}, {"body": "function passed way pass objects return would declaring functions stumble across every dom updating resetting styles classes", "d": "5/2017"}, {"body": "please use forums gitter stack overflow next time thanks", "d": "5/2017"}, {"body": "reactivity caveat need use", "d": "5/2017"}, {"body": "posva thank much response btw think would fair throw warning error case", "d": "5/2017"}, {"body": "detectable search detection caveat docs understand", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "provide component option look", "d": "5/2017"}, {"body": "\u8fd9\u6837\u7684\u65b9\u5f0f\u5bfc\u5165\u7ec4\u4ef6", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "reproduction please try properly explain bug", "d": "5/2017"}, {"body": "please make fixed android checking var isandroid ua amp amp uaindexof android gt uaindexof linux gt check android cli uc brower", "d": "5/2017"}, {"body": "enough information uc useragent string getting versions uc browser using eventual bug check leading reporting bug saying fix need provide context", "d": "5/2017"}, {"body": "hello sorry please listen explain bug vuejs version vuejs file lines around location place judge android detection think place bug found production environment uc browser useragent juc linux u zhw cn var isandroid ua amp amp uaindexof android gt really detect user using device read code wrote vuejs suggest using following way fix bug place please use var isandroid ua amp amp uaindexof android gt ua indexuf linux gt detect thank qqcom evan date vuejsvue cc daheige author subject vuejsvue check android enough information uc useragent string getting versions uc browser using eventual bug check leading reporting bug saying fix need provide context receiving authored thread reply email directly view github mute thread", "d": "5/2017"}, {"body": "proposed fix would lead linux browsers also detected android nt think appropriate fix uc version using seem old vs latest may also device android os using", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "worth wrote workaround stackoverflow question today sure changing way watch works viable solution cases", "d": "5/2017"}, {"body": "ya agree sure worth either thought interesting watch fire watched variable set value sure straight javascript compare curious someone vue experience thought perhaps watch use loose comparison arraysobjects", "d": "5/2017"}, {"body": "vuejs bug", "d": "5/2017"}, {"body": "watcher checks whether fire using strict equal changing behavior would breaking unlikely happen imo component responsibility avoid infinite loop also think appropriate place check shallow equality inside watcher callback", "d": "5/2017"}, {"body": "already fixed commit make sure actually using latest version", "d": "5/2017"}, {"body": "please open issue vueloader repository", "d": "5/2017"}, {"body": "migrated vuejsvueloader", "d": "5/2017"}, {"body": "thanks posva", "d": "5/2017"}, {"body": "make sure use different attrs components though problem appears second child appears first one", "d": "5/2017"}, {"body": "nothing second component however updated jsfiddle convenince removed second component problem remains please reopen issue", "d": "5/2017"}, {"body": "sake clarity nt work expected one component wrapped exists page added second one illustrate difference result", "d": "5/2017"}, {"body": "using instead latter work", "d": "5/2017"}, {"body": "thanks joining nt know maybe mentioned docs however actually works except rare cases type race condition happening example works well emit child component settimeout rather http request callback real prodution code used need show loader separate div wait content child component load transition smoothly switch example however turn transition applies top wrapper div element nt apply need hide first div loader show div child component may see another fiddle also without wrapping div like get warning whatever option take hit wall", "d": "5/2017"}, {"body": "would probably better approach problem different way want show loader place component still loading data would recommend using directive component attaches loader certain condition ie another approach would use dynamic approach", "d": "5/2017"}, {"body": "thedutchcoder dynamic component approach nt work child component tells parent loaded data must mounted start loading data thus use vshow vif even complicated child component real app actually check jsfiddle try modify var rather nt get idea custom directive well could elaborate mean tell component show loaded inside parent actually trying resolve many loader trying make dry code make one global loader shows route initializes loads works ok try add smooth transitions", "d": "5/2017"}, {"body": "ok guys still nt find working answer issue closed let summarize try make dry solution use different components show spinnerloader within transition component switch initialization tried first problem transition applies top wrapper div element nt apply need hide first div loader show div child component second problem blocks get randomly time blocks ar shown third problem smooth transition like switch blocks smoothly fourth move loader inside component problem dry component switches loader switches well thus visually twitches nearest solution needed second random must shown unexpected thus reported bug achieve needed result vue guys", "d": "5/2017"}, {"body": "solve use vif instead vshow also avoid warning use vif condition velse instead use vif condition vif condition works hope helpful", "d": "11/2017"}, {"body": "heleninsa unfortunately nt allow component inside initialize track loaded mentioned somewhere previous comments", "d": "11/2017"}, {"body": "nobody cares nt work", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "computed ref \u5e94\u8be5\u80fd\u89e3\u51b3\u4f60\u7684\u95ee\u9898", "d": "5/2017"}, {"body": "xujiongbo \u6211\u540c\u65f6\u9700\u8981\u4f20\u9012\u6570\u636e computed", "d": "5/2017"}, {"body": "need pass data use method create new component props next time please make sure follow issue reporting guidelines opening issue ask questions forum stackoverflow thanks", "d": "5/2017"}, {"body": "vue related", "d": "5/2017"}, {"body": "thank investigation tested markup variations looks like actually default behaviour anyway record anyone else runs put instead button submit add regular buttons", "d": "5/2017"}, {"body": "use submit inside form field button default type submit inside form use submitprevent submitform", "d": "5/2017"}, {"body": "see aleksejdix explanation", "d": "5/2017"}, {"body": "also nt work telling actually checkout branch something weird going directive preventing attachment event listener", "d": "5/2017"}, {"body": "may look later generally fail reproduce simple setup probably something setup case issue tracker wrong place something like forumvuejsorg would right one", "d": "5/2017"}, {"body": "tried quickly clone server nt start unhandled rejection error connect econnrefused objectexportserrnoexception exportsexceptionwithhostport tcpconnectwrapafterconnect oncomplete way check problem quickly", "d": "5/2017"}, {"body": "trying connect port server running port", "d": "5/2017"}, {"body": "database server listening", "d": "5/2017"}, {"body": "deleted username password server configurations serverappjs need postgres", "d": "5/2017"}, {"body": "works fine something must end", "d": "5/2017"}, {"body": "know also without ssr setup works using client side rendering something ssr messing directives think", "d": "5/2017"}, {"body": "copied component verbatim vue hn setup hydration working properly likely problem specific setuplogic please try isolate issue something demonstrate indeed caused vue", "d": "5/2017"}, {"body": "thanks much looking", "d": "5/2017"}, {"body": "sethdorris ever get figured using webpack vue seeing issue click listener added anything vbinds templating seems work removing webpack loading everything oldschool style seems fix problem", "d": "8/2017"}, {"body": "issue resolve", "d": "11/2017"}, {"body": "vitalipom two months nt remember details exactly think problem webpack configuration ended finding sample webpack config somewhere vue documentation forums ca nt remember ended making work sure webpack would cause vue issues", "d": "11/2017"}, {"body": "okay thank james meanwhile since candidate job interviews decided indeed use vuejs soon struggle catchy feature leave alone regular listener would call native java script eventually big bonus access data objects directly js meaning future purposes nov james speirs notifications githubcom wrote vitalipom two months dont remember details exactly think problem webpack configuration ended finding sample webpack config somewhere vue documentation forums ca nt remember ended making work sure webpack would cause vue issues receiving mentioned reply email directly view github mute thread", "d": "11/2017"}, {"body": "think change von click submit von click submit", "d": "5/2018"}, {"body": "hello aware year since issue posted however could nt locate anything internet might point towards issue experience issue anyone insights matter might help basically ssr setup add block import eventbus apieventbusjs export default methods openhierarchy consolelog test eventbus emit openhierarchy click listener neither gets attached neither try alter accordingly like von clicknative", "d": "8/2018"}, {"body": "issue consistently issues documentation verbatim vuejs nt work typescript page typescript blog information like feeding hungry elephant peanut stuck endless search trying piece together instructions looking solution sometimes taken days sometimes minutes hours every time delays development programming years take listeners example vue js website instruction typescript core environment use immediately loader comes back following idea even begin search answer add myriad features nt work using vuejs typescript core huge mistake often find frustrated spending time searchinf trying piece together tos order resolve issues continue come vue js typescript appeal never two together net nto require loader bundler force issue use vue js way cdn visual studio basic bundling use vuejs library documented wait whenever decide important enough something error vueloaderlibtemplatecompiler id vueloaderlibselectorjs typetemplate amp clientappcomponentsresourceresourcevuehtml emitted value instead instance error error compiling template lines html code invalid expression unexpected token raw expression von click onclick hello event clientappcomponentsresourceresourcevuehtml clientappbootts multi eventsourcepolyfill webpackhotmiddlewareclient pathwebpackhmr amp dynamicpublicpathtrue clientappbootts", "d": "9/2018"}, {"body": "belongs vuerouter dup vuejsvuerouter tldr nt use unicode characters route paths officially supported use hash mode", "d": "5/2017"}, {"body": "always case need array obvious variable array", "d": "5/2017"}, {"body": "said pr use plain objects instead mixins achieve something similar", "d": "5/2017"}, {"body": "posva using typescript decorators implementation decorator uses vueextend options order create components needing extendmixin functionality multiple components causing issue avoid problem ability change underlying component telling use vue typescript scenario simple change code would fix thanks", "d": "5/2017"}, {"body": "ideally mixin component otherwise extend loose ability extend multiple things time", "d": "5/2017"}, {"body": "use decorator exporting mixin", "d": "5/2017"}, {"body": "time work may bug", "d": "5/2017"}, {"body": "actually implemented mixins constructors past motivation class style declaration typescript friendly objects", "d": "5/2017"}, {"body": "possible different decorator support friendly declarations wrapping object", "d": "5/2017"}, {"body": "think wrapping needed since simply uses merging mixins afaik vue component decorators using", "d": "5/2017"}, {"body": "may factors going created example uses inside vuerouter works chrome firefox error firefox actually issue traced code pr however see would cause difference browsers different decorator would possibility however may required issue resolved", "d": "5/2017"}, {"body": "ca nt work would work chrome ff anyone else able take lookany ideas", "d": "5/2017"}, {"body": "side note give error typescript doesnt option property", "d": "5/2017"}, {"body": "yes declared declaration files due undocumented api", "d": "5/2017"}, {"body": "considered public api though would definitely helpful toolslibsplugins need reflection component instance access normalized options object best case typeinterface", "d": "5/2017"}, {"body": "seems difference behaviour firefox vs browsers caused vuerouter present page sample includes vuerouter external resources use error firefox sample vuerouter removed works update caused vuerouter presence global mixin", "d": "5/2017"}, {"body": "posva finally figured root cause issue every object firefox already watch member objectprototypewatch means reaches watch merge strat parentwatch already true merges single array pull request fixes unsure actually write unit test issue present gecko browser watch support", "d": "5/2017"}, {"body": "hey nice job thanks lot looking well simulate adding property object prototype remove afterwards sure opened pr could nt find dizzy could nt see", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "never set value checkbox wo nt update besides favor use much easier even wrapped components nt stop component implementing interface customizing model implementation works", "d": "5/2017"}, {"body": "thanks looking nirazul prop nt need declared rather passed jsfiddle input element attribute evaluated expression computed property jsfiddle update said reason would prefer avoid component nt need maintain state example using example variable bound prop nt update parent mutates value new property created per instance reflecting state component functionally need achieved using computed property bubbles event returns prop value however point making addressing seems vue bug element could investigated", "d": "5/2017"}, {"body": "never defined setting prop binding case subtle difference html attributes props skilled enough explain checked binding would nt work leave library authors \u30c4", "d": "5/2017"}, {"body": "nirazul also prop passed html slot aw nt sell self short thanks looking nonetheless", "d": "5/2017"}, {"body": "looks like behavior caused call assumption vue dom update kicks via microtask browser checks behavior browser resets checkbox state sees event default behavior prevented overwriting dom changes made vue firefox works properly think chromewebkitonly behavior sure need really need wrap calls get around", "d": "5/2017"}, {"body": "thanks looking awesome nt think see browser issue use block checkbox checking clicked also ensure single source truth checkbox reflecting within view model rather dom needed state input strictly reflect data view", "d": "5/2017"}, {"body": "thank example lot trouble vuex throws whole thing whack going actually toggling checkbox vuex action mutation successful basically even user checked checkbox nt mean want go checked state want keep following computed property already set using using vuex nt good idea found ui getting toggled even though nt committed mutation found strange research actually found nt good answer question could nt believe believed common pattern wanting checkbox toggle action complete way deal error end toggling checkbox say like user preferences page nothing worked something like settimeout example thank thank hirokiosame asking question", "d": "10/2017"}, {"body": "renders expected", "d": "1/2018"}, {"body": "gufnz trying call function named nt render anything want output string use single quotes", "d": "5/2018"}, {"body": "dsignr see source boolean value case checkbox still attribute set least time writing nt checked", "d": "5/2018"}, {"body": "checked gt checked", "d": "5/2018"}, {"body": "worth work justtesting computed value giving true general computers mess things things named case attribute checked computed value checked still looking clear example using checkboxes combination vuex", "d": "5/2018"}, {"body": "imho introduce prop validation since modifier syntax suger corresponding handler child component validation would mean child control state update strategy parent", "d": "5/2017"}, {"body": "may right ok", "d": "5/2017"}, {"body": "purposely without knowing exists templates javascript never null js let users js without knowing add security checks kind like dealing user input js context rather one things wrap straightforward natural way computed property fallback content context apply transformation templates transform stuff like", "d": "5/2017"}, {"body": "think use computed property stubs possible nested fields also done envs proxies available create proxy objects allows arbitrary path access either way nt think exposing ways rewire property access vue instance would good idea", "d": "5/2017"}, {"body": "thanks responses posva transforming abc amp amp ab amp amp abc makes sense part still edge cases vif abc efg creating transforms edge cases would unfortunately quite difficult wo nt able depend customers manually fantastic idea actually given try works really well exception missing rootlevel properties believe fact everything data extracted scope render function accessed rootlevel variable example recursively made proxy object accessing returns null expected instead throwing exception huge step forward still throws exception attempting since otherdata defined vm appears due something like behind scenes unfortunately way put proxy beneath otherdata case solve problem running regex entire template matching varname varname simply adding matching properties rootlevel data properties nt exist already combining recursive proxy works really well looks good solution right however still nt give good way get list paths data referenced template post vifs logic keep looking solutions one though thanks help", "d": "5/2017"}, {"body": "need add attr tabs", "d": "5/2017"}, {"body": "error telling problem make sure look part releases notes need help please ask questions forum stackoverflow", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "use instead", "d": "5/2017"}, {"body": "augment vue types see", "d": "5/2017"}, {"body": "lucastheisen post help also", "d": "7/2017"}, {"body": "gnumarcelo code worked put plugin file axioplugints file typescript import vue vue import axios axios export function axiosplugin vue typeof vue options axiospluginoptions void stuff options vueprototype http axios export class axiospluginoptions add stuff import axiosstatic axios declare module vuetypesvue interface vue axiosstatic", "d": "4/2018"}, {"body": "nt add css transition also beware vue optimization reuse dom elements may need use", "d": "5/2017"}, {"body": "properties start proxied vue instance may conflict vue internal properties api methods access see", "d": "5/2017"}, {"body": "thanks answer", "d": "5/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "5/2017"}, {"body": "nuxt bash route error find module pagesindexjs e gitrepodoumidoumivipweb functionmoduleexports sync doumivipweb resolve r doumivipweb vueserverrenderer functionrequireensure e arraymap arraymap flatmapcomponents resolveroutecomponents getroutedata setcontext createapp moduleexportswebpackexportsdefault doumivipweb vueserverrenderer", "d": "5/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "working sassscss caveat", "d": "5/2017"}, {"body": "error generated code fails pass fsreadfilesync method using templates", "d": "5/2017"}, {"body": "reading fix issue thanks sethdorris", "d": "6/2018"}, {"body": "reproduction", "d": "5/2017"}, {"body": "element properties like remove good go", "d": "5/2017"}, {"body": "posva without modifier still unnecessary data html property presented component previous version vue worked fine explain please behavior changed", "d": "5/2017"}, {"body": "never worked way find info", "d": "5/2017"}, {"body": "posva thank much sorry wasted time", "d": "5/2017"}, {"body": "sorry question bug report", "d": "5/2017"}, {"body": "try find problem project get nothing clone vhn modify component use pug vueloader document said processing templates little different webpack template loaders pugloader return template function instead compiled html string instead using pugloader install original pug step step problem still case still issue google translate", "d": "5/2017"}, {"body": "necessarily vue issue please open mintui repo instead", "d": "5/2017"}, {"body": "fact tried mintui muse ui also build two problem found even mintui demo opened mobile web browser think might something wrong vue", "d": "5/2017"}, {"body": "probably lacking promise polyfill", "d": "5/2017"}, {"body": "\u4f60\u597d \u6211\u4e5f\u662f\u9047\u5230\u8fd9\u4e2a\u95ee\u9898 \u8bf7\u95ee\u63d0\u95ee\u8005\u8fd9\u4e2a\u95ee\u9898\u89e3\u51b3\u4e86\u5417", "d": "12/2017"}, {"body": "johnhargrove could give example failing sure happen", "d": "5/2017"}, {"body": "lokson situation child component ca nt satisfied component ancestors including root vue object ran developing validation service basically class top level component represents collection form inputs inputs complicated vue components building forget validationservice parent components silently never reference injected results errors related accessing members undefined object etc theory reason feature request getting kind indication went unsatisfied seems useful development", "d": "5/2017"}, {"body": "gmailcom", "d": "5/2017"}, {"body": "use relative file path like also nt necessarily public depends serve server exclude files static serving middleware put public assets instead", "d": "5/2017"}, {"body": "works though still think would better absolute path possible", "d": "5/2017"}, {"body": "would make flexible", "d": "5/2017"}, {"body": "example build framework something like nextjs like use layout custom vue application entry name differ vuessroutlet make bit abstract implementation details", "d": "5/2017"}, {"body": "would add extra cost learn gain barely benefit", "d": "5/2017"}, {"body": "use strict", "d": "5/2017"}, {"body": "nt device test strict mode nt work android added something else docs work", "d": "5/2017"}, {"body": "meiliujun", "d": "5/2017"}, {"body": "defcc nexus", "d": "5/2017"}, {"body": "posva run sample testing run ok excepted google nexus tested device iphone gt iphone gt iphone gt gt android gt android samsung gt android vivo honor", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "extent yes official devtool relies unlikely change break", "d": "5/2017"}, {"body": "thanks see reason follow approach", "d": "5/2017"}, {"body": "jantimon ca nt really say much niche case suggest tearing existing vue instances longer needed", "d": "5/2017"}, {"body": "sure really niche case pretty much affects every wysiwygish ui representation editors content management system feature point need rely clientside rendering technique content component case becomes present cents discussion", "d": "5/2017"}, {"body": "issues outer component delegates another component using cases outer component inner component linked property sometimes linked outer component sometimes inner component nt rely find correct component time", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "entirely sure looks like bug happens slot content mean time ing element question helps", "d": "5/2017"}, {"body": "ran something similar although example nested slot causes sibling component recreated probably related", "d": "5/2017"}, {"body": "nerdcave think related reason describe pr find works well change position like", "d": "5/2017"}, {"body": "pengchongfu also works add thanks looking", "d": "5/2017"}, {"body": "nerdcave also add wrapper like wrapper would placeholder default changed", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "sure label labelling improvement bug", "d": "5/2017"}, {"body": "posva sparamasivan missing something two root elements parent compoent error reported", "d": "5/2017"}, {"body": "defcc oh sorry forgot update repro yeah wrong adding single root element still showcases problem", "d": "5/2017"}, {"body": "also updated demo seems bug scoped slots", "d": "5/2017"}, {"body": "thank folks fixing", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "worked fine tested simulator kind errors also appear simulator vue nt even seem impact speed page manage js stack trace safari may look looks like something related device big amount content may want use something like nt look like error", "d": "5/2017"}, {"body": "posva crashing simulator also tested wwwbrowserstackcom iphone safari screenshot", "d": "5/2017"}, {"body": "issue well one site least ipad model really hard debug since dev tools also crash reproduce problem codepen example provided bububo using latest vue version reckon problem lies vue hooks dom another website barely works vue takes almost seconds initialize ipad afraid couple components introduced page crash please reopen issue investigate posva", "d": "9/2017"}, {"body": "hi issue vue pages lot components rendered list works fine phones others throws error reproduce via browserstack anytime printscreen", "d": "10/2017"}, {"body": "found issue case seems moved template file everything works fine", "d": "10/2017"}, {"body": "bug expects expression either use note single quote around value", "d": "5/2017"}, {"body": "throw error removing everything dom correct", "d": "5/2017"}, {"body": "use non minified version vue", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "property short hand background styles including words setting override original fyi using instead solve problem", "d": "5/2017"}, {"body": "xujiongbo thanks solve problem", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "expected behavior nt want need either explicitly bind parent props declare props child", "d": "5/2017"}, {"body": "linked example props declared child problem persists working vbindprop documentation says", "d": "5/2017"}, {"body": "got mean declare props child say props might receive would force declare input props button example vice versa good pattern", "d": "5/2017"}, {"body": "dotbits also say expected behaviour three things equivalent currently bind nt prop named pass case root element also nt understand mean workinng introduced", "d": "5/2017"}, {"body": "posva problem children components level different props receive whole set props declared prop child html attribute child element implementing components pattern library based atomic design system brad frost means include even small elements like buttons call actions dozens different context nested levels explicitly declare props huge overhead case granular distribution atoms molecules organisms yes right last working version prop modifier created fiddle reproduces behavior version", "d": "5/2017"}, {"body": "oh see seem misunderstood modifier info docs bind things nt need case bind props explicitly fiddle going produce wrong markup keep mind ignoring pops would also breaking change", "d": "5/2017"}, {"body": "posva got try custom directive filter owned props suggestion approach", "d": "5/2017"}, {"body": "suggest explicitly bind props need component render function easier", "d": "5/2017"}, {"body": "nothing embarrassed interests think using object instead function vice versa worked properties dev warnings cool cost maintain execution thought docs covered quite well", "d": "5/2017"}, {"body": "ping phoenixeliot", "d": "5/2017"}, {"body": "less lack understanding going boilerplate little fast later actually using options things fail ways nt clear making new component throw common options start fill later take mental overhead remembering exactly called nt using vue terribly long nt heart yet also side note use coffeescript think notation could look pretty similar throw together new component look something like done right easy notice put instead one works perfectly fine breaks try actually use say change watcher nt run super obvious reason always feels like gotcha eventually figure also note usually happens like next day adding new functionality thus nt boilerplate fresh head erroneously assuming works nt seen problems", "d": "5/2017"}, {"body": "must put data inside bracket return", "d": "4/2018"}, {"body": "like data return names ali ahmad raza", "d": "4/2018"}, {"body": "interests think using object instead function vice versa worked properties properties needed functions verb prefixes eg instead would little confusion would even better vue got rid inside functions added another parameter documentation could remove warnings functions nt support additionally would fewer invalid bugs reported", "d": "5/2018"}, {"body": "specific design decision behind common way setting function arguments understand similar api may seem intriguing personally nt think api need one function call config object ok different api docs clearly document changing syntax would breaking change justified supporting would add bloat small nonetheless codebase still justified comfort similar api", "d": "5/2017"}, {"body": "understand would agree adding warning would appropriate", "d": "5/2017"}, {"body": "thanks reporting easy first contribution needs little knowledge vue file needs modified inject arrays object able merge prolly used case someone looking first contribution", "d": "5/2017"}, {"body": "jaj ok got note quite logical indeed almost question though easiest way fork pull request", "d": "5/2017"}, {"body": "question though easiest way fork pull request yes", "d": "6/2017"}, {"body": "would like resolve first contribution project", "d": "6/2017"}, {"body": "ryzokuken already opened pr", "d": "6/2017"}, {"body": "okay look someplace else get acquainted source thanks thu jun pm jk notifications githubcom wrote ryzokuken already opened pr receiving mentioned reply email directly view github mute thread", "d": "6/2017"}, {"body": "please move issue fr nt understand would need dynamically register nested module registering containing modules really talk", "d": "5/2017"}, {"body": "sorry wrong project app loads plugins different companies marketplace company namespace eg separate loading sets plugin loader transfer plugin register themselve module must currently check exists true add know modules store add overwrite something namespace companies allowed", "d": "5/2017"}, {"body": "think add helper registers nested module create necessary modules plugins call instead register topmost module modules registered time", "d": "5/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue provide editable repro use base thanks", "d": "5/2017"}, {"body": "reproduction", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "thanks proposal unfortunately implicit behaviour really want keep things explicit one things make easy collaborate vue project ok globalise subcomponents advice namespace makes clearer component nested inside another sometimes may even need namespace specific enough change parent name", "d": "5/2017"}, {"body": "posva seems bit strange behaviour subcomponents allowed put directly template local registration globalize seems overloading declares subdependencies vue project even make sense used outside specific contextcomponent nt make senses outside instance tables cells tabs container tabs buttons ca nt see pratical reason wanted considering context kind lifecycle limitation something work make possible future", "d": "5/2017"}, {"body": "local registration explicit want things", "d": "5/2017"}, {"body": "posva maybe think turn local registration explicit slots instance export default components option require optionvue code determine explicity slot supports subcomponent allowed parent", "d": "5/2017"}, {"body": "still explicit component using select much intuitive simple add component parent usual new syntax using methods described global components thu may david rodrigues notifications githubcom wrote posva maybe think turn local registration explicit slots instance export default components option require optionvue code determine explicity slot supports subcomponent allowed parent receiving mentioned reply email directly view github mute thread", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "5/2017"}, {"body": "hello solved problem problem clue moment also want point email qqcom thank much", "d": "5/2017"}, {"body": "import elcol elementuipackagescolsrccol \u548c components elcol \u5c31\u89e3\u51b3\u4e86", "d": "6/2017"}, {"body": "haies", "d": "9/2017"}, {"body": "import elcol", "d": "9/2017"}, {"body": "vue haies ie", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "\u8fd9\u91cc\u5e94\u8be5\u66f4\u591a\u662f babelrc babel", "d": "9/2017"}, {"body": "haies thanks help", "d": "10/2017"}, {"body": "also encountered reason didt config babelrc", "d": "3/2018"}, {"body": "initialised find information caveat", "d": "5/2017"}, {"body": "posva object initialized component data misread reproduction", "d": "5/2017"}, {"body": "oh sorry misread indeed happening object treated readonly modify content scope scoped slot modifications component explicitly pass", "d": "5/2017"}, {"body": "great thanks note example works successfully modifying content scope scoped slot side effect recommended use", "d": "5/2017"}, {"body": "share fiddle nt work", "d": "5/2017"}, {"body": "speak completely correct works using object attribute guess would hard avoid though since javascript pointing data object beg question compose form scoped slot built scoped component flow exactly couple different pieces page data binding object attribute saved database working seen fiddle unless data binding object never able modify scope scoped slot would imply compose inputs slot workaround passing component scoped slot binding component eg slot template would considered bad hackpoor design decision", "d": "5/2017"}, {"body": "yes point attribute object work javascript nature recommended although come handy sometimes however pass method scoped slot use event handler together binding replaces case although even better keep within component", "d": "5/2017"}, {"body": "think vue internal way tracking things loops skipped elements seem stored empty text nodes probably faster processing needed see skipped items get rendered empty text nodes vue seems smart simply processing items list nt fall condition although sure intentional someone core team might able shine light nt seem like bug internal way tracking vnodes", "d": "5/2017"}, {"body": "think could issue vue internally since also report see text nodes closest thing put svg simple component containing svg seems cause extra vnodes around svg particularly problematic ssr hydration fail fyi believe text nodes comment nodes thus handling correctly ssr unfortunately holiday moment confirming intentional change difficult hope track tomorrow bug get patch asap get biscet tomorrow find true cause however need create small repro tests track failure update soon", "d": "5/2017"}, {"body": "thedutchcoder ssr problematic server side generate two real dom nodes nt match virtual dom client side result hydration failure", "d": "5/2017"}, {"body": "blakenewman nt use svg think problem may introduced commit optimized empty comment vnode could also create text vnode tried launch pull request sure author intention hope helpful track problem", "d": "5/2017"}, {"body": "issue extra vnode last one text checked built file elementui found bug comes false words two consecutive comment vnodes merged one text vnode", "d": "5/2017"}, {"body": "every vue component similar mechanism builtin nt need implement", "d": "5/2017"}, {"body": "maybe express well example case react used deliberately abort rerendering even currentnext stateprops different meant way accomplish something like vuejs", "d": "5/2017"}, {"body": "call move something right away set returned value bindingvalue want unfortunately yes directive exception often need execute inline statement hand custom directive directives expects value would also breaking change already pass function params example bind arguments commonly used part js better know benefit", "d": "5/2017"}, {"body": "fyi use thu may pm eduardo san martin morote lt notifications githubcom wrote call move something right away set returned value bindingvalue want unfortunately yes von directive exception often need execute inline statement hand custom directive directives expects value would also breaking change already pass function params example bind arguments bind bind commonly used part js better know benefit receiving subscribed thread reply email directly view github mute thread", "d": "5/2017"}, {"body": "tested randomevent mentioned", "d": "5/2017"}, {"body": "closing dup", "d": "5/2017"}, {"body": "issue change events clicktab input field change event triggered", "d": "8/2017"}, {"body": "thanks reporting looks like problem comes moment simple workaround use check value actually changed", "d": "5/2017"}, {"body": "maybe checking composing true create pr test bit", "d": "5/2017"}, {"body": "seem like mistake also defined flow typings unit tested right testing", "d": "5/2017"}, {"body": "linusborg thanks", "d": "5/2017"}, {"body": "please make sure read contributing guide issues bug reports feature requests encourage ask questions forum stack overflow gitter happy help", "d": "5/2017"}, {"body": "work really well external component collections could put elements like", "d": "5/2017"}, {"body": "justnobody true vuetify purpose uses prefix", "d": "5/2017"}, {"body": "vue import user usercomponents import statistics statisticscomponents export default namespaces user statistics feature want achieve", "d": "5/2017"}, {"body": "nt seem like clear name namespaces seems little long though similar note sure vue could differentiate namespace definition component definition example case could invalid component definition properties", "d": "5/2017"}, {"body": "xujiongbo yes kinda like nt like clear enough justnobody thinking uppercasing maybe something like conflicts name", "d": "5/2017"}, {"body": "another option validate prop values gets string containing colon looks", "d": "5/2017"}, {"body": "sure understand missing already namespace components look better helper done outside vue", "d": "5/2017"}, {"body": "posva hmm right nice never though obvious thank", "d": "5/2017"}, {"body": "posva would component definition like actually throws exception try namespace ps actually warning nt see raised", "d": "7/2017"}, {"body": "sebestenyb done global component definition suppose register component locally", "d": "7/2017"}, {"body": "top vue inspector devtools always shows titlecase form component", "d": "5/2017"}, {"body": "doc needs clarification intended behavior kebabcase baseline always supported two convenience conversions issue belongs vuejsorg feel free submit pr", "d": "5/2017"}, {"body": "done", "d": "5/2017"}, {"body": "choose one better manual next time please ask questions forum stackoverflow first thanks", "d": "5/2017"}, {"body": "thanks posva sure understood issue try explain better forum good one", "d": "5/2017"}, {"body": "solved problem post case someone ends looking alternative way solve using jquery still seems able update attributes vuejs though guess ca nt figure thanks posva", "d": "5/2017"}, {"body": "crswll means need parse event modifiers opposite template compiler moment sure good idea", "d": "5/2017"}, {"body": "nt know enough vue internals answer well guess attempting feature would good way figure", "d": "5/2017"}, {"body": "think complicated also need consider custom events", "d": "5/2017"}, {"body": "imo separate directive like native rewritten reason exists also handle custom events mentioned lonelyclick otherwise little sense bulk directive additional innerlibrary work redundant use cases", "d": "5/2017"}, {"body": "think could good fit avoid rewrites followed wostex suggestion although would make sense mind could open door passing around event nameshandlers would shortcut sometimes repetitive template assignments", "d": "5/2017"}, {"body": "lukeed still think part vue separate directive use", "d": "5/2017"}, {"body": "opposed idea either", "d": "5/2017"}, {"body": "modifier parsed template compiling support modifier support parse modifier runtime imo good", "d": "6/2017"}, {"body": "tried create directive code link working sample jsfiddle link work fine native events described question p nt know add support vuecreated custom events though maybe someone point right direction", "d": "6/2017"}, {"body": "partially implemented however syntax introduced primarily making easier proxy events components modifiers syntax introduce much runtime complexity supported", "d": "7/2017"}, {"body": "thanks reporting fine update package project updated recently tell still enough test locally using vuecompile works correctly", "d": "5/2017"}, {"body": "know use inside template", "d": "5/2017"}, {"body": "certain tested variant didnt notice performance difference actually works thanks", "d": "5/2017"}, {"body": "another important part could applied specific elements template even though bind initial value also could ease filtering text interpolation inside elements", "d": "5/2017"}, {"body": "difference native filter wonder", "d": "5/2017"}, {"body": "oh apologize bad missed feature thank pointing", "d": "5/2017"}, {"body": "herringtondarkholme possible define filters whole app though ie across components", "d": "5/2017"}, {"body": "please ask questions forum stackoverflow thanks", "d": "5/2017"}, {"body": "internal used part application state think fine long user follows rule", "d": "5/2017"}, {"body": "realized construct function passed parameter configuration object actually reserved async components pity live thanks unit test", "d": "5/2017"}, {"body": "fyi might interested nickmessing idea sugar via babel plugin", "d": "5/2017"}, {"body": "known behavior ssr turn correct personally recommend nontrivial project performance please refer official ssr guide wonder whether fix appropriate since patching builtin never enough copy whole context breaks original point", "d": "5/2017"}, {"body": "herringtondarkholme case real problem vmruninnewcontext output different thing like", "d": "5/2017"}, {"body": "lonelyclick fixed next version using instead current behavior evaluate bundle separate context available", "d": "5/2017"}, {"body": "significantly faster looking forward new release", "d": "5/2017"}, {"body": "still please read template syntax section", "d": "5/2017"}, {"body": "worth noting link filters outdated returns search results github", "d": "5/2017"}, {"body": "rpkilby would kind please start new issue vuejsorg website repo problem scott", "d": "5/2017"}, {"body": "javascript evaluates", "d": "4/2017"}, {"body": "sprite consider second parameter always center also set", "d": "4/2017"}, {"body": "mean use instead", "d": "4/2017"}, {"body": "thanks works", "d": "4/2017"}, {"body": "get idea using functions mixins mixins must plain objects", "d": "4/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "4/2017"}, {"body": "reactivity caveat also", "d": "4/2017"}, {"body": "flippin chair thank", "d": "4/2017"}, {"body": "posva demo revised data usually get databasebut option needs frontend developer database nt allowed revise frontend developers want know next explanation meaning due limitations modern javascript original text official documents tell limitations javascript", "d": "5/2017"}, {"body": "means js built limitation want learn check", "d": "5/2017"}, {"body": "posva thanks link learn js vue", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "question bug", "d": "4/2017"}, {"body": "couldnt find answer could help please", "d": "4/2017"}, {"body": "expected reactive works modifying input dom gets computed ref exists need communicate two sibling components usually common parent siblings usually related ui really makes sense use case", "d": "4/2017"}, {"body": "writing datepicker component concept used datepicker ui want write something else datepicker component render modal template selecting value another component named input handeling opening closing modal keep final value idea things works enduser like write stuff input component want get datepicker reference handle opening closing getting value js", "d": "4/2017"}, {"body": "simply designed used inside templates like always prefer working statedata component instance references", "d": "4/2017"}, {"body": "use scoped styles", "d": "4/2017"}, {"body": "thank anyway solve dont want attribute datav appear html code like way", "d": "4/2017"}, {"body": "scope css proper nested selectors", "d": "4/2017"}, {"body": "ok scoped found really annoying thing like suppose loginpagevue inside loginpagevue loginformvue loginheadervue want style components using scss file named loginscss also need use scoped prevent problem addressed problem put scss file loginpagevue style dose apply loginform loginheader seperate file files apply approriate css file anyway solve thank", "d": "4/2017"}, {"body": "sorry issues questions support please use appropriate channels gitter chat room forum stackoverflow", "d": "4/2017"}, {"body": "explain happening error got", "d": "4/2017"}, {"body": "sorry related babel config vue know using works like webpack template", "d": "4/2017"}, {"body": "posva migrating new ssr solution worked fine using think related vue means new ssr solution breaks context nodejs imo", "d": "4/2017"}, {"body": "jounqin change caused see figured need register explicitly bundle context fixed next release", "d": "4/2017"}, {"body": "jounqin thinking think behavior preserved bundle separate context prevent affecting server process polyfills modify proper solution either explicitly attach inside bundle code like whitelist server", "d": "5/2017"}, {"body": "thanks explanation whitelisting server works fine", "d": "5/2017"}, {"body": "jounqin code example nt really understand make work correctly using", "d": "5/2017"}, {"body": "jonaskuiler vue need still using course running vue like", "d": "5/2017"}, {"body": "better use forum questions repo issues bugs suggestions scott", "d": "4/2017"}, {"body": "afaik described reactive methods thing native emit events notify observer data changed native arrayprototypepush nt reactive stuff methods", "d": "4/2017"}, {"body": "expected behavior vue nt modify modifies mutating methods observed arrays", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "ca nt use", "d": "4/2017"}, {"body": "mounted function bind data single time keep adding data items object", "d": "4/2017"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help come back open new issue find real issue", "d": "4/2017"}, {"body": "complicated decide emit component whenever value changes really think bad idea complexify api add magic something already feasible quite easily better user understands mechanism underneath fully use feature", "d": "4/2017"}, {"body": "going happen explained child component wants affect parent state explicitly important long term maintainability", "d": "4/2017"}, {"body": "another better way", "d": "3/2018"}, {"body": "create computed gettersetter within component use instead", "d": "3/2018"}, {"body": "intended need use key", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "filters inside interpolations ie mustache brackets expressions scott", "d": "4/2017"}, {"body": "case use computed property filtered array", "d": "4/2017"}, {"body": "looks like display issue probably wechat end unfortunately nt know communicate kind issues project help", "d": "4/2017"}, {"body": "posva reproduce safari ios", "d": "5/2017"}, {"body": "behaves like issue", "d": "5/2017"}, {"body": "yeah bug safari manage fix docs take look pr nt think worth time bug probably disappear future releases safari make clear completely unrelated vue though", "d": "5/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "crash firefox windows link", "d": "4/2017"}, {"body": "implicitly affecting parent mutating props exactly want avoid", "d": "4/2017"}, {"body": "maybe specify binding data prop using props like generate field called innnervalue data defalut value foo modify thisinnnervalue framework emit update value event automaticallyand modify prop value parent update innnervalueyou use sync accept change also use vmodel specify modelprop", "d": "4/2017"}, {"body": "unfortunately intended discussed many times issues short common behaviour", "d": "4/2017"}, {"body": "hmm thanks response workaround determining boolean type prop passed parent option think remove validation altogether seems like step backwards", "d": "4/2017"}, {"body": "never use template second mistake use vif slots testslot instead computed property slots reactive fixed jsfiddle", "d": "4/2017"}, {"body": "sqal thanks quick response nt know reactive possible encapsulate logic method instead writing markup", "d": "4/2017"}, {"body": "terrymun sure move logic method work method called every rerender", "d": "4/2017"}, {"body": "sqal thanks really opened eyes computed properties methods different nt know use methods like always thought meant triggered user interaction", "d": "4/2017"}, {"body": "similar", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "thx", "d": "4/2017"}, {"body": "hi think problem caused creating vnode component return temporarily output empty element solve", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "", "d": "5/2017"}, {"body": "notifications githubcom wrote receiving mentioned reply email directly view github mute thread", "d": "5/2017"}, {"body": "history", "d": "5/2017"}, {"body": "notifications githubcom wrote history receiving mentioned reply email directly view github mute thread", "d": "5/2017"}, {"body": "\u6bcf\u4e2a view vue \u6bcf\u4e2a\u5355\u9875\u9876\u5c42\u7ec4\u4ef6\u7684\u751f\u547d\u5468\u671f created link \u4e2d\u4f20\u5165\u7684\u5c31\u662f windowdocumentlocationhref", "d": "5/2017"}, {"body": "\u5c3c\u5965 notifications githubcom wrote \u6bcf\u4e2a view vue \u6bcf\u4e2a\u5355\u9875\u9876\u5c42\u7ec4\u4ef6\u7684\u751f\u547d\u5468\u671f created link \u4e2d\u4f20\u5165\u7684\u5c31\u662f windowdocumentlocationhref receiving mentioned reply email directly view github mute thread", "d": "5/2017"}, {"body": "wangxiao", "d": "5/2017"}, {"body": "\u53f7\u62fc\u63a5\u4e00\u4e2a \u8bd5\u8bd5 notifications githubcom wrote wangxiao receiving mentioned reply email directly view github mute thread", "d": "5/2017"}, {"body": "\u4f20\u7ed9\u670d\u52a1\u7aef\u7684\u53c2\u6570\u505a\u8fc7 encodeuricomponent", "d": "5/2017"}, {"body": "", "d": "8/2017"}, {"body": "\u65b0\u7248\u5fae\u4fe1\u5df2\u7ecf\u89e3\u51b3\u4e86\u8fd9\u4e2abug\u4e86 \u5728 zgcodes notifications githubcom receiving mentioned reply email directly view github mute thread", "d": "8/2017"}, {"body": "", "d": "10/2017"}, {"body": "bigbigbigbear", "d": "10/2017"}, {"body": "wangxiao \u4f60\u786e\u5b9a\u6d4b\u8bd5 ios link", "d": "10/2017"}, {"body": "", "d": "6/2018"}, {"body": "even though ca nt reproduce apparently problem safari backforward cache vue", "d": "4/2017"}, {"body": "close cherrygeqi next time make sure provide interactive repro editable repro like jsfiddle really helps even mobile issues", "d": "4/2017"}, {"body": "sorry provide jsfiddle repro may take steps repro gist minimum complete one repro download gist put root directory temporary server like request ios safari device almost repo screencast blankpagereprozip may problem safari provide workaround", "d": "4/2017"}, {"body": "think actually refetching data every time navigate home use store cache fetched data", "d": "4/2017"}, {"body": "afraid maybe nt make clear really fatal problem repros ios safari navigate back page stays blank interacting data loaded dom constructed like browser rendering bug something", "d": "4/2017"}, {"body": "reproduce ios using exact code provided", "d": "4/2017"}, {"body": "repro scroll list page important navigate detail page navigate back working hours least", "d": "4/2017"}, {"body": "ios version", "d": "4/2017"}, {"body": "ios along wechat switched wkwebview since", "d": "4/2017"}, {"body": "mentioned safari wkwebview", "d": "4/2017"}, {"body": "repros ios safari", "d": "5/2017"}, {"body": "yes problem reproducible safari app well vue", "d": "5/2017"}, {"body": "centaur found workaroud", "d": "5/2017"}, {"body": "cherrygeqi added following code data fetch least test team satisfied", "d": "5/2017"}, {"body": "yeah resolve problem cherrygeqi", "d": "7/2017"}, {"body": "ppxialetsgo workaround provided centaur works obviously individual case suggest vuejs team pay attention posva", "d": "7/2017"}, {"body": "exactly problem reproduced ios wechat wkwebview safari ca nt reproduce uiwebview wechat workaround works us", "d": "9/2017"}, {"body": "considering vue new project thread seems similar seeing primary users wont latest phones see sample vue apps simply nt render ios safari gt reproduction vue demo render ios equivalent react component please advise", "d": "10/2017"}, {"body": "problem", "d": "11/2017"}, {"body": "problem", "d": "11/2017"}, {"body": "problem", "d": "11/2017"}, {"body": "actually issue related safari instead vue check demo nt involve vue", "d": "11/2017"}, {"body": "great javoski demo indicates issue related vue safari", "d": "11/2017"}, {"body": "haowu javoski disagree safari part tried google chrome ipod touch also renders", "d": "1/2018"}, {"body": "javoski says web inspector error shown photo seems like tick read properly", "d": "1/2018"}, {"body": "hey guys problembut solved problem found problem due structure dom tree case two nested html elements think makes frame render wrong", "d": "1/2018"}, {"body": "nt know exactly issue problem sounds pretty close solution install future people googling issue might option helps", "d": "4/2018"}, {"body": "thanks workaround centaur saved hours debugging thank bro", "d": "7/2018"}, {"body": "", "d": "9/2018"}, {"body": "", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "nice catch notified evan since one edit fiddle fixed soon", "d": "4/2017"}, {"body": "posva thanks much", "d": "4/2017"}, {"body": "fixed thanks", "d": "4/2017"}, {"body": "expected behavior bad idea use expect value string", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "npm test obviously runs test using npm run dev want start dev server", "d": "4/2017"}, {"body": "trying start seems bug meant testing script trying start selenium server", "d": "4/2017"}, {"body": "tests requires starting dev server shuts tests complete", "d": "4/2017"}, {"body": "answer good", "d": "4/2017"}, {"body": "use note spread syntax transpiled using components use inbrowser compilation", "d": "4/2017"}, {"body": "marcelgwerder couple examples use inline html templates vue help sure trying wrap script tags perhaps getting requirement right", "d": "4/2017"}, {"body": "css transition supported hooks fired checkout source code maybe pointed vue transition effects documentaion add warnning dev mode using hooks", "d": "4/2017"}, {"body": "inconsistency transitions hooks fired used instead", "d": "4/2017"}, {"body": "nt matter though hooks meant animations purposes move logic hooks like", "d": "4/2017"}, {"body": "noticed would nice point vue documentation vue transitions browserdependant css transitions supported tried use js hooks animation purposes wanted animate elements using js instead transitions css transitions supported", "d": "4/2017"}, {"body": "", "d": "5/2017"}, {"body": "think wanted vif velse", "d": "4/2017"}, {"body": "posva first thank yes animation hope found keepalive write like keepalive available animation invalid write way animation available keepalive invalid know information needed make problem clear involves async request know write clear demo", "d": "4/2017"}, {"body": "mmh see yeah use transitions granular control kept alive routerviews moment sure router vue end improve come back information", "d": "4/2017"}, {"body": "ok know sure better thank much", "d": "4/2017"}, {"body": "ok need define include exclude prop keepalive first thought nt work routerview alse provide property view components foo kept alive home keep mind generate list reading routes array root component renders view need know include exclude hope helps", "d": "4/2017"}, {"body": "tried animation takes effect keepalive also takes effect keepalive takes effect components rendered want one saw vue match first checked component name option local registration name key parent components option name option available anonymous components matched vue component rendered routerview seem name imported parent tried briefly work introduced know", "d": "4/2017"}, {"body": "yeah name necessary nt work sorry ask forums", "d": "4/2017"}, {"body": "give routerview unique key like", "d": "4/2018"}, {"body": "thank casbloem solved problem sth like", "d": "5/2018"}, {"body": "solution bug", "d": "6/2018"}, {"body": "lanpangzhi work able use example show posva fiddle figure got working something like following export default name mainapp components data function return excludenames new set methods includenames return routeroptionsroutesmap r gt rcomponentsdefaultname filter name gt name amp amp thisexcludenameshas name includenames based router setup", "d": "9/2018"}, {"body": "\u8bf7\u4e0d\u8981\u7528 feature request", "d": "4/2017"}, {"body": "\u53ef\u4ee5\u6839\u636e\u8def\u7531\u7684\u4e0d\u540c \u5bf9\u540c\u4e00\u7ec4\u4ef6\u5206\u522b\u7f13\u5b58", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "\u6216 stackoverflowcom", "d": "4/2017"}, {"body": "\u5bf9\u4e8e\u4efb\u610f data typescript vue", "d": "4/2017"}, {"body": "\u8bf7\u4e0d\u8981\u628a\u95ee\u9898\u4f2a\u88c5\u6210 feature request", "d": "4/2017"}, {"body": "able achieve using dynamic name slot definition component template prefer using render function", "d": "4/2017"}, {"body": "use case differs since actually rendering slot inside component code patches slot template actual elements slots rendered component trying right write custom compiler module set scopedslots would ideal since think rare usecase ca nt figure ask forums thanks", "d": "4/2017"}, {"body": "expected behavior tamper dom generated vue especially root element use case use render function instead template", "d": "4/2017"}, {"body": "franzskuffka encountered similar problem using vue wrap google maps overlayview elements initially nt set attribute wrapping node used overlayview dom nodes rendered google map randomly wrongly got rerendered underlying observed array changed new items pushed existing items array got new items pushed realized need set help vue map dom nodes data array first tried use type uuid item value encountered error issue mentioned situation similar mounted dom node wrapper component got tampered required google maps api specifically root node style property changed changed appropriate ones display map correctly based item changed use pojo value issues solved dom nodes updated correctly underlying array change longer seeing exception mentioned issue guess pojo instance object passed around value initially used string reference helped work around issue", "d": "7/2017"}, {"body": "thank bump actually issue super easy resolve currently tackling similar issue information might valuable", "d": "7/2017"}, {"body": "throws vue warn avoid using nonprimitive value key use stringnumber value instead warning", "d": "7/2017"}, {"body": "hhmmmm", "d": "7/2017"}, {"body": "onlyurei hello met issue baidu mapand may ask resolve mean make warning", "d": "4/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "devyash works well", "d": "4/2017"}, {"body": "thanks file actually deprecated included package accident future releases include file", "d": "4/2017"}, {"body": "thank file used instead used several webpack starter kits", "d": "4/2017"}, {"body": "scriptpilot files used bundling bundle minification done parts code eg see docs", "d": "4/2017"}, {"body": "thanks", "d": "5/2017"}, {"body": "work change mounted created nt know feasible possible workaround also noticed flicker red seems less apparent", "d": "4/2017"}, {"body": "works workaround thanks lot", "d": "4/2017"}, {"body": "tested latest version works expected closing", "d": "7/2017"}, {"body": "use look console", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "sorry issue tracker support channel please ask questions gitter", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "anybody help", "d": "4/2017"}, {"body": "\u8fd9\u4e2a\u8ddf vue select", "d": "4/2017"}, {"body": "\u5982\u679c\u662f\u4e2a\u5bf9\u8c61\u88ab mutate \u548c demo \u8981 \u6709\u6e90\u7801 miminal", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "see", "d": "4/2017"}, {"body": "oh thanks", "d": "4/2017"}, {"body": "uid privateundocumented api official typings imo really want use add ts import vue declare module vuetypesvue interface vue uid number", "d": "4/2017"}, {"body": "avoid using private properties since part public api change without notice", "d": "4/2017"}, {"body": "ok figured agree know forum questions horrible preface question approved way get runtime rendered id component need integrate vue component another library library needs id progressively enhance understand ignore question general consensus admittedly limited research use", "d": "4/2017"}, {"body": "always attach id lifecycle hooks", "d": "4/2017"}, {"body": "need key console", "d": "4/2017"}, {"body": "oh data nt change give deeper look bad missing", "d": "4/2017"}, {"body": "define full nested object case dynamically set values", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "probably something emptying form next time please ask questions forum stackoverflow first btw gif valid repro share repro repository must keep strict minimal laravel edit said manage repro feel free open new issue", "d": "4/2017"}, {"body": "nt anything emptying form instead empty object pass object fields already predefined empty values works problem empty object fails update form watcher fires", "d": "4/2017"}, {"body": "short works doesnt inspect object values shown gif setdata set", "d": "4/2017"}, {"body": "try debug value disappears somewhere middle", "d": "4/2017"}, {"body": "seems like able replicate reopen new issue cleaner repro", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello problem reslove send request service plus vue phone ok please", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "vnodecontext", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "look", "d": "4/2017"}, {"body": "oum stupid thanks", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "expected behavior", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks bug report questions check forum stackoverflow", "d": "4/2017"}, {"body": "\u76ee\u6d4b\u697c\u4e3b\u8981\u88ab posva", "d": "4/2017"}, {"body": "adamshen code", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "weiyujia good person believe", "d": "4/2017"}, {"body": "missing", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "enough information", "d": "4/2017"}, {"body": "seems work webpack please provide info source map setup", "d": "4/2017"}, {"body": "using settings generated vuecli let see reproduce accurately outside project errors handled thrown another library case may something", "d": "4/2017"}, {"body": "ok trickier reproduce originally thought source locations seem work exception thrown operations however nt work nt work reliably exception thrown operations function selection attached error log also interesting occasionally get sourcemap work even situation seems inconsistent may something open webpack bug respect sourcemaps chrome changing plain seem fix problem also works fine either way suspect nt vuejs problem going close sorry", "d": "4/2017"}, {"body": "notice purejs implementation event attached window instead dropzone element never triggers attached dropzone element consequent logic fails fyi usage question", "d": "4/2017"}, {"body": "gah failed see thanks case ever helps someone answer subsequent question bind event using nt know yet suggested stackoverflow add vuejs event window", "d": "4/2017"}, {"body": "please nt disguise question bug report ask questions forum stackoverflow btw added property subscribe component el tag meant mounting vue instances dom create elements encourage read guide", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "looks like ignored value falsy casting string solves issue", "d": "4/2017"}, {"body": "sure allow slot names something else strings thought use case better use scoped slot btw", "d": "4/2017"}, {"body": "see would like see integer possible value would simplify components allow lists rendered slots rearranged using string casting works take look scoped slots documentation many thanks", "d": "4/2017"}, {"body": "components render lists one use case scoped slots", "d": "4/2017"}, {"body": "use branches want different bindings different components", "d": "4/2017"}, {"body": "instead using view controlling view use show vif show control component render right", "d": "4/2017"}, {"body": "attribute let vue know needs hydrate markup instead throwing away render scratch remove vue simply fresh clientside render causes fouc real cause short answer ca nt arbitrarily codesplit using ssr reason need ensure async components resolved starting render otherwise server rendered markup render empty placeholders async components client also need resolve async components first starting hydration otherwise hydrating markup async components definitions available yet leads mismatch currently support routebased code splitting async route components autoresolved route view rendered initial render detailed ssr guide along release explain everything better", "d": "4/2017"}, {"body": "thx explainations find another way", "d": "4/2017"}, {"body": "serverrendered attribute let vue know needs hydrate markup instead throwing away render scratch remove vue simply fresh clientside render causes fouc real cause short answer ca nt arbitrarily codesplit using ssr reason need ensure async components resolved starting render otherwise server rendered markup render empty placeholders async components client also need resolve async components first starting hydration otherwise hydrating markup async components definitions available yet leads mismatch currently support routebased code splitting vuerouter async route components autoresolved route view rendered routeronready initial render detailed ssr guide along release explain everything better", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "inactive components simply moved dom still reactive data changes set flag using hooks avoid unnecessary watcher callbacks", "d": "4/2017"}, {"body": "think mean get route object component", "d": "4/2017"}, {"body": "duplicate", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "tried using instead edit could nt try back see behaviour really strang", "d": "4/2017"}, {"body": "need images", "d": "4/2017"}, {"body": "revisited strange behaviour happens safari elements absolute position added time transitioning css property workaround applying class barebones bug", "d": "4/2017"}, {"body": "sorry actually meant add key attribute even key attribute nt work please make sure visit second revision jsfiddle safari", "d": "4/2017"}, {"body": "think open bug safari webkit bug tracker web use fiddle added", "d": "4/2017"}, {"body": "ah okay sorry missed earlier comment nt realize actually safari issue vue thanks", "d": "4/2017"}, {"body": "vue ca nt detect change see use", "d": "4/2017"}, {"body": "thanks lot", "d": "4/2017"}, {"body": "forgot around value html gets completely messed getting html browser already fixes things therefore vue sees things differently", "d": "4/2017"}, {"body": "yep thanks reply right expected would better vue give warning strange thing change template like javascript arr invalid expression class warning", "d": "4/2017"}, {"body": "possible vue detect templates parsed browser time vue sees template already normalized browser", "d": "4/2017"}, {"body": "wontfix vue templates need syntaxvalid html always quote attributes", "d": "4/2017"}, {"body": "looks like regression chrome actually reproduce without vue definitely fill issue tracker feel free use fiddle", "d": "4/2017"}, {"body": "please provide real repro", "d": "4/2017"}, {"body": "posva thank answer sure find proper place write code run webpack build files linksservices use", "d": "4/2017"}, {"body": "add repository make sure boil strict minimum please", "d": "4/2017"}, {"body": "hope fine", "d": "4/2017"}, {"body": "old version used work", "d": "4/2017"}, {"body": "ow shit guess alias file added branch", "d": "4/2017"}, {"body": "nt see bug nt think qualifies feature request either requested behaviour works please ask support questions forumvuejsorg stack overflow etc", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "sha bi", "d": "4/2017"}, {"body": "expected named slots routerview component check docs help ask questions forum stackoverflow example remove part routerview component uses default slot", "d": "4/2017"}, {"body": "technically work since functional component renders inner route component needs investigation probably posted repo instead", "d": "4/2017"}, {"body": "well true since passed object passed extra argument therefore maybe included object functional components", "d": "4/2017"}, {"body": "addressed vuerouter technically expected behavior functional components forward named slots downwards useful behavior enabled", "d": "4/2017"}, {"body": "seem understand named slots used along routerview know part router nothing topic provide details please thanks advance", "d": "10/2017"}, {"body": "vuerouter issue posted wrong place usage wrong none firstlevel route components contain route expected behavior nt even make sense", "d": "4/2017"}, {"body": "thanks", "d": "4/2017"}, {"body": "available binding overwritten using use initial control boxes checked instead binding template", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "\u5f00\u53d1\u4e2d\u4e0d\u8981\u7528", "d": "4/2017"}, {"body": "cleanest pattern communicating communication let driven state common parent somehow feasible likely tightlycoupled nature case calling inside ok something like might help achieve using render functions filteringgrouping nodes programmatically", "d": "4/2017"}, {"body": "pseudo code thinking alert system nt see way current methods index router links etc asynchronous success message addalert addalert globally addalert addalert slotsdefaultforeach v gt checks empty text nodes vtagundefined amp amp vtextundefined return checks see normal html nonempty text nodes vcomponentoptionsundefined defaultconpush v return let tagvcomponentoptionstag sort tag", "d": "4/2017"}, {"body": "example alert component take strings components render fns", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "thanks posted feature request vuejsorg", "d": "4/2017"}, {"body": "cheers evan posted", "d": "4/2017"}, {"body": "higher priority applied individually repeated item rather whole list wrap outer explicit priorities html", "d": "4/2017"}, {"body": "like compilelevel directives therefore available inside render fns", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "read issue instructions please", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "expression syntax defined filters appended valid javascript bringing filters javascript going happen already use javascript expressions", "d": "4/2017"}, {"body": "gave look nt find anything looks like question bug please ask forum stackoverflow turns bug come back open issue thanks", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "reproduction", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "would breaking change emit callback", "d": "4/2017"}, {"body": "", "d": "11/2017"}, {"body": "would breaking change emit callback alternative would use common pattern web apis provide method emitted event called something like takes promise example js function callback evt evtwaituntil new promise function resolve reject settimeout gt resolve resolved component methods handleclick evt var promise promiseresolve evtwaituntil p gt promise p emit click evt consolelog promise promise promise desired could get robust throw error called", "d": "4/2018"}, {"body": "nice vision dlongley see beyond edge", "d": "4/2018"}, {"body": "could also pass parameter directly like js methods handleclick evt var result new promise resolve gt emit click evt resolve way mutating object nt create receiver would consume second argument", "d": "4/2018"}, {"body": "sirlancelot forces receiver call order achieve proper operation eliminates ability reject sane automatic error propagation approach allows receiver take asynchronous action necessary provides proper error propagation nt think good reason break abstraction considerable thought put design pattern various web apis eg serviceworkers would recommend approach course patterns work", "d": "4/2018"}, {"body": "dlongley awesome approach thought yet would possible use technique something like wrap around function want retried token needed refreshed problem need value returned promise second try first try value returned properly ca nt find return promise attaching tokenrefreshed event export function callafterloggedin fn storegettersloggedin return calltrytokenrefresh fn else storestatebus loggedin fn export function callaftertokenrefreshed fn storestatebus tokenrefreshed fn export function calltrytokenrefresh fn let possiblepromise fn let promise possiblepromise instanceof promise promise return possiblepromisethen null gt return callaftertokenrefreshed fn return possiblepromise", "d": "4/2018"}, {"body": "interested dlongley comment", "d": "7/2018"}, {"body": "recently issue needed one event buses wrote wrapper around standard emit using ideas thread tidies api also allows single invocation promise per emit maybe best practice totally practical afaiac poc codepen publisher subscriber", "d": "8/2018"}, {"body": "suggestion wrap paper elements vue components combined usage niche warrant adding extra binding syntax", "d": "4/2017"}, {"body": "simple components like textfields dropdown complex components multiple inputs like address input ca nt use multiple diferents attributes changed direcly user typing understand reason feauture rejected could least help create directive new vuejs never created directive sorry noob mistakes haha vuedirective two twoway true thanks", "d": "4/2017"}, {"body": "cuestion core directives made syntax custom directives case see source code reference", "d": "4/2017"}, {"body": "temporarily use think file", "d": "4/2017"}, {"body": "think file correct", "d": "4/2017"}, {"body": "vue \u539f\u5219\u4e0a\u662f\u4e00\u4e2a boolean \u4e0d\u80fd\u5904\u7406 \u4ee5\u5916\u7684\u503c\u662f flash \u7684\u95ee\u9898 \u5efa\u8bae\u7528", "d": "4/2017"}, {"body": "\u8c22\u8c22 \u60a8\u7684\u5206\u6790\u5f88\u900f\u5f7b \u521a\u624d\u6211\u7528\u4e86\u4e00\u4e2acomputed\u5c5e\u6027html \u7136\u540e\u7528vhtml html \u6682\u65f6\u7ed9\u89e3\u51b3\u4e86 \u56e0\u4e3aobject\u6807\u7b7e\u76ee\u524d\u505a\u9879\u76ee\u8fd8\u4e0d\u80fd\u4f7f\u7528 \u518d\u6b21\u611f\u8c22\u8fd9\u4e48\u53ca\u65f6\u7684\u7b54\u590d", "d": "4/2017"}, {"body": "mac fire command key pressed seems keyup event intercepted os use instead", "d": "4/2017"}, {"body": "quite interestingly specify key codes works sure mac chrome nt fire event one problem solution triggers event release cmd key enter", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "issue vue updating style vue using update line style set element originally simply erase styles related bordercolor", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e24\u4e2a \u540c\u540d\u6240\u4ee5\u53ef\u4ee5\u88ab vue \u6211\u4e2a\u4eba\u770b\u6cd5\u662f\u6839\u672c\u5c31\u4e0d\u5e94\u8be5\u5199\u8fd9\u79cd inline style style \u62bd\u53d6\u5230\u5355\u72ec\u7684 css", "d": "4/2017"}, {"body": "johnninja \u6211\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e0b", "d": "4/2017"}, {"body": "jkzing johnninja \u611f\u8c22\u4e24\u4f4d\u7684\u8ba8\u8bba \u4e5f\u611f\u8c22\u5927\u795e\u7684\u56de\u590d \u6211\u89c9\u5f97\u8fd9\u4e2a\u662fbug\u7684\u539f\u56e0\u662f \u4ed6\u5e76\u6ca1\u6709\u6309\u7167\u9884\u671f\u88ab\u6267\u884c\u6216\u8005\u6ca1\u6709\u5f97\u5230\u9884\u671f\u7684\u7ed3\u679c \u81f3\u4e8e\u5b9e\u73b0\u96be\u5ea6\u5e94\u8be5\u7b97\u662f\u53e6\u5916\u4e00\u4e2a\u7ef4\u5ea6\u8ba8\u8bba \u5bf9\u4e8e\u7ec4\u4ef6\u7684\u4f7f\u7528\u8005\u6765\u8bf4\u5e76\u4e0d\u4f1a\u5728\u4f7f\u7528\u6bcf\u4e2a\u529f\u80fd\u7684\u65f6\u5019\u90fd\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u529f\u80fd\u7684\u5b9e\u73b0\u96be\u5ea6 \u5c31\u8fd9\u4e2a\u73b0\u8c61\u6765\u8bf4 \u6211\u7684\u5efa\u8bae\u662f \u5982\u679c\u4e09\u7ea7\u7684css\u652f\u6301\u4f1a\u6709\u95ee\u9898\u6700\u597d\u662f\u5728\u7ed1\u5b9a\u7684\u65f6\u5019\u5c31\u7acb\u5373\u7684\u8b66\u544a\u6216\u8005\u5e72\u8106\u629b\u51fa\u5f02\u5e38 \u5426\u5219\u53ef\u80fd\u4f1a\u5b58\u5728\u4e00\u4e9b\u6ca1\u6709\u6d4b\u8bd5\u5230 \u800c\u76f4\u63a5\u88ab\u53d1\u5e03\u5230\u6b63\u5f0f\u73af\u5883\u7684\u95ee\u9898 \u4ee5\u4e0a\u5c5e\u4e8e\u4e2a\u4eba\u60f3\u6cd5", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "target node used vueloader detect server side rendering mode expected behavior use target electron building electron", "d": "4/2017"}, {"body": "thanks vuejs great framework app development", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "use explained demo", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "please follow issue guidelines next time open issue", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "conform issue requirements", "d": "4/2017"}, {"body": "please provide actual repro", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "\u4e0d\u8981\u7528 feature request \u7684\u6a21\u677f\u53d1\u4e0d\u662f feature request \u7684 \u5982\u679c\u662f", "d": "4/2017"}, {"body": "seems slot vnode copied across different components vnode nested copmonent updated still needs deeper investigation", "d": "4/2017"}, {"body": "somewhat expected behavior slot nodes shallowcloned render passes slot nodes clones slot nodes patches adding process however slot nodes remain nonpatched wontfix relying render functions part intended usage vnodes", "d": "4/2017"}, {"body": "use inner element", "d": "4/2017"}, {"body": "tried dynamic emits idiomatically ok mock events meant something else", "d": "8/2017"}, {"body": "good solution problem changing key triggers complete rerender component even nothing changed another way triggering transitions", "d": "1/2018"}, {"body": "seconding steffende question say following template want form transition vuex state changes add computed property retrieve use computed property key form like changes form transition like want data components b reset elements destroyed rerendered way trigger transition form without destroying data child components possible without moving data vuex state", "d": "6/2018"}, {"body": "salomoneb tried keepalive", "d": "6/2018"}, {"body": "ayzagen since form nt bound state data example wrapper reactive elements inside placing around nt work also nt work internal components form created destroyed happens children also remounted", "d": "6/2018"}, {"body": "sorry vue maintenance mode receive criticalsecurity bug fixes typing vue untyped source code considerable amount work unlikely priority team obviously open community contribution anyone wants though", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "nt use value value child component use computed properties model", "d": "4/2017"}, {"body": "code runnnable count reproduction please provide reproduction", "d": "4/2017"}, {"body": "jdbincom pop sorry bin large us save submitted code use value value error please forgive english good", "d": "4/2017"}, {"body": "sorry ca nt read whole app bundled webpack code please provide source code minimal reproduction means minimum code problem appear sending us whole app make work hard", "d": "4/2017"}, {"body": "sorry inconvenience team problem occurs new webpackhotmodulereplacementplugin develop state used create webpackcli", "d": "4/2017"}, {"body": "sure", "d": "4/2017"}, {"body": "sorry ca nt reproduce demo problemi nt know mistake think wrong", "d": "4/2017"}, {"body": "lot days", "d": "4/2017"}, {"body": "close open new issue proper reproduction succeed recreating problem", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "feature bug ca nt think case undefined useful changing would breaking change little gain", "d": "4/2017"}, {"body": "sometimes want know whether prop provided parent component check undefined", "d": "4/2017"}, {"body": "undocumented misusing computed properties method uncacheable arbitrary arguments passed vue ca nt safely assume serialize best bet implementing caching mechanism translate function", "d": "4/2017"}, {"body": "evan mentioned undocumented nt recommended try improve ways", "d": "4/2017"}, {"body": "actually would probably make sense accept array currently supported types since decorator could take different options", "d": "4/2017"}, {"body": "need call multiple watcher functions property really weird split watcher", "d": "4/2017"}, {"body": "nt think weird case radio buttons selecting different one requires parts view updated happened two parts view needed updating already two separate functions update part view said using decorators thought add decorator functions moment second one gets called overwrites first one probably possible change definition decorator works without allowing array eg replacing handler function another calls previous handler function well new one although seems bit hackish would nt support different watch options accepted array suggested comment would easy design decorator support scenario", "d": "4/2017"}, {"body": "could share radio button example please preferably plain js", "d": "4/2017"}, {"body": "trying something like much code omitted typescript pretty much ts component template template class myclass extends vue ts import vue vue import watchoptions vue import vueclasscomponent createdecorator vueclasscomponent export function watch path string options watchoptions methoddecorator const deep false immediate false options return createdecorator componentoptions handler gt typeof componentoptionswatch object componentoptionswatch objectcreate null componentoptionswatch path handler deep immediate watch watchcomponentoptionswatch path support array workarounds possible seem bit ugly", "d": "4/2017"}, {"body": "maintain array code provide vue one watch handler nt think hard either ts users vanilla vue users", "d": "4/2017"}, {"body": "example computed properties seems much better choice watchers", "d": "4/2017"}, {"body": "posva example etc also changed via text box ca nt computed property", "d": "4/2017"}, {"body": "herringtondarkholme yes possible think main issue example code gave looks like work nt means someone nt detailed knowledge vue could write code spend ages wondering nt called changes spent certain amount time plus slight overhead write dedicated function watcher would possible modify decorator definition example works sure handle case might provide different watch options decorator", "d": "4/2017"}, {"body": "probably use computed setter case point splitting methods watch hook also something similar decorator btw", "d": "4/2017"}, {"body": "ok maybe see call watch decorator definition need learn decorators first time dedicated method much extra effort still think would quite easy add support component option array would also cover case someone might want two watchers different options eg deep false true key", "d": "4/2017"}, {"body": "writing like need fix rewrite function ts component class myclass extends vue", "d": "4/2017"}, {"body": "since valid alterantive strategy seems proposed close new feature nt seem offer tangible benefit", "d": "7/2017"}, {"body": "expected behaviour vue manipulates dom need integrate kind plugins components use", "d": "4/2017"}, {"body": "thanks posva know vue manipulates dom also know vuetinymce component sure expected behaviour vuejs problem tinymce editor know similar side effects", "d": "4/2017"}, {"body": "sure expected behaviour vuejs vue replaces dom mounting javascript libs rely dom lead sorts unexpected behaviour depending lib question iniit tinymce vue preferably vue lifecycle hook like", "d": "4/2017"}, {"body": "added note nashorn", "d": "4/2017"}, {"body": "would love see happen trying use vuejs nashorn great vuejs ssr added interfaces filesystem engine externalize functionalities bind nodejs made research places abstracted currently used places abstracted currently used one usage according docs soruce code wrap script code replaced function nodejs used createbundlerunnerjs file somehow abstracted sure interface could look todo made small modifications source code get rid entry result sizes createrenderer removed path stream requires commented stream functions replaced path simple implementation browserify createrenderer commented bundlerenderer form entry browserify run createrenderer createbundlerenderer modified browserify", "d": "4/2017"}, {"body": "suprised see go would mind share us demo code", "d": "4/2017"}, {"body": "yes course share code must patient easter holiday js part try share tomorrow evening java part probably tuesday", "d": "4/2017"}, {"body": "thanks also try design implement helper nashorn see going", "d": "4/2017"}, {"body": "hey interested seeing solution well post somewhere", "d": "4/2017"}, {"body": "yeah finishing busy last days currently trying run ssr tests nashorn sure everything ok please patient", "d": "4/2017"}, {"body": "find code packagesvueserverrenderernashornvuenashornjs complete js file required dependencies polyfills nashorn tried modify vue sources less possible people build vue nashorn typing jasmine tests nashorn type windows must change path jjsexe packagejson currently works issues threads resolved soon currently commented first must resolve issues todo questions try answer", "d": "4/2017"}, {"body": "ok fixed streams issues one left issue aware read everything works big data like nt return output change rows columns everything ok sure problem another thing make wonder currently settimeout invoked thread different difference nodejs nashorn made implementation behaves like nodejs currently complicated first focus issue mentioned", "d": "4/2017"}, {"body": "everything solved big nashorn original currently nashorn performance linux machine rendertostring complete time rendertostream first chunk complete rendertostring complete time rendertostream first chunk complete rather slow", "d": "4/2017"}, {"body": "result consistent tried using react repo benchmark using jmh framework shows typically nashorn version server side render slower nodejs version thought wasting time nashorn context since vuejs use module reactjs expected better performance ssr using vuejs run ssr nashorn robust nodejs threadcontrol ability terminate render time cache across thread share benchmark code see something optimized", "d": "4/2017"}, {"body": "honestly think simply produces much better optimized machine code nashorn much done vuereact solve", "d": "4/2017"}, {"body": "nashorn directly map js jvm bytecode implementation may great enough believe things get better valuable make vuejs ssr bond specific javascript runtime nashorn etc browser serviceworker embedded javascript engine define abstract interface provide nodejs implementation default great", "d": "4/2017"}, {"body": "denghongcai yeah probably future want focus providing good stable performant nodebased ssr solution first", "d": "4/2017"}, {"body": "denghongcai benchmarks added fork vuejs use script vue packackage nt use external modules bundled without nt difference think nashorn nt optimize recursive calls beginning nt like huge stacks iterations performance good probably jit goes results nashorn rendertostring complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time maybe room improvements vue example instead recursion use iterate version", "d": "4/2017"}, {"body": "removed recursion next function async test falling benchrmarks nt use asynccomponents currently scope stacktraces looks nicer see performance improvement sadly difference using nodejs results btw generate dynamic data every loop sure nashorn nt optimize whole scripts loop see results better nodejs sure benchmarks correct simply nashorn optimizes code well loading benchmarks rendertostring complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time complete time", "d": "7/2017"}, {"body": "ca nt find optimized code repo", "d": "7/2017"}, {"body": "get hint definitely alibaba hahah", "d": "8/2017"}, {"body": "denghongcai forgot last comment push changes probably next weekend currently busy also small improvements bundle size reduction working buffersstreams java api working nashorn", "d": "8/2017"}, {"body": "fyi already shipped pure js build nt announced yet supports base renderer decoupled nodejs apis feel free try integrating contexts", "d": "9/2017"}, {"body": "given comment write something simple like run webpack nt getting messages like correct", "d": "9/2017"}, {"body": "sowhatdoido native node module ca nt webpack use instead", "d": "9/2017"}, {"body": "ah sorry thought said base renderer meant vs thanks help", "d": "9/2017"}, {"body": "injecting style done bundler level vue never purpose however injection manually vuecomponent take script template though", "d": "4/2017"}, {"body": "hi thank response looking something similar vue files great work static bundling looking dynamic components components downloaded thirdparty cdns dynamically create vue component supplying template multiple script importsrequires styles component selector heroapp template styles fontweight normal", "d": "4/2017"}, {"body": "remember package would load files runtime could nt find question ask questions forum stack overflow use global mixin load style option", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "using index key key give data objects unique id keyed properly", "d": "4/2017"}, {"body": "change key index key itemvalue profit delete function ok deletes list element clicked", "d": "4/2017"}, {"body": "wostex changed key itemvalue value equaled failed delete function ok deletes list element clicked yes deletes list element remove component incorrect want ask unique id", "d": "4/2017"}, {"body": "vvpvvp maybe create unique property object something like", "d": "4/2017"}, {"body": "yes way think ca nt aways things code many list control stuffs", "d": "4/2017"}, {"body": "please read docs using old replaced", "d": "4/2017"}, {"body": "second look probably related trackby profiling see going", "d": "4/2017"}, {"body": "look forward see answer", "d": "4/2017"}, {"body": "ok things involved repo using old vue config using outdated version aliasing vue build hardcoded dev mode suggest using scaffold fresh project move source code nt affect perf much though fundamental difference different render strategies reactivity boundaries vue vue vue reactivity boundaries perbinding every text binding tracks dependencies higher memory consumption cost advantage reactive updates extremely granular default single cell property toggled cell style binding reevaluated updated vue reactivity boundaries percomponent therefore component single watcher keeps track dependencies used every cell table every time single cell changes entire component rerendered incurring extra dependency collection render diffing costs dealt however turning every cell component way cell state updated corresponding cell component rerendered making change brings fps back one would expect drawback results slower initial render due cost creating backing component instances fact also reason mobx react test high fps also using component cell use plain elements cell also see significant fps drop fps might seem vue strategy better particular case practice extremely rare single component contain plain elements general found vue strategy better tradeoff common use cases", "d": "4/2017"}, {"body": "makes lot sense thanks explanation yes common days small granular components optimizations done percomponent basis right", "d": "4/2017"}, {"body": "thanks detailed explanation update project point test particular reflective apps things like game engines particle systems etc thinking reasonable tradeoff made vue quite surprised performance vue test see decoupling performance component composition big win simplicity side things dream world would way opt back vue reactivity boundary thats thanks", "d": "4/2017"}, {"body": "curious tools using profile vue dave", "d": "2/2018"}, {"body": "last belongs parent list unkeyed makes list partiallykeyed lead unexpected behavior simply give key fixes also using objects keys suggested either use unique strings numbers instead", "d": "4/2017"}, {"body": "using method name rename method issue go away", "d": "4/2017"}, {"body": "thinks found", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "\u8fd9\u79cd\u4e8b\u60c5\u4e0d\u8981\u5728issue\u91cc\u8bf4 \u8bba\u575b \u5176\u4ed6\u793e\u533a\u90fd\u53ef\u4ee5 \u4f46\u662f\u6211\u77e5\u9053 evan \u7528\u7684\u662f sublime", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "obviously would lead css parsing need quote url", "d": "4/2017"}, {"body": "hey thanks interest unfortunately something better handled userland standalone component specific use case css solution actually possible", "d": "4/2017"}, {"body": "directly contradicts similar question last year error event img tags deprecated", "d": "8/2018"}, {"body": "error event img tags deprecated working solution method", "d": "8/2018"}, {"body": "instead setting set prop value data use computed property uses data fallbacks data allows one single source truth rachelscodes css approach easier image fallback imo allows trigger custom js flexible", "d": "8/2018"}, {"body": "simply", "d": "4/2017"}, {"body": "thank read guide glanced nt realize information closed", "d": "4/2017"}, {"body": "child parent connected proposed api example", "d": "4/2017"}, {"body": "posva think using extend property", "d": "4/2017"}, {"body": "first really nt think introducing parallel composition mechanism way solve problem particular used conjunction slots could lead lot confusion solution ie structural component exposes outline slots imo proper abstraction problem like see actual example becomes obtrusive suggested finally template compilation functional components supported probably alleviate problem extent", "d": "4/2017"}, {"body": "use", "d": "4/2017"}, {"body": "tldr example structural component verbose proxy agree new block inheritance cause much confusion structural component solution also sympathy simplesmiler extending component namely point op issue realistic example hand nt know much functional component template wo nt include example consider generic map component say google map clone accepts many props width height zoom level latlng emits many events onzoomin onzoomout onpinclicked onmapmoved exposes many slots header zoom control view type control switching satelliteterrain pins map popup user clicks pin legend map component powerful arguably powerful god component features cohesive enough organized one component choose implement map structural component default slot rather methods op issue like splitting smallerrepresentational components users proxy propseventsslots example imaginary implementation component vue implementation template slot pin default pin go export default props width height pins methods zoomin emit zoomin emit events want create another generic map component vip users difference pins vip map shiny borders filaments quite verbose proxy eventsslots proxying slot errorprone maybe due name original slot new proxy slot already reduce verbosity proxying props seems concisely proxy events slots template similar discussion indeed sidestep tedious works using render functions jsx goes op point mixing template render function hard understanding", "d": "4/2017"}, {"body": "components tend become granular end div class thus making abstraction thin might well even meant obstructiveness would liked avoid large examples would defeat purpose please bear say need develop panel component would encapsulate look panels app generic panel title header slot content panels may lot variation panels need subtitle along title need icon title need action buttons widgets aligned opposite side title panels need header shaded color need header color body without separator panels need content padded eg text panels need content flush panel borders tables charts images etc accommodate variation decide go granular appearance components panel used starts look like accounting layout styles like flexbox good far recognize among possible variation common use cases decide write components common use cases avoid code duplication way end etc things start go little bit south want write specialized panel behaves exactly like existing one altered behaviorinterface eg extra button either need put variation parent component eg form slot prop need redefine child template completely way reuse parent template course could define components encapsulate common variations parts panel point already three levels abstraction appearance common part common panel every level requires proxy props slots events", "d": "4/2017"}, {"body": "maybe try pug like vue", "d": "6/2017"}, {"body": "also interested specific case nt granular components however several pages need different layouts currently solving using appearanceonly components op states imports stuff like etc well nothing template composition done child components inside vuerouter configuration topdown approach major drawback though results god object router configuration defines entire composition application instead modular components could inherit certain aspects parents eg template imported components", "d": "6/2017"}, {"body": "still feel extra composition model greatly muddles structure program makes mental model complex although proposed solution may make certain use cases bit manageable really convinced tradeoff", "d": "7/2017"}, {"body": "think without mechanism component composition via inheritance inherently broken since allows affordances drying template fact people using pug template language workaround proof enough imo downside course introduces another dependency whole new templating language feature would urge reopen discussion", "d": "9/2017"}, {"body": "yeah feels like extreme solution change rendering engine able set content breadcrumb child template workarounds pretty", "d": "5/2018"}, {"body": "actually simplesmiler herringtondarkholme might need way reuse render logic templates without messing data context another parallel mechanism definitely increase complexity think better introducing something like reuse template pieces", "d": "5/2018"}, {"body": "currently running kind issue extending component purpose render something canvas parent component component called canvasbox want extend component add separate logic specific use case use case also need add elements canvasbox slots extending template least filling slots without proxying props events etc like justineo said introducing another language like pug able looks overkill introducing native vuejs way filling slots would amazing btw ca nt include canvasbox component new component template logic canvasbox created hook rendering canvas using canvasbox component template would cause run logic twice last least would also love easy way extending template least filling slots component extended", "d": "6/2018"}, {"body": "also want make proposal eyes better syntax follows html default header html import base basevue export default name somecomponent extends base", "d": "6/2018"}, {"body": "use something like move dom around", "d": "4/2017"}, {"body": "falling caveat use object overcome many ways ex instead array use object also array objects", "d": "4/2017"}, {"body": "know everything posva said use vmodel bind element array input tag type checkbox nt directly set element array done vue vmodel demo use vmodel bind element array input tag type nt checkbox change detected checkbox nok case vmodel nt use vueset set element array maybe nt issue feature request please use vueset use vmodel bind element array checkbox", "d": "4/2017"}, {"body": "giving deeper look sure actually intended", "d": "4/2017"}, {"body": "think problem", "d": "4/2017"}, {"body": "maximelebreton storedvaluesthree nt exist ref", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "happy make pr", "d": "4/2017"}, {"body": "fast thanks", "d": "4/2017"}, {"body": "want online clone projects locally aware pdf may closing since directly related vue", "d": "4/2017"}, {"body": "option gitbook enable pdf download could please turn going flight today wanted read docs whilst offline vue vuex", "d": "5/2017"}, {"body": "docs gitbok clone repos really easiest way", "d": "5/2017"}, {"body": "eink device doc pdf epub would much appreciated though know requested many", "d": "6/2018"}, {"body": "yes looking reason firstworldslardar read ebook reader grid wish would readthedocs could easily download pdf guess chance somewhat generate gon na try pandoc", "d": "7/2018"}, {"body": "firstworldslardar created pdf looks fine though messages nt big issue vuejs guidepdf", "d": "7/2018"}, {"body": "codepen uses vue warning latest version vue", "d": "4/2017"}, {"body": "ping nirazul try latest version please", "d": "4/2017"}, {"body": "posva ohh sorry misleading indeed warning edge", "d": "4/2017"}, {"body": "idea maybe workaround append comments component activatesmounts store comments data", "d": "4/2017"}, {"body": "hi jblotus thanks suggestion sure mean appending comments component activates comments generated magnolia serverside via jsps page loads already part dom saying possible get comments dom component activates vue parses dom removes readded afterwards also fairly new vue would much appreciated could provide small example thanks suggestion answering probably stupid questions", "d": "4/2017"}, {"body": "examples work", "d": "4/2017"}, {"body": "yeah figured problem naturally right submitted bug report basically create threejs object parent vue app mounted super obvious retrospect", "d": "4/2017"}, {"body": "issue min", "d": "4/2017"}, {"body": "webpack \u7684 uglifyjs", "d": "4/2017"}, {"body": "please improve reproduction steps big bundle file next useless debugging especially weex involved need provide source code repository steps actually run code produce behavior described", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "4/2017"}, {"body": "\u91cc\u9762\u4e3b\u8981\u770b \u91cc\u9762\u662f desktopwindows \u7684\u6570\u91cf\u968f\u65f6\u90fd\u4f1a\u589e\u52a0\u6216\u8005\u51cf\u5c11", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "access", "d": "4/2017"}, {"body": "info", "d": "4/2017"}, {"body": "usually nt need manipulate element use case pretty much niche case since fully doable userland really nt see feature worth cost bring feature vue nt yet", "d": "4/2017"}, {"body": "ideally would make vue component lifecycle idempotent destroy process would remove listeners watchers would return dom premount state current implementation ca nt remount component component destroyed dom changed likely missing element id vue component targets", "d": "4/2017"}, {"body": "seems easily doable userland implement would something similar turbolink adaptor mixin imo pretty niche case means probably keep userland", "d": "4/2017"}, {"body": "thanks reviewing suggestions improve mixin please let us know", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "fault input idea whether space trimmed typing user might input spaces parts", "d": "4/2017"}, {"body": "hi thanks filing issue already currently need mixins nt names", "d": "4/2017"}, {"body": "already want use everywhere namespace mixins nt make sense use mixins sparingly particular mixins register unique propsdatamethods nt know component might get mixed", "d": "4/2017"}, {"body": "thanks lot clarification going use", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "see", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "looks like issue sequelize vue nothing modules", "d": "4/2017"}, {"body": "hello working expected updated hook triggers component updated nt know use case probably ask question forums maybe setting listeners enough cheers", "d": "4/2017"}, {"body": "posva imho provided sample update hook called clearly seen sample created based link provided means either bug documentation missing detail something similar able achieve newbie mins knockout js aft hours googling vue maybe something missing wrong using custom directive input element component insertedbind hooks working fine due breaking changes bad fiddler codes samples topic simply work btw originally trying achieve similar functionality binding handler override knockout js simple code possible check element special type execute custom twowaybinding setget updates call original handlers", "d": "4/2017"}, {"body": "example update works elementcomponent gets updated dom hope helps cheers", "d": "4/2017"}, {"body": "thank provided sample took time realize works way works far away reasonable behavior unlike initialized bind events imho works expected anyone used mvvm provided example event raised behavior different expected change value inside input update event raised inside demoinput directive change value inside input demoinput directive update event raised despite change changes ui element given custom directive model raising update event seems work experiences mvvm behaviour rather odd normal comparing knockoutjs f e furthermore already stated discussion started none available samples google gave link working result single working sample custom twoway binding directive hooks could save us need code working update event hook value inside model ui changes explanation modifying input code raise update hook binding rises inserted bind hook given input vuedirective demoinput isliteral false isempty false twoway true inserted function el consolelog inserted input update function el binding vnode oldvnode something based updated value also called initial value consolelog update input need add code set directly value element case special ui element use jquery call communicate bind function el binding vnode consolelog bind input elvalue bindingvalue new vue el vue data messageinput hello input", "d": "4/2017"}, {"body": "dom gets patched gets patched things change input element gets updated adjacent content updated", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "tried another angle made hidename attribute directive well click emitted uniqueid hidename directive picked still sure vue visually updating browser though guessing must something virtualdom case might bug demo anyone interested", "d": "4/2017"}, {"body": "get elements may change please next time ask questions forum stackoverflow thanks", "d": "4/2017"}, {"body": "seems working nice", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue nolink simply valid thanks", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "thanks reporting looks like problem codegen code generated event set value", "d": "4/2017"}, {"body": "wontfix vmodel expression must something assignable use case much cleaner top level vif velse instead multiple ternaries", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "template needs syntax valid html escape chars like lt gt attribute values", "d": "4/2017"}, {"body": "problem content loaded url contains javascript code causes vue error", "d": "4/2017"}, {"body": "need provide repro nt explain code clearly", "d": "4/2017"}, {"body": "hello evan sample indexhtml file following file asynchtml got following error chrome console regards viet", "d": "4/2017"}, {"body": "warning pretty clear embed scripts templates templates work vue however programmatically create tags component created hook", "d": "4/2017"}, {"body": "suppose situation nt control remote contents remote contents may contain script tags want load remote contents show widgets inside app div element achieve purpose vue", "d": "4/2017"}, {"body": "viettranme remote content vue template ie bindings directives use although needs trusted content avoid xss", "d": "4/2017"}, {"body": "moved remote content loading part mounted callback things work thanks evan", "d": "4/2017"}, {"body": "migrating legacy apps vuejs came across form like example guide vue breaks form yes nice nice warning grateful would nice way ask vue skip tags us however try workaround suggested", "d": "12/2017"}, {"body": "zeromaster viettranme add script tags using jquery documentcreateelement workaround use javascript let stripscripttag", "d": "5/2018"}, {"body": "zeromaster viettranme another option detach element script vue initialization reattach vue init helpful two inline scripts depends js hello let script problemscript children detach new vue el app data item name vuejs problemscript append script", "d": "8/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "already implemented next release", "d": "4/2017"}, {"body": "try removing using simply works fine simple jsfiddle", "d": "4/2017"}, {"body": "solves issue actually problem computed property used way showed attached screenshots maybe clearer way whats tend problem", "d": "4/2017"}, {"body": "backstory items global state main window scope sub windows computed properties dependency items global state problem sub window opened newly added properties global state wo nt notify computed properties sub window mutation", "d": "4/2017"}, {"body": "try storing items root vue using injectprovide use vuex global data people seems using electron vue fine really looks like issue nwjs", "d": "4/2017"}, {"body": "using vuex original source example vuex included sake minimalism helps refactor repro case use vuex never tried injectprovide take look using vue nwjs without issues expect cross window data binding issue one memory leak", "d": "4/2017"}, {"body": "actually keep way vuex probably way go", "d": "4/2017"}, {"body": "probably caused fundamental issues multiwindow nwjs environment keep open possible future improvement seems quite niche case low priority moment", "d": "4/2017"}, {"body": "profiling windows opened closed", "d": "4/2017"}, {"body": "think vue issue rather nwjs issue problem implementation", "d": "4/2017"}, {"body": "trying get stable implementation months nwjs produce memory leaks without implementation tough maybe vue remove deps observer instance destroyed way gc ca nt remove window suggestion change implementation also noticed global state observed vm sub window window closed properly gcd", "d": "4/2017"}, {"body": "say nwjs produce memory leads without implementation tried using different view framework rule nwjs issue worked team using nwjs year struggled memory leaks performance issues using backbone regular basis new windows exacerbate problem significantly", "d": "4/2017"}, {"body": "vue used frameworkless solution ca nt answer part question ment without vue experienced memory leaks wrote test case open close windows constantly memory leak happened even use vue windows without global state using multiple instances window global state window memory leak wo nt happen memory leak happens global state window used tried figure could problem familiar vue internals asking help really like use feature", "d": "4/2017"}, {"body": "nicmitchell using different view framework nt rule real root cause pinpointed looking js object references devtools find references held may integration issues js frameworks nw nw apps works multicontext environment default different one could expect browser single context objects nt refer trigger issues applications frameworks especially navigation window opening involved context background page living long app nt quit besides default mode nw provides mixed context mode work way browsers recommended people find multi context mode hard real benefit background page usage scenario", "d": "4/2017"}, {"body": "javascript var vm new vue data data prop computed function return computed prop consolelog data prop source", "d": "4/2017"}, {"body": "\u4f7f\u7528\u8005\u5e76\u4e0d\u5173\u5fc3\u8fd9\u4e2a\u5c5e\u6027\u662fdata\u8fd8\u662fcomputed", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "blqw \u8fd8\u6ca1\u7761\u5417 \u6211\u60f3\u4f60\u5bf9\u8ba1\u7b97\u5c5e\u6027\u7684\u7406\u89e3\u6709\u70b9\u6a21\u7cca \u4e2d\u6587\u6587\u6863 \u4ed6\u548c\u610f\u4e49\u662f\u4e0d\u540c\u7684", "d": "4/2017"}, {"body": "\u4f60\u7684\u539f\u59cb\u4f8b\u5b50\u5bf9 computed \u548c options \u5c31\u662f \u5c31\u662f options \u548c computed", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "issues", "d": "4/2017"}, {"body": "thanks report future please avoid disclosing security vulnerability details directly", "d": "4/2017"}, {"body": "nt official cli template yet still many things improving vue ssr existing features working fine many use cases ssr need properly address want provide entire template production ready setup changing bring new improvements eventually cli template think ready", "d": "4/2017"}, {"body": "nudge", "d": "7/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "4/2017"}, {"body": "looks like object array avoid use numbers property name reproduce bug", "d": "4/2017"}, {"body": "indeed safari bug reproduced without vue involved suggest opening ticket webkit bugzilla", "d": "4/2017"}, {"body": "reference looks like got patched saturday", "d": "4/2017"}, {"body": "seems happen map guessing related arrayprototype methods name", "d": "3/2017"}, {"body": "reserved html element svg element therefore prohibited run fiddle development console open see warning message", "d": "4/2017"}, {"body": "use development build development", "d": "4/2017"}, {"body": "make use include option specify property component also explained docs", "d": "4/2017"}, {"body": "actually forget work", "d": "4/2017"}, {"body": "meantime use exclude rest components workaround", "d": "4/2017"}, {"body": "posva idea yet cache invalidated use include", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "value prop nt used child render function changes lead rerender child see", "d": "3/2017"}, {"body": "expected updated hook triggered first update maybe helps understand", "d": "3/2017"}, {"body": "woooow thanks also confused abstract thought updated hook would triggered props changed literal meaning like xujiongbo said also use prop render function", "d": "3/2017"}, {"body": "trying write canvaswebgl runtime instead dom web runtime like following vuecomponent sprite props x beforecreate sprite new sprite spritex thisx spritey thisy updated spritex thisx spritey thisy render h sadly updated triggered except use xy thisx thisy return h fakeelement fakeelement mock element nodeopsjs new vue template data return x created settimeout gt thisx", "d": "3/2017"}, {"body": "key understanding difference plain object vs native objects object latter vue attempt observe mutations honestly think setting fresh new date object treating date immutable object cleaner recommend using immutable date utility lib like datefns need wrangle dates lot nt really see necessity extra reactivity api", "d": "3/2017"}, {"body": "thanks reply date scenario example understand date may necessary case using date using moment native object applies need call notify manually create new instance maybe dates nt bad may scenarios would better end day helper method people choose use thought made sense since watch available maybe mentioned using typescript sure anything moment object reactive case thanks work recently started using vue awesome think nt fit framework ok always implement project smile cheers", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "fires hidden click event able register", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "question bug report", "d": "3/2017"}, {"body": "amp javascript normal string use templete string placeholder email", "d": "3/2017"}, {"body": "plasmatium pointed", "d": "3/2017"}, {"body": "yes plasmatium right said javascript string work component inline template vue component templates tried make work html string javascript string luck ideas thanks", "d": "3/2017"}, {"body": "yes think way satisfy two kind file type maybe gulp webpack process", "d": "4/2017"}, {"body": "google brought relevant stack overflow thread thought share workaround implied thread vbind data attribute format javascript string afraid understanding vue internals works single file components alterations webpack setup", "d": "6/2018"}, {"body": "seems standard behavior form containing one input want make work single input replace cf", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "error message please", "d": "3/2017"}, {"body": "component template contain exactly one root element yijunjun try hello world", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "looks fixed", "d": "3/2017"}, {"body": "sorry try version gt thank", "d": "3/2017"}, {"body": "sorry updated version nt work either", "d": "3/2017"}, {"body": "stefanonepa sorry fault", "d": "3/2017"}, {"body": "stefanonepa maybe u need mousedown event", "d": "3/2017"}, {"body": "kingwl sure documentation reliable explanation says contextmenu fired mousedown example nt write contextmenu mousdown right button way says click event fired mousedown followed mouseup seems works agree", "d": "3/2017"}, {"body": "stefanonepa click event fired primary pointer button ie button value buttons value secondary buttons like middle right button standard mouse must fire click events click event may preceded mousedown mouseup events element disregarding changes node types eg text nodes depending upon environment configuration click event may dispatched one event types mouseover mousemove mouseout occur press release pointing device button click event may also followed dblclick event", "d": "3/2017"}, {"body": "kingwl thank standard even bit foggy interpret use mouse button modifiers cf fire click event maybe suggest add info official documentation", "d": "3/2017"}, {"body": "hmm maybe aliased compile time", "d": "3/2017"}, {"body": "would great", "d": "3/2017"}, {"body": "thank", "d": "4/2017"}, {"body": "expected vue preserves whitespaces elements unless use", "d": "3/2017"}, {"body": "please consider mentioning docs somewhere people normally expect behavior personally one spent considerable time find causing code deviate expected behavior thanks", "d": "4/2017"}, {"body": "ditto behavior quite confusing especially need determine slot simply receiving empty strings example see slot rendered even thought receives nothing given following template aaa thisemptycontent thisemptycontent always displayed slot passed thisdesc following js setup vuecomponent custom template template props desc string computed hasslotdata return slots testslot hasslot return true new vue el root data content random content emptycontent would expect last elements render element work intended", "d": "4/2017"}, {"body": "\u597d\u5427 \u6211\u4e5f\u89c9\u5f97\u8fd9\u70b9\u5e94\u8be5\u63d0\u4e00\u4e0b \u4e0d\u7136\u6709\u70b9\u5751", "d": "4/2018"}, {"body": "\u4e2d\u6587\u63cf\u8ff0\u7248\u672c problem feature solve react dom \u8fd9\u6837\u6211\u5c31\u5b9e\u73b0\u4e86 \u901a\u8fc7\u524d\u9762\u751f\u4ea7 options \u8fd9\u4e2a\u5bf9\u8c61\u8fbe\u5230\u5bf9 div \u4e5f\u8003\u8651\u5230\u4e86\u8fd9\u4e00\u70b9 \u6240\u4ee5 react \u4ed6\u4eec\u63cf\u8ff0 render \u4f46\u662f\u5728 vuetemplate vue proposed api look like \u5c31\u50cf react \u7c7b\u4f3c react \u7684", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "thanks recommended join vue official documents thanks", "d": "3/2017"}, {"body": "nt use case invalid tag working processed compilation phase", "d": "3/2017"}, {"body": "see would dup thanks", "d": "3/2017"}, {"body": "hook means component rerender prop never used render would expect component rerender changes put another way misunderstanding used", "d": "3/2017"}, {"body": "use watch dependent whether component rerendered", "d": "7/2017"}, {"body": "used still trigger changes", "d": "6/2018"}, {"body": "oh made mistake actually works", "d": "6/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "referencing pr fixes", "d": "3/2017"}, {"body": "nt manipulate dom handled vue may interested", "d": "3/2017"}, {"body": "hi still nt seen sideeffects simple pr wrote problems could change trying fully understand nt dug deep vue internals honest lack time working hard next quasar version cheers razvan", "d": "3/2017"}, {"body": "adding check patch impact performance moving elements around bothers bad idea manually manipulate dom manipulated vue", "d": "3/2017"}, {"body": "agree tampering elements managed vue totally bad idea different case element manipulated way outside vue except relocation vue still handles analysis sideeffect vue component still mapped element except element different location virtual dom works expected really care mapped element location actual dom changes within great let write actual use case value proposed change brings us table writing tooltip component still want control within context elementcomponent bind nt want actual tooltip content inheriting css parent imagine complex css affecting tooltip unexpected ways talking framework owner perspective popovers alternatives relocating element position tooltipspopovers overheadboilerplate necessary app space much use cases necessary make case stronger starting point also think added overhead additional statement negligible readytorun benchmarks use compute difference thanks", "d": "3/2017"}, {"body": "nt think impact looks like interesting example check quasar tooltips popovers better understand specific branch", "d": "3/2017"}, {"body": "contact slack speed like", "d": "3/2017"}, {"body": "\u52a8\u6001\u4fee\u6539\u6a21\u677f\u662f\u4e2a\u5b8c\u5168\u9519\u8bef\u7684\u601d\u8def", "d": "3/2017"}, {"body": "\u53ef\u4ee5\u7ed9slot\u8d4b\u503c\u4e48", "d": "3/2017"}, {"body": "would add async mixin would make component properties editable runtime lead unexpected behaviours", "d": "3/2017"}, {"body": "nt think makes much sense nothing prevents async component using mixins normally", "d": "3/2017"}, {"body": "could provide jsfiddle snippet", "d": "3/2017"}, {"body": "bug use bug reporting format nt abuse issue helper", "d": "3/2017"}, {"body": "something created userland already libs related media queries check btw nt change class based media queries change style class based media queries", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "thanks", "d": "3/2017"}, {"body": "issue related vue check demo", "d": "3/2017"}, {"body": "note really vue issue result", "d": "3/2017"}, {"body": "vue npm package includes source code technically create project vue dependency import source code directly requires flow syntax support", "d": "4/2017"}, {"body": "probably requires similar rollup config especially aliases project compile whole thing moment done fun runtime branch vue working give include source code approach go see complex thanks", "d": "4/2017"}, {"body": "alright thanks advice got runtime repository feel free play around blessedvue", "d": "4/2017"}, {"body": "nice looks fun", "d": "4/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "technically svg html embedded inside html per specs svg nt actually support works browsers like desktop chrome suggest avoid using svg", "d": "3/2017"}, {"body": "hi thanks answer running problem microsoft edge suggest need create svg realtime vuejs bind som html ex today escaped visible page since innerhtml nt part svg specs pointed forced use brackets insert value possible turn html escaping contexts solve issue way suggest", "d": "9/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "\u4f60\u8fd9\u4e2a \u5546\u57ce\u5e94\u7528 \u5546\u57ce\u5e94\u7528 vue", "d": "3/2017"}, {"body": "bumped accounts per ip limits", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "sbowman try asking gitter see someone unblock ip", "d": "3/2017"}, {"body": "looks like typo myheader component registering component locally component value object array", "d": "3/2017"}, {"body": "looks like typo myheader component registering component locally component value object array barf indeed would kind mistake caught typescript tooling suggestions thanks fast feedback sorry noise vue pleasure use", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "jsut", "d": "3/2017"}, {"body": "provide reproduction", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "nt declarations files typescript compiler load need declare general declaration vue file project generating file declaration using vuetype", "d": "3/2017"}, {"body": "thank enought answer ktsn made day without knowing would approach debugging problem node debug webpack know problem nt see generated dts file webpackvueloader logs thank boris", "d": "3/2017"}, {"body": "see compiler error log means ts compiler find typescript file declaration fyi", "d": "3/2017"}, {"body": "happy someone else question thank", "d": "3/2017"}, {"body": "thank", "d": "9/2017"}, {"body": "oh nt added official doc", "d": "9/2017"}, {"body": "ca nt seem get thing working without vuetype using vuetype mandatory", "d": "10/2017"}, {"body": "almost problem solved within visual studio code running development server got following error module build failed error could find file srcsectionssearchresultsearchresultvue solved changing webpack tsloader config like upcoming typescript template vuecli", "d": "10/2017"}, {"body": "ktsn including file allows import modules typescript files seems conflict vetur plugin components path file checking imports completely disabled use dts file also changes vue files reflected autocomplete anymore indexts appvue import vue vue import card notexistcardvue works without sfcdts file", "d": "11/2017"}, {"body": "including property fixed issue", "d": "5/2018"}, {"body": "u import component without use suffix homevue html home homets appvue typescript nt work import home viewshomevue well done import home viewshome", "d": "7/2018"}, {"body": "ktsn previously used general vue declaration vueshim linked facing problem trying augment vue type custom property prototype order vs code recognize plugin declare module vuetypesvue import vue vue import momenttimezone momenttimezone declare module vuetypesvue export interface vue moment momenttimezone moment method vue prototype tslint deal path aliases importing vue sfcs gives lots warnings terminal compile time even though app compiles fine keep support path aliases also augment vue type extending vue prototype", "d": "7/2018"}, {"body": "feature request computed properties take parameters longer cached use methods instead", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "seem blockers either locally network nothing deal vue", "d": "3/2017"}, {"body": "answer yes really deal vue china us download google font really block html render block us view vue website block us study vueyou change font address server us biggest problem like fishbone stuck", "d": "3/2017"}, {"body": "website repository wwwgithubcomvuevuejsorg would block view website would browser simply use another font", "d": "3/2017"}, {"body": "china must internet wall could view google", "d": "3/2017"}, {"body": "\u8bf7\u81ea\u884c\u7ffb\u5899", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "\u540e\u6765\u53d1\u73b0\u5176\u4ed6\u4f20\u53c2\u7684\u6307\u4ee4\u5c31\u4e0d\u62a5\u9519 div vlazyload", "d": "5/2017"}, {"body": "", "d": "1/2018"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "repro shows nothing provide minimal jsfiddle github using also please remove vuelidate make sure bug comes vue vuelidate", "d": "3/2017"}, {"body": "hey posva updated bin bit see click button get current validation state submit button appears look like refresh problem also opened issue vuelidate weird use computer debug tool see component state computed property correctly updated", "d": "3/2017"}, {"body": "yes saw case sorry going close come back find bug within vue provide minimal repro without vuelidate thanks", "d": "3/2017"}, {"body": "hi posva please see comment jsfiddle provided plain vuejs example without vuelidate hi pretty sure vuelidate issue iusse vuejs please look try click add field nothing happen change line foo click run top left corner jsfiddle click add field gt new field appear click submit nothing happens change line well bar rerun jsfiddle click add field submit background red looks like vuejs updates least one element bound static data variable updated think could problem", "d": "3/2017"}, {"body": "reactivity caveat search docs case need use vueset", "d": "3/2017"}, {"body": "sorry brief please properly explain use case reasoning behind feature request", "d": "3/2017"}, {"body": "sorry brief would help validating component passing middlewares js let middleware vueextend name middleware props value input event default checked middleware property emit error event returns string based middleware return key error false js would like passing vmodel value like let temp middleware value objectkeys temp every k gt temp k k", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "fyi return false part spec supported legacy reasons browsers rely", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "manually manipulating dom controlled vue use vue binding system instead", "d": "3/2017"}, {"body": "use computed property need new syntax", "d": "3/2017"}, {"body": "vue reactivity works plain javascript objects native methods reactive", "d": "3/2017"}, {"body": "think exact issue seems different try example whenever accessing specifically get method used onblur event clears field typing dummy field updates another data makes typed value appear commenting onblur event use problem occur seems related cached value computed function bit late tried forceupdate nexttick doesnt change behavior let know create new issue instead", "d": "8/2017"}, {"body": "oops forgot example works see else could wrong", "d": "8/2017"}, {"body": "ok found problem think problem happens thisvalue declared ie declaring fixes issue probably another unreactive value issue worth noting using methods ie instead computed works guess bestpractice would declare object keys", "d": "8/2017"}, {"body": "confirm form data keys initialized", "d": "8/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "nt get trying usage fundamentally problematic expected control options selected explicitly control another condition basically telling vue contradict", "d": "3/2017"}, {"body": "hello evan right keep track work around instead using could use thanks", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "helpful", "d": "3/2017"}, {"body": "something commit", "d": "3/2017"}, {"body": "local svg supported gh readme use external one png", "d": "3/2017"}, {"body": "fixed", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hi issue list reserved exclusively bug reports feature requests means accept usage questions find help vuejs forum vuejs gitter goes wrong need understand vue virtual dom patching algorithm transition group tag children need change tag vdom patching patch correctly fixed", "d": "3/2017"}, {"body": "fade transition effective", "d": "3/2017"}, {"body": "seems webkit bug reproduced without vue", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "use set style rect transform work style update value data work", "d": "3/2017"}, {"body": "rhyek could actually computed property", "d": "3/2017"}, {"body": "actually like idea would call adds aditional values scope already created", "d": "3/2017"}, {"body": "better create component compute heavy operation need", "d": "3/2017"}, {"body": "posva actually intended one computations wo nt need anywhere else simpler quicker offers readability complex reusable computations functionality always use approach mention", "d": "3/2017"}, {"body": "simpler quicker offers readability quicker add know syntax one thing know adds another way thing said see benefits simplicity simply think better use component even declared one component know way know powerful way abstracting things probably understand better use components", "d": "3/2017"}, {"body": "posva computing one property example would probably use nickmessing suggestion currently need complexityfunctionality tend use components agree components powerful option fact like lot cases might feel bit overkill imo one maybe two computations two nickmessing suggestion properties use view model functionality watchers methods etc template etc components", "d": "3/2017"}, {"body": "ok still simpler use component cases sat mar carlos gonzales notifications githubcom wrote posva computing one property example would probably use nickmessing suggestion currently need complexityfunctionality tend use components agree components powerful option fact like lot cases might feel bit overkill imo one maybe two computations vscope two nickmessing suggestion properties use view model functionality watchers methods etc template etc components receiving mentioned reply email directly view github mute thread", "d": "3/2017"}, {"body": "think difficult achieve issue template syntax check problem", "d": "3/2017"}, {"body": "think would nt really work happens something object returned right could instead something like", "d": "3/2017"}, {"body": "another maybe dumb example get idea posva ca nt use components one root element", "d": "3/2017"}, {"body": "actually tbody component", "d": "3/2017"}, {"body": "using method component would per meeting edit nvm see mean mar pm eduardo san martin morote lt notifications githubcom wrote actually tbody component receiving mentioned reply email directly view github mute thread", "d": "3/2017"}, {"body": "posva think cases right everyone wants write little code achieve features", "d": "3/2017"}, {"body": "rhyek asking already available different disguise jade p vfor meeting personpeoplefind person gt personid meetingpersonid meetings meetingdate personfirstname personlastname see", "d": "3/2017"}, {"body": "kinda funny definitely works think actually like syntax better something maybe mentioned guides anyways thank pbastowski feel free close issue desired", "d": "3/2017"}, {"body": "eh apparently expression ca nt broken different lines bummer", "d": "3/2017"}, {"body": "rhyek submitted pr hoping help", "d": "3/2017"}, {"body": "pbastowski fact method solve situation think add template better way", "d": "3/2017"}, {"body": "gebilaoxiong method solves reported problem use method wondering problems solve directive solve", "d": "3/2017"}, {"body": "pbastowski lot ways solve problem also want able maintain good code rather write line", "d": "3/2017"}, {"body": "gebilaoxiong statement following leading question broad apply aspect programming perhaps even life seriously agree directive would nice addition solution probably help people like need functionality hope pr gets merged", "d": "3/2017"}, {"body": "pbastowski sorry think moment better way actually inside method looks hack object always indexed correct value method finally generates code like also method supports one parameter multiple used store directive add iterations grammar also good distinction english good intention offend", "d": "3/2017"}, {"body": "gebilaoxiong yes correct method works iterating arrays like question asked issue iterating objects would work", "d": "3/2017"}, {"body": "feel may complexify template syntax computed properties methods components solve problems easily", "d": "3/2017"}, {"body": "codincat said roads lead rome want choose good way add findperson vue meetingdate findperson meetingpersonid firstname findperson meetingpersonid lastname imagine field needs calculated add properties solved use need provide component looks bit twists turns think directive good way need add new members need provide component use like vue meetingdate personfirstname personlastname", "d": "3/2017"}, {"body": "gebilaoxiong add computed properties course solve js computedmeetings return thismeetingsmap meeting gt objectassign meeting person thispeoplefind person gt personid meetingpersonid", "d": "3/2017"}, {"body": "kingwl well maybe horn make suggestion use define", "d": "3/2017"}, {"body": "rhyek gebilaoxiong afraid way hardly scalabe consider trivial example already quite verbose specify readabilty conciseness objective least proposed solution nt sweetiest syntax larger component probably worsen example also want show attendant meeting note component logic crammed directive template soon become unreadable atrocious modify note nt sadly decent syntaxtype checker expressions template correct missed awesome tool reduce complexity template one move logic vmscript contrary point proposal predicate directive also become complex consider want display person meeting available according schedule function becomes become complex projects grow requirements change larger team also worsen programmer wants skip computed property another programmer team work directive based observation promote logic template one easy directive added initially grows huge code blob different team members always lazy add abstraction", "d": "3/2017"}, {"body": "herringtondarkholme thx reply agree much", "d": "3/2017"}, {"body": "thank interest feel agree herringtondarkholme see issues feature might develop larger teamsprojects using computed property maps array pbastowski solution good ways provide functionality need close issue", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "rhyek could actually computed property", "d": "3/2017"}, {"body": "hey thanks opening issue something indeed fix using attr file input like", "d": "3/2017"}, {"body": "ignore view pr instead think add following initcomputed better handle scenario formalize pr soon", "d": "3/2017"}, {"body": "closing favor pr", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "likely unrelated vue probably related tooling used please open issue template repo instead try boil problem least stacktrace", "d": "3/2017"}, {"body": "ca nt tsx loader fixed instead support arrays", "d": "3/2017"}, {"body": "think adding overload vuejs reasonable trying get added config option typescript compiler especially true since react inferno others use variardic signature vuejs outlier jsx would add library specific option language compiler think amount three five lines code small documentation change", "d": "3/2017"}, {"body": "understand even right vue different react terms render fn args may case future libs like mithrill probably adapt array syntax instead variadic one makes sense simpler use also vdom engines use array syntax instead put nutshell keep array syntax better throw away variadic syntax prevent whole js community keep old bad syntax backwards compatibility javascript already holding lot think better add well libs", "d": "3/2017"}, {"body": "arguments variardic ugly nt know issues using syntax whereas array style know would take hit garbage collection repeated calls creating array every time render called would adverse probably marginal effect performance large application trying understand position better since suggesting adding additional signature replacing existing behavior", "d": "3/2017"}, {"body": "know would take hit garbage collection repeated calls creating array every time render called would adverse probably marginal effect performance large application love see numbers trying understand position better since suggesting adding additional signature replacing existing behavior see trying understand better array syntax simpler straightforward args vs n args idea try push one syntax forward adapt onto one keeping backwards compatibility one libs using think avoided much possible js full backward compatibility things", "d": "3/2017"}, {"body": "part nt understand notion using variardic somehow old deprecated js community whole fact react still using tells otherwise treating backward compatible implies understanding point time alternative syntaxes valid right said put issue typescript see add support jsx know significant libraries use three arg syntax render outside listed aside run numbers three arg vs variardic surprised results chrome consistently runs slightly better three arg everything else tested gave mixed results safari firefox safari mobile naive cases numeric arrays threearg always better", "d": "3/2017"}, {"body": "part nt understand notion using variardic somehow old deprecated js community whole nt said sorry looked like array syntax better deprecate one use array one everywhere libraries simply googled virtual dom github libs looked top results array syntax", "d": "3/2017"}, {"body": "array syntax type script friendly case want typescript help us validate structure", "d": "3/2017"}, {"body": "typescript capable typechecking either equally nt concern looking two examples vue unique apis nothing standardized three compare react inferno etc less dropins", "d": "3/2017"}, {"body": "argument differs one impl another first always tag array children", "d": "3/2017"}, {"body": "using rollup buble took debugging time realize transpiled jsx meet createelement signature conclusion need move forward update workaround", "d": "4/2017"}, {"body": "approach could one instead using tsx transpiler lets keep jsx output consumed eg babel tsconfigjson diff compileroptions suppressimplicitanyindexerrors true allowsyntheticdefaultimports true jsx react jsxfactory h jsx preserve use babelplugintransformvuejsx transpile example use webpack install awesometypescriptloader transpile using using babel tsconfigjson diff compileroptions target module moduleresolution node declaration false noimplicitany false sourcemap true nolib false suppressimplicitanyindexerrors true allowsyntheticdefaultimports true jsx react jsxfactory h jsx preserve babelrc javascript presets env plugins transformvuejsx webpackconfigjs diff resolve extensions js ts tsx entry app maintsx vendor vue module rules test tsx exclude nodemodules use loader awesometypescriptloader options usebabel true samples working lemoncodevuejsbysample repository particular previous configuration render sample explained step step", "d": "4/2017"}, {"body": "think would better typescript vuejs could work together directly currently happy using babel jsx plugin vueclasscomponent packages seem like lot toolchain job appears work issues put together starter project single file components packages", "d": "5/2017"}, {"body": "position ca nt use babel found able modify createelement property beforecreated hook using global plugin like", "d": "12/2017"}, {"body": "hi guys might seems nowhere write vue component inside tsx file", "d": "2/2018"}, {"body": "right coming nowhere forum chat questions encourage ask forum stack overflow discord chat happy help", "d": "2/2018"}, {"body": "intended happens almost always mistake intentionally omitting closing tags brittle imo bad practice", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "already works move input", "d": "3/2017"}, {"body": "way catch vfor option object value lest say catch selected object", "d": "3/2017"}, {"body": "sorry nt understand question question please ask forum stackoverflow may find need using search docs works like charm", "d": "3/2017"}, {"body": "thats thing guide explain particular use case performsearch fetches list objects required elsewhere code need catch selected result additional data processed events like select change catch result catch binded value", "d": "3/2017"}, {"body": "use computed value save value object read string questions please use forum", "d": "3/2017"}, {"body": "posva thanks try", "d": "3/2017"}, {"body": "html datalist feature supported vuejs architectiure", "d": "4/2018"}, {"body": "reference meteor dependency tracking system similar one used vuejs expose trackerdependency class users purpose applications find trackerautorun useful advanced facilities trackerdependency oninvalidate callbacks intended primarily package authors implementing new reactive data sources hope done vuejs", "d": "3/2017"}, {"body": "wondering would pull request fully satisfy need particular issue", "d": "3/2017"}, {"body": "totally right missed pr search earlier thanks lot", "d": "3/2017"}, {"body": "reopened since mentioned pull request abandoned", "d": "11/2017"}, {"body": "oh suppose issue might issue close move project", "d": "3/2017"}, {"body": "dafrok yes please", "d": "3/2017"}, {"body": "may problem use slot sometimes destroy works well sometimes destroy hooks triggered", "d": "3/2017"}, {"body": "vue avoid directly manipulating slot children instead controlling slot component parent", "d": "3/2017"}, {"body": "caiquecastro add select element example", "d": "3/2017"}, {"body": "thank", "d": "3/2017"}, {"body": "looks like browser problem tried emulator without vue", "d": "3/2017"}, {"body": "well kingwl demonstrated nt think much vue", "d": "3/2017"}, {"body": "get advice circumvent problem please", "d": "3/2017"}, {"body": "got problem", "d": "5/2017"}, {"body": "problem also without chinese input keeps triggering blur saw trigger etargetselectionstart sometimes thinking creating data keeps moment click input see type something delete complete fire something correct keep trying", "d": "7/2017"}, {"body": "arrayhuang try binding others events like", "d": "7/2017"}, {"body": "agreed functional similar maybe become complicated", "d": "3/2017"}, {"body": "think bit niche already directly pass components props via", "d": "3/2017"}, {"body": "nt use dataset directly attach object element", "d": "3/2017"}, {"body": "another point sure pollute dom element reasonable", "d": "3/2017"}, {"body": "dafrok actually fine long keep namespace unique remove reference", "d": "3/2017"}, {"body": "guarantee another unpredictable directive libs use namespace dom element unsafe sharing reference current binding looks private reasonable opinion anyway thx explanation hard working issue help close", "d": "3/2017"}, {"body": "way solution welcome pull request documentation met someone problem", "d": "3/2017"}, {"body": "sure prs always welcome", "d": "3/2017"}, {"body": "conditions type bugs caused vue still anyone confirm ping vuejscollaborators", "d": "3/2017"}, {"body": "confirm problem provided code ie emulator ie windows fyi ie nt cause", "d": "3/2017"}, {"body": "oh \uff49 forgot tell tested ie emulator ie windows nt really ie ca nt promise bug reproduce real ie", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "ca nt reproduce much done without repro", "d": "3/2017"}, {"body": "repro fine need used phone email inputs already tested androi works fine unfortunately nt iphone", "d": "3/2017"}, {"body": "tested ipad safari amp chrome working expected", "d": "3/2017"}, {"body": "updated reproduction self hosted server access safari seem reproduce problem however chrome ios time code using google chrome iphone", "d": "3/2017"}, {"body": "vuejscollaborators anyone confirm", "d": "3/2017"}, {"body": "elmatella works fine safari using chrome nt saved email provide submittable form email gets saved chrome", "d": "3/2017"}, {"body": "updated form submit", "d": "3/2017"}, {"body": "reproduce ios chrome", "d": "3/2017"}, {"body": "elmatella recommend open issue chrome issue tracker anyway probably issue ios chrome version firing inputchange event autocompleting keyboard suggestions", "d": "3/2017"}, {"body": "hi posva thank advice went chrome issue tracker chromium one nt even know look admit nt feel confident system huge actor community devs wonder issue appears stable version chrome shouldnt vue adapt used familiar vue core defined events listen inputs changes", "d": "3/2017"}, {"body": "ok updated snippet created email new vue el app data email methods saysomething alert olas inputchange event could update data change event also", "d": "3/2017"}, {"body": "stable versions bugs yes error reported personally reproduce nt iphone get autocomplete option emulator go could check input emits event done vanilla js autocompleting check behaviour different ios chrome desktop chrome report bug chromium issue tracker", "d": "3/2017"}, {"body": "ok submitted issue meantime going manually listen change event update model keep informed chrome team responses thank", "d": "3/2017"}, {"body": "nt see comment commenting nt sync listening change input perf impact dealing many inputs wonder good listen hand work maybe check ios chrome prevent", "d": "3/2017"}, {"body": "yes would impact perf however change event triggered much input event user unfocus input", "d": "3/2017"}, {"body": "twice amount triggers adding event listeners extra cost", "d": "3/2017"}, {"body": "nt know alone case issue still happening safari autofill running fine safari click little guy input select list one autocomplete first passed form submit nt work safari start tipping immediately click list issue component updated properly data transmit updated exemple write okboys first time submit form must valid cached safari reload page browser start writting ok second time safari offers select okboys list bellow input select graphical input value okboys real value transmitted still tipped ok cf nt change anything safari seams ignore html attribute offers autocompletion web browser edge chrome ff edit works fact way still getting error caused safari form cache juste erase form autofill cache safari preferences bypass issue issue still present component reproduce issue", "d": "11/2017"}, {"body": "still happening", "d": "3/2018"}, {"body": "tried listening change event nt able work around bug one experience trying work around bug still happening ios ios chrome app", "d": "5/2018"}, {"body": "still problem vue project may ios native autofill trigger vue models update workaround wrote directive update vue model inputs form input receives javascript native onfocus event ios autofill triggers onfocus event share code feel free improve include project autofillcatchjs directive form template notice vautofillcatch directive form element mainjs included directive globally project", "d": "5/2018"}, {"body": "also confirm vue using android chrome none html attributes supposed stop autocomplete suggested words work chrome seems ignore fix ios nt seem work chrome android current problem tap submit button form model empty autocomplete problems however input loses focus model seems update therefore tried programatic blurring nt work timeout tap button anything model wo nt solve everyones problems maybe", "d": "7/2018"}, {"body": "unfortunately jordancaudill solution work signin page still unuseable ios chrome work arounds problem", "d": "7/2018"}, {"body": "scottbedard struggling issue indeed found serious issue undermines basic usability solutions enforce field set blur event problem chrome wo nt trigger input change events upon adding content field however still update value target correctly hence try see works export default data return email null methods onblur event event amp amp thisemail eventtargetvalue thisemail eventtargetvalue", "d": "8/2018"}, {"body": "nt see benefits feature seems lot complex compared current api", "d": "3/2017"}, {"body": "ha thought saw think computed functions defined right away therefore depends external state component nt belong component", "d": "3/2017"}, {"body": "imho component definition designed static example dynamically add add reactive data fields root initialization adding api would promote high dynamism vue skeptical benefit users simply return dynamic object definition dynamic component fairly easy", "d": "3/2017"}, {"body": "nt really think good idea largely herringtondarkholme pointed", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "external styles affected vue also repro", "d": "3/2017"}, {"body": "actually issue webpack cli template turned unsafe optimizations latest template", "d": "3/2017"}, {"body": "requery element treated new element rendered updated fiddle", "d": "3/2017"}, {"body": "nt easy element updated fiddle", "d": "3/2017"}, {"body": "could fix code happens third party libraries", "d": "3/2017"}, {"body": "innerhtml used template query element inside vue app mounted", "d": "3/2017"}, {"body": "guess solution initialize libraries plugins vue thank", "d": "3/2017"}, {"body": "could create repro jsfiddlecodepen", "d": "3/2017"}, {"body": "znck sure", "d": "3/2017"}, {"body": "yes ca nt use sets maps reactive data currently see related issue", "d": "3/2017"}, {"body": "linusborg intentions supporting data types future", "d": "3/2017"}, {"body": "explained evan nt see benefits big enough justify big changes would require especially long native support lacking read ie still supported platform android also nt implemented sets yet also problem serializable something nt see going away anytime soon something store solutions take account thinking persistence localstorage said think added time future currently immediate todolist", "d": "3/2017"}, {"body": "linusborg okay gon na close issue", "d": "3/2017"}, {"body": "caused vuejs", "d": "3/2017"}, {"body": "btw try", "d": "3/2017"}, {"body": "closing vuerelated bug", "d": "3/2017"}, {"body": "thanks reply znck", "d": "3/2017"}, {"body": "missing repro", "d": "3/2017"}, {"body": "looks fixed via ping akryum znck", "d": "3/2017"}, {"body": "znck sorry fault added", "d": "3/2017"}, {"body": "apparently fixed persists reopen issue", "d": "3/2017"}, {"body": "mangling error likely using availableconsistent browsers especially transpilation", "d": "3/2017"}, {"body": "confirmation evans clue anyone steps changed utilsmixinjs js import formatter formatter let allmethods allmethods formatterformatzeropaddedname formatterformatzeropadded export default methods allmethods js import formatter formatter export default methods formatzeropadded formatterformatzeropadded everything connected literal strings vuebabelbrowser resolves way turns app working ps see references finally state matter", "d": "3/2017"}, {"body": "possible js works however something aside nt look like good idea use prop get property state save state well root getter get information", "d": "3/2017"}, {"body": "ok thanks look thought might way", "d": "3/2017"}, {"body": "sorry found solution initial release log", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "adding blur fixes sometimes problem sure think content editable makes sort twoway binding add blur event mess edit added sometimes", "d": "3/2017"}, {"body": "rather", "d": "3/2017"}, {"body": "works expected thanks feel free close think resolved observation value model string appear", "d": "3/2017"}, {"body": "mean string always string", "d": "3/2017"}, {"body": "sorry mean default value", "d": "3/2017"}, {"body": "oh ok bind value better set initial value instead dom", "d": "3/2017"}, {"body": "rows vmodel produces performance issues app trying optimize updating value blur event triggered", "d": "3/2017"}, {"body": "vmodellazy", "d": "3/2017"}, {"body": "simplesmiler oh works combinating solution posva solution works expected without delay keypress events", "d": "3/2017"}, {"body": "hey folks wanted let know ran issue pulled hair hours trying figure test case using resolves odd use first place wonder might issue virtualdom implementation edit discovered switching ti breaks something else particular use case user starts typing update state activate mode order change ui via binding problem seems user starts typing enters edit mode discards typed beforehand assumedly nt updated cell state updated another piece state dom diff reset node current state replacing user typed nogo issue reopened post new one even simpler test case", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "accidentally create wrong place", "d": "3/2017"}, {"body": "simply binding slot name nt use instead", "d": "3/2017"}, {"body": "works well u much", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "yeah esm build meant used bundler use instead find information", "d": "3/2017"}, {"body": "browsers support modules would great able import vue codepen seems work chrome safari test modules flags firefox edge defining global variable importing could something like beginning vue esm", "d": "9/2017"}, {"body": "would also like expect import vue browsers support modules seems references need dealt", "d": "10/2017"}, {"body": "fyi presence source code meant compiletime optimizations used bundler like webpack adding constant bundle would completely defeat purpose moment using native es modules browser still comes significant performance issues build step still preferred type serious usage still prioritize dist files bundlers", "d": "10/2017"}, {"body": "browsercompatible esm file would good imho vue still discovered simply bundling learned progressively using modern es features maybe new buildconfigjs way around rename breaking change generate config", "d": "10/2017"}, {"body": "also supporting browser compatible es module support would neat another thing seems work without issues add export default main vuejs make function return factory like check whether global exists undefined es modules assigning globalvue throws exception course might break compatibility bundlersbuild tools nt know", "d": "11/2017"}, {"body": "new build review pr", "d": "5/2018"}, {"body": "vue", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "actually nt depend vuex happens plain vue using single array nothing tracked display another injected property case bar updating accordingly", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "ca nt add using property mounted andor updated hooks", "d": "3/2017"}, {"body": "work mount called twice server render hydration client", "d": "3/2017"}, {"body": "nt see issue mounted hook called need know user reloaded page server request navigated within spa case nt need anything vue specific nuxt managed get working please explain better", "d": "3/2017"}, {"body": "check nuxt code ok look elegant", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "create issue vuejsvuejsorg repo", "d": "3/2017"}, {"body": "expected real element may expand text nodes multiple elements directives rely real element like work use instead", "d": "3/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "3/2017"}, {"body": "sorry brief need ajax calls filters template syntax look like handle errors rejections", "d": "3/2017"}, {"body": "dont see worthwhile usecase comparing work would require make possible async data fetching belongs component vuex imho", "d": "3/2017"}, {"body": "filters pure functions imo", "d": "3/2017"}, {"body": "closing due inactivity please come back information really think feature worth", "d": "4/2017"}, {"body": "nothing deal vue ask questions forum stackoverflow", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "3/2017"}, {"body": "window \u613f\u541b\u65e9\u65e5\u517c\u5bb9window", "d": "3/2017"}, {"body": "", "d": "5/2017"}, {"body": "", "d": "11/2017"}, {"body": "\u73af\u5883\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\u4e86", "d": "6/2018"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests ping fnlctrl question right", "d": "3/2017"}, {"body": "add repo", "d": "3/2017"}, {"body": "\u8bf7\u641e\u6e05\u695a \u7bad\u5934\u51fd\u6570\u7684", "d": "3/2017"}, {"body": "tracked multiple instances mark seems like rest lifecycle adds vm uid suffix performance tag implementing init process appears fix issue", "d": "3/2017"}, {"body": "issue seems usagesupport question want ask question please use forum gitter issue list reserved exclusively bug reports feature requests thanks", "d": "3/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "3/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "3/2017"}, {"body": "text input never designed work directly objects nt realize original object gets replaced string type something object also nt use words like bad issue descriptions makes issue sound negative helps one", "d": "3/2017"}, {"body": "okay thx reply stringify pair computed var working well thx working pretty well without stringify anymore functions", "d": "3/2017"}, {"body": "secondlevel directory", "d": "3/2017"}, {"body": "vuerouter issue screenshot reproduction", "d": "3/2017"}, {"body": "props", "d": "3/2017"}, {"body": "eliaztray hm elaborate comment", "d": "3/2017"}, {"body": "would say design contains props passed current instance default value feature intended situations want access pass currently active props eg child component including neither passed parent default value required value would child passed either way need list possible props use another use case would better include undefined props", "d": "3/2017"}, {"body": "oops close unintended", "d": "3/2017"}, {"body": "also yield false prop nt provided linusborg think close ftm reasons gave initial propasal case someone wants review morficus provides valid use case always reopen", "d": "3/2017"}, {"body": "linusborg would actually fit use case perfectly ran issue writing unit tests reusable component wanted check specific prop could set actually better trying originally thanks", "d": "3/2017"}, {"body": "need use modifier event component", "d": "3/2017"}, {"body": "huh thanks", "d": "3/2017"}, {"body": "breaking change", "d": "3/2017"}, {"body": "question easy think throwing error vue instance data function common many people may come across problem view seems verbose write try catch every data function", "d": "3/2017"}, {"body": "imo errors data handled errors computed already handled githoniel find throwing errors actually rare", "d": "3/2017"}, {"body": "apologize advance hijacking really lazy open new issue seems errors directives caught", "d": "3/2017"}, {"body": "comment closed issue likely drowned stream notifications nt expect issue fixed", "d": "3/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "3/2017"}, {"body": "please next time ask questions forum stackoverflow simply pass string binding", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required", "d": "3/2017"}, {"body": "implemented merged release", "d": "3/2017"}, {"body": "whether use selector xpath inject dependencies component tree like b c b c optionsname define provider like aprovider b c obj descendants search aprovider find obj obj contain events default data etc according idea wrote code github looking forward suggestion", "d": "4/2017"}, {"body": "kingwl sure working finally got around using component properties button component nested editor component receiving provided properties even verify props editor component yet showing functional component context", "d": "6/2017"}, {"body": "alidcastano working please open dedicated issue proper reproduction", "d": "6/2017"}, {"body": "side note vmodel hidden input nt make sense probably want bind case always binding imo change makes consistent even breaking change specific case never advised repro", "d": "3/2017"}, {"body": "posva ok great go proper format thanks", "d": "3/2017"}, {"body": "expected get syntax error js nt give object field value", "d": "3/2017"}, {"body": "thanks response evan appreciate get head around fact bound props basically javascript properties case vue concept error checking dev mode helped beginner ran issue think could worked issue received something similar happy try add think useful", "d": "3/2017"}, {"body": "yes possible checking work pr make sure include accompanying test case", "d": "3/2017"}, {"body": "lot easier anyone help simply share code instead images code base demo jsfiddle template included readme easier", "d": "3/2017"}, {"body": "may help", "d": "3/2017"}, {"body": "posva watch var named varieties worked well", "d": "3/2017"}, {"body": "fyi pasting code satisfy requirement reproduction please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required", "d": "3/2017"}, {"body": "reproduction jsfiddle interactive stumped behaves way maybe dizzy sunday head btu looks like bug", "d": "3/2017"}, {"body": "newly pushed watchers caused state changes inside updated hooks nt called coreobserverschedulerjs queue cleared updated hooks called", "d": "3/2017"}, {"body": "thanks guys", "d": "3/2017"}, {"body": "guarantee slot content rendered virtually passed regardless whether used child extremely cheap worry", "d": "3/2017"}, {"body": "also kinda work around scoped slot", "d": "3/2017"}, {"body": "simplesmiler thanks works like charm", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "3/2017"}, {"body": "think javascript variables name ca nt include var ab uncaught syntaxerror unexpected token", "d": "3/2017"}, {"body": "object properties periods want confusing inconvenient use opinion", "d": "3/2017"}, {"body": "avoid using inside templates since compiled expression may inside nested function also means simply avoid defining computed properties nonidentifier keys", "d": "3/2017"}, {"body": "doc true need update longer remove dom listeners destroying vms since supported browsers actually correctly garbagecollect", "d": "3/2017"}, {"body": "reason avoid using camelcase using indom templates", "d": "3/2017"}, {"body": "thanks much", "d": "3/2017"}, {"body": "thank filling think issue vuedevtools ping please check vuedevtools issue", "d": "3/2017"}, {"body": "closing since fix needs devtools", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required", "d": "3/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "3/2017"}, {"body": "still work", "d": "8/2017"}, {"body": "sorry nt get answer skip issue reporting guidelines please nt thanks", "d": "3/2017"}, {"body": "posva let know already marked regression simplified reproduction generally still shows problem", "d": "3/2017"}, {"body": "caused regression fixed", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "3/2017"}, {"body": "said", "d": "3/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "3/2017"}, {"body": "use github firstlythank advice helpful", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "3/2017"}, {"body": "\u79fb\u9664cookingconfjs\u5185\u7684babelpolyfill\u5e94\u8be5\u53ef\u4ee5\u89e3\u51b3", "d": "4/2017"}, {"body": "thanks suggestion obviously aware fact virtualdombased ssr slower stringbased ones one important reason vue ssr virtualdombased fully supports manually written functions well critical advanced components etc work properly lot features simply impossible plain string templates may possible use hybrid strategy render simple components using string concatenation advanced ones using current vdombased algorithm user app contains large amount templateonly components still result significant perf win", "d": "3/2017"}, {"body": "thank hybrid strategy good idea use render simple pages without affecting advanced parts hope use next version", "d": "3/2017"}, {"body": "\u4f60\u4eec\u82f1\u8bed\u771f\u68d2", "d": "4/2017"}, {"body": "\u5b57\u7b26\u4e32\u62fc\u63a5\u76f8\u6bd4 nuxt", "d": "6/2017"}, {"body": "hybrid strategy land raw render perf increase depending much template stringified due hybridness performant pure string templates pretty close scenarios renderfunctionbased components involved also note talk raw render perf means benchmarking render call terms requests per second real app many aspects involved raw render perf small portion overall time xiaogaofudao nothing nuxt nuxt wrapper top vue improvements benefit nuxt well", "d": "7/2017"}, {"body": "new hybrid strategy adopt vue automatically settings need benefit", "d": "7/2018"}, {"body": "similar question nt use advantage components render engine use string concatenation automatically", "d": "7/2018"}, {"body": "nt matter", "d": "9/2018"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "3/2017"}, {"body": "hi thanks filling issue way broad without benchmark comparison frameworks settle reasonable definition vue always dedicated improving rendering performance unfortunately issue ca nt really help us improve anything since complaint rather constructive ideas exactly improved closing", "d": "3/2017"}, {"body": "fair clarify rendering speed consistent renders fast slow taking time time list elements rendered leads believe sort memory leak somewhere extra function calls done data gc already", "d": "3/2017"}, {"body": "creating stateful components obviously slower creating spans also make sure use minified version benchmarking please", "d": "3/2017"}, {"body": "issue taking time time list elements rendered check use component box toggle components dozen times get good idea talking rendering components gets progressively slower time mentioned nt happen production build possibility memory leak kind pushed report", "d": "3/2017"}, {"body": "ok sorry title misleading indeed strange increase render time happens dev mode checked memory leak", "d": "3/2017"}, {"body": "difficult issue find describe worries", "d": "3/2017"}, {"body": "seems caused calls might leaking calls somewhere", "d": "3/2017"}, {"body": "already works", "d": "3/2017"}, {"body": "posva doesnt work functions", "d": "3/2017"}, {"body": "dude typo works fixing increment instead inrement", "d": "3/2017"}, {"body": "hi thanks filling issue root cause simulating variable vue detection logic next time someone simulates since arbitrary code user project unrealistic vue cater", "d": "3/2017"}, {"body": "hi fnlctrl thanks prompt reply sorry bother really wish reconsider problem reasons add improve compatibility vue admit inconsiderate variable definition causes problem indeed little unreasonable place code first use cases report error like could better think without side effects last said simulate tell happen exactly goes really well really ca nt stand code elegant understand unrealistic vue care stuff think great make compatible also progress nt", "d": "3/2017"}, {"body": "agree fnlctrl future someone may mock navigator ask different check make project", "d": "3/2017"}, {"body": "posva last said simulate window windownavigator tell happen exactly goes really well really ca nt stand code elegant mentioned circumstances last comment problem someone mock project goes well nt think good way fix", "d": "3/2017"}, {"body": "went well", "d": "3/2017"}, {"body": "sniffing code avoid mock cases posva fnlctrl", "d": "5/2018"}, {"body": "seems prevent preventing default behavior keypress event also keydown keyup", "d": "3/2017"}, {"body": "seeing well production upgrading seems regression prevent keys renders input field unusable mistaken unit test could nt see test result within ci build release without much time look quick amp dirty temporary fix", "d": "3/2017"}, {"body": "already resolved", "d": "3/2017"}, {"body": "nice posva issue closed", "d": "3/2017"}, {"body": "keyupenternative submitmethod", "d": "7/2018"}, {"body": "text input solved inputs", "d": "10/2018"}, {"body": "want ask vue forum issues bugs suggestions scott", "d": "3/2017"}, {"body": "want ask questions please use forum gitter issue list reserved exclusively bug reports feature requests thanks", "d": "3/2017"}, {"body": "already fixed", "d": "3/2017"}, {"body": "posva get update bug", "d": "3/2017"}, {"body": "liaotup fixed upgrade vue", "d": "3/2017"}, {"body": "naeemo upgrade vue still work", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "liaotup even using prevent related issue", "d": "3/2017"}, {"body": "hi author honour receive reply nt know ca nt use event keyboard use click event work try keydown", "d": "3/2017"}, {"body": "confirm works thanks mon mar pm evan notifications githubcom wrote liaotup even using prevent related issue receiving authored thread reply email directly view github mute thread peter valdemar m\u00f8rch", "d": "3/2017"}, {"body": "zhangsanshi fix issue commented lines watch block need portion code seems issue nt think issue vue rather logic watch block also see original example watch block called first run", "d": "3/2017"}, {"body": "math return making vue impossible watch modifications also nt need next time please ask questions forum stackoverflow first", "d": "3/2017"}, {"body": "solutionbut look like strange specify manually", "d": "3/2017"}, {"body": "expected key string number", "d": "3/2017"}, {"body": "hello please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem necessary create repository us clone minimal reproduction repositories actual projects generally accepted necessary thank also posted link twice something missing", "d": "3/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "3/2017"}, {"body": "hello thanks reporting issue please follow issue reporting guidelines provide minimal jsfiddle jsbin demonstrating issue", "d": "3/2017"}, {"body": "data vars mixin maybe confusing", "d": "3/2017"}, {"body": "reproduction means code actually run demonstrate encountering", "d": "3/2017"}, {"body": "yeah know electron app particular combo component mixin parent bit pain setup added github project would easier get run", "d": "3/2017"}, {"body": "please try isolate problem minimal reproduction otherwise could simply mistakes code rather bug vue", "d": "3/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "3/2017"}, {"body": "tried reproduce jsfiddle unable assure happening electron app one case would like download code add github", "d": "3/2017"}, {"body": "sgehrman create minimal reproduction repository electron reproduction steps readmemd", "d": "3/2017"}, {"body": "looking error nt need electron sgehrman unable reproduce isolated way probably something within code", "d": "3/2017"}, {"body": "ran similar issue sgehrman specifically receiving warning despite knowing sure component question mutating property adding issue experienced case anyone stumbles onto page similar problem may may root cause op issue using electron example solution project creating component publish npm added subdirectory host demo component github pages directory subproject scaffolded believe setup somehow resulted separate vue instances referred one component project root fix subproject instead installing vue dependency alias root component eg generated webpack template although solution specific nested scaffolded project general idea might apply widely perhaps ie nested installations probably bundlers like avoided replaced alias single suspected underlying cause investigating problem point prop mutation detected flag true point called false checks prop mutation inspecting call stack chrome devtools revealed separate sources used hence inconsistent issue rather sloppy setup hopefully helps someone else also thanks team hard work developing easily best fe framework ever", "d": "6/2017"}, {"body": "provide minimal reproduction code using jsfiddlejsbincodepen demonstrate issue could start template already includes latest version vue please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests", "d": "3/2017"}, {"body": "znck provide repro two components", "d": "3/2017"}, {"body": "example ps might helpful", "d": "3/2017"}, {"body": "probably instead please next time ask questions forum stackoverflow", "d": "3/2017"}, {"body": "lucafraser found solution case issue", "d": "6/2017"}, {"body": "grimpa unfortunately", "d": "6/2017"}, {"body": "passing string number prop need bind pass number", "d": "6/2017"}, {"body": "lucafraser reading problem seems vue version version coerce removed use minutes seconds keep days hour solution data return mathtrunc new date gettime hope help cheers", "d": "6/2017"}, {"body": "please move issue vueloader", "d": "3/2017"}, {"body": "thanks", "d": "3/2017"}, {"body": "expecting uses rollup bundle things happens supposed see anything unless errors bundling things", "d": "3/2017"}, {"body": "mean takes lot time hours npm run dev nt finish want know whther correct", "d": "3/2017"}, {"body": "strange pvue dev npm run dev fri mar nzdt vue dev homenickprojectsvue targetwebfulldev rollup w c buildconfigjs bundling bundled watching changes worked expected want", "d": "3/2017"}, {"body": "reproduce closing since likely related system vue", "d": "3/2017"}, {"body": "possible duplicate", "d": "3/2017"}, {"body": "herringtondarkholme one using outdated vue version please update version check error persists use", "d": "3/2017"}, {"body": "posva know reason users may done chinese input methods ime change ok use api", "d": "3/2017"}, {"body": "mean expect sync english letters exactly want prevent vue \u540c\u6b65\u4e86 vue vue \u4e4b\u6240\u4ee5\u4e0d\u5728 compositionupdate \u7684\u65f6\u5019\u540c\u6b65 vmodel compositionupdate", "d": "3/2017"}, {"body": "\u6216 ios \u800c", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "actually sometimes helpful get english letters composition process eg baidu instantly pop search suggestions even users middle composition matching letters pinyin", "d": "3/2017"}, {"body": "also met problem case want create fallback property use get value input input value visible problem inconsistent browsers default behavior browsers default behavior vue version", "d": "5/2017"}, {"body": "personal suggestion register manually vue issue tracking seems different imes different application logics require conflicting strategies leaving programmers manually registering listeners might still expedient", "d": "5/2017"}, {"body": "add new modifier", "d": "1/2018"}, {"body": "available possible using registry nt fully synced", "d": "3/2017"}, {"body": "npm get cli configs metricsregistry npm view vuetemplatecompiler version npm vuetemplatecompiler vuetemplatecompiler npm vuetemplatecompiler vuetemplatecompiler invalid", "d": "3/2017"}, {"body": "apologies typo packagejson confirm", "d": "3/2017"}, {"body": "yes expected behaviour vue needs root node falsl back comment code nt provide real one think made clear docs please open issue website repository githubcomvuejsvuejsorg", "d": "3/2017"}, {"body": "issue ie without event expected behavior", "d": "2/2018"}, {"body": "without event production works fine dev fun times", "d": "7/2018"}, {"body": "bug expected behaviour slots use root component rerenders passes slot nodes child component component rerender vue ca nt sure nt decided implement logic reacts new vnodes received words changing updating slot content like changing prop child rerender", "d": "3/2017"}, {"body": "better way handle", "d": "3/2017"}, {"body": "please recreate issue repository", "d": "3/2017"}, {"body": "official vue native solution come soon weex", "d": "3/2017"}, {"body": "btw git repo closing since nothing commit pr close issue", "d": "3/2017"}, {"body": "awesome nt know thank", "d": "3/2017"}, {"body": "hey sarah look quasarframework nt seen already offers cordova wrapper scott", "d": "3/2017"}, {"body": "great thanks", "d": "3/2017"}, {"body": "vue native webview implementation greater", "d": "7/2017"}, {"body": "vue native", "d": "8/2017"}, {"body": "locking prevent spam current solutions weex near future nativescript", "d": "8/2017"}, {"body": "holds component object able nt see anywhere docs think worth adding docs showing implement anchored heading example wdyt chrisvfritz", "d": "3/2017"}, {"body": "posva yeah get thx bro", "d": "3/2017"}, {"body": "let move docs repo", "d": "3/2017"}, {"body": "yes intended making slot go parent component get inner child something know using parent component aka implicit harder reason also imagine mess parent children slots content go use case better pass scoped slot", "d": "3/2017"}, {"body": "content go read issues slots nt provide inheritance fine guess thinking regarding question content always go closest component defined assuming slots distributed inner children etc use case better pass scoped slot tried trying set property inner child based parents course nt work readonly maybe overlooked somehow nt think api", "d": "3/2017"}, {"body": "props slots render function achieve anything", "d": "3/2017"}, {"body": "regarding jsfiddle example would pass component use function edit quick implementation nt know seems overly complicated something simple reason gets harder reason really would expect slots passed hierarchy", "d": "3/2017"}, {"body": "use nothing inside would slots scoped slots passed passing scoped slots simple", "d": "3/2017"}, {"body": "would work template rather render function tree component assign scoped slots container container items js created scopedslots parent scopedslots stopped working updated", "d": "3/2017"}, {"body": "think could use pass compnent template try though yet although problem reworking code render functions works fine alternatively think could use jsx vue template use templates still power render functions right templates works perfectly fine", "d": "3/2017"}, {"body": "use newly added feature provide inject parent component add child component use", "d": "3/2017"}, {"body": "nt seem work since ca nt assign inside function note provide inject bindings reactive also render functions necessarily good solution came across problem need distribute slots across multiple levels render functions impracticable large come wit components use something similar goes well distribute slots child components fe could useful objects rendered multiple components instead changing source could used components render object root slot would simplify lot things", "d": "4/2017"}, {"body": "recommend use vuex case building large app store globally get using vuex mapgetters", "d": "4/2017"}, {"body": "show talking created repo simple project shows problem slot distribution multiple levels since project simple using vuex counterproductive opinion", "d": "4/2017"}, {"body": "posva bump know closed regardless still issue easier mechanism distribute slots arbitrary componenthierarchy component render templates utilize components within hierarchy complex template using render function becomes tedious even use jsx use case render function write became almost unreadable nesting often", "d": "4/2017"}, {"body": "please nt spam ask question forums concrete samples code know repo instance show jsx think unreadable please forums", "d": "4/2017"}, {"body": "seems like intended behaviour explicitly defined props overwrite losely defined ones might cause problems recursive component dynamic component expand", "d": "3/2017"}, {"body": "linusborg opposite actually happening", "d": "3/2017"}, {"body": "oh right anyways aware anything vbind behaviour changed recently seems indended would answer", "d": "3/2017"}, {"body": "linusborg look simple demo use node issue error stack overflow props pass handy may stop recurse issues problem", "d": "3/2017"}, {"body": "please next time ask questions forum stackoverflow first issues bug reports feature requests", "d": "3/2017"}, {"body": "\u4e2d\u6587\u8f93\u5165\u6cd5\u5bfc\u81f4 vmodel \u7684\u503c\u4e0d\u66f4\u65b0 demo \u5f53\u7528\u624b\u673a\u6d4f\u89c8\u5668\u6253\u5f00 demo input submit vmodel input \u7684 value input component", "d": "3/2017"}, {"body": "\u6211\u5728 ios \u7684 \u4e0a\u76f4\u63a5\u70b9submit\u6253\u5f00\u662f\u53ef\u7528\u7684", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "3/2017"}, {"body": "change intentional thanks pointing take look", "d": "3/2017"}, {"body": "fixed via", "d": "3/2017"}, {"body": "unfortunately ca nt anything browser parses html gives vue lowercase version prop nt exist", "d": "3/2017"}, {"body": "believe achieved consider following snippet looping propoptions warning show user trying pass prop kebabcase declared propoptions camelcase sure code covers cases small poc", "d": "3/2017"}, {"body": "case feel free submit pr test clearly stated guide think necessary add warning running check props dev mode looks heavy imo impact performance dev mode", "d": "3/2017"}, {"body": "please show code", "d": "3/2017"}, {"body": "problem", "d": "3/2017"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "3/2017"}, {"body": "\u4ee3\u7801\u5728\u8fd9\u91cc \u4f46\u662f \u4e2d\u7528\u8c37\u6b4c\u6d4f\u89c8\u5668\u6253\u5f00 \u53c8\u6ca1\u6709\u8b66\u544a \u53c8\u4f1a\u51fa\u9519", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide ask forum stack overflow gitter come back open new issue find real issue thanks", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "checkout version check vuetemplatecompiler nt think string compare proper idea", "d": "3/2017"}, {"body": "try", "d": "3/2017"}, {"body": "change vuetemplatecompiler vuetemplatecompiler", "d": "3/2017"}, {"body": "reinstall", "d": "3/2017"}, {"body": "open pr vueloader version check fails loader fail webpack return error", "d": "3/2017"}, {"body": "somehow release script nt successfully publish vue core fixed reinstall", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "please make sure boil code minimal necessary providing repro really helps us eg errors fiddle unrelated reporting prototypejs overrides prototype methods say quite normal modern libs work", "d": "3/2017"}, {"body": "yes sorry updated link selected attribute removed issue prototype used around websites running magento mean way magento users able use vue site hoping kind workaround fantastic library many older projects frameworks could benefit", "d": "3/2017"}, {"body": "sure check problem worst case possible monkey patch prototypejs ok wed mar nick verwymeren notifications githubcom wrote yes sorry updated link selected attribute removed issue prototype used around websites running magento mean way magento users able use vue site hoping kind workaround fantastic library many older projects frameworks could benefit receiving commented reply email directly view github mute thread", "d": "3/2017"}, {"body": "seems prototype breaks array fixed version restoring maybe way prototype nt know", "d": "3/2017"}, {"body": "resolved updating prototypejs least version", "d": "11/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests suggestion probably posted still personally think indeed missing something obvious main reason target audience aka get probably already built nontrivial apps using techniques mentioned ask happens things need change time try replicate todomvc example using plain jquery sure understand better", "d": "3/2017"}, {"body": "neokio mvvm framework easily binds javascript html think time less syntax code also helps refactor reuse code", "d": "3/2017"}, {"body": "btw welcome discuss forumvuejsorg issue tracker simply wrong place", "d": "3/2017"}, {"body": "difference vue handled browser php handled server difference smart notassmart client difference needing api serve application needing serverside rendering page although vue also supports serverside rendering difference ui manipulated based data changes ui based dom manipulations due data changes aka suggestion try todo list jquery difference structure html behavior js design css one file instead spread place fact add graphql even actual data retrieval manipulation also within file difference able create mobile desktop apps similar code base appropriate wrappers like cordova electron dreaming making desktop mobile apps probably missed something top head scott", "d": "3/2017"}, {"body": "find inconsistency updated", "d": "3/2017"}, {"body": "showed variable obviously changes correct order dom behaviour inconsistent across browsers even render time longer render time one div nexttick seem wait next dom render updated", "d": "3/2017"}, {"body": "check console output see clicking reload next click dom updated missing something comment back else closing issue", "d": "3/2017"}, {"body": "browsers behave exactly please request reopen update fiddle better demonstrate difference", "d": "3/2017"}, {"body": "think issue andrejborstnik one case see first div briefly flickering view nexttick nt see anything nothing appears changed add breakpoints actually see first div added dom replaced quickly ca nt see reason nexttick flicker browsers nexttick tries use best technique available browser order native native native promise mutationobserver appearantly faster settimeout use microtask queue settimeout simply adds callback end envent loop queue see andrejborstnik please correct wqrong entirely sure understood issue exactly", "d": "3/2017"}, {"body": "yes different browsers render dom different intervals apparently appears inconsistent vdom batch dom changes ticks applying browser vue observe behaviour behaviour suspect changes batched dom update expected nexttick delay change second change delayed first one applied dom seen exact issue application first div hidden changing variable list length dom second fully rendered showing old list rendering long list seconds would expect first div visible second div rendered introduce delay first div always hidden second div fully rendered", "d": "3/2017"}, {"body": "habe read guide reactivity depth section async update queue might things clearer expected nexttick delay change second change delayed first one applied dom seen happening applied dom quick see nexttick uses browser microtask queue possible much less expensive already mentioned add breakpoints actually see eyes", "d": "3/2017"}, {"body": "yes read see solves issue saying browser batches dom manipulations case think wrong use functions cause behaviour nexttick function promises wait next dom tick linusborg exact issue application first div hidden changing variable list length dom second fully rendered showing old list rendering long list seconds would expect first div visible second div rendered introduce delay first div always hidden second div fully rendered", "d": "3/2017"}, {"body": "linusborg already mentioned add breakpoints actually see eyes know added dom removed immediately use added dom removed second div rendered even takes seconds use first div added immediately removed adding second div second div rendered correct changed list contents", "d": "3/2017"}, {"body": "know added dom removed immediately use settimeout added dom removed second div rendered even takes seconds use nexttick first div added immediately removed adding second div second div rendered correct contents sorry lost nt see fiddle demonstrates share better example especially part removed second div rendered even takes seconds", "d": "3/2017"}, {"body": "dont see fiddle demonstrates share better example especially part removed second div rendered even takes seconds yes want bother exact case include fiddle guess precise enough description fiddle behavior changes browsers probably different implementationsusage async queue functions", "d": "3/2017"}, {"body": "okay see talking unfortunately running time today certainly come back later", "d": "3/2017"}, {"body": "ok thank", "d": "3/2017"}, {"body": "go reopen nt get lost think least issue docs needs refinement problem relies native callback aded microtask queue browser seems run dom updated browser repaints show changes screen callback contains blocking snc task dom update neber visible although", "d": "3/2017"}, {"body": "honest nt think much nothing different implementations evergreen browsers support promises using internal implementation behavior inconsistencies caused vue rather different browsers handle microtaskstimersrepaints differently kinda like using promise api getting different results different browsers unfortunate little possible way vue try normalize behavior using microtasks simply possible backwards compatibility suggestion simply avoid relying behavior pick something behaves consistently use case", "d": "3/2017"}, {"body": "thank already using seems work fine documentation probably updated state chance events like happening maybe provide workaround", "d": "3/2017"}, {"body": "nothing different nexttick implementations evergreen browsers support promises insofar older browsers fall back settimeout using microtask queue agree update docs note blocking sync operations callback block ui updates browsers", "d": "3/2017"}, {"body": "ca nt add content named slot multiple times component nt output slot content anywhere template invalid html line please explain detail actually expect clear seems think concatenate slot contents ca nt functionality vue provides label needs repo reproduction provided work", "d": "3/2017"}, {"body": "sorry paste wrong link know invalid use like vue complain coded like", "d": "3/2017"}, {"body": "well backslash escape character javascript strings using leads expected result", "d": "3/2017"}, {"body": "scoped slot like reusable function nt even make sense nest inside", "d": "3/2017"}, {"body": "build \u51fa\u6765\u7684\u6587\u4ef6\u9700\u8981\u7528 http server \u6765 serve", "d": "3/2017"}, {"body": "usage wrong registering instance component please read component section docs carefully", "d": "3/2017"}, {"body": "code undefined", "d": "3/2017"}, {"body": "ccforward thank sorry mixed component instance", "d": "3/2017"}, {"body": "browsers reset element selected option whenever inserted dom sure think worked around userland simple fix updating hook transition element inserted dom", "d": "3/2017"}, {"body": "thanks info", "d": "3/2017"}, {"body": "time also see bug reproduce safari ios", "d": "3/2017"}, {"body": "seems bug ios handles updates dom updates microtask behavior reproduced without vue involved nt really think anything vue maybe open bug ios safari instead", "d": "3/2017"}, {"body": "xiguaxigua found way fix problem", "d": "1/2018"}, {"body": "aarbel nt found way fix", "d": "1/2018"}, {"body": "component template compiled vue one interpreted browser vue compile inside textareas text entered therefore vue tries put html inside browser probably ignores actually want write escaped version maybe could add development warning basically write unescaped html inside textarea specifically write text browser escapes convenience guess", "d": "3/2017"}, {"body": "great makes sense works escaped html nt even think escaping since worked", "d": "3/2017"}, {"body": "technically make html parser treat entire content string could use pr anyone", "d": "3/2017"}, {"body": "try sure manage try", "d": "3/2017"}, {"body": "part public api using provide minimal reproduction code using jsfiddlejsbincodepen demonstrate issue could start template already includes latest version vue please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests", "d": "3/2017"}, {"body": "merged", "d": "4/2017"}, {"body": "usually used elements relatively stable node structure rendering empty comment tags makes vnode lists diffing efficient lists stable avoids edge cases elements keyed case nt seem cause real issue small inspection annoyance unfortunately nt think would change behavior virtual scrolling lists maybe better idea use computed property return subset items needs rendered eg instead using item btw nice project demo smooth", "d": "3/2017"}, {"body": "thanks evan suggested removed added computed subset property works smooth tidy", "d": "3/2017"}, {"body": "hi ended issue also vue comments inside div css selector work comments inline read evan comment find workaround sure change since issue reported regarding subject thank adrian ps love vue sounds funny", "d": "8/2017"}, {"body": "issue css selector work", "d": "2/2018"}, {"body": "caused issues well use case migrating legacy app vue trying incrementally fairly nontrivial project trying keep html markup rendered vue component close humanly possible migration app stores state dom legacy components access jquery presence comments means hard assumptions html violated whereas code like used return given state app returns html content changed particular state switched serverrendered html vue component including posting expectation rewrite vue based badly factored legacy jquery feedback user struggled empty comment actually affecting behaviour app also suggestions workaround vue side would gratefully received", "d": "9/2018"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required", "d": "3/2017"}, {"body": "thanks replying issue detail updated added js fiddle link", "d": "3/2017"}, {"body": "sorry mistake issue vue problem nt provide id label using materialize vuecomponent addresses template props address methods changeradio alert test root emit chooseaddress thisaddressid", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guideline provide reproduction jsfiddlecodepen etc", "d": "3/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "3/2017"}, {"body": "js vuecomponent mytag functional true data return methods render h c let markup markuppush h div return h div", "d": "3/2017"}, {"body": "see please nt open new issues closed ones", "d": "3/2017"}, {"body": "sorry cant reopen", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required", "d": "3/2017"}, {"body": "please ask questions forum stackoverflow use lodash templates recommend define filtersmethods use lodash methods instead", "d": "3/2017"}, {"body": "want second option selected default suggest remove attribute nad set data operate data dom", "d": "3/2017"}, {"body": "want form still display fine js disabled", "d": "3/2017"}, {"body": "yes expected explicitly check shift pressed", "d": "3/2017"}, {"body": "think vdom run filter compare", "d": "3/2017"}, {"body": "filters supposed pure functions though javascript nt enforce pure responsibility remove side effects eg", "d": "3/2017"}, {"body": "fnlctrl reset thisaa filters functions execution whether waste efficiency", "d": "3/2017"}, {"body": "filters always called whenever render function called render function calls triggered state change care performance use instead called value depend changes consider automatic caching", "d": "3/2017"}, {"body": "would nt possible functional components nt instances state used therefore impossible transform stateful component nonfunctional uses things like lifecycles stateless functional one would like write templates instead render functions jsx functional components going support template compilation still never state", "d": "3/2017"}, {"body": "hello fnlctrl work vueloader compiles inline template functional render function see vuekeyed implementation already appears translate template javascript like angular aot look vuedistmainjs nt think anything gained manually implementing render function would like transpile inine template vuefiles compiled works", "d": "3/2017"}, {"body": "misunderstanding term functional means vue two types components stateful functional stateful components instance local state functional ones possible convert functional component stateful one way around template compilation different problem stateful component template simply compiled stateful component render function still stateful use template precompilation already done default want manually read docs vuetemplatecompiler", "d": "3/2017"}, {"body": "works build html vuejs create rows create rows append rows update every row clear swap rows itemid itemlabel import store store var store new store var starttime var lastmeasure var startmeasure function name starttime performancenow lastmeasure name var stopmeasure function var last lastmeasure lastmeasure windowsettimeout function lastmeasure null var stop performancenow consolelog last took stopstarttime export default data gt rows storedata selected storeselected methods handleclick e const action id etargetdataset action amp amp id thisaction add startmeasure add storeadd thissync stopmeasure remove id startmeasure remove storedelete id thissync stopmeasure select id startmeasure select storeselect id thissync stopmeasure run startmeasure run storerun thissync stopmeasure update startmeasure update storeupdate thissync stopmeasure runlots startmeasure runlots storerunlots thissync stopmeasure clear startmeasure clear storeclear thissync stopmeasure swaprows startmeasure swaprows storeswaprows thissync stopmeasure sync thisrows objectfreeze storedata thisselected storeselected build", "d": "3/2017"}, {"body": "basically file works template compiled render function injected default export templates compiled render functions nt mean functional please refer docs", "d": "3/2017"}, {"body": "okay thank maybe vuecompiler precompile templates like aot functional cases save interpretation templates runtime understand", "d": "3/2017"}, {"body": "yes correct", "d": "3/2017"}, {"body": "martinoppitz well function proper function require runtime support except implementation interpretation javascript code", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "3/2017"}, {"body": "please make sure follow issue reporting guideline provide reproduction jsfiddlecodepen etc", "d": "3/2017"}, {"body": "use key attribute see docs info", "d": "3/2017"}, {"body": "better use wrap", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "ccforward posva case using vif instead velse works well velse wo nt work problem confused could compare case vif velse", "d": "3/2017"}, {"body": "using element equivalent using make sense use forum questions", "d": "3/2017"}, {"body": "znck thanks got", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "hi thanks filing issue however issue tracker reserved bug reports feature requests please use gitter forum stackoverflowto ask questions thanks use option object bind attributes seems already corrected code vue vnode format helpful doc", "d": "3/2017"}, {"body": "update trick worked nogood", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue question need help debugging code encourage ask forum stackoverflow first reporting bug make sure provide minimal reproduction jsfiddle github repo thanks", "d": "3/2017"}, {"body": "problem points data object vue instance problematic example well define like order access vue instance javascript data let vm working demo", "d": "3/2017"}, {"body": "unfortunately gain adding syntax already achieve methods rather introduce new syntax something already exists without benefits still want use getter syntax use solution provided andreiglingeanu", "d": "3/2017"}, {"body": "posva way access original object used populate options demo simulate property options way get thanks andreiglingeanu clever", "d": "3/2017"}, {"body": "fine using property nt know want rely original options object probably avoid", "d": "3/2017"}, {"body": "posva sorry example clear enough code access getter inside options want rely original options object", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "posva mistake example andreiglingeanu use objectgetownpropertydescriptor get getter options data", "d": "3/2017"}, {"body": "neves better introduce one function reuse javascript export default get return generatedate use function anywhere else reusability function generatedate return datenow better comparing accessing transparent easily reuse small helpers like components", "d": "3/2017"}, {"body": "neves apply getownproperty plain javascript object wo nt work thought edit please want help open thread forums", "d": "3/2017"}, {"body": "thanks andreiglingeanu great help wanted sure nt way access original object", "d": "3/2017"}, {"body": "found maybe help", "d": "3/2017"}, {"body": "would great unwanted used transitions", "d": "3/2017"}, {"body": "also would helpful add support passing propseventattributes something like", "d": "10/2017"}, {"body": "nt seem correct jsfiddle nt use watch unwatch", "d": "3/2017"}, {"body": "oh sorry forgot click update yet usually use jsfiddle found problem miss thank comment", "d": "3/2017"}, {"body": "vue externalized request adding new mixin copy see calls fine plugin also externalized since vue check plugin already installed simple fix adding flag make sure apply mixin avoid using global mixins application code meant plugins", "d": "3/2017"}, {"body": "problem could fix", "d": "6/2017"}, {"body": "possible put exemple correct code", "d": "2/2018"}, {"body": "still issue current version default", "d": "9/2018"}, {"body": "need key element vfor rerender reuse correctly existing components", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks everything looks right content static property basically renders first element array", "d": "3/2017"}, {"body": "mistaken simply whole template static vueloader extracted socalled render function accessed via shortcut basically catches template never change", "d": "3/2017"}, {"body": "thanks guys forgot pass component spent lot time figure wrong", "d": "3/2017"}, {"body": "assuming already exists", "d": "3/2017"}, {"body": "yup aware", "d": "3/2017"}, {"body": "hen might good idea explain solve problem also generally try integrate many helper methods especially none tools like lodash alread solved far better need string key paths maybe", "d": "3/2017"}, {"body": "particular instance emitting values recursive sub components case dealing recursively nested forms root component access root pointer subcomponents bubbling values carrying path value along way path look like mentioned root form component something like nested subcomponents may end looking like would need set path root data structure may exist life threatening thought would useful understand keeping light philosophy keep running hope makes sense thanks time", "d": "3/2017"}, {"body": "used support arbitrary paths decided remove makes easy users dynamically modify structure state general want encourage users design shape state upfront work predictable state structures supports singlelevel key path already exists linusborg suggested bit verbose imo acceptable wrapped helper function", "d": "3/2017"}, {"body": "key elements look key attribute guide see example", "d": "3/2017"}, {"body": "otherwise get reused make app faster create curious race conditions like one showed", "d": "3/2017"}, {"body": "thank suggestions know work around noticed problem consider bug changes event triggers affect normal execution unless explicitly coded event target contents changed vue execution", "d": "3/2017"}, {"body": "fiddle anyone interested", "d": "3/2017"}, {"body": "thanks repro nickolasboyer selected option disappears dom think select element value default null maybe even first available option value certainly nt remain old nonexistent option value unfortunately think better keep value changing implicitly since know selects changing reset value need way", "d": "3/2017"}, {"body": "set value created", "d": "3/2017"}, {"body": "ok component passed part vnode data instead directive compiled something like particular reason need access expression", "d": "3/2017"}, {"body": "form implementation provides object components get validation errors injected object validation errors keyed expression", "d": "3/2017"}, {"body": "added raw expression able access", "d": "3/2017"}, {"body": "please open issue vuex repository think bug visit forumvuejsorg support questions also please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem necessary create repository us clone minimal reproduction repositories actual projects generally accepted necessary thank", "d": "3/2017"}, {"body": "using string interpolation template inserts value immediately defining component instead use vue template syntax forgot bind closing usage question encourage ask questions forum gitter issue tracker reserved bug reports feature requests", "d": "3/2017"}, {"body": "looks like works fine", "d": "3/2017"}, {"body": "yeah tested jsfiddle fine fault sorry bother btw got error method named methodfunc vue instance call template either ok omit prop named propfunc whose type function call omitted", "d": "3/2017"}, {"body": "reproduce guess browser specific issue update issue description include operating system browser version", "d": "3/2017"}, {"body": "updated latest macos chrome", "d": "3/2017"}, {"body": "chois would write specific version macos chrome could changed unexpectedly nt right version information anymore", "d": "3/2017"}, {"body": "reproduce using mac os chrome version plus safari version", "d": "3/2017"}, {"body": "reproducible windows latest chrome also please check weither vanillajs implementation works buggy well", "d": "3/2017"}, {"body": "using latest macos safari chrome scrolling keyboard clicking button works fine", "d": "3/2017"}, {"body": "tyurderi provide specific versions couple hours rajibahmed scrolling keyboard fine since step scrolling happens mouse wheel magic mouse tap pad ease scrolling", "d": "3/2017"}, {"body": "reproduce using macos chrome version iphone using ios latest chrome", "d": "3/2017"}, {"body": "probably intended os x stop scrolling clicking since scrolling fast better prevent click stop scrolling triggering click example without vue", "d": "3/2017"}, {"body": "hi thanks filling issue first vue nt responsible auto prefixing styles job css processors edit vue automatically add prefixes property names property values actually chrome ignoring verify simply trying browsers simply ignore css properties ca nt recognize setting style javascript applying prefixed style objects eg created tools like currently supported open pr", "d": "3/2017"}, {"body": "thanks quick response pr vue nt responsible auto prefixing styles guess misreading docs needs updated use css property requires vendor prefixes example vue automatically detect add appropriate prefixes applied styles", "d": "3/2017"}, {"body": "guess misreading docs needs updated oops sorry wrong vue automatically add prefixes property names property values perhaps noted docs", "d": "3/2017"}, {"body": "problem makes sense thanks achieve thought returning something like computed properties sure recommended way", "d": "3/2017"}, {"body": "way using tags prefixed css instead binding inline style since binding objects like requires support array value", "d": "3/2017"}, {"body": "closing pr merged", "d": "4/2017"}, {"body": "really weird checked browsers result works fine edge updates value inside modal checkbox nt get checked firefox nothing happens clicking checkbox chrome behavior edge", "d": "3/2017"}, {"body": "confirm test results minor exception chrome leaves initial radio button checked edge unchecks radio buttons upon change", "d": "3/2017"}, {"body": "modal nt need prevent default fact relationship model nothing change everything works expected", "d": "3/2017"}, {"body": "confirmed updated fiddle case others run across future modal component pulled directly vue examples corrected modal working", "d": "3/2017"}, {"body": "functional components little overhead something optimized original fiddle functional variant inline one nt strictly equal extra prop remove prop used ctxchildren instead make equivalent inline one also empty object literal created every render removed fyi second parameter omitted another big performance issue original fiddle nt actually applied nt passed rendered fixed updated fiddle changes functional items list update times much closer inline one almost except fluctuations chrisvfritz maybe notes functional components added docs like nt forget actually pass key rendered node something", "d": "3/2017"}, {"body": "fnlctrl big improvement explains discrepency functional component inline one thanks still surprised slow stateful example though given fact seems smart enough know nt need updated included functional example comparison however would really like able build item component templates computed properties etc data grid working cell components functional sense change props change seems way get performance characteristics would functional components way tree ie functional component uses nonfunctional component render function lose perf correct", "d": "3/2017"}, {"body": "still surprised slow stateful example though given fact seems smart enough know nt need updated stateful components biggest overhead creating instances fiddle though components updated new one must always created included functional example comparison however would really like able build item component templates functional component support vueloader developed blakenewman allowing us write templates functional components though eta functional component uses nonfunctional component render function lose perf correct sadly true though perfs improved bit always key nonfunctional components", "d": "3/2017"}, {"body": "stateful components biggest overhead creating instances fiddle though components updated new one must always created none components updated actually least according hook additionally size list starts takes prepend item compared prepending item list would taking extra thing seems like would nt reactive would figure matching keys seems like take amount time functional example takes number closer would nt surprised seems like something else going behind scenes updated fiddle log hook simpleitem starting list size", "d": "3/2017"}, {"body": "none components updated actually least according updated hook actually updated check adding hook list item though sure hooks nt called happens every click nt know could improvements familiar code", "d": "3/2017"}, {"body": "created hook called new item got prepended correct added item called rest items nt updated dom nt update updated hook nt called yet presence causing perf hit trying dig around code nt figured crux difference statefulstateless component rendering yet", "d": "3/2017"}, {"body": "use production build benchmarking please", "d": "3/2017"}, {"body": "posva tried similar results forgot switch back fiddle bad anyway diving bit primary difference seems invocation stateful components mess around bit hunch certain scenarios like one enough information available know actual updates happening parentelementchildren might able avoid lot quick dirty test immediately returned prepatch item components brought nonfunctional update time roughly functional update time", "d": "3/2017"}, {"body": "well expected whether stateful component needs updated still needs calculated comparing previous props vs next props resolving validating comparing props still cost good thing cost remains constant matter complex component template render function anyway consider several milliseconds overhead components acceptable may possible improve high priority imo", "d": "3/2017"}, {"body": "props need compared reactivity system already allowed us avoid calling components", "d": "3/2017"}, {"body": "reactivity system knows", "d": "3/2017"}, {"body": "fnlctrl fenduru please explain functional component uses nonfunctional component render function lose perf see nonfunctional component inside function component would slower pure functional component tree hold true comparision goes nonfunctional inside functional nonfunctional inside nonfunctional jsx b c performance gain functional component lost case b", "d": "7/2018"}, {"body": "using using please read guide deal events", "d": "3/2017"}, {"body": "nt understand could make mistake fairly used vuejs probably tired code day even took time build snippet sorry bothered thankful", "d": "3/2017"}, {"body": "nt worry happens best us", "d": "3/2017"}, {"body": "proposed", "d": "3/2017"}, {"body": "provide object reactive data inside", "d": "3/2017"}, {"body": "akryum update fiddle example think add examples docs", "d": "3/2017"}, {"body": "", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "3/2017"}, {"body": "think bug looks like ios nt firing onchange event closing launching simulator test work click", "d": "3/2017"}, {"body": "oh clicking nothing add disabled option match non selected state", "d": "3/2017"}, {"body": "maybe add note docs chrisvfritz wdyt", "d": "3/2017"}, {"body": "styledisplay none works well ff chrome perfect acceptable safari ie empty space", "d": "3/2017"}, {"body": "posva hmm came docs well decided update example thinking bug ios fix still leaning direction since behavior nothing vue could probably convinced otherwise", "d": "3/2017"}, {"body": "think good practice add nonselected option value null selects vmodel works fallback option selected browser nt display another option selected really nt html none volvo saab mercedes audi also use empty string value may better", "d": "3/2017"}, {"body": "nt really think much vue core guess suggested add tip block docs recommend always default selected option", "d": "3/2017"}, {"body": "please", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "tkt linusborg nodeenv already warning", "d": "3/2017"}, {"body": "alias cause problem use production environment", "d": "5/2017"}, {"body": "gaoqiankun hi newbie please", "d": "3/2018"}, {"body": "unhelpful thread ever problem webpack define plugin code input suggestion documentation say file put makes sense", "d": "10/2018"}, {"body": "well course nt tell since vue nt come webpack config means could written way want saved anywhere want nt know webpack config change might learn webpack know sharing information us maybe give specific tip", "d": "10/2018"}, {"body": "well issue strange may related vue component mount domview correctly production mode yet development fine using heroku ruby rails webpacker gem node environment set development asset precompilation rails assets precompile command works webpacker successfully compiling development vue debugging detecting vue production local dev packagejson seems working fine scripts framework webpack config buried gem framework presets supposed work something post code morning wake likely yet another nightmare datamodelmatrix abstraction visualized multidimensional space thanks responding trying get contact anyone days", "d": "10/2018"}, {"body": "would kindly ask open topic forumvuejsorg active pick left closed issue vue core repo wrong place specific question", "d": "10/2018"}, {"body": "mon oct thorsten l\u00fcnborg notifications githubcom wrote would kindly ask open topic forumvuejsorg active pick left closed issue vue core repo wrong place specific question receiving commented reply email directly view github mute thread", "d": "10/2018"}, {"body": "javascript completely compatible existing code nt need rewrite entire application even want switch nt want use simply use instead", "d": "3/2017"}, {"body": "fnlctrl thanks answer however adding results error probably ideas webpack vue vuex", "d": "3/2017"}, {"body": "reproduce exact versions three try something like sorry forgot mention webpack natively supports clauses best way use nt need transpilers eg babel", "d": "3/2017"}, {"body": "fnlctrl thanks record works use plugin", "d": "3/2017"}, {"body": "webpack use require anymore natively understands es module syntax parts code stay thu mar pm klaas van der molen notifications githubcom wrote fnlctrl thanks record works var vue require vue var vuex require vuex default use default plugin receiving subscribed thread reply email directly view github mute thread", "d": "3/2017"}, {"body": "xianweiliu", "d": "3/2017"}, {"body": "hi thanks filing issue however issue tracker reserved bug reports feature requests please use gitter forum stackoverflowto ask questions thanks", "d": "3/2017"}, {"body": "sandersn hello working vue extension vscode vue plugin typescript language service editors like vs code visual studio sublime emacs etc get javascript typescript completions inside vue files next version typescript support full completions vue vue options objects type annotations plugin make work inside vue files well js ts files sounds really interesting take form language server following lsp plan write client plugins editors also nt seem able handle vuex example suggesting based shape store plugin support also seems plan work js part vue sfc however also find intellisense html template indispensable would great open devoted issue plugin give bit detail feel sorry digressing original topic exciting look forward integrate work", "d": "3/2017"}, {"body": "yes use normal typescript language service jsts extended using new typescript plugin api right add entry activate plugin created repo plugin although alpha state depends modifications vuepluginwip branch microsofttypescript readme details prototyped plugin using emacs support script block vs code trying get vetur script block support working plugin existing html intellisense still work typescript able provide better intellisense inside script block supporting things like syntax inside html block still future work nt know much vue ecosystem need go learn vuex understand usage patterns open separate issue vetur repo discuss intellisense vuex usage", "d": "3/2017"}, {"body": "nevermind fault realize issue prop populated parent asynch operation nt completed time child component loads", "d": "3/2017"}, {"body": "need circular reference value option", "d": "3/2017"}, {"body": "posva data question models game world interdependent entities easiest make relations configurable binding directly option values thanks fast resolution least still going custom component since entities appear without functionally identical new web development though sure correct current implementation", "d": "3/2017"}, {"body": "tried processing css using postcss plugin", "d": "3/2017"}, {"body": "css get minified webpack postcss using vueserverrenderer vuestyleloader add css tag already working pulling css tags minifying putting back tags think would better production mode", "d": "3/2017"}, {"body": "today also bumped issue using alternative loader sass need configure vue loader options", "d": "3/2017"}, {"body": "supported", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required btw made repro", "d": "3/2017"}, {"body": "sorry thanks repro", "d": "3/2017"}, {"body": "sorry problem think caused unit test cover akryum", "d": "3/2017"}, {"body": "kingwl ok", "d": "3/2017"}, {"body": "also posts question forum stackoverflow answers", "d": "3/2017"}, {"body": "nt use beginning data property names", "d": "3/2017"}, {"body": "akryum thank extremely quick answer maybe add restriction docs", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "posva oh yes great thanks work", "d": "3/2017"}, {"body": "akryum posva one question need default null value data please see example", "d": "3/2017"}, {"body": "use case", "d": "3/2017"}, {"body": "akryum thirdparty object undefined default want use computed prop multiple checkboxes ps trying correct implement surveys checkbox vue", "d": "3/2017"}, {"body": "maybe try setting initial value undefined", "d": "3/2017"}, {"body": "yes tried something like default ok", "d": "3/2017"}, {"body": "enough right", "d": "3/2017"}, {"body": "check would handle cases like", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "ignores inherited properties guess inherited properties required case changed", "d": "3/2017"}, {"body": "like fact makes shorter version ping evan pr", "d": "3/2017"}, {"body": "hello usage question encourage ask forum gitter issue tracker reserved bug reports feature requests question mount instances one inside another mount instance multiple times different elements use components instead", "d": "3/2017"}, {"body": "ca nt would nt make sense main instance ca nt slot contents since slot content come parent also issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "3/2017"}, {"body": "please read", "d": "2/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required btw nt put component definitions assign hook instead", "d": "2/2017"}, {"body": "thanks comment update assignment also try provide repro build next days cheers", "d": "2/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "3/2017"}, {"body": "thanks", "d": "3/2017"}, {"body": "bit time milestone release upgrade turns checking sanity prop value thishasownproperty upgraded propshasownproperty instead back normal bug", "d": "3/2017"}, {"body": "thanks locating problem", "d": "2/2017"}, {"body": "implement version functionality method never publicly documented api removed", "d": "2/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue tried read translated version message nt easy follow looking code looks like like question issue please ask questions forum stackoverflow make sure problem nt lie within application code first case provide minimal reproduction bug saw nt using manual dom manipulation elements manipulated vue probably find unexpected cases case add attr call call resulting instance please check docs information search top right thanks", "d": "2/2017"}, {"body": "well remove code key want say lifecyle functional components weird sure question programming vue weird performance time processingif understand saying please reopen question wait someone else answer thank", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "first bug ie documented behavior rather usage question agree posva posted forums question simply put functional components nt lifecycles lifecycle behavior normal stateful component rendered functional component determined virtual dom diffing algorithms belongs internal implementation thus warrant given however docs clearly stated behavior manually controlled solution simply keying stateful component tl dr key components want predictable behavior lifecycles", "d": "2/2017"}, {"body": "fnlctrl", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "2/2017"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests stated contributing guidelines thanks", "d": "2/2017"}, {"body": "use actually used property name html", "d": "2/2017"}, {"body": "fnlctrl hi tried way nt work", "d": "2/2017"}, {"body": "sorry giving false answer please use forum gitter phanan said corrected one record", "d": "2/2017"}, {"body": "phanan fnlctrl \u8c22\u8c22 u rock", "d": "2/2017"}, {"body": "sure problem application code", "d": "2/2017"}, {"body": "annotation code still show error console make feel collapse", "d": "2/2017"}, {"body": "closing related vue please make sure follow issue reporting guidelines opening issue thanks", "d": "2/2017"}, {"body": "version using", "d": "2/2017"}, {"body": "since error coming please open issue vueresource repo thanks", "d": "2/2017"}, {"body": "also errors without references removing seems work fine open issue thanks", "d": "2/2017"}, {"body": "reproduce fresh install following exact steps likely something related outdated npm cache system please report cli related issues respective templates", "d": "2/2017"}, {"body": "matthiasdv problem add command fix problem", "d": "3/2017"}, {"body": "similar issue problem npm version nodejs version vue installed notice plugins section nt plugin added import extracttextplugin added plugins sections like added const extracttextplugin require extracttextwebpackplugin plugins new extracttextplugin filename utilsassetspath css name contenthash css set following option want extract css codesplit chunks main css file well result app css loaded upfront allchunks false dev webpackdevserver inline progress config buildwebpackdevconfjs one important thing add make sure installed project installed case fresh install", "d": "11/2017"}, {"body": "benchmark nt use glyphs benchmarks intended run standalone intended used elsewhere need bootstrap use proper setup per latest docs", "d": "2/2017"}, {"body": "benchmark nt use glyphs benchmarks intended run standalone intended used elsewhere benchmarks included bower package personally see reason include bower package included actually realized definition app purpose", "d": "2/2017"}, {"body": "yes", "d": "2/2017"}, {"body": "hello mityukov thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "2/2017"}, {"body": "well would probably ask issue tracker seen couple screencast folks simply assigned new data arraytype property quite unusual nt work case", "d": "2/2017"}, {"body": "mityukov encouter similar issueuse foreupdate work well hope work", "d": "2/2017"}, {"body": "hi frank actually issue vuevalidator using vue internals nothing vue core happy review functions used well used libraries like vuevalidator help solve compatibilities issues author vuevalidator kazupon probably discuss directly cheers", "d": "2/2017"}, {"body": "hi eduardo oops sorry posted issue wrong repository sorry checking vue release notes vuevalidator github pages mixed things logging github apologies reposted issue right github repo thanks swift reply cheers frank", "d": "2/2017"}, {"body": "may want use functional components performancecritical scenarios example also use virtualscrolling solutions", "d": "2/2017"}, {"body": "still thats weird", "d": "2/2017"}, {"body": "nt vue setting reactivity proxies every component taking time", "d": "2/2017"}, {"body": "use minified version get real benchmark although use compiled templates", "d": "2/2017"}, {"body": "one array wrapper component containing numbers much set observations original benchmark renders nt make difference expected since reactive setup required minimal adding item even makes tad slower using renders regression perhaps pretty moot benchmarking development build using minified versions posva said real benchmark around couple runs couple runs slower regression machine optimized precompiled templates vueloader using functional components comparison angular ca nt compare angular values op nt provide benchmarks fiddle martinoppitz provide numbers minified version well angular benchmark setups amp code even original setup using development build get nowhere near", "d": "2/2017"}, {"body": "btw compiling templates easy although nt matter lot benchmark", "d": "2/2017"}, {"body": "updates latest chrome windows kind replicate first bad implementation forces vue rerender component right initial render repatch dom latest chrome needs render previous tests done outdated version using portable chrome due company restrictions dont ask however changing gives numbers previous analysis somethings really bring little improvement course like", "d": "2/2017"}, {"body": "test crash scenario performs much better far good well hey seems deoptimization chrome likely related", "d": "2/2017"}, {"body": "yeah seems chromeonly deopt thing runs around safari", "d": "2/2017"}, {"body": "expert related new update originally experienced issue chromium remember correctly", "d": "2/2017"}, {"body": "thanks recap functional variant fast components round transpiler make inline html functional style think like angularaot link check angular aot", "d": "2/2017"}, {"body": "hello think difference beetween angular vue moment component instantiation vue instantiate components app starts angular instantiate components everytime used believe vue startup time increases number components obviously original mistake right", "d": "3/2017"}, {"body": "vue instantiate components app starts uhm sure mean answer probably", "d": "3/2017"}, {"body": "fast way instance object def component def methods believe vue must bind component defs bootstrap right", "d": "3/2017"}, {"body": "sorry still nt understand mean gets instantiated gets bound yes vue create constructors case mean components lazyloaded would angular class decorator would nt think mean something different instantiation would usually refer instance created calling constructor case vue surely instantiate compoent instances upfront nt make sense", "d": "3/2017"}, {"body": "also nt see anything chrome deoptimization discussed issue", "d": "3/2017"}, {"body": "edit removed discribtion clear enough", "d": "3/2017"}, {"body": "martinoppitz chill please everyone including linusborg trying help note please try speak thoughts clearunderstandable matter future misunderstandings im sure someone solve concerns eventually nice day", "d": "3/2017"}, {"body": "totally chill nt worry want make sure understand martin question able answer properly hard time read issue top see one first try get bottom issue bug rendering components bugdeoptimization chrome vm ca nt much fixed fortunately someone google team replied seem fixed wait till goes live apart still nt understand question means willing answer understand think difference beetween angular vue moment component instantiation vue instantiate components app starts angular instantiate components everytime used right", "d": "3/2017"}, {"body": "hello sorry angry everything fine would like say issue nonchrome deoptimization topic title changed linusborg next provide running example see next thank sorry unclear messages", "d": "3/2017"}, {"body": "hello vue implementation one component increment constant see startup increases number components link startup vuejs starts ms check angular implementation number components link startup angularjs starts ms observations vuejs fast vuejs shared methodsimplementations vuejs instance components startup vuejs number component defs increases startuptime different components unrealistic", "d": "3/2017"}, {"body": "martinoppitz yeah expected behavior benchmark shows vue instances heavier angular component instances metric alone nt really say much performance real world scenarios component instantiation usually small proportion bootstrap work said also unrealistic component instances time hundreds course continue improve startup performance particular aspect nt much actionable items", "d": "3/2017"}, {"body": "thank confirmation", "d": "3/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "2/2017"}, {"body": "required present item check changelog", "d": "2/2017"}, {"body": "test saw using outdated version vue please test updated version", "d": "2/2017"}, {"body": "hi gaecom found behavior ime specific chinese ime input characters without confirmation behavior produced plain input various websites eg github change another ime like japanese ime work expected wonder fixed js library", "d": "3/2017"}, {"body": "fyi ignoring composition events desktop necessary ensure correct syncing behavior sure even possible fix user finish composition", "d": "3/2017"}, {"body": "herringtondarkholme think close", "d": "4/2017"}, {"body": "posva yes think one come new solution open new issue nt think panacea", "d": "4/2017"}, {"body": "hi thanks filling issue since vue render process async proper way accessing rendered element properties using callback eg", "d": "2/2017"}, {"body": "provide minimal reproduction code using jsfiddlejsbincodepen demonstrate issue could start template already includes latest version vue", "d": "2/2017"}, {"body": "changing url click event definitely looks like bad idea expecting work none browsers modification href reflected right away also saying user going redirect page something else really want behaviour said set href handler", "d": "2/2017"}, {"body": "update code give znck good jsfiddle take code test firefox chrome posva know said found see document give vuejsorg chapter template syntax example english good hope understand speak", "d": "2/2017"}, {"body": "share doc page give look please", "d": "2/2017"}, {"body": "doc right think wrong maybe idea change tag href url js wrong anyway thanks answer question", "d": "2/2017"}, {"body": "create new component route captures url redirect url send url component redirect urlbase locationorigin locationpathname url urlbase mylinknew result", "d": "10/2018"}, {"body": "sorry unintentional surely nt want break stuff minor releases incompatibility result combination typescript webpack unfortunately covered typings tests tests nt take interaction webpack account however even changed use esstyle exports would still breaking change afaik esstyle exports ca nt made work existing commonjs imports since change already likely take opportunity fully migrate esbased exports typings see said apologize unintended breaking changes ps workaround simply configure webpack alias use commonjs build update recommend using es style imports see updated ts setup docs details", "d": "2/2017"}, {"body": "nt sweat happens think changing dts files would help issue would become compilation rather runtime error therefore provide relevant error message ended looking build modules webpack tsloader vueloader etc thinking something stopped performing esmcjs interop thanks getting back though thanks hard work put making vue really great", "d": "2/2017"}, {"body": "update recommend using es style imports see updated ts setup docs details", "d": "2/2017"}, {"body": "great thanks check", "d": "2/2017"}, {"body": "trying force see error vue packages version mismatch vue vuetemplatecompiler help", "d": "2/2017"}, {"body": "using prefix npm version vuejs autoupdated version workaround force version npm package remove identified package really nt like feature npm build must predictable reproducible", "d": "2/2017"}, {"body": "reinstalling fix problem bug already fixed", "d": "2/2017"}, {"body": "thank guys", "d": "2/2017"}, {"body": "versions hardcoded still getting version mismatch packagejson", "d": "2/2017"}, {"body": "add version matches version", "d": "2/2017"}, {"body": "still getting error updating even updated latest help", "d": "3/2017"}, {"body": "would fit better promise supposed resolve standardized yet", "d": "2/2017"}, {"body": "makes much sense case probably want something like vuerx said breaking change nt see returning promise useful warrant change", "d": "2/2017"}, {"body": "sidenote deep watching huge object absolutely recommended", "d": "2/2017"}, {"body": "issues objects frozen basically deep watcher far tell performance memory consummation much effected watching like properties reasons behind", "d": "2/2017"}, {"body": "kailniris depends use case time find deep watcher replaced better alternatives", "d": "2/2017"}, {"body": "interestingly freezing behavior occurs chrome works fine safari ff looks like weird deoptimization nt think bug vue part see work around chrome", "d": "2/2017"}, {"body": "reduced example without domcompiler ts vuecomponent comp data return dataprop watch dataprop render h gt h new vue render h gt h comp mount var items var lt vueset items objectfreeze id var vm new vue data items items methods test function test var item id mount settimeout vmtest strangely nothing removed anymore even seemingly unrelated computed property removed order reproduce", "d": "2/2017"}, {"body": "even switch instance registration sequence problem occurs", "d": "2/2017"}, {"body": "looking briefly seems runs deoptimization issue running shows around times completely dominating running canary future case similar picture crankshaftfullcodegen exactly sure going look", "d": "3/2017"}, {"body": "thanks chiming bmeurer", "d": "3/2017"}, {"body": "jarosevcik going take look", "d": "3/2017"}, {"body": "fixed", "d": "3/2017"}, {"body": "jarosevcik bmeurer woot thanks quick fix closing since nt seem anything actionable vue part besides waiting patch go live", "d": "3/2017"}, {"body": "use id parameter yandex map codepen", "d": "2/2017"}, {"body": "thanks need work like posva reopen issue somebody offer idea", "d": "2/2017"}, {"body": "webmarkelov usage question issue tracker reserved core bugs feature requests way trying supported components contain tags", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "published", "d": "2/2017"}, {"body": "hi thanks reporting issue idea behind commit break whole rendering aka crash app error thrown component lifecycle allow user handle improves debugging current workaround case define simple errorhandler throws think feature regression", "d": "2/2017"}, {"body": "thank posva added snippet test entry file everything works easy acutally also like new features could nt quite find solution problem check docs often think close issue thanks", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "\u7ec4\u4ef6\u91cc\u901a\u8fc7", "d": "2/2017"}, {"body": "error says need promise polyfill", "d": "2/2017"}, {"body": "much like help closing since seems like generic use webpack question rather issues vue also problem probably", "d": "2/2017"}, {"body": "well unfortunate spent hours working already google gitter form positive results", "d": "2/2017"}, {"body": "pretty active forum forumvuejsorg certainly help github issues exclusively bugs amp feature work", "d": "2/2017"}, {"body": "fwiw problem file thinking gotten build correctly using vuecli vue build prod lib sure problem though stab linusborg suggested", "d": "2/2017"}, {"body": "linusborg thinking bug file thought created vuecli", "d": "2/2017"}, {"body": "linusborg ok lets see goes opened issue forum", "d": "2/2017"}, {"body": "mikeerickson please understand issues reserved work deem necessary deserves discussion helping users custom modified webpack configurations nice absolutely responsibility help every vue user webpack issues hours work vue even personal life", "d": "2/2017"}, {"body": "evan totally get surely appreciate position go things oss devs issue covered docs andor forum gitter could easily go route fact matter mention properly configuring vue components use browsers nt use build tool webpack rollup primary reason opened issue first place stated scoured google etc hours trying find anything would lead correct path rate appreciate time continue research figure", "d": "2/2017"}, {"body": "tried", "d": "2/2017"}, {"body": "yes works except throwing errors using", "d": "2/2017"}, {"body": "remove flag component works etc", "d": "2/2017"}, {"body": "information issue related sass told problem well given dont know could problem seeing using cli internal webpackconfig thats linus stated appreciate linusborg trying help point going bail vue together return using angular build umd compatible directives without issue cant afford spend time trying shoehorn vue thats", "d": "2/2017"}, {"body": "sorry lock use discussing seperate problems across different issues different repositories even bugs far tell happy help forum though", "d": "2/2017"}, {"body": "meant give value prop without one instead coercing value using computed property actually recommended way closing feature removed", "d": "2/2017"}, {"body": "alright sounds reasonable thanks", "d": "2/2017"}, {"body": "optimization getters props computed properties defined component prototype avoids dynamically call every property every component instance result faster initialization performance practice never rely checks components commonly used projects", "d": "2/2017"}, {"body": "ah makes sense encountered bug tracked code something like since component property missing seems extreme edge case particular case workarounds opinion", "d": "2/2017"}, {"body": "cool case think keep new behavior also check presence prop new props object", "d": "2/2017"}, {"body": "forgot bump vuetemplatecompiler version", "d": "2/2017"}, {"body": "doh nt auto updated ran npm update vue cheers", "d": "2/2017"}, {"body": "mistakenly published tag fixed trying latest beta stable version", "d": "2/2017"}, {"body": "makes sense revert stable version btw tried latest beta still getting different error running build yarn build yarn build node buildbuildjs building production starting optimize css processing processed ratio hash version webpack time asset size chunks chunk names kb emitted app kb emitted vendor kb emitted manifest bytes emitted app kb emitted app bytes emitted app kb emitted vendor kb emitted manifest indexhtml bytes emitted error vueloaderlibtemplatecompilerjs id vueloaderlibselectorjs typetemplate amp srcappvue module build failed typeerror read property length undefined objectmoduleexports srcappvue srcmainjs error vueloaderlibtemplatecompilerjs id vueloaderlibselectorjs typetemplate amp srccomponentshellovue module build failed typeerror read property length undefined objectmoduleexports srccomponentshellovue babelloaderlib vueloaderlibselectorjs typescript amp srcappvue srcappvue srcmainjs build complete tip built files meant served http server opening indexhtml file wo nt work", "d": "2/2017"}, {"body": "beta could buggy create issue minimal reproduction code", "d": "2/2017"}, {"body": "guess issue closed would good remove tag avoid confusion future", "d": "2/2017"}, {"body": "keeping open reminder publish new version tag ping", "d": "2/2017"}, {"body": "beta accidentally published latest tag fixed soon sorry incovenience basically tag able", "d": "2/2017"}, {"body": "oops tag updated", "d": "2/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "2/2017"}, {"body": "posva", "d": "2/2017"}, {"body": "maybe see chinese", "d": "10/2017"}, {"body": "closed reverting ref callback changes think drop feature difficult implement without breaking backwards compat", "d": "2/2017"}, {"body": "time want notify component rendered callback useful cases else need implement events inited components want monitor fail case think caused plan get callback back give help", "d": "9/2017"}, {"body": "hello thanks reporting issue please follow issue reporting guidelines provide minimal reproduction demonstrating issue case would repo guess script included head executed element exists dom", "d": "2/2017"}, {"body": "simplesmiler sure script ie foot page try repro jsfiddle used single file component nt know use jsfiddle give detail wanted mount component rendered expressjs javascript var vue require vue var require avue var require jquery function new vue el divid includes putting foot compiled using nt know work seems example guide html difference use single file component using webpack work tried function cpug remove component bjs add render function error occurred worked", "d": "2/2017"}, {"body": "case provide minimal repository repro", "d": "2/2017"}, {"body": "likely using runtimeonly build configure alias bundler", "d": "2/2017"}, {"body": "switch got different error seemed component return like local component add option worked use wondering make work use default runtime build ca nt use option seem must use function get work guide said much next time go elsewhere like stackoverflow first time please help finish spent much time question thanks", "d": "2/2017"}, {"body": "guide said much says lot parts clear happy get feedback basically templates files compiled using webpack loader sure able find answers docs keep reading closing clearly turned question using one official templates find error make sure come back repro repository still need ask questions forum active definitely find help ps naming component definitely bad idea anchor tag html testing creating components names like safer solution", "d": "2/2017"}, {"body": "posva thank works make little artical start learn vue last week hoping help beginners simalar problem", "d": "2/2017"}, {"body": "hi thanks reporting issue looks like something wrong text nodes also included default slot", "d": "2/2017"}, {"body": "posva seems expected behaviour look following code transition component", "d": "2/2017"}, {"body": "maybe never noticed ping edit nt check empty", "d": "2/2017"}, {"body": "expected behavior ensure exact visual output template vnodes created whitespaces filter nontext nodes checking presence nt want whitespaces use", "d": "2/2017"}, {"body": "thank help", "d": "2/2017"}, {"body": "hi thanks filing issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks", "d": "2/2017"}, {"body": "jdrydn", "d": "2/2017"}, {"body": "hi thanks opening issue also using", "d": "2/2017"}, {"body": "ca nt reproduce edge", "d": "3/2017"}, {"body": "jdalton hey thanks tuning think got patched ie meanwhile try", "d": "3/2017"}, {"body": "ie nt getting patches like likely", "d": "3/2017"}, {"body": "seems still happening", "d": "3/2017"}, {"body": "ah ha tricky one trying times could repro still able repo edge though", "d": "3/2017"}, {"body": "yeah nt happen edge", "d": "3/2017"}, {"body": "tried unable reproduce version windows update versions edge", "d": "4/2017"}, {"body": "safari macos earlier versions try use custom component input like error caused", "d": "9/2017"}, {"body": "exact issue also happens chrome anyone workaround", "d": "8/2018"}, {"body": "feeling caused people using causes input rerender often cursor jumps simple solution would add trims event", "d": "8/2018"}, {"body": "issue fixed facing similar issue anyone help fix", "d": "9/2018"}, {"body": "upon initial investigation leak related usage rather data reactivity need work identify precise cause", "d": "2/2017"}, {"body": "reference may connected repo author also used vmodel", "d": "2/2017"}, {"body": "linusborg yeah located source problem related directive hook execution working fix", "d": "2/2017"}, {"body": "one track beast way cure quickly", "d": "2/2017"}, {"body": "memory leak dose work ie computer memory may raise", "d": "9/2018"}, {"body": "use standard property definition", "d": "2/2017"}, {"body": "related vuejsvuex", "d": "2/2017"}, {"body": "begining thought nt perfect solution looks like exact function might best handle datasets reactivity thanks", "d": "2/2017"}, {"body": "thupi simply assign data outside object eg comes two caveats call updating data wo nt see data vue devtools", "d": "2/2017"}, {"body": "sqal even though would like immutable data still like level reactivity example could array reactive nested immutable objective", "d": "2/2017"}, {"body": "add awesomevue", "d": "2/2017"}, {"body": "yeah awesomevue default collection community resource right also planning improve curation quality near future", "d": "2/2017"}, {"body": "thanks letting know awesomevue resource page reflect anywhere vuejsorg", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "thanks znck add books awesome vue external resources", "d": "2/2017"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "2/2017"}, {"body": "closing inactivity", "d": "2/2017"}, {"body": "every object export elementui component check values", "d": "2/2017"}, {"body": "inspection found trouble thank", "d": "2/2017"}, {"body": "css one need apply appear class since using custom classes manually apply fadein class least point docs thanks raising issue js one calling callbacks", "d": "2/2017"}, {"body": "many thanx posva css case became clear think logical specify attribute apper class enteractiveclass automatically substitutes done callback missed reading manual maybe add api description tnx", "d": "2/2017"}, {"body": "please refer docs simply key ed component", "d": "2/2017"}, {"body": "sure understand correctly somewhere want work want make thu submit button work case simply need pass method", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "true may intuitive async directives well link big directive curious kind directives big need split", "d": "2/2017"}, {"body": "write editable directive make element content editable", "d": "2/2017"}, {"body": "pretty sure know already want develop something else", "d": "2/2017"}, {"body": "regardless size directive personally small ones anything codesplitting would nice", "d": "2/2017"}, {"body": "need interim solution think something like javascript yourdirectivemodulejs put big code want split export bind el binding newvnode oldvnode export unbind el binding newvnode oldvnode import component real code lazyloaded run executed first time disclaimer untested", "d": "2/2017"}, {"body": "need tooregister async directives", "d": "3/2017"}, {"body": "directives render keyboard keyboard component support numberalphabetsymbols input think big enough", "d": "3/2017"}, {"body": "feature request open quite time nt gotten much traction far also nt come across wish functionality places forum chat sure large enough use case personal experience directives tend rather small ever since functionality scope reduced vue therefore tend close request reopen enough people express need", "d": "7/2017"}, {"body": "want chime would great addition currently solution provided may good option well nt tried approach yet", "d": "11/2017"}, {"body": "think needs reopened especially since pwa future incremental loading code must", "d": "12/2017"}, {"body": "especially since pwa future incremental loading code must sounds nice catchy still nt seen important usecases directives big codesplitting chunk would useful surely meant big big dependencies import inside deirective could course codesplit quite easily today nt see reason adding code codebase something nobody provided acutal usecase would nice good enough reason", "d": "12/2017"}, {"body": "situation right need writing wrapper vue kotlin shell js rest application kotlin app written using kotlin wrapper chunk loaded shell honestly using js would way", "d": "12/2017"}, {"body": "sounds exciting nt understand usecase asynchronous directives nt know kotlin hope necessary understand directives big codesplit", "d": "12/2017"}, {"body": "directives big definition included app chunk along kotlin loaded shell directive declaration shell chunk vue instance instantiated declaration definition two different chunks shell downloaded quickly show basic ui spinner two rest app loaded spinners disappear show content well rest ui makes app fully functional shell chunk able asynchronously load vuecomponents defined app chunk creating communication layer two chunks following instructions asynchronous components already working components looking type asynchronous loading directives include app chunk place used anyway actually may thought solution already since directives nt need render function testing today would nice vue built way idea nt work feel vue definitely needs built way edit idea work create plain empty js object shell pass directive definition vuedirective also shell pass communicator communicates shell app chunks app chunk finishes loading creates directive definition passes communicator communicator matches two based directive name concatenates directive definition object app chunk empty object shell chunk already registered using vuedirective shell go asynchronous directive definition loading everything works github repo working", "d": "12/2017"}, {"body": "expected behaviour happens browser moving cursor textarea keydown event therefore keyup event never fires textarea alternative", "d": "2/2017"}, {"body": "thanks", "d": "2/2017"}, {"body": "please make sure read contributing guide issues bug reports feature requests encourage ask questions forum stack overflow gitter happy help come back open new issue find real issue closing simply posted component expecting us fix case nt know migration guide help people situation", "d": "2/2017"}, {"body": "hi thanks filing issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks", "d": "2/2017"}, {"body": "consolelog object properties printed gets printed try cast object string next time please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "2/2017"}, {"body": "posva mean changes props one component seems triggered watch function another component", "d": "2/2017"}, {"body": "oh inline object passed prop whenever dom gets rendered eg prop value changes object expression get evaluated passed new value watcher gets triggered render happens root level change value", "d": "2/2017"}, {"body": "posva ok understand thank", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "sqal said please next time make sure read contributing guide", "d": "2/2017"}, {"body": "hi thanks using vue long described data computed properties looks like app level computed properties pretty much vuex piece state shared across many components common parent nt make sense pass data deep component needs data definitely need vuex otherwise help reusing components come back view", "d": "2/2017"}, {"body": "posva yes right firstly ca nt use sometimes example user manymany talks example refresh page days performance issue agree good approach use right need app level computed properties use vuex need computed properties item array define computed properties module level ca nt define computed properties item array property module want", "d": "2/2017"}, {"body": "refresh page days performance issue nt see happen unless leaks increasingly take memory imo nt need anything new already solve issues vuex keepalive mentioned", "d": "2/2017"}, {"body": "posva ok vuex store chat talks module want computed properties talk object talks module example property vuex", "d": "2/2017"}, {"body": "use getters using vue instances computed properties state nt recommend creating vue instances relatively expensive btw think question please discuss forum instead", "d": "2/2017"}, {"body": "way use getters every item array excuse think right question many discussions forums good way work computed properties array items every user try example vuex also use inside another instance work computed properties renamed somebody try use dynamic modules another person try create item array else every time say getters computed properties helpful arrays sorry negative comment really like vuejs problem make sad every time face", "d": "2/2017"}, {"body": "jump solutions verify problem first computed property really need reactivity bookkeeping cost comes often message needs reparsed seems editing message lowfrequency action ca nt parsed moment message created explicit action editing existing message", "d": "2/2017"}, {"body": "many cases simple case example every talk also first symbols first line last message body talk different demand type talk dialog lastname firstname chat chattitle dialog opponent changes firstname lastname want title talk user also automatically changes also automaically generated avatars talk contains first chars first two words chat title example talk title technology discussions avatar manymany properties want changing one property influence another dependency properties automatically hard keep dependencies head knockoutjs invented computed properties awesome vuejs computed properties great cases problem talk object properties want computed simple methods computed properties cached recalculated dependency properties changed something describes changes many talk objects think performance problems problem ca nt define computed properties array talks", "d": "2/2017"}, {"body": "already run noticeable perf problems using naive approach many talk objects talking expensive operation", "d": "2/2017"}, {"body": "talks bit stuttering interface also many violation perfomance warnings chrome console course want fast interface without stuttering maximum speed vuejs great angularjs version chat slow case many entities sure achieve maximum speed vuejs tried wrap every talk described first topic approach works slowest part initialization many instances works good nt know good approach problem vuex case stackoverflow error strict mode store", "d": "2/2017"}, {"body": "ca nt completely imagine situation maybe would better use object instad array need sort order second state variable store order talk ids advantage storing collections objects instead arrays since nt look anything array fast even dozens computed properties storing collections objects like generally good pattern originally established reactredux edit second thought generally good advice nt help much scenario think provided understand correctly", "d": "2/2017"}, {"body": "maybe could use simple object cache expansive computed properties use talk ids keys may also add system invalidate cache talk modified", "d": "2/2017"}, {"body": "simply missing modifier binding please next time make sure check docs ask question forum stackoverflow opening issues thanks", "d": "2/2017"}, {"body": "need either single quotes double quotes around attribute values change html html", "d": "2/2017"}, {"body": "fnlctrl yes normally quotes webpack read detail info mentioned tested raw dom manipulation works fine", "d": "2/2017"}, {"body": "webpack nt add quotes need add quotes nonquoted attribute values supported almost html parsers even may supported browsers ie example nt support usage oops template string supported", "d": "2/2017"}, {"body": "course quotes template usage compiled bundled maybe consider bug", "d": "2/2017"}, {"body": "nt bug webpack responsible vue bug course extract compiled result component webpack bundle nonminified post", "d": "2/2017"}, {"body": "thanks fast reply found noncompressed bundle removing webpackoptimizeuglifyjsplugin file normal quotes gone compressed one webpack version dist files uglified js webpackjsonp function module exports webpackrequire function module exports function module exports webpackrequire function module exports function module exports webpackrequire function module exports webpackrequire uglified", "d": "2/2017"}, {"body": "seems like bundle problem vue compiler next want discuss question noticed source code compilerparserhtmlparserjs line leads fuzzy problems removing attr values regexp without quotes side effects vue taking nonquoted attr values consideration suggest", "d": "2/2017"}, {"body": "vueresource non official package read issues vueresource open issue", "d": "2/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "2/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "2/2017"}, {"body": "\u7b49 \u4f1a\u4e13\u95e8\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898", "d": "2/2017"}, {"body": "hi belmin thank reply confirm using delete methods using delete methods using delete something like yes see warning message correct issue use delete parameter name delete somehow warning copy code test local image inline image using delete see warning message please tell reproduce setting configuration need chrome vue devtools gt best regards shijian mon feb belmin bedak notifications githubcom wrote could take care issue basically already sure create pull requestwhat fix logging vue warn used delete keyword methods object image screen shot nt fit case could try see compiler doesnt warn since delete keyword listed prohibitedkeywordre variable compilererrordetectorjs file receiving authored thread reply email directly view github mute thread thank amp best regards su shijian", "d": "2/2017"}, {"body": "hi belmin look js pointed agree place may happen issue either new function throwing exception match prohibitedkeywordre working thank share thi information shijian mon feb shijian su sushijianissnus gmailcom wrote hi belmin thank reply confirm using delete methods using delete methods using delete something like yes see warning message correct issue use delete parameter name delete somehow warning copy code test local image inline image using delete see warning message please tell reproduce setting configuration need chrome vue devtools gt best regards shijian mon feb belmin bedak notifications githubcom wrote could take care issue basically already sure create pull requestwhat fix logging vue warn used delete keyword methods object image screen shot nt fit case could try see compiler doesnt warn since delete keyword listed prohibitedkeywordre variable compilererrordetectorjs file receiving authored thread reply email directly view github mute thread thank amp best regards su shijian thank amp best regards su shijian", "d": "2/2017"}, {"body": "hi shijiansu sorry misunderstanding try take look see nt throw error parameter passed method named reserved keyword check could maybe done think better option find solution within template compiler", "d": "2/2017"}, {"body": "hi bedakb worries makes wonder delete ok parameter actually familiar vuejs source code yet please go ahead suggestion advise think open vuejs team community make final decision deal issue nice day", "d": "2/2017"}, {"body": "shijiansu problem caused operator javascript var vm delete function consolelog delete vm delete param use global delete method return true", "d": "3/2017"}, {"body": "hi laoxiong thank information operator vue source code nt use application code future plan fix announce document thank shijian fri mar laoxiong notifications githubcom wrote shijiansu problem caused operator var vm delete function consolelog delete vm delete param return true receiving mentioned reply email directly view github mute thread thank amp best regards su shijian", "d": "3/2017"}, {"body": "ssr hydration requires client side dom generated vue server renderer something easy change honestly nt see benefit worth effort anything trying generate vuecompliant markup instead asking vue cater noncompliant markup", "d": "2/2017"}, {"body": "saw one option may one option control keeping whitespace parsing html template engines may remove whitespace action different vue", "d": "2/2017"}, {"body": "oh sorry resolved", "d": "2/2017"}, {"body": "jicjjang explain happened users problems resolve case instantly", "d": "2/2017"}, {"body": "occurred wrong typo changed javascript changestatus resolve thisstatus normal consolelog", "d": "2/2017"}, {"body": "already", "d": "2/2017"}, {"body": "awesome thanks", "d": "2/2017"}, {"body": "use way", "d": "7/2017"}, {"body": "ends answer yes", "d": "7/2017"}, {"body": "works props data binding way pass props like customcomp definition vue amp work results directive rendered attributes directives", "d": "8/2017"}, {"body": "magicdawn found solution example common pattern would say seems quite tricky accomplish lot custom handling render method", "d": "2/2018"}, {"body": "esbenam yet templates tired writing function try vue jsx supports object spread pattern express vue terminologies eg directives events prop way", "d": "2/2018"}, {"body": "magicdawn yeah ended", "d": "2/2018"}, {"body": "got problem using props rended attributes directives seems jsx work", "d": "6/2018"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddlejsbingithub repo containing set reproducible steps lead behavior described required", "d": "2/2017"}, {"body": "sorry library conflicts keep good job", "d": "2/2017"}, {"body": "hi yes indeed intended behaviour imagine global mixin overriding local component data use override behaviour would nt recommend could potentially mess plugins ask questions forum stackoverflow feel free put solution found one", "d": "2/2017"}, {"body": "also means loading two copies vue page quite suboptimal really use case designed nt better make two webpack bundles share vue dependency instead", "d": "2/2017"}, {"body": "also means loading two copies vue page quite suboptimal really use case designed yeah loading via code splitting happen load completely different stages sharing vue dependency across webpack bundles option two bundles actually come two completely separated repos", "d": "2/2017"}, {"body": "looks like really bad idea load multiple vue dependencies page probably go global vue instead thanks", "d": "2/2017"}, {"body": "valid use cases example widget shipped used parties widget needs embedded page without knowing frameworks libraries loaded think twitter button sites install vue separately massive deal breaker specify prefix components", "d": "3/2017"}, {"body": "make vue external dependency widget library make sure client loads one vue copy much better users cheers", "d": "3/2017"}, {"body": "confirmed one single instance vue best solution problem managed avoid lot problems way", "d": "3/2017"}, {"body": "posva easier gets complicated point may drop favour something else currently need insert something like website widget works lot may wordpress drupal without build system place asking install specific version vue separately different site deal breaker keep mind wordpress powers sites web", "d": "3/2017"}, {"body": "motanelu work wordpress also yes still best option", "d": "3/2017"}, {"body": "motanelu dropin widget bundled vuevuex dependencies one javascript file webpackrollup etc never rely global vue provided user way widget always work matter website runs", "d": "3/2017"}, {"body": "fnlctrl would good able prefix component uids", "d": "3/2017"}, {"body": "would need prefix component uids bundled widget run closure access anything outside never interfere vue instances", "d": "3/2017"}, {"body": "experienced issues", "d": "3/2017"}, {"body": "minified build still use devtools explicitly set intended", "d": "2/2017"}, {"body": "means got object devtools walk dom elements problem got multiple vue dependencies load page", "d": "2/2017"}, {"body": "least go removing properties based env variable something like happy build vue really need closed outside world possible would accept pull request", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "nt want components compiled production env detectable devtools happens components compiled development env really way around", "d": "2/2017"}, {"body": "detectable inspectable devtool walk page nodes anyway regardless whether exposed", "d": "2/2017"}, {"body": "appear devtools clash components okay appear devtools also break ones random components would save situation", "d": "2/2017"}, {"body": "okay think root problem clash multiple copies vue page strongly recommend avoid", "d": "2/2017"}, {"body": "yep right totally ca nt avoid even would want basically creating thirdparty components plugged multiple number different sources quite often page somewhere avoid clashing one another much possible really pain ass develop devtools broken way really ca nt rely host components provide global valid version vue", "d": "2/2017"}, {"body": "ca nt components use shared global vue", "d": "2/2017"}, {"body": "ca nt components use shared global vue sadly really ca nt rely host components provide global valid version vue primarily versioning issues may appear vue", "d": "2/2017"}, {"body": "something go wrong removing properties really ca nt seem get may cause troubles", "d": "2/2017"}, {"body": "nt think fixing right problem real problem multiple copies vue work together page devtool", "d": "2/2017"}, {"body": "check would want accept instances devtools also see reason log events instances make check also need random feature work well plain incremental ones wo nt work way security standpoint someone want modify components data outside leaked gives easy way try transform pull request take better look", "d": "2/2017"}, {"body": "devtools assumes one copy vue page simply edge case never expected security wise someone able execute arbitrary javascript page much bigger problems", "d": "2/2017"}, {"body": "added small pull request regarding discussion simply edge case never expected totally understand", "d": "2/2017"}, {"body": "nt think good idea introduce another syntax classes nt achieve anything new gain see characters better flexible explicit syntax convenient short ones", "d": "2/2017"}, {"body": "plus use shorthand version get characters plus back scott", "d": "2/2017"}, {"body": "going happen sorry nt really see point introducing alternative syntax", "d": "2/2017"}, {"body": "feture need make things easy", "d": "3/2017"}, {"body": "need class classname thissomethings something", "d": "3/2017"}, {"body": "exactly already", "d": "3/2017"}, {"body": "hi actually expected behaviour release meta modifier key keyup event triggers modifier key longer pressed event filtered think worth adding note docs", "d": "2/2017"}, {"body": "sorry found resolution use directive", "d": "2/2017"}, {"body": "simple version looks like bug idea fix problem push new ref refs", "d": "2/2017"}, {"body": "kingwl thanks simple version iterate refsitems search component data sure right way", "d": "2/2017"}, {"body": "note vfor refs guarantee order source array next release determine register refs passing function", "d": "2/2017"}, {"body": "sorry respond closed issue list behavior documented anywhere see example seems snag others occasionally seen seems quick note might beneficial save headaches thanks great framework either way", "d": "5/2017"}, {"body": "note vfor refs guarantee order source array well huge bummer", "d": "9/2017"}, {"body": "document says refs populated component rendered reactive really requirement dynamic ref vfor example kingwl found solution manually clear old ref array null works tries found vue push new added vue components ref array vfor loop solution array one item problem solved need wait new ref feature", "d": "9/2017"}, {"body": "problem refs reactive using nexttick function works get updated list refs problem vfor refs returning array match order source data code hack using custom uids resetting uids indexed trying access refs filtering array uid property", "d": "9/2017"}, {"body": "anyone come solution think clean yet currently really hard answer questions like bounding box element item x array rendered since refs array order synchronized data source order best come assigning different unique ref name item list like really gross especially considering access ref element array one item since ref vfor solution adding attribute find ref want traversing looking match man ever feel antivue storing data dom like", "d": "4/2018"}, {"body": "update", "d": "5/2018"}, {"body": "fuck painful", "d": "6/2018"}, {"body": "approach took give property element array bind \u00e0 la property pseudo random string eg gets regenerated element array order needs synchronised underlying data array order", "d": "7/2018"}, {"body": "", "d": "7/2018"}, {"body": "needed find dom resource first element vfor using dynamic component solved using lodash find key equal concerned array gets huge", "d": "7/2018"}, {"body": "zijjj karljakober current behavior ensure better performance otherwise get overhead ensuring ref array index every time render functions called correct approach get correct index adamawang proposed bind index dom access via using", "d": "7/2018"}, {"body": "ref used together vfor ref get array containing child components mirroring data source think text misleading clearly nt mirror sequence ref used together vfor ref get array containing child components mirroring data source take note vfor refs guarantee order source array took hours discover order guaranteed complete resources went find issue discovered implementation pushing discovered spec tests sequential domdata found thread looking report issue checked nt mention behaviour checked also nt mention anything even insinuates opposite", "d": "10/2018"}, {"body": "already fixed dev branch next release", "d": "2/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "2/2017"}, {"body": "posva done", "d": "2/2017"}, {"body": "working expected updating hidden input event submit therefore input updated nexttick", "d": "2/2017"}, {"body": "posva works fine google chrome solution suggest want value updated submitting form", "d": "2/2017"}, {"body": "expected behaviour since works differently two modern browsers please reopen posva", "d": "2/2017"}, {"body": "abdgad probably forge post request send instead using hidden input use method used fiddle otherwise expected behaviour since works differently two modern browsers marktopper browser dependent behaviour sometimes unreliable", "d": "2/2017"}, {"body": "fiddle demonstrating working behavior chrome browsers decide fire event different timings nothing vue easiest solution simply make computed property", "d": "2/2017"}, {"body": "component designed single value input components attend similar use cases native input elements complex component manages synchronization one values explicit propevent pairs proper solution particular case nt think saved keystrokes worth added complexity additional syntax", "d": "2/2017"}, {"body": "component current propevent pairs looks like one prop much rather complicated component let look component libraries right element iview usually use initialize field like update local respond parent component data updates like without immutability child components may various events notify props changed request parents update data works parent component data may inconsistent child view unless prop change event handled properly binding syntax explicit redundant comparing components might major prop covers child component logic eg prop would cases major prop may designed comply interface thus parent components bind said designed single value components see people actually using restricted version works one prop regarding vue current design say proper popular ui libraries using paradigm people use noninput components nt propevent pairs proper way designed first place major prop matches scenarios like form validationsubmission understand removed nt think good idea component library introduce solutions like restrict way people use premises wo nt come back designed singlevalue inputs ask proper let custom directives example design custom directives like works syntactic sugar", "d": "4/2017"}, {"body": "justineo think like compiletime desugaring actually possible adding custom compilation modules vueloader drawback components compiled extra build configuration alternatively bring back instead implicit twoway binding also desugar proplistener pairs", "d": "4/2017"}, {"body": "think bringing back sugar already please library developers afaik quite vue developers stuck rely much developing ui library looking others solving problem paradigm libs using seems weird choice even bring back directly still hope custom directives something like provide similar feature right seems possible replace propevent listener pair custom directive prop bindings already compiled render function runtime api add new ones", "d": "4/2017"}, {"body": "qingweili icarusion opinions run problem often", "d": "4/2017"}, {"body": "problem actually implement directive good think good idea builtin directive leopoldthecoder think", "d": "4/2017"}, {"body": "admit using nonform component bit strange designing element first tried bring back implementing custom directive could nt work component allowed modify props proplistener pair disadvantage approach user write event listener manage data decided nt make much sense component library finally chose kinda breaks semantics perfectly job generally nt run problem quite often developing element perhaps builtin compiles proplistener pairs seems really handy happy see happening", "d": "4/2017"}, {"body": "primary reason removal old encourages child implicitly affect parent state ensure every time child affects parent state always explicitly emitting event bring back form expanded following compiletime parent nt need define method mutation child needs emit event instead mutating prop since encapsulated inside child implementation consumers library use like old days", "d": "4/2017"}, {"body": "looks great ca nt wait see back", "d": "4/2017"}, {"body": "nice", "d": "4/2017"}, {"body": "jingsam", "d": "4/2017"}, {"body": "emit update foo newvalue \u4e0d\u660e\u767d\u600e\u4e48\u7528\u8fd9\u884c\u4ee3\u7801 \u5728\u54ea\u91cc\u8c03\u7528 \u6709\u6ca1\u6709\u5b8c\u6574\u7684\u4f8b\u5b50\u770b\u770b", "d": "8/2017"}, {"body": "binsinger \u5c31\u662f\u5728\u7ec4\u4ef6\u91cc\u9700\u8981\u66f4\u65b0", "d": "8/2017"}, {"body": "angular use implement way bindings ignore bindings count may awesome vue offer feature", "d": "7/2018"}, {"body": "vue feature sync modifier vbind", "d": "7/2018"}, {"body": "hello actually abusing hook meant called every component time vfor loop called simple example computed property would way go want control components createdremoved use attr although would nt recommend particular case great animations example", "d": "2/2017"}, {"body": "example simplified actual use case includes input value setting vmodel computed prop nt really option knowledge", "d": "2/2017"}, {"body": "computed setter", "d": "2/2017"}, {"body": "nt know thanks help", "d": "2/2017"}, {"body": "may asking lot could make new jsfiddle solution scott", "d": "2/2017"}, {"body": "tried creating new project worked fine would provide repro make sure open issue", "d": "2/2017"}, {"body": "know using inserted vue job", "d": "2/2017"}, {"body": "updated title clear", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "unfortunately normal behaviour element removed dom reinsert focus lost easily work around though", "d": "2/2017"}, {"body": "posva thank focus lost moving", "d": "2/2017"}, {"body": "refocusing", "d": "2/2017"}, {"body": "mean example open link add second input focus killed", "d": "2/2017"}, {"body": "oh one moved first input second input dom remains", "d": "2/2017"}, {"body": "thing one reordered nt removed dom another one removed dom docs say following give vue hint track node identity thus reuse reorder existing elements need provide unique key attribute item", "d": "2/2017"}, {"body": "optimisation one removed instead two", "d": "2/2017"}, {"body": "ok would nt nice move via sibling instead target element would avoid focus loss like", "d": "2/2017"}, {"body": "would cost patching specific use case easily workarounded really", "d": "2/2017"}, {"body": "hello sure understand issue facing ask feature already handle custom components mixin", "d": "2/2017"}, {"body": "hello posva thanks reply know possible create global mixin transform component beforecreate hook implies iterate subcomponents declaration component creation wondering possible elegant mechanism", "d": "2/2017"}, {"body": "find mixin solution quite elegant extremely flexible solution tbh use case", "d": "2/2017"}, {"body": "try create plugin load components whose name start url already version work properly using vuemixin beforecreate hook thing bothers process subcomponents component creation", "d": "2/2017"}, {"body": "plugin usecase", "d": "2/2017"}, {"body": "example vueuse components foo url foovue bar url see plugin", "d": "2/2017"}, {"body": "meant need use plugin see useful testing isolated components load components lib using unpkg case need anything new trying achieve code splitting better ways", "d": "2/2017"}, {"body": "plugin already use asynccomponents http request vue file load vue file document fragment process section template script style return promise vue async components", "d": "2/2017"}, {"body": "sorry nt see plugin missing work side note really think better use much explicit", "d": "2/2017"}, {"body": "ok thanks", "d": "2/2017"}, {"body": "please nt open issue twice previous one closed conform issue reporting guidelines please use gitter forum stackoverflow ask questions", "d": "2/2017"}, {"body": "customevent api supported entire ie line deprecated related methods also please read guidelines nt use issues ask questions", "d": "2/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "2/2017"}, {"body": "several things wrong example instead call name method name modifier second newline put textarea complete code html updated fiddle also keep mind users may copy paste text newlines document maybe watcher would want watcher could remove newlines every change textarea value", "d": "2/2017"}, {"body": "also issue template removed post question issue list repo exclusively bug reports feature requests simple questions please use following resources read docs watch video tutorials ask gitter chat room ask forums look forask questions stack overflow", "d": "2/2017"}, {"body": "thank u think next time", "d": "2/2017"}, {"body": "reply removed comment suggested externalizing dependencies correct see readmemd using bundlerenderer default bundle every dependency app server bundle well means request depdencies need parsed evaluated unnecessary cases optimize externalizing dependencies bundle render raw require calls found bundle return actual node module rendering process webpack simply list modules want externalize using externals config option", "d": "2/2017"}, {"body": "nt exactly understand expecting app know dependencies server bundle loaded looked local directory one loaded bundle", "d": "2/2017"}, {"body": "linusborg expectation would look application dependencies application current behavior looks application dependencies", "d": "2/2017"}, {"body": "creates bundlerenderer instance using prebundled application code emphasis mine build server bundle app load bundled file currently nt bundle anything instead simply require unbundled code normal module node even would get require directory fo would fail code refers vue file anything normal file statement node nt understand either prebundle webpack", "d": "2/2017"}, {"body": "really take look applibserverbundlejs bundled webpack webpack configuration also repository appwebpackconfigjs rebundle running", "d": "2/2017"}, {"body": "linusborg reproduce issue", "d": "2/2017"}, {"body": "expected behavior first externals config app dependencies like bundled server bundle loaded dynamically runtime however serverrenderer load dependencies installed means needs nodemodules tree app dependencies particular reason structure project way", "d": "2/2017"}, {"body": "ah sorry excluded dependencies brings us back original point replied expectation would look application dependencies application well node require dependencies externalized build bundle know path", "d": "2/2017"}, {"body": "nothing global folders typical node behavior illustrated running anywhere outside app directory wo nt throw error successfully require vue externalized dependencies exactly expected behavior issue somewhere file creates sandbox injects node globals really global rather local", "d": "2/2017"}, {"body": "typical use case decoupling web server ssr application one dirty workaround monkey patching hoping cleaner fix", "d": "2/2017"}, {"body": "linking section global modules nodepath possible workaroundsolution", "d": "2/2017"}, {"body": "added workaround repository maybe something like noderesolve sandbox", "d": "2/2017"}, {"body": "thank", "d": "2/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks check object accessing exists declare default value option", "d": "2/2017"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help come back open new issue find real issue", "d": "2/2017"}, {"body": "hello posva thanks replying decided post issue might problem come across future since chrome released think might common use case use vhtml inject form render form server side let vue display right place since nt know vue internals well nt know something adapt vuejs internals maybe post read bug form injected via vhtml get submitted chrome", "d": "2/2017"}, {"body": "case follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described please", "d": "2/2017"}, {"body": "posva updated vuejs version issue seems resolved reopen issue new problems thanks", "d": "2/2017"}, {"body": "set button type button like", "d": "3/2017"}, {"body": "case button type submit", "d": "1/2018"}, {"body": "leonnylino use axios looking ajax based solution", "d": "1/2018"}, {"body": "hi use string space multiple class names name transition also use string normal class binding conflict nt think ever intended use multiclass string transition name think expected nt work", "d": "2/2017"}, {"body": "oh sorry missed thank quick reply", "d": "2/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "2/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described thanks", "d": "2/2017"}, {"body": "seems bug indeed removing interpolation operator everything works oldest version tested", "d": "2/2017"}, {"body": "project originally noticed appear using tested version earlier also looks like version tested fiddle wrong bad figured issue template current version actual version fiddle", "d": "2/2017"}, {"body": "version fiddle meant post comprehensive example behavior also occurs using vtext", "d": "2/2017"}, {"body": "ping seems something ugly", "d": "2/2017"}, {"body": "think actually expected options value attr getting text vmodel variable set vue tries match option values ca nt sets binding solves fixed version", "d": "2/2017"}, {"body": "yeah need add binding options", "d": "2/2017"}, {"body": "adding works expected", "d": "2/2017"}, {"body": "thank clarification makes sense explained", "d": "2/2017"}, {"body": "ssr", "d": "2/2017"}, {"body": "thanks opening issue even though add vifvshow parent template behaviour consistent least docs updated add warning add prop using inside component things mind sharing bit component", "d": "2/2017"}, {"body": "add prop using inside component things posva yes example needed modal component watcher prop allow internal things like addremove event listeners behavior addremove html classes etc difficult without prop", "d": "2/2017"}, {"body": "posva expected behavior tag allowed transition follow tag antixrist think maybe pass transition type intention template component vshow directive inside transition props visible transtype code jsfiddle", "d": "5/2017"}, {"body": "antixrist dear antixrist think good idea component child component also component looks like want use props control parent", "d": "6/2017"}, {"body": "gebilaoxiong nope child component take prop control parent emit event parent component decides change state children aware state modal component example component data flow broken still manage transitions outside component although documentation says otherwise confirmed posva vue provides transition wrapper component allowing add enteringleaving transitions element component following contexts conditional rendering using vif conditional display using vshow dynamic components component root nodes", "d": "6/2017"}, {"body": "transition worked vif vshow resort solution work", "d": "1/2018"}, {"body": "facing problem antixrist describes initial post child component holds data among things contains whether visible mutabledisplaydatavisible child component wrapped inside arranged child unknown position parent might left might right depending status mutabledisplaydatavisible animated transitioned parent needs control child positioned transition must chosen according position transition needs parent structure looks simplified enter animation runs fine leave immediately removed dom think bug move vif directly would work know visibility child parent special case ideas achieve need", "d": "8/2018"}, {"body": "seems chrome issue unrelated vue notice clicking get value first time works updating input string changes email unicode domain valid anyway probably chrome changing value look chromium bug tracker", "d": "2/2017"}, {"body": "great thanks", "d": "2/2017"}, {"body": "since vfor loop removing element inserting new one child unable dispatch message version see count reset timeout sure bug component way knowing settimeout set even save current parent somewhere parent child element also changes frame time end situation case", "d": "2/2017"}, {"body": "know terrible case nt know bug point thanks explain nt mind close issue", "d": "2/2017"}, {"body": "actually repro great short let find cause quickly thanks pointing", "d": "2/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks issue may related fact using vifvelse root component array nt empty server rendering try putting div around whole vifvelse block", "d": "2/2017"}, {"body": "posva thank reply apologies adding jsfiddle example screenshot error console", "d": "2/2017"}, {"body": "mmh sure good repro expecting repo since ssr also repro shared using outdated vue version vue official ssr support please make sure read nt forget needed information thanks", "d": "2/2017"}, {"body": "posva oh yeah bad vue version jsfiddle adding hurry course vue project project using nuxt think problem localstorage difference backend frontend apps message first removing using function adding item cart", "d": "2/2017"}, {"body": "ok nuxt make sure boil issue though", "d": "2/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks work either mode mode none works properly target environment nothing help may want try use mode case", "d": "2/2017"}, {"body": "would rate bug thanks", "d": "2/2017"}, {"body": "already fixed", "d": "2/2017"}, {"body": "please take time read docs bit opening issues use forum stackoverflow ask questions use working version", "d": "2/2017"}, {"body": "posva close issue nt problems enteractiveclass leaveactiveclass im using animatecss purpose title says moveclass used removing items first problem moveclass occuring remove item problem second dont use name attribute enter leave animations cause use animatecss please read carefully also reading docs posting", "d": "2/2017"}, {"body": "closing keep thing asking questions without taking account others time fiddle moving animations fiddle posted nt even changing order list expected least try shuffling array test things like guide", "d": "2/2017"}, {"body": "posva question reference issue empty arrays think maybe cause thing move class appended using moveclass attribute see fiddle cards nt move smoothly element removed classes appended enter active leave classes move class also tested buggy empty array fetching data api firebase put elements move animations nt work", "d": "2/2017"}, {"body": "posva check image look closely moveclass attribute apended elements also", "d": "2/2017"}, {"body": "posva see difference main example transitiongroup move class", "d": "2/2017"}, {"body": "nt know development hot reloading works hot reloaded reload manually nt work", "d": "2/2017"}, {"body": "classes appended enter active leave classes move class move class appended entering leaving basically need something like like examples locking following contributing guide wasting time anyone reading issue including first second time disguised questions issues vue repos please next time take time make sure bug reading bit docs seeking help forums thanks edit deleted comment posted issue spam please nt", "d": "2/2017"}, {"body": "yes case objects well whenever add new properties objects use", "d": "2/2017"}, {"body": "andreiglingeanu pointed yes next time please ask questions forum stackoverflow issues bugs feature requests edit nt present object thought name", "d": "2/2017"}, {"body": "posted specify probably updated list rendering docs mention caveat arrays despite mentioned reactivity", "d": "2/2017"}, {"body": "array indices object properties thing", "d": "2/2017"}, {"body": "yeah really thing arrays never detected objects detected existing properties problem trying add new props way use", "d": "2/2017"}, {"body": "code snippet bug binding amp emitting value instance quick fix add extra prop bind emit instead", "d": "2/2017"}, {"body": "znck nt understand updated pen nothing changed think nt understand correct please point concrete fork pin also topic covered docs obvious make work possible", "d": "2/2017"}, {"body": "znck also refering docs section original variant without checkvalue replaced everything woks expected clear syntax sugar nt work also works radio single value selected work checkboxes values collected input name array", "d": "2/2017"}, {"body": "znck ah ok understood talking changed props still nothing changed", "d": "2/2017"}, {"body": "working implementation custom checkbox component see action check source", "d": "2/2017"}, {"body": "znck thank", "d": "2/2017"}, {"body": "write javascript import create createvue import get getvue components create get", "d": "2/2017"}, {"body": "sirlancelot explained nt need new api", "d": "2/2017"}, {"body": "thanks lot clarification", "d": "2/2017"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc reproduction ready please open issue vuerouter repo instead thanks", "d": "2/2017"}, {"body": "use destructuring", "d": "2/2017"}, {"body": "nice documentation would nicer", "d": "2/2017"}, {"body": "sorry three pr make mistake", "d": "2/2017"}, {"body": "hey need apologise thanks taking time make pr", "d": "2/2017"}, {"body": "posva recurrent write unit test transition test always set try move transition waveenteractive item work fine still bug", "d": "2/2017"}, {"body": "kingwl sorry delay believe bug wait first transition finish problem rest animations happens add many items empty array without waiting first transition finish check see help", "d": "2/2017"}, {"body": "issue seems usagesupport question want ask question please use forum gitter issue list reserved exclusively bug reports feature requests thanks", "d": "2/2017"}, {"body": "im sorry", "d": "2/2017"}, {"body": "bug value default option empty str accountid empty str", "d": "2/2017"}, {"body": "thank reply getaccount method set value accountid accountid change promise done change way within child component select right value select right experiencing local final result looks like", "d": "2/2017"}, {"body": "yes look example think modify props vmodel child component emit event parent component change value parent component pass child", "d": "2/2017"}, {"body": "thats want local nt work actually child select element seems change accountid twoway data binding sure thus accountid deleted see screenshot provided happen use emit instead change value straight child component workaround force selected select element using onchange choose username select changes acceptable thanks lot help", "d": "2/2017"}, {"body": "use emit instead change value straight child component recommended vue since sync modifiers bindings deprecated vue migration guide vue vue props always oneway produce side effects parent scope component needs explicitly emit event instead relying implicit binding also directly modify prop passed vue throw warning nt count object properties going back initial problem reason user component nt updating app parent component correctly event telling child component update parent take look fiddle bit going user app components firstly user component inside app vmodel directive possible since user component emits input event onchange method means whatever data passed event update whatever data set vmodel case account inside user component vmodel change event select element vmodel keeps track currently selected user id also computed property called selectedaccount returns user matches currently selected id lastly onchange method emits input event selectedaccount prop data update account app component small note notice time account prop used user component created method plan use account id user component might consider passing prop instead whole object think definitely read vue documentation nt already seems bit confused props data binding work get familiar also recommend looking vuex makes handling applications state much easier", "d": "2/2017"}, {"body": "bug please conduct discussions elsewhere thanks", "d": "2/2017"}, {"body": "ridewn thank complete answer read props section yes wrong path reason trying change parent state inside child component saw doc prop object note objects arrays javascript passed reference prop array object mutating object array inside child affect parent state still agree long way things get harder maintain sum refactored code following user component choose username props account computed useid return thisaccountid methods onchange value emit user value parent component data return account id name methods changeuser value thisaccountid value think follows nt", "d": "2/2017"}, {"body": "please use forum gitter issue list reserved exclusively bug reports feature requests thanks", "d": "2/2017"}, {"body": "actually duplicate similar ie phantomjs also seems trigger event", "d": "2/2017"}, {"body": "phantomjs also safari", "d": "2/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "2/2017"}, {"body": "tested adding indexhtml file work nicely please precise", "d": "2/2017"}, {"body": "hey steps reproduce output tells installed edit link whole file gist run loads electron loads vuejs website click first button animation happening next least examples tested mac el capitan regards romain", "d": "2/2017"}, {"body": "little screencast see experiencing", "d": "2/2017"}, {"body": "try using latest version electron please share output please edit tried electron works", "d": "2/2017"}, {"body": "tried electron problem nt find use obviously error mac os version also error console uncaught referenceerror fastclick defined htmldocument nt think linked error nt show app still transitions nt work clear works chrome safari without issue thanks looking", "d": "2/2017"}, {"body": "sierra nt find use clientinformationappversion obviously error well weird could older nonsupported version sure clean cache though", "d": "2/2017"}, {"body": "hey figured needed type inspector console previously obviously failed output tested windows linux worked without issue strange nt work platform version behind current mac os release hint nt please close issue works like charm platforms romain", "d": "2/2017"}, {"body": "sorry really nt know may causing tested versions except os x version strange issue closing since nothing find problem please come back share", "d": "2/2017"}, {"body": "snapeuh issue os x works adding duration eg", "d": "6/2017"}, {"body": "fail", "d": "9/2017"}, {"body": "osx", "d": "10/2017"}, {"body": "thanks jangunzenhauser works duration", "d": "10/2017"}, {"body": "strange issue unfortunately ca nt use duration workaround since using vuetify transitions transition works transition nt", "d": "11/2017"}, {"body": "issue latest transitions works duration bigger otherwise fails even using tag", "d": "7/2018"}, {"body": "found problem floating point numbers object returned electron comes comma instead dot thus vue always parse see submitted pr fix", "d": "7/2018"}, {"body": "thank phablulo let hope gets merged soon mentioned pull request", "d": "8/2018"}, {"body": "reference elements outdated modified vue virtual dom diffing algorithms use get updated references elements", "d": "2/2017"}, {"body": "fnlctrl dom", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "please ask questions forum stackoverflow filters used mustache bindings vbind", "d": "2/2017"}, {"body": "posva nt question request suggestion interesting evaluate value vif vshow dependence filters otherwise thank response", "d": "2/2017"}, {"body": "design filters meant formatting text types logic either computed property method call", "d": "2/2017"}, {"body": "please ask questions forum stackoverflow root top vue extended instance used official webpack template methods added", "d": "2/2017"}, {"body": "come better bug using bus probably reproduce jsfiddle please take time follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "2/2017"}, {"body": "nt know write vuex jsfiddle try project run npm install amp npm run dev easy", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "passing function code fixed please next time use forums first", "d": "2/2017"}, {"body": "forums also", "d": "2/2017"}, {"body": "case occured missed second argument root emit someevent eliminated error root emit someevent comprehension", "d": "10/2018"}, {"body": "", "d": "3/2017"}, {"body": "see", "d": "9/2017"}, {"body": "moved relevant repo since vueloader issue thanks", "d": "2/2017"}, {"body": "np thank", "d": "2/2017"}, {"body": "may even wrong actually since worked fiddle", "d": "2/2017"}, {"body": "check docs probably want", "d": "2/2017"}, {"body": "posva thanks links simplified example actually trying watch array changes thought could globally watch per example docs come nt fire function", "d": "2/2017"}, {"body": "please ask questions forum stackoverflow global watch need watch expression computed function reference vue instance changes check arrays search excellent able find need without even going forums", "d": "2/2017"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help come back open new issue find real issue really bug please open issue relevant template repository", "d": "2/2017"}, {"body": "sorry incident research relevant channels thanks feedback", "d": "2/2017"}, {"body": "please pipelining filters space", "d": "2/2017"}, {"body": "hmm strictlify filter grammer spec docs think pipelining filters space good human readable coding design", "d": "2/2017"}, {"body": "thanks looks like bug due delimiter starting", "d": "2/2017"}, {"body": "thanks issue fixed via released yet", "d": "2/2017"}, {"body": "existing feature come across similar hack using style tags define inline css right way would define computed properties like", "d": "2/2017"}, {"body": "posva sorry hear really thought vue nailed make integration feature mind vue components difficult computed property approach anticipate changing values less powerful scalable verbose interpolation solution honest looks much like kind transparent reactivity vue", "d": "2/2017"}, {"body": "fiddle using vue hack would nt suggest using production likely causes recalc stylesheet every update vue files different story styles indeed static", "d": "2/2017"}, {"body": "thanks letting know looks like components provide static css optional style bindings additive replaceable start see", "d": "2/2017"}, {"body": "computed property approach anticipate changing values less powerful scalable verbose interpolation solution using computed definitely way go since adapts scales perfectly think dynamic css modules", "d": "2/2017"}, {"body": "interesting consider next days likely end putting less css style section implement dynamically like suggest", "d": "2/2017"}, {"body": "clear mentioned likely causes recalc stylesheet every update situation interpolation hack using standard css variables sure also get efficient recalc goal time tweak grid would defined style section vue component kind dynamic alteration static css well demonstrated need way reach back css style section looks like css variables perfect think picture complete fact css variables amazing vue files different story styles indeed static css variables turn bring powerful new dynamic css would great see css recipes along lines new upcoming vue cookbook", "d": "2/2017"}, {"body": "setting array reactive use arr set index value", "d": "2/2017"}, {"body": "thanks stephanmax error reported devtools use development mode issue could refer doc updated fiddle", "d": "2/2017"}, {"body": "facepalm thanks million rapid reply defcc", "d": "2/2017"}, {"body": "submit pr add method similar amp amp called time initialization check builtin directive compiler directive", "d": "3/2017"}, {"body": "gebilaoxiong check probably done merging options", "d": "3/2017"}, {"body": "yes child options may contains builtin options look b declared child options contains builtin directives", "d": "3/2017"}, {"body": "gebilaoxiong import builtin options check merge also need check child value", "d": "3/2017"}, {"body": "understand thank much", "d": "3/2017"}, {"body": "see", "d": "4/2017"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide reproduction repo github thanks", "d": "2/2017"}, {"body": "use camlecase props templates written kebapcasel explained docs", "d": "2/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks opened vuerouter repository close issue let open new one time please provide repro", "d": "2/2017"}, {"body": "reproduce jsfiddle ssr issue edit reproducible server seems ssr issue", "d": "2/2017"}, {"body": "ah problem render server bundle vuessr render bundle new context two constant different update identity exactly problem come good approach determine whether object function constructor solution must context independent parsimoniously performant since may called component instantiation may pack vue server bundle user code library code refers object might bring significant overhead ssr compile script every time nt enough knowledge nodejs internal correct anything wrong library code may also encounter problem ssr components bundled server entry compare builtin object user provided value opinion", "d": "2/2017"}, {"body": "one keep", "d": "2/2017"}, {"body": "sorry sure github saved inprogress issue", "d": "2/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks slot content children elements", "d": "2/2017"}, {"body": "thanks sorry", "d": "2/2017"}, {"body": "problem solved", "d": "2/2017"}, {"body": "generally difficult work party components hardcoupling dom using ssr something designed without ssr mind ca nt magically make work well ssr please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "2/2017"}, {"body": "think looking ignore swiper component sure understand problem warning makes sense changes server renders browser renders looks question", "d": "2/2017"}, {"body": "posva thanks think improve swiper component suitable ssr work", "d": "2/2017"}, {"body": "surmonchina \u73b0\u5728\u9879\u76ee\u60c5\u51b5\u5982\u4f55\u5462 \u6b63\u91c7\u7528swiper\u548cssr\u9047\u4e0a\u4e86\u8fd9\u4e2a\u7684\u95ee\u9898", "d": "2/2017"}, {"body": "supermeng", "d": "2/2017"}, {"body": "closing repro inactivity", "d": "2/2017"}, {"body": "surmonchina find tricky way use external vue component use nuxtjs serverside rendering already test follow nuxtjs doc modify project config use component js processbrowserbuild var swiper swiperslide require vueawesomeswiper components set swiper swiper swiperslide swiperslide get error clientside rendered virtual dom tree matching serverrendered content need use async component swiper gt promiseresolve swiper swiperslide gt promiseresolve swiperslide however always best choice improve component solution hack way usage", "d": "6/2017"}, {"body": "funkylover", "d": "6/2017"}, {"body": "surmonchina know already update say trick post make custom component fit ssr without modification component", "d": "6/2017"}, {"body": "problem ui lib using vue core", "d": "2/2017"}, {"body": "please ask questions forum stackoverflow interesting read tldr use axios fetch nt forget polyfill promises", "d": "2/2017"}, {"body": "thanks looks like bug looking", "d": "2/2017"}, {"body": "fixed already dev branch", "d": "2/2017"}, {"body": "noticed issue could related", "d": "2/2017"}, {"body": "jvandenaardweg yes roadmap near future closing favour issue", "d": "2/2017"}, {"body": "please upgrade vue latest version", "d": "2/2017"}, {"body": "fnlctrl thx got problem", "d": "2/2017"}, {"body": "install since peer dependencies", "d": "2/2017"}, {"body": "fnlctrl okthx", "d": "2/2017"}, {"body": "syntactic sugar components bit complicated inputs basically listeners must set different inputs behave differently dig", "d": "2/2017"}, {"body": "implemented", "d": "1/2018"}, {"body": "yes dynamic types work", "d": "1/2018"}, {"body": "nt need end anyway since wanted ensure number input field realized good future projects suppose", "d": "1/2018"}, {"body": "closed via", "d": "2/2017"}, {"body": "thanks pointing", "d": "2/2017"}, {"body": "thank fixing", "d": "2/2017"}, {"body": "found work straight javascript though homecomponentjs js use strict import vue vue export default vuecomponent homecomponent template message props message", "d": "2/2017"}, {"body": "nt need give template id vue files already file", "d": "2/2017"}, {"body": "homecomponentvue js message home message import vue vue vuecomponent homecomponent props message still results error message thank tip", "d": "2/2017"}, {"body": "also need export component instead registering globally please read docs vueloader", "d": "2/2017"}, {"body": "worked thanks tips hard work js import vue vue export default vuecomponent homecomponent props message", "d": "2/2017"}, {"body": "instance see change transition second seconds gets little jumpy must something missing animating fine changing docs chrisvfritz wrote examples may insights share maybe introduction scoped slots make better reusable transition state components find examples nice going easy version appreadyreusable version nice know makes feel well brokendown opinion always room improvement", "d": "2/2017"}, {"body": "sdras thanks feedback certainly one blame lack clarity examples sidenote one animation heroes really enjoy write topics take concerns heart even encountering issues think definitely room improvement whether documentation api time tomorrow take look codepen find might going wrong offer suggestions probably ask questions", "d": "2/2017"}, {"body": "chrisvfritz examples awesome huge fan work guides love hear thoughts help appreciated want throw ideas around docs improvement happy offer time help others thank", "d": "2/2017"}, {"body": "update confirm strange behavior seeing investigating", "d": "2/2017"}, {"body": "extremely familiar gsap works hood looks like sync vue render cycle case avoid unnecessary rerenders vue waits synchronous state updates finish case seems often interpreting gsap use series synchronous updates waiting finish rendering seemed work temporary fix think forces gsap fall back thinking next steps though confirm whether indeed solve issues noticed", "d": "2/2017"}, {"body": "apologies radio silence end indeed fix nice work interesting way handles renderings really smart makes sense think offering api hook startingpoint endingpoint direction interested taking totally understandable close issue thanks time", "d": "2/2017"}, {"body": "sdras improved state transitions api even sure need specify since already track oldnew values reactivity system imagining something like option would sort hybrid example create transitioning version data property could include options like would create new property would always contain value though would transition old value new value milliseconds avoid bloat vue core however could probably ever work numbers arrays numbers objects value number combinations like array objects object containing x coordinate could also use default timing function probably default used css people could provide timing functions wanted option believe option would also fairly simple implement complex values like animating svg paths transitioning properties containing raw numbers could used computed properties example example array objects x coordinates could pull parts component js import line curvebundle const drawcurvedpath x gt dx gt dy curve curvebundlebeta use transitioning coordinates also animate changes path would kind thing sound would sufficiently improve dx situations thinking", "d": "3/2017"}, {"body": "wow would amazing agree keeping eye bloat really essential interpolating numbers would really serve usecases also love already thinking pairing also would pretty common usecase kind animation really exciting thank much rock", "d": "3/2017"}, {"body": "cool thank starting discussion think next step try create proofofconcept plugin adds api sure exactly able carve time keep thread updated progress", "d": "3/2017"}, {"body": "sounds great really appreciated take time", "d": "3/2017"}, {"body": "chrisvfritz forgot tell started poc similar allows transition values using springs api looks something like could object values change usual adapt smoothly wo nt allow control easing though nt change anything plugin idea wanted share case may inspire", "d": "3/2017"}, {"body": "posva great big fan reactmotion really glad see vue getting similar project", "d": "3/2017"}, {"body": "entirely sure actionable imo pure statebased transitions really manipulating state variables javascript responsibility vue core easing curves spring animations etc doable userland thus done userland", "d": "7/2017"}, {"body": "completely forgot posting project back", "d": "7/2017"}, {"body": "need add attribute rowcomponent unique value help vue identify components docs fixed example", "d": "2/2017"}, {"body": "key proper solution next version vfor components without keys receive warnings", "d": "2/2017"}, {"body": "thank sqal problem fixed", "d": "2/2017"}, {"body": "hi thanks filling issue bind click event functional component like event bound functional component implicitly component may render event handler available bind components inside render function jsx destructuring would much easier read nt forget check maybe undefined", "d": "2/2017"}, {"body": "fnlctrl thanks answer work solve access context values work maybe clearer doc necessary read many times render createelement help thanks marc", "d": "2/2017"}, {"body": "fnlctrl even put sais defined even pu method even already click app component also doc clear pass reactive parameter something marc", "d": "2/2017"}, {"body": "slotsdefault work everything component needs passed context object containing props object provided props children array vnode children slots function returning slots object data entire data object passed component parent reference parent component contextdataonclick registered click parent template also cases like mark components functional means stateless data instanceless context use invalid please read docs carefully", "d": "2/2017"}, {"body": "works click contextdataonclick functional component still app normal still need include click app reading context something wrong way read context object context object expected beginning example var xcontextchildrentext jsonstringify contextchildrentext undefined seems possible directly access context variables contextchildren contain marc", "d": "2/2017"}, {"body": "seems advocating use reason expressions like work templates compiled normal js execution using helper methods available render functions solution work runtime would need use go want isto add computed property evaluates expression keeps track dependency tree also information filters evaluates simple functional calls represented code", "d": "2/2017"}, {"body": "thanks response needed like supply simple custom expressions php configuration found different solution", "d": "2/2017"}, {"body": "side note better simply update firebase ref directly instead watching original value push modifications firebase done use case simply check value changed flexible approach skip watching", "d": "2/2017"}, {"body": "posva thanks try vuefire", "d": "2/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described required", "d": "2/2017"}, {"body": "hi op think managed reproduce issue referring attached jsfiddle illustration jsfiddle clicking word eat works expected event fired fruit data updated reload jsfiddle click span child element eat fruit data updated hope helps", "d": "2/2017"}, {"body": "boristhuy thank providing jsfiddle exactly meant", "d": "2/2017"}, {"body": "bug currently event handle removed enters fact invoked indeed modifiers check maybe need update code support like", "d": "2/2017"}, {"body": "used render function would bring breaking change trying find way fix issue wip update gencode template done used render function keep old strategy done exists bug updatelisteners case bellow old new", "d": "2/2017"}, {"body": "defcc fixed returning special value handlers prevented execution may address bug mentioned let handle separate pr necessary", "d": "2/2017"}, {"body": "nt", "d": "2/2017"}, {"body": "exactly responds windows key windowslinux command key mac modifier called super electron better name could respond control key windowslinux command key mac common situation ux point view windowslinux users generally use control key things mac users use command key vs vs etc current solution requires something like vue export default methods foo fooonmac mac thisfoo fooonwindowsorlinux windows linux thisfoo new modifier could limit vue export default methods foo", "d": "2/2017"}, {"body": "problem vue frontend library runs electron running browsers consistently detect os app running ca nt perform platform checks first example inside library userland code anyway instead suggest creating reusable function wrapper components need functionality vue export default methods wrap function foo checkcmdorctrl function edit maybe possible sniff os really sure good idea", "d": "2/2017"}, {"body": "yeah thought browsers using right getting framework scope like idea plugin basic wrappers keyboardevent properties enough cases hand expected behavior modifiers considered bug jsfiddle demo vue export default methods logcmd consolelog cmd left pressed logcmdshift consolelog cmd shift left pressed expected log pressing log pressing log pressing actually happening log pressing log pressing log pressing", "d": "2/2017"}, {"body": "bkzl say expected behavior nt rule modifier keys pressed time", "d": "2/2017"}, {"body": "would suggest adding modifier none well following idea capture keys pressed without ctrl shif alt meta pressed export default methods logonlyleftcmd consolelog left pressed logallleftcmd consolelog left pressed without modifiers", "d": "6/2017"}, {"body": "closing since original suggestion involves platform sniffing quite tricky probably something better dealt userland", "d": "9/2017"}, {"body": "makes lot sense lot shortcuts ctrl windows replaced cmd macos think multiple file selections ctrlcmd click example", "d": "12/2017"}, {"body": "agree something would super useful ctrl replaced cmd macos", "d": "8/2018"}, {"body": "functional components inherit anything placeholder element raw bindings contained need something like inherit", "d": "2/2017"}, {"body": "sweet thanks fast response", "d": "2/2017"}, {"body": "ping", "d": "2/2017"}, {"body": "react exposes official api portals ie reactunstablerendersubtreeintocontainer call official api official way right feature request label nt need worry come back discuss soon please nt ping people like spams contributors nothing thanks", "d": "2/2017"}, {"body": "ok sorry", "d": "2/2017"}, {"body": "implemented render functions passing rendered vnodes another component basic example using something like production time seems work well", "d": "2/2017"}, {"body": "fyi currently playing idea well bigger scale target anywhere dom using event bus one situations found useful see progress far tested works pretty well nt think catched edge cases sure works cases works like html todo x far works component playing idea kind prop make create target component anywhere would mostly useful outside dom managed vue useful apps use vue enhance parts page", "d": "2/2017"}, {"body": "yes talking mostly last paragraph article found way use inside portal component using event bus approach well", "d": "2/2017"}, {"body": "nt know understand question dynamic component resolve problem dynamiccomponents", "d": "2/2017"}, {"body": "dynamic components op wants", "d": "2/2017"}, {"body": "closing believe possible implement portals vue userland current feature set anyone interested keep eye linusborg repo", "d": "2/2017"}, {"body": "hope release first version week two", "d": "2/2017"}, {"body": "done see", "d": "3/2017"}, {"body": "chance support portal natively vue although portalvue working nicely cases still side effects like leaving empty wrapper element thus may interfere something especially styles relying dom structure like work abstract components would great imo eliminate empty wrapper still get everything right unless feature supported vue core hacking render functions return inner may still cause problems", "d": "1/2018"}, {"body": "maybe start feature request portalvue quite open nt portals roadmap vue moment", "d": "1/2018"}, {"body": "still think implemented natively vue one common things libraries implement way result code bloat bugs increased bundle size words would stop people reinventing wheel", "d": "3/2018"}, {"body": "example user imports different select tags dropdown uses vueportal means instances custom portal code could reevaluate necessity feature", "d": "3/2018"}, {"body": "example user imports different select tags dropdown uses vueportal means instances custom portal code said many many thingsfeatures looking react core lib comes even less features vue yes seem portals like transition system community simply comes bunch solutions eventually one libs becomes defactostandard goal mission vue provide core feature every common need web development goal provide basic toolset build solutions satisfy needs portalvue nt thousands stars gaining popularity could solve problem way solution would converge using portalvue case even nt happen code involved build barebones portal solution single library like drodown small nt see big overhead said might add portals time future work vue rewrite virtualdom simply way keeps portals mind core feature right problem solved elegantly enough userland immediate need put lot work core implementation disclaimer author portalvue vue core team member may conflict interest time know perspectives", "d": "3/2018"}, {"body": "understand try writing portalish logic couple different ways directive component nt many ways avoid dom mess clean leaves stale elements component standalone portaltarget thing need add dropdown body solutions elegant become hacky like whole portal functionality feels moment know different mindsets portal mindset deal element id allow dropping part component another component etc allows users instead structuring data driven codebase turn mess hard manage could solved traditional simpler ways nt mean attack portalvue simple allow dropping specified dom element etc developer responsible wrapper etc work transitions cleaning whats needed component removal moment guarantee seems portaled element wrapped component component cleaning end day wrapper wrapper hate wrappers theory portal thing sounds easier actually example portal directive needs know element transition otherwise get big fat error transition tries remove element many small details come across trying implement thing somewhat supported solution would solve many headaches unexpected outcomes", "d": "3/2018"}, {"body": "know different mindsets portal simple allow dropping specified dom element documentbody documentcreateelement etc developer responsible wrapper etc work transitions sure api nt want done wrapper component later mention directives write paragaphs description get good picture imagine work wrapper wrapper hate wrappers sure refer say vue team hate wrappers much contrary encapsulating behaviour wrapper components concept use many things like bet implemented portal functionality core would use sort wrapper well deeper integration underlying virtualdom probably theory portal thing sounds easier actually want create featurerich solution many scenarios right need move modal end really hard example portal directive needs know element transition well implementing directive aware transitions vue design would approach wrong level abstraction directives meant lowlevel dom access vue transitions highly abstracted part solve component back top bit deal element id allow dropping part component another component etc allows users instead structuring data driven codebase turn mess hard manage could solved traditional simpler ways nt mean attack portalvue nt take attack worries raise valid critisism using portalvue excessively indeed happen users nt approach app datacentric mind nt invalidate whole concept useful solving specific problems solve nicely like moving modals dropdown menus etc end", "d": "3/2018"}, {"body": "sure refer say vue team hate wrappers much contrary encapsulating behaviour wrapper components concept use many things like clear wrapper nt mean wrapper component rather wrapper element introduces headaches used bought templates mostly admindashboard templates framework based lot direct child selectors wrapper element cause theme break well implementing directive aware transitions vue design would approach wrong level abstraction directives meant lowlevel dom access vue transitions highly abstracted part solve component true end day kind achieves result common component based portal usages implemented following way sticking export default mounted documentbodyappendchild el directive equivalent similar export default inserted el documentbodyappendchild el work worth keeping without wrapper elements keeps injectprovide working etc though directive problems transition element without advanced lookups yet big component libraries used yet directive based approach least last time checked nice thing component based approach keeps transitions working cleans element undocumented may vue god forgive us separated element displayed component tree maybe bad make seem maybe need step back think edit remember evan said nt done maybe feel bad", "d": "3/2018"}, {"body": "portals userland eliminate extra dom wrapper elements implementation still keep robust happy use believe react provide core solution purely", "d": "3/2018"}, {"body": "portals userland eliminate extra dom wrapper elements implementation still keep robust look portalvue possible slot content passed portal single root element case target nt create root node nt use instead use interface get slot contents render support docs always improved", "d": "3/2018"}, {"body": "portal component may need vue official support keep components tree showed vuedevtools codes event bubbling portals relies vue tree", "d": "4/2018"}, {"body": "hello sorry delay tried fiddle yields result chrome safari please provide gif double check steps reproduce", "d": "2/2017"}, {"body": "checked reproduction steps seem correct basically open provided fiddle click updown buttons times quickly looks side slowly works well quick changes break inspect elements stuck top attribute without value set successfully reproduced two different machines office latest macos safari three different samsung tvs custom webkit browser initially discovered issue developing vue based smart tv app oh need apologize delays thank helping developing awesome framework", "d": "2/2017"}, {"body": "damn works fine safari make sure plugins installed", "d": "2/2017"}, {"body": "yup checked extensions installed also went preferences gt security unchecked difference try completely quitting safari times testing sometimes randomly worked maybe times took break browser restart", "d": "2/2017"}, {"body": "tried bunch times works fine sure nt extension activated edit asked team test", "d": "2/2017"}, {"body": "share user agent phanan reproduced turns recent version check", "d": "2/2017"}, {"body": "version", "d": "2/2017"}, {"body": "safari pls", "d": "2/2017"}, {"body": "may", "d": "2/2017"}, {"body": "case helps one tv browsers mentioned issue reproducible following though experience devices sometimes incorrect user agents hardcoded take grain salt", "d": "2/2017"}, {"body": "think related regression two reasons apart already mentioned samsung browser since tried devices older webkit managed reproduce replace attached jsfiddle regular bug longer reproducible though kills transitions one direction elements moved previously explained behaviour absolutely consistent open jsfiddle safari switch tags back forth bug appearingdisappearing accordingly leads believe somehow connected", "d": "3/2017"}, {"body": "made small breakthrough managed isolate much better test case consistently reproducible browsers tried latest safari chrome ff without need fast clicking also pretty certain related works since everything goes back normal simply use updated initial report accordingly", "d": "4/2017"}, {"body": "transitiongroup used check lazy sudoku example", "d": "4/2017"}, {"body": "ok hmm logic behind practically first example understand source correctly position elements something else transforms flexfloatabsolutewhatever transition group automatically animate using transforms", "d": "4/2017"}, {"body": "yep pretty much", "d": "4/2017"}, {"body": "great thanks lot closing", "d": "4/2017"}, {"body": "due exact reason props need kebab case indom templates converted lowercase browser vue even parse literally nothing vue workaround nt use camelcase event names use indom templates", "d": "2/2017"}, {"body": "hi yes understand reasons vue ca nt anything could think establishing internal case standard convert standard case saving triggering event missing", "d": "2/2017"}, {"body": "implicit case casting cause subtle bugs users emit events different casing normalizes string simple rule never use camelcase much straightforward magic casting rules", "d": "2/2017"}, {"body": "yes recommended action support dom string templates would adapt events props names kebabcase thanks clarification", "d": "2/2017"}, {"body": "parser think regex due check line filterparserjs test close parenthesis gives true add another open pr anyone see better way let know", "d": "2/2017"}, {"body": "thanks quick response seems like blow reason might worth rolling pr", "d": "2/2017"}, {"body": "right check parenthesis point case comma wrong", "d": "2/2017"}, {"body": "added dot square brackets verification", "d": "2/2017"}, {"body": "reproduce vue webpack vueloader please try upgrade everything latest version see problem persists please check webpack configs create reproduction repo closing nt seem related vue also might want check version webpack configparams suppressing errors", "d": "2/2017"}, {"body": "remove callback never update therefore watcher never called hence never see error nt exist watcher declaring parameter function even vue nt pass watchers watchers triggered changed data view model changes nt necessarily originated dom input events nt make sense pass watchers", "d": "2/2017"}, {"body": "u checked first gif u see nt need pass param watcher every time whatever watcher hooked change value automatically fires event simply catch inside reason using get preinit value hidden input also doesnt care whether dom changed hence use either catch changes however stated main ticket calling inside works fine nt triggers errors amp need another gif comparing along mounted happily provide", "d": "2/2017"}, {"body": "idea event coming code", "d": "2/2017"}, {"body": "brother wo nt magically exist nt declare somewhere case would param since nt thing except ie never mind global identifier use event fired caught callback invoked vm whatever watching changes case watching place changing value callback reason watcher called statement produce new dom event could sent watcher never mean anything relevant needs either watcher comment callback nothing code changing means watcher never called reason never see error regarding seeing error using anything code would cause dom update callback therefore never called reason never see error hope makes clearer", "d": "2/2017"}, {"body": "okay make small demo video clear things make easier understand opened tickets", "d": "2/2017"}, {"body": "closing since nt see anything actionable neither bug feature request please discuss elsewhere fully reproducible bugs properly elaborated feature requests opened issues", "d": "2/2017"}, {"body": "asking little time present issue clearly prov bug related everyone describing", "d": "2/2017"}, {"body": "take time need reproduction ready please open new issue", "d": "2/2017"}, {"body": "hectorhumberto linusborg herringtondarkholme code test u want", "d": "2/2017"}, {"body": "thanks providing video repository nt use composer nt want install reproduction achievable fiddle jsfiddlenet well fiddle original post reproduce problem sorry also idea deeply nested folder structure component question found talk could deduce watching video said say following windowevent generally variable use nonstandard browsers support certainly firefox generally bad idea rely unless know none users ever use firefox using vue lifecycle events watch etc variable available methods run synchronously event fired dom presumably user since run asynchronously variable willshould gone cases time called simply nt exist anymore browser mounted may component rendered amp mounted click another reason async code like oralso initial page render simply event dom event happened moment honestly bit flabbergasted watch beginning whole approach brittle certainly bring lot pain video far could follow explanations video fired component updated inserted dom insertion dom triggered blur event event chance fact event somehow doesnt bug vue accident ran blur event fires avaliable component mounted blur event nt fired yet fire final words far tell certainly bug vue use api nonstandard app never work firefox approach brittle probe errors seriously consider way achieve want", "d": "2/2017"}, {"body": "linusborg appreciate thoughtful explanation couple points u r correct getting result fiddle however prove event undefined error u r still interested link js files regarding event originally got idea thought registered vue yes may misinterpreted bug definitely something unclear seeing behavior believe available amp even gets triggered property gets changed case last reason made wanted keep parent component stateless share across different forms thinking maybe use inside parent component extract everything want child components didnt know exactly use even offer ability ur opinion would best way achieve amp treat input preini value others use", "d": "2/2017"}, {"body": "clear accessing absolutely nothing vue lifecycle hooks watch callbacks variables nt magically appear javascript functions special keywords available every function happened able access exposed global variable browser quirk exists browsers set native dom event triggered nothing vue vue custom event system browser dom event system two separate concepts suggest taking discussion elsewhere since really understanding javascript browser event systems", "d": "2/2017"}, {"body": "locate amp open element play around focusing input focusing quickly play hover played around bunch times could nt reproduce bug please specific", "d": "2/2017"}, {"body": "updated fiddle could identify following steps reproduce bug easily focus input clicking focus input clicking input containing element precisely end transition element finishes disappear move mouse hover becomes true looks like bug appears mouseover event triggered processed time transitionanimation finishes guessing documentation", "d": "2/2017"}, {"body": "narwajea hey sorry delay tried could reproduce vue looks fixed last version vue confirm paste top html section remove existing external resource check", "d": "3/2017"}, {"body": "closing due inactivity reopen fixed", "d": "3/2017"}, {"body": "recreated moved element transition moved transition transition interrupted ensures elements end correct position dom manipulations done nt guarantee never moved process necessary ensure concise algorithm consistent results may improved future something critical issue use case use", "d": "2/2017"}, {"body": "misunderstood exactly key nt aware seems solve issue thanks lot", "d": "2/2017"}, {"body": "allow multiple parent nodes components wo nt happen anytime forseeable future requirement root node deeply rooted pun intended way virtual dom component system works changing would practically require rewrite major part framework therefore close issue problem best approach would probably use computed property nasty vif could prevented normalizing id names mayber add type property tell top items sub items alternatively could consider wrap functional component return multiple root nodes beingg functional component component instance need help please post forum forumvuejsorg", "d": "2/2017"}, {"body": "also note use tag example work single file components due html parsing caveats html itemtitle subitemtitle", "d": "2/2017"}, {"body": "alternatively could consider wrap functional component return multiple root nodes functional component component instance linusborg also work single files components getting error", "d": "1/2018"}, {"body": "yes", "d": "2/2017"}, {"body": "tried several version vuejs failed checked website found issue vmodel binding array discussed still fail make codes run correctly", "d": "2/2017"}, {"body": "flip iteration code", "d": "2/2017"}, {"body": "button nt work normally", "d": "2/2017"}, {"body": "update first two raws view nt update immediately update third raw data first two lines could updated together", "d": "2/2017"}, {"body": "please read doc", "d": "2/2017"}, {"body": "missing content", "d": "2/2017"}, {"body": "property needs function specified object", "d": "2/2017"}, {"body": "dracula right although even valid object declaration", "d": "2/2017"}, {"body": "right silly thanks", "d": "2/2017"}, {"body": "listen event inline component inside handler access rendered dom tree mounted documentation", "d": "2/2017"}, {"body": "dracula right path print initial data invoking vue script already available callback something like blade section content form open form close var initialdata jsonencode initialdata stop html somecomponentvue export default data return initialdata windowinitialdata stuff", "d": "2/2017"}, {"body": "provided complete example", "d": "2/2017"}, {"body": "sirlancelot thanx suggestion returns dom elem case exactly hectorhumberto thanx hacky way around", "d": "2/2017"}, {"body": "hi think sirlancelot approach good enough serverside rendered form example also hectorhumberto approach standard way ssr see example imho op suggestion probably impossible lifecycle called vue yet found dom element thus", "d": "2/2017"}, {"body": "sirlancelot thanx suggestion returns dom elem case exactly created event thisinput eventtargetdatasettoken contradicting hectorhumberto thanx hacky way around sure interpret code hacky seems pretty clean herringtondarkholme also hectorhumberto approach standard way ssr see example exactly ssr prerendering json data essentially initially ajax call rendering component actual html still generated clientside", "d": "2/2017"}, {"body": "sirlancelot suggestion exactly proposed solution created hook definition called component dom rendered", "d": "2/2017"}, {"body": "herringtondarkholme thanx clarification example hectorhumberto hacky way first bind value window call vue instead looking binding data input call vue amp said sirlancelot solution correct one strange reason last night giving error coldsweat trying working still thankful help", "d": "2/2017"}, {"body": "problem brother", "d": "2/2017"}, {"body": "sidenote anyone could plz tell using gives error code error", "d": "2/2017"}, {"body": "event", "d": "2/2017"}, {"body": "posva commented works without issues unfortunately dont know replicate fiddle try commenting part error vanish", "d": "2/2017"}, {"body": "posva couple gifs problem without maybe bug intended sure", "d": "2/2017"}, {"body": "event variable js error", "d": "2/2017"}, {"body": "understand left event magically available", "d": "2/2017"}, {"body": "set value input executed comment run hides error magically cures error extended problem asking gitter suitable github issue bug reporting feature request", "d": "2/2017"}, {"body": "herringtondarkholme know gitter wrong amp", "d": "2/2017"}, {"body": "sorry herringtondarkholme right watch try acess variable called globally available browser event callback ie started event browsers generally bad idea use watch called change initiated user ie clicking button available code provided watch method triggered data change resulting code words hence makes sense course since user event type event supposed contain", "d": "2/2017"}, {"body": "would suggest use render function jsx manipulate vnode imho suggestion would require template users mark position insert fallback content example quite hard add without adding compilation scope caveats hand vue render function support give enough power express arbitrary logic template code case niche render function", "d": "2/2017"}, {"body": "hm nt really thought mind providing example edit mean complete example course understand mean idea go something like", "d": "2/2017"}, {"body": "content inside slots parsed fallback content proposed syntax nogo suggested render functions exposed exact purpose full programmatic flexibility composing content usage question please discuss forum instead", "d": "2/2017"}, {"body": "ok thank try figure shame something conceptually simple practical theory achievable proposed solution sounds bit complicated perhaps worth worry herringtondarkholme mentioned compilation scope caveats", "d": "2/2017"}, {"body": "exact use case hectorhumberto thanks suggestions", "d": "12/2017"}, {"body": "issue somebody please outline common cause problem", "d": "1/2017"}, {"body": "hello kgrosvenor thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "1/2017"}, {"body": "key components", "d": "2/2017"}, {"body": "hi mate tell key components means javascript code behind issue something view code thank swift response appreciate really think framework worth stars hit little bit wall block p mean key itemid key index want remove element index key actually simular angular track index", "d": "2/2017"}, {"body": "kgrosvenor check", "d": "2/2017"}, {"body": "thank fnlctrl check im next near codebase", "d": "2/2017"}, {"body": "would like confirm key worked thank help guys framework awesome may get sticker laptop aha", "d": "2/2017"}, {"body": "trouble using makes sense index dependent number items array changed splicing middle key property bound id item nt going change eg todo example docs uses key probably fine twoway binding changed prevent confusion raise new issue", "d": "7/2017"}, {"body": "todo example docs uses index key probably fine twoway binding changed prevent confusion raise new issue examples already use tha change would make sense would willing submit pr source", "d": "7/2017"}, {"body": "yes bound identifier data structure fine markup look like works one way two way", "d": "7/2017"}, {"body": "kgrosvenor issue using index key using id property works fine make sure tested example docs modified illustrate problem first replaced text output input bound directly property still worked removing items list problem comes binding data property nt get properly updated list spliced", "d": "7/2017"}, {"body": "linusborg happy make changes docs require adding complexity example", "d": "7/2017"}, {"body": "think explicitly accessing object bit tedious propose creating new modifier automatically apply arguments nt think provides significant advantage save exactly characters replacing chars chars think thats enough introduce new api furthermore makes easy deal handler method destructuring live example", "d": "2/2017"}, {"body": "use spread operator note works use browser natively supports", "d": "2/2017"}, {"body": "think proposed syntax quite confusing static inside loop nt make use represent think use case render function would make much sense since get full javascript flexibility really nt think adding micro syntax slots good idea", "d": "1/2017"}, {"body": "thank interest project please read contributing guide opening new issues warning pretty clear warning triggered unexpected scenario please provide repro give bit details expected behaviour", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help simply trying access property object make something like use computed property makes sure access existing object", "d": "1/2017"}, {"body": "see", "d": "1/2017"}, {"body": "chrome macos", "d": "1/2017"}, {"body": "looking archives old forum read", "d": "1/2017"}, {"body": "see created second account deveclipse looks like still nt read issue reporting guidelines relevant docs case missed case using webpack check please next time open post forums instead ask help come back found bug narrowed reproduction thanks", "d": "1/2017"}, {"body": "ca nt really post forums ip blocked nt know even registration blocked read documentations see code resolve gt require resolve resolver variable passed well guess try import function", "d": "1/2017"}, {"body": "reached help ip block", "d": "1/2017"}, {"body": "uhm posted hours ago", "d": "1/2017"}, {"body": "well good thing post right thanks", "d": "1/2017"}, {"body": "transition components abstract nt show parent chain refable intentional keep declarative possible use case directly use listener template", "d": "1/2017"}, {"body": "use listener template nt want couple transition action one way emit event trigger animation callback like component definition methods triggeranimationa change state trigger animation triggeranimationb thistriggeranimationa animationafinish gt change state trigger animation b correct seemed little verbose way go thanks", "d": "1/2017"}, {"body": "think would work definitely looks better refbased solution", "d": "1/2017"}, {"body": "bug gets parsed html parser vue sees valid expression want pass literal function entity encode ampersand want pass literal function escape javascript expects", "d": "1/2017"}, {"body": "fyi supports checkboxs bound arrays box", "d": "1/2017"}, {"body": "thanks", "d": "1/2017"}, {"body": "would binding type checkboxes work radio buttons storing selected radio item value array removing others values leaving values array intact might use store selections", "d": "1/2017"}, {"body": "andrisi unlikely radio buttons represent single value definition think better stick data structure aligns form inputs designed", "d": "1/2017"}, {"body": "form inputs display might represent ideal data structure home selectable features use checkbox features mutually exclusive house flat door colors use radio button still like store features list suites relational model vuejs data based surprise need workaround initial feature request would come handy setget functions vmodel", "d": "1/2017"}, {"body": "form inputs definitely represent least subpart data structure since already achievable computed setters nt think need add anything new api", "d": "1/2017"}, {"body": "posva yes requires us create computed property radio group getset function pair would support id param solution could cleaner lots radion button groups", "d": "1/2017"}, {"body": "computed property would gather getters setters together would imo cleaner edit nt know code writing looks like imagine", "d": "1/2017"}, {"body": "maybe nt understand solution computed property getset function radio group say doable course nt simpler add vmodel computedwithparam single computedwithparam one set id val one get id function", "d": "1/2017"}, {"body": "nt see difference think add jsfiddle show trying groups enough example", "d": "1/2017"}, {"body": "store form data structure natural form input bindings likely object create single computed property translates whole data structure desired format eg array", "d": "1/2017"}, {"body": "sure work somehow wanted avoid intermediate step lots code translate back forth single view data require even mingling sending data server data come props array manually added computed property", "d": "1/2017"}, {"body": "posva let say something based controls even implement set function instead vmodelset setprop called setprop name value", "d": "1/2017"}, {"body": "talking ofc looks silly simple example imo better approach would using object instead array keep mind computed setters getters generated hope helps cheers", "d": "1/2017"}, {"body": "tag child tag checkout updated fiddle", "d": "1/2017"}, {"body": "right understand bit lazy example still highlights issue said problem nt happen foriegnobject nt first tag component goes without saying would nt work outside svg tag app svg specified component calls component mentioned", "d": "1/2017"}, {"body": "please provide minimal reproduction fiddle", "d": "1/2017"}, {"body": "absolutely one shows problem see error console notice child component inside svg tag exact fiddle except foreignobject wrapped tag nt exhibit issue", "d": "1/2017"}, {"body": "reopening since sure expected maybe added list", "d": "1/2017"}, {"body": "try javascript vuecomponent fo template fo new vue el svg", "d": "2/2018"}, {"body": "text removed form ask question issue list repo exclusively bug reports feature requests simple questions please use following resources read docs watch video tutorials ask gitter chat room ask forums look forask questions stack overflow", "d": "1/2017"}, {"body": "lol resolved", "d": "1/2017"}, {"body": "default npm export runtimeonly build nt support compiling templates fly better yet may want use electron vue boilerplate", "d": "1/2017"}, {"body": "see thanks trying lazy avoid webpack since nt technically need electron would solve problem thanks info", "d": "1/2017"}, {"body": "behaviour different binding instead workaround use computed property custom select use directive instead", "d": "1/2017"}, {"body": "thank workaround worked great quite sure works anywhere docs explained", "d": "1/2017"}, {"body": "noticed neither custom select workaround demonstrated posva handle null option properly contrary originally stated first comment original select value null properly selects selected options added dynamically initially however toggle blue back selected show empty combobox instead selected edit completeness found workaround problem well would nice component developers updated fiddle following workaround see", "d": "1/2017"}, {"body": "actually value select dom element always string instead null empty string", "d": "1/2017"}, {"body": "think experiencing something similar issue asked luck yet however could figure workaround someone give clue much appreciated", "d": "2/2017"}, {"body": "closing due inactivity also workaround pointed", "d": "11/2017"}, {"body": "use content displayed retrieving div size", "d": "1/2017"}, {"body": "appears webpackhtmlplugin issue please file issue", "d": "1/2017"}, {"body": "provide minimal reproduction code using jsfiddlejsbincodepen demonstrate issue could start template already includes latest version vue", "d": "1/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "2/2017"}, {"body": "", "d": "1/2017"}, {"body": "hello sorry added id end happen also correct id", "d": "1/2017"}, {"body": "solved error renaming indexjs file looks like bug", "d": "1/2017"}, {"body": "update webpack config", "d": "1/2017"}, {"body": "utilizing template rendering error entire gets replaced html comment case following old vue tutorial nt account change seems weird enough maybe getting started guide mention maybe comment could say vue template error instead empty mysterious nothingness", "d": "2/2017"}, {"body": "hi thanks filing issue simply key components work expected", "d": "1/2017"}, {"body": "fnlctrl got working thank much", "d": "1/2017"}, {"body": "please follow issue reporting guidelines opening new issues", "d": "1/2017"}, {"body": "hello lyquocnam thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "1/2017"}, {"body": "array syntax accept array style objects strings top level value direct css string", "d": "1/2017"}, {"body": "ooops apologies", "d": "1/2017"}, {"body": "added ieedge virtualbox running edge windows screencap reference errors popping console either edit noticing clicking john returns false extremely odd behaviour", "d": "1/2017"}, {"body": "worth pointing worked fine vue lt", "d": "1/2017"}, {"body": "", "d": "2/2017"}, {"body": "sunnyone anyone else nt populate issue feed unhelpful clearly need use add reaction button want drive attention issue", "d": "2/2017"}, {"body": "hey sorry delay completely forgot happens onchange fires computed setter edge using computed setter nt need onchange event handler simply emit setter", "d": "2/2017"}, {"body": "posva could provide bit info onchange fires computed setter edge computed setter fired trying get enough info edge bug report", "d": "2/2017"}, {"body": "jdalton afaik problem clicking checkbox order events fired different ieedge browsers chromeff click change ieedgesafari change click sure behavior specified anywhere spec though", "d": "2/2017"}, {"body": "ah nice thanks simplified repro", "d": "2/2017"}, {"body": "trying get enough info edge bug report jdalton awesome btw close since related browser firing different order", "d": "2/2017"}, {"body": "reported issue internally ping back get info", "d": "2/2017"}, {"body": "jdalton update seems phantomjs safari also fire spec states default actions usually performed event dispatch completed exceptional cases may also performed immediately event dispatched technically nt fired however imo really logically result default action example inside click listener checkbox able prevent event happening altogether current behavior chromeff safariieedgephantomjs", "d": "2/2017"}, {"body": "oh ya arguing current behavior think edge align chromeff", "d": "2/2017"}, {"body": "although nt quite understand use case something like", "d": "1/2017"}, {"body": "hm quite solve issue use case want compile whole application templates within one single component file style script template sections deliver within package easier customization template modifications needed nt go directly components rather create xtemplate within html file overrides already provided template onecomponentfile idea could solve", "d": "1/2017"}, {"body": "using single file components", "d": "1/2017"}, {"body": "application using single file components yes", "d": "1/2017"}, {"body": "case possible singlefile components templates precompiled build time also allowing users arbitrarily overwrite component template sounds messy maybe consider using slots allow content composition instead", "d": "1/2017"}, {"body": "case someone ever wants workaroundsolution solved way starting application override vueprototype mount js import vue vue const mount vueprototype mount vueprototype mount function el hydrating const options options optionstemplateoverride amp amp typeof optionstemplateoverride string amp amp optionstemplateoverridecharat amp amp documentqueryselector optionstemplateoverride let renderfunctions vuecompile documentqueryselector optionstemplateoverride innerhtml objectassign options renderfunctions return mountcall el hydrating vue component say override xtemplate used example vue export default name hello templateoverride hellooverride data return msg welcome vuejs app vue finds xtemplate dom override id take example html way write components one component file vue way also give away others override template needed", "d": "2/2017"}, {"body": "create pull request make core chances really make core background working within agency write applications included within website minimal template modifications without compiling someone else able change template customer needs", "d": "2/2017"}, {"body": "dimitrikoenig thanks sharing solution since solution simple enough use case specific need add core", "d": "2/2017"}, {"body": "dimitrikoenig also similar requirement want easy customization template modifications needed override templates tried solution given dimitrikoenig somehomw working dimitrikoenig one quick question solution file need add override id added contents indexhtml work please explain bit relatively new vuejs vue finds xtemplate dom override id take example", "d": "6/2018"}, {"body": "computed properties readonly want format values input create component put formatting logic", "d": "1/2017"}, {"body": "stefanosandes computed properties readonly", "d": "1/2017"}, {"body": "working intended setter hit argument would would tell field actually changed want computed property every field single property bulk", "d": "1/2017"}, {"body": "intended behavior use nonminified build see warning fixed", "d": "1/2017"}, {"body": "hmm list using generate option elements computed property constantly changes based several computed properties simply want first value selected means add another watcher computed property keep preselected value correct seems like lot work something worked simply", "d": "1/2017"}, {"body": "vorror quite getting nt first option example static option dynamically rendered based computed property say able hook", "d": "1/2017"}, {"body": "nt work import materializecss question", "d": "2/2018"}, {"body": "since give prop boolean type normal value missing prop bothers value passed prop cast boolean getting error happens", "d": "1/2017"}, {"body": "posva sometimes required use modals parent control state modal prop value prop parent trigger event", "d": "1/2017"}, {"body": "znck yeah remind read something similar able explicitly pass type prop probably feature", "d": "1/2017"}, {"body": "able explicitly pass type prop probably feature passing works bug prop provided user component naturally expected", "d": "1/2017"}, {"body": "nt think asking type missing prop false intuitive keep prop missing use type", "d": "1/2017"}, {"body": "znck yeah purpose would called edit nevermind issue", "d": "1/2017"}, {"body": "posva honestly way missing prop become would expect missing guess matter opinion thing pointed values like casted true also kind weird javascript empty string falsy value", "d": "1/2017"}, {"body": "boolean casting follows rule boolean attribute presence value casted true absence means false personally think bad idea differentiate state boolean props", "d": "1/2017"}, {"body": "although highly respect opinions knowledge would like present different view developer may want know boolean prop defined two examples component developer external use may want build logic determine property defined various internal checks robustness realistic impose use mybool undefined especially trying make component robust flexible fortunately workaround impose external changes explicity set default undefined multivalue prop includes boolean value may desired example simplifies usage component assumes happy default following example scenarios prop false icon displayed b undefined defined true display default icon c string custom icon name however since vue forces undefined false manage case b since observe undefined state would forced add second prop thus requiring two props boolean string something could done one additionally ask user pass string false true string since could icon name since undefined fasly negative impact keeping however loss functionality removing additional irritant define boolean string prop undefined default prop defined component receive empty string instead expected true value maybe submit seperate issue see following jsfiddle examples", "d": "1/2018"}, {"body": "mistaken actually already possible using vueloader", "d": "1/2017"}, {"body": "yes templates", "d": "1/2017"}, {"body": "working tests vueloader component using code works fine specific case rising syntax errors tried well", "d": "1/2017"}, {"body": "original object destructuring syntay nt require vbind either", "d": "1/2017"}, {"body": "facepalm nt know head sorry guys thanks", "d": "1/2017"}, {"body": "works fine assigning new variable names seems work slotscope newvariable destructuredvariable anyone check thanks", "d": "4/2018"}, {"body": "wo nt like please open bug report reproduction", "d": "4/2018"}, {"body": "every rendering faithfully patch real dom virtual dom render function returns case returning virtual dom something like vue correctly resets input value template single way changing content input update data model might need two way binding update vm fixed", "d": "1/2017"}, {"body": "herringtondarkholme came say exactly variable method changed input value changed therefore never reset never set begin need use directive bind input values data model", "d": "1/2017"}, {"body": "makes sense thanks", "d": "1/2017"}, {"body": "thanks using vue read correct simonmurdock proposing vue allow multiple nodes eg text node element node component root right best knowledge afraid probably scope since code base strong assumption component root single node supporting text node outside root node would require total rewrite also introduce calamitous breaking changes", "d": "1/2017"}, {"body": "herringtondarkholme allow multiple nodes warn binding output placed root outside div code would expect error saying title rendered outside root node currently runs produces output", "d": "1/2017"}, {"body": "simonmurdock record add reproduction jsfiddle thanks", "d": "1/2017"}, {"body": "nt think replicate jsfiddle think webpack required replicate nothing change generated stuff immediately opening tag like", "d": "1/2017"}, {"body": "\u6211\u89c9\u5f97\u8fd9\u4e2a\u4f8b\u5b50\u4e0d\u9519", "d": "3/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described case asking question chat room forum beloved stackoverflow issue list repo exclusively bug reports feature requests thanks support", "d": "1/2017"}, {"body": "think bug", "d": "1/2017"}, {"body": "think bug please provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "1/2017"}, {"body": "reproduce particular scene u clone github try", "d": "1/2017"}, {"body": "use variable type boolean object wont work use boolean work scene", "d": "1/2017"}, {"body": "herringtondarkholme", "d": "1/2017"}, {"body": "project count reproduction reproduction minimal concise displaying issue nothing else make concise reproduction likely bug code library thus problem belongs forum issue tracker fine reproduction repo instead fiddle still concise explain result expected goes wrong", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "1/2017"}, {"body": "message created automatically mail delivery software message sent could delivered one recipients temporary error following address es deferred acmeideal gmailcom domain biomassives exceeded max emails per hour allowed message reattempted later copy message including headers received esmtps exim envelopefrom noreply githubcom id greg biomassives thu jan date tue jan dkimsignature crelaxedrelaxed dgithubcom hfrom replyto cc inreplyto references subject listid listarchive listpost listunsubscribe evan notifications githubcom replyto vuejsvue reply replygithubcom vuejsvue vue noreplygithubcom cc subscribed subscribed noreplygithubcom messageid inreplyto references subject vuejsvue ica nt dynamic add events tag custom grid component mimeversion contenttype multipartalternative boundary contenttransferencoding precedence list xgithubsender xgithubrecipient biomassives xgithubreason subscribed listid vuejsvue listarchive listpost reply replygithubcom listunsubscribe xautoresponsesuppress xgithubrecipientaddress greg biomassives contenttype textplain contenttransferencoding please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks receiving subscribed thread reply email directly view github contenttype texthtml contenttransferencoding quotedprintable please make sure read issue reporti ng guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks amp dash receiving subscribed thre adreply email directly view github mute thread", "d": "1/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "1/2017"}, {"body": "object expect see markup binding tested using latest dev branch value bound string renders properly", "d": "1/2017"}, {"body": "binding even text happens input checkbox though jan pm evan notifications githubcom wrote row object expect see markup binding value tested using latest dev branch value bound string renders properly receiving authored thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "need provide reproduction otherwise nothing", "d": "1/2017"}, {"body": "seems working pen check differs client code come back needed thanks update using dynamic type inputs think might issue got warning codepen though", "d": "1/2017"}, {"body": "similar issue upgrading vue fixed key difference may using vuecli webpacksimple failing case converted plain html file without toolchain problem went away appvue test test export default name app el app data return test false testhtml", "d": "3/2017"}, {"body": "realize leaves lot reproducible test case started scratch follows edit indexhtml add edit webpackconfigjs add replace srcappvue test test export default name app data return test false finally build everything toggle checkbox expect see instead see changing indexhtml results expected behaviour ben", "d": "3/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "1/2017"}, {"body": "sorry evan new github issues main idea problem want edit entity getting data entity binding one property select sometimes appear selected one undefined value instead one related value retrieved callback", "d": "1/2017"}, {"body": "need actual code run identify problem familiar repro please read", "d": "1/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "2/2017"}, {"body": "works intended changing data sadly hairy behavior implementation specific would recommend using hint vue schedule updating dom manually problem vue schedules data changes watchers internally every watcher run hook get called data change gets chance captured executed wrapped change scheduled next update queue doc correctly warns changing state reason might misleading chrisvfritz idea", "d": "1/2017"}, {"body": "herringtondarkholme unless misunderstanding use case nt think even use computed properties watchers advantage updated even dom updates would made eg option removed state change initiated current user updated doc make clearer", "d": "1/2017"}, {"body": "sorry computed properties watchers part want make validity check dom changes used instead use watcher prop take account dom changes take place tick nt think use computed property want sure emit correctedverified value back parent component immediately possible", "d": "1/2017"}, {"body": "use computed property instead component still rerender emit updated value right case nt see advantage using computed property please disregard third paragraph comment nt make sense edit oh unless events emitted computed property function nt trigger rerender either case seems like duplicating state little bit think rather eat second render cycle", "d": "1/2017"}, {"body": "mean something like notice watcher parent component rather custom input using updated hook nt trigger second render cycle makes application brittle since parent component longer sole source truth example changed parent component passed dynamic props instead assigning initial data chance select could start invalid state also select would need rendered times value parent updated properly", "d": "1/2017"}, {"body": "oh see right better thanks", "d": "1/2017"}, {"body": "probably intended may missing something", "d": "1/2017"}, {"body": "yes intended behavior", "d": "1/2017"}, {"body": "explained nt make sense add listeners nt always render single element wrapper element required also take step back say slot simply proper mechanism want actual visual content expected provided parent component thing component fact providing implementation method case scoped slots actually looks like plausible solution however providing javascript method component first place simply javascript module exports method instead importing component try compose template using esoteric techniques simply import method use js import logout authservice export default methods logout point want encapsulate common markupstyling suggest allowing customizations via props instead slots", "d": "1/2017"}, {"body": "thanks insights example perhaps bit simple right importing method would better case idea behind reusable components creating provide functionality eg logout button something complex like navigation control automatically populated well default look feel using style guide apps implement components without involved implementation still override styling classes also custom elements complex scenarios scoped slots might indeed way go", "d": "1/2017"}, {"body": "stumbled upon would follow behaviour right however documented well good enough maybe pr docs would suited", "d": "6/2017"}, {"body": "please take time make reproduction jsfiddle instead sharing whole project also narrow issue appreciate thank", "d": "1/2017"}, {"body": "html item toggle export default data function return items active methods beforeenter function el elclasslistadd beforeenter enter function el elclasslistadd enter afterenter function el elclasslistremove beforeenter beforeleave function el consolelog leave getcomputedstyle el display leave function el elclasslistadd leave consolelog leave getcomputedstyle el display consolelog elclasslist afterleave function el elclasslistremove enter leave toggle function el thisactive thisactive gt thisactive transition transition linear position fixed top display block beforeenter left enter left enterleave left posva made example leave span class transition enter transition enter leave animations nothing happened span disappear", "d": "1/2017"}, {"body": "calling callback enter leave", "d": "1/2017"}, {"body": "posva using javascriptonly transitions done callbacks required enter leave hooks otherwise called synchronously transition finish immediately done callback optional used combination css obviously using css transition", "d": "1/2017"}, {"body": "remove need help please head forums open topic people help cheers", "d": "1/2017"}, {"body": "posva tested solutions neither make sense", "d": "1/2017"}, {"body": "done callback required although using css adding classes via javascript auto css transition handled vue", "d": "1/2017"}, {"body": "hi smolinari thanks report almost perfect thing missing would small reproduction jsfiddlenet similar service could add one look also failing example element parent template never closed typo code example real app well thanks", "d": "1/2017"}, {"body": "hey linusborg thorsten see put together jsfiddle missing closing tag typo corrected scott", "d": "1/2017"}, {"body": "jsfiddles double named slots lt works dynamic slots lt works change true slots change places mix lt nt work interesting jsfiddle least renders results however dynamic slots nt work scott", "d": "1/2017"}, {"body": "thanks quick resolution kind service another reason know vue great choice scott", "d": "1/2017"}, {"body": "moved relevant repository bad nt read correctly", "d": "1/2017"}, {"body": "install packages yarn good go", "d": "1/2017"}, {"body": "install yarn brew made npm broke find semver module reinstall npm fixed use yarn install package lint still exec fail vue libo npm run lint verbose npm info worked ends ok npm verb cli usrlocalbinnode npm verb cli usrlocalbinnpm npm verb cli run npm verb cli lint npm verb cli verbose npm info using npm npm info using node npm verb runscript prelint lint postlint npm info lifecycle vue vue npm info lifecycle vue vue vue lint volumestranscendcodevue eslint src build test volumestranscendcodevuesrccoreobserverindexjs error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent problems errors warnings npm verb lifecycle vue unsafeperm lifecycle true npm verb lifecycle vue path usrlocallibnodemodulesnpmbinnodegypbin volumestranscendcodevuenodemodulesbin usrlocalsbin usrlocalbin usrlocalsbib usrlocalbin usrbin bin usrsbin sbin npm verb lifecycle vue cwd volumestranscendcodevue npm info lifecycle vue failed exec lint script npm verb stack error vue lint npm verb stack exit status npm verb stack eventemitter npm verb stack emittwo npm verb stack eventemitteremit npm verb stack childprocess npm verb stack emittwo npm verb stack childprocessemit npm verb stack maybeclose npm verb stack processchildprocesshandleonexit npm verb pkgid vue npm verb cwd volumestranscendcodevue npm err darwin npm err argv usrlocalbinnode usrlocalbinnpm run lint verbose npm err node npm err npm npm err code elifecycle npm err vue lint npm err exit status npm err npm err failed vue lint script eslint src build test npm err make sure latest version nodejs npm installed npm err likely problem vue package npm err npm npm err tell author fails system npm err eslint src build test npm err get information open issue project npm err npm bugs vue npm err nt available get info via npm err npm owner ls vue npm err likely additional logging output npm verb exit true npm err please include following file support request npm err volumestranscendcodevuenpmdebuglog", "d": "1/2017"}, {"body": "probably caused eslint configuration reproduce local machine clean clone install eslint prefer local configuration global one would like recheck eslint", "d": "1/2017"}, {"body": "check global config eslint global config make node crash exit status", "d": "1/2017"}, {"body": "believe configuration problem error message indicates eslint using local configuration confident seems path strange maybe clean cloning installing directory full permission generate different results", "d": "1/2017"}, {"body": "work vue libo node nodemoduleseslintbineslintjs src build test volumestranscendcodevuesrccoreobserverindexjs error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent problems errors warnings work vue libo npm run lint vue lint volumestranscendcodevue eslint src build test volumestranscendcodevuesrccoreobserverindexjs error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent error expected indentation spaces found indent problems errors warnings npm err darwin npm err argv usrlocalbinnode usrlocalbinnpm run lint npm err node npm err npm npm err code elifecycle npm err vue lint npm err exit status npm err npm err failed vue lint script eslint src build test npm err make sure latest version nodejs npm installed npm err likely problem vue package npm err npm npm err tell author fails system npm err eslint src build test npm err get information open issue project npm err npm bugs vue npm err nt available get info via npm err npm owner ls vue npm err likely additional logging output npm err please include following file support request npm err volumestranscendcodevuenpmdebuglog work vue libo eslint src build test oops something went wrong eslint could nt find plugin eslintpluginflowtype happen couple different reasons eslint installed globally make sure eslintpluginflowtype also installed globally globallyinstalled eslint find locallyinstalled plugin eslint installed locally likely plugin nt installed correctly try reinstalling running following npm eslintpluginflowtype latest savedev still ca nt figure problem please stop chat team", "d": "1/2017"}, {"body": "work eslint global config check found something call eslint", "d": "1/2017"}, {"body": "remove global path try source directory report error", "d": "1/2017"}, {"body": "", "d": "2/2017"}, {"body": "hi exact problem using npm install dependencies works fine yarn npm attempt fresh installed mac possible conflict situation", "d": "2/2017"}, {"body": "able properly resolve issue since nothing vuejs really concerned resolved chase proper solution outside issue report", "d": "10/2017"}, {"body": "hello leonardovilarinho thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help hint probably fact babelloader nt convert files plugins use classes works files", "d": "1/2017"}, {"body": "thanks feedback sorry disappointment design process pretty open alphabeta phases community plenty feedback many affected outcome final released simply bit late feedback point twoway binding change discussed many times design process nt really feel like repeating thing short story found less maintainable less flexible props events pattern recommended also particularly constructive go nt like removal particular feature project lost way respect personal impression tend believe otherwise based combined feedback community whole overall believe clear improvement nt plan bring breaking changes fix foreseeable future ps please note contribution guidelines explicitly stated issues fit general feedback like better post forums", "d": "1/2017"}, {"body": "thank reply evan", "d": "1/2017"}, {"body": "example success vue dev quasar framework refactor get framework working vue took weeks refactor quasar using well written migration guide said rough patches get also said upgrading vue like keeping toy opposed spaceship safely say efforts get going vue well worth scott", "d": "1/2017"}, {"body": "nt declare set empty object even reactive fixed", "d": "1/2017"}, {"body": "either need cast reify", "d": "1/2017"}, {"body": "weird using templates work fine", "d": "1/2017"}, {"body": "yes template works find render function compiled vuetemplatecompiler using rollup posva basically plugin template", "d": "1/2017"}, {"body": "znck tested locally updating dependencies everything works fine maybe vuetemplatecompiler outdated", "d": "1/2017"}, {"body": "share generated render function", "d": "1/2017"}, {"body": "work webpack rollup build maybe rollup plugin deps outdated", "d": "1/2017"}, {"body": "okay update moving peerdeps", "d": "1/2017"}, {"body": "compiles compiles", "d": "1/2017"}, {"body": "issue method", "d": "1/2017"}, {"body": "looks like chrome event propagated triggered div well sure anything vue meantime utilize modifier like", "d": "1/2017"}, {"body": "yes probably chrome vue patches dom faster event propagates soon event reaches divitem callback already reattached", "d": "1/2017"}, {"body": "works add keys vue reuse div instead destroy create fresh one velse part", "d": "1/2017"}, {"body": "linusborg thanks right", "d": "1/2017"}, {"body": "events styled checkbox captured semantic script modified fiddle add click event counter imo file bug semantic repo", "d": "1/2017"}, {"body": "using events instead events checkboxes trigger updates however based znck showed consider bug semantic ui styling checkbox affect click events element", "d": "1/2017"}, {"body": "encounter issue found solution using pure css version semantic ui checkbox remove checkbox call eg remove hidden class checkbox become unclickable add label tag inside even label content styled checkbox shown checkout fiddle thanks znck", "d": "1/2017"}, {"body": "way use checkbox call cause global calls used php blade views", "d": "7/2017"}, {"body": "vinayakkulkarni ran decided add vue class checkboxes handled semantic global call becomes remember add labels label click events pass correctly", "d": "7/2017"}, {"body": "yateric thank much posting nonjavascript version really simplified vue application semanticui need js activate styling nt work smoothly vue templates conditional rendering watch property call semantic uis js calls ensure widgets working", "d": "9/2017"}, {"body": "vue fault use arrow function like use object shorthand syntax lt see babel transpiles code also article probably explain better", "d": "1/2017"}, {"body": "sqal right arrow function captures lexical case return undefined strict mode expected", "d": "1/2017"}, {"body": "could write since values directly available really want values updating one place able achieve scoped slots simply referring variable grid meant used inside elementlist example reference pointed doable render function nt dig since behaviour asking implicit version something already achieved doubt makes sense implement", "d": "1/2017"}, {"body": "yep looks like solution though would nice something looks simple front example kindly provided simple syntax would maybe readable actually nt know complex find children elements according props slot pass parentdefined props hard would really awesome", "d": "1/2017"}, {"body": "dorseth prefer explicit way always rely implicit way means component depends parent reusable", "d": "1/2017"}, {"body": "achieve want using render function iterate vnodes find nodes add appropriate props requires bit familiar vnode structure nt anything extra vue needs expose allow", "d": "1/2017"}, {"body": "sorry bump quick dirty solution without render function looking maybe help someone write cleaner lib html import match jquerymatchheight import grid gridvue export default props width default height default xs type string md type string lg type string elems default extra type string default childextra type string default type string default wrapper type string default components grid created thisxs thisfxs parseint thisxs thismd thisfmd parseint thismd thislg thisflg parseint thislg thismd thisfmd thisfxs thislg thisflg thisfxs mounted thissamelength gt thissame matchheight byrow false data return fwidth parseint thiswidth fheight parseint thisheight", "d": "1/2017"}, {"body": "accomplished throught customized context fieldjs import consumer mixinscontext export default consume return showrequiredcolumn showrequiredcolumn noleftpadding noleftpadding mixinscontextjs copied herringtondarkholmevueadvancedprogramming renamed transplanted mpvue import lodash import get lodashfpget const getoptions get vnodecomponentoptionsctoroptions const consume vm token gt let parent vm const ret parent const context parent context context amp amp context token const value get context token return value retpush value parent parent parent return ret undefined const exposecontext vm gt const options getoptions vm optionsexpose return optionscomputed context gt optionsexposecall vm vm const consumecontext vm gt const options getoptions vm optionsconsume return const consumemap isfunction optionsconsume optionsconsume optionsconsume optionscomputed optionscomputed foreach consumemap token key gt optionscomputed key gt consume vm token export const exposer beforecreate exposecontext beforeupdate exposecontext export const consumer beforecreate consumecontext beforeupdate consumecontext", "d": "5/2018"}, {"body": "fyi accomplished using provide inject", "d": "7/2018"}, {"body": "", "d": "1/2017"}, {"body": "templates compiled render functions entire function called whenever component updates means templates never contain side effects put lifecycle hooks instead", "d": "1/2017"}, {"body": "compiler generates different code based wether tag component native tag element vs etc treated component use render native elements wontfix use branches want render different elements", "d": "1/2017"}, {"body": "html dom \u91cc\u7684\u6a21\u677f\u5728\u88ab vue", "d": "1/2017"}, {"body": "make sure lists", "d": "1/2017"}, {"body": "thanks lot sorry invalid issue new vue migrating vue codebase vue", "d": "1/2017"}, {"body": "please consult guide api docs property solves problem questions encourage ask forum stack overflow gitter happy help", "d": "1/2017"}, {"body": "linusborg thank much worked", "d": "1/2017"}, {"body": "slightly modified test like one triggers error also pinpoint line comment describes problem", "d": "1/2017"}, {"body": "hey thanks fast", "d": "1/2017"}, {"body": "full stack trace", "d": "1/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "1/2017"}, {"body": "happy report building reproduction noticed bug code fixing appears caused issue go away sorry taken time thanks", "d": "1/2017"}, {"body": "note example works bound", "d": "1/2017"}, {"body": "fixed example", "d": "1/2017"}, {"body": "znck well solution current case distributable components need preserve input value radios case example custom radios", "d": "1/2017"}, {"body": "supported component read docs input components", "d": "1/2017"}, {"body": "znck examples docs text inputs otherwise modify example custom radios compatible vmodel", "d": "1/2017"}, {"body": "provide prop different name map checkbox radio option value", "d": "1/2017"}, {"body": "posva ok checked state binding wo nt work value string case makes always checked", "d": "1/2017"}, {"body": "value used input value use different name value", "d": "1/2017"}, {"body": "posva mentioned ok checkbox nt work input type radio check example", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "bug field items list defined upfront vue ca nt pick changes field consider reactive fixed demo information please read", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem necessary create repository us clone minimal reproduction repositories actual projects generally accepted thank", "d": "1/2017"}, {"body": "problem", "d": "3/2017"}, {"body": "answer", "d": "3/2017"}, {"body": "thinking may design better way structure data changes reflected currently option repopulate entire tree", "d": "1/2017"}, {"body": "updated fiddle updated please refer", "d": "1/2017"}, {"body": "supermeng \u8bf7\u6309\u7167 issuereportingguidelines \u6765 \u62a5\u544a \u63cf\u8ff0\u6e05\u695a\u6f5c\u5728\u7684 bug", "d": "1/2017"}, {"body": "\u5b9e\u5728\u627e\u4e0d\u51fa\u95ee\u9898\u539f\u56e0\u6c42\u5927\u795e\u642d\u6551", "d": "2/2017"}, {"body": "parent template fault", "d": "1/2017"}, {"body": "thanks undavide seems bug looking", "d": "1/2017"}, {"body": "defcc simplified example make less random click within bar see", "d": "1/2017"}, {"body": "thanks posva", "d": "1/2017"}, {"body": "posva please help check issue nt got enough time follow days", "d": "1/2017"}, {"body": "browser seems triggering change event purpose nt manually trigger event side sure though needs research undavide may already instead listening event watch slider value reliable way", "d": "1/2017"}, {"body": "actually example posted implemented slightly complex scenario building interface photoshop plugin user drags slider andor directly types number stepper routine run either user press enter key stepper easy implemented done dragging handler ie drops nt need routine constantly run slider bound value dragging number properly mirrored stepper done thanks ways binding vmodel dropping function needs called could perhaps implement kind debounce function really far ideal case thank", "d": "1/2017"}, {"body": "imagined needed computation release maybe mouseup event works well", "d": "1/2017"}, {"body": "maybe listen input event", "d": "2/2017"}, {"body": "seems value setter getter different change event triggered code extra log info undavide provided", "d": "3/2017"}, {"body": "using vmodel custom getset work fine something wrong computed getset functions", "d": "5/2017"}, {"body": "hello guys came across exactly issue point view nt work proper way chrome mean better use syntax instead fail freezing success works like charm tia", "d": "12/2017"}, {"body": "usage incorrect fixed", "d": "1/2017"}, {"body": "oh dude thanks", "d": "1/2017"}, {"body": "hi thanks filing issue however issue tracker reserved bug reports feature requests please use gitter forum stackoverflowto ask questions thanks", "d": "1/2017"}, {"body": "expected behavior vue try cast string number type return original string fails also reasonable always get delete input value case better deal userland", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "vuejs uses internally", "d": "1/2017"}, {"body": "right", "d": "1/2017"}, {"body": "nt attribute get removed empty creates tons casting errors really", "d": "5/2017"}, {"body": "looks like nt agree vmodelnumber ever returned string still hold strongly thinking property removed object turned null", "d": "5/2017"}, {"body": "kgrosvenor yeah met problem nt think empty string reasonable see explanation also reasonable making difference complicated need number type useful need know user input use filters make easier", "d": "5/2017"}, {"body": "guess unexists value int typed property null instead empty string", "d": "7/2017"}, {"body": "yes emptied user opinion setting empty string throws lots type warnings component props expect maybe could modifier could used various scenarios set empty strings user emptied input", "d": "9/2017"}, {"body": "defcc think still worth conversation completely agree casting seems incorrect use case modifier think people would use thinking nt need extra step casting string integer child component expects integer string currently falls back string means still need extra code ignore cast fails making significantly less useful reason cast undefined null", "d": "10/2017"}, {"body": "thanks share team think aldencolerain notifications githubcom defcc think still worth conversation completely agree casting seems incorrect use case modifier think people would use thinking nt need extra step casting string integer child component expects integer string currently falls back string means still need extra code ignore cast fails making significantly less useful reason cast undefined null receiving mentioned reply email directly view github mute thread", "d": "10/2017"}, {"body": "defcc fergaldoyle update", "d": "1/2018"}, {"body": "think casting null would make sense number type used angularjs removing object null would suffice thats initially declare model text field nt populated placeholder text also show properties null", "d": "1/2018"}, {"body": "also agree casting null would make sense number contract get back number ca nt number null abrogation contract", "d": "5/2018"}, {"body": "workaround used numbers empty string cleared following work like default maybe help someone else property cast tostring typescript", "d": "6/2018"}, {"body": "would love null would make consistent return string bound create problems projects one wants workaround instead fix consistent type empty models null best suited", "d": "6/2018"}, {"body": "returning mentioned fergaldoyle modifier would cool", "d": "6/2018"}, {"body": "please reopen set k input updated cleared idiomatic javascript indicate value provided various json parsers accept field type emptystring given json decode often defcc posva", "d": "7/2018"}, {"body": "defcc chance could get reopened", "d": "8/2018"}, {"body": "using expect number case returning empty string nonsense please reopen issue change behaviour thanks", "d": "8/2018"}, {"body": "value set empty string html input gives still allows people check input empty yes would js idiomatic would breaking change adopted vue considered vue locking becoming spam", "d": "8/2018"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "1/2017"}, {"body": "dom \u4e2d\u7684 html", "d": "1/2017"}, {"body": "version", "d": "1/2017"}, {"body": "\u53ef\u4ee5\u54cd\u5e94\u554a", "d": "1/2017"}, {"body": "iburning", "d": "1/2017"}, {"body": "\u6211\u7528\u7684\u662f vue", "d": "1/2017"}, {"body": "works fine update vue version fix nt open new issue reproduction", "d": "1/2017"}, {"body": "vue \u63d2\u4ef6\u7684 github \u4e2d\u90fd\u6709\u8fd9\u6837\u7684", "d": "1/2017"}, {"body": "\u6709\u7684vue\u63d2\u4ef6\u662f\u4e00\u4e2a\u7ec4\u4ef6 components\u800c\u975e\u63d2\u4ef6 pluginapply function", "d": "1/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described may import use try something seems wrong webpack setup", "d": "1/2017"}, {"body": "posva sterilesummer \u5728 webpack \u4f46\u662f\u6253\u5305\u540e\u7684\u63d2\u4ef6\u9700\u8981\u624b\u52a8\u5f15\u7528 css vue npm publish", "d": "1/2017"}, {"body": "closing op said issue resolved", "d": "1/2017"}, {"body": "issue \u7528\u6765\u8ddf\u8fdb vuejs bug \u548c feature issuereportingguidelines \u6765 \u63cf\u8ff0\u6e05\u695a\u6f5c\u5728\u7684 bug \u6211\u57fa\u4e8e vueuse", "d": "1/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "1/2017"}, {"body": "issue", "d": "1/2017"}, {"body": "issue web server configuration server needs set deliver page urls assuming nt endpoints server server service using deliver page", "d": "1/2017"}, {"body": "thanks issue vuerouter could open issue vuerouter repository next time rpkilby skaterdad mentioned duplicate could get information", "d": "1/2017"}, {"body": "skaterdad using linux box apache server development using osx", "d": "1/2017"}, {"body": "could file repo codebase filing issue", "d": "1/2017"}, {"body": "confirm issue scott", "d": "1/2017"}, {"body": "public email address associated github account", "d": "1/2017"}, {"body": "selected nt show email address github account settings", "d": "1/2017"}, {"body": "couple folks gitter channel also confirmed issue happening", "d": "1/2017"}, {"body": "also confirm issue guessing comment need public email address order sign using github", "d": "1/2017"}, {"body": "may auth callback url using https updated settings try", "d": "1/2017"}, {"body": "works fine thanks", "d": "1/2017"}, {"body": "worked thanks", "d": "1/2017"}, {"body": "first disable logs warnings setting see understand probably want hide warnings however would also welcome way exclusively turn warnings attribute use case generate html code pythonflaskwtforms use vue optional nice things would like keep javascript optional possible using attribute provide default values everyone people javascript activated still provide object values vue nt need warning", "d": "1/2017"}, {"body": "makes sense imo user explicitly uses provided option know fact input take value instead inline rendering warning believe result upgrade redundant", "d": "1/2017"}, {"body": "please nt project anger onto others", "d": "1/2017"}, {"body": "stated docs handle catches errors render runtime error occurs component render passed global vueconfigerrorhandler config function set demo might good enhancement make possible lifecycle hooks well optinions vuejsvue", "d": "1/2017"}, {"body": "considered error render happen rendering parent component", "d": "1/2017"}, {"body": "quite annoying noncought error stop spa working example using small catch around watcherrun flushschedulerqueue makes live easier error happens evaluating watcher", "d": "1/2017"}, {"body": "implemented land", "d": "2/2017"}, {"body": "still exist newest vue hope land soon", "d": "3/2017"}, {"body": "land still experience problems please open new issue live reproduction jsfiddle", "d": "3/2017"}, {"body": "move", "d": "3/2017"}, {"body": "exists node vfor higher priority vif", "d": "1/2017"}, {"body": "repsacby said use tag", "d": "1/2017"}, {"body": "repsacby posva got thanks", "d": "1/2017"}, {"body": "moving discussion", "d": "1/2017"}, {"body": "thanks kellerlong need make jsfiddlejsbincodepen demonstrate issue us look please refer happen huawei", "d": "1/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "1/2017"}, {"body": "", "d": "2/2017"}, {"body": "vue send request server plus jump static html phone ok please suspect modlue apply context", "d": "4/2017"}, {"body": "fmcmasin please stop spamming ask questions forum stackoverflow", "d": "4/2017"}, {"body": "error result one children undefined still tracking template came", "d": "1/2017"}, {"body": "thanks glittle need provide reproduction repository steps us look please refer", "d": "1/2017"}, {"body": "seeing working everything fails error seems similar issue", "d": "1/2017"}, {"body": "already fixed latest version please provide jsfiddle reproduce", "d": "1/2017"}, {"body": "able resolve updating quasarframework maybe really vue issue least us clue coming though really much go blank white page error also could nt find related issue quasar repo", "d": "1/2017"}, {"body": "dominikbln makes sense frameworks like quasar ship precompiled components older versions component may compiled using older version vue template compiler basically causes version mismatch due different render function code generated glittle suspect due something similar find difficult provide reproduction could provide following information version vue upgrading party vue componentsplugins using", "d": "1/2017"}, {"body": "wo nt able easily close issue however possible include value may want put checks place used", "d": "1/2017"}, {"body": "glittle usually normalized filter values cases skip normalization phase performance optimization based static analysis template structure change introduced issue optimization behavior assumes render code generated newer versions template compiler could potentially runtime errors using party component compiled using older versions vue least case imagine running error seeing try upgrading dependencies latest version see makes difference nt probably still bug needs resolved information", "d": "1/2017"}, {"body": "thanks think issue upgrading everything problem went away problems one dependency critical removing app running", "d": "1/2017"}, {"body": "template outside app also prop needs lower case due html limitations", "d": "1/2017"}, {"body": "ok got problem nt export mixin var", "d": "1/2017"}, {"body": "opened instead please check issues similar one nt exist make sure provide repro found one may related edit nt need worry vue issue nothing going change code component tree looks like devtools", "d": "1/2017"}, {"body": "context component nt find parent childrens also parent inherits root element uitab parent uitabs uitab parent root wtf", "d": "1/2017"}, {"body": "think fact original developers licenses mentioned top code question satisfies rules mpl read section also think larger works may create larger work combining covered code code governed terms license distribute larger work single product case must make sure requirements license fulfilled covered code words cause vue using nt mean must follow license type scott", "d": "1/2017"}, {"body": "searching problem using piece code released apache license long leave notice replace line smolinari said need", "d": "1/2017"}, {"body": "smolinari pointed seems fine attribute specific covered code mpl means still usedistribute vue mit long keep mpl notice vue source code intact", "d": "1/2017"}, {"body": "thanks duplicate fixed via", "d": "1/2017"}, {"body": "hello subhapy thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "1/2017"}, {"body": "using instead dynamic key bindings", "d": "1/2017"}, {"body": "fault made mistake writing demo fixed demo using instead bug remains see updated demo expect rendering two transitions double click button transtions finished immediately triggering hook left second rendered element dom", "d": "1/2017"}, {"body": "\u8fd9\u662f popover", "d": "1/2017"}, {"body": "blakenewman testing well may provide feedback", "d": "1/2017"}, {"body": "discovered jestvuepreprocessor vire merges pr blakenewman saves need use webpack simplifies process thanks", "d": "1/2017"}, {"body": "hey yes playing around jest recently processor needs little fine tuning possibly ability hook apply custom languages one issue highlight coverage reports currently map back correctly experimenting get support little tricky possible provide sourcemap jest internal coverage mechanism moment nt think fully possible however could missing something", "d": "1/2017"}, {"body": "deed preprocessor even updates compiling well components got missing entire props definition example getting back precompile webpack need coverage moment anyway getting better time satisfied", "d": "1/2017"}, {"body": "miljanaleksic vire want let know keyboard thursday take look pr get back", "d": "1/2017"}, {"body": "ok elmariofredo check report issues found thanks", "d": "1/2017"}, {"body": "elmariofredo thanks update rush miljanaleksic use exotic reference branch packagejson test pr exotic reference supports yarn", "d": "1/2017"}, {"body": "blakenewman know already tested works found new issues think better address current changes merged", "d": "1/2017"}, {"body": "blakenewman pr merged", "d": "1/2017"}, {"body": "running issue regarding css modules use preprocessor jest style property nt getting created attempting render template breaks style undefined nt found preprocessor scripts take care seeing vueify ca nt reason vueloader well enough determine", "d": "1/2017"}, {"body": "joezimjs experience say vue jest preprocessors mature enough opted build pre testing running another build jest watch mode would trigger tests run pretty good", "d": "1/2017"}, {"body": "miljanaleksic work build include jest spec files set webpack config", "d": "1/2017"}, {"body": "joezimjs separate two steps first build package use dist files testing check working example vuikit next branch tests util file loads vue vuikit dist directly perfect want start experimenting jest good start", "d": "1/2017"}, {"body": "miljanaleksic completely different trying building application bundled file script runs immediately nt export anything importing bundle nt help one bit", "d": "1/2017"}, {"body": "joezimjs build process end returns script code want test firing build tests execution exactly jest autoexecutable script testable help lot still think nt please open new issue would unrelated topic", "d": "1/2017"}, {"body": "miljanaleksic build process returns entire application tests want test individual pieces application get access importing bundle belong feedback testing vue jest issue files need sort processing used script needed sort utility fully process single file spit javascript module like vueloader except needs work outside webpack unless way use webpack handle individual files without changing module system", "d": "1/2017"}, {"body": "joezimjs always create separate build return functions features want test without production execution seems referencing jest vue preprocessor", "d": "1/2017"}, {"body": "separate build definitely great create new entry file similar file imports everything need test reexports means edit file every time want test new file seems like work also seems like something nt need jestvuepreprocessor works great except completely ignores styles section css modules break style property vm", "d": "1/2017"}, {"body": "testing vue components test separately isolated mocking data environment one index build components like vuikit would job testing entire app behaves workflow etc perhaps jest domjs best tool case", "d": "1/2017"}, {"body": "right right index build probably way go something nt necessary feedback jest testing unnecessarily difficult test components using css modules", "d": "1/2017"}, {"body": "cristian carlesso published awesome post jest vue time refactor workflow", "d": "1/2017"}, {"body": "closing nt much actionable items community come decent solutions getting two work together likely guide official unit test util published", "d": "7/2017"}, {"body": "used good stuff mentioned together search ui components library took us time put everything together working well issue far need compile cjs build prior testing vue components use rollup vue preprocessor plugin mentioned thread amp jest snapshots cristian carlesso inspired us lot current setup", "d": "7/2017"}, {"body": "rayrutjes code coverage working happen encounter issues describe", "d": "8/2017"}, {"body": "imo slots content distribution like holes ui filled anything component decides content go parent component know markup children need reorder slots use take forum", "d": "1/2017"}, {"body": "znck nt agree reordering even though slots reorder passing prop better solution reading order parent make slots component like mutable array least mutable named slots nesting html wrappers common usage nt seen opinion better solution child template overriding mixin maybe", "d": "1/2017"}, {"body": "components self contained entities theory component know surrounding way interact using specific problem post forum", "d": "1/2017"}, {"body": "plz check example znck named slots component nt need fetch content parent rendering yes got slots order nt", "d": "1/2017"}, {"body": "wrote something like something slot content something b slot content something c organize component display content parent maybe works slots level deal mentioned button img maybe would say combine two slots one two slots different scope props", "d": "1/2017"}, {"body": "ordered nested contents use default slot instead named slots", "d": "1/2017"}, {"body": "provide minimal reproduction code using jsfiddlejsbincodepen demonstrate issue could start template already includes latest version vue please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests", "d": "1/2017"}, {"body": "jingsam default slots could nested", "d": "1/2017"}, {"body": "slot composition mechanism overriding seem misunderstand designed slots reordered parent exactly position slots inside child controlled child whole point slots however order elements distributed slot controlled parent nt see point nested slots makes lot complex obvious gain always use render functions feel achieve specific goal via slots open issue concrete proposal think may better solution stated several times already general questions posted forum please respect rule time maintainers", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests also note pointless raise discussions along lines maybe feature x good idea vue relied upon tens thousands users existing feature simply changed removed may good idea", "d": "1/2017"}, {"body": "html boolean attributes considered truthy value empty string vue treats boolean props way", "d": "1/2017"}, {"body": "bug misunderstanding compilation scope slots please read corected example please visit forumvuejsorg support", "d": "1/2017"}, {"body": "many thanks quick answer understand point slot compiled however find behaviour predictable especially way presented example let us believe override keep behaviour correct initial question slot default content trigger call method component correctly overrided slot trigger call method parent component ideal break context separation may missleading somewhere assuming bug could also use event bus send event wild everything else component could handle directly override default call appmodal close override default call app close direct examples probably better solution could think thanks", "d": "1/2017"}, {"body": "dont see confusing slot defaults defined child directives run scope child slot content defined parent directives run scope parent want pass template child child run scope look scoped slots docs", "d": "1/2017"}, {"body": "provide minimal reproduction code using jsfiddlejsbincodepen could start template already includes latest version vue", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "ping phanan", "d": "1/2017"}, {"body": "lmnsg issue \u4e4b\u524d\u8bf7\u53c2\u8003 \u4f60\u9700\u8981\u6309\u7167 znck jsfiddle \u6765\u5c55\u793a bug", "d": "1/2017"}, {"body": "closing due inactivity also seems working based yijixiuxin fiddle please open new issue reference one follow information list issue make sure key components reordered instead patched place", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "provide minimal reproduction code using jsfiddlejsbincodepen could start template already includes latest version vue", "d": "1/2017"}, {"body": "please use forum questions iirc thread exact topic", "d": "1/2017"}, {"body": "znck see thanks", "d": "1/2017"}, {"body": "cecilpeng use fixed fiddle use forum questions", "d": "1/2017"}, {"body": "fixed released soon", "d": "1/2017"}, {"body": "great thx sorry nt recognise issue", "d": "1/2017"}, {"body": "select multiple boxes keep going back ones seem properly update sure bug code", "d": "1/2017"}, {"body": "described issue seems skip last checked checkbox ran several tests code nt change since running works perfect seems changes reffered issue causing problem", "d": "1/2017"}, {"body": "gotcha fair enough leave experts", "d": "1/2017"}, {"body": "duplicate fixed via released yet", "d": "1/2017"}, {"body": "runned code dev branch issue remained especially state nt get updated click change event", "d": "1/2017"}, {"body": "fkobus build dev branch code", "d": "1/2017"}, {"body": "missed part running new fixes behaving thanks response", "d": "1/2017"}, {"body": "hi closed latest code encountered issue program running updating record condition read display datas checkbox truefalse condition remains even reading new records vue version thx", "d": "9/2017"}, {"body": "really like", "d": "1/2017"}, {"body": "hmm feel introduces way much syntax variations purpose benefits becomes bit flexible deal programmatic event handling templates however imo need level flexibility attaching event handlers better use render function rather adding new syntax templates", "d": "1/2017"}, {"body": "could syntax support extending templates would implement example", "d": "1/2017"}, {"body": "done render function vnode representing component parent tree directly pass data component makes component inherit props event listeners", "d": "1/2017"}, {"body": "jsx would", "d": "1/2017"}, {"body": "yes", "d": "1/2017"}, {"body": "also thought building custom transitiongroup component reason want take key section calculate fade upper direction lower direction based previous active section", "d": "1/2017"}, {"body": "fork working works provide id via data really interested first example nt work", "d": "1/2017"}, {"body": "following updates regards issue exactly issue custom javascript animation enter leave events seem triggered time first codepen", "d": "1/2017"}, {"body": "working version sot sure bug nt add labels", "d": "1/2017"}, {"body": "posva like example put blocks one transition element works really weird normally use transitiongroup multiple elements otherwise get warning", "d": "1/2017"}, {"body": "right skipped comment sorry", "d": "1/2017"}, {"body": "actually nothing vue simply behaves", "d": "1/2017"}, {"body": "look around find solve issue add docs solved", "d": "3/2017"}, {"body": "might missing something using event instead really require", "d": "3/2017"}, {"body": "nirazul yes docs form input components assumed always syntactical sugar elements seems case said working thought maybe make obvious future people kind problems", "d": "3/2017"}, {"body": "use event vmodel checkout model option", "d": "3/2017"}, {"body": "danieldiekmeier statement totally correct always syntactical sugar nt fire event like browsers", "d": "3/2017"}, {"body": "nirazul using elements works ie tried yesterday debugging problem", "d": "3/2017"}, {"body": "danieldiekmeier oh", "d": "3/2017"}, {"body": "danieldiekmeier right code", "d": "3/2017"}, {"body": "looked around bit information could put sure actually place probably mistake really nothing vue fine put rest", "d": "3/2017"}, {"body": "yeah obvious input work vmodel syntax sugar input update value think said docs vmodel also handles browsers compatibility better", "d": "9/2017"}, {"body": "coming react background browser quirks like handled behind fixed api particularly frustrating behaviour come across think good solution would eitherboth clear documentation page explaining selects operate differently inputs certain browsers lowlevel synthetic event eg works across field types ie select amp input etc", "d": "11/2017"}, {"body": "bhoop try input events input event nt supported ie however textinput event supported also thinking nicely provide alternative facade within vuejs eventing core permission", "d": "2/2018"}, {"body": "version", "d": "1/2017"}, {"body": "use forum gitter questions html", "d": "1/2017"}, {"body": "znck trying consolelog refs empty object", "d": "1/2017"}, {"body": "use forum gitter questions forumvuejsorg", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "questions please use gitter forum stackoverflowto ask questions also vuerouter issues please open vuerouter repo", "d": "1/2017"}, {"body": "server iis solution", "d": "1/2017"}, {"body": "may help", "d": "1/2017"}, {"body": "works repro", "d": "1/2017"}, {"body": "paulocheque updating latest version vue seems fix issue", "d": "1/2017"}, {"body": "use case nt see point", "d": "1/2017"}, {"body": "closed inactivity feel free open new issue explanation use case", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "error message would like suppress message use minified build build production mode please read link message refer", "d": "1/2017"}, {"body": "use vuecli take good look update vue npm run build", "d": "1/2017"}, {"body": "ca nt reproduce vue latest webpack vuecli template really think bug please report repository template using want supports ask questions ask forum gitter", "d": "1/2017"}, {"body": "warning message nt anything except upgrade vue fron output webpack config supposed according doc really nt know warning message", "d": "1/2017"}, {"body": "bug", "d": "2/2017"}, {"body": "nt solved problem yet", "d": "2/2017"}, {"body": "resolved instead", "d": "2/2017"}, {"body": "phiphou thanks", "d": "2/2017"}, {"body": "busyhe u welcome note also works note sure difference two files guess first one dev second one production also note could turn console log described thread stack overflow", "d": "2/2017"}, {"body": "phiphou use first work normal thanks", "d": "2/2017"}, {"body": "phiphou difference two files explained hence first solution correct browser build commonjs build intended used nodecompatible bundler eg webpack browserify", "d": "2/2017"}, {"body": "narwajea thanks useful explanation", "d": "2/2017"}, {"body": "work webpackbaseconfjs prodenvjs webpack running value processenvnodeenv equals value equal rendering page fix thanks", "d": "3/2017"}, {"body": "check value provided defineplugin webpackprodconfjs may find useful information", "d": "3/2017"}, {"body": "extending abstract component component becomes abstract imo abstract components bindingsattributes defined props", "d": "1/2017"}, {"body": "abstract components designed render templates like decorators simply wrap componentselements via composition eg abstract components dom elements simply enhances slot children extending abstract component give concrete dom nt make sense also abstract mode publicly documented may change without notice avoid using unless really sure know", "d": "1/2017"}, {"body": "plan include abstract components doc", "d": "1/2017"}, {"body": "vue", "d": "1/2017"}, {"body": "error message already told please refer", "d": "1/2017"}, {"body": "use look", "d": "1/2017"}, {"body": "need define string literal within quotes example instead", "d": "1/2017"}, {"body": "vuecli prodenvjs moduleexports nodeenv production look", "d": "1/2017"}, {"body": "vuejs", "d": "1/2017"}, {"body": "buildjs edit vuecli generated file sorry since vuecli issue please open issue vuecli repo instead thanks", "d": "1/2017"}, {"body": "solve nodeenv production code error", "d": "1/2017"}, {"body": "en thanks", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "solution explained indeed check implemented vuecommonjs detailed explanation found", "d": "2/2017"}, {"body": "work webpackbaseconfjs prodenvjs webpack running value processenvnodeenv equals value equal rendering page fix thanks", "d": "3/2017"}, {"body": "cleaned thread unrelated comments please use forumvuejsorg chatvuejsorg questions problems", "d": "8/2017"}, {"body": "\u7528vfor\u6e32\u67d3\u6709\u72b6\u6001\u7684dom\u5143\u7d20 input\u7b49 dom", "d": "1/2017"}, {"body": "fnlctrl \u5728 mac \u4e0b\u7684chrome", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "fnlctrl", "d": "1/2017"}, {"body": "\u7ee7\u7eed\u6d4b\u8bd5\u4e86\u4e00\u4e0b \u7684\u786e\u6709\u95ee\u9898 \u6700\u540e\u4e00\u4e2a\u70b9\u51fb\u7684checkbox \u72b6\u6001\u4f1a\u51fa\u9519 last clicked remain wrong state chrome edge", "d": "1/2017"}, {"body": "fnlctrl bug actually happens checkbox still focused nt update purpose least makes sense text inputs may want reconsider inputs", "d": "1/2017"}, {"body": "fixed via", "d": "1/2017"}, {"body": "hi thanks filing issue closing seems usage question believe bug please specific problem provide minimal reproduction please nt copypaste code demo try remove code nt cause issue", "d": "1/2017"}, {"body": "html attribute names caseinsensitive converted lowercase browser converted browser general convention like follow always use kebabcase dealing html everywhere except attribute values case vue attribute values treated like js expressions", "d": "1/2017"}, {"body": "thanks clarification rule thumb makes sense suspected something nature still surprising tue jan pm matthew pietz notifications githubcom wrote html attribute names caseinsensitive converted lowercase browser von updatedpoints converted von updatedpoints browser general convention like follow always use kebabcase dealing html everywhere except attribute values case vue attribute values treated like js expressions receiving authored thread reply email directly view github mute thread", "d": "1/2017"}, {"body": "unfortunately something vue fix unless use string templates instead indom templates", "d": "1/2017"}, {"body": "understood would mind opened pull request docs making note tue jan pm evan notifications githubcom wrote closed receiving authored thread reply email directly view github mute thread brian kung unicorn", "d": "1/2017"}, {"body": "intentionally limited props component caching tricky get right directly using vuex store state easily lead cache keys loose ie returning cached result actually needs rerender components need cached designed decoupled vuex stores accept props", "d": "1/2017"}, {"body": "callback way check cache hit", "d": "8/2018"}, {"body": "component set data function references shared across component instances", "d": "1/2017"}, {"body": "check console warnings correct way access variables inside template fixed example", "d": "1/2017"}, {"body": "thanks quick action regarding warnings console referring main vue instance component x code based mentions define local data property uses prop initial value initial value props initialcounter data function return counter thisinitialcounter bit misleading also please explain different case push used code without warnings following docs", "d": "1/2017"}, {"body": "keying components child components reordered simply stay position receive new props child components use initial props update receiving new props either properly key components use props directly update", "d": "1/2017"}, {"body": "use computed property js index item data return items computed selecteditems return thisitemsfilter item gt condition", "d": "1/2017"}, {"body": "znck said guess vuejs info internally vue nt keep track", "d": "1/2017"}, {"body": "use computed property method filter array instead using inside", "d": "1/2017"}, {"body": "thanks znck fnlctrl perfect solution still two way sync base data", "d": "1/2017"}, {"body": "duplicate", "d": "1/2017"}, {"body": "many edge cases need handled differently form elements best use dedicated library purpose otherwise vue core would bloated relatively lowusage use case bad", "d": "1/2017"}, {"body": "actually new dist file setup users likely using commonjs builds default check longer necessary", "d": "1/2017"}, {"body": "set input type number", "d": "1/2017"}, {"body": "znck reading doc nt think expected behavior cast result number modifier native input element allows user input leading zero defcc know better", "d": "1/2017"}, {"body": "currently vue handles input number type logic maybe need improvement behavior keep consistence native number type input", "d": "1/2017"}, {"body": "native input element allows user input leading zero revert real number instead basically value always treated number say current behavior correct", "d": "1/2017"}, {"body": "think good remove leading zeros number need leading zeros number probably want use input nt", "d": "1/2017"}, {"body": "something like social security number native input property always yield string value constraint user input digit decimal mark type necessary least mobile platforms informs browsers pop number pad user", "d": "1/2017"}, {"body": "something like social security number number perse value field floatingpoint number per specs", "d": "1/2017"}, {"body": "say number strict meaning use one aswell", "d": "1/2017"}, {"body": "close per spec se typenumber state appropriate input happens consist numbers strictly speaking number example would inappropriate credit card numbers us postal codes alternatives found", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks", "d": "1/2017"}, {"body": "used build vue production mode refer", "d": "1/2017"}, {"body": "please use refer updated code", "d": "1/2017"}, {"body": "know however determine whether data store last store value method encounter demand must keep open", "d": "1/2017"}, {"body": "say expected instance actually type rather tested happens boolean usually used without operator return proper types", "d": "1/2017"}, {"body": "closing duplicate tldr nt want introduce nonstandard syntax expressions said existential operator ever lands javascript work templates", "d": "1/2017"}, {"body": "nt know write request", "d": "1/2017"}, {"body": "proper place", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests thanks", "d": "1/2017"}, {"body": "happierall nice work editor open source", "d": "1/2017"}, {"body": "smolinari thank sure editor must open source based ace editor open source", "d": "1/2017"}, {"body": "ah ok understand still good work scott", "d": "1/2017"}, {"body": "questions forum website issued problem almost week passed answered anxious waiting project online yet question answered skip issue reporting guidelines really find bug within vue make sure create repro fiddle please keep code short possible open new issue need add long explanation shorter makes clearer", "d": "1/2017"}, {"body": "sunriseshow \u4f60\u53ef\u4ee5\u7528\u4e00\u4e2a\u6700\u5c0f\u5316\u7684 demo \u6765\u590d\u73b0\u4f60\u9047\u5230\u7684 demo \u653e\u5230 jsfiddler demo", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks depends last version basically make sure missing peer dependency yarn npm warn also make sure delete previous dir reinstalling modules", "d": "1/2017"}, {"body": "using jsfiddle vue global scope fixed", "d": "1/2017"}, {"body": "think bug please provide repro instead stackoverflow question", "d": "1/2017"}, {"body": "thanks using vue second example breaks intended reason quite similar compilation scope component slot must compiled parent template slot content fed container component case first example works pass null props component vue guards runtime error example design thanks understanding", "d": "1/2017"}, {"body": "herringtondarkholme close issue", "d": "1/2017"}, {"body": "please nt component options expected plain objects nt really see point using class class sake proper way use classes vueclasscomponent", "d": "1/2017"}, {"body": "got", "d": "1/2017"}, {"body": "hi thanks filling issue seems trying make template access two scopes parent time violates principal vue component system thus coupling implementation detail parent child really want way simpler approach would accessing eg inside recommended approach would passing everything via props using custom events parentchild communication eg inside inside", "d": "1/2017"}, {"body": "thanks fnlctrl familiar approaches provide problem vmodel bindings inputscustominputscomponents nt think currently way around proposal sure probably vue parentchild relation component specification extending template context using vueextend makes sense mind using basefrom lot personform probably end using js extend writing full templates", "d": "1/2017"}, {"body": "serves creating subclass vue create component instances later nothing templatescope etc though name may suggested talking merging two scopes example template bound want merged data methods available scopes nt seem good idea maybe try something like inside inside", "d": "1/2017"}, {"body": "fnlctrl purepear think still issue worth discussing sounds like guys talking two slightly different things maybe miscommunication problem extend component extremely useful js options methods data etc template either take parents template want slightly tweak copy paste entire thing difficult maintain maintain two templates anytime change base component add template options base component inherited component make adjustments template base component preknowledge components extend tightly coupled worse slots scoped slots tools composition inheritance slots great car tire relationship think purepear suggesting tool car vehicle relationship example giant custom form tons fields inherited component js template copy paste entire template duplicate significant amount code different happy contribute improving vuejs project look", "d": "4/2017"}, {"body": "simple example feature might look like course example simple would much easier solve prop illustrate inheritance strategy instead totally replacing template might first try something like vuecomponent hellouniverse extends hello template universe extend merge algorithm component template block tag componenttemplate supertemplatereplace componenttemplate else componenttemplate supertemplate", "d": "4/2017"}, {"body": "purepear fnlctrl implemented quick proof concept worst copypastes put template multiline string time string unfortunately deep enough vue know vue file template tags parsed build pipeline basically took template moved js multiline string stored ancestor component html option ancestor replaced tags inner contents stored template children replaced block tag block template stored template option nt taken time implement named blocks anything really pretty quick little help sure would nt huge task implement named blocks hopefully integrate build system nt need multiline strings pain syntax highlighting would boost keeping things clean", "d": "4/2017"}, {"body": "aldencolerain one way deal code duplication use pug probably put template separate file pass pug config vueloader basepath sth clean might work nt think vue implement template extend concept cause confusing developers structure component tree also nt seen js libs reactangular though wish imagine would like pugjade extends layout ps use pug much nt consider might seem intuitive others template engines might work", "d": "4/2017"}, {"body": "purepear thanks check really like vue template engine know lot template engines support simplified inheritance feature well composition maybe would nice compromise would store source template string object automatically compiling vue file along render function would easy adjustment nt already would give people lot flexibility templates fnlctrl know template source string compiled render function stored component would simple change would huge help give lot flexibility without vuejs support addition template features guess ends decision totally support inheritance might useful others hitting issue", "d": "5/2017"}, {"body": "someone wrote article", "d": "6/2017"}, {"body": "doesnt feel right composition logic must chained extended component residing inside inherited maybe combination composition extendmixin could good solution exploring idea parent baseform standard header specific userform usage would expect possible would either method specific forms create using baseform way would see use also baseform option depending desired result way use slots direct access submit method specific form could look like import baseformfrom baseformvue export default extends baseform components baseform additional methods data etc overriden baseform expected method expected make sense sure since got state probably work different extendmixin util gets propsdata using gettersetter methods specified ref ie baseform creates complete mapping example submit declared userform submit return refbaseformsubmit would automatically created userform may add event broadcasting global state common practice framework correct", "d": "8/2017"}, {"body": "like idea using baseform slots directly userform perhaps use directly overriden template natural way baseform userform superuserform essentially reusing defined slots extended class allows template expand let say want enclose form like decorator case yes composition necessary could like userform would agree userform concept bit breaking concept components userform concept seems logical really extends existing component structure", "d": "8/2017"}, {"body": "something worked allows easily override existing slots note work files allow define template way export default function extendtemplateslots template slots import baseform baseform import extendtemplateslots helpersextendtemplateslots export default extends baseform template extendtemplateslots formtemplate default actions props title default user form", "d": "8/2017"}, {"body": "looked like functional component one work well almost would need convert string html vnodes dont know import baseform baseform const userform extends baseform custom option override existing slots slots default actions props title default user form could generic component export default render createelement return createelement userform scopedslots create vnodes userformslots strings header props gt slotsheader slotsheader null actions props gt slotsactions slotsactions userformslotsactions slotsdefault slotsdefault userformslotsdefault props componentprops edit oops component userform still needed finally export functional component configure slots reason able add methods data baseform needed like example functional component would enough", "d": "8/2017"}, {"body": "think would needed trouble using", "d": "8/2017"}, {"body": "continue hope realized issue closed therefore probably nobody notice write want discuss something forumvuejsorg probably better place", "d": "8/2017"}, {"body": "oh right", "d": "8/2017"}, {"body": "somebody reference new issue one need create rehusable declarative tree components alternative view configuration composition global confs", "d": "4/2018"}, {"body": "vue reactivity system currently support typed arrays", "d": "1/2017"}, {"body": "vue awesome", "d": "1/2017"}, {"body": "maps", "d": "1/2017"}, {"body": "closing track along likely implement new data types reach significant support rate alternatively may ship mordern browser build leverages proxy makes supporting new data structures including less hacky", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks bug \u7684\u8981\u6c42\u63d0\u4f9b", "d": "1/2017"}, {"body": "delimiters option available standalone build single file components compiled statically changing delimiters via runtime option possible afaik practical reason change delimiters singlefile components except stylistic preferences", "d": "1/2017"}, {"body": "thanks explanation evan right practical reason change delimiters maintain coherence code", "d": "1/2017"}, {"body": "browser test osx sierra chrome seems work", "d": "1/2017"}, {"body": "fascinating windows chrome", "d": "1/2017"}, {"body": "confirm firefox windows behavior expected appears windows chrome issue", "d": "1/2017"}, {"body": "anyone idea rework around chrome bug close issue fixable vue", "d": "1/2017"}, {"body": "linusborg agree nickfederighi look see bug report already exists report", "d": "1/2017"}, {"body": "thanks help guys believe solved problem chrome windows seems difference browsers well windows vs osx chrome whether default select behavior triggered keyup keydown changing handler allowed intercept default behavior fixed jsfiddle", "d": "1/2017"}, {"body": "nickfederighi thanks suggestion experiencing similar issue form multiple buttons osx catching keydown event instead good workaround", "d": "4/2018"}, {"body": "thanks scottbedard expected behavior vuejs generate code like hood", "d": "1/2017"}, {"body": "expected behavior vuejs value changes app gets rerendered input value reseted could use updated fiddler also could use", "d": "1/2017"}, {"body": "defcc behavior appeared vue prev releases breaking change cause say works start working like release specific", "d": "1/2017"}, {"body": "defcc say whole template rerender change input textarea value rolled back like input value", "d": "1/2017"}, {"body": "defcc need submit form ajax without bind values vue cant use vue correct", "d": "1/2017"}, {"body": "rhincodon check", "d": "1/2017"}, {"body": "rhincodon good usecase actually defcc pointed coincidence worked vue true could optimised need send data ajax put container element every child parent nt need vue otherwise put every child correct absolutely use vue", "d": "1/2017"}, {"body": "thanks rhincodon open issue", "d": "1/2017"}, {"body": "static value attribute added dom property introduced different behavior previous version related issue textarea different input element internal implemention", "d": "1/2017"}, {"body": "defcc posva thanks partially understand parts html binded inputs inside app template need wrapped", "d": "1/2017"}, {"body": "fact vue automaticly nt need keep mind could check doc details issue fix case", "d": "1/2017"}, {"body": "thanks hitvalley please follow issue reporting guidelines close questions could use official forum stackoverflow segmentfaultcom help", "d": "1/2017"}, {"body": "maybe bug use blank string literal instead empty array", "d": "1/2017"}, {"body": "want bound content array dotneet", "d": "1/2017"}, {"body": "\u6211\u7528 textarea \u6a21\u4eff multiple checkboxes bound array input typetext \u662f\u4e0d\u662f\u6682\u65f6 \u4e0d\u652f\u6301 \u5c06 \u7ed1\u5b9a\u5230", "d": "1/2017"}, {"body": "model \u7ed1\u5b9a\u5230\u591a\u4e2a textarea", "d": "1/2017"}, {"body": "\u8ddf\u540e\u7aef textarea \u5bf9\u5e94\u4e00\u4e2aid \u7c7b\u4f3c\u4e8e", "d": "1/2017"}, {"body": "\u76ee\u524d\u60f3\u5230\u7684\u89e3\u51b3\u529e\u6cd5\u662f \u5c06 vmodel \u8bbe\u7f6e\u6210", "d": "1/2017"}, {"body": "matmoo thank hoping documented like properties accept arguments would computed subcomponents possible implement logistically impossible", "d": "1/2017"}, {"body": "hi simply use computed property return component", "d": "1/2017"}, {"body": "number components known statically ok var components var component components components watch columns function columns change nt smell well", "d": "1/2017"}, {"body": "necessary declare subcomponents property actual component declaration", "d": "1/2017"}, {"body": "necessary declare subcomponents property actual component declaration necessary delcar components inside option since directly use component declaration eg please refer docs thanks", "d": "1/2017"}, {"body": "thank", "d": "1/2017"}, {"body": "seems edge case updatelistener cur function type breaks fix", "d": "1/2017"}, {"body": "posva forked jsfiddle example found added run normally", "d": "1/2017"}, {"body": "jimczj yes makes function defined trying invoke", "d": "1/2017"}, {"body": "issue", "d": "1/2017"}, {"body": "like understand problem goal set selected value instance editing record actual selections available render scott", "d": "1/2017"}, {"body": "would end game kinda like props component sent via prop prop would overridden select options nt rendered yet", "d": "1/2017"}, {"body": "way get selection options setting selected value scott", "d": "1/2017"}, {"body": "could seems like something vue could handle nt seem intuitive property gets overridden data gets loaded also catch developing may push bad code", "d": "1/2017"}, {"body": "options select consider application data ground rule personally always see application data priorty user data terms rendering words form make sure application specific data loaded render form first fill user created data take situation definitely nt mean right scott", "d": "1/2017"}, {"body": "closing duplicate", "d": "1/2017"}, {"body": "sorry seems kind duplicate mine simpler ps checked bug tracker bug filling bug report closed bug code exactly", "d": "1/2017"}, {"body": "doublechecked bug thanks work", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks closing providing enough information therefore post looks like stackoverflow question issue report however find actually bug open new issue minimal reproduction", "d": "1/2017"}, {"body": "posva try going steps result error console guess core error else needed describe problem jsfeedle enought", "d": "1/2017"}, {"body": "describing problem enumerating steps get error may bug please take time effort report properly", "d": "1/2017"}, {"body": "understand must write words written code jsfiddle", "d": "1/2017"}, {"body": "changing select field programmatically function trying chose another select shows parent div dom catch error console", "d": "1/2017"}, {"body": "u close issue giddily fast without try see understand really bug", "d": "1/2017"}, {"body": "closing providing enough information therefore post looks like stackoverflow question issue report however find actually bug open new issue minimal reproduction think read issue reporting guidelines debugging found real issue event triggered element removed due englobbing go open another issue shorter simpler repro coming back", "d": "1/2017"}, {"body": "posva ok thanks waiting", "d": "1/2017"}, {"body": "limitation inputs focused update however get around running method", "d": "1/2017"}, {"body": "posva ok thanks", "d": "1/2017"}, {"body": "posva way right using watch", "d": "1/2017"}, {"body": "yes also works vmodel nt change input focused may end weird ux", "d": "1/2017"}, {"body": "vfor usage documented already however maybe could improvement case", "d": "1/2017"}, {"body": "true jsfiddle", "d": "1/2017"}, {"body": "relevant documentation variables parentheses interpreted properties single javascript objects contents arrays", "d": "1/2017"}, {"body": "syntax design braces indicate presence index key", "d": "1/2017"}, {"body": "solved reverted introduced breaking change transitions see example works need use different classname make work find details release notes", "d": "1/2017"}, {"body": "posva got thank much explanation unfortunately nothing mentioned believe documentation updated soon well anyway thanks fixing", "d": "1/2017"}, {"body": "ive realized vuejs version wrong didnt latest scriptonce updated everything worked fine", "d": "1/2017"}, {"body": "thanks suggestion fan idea introducing nonstandard syntax template expressions imo javascript much possible also deep path may may exist level access sounds like code smell modelstate predictable possible", "d": "1/2017"}, {"body": "vue one handle situation book loaded async initially value", "d": "8/2017"}, {"body": "saivarunk gives error vueloaderlibtemplatecompilerjs vueloaderlibselectorjs typetemplate amp index emitted value instead instance error template syntax error invalid expression vbind value modeltopics id", "d": "9/2017"}, {"body": "optional chaining elvis operator could reconsidered love see added beautifully simplify code", "d": "12/2017"}, {"body": "lehni optional chaining becomes available babel would need enable babel plugin need vue support syntax since javascript update found babelpluginproposaloptionalchaining could already work", "d": "12/2017"}, {"body": "sirlancelot already using plugin works js code work within template expressions eg", "d": "12/2017"}, {"body": "bad looks like template compilation uses customized version buble babel", "d": "12/2017"}, {"body": "oh see explains things guess means flexibility except vue would allow engines plugged transpilation using babel falling back buble idea even possilbe", "d": "12/2017"}, {"body": "case anyone else comes wanting ended using lodash lodash get function lets things like make get function available vue entryjs vue template use want lodash available vue templates use vuelodash understand evan want vue templating morph mutant language nt agree nullable properties subproperties code smell especially way design vuex state lookups id additional information record may may exist luckily vue seems flexible enough anything js within template good get hang", "d": "6/2018"}, {"body": "throw error", "d": "1/2017"}, {"body": "thank found reason chrome plugin block error tip", "d": "1/2017"}, {"body": "hi thanks filling issue vue nt get detect duplicate property inside object literal automatically removed javascript engines eg need configure code editoride give warning", "d": "1/2017"}, {"body": "use testdata", "d": "1/2017"}, {"body": "html attributes caseinsensitive using nonstring templates camelcased prop names need use kebabcase hyphendelimited equivalents", "d": "1/2017"}, {"body": "using indom template nt support cased prop names please use instead zhangyufen suggested using vueloadervueify ok use cased prop names", "d": "1/2017"}, {"body": "right vue designed nt already read doc talks concern change detection caveat declaring reactive properties sections explains vue requires data rootlevel properties upfront scott", "d": "1/2017"}, {"body": "smolinari said", "d": "1/2017"}, {"body": "might wanted mention change time looks complicated track", "d": "1/2017"}, {"body": "linusborg yes like cache components see cached content hit back button want destroy last component order rerender enter sure describe situation clearly", "d": "1/2017"}, {"body": "thanks update", "d": "1/2017"}, {"body": "space required warning telling expression invalid", "d": "1/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "1/2017"}, {"body": "vue preserves whitespace two put line without whitespace using use option", "d": "1/2017"}, {"body": "line replace line good go", "d": "1/2017"}, {"body": "crswll said line error offset lt minute span raw seconds ago", "d": "1/2017"}, {"body": "holy sh sry didnt see took almost whole day kinda debug stuff thx quick response", "d": "1/2017"}, {"body": "fyi inspect stack trace thrown error points exactly error occurs code", "d": "1/2017"}, {"body": "hi thanks filling issue feature events component option removed along dispatch broadcast custom events emit meant parentchild communication already declaratively use inside templates listening events within component actually almost practical benefit adding listener eg catch selfemitted event since call method instead words custom events works best parentchild communication component using instead calling antipattern therefore option like nt really necessary", "d": "1/2017"}, {"body": "fnlctrl thanks comment nt exactly mind nest similarly methods proposal detecting event top level yeah methods best solution cases sometimes larger event would kinda neat treat almost like lifecycle event feature would used right could improve code readability", "d": "1/2017"}, {"body": "sometimes larger event would kinda neat treat almost like lifecycle event feature would used right could improve code readability nt know exactly use case would sounds like want promote method option improve code redability eg access write pluginmixin use adding lifecycle hooks", "d": "1/2017"}, {"body": "clear magically inferring event listeners toplevel options unlikely core easily implemented via userland plugin fnlctrl suggested", "d": "1/2017"}, {"body": "fnlctrl thank mixin replies guys something curious people would think yeah maybe would nt much use cases", "d": "1/2017"}, {"body": "oops think connected changes closing", "d": "1/2017"}, {"body": "warn vuecommonjs flushschedulerqueue vuecommonjs anonymous vuecommonjs nexttickhandler vuecommonjs", "d": "2/2017"}, {"body": "files parsed using html parsing rules parsing html parser encounters considered ending current script block fact html file let browser parse also get syntax error escape closing script get around add note vue file documentation", "d": "1/2017"}, {"body": "tested ie korean ime worked fine may missing something usually never type language uses ime", "d": "1/2017"}, {"body": "sorry phanan could nt reproduce issue", "d": "1/2017"}, {"body": "picture recorded test ie korean ime windows blue block disappeared clicked button alert nt show last korean characters keep typing letters alert still show letters type characters composed letters like korean chinese blue block disappear work", "d": "1/2017"}, {"body": "tested seems bug nt fire middle writing something blurring input however listen event work around issue even done userland", "d": "1/2017"}, {"body": "kow closing issue violates contribution guidelines", "d": "1/2017"}, {"body": "tried remove vue examples first one still nt work expect think nt anything vuejs ca nt remove guess vis checks truthyness ids use string id works remove node second example actually work remove vue updating nodes works sure hope helps", "d": "1/2017"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "1/2017"}, {"body": "danieldiekmeier yeah first example definitely nothing vue second example also sure nt work vue without vue everything works fine anyway thanks", "d": "1/2017"}, {"body": "fyi think issue simply usagesupport question possible duplicate visjs issue", "d": "6/2017"}, {"body": "wimrijnders looked issue analysis correct short recommended put complex objects prototypal inheritance vue option making reactive moving correct solution", "d": "6/2017"}, {"body": "thank much confirmation really really appreciate use close several issues running good understanding maintainers projects truly hope understanding til always cooperative maintainers made day little better good one", "d": "6/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks", "d": "12/2016"}, {"body": "thanks xkjyeah try fix", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "actually component dont explicit keys first alert removed last component instance removed instead thus timer becomes eaten fixed maybe give warnings components future", "d": "12/2016"}, {"body": "oh wow simple fix thank", "d": "12/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "12/2016"}, {"body": "using laravel vue however looks like issue happen use laravel pass data laravel controller blade template vue components", "d": "1/2017"}, {"body": "thanks already opened pr", "d": "12/2016"}, {"body": "use case sounds like bad idea reload app mutating template nodes", "d": "12/2016"}, {"body": "integrating vue app uses older ajaxstyle rendering wrapping serverrendered view code blocks templates sure would best let vue render things dynamic converting server rendering complicated first round refactoring feel free close feel like edge case encourages something nt anyway", "d": "12/2016"}, {"body": "personally think may much edge case add special treatment current behavior actually gives ability decide whether content cached seems changes really necessary", "d": "1/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks misspelled", "d": "12/2016"}, {"body": "hook think need manage animation purely js object higher scope like instance gsap eg would give options cancel reverse animations", "d": "1/2017"}, {"body": "otherwise maybe insight could dig stopreverse css transitions finish", "d": "1/2017"}, {"body": "hey lunelson thank reply unfortunately problem stopreverse animationtransition works well already problem transition reversed transition say finished vuejs still show component stopped transitioning see mean play fiddle drag little right let go component slides back original position vuejs replaces replace turn split second see none less", "d": "1/2017"}, {"body": "tillsanders maybe still underestimating problem seems reason getting appearing calling even though aborted transition nt call function also hooks", "d": "2/2017"}, {"body": "lunelson unfortunately calling nt work see result bar nt disappear router keeps waiting transition finish hooks nt understand would make use ca nt call cancel transition allow react cancelled transitions problem cancel transitions manually first place", "d": "2/2017"}, {"body": "problem nothing left abort point call router transition completed immediately routerview rerenders new component transition hooks animating old child new one handled transition component routerview point view change already happened see url changes immediately start dragging old component removed soon call done use keepalive workaround get old instance back go back", "d": "2/2017"}, {"body": "aha mean cancelling transition given example would require triggering routerback well", "d": "2/2017"}, {"body": "wo nt actually cancel transition start dragging foo kept dom leave animation nt completed yet call done eventually complete foo removed dom call routerback bar removed foo reinserted keepalive get old foo back new one tried ago page transition similar android swipeable tab views could nt vuerouter would require preloading two pages since swipe left right confirming navigation let go animation finished removing two pages dom", "d": "2/2017"}, {"body": "wonder possible implement component uses router api ie triggering reacting etc place component allowing different handling loading unloading views", "d": "2/2017"}, {"body": "nt think need api router preload component replace currently loaded component", "d": "2/2017"}, {"body": "guess simplistic thinking full routes load pages imagining component contains pieces using history nonhash routes could still push pop hashes router coordinate state component dunno needs thought", "d": "2/2017"}, {"body": "hi understand problem sometimes done fires routerback times repeat original fiddle done put routerback see problem every run set delay done problem disappears looks like dirty hack", "d": "2/2017"}, {"body": "sorry letting sit reply probably late ultimately think type applike navigation really begs dedicated cardstack based touchaware navigation solution still largely designed around nested boxes desktop navigation model builtin transition system really meant fireandforget state toggle animations adding would nt answer root problem", "d": "7/2017"}, {"body": "bug vue open issue nt understand want", "d": "12/2016"}, {"body": "\u5982\u679c\u662f\u95ee\u9898\u7684\u8bdd\u8bf7\u5230\u8bba\u575b\u6216\u8005 segmentfault \u7528\u4e2d\u6587\u5427 \u4e5f\u53ea\u7528\u4e8e\u5904\u7406", "d": "12/2016"}, {"body": "\u4f60\u914d\u7f6e\u6709\u95ee\u9898\u5427", "d": "12/2016"}, {"body": "please use vuedeletethis delete delete reactive properties", "d": "12/2016"}, {"body": "relevant stackoverflow answer think feature mobile safari rather bug work fastclick colleagues found ios allow focus triggered elements within function first function call stack triggered nonprogrammatic event source", "d": "12/2016"}, {"body": "close safari problem", "d": "12/2016"}, {"body": "certain going final answer docs mention something", "d": "12/2016"}, {"body": "seems design mobile safari issue vue might add extra infomation doc", "d": "12/2016"}, {"body": "opened pr doc repository close issue", "d": "12/2016"}, {"body": "anyone know work around", "d": "11/2017"}, {"body": "dont think could solved javascript", "d": "12/2017"}, {"body": "please use issues ask questions nuxt issues posted nuxtjs repo", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "thank", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "run run", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "run run \u5728 vuerouter\u7684\u914d\u7f6e\u91cc\u589e\u52a0 path test redirect \u53c2\u8003\u81ea", "d": "1/2017"}, {"body": "", "d": "3/2017"}, {"body": "thisjs \u8fd9\u4e2a\u6211\u6ca1\u6709\u7814\u7a76\u8fc7", "d": "3/2017"}, {"body": "\u548c\u697c\u4e3b\u540c\u6837\u7684\u95ee\u9898\u554a", "d": "5/2017"}, {"body": "network run", "d": "12/2017"}, {"body": "\u5173\u4e8e\u8fd9\u6837\u7684\u95ee\u9898error loading chunk failed\u5982\u4f55\u89e3\u51b3\u554a", "d": "8/2018"}, {"body": "properties start proxied vue instance may conflict vue internal properties api methods access vm dataproperty", "d": "12/2016"}, {"body": "already warning", "d": "12/2016"}, {"body": "hello vue warns computed property conflict props vue prop key results found subvue appvue renders vue appvue import sub subvue export default data return b c components subcomp sub vue subvue export default props data object data debugger return thisdata works change believe need correct warning say", "d": "11/2017"}, {"body": "thanks alextime bug vuejs updated fiddler updated watch function", "d": "12/2016"}, {"body": "surely bug idea think work filters return something returns string stringified printed document making filters optionally render child component believe trying would completely new behaviour also want trigger rerender change locale creating components localized string seems like dirty workaround would rather use mixin registers lister event bus one rare occations seems useful callback call forceupdate component", "d": "12/2016"}, {"body": "thanks answear also want trigger rerender change locale creating components localized string seems like dirty workaround time creates additional new components user manually changes language rare nt think performance problem sure fast vue instantiation tho would rather use mixin registers lister event bus one rare occations seems useful callback call forceupdate component understand right would look like create bus dynamic changes example locale changes trigger event bus import bus every component needs intl attach new event listener bus callback calls well solution nt seem optimal performancewise codewise", "d": "12/2016"}, {"body": "comment dirty hack performance clean responsibilities filters nt render onthefly components transform stuff strings worries bus codewise put bus module export mixin module encapsulated event work registration etc question make component adapt behaviour perfomance wise lot app rerender pretty much everything anyway need small create component handle instead filter", "d": "12/2016"}, {"body": "alright ended create module exports bus import bus component component method adjusts vueconfiglang emits localechange event import bus main component register event listener bus like still nt work expected since updates main component children somehow explicitly update component children something like thanks", "d": "12/2016"}, {"body": "original usage supported implement discussed elsewhere thanks", "d": "12/2016"}, {"body": "add webpack aliases make sure standalone build loaded instead default runtimeonly build need standalone build want define template code indexhtml currently", "d": "12/2016"}, {"body": "longer turned constructors considered internal change behavior never explicitly defined documentation simply using", "d": "12/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "12/2016"}, {"body": "thanks suggestion always returns string", "d": "12/2016"}, {"body": "sample code jsfiddle", "d": "12/2016"}, {"body": "venteractive transition css properties define base css selectors", "d": "12/2016"}, {"body": "seems similar issue anyone help", "d": "1/2017"}, {"body": "really looks like issue everything fine code point docviewvue add breaks isrootinsert error", "d": "12/2016"}, {"body": "correct also breaks slotted components default slots notice named slot contains component slot works fine", "d": "12/2016"}, {"body": "since patch codegen need use updated well cloned repo tested locally using everything local branch seems working correctly views render properly think indeed caused bug want test clone vue repo build everything link project great job vuetify btw", "d": "12/2016"}, {"body": "thanks evan nt think packages well appreciate help", "d": "12/2016"}, {"body": "already alias points item would need magic param may understanding correctly nt really see need", "d": "12/2016"}, {"body": "sorry first time think something vuejs already bravo", "d": "12/2016"}, {"body": "hi syntacticsolutions thanks interest help many ways help really depends familiar simplest way help answering questions users forum gitter chatroom stackoverflow also try help triage new issues narrowing bugs even submit prs please read contribution guide details note issues reserved bug reports feature requests please keep mind future", "d": "12/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "12/2016"}, {"body": "issue spa downgraded seems work fine", "d": "12/2016"}, {"body": "submitted issue vuerouter repo", "d": "12/2016"}, {"body": "problem difference seems following versions vue calls undefined vnode reveals following vue vue problem gets called undefined vnode calling vue undefined creates error uncaught typeerror set property isrootinsert undefined bug relevant part srccorevdompatchjs solution think would good idea add following lines make sure function nt want access attributes object seems solve problem vue also vue calling analyzed error gets introduced ie gets called undefined vnode think good idea type checking regardless maybe unit test added check case would glad help", "d": "12/2016"}, {"body": "actually issue fixed confirmed johnleider cases mmochetti samuelantonioli try patch local vue dist file see issue error persists likely different bugs please open separate issue repro", "d": "12/2016"}, {"body": "johnleider seems problem missing type checking accessing attributes referenced issue relevant part bug srccoreinstancerenderjs replacing current statement following lines solves problem patching local dist testing", "d": "12/2016"}, {"body": "thanks applying changes everything works expected", "d": "12/2016"}, {"body": "also use since global scope still holding reference object", "d": "12/2016"}, {"body": "sirlancelot said", "d": "12/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "12/2016"}, {"body": "fixed", "d": "12/2016"}, {"body": "bug seems persisted see two referenced issues", "d": "1/2017"}, {"body": "vue fine upgraded latest weird undefined show bug elementui vue related", "d": "10/2017"}, {"body": "see", "d": "10/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "12/2016"}, {"body": "also please open issue vuerouter repo instead thanks", "d": "12/2016"}, {"body": "gd", "d": "1/2017"}, {"body": "please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem necessary create repository us clone minimal reproduction repositories actual projects generally accepted thank", "d": "12/2016"}, {"body": "issue reproduced end closing due inactivity please open new issue reference one follow information", "d": "1/2017"}, {"body": "vue", "d": "12/2016"}, {"body": "please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem nessessary create repository us clone minimal reproduction repositories actual projects generally accepted thank", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "binding needed expected behavior remove binding works properly", "d": "12/2016"}, {"body": "please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem necessary create repository us clone minimal reproduction repositories actual projects generally accepted thank", "d": "12/2016"}, {"body": "without problem", "d": "12/2016"}, {"body": "broke please check jsfiddles steps reproduce click fast multiple times checked radio button clearly see ripple effect nt behave release notes says affected update update something css js fix problem", "d": "12/2016"}, {"body": "also supposed fix issue checked quickly editing dist file vuedistvueruntimecommonjs change result", "d": "12/2016"}, {"body": "sqal ah sorry indeed affects usage think revert whole change", "d": "12/2016"}, {"body": "sqal reverted old behavior use case work expected next release", "d": "12/2016"}, {"body": "thanks alot dealing issue", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "jtallis refs reactive could take look", "d": "12/2016"}, {"body": "fyi used inside registered arrays case property array typically use ref id items collected array pop item array actually becomes empty future may support passing function ref binding user customize register refs eg", "d": "12/2016"}, {"body": "hi thanks filling issue actually related vue javascript floating point number precision issue may refer", "d": "12/2016"}, {"body": "many thanx fix simply using", "d": "12/2016"}, {"body": "modifier feature", "d": "12/2016"}, {"body": "browser limitation want use syntax use bundler like webpack use vueloader limited browser write html files write things like also may help", "d": "12/2016"}, {"body": "try one time", "d": "12/2016"}, {"body": "alphmega please try latest vuejs version might fixed already works mac chrome", "d": "12/2016"}, {"body": "defcc excuse wrote wrong description issus using", "d": "12/2016"}, {"body": "defcc upgraded vue still problem", "d": "12/2016"}, {"body": "tibianmod solution works", "d": "12/2016"}, {"body": "hydration skips patching attrs serverside rendered markup assumed client renders impure ie included initial state used clientside render causes server markup always different client avoid using renders", "d": "12/2016"}, {"body": "tag meant wrap multiple elements like case simply use wrap text nodes", "d": "12/2016"}, {"body": "know real scene code complex demo need wrap multiple elements template tag output undefined works right seems vfor directive inside template tag output undefined child component props bind tag like expected behavior", "d": "12/2016"}, {"body": "weird indeed give deeper look afternoon mon dec wangkehan notifications githubcom wrote know real scene code complex demo need wrap multiple elements template tag output undefined works right seems vfor directive inside template tag output undefined child component props bind tag like itemname expected behavior receiving modified openclose state reply email directly view github mute thread", "d": "12/2016"}, {"body": "least template like works wrong sometimes vfor directive inside template tag also output undefined works ok modified code really nt know happen", "d": "12/2016"}, {"body": "happen happen", "d": "12/2016"}, {"body": "seems issue normalize children try make patch", "d": "12/2016"}, {"body": "still seeing similar problem running latest code example references github", "d": "1/2017"}, {"body": "going updates", "d": "2/2017"}, {"body": "bug please open new issue corresponding repro", "d": "2/2017"}, {"body": "updates regarding getting error code similar first post", "d": "10/2017"}, {"body": "many stumble upon issue error introduced similar one reported issue fact regression already fixed update latest patch release vue moment issue commit release", "d": "10/2017"}, {"body": "finally solved problem realized loading separate version vue page one webpacked distribution files necessary", "d": "10/2017"}, {"body": "limitation browsers work around putting directly using place within tables details docs", "d": "12/2016"}, {"body": "thx", "d": "12/2016"}, {"body": "data computed property rename", "d": "12/2016"}, {"body": "yes know vue pollute raw data error message really weird think better throw much friendly error message accurate reason beginners always make mistakes like know debug", "d": "12/2016"}, {"body": "referencing computed property inside else expect infinite loop best warn define computed property clashes existing properties", "d": "12/2016"}, {"body": "case someone else comes google hitting something similar running unit tests running app normally created normal computed property circular references also watch created computed property soon commented watch error went away unit tests passed something like", "d": "7/2018"}, {"body": "thanks remoe please provide reproduction repository us look", "d": "12/2016"}, {"body": "\u8fd9\u4e2a\u62a5\u9519\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u670d\u52a1\u5668\u6e32\u67d3\u51fa\u7684 html \u548c\u5ba2\u6237\u7aef vue \u751f\u6210\u7684 dom vue warning \u6d88\u606f\u4e2d\u63d0\u5230\u7684\u6d4f\u89c8\u5668\u81ea\u52a8\u4fee\u6b63\u4e0d\u89c4\u8303 dom dom \u7684 directive directive virtualdom directive vshow directive", "d": "8/2017"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "12/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks", "d": "12/2016"}, {"body": "njleonzhang try check fix problem app", "d": "12/2016"}, {"body": "store injected top application every component curious think way", "d": "12/2016"}, {"body": "closing since nt using way still want know ended passing store components", "d": "12/2016"}, {"body": "import store components use gon na try combine stores got like store every component one store import toplevel let u know thanks reply", "d": "12/2016"}, {"body": "looking modules create one store split multiple modules", "d": "12/2016"}, {"body": "thanks swift reply time posva clearly misread something could nt find post find prob ever", "d": "12/2016"}, {"body": "renedx may forgotten something docs yes please something misleading tell us cheers", "d": "12/2016"}, {"body": "jessereitsma used multi stores issue really similar occurs one colleagues computer computer chrome even opens site hosted computer still encounter issue open site encounter issue chrome version issue still occur event disables chrome extension computer powerful mine mine mac book pro mac book pro", "d": "12/2016"}, {"body": "njleonzhang create store instances really modules posva mentioned used create store instances every component use changed one store one instance created toplevel passed every component nt problem anymore thanks posva issue solved", "d": "12/2016"}, {"body": "jessereitsma followed always document think root cause colleagues reproduce anyway work around issue great", "d": "12/2016"}, {"body": "working around issue changed structure according documentation solved workaround", "d": "12/2016"}, {"body": "jessereitsma ok tnx", "d": "12/2016"}, {"body": "jessereitsma try build vue source code debug source find root cause busy make debug recently sustainers reproduce issue hard debug currently reproduce debug days later", "d": "12/2016"}, {"body": "njleonzhang already trying debug really hard nt make sense error really vague workaround remove component works remove component works remove component works open another component first page close going next page works", "d": "12/2016"}, {"body": "jessereitsma renedx know random hard confirm wether workaround really workaround good news issue occur production environment chrome debug mode currently colleague encounters issue change use firefox instead chrome development browser workaround addition issue may related local dev packages keep consistent project dependency everywhere try leverage yarn", "d": "12/2016"}, {"body": "njleonzhang deleted al local packages reinstalled nt matter", "d": "1/2017"}, {"body": "make sure local package consistent colleagues npm yarn", "d": "1/2017"}, {"body": "getting worse project growing ca nt even use chrome anymore every page always get mergehook error random anymore calls annoying", "d": "1/2017"}, {"body": "solution solution issue sircharleswatson worth got error realized turned experimental javascript chrome flags settings turning solved issue", "d": "1/2017"}, {"body": "directives simplified friend", "d": "12/2016"}, {"body": "posva thanks", "d": "12/2016"}, {"body": "coincidentally trying pretty much couple minutes ago look wether access slotparent like normal components done functional components", "d": "12/2016"}, {"body": "duplicate look reasons basically design good idea make component depend parents better using props events pattern", "d": "12/2016"}, {"body": "well explicitly documented suspected never designed work way examples call instance created worked accident feel free submit pr add note", "d": "12/2016"}, {"body": "obviously ca nt introduce breaking change atom ca nt indent code correctly", "d": "12/2016"}, {"body": "scoped slot use tag introduce another tag like suitable tag behave introduce breaking change avoid word vue root element", "d": "12/2016"}, {"body": "reserved html tag fits well needs open issue atom plugin repository fix tags inside", "d": "12/2016"}, {"body": "know bit confusing fact design functional components rendered eagerly outermost component render function render function called host component inserted instantiated yet actually way reference host component functional component unlikely changed without introducing breaking change considering short term however interested hear use case experience quite rare functional components need access host instance", "d": "12/2016"}, {"body": "totally understand though would helpful made clear documentation since use refer two different situations confusing example specific use case love hear take well basically creating wrapper mobiledoc editor need editor component buttons handle functionality toggling markup adding content checking active states rather creating different components different type buttons eg preferred one component delegate appropriate buttons first implemented regular component example template js props type type string required true type string required true computed isactive let typestate return methods toggle root emit thistagname began add types buttons different actions states became hard maintain changed functional component function createbutton h ctx clickaction return example button const cardbutton ctx gt props type type string required true name type string required true payload type object mode type string render h gt createbutton h ctx payload editmodefalse gt button needs access parent activetags editor data isactive ctx parentactivetags ctxpropsname ctx parenteditorinsertcard ctxpropsname payload editmode export default functional true props editor type tag prompt name text payload mode render h ctx ctxdataprops ctxprops pass props children return h delegatetobtncmp ctx ctxdata ctxchildren code longer explicit maintainable button handles logic problem however ca nt easily access parent instance anymore tried creating new vue instance two components could use store share data methods worked approach nt let create one editor buttons access one editor instance sure would appropriate switch back regular component though feel use case fitting functional component", "d": "12/2016"}, {"body": "honest think making component behave differently based parent inserted sounds like bad idea child component coupled implementation details possible components may nested inside recommend rethinking design adhere props events pattern also nt make functional use render functions use render functions normal components", "d": "12/2016"}, {"body": "yeah felt like hack could nt find easy way editor component pass instance nested button components understand props events pattern nt want users component pass data basic component functionality example button feel like toggle method already inherent component require prop solution settled turning two components vue instance share functions could pass component appropriate context create instance editor import mobiledoceditor mobiledocbutton mobiledocvm mobiledoceditor let editorctrl new mobiledocvm export default components mobiledocbutton mobiledocbutton editorctrl mobiledoceditor mobiledoceditor editorctrl hopefully approach better thanks feedback", "d": "12/2016"}, {"body": "another example using functional components render pages buttons alike good way let developer choose composition pagination sacrificing performance still inner components rely parent fire change events render details pagination props convertir normal componente ca nt even done nt support rendering multiple roots", "d": "2/2017"}, {"body": "agreed maybe could improve text transformation purposes", "d": "12/2016"}, {"body": "would become special case rules becomes complicated fear would slowly bring feature creep back directives support filters case dedicated sanitization method works fine nt think worth open special case simple rules", "d": "12/2016"}, {"body": "would nice sort functionality using quill would like parse deltas quill produces template custom filter looks something like", "d": "12/2016"}, {"body": "solvable scoped slots syntax nt suit pass component options props well simply use dynamic component html parent child props component", "d": "12/2016"}, {"body": "scopedslots great addition could used customize output child nt solve situation simple functions used childs rendering idea leave parent make clear let take example html customi header inner content custom cell inner content cool know inner content column look like information parent ideally would html col scopedslotsheader col colheader col scopedslotscell row col note clarity brevity mixing jsx template declaration example could work available unless used somewhere case nt place need default child rendering", "d": "12/2016"}, {"body": "afraid trouble understanding trying achieve looks like simply trying pass data want use templates pass array prop", "d": "12/2016"}, {"body": "ok let put cards table adapted extract real component workflow vktable jsx thisl children col gt colheaderrendercall colrenderproxy h thisl thisdata row rowindex gt thisl children col gt colcellrendercall colrenderproxy h row rowindex vktablecolumn vktablecolumnselect usage conclusions possible vktable process slotsdefault reason make children inited passed data complex enough make use array prop obsolete first approach far good", "d": "12/2016"}, {"body": "please take step back describe use case trying achieve code samples quite confusing without explanation design constraints", "d": "12/2016"}, {"body": "created jsfiddle describing use case behind vktable", "d": "12/2016"}, {"body": "since code explanation goal assume far zone understand ca nt follow easily lines code try summarize understood design goal tell guess right author library devs use want provide clean declarative interface define various behaviours passing definitions props would possible satisfy aspiration clean interface looking way ab use inslot components render anything rather function interface slot parent component passing instructions maybe functions render content according instructions much like eg recharts react part charts getting close", "d": "12/2016"}, {"body": "sorry deep zone lol yes linusborg summarized pretty well thanks", "d": "12/2016"}, {"body": "linus think u spot miljan saying interface parent component ive actually thought exact components datagrid data column definitions tabs managed implement tabs use render functions straightforward implement filter tab component vnodes get label propdata order render tab header straightfoward definitely doable use render functions", "d": "12/2016"}, {"body": "pohnean right doable workarounds quite common issue judging forum would nice official solution could think like functionaldeclarative components accept props composedslots render kind", "d": "12/2016"}, {"body": "gut feeling good idea additional api components essentially empty shell need get propsdata main component nothing common means talk component vue situation bad feeling introducting api essentially says set setting behave like component basically fancy way pass props addtionally vnode api part public api using automatically hack want use templates good news access using vnode content prepare data nessessary following render function created vueloader template", "d": "12/2016"}, {"body": "thank linusborg nt worry expecting kind answer similar one got exposed template dilema back finally solved scopedslots probably time also far zone nt managed provide good presentation valid solution hope arise naturally evolve eventually get solved meantime keep workarounds close ticket time perhaps challenge related topic basically without workarounds ca nt find way apply simple tab transition details forum", "d": "12/2016"}, {"body": "close discussion fine think clear feature happen anytime soon", "d": "12/2016"}, {"body": "found issue searching thing still nt answer though think want implement exactly thing like way table component element library used straightforward wanted implement something similar less features well know simple table component neat api really confused reading element source code plenty jsx seems like way achieve similar component interface without hacks", "d": "5/2018"}, {"body": "issue year old today would use provideinject functionality issue closed please use forumvuejsorg questions", "d": "5/2018"}, {"body": "", "d": "12/2016"}, {"body": "ah clever thank", "d": "12/2016"}, {"body": "nt see issue yields result give use details please", "d": "12/2016"}, {"body": "posva slow transition click click different dom class", "d": "12/2016"}, {"body": "ooh one transition goes right instead left", "d": "12/2016"}, {"body": "similar problem vuex appvue pageavue component containervue transition component seems slow one step use keepalive put transition component route view spa transition snapshots first load forward back", "d": "12/2016"}, {"body": "vue also problems transitions note using vue first see empty component start transition like directive vshow working hope fixed next version", "d": "12/2016"}, {"body": "problem remains even though upgrade maybe provide demo", "d": "12/2016"}, {"body": "ca nt much without repro please try reproduce really ca nt feel free close issue", "d": "12/2016"}, {"body": "hi seems issue vue core discuss possible every issue easy repro", "d": "12/2016"}, {"body": "easy nt", "d": "12/2016"}, {"body": "got issue vue also still able reproduce error looks pretty random remove component works put component back nt work remove component still nt work also get chrome latest version mac os x yosemite safari", "d": "12/2016"}, {"body": "jessereitsma open issue hope admin take look", "d": "12/2016"}, {"body": "close issue take look something reproduce repository reproducible open new issue share know steps reproduce otherwise open new issue share", "d": "12/2016"}, {"body": "jessereitsma looks like got clues strip component reproduce bug jsfiddle repo really necessary hopefully give information error happens find open new issue repro information help", "d": "12/2016"}, {"body": "fyi running time store related main problem issue reproduce problem single freaking computer computer nt reproduce exception others seems related simultanously loading components seems run problem child component destroyed mounted data methods props parent component remove destroyed prop lowestchild works without problems seems sketchy fix still wanted update brains may get triggered debug found computer nt problem production npm run build version code currently experiencing webpack bundle installed using cli kinda simulates problem builded version seems run problem prob something hotloading part", "d": "12/2016"}, {"body": "worth got error realized turned experimental javascript chrome flags settings turning solved issue", "d": "1/2017"}, {"body": "sircharleswatson dude thank much looked flags page feature enabled turned restarted chrome solved happy thank much cc njleonzhang posva", "d": "1/2017"}, {"body": "posva linusborg hope help guys debug hopefully come fix maybe issue reopened since actually way reproduce", "d": "1/2017"}, {"body": "jessereitsma experimental features stable think wait error appears stable environment since error seems disappear production build new issue repo repro proper steps reproduce issue would great", "d": "1/2017"}, {"body": "thanks much works thanks", "d": "1/2017"}, {"body": "feeling may todo config computed property vuestash", "d": "12/2016"}, {"body": "note mutating rather replacing object array old value new value reference objectarray vue keep copy premutate value", "d": "12/2016"}, {"body": "need watch strings get around", "d": "12/2016"}, {"body": "watch primitive values replace watched object fresh new one thu dec x notifications githubcom wrote need watch strings get around receiving modified openclose state reply email directly view github mute thread", "d": "12/2016"}, {"body": "please open issue vuedevtools repo instead also try code ensure indeed using right version", "d": "12/2016"}, {"body": "please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem nessessary create repository us clone minimal reproduction repositories actual projects generally accepted thank", "d": "12/2016"}, {"body": "please reopen information conforms issue reporting guidelines", "d": "12/2016"}, {"body": "seems types validation includes together check blank line another case hyphenated string looks like prop", "d": "12/2016"}, {"body": "sorry seems problem plugin try binding submit handle directly button prevent plugin messing native dom events", "d": "12/2016"}, {"body": "looks like renamed using method somewhere app well nt use undocumented internal vue methods see may removedrenamed time without notice fix rename code work", "d": "12/2016"}, {"body": "issue also using quasarframework might problem side", "d": "12/2016"}, {"body": "yes related quasar framework solved thanks", "d": "12/2016"}, {"body": "found workaround meantime wrap two dummy attributes ie substitute relevant lines html something", "d": "12/2016"}, {"body": "thanks reporting seems vue tries reuse div element instead removing one adding reusing elements generally preferred performance reasons messes process seems bug indeed better workaround would explicitly key elements key unique component scope force vue actually replace divs", "d": "12/2016"}, {"body": "cool thanks better workaround", "d": "12/2016"}, {"body": "thanks looking", "d": "12/2016"}, {"body": "webpack behavior related vue", "d": "12/2016"}, {"body": "maybe need detect whitespace text node ignore hydrating", "d": "12/2016"}, {"body": "nested tags nt valid html", "d": "12/2016"}, {"body": "autoprefixer removes webkit perfix option set use last browsers nt need prefix anymore source need support older browsers adjust needs", "d": "12/2016"}, {"body": "thanks explanation sqal", "d": "12/2016"}, {"body": "thanks workwsl vuejs treats static attribute value attribute causes issue try fix currently could use value binding workaround", "d": "12/2016"}, {"body": "array object instances specific class class public functions need invoke functions template seems vbind converts passed value standard object way invoke class functions cheers", "d": "4/2018"}, {"body": "thought way resolve problem situation manually write param value ajax", "d": "12/2016"}, {"body": "issue posted could nt find anything well case want submit form automatically including page refresh nt want ca nt send via ajax solution perhaps mention docs would nice", "d": "12/2016"}, {"body": "use vm nexttick js thismyvalue value nexttick function el parent form submit", "d": "12/2016"}, {"body": "used elementscomponents vfor registered reference array containing dom nodes component instances", "d": "12/2016"}, {"body": "thanks kordiankowalski think expected behavior native html select also behaves like value empty set invalid value vuejs force update select calculate value assign new value becomes undefined might need process userland", "d": "12/2016"}, {"body": "hmm chance make feature request handled vue instead think would make templates nicer need work around common think quirk especially since initializing value without changing later works fine value preserved course initial value happens one trying assign nothing breaks", "d": "12/2016"}, {"body": "examples work events triggered variable initialized value updated current value nt think perfect way handle consistently suggest following defcc implementing case case basis", "d": "12/2016"}, {"body": "native fire event setting property invalid value jsfiddle think bit unexpected setting property vue would cause immediately overwrite property", "d": "1/2017"}, {"body": "also confused expected behavior may helpful mention form input bindings select section documentation", "d": "1/2017"}, {"body": "defcc said implement behavior manually watching anotherval select bind selectedval vmodel input bind anotherval vmodel selectedval bind anotherval watch except selectedval changes undefined jsfiddle", "d": "4/2017"}, {"body": "sure right way got around issue async options using component render async operation complete", "d": "5/2017"}, {"body": "check element list solves issue still consider issue though think hack necessary", "d": "7/2017"}, {"body": "good way default value adding disabled option always open improve docs vuejsvuejsorg pr closing since documentation issue change breaking change revisit next major release though", "d": "7/2017"}, {"body": "thread saved life", "d": "8/2017"}, {"body": "paulredmond thank seeing strange async issues ie could recreate chromeedge etc using loaded truefalse check form executing vfor fixed", "d": "2/2018"}, {"body": "behavior change jsfiddle op works like expected model become undefined versions works described op model become undefined similar problem code slightly different change model options well jsfiddle problem case model still set undefined even versions gt nt change values time problem example change model first second later change options via settimeout value become undefined similarly change options first change model second model become undefined expected behavior ps thank opening issue struggling days would never found changes model undefined", "d": "8/2018"}, {"body": "hi even though tired close issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests", "d": "12/2016"}, {"body": "vmodel", "d": "12/2016"}, {"body": "marshare think understand", "d": "12/2016"}, {"body": "qbaty", "d": "12/2016"}, {"body": "qbaty thanks rteporting looks like bug indeed took freedom correct vue version op use noch", "d": "12/2016"}, {"body": "linusborg okey first met bug using vue try update vue lastest version bug still exsit version", "d": "12/2016"}, {"body": "seems fixing bug created new bug checked binding using combination vuex states maintaining checkbox states code example checked set true false whenever active filter array seems component updated via vuex checked stated nt get updated like application state managed almost totally vuex vuejs version reproduction link howto reproduce selecting several checkboxes like brands use browser back button fallback previous states managed popstate event expected checkbox go depending previous action actually happening everything get correctly updated value wise except checkbox nt honored update checked truefalse keeps previous state selecting multiple eachother navigating back forward looks like beat missing last changed checkbox code goes reading docs vuex seems best practise like work worked like charm seems really fixing bug triggered bug created", "d": "1/2017"}, {"body": "fkobus please open new issue instead adding bottom closed ones thanks", "d": "1/2017"}, {"body": "maybe use", "d": "12/2016"}, {"body": "dumb", "d": "12/2016"}, {"body": "also come across building ui components come way defining prop used vmodel eventually event thinking akryum", "d": "12/2016"}, {"body": "curiosity value overriding syntax could also would probably require component authors create computed property getting model value since would technically possible extend component different model name", "d": "12/2016"}, {"body": "rpkilby may want redefine event radiocheckboxes inputs emit events side note little demo differents inputs events", "d": "12/2016"}, {"body": "way vuejs extend current binding directive prepost processing something like knockoutjs see code function document ready", "d": "4/2017"}, {"body": "could make reproduction services like js fiddle important see bindings difficult impossible see compiled template", "d": "12/2016"}, {"body": "code js fiddle", "d": "12/2016"}, {"body": "works perfectly latest chrome amp windows well os x whats setup", "d": "12/2016"}, {"body": "made reproduction chrome ubuntu chrome windows edge windows", "d": "12/2016"}, {"body": "page loaded select select value", "d": "12/2016"}, {"body": "switch value times see also", "d": "12/2016"}, {"body": "linusborg testing chrome x verify fiddle broken whether vue fiddle fault sure select initialized text displays selected select expected selected option text display selected selected option empty choice text correctly displays selected select since currently empty option correctly selected text correctly displays selected select empty choice empty choice correctly selected text correctly displays selected select even though current choice empty breaks expected selected option text display selected selected option empty choice text correctly displays selected select since currently empty option correctly selected text correctly displays selected able fix fiddle two ways change numeric values strings change empty option number either vue getting confused two falsey values vue getting confused mixed types", "d": "12/2016"}, {"body": "campares fails looseequal make patch", "d": "12/2016"}, {"body": "duplicated method name vueprototypeupdate", "d": "12/2016"}, {"body": "first link case result codes js l groupitems function item return c li v nb item n l groupitems function item return c li v nc item n l groupitems function item return grouptype c li v na item n grouptype b l groupitems function item return c li v nb item n l groupitems function item return c li v nc item n l groups function group return c div l groupitems function item return c li v na item n v v true generated b c code ternary see line using vue", "d": "12/2016"}, {"body": "currently vfor higher priority maybe need make explicitly document", "d": "12/2016"}, {"body": "defcc right result compiler", "d": "12/2016"}, {"body": "found code priority need document people like", "d": "12/2016"}, {"body": "changjoopark yes result right", "d": "12/2016"}, {"body": "expected behavior improve docs make priority obvious meanwhile template simplified filter", "d": "12/2016"}, {"body": "sure related one", "d": "12/2016"}, {"body": "hi thanks filling issue perfectly valid regex bug js parser", "d": "12/2016"}, {"body": "vue version still problem", "d": "1/2017"}, {"body": "", "d": "12/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks nexttick always necessary many cases", "d": "12/2016"}, {"body": "thanks read links followup forums seems weird phantomjs nt wait dom loaded rest tests", "d": "12/2016"}, {"body": "able keep state using attribute transition example tell nt work reopen issue", "d": "12/2016"}, {"body": "neat trick useful know understand correctly nt work example mentioned transitioning parent view via routing specific element user stops recording want nothing happen rendered duration value anymore nt apply transitions either maybe could apply somehow push key parent views via references something seems quite convoluted guess label feature specifically tied transitions technical sense like example use case", "d": "12/2016"}, {"body": "mmh trouble understand use case create little demo ideally jsfiddle please", "d": "12/2016"}, {"body": "demo app applied transition changing timestamp try suggestion see still transitions end easily store separate parameter keep latest value recording done ca nt use nice one computed write lot extra code thing things add view well timestamp component transitioned directly router try make pure demo fiddle later source important guess demos use case", "d": "12/2016"}, {"body": "another way looking actually make possible computeds return whatever previous value", "d": "12/2016"}, {"body": "use component getting key child caching value somewhere else easy way userland let keep", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "hi animation right check besides listener method added see class added need provide right duration animation effect actually nt duration leave dispear directly think close", "d": "12/2016"}, {"body": "ostroso also problems css transitions using leave leaveactive enter enteractive classes however tried replace css animations works expected plus get flexibility defining animation take look example", "d": "12/2016"}, {"body": "missing", "d": "12/2016"}, {"body": "urgh simple thank guys definitely must andreipfeiffer suggests css animations", "d": "12/2016"}, {"body": "hardimpossible help without reproduction issue", "d": "12/2016"}, {"body": "created repo reproduces problem stripped version project working everything works starting page renders server side client side goes blank", "d": "12/2016"}, {"body": "digging bit trying strip example found removing component view allows page display client ca nt figure tried removing transitions component nt change anything also tried use boolean explicitly instead value store display component nt seem fix either removing component really thing seemed fix", "d": "12/2016"}, {"body": "simply moving tag seems also fix problem reason", "d": "12/2016"}, {"body": "investigation found hydration fails spinner due fact serverrendered markup state route resolved client initial render happens route resolved hydration vue finds already rendered dom element corresponding returns placeholder node route nt resolved yet going mismatch regardless version fact warning using causing full rerender nt really consider working properly say really bug current limitation makes ssr nt play nicely async route hooks definitely something improve though solution would something similar probably expand make support placeholders well", "d": "12/2016"}, {"body": "yeah warning regardless version also stuff relies browser features ssr version client version would always differ bit still problem remains upgrade page renders blank client side would render correctly would changing placement tag affect page renders blank correctly deffo seems like bug changing order component placement affect even page renders", "d": "12/2016"}, {"body": "well general ca nt guarantee behavior warning warnings usually mean something wrong go wrong investigation fact simple solution since resolved route state already store simply force clientside router boot resolved route note would cause route hooks skipped client however side effects hooks reflected store state problem closing see make easier work async route hooks ssr", "d": "12/2016"}, {"body": "ignore animate element resetting", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "nice catch add", "d": "12/2016"}, {"body": "vbind expects javascript expressions nt valid javascript expression simply remove colon bind string bind string literal vbind", "d": "12/2016"}, {"body": "fnlctrl nt think solution want anchor value binded property output something like template compiled html old syntax would something like", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "fnlctrl nice", "d": "12/2016"}, {"body": "using nice solution using template literals", "d": "11/2017"}, {"body": "surely used method slot component passed content using methods inside slot component sure understand mean sounds like maybe scoped slots woudl solve problem", "d": "12/2016"}, {"body": "nt actually work abstract placeholder nt element may expand single element multiple elements text behavior event listener would unpredictable based content instead wrap slot element use event listeners wrapper", "d": "12/2016"}, {"body": "according suggestion work currently use case component represents component represents click emits custom event trying capture component nothing triggered missing something also want send event component elements inside slot achieve", "d": "12/2016"}, {"body": "think managed get working scoped slots event bus nt know best approach comments", "d": "12/2016"}, {"body": "maybe need force value setting option option emty value optionvalue text issue", "d": "12/2016"}, {"body": "defcc yeah need special case option", "d": "12/2016"}, {"body": "meaningful", "d": "12/2016"}, {"body": "hi thanks filling issue expected behavior like assigning variable twice former one overridden please use separate name one", "d": "12/2016"}, {"body": "importrequire", "d": "12/2016"}, {"body": "jounqin ok thanks use done", "d": "12/2016"}, {"body": "well gon na happen two reasons svelte compilation strategy incompatible virtual dom compiles templates imperative dom operations means must use templates vue users write render functions compiled fashion render functions purely dynamic difficult statically analyze vue already light gzipped svelte nt really zero runtime addition svelte generated code much verbose vue generated render functions component complexity project svelte generated code going bit heavier vue adds project gets bigger eventual size difference simply nt significant enough justify loss render functions nt great booooost speak", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "thanks easily achieved user land general try best avoid adding microsyntax templating system", "d": "12/2016"}, {"body": "think becasue input elements nt append body element fire change event since event missing vue update data check", "d": "12/2016"}, {"body": "facetothefate said element needs dom change event fire", "d": "12/2016"}, {"body": "available component mounts memory similar calling without arguments warnings console telling target found nt think needs fix", "d": "12/2016"}, {"body": "sure noticed maybe clear explain usecase wanted create vue application website vue application used single page website javascript however inserted globally cms understood documentation mounted called mounts memory would much problem using xhr request mounted method load json however like json loaded every page current workaround remove el options check element avaliable clear documentation mounts always", "d": "12/2016"}, {"body": "compination indom template custom render function wo nt work expected behaviour either define template indexhtml root instance define render function ca nt html indexhtml look like main contents remove render function note works standalone build", "d": "12/2016"}, {"body": "thanks looking", "d": "12/2016"}, {"body": "thanks", "d": "12/2016"}, {"body": "please manually add attribute item explanation", "d": "12/2016"}, {"body": "still work add key fnlctrl", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "process case iff id filed identify data use index still work", "d": "12/2016"}, {"body": "index removed please refer", "d": "12/2016"}, {"body": "vue replaces element mounting seems populate element page vue mounted populates vue actually renders app one suggestion moving app template template string include mounted vue app", "d": "12/2016"}, {"body": "hook name", "d": "12/2016"}, {"body": "sorry shame", "d": "12/2016"}, {"body": "thanks reporting issue ios device reproduce problem believe vue already handled prefix problem builtin component used compiled render function looks like manually prefix event native modifier vue knowledge event native binding auto prefixing nt available use component mentioned", "d": "12/2016"}, {"body": "expected vue nt autoprefix events directly bound", "d": "12/2016"}, {"body": "thx export autoprefix method handle quickly need write similar codes", "d": "12/2016"}, {"body": "hmm reproduce behavior seems exactly copy jsfiddle verbatim local file maybe chrome extensions", "d": "12/2016"}, {"body": "hi thanks looking deleted chrome extensions emptied cache browsehistory etc still wrong chrome found several differences drag somewhere half cell works highlights second column mouse enters drag closer left edge fails notice even drag right strange fails fiddle well weirdest drag closer right something completely different chrome version code top edge perfect matter drag checked coworkers system well one works fine chrome fiddle ones fails well", "d": "12/2016"}, {"body": "chrome version reproducible jsfiddle maybe check whether divs overlap", "d": "12/2016"}, {"body": "kingmario checked divs seem normal besides looking fiddle nt see layed differently browser", "d": "12/2016"}, {"body": "still reproduce may something windows chrome", "d": "12/2016"}, {"body": "seems work fine windows chrome edit works fine macos safari", "d": "12/2016"}, {"body": "hmm sorry szmarci given test cases issue seems unlikely caused vue maybe try testing different machine anyway closing feel free follow information", "d": "12/2016"}, {"body": "make things even strange full screen grab first item list works downsize window grab element fails also tested several machines coworkers windows latest chrome fails windows latest chrome fails windows latest chrome fails windows latest chrome works one would assume related fnlctrl uses build idea gon na check home mac", "d": "12/2016"}, {"body": "update works fine mac os latest chrome", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "expected please read support available forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "default clicked error result clicked changed clicked result correct result", "d": "12/2016"}, {"body": "repeat please read guide section linked hint add prop divs allow vue differentiate two encourage ask support forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "note note edit written comment updating original submission nothing new ok studied deeper pull request push soon considerations make meanwhile tremendously simplified version reproduction case run ok switch issue appears code case simple", "d": "12/2016"}, {"body": "pull request done technically boils swapping place single line code fixes reproduction links nt know fixes seems related complete reversal vuejsvue undoes main assumption motivated quote starting animation enter relies retrieving global position element would fail due lack offsetsoffset parents result display none assumption statement embraced resulting unit test specification assumption use case general see jquery relies display none fails jquery issue counterintuitive expect starting enter animation element displayed right fact shall expect element displayed start enter animation another way confirm assumption embraced simple take look current spec pay attention expects display enter leave bit counterintuitive leave expects value beforeleave value expected changed afterleave meanwhile enter expect value beforeenter expects already changed value afterenter exposes problem looking solution doubt values expected beforeenter afterleave display none afterenter beforeleave display meaning expecting specific value enter leave jquery wants display none run animation otherwise considers element displayed nothing another animation wants calculate stuff based element position expectation hard coded let hardcode none let enter author deal changing toggling enter done breaking change puts burden everyone working code furthermore want explain new user work nt manually set display none enter even already set initial style display none must vue automatically set display none animation yes option reasons believe pr accepted break code counterintuitive someone needs display enter one beforeenter beginning enter way set display none beforeenter vain reverted internally expected unit tests must manually put beginning enter code set display none hope pr gets merged otherwise assuming work practice may convinced since first lines still please look code pen tell code changed work thank", "d": "12/2016"}, {"body": "ping probably something answer", "d": "12/2016"}, {"body": "fix intended enter hooks design called moment right node inserted right node made visible previously behavior inconsistent fix usage pretty simple add btw thanks detailed report appreciate time spent looking", "d": "12/2016"}, {"body": "ok thanks indeed fix easy almost getting difficult understand going sorry got bit upset tight deadlines app working suddenly nt anymore keep fantastic work", "d": "12/2016"}, {"body": "met problem want use version", "d": "12/2016"}, {"body": "use versions encapsule elements additional parent like revert wait see happen issue", "d": "12/2016"}, {"body": "question decidedthank much", "d": "12/2016"}, {"body": "use functional component way get rid extraneous root component", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "fnlctrl thanks", "d": "12/2016"}, {"body": "hi thanks filling issue custom events designed direct parentchild communication passing parent reference child considered antipattern vue matter way since couples parent children implementation", "d": "12/2016"}, {"body": "works use believe correct approach heads case deadline sure bug though imagine wrapped stuff would cool", "d": "12/2016"}, {"body": "yeah vmodel solution unfortunately need track changes vuex onchange method recommended way vuex forms nt tried nexttick though give shot tue dec bill criswell notifications githubcom wrote works use vmodel believe correct approach heads case deadline sure bug though imagine wrapped onchange stuff nexttick would cool receiving authored thread reply email directly view github mute thread gt regards david gauld", "d": "12/2016"}, {"body": "use attr select", "d": "12/2016"}, {"body": "duplicate closing since source issue dependency bug framework", "d": "12/2016"}, {"body": "ok possible update dependency version without bug", "d": "12/2016"}, {"body": "seems false node normalized", "d": "12/2016"}, {"body": "fix shipped", "d": "12/2016"}, {"body": "addendum also fix purely code vue import bit hack sorts problem fixed vue", "d": "12/2016"}, {"body": "hello tried reproduce issue ca nt reploduction link anything missed", "d": "1/2017"}, {"body": "thanks looking checkout jsfiddle get back problem apps testing ie however also quite large nt much luck isolating problem last time try", "d": "1/2017"}, {"body": "ok think know hapenning unfortunately nt know reproduce jsfiddle basically code built webpack use strict case everywhere according mdn method called undefiend case strict mode thiswindow however enabled stays undefined would seem call raf detached window object strict mode throw error see would best practice fix would also seem case everything except ie good testing code using standard vue builder executes code eval statements hotreloading note ie following throws error example chrome firefox enough evidence issue get fixed", "d": "1/2017"}, {"body": "repro issue hot reloading ie create pr", "d": "1/2017"}, {"body": "still running error ie edge", "d": "5/2018"}, {"body": "nested vnode normalized try make patch", "d": "12/2016"}, {"body": "components", "d": "12/2016"}, {"body": "defcc looking well", "d": "12/2016"}, {"body": "got", "d": "12/2016"}, {"body": "fix shipped", "d": "12/2016"}, {"body": "patch works demo also assume test derived", "d": "12/2016"}, {"body": "vueserverrenderer meant used node server works differently node webpack refer help", "d": "12/2016"}, {"body": "case feature request would make prerendering much easier suppose huge step nodejs require commonjs", "d": "12/2016"}, {"body": "digitalheir see implements lay loading ssr", "d": "12/2016"}, {"body": "use nuxt", "d": "12/2016"}, {"body": "would put template script tag inside element vue mounted move outside", "d": "12/2016"}, {"body": "ah nt occur guess late thanks", "d": "12/2016"}, {"body": "\u53ef\u4ee5\u89e3\u51b3", "d": "12/2016"}, {"body": "\u6211\u4e5f\u9047\u5230\u4e86vmh function", "d": "12/2016"}, {"body": "deprecated since html vue recognized svg element thus created svg namespace control using html anymore reason forces use", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "fnlctrl apologies default text comment nt english nt know respond upload jsfiddle example would possible post receive answer", "d": "12/2016"}, {"body": "sorry vue nt guarantee compatibility arbitrary party libsplugins", "d": "12/2016"}, {"body": "fyi seems like babel es module transpile issue related vue", "d": "12/2016"}, {"body": "watching transactionitem prop doesnt work tells absolutely nothing help help also already told issues meant support questions two issues closed today wrote somewhere forum nt work ip block still gitter stack overflow happy help get forum access working tell us problems trying access github issues still support forum", "d": "12/2016"}, {"body": "thanks filling issue please create reproduction repository steps", "d": "12/2016"}, {"body": "cant signup forums ip block nt know ill post bug please nt find blocked solve first use stack overflow", "d": "12/2016"}, {"body": "nt know happens addon version firebug firefox windows since accepted firebug switch new builtin version nt know revert addon prefer probably firebug bug open issue repo try reinstall firebug revert changes", "d": "12/2016"}, {"body": "ran app started silently failing errors visible firefox loading chrome worked showed cause assuming want make vue work chrome need make warnings cause firefox fall completely", "d": "1/2017"}, {"body": "found version firefox windows worked annoying seems related either running firefox inside vm doubtful something ubuntu version something way handled transition firebug builtin firebug merge first turned offer use builtin dev tools later think accepted realized mistake even firebug theme nt look really sluggish ironic since supposed performant native dev tool nt know revert long story short installed chromium dev browser use google chrome leisure browser thay way continue using separate unity shortcuts switch nt find resolution issue also tried firefox esr release think already displaying css issues something transform origin scrap posva sadly could nt figure completely remove firefox ubuntu install ealier version confirm infirm switched chromium agree likely vue related although encountered silent error scenarios maybe nt seen happen javascript tools maybe related babel build way outputting errors since unable make reproducible scenario understand closed", "d": "1/2017"}, {"body": "running latest versions firefox firebug mac see issue seems like legit bug", "d": "1/2017"}, {"body": "firebug one", "d": "1/2017"}, {"body": "posva nt buy asking everyone wants use software develop chrome good enough answer", "d": "1/2017"}, {"body": "asking everyone wants use software develop chrome good enough answer nt recommend chrome benefit vue devtools enjoy better dx firebug bug unrelated vuejs someone ever finds way fixing happily welcome pr running latest version firefox mac see issue still running firebug addon know maintained anymore firefox devtools integrate find issues around", "d": "1/2017"}, {"body": "find issues around interesting thanks confirming", "d": "1/2017"}, {"body": "yeah interesting one firebug seem broken completely consoleerror test typeerror dbg undefined fair enough nt support unmaintained plugins time move however want keep vue working cases could use", "d": "1/2017"}, {"body": "would guess things like transition mode really belong component imagine component transition mode component b transition mode transition b would look like stuck waiting b finish transition b stuck waiting finish transition", "d": "12/2016"}, {"body": "maybe right im using example thats though could change default transition mode outin could solve problem nt wait b enter b wait leave enter right", "d": "12/2016"}, {"body": "maybe provide reference basically need implement custom transition component two instances used together coordinate sequencing think eventually entry cookbook one day released separate plugin", "d": "12/2016"}, {"body": "related vue", "d": "12/2016"}, {"body": "fnlctrl", "d": "12/2016"}, {"body": "hello komajunjun thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "thank linusborg asked question quora answer question thanks advance", "d": "12/2016"}, {"body": "quora sorry", "d": "12/2016"}, {"body": "notice code image wo nt loaded automatically webpack requireimport data property vm use template", "d": "12/2016"}, {"body": "jounqin mean requireimport url firstly", "d": "12/2016"}, {"body": "ca nt define props element used define components template props work meant props meant passing data prent component parent template child component please read guide props", "d": "12/2016"}, {"body": "hello jinhwong thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "hmm use custom component alias directly setting content considered slot content slots meant content programmatically rendered vue probably make pluginbase component accept string prop use inside might need add warning future", "d": "12/2016"}, {"body": "hello deveclipse thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "likely bug requirejs rather vuejs", "d": "12/2016"}, {"body": "possibly related", "d": "12/2016"}, {"body": "apocalyarts check happening case", "d": "12/2016"}, {"body": "posva simplesmiler yes confirm also confirm template workaround help displaying posts mainpage using vfor youtube iframes working fine closing issue looks safari bug like evan explaned probably make workaround component", "d": "12/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks property already observed need use also arrays longer augmented component instances also different version", "d": "12/2016"}, {"body": "vue nt detect change directly setting item index see allows substitute value array given key another value want modify entirely replace also thank pointing arrays longer augmented set onward", "d": "12/2016"}, {"body": "actual mutation happens object inside array array subject index detection caveat", "d": "12/2016"}, {"body": "made repo show problem please take look see loaded first time interpolation nt picking updated state changed method later however see console actually updated problem need updated within curly brackets note button clicked causes rerender hence get current value basically loading fine nt updated ps tried using rewrite whole value since takes index indexed array second argument run another problem index string basically thing associative arrays javascript hence get thrown error", "d": "12/2016"}, {"body": "seem misunderstanding javascript array works way using like object hash array mutations arrays javascript happen methods like adding new property array object pushing new element array arrays want store things string keys use object since adding new property use", "d": "12/2016"}, {"body": "yeah understood array strings indexes basically object property creating repo nt know one thing despite way purpose used array nt vue updating nt since arr someid arrsomeid accessed arr someid arrsomeid nt updating ps also using objects would nt adding property would modifying modifying", "d": "12/2016"}, {"body": "oh boy fixed fiddle please note read change detection caveats", "d": "12/2016"}, {"body": "simplesmiler thank clarify restless nt know wrong using update value instead using set object begin hit change detection caveat", "d": "12/2016"}, {"body": "yes vue unable detect addition new property object due limitations javascript", "d": "12/2016"}, {"body": "evan almighty nt insane nt sure problem running thank simplesmiler guys good day", "d": "12/2016"}, {"body": "error seeing related circular references incorrect use leading infinite recursion", "d": "12/2016"}, {"body": "sorry provided wrong code change code make looks right another question new code work like nt work like vue warn velse used element without corresponding vif simple work", "d": "12/2016"}, {"body": "valid closing syntax need close tags explicitly", "d": "12/2016"}, {"body": "nice understand thanks finally code search hope useful", "d": "12/2016"}, {"body": "thank much", "d": "5/2017"}, {"body": "js object please refer", "d": "12/2016"}, {"body": "simply pass method prop instead", "d": "12/2016"}, {"body": "normal specific benchmark fluctuate versions keep eye please make sure open issues adheres guidelines", "d": "12/2016"}, {"body": "hi thanks filling issue special attribute vue used binding styles name suggests please rename prop something else", "d": "12/2016"}, {"body": "kailniris summarise reasons use cases behind feature request please thread long", "d": "12/2016"}, {"body": "short story global data set fairly big time make objects reactive data set memory consummation gets hand control memory usage remove unused observer properties getter setters unobserved objects self rewrite deep clone like order remove observers actually observed objects vue instances somewhere code sure object unobserved require feature linked issue suggestions cloning original object make reactive freeze object wo nt solve issue cuz situations need observed objects reference make mutations vue instance fiddle representing use case", "d": "12/2016"}, {"body": "already check using private property though nt know worth adding public api maybe good enough least", "d": "12/2016"}, {"body": "even non observed reactive object property like example observer observed vue instance least observed function returns", "d": "12/2016"}, {"body": "well normally means made reactive vue gettersetters need know object observed actually going trigger view changes go deeper use array though still thing", "d": "12/2016"}, {"body": "sorry specific enough still learning vue method suggested sufficient enough task meant use risk possible risks anyway thanks much information vue impresses every moment", "d": "12/2016"}, {"body": "well since undocumented private property belongs internals vue implementation subject change eg renamed rely face risk changed time future undocumented though unlikely specific case", "d": "12/2016"}, {"body": "understand public api would needed chances could feature future", "d": "12/2016"}, {"body": "pattern discussed issue suitable workaround problem feature request unnecessary", "d": "12/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks please try clarify version vue using work normal browsers version cordovaandroidios fail", "d": "12/2016"}, {"body": "fnlctrl hi using cordova vue code working perfectly normal browsers nt work cordova run mobile phone phone model one plus \u4e00\u52a0\u4e09 base android ram rom meizu base android maybe ram rom test failed nt iphone devices nt know works ios wrote simple code show problem use default cordova project simply generate cordova create see vue version cordova version image working perfectly normal browser phone nothing happend", "d": "12/2016"}, {"body": "thomassoloist please create repo keep mind nt necessarily know cordova", "d": "12/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "12/2016"}, {"body": "change different seems fallback component found", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "exactly know changing solve problem think fallback preference wrong find naming conventions local registered components first found look global components", "d": "12/2016"}, {"body": "fnlctrl think", "d": "12/2016"}, {"body": "know naming conventions third party ui libraries using local components name conflict knows", "d": "12/2016"}, {"body": "know naming conventions third party ui libraries using would relevant always alias inside options consider reverse scenario want override third party component local component globally registered component anyway always explicitly alias components potential naming conflict never rely fallback precedence", "d": "12/2016"}, {"body": "would relevant always alias inside components options real scenario use ui collection set simply nt need care whether registered kebabcase camelcase titlecase register local component simply html something import tabpane tabpanevue export default components tabpane someui also component named tabpane registered local registered component never used use longer syntax said overriding thirty ui local component global component rare case like hack local component registered kebabcase never chance vue guide says registering components props use kebabcase camelcase titlecase vue care told vue cares care", "d": "12/2016"}, {"body": "told vue cares care said let quote words always explicitly alias components potential naming conflict never rely fallback precedence case creating component name party component avoided first place since defining local component full control name", "d": "12/2016"}, {"body": "please nt play words fact registered component wrong naming convention vue cares please let end dispute", "d": "12/2016"}, {"body": "yeah say bug feature doc wrong code", "d": "12/2016"}, {"body": "think bug camel case title case component name seems aliases rather fallback practically use cameltitle case register local component object shorthand since javascript allow kebab case variable names also local component overridden global components easily cause unexpected behavior break capsulations third party components", "d": "12/2016"}, {"body": "sounds reasonable maybe bring breaking change", "d": "12/2016"}, {"body": "using one template could render", "d": "12/2016"}, {"body": "jounqin happend internally check prototype chain first think might bring breaking change cases apply new resolving strategy", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "thank", "d": "12/2016"}, {"body": "\u70e6\u8bf7\u4ed4\u7ec6\u770b\u770b\u5f00 issue", "d": "12/2016"}, {"body": "overwrite application code use bundling via webpack browserify control env variables", "d": "12/2016"}, {"body": "thanks quickly answer another weird code seems hack webpack purpose sorry interruption", "d": "12/2016"}, {"body": "jounqin ssr", "d": "12/2016"}, {"body": "posva hmm know ssr preserving override webpack simply although code short", "d": "12/2016"}, {"body": "component name ca nt start digit htmlxml tag names simply component name turned tag name", "d": "12/2016"}, {"body": "oh see modified subject case maybe helpful warning introduced", "d": "12/2016"}, {"body": "understand maybe error message highlight fact", "d": "12/2016"}, {"body": "heh let edit last message since real time indeed thinking thanks", "d": "12/2016"}, {"body": "interestingly issue revealed typo vue source code see", "d": "12/2016"}, {"body": "expected supported wo nt future use computed properties methods need complicated nesting filters", "d": "12/2016"}, {"body": "well think already explained also dedicated repo websitedocs wwwgithubcomvuejsvuejsorg please open new issue think still issue please try answer questions suggestions aforementioned improved miss link secion somwhere else docs", "d": "12/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks use watcher value itemquantity", "d": "12/2016"}, {"body": "received warning directly mutating prop value forbidden please use custom events change value instead", "d": "12/2016"}, {"body": "ok id successfully binded list able bind load difference", "d": "12/2016"}, {"body": "nt define parent component instead wrongly defined global variable questions please use dedicated gitter forum thanks", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "tracked vuedevtools repo yes already request high priority need check allow access file urls vue devtools extensions panel", "d": "12/2016"}, {"body": "vuejsvuedevtools", "d": "12/2016"}, {"body": "currently supported yet roadmap duplicate", "d": "12/2016"}, {"body": "amazing use git bisect find source bug sorry duplicate issue searched wrong words", "d": "12/2016"}, {"body": "component seems lacking access filter exporting plain object inside something like cause problem please follow issue reporting guidelines provide repo github reproduce issue thanks", "d": "12/2016"}, {"body": "filters work mustache interpolations", "d": "12/2016"}, {"body": "probably caused safari quirks string template seems work fine", "d": "12/2016"}, {"body": "safari bug removing element containing iframe causes iframes src still dom go blank suggest opening issue webkit bug tracker instead really much vue since changing insertionremoving order going affect lot patching internals potentially lead breaking changes fnlctrl points workaround using string templates instead indom templates efficient", "d": "12/2016"}, {"body": "strange thing log display property set correct yet reports none could issue callback fires early later correct", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "quick workaround works", "d": "12/2016"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "12/2016"}, {"body": "works fine", "d": "12/2016"}, {"body": "usage slot expands piece plain text transitionable wrap element like", "d": "12/2016"}, {"body": "thanks lot", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "fixed used filter grayscale nt enable hardware acceleration added", "d": "5/2017"}, {"body": "update untill getting error another library using directly related vue please provide details also use issues track vuejs bugs get usage problem could post issue forum", "d": "12/2016"}, {"body": "least tell us library errors getting", "d": "12/2016"}, {"body": "hey thanks fast answer error unfortunately dont information right know enough reason would expect hey check vueloader version maybe webpack scripts need update change something well abstract even sorry sure using custom version epubjs library", "d": "12/2016"}, {"body": "well case ca nt really help much since held responsible compatibility arbitrary party libraries closing please follow information available eg error stack traces minimal repro", "d": "12/2016"}, {"body": "using vuejs identified issue strange issue related check jsfiddles one uses book appears one uses book appear ideas issue missing something", "d": "1/2017"}, {"body": "epub framework changing dom directly vue managing dom kinds sideeffects happen good practice manually update dom hierarchy vue manages", "d": "1/2017"}, {"body": "thanks", "d": "1/2017"}, {"body": "element tag", "d": "12/2016"}, {"body": "yep could definitely use improvements declarations added midway pure es codebase already place quite places trying get flow knowledge also limited appreciate prs", "d": "12/2016"}, {"body": "thejameskyle link using flow vuejs try yesterday much problems would great documentation like one made ts", "d": "12/2016"}, {"body": "currently someone working would like try", "d": "12/2016"}, {"body": "markustoe thanks offering help currently actively working improving typings addchange stuff find working parts fixing bugs etc would great improve situation", "d": "12/2016"}, {"body": "primary concern intrinsic misalignment vue options object general type checking systems vue internals options object meta object contain information plain class assume keep nesting even using literal getset nt help flow understand inside getter would object instead vue instance right way make flow potentially play nice removing nesting nesting useful vue lot cases example options nesting allows merged different strategies component extensions enables userland composition eg vuex literal gettersetters quite bit indirection use cases even harder without nesting alternatively vue user serious getting proper classbased type checking vueclasscomponent probably way go", "d": "12/2016"}, {"body": "sometime future flow add syntax adding type functions simple semantics hard implement problem around become getterssetters toplevel pretty natural nested way weird stuff mapping props intersection type spend time working order get correct types", "d": "12/2016"}, {"body": "scott", "d": "12/2016"}, {"body": "closing since nt think worth introduce alternative syntax type checking purposes plus losing composition flexibility especially fullfledged approach available via type checking strongly desired may revisit es classes become expressive enough used default defining components", "d": "12/2016"}, {"body": "looking maybe could improve parser could achieve vueloader vueify considering compiler code size", "d": "12/2016"}, {"body": "defcc considered using example", "d": "12/2016"}, {"body": "need nonminified development build see vue warning please refer", "d": "12/2016"}, {"body": "thx", "d": "12/2016"}, {"body": "please refer", "d": "12/2016"}, {"body": "filter named stored variable could instead ofc nondynamic", "d": "12/2016"}, {"body": "imo dynamic filters breaks bit readability templates moved js instead computed property explicit name represents also nt really see syntax could used", "d": "12/2016"}, {"body": "use computed properties instead plain method call filters designed readability expected static", "d": "12/2016"}, {"body": "would belong vuerouter repo could please post", "d": "12/2016"}, {"body": "done", "d": "12/2016"}, {"body": "\u52a0\u5165\u4e00\u4e9b loader", "d": "12/2016"}, {"body": "\u653e\u5728github\u4e0a", "d": "12/2016"}, {"body": "", "d": "8/2017"}, {"body": "please check squares always fade inout well nt probably getting image index times row image nt change function nt guarantee drawn index different previous one besides everything looks good", "d": "12/2016"}, {"body": "point know index trigger change bug opening fiddle suddenly works sometimes nt could issue hot reloading exact issue local build vuecli webpack template seems mainly occur code gets hot reloaded people gitter channel confirm behaviour machine seems random", "d": "12/2016"}, {"body": "additional info launching fiddles browsers get random results reloading makes sometimes work sometimes break", "d": "12/2016"}, {"body": "alright checking definitely something weird going transitionproperty set nt see images animating beginning like switches change works great yeah weird issue updated fiddle uncomment transition see happens", "d": "12/2016"}, {"body": "correct also happens kinds browsers sometimes reload sometimes specify properties individually seems like real bug", "d": "12/2016"}, {"body": "tested chrome firefox nearly switched reloaded reruned problems found maybe bug jsfiddle fixed", "d": "4/2017"}, {"body": "plasmatium interesting indeed longer reproduce issue probably accidentally fixed latest vue changes", "d": "4/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "vue \u4e0d\u4fdd\u8bc1\u4e0e\u4efb\u610f\u53ef\u80fd\u64cd\u4f5c dom", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "bad", "d": "12/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks vue replaces dom therefore dom events like click one replaced put jquery manipulation event also google examples many", "d": "12/2016"}, {"body": "note already replied first issue question one hour earlier please nt open issues supporthelp", "d": "12/2016"}, {"body": "bug vue replaces elements added events domready hint call jquery code hook encourage ask questions forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "linusborg vue replaces elements added events replace elements give explanation", "d": "7/2017"}, {"body": "gcystar vue controls dom way never rely domelements mutate dom directly times want achieve done vueway need information please ask forum stack overflow gitter prefer gitter always someone online willing help", "d": "7/2017"}, {"body": "duplicate fixed", "d": "12/2016"}, {"body": "still problem first load basically made wrapper component select uses value input instead vmodel first load wrapper component random chance whether correct value displayed select whether empty know value displays put value wrapper component right next also change value vmodel works every time must still sort race condition going using vue", "d": "6/2018"}, {"body": "latest update still facing problem using workaround described", "d": "12/2016"}, {"body": "input gets focused user inputing something input value property updated make patch", "d": "12/2016"}, {"body": "problem trim modifier try fix together", "d": "12/2016"}, {"body": "hey sorry potential problems caused app new release build vue dev branch locally see fixes issue", "d": "12/2016"}, {"body": "problem thanks great work fast fix", "d": "12/2016"}, {"body": "hi short update digging deeper deeper vuejs calling invokecreatehooks new element created seems fix problem ie line updated fiddle change demonstrate leaving first invokecreatehook work know think issue exatly related issue posted stack overflow new elemente created defaults input type text value applied type changed radio therefore get correct value newly created element defaults hope follow explanations kind regards andreas", "d": "12/2016"}, {"body": "nt know different workflow using bower instead npm main field indeed missing multiple builds runtinenormal builds runtime builds nt include compiler therefore need something like vueloader compile templates commonbrowser builds common builds used bundler browser build directly used cdn builds total combining option maybe bower one packagejson one", "d": "12/2016"}, {"body": "seems reasonable sure recent developments bower use gulp wiredep insert script tags based think fairly common", "d": "12/2016"}, {"body": "actually searched recommended package manager npm yarn bower configuration file vue see basically override main manually", "d": "12/2016"}, {"body": "hi marcte thanks interest vue idea high level fits better user land abstraction top vue nt see talking fields looks like specific component good luck idea", "d": "12/2016"}, {"body": "posva problem get vuejs code sugar sure work ok break vuejs features really think especially people like experts interpreter workflow implement feature sad close thread people time comment main point vue feature describe beacon replacement implicit parameter passing without anyway fill component replacement definition elements doubling size file following would replace something like would highly simplify improve frontend framework implemented know design vue wish nice frontend framework marc", "d": "12/2016"}, {"body": "posva field mean old database vocabulary attribute column record table database last name first name phone number", "d": "12/2016"}, {"body": "sugar talking component create closed looked things already said much realised fits userland better cheers", "d": "12/2016"}, {"body": "posva done userland forces either define dynamic component code element form rather get done automatically behind scene runtime client define intermediary component anyway code possible components dynamic call one place code add component bad add one component level element top form lower component also means top form call needs parameters passing intermediary component need forward lower component mention heavier syntax compared simple beacon need pass leas one parameter dynamic component selecting field want name address etc simplify things visually code size wise memory usage wise speed wize marc", "d": "12/2016"}, {"body": "posva would like discuss topic skype could french english thanks marc", "d": "12/2016"}, {"body": "marcte offense quite difficult understand proposal even reading twice imagine would similarly even difficult less experienced users comprehend since vue always focused approachable easy understand nt think something consider pulling vuejs recommend building userland suit specific needs", "d": "12/2016"}, {"body": "thanks reply really trying express best way think see must framework userland maybe misunderstood use terms mean something else main point program subcomponents reusable want place templates using short amp simple beacons need pass anyway parameters context acceptable way reflect upwards subcomponent state changes events manager upper component means would natural implicit way putting component template vuejs either interpret elaborate way least replace behind scene longer verison interpreted vuejs less verbose component insert information need come metadata source example put button component name component would replaced call button component reference metadata related startbutton would also wire things subcomponent reflect state upper component upper component one meaning button state meaning good practices debugability button component change state upper component calling attribute setter manager procedure central upper component course maybe makes sense show point visual sketches would also open skype conversation matter already new handwritten schema showing problem really trying use vue best elegant way remind us thlking frontend framework meaning related visual objects long complicated js marc", "d": "12/2016"}, {"body": "words posva linusborg whatever allowing data driven templating app code slimming idea synthesised way way insert components without need long statement parameters way templates look visual include code mostly related component positionning beside minimum behaviour code needs outside components would allow see simple solution billow apparently simple framework vuejs graphic designers anyway making easier cool see template code would offer natural way inserting component universe components highly repetitive code generated client side namely take component beacon replace necessary call syntax would anyway necessary every component calls component type solution simplest way triggering code replacement vuejs interprets code replacement could take string beacon ex firstname process function returns js statement interpret similar ways dynamic templates also allows define parameters want pass processing defining values passed would also allow simpler way connect data flow different component levels althougs explicit code could made explicit function somewhere global code files great thing would function returning statement could logic select different return formats many parameters etc according serves better context bottom line feature would allow really cool visually appealing code whatever way want take advantage really think great step take allow marc", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "complicated", "d": "12/2016"}, {"body": "encourage ask support questions forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "linusborg thanks", "d": "12/2016"}, {"body": "hi fenivana thanks filing really like issue reporting style succinct yet informing fix tried small demo worked well wonder work larger application would like give local build try application thanks", "d": "12/2016"}, {"body": "addressed using client server ensure async components resolved renderhydration adhoc use async components without router however likely supported", "d": "2/2017"}, {"body": "still getting upgraded router gt unfortunately ca nt use codesandbox giving nt much code look anyway hope fine", "d": "10/2017"}, {"body": "fracasula using routeronready using async components nt see connection issue", "d": "10/2017"}, {"body": "hi jcfg thanks suggested feature far refrained polluting prototypes custom methods vue explicitly removed nt think want start adding type code framwork unless advantage provides extraordinary far nt think case proposed method", "d": "12/2016"}, {"body": "adding vueswap like vueset", "d": "12/2016"}, {"body": "write updated notification", "d": "12/2016"}, {"body": "dependency notification twice splice vueset right adding arrayprototypeswap like adding vueswap notifications", "d": "12/2016"}, {"body": "dependency notification twice splice vueset right yes called twice neither performance implications calling watcher twice update triggered pushed scheduler working asynchronously skip duplicate entries", "d": "12/2016"}, {"body": "ok still think worth reactive swap vue none trivial normal users vueswap also needs single notify like corrected comment since vue developers know vue better normal users", "d": "12/2016"}, {"body": "ok still think worth reactive swap vue none trivial normal users nt think three lines code herringtondarkholme nontrivial dev knows js enough work vue successfully otherwise try keep api surface vue lean could think dozens small convenvience functions like would inflate api unnessessarily", "d": "12/2016"}, {"body": "quick question notifications whole todo list right single elements list notifications vueswap would miss notifications arr x example something like data msg reactive var todos msg reactive list", "d": "12/2016"}, {"body": "could think dozens small convenvience functions like would inflate api unnessessarily therefor one could aggregate helpers like plugin core clean", "d": "12/2016"}, {"body": "quick question notifications whole todo list right single elements list notifications case changing array therefor one could aggregate helpers like plugin core clean contreibution welcome close issue since think come understanding wo nt added core", "d": "12/2016"}, {"body": "hi thanks filling issue many css properties like works numerical values ie appending default break usages", "d": "12/2016"}, {"body": "fnlctrl thanks reply first awesome css properties work numerical values however properties also feature work good work numerical values css properties would units", "d": "12/2016"}, {"body": "cybai think possible implement computed properties also vuejs later use filter eg html", "d": "12/2016"}, {"body": "kazupon looks good though hope vue support suffix automatically besides using properties might flexible users thanks reply great example", "d": "12/2016"}, {"body": "agree cybai flexible calculating style", "d": "6/2017"}, {"body": "store data set plain object user pick item put item vue instance reactivity one item everything good expects causes memory leak every time put item vue instance new observer property added object even object instance new observer added next unused ones could please provide demonstration jsfiddle example ecactly put item vue instance", "d": "12/2016"}, {"body": "sorry clear enough fiddle asked", "d": "12/2016"}, {"body": "made test looks like made false statements memory leak looks like make object reactive vue instance put object another instance first instance observer property added additional getters setters added right however high memory usage large data set still issue", "d": "12/2016"}, {"body": "observer property added yes somehow remove unused observers gettersetters parts app updates object want keep reactivity conflicting requirements imho observe one object maintain observer maybe vue smaller observer instances sure currently workaround might partition data maintain set objects want keep reactive clean reactive set another suggestion mark immutable properties prefix waive several watcher instances", "d": "12/2016"}, {"body": "somehow remove unused observers gettersetters parts app updates object want keep reactivity conflicting anyhow lets say object list object properties user vue user picks another object first object longer visible user view layer would want maintain reactivity anymore object user observes object object property changed function somewhere code update displayed user basic idea nt want maintain observers object displayed view layer currently cpu memory efficient way long term wanted represent fiddle posted earlier problem make object reactive observer stays even object really observed point might future course using memory nothing featuremethod wanted ask way remove observers objects really observed point determine objects observer part instances without deleting object", "d": "12/2016"}, {"body": "suitable workaround would could determine unused observers object objects reference vue instance vuex somehow could delete unused observer properties unused getters setters freeing memory currently unused objects readd observers default object used would allow vue work extremely high amount data low memory consumption know cpu intensive dirty checking makeshift garbage collection still better nothing", "d": "12/2016"}, {"body": "might something like work essentially clone picked item using adding vm cloned object made reactive vue original data stays nonreactive also set watcher item changes mirrored original nonreactive object soon change picked item one reactive item become unreferenced garbagecollected quick amp dirty demo course improved eg using deepcloning work nested objectsarrays", "d": "12/2016"}, {"body": "thanks working issue know strictly applications specification issue workaround object reactive always strictly modified outer code like message server never inside vue instance even vue instance update method first must validated server message server update global items object thinking sure work setup vue instance create mixin every vue instance listens global update requests make object reactive vue instance instead making global reference reactive deep clone object global updates update global object reactive objects vue instance separately thing wanted stay away fact go away vue one source truth data model", "d": "12/2016"}, {"body": "latest comment mind proposal would clone old item new one gets swapped cloned object reactive properties take cloned object assign back array method maintain single source truth picked item made reactive inplace pick cloned back nonreactive item done", "d": "12/2016"}, {"body": "sirlancelot useful idea thanks contribution know cloned objects get observer property getter setters made tests works fine thing whats still missing way determine object part another instance safely reassign guess achieved application logic thing think kind dirty checking resigning observed objects user idle view layer empty official way developed developed think suitable workaround thanks help", "d": "12/2016"}, {"body": "items mutated simply call setting vue instances let vue know skip observing internals items basically solve memory issue even need mutate instead something like", "d": "12/2016"}, {"body": "items global object mutated time network source point chose vue cuz reactive objects mutations updates view anytime without knowing listening object mutations project wanted achieve followings get global data set variable show data view layer object mutated global data set view layer must automatically updated representing mutations without code vue manager achieve goals without problem expects increase memory use using app ca nt freeze object clone make reactive cuz need original object reference get reactive view update global object mutated updated fiddle demonstrate idea", "d": "12/2016"}, {"body": "close turned support thread bug report feature request feel free continue conversation open another issue leads actual issue", "d": "12/2016"}, {"body": "stated actual feature request request api determine reactive object part vue instance examples provided use cases provide better understanding would requested feature helps achieve create new issue specific feature request thanks help far", "d": "12/2016"}, {"body": "create new issue specific feature request yes please guarantees weither feasable though", "d": "12/2016"}, {"body": "kailniris thinking whether worth adding api dug old issue let continue discussion going jsfiddle based sirlancelot evan suggestion concluded maybe make store object reactive let notify view updates instead making items reactive use skip adding watchers item performance gain jsfiddle therefore nt necessary", "d": "12/2016"}, {"body": "thanks working issue idea fascinating reactivity works objects extra memory use compared plain objects guess work vuex store suitable multiple global reactive data sets try idea real data set write report thanks", "d": "12/2016"}, {"body": "kailniris updates", "d": "12/2016"}, {"body": "fnlctrl sorry keep waiting still making tests working implement pattern code respond back asap results", "d": "12/2016"}, {"body": "sorry late replay managed implement pattern made lots tests everything works fine looks like good solution issue think feature request unnecessary close maybe pattern added docs anyway big thanks help", "d": "12/2016"}, {"body": "glad help", "d": "12/2016"}, {"body": "saves almost memory big nested array", "d": "8/2017"}, {"body": "yes design vue nt remove duplicate static class names merges asis reality already know static class abc probably nt bind", "d": "12/2016"}, {"body": "fnlctrl using css modules think case class named component use inside want override style style loaded means style higher level choose use makes classname like contains generated classname fix issue level css selector duplicate classname way merge classname parent", "d": "12/2016"}, {"body": "use instead", "d": "12/2016"}, {"body": "sorry nt really understand use case seems overengineering really need bind static class twice component template parent template shown fiddle build system probably something wrong", "d": "12/2016"}, {"body": "duplicated class cause issues though nt seem actually matter", "d": "12/2016"}, {"body": "actually however problem using makes use consider two component vue basecompvue basecompvue base color red backgroundcolor green vue hellovue import basecomp basecompvue export default name hello components basecomp hello color blue backgroundcolor pink obviously want override style actually work style loaded", "d": "12/2016"}, {"body": "plugin replaces dom nodes vue managing breaking expected behavior predict behavior arbitrary party plugins", "d": "12/2016"}, {"body": "manually solved issue returning third argument component data rendertostring function component data server data variable bundlerendererrendertostring err html data gt hope future update see decision", "d": "12/2016"}, {"body": "meta information seo purposes nt need dynamically updated due services mechanisms query website page url index initial synchronous request means even update via js search engines likely index way probably wo nt ever indeterministic best way optimize seo purposes statically generate content consumption web crawlers manipulate head correct meta content server level fairly simple achieve injecting content head served document real exception user experience dynamically update title document true benefit updating title dynamically exceptions addthis require manipulation via client api ensure using client functionality content set preferred plugins manipulate head document generally fairly expensive purpose probably reason updating head completely regenerate meta data client side said certainly agenda provide information best practices comes common scenarios planning form cookbook provide sort information perhaps asking vue forum may aid may others could provide opinions subject", "d": "12/2016"}, {"body": "best advice concerned providing meta content head would assuming using state management able provide context server renderer add place holders html document template like create store seo updating correct data serving head document ect replace placeholders correct data using client base tools use store data update title necessary questions concerns let know", "d": "12/2016"}, {"body": "considering mine spa vue main use case probably spas think important reactively update title better user experience put sounds fairly straightforward also assume would nt take much integrate capability vue", "d": "12/2016"}, {"body": "user experience spa simple updating title route change however deterministic may needed update example use cases could dictate opening model window enough change title simple javascript inevitably creating abstraction vue change documents title much said using spa days becoming considered antipattern real focus meta data title ui experience simple even plugin would cater many use cases essentially wrapper change document title real problem dynamic meta information falls server level server level many tools used many template engines many variants thus suggestions advice simple solution best imho vue dictates setup officially stamp approval plugin prevent choice tooling scope vue thus problem domains subject tools use vue avoid creating friction", "d": "12/2016"}, {"body": "current project modal yes title metadata og image etc need change depending modal showing nt matter modal vue nt care modal declared child vuerouter like child able include required metadata changes component declaratively kinda vuemeta works said changing something like og image obviously important handled server vue nt offer clear way going saying spa antipattern well going current winds javascript trends change every months evan pointed recent tweet people like different things know wish programmers understood many projects spa makes sense", "d": "12/2016"}, {"body": "client depends og image meta data spa unlikely search engines facebook ect pick correct meta information dynamically updating update asyncronous clever search engines attempt relying requested data page loaded picked could explain use case detail understand tool like vuehead vuemeta makes sense application", "d": "12/2016"}, {"body": "yes said changing something like og image obviously important handled server important something like facebook gets information page nt matter client title theme two examples metadata matter client important handling metadata correct client server projects like vuemeta matter prevent many devs reinventing wheel declarative updating page metadata handled consistent way client serverside rendering example list items user clicks one want page details open want open instantly since already data spa awesome quickly need grab couple small bits data spa still awesome also want data page directlyaccessible ssr app user would get page prerendered correct page metadata user got instantly clicking list item case page also correct metadata applied one example", "d": "12/2016"}, {"body": "nt make sense vue excellent way keeping url sync navigational changes sensible way keep metadata sync along", "d": "12/2016"}, {"body": "blakenewman tell page user order display right data could give indepth response thanks", "d": "3/2017"}, {"body": "ok nt experience ssr since update page titles descriptions spa misused websites client regarding search engine relevance region working quite ok single file components following code", "d": "3/2017"}, {"body": "hi guys join conversation cause burning brains trying figure making news site fetches data wordpress api using wordpress client upload news naturally made dynamic routes name news post like wwwmywebsitecomnewsanewstitle problem one requirements users able copy paste link facebook get right preview news post image title short description first tried hands vuemeta plugin work see meta tags updating inspect page paste link facebook nt get preview news post lot googling guess facebook crawler wait site run javascript code update metadata reading og tags right information showing right solution problem use ssr render news posts another way zero experience ssr", "d": "7/2017"}, {"body": "leocirculo either use ssr prerendering since using wordpress prerendering may best way go", "d": "7/2017"}, {"body": "userland solution documented alternatively community solutions nuxt also handles", "d": "7/2017"}, {"body": "ruchern nt understand goal want reach", "d": "9/2017"}, {"body": "ability change title seems basic thus fundamental feature site developed php kind practice rewrite react done vue assess convenient would site book collection site change title dynamic page reflect book title page quite useful also need update section include title author publisher tags etc piece thought", "d": "11/2017"}, {"body": "changing title meta really important professional websites ca nt live without vue team take high priority make happen could simple feature made unavailable vue unbelievable", "d": "12/2017"}, {"body": "based create function reusable like documentation expose create mixin handle head title metas questions want know opinion code create new mixin name headjs looks like const cleanmetas gt return new promise resolve reject gt const items documentheadqueryselectorall meta const items typeof items object amp amp viewport findindex val gt valitems name amp amp items name documentheadremovechild items resolve const createmeta vm name attr gt const meta documentcreateelement meta metasetattribute name name const attr const attr const k metasetattribute k getstring vm k documentheadappendchild meta const getstring vm content gt return typeof content function contentcall vm content export const getmeta vm meta env gt typeof meta object return env return objectkeys meta map value gt return objectkeys meta value map key gt join map value gt join n else return meta const serverheadmixin created const head options head const title head title ssrcontexttitle const clientheadmixin mounted const vm export default processenvvueenv server serverheadmixin clientheadmixin add srcappjs import headmixin utilhead vuemixin headmixin set components like export default head title return thisname con meta name description content return el perfil de thisname name keywords content return thisname thislastname thisemail name twitter card content summary name twitter site content jqemprendedorve name twitter creator content jqemprendedorve name twitter url content name twitter title content return thisname creando vuejs ssr firebase name twitter description content modelo de vuejs ssr con firebase cloud function hosting name twitter image content asyncdata store route return promise action return storedispatch fetchitem computed display item store state item return storestateitems name return storestateitems nombre lastname return storestateitems apellido email return storestateitems correo data return data ssr created firebasedb ref data value snapshot gt consolelog snapshotval finally template look like nt know good practices first intent manage head tag first question really necessary show de meta client benefys anyway like title code recreate metas client like updated title opinion demo repo", "d": "12/2017"}, {"body": "nt like setting properties controllers created component set views project called vueheadful based headful generic library set meta tags javascript vueheadful supports setting title description keywords language properties use vueheadful register component js import vue vue import vueheadful vueheadful vuecomponent vueheadful vueheadful new vue configuration use component every views", "d": "1/2018"}, {"body": "johnleider issue believe unclear pre render work text site prerendering nt appropriate userspecific content route like myprofile prerendering wo nt effective content page different depending looking sometimes update routing strategy compensate eg users usernameprofile public profiles otherwise risk leaking private information world says appropriate user specific content sometimes update routing strategy", "d": "1/2018"}, {"body": "got answer use plugins vueheadful prerenderspaplugin troxler sorry downvote man information provided already vueheadful plugin problem rendering spas crawlers please check", "d": "2/2018"}, {"body": "downvoting post first asking help seems rather impolite even invest time help get return downvote anyway vueheadful sets title javascript google search engines support running scripts indexing page caveats google crawl tool mean fetch google part google search console yes button click fetch fetch render might want look help article use fetch google websites fetch fetches specified url site displays http response request run associated resources images scripts page fetch render fetches specified url site displays http response also renders page according specified platform desktop smartphone operation requests runs resources page images scripts", "d": "2/2018"}, {"body": "okay browsers fire change event item loses focus using input event seems working better", "d": "12/2016"}, {"body": "luqmanrom yes", "d": "12/2016"}, {"body": "relevant threads", "d": "12/2016"}, {"body": "roadmap ideas improve probably sat dec denis karabaza notifications githubcom wrote relevant threads nodejsnode nodejsnode receiving subscribed thread reply email directly view github mute thread", "d": "12/2016"}, {"body": "great waiting vue suitable use ssr bundle render production environment release date vue roadmap", "d": "12/2016"}, {"body": "implemented ship", "d": "2/2017"}, {"body": "stay tuned detailed writeup still getting writeup mentioned release notes reason could nt get working new bundle even though old bundle works fine", "d": "3/2017"}, {"body": "jazoom need use enable sourcemaps server bundle", "d": "3/2017"}, {"body": "simplesmiler meant changed using build nt work", "d": "3/2017"}, {"body": "first added enable source map output documented clearly output bundle file still get unclear error node output expected", "d": "4/2017"}, {"body": "hi thanks filling issue caused vue dom patching strategy described docs default mode efficient suitable list render output rely child component state temporary dom state eg form input values simply fix adding attribute element also recommended provide key vfor whenever possible unless iterated dom content simple intentionally relying default behavior performance gains", "d": "12/2016"}, {"body": "since using vuex store serve caching layer fetch action send ajax request corresponding data already store inlined hydrated server render", "d": "12/2016"}, {"body": "hi thanks filling issue value object vmodel passes reference child changes child makes affect parent immediately actually nt want make affect parent immediately mutating prop object directly child change prop done designed used objects yes parent state gets replaced new fresh object case using local cloned value right approach serves temporary state child flushed parent state changes triggered therefore simply removing inside watcher elsewhere want update parent state flush local state way still watch react changes also really think maybe consider breaking component deep object multiple components modifying primitive values simple objects like makes easier maintain reason", "d": "12/2016"}, {"body": "really think maybe consider breaking component value deep object multiple components modifying primitive values simple objects like makes easier maintain reason yes consider component holds primitive values input vmodel components well end object prop gets mutated many examples simple inputs value object distance units time position picker select multiple values like matter car seems able encapsulate inputs reusable component use simply simple effective easy reason problem issue trying raise vue js tried fix antipattern instead gave us extremely easy way different antipattern vmodel exists create input components right prop passed vmodel intended modified right reason pass things via vmodel vue js nt use immutable data passes everything reference modifying prop passed antipattern means attempt mutate prop inside child component modify value prop got intention modifying anti pattern make sense guess nt understand vmodel exists without deepcopying passed value since way intended without deep copying first", "d": "12/2016"}, {"body": "way look passing argument value reference prop inside method example nt make sense thinking someone privy internals vue seems logicalsafe modify prop object property since parent component component depends object state react accordingly changing object child component would imply somehow updating references magically would asume one motivations data downactions paradigm probably would nt worry deep cloning prop object using every change", "d": "12/2016"}, {"body": "teleclimber read docs several times find way around issue", "d": "12/2016"}, {"body": "teleclimber guessing clone deepequal npm packages", "d": "2/2017"}, {"body": "see example supposed work objects", "d": "2/2017"}, {"body": "correct wrong believe using conceptually akin passing arguments function return value result calculation based arguments argument component function essentially returning new value caller parent component course functions need return value operate procedure simply modify program state way possibly even function arguments could distinction using plain since javascript uses callbysharing evaluation strategy function arguments possible modify arguments properties inside function changes visible outside without returning anything eg would nt normally personally nt find necessary clone prop every time change something happen many ways many times introduces complexity since eventually use watchers handle emits dry way start problems teleclimber mentioned possible performance issues benefit imo even benefit correctness true answer might probably appropriate objects primitive values objects use", "d": "2/2017"}, {"body": "rhyek fyi writing function returns value avoid mutating object passed possible function mutates arguments produces side effects called thus always impure makes harder reason js function one obj return obj someprop somevalue function two obj objsomeprop somevalue var newvalue one oldvalue side effects two oldvalue side effect oldvalue mutated point calling cause unexpected behavior parts code logic depends assumes changed benefits cloning object making values immutable similar primitive values like numbers strings sticking practice allows reason behaviors consistently matter data type value pass never gets mutated update happens new value gets sent back replaces old value also means nt need use deep watchers consistency clear benefit making things easier reason cloning objects complex means better spread operators arrays provide immutable methods already performance updates low frequency operations compared parts framework practically negligible said free ignore advice insist", "d": "2/2017"}, {"body": "understand reasoning believe sound point calling two oldvalue cause unexpected behavior parts code logic depends oldvalue assumes changed true nt really happen vuejs land since code always using newest version object anyways sticking practice allows reason vmodel behaviors consistently matter data type real reason cloning prop objects cognitive consistency anyways thank comments", "d": "2/2017"}, {"body": "thoughts deep vs shallow copy context", "d": "2/2017"}, {"body": "rhyek consider misuse used object levels deep essentially becomes shared state use proper state management pattern instead", "d": "2/2017"}, {"body": "consider misuse vmodel used object levels deep essentially becomes shared state use proper state management pattern instead case date time multiple select box scenario see two subcomponents one date one time could even take step say select boxes custom component would handle situation", "d": "2/2017"}, {"body": "also interested recommended pattern work component library common compose reusable components complex reusable components", "d": "2/2017"}, {"body": "leevigraham nt think related components objects value reading correctly simply allows customizing property event name", "d": "2/2017"}, {"body": "use vmodel two level deep nested component eg html object js template hour two level deep vmodel please check whether right way propagate emit template first template way parent", "d": "4/2017"}, {"body": "seems like common enough use case justify kind builtin helper", "d": "12/2017"}, {"body": "google brought thread searching better understand propsemitter pattern particularly unsure emitting event using deeply nested component top think might cleanest solution found used parent follows could also computed property defined manner within component setter getter operations use computed property instead prop makes updating emitting change parent easy object might worthwhile creating computed properties well example represented person properties allows used changes propagate way eg still experimenting seems consistent approach could find codepen", "d": "4/2018"}, {"body": "specifically expressed builtin constructs worst case really express anything render function", "d": "12/2016"}, {"body": "need static content depending user input way need dynamic content eg event bindings check functions also either string name component component iirc enough care generate components dynamically advise explore simpler options first", "d": "12/2016"}, {"body": "closing since nt think feature request fulfilled believe render functions sufficient arbitrarily complex use cases feel free continue discussion though", "d": "12/2016"}, {"body": "sure understand function right function generate new dom elements drop elements dom async way example consider vue instance already rendered mounted element button user inputs number click button seconds new element appended button number shown use input another click waiting another n seconds see another appended repeated many times prevue time easily via dom apis achieve edit know done pushing new numbers array using template new elements appended structure therefore expressed hmmm might able define possible structures new elements many components combine", "d": "12/2016"}, {"body": "idea know ahead time possible types content yes everything expressed templates render functions keeps component render output declarative predictable nt follow chains imperative code figure something happening nt know content use something like html careful xss though", "d": "12/2016"}, {"body": "also imperatively append empty element rendered vue wo nt throw away appended rerenders technically wanted recommended", "d": "12/2016"}, {"body": "got many thanks simplesmiler", "d": "12/2016"}, {"body": "heyup want able codepen popup test asked react developers stack overflow rather giving sort direction go say noo ca nt think like jquery anymore well let tell thinking like javascript want able put element anywhere page want nicer version script site code github account vhtml look like shows promise thank advance vue type people", "d": "2/2018"}, {"body": "cents alternative could", "d": "12/2016"}, {"body": "would great sub elements might transition delay preference would something flexible like posva suggested little full control steps", "d": "1/2017"}, {"body": "akryum example implies bug detection nt case since possible check target event bug", "d": "1/2017"}, {"body": "problem nested transitions detected nt think bug", "d": "1/2017"}, {"body": "okay see animations events transitions way determine nested ones finished explicit value probably best way", "d": "1/2017"}, {"body": "perhaps hack would transition nonchanging property separately force duration", "d": "1/2017"}, {"body": "currently still hack", "d": "1/2017"}, {"body": "certainly", "d": "1/2017"}, {"body": "closed via", "d": "2/2017"}, {"body": "vue warnings thrown errors spy assert vue warnings", "d": "12/2016"}, {"body": "managed achieve spying suggested fails prop passed gt const errors const olderror consoleerror eslintdisableline use", "d": "3/2017"}, {"body": "please move issue also reproduce issue make reproduction based fiddle", "d": "12/2016"}, {"body": "mistake yui compressor part illegal use keywords identifiers property names accessors reference mdn reserved word usage deal yui compressor quote keywords", "d": "12/2016"}, {"body": "ok thank hint may added docs default confusing property name anyway even allowed let return used instead", "d": "12/2016"}, {"body": "default confusing property name anyway feel way used define default value use value provided seems fitting descriptive", "d": "12/2016"}, {"body": "may like reuse reserved words absolutely necessary purpose define default value use value provided name defaultvalue make also syntaxhighlighter yui happy state somewhere notation fine also props default foo unfortunately seems clear frontend people least circles define props js object notation style obviuos comment simplesmiler admit though filing issue thanks simplesmiler", "d": "12/2016"}, {"body": "case conforming standard yui cater party tool fails comply standard", "d": "12/2016"}, {"body": "point using reserved words allowed context matter personal taste want argue decision use stick wish luckily workaround people work yui fine thanks", "d": "12/2016"}, {"body": "workaround people even workaround fully standard way define objects js correct", "d": "12/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "12/2016"}, {"body": "warning telling use body good practice let vue compile needed instead entire page inbrowser compile process completely eliminated precompile templates using really concerned performance make sure measure performance production build need information stack trace helpful really need full trace see bottleneck also need template compiling able diagnose problem", "d": "12/2016"}, {"body": "thanks reply use new vue div contains information good practice currently need vue directives lazyload difference big dev production build refactored nunjucks template multiple vue components resolved crash problem performance still looks good especially problematic phone may problem particular version ios safari safari problematic hope chrome timeline data helpful", "d": "12/2016"}, {"body": "hi maggiehe thanks reporting perused timeline data think irrelevant chrome extension javascript let ignore two main performance bottlenecks application vue template compilation parsing templates costs chrome probably desktop version guess seems quite large html corpse hot function compilation called repeatedly execution time naturally piles quite hard optimize without precompilation even squeeze last bit performance parsing performance gain might still fails match fattening dom size recommend consider precompilation selectively compiles part static page vue instance creation promising optimizing see graph time consumed largely composed series yellow block graph native dom call need vue directives lazyload might directives slow nt know specific situation would recommend extract directives vanilla javascript module provide callbacks notify vue instances hope helpful", "d": "12/2016"}, {"body": "thanks help resolved problem precompilation seems directives affect performance still frequent setattr updateattr operations pure static html want close issue tested large page another framework two frameworks order magnitude build time although case vue spent time far enough used measure performance", "d": "12/2016"}, {"body": "using variable later simply change", "d": "12/2016"}, {"body": "pass el instantiation time extension time", "d": "12/2016"}, {"body": "follow issue reporting guidelines provide enough information issue seems mount vue instance body element recommended could refer could bellow", "d": "12/2016"}, {"body": "use vue warning", "d": "12/2016"}, {"body": "try close divs properly", "d": "4/2018"}, {"body": "specific properly reused ie replaced newlycreated elements indeed move operations necessary however based chrome timeline tracing seems moving similar renderingpainting costs would nt really consider failing maybe improved experiencing visible slow app complex item actual list", "d": "12/2016"}, {"body": "reasonably modern laptop ca nt see difference think see slight difference asus tablet one four years old use case virtual scroller shows couple rows viewport scrolling rows inserted deleted scroll view row li element contains divs img jpeg text trying optimize list rendering component noticed issue thought small bug algorithm reported hard fix correctly impossible fix without performance impact please nt bother thanks quick reply mike", "d": "12/2016"}, {"body": "also implementing virtual scroll feature came across exact problem unfortunately problem seems hurt performance quite lot smooth scrolling eg macbook pro touchpad scrolling upwards buttery smooth scrolling downwards creates microstutter caused many dom updates capture shows problem well", "d": "1/2018"}, {"body": "supported", "d": "12/2016"}, {"body": "hi understanding tests supported transition component contains keepalive component contains dynamic components use transition request use case component contains different transition", "d": "12/2016"}, {"body": "ah sorry yes right currently possible", "d": "12/2016"}, {"body": "thought use case nt think would make sense really component switched instead make custom transition component communicates shared event bus use component base make variations different views share communication channel long belong note fix released yet including fiddle", "d": "12/2016"}, {"body": "thanks checked fiddle see mode works nicely think found bug navigate first time route transition triggered think solution bit hacky sure transition mode would possible using suggested approach think move feature request given mentioned belong component btw awesome response times", "d": "12/2016"}, {"body": "hack implement internally logic would largely similar doubt done differently given new transition system works", "d": "12/2016"}, {"body": "another possible solution instead using inside child components write higherorder component wraps slot child different transitions based child nametype might release separate component later", "d": "12/2016"}, {"body": "thank suggestions provided fiddle make use havent found documentation point right direction understand accomplished highorder component would awesome greets", "d": "12/2016"}, {"body": "property specific component api callback line actually avoided prefixing underscore", "d": "12/2016"}, {"body": "oh everything makes sense one question first transition triggered line enter transition triggered event received triggered first leave transition try improve fiddle better example future reference", "d": "12/2016"}, {"body": "updated fiddle initial enter working", "d": "12/2016"}, {"body": "awesome thank", "d": "12/2016"}, {"body": "thing sorry keeping busy clarify wanted make transition events dispatched inverted dispatching enter animation completed", "d": "12/2016"}, {"body": "supposed used together transition purposes entail conflicting startending states regarding use case use outer component instead", "d": "12/2016"}, {"body": "appreciate feedback thanks suggestion", "d": "12/2016"}, {"body": "use together vue version", "d": "10/2017"}, {"body": "vue", "d": "10/2017"}, {"body": "got thanks", "d": "10/2017"}, {"body": "hi thanks filling issue first thing extended template message extended view came empty empty extending template properties already defined first nt know view came empty changing template working fine maybe connection issues jsfiddle would received error message open console believe described error accurately helpful enough let fix", "d": "12/2016"}, {"body": "want point example edited order work edit fnlctrl beat", "d": "12/2016"}, {"body": "nt connection issue jsfiddler way described exactly works issue closed immediately", "d": "12/2016"}, {"body": "nt issue displayed first screenshot changing template nt cause view came empty", "d": "12/2016"}, {"body": "mean thing nt render expecting render something come entire model ignoredskipped unless fully defined nt make sense complex viewtemplate design starts introducing elements one one many may optional even see anything unless everythign defined declare properties later nt included original tiny demo example subject reactivity rules vue change detection system details", "d": "12/2016"}, {"body": "come empty mean extended thing nt render expecting render undefined something meant empty nothing comes even value variable demo refuses show anything try use property model nt declared yet nt understand worls side definitely issues using jsfiddle", "d": "12/2016"}, {"body": "meant empty nothing comes even value message variable demo refuses show anything try use property model nt declared yet ca nt reproduce issue working fine shown first screenshot jsfiddle provide info browsersystem", "d": "12/2016"}, {"body": "seeing errors console case", "d": "12/2016"}, {"body": "ok see problem default browser chrome switched latest chrome started working expected minimum chrome version support nt old", "d": "12/2016"}, {"body": "nt know failed chrome anyway able define data properties later development eliminate messages production work perfectly version chrome issue closed immediately respond fast new issues close issues appear us nonissues immediately also vue lowest issues count among major frameworks nt mean discourage discussions please feel free definitely reopen issues evidence provided later indeed issue", "d": "12/2016"}, {"body": "ok case still thrown browser compatibility backlog wo nt last one run", "d": "12/2016"}, {"body": "missing root properties case considered error resolved deploying app production assure browser compatibility production sorry wo nt main concern support old browsers development", "d": "12/2016"}, {"body": "something nt work dev perhaps work production somehow invites little trust surely cause issues testing", "d": "12/2016"}, {"body": "well reasoning explained follows reproduce behaviour currently supported browsers latestest autoupdated versions limited time resources reproduce problems possible system browser compbiantions chrome version version seem problem maybe combination extension currently market share error experience bug using vue intended happens use vue way explicitly error appear dev warning would appear place danger making way production take account seems worth limited resources try hunt bug reproducible us may happen users someone pushed wrong code production", "d": "12/2016"}, {"body": "issue assumption percentage users use chrome older much higher work banking industry know fact", "d": "12/2016"}, {"body": "latest npapi version", "d": "12/2016"}, {"body": "well would assume amount people develop chrome lt would small real issue developers use versions might still confirmed simpy chrome version issue see white screen development instead nice warning use nonexisting data property template neverever make production issue assumption percentage users use chrome older much higher work banking industry know fact specifically older yes still significantly nt even know weither affected failed errormessage market share across industrie customers may higher sure look general market", "d": "12/2016"}, {"body": "record work huge international bank chrome currently enforced default everyone without allowing upgrade stumbled upon issue makes care little browser usage percentage", "d": "12/2016"}, {"body": "makes care little browser usage percentage understand also understand prioritize global user marketshares especially issue lowimpact happens developers make mistake bug feature could appear users production even though dev followed vue api big problem always open prs", "d": "12/2016"}, {"body": "security related bugs chromium since version astonished scott", "d": "12/2016"}, {"body": "yes different angular intentional required explicitly declare rootlevel reactive properties upfront benefits serves schema component state maintaining later looking component definition able instantly see properties available simply dynamically add new properties random places would maintenance nightmare like maintaining database without schema results predictable behavior particular paired typechecking systems avoids excessive rerender might caused adding rootlevel properties finally developer able choose browser develop chrome browser use job seems like terrible decision companies part customers company use chrome probably", "d": "12/2016"}, {"body": "thank responding presently longer bound old browser makes darn good experience framework keep good work smile", "d": "6/2017"}, {"body": "please check console warnings vue refusing render solution simply nt put style inside html body fontsize message var app new vue el app data message hello world", "d": "12/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks", "d": "12/2016"}, {"body": "qianoop required boolean attribute according specification presence boolean attribute element represents true value absence attribute represents false value attribute present value must either empty string value ascii caseinsensitive match attribute canonical name leading trailing whitespace values true false allowed boolean attributes represent false value attribute omitted altogether could use custome attribute like", "d": "12/2016"}, {"body": "bug outdated comment feel free submit pr fix though", "d": "12/2016"}, {"body": "hi thanks filling issue supported though officially recommended noncomponent vue instances used vuex manage state also eventhub pattern global event hub", "d": "12/2016"}, {"body": "thank", "d": "12/2016"}, {"body": "msg side effect every time component renders triggers new render ending infinite loop never use expression side effects template event handlers", "d": "12/2016"}, {"body": "oh yeah right thank much", "d": "12/2016"}, {"body": "filters work mustache tags vbind", "d": "11/2016"}, {"body": "implement highlight simple filter wrapped found text spans", "d": "2/2017"}, {"body": "slynet put", "d": "2/2017"}, {"body": "filter outputs html use computed property better way", "d": "2/2017"}, {"body": "computed properties best way get automatic caching", "d": "2/2017"}, {"body": "use", "d": "3/2017"}, {"body": "fridus works indeed looks like undocumented private api", "d": "3/2017"}, {"body": "fridus works fine thx", "d": "3/2017"}, {"body": "fridus safely rely options passed vue constructor creating vm component new vue point javascript", "d": "3/2017"}, {"body": "fridus really like way nasty mustache tags needed thanks", "d": "8/2017"}, {"body": "solution ugly pipe need orthogonal seems language design bug", "d": "3/2018"}, {"body": "", "d": "11/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "11/2016"}, {"body": "valid svg tag created svg namespace still rendered visible want explicitly mark ignored use", "d": "11/2016"}, {"body": "people still use element deprecated", "d": "11/2016"}, {"body": "part elements php xdebug uses markup would avoided thanks", "d": "11/2016"}, {"body": "related commit maybe limited mouse events common usage keyboard events handling cc", "d": "11/2016"}, {"body": "primary reason allowing key events would break following although usage seems rare would still technically breaking change", "d": "11/2016"}, {"body": "may need document update doc", "d": "11/2016"}, {"body": "alternatively add deprecation warning user attempts define builtin modifier custom keycode alias", "d": "11/2016"}, {"body": "think would better considering common usage keyboad event try make update", "d": "11/2016"}, {"body": "allesan currently might need deal special key event handle like vue internally", "d": "11/2016"}, {"body": "nt noticed limitation accidentally modified events document adding keyboard events note meta key samples studied codes release commit list modifying document feel sorry", "d": "11/2016"}, {"body": "defcc thanks works", "d": "12/2016"}, {"body": "closed need update relative doc track vuejsorg issues", "d": "12/2016"}, {"body": "thanks mottokrosh looking current parses backgroundimage make pr fix", "d": "11/2016"}, {"body": "godawful report honest could please take time make usable reproduction actually demonstrates issue instead hoping someone", "d": "11/2016"}, {"body": "error report lacks basic information actual error messages thrown vue version node version webpack version version official cli template also pasted info actually runnable fails comply issue reporting guidelines might well add appropriate way open issues want issue respected please respect time maintainers well", "d": "11/2016"}, {"body": "thanks welovedesign seems set custome delimiters could please provide information issue", "d": "11/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "12/2016"}, {"body": "code using working without issue using ssr created windoweventsource windowesource new eventsource streamurl", "d": "11/2016"}, {"body": "sorry ca nt really tell much given current information especially error seems mostly code logic possible please provide reproduction", "d": "11/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "12/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks", "d": "11/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks", "d": "11/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks one engineers alibaba biggest ecommerce company china working project called weex renders components written vueinspired syntax native mobile ui soon vueinspired become vuepowered started official collaboration make vue actual javascript runtime framework weex enable users write universal vue components reused across web ios android collaboration still early stages big focus us stay tuned yes native like reactnative nativescript cordova", "d": "11/2016"}, {"body": "seems bug", "d": "11/2016"}, {"body": "closing since source issue dependency bug framework", "d": "11/2016"}, {"body": "trying file pr vue get build recommendation move forward", "d": "8/2017"}, {"body": "use class blockclass implement dynamic classes thank", "d": "11/2016"}, {"body": "sqal vue differentiate problem registered event handlers capturing mode removed mode meanwhile treat issue new feature rendering function enhancement since currently events like encouraged use rendering function seems necessity remove capturing listener virtual dom diff", "d": "11/2016"}, {"body": "kingmario yeah sorry deleted answer realized nt proper solution", "d": "11/2016"}, {"body": "sqal problem", "d": "11/2016"}, {"body": "fixed merging", "d": "11/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "11/2016"}, {"body": "temporary approach nt work based faulty assumption using props default function somebinding storeroot data different passing prop binding manually within templaterender first case nt reactive sets initial value latter reactive leaf value prop looks like efficient way work optimized manner immutable data structures entire root state atom change reference new one would use plain props pass manually dummy components cause changes detected leaf prop values since component nt reference root state detects need rerender upon change props", "d": "12/2016"}, {"body": "higher level think strategy brings lot complexity unknown perf gain cases rerendering single component extremely fast also computed properties never used eg falsy branch never evaluated example html computed inside code assume truthy current behavior preevaluating render throw turns undefined technically breaking change makes nogo ultimately vue reactivity system designed immutable data structures intrinsically relies mutations able efficiently determine components need rerender nt think worth shoehorn able play nicer immutable data structures", "d": "1/2017"}, {"body": "yea looking precomputing indeed bad idea subjected many unpredictabilities fact already figured solution userland get precomputation functionality comes immutable structures initially thought manually passing prop values best approach rather referencing data root always changes order get best performance mutable props outside component however mean manually managing lot properties passed unwieldy avoid hassle manually passing props outside component markupcreateelement calls figured using custom higher order component approach sort like mapstatetoprops used redux implementations would good get around higher order component call initial render pass end passing precomputed leafed props hocs precomputation thus props final values passes wrapped component remains wrapped component skip rendering haxevx thinking ifwhen needed low priority implement macro used detect something like bindings used substitute regular computed getter fields may optionally also create full method dynamism similiar redux implementations detected also mixin fields accessible fully typehintedtypechecked props within current haxe component class context also would link underlying implementation higher order component refer prototype functions generated class would transparent enduser ie need call manually macro even better haxe supports inlining higher order component run inlined code well component class static function marked higher order component reference whatever long return explicit objdecl mapstatetoprops note without expando props static typing determined explicit set computedstoreprop static getter functions macro pick fields ast know exactly properties reference hoc rendering short need hoc dynamically iterate keys given mapstatetoprops object macro already knows beforehand object keys use generally though performing virtual dom resolution components nt bad anyway stlli fast enough though sure case components complex markup case higher order component filter pass might come useful", "d": "1/2017"}, {"body": "listen events end rendering anything text plain element multiple nodes behavior unpredictable seems trying make slot container communicate slot child cases means two components coupled bydesign something like child listen event parent still open ideas improving ways slot parent child communicate events nt really sound like right direction", "d": "11/2016"}, {"body": "trying wake dead image want wrapper custom component shows loading spinner slot slot container spinner removed event emitted component occupies slot slot child parent template looks something like mounted function emit loadstatuschange template template txt usage something like order slot child fulfill parent interface emit event turn spinner inactive one argue using parentemit per suggestion complicates issue need take consideration life cycle components example slot child emits event mount slot container register earlier phases mount child mounted parent container case event fired missed parent passed hurdle find odd situation want remove spinner slot container usually mounted thats whole point need code trickery parent order see clear spinner event received parent component mounted long story short order get full slot power believe sort mechanism introduced js expect means short experience vue thoughts welcomed", "d": "7/2017"}, {"body": "guykatz case state driven data context component holds template also bind even loads data still", "d": "11/2017"}, {"body": "lot trouble see high use case least thought would personally card ui carries background inside card content uses cases background text however others would like use link changes background link also component html looks like according documentation work would could pass json make html component using however need access cms resizeimage functions ca nt targets instance rather component case even work firing instance seems impossible avoid using vue element use native javascript created guess nt exactly vue way edit made new component add native javascript mount mounted function var vm hacky vue wish way bubble event inside slot", "d": "5/2018"}, {"body": "holy shit toms mixing php vue punishable death code horribly unmaintainable", "d": "5/2018"}, {"body": "danonk hardly think punishable death fair justify using php cms nt rest api want use vue luckily nt deal code writing", "d": "5/2018"}, {"body": "facing problem currently creating modal contain form components modal contain tag call modal component like place loginform component inside modal component inside loginform component place anchor tag close modal log methods close emit close however button working whenever click button get error stuck already tried suggestion justineo make work idea", "d": "5/2018"}, {"body": "hi arrived exact problem think cases like listening events slot could good solution", "d": "6/2018"}, {"body": "could also use use case trying use one date picker components within data table component like date picker able emit event keyvalue pair data table update date pickers get slotted appropriate places data table component slot render anything restrict event listeners", "d": "6/2018"}, {"body": "exactly problem scoped slots help case modal parent get scoped slot closehandler property kind method close modal please adapt needs usecase uses uiv bootstrap modal javascript buttontext import modal btn uiv export default name modalbutton components modal btn props buttontext string title string data return open false methods closehandler function thisopen false form whatever inner container dispatch event handle outside close event case mine called productselected use component following allow wire parentchild components without unneeded coupling", "d": "6/2018"}, {"body": "solution similar aggrosoft vue expects child accepts patchild prop function", "d": "6/2018"}, {"body": "really amazing many solutions given many developers wan na give solution like mentioned several components handle modal listed modal component modalvue form background component formbackgroundvue login form content component loginvue navbar component navbarvue highest parent inside navbar component called modal closemodal methods login component methods closemodal thisismodalvisible false inside modal component tag contain anything form paragraph etc need modal effect component listen methods inside login component different one navbar component created trigger inside navbar component created closemodal function message emit close inside login component button contains click method trigger inisde modal component summarized like modal component listen inside login component modal component trigger inside navbar component works like charm solution aggrosoft used say method better method try another modal something else report result soon", "d": "7/2018"}, {"body": "thanks callumacrae trace issue documentation issue", "d": "11/2016"}, {"body": "expecting binding updated composition intentional decision update state end composition languages like chinese people composing pinyin fill input lot useless text particularly important update state composition doubt makes big difference ux perspective", "d": "11/2016"}, {"body": "prefer updating composition korean understand design decision react opposite issue change event fires many times inputing chinese characters important change guide inform binding update composition guide default syncs input data event people wants update composition use event without", "d": "11/2016"}, {"body": "choyongjoon makes sense tracking thanks suggestion", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks props mutated inside components", "d": "11/2016"}, {"body": "may related vueclasscomponent cc ktsn mon nov eduardo san martin morote lt notifications githubcom wrote please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks props mutated inside components receiving subscribed thread reply email directly view github mute thread", "d": "11/2016"}, {"body": "hmm reproduce herozzsage please provide reproduction warning persists even actually nt mutate props", "d": "11/2016"}, {"body": "ktsn received props directlyhowever use official documents render invalid", "d": "12/2016"}, {"body": "provide reproduction example repository reproduce", "d": "12/2016"}, {"body": "paragraph provide link also please file documentation issues vuejsvuejsorg repo instead", "d": "11/2016"}, {"body": "component take inspiration use directly webpack", "d": "12/2016"}, {"body": "closing doable userland akryum already implemented one", "d": "1/2017"}, {"body": "example complete guess use slice make sure working copy original array explained", "d": "11/2016"}, {"body": "sqal thank much slice worked like charm thank", "d": "11/2016"}, {"body": "exact flexibility thinking please read tl dr extracting smaller modules come cost nontrivial one may sound right please think carefully implications time nt see clear benefits even significant enough justify cost", "d": "11/2016"}, {"body": "fair enough overcome cost community main issue sharing dev environment across multiple repos anyways interested trying integrate cyclejs look like good fit think already found way simply use function within cyclejs interact vdom vue first thought substituting vdom vue would easier reason separate module", "d": "11/2016"}, {"body": "create components via", "d": "11/2016"}, {"body": "well say unlikely ever go level modularity vue simply designed type use case also using cyclejs vue together nt seem sound right cycle snabbdom custom dom driver sounds like right match simply want use rx vue vuerx allows write pretty cyclelike code", "d": "11/2016"}, {"body": "hi thanks filling issue seems strange define nested data initially within component ca nt add later shown since already defined initial nested data proper way setting property example would reason removing path support requires proper path parser support things like bloats code rare use case also really avoided simply using example", "d": "11/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "11/2016"}, {"body": "nt use runtime build time full build import vue vuedistvuejs since tools party libraries may import vue well may cause app load runtime standalone builds time lead errors warning official doc effectively means adding lien webpack config resolve vue full build change require vuedistvuejs vue adding render function entry component", "d": "11/2016"}, {"body": "condition branches moved array however codegen mutated array generating branches ended empty renamed avoided mutation cc defcc future avoid mutating ast codegen", "d": "11/2016"}, {"body": "ok got", "d": "11/2016"}, {"body": "try using npm issue belongs believe template using please see error persists open issue cleaner output possible thanks", "d": "11/2016"}, {"body": "posva sorry late installed although still problem resolved thanks much", "d": "11/2016"}, {"body": "jsfiddle link seems wrong", "d": "11/2016"}, {"body": "thu nov evan notifications githubcom wrote jsfiddle link seems wrong receiving authored thread reply email directly view github mute thread", "d": "11/2016"}, {"body": "wrong repository already told forum open issue githubcomvuejsvuejsorg", "d": "11/2016"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "11/2016"}, {"body": "name literal never changes watcher called", "d": "11/2016"}, {"body": "would possible create littel repository us clone would helpful", "d": "11/2016"}, {"body": "reproduce exact setup please reopen actual reproduction", "d": "11/2016"}, {"body": "created repository successfully reproduced issue machine really weird ps use node nt know matters information", "d": "11/2016"}, {"body": "click function control adding attrs magically feature implemented", "d": "11/2016"}, {"body": "wow wow trapped inside particular way thinking missed obvious solution thank posva", "d": "11/2016"}, {"body": "pug expands", "d": "11/2016"}, {"body": "fact working correctly dom gets parsed browser literal emoji vue access thus vue sees literal emoji template outputs emoji also entity encoding change anything case script parsed browser thus vue sees literal template outputs entity encoding becomes literal would displayed parsed browser", "d": "11/2016"}, {"body": "component multiple root element vue requires exactly one root element component use development build minified build get error messages", "d": "11/2016"}, {"body": "working expected case need set whole object ready", "d": "11/2016"}, {"body": "provide repro", "d": "11/2016"}, {"body": "vue vue node pass pass node pass get warn fail travisci log log strange maybe jsdom problem", "d": "11/2016"}, {"body": "one thing noticed jsdom node instead node makes vue think node rather browser sure tests passing though adjusted browser detection could try building branch see tests would pass node", "d": "11/2016"}, {"body": "detection working great tests would passed node thanks evan", "d": "11/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "11/2016"}, {"body": "hey tzurbaev looking solution achieve", "d": "4/2018"}, {"body": "bug fixed need update vue still old version", "d": "4/2018"}, {"body": "thanks known issue working", "d": "11/2016"}, {"body": "confirm warnings gone", "d": "11/2016"}, {"body": "vue packages version mismatch vue vueserverrenderer build vue publishing npm", "d": "11/2016"}, {"body": "see", "d": "11/2016"}, {"body": "version mismatch", "d": "11/2016"}, {"body": "version mistmatch error vue vuetemplatecompiler", "d": "11/2016"}, {"body": "ah saucelabs keeps disconnecting today push manual release missed part", "d": "11/2016"}, {"body": "version mismatch fix", "d": "11/2016"}, {"body": "working perfectly rock", "d": "11/2016"}, {"body": "vueesmjs vue warn vue constructor called keyword", "d": "10/2017"}, {"body": "elaborate bit case curious main case think subcomponents like menu gt menuitem although apply bem methodology situation stopping using css methodology like bem specific case", "d": "11/2016"}, {"body": "components one prefer passing props change component behavior third party component guess could see use case since ca nt edit source intuitively", "d": "11/2016"}, {"body": "lets take example menu list child menuitem components see code snippet different components use menuitem components page want style menuitems differently page using global styles scoped menu component parent also change style menu item page unless unique identifier used scope styles nothing stopping using bem use scoped styles solve problem vmenumain parent component import vmenuitem menuitem export default name vmenumain components vmenuitem data return menulist home menu location menu border solid black overwrite child component css menuitem background red important child component vmenuitem name export default name menuitem props name menuitem background blue", "d": "11/2016"}, {"body": "going example would also like avoid using rule vue allowed declare child component style want overwrite injected specific block child components style became important order parent component parent styles injected child component styles head document allow easily overwrite child components style styles overwrite child component", "d": "11/2016"}, {"body": "nothing stopping using bem use scoped styles solve problem bem scoped style solve different problems scoped allows style encapsulation bem methodology would preferred another example menumenuitem using classes override style works fine need use vue menuitemvue item color blue vue menuvue red item color red course add rule component using menu instead menu", "d": "11/2016"}, {"body": "yes example work first child component menuitem another component inside called ca nt modify style menu since contain menu unique id attribute vue style matches button component style thats declared button component angular using deep selector menu component scoped styles parent menu component buttoncolor selector matches top parent menu used", "d": "11/2016"}, {"body": "tested worked well curious different case solved css methodology", "d": "11/2016"}, {"body": "try components posted example components wanted style button component deeply nested component could nt overwrite scoped style root component maybe something wrong using scoped styles avoiding global styles purpose", "d": "11/2016"}, {"body": "agaripian yes tested", "d": "11/2016"}, {"body": "posva example working using component importing button root component example button imported component nested inside level component example", "d": "11/2016"}, {"body": "still works case adding without making sure specificity selector higher adding one class enough letting menu items aside interested different case solved css methodology", "d": "11/2016"}, {"body": "working example put together existing websites functionality converted vue components used global style root component work scoped styles uses global styles overwrite children overwrites styles overwrite background color overwrite background color adds unique id attribute selector component using manually added unique id attribute style selector solved problem well scoped properly also automatically makes selector specific avoid important see blue highlight want avoid using global styles truly scope css probably find another way adding specific css selector complicates development debugging", "d": "11/2016"}, {"body": "moving", "d": "2/2017"}, {"body": "error console nt working", "d": "11/2016"}, {"body": "closed favour nt open new issue time please update existing one instead", "d": "11/2016"}, {"body": "image example error consolelog item delete whe delete item throws error", "d": "11/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "11/2016"}, {"body": "dont know live repro issue due especific env dev project tell options show", "d": "11/2016"}, {"body": "sorry need code look nt need include everything project minimum code needed reproduce error case sample list data procedures used remove item etc", "d": "11/2016"}, {"body": "ok post data structure methods data object title go shopping items object title go read object title go vacations inside items object item diet coke object item coke", "d": "11/2016"}, {"body": "delete method", "d": "11/2016"}, {"body": "view", "d": "11/2016"}, {"body": "im using laravel blade template vuejs vueresponse", "d": "11/2016"}, {"body": "sorry ca nt really deduce going snippets like show error expanded stack trace show line vue source code error thrown click line number right", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "deletes first time rerenders view delete second time throws error wil test complex data", "d": "11/2016"}, {"body": "chrome throws", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "krsrk something like jsfiddle something missing could update details", "d": "11/2016"}, {"body": "theory error means returned array contains value sure could possibly happen though", "d": "11/2016"}, {"body": "weird dont know data structure technologies used like laravel materialize css already run jsfiddle todos data works great project fails error im trying delete", "d": "11/2016"}, {"body": "notice delete items outside collapsible plugin materialize css doesnt throw error", "d": "11/2016"}, {"body": "inside collapsible plugin", "d": "11/2016"}, {"body": "diggin issue found trouble getting data plugin autocomplete", "d": "11/2016"}, {"body": "krsrk found trouble trouble second close issue", "d": "11/2016"}, {"body": "kind wrapped vue component doesnt work well adds data vue instance prop delete throws vnode undefined solution wrapp plugin", "d": "11/2016"}, {"body": "uncaught promise typeerror read property length undefined dont know error please help", "d": "8/2017"}, {"body": "sorry seen template compiler regression issue guess could caught someone midst fixing", "d": "11/2016"}, {"body": "likely bump nested dependency anyway long make sure version fine", "d": "11/2016"}, {"body": "unfortunately guarantee compatibility arbitrary party frameworks regardless ca nt really help without information fails errors get", "d": "11/2016"}, {"body": "entirely sure cause likely vue observer converts object properties reactive ones ie ignores prototype properties technically data properties model objects properties able work", "d": "11/2016"}, {"body": "thanks went documentation found paragraph sometimes may want assign number properties existing object example using objectassign extend however new properties added object trigger changes cases create fresh object properties original object mixin object exactly problem close issue since see solve thanks", "d": "11/2016"}, {"body": "close issue since see solve xpepermint share way solved problem thanks", "d": "4/2017"}, {"body": "maximelebreton remember managed make work somehow think setting attributes manually within observer change end decided change component design nonnested way projects nt nested components eg table component head body row single file", "d": "4/2017"}, {"body": "computed properties behaviour working", "d": "9/2017"}, {"body": "mikeevstropov computed nt convert returned value needs reactive returned", "d": "9/2017"}, {"body": "thank reply", "d": "9/2017"}, {"body": "confirm exactly issue since update yesterday also happens", "d": "11/2016"}, {"body": "confirmed spending afternoon find bug get vue amp vuetemplatecompiler reverted order work", "d": "11/2016"}, {"body": "thanks looking", "d": "11/2016"}, {"body": "also seeing strange behavior updating dialog component working code working previous version export default name modal props size type string default small type type string default closeable type boolean default true isscroll type boolean default false data return id modal mathrandom showbackdrop false showmodal false mounted documentbodyclasslistadd dimmable methods clickcontent event eventstoppropagation open thisshowbackdrop true documentbodyclasslistadd dimmed settimeout gt thisshowmodal true settimeout gt elfirstchildstyletop documentbodyoffsetheight elfirstchildoffsetheight px close thisshowmodal false settimeout gt thisshowbackdrop false documentbodyclasslistremove dimmed closemodal thiscloseable return thisclose modal header background important scaleenteractive animation scalein scaleleaveactive animation scaleout fadeenteractive animation fadein fadeleaveactive animation fadeout", "d": "11/2016"}, {"body": "ansarizafar roll back previous vue version moment looking fixing release patch asap", "d": "11/2016"}, {"body": "posva already done thanks", "d": "11/2016"}, {"body": "closing favor since seem issue", "d": "11/2016"}, {"body": "seems problem looking", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "believe problem original author understand vue reactivity system one wants update property heshe must assign new value increment operator simply supported vue code problem author change side side effect getter bad practice thanks effort fix discussed pull request might introduce unpredictable breaking change user code roll migration guide breaking change", "d": "11/2016"}, {"body": "yes think scenario bad usage one use following code keep call anywhere else", "d": "11/2016"}, {"body": "stated elsewhere computed getters produce side effects", "d": "11/2016"}, {"body": "p sval empty vue inits app causes error update data mounted method displays correctly could take look lifecycle diagram", "d": "11/2016"}, {"body": "expected behavior template rendered first called p still empty array", "d": "11/2016"}, {"body": "update demo initial p created mounted nothing different expected behavior create new issues", "d": "11/2016"}, {"body": "thanks vue repository question react please go", "d": "11/2016"}, {"body": "herringtondarkholme issue nt care correct behavior vue may ignore issue", "d": "11/2016"}, {"body": "cc check almost virtual dom implementations issue", "d": "11/2016"}, {"body": "sorry misread link reopened would clearer paste direct link vue reproduction rather adding react entry point", "d": "11/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks course recursion scoped template", "d": "11/2016"}, {"body": "many thanks", "d": "11/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "11/2016"}, {"body": "future closing issues lack even basic information immediately please make sure actually read issue template opening one", "d": "11/2016"}, {"body": "standalone build browser build work expected", "d": "11/2016"}, {"body": "found error set delimiter main view components sorry mistake last question set delimiters components amp main vue thanks advance best regards max", "d": "11/2016"}, {"body": "use create new constructor desired options example historical context see", "d": "11/2016"}, {"body": "use global mixin", "d": "11/2016"}, {"body": "use global mixin would nt affect party components component expects default delimiter would nt break", "d": "11/2016"}, {"body": "yes would asked", "d": "11/2016"}, {"body": "thanks replies agree could lead potential issues external components another project example", "d": "11/2016"}, {"body": "updated fiddle need add von parent template", "d": "11/2016"}, {"body": "great thanks lot still think really clear guide new vue", "d": "11/2016"}, {"body": "close issue maybe could make improvement dynamic component docs follow", "d": "11/2016"}, {"body": "reproduce latest version think fixed ago likely using old version", "d": "11/2016"}, {"body": "use vue always concerned vue fix today update new still problem", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "11/2016"}, {"body": "put tages inside element mount main instance vue read content try use template main instance vue virtualdom treats scriptxtemplate like normal dom screws everthing simply moving template main element solved problem", "d": "11/2016"}, {"body": "man thanks spent days answer saved lt", "d": "4/2018"}, {"body": "reproduce latest version please upgrade vue version", "d": "11/2016"}, {"body": "hi thanks filling issue anything parent template case evaluated immediately parent scope accessing would throw error need add parent template", "d": "11/2016"}, {"body": "supports aot box means project scaffolded already using aot", "d": "11/2016"}, {"body": "thanks", "d": "11/2016"}, {"body": "possible mention documentation find reference", "d": "11/2016"}, {"body": "happens already specify type boolean closing supposing fr vue please tell otherwise reopen", "d": "11/2016"}, {"body": "thanks attrs fix", "d": "11/2016"}, {"body": "happens vueclasscomponent please open issue repo also please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem nessessary create repository us clone minimal reproduction repositories actual projects generally accepted thank", "d": "11/2016"}, {"body": "issue viewtemplatecompiler tho moved bug also caused vuerouter present obv move want tho", "d": "11/2016"}, {"body": "example repo", "d": "11/2016"}, {"body": "nt looked details suspect may handling properly nt see anything could cause problem cc ktsn", "d": "11/2016"}, {"body": "look", "d": "11/2016"}, {"body": "\u7528\u4e00\u4e2a function", "d": "11/2016"}, {"body": "\u6539\u6210initprops", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "yep supported next release actually depends changes core", "d": "11/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "11/2016"}, {"body": "closing due inactivity", "d": "11/2016"}, {"body": "hi thanks filling issue never using register events callback contains reference component instance prevents destroyed vue callback run instances including ones supposed destroyed", "d": "11/2016"}, {"body": "fnlctrl first thank still ca nt understand according answer component data include velse component change use position component data changed new demo demo addition broadcast something child component parent issue", "d": "11/2016"}, {"body": "according answer component data include velse component change use parent said said callback holds reference component instance prevent destroyed vue cause memory leak see fiddle swap components twice change data notice callback run one time supposedtobedestroyed components addition broadcast something use event hub use vuex usage questions please use dedicated gitter forum thanks", "d": "11/2016"}, {"body": "\u9519\u8bef\u4e0d\u662f\u8bf4\u7684\u5f88\u6e05\u695a\u4e86\u5417 vue\u548cvuetemplatecompiler\u7684\u7248\u672c\u4e0d\u5339\u914d \u628a\u8fd9\u4e24\u4e2a\u7248\u672c\u6539\u6210\u4e00\u6837", "d": "11/2016"}, {"body": "\u95ee\u9898\u662f\u6211\u6ca1\u4f7f\u7528\u8fd9\u4e2a\u53ebvuetemplatecompiler\u7684\u4e1c\u897f \u540c\u6837\u7684\u7248\u672c vuetemplatecompiler", "d": "11/2016"}, {"body": "using vueloader vueify reinstalling bump vuetemplatecompiler latest", "d": "11/2016"}, {"body": "nathenchan \u6211\u662f\u6309\u7167\u63d0\u793a\u5347\u7ea7\u4e86 vueloader vue", "d": "10/2017"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "11/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "11/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "11/2016"}, {"body": "got top level function click click element becoming rendered top level click invoked misspelling function name unfortunately vue throwing name missing function reason could find looking wrong place maybe improved somehow", "d": "11/2016"}, {"body": "closing since original issue resolved afaik vue warn von expression references method exist using browser supports proxy hard improve without seeing real reproduction issue", "d": "11/2016"}, {"body": "define member data props name handler broken example clicking foo button causes error message vue foo export default data return edit null methods edit something", "d": "8/2017"}, {"body": "add perhaps obvious case might cause guilty another silly reason getting error method called click handler accidentally placed computed properties instead methods damn syntax highlighting threw combination generic console error nt really understand fact app rendered browser even though compilation failed ide error got much helpful error command line funny compilation error usually get black overlay browser blocks render nt case sure good reason nt yet understand might gotcha", "d": "3/2018"}, {"body": "check whether written method methods", "d": "8/2018"}, {"body": "see errors console works fine safari even ie nt safari test anyway please open corresponding issue console information instead", "d": "11/2016"}, {"body": "sounds good", "d": "11/2016"}, {"body": "sure right solution problem maybe provide jsfiddle better illustrate trying achieve vue nt exactly vue nt need vue reactivity system ensures right components get rerendered state changes think react already implemented", "d": "11/2016"}, {"body": "thanks reply put together jsfiddle contains two components first shows contenteditable updating caret jump html changes state vue rerender component second contenteditable component contains html editing displays behavior described dom refreshes caret jumps beginning right vue correctly determining components rerender rerendering contenteditable div state changes however use case need option stop automated behavior would like state continue updating component wait rerender want refresh hook would useful like vue automates rendering correct components believe makes sense option circumvent behavior desired believe exposing optionhook would open vue use contenteditable provide potential performance boosts solve headache", "d": "11/2016"}, {"body": "hi vonce might helpful still need fine grained control rendition one computed getter might helpful example updates cursor contenteditable general cases computed properties gets selectively updated might enough implementing case conceive needs many interlaced state changes manually implementing computed cumbersome wonder cases common", "d": "11/2016"}, {"body": "herringtondarkholme thanks direction correct indeed resolve issue use case original jsfiddle updated work correctly using older versions vue vuex created another jsfiddle vue vuex demonstrates updated functionality suggestion computed property makes sense intended display content separately template however part jsfiddle example purposes still believe option would necessary contenteditable component also acts display basically anything acts text editor solution works long ok rerendering component however could see use cases one might wish rerender component currently working adding watcher trigger component rerender success would still interested seeing hook macro scale option end lifecycle point without causing errors", "d": "11/2016"}, {"body": "looking use case still nt think correct answer want essentially way let explicit make view state sync imo correct approach first place primarily offered performance optimization fully frameworkcompliant way deal also would suggest even react separate piece state represents input content sync model state updated want", "d": "12/2016"}, {"body": "found case may make sense see dev console every time click tab tabs rerender depend guess think need rerender fact nt case even props components still update want optimize performance reactlike may helpful", "d": "1/2017"}, {"body": "codincat case tabs forced update slot children technically means implement tabs solely depends prop incorrect slot children may changed accounted lead subtle bugs slot content tab component changes react use pure component purpose also always rerender prop always gets new reactelement references shallow compare consider different course try diff children nodes custom unlikely correct edge cases plus point much different rerendering containing component", "d": "1/2017"}, {"body": "shouldcomponentupdate might added render functions amp jsx section", "d": "10/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks directives objects functions generally organize normal javascript modules import register entry file", "d": "11/2016"}, {"body": "shortcut read guide really helpful", "d": "11/2016"}, {"body": "yeah realised sorry night mistake", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "thanks supporting vue rather gitter might ask bing google mocks event mocked event supposed stand pressing enter key vue instance test execute callback", "d": "11/2016"}, {"body": "mean nt get", "d": "11/2016"}, {"body": "test name", "d": "11/2016"}, {"body": "give example would actually extend events passed function real interesting part method passed bound depending modifiers", "d": "11/2016"}, {"body": "posva see von docs component modifiers contain modifier case produces bindings native events work way component events simply modify patch see example probably decide pass modifier component modifiers processing step", "d": "11/2016"}, {"body": "fixed example fiddle", "d": "11/2016"}, {"body": "sorry nt get needing modifiers information code snippet", "d": "11/2016"}, {"body": "posva snippet shows patch component event without changing something vue way get modifier component take look first message get example feature used", "d": "11/2016"}, {"body": "makes fundamentally different", "d": "11/2016"}, {"body": "hmm right probably nothing looks different default syntax definitely used define handler component modifier silently ignored event without modifier fired may pass raw string modifier eg component event native event warn dev mode dot notation supported component events think", "d": "11/2016"}, {"body": "modifiers except actually specific native events nt really make much sense components anyway think best keep component events simple use event name differentiate since ultimately different events rather event different behavior", "d": "1/2017"}, {"body": "computed style change data changed vue rerender app according strategies maybe could apply diff nodes generated vhtml rather reset", "d": "11/2016"}, {"body": "expected alias want patch behavior write markup vue templates wontfix imo already escape hatch use absolute patching content involves way many edge cases little gain", "d": "11/2016"}, {"body": "actually case overwritten cache previous innerhtml avoid setting stays", "d": "11/2016"}, {"body": "could check oldprop value new one make patch", "d": "11/2016"}, {"body": "sounds good however undefined valid class name add check impossible add undefined class maybe better avoid userland", "d": "11/2016"}, {"body": "think better left userland really way tell whether really want workaround complicated either", "d": "11/2016"}, {"body": "problem specifically key string undefined still work agree fix simple might worth implementing anyway since might pop cssmodules users future", "d": "11/2016"}, {"body": "problem comouted property names vue mechanism js language feature result evaluating code always going end string undefined vue even anything", "d": "11/2016"}, {"body": "shorthand", "d": "11/2016"}, {"body": "sorry mean okay kind like feature request xd fnlctrl", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "11/2016"}, {"body": "use functions html columncolumn columnfield item", "d": "11/2016"}, {"body": "thanks example justnobody", "d": "11/2016"}, {"body": "sounds good thanks updated fiddle vue", "d": "11/2016"}, {"body": "element special semantics used vue templates eg used slot container use case", "d": "11/2016"}, {"body": "wanted output html without wrapping extra div structure something like html", "d": "11/2016"}, {"body": "unfortunately supported must used normal element alias nt make sense abstract container like", "d": "11/2016"}, {"body": "vue vuerouter div vue vue \u518d\u6bd4\u5982\u8fd9\u91cc\u7684 vhtml template", "d": "6/2017"}, {"body": "different use case may need custom input component works try support polyfill need html following reason wo nt render thus element needed however much try ca nt find way render html comment directive seems way go ca nt use html element", "d": "9/2017"}, {"body": "use worked modal push raw html data body html", "d": "11/2017"}, {"body": "hi using vuejs need create indexvue page product people number text box drop list fixed mean product props may tried add html element using vhtml seems wise way offered use components sounds little complicated confusing looking sample good example thanks advance", "d": "5/2018"}, {"body": "could nt potentially implemented inserting comment node", "d": "5/2018"}, {"body": "please specific think work like use case running needs single title nt qualify feature request", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "issue activateddeactivated called components registered router children components benefit activateddeactivated lifecycle hooks think next releases", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "kinglion \u65b9\u6cd5", "d": "11/2016"}, {"body": "nothinggift", "d": "11/2016"}, {"body": "\u65b9\u6cd5", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "remove", "d": "12/2016"}, {"body": "aierui remove", "d": "1/2017"}, {"body": "\u6211\u7684\u7b2c\u4e09\u7ea7\u8def\u7531\u7ec4\u4ef6", "d": "8/2017"}, {"body": "activated\u94a9\u5b50\u90fd\u6ca1\u6709\u88ab\u89e6\u53d1", "d": "8/2018"}, {"body": "key special attribute along ref slot use prop names however think vue give warning try declare", "d": "11/2016"}, {"body": "simplesmiler thanks", "d": "11/2016"}, {"body": "take example props data pretend part data every component assume access props data using thispropertyname like normal scope data props update every change variable even vuedevtools update new value dom render changes guess happen props watched properties solution found assign props real watched data property mounted method employee descripcion fecha de inicio fecha de fin generar boleta index export default props propstickets data function return tickets ticket description startedat finishedat employeeid employee computed methods retriveemployee response gt thisemployee responsebody response gt consolelog responsebody generateticket response gt thisticketspush responsebody response gt consolelog responsebody mounted thistickets thispropstickets", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks", "d": "11/2016"}, {"body": "thanks inventtileonardo expected behavior vif vif directive checks expression conditional rendering vshow current behavior toggles styledisplay property maybe improvement", "d": "11/2016"}, {"body": "reason need class element time want element visibility controlled let job nt see point class", "d": "11/2016"}, {"body": "bit confused thinking behavior vshow equivalent css ensure elements show initial load using libs vue migrating vue right", "d": "11/2016"}, {"body": "depending different elements could different default properly possible value simply set empty value value true also take account inline display properties like use case probably use vcloak instead gets removed vue finishes rendering", "d": "11/2016"}, {"body": "want keep switchedout components memory preserve state avoid rerendering wrap dynamic component element according docs expected behavior keepalive", "d": "11/2016"}, {"body": "understand state preserved like data component feels bit unintuitive addition dynamically bound props breaks circumstances edit expected behavior nt least away force dynamically bound props update keptalive component appears", "d": "11/2016"}, {"body": "looks like bug expect component updated switched", "d": "11/2016"}, {"body": "thanks really quick response fix", "d": "11/2016"}, {"body": "please open issue repo instead", "d": "11/2016"}, {"body": "found mainvue requires components code throw exceptions components correctlly rendered make code run mainvue requires components thank yyx", "d": "11/2016"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "11/2016"}, {"body": "selected bound property instead attribute tags nt selected attribute would want bind styling purposes using class instead", "d": "11/2016"}, {"body": "indeed styling purposes using class attributes styled css sometimes useful classes", "d": "11/2016"}, {"body": "checked patch release fixed thanks much", "d": "11/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "11/2016"}, {"body": "fiddle nt working likely due triggering jquery change event instead real event", "d": "11/2016"}, {"body": "use bootstrap datepicker vue like", "d": "11/2016"}, {"body": "wontfix although catered nt think makes sense us cater behavior arbitrary party libraries especially workaround like xelia", "d": "11/2016"}, {"body": "sorry tack onto closed issue context related using optimal way target element within using something similar like react example", "d": "11/2016"}, {"body": "granda ref exactly purpose sufficient time always", "d": "11/2016"}, {"body": "making work ran another issue worth noting nt wan na see anyone suffer like situation application button makes something true shows second based true value nt trigger second shows weird behavior discussing workaround change works first place", "d": "3/2018"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "11/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks", "d": "11/2016"}, {"body": "hi thanks filling issue event nt bubble vue manually reemit way use vuex event hub pattern may also help case", "d": "11/2016"}, {"body": "might related sure try adding key property section online repro", "d": "11/2016"}, {"body": "herringtondarkholme definitely related still little annoying deal adding tag worked would nice mention something docs diffing", "d": "11/2016"}, {"body": "igdexter would nice mention something docs diffing vuejsvuejsorg", "d": "11/2016"}, {"body": "linusborg cool thanks quick response quite shock staging environment today", "d": "11/2016"}, {"body": "quite shock staging environment today intended breaking change mind generally expected behaviour many situations already mentioned documentation still lacking assume worked accidentally recent fixes bugs amongst things related handling style class bindings might changed", "d": "11/2016"}, {"body": "linusborg wonder whether correct behavior example diffed solely vdom style attribute considered vdom construct comparison consider example inner text class updated class merged style merged note issue different since lifecycle managed virtual dom also different since inlinetemplate speaking implementation different slot vnode representation cc defcc", "d": "11/2016"}, {"body": "linusborg guessing improvement preserve static inline styles dynamic inline styles per made issue apparent wondering correct behavior comparing old node new node applying necessary style changes code seems merging reusing node fine think keep styles active node needs represented dom edited op light new info", "d": "11/2016"}, {"body": "hm might right", "d": "11/2016"}, {"body": "seems something wrong static style style binding merge looking", "d": "11/2016"}, {"body": "style holds style binding removed next render static style style binding removed reusing node", "d": "11/2016"}, {"body": "make pr fix", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "nt seem work", "d": "11/2016"}, {"body": "also personally like idea directive added kind component also directive could listen focus events initiated component interfere native focus events perhaps custom name distinguish", "d": "11/2016"}, {"body": "seems working focus custom input button clicked", "d": "11/2016"}, {"body": "ok must done something wrong works feel sufficient work around think directive would helpful", "d": "11/2016"}, {"body": "sure directive would help situation think calling method ref seems straightforward enough closing feel free expand think would help", "d": "11/2016"}, {"body": "basically would provide standardized way setting focus adding every methods property nt huge would add idea might look parent could think main benefits would would bit intuitive since native inputs already functionality provides standard way way using someone else component since official directive may likely add functionality", "d": "11/2016"}, {"body": "nt think want directive could component mixin though", "d": "11/2016"}, {"body": "added suggestion top head could possibly taking far multiple vfocus directives could also used place tabindex would encourage component creators add support things like tab navigation thinking mainly terms writing components shareable reusable since feel component authors nt going thinking adding support focus events tab navigation maybe something like could help guiding authors create accessible components well", "d": "11/2016"}, {"body": "actually even nt control party component still", "d": "11/2016"}, {"body": "yes could dependent first input one want eg nt add checkbox hidden input first markup sorry going long maybe give consideration vue could promote fully functional accessible components box great accessibility anything could help remember add better support think good thing", "d": "11/2016"}, {"body": "regarding focus reactive attribute give vuefocus whirl components would pass prop use directive within component", "d": "11/2016"}, {"body": "simplesmiler pretty cool try nov denis karabaza notifications githubcom wrote regarding focus reactive prop give vuefocus whirl components would pass focused prop use directive within component receiving mentionedreply email directly view github mute thread", "d": "11/2016"}, {"body": "using vue nt loading user content vue place curly braces inside data property output problems", "d": "11/2016"}, {"body": "content loaded rendered serverside using laravel blade templates single page application built entirely js nt even load data using js merely using vue awesome components optimize user experience clientside", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "feel like dumbass spent hours looking around docs thank", "d": "11/2016"}, {"body": "vpre also disables attribute parsing though ie wo nt show since html escaping already done applications way disable moustache interpolation would nice currently setting delimiters long random string sort hacky", "d": "1/2017"}, {"body": "clearly nt really answer original question disable interpolation disable parsing importantly nt allow use vuejs pages user content vuejs components time see one uses root element entire root element parsed including vuejs components basically making useless allow components work must used user input separately work long run template authors forget time bomb similar old times used raw call user input prevent xss time even worse since smart serverside frameworks emit supposedly safe html us turns unsafe vuejs example let say use django forms framework edit user profile page template django userformname save emit works well code runs inside vue app user submits var literally name lulz html code become entire page crash become empty interpolation inside attributes removed error time inconvenient guard every surrounding element sometimes even possible example might like button caption rendered vue depending app state course user new funny name saved database rendered somewhere else django code without explicit crash vuejs show empty page users avoid using javascript keyword property name var error bummer real solution disable delimiters keep parsing components quick hack came js const nodelimiter replace gt x x return nonmatching regexp const app new vue el vueapp delimiters nodelimiter nodelimiter components mycomponent case pulling app vars still possible", "d": "4/2017"}, {"body": "ilyasemenov way enough enables interpolation undefined syntax html undefined message undefined const nodelimiter replace function const app new vue el app delimiters nodelimiter nodelimiter data message hello vue result hello vue created pr", "d": "7/2017"}, {"body": "alfajpn good point nt pay attention happens result call since simply concatenated construct regexp returning nonmatching regexp work updated example correspondingly", "d": "7/2017"}, {"body": "specific reason vue renders adding vpre everywhere may best solution serverside rendered templates hard ensure complete coverage", "d": "4/2018"}, {"body": "ugh incrementing number nexttick fixes closing", "d": "11/2016"}, {"body": "go implementing nexttick facing similar problem passing prop vue router using keepalive routerview", "d": "9/2018"}, {"body": "whatever updating wrap nexttick callback arg eg", "d": "9/2018"}, {"body": "thanks maksimskomorokh expected behavior component list data changed make assignment list inside another function", "d": "11/2016"}, {"body": "nt anything local variable binding reference", "d": "11/2016"}, {"body": "interesting delete item list updated item removed", "d": "11/2016"}, {"body": "well may scope new javascript looks like call simply foo return functionmethod string called really belong connection instance anymore works perhaps handled internally hood vue proved fiddle call alerts function assign foohello bar call bar see returns undefined could maybe solved conditionally check exists vue instance call naive example would needed handled hood vuejs leave someone else answer conclude guess would need put parenthesis need able call extended function vue object", "d": "11/2016"}, {"body": "deohnas thanks new javascript example perfectly clear think using object method event handler terrible way", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "\u800c\u662f\u6837\u5f0f\u8868\u4e2d\u52a0\u4e86 webkituserselect none", "d": "11/2016"}, {"body": "scopid implementation detail documented official doc either wonder whether rely private api always augment typescript definitioin though", "d": "11/2016"}, {"body": "thank augment definition resolved issue us agreed ideal use private api would great find better way precompile templates include component jsts us mainly want jsts code leading prevent mixed imports js vue template js", "d": "11/2016"}, {"body": "closing since issue resolved userland yeah probably nt want expose private apis official type definitions", "d": "11/2016"}, {"body": "issue webpacksimple steps reproduce following issue", "d": "11/2016"}, {"body": "somewhat difficult workaround bug use old version easily npm resolves vueify vuetemplatecompiler using always even want use different version need add yarn shrinkwrap project", "d": "11/2016"}, {"body": "ernestoalejo works well computer according steps anything else missed", "d": "11/2016"}, {"body": "workaround parse requires browserify flag webpack option fix next release", "d": "11/2016"}, {"body": "issue using jspm vue rolling back vue solves", "d": "11/2016"}, {"body": "unrelated tried quick inside babel code says file filtered correctly stills throws error though files pass filter probably option consider", "d": "11/2016"}, {"body": "workaround webpack add", "d": "11/2016"}, {"body": "revertedfixed", "d": "11/2016"}, {"body": "reason ca nt import vue files completly fresh vue init webpacksimple folder run npm run dev initially soon try import vue component error occurrs nodemodulesbabelloaderlib nodemodulesvueloaderlibselectorjs typescript amp srcappvue module found error ca nt resolve componentsheadervue c laragonwwwvuetutorialsvueclitutorialvuejsroutervueroutersrc nodemodulesbabelloaderlib nodemodulesvueloaderlibselectorjs typescript amp srcappvue srcappvue srcmainjs multi webpack devserverclient webpackhotdevserver srcmainjs", "d": "1/2018"}, {"body": "temporary workaround js export default props subject data return subjectproxy thissubject computed selectedsubject get return thissubjectproxy set value thissubjectproxy value return", "d": "11/2016"}, {"body": "thanks guidobouman take look", "d": "11/2016"}, {"body": "key dynamic components accordingly unfortunately docs clear currently expected behaviour stated somewhere else switching elements toggling elements tag name must tell vue distinct elements giving unique key attributes otherwise vue compiler replace content element efficiency works similary dynamic components chrisvfritz think better place docs mention expand", "d": "11/2016"}, {"body": "linusborg thanks getting back work even using think explained conditionality section docs", "d": "11/2016"}, {"body": "api reference section adding reference addition guide would make even clearer", "d": "11/2016"}, {"body": "guidobouman yep working thanks suggestion", "d": "11/2016"}, {"body": "discussion docs improvement topic vuejsvuejsorg", "d": "11/2016"}, {"body": "confirmed adding input reproduce problem problem always changing component means every component changed inputing component identifier list rendering vue need rerender component identity changed focus lost please read related doc fixed version", "d": "11/2016"}, {"body": "totally missed key prop good eye herringtondarkholme thanks", "d": "11/2016"}, {"body": "thank herringtondarkholme missed obviously", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "hi please open issue vuerouter repo reproduction jsfiddlecodepenetc thanks", "d": "11/2016"}, {"body": "happens browser mangles casing vue chance thing modifier introduced address issue appear made way another semiworkaround template comes string dom vue able process browser", "d": "11/2016"}, {"body": "thanks quick reply workaround", "d": "11/2016"}, {"body": "back still recommended use string templates", "d": "11/2016"}, {"body": "vue input \u6846\u7684 input", "d": "11/2016"}, {"body": "width height strings", "d": "11/2016"}, {"body": "stuq \u5927\u795e\u76f4\u64ad\u4f1a \u8fd8\u6709\u90a3\u4e2a\u77e5\u4e4e live", "d": "11/2016"}, {"body": "nt need worry templates template basically render function vue component cases defined plain object basically modifypatch options object enhancer function alternatively vue plugins apply global mixin injects lifecycle hooks components lifecycle hooks check custom options field eg js const greedplugin vue gt vuemixin beforecreate optionsgreed initialize stuff vueuse greedplugin new vue greed queries mutations consult vuerx implemented way closing since question continue discussion thread", "d": "11/2016"}, {"body": "thank much get started tomorrow morning", "d": "11/2016"}, {"body": "seen examples vue site articles data fetch part know ahead time property state fetch function going update however would spread newly acquired data data object react accomplished view set single property tried following even though knew would nt work get idea across know could set property data object called data place data within nested data object let user thisdatacommits nt want resist nesting say want spread data object mean one", "d": "12/2016"}, {"body": "got working add twitter send dm link code maybe review give tips things may done vue way twitter handle kennetpostigo", "d": "12/2016"}, {"body": "making public repo link sure community give lots feedback also understanding want hook vue graphql better choice hook vuex since prebuilt state management system vue chance also hope aware problem solved albeit vuex redux system apollo provides wanted point possible reinventing wheel already made scott", "d": "12/2016"}, {"body": "hi smolinari making public repo link sure community give lots feedback monorepo going make public soon finish bindings frameworkslibs also understanding want hook vue graphql better choice hook vuex since prebuilt state management system vue chance nt want depend specific state management libraries often times teams individuals choose different options different reasons makes sense use case however provide way let state management libraries hook client handle data actions also hope aware problem solved albeit vuex redux system apollo provides wanted point possible reinventing wheel already made aware apollo available however client working focused minimizing size similar projects like preact currently core vue bindings stand well developer experience keeping simple unopinionated work well tools step toes", "d": "12/2016"}, {"body": "well project sounds interesting looking forward seeing scott", "d": "12/2016"}, {"body": "thanks suggestion moved", "d": "11/2016"}, {"body": "thank evan apologies nt realize repo site tue nov evan notifications githubcom wrote closed receiving authored thread reply email directly view github mute thread", "d": "11/2016"}, {"body": "expected behavior vdom diffing finds component tree position reuses existing component instance want fully teardown recreate component give different keys", "d": "11/2016"}, {"body": "ok thanks trim working first initialization ie page load input two letters one space class set hassuccess though terms start working start typing", "d": "12/2016"}, {"body": "hi thanks filling issue supposed return already created object props shared across instances", "d": "11/2016"}, {"body": "fnlctrl", "d": "11/2016"}, {"body": "already fixed fiddle using version", "d": "11/2016"}, {"body": "uncaught referenceerror defined vuejs anonymous function vuejs anonymous function vuejs anonymous function vuejs", "d": "11/2016"}, {"body": "hi thanks filling issue please provide minimum example cause problem jsfiddle github repo link provided minified bundled code could nt help", "d": "11/2016"}, {"body": "reproduce android wechat browser vue make sure using correct build closing evidence caused vue please reopen follow information", "d": "11/2016"}, {"body": "bryonliu also problem maybe devtool option webpack get error option contains eval try removing eval option configuration", "d": "11/2016"}, {"body": "something wrong template", "d": "11/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks use render functions access children via", "d": "11/2016"}, {"body": "hi thanks filling issue vue keep static classes templates asis please define default class vue data", "d": "11/2016"}, {"body": "mean please define default class vue data nt see going fix problem active class button vue loaded yet still correct logic vue loaded", "d": "11/2016"}, {"body": "others stumble upon issue fixed little nasty css workaround see", "d": "11/2016"}, {"body": "class attribute staticclass class binding class merged together runtime", "d": "11/2016"}, {"body": "fnlctrl hello please reopen issue vay vue usable websites dont understand purpose vue created want see first button list active vue loaded nt want blinking button vue keep static classes templates asis active class static vue loaded want remove class vue class binding working vue make active active class wtf nt understand purposes vue created fun want use production regular web sites spa", "d": "3/2017"}, {"body": "errogaht hello stop using vue angry", "d": "3/2017"}, {"body": "\u8de8\u9875\u9762\u4f20\u53c2\u662f\u6846\u67b6\u65e0\u5173\u7684", "d": "11/2016"}, {"body": "hi thanks filling issue mean copy korean characters input field press enter key method called please check custom ime programs interfering keyboard input", "d": "11/2016"}, {"body": "fnlctrl right changed thanks", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "hi thanks filling issue simply use emit templates", "d": "11/2016"}, {"body": "found used root element visible typeof visible var app vueextend new app el app data return visible false template working", "d": "11/2016"}, {"body": "already fixed pr", "d": "11/2016"}, {"body": "seems let go", "d": "11/2016"}, {"body": "throw typeerror array properties think better merge elems properties array", "d": "11/2016"}, {"body": "seems bug vuecharts library never called arrays means library somehow passing array option supported", "d": "11/2016"}, {"body": "vuecharts library pass array called recursively function called arrays data include array properties another example without vuecharts think copy properties object prototype object design", "d": "11/2016"}, {"body": "indeed bug usage incorrect declaring prop data property using key fix see warning message telling", "d": "11/2016"}, {"body": "maybe de maybe ugly useful course tell issue ask question gitter", "d": "11/2016"}, {"body": "thanks daryl could use computed property way jounqin mentioned", "d": "11/2016"}, {"body": "submitted pr review needed", "d": "1/2017"}, {"body": "using extraction way nt styles inlined strings javascript payloadblocking factor btw nt think large css blocks downloading assets blocks rendering concern solved code splitting fallback loader extract text plugin additional style chunks would inserted dynamically async chunks loaded moment best practices ssr code splitting something still needs worked updating demo future settle good solution", "d": "11/2016"}, {"body": "thanks reply actually project large spa based vue code splitting neccesary best practice every page vue file downloaded demand using code splitting works well browser stylesheets parts vue file compiled js file ssr nt first screen render blink styles currently extract styles pages one large css file include html file solve problem", "d": "11/2016"}, {"body": "facing issue better solution jiayangshen", "d": "11/2017"}, {"body": "seems regression working fine defcc", "d": "11/2016"}, {"body": "thanks looking bug caused model parser fix soon", "d": "11/2016"}, {"body": "using hyphen object key key put quotes javascript restriction vue", "d": "11/2016"}, {"body": "linusborg write want margintop paddingtop try paddingtop nt works please help", "d": "6/2017"}, {"body": "work see", "d": "6/2017"}, {"body": "hi thanks filling issue javascript code nt executed probably browser using nt support please see fiddle working still get errors changing please switch nonminified version vue post error log thanks", "d": "11/2016"}, {"body": "fnlctrl used const page let errors chrome shows everything ok even switch mobile inspect iphone ipad reality nt work", "d": "11/2016"}, {"body": "please use nonminified version vue since minified one wo nt log errors runtime also side note using inspect ios safari chrome please try using osx safari inspect ios safari", "d": "11/2016"}, {"body": "added regular version vue installed ioswebkitdebugproxy says need plug phone computer idea using linux btw", "d": "11/2016"}, {"body": "ran fiddle ios chromesafari working fine", "d": "11/2016"}, {"body": "chrome mobile emulator emulates screen resolution real environment ios safari really inspecting web pages iphoneipad problem fiddle think usage nt work ios please try changing", "d": "11/2016"}, {"body": "switched var works iphone tested browserstack nt work iphone lumia devices think iphone uses old ios version lumia win sure problem", "d": "11/2016"}, {"body": "ios render issue caused vue please check application code used javascript features nt supported target environments believe vue issue please follow actual error logs thanks", "d": "11/2016"}, {"body": "thanks helping", "d": "11/2016"}, {"body": "nt get sorted hacky solution elqueryselector videoplayer src elqueryselector videoplayer getattribute datasrc seems ok iframe nt loaded initially", "d": "4/2017"}, {"body": "also met issues solved changed function definition methods fnname fnname function", "d": "4/2017"}, {"body": "thanks reporting meantime workaround would move inside component", "d": "11/2016"}, {"body": "elseblock walked markstaticroots func make pr fix", "d": "11/2016"}, {"body": "fix problem idea regarding", "d": "5/2018"}, {"body": "actually vue reporting bad error console issue dont know tackle problem", "d": "5/2018"}, {"body": "big bunch code please isolate minimal code jsfiddle", "d": "11/2016"}, {"body": "posva compiled code generated maybe reproduce jsfiddle", "d": "11/2016"}, {"body": "fixed reinstall get latest fix", "d": "11/2016"}, {"body": "jounqin ooh see included much code xd last line issue important one", "d": "11/2016"}, {"body": "posva sorry", "d": "11/2016"}, {"body": "jounqin nt worry also bit faulty less code include easier us help", "d": "11/2016"}, {"body": "maybe hook time component resolved currently achieve using mixin emitting events use cases testing thinking lazy loadin components allowing parent component know whether loaded display different content waiting", "d": "11/2016"}, {"body": "posva thanks response currently using mixin workaround uses different approach js export default beforecreate function const promises js async done gt const vm new maincomponent ready expect elqueryselector nottobenull dirty going try different approaches including main purpose ability know async component loadedresolved main component includes async ones know loaded resolved difficult test main component create additional behavior instance showhide waiting content need create additional wrappersmixins would nice functionality box", "d": "11/2016"}, {"body": "posva one async component easy handle one async components difficult", "d": "11/2016"}, {"body": "mdreizin actually find mixin approach quite plausible since super common use case handled userland think better leave userland", "d": "1/2017"}, {"body": "posva thanks guys currently found workaround create really common solution post", "d": "1/2017"}, {"body": "get back kind problem dynamic components static async component passed absolutely way find children finished rendering parent component must execute code child components done loading problem parent lifecycle done children created called solution mdreizin posted work components nt known", "d": "1/2018"}, {"body": "donnysim preventing applying mixin would add hook component", "d": "1/2018"}, {"body": "akryum kind requires know many components wait loading requires different implementations code second time enter page components already resolved normal lifecycle runs", "d": "1/2018"}, {"body": "big problem component appear list resolved late lifecycle detect components many loaded yet case kind work around problem injecting global mixin emits mountedcreated events components count many loading loop sadly case async components increase difficulty dealing lifecycle something needs happen mounted event async components get created mounted", "d": "1/2018"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks", "d": "11/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "11/2016"}, {"body": "yarn nt need changes vue part use", "d": "11/2016"}, {"body": "nice", "d": "11/2016"}, {"body": "prefer explicit ways especially depends upon another condition rather create another directive handle syntactic sugar", "d": "11/2016"}, {"body": "posva vote", "d": "11/2016"}, {"body": "gbezyuk however suggesting create separate package imo benefits enough include core", "d": "11/2016"}, {"body": "posva well right sorta raise idea discussion agree something really important currently tasks maybe somebody else would like implement feature", "d": "11/2016"}, {"body": "would rather use velse vif vempty velse vfor easy understand keep simple stupid", "d": "11/2016"}, {"body": "agree dsonet fond idea introducing special behavior directives simply dedicated directive may save keystrokes cost explicitness requires backtrack corresponding sure", "d": "11/2016"}, {"body": "question takes precedence velse vfor show string velse vfor obj keys iid vue handle situation recommend", "d": "3/2018"}, {"body": "also concerned enlarging apis convenience since also handles case iteration objects nt arrays would indeed value directive iterating eg objects properties direct property etc fact iterator empty seems much symmetrical vifvelse current case iterate properties easy without necessarily needing express template iterator implemented since vfor iterate anyway extending keep boolean emptynotempty rendering empty branch loop content never touched iteration helpful straightforward performant calling objectkeys obj length even template includes understanding iterator implementation empty iterator branches also precedence template languages used far current way seems quite clumsy especially since binds template implementation detail iterator wo nt really get better using component method either key part translations available", "d": "5/2018"}, {"body": "like idea also som reservations considering explicitness behaviour two different results directive used vif velse would insertremove element used vshow velse would showhide element since vif vshow operate fundamentally different would essence need two implementations mirror behaviour conjunction proposal would different directives look order understand particular situation oh vshow determines weither oh vfor actually", "d": "11/2016"}, {"body": "obviously true nt seem real issue always continuation previously defined elementdirective anyway could use different name case come better one", "d": "11/2016"}, {"body": "removed vue could nt find thread discussed cost maintaining extra logic enough simple syntactic sugar vs maybe blakenewman recall bit better reasons", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks ca nt", "d": "11/2016"}, {"body": "nt also written somewhere close filters instead migration", "d": "11/2016"}, {"body": "nt think belongs migration absent vue docs nt exist anymore", "d": "11/2016"}, {"body": "havent used filters vue im still pretty new filters used writing binds thats confusing point view would expect also could use binds everywhere else maybe thats properly reason working", "d": "11/2016"}, {"body": "looks pretty clear reason bindings content jslike filters common practice interpolation", "d": "11/2016"}, {"body": "mikeralphson thanks filing issue warning appear using compilerinlcuded build need reproduction repo please", "d": "11/2016"}, {"body": "linusborg thank prompt response issue updated repro fiddle see console output run", "d": "11/2016"}, {"body": "mikeralphson logs", "d": "11/2016"}, {"body": "linusborg posva apologies nt realise fiddle autosave updated", "d": "11/2016"}, {"body": "mikeralphson sorry nt updated link still points basic starter code", "d": "11/2016"}, {"body": "linusborg sincere apologies jsfiddle nt give updated link created account please try", "d": "11/2016"}, {"body": "thanks seems indeed bug edit label improvement bug sense vue functionality broken bettercorrect warning would improve developer experience though also edited issues title reflect intended improvement", "d": "11/2016"}, {"body": "please read doc prop emit event try", "d": "11/2016"}, {"body": "thanks answer", "d": "11/2016"}, {"body": "hello skykilla thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "11/2016"}, {"body": "however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide feature request exact api method way clone", "d": "11/2016"}, {"body": "sorry twosentence issue could easily mistaken question asked vue must missed post forum please refer hint answer might clone vnodes slot render function actually want request feature please open another issue describe general usecase want wo nt digg loc jsfiddle find exactly feature look like", "d": "11/2016"}, {"body": "please refer discussion update thanks patien\u0441e good day", "d": "11/2016"}, {"body": "could add unique key list item take look list rendering doc updated fiddle", "d": "11/2016"}, {"body": "sortable works dom place vue needs hint keep track dom elements", "d": "11/2016"}, {"body": "hi thanks filling issue nt make difference yes author wanted pass value ing nt get full dom event event serves interface full dom events guaranteed available directly listening event native", "d": "11/2016"}, {"body": "work listen native input event root element component even div input element able catch event bubbles unless author component called never", "d": "11/2016"}, {"body": "kristianmandrup docs fully updated parts still changed please open corresponding issue vuejsorg repo", "d": "11/2016"}, {"body": "fnlctrl noticed much looked code filed issue made pr however trying change nt work either tried linusborg approach also native event even triggered attempt fix still getting nowhere still many inconsistencies docs post issues docs future html choicelabel export default props prompt data return mounted watch promptchoices newchoices old gt consolelog newchoices newchoices methods onchosen e consolelog e", "d": "11/2016"}, {"body": "create method", "d": "11/2016"}, {"body": "thanks", "d": "11/2016"}, {"body": "hello kwalker thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "11/2016"}, {"body": "ok linusborg changed trouble give answer thank", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks find useful", "d": "11/2016"}, {"body": "thanks post", "d": "11/2016"}, {"body": "actually looking lifecycle hooks like hook nt lifecycle hook triggered ing component problem detached hook called parent component children vm nt anymore therefore hook called first level children detached component everything else vm null foreach called parent", "d": "11/2016"}, {"body": "thanks reply think solved problem perfectly", "d": "11/2016"}, {"body": "hi thanks filling issue seems problem event nt fired loses focus browser behavior ca nt really help workaround simple explicitly bind listener immediately fired whenever user types", "d": "11/2016"}, {"body": "fnlctrl thanks help definitely let work around something nt understand even necessary value thing updated trigger update values component words seems function affecting one variable worry updating thought reactivity supposed efficiently update variables changed case", "d": "11/2016"}, {"body": "simply put event fired temporary state different app overridden app state render function called triggered update render function called whenever anything reactive changed", "d": "11/2016"}, {"body": "notice allowing user create dom state typing input oneway bound value disconnected underlying application state whenever component updates application state force dom state sync throw away temporary input state precisely control want need represent temporary state application state creating separate local property use", "d": "11/2016"}, {"body": "think may need follow react take warning usage freezing input altogether", "d": "11/2016"}, {"body": "thank response spent several hours trying figure happening perhaps think frameworks tend naturally black box combined misconception render function loss retrospect makes much sense happening work around running edge cases would nice type error warning thrown alert developer happening know nt easy solution since edge cases definition something run time", "d": "11/2016"}, {"body": "yeah likely add warning oneway value bind future", "d": "11/2016"}, {"body": "seems fixed issue", "d": "11/2016"}, {"body": "one issue vueminjs getting included build", "d": "11/2016"}, {"body": "component required one root element looks like actually want two different components like wo nt needed one root element dynamic use actual component used whatever", "d": "11/2016"}, {"body": "crswll views one component different component therefore way best two element root works plunker", "d": "11/2016"}, {"body": "closing ita duplicate quote evan problem without code analysis vif expressions fact near impossible depends component runtime state way tell whether really return one element get around either using dynamic component turning conditional branches components use render function instead", "d": "11/2016"}, {"body": "might improved future compile everything warn runtime root node returned", "d": "11/2016"}, {"body": "thx wait", "d": "11/2016"}, {"body": "wait", "d": "11/2016"}, {"body": "expected behavior according doc venter removed one frame venteractive removed transitionanimation finishes two classes applied time defined applied time enteractive wins css rule kept begin end transition course fixed", "d": "11/2016"}, {"body": "something similar roadmap scoped slots doubt includes loop scoping fyi already achieve render functions functions return vdom props", "d": "11/2016"}, {"body": "tracked use inlinetemplate hacks", "d": "11/2016"}, {"body": "herringtondarkholme hack work updated latest version", "d": "11/2016"}, {"body": "please file issue related repo", "d": "11/2016"}, {"body": "herringtondarkholme sorry works bug", "d": "11/2016"}, {"body": "herringtondarkholme use voutlet amp vtemplate recursive treenode root node get rendered template vue datatitle", "d": "11/2016"}, {"body": "ask question original repo vue issue list bug report feature request thanks", "d": "11/2016"}, {"body": "closing implemented scoped slots", "d": "11/2016"}, {"body": "thanks lepture simliar could define b c data workaround updated fiddle", "d": "11/2016"}, {"body": "technically expected behavior due way templates compiled render functions essentially passing fresh array every time parent component rerenders thus triggering child props considered changed finally causing computed property computed happens use inline literal values props template defcc suggested would recalculation remains exact array across rerenders prop always static ie care initial value intend mutate prop set local data variable finally apart computed called child rerender ux behavior correct downside probably unnecessary computation practice fairly cheap would nt worry much unless ends causing noticeable performance issues", "d": "11/2016"}, {"body": "see link u use question", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks", "d": "11/2016"}, {"body": "binding basically creating oneway bind makes value input box constant binding default value either using make value sync input use create binding default value", "d": "11/2016"}, {"body": "neither solutions work nt default values part simple example perhaps gone detail placing component set inside component restrictions mutating props kick following example linus borg gave page javascript parent child export default props value special prop received vmodel example closer trying imagine instead packaged component props instead data variables problem like said dynamically update quicklist bottom component resets text input would completely frustrating enduser making whole thing unusable feels like rock hard place since supposed mutate props vmodel yet telling use vmodel", "d": "11/2016"}, {"body": "value inside contain parens need wrap quotes", "d": "11/2016"}, {"body": "comments make sense repro would make things faster someone else trying isolate code took look could nt find anything wrong may get help forums also please follow issue reporting guidelines next time", "d": "11/2016"}, {"body": "repo think everything anything wrong let know tried forums glitter luck unfortunately", "d": "11/2016"}, {"body": "repro repo", "d": "11/2016"}, {"body": "ah haha ca nt first fall unable recreate jsfiddle etc afraid quite new vue using single file component method far repo provide working example least need click remove button understand whole npm install thing unfortunately", "d": "11/2016"}, {"body": "nt others fallen give shot", "d": "11/2016"}, {"body": "evu tried works nicely edits got error red message appears top problem seems appear weird character appvue template line looks like simple tab nt make sense look deeper edit actually happens second note edit strange behaviour hot reload happens actual element removed somehow guess noterepo event bubbling may want take look vuex looks like may fit better way using events", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks looks like piping stream response", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "11/2016"}, {"body": "ok", "d": "11/2016"}, {"body": "workaround give duplicate namespace use explicitly style declaration", "d": "11/2016"}, {"body": "warning said please nt put styling logic components style tags svg putting style tag headbody sideeffect want scoped modularized styling look vue single file component", "d": "11/2016"}, {"body": "hello powerfulpony thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "11/2016"}, {"body": "hi linusborg understand demonstrate server render jsfiddle", "d": "11/2016"}, {"body": "case repository would better option oviously", "d": "11/2016"}, {"body": "linusborg said would better provide repository case seems bug similar", "d": "11/2016"}, {"body": "hi considered case commit opinion third library added method vue prototype library author probably nt want get changed end users elaborate situation long migrate forum", "d": "11/2016"}, {"body": "opinion third library added method vue prototype library author probably nt want get changed end users agreed see discussion think detecting methods starts good approach closing issue", "d": "11/2016"}, {"body": "solve vhtml direcive error", "d": "11/2016"}, {"body": "must click eyebutton see data", "d": "11/2016"}, {"body": "converted getters setters use jsonparse jsonstringify data normalize", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "indeed thanks link maybe adding link section section would give visibility", "d": "11/2016"}, {"body": "please open issue repo", "d": "11/2016"}, {"body": "selected option always reflect value vmodel value switch options nt change nothing new options selected probably want explicit set", "d": "11/2016"}, {"body": "context event ipcrenderer triggered would spontanously assume state changed undone piece code running event trigger", "d": "11/2016"}, {"body": "file emits event helps currently mobile ca nt really format well let know need information", "d": "11/2016"}, {"body": "figured sending events one overlapping manual hiding state fixed wrapping event appropriate statement", "d": "11/2016"}, {"body": "thanks atleta document needs updated", "d": "11/2016"}, {"body": "moved vuejsorg", "d": "11/2016"}, {"body": "pr created", "d": "11/2016"}, {"body": "got error trying watch literal path spaces still work thought act square bracket property access syntax", "d": "1/2018"}, {"body": "could ask question forum gitter try use issue tracker bug reports feature requests problem could use computed properties could take look doc", "d": "11/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "11/2016"}, {"body": "thanks example", "d": "11/2016"}, {"body": "please specific expected behavior think wrong", "d": "11/2016"}, {"body": "example use cont divuipopup animationend event cont number executions click animate button result ok count plus see count plus twicebecause divuipopupanimate also listen animationend event see eventtarget element divuipopup listen animationend event", "d": "11/2016"}, {"body": "nt expected behavior controls outer transition inner transition makes sense fire two events", "d": "11/2016"}, {"body": "animationend bind divuipopup", "d": "11/2016"}, {"body": "seemingly problem", "d": "11/2016"}, {"body": "vue nt use keywords sure vue code error stack trace look like", "d": "11/2016"}, {"body": "rambopanda need change babel config", "d": "11/2016"}, {"body": "shusiwei using code directly dist folder error location", "d": "11/2016"}, {"body": "sigh browsers use phones tests pass stock android browser even", "d": "11/2016"}, {"body": "unfortunately wontfix phones listed years old nt seen android browsers demonstrate behavior vue support list browsers conform spec spec presence variable name use property identifier cause parsing errors", "d": "11/2016"}, {"body": "bug wrap content within div", "d": "11/2016"}, {"body": "anishdcruz ok closing issue difficult one root rule nt ban reactjs way like", "d": "11/2016"}, {"body": "blog might help", "d": "11/2016"}, {"body": "issued similar situation fixed anyway difficult considered bug feel free close", "d": "11/2016"}, {"body": "case since velse vif conditions false", "d": "11/2016"}, {"body": "problem without code analysis expressions fact near impossible depends component runtime state way tell whether really return one element get around either using dynamic component turning conditional branches components use render function instead", "d": "11/2016"}, {"body": "webpack freezes run using yarn tried reinstall dependencies without success back worked thanks", "d": "11/2016"}, {"body": "jbruni try build vue latest source see resolves issue", "d": "11/2016"}, {"body": "ok think know problem fix soon", "d": "11/2016"}, {"body": "jbruni pushed fix please try build dev branch source let know", "d": "11/2016"}, {"body": "thanks evan home back office tomorrow test first thing morning", "d": "11/2016"}, {"body": "tested using release works thanks lot amazing work sincerely got curious know edge case case templates got caught issue", "d": "11/2016"}, {"body": "passed render functions bound instance rendered required vue vnodes correct render context exposed global need every component fact verbose", "d": "11/2016"}, {"body": "maybe trying hard make similar react", "d": "11/2016"}, {"body": "use case trying implement react styledcomponents ca nt pass event handlers since bound parent instance tt would love able far javascript style vuejs components import insertcss insertcss import hash shorthash import tags htmltags import vue vue cache duplicated styles const cache new set get tag name like div return function accepts styling param string element valid html tag name return function style str function styled tagname return style gt const classname syntactic sugar call instead tagsforeach tag gt styled tag styled tag expose export default styled", "d": "1/2017"}, {"body": "rusintez get listeners second argument stateless render functions", "d": "1/2017"}, {"body": "completely forgot thanks", "d": "1/2017"}, {"body": "fyi vue removes comments template parsing supposedly conditional content would show either probably nt want use vue compile conditional comments", "d": "11/2016"}, {"body": "well good know thanks fix", "d": "11/2016"}, {"body": "hi thanks filling issue vue nt angular magics writing executed plain javascript errors thrown trying access properties nullundefined therefore solution simply would javascript translated like try jsx instead templates easily use party libs get deep object property namely lodash get written", "d": "11/2016"}, {"body": "use get templates import get lodashget vueprototype get get get people namefirstname", "d": "11/2016"}, {"body": "happening consistently across browsers chromeffsafari really weird", "d": "11/2016"}, {"body": "reason vue parses indom template asis everything already correct namespace vue parses template string regenerates dom based generated virtual dom special treatment svg namespace embedded xhtml elements inside foreignobject generated svg namespace instead xhtml fixable adding detection parser", "d": "11/2016"}, {"body": "thanks fix works makes happy", "d": "11/2016"}, {"body": "please open another issue issue far list", "d": "12/2016"}, {"body": "hmm supposed manually mount inside another alreadymounted vue instance incorrect usage fact happens work vue coincidence support register child proper child component parent use parent template", "d": "11/2016"}, {"body": "vue instance root level reactive properties static declared component option add dynamically runtime fact see warning console second example case directive require user declare property needs access modify", "d": "11/2016"}, {"body": "possible make first second parameter dynamic example passing argument binding vueset vnodecontext datapropertysubproperty content elval", "d": "12/2016"}, {"body": "unfortunate though dynamic platform dom component written like someouterscopevariable somedynamicvariablename would add technical details outer dom technical reasons seems attribute evaluated static dom attribute change parsing template thought could use scoped slots requirement unfortunate", "d": "12/2016"}, {"body": "unfortunately expected behavior due patch works simply add key ifelse blocks differentiate", "d": "11/2016"}, {"body": "possible could also mentioned docs vif know key caveat listed list rendering specifically mentioned vfor came across solution using key attribute thinking list rendering case thought probably patch strategy turns right mentioned vif docs", "d": "11/2016"}, {"body": "yes absolutely", "d": "11/2016"}, {"body": "due nature cyclic dependencies module system diagrampath imports block block nt finished evaluating yet turn depends diagrampath gets empty object instead using dynamic lazyload block diagrampath", "d": "11/2016"}, {"body": "would nt nice put note", "d": "11/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "11/2016"}, {"body": "please check link issue reporting guidelines", "d": "11/2016"}, {"body": "nvkhai fixed link", "d": "11/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "11/2016"}, {"body": "see update code gen work without statement successful happy quality create pr", "d": "11/2016"}, {"body": "robertwhurst thanks might prove difficult would require decent rewrite current compiler implementation said module system bundler using application assume webpack reason directly importing files else webpack use plain syntax avoid forcing component module strict mode", "d": "11/2016"}, {"body": "understand experience working codegen know lot work might worth us solution work aim follow coding standards much possible avoid performance penalties removing good start believe always deoptimizes code inside statement track sources variables within block using webpack moment want avoid exporting vue files ui shared parties want able share components easily possible also wrap compiled vue templates umd wrappers using babel idea allow parties without build system simply add components need via script tags import statements provided vue page", "d": "11/2016"}, {"body": "robertwhurst yes would definitely great get rid appreciate willingness work let outline reasons first place use primarily gets rid need parsing scope analysis javascript expressions embedded inside templates thus greatly reducing size complexity codegen since template compiler included standalone build runs browser payload size still important concern course achieve removal employ proper ast analysis expressions would entail full sized javascript parser would bloat compiler size significantly one option would ship current compiler using standalone build use separate compiler build tools however would result two parallel compiler implementations greatly increase maintenance cost surface potential bugs probably better option would create postcompiler alreadygenerated render function code essentially optional phase turns code contains code nt rewriting identifiers makes decoupled base compiler use build phases without worrying size could also turned improve compilation performance concern implementation wise could technically achieved via babel plugin open alternatives familiar ideally standalone npm package since purely code transform hard coupling vue source code", "d": "11/2016"}, {"body": "digging working around currently seeing problem looking issue vuejsvueloader far luck situation webpack bundling librarytarget yet still added bundled code idea", "d": "11/2016"}, {"body": "linusborg strange looking forward possibility clearing whole class error sounds good going try babel plugin approach first back soon", "d": "11/2016"}, {"body": "made quick test see perf implications result would like least option decide whether run vue code strict mode", "d": "11/2016"}, {"body": "vuetemplaecompiler package uses strict mode could lead exports precompiled components strict mode desribed experience even build setup edit disclaimer far mostly guessing part vue uses rollup build process rollup adds strict mode imports like webpack according rollup docs disabled nt current build config entry web compiler uses imports would suspect create problems templatecompiler could disable strict mode rollup", "d": "11/2016"}, {"body": "made bit progress last light post demo next days decided go standalone module idea used alone wrapped module use babelwebpackbrowserifyetc", "d": "11/2016"}, {"body": "robertwhurst happened realize could done efficiently hacking buble since already using custom build buble able implement removal today dependency fresh install get render functions without default still thanks interest contributing", "d": "11/2016"}, {"body": "ah cool cheers", "d": "11/2016"}, {"body": "amazing work", "d": "11/2016"}, {"body": "vue replaces target element use indom templates may conflicting bootstrap handles modal element although case nt need nt bootstrap vue app everytime modal opens call directly everything works fine", "d": "11/2016"}, {"body": "thanks quick response change code accordingly", "d": "11/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question literally recreating input every time text changed give items identifiers key using instead alternative could track items reference", "d": "11/2016"}, {"body": "fixed already", "d": "11/2016"}, {"body": "\u554a\u8fd8\u662f\u7a7a\u95f4\u5f88\u5927", "d": "11/2016"}, {"body": "hi elaborate use case seems using compiler nt type definition use compiler package vue work flow nt know whether flow support reading typing packagejson doc says might need submit pull request flowtyped official repo", "d": "11/2016"}, {"body": "vue internal flow annotation intended public consumption relies alias configured vue may submit public flow definition flowtyped future currently available yet", "d": "11/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests encourage use dedicated gitter forum ask questions discussion thanks", "d": "11/2016"}, {"body": "using first element seems play important role issue sufficient set remove directive though everything rendered fine", "d": "11/2016"}, {"body": "seems bug first glance thanks pvorb reporting", "d": "11/2016"}, {"body": "calling exptostring trim vuecommonjs parseexpression trick case", "d": "11/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "11/2016"}, {"body": "closing due inactivity edit btw tried repro luck", "d": "11/2016"}, {"body": "internal util bindings immutable design messing vue internal utils anyway", "d": "11/2016"}, {"body": "current public api nt support array yet could useful", "d": "11/2016"}, {"body": "agree app set top box remote nt always line computer", "d": "11/2016"}, {"body": "closed via", "d": "12/2016"}, {"body": "file importing standalone build assumes browser environment regardless nt think possible involves nontrivial effort vue ssr php package node package dependencies eg solved bundling whole package dependencies one file features rely nodejs native modules like even get normal ssr working would nt able use stream mode basically something planning work definitely open community contributions anyone wants make work", "d": "11/2016"}, {"body": "also major decision blocker react vuejs react plugin works perfectly allocate sometime next week look get workaround anyone progress use case please inform topic", "d": "12/2016"}, {"body": "severside rendering without node dependency would huge improvement us backend heavily depends python stack plugin would come handy", "d": "12/2016"}, {"body": "progress made area laravel community really needs something like vuejs concerned", "d": "1/2017"}, {"body": "vue used php laravel sacrifice seo app need seo serverside rendering rely nodejsif supported vue huge help laravel community", "d": "2/2017"}, {"body": "progress made area", "d": "3/2017"}, {"body": "cool would blade directive rendervue myvuecomponent prop gt", "d": "3/2017"}, {"body": "maybe try package sure yet", "d": "3/2017"}, {"body": "", "d": "4/2017"}, {"body": "definitely need workaround settimeout missing things nonnode implementations trying render vuejs app gobased js environments day nt work reason settimeout missing", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "could please revisit issue", "d": "4/2017"}, {"body": "would really awesome", "d": "4/2017"}, {"body": "please spam answer clear open community contributions something share please commenting comment say updates equivalent phrase issue may also interesting", "d": "4/2017"}, {"body": "looks like nearly calls settimeout using either defer function call immediately called next pass event loop ie transition effects would irrelevant server side rendering vue solution would implement stack push functions run next tick instead using settimeout stack nt hard write personally rather like pattern using push await things nt want blocking could solved outside vue using event loop implementation support function already really need create loop settimeout amp setinterval implemented work php ultimately code need resolve point ie resume synchronous execution events advanced could tricky may argue valuable javascript let timeouts windowsettimeout cb delay args gt timeouts timeoutsconcat cb args end datenow delay require actual code const endtimecompare end end b gt b timeouts timeoutssort endtimecompare timeoutslength gt sleep const runnow timeoutsfilter end gt end lt datenow const cb args runnow cb args timeouts timeoutsfilter timeout gt runnowincludes timeout sort endtimecompare writing bed midnight nt run sure need make lesspretty works older engines sleepy get general idea please let know idea solves everyone looking make repo put something includes setinterval", "d": "9/2017"}, {"body": "may interest finding thread future serverside rendering laravel vuejs", "d": "4/2018"}, {"body": "sevenecks legendary tada thank", "d": "4/2018"}, {"body": "true possible compiled javascript loop render function runtime definition usage posted seems bit hacky sure equivalent achieved datadriven approach rather patching builtin directives another topic feel free open discussion forum", "d": "11/2016"}, {"body": "seems result bug reading vue parsing indom template returns placeholder string textarea empty instead empty stringnull see way work around bug", "d": "11/2016"}, {"body": "bug webruntimewithcompilerjs directly use", "d": "11/2016"}, {"body": "ie bug happens innerhtml outerhtml use outerhtml get indom template really functionality replace", "d": "11/2016"}, {"body": "linusborg know need find core members confirm fix", "d": "11/2016"}, {"body": "believe intended behavior computed property bar dependency computed property foo foo dependency test therefore whenever button clicked test updated anything dependency updated chain", "d": "11/2016"}, {"body": "dstrang pointed expected correct behavior", "d": "11/2016"}, {"body": "expected state change method state change triggers rerender ends infinite loop method calls templates render functions pure produce side effects state changes", "d": "11/2016"}, {"body": "twoway binding component rerenders things changed overwritten data nt change need set adding link", "d": "11/2016"}, {"body": "nt dom attribute equivalent mind nt think really vue concern could write directive handle quite easily though", "d": "11/2016"}, {"body": "saw requesting vue made oneline directive example also added untested commented vue version", "d": "11/2016"}, {"body": "problem value js used represent visual state may totally depend use case app logic probably better handle code sirlancelot suggested", "d": "11/2016"}, {"body": "fair checkboxes already support binding maybe worth adding", "d": "11/2016"}, {"body": "according indeterminate distinct state checked unchecked instead obscures actual state checkbox without changing thus candidate rather things consider bindings bind attribute attribute represents default value current value default value attribute would hijacking bind default value attribute dom rehydration ssr may awkward final word proceed core userland", "d": "11/2016"}, {"body": "simplesmiler still think belongs userland fact simply simple custom directive would", "d": "11/2016"}, {"body": "way set something like something like", "d": "7/2017"}, {"body": "rhyek use way oneway binding could nt find way create proper getter get value", "d": "10/2017"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "11/2016"}, {"body": "linvar works correctly vuejs new vue el test data headers methods onclicked function thisheaderspush html", "d": "11/2016"}, {"body": "luventa sorry mention version used used csp version vuejs chrome extension failed find get csp version vuejs vuejsorg installation guide use npm install vue trying get runtime version nodemodulesvuedist directory also tried git clone vue wan na build src npm install dependencies failed link issue reporting guidelines provided try use insert code syntax", "d": "11/2016"}, {"body": "linvar use element case", "d": "11/2016"}, {"body": "simplesmiler works thanks", "d": "11/2016"}, {"body": "rerender default function nuts returns object literal", "d": "11/2016"}, {"body": "hi nt think two issues changing nuts property watch still fired", "d": "11/2016"}, {"body": "doonetheprune nuts prop default function return fresh object time changed internally", "d": "11/2016"}, {"body": "defcc agree default function return fresh object however nt think return new object every time value property changed component created look fiddle nuts property affected value property please could reopen", "d": "11/2016"}, {"body": "caused render system input value changed app rerenders top bottom bla component also affected add updated function demo better understanding", "d": "11/2016"}, {"body": "defcc come nuts property string watch fired", "d": "11/2016"}, {"body": "explained could take look", "d": "11/2016"}, {"body": "defcc looked fiddle see similar underlying issue might issue however highlights problem scenario lot likely occur also reading comments issue makes really worried dont plan fixing issue without trying harsh vue think great basic bug like means looses lot credibility came across first started using vue would stopped using", "d": "11/2016"}, {"body": "component name notice conflicts causes infinite render loop", "d": "11/2016"}, {"body": "bug vue ok know close", "d": "11/2016"}, {"body": "behavior design could got warning dev mode", "d": "11/2016"}, {"body": "read key correct behavior proper key usage", "d": "11/2016"}, {"body": "thanks dealing bug like whole weekend look keys", "d": "11/2016"}, {"body": "thanks saved day", "d": "2/2017"}, {"body": "like idea maybe simply make normal accept returning promise", "d": "11/2016"}, {"body": "long nt break existing code fewer keywordsnames remember", "d": "11/2016"}, {"body": "several quick thoughts user declare default value promise resolved vue support builtin throttle promise handle events like keychange mousemove vue support builtin callback certain promise resolved inspect whether async property resolving resolved might need proposal", "d": "11/2016"}, {"body": "herringtondarkholme good points thinking almost think issues mentioned would better solved rx vuerx original example written simplified sake discussion rx version obviously verbose simple promise version get almost everything herringtondarkholme listed default value throttling sideeffect subscriptions cases eliminate need detecting promise resolves fetching commonly used little helper simplified js long name precisely describe vueprototype reactivelyfetchasobservable function urlorgetter return watchasobservable urlorgetter switchmap url gt rxobservablefrompromise fetch url new vue data lang en subscriptions return reactivelyfetchasobservable gt return lang thislang startwith default settings sum think async computed pattern simple elegant basic use case may sufficient deal full scale complexity async operations shoehorn async computed pattern deal cases one one stage probably better going rx unfortunately closing note saying bad idea think still good idea let library evolve maybe land good balance probably best idea core", "d": "11/2016"}, {"body": "get example work properly add watchasobservable", "d": "9/2017"}, {"body": "common case dependent properties instance dropdown dropdown b values depends selected value dropdown input c might defaulted based selected value dropdown b imagine dependent values retrieved async calls rest api ca nt use anymore since asynchronous yes implement rxjs trivial way learning vue one first issues trying solve found solution could nt understand days came back issue knowledge reactivex understand solution ok point nt style way solve common problem would less verbose readable wo nt require additional knowledge probably vue core library might vuerx even third party library using vuerx behind scenes could provide really elegant way solve problem", "d": "10/2017"}, {"body": "quick search github use risk", "d": "10/2017"}, {"body": "sorry probably nt clear enough library one first found made wondering scenario nt handled similar way vue core official vue library expecting point similar solution would vue official libraries", "d": "10/2017"}, {"body": "please refer strive keep api surface small scenario nt handled similar way vue core official vue library implemented user land without hack nt hard users use existing projects would also argue halfbaked would nt suffice users need fully implementing might introduces simpler concepts smaller code size async computed rx vue binding imagine dependent values retrieved async calls rest api use case might done without async probably store value another field defining one property extract value handling async setting value callback", "d": "10/2017"}, {"body": "driveby impressions coming aurelia durandal found bizarre expected work surely updating data api responses queried based user input common usecase computed properties would cache computed desired types uses would forced reroll features scratch structure updates based input caches results change exactly need async query use case might done without async probably store value another field defining one computed property extract value seen suggestions use hook startup fill data contrast experience usecases types updating properties way around often querying small sets much larger datasets would impractical load startup edit realise exists probably suits cases find angularjs style clunky though", "d": "3/2018"}, {"body": "reading discussion went rxjs try async computed subscriptions handling async properties use mergemap", "d": "3/2018"}, {"body": "native solution user declare default value promise resolved vue support builtin throttle promise handle events like keychange mousemove even promisebased implementation throttled events makes sense particular scenarios imho tangential main use case would sufficient add minimal core implementation lets asynchronously fetch data absolute minimum amount boilerplate see clever unexpected semantically correct uses people put vue support builtin callback certain promise resolved provide scenario necessary opposed normal vueagnostic use promises seems good way without expanding api surface inspect whether async property resolving resolved default value callback resolve good enough core minimal use case overall vueasynccomputed step right direction core support would major step forward seeing promises asyncawait core part language workflow", "d": "5/2018"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "11/2016"}, {"body": "ok thank maybe bug think need rerender entire list", "d": "11/2016"}, {"body": "use property vue tracks unique keys rerendering lists nt provide keys complete rerender", "d": "11/2016"}, {"body": "please check think issue fixed pr", "d": "11/2016"}, {"body": "related geojson duplicate amp fixed", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "could use computed property", "d": "11/2016"}, {"body": "kinda defeats point using filter though nt want declare computed properties nt want declare duplicate methods across multiple components", "d": "11/2016"}, {"body": "callumacrae declare method mixin use vueprototype like vueprototype linkhandler function value use", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "iagafonov workaround filters suggest either able able use filters would mean allowing interpolations attributes filters removed current behaviour confusing", "d": "11/2016"}, {"body": "discussed extensively api design thread please read thread arguments raised already filters originally removed added back common use case due community request going change foreseeable future", "d": "11/2016"}, {"body": "work", "d": "11/2016"}, {"body": "thank changing mind", "d": "11/2016"}, {"body": "edit anyone simply could nt nt bother click link read docs", "d": "11/2016"}, {"body": "able get standalone version using path aliased webpackbrowserify", "d": "12/2016"}, {"body": "michaelenger method works believe discouraged since tools party libraries may import vue well may cause app load runtime standalone builds time lead errors fnlctrl believe issue reopened either documentation unclear nt official way importing standalone build vue without build tool", "d": "2/2017"}, {"body": "nt official way importing standalone build vue without build tool anything without build tool currently implementation modules browser", "d": "2/2017"}, {"body": "well similar import functions come libraries using electron renderer process access node function currently right seems work", "d": "2/2017"}, {"body": "fnlctrl everyone expert javascript compilers day time includes packages server side client side complication descriptive documentation adding links pointing developers right direction vue great library popular bound beginner advance developers using", "d": "2/2017"}, {"body": "jasonszhao well since using build tools perfectly fine warning docs meant usage build tools find docs hard understand please tell us paragraph sentence think needs improved questions use forums gitter stackoverflow something like nt going help anyone also believe link docs posted already answered original question vue nt require advanced developer needs read docs carefully like lib", "d": "2/2017"}, {"body": "fnlctrl well frankly doc far clear importing full version one using webpack browserify example currently toying scaffold uses gulp babel works fine npm modules importing gets runtimeonly version get full one requires importing documented well quite documented really sure know pretty much purpose umd modules work unimaginable scenarios still took several rereads installation page landing issue figure production uses use webpack cli tool great users pointed way using vue scenarios directly given structure installation page documentation easy say paragraph needs change section full runtime versions likely candidate one insert paragraph using gulp brunch import vue babel config using scaffold finally chrome actually full browser implementation also considered", "d": "9/2017"}, {"body": "fyi bundler alias possible always preferred instead directly importing file path dependencies may using alias risk multiple copies vue loaded time personally think build explanations provides enough information users determine correct build use depending scenarios honestly sure missing note scope vue docs explain es modules choice bundlers work cover every possible case vue potentially used focus recommended tooling suggest users without enough tooling experience follow recommended setups", "d": "9/2017"}, {"body": "hi thanks filling issue first scoped css css related thing nt vue concern would vue feature reactangular etc supposed part build process currently scoped css vueloader feature like framework build tool requires compilation suggesting adding css scope runtime nt possible vue never aware css files therefore suggestion remains", "d": "11/2016"}, {"body": "see thanks reply could possible vueloader go take look source code suggesting adding css scope runtime believe case done compiletranspiling css code way done right right vueloader appends unique attribute append prepend parent element selector anyways since regardless would done would likely low prio issue team considering much important featureissues would work forking loader look thanks reply", "d": "11/2016"}, {"body": "believe case done compiletranspiling css code way done right sorry misunderstood feature request would mind opening issue vueloader repo", "d": "11/2016"}, {"body": "sure thing thanks", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "order switched arrays consistent javascript objects consistent arrays object iterators order switched back would major breaking change", "d": "10/2016"}, {"body": "simplesmiler pointed intended major breaking change switching back would another breaking change existing users unfortunately happen", "d": "10/2016"}, {"body": "wanted add html attributes placeholder input box without adding placeholder new prop wanted bind keypress event input box without adding emit keypress component basic ideas component properties parentchild communication please explicitly declare props need events emit", "d": "11/2016"}, {"body": "basic ideas component properties parentchild communication please explicitly declare props need events emit technically impossible think must feature sometimes main dom element nt highest element component template ca nt know attributes added component want attributes transferred marked element fnlctrl rethink feature please help many framework developers", "d": "1/2017"}, {"body": "nt think implicitly routing html attributes event bindings internal html nodes good idea fact see behavior causing major headaches implicit bindings never good idea opinion trying pass html attributes directly component without declaring props also terrible idea components html nodes components treated want html node write html node use case easily solvable simply explicitly declaring attributes props populating component could also computed value return default event one props undefined", "d": "1/2017"}, {"body": "using correct createelement syntax fixed transition names specified translated works fine provide code snippet since possible put jsbin please follow issue", "d": "10/2016"}, {"body": "fnlctrl found readme babelplugintransformvuejsx note builtin vue directives supported using jsx never use vshow jsx guess builtin directives supported jsx update readme", "d": "11/2016"}, {"body": "actually builtin directive works jsx make pr repo", "d": "11/2016"}, {"body": "good", "d": "11/2016"}, {"body": "hi thanks filling issue clarify mean build dev using npm build system like webpackbrowserify need provide github repo us look", "d": "10/2016"}, {"body": "yes using vue webpack kit works nt repo private", "d": "10/2016"}, {"body": "using vue webpack kit vueloader would require vue standalone version dev runtimeonly version build assume caused problem using option components need use vue standalone version please check section", "d": "10/2016"}, {"body": "right exception would appreciated template var supported client making use", "d": "10/2016"}, {"body": "toberorla normally would build exceptions messages stripped dev wo nt throw exception create issue vueloader later", "d": "10/2016"}, {"body": "interpolation within attribute removed please use instead refer migration guide", "d": "10/2016"}, {"body": "thanks", "d": "10/2016"}, {"body": "iterate components need provide key otherwise vue implicitly keys index instance actually dies fact last one list unless instances stateless causes issues like one describe demo", "d": "10/2016"}, {"body": "hi thanks filling issue repro link nt seem show problem please fix", "d": "10/2016"}, {"body": "apologies corrected fiddle", "d": "10/2016"}, {"body": "iframe rendering fine also original src wo nt work inside jsfiddle changed bingcom", "d": "10/2016"}, {"body": "original src might causing problem double check get home", "d": "10/2016"}, {"body": "yes sorry nt read src carefully enough believed normal twitter embed frame looks like kind custom ajax call breaking rendering apologies wasting time", "d": "10/2016"}, {"body": "update tried another project nt issues suspect unsure proceed component used two way thus far issue device app pure presentation datafunctionality floorplan data editor cms cms needs use compiler mode since need populate props php cms usage indexhtml actual app usage indexhtml used route component previously vue able access anything component via however seems possible using compiler mode html level need cms dump php data confirm expected behaviour vue", "d": "10/2016"}, {"body": "also get event tho always name property component importing log name clearly visible import floorplanviewer componentsfloorplanfloorplanviewer consolelog floorplanviewer floorplanviewername floorplanviewer export default components floorplanviewer", "d": "10/2016"}, {"body": "created new component extra code name imported behaviour methods fail use name register explicit still nt work", "d": "10/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "10/2016"}, {"body": "think worked whats going nt know one component breaks one nt version ive always array works vue finds property however unexplained reason vue finding thumbnails component viewer even tho definitely trial error tried shorthand vue camelkabab conversion works fine weird thing nt array method used work work works one component even array method dropped nt make sense getting error viewer component could easily dismissed viewer missing name prop typo always know vue could use array method object method cant find stated vue docs array method dropped favour object method ways thats probably better", "d": "10/2016"}, {"body": "closing original issue seems resolved reproduction general bug provided", "d": "11/2016"}, {"body": "could achieved directives decision remove intentional directives meant used lowlevel dom access things like meddling vmodel functionality explicitly job anymore cases want directive rather use component instead specific situation need help happy help forumvuejsorg", "d": "11/2016"}, {"body": "well components powerful indeed lacks one thing entirely modularity instance want add multiple behaviors element ie select focus select escape value nt changed call function change amp blur make input cancellable manage input mask via third party plugin etc using component mix logic behavior callbacks gets messy quickly repeat another element needs subset behaviors components understood correctly recreate handlers slight variations keeping dry hand directives tag element gets desired behavior way keep logic one place html template semantic readable hence maintainable sounds good think feature request still valid since unsuccessfully fail see advantage components directives kind uses perhaps wrong possible glad corrected indepth explanation directives evil want different angular lastly since possibility changing directive still exists albeit bit convoluted add additional parameter would break legacy code save us hassle side note unfortunately forumvuejsorg helpful cf question subject eight days ago remains without answers day perhaps use cases edge cases", "d": "11/2016"}, {"body": "pretty lowlevel feature demonstrated already working code achieves want general philosophy leaving cases userland unless extremely common use case", "d": "11/2016"}, {"body": "adding many usecases mentioned done directives mentioned would require kind reference asked would rather think would oddproblematic one directive writing model anyway unless different events eg cancelable example could ever use one directive accesses model otherwise would get way point behaviour requires access model make custom component add directives eg something like vfocus component need", "d": "11/2016"}, {"body": "alexandrebonneau another note even provided official api set value vmodel expression references would mean directive uses method would dependent vmodel present problem many cases want ca nt use vmodel eg custom input components using vuex use pluginlib works input conflicts vmodel sure many cases would rather add event listener expression set value directives would break lowlevel functionality examples might better solve low level dom methods eg writing value input manually triggering input dom event concerned browser compatibility wo nt work ie lt couple npm packages provide compatibilty older ie versions", "d": "11/2016"}, {"body": "thank input pun intended see update code use way lowlevel inputs also reference directive hook signatures imagine could set default attached element directive declared though remaining problem maintainability still able make sure multiple directives play well together access", "d": "11/2016"}, {"body": "also vmodel reference directive hook signatures imagine could set vmodel null default vmodel attached element directive declared though thinking redusability compatibility would often situation start using vmodel later refactor use event instead point directives relying vmodel expression would stop working", "d": "11/2016"}, {"body": "use parent", "d": "10/2016"}, {"body": "oh vif dynamically updated vuejs worked", "d": "10/2016"}, {"body": "shmasya need declare data data function like bellow info could take look", "d": "10/2016"}, {"body": "defcc use vue set", "d": "10/2016"}, {"body": "ok", "d": "10/2016"}, {"body": "could please provide jsfiddlejsbincodepen demonstrate issue", "d": "10/2016"}, {"body": "seems webpack treats imported object read", "d": "10/2016"}, {"body": "ktsn think esspec conforming behavior also new spec properties writable easiest workaround default export typescript export default import components components", "d": "10/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks", "d": "10/2016"}, {"body": "problem within watch two things make deepequal val amp oldval emit content really changed nt use literals props maybe pass computed value instead", "d": "10/2016"}, {"body": "using object literals template prop indeed warned since means creating new object every time component updates though ca nt seem think way detect runtime maybe add warning docs chrisvfritz", "d": "10/2016"}, {"body": "fnlctrl parsing template could add objectarray literals component instancescoped cache reference remained updates", "d": "10/2016"}, {"body": "chrisvfritz hmm seems possible familiar template compiler defcc ideas", "d": "10/2016"}, {"body": "seems impossible vue parse simple regex scanner recursive descendant parser optimized payload size real javascript expression parser included source expression like supported imho adding warning doc probably enough longer term think check better integrated vuetemplatevalidator", "d": "10/2016"}, {"body": "think need cache literals misusage binding props maybe could introduce warning instead parsing dev mode", "d": "10/2016"}, {"body": "use case clear example changing number reaches introduce warning check using object literals quite usual class style bindings warn user kind forcing fix nobody wants leave warning console think good tell user use computed property instead wanted point", "d": "10/2016"}, {"body": "means nondynamic value object literals example", "d": "10/2016"}, {"body": "think objects arrays problem though pass reference js strings numbers booleans immutable equal values always share reference either way like avoid adding notes like docs even nt fix edge case resulting behavior nothing vue specifically would expected behavior js lib render functions", "d": "10/2016"}, {"body": "nt think way prevent happening original fiddle expected behavior given render system works warning literal objectarrays tricky thing could valid usage long user nt attempt mutate value believe already warned docs", "d": "11/2016"}, {"body": "also encountered problem code spend lots time debugging without help warning also search docs keyword got two results one even give example using object literals html think static prop useful many conditions static props action vue line expectations little confusing vue although know works also noticed modifier removed vue nt think modifier breaks oneway binding contrary think helpful vue perform static prop idea bringing back", "d": "11/2016"}, {"body": "per manual properties start proxied vue instance may conflict vue internal properties api methods access vm dataproperty print value", "d": "10/2016"}, {"body": "thanks explanation pzanitti", "d": "10/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted forum stackoverflow thanks", "d": "10/2016"}, {"body": "thanks pzanitti resolved issue future reference corrected version explanation pablo enzo zanitti pzanitti anyway problem put function gon na behave sort like computed property first ca nt array arraylength value bounds second set computed property every time arraylength changes computed property going change watcher going fire", "d": "10/2016"}, {"body": "think considered bug causes inconsistence client side render server side render looking props declared child component undocumented behavior document clearly", "d": "10/2016"}, {"body": "hi special module available elements components nt think undeclared props issue problem compiler print render functions text problem runtime every instance style module patch element module find vnode element set style case server rendering render function trigger module code thus bug quite hard fix renderstyle inspect parent node parent node indicates component tag append styles parent", "d": "10/2016"}, {"body": "exactly typescript equivalent use", "d": "10/2016"}, {"body": "difference way transpile typescript babel exported commonjs style need write typescript like herringtondarkholme said", "d": "10/2016"}, {"body": "thanks guys guess common knowledge kind new typescript sat oct katashin notifications githubcom wrote closed receiving authored thread reply email directly view github mute thread", "d": "10/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide reproduction repo github thanks", "d": "10/2016"}, {"body": "advice replace export default moduleexports fixing issue", "d": "11/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "11/2016"}, {"body": "nt create router instance please refer docs", "d": "10/2016"}, {"body": "create router effect vue instances created vueuse vuerouter cause components fail router created anyway created router made commit still work", "d": "10/2016"}, {"body": "vueloader nt support usage html moduleexports require users default simply change html everything work", "d": "10/2016"}, {"body": "great thanks suggestion made changes still luck", "d": "10/2016"}, {"body": "tested fix computer nt error anymore problem still facing", "d": "10/2016"}, {"body": "import vue vue import vuerouter vuerouter import users usersvue vueuse vuerouter commenting make work const routes const router new vuerouter routes const app new vue el root router components users render h gt h users still error commenting vueuse vuerouter makes user component render properly", "d": "10/2016"}, {"body": "try putting import statement still investigating works minimal repro typescript import vue vue import vuerouter vuerouter var users vueextend users options render h gt h hhhh vueuse vuerouter use break render const app new vue el root components users users render h gt h users", "d": "10/2016"}, {"body": "yes putting import statement works", "d": "10/2016"}, {"body": "refer point mentioned method vue code think problem adding render later vue totally ignoring options superoptions changes happens move vueuse vuerouter component import", "d": "10/2016"}, {"body": "actually ca nt reproduce provide fiddle", "d": "10/2016"}, {"body": "jsfiddle repro", "d": "10/2016"}, {"body": "thanks imho functions check falsy values warn development work pr", "d": "10/2016"}, {"body": "mean cancel trying interrupt ongoing animation make snap end state turn transition nt trigger anymore either case setting bound class empty string wrong way way interrupt already triggered transition revert toggling state controlling element inside turning could probably add prop transition components workaround using toggle transitionwrapped nontransitionwrapped version element", "d": "11/2016"}, {"body": "case turn transition effect point instead remove entire effect use vif may remove one enter leave effect", "d": "11/2016"}, {"body": "looked source code see happening basically code uses false objects array however easily solved evaluating well tough call", "d": "10/2016"}, {"body": "please read doc object must plain native objects browser api objects prototype properties ignored think recursively watched every nested object also plain object", "d": "10/2016"}, {"body": "lgdexter works though whole picture might bit complex pinging decision herringtondarkholme believe different issue object till plain case", "d": "10/2016"}, {"body": "herringtondarkholme point nt purely plain object using array prototype shame might nice add feature future let know guys decide phanan", "d": "10/2016"}, {"body": "thing still determines one", "d": "10/2016"}, {"body": "got similar issue another project replaced", "d": "10/2016"}, {"body": "basically replaced object using everywhere ideal thanks clarification phanan would make tests pass", "d": "10/2016"}, {"body": "working adding extension library mine ran problem well first guess also override use still errors vuejs replaces extended array plain array loosing original object ended something similar vuejs already arrays decorate array functions new functions call needed well defined collections trigger events solution could similarly applied anyone else extended array", "d": "10/2016"}, {"body": "imho best two alternatives support native array collection vue currently roll full schema watching collections set map observable user defined collections", "d": "10/2016"}, {"body": "also another gotcha uses well array class passed object iteration uses need make sure functions amp classlevel variables defined enumerable inefficient workaround use slice like", "d": "10/2016"}, {"body": "objects creating fact arraylike objects real arrays vue supports native arrays arrays real proper subclass array available pass check assumption made multiple locations entire framework adapting involves lot complexity little gain unlikely supported also custom arraylike objects likely far worse performance real arrays personally recommend pattern", "d": "10/2016"}, {"body": "intentional build system configured aliases", "d": "10/2016"}, {"body": "expected nt change reference mutate property way tell property got mutated", "d": "10/2016"}, {"body": "", "d": "10/2016"}, {"body": "html attributes csseinsensitive anything use kebapcase template however work either discuss weithet want change convert kebapcase camelcase like props", "d": "10/2016"}, {"body": "limitation using indom template string templates subject", "d": "11/2016"}, {"body": "going fixed seems like breaks lot people projects also pretty sure one angular", "d": "2/2017"}, {"body": "geoidesic never worked first place could breaking people projects explained applies indom templates wo nt work angular either use indom templates fixed nothing fix work use string templates", "d": "2/2017"}, {"body": "ok apologies waste time picking people saying gitter saying concerned still vue take word great framework loving far", "d": "3/2017"}, {"body": "thanks regularmike suggestion working chrisvfritz", "d": "10/2016"}, {"body": "defcc fixed earlier today docs migration helper pr fix vue warnings reopen merged", "d": "10/2016"}, {"body": "yes pr welcome", "d": "11/2016"}, {"body": "recommended package manager npm use bower whatever reason afaik bowerjson required install vue", "d": "10/2016"}, {"body": "mintui\u8fd8\u4e0d\u9519", "d": "10/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "10/2016"}, {"body": "\u997f\u4e86\u4e48\u5f00\u6e90\u7684 \u53d1\u81ea\u6211\u7684 iphone \u5728 notifications githubcom receiving subscribed thread reply email directly view github mute thread", "d": "10/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue \u95ee\u95ee\u9898 \u8fd8\u662f\u7528 \u7684 \u7684 template \u7528", "d": "10/2016"}, {"body": "wonder whether bug intended feature according doc functional components cheap render imho rendering expense computing reactivity required functional components misleading think functional components magically cheaper less ordinary components functional components reactive props cheap nature preserved users keep function stateless functional yes pure function code stateful pure need state functional components use components", "d": "10/2016"}, {"body": "herringtondarkholme respectfully disagree use date example intended good way check whether render function called inputs unchanged force pure function change output keeping inputs unchanged call impure function case poor man debugging tool point use date thisrender called functional component even necessary bug imo even functional components cheap render free render mean render cases purpose reason exist give us simple way determining whether safely skip rendering safely skip rendering conditions appropriate", "d": "10/2016"}, {"body": "fyi functional components vue eager means render function gets called directly parent render cycle without allocating instance child instance associated easy way perform memoization previous render results desired optimization easily obtainable ensuring correctness possible cases said lack instance functional components pretty big perf win cases especially leaf components used large numbers may best choice complex oneoff components presence instance allows take advantage static optimization reactivity boundary react functional components also always rerendered open suggestions achieved nt see actionable path forward", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks name usually given argument render function necessary name way using jsx hope helps", "d": "10/2016"}, {"body": "working expected creates array loops see could useful form elements element different nature needs function applied however something already achieve manually specifying different references different elements", "d": "10/2016"}, {"body": "example abrove creates array render function working expected vfor loop achieve render function", "d": "10/2016"}, {"body": "add refinfor attribute", "d": "10/2016"}, {"body": "thanks defcc work well", "d": "10/2016"}, {"body": "hi imho desired behavior described noticed understand javascript b b vue relies object identity tell whether change happens fundamental behavior changed easily saves lot bytes diffing algorithm change detection strategy pain point understandable changing behavior incur edge case say passing function props importantly introduce breaking change hard impossible user migrate", "d": "10/2016"}, {"body": "easily achieve adding custom equality check start watcher", "d": "10/2016"}, {"body": "works first update however subsequent update inside component nt update parent", "d": "10/2017"}, {"body": "nonnumeric keys notion order first last element easily achieve converting data numericallykeyed array computed property", "d": "10/2016"}, {"body": "first simplesmiler pointed guaranteed key iteration order objects notion first also depend keys named implementation dependent use case suggest create custom methods like use like", "d": "10/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests stated contributing guidelines thanks", "d": "10/2016"}, {"body": "would need contexts vue", "d": "10/2016"}, {"body": "afaik currently nt way implicitly pass props current options explicitly passing props nt clean object like stores application state plugins kind solve issue applied globally option forced set data root component", "d": "10/2016"}, {"body": "possibly interesting alternative context plugins mixins apply component descendants instead globally", "d": "10/2016"}, {"body": "sebastiandedeyne functional components already context feature though currently normal components nt guess useful normal components get access", "d": "10/2016"}, {"body": "context functional components provides data direct parent nt think provides anything normal component would nt solve problem passing data deeper context react name something different", "d": "10/2016"}, {"body": "think feature nice vue libraries actually implement behavior vuerouter vuex global mixin also use case userland eg passing event bus instance descendants", "d": "10/2016"}, {"body": "get ball rolling needed feature recent project solved writing two mixins apply parent component would create object vm whatever data want next calling child component would recursively look parent component exposes certain property set child component prefixed js vuecomponent parent vuecomponent child", "d": "10/2016"}, {"body": "sebastiandedeyne quite interesting approach maybe something like js var parent expose user var child inject user", "d": "10/2016"}, {"body": "would passing props still unsure utility context vue looks like context issue either solved state management library injecting something every instance plugin inherits context parent overriding properties looking sebastiandedeyne", "d": "10/2016"}, {"body": "let say hypothetically vuex would nt implemented global plugin something applied percomponent basis passing store prop every single child component would counterintuitive way inject object set specific component instance looking mechanism property based something defines necessarily direct parent", "d": "10/2016"}, {"body": "course thing explicitly passing values props think sometimes need implicit data propagation case example writing canvas rendering abstraction library components shapes rect circle etc rendered canvas shape components descendants context component canvas dom element example data shape components updated notify context component event bus rerender canvas need react contextlike feature propagate event bus quite verbose write props shape components needs event bus instance context component instance nt want manage global state management local view concern", "d": "10/2016"}, {"body": "context convenient construct library author coupled components example tabs tabpanes library quite strange lame encapsulate library local context separate global store library author might able take burden passing props components may also interface end users ktsn good example good arguments context feature questions reading react context document disclaimer react user seems cooperation problem vue context also reactive need workaround context update described article still questions context found example context found child parent ancestors closest ancestor resolve context ancestors handle context key conflict seems react context implementation chooses closest ancestor example easily cause problem multiple libraries provide different contexts name say one component receives context another library component collect context properties ancestors pack properties array map also context parent component visible children templates slots children template children slots provide option users choose", "d": "11/2016"}, {"body": "tried toy implementation seems fully doable user land without touching vue core working example source requires token expose injection avoid conflict parts look like api suggested simplesmiler sebastiandedeyne context visibility fully controlled token parent component expose token context visible child another helper method let children decide inject closest context inject contexts ancestors way root agree posva context delicate replaced passing props including default promotes bad practice beginner advanced users need library code implementation overhead lines code", "d": "11/2016"}, {"body": "doubts token understand useful avoid conflicts object needs passed around throughout exactly trying avoid would look like assuming components live separate files ca nt declare token variable top need pass around somehow token required", "d": "11/2016"}, {"body": "token primitive value symbol environment string otherwise declared outside component imported component used context feature need import token intermediate components agnostic token context need passing around token example man middle component refer token component still get user info importing token token globally unique context object retrieved token component specific stored relevant components", "d": "11/2016"}, {"body": "makes sense still believe strings good enough situations though compatible symbols good addition want something strict working package use throughout projects open sourced still prefer see something official either core official package", "d": "11/2016"}, {"body": "think excellent proposal course something like used caution believe deem necessary additional package part core vue", "d": "11/2016"}, {"body": "addition example ktsn approach useful act similar service locator decouple components services avoid require service instance read solution examples using approach herringtondarkholme actually solved issue proof concept implementation beside implementation plugin uses awful global container defining services key value pairs remind data props definition open complex features like querying feature interface", "d": "11/2016"}, {"body": "case anyone interested mean time created package based discussed projects", "d": "11/2016"}, {"body": "support feature request definitely something could used past project something native vue would really cool", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "since doable user land think need core see comment abowe additional information", "d": "2/2017"}, {"body": "started think feature desirably supported official either builtin official plugin usage quite different mentioned testing want replace dependencies imported files vueloader official doc recommends use injectloader however depends specific build system like webpack injectloader quite black magic context feature supported act like dependency injection system naturally test inject mock component easily universally without hacking build system another issue discovered ssr currently bundledrender uses module evaluate code sandbox might performance bottleneck hand use global state nonbundled render context feature recommended way manage global state new state injected every new request", "d": "2/2017"}, {"body": "angulars di flexible complicated hand reacts context simple use feature implemented would expect best two worlds vue still think nt need something simple enough implemented user land", "d": "2/2017"}, {"body": "may simple implement user land main reason want core official package standardised solution", "d": "2/2017"}, {"body": "fyi accomplished using provide inject", "d": "7/2018"}, {"body": "whatever solution arrived please please avoid matching contexts string name instead match context reference prevents naming collisionsconflicts one major thing react fixed first context implementation second reference small context implementation skatejs fairly generic usable anywhere outside skatejs important file containing sample usage main thing note static variables named similarly react context api similar sebastiandedeyne idea notice particular providers passed reference makes entirely unique clash free like react new contexts sample contexts used declaratively like react jsx version vue compiles references could made declarative though personally nt like declare contexts markup viewing javascript already anyways nt benefit much markup opinion sample everything javascript code similar sebastiandedeyne idea notice also get specific context reference avoid strings start putting contexts middle large app name conflict headache especially props inside context different references react jsx completely get around problem", "d": "7/2018"}, {"body": "ah shoot see vue already made mistake provideinject guess easy use let see happens big apps", "d": "7/2018"}, {"body": "another thing note skatejs implementation components react specific props rather reacting context whole value nice prevents unnecessary rerenders components components may care subset props context implementation components subscribed props update prevents needing method example equivalent react propbased subscription also prevent creating new objects every update especially good rapidly updating components fe animations intended nt running memory growth causing garbage collection jank implementation sample context object never changes memory use stay constant animations props primitive values great provideinject referencebased components able subscribe specific properties react apps seen contexts usually objects primitive values people end recreating whole new objects trigger updates updates update components nt even care changed props unnecessary cpumemory waste", "d": "7/2018"}, {"body": "", "d": "10/2016"}, {"body": "vuejs\u6027\u80fd\u4f18\u5316\u6709\u4ec0\u4e48\u65b9\u6cd5\u6ca1", "d": "10/2016"}, {"body": "looking", "d": "10/2016"}, {"body": "see", "d": "10/2016"}, {"body": "using yet besides fact curious solve problem circumstances", "d": "10/2016"}, {"body": "providing repro makes easier us check actually required bug report", "d": "10/2016"}, {"body": "closing due inactivity", "d": "11/2016"}, {"body": "ignoredelements\u6ca1\u6709\u6253\u7b97\u652f\u6301string\u7c7b\u578b\u7684", "d": "10/2016"}, {"body": "use get component use", "d": "10/2016"}, {"body": "works know compiled template going inserted generic solution", "d": "5/2017"}, {"body": "need bundle vuevuexvuerouter along app webpackbrowserify global never affect anything outside app", "d": "10/2016"}, {"body": "might help", "d": "9/2017"}, {"body": "nt need refresh data holds results user hits return feature still discussed another use case", "d": "10/2016"}, {"body": "hold data ai nt data vue responsive mean deep clone result", "d": "10/2016"}, {"body": "yes decide change data use different variables hold results autocomplete suggestions need help encourage open topic forums", "d": "10/2016"}, {"body": "see thanks", "d": "10/2016"}, {"body": "use firame close iframe tag vue work", "d": "10/2016"}, {"body": "yanzhenzeng right", "d": "10/2016"}, {"body": "thanks work yanzhenzeng", "d": "10/2016"}, {"body": "thanks gskema looking", "d": "10/2016"}, {"body": "fix problem later", "d": "10/2016"}, {"body": "color valid css property name object style binding could take look key valid css property name", "d": "10/2016"}, {"body": "defcc variable syntax", "d": "10/2016"}, {"body": "sure supported current style binding supports css properties afaik reopening however members chime ideas", "d": "10/2016"}, {"body": "mistake nt used google", "d": "10/2016"}, {"body": "phanan believe correct syntax", "d": "10/2016"}, {"body": "afaik usage definition syntax sure nt affect main issue anyway", "d": "10/2016"}, {"body": "fixed", "d": "11/2016"}, {"body": "scoped style nt vue feature please open issue vueloader repo instead thanks", "d": "10/2016"}, {"body": "also experiencing works nt work", "d": "10/2016"}, {"body": "updated version suggestions simple schemadocx", "d": "10/2016"}, {"body": "hi marcte thanks proposal however nt think issue best place discussion proposal nt include concrete implementation suggestions vue yet involves serverside data layer scope repo eg meteor apollo feel free submit forum invite members meteorapollo community join discussion", "d": "10/2016"}, {"body": "js vue index \u53bb\u9664\u4e86 \u7528 index \u66ff\u6362", "d": "10/2016"}, {"body": "hi thanks filling issue newcomers nt spend hour searching best practice best practice use whatever ajaxhttp lib suits need example fetchaxios etc even jquery fine ajaxhttp layer frameworkagnostic fact react nt official http lib either unfortunate frameworks like angularember left people impression http libs bundled frameworks truth use whatever like", "d": "10/2016"}, {"body": "quick sidenote another issue vueresource non promise api catch really also nt seem support new fetch api well fetch guess issues vueresource mention project looks official yeah vueresource open issues atm like vuex vuerouter vuevalidator supporting libs provide free use use alternatives lockin many people situations libs may better suited ones maintain", "d": "10/2016"}, {"body": "fnlctrl ok thanks quick answer still think would helpful least mention docs somewhere kind wrongly expected part vue spend hourse searching best lib task still sure one choose cases like helpfull tips experience found superagent qwest reqwest bunch others yea best etc linusborg talking example readme modern promise way would would nt agree", "d": "10/2016"}, {"body": "would agree ways speccompliant would work example hand yet different catch catch errors whole chain ofthen calls multiple error callback second argument catches errors previous stage", "d": "10/2016"}, {"body": "found superagent qwest reqwest bunch others yea best etc universal way deciding lib better comparing github starsissues count npm downlods", "d": "10/2016"}, {"body": "ask team members prefer would get three different replies minimum", "d": "10/2016"}, {"body": "fractalf use fetch fetchival", "d": "10/2016"}, {"body": "bestsuperlative subjective always misused opinion using best makes comparisons feeling like competition", "d": "10/2016"}, {"body": "ajaxhttp layer frameworkagnostic ajax extremely important part web days basically saying users find way making framework work ajax whole point using framework nt figure things know ajax dom manipulations etc would use framework first place", "d": "1/2017"}, {"body": "ajax extremely important part web days basically saying users find way making framework work ajax really saying vue viewlayer library complete framework vue plays nicely pretty much ajax solution axious superagent vueresource ajax integrating vue works pracitcally ame import app use per readme nt see advantage importing vuespecific ajax solution many people would new api learn either way additional value offers nt install import fact retired vueresource exactly reason offered little benefit using something mature like ajax axios superagent also people need personally prefer people prefer different solutions nt want force one solution people might need generalpurpose ajax lib use framework technology clientside libarary example meteor feathersjs apollojs situations would unnessessary bloat include vue ajax implementation final bundle nt need provide ajhax support core extension wer back first point lack value compared established solutions", "d": "1/2017"}, {"body": "vue viewlayer library complete framework case makes perfect sense thanks followup", "d": "1/2017"}, {"body": "hello thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum stack overflow gitter happy help", "d": "10/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks", "d": "10/2016"}, {"body": "took freedom make example readable", "d": "10/2016"}, {"body": "wrong repository please open vuerouter repository thanks", "d": "10/2016"}, {"body": "linusborg thanks ill", "d": "10/2016"}, {"body": "linusborg repopen one per response vuejsvuerouter", "d": "11/2016"}, {"body": "works intended data essentially html case reevaluated patched dom causing elements replaced workaround might simple turning returned html reactive data one edge cases directly manipulating html might preferred btw please use forum gitter questions like", "d": "10/2016"}, {"body": "ca nt directly manipulate html arbitrary html string given plugin tried gitter stackoverflow coming gitter nt helpful stackoverflow eventually solved though component anyone else issue checkout stackoverflow linked", "d": "10/2016"}, {"body": "make sure would correct tldr importing individual components large application becomes troublesome registering globally may break things components defined parent component available children components", "d": "10/2016"}, {"body": "posva well yes maybe even component optionally available children components", "d": "10/2016"}, {"body": "terionname sorry hold think nice idea needs discussion though let discuss team come back proposals imo custom properties ideal rather default behaviour components properties components able use declared components parent components", "d": "10/2016"}, {"body": "behavior early version changed general rule thumb able locate child components used component looking component code implicitly inheriting components matter done break dependency tree lucidity look component code sure child component used came explicitly importing child components sure leads repetition opinion contrary argument rises possibility errors makes app support harder makes code robust easier readfollowmaintain fact approach collecting components single file good middleground would probably run similar situations", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks check", "d": "10/2016"}, {"body": "sorry man know first post know problem version vue", "d": "10/2016"}, {"body": "u use vfor like", "d": "11/2016"}, {"body": "index removed vue want use index change vue version", "d": "11/2016"}, {"body": "jarodrigues simple change code like index", "d": "11/2016"}, {"body": "define static attribute vue attempt dynamically merge provide binding vue", "d": "10/2016"}, {"body": "ok nice know vue merge regardless static dynamic attribute would nice behavior continued vue quite important writing librariesframeworks vue elaborate needed thoughts thanks answer", "d": "10/2016"}, {"body": "yeah look sure", "d": "10/2016"}, {"body": "like class module think style also behavior consistency try make pr", "d": "11/2016"}, {"body": "defcc yeah probably need treat separately need parse static style strings objects", "d": "11/2016"}, {"body": "ok take look", "d": "11/2016"}, {"body": "almost done make pr later", "d": "11/2016"}, {"body": "change merge styles case textelementvue js export default render createelement return createelement input attrs type text style textalign right", "d": "11/2016"}, {"body": "", "d": "10/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues questions posted gitter chat room forum stackoverflow thanks", "d": "10/2016"}, {"body": "reemit componentb", "d": "10/2016"}, {"body": "possible something like", "d": "10/2016"}, {"body": "please use dedicated gitter forum ask questions thanks possible templates use render functions", "d": "10/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks", "d": "10/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "10/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "10/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "10/2016"}, {"body": "tried evaluating expression chrome console please use forum questions", "d": "10/2016"}, {"body": "phanan oops sorry fault", "d": "10/2016"}, {"body": "firstly always use development version duh develop error pretty much obvious secondly think writing much different syntax error silently ignoring errors good idea", "d": "10/2016"}, {"body": "explained phanan", "d": "10/2016"}, {"body": "intentional amigo", "d": "10/2016"}, {"body": "explained required vmodel longer implicit create nonexistent paths intentional decision", "d": "10/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "10/2016"}, {"body": "update function seems invoked actually browser os using", "d": "10/2016"}, {"body": "chrome os", "d": "10/2016"}, {"body": "works chrome windows tested incgnito window ensure exptensions sth interfer", "d": "10/2016"}, {"body": "test incgnito window chrome windows still nt work maybe one give demo invoke custome directive update callback xd", "d": "10/2016"}, {"body": "update hook nt get triggered call custom directive otherwise would end infinite loop triggers value programmatically changed app code", "d": "11/2016"}, {"body": "hi thanks filling issue counterpart reserved used prop name", "d": "10/2016"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "10/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks", "d": "10/2016"}, {"body": "issue", "d": "10/2016"}, {"body": "thanks reporting issue vuejsvuejsorg update document soon possible", "d": "10/2016"}, {"body": "problem resolving problem allistera could use object workaround jsfiddler", "d": "10/2016"}, {"body": "ah done better job searching thanks deffc awesome work", "d": "10/2016"}, {"body": "closing duplicates", "d": "10/2016"}, {"body": "already option roadmap however pospone current postrelease phase work left ecosystem done involve considerable amount work get right tested also making vueloadervueify work etc pp thanks poc seems helpful", "d": "10/2016"}, {"body": "yes please looking exactly render functions overwhelming feels disjointed overall feel single file component", "d": "11/2016"}, {"body": "would useful would scope css functional components", "d": "11/2016"}, {"body": "get status update functional single file component coming react missing quite bit", "d": "2/2017"}, {"body": "coming soon", "d": "2/2017"}, {"body": "anyone explain new", "d": "2/2017"}, {"body": "able create functional components files like javascript propsmsg static content n export default props msg test margin", "d": "2/2017"}, {"body": "ahh ok thanks", "d": "2/2017"}, {"body": "looks great idea timeframe feature released", "d": "3/2017"}, {"body": "going make functional components much easier use", "d": "3/2017"}, {"body": "updates topic part release", "d": "4/2017"}, {"body": "akryum know status issue seems like limbo months anything help move along", "d": "6/2017"}, {"body": "ping blakenewman", "d": "6/2017"}, {"body": "news feature", "d": "7/2017"}, {"body": "seems work started february", "d": "7/2017"}, {"body": "update open anything done help move issue", "d": "8/2017"}, {"body": "akryum since teaser back february seemed dead water blakenewman see pinged months ago information issue sorry getting annoying really like know make happen", "d": "8/2017"}, {"body": "scottbedard working hidden gotchas however could documented unusable features work done quite ago unfortuently nt map current state rendering system work need done vuejscollaborators opinion feature overall development effort additional cost core worth feature", "d": "8/2017"}, {"body": "think nice feature since default way write components using templates imho decoupling rendering functions components used templates compiler would great", "d": "8/2017"}, {"body": "problem scope using templates functionally limiting much using jsxrender functions think point building functional components constraints design patterns nt fit template model feature requires small amount extra runtime never performance pure render functions enabling feature assume better performance comparative pure render functions true stance feature moment empower templates used functionality gives true reward", "d": "8/2017"}, {"body": "also would nice scoped style support functional components may unrelated", "d": "8/2017"}, {"body": "unrelated believe working work unless regression", "d": "8/2017"}, {"body": "js const dumbcmp props gt propslabel export default dumbcmp actually guys done serval months ago", "d": "9/2017"}, {"body": "waiting", "d": "10/2017"}, {"body": "yes vue vueloader proper support template compilation scoped css hotreload functional components", "d": "10/2017"}, {"body": "possible emit functional components", "d": "1/2018"}, {"body": "unless mistaken short answer functional component instance therefore methods hackery believe actually emit context object render fn receives contains always vue instance could choose take global approach see event emitting functional component depending use case likely best solution", "d": "1/2018"}, {"body": "hey researching optimizing dashboard elements making sfc component functional sounds awesome wont able methods computed props right use render function jsx least define inside render function self correct", "d": "1/2018"}, {"body": "possible emit functional components access object functional context example call listener like method inside use render function jsx least define inside render function self correct yes", "d": "1/2018"}, {"body": "akryum thanks larger template heavy func components might better jsx standard render functions would make things bit harder read advanced tutorial would really sweet", "d": "1/2018"}, {"body": "nt need use render function functional components anymore use templates fri jan dobromir hristov notifications githubcom wrote akryum thanks larger template heavy func components might better jsx standard render functions would make things bit harder read advanced tutorial would really sweet receiving commented reply email directly view github mute thread", "d": "1/2018"}, {"body": "blocka use function something instantiate chart example", "d": "1/2018"}, {"body": "unless rendering chart completely vnodes would need regular component lifecycle methods fri jan dobromir hristov notifications githubcom wrote blocka use function something instantiate chart example receiving mentioned reply email directly view github mute thread", "d": "1/2018"}, {"body": "akryum solution works leaves feeling functional sfc templates could use little love process rewriting several components could functional getgo little disappointed experience sfc already context accessible template could nt properties mapped root props emit listeners allowing type sfc work api requestsomething propshello propsworld export default props hello world could become hello world export default props hello world", "d": "1/2018"}, {"body": "nt think expectation code right removing items removeitem function vmodel selected added values vmodel items removed deleted items model data affected way best", "d": "10/2016"}, {"body": "deulos check issue seems problem could use workaroud", "d": "10/2016"}, {"body": "defcc check uncheck checkboxes model containing values selected checkboxes updated properly rajibahmed problem checked checkbox binded model remove feels logical remove value model also", "d": "10/2016"}, {"body": "deulos vue declarative less magic faced problem would write code solve add watcher guess solve problem best", "d": "10/2016"}, {"body": "deulos might seem logical usecase might someone elses maybe someone whant hide inputs vif keep selected values question application logic something vue decide", "d": "10/2016"}, {"body": "expected behaviour since changes ca nt reflected virtualdom get therefore overriden updates", "d": "10/2016"}, {"body": "known workaround", "d": "2/2017"}, {"body": "theoretically could use dom api get classes element could reapply element updated classes missing would pretty tedious complicated errorprone though", "d": "2/2017"}, {"body": "eh better store classes component data amp change asking going unconventional circumstance using element w dynamic classes component thanks input linusborg", "d": "2/2017"}, {"body": "dealing multiple places item notion transition mode unclear mean one animated item every moment mean incoming items batched deferred outgoing ones mean items within key follow regular rules transition mode meanings converge one dealing single place item", "d": "10/2016"}, {"body": "think would mean removals happen additions example shows new item gets added existing one gets removed items intended appear time", "d": "10/2016"}, {"body": "got warning transitiongroup warning add key child item actually key already meet problems code picture warning", "d": "11/2016"}, {"body": "wrote changelog version need add classes elements leaving floor impact new ones coming personally created class makes elements absolute position added class attributes hope work guys jerome", "d": "1/2017"}, {"body": "think transition mode group complicated simple inout outin example sometimes want items one one sometimes want together", "d": "2/2017"}, {"body": "know thats workaround could use css transitiondelay mode use class mode use class eg scss slideritem display inlineblock amp sliderenteractive amp sliderleaveactive transition opacity amp sliderenteractive transitiondelay amp sliderenter amp sliderleaveto opacity", "d": "7/2017"}, {"body": "unlikely happen due sheer complexity likely introduce much extra code relatively noncritical use case behavior transition modes multiple items vague hard define even implement probably ship separate plugin instead part core", "d": "7/2017"}, {"body": "workaround nt work well without ie vertical lists", "d": "6/2018"}, {"body": "problem pug please refer issues hints open issue pug repository", "d": "10/2016"}, {"body": "posva mentioned bug pug error occurs pug called fact error happens even pug installed", "d": "10/2016"}, {"body": "version vueloader installed", "d": "10/2016"}, {"body": "linusborg vueloader", "d": "10/2016"}, {"body": "may issue related pug xmllike templting engine contain anything like script tag style tag without specific treat lt may break htmlparser parsing procedure", "d": "10/2016"}, {"body": "think fixed seems like nt", "d": "10/2016"}, {"body": "imports runtimeonly build compiler adjust template include standalone build version default", "d": "10/2016"}, {"body": "done", "d": "10/2016"}, {"body": "linusborg thanks reply mentioned added alias webpack config nt resolve problem got another error vuejs line", "d": "10/2016"}, {"body": "oh different problem mistake part nt catch expects template string pass object component options defined tag file template already compiled render function vueloader", "d": "10/2016"}, {"body": "ok linusborg get point main goals separate component content keep code clean nt want html content script tag keep content inside tag app component way get content", "d": "10/2016"}, {"body": "keep content inside tag app component way get content whole point vue files keep everything one place want appvue component want template string nt really understand trying despite explanation sorry maybe save install htmlloader", "d": "10/2016"}, {"body": "ok clear thanks lot linusborg detailed explanation", "d": "10/2016"}, {"body": "\u7ed9\u7ec4\u4ef6\u7ed1\u539f\u751fdom\u4e8b\u4ef6\u7684\u65f6\u5019\u9700\u8981\u52a0native\u4fee\u9970\u7b26", "d": "10/2016"}, {"body": "use", "d": "10/2016"}, {"body": "thanks changed works", "d": "10/2016"}, {"body": "hi thanks filling issue use empty string template fail compile setting empty string correct way recall vbind expects javascript expressions example providing content prop serverside need check exists return literal string null otherwise need give empty string", "d": "10/2016"}, {"body": "better way vue deal possible provide better kind error handling instead dumping half dom inside console happens", "d": "2/2018"}, {"body": "fnlctrl would number props", "d": "4/2018"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "10/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "10/2016"}, {"body": "templates single root node see warnings console maybe nt show inlinetemplates", "d": "10/2016"}, {"body": "nt see warnings ran migration helper might case", "d": "10/2016"}, {"body": "want render one node like case ca nt wrap need simple template feature like knockout apply tags", "d": "9/2017"}, {"body": "nt add damn information vue tutorial", "d": "1/2018"}, {"body": "", "d": "2/2018"}, {"body": "rezapouya commented jan exactly pita", "d": "6/2018"}, {"body": "definitly something worth mentioning glad finally found reason troubles getting mad", "d": "8/2018"}, {"body": "bug browserify template today submitted pr assume reason problem likely fixed tomorrow meanwhile fix easy packagejson look like use original line commented", "d": "10/2016"}, {"body": "hello tried change packagejson use import vue vue error failed mount component template render function defined found root instance use import vue vuedistvue render content inside slot", "d": "10/2016"}, {"body": "please provide live reproduction repository ask forums help forum stack overflow gitter", "d": "10/2016"}, {"body": "repository problem", "d": "10/2016"}, {"body": "use npm run build instead nrpm run dev work fine", "d": "10/2016"}, {"body": "got take look issue linusborg", "d": "10/2016"}, {"body": "please nt mix runtime build standalone build incompatible suggestion digging buildjs comment fyi use standalone build use html template adapt runtime build use render option instead writing html info please see need complex entry point template write entry component render render function info problem vuehotload api vueify uses runtime build user code uses standalone build two builds mount component agnostic slots children lost two conflicting builds", "d": "10/2016"}, {"body": "herringtondarkholme metioned two vue versions app indeed standalone runtime version run npm run dev standalone required appjs used compile template html resolved vuedistvuejs internal runtime version used vueify compile vue files hotreload resolved vuedistvuecommonjs bundled compiled js files fails prototype checks runtime one vuejs vuecommonjs get default slot node npm run build nodeenv set production run hotreload logic eliminated works issue could select runtimeonly version init app vuecli move codes vue files make pr update related docs specifiy problem maybe best way could ensure one vue version browserify template looking", "d": "10/2016"}, {"body": "problem explained installation page guide maybe improved also mentioned migration guide", "d": "10/2016"}, {"body": "linusborg think also upgrade browserify template try", "d": "10/2016"}, {"body": "browserify template also updated uses aliasify standalone selected", "d": "10/2016"}, {"body": "linusborg seems working expected vue files processed duiring aliasify transformation open pr add vue file jsextensions merged update template well", "d": "10/2016"}, {"body": "issue browserify template submited pr fix forked repo updated could adjust packagejson like", "d": "10/2016"}, {"body": "pr merged close issue problem still exists could report issue", "d": "10/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue looking", "d": "10/2016"}, {"body": "repro adding vonce nt render", "d": "10/2016"}, {"body": "posva repro", "d": "10/2016"}, {"body": "koronero nt understand message nt asking repro provided one", "d": "10/2016"}, {"body": "met similar probably issue vonce found updated repo case thanks", "d": "10/2016"}, {"body": "koronero seekerlee think used element element executed therefore variable nt exist yet side note nt use nt need yet", "d": "10/2016"}, {"body": "posva case reference working en email app emails rendered vuejs since version emails conversation stored array like since email html content could huge nt want updated since born need lots dom operation html content using custom directive inserted example add ellipsis hide quoted content highlight text add link process mentions symbol etc also nt want operations executed requirement vonce vfor version use emailcontent works good spent time updated vuejs version found issue", "d": "10/2016"}, {"body": "using vonce vfor work case nt", "d": "10/2016"}, {"body": "posva using vonce vfor nt run error want example group email show use vfor vonce user mark email starred ui reflect show use vonce vfor ui change user star email", "d": "10/2016"}, {"body": "seekerlee using vonce inside component fixes problem", "d": "10/2016"}, {"body": "try let know", "d": "10/2016"}, {"body": "example", "d": "10/2016"}, {"body": "thanks much fiddle works case simplified fiddle bit reference later searched change vue template use custom component", "d": "10/2016"}, {"body": "bug reappeared version version", "d": "11/2017"}, {"body": "watching object mutated newval oldval point original object case watch instead", "d": "10/2016"}, {"body": "update demo object dynamic keys problem", "d": "10/2016"}, {"body": "use approach whenever dynamic key changes also nt forget unwatch old one", "d": "10/2016"}, {"body": "come handy fnlctrl", "d": "10/2016"}, {"body": "things like infinite listvirtual scroll could many many detached keptalive components mon oct eduardo san martin morote lt notifications githubcom wrote come handy fnlctrl receiving mentioned reply email directly view github mute thread", "d": "10/2016"}, {"body": "seems little traction virtual list use case imo designed also cached components already extent controlled via props", "d": "7/2017"}, {"body": "", "d": "10/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "10/2016"}, {"body": "might nice addition indeed something find regularly well might get core use", "d": "10/2016"}, {"body": "think would super useful something forever", "d": "10/2016"}, {"body": "imo easily done userland linusborg demonstrated hand practice might need small variations works eg reseting part data original state like form object overall adding trivial convenience utilities core opens precedence core nt b also follow end api surface bloated tiny util functions absolutely nt want see", "d": "10/2016"}, {"body": "yeah valid concern", "d": "10/2016"}, {"body": "looking seems selections get observered correctly", "d": "10/2016"}, {"body": "peterkorgaard update fiddler could use like workaround info take look", "d": "10/2016"}, {"body": "got question defcc solution solve already know many items model change model array object", "d": "10/2016"}, {"body": "use object type model binding uses model index internal implementation use array type value could observed could init selections created update selections selectboxes data updated update fiddler", "d": "10/2016"}, {"body": "defcc bravo solution worked fine thank much", "d": "10/2016"}, {"body": "thank defcc clarifying use workaround problem gets solved thanks great work everybody vue really amazed", "d": "10/2016"}, {"body": "bug back", "d": "1/2017"}, {"body": "please open new issue reproduction thanks", "d": "1/2017"}, {"body": "passes objects attribute stringify keys duplicated pass", "d": "10/2016"}, {"body": "go note method work standalone build", "d": "10/2016"}, {"body": "getteronly computed property nt receive arguments please reread section fix", "d": "10/2016"}, {"body": "ooops sorry last suggestion one users gitter originally please reconsider update little bit info export default computed mapgetters itemsfromstore vue devtools shows updating remains true works turning cache property false seems proper data reactive expect computed property react need set false update moved statement element nt work solved vue react even level deep object use instead", "d": "10/2016"}, {"body": "need help suggested use forums also provide live example jsfiddlecodepen etc people really look problem", "d": "10/2016"}, {"body": "yes posted forums asked gitter said seems good thought time post thanks anyway", "d": "10/2016"}, {"body": "thanks much iabdulin issue vuejsorg could report make pr fix", "d": "10/2016"}, {"body": "iabdulin problem fixed", "d": "10/2016"}, {"body": "hi thanks filling issue please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc thanks", "d": "10/2016"}, {"body": "leyec similar issue vue vmodel child component wraps input input changed browser chrome froze restart browser issue emit input thissomevalue child input solved issue changing thissomevalue string emit input thissomevalue issue solved", "d": "10/2016"}, {"body": "closing due inactivity", "d": "10/2016"}, {"body": "arthurmaurer perfect question gitter chatroom would fixed fiddle time smile called component instantiated data changes increment value click event updating value scoped inside component update data list nt update data scoped within component updated fiddle think trying accomplish follow close issue gets close solving issue good luck", "d": "10/2016"}, {"body": "thanks gitter nt know solution gave works fine way around would pain use everytime face problem vfor refreshes changes data nothing else could notify data change aside watching", "d": "10/2016"}, {"body": "components actually get recycled use lifecycle hook listen changes data could also watch changes prop data nt change component wo nt updated rerendered much purpose part optimizations make vue fast", "d": "10/2016"}, {"body": "explained danieldiekmeier arthurmaurer", "d": "10/2016"}, {"body": "came across issue really stumped initially props local data state getting mixed list item components especially filtering refreshing list searching lead issue thread eventually stumbled across page docs issue caused default inplace patch strategy uses updating list components docs linked explain really well essentially recommended provide whenever possible unless iterated dom content simple intentionally relying default behaviour performance gains hope helps someone else may come across issue", "d": "11/2016"}, {"body": "example nt using valid syntax corrected get errors nt know really happened side", "d": "10/2016"}, {"body": "would want use runtimeonly build inside browsers sure nt need templatejsx compilation want write render functions hand", "d": "10/2016"}, {"body": "build system configured support files nt use option", "d": "10/2016"}, {"body": "since build system use runtimeonly build instead loading vue separately browser", "d": "10/2016"}, {"body": "nt want one single big bundled file would better load frameworks libraries separately code webpack commonschunkplugin using rollup", "d": "10/2016"}, {"body": "nicolasparada fix add script tag adds global namespace html windowprocess env nodeenv production fnlctrl sure weither variables supposed present build cdn least inconvenient offer cdn access files require workaround like use think discuss internally deal", "d": "10/2016"}, {"body": "think runtime meant used bundler using rollup use", "d": "10/2016"}, {"body": "linusborg gave problems posva yeah couple solutions since cdn browser ready minified version", "d": "10/2016"}, {"body": "nicolasparada automatically added cdns normal browser ready andor without minified version", "d": "10/2016"}, {"body": "wanted start using cdn version vue inside rails app today met issue building upon linusborg amp nicolasparada input version works javascript windowprocess env nodeenv production windowmodule wonder version hosted somewhere used without tweak", "d": "10/2016"}, {"body": "next release use umd runtime build via", "d": "11/2016"}, {"body": "change vuecommonjs vueminjs problem solvedhowever still nt understand", "d": "12/2017"}, {"body": "hi thanks filling issue inheriting everything antipattern removed vue long ago please declare props specifically", "d": "10/2016"}, {"body": "totally agree btw something like", "d": "10/2016"}, {"body": "use vbind sure target browser supports object literal extensions simplified", "d": "10/2016"}, {"body": "even better componenta receive props even props contains props child interested filtered computed property specify watcher see cprop edit behavior longer work", "d": "3/2017"}, {"body": "like use rendered function functional component js componentbjs import componenta componentavue export default functional true components componenta render createelement context return createelement componenta props hello new default even define language pr default values contextprops pass remaining props contextlisteners", "d": "4/2018"}, {"body": "could add jsfiddler provide context", "d": "10/2016"}, {"body": "nt seem related wether indocument query returned nt component template component mounted bug however seems highly unlikely repro needed", "d": "10/2016"}, {"body": "ops bad using computed property", "d": "10/2016"}, {"body": "please ask questions forum stackoverflow probably nt need add data already methods need add bit context forum post stackoverflow question people help better solve problem", "d": "10/2016"}, {"body": "reinstall vueloader", "d": "10/2016"}, {"body": "reinstall still ca nt work switched works", "d": "10/2016"}, {"body": "using lock likely either npm registry date explicitly upgrading", "d": "10/2016"}, {"body": "fixed", "d": "11/2016"}, {"body": "following official getting started guide could nt even get hello world saw previous comment following cli method", "d": "12/2016"}, {"body": "issue upgraded project generated vuecli months ago problem maybe declared peerdependencies vueloader solution may right one add library manually devdependencies generated project json devdependencies", "d": "1/2017"}, {"body": "removed nodemodules folder executed", "d": "3/2017"}, {"body": "case using laravel mix like gdomiciano removed nodemodules run", "d": "4/2017"}, {"body": "reinstall latest release", "d": "4/2017"}, {"body": "using laravel mix dependency older somehow lock file nt consistent updated laravel mix lock file fixed error disappeared using laravel mix look another dependency try reinstall update", "d": "6/2017"}, {"body": "solved problem try reinstall", "d": "6/2017"}, {"body": "worked", "d": "6/2017"}, {"body": "gdomiciano suggested probably would also work much faster", "d": "7/2017"}, {"body": "version", "d": "7/2017"}, {"body": "vuetemplatecompiler vue true shouldt check available vue js version install correct version work around simply single command explanation uninstall existing verion vuetemplatecompiler find version number installed vue js vue substr get version number create string vuetemplatecompiler package matching vue js verion vuetemplatecompiler vuetemplatecompiler npm list awk vue print substr install correct vuetemplatecompiler package npm install uetemplatecompiler", "d": "9/2017"}, {"body": "yarn installation problem although specified exact version yarn seems install latest version vuetemplatecompiler cleared yarn cache removed nodemodules folder luck got job done", "d": "5/2018"}, {"body": "chrisvfritz might want look", "d": "10/2016"}, {"body": "\u53ef\u80fd\u662f\u6253\u5305\u7684\u95ee\u9898 \u7528vueminjs \u6709\u8fd9\u4e2abug \u4f46\u662f\u7528vuejs \u5e76\u6ca1\u6709\u8fd9\u4e2abug using bug use bug \u53e6\u5916 webpack\u7684\u5f00\u53d1\u73af\u5883\u4e5f\u6ca1\u8fd9\u4e2abug \u7528\u751f\u4ea7\u73af\u5883\u5c31\u4f1a\u51fa\u73b0", "d": "10/2016"}, {"body": "pretty sure already know right simple fix", "d": "10/2016"}, {"body": "reproduction important opening issue please describe problem instead adding labels", "d": "10/2016"}, {"body": "remove comment incule company info", "d": "10/2016"}, {"body": "nt ios device hand see errors use", "d": "10/2016"}, {"body": "yes alreay install vconsole test page find error ios", "d": "10/2016"}, {"body": "oct aviggngyv notifications githubcom wrote yes alreay install vconsole test page find error ios receiving subscribed thread reply email directly view github mute thread", "d": "10/2016"}, {"body": "reverting work", "d": "10/2016"}, {"body": "think vue using arrow functions supported ios", "d": "10/2016"}, {"body": "bump problem ios lt safari crashes page load lots html rendered depending device faster nt crash ipod fe even small markup anything ca nt reproduce commercial project", "d": "3/2017"}, {"body": "managed fix ipad problem initing vue domcontentloaded callback however slow ipod crashes anyway", "d": "3/2017"}, {"body": "happen using vuejs render ios lt works ios testing iphone device using appetizeio", "d": "4/2017"}, {"body": "guys sorry say saying happens without information let alone code analyze enable us help way also closed issue months old problems nowcurrent version open new issue proper reproduction otherwise nothing solve", "d": "4/2017"}, {"body": "", "d": "10/2016"}, {"body": "using already using already binds value also bound property instead attribute nt show markup", "d": "10/2016"}, {"body": "want value name attributes input nt plan submit form using ajax mainly using vue case control many inputs form think invoice line items using vue addremove line item fields final form submitted regular form using ajax", "d": "10/2016"}, {"body": "somazx evan said value bound property attribute value attribute reflect current value input reflects initial value submitting html form takes current value initial one work correctly", "d": "10/2016"}, {"body": "simplesmiler ohhhhh thank explaining understand sorry", "d": "10/2016"}, {"body": "hello thanks filing issue happening relying tracking index unsuitable case described key documentation give items identifiers vue track properly something like recommend use dedicated id generating library avoid collisions closing bug", "d": "10/2016"}, {"body": "strange thing problem persists key applied thought autokeying bug edit actually may dom patching bug", "d": "10/2016"}, {"body": "believe nokey applies equivalent implicitly", "d": "10/2016"}, {"body": "simplesmiler nt know behavior thought nokey means key applied would kindly provide source reference", "d": "10/2016"}, {"body": "vuejs updating list elements rendered default uses inplace patch strategy similar behavior vue interpreted implicit key index may wrong assumption still surface level understanding mechanics remember tracking index causing exact issue", "d": "10/2016"}, {"body": "fact tried reproduce default tracking reference appears behave expected nt know valid use though", "d": "10/2016"}, {"body": "oh god love hours cried bug fixes buy several pints", "d": "10/2016"}, {"body": "guess already added vuetemplatecompiler exposed preservewhitespace option", "d": "10/2016"}, {"body": "fnlctrl please reread entry post option mentioned wink", "d": "10/2016"}, {"body": "fnlctrl means leading trailing whitespaces html tag looking", "d": "10/2016"}, {"body": "fyi nt think good idea sense could unsafe user may want ignore whitespaces tags necessarily trimming plain text eg inside whitespace tags whitespace around plain text different sense hand nt see practical advantage ignoring additional whitespace nodes small perf gain trimming text nt much aspect", "d": "10/2016"}, {"body": "hey evan follow issue find lots pieces like generated code thousands project add quite kbs compression take care quite easily never less nice generated output could simply remove compiletime see add option template compiler give pull request succeed thinking something like", "d": "8/2017"}, {"body": "think actually correctness issue performance one seems chrome least actually result small indent start paragraph presumably honouring rendered natively browser html gross annual salary normally indent", "d": "1/2018"}, {"body": "implemented template compiler options trim whitespaces around text nodes collapse sequences whitespace characters within text nodes production build sizes reduced different projects absolute terms please look pr", "d": "2/2018"}, {"body": "thank cerlestes good work excited see feature vue wondering difficulties find topic explain activate neat feature pr accepted", "d": "2/2018"}, {"body": "davidrot sadly bit tricky vue devs completely integrated currently generic way specify option parameters outside manually calling template compiler pr added vueloader would least make possible change values webpack configuration file similiar could toggled far quickest way manually patch vuetemplatecompiler package actually need patch buildjs patch forcefully set option constants desired values within project nodemodules directory also created another commit like push vueloader would allow disable enable whitespacerelevant options attribute inside sfc like useful turning options globally disabling components example require due elements wait actions devs push sure changes imho long run ideally options turned default nt make sense send compiled template like network note patch disables optimizations within elements default browser strip away anyway adds overhead bundle size lowers performance popularity vue probably amounts megabits junk whitespaces transferred internet given time edit talking vuerouter obviously meant vueloader", "d": "2/2018"}, {"body": "bugs production builds produces extra spaces text makes extra line buttons text templates like html long text close nt bug exists production nt see development", "d": "4/2018"}, {"body": "edit apologize spamming prematurely probably issue end please disregard sure issue related get jsx insert single space anywhere gets stripped examples expected behavior based browsers deal html believe also spec single space always preserved clearly calling collapse strip away whitespace tested templates use clarify case child vnode string whitespace", "d": "9/2018"}, {"body": "saw reports weird spacing inconsistencies users safe wanted normalize save couple bytes added sed step build command postprocess js files partial fix replaces single space probably adjust space indentation ensure regex nt match source code things break directory files process seems working sure test output project", "d": "9/2018"}, {"body": "working providing flow typings people use ones source ready yet example exports vue module declared yet typings internal development export package complete suitable use", "d": "10/2016"}, {"body": "actually ie messed outerhtml duplicating attribute disabled warning ie", "d": "10/2016"}, {"body": "thanks", "d": "10/2016"}, {"body": "able repro simplified test case show attributes list edge amp chrome", "d": "11/2016"}, {"body": "jdalton said still issue edge", "d": "3/2017"}, {"body": "kcharle could open new issue repro please sure understand mean remove check", "d": "3/2017"}, {"body": "meeting", "d": "9/2017"}, {"body": "\u5347\u7ea7\u524d\u8bf7\u5148\u9605\u8bfb\u5347\u7ea7\u6307\u5357", "d": "10/2016"}, {"body": "id messageindex", "d": "10/2016"}, {"body": "expected behavior actually explained", "d": "10/2016"}, {"body": "plan support sticky event eventbus", "d": "10/2016"}, {"body": "\u8bf7\u4ed4\u7ec6\u770b\u8fc7\u5f00 issue", "d": "10/2016"}, {"body": "\u8bf7\u53c2\u8003\u65b0\u5efa issue", "d": "10/2016"}, {"body": "vue template like function gets called every time something changes mind inline basically saying input value static never change nt make sense using makes use case bit complicated render form state server html output initialize component data", "d": "10/2016"}, {"body": "surprised hard instanciate simple html element understand reasons anyway thank support thank much vuejs", "d": "10/2016"}, {"body": "nt think elegant approach consider situation got regular form two fields post name permalink user first time visits form want show defaults set data follows could argue could set placeholder attribute nt always case user updates values persisted db time user visits form values value attribute however vue still render json common scenario popular mvc frameworks rails way new vue would manually set attributes accessing elements defeats purpose manually need preset values nt kindly correct wrong", "d": "2/2017"}, {"body": "thanks dsignr elegant solution help lot", "d": "4/2017"}, {"body": "another simple solution would use attributes reference element access template rendered template javascript note check compatibility otherwise use jquery library extract hope helps", "d": "6/2017"}, {"body": "got around documentqueryselectorall textfield foreach el gt new vue el data function return value said things markup like error messages also want bind model similar point markup becomes little strange aim maybe like original poster try find framework combines template syntax way binding vue progressive enhancement ssr ideals allow sites built fall back js actually makes little sad vue js claims allow progressive enhancement states wont pickup initial model values markup thus contradicting statement", "d": "7/2017"}, {"body": "solved way need know input field id advance code addresses one problem ssr page input field could edited manually user component mounted think slow mobile connection thwat could delay js execution thus input state could differ value set server thank", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "approach issue think pretty neat depending usage parent component appform component inline value basically saying input value static never change nt make sense using vmodel makes sense native html works attribute set input element meant changed question take priority inline value vmodel value set", "d": "8/2018"}, {"body": "aware issue closed wanted share approach case helps anyone case done big dynamically add input fields data const element test new vue el element data grabs component const el documentqueryselector element", "d": "8/2018"}, {"body": "allowed strict mode inside modules nt mean deprecated valid use greatly simplifies compiler removing need expression parserewrite scope analysis makes possible get compiler slim mingzipped unless bundler wraps entire application bundle use strict function scope presence cause issue fact works fine official webpack templates sure ran problem first place maybe provide reproduction also note strict mode perfunction scoped generated output bundle actually look something like", "d": "10/2016"}, {"body": "thanks ludicrously fast response wrestling vue since later beta phases trying get things work waaay ready trying get things work library nt fully support vue yet got error building things clearly normal use case sufficiently confused situation want clarify things said able bundle render functions modules unfortunate though understand respect tradeoff however need serverside compiler small perhaps could different version compiler prepares functions inclusion modules much work would entail", "d": "10/2016"}, {"body": "dts yep something definitely consider alternative compiler generates strictmode compliant code even source map support suspected quite bit work like focus stability areas stack get close hope helps figure solution trying achieve", "d": "10/2016"}, {"body": "hey buble compiler injecting mode passed js files compiling components contain keyword users components running trouble using uses uses think bad design side open issue link back however maybe could need argumentative help edit buble issue", "d": "10/2016"}, {"body": "built component want use laravel project come issue using laravel elixir webpack plugin seems also use buble paulpflug exclude vue component getting processed buble quite familiar frontend techs lol stuck week", "d": "10/2016"}, {"body": "paulpflug think toplevel may injected rollup usestrict option turned might something needs go laravel default rollup configuration", "d": "10/2016"}, {"body": "phoenixgao using rollup think somewhere investigated bublebabel inject processed js files", "d": "11/2016"}, {"body": "prop accepts string names constructor functions always avoid manually creating components instead drive parent state", "d": "10/2016"}, {"body": "would best way handle case app element contain arbitrary component component known runtime may anything currently creating vue instance calling function set active go", "d": "10/2016"}, {"body": "please use dedicated gitter forum ask questions thanks pass component constructor via prop use", "d": "10/2016"}, {"body": "thanks moved response existing unanswered forum thread idea would much appreciated", "d": "10/2016"}, {"body": "discussion continued forum thread", "d": "10/2016"}, {"body": "correction point still support custom components could documented btw correction point functional components able return anything even empty string required right", "d": "10/2016"}, {"body": "thanks jsfiddle template fixed", "d": "10/2016"}, {"body": "reproduce windows chrome firefox edge everything works fine specify system browser using", "d": "10/2016"}, {"body": "windows chrome happens least one select element model initialized existing value select options specified model default solution suggested line chat", "d": "10/2016"}, {"body": "happens least one select element model initialized existing value select options specified model default ok see problem looks like bug", "d": "10/2016"}, {"body": "problem tis component forced rerrender change class select happens event listens event comes input component rerenders initial value vmodel tries save data point selected option initial one rerender use event instead input value written class changed component rerenders new value", "d": "10/2016"}, {"body": "actually nt work chrome works firefox specific reason might case", "d": "10/2016"}, {"body": "based explanation would nt see problem changing dropdown mouse problem appearing trying change value keyboard", "d": "10/2016"}, {"body": "actually nt work chrome works firefox specific reason might case appearantly firefox issue event case event tried callback console show anything store update would running class would changing rerender think firefox right select simply emit first place nt know specs actually say based explanation would nt see problem changing dropdown mouse happen mouse well least reproduction fiddle", "d": "10/2016"}, {"body": "happen mouse well least reproduction fiddle fiddle first fiddles demonstrating problem select different element dropdown mouse update along appears checkbox try select different dropdown element updown keyboard changes seeing behavior recent stable chrome linux", "d": "10/2016"}, {"body": "latest stable chrome mac tested windows well replied nt see describing error happens mouse keyboard", "d": "10/2016"}, {"body": "error suggested vmodel support dynamic input types nt use", "d": "10/2016"}, {"body": "stuck error someone help thx", "d": "10/2016"}, {"body": "ok thank change implement", "d": "10/2016"}, {"body": "limitation going fixed workaround painfulunmaintenable vif branches", "d": "11/2016"}, {"body": "akryum feature introduced commit seems check skipped production perhaps bypass check defining separately instead though may discouraged", "d": "11/2016"}, {"body": "better implementation would create dynamic input type component vue attach custom components get twoway data binding", "d": "11/2016"}, {"body": "sirlancelot component would still need dynamically bind type could limitation circumvented using custom model would mean duplicated code every type want cover get quite messy especially generic components change quite often get less stable version", "d": "11/2016"}, {"body": "gwildu yes encountered issue trying use input component development version keen ui recent update vuejs make work workaround would always set input type validate value require work every similar component", "d": "11/2016"}, {"body": "sirlancelot sure possible could nt old behavior hidden attribute flag like generictype dynamictype guess new behavior positive performance impact might issue projects", "d": "11/2016"}, {"body": "implementing render function javascript look elegant probably powerful enough almost anything actually way components implemented", "d": "11/2016"}, {"body": "thanks sharing akirak nt personally read far docs yet outlines exactly mind op dynamic input component suggested earlier create component many hardcoded inputs desired wrap abstracting functionality away component allows reusability nt think implementation written", "d": "11/2016"}, {"body": "render functions nt support vmodel reimplement vmodel essentially nt look simple", "d": "11/2016"}, {"body": "error nt seem appear use believe still get functionality intentional", "d": "1/2017"}, {"body": "probably nt get functionality vmodel unless mistaken going happen get gendefaultmodel wo nt work properly select checkbox radio", "d": "1/2017"}, {"body": "nkovacs point use case creating generic text input component part ui toolkit wo nt used selectcheckboxradio specific components could used textemailpasswordphoneetc text input", "d": "1/2017"}, {"body": "maybe missing something works dynamicinputvue even export default props type type string required true render function createelement let component let tag textarea", "d": "4/2017"}, {"body": "work cases others eg type radio vmodel used native tags input select vue template files compiled different render functions depending tag type attribute see code type ca nt dynamic code nt work radio checkboxes example listens input events vmodel checks type listens correct event", "d": "4/2017"}, {"body": "ah okay got thanks alt least exactly needed", "d": "4/2017"}, {"body": "worked around generating different input types needed using vif activate one matches dynamic type suggested error message used pug avoid bunch duplication formgroup labellabel id class offsetclass vif label label div class widthclass type text password search email date inputformcontrol id id vif type type vmodel val typetype placeholder placeholder slot name help import moment moment const dateformat yyyymmdd export default props id type string required true value null label type string type type string default text placeholder type string data return internalval null watch value handler value thisinternalval value immediate true computed offsetclass return false widthclass return false val get thistype date const momentunix thisinternalval return mformat dateformat return thisinternalval set value thistype date const moment value dateformat thisinternalval munix else thisinternalval value emit input thisinternalval way use builtin vmodel directive extended radio checkboxes well", "d": "4/2017"}, {"body": "interesting thanks sharing", "d": "4/2017"}, {"body": "working solution component bootstrap based also using veevalidate enjoy vue component definition vuecomponent boostinput props gridlayout txtidentifier txttype txtlabel txtval txtvalidation txtplaceholder helpblocktext maxlength parentmodel model prop parentmodel event update parentmodel data function return templaterender null modelvalue typeof thistxtval undefined thistxtval render h return h div thistemplaterender thistemplaterender mounted function var compiledtemplate vuecompile errorsfirst txtidentifier thistemplaterender compiledtemplaterender methods change function newvalue emit update parentmodel newvalue using component html another alternative way framework push could something like", "d": "7/2017"}, {"body": "", "d": "10/2017"}, {"body": "interesting", "d": "10/2017"}, {"body": "meteorlxy solution break use radio checkbox vue supports dynamic types converting vifvelse looks similar workaround buggy call property", "d": "10/2017"}, {"body": "nkovacs yeah use textlike types ui components like akryum commented think using render function could better solution little complicate happy see dynamic types supported new release", "d": "10/2017"}, {"body": "issue closed even nt bug seems reasonable api would support works fine limitation weird unreadable", "d": "1/2018"}, {"body": "implemented", "d": "1/2018"}, {"body": "vmodel nt work workaround ended upgrading vue solved issue", "d": "4/2018"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks use directly", "d": "10/2016"}, {"body": "thanks feedback quickly little fixed fine", "d": "10/2016"}, {"body": "duplicate", "d": "10/2016"}, {"body": "nt know commits fixed issue included latest build wait next release clone repo build vue", "d": "10/2016"}, {"body": "right tought included already vuejs dev ok lets wait next release", "d": "10/2016"}, {"body": "tested fiddle locally interestingly bug ios messed weird behavior exists even without vue involved", "d": "10/2016"}, {"body": "youre right seems multiselect special item century waiting selfdriving cars", "d": "10/2016"}, {"body": "list items need use", "d": "10/2016"}, {"body": "fix updating way browser wo nt get grumpy sees unusual element inside table", "d": "10/2016"}, {"body": "ahh yes using indom template browser parses first either fix chrisvfritz solution use pure string templates subject browser parsing restrictions", "d": "10/2016"}, {"body": "thank guys", "d": "10/2016"}, {"body": "actually jsfiddle everything works transfer code get warning children must keyed actually could problem fact working templates code vue entry key toprice key export default data return configheader first second third fourth fifth collapsed true props loc name index methods total function col thisloc return col stationname return thisname var sumthislocmap el gt el col reduce acc cur gt col payback return sumthisloclength return sum togglecollapsed function thiscollapsed thiscollapsed appreciate help ps debugger see transitiongroup rawchildren array gets created vnodes first four tr fifth one undefined", "d": "10/2016"}, {"body": "reason nt see warning fiddle using minified production build warnings stripped must unique object constancy animations", "d": "10/2016"}, {"body": "bet pug since works default html template try escape ampersant", "d": "10/2016"}, {"body": "supposed use computed value instead understand docs right look documentation one single expression found microsoft javascript docs performs logical conjunction two expressions", "d": "10/2016"}, {"body": "yields using computed values instead verbose fast", "d": "10/2016"}, {"body": "pretty sure pug problem works vanilla vue templates properly way make pug escape special chars attribute values", "d": "10/2016"}, {"body": "problem vuemultiselect vue gulpbabelify without pug switching webpack solves", "d": "10/2016"}, {"body": "", "d": "10/2016"}, {"body": "somehow hack detailed explanation poc", "d": "10/2016"}, {"body": "pathing dom mutliple attribute select dose nt apply first mutli selected option dose nt work", "d": "10/2016"}, {"body": "transitions handled differently please read docs", "d": "10/2016"}, {"body": "toastjs var toastcomp require toastvue class toast show msg var comp new vue toastcomp compcontent msg documentbodyappendchild comp mount el settimeout gt comp destroy one trigger leave transition comp elremove moduleexports new toast toastvue content require toastscss moduleexports data return content toastenteractive toastleaveactive transition opacity ease toastenter opacity toastleaveactive opacity attribute used trigger enter transition initial render way trigger leave need destroy vm remove element dom fyi updated version please suggest trigger leave transition case", "d": "10/2016"}, {"body": "hello oliverzy thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum stack overflow gitter happy help", "d": "10/2016"}, {"body": "changed codes following works problems encodes html entities encode chinese special characters", "d": "10/2016"}, {"body": "thisodd inside iterator function nt point vue instance", "d": "10/2016"}, {"body": "template must one root element", "d": "10/2016"}, {"body": "want one another button dev branch already feature", "d": "10/2016"}, {"body": "marceloliberton works internet explorer", "d": "10/2016"}, {"body": "bug need root element template works like reactjs without root component render properly see anything working try forum docs first working ie maybe ie buggy best", "d": "10/2016"}, {"body": "hi abdulkhamidov marceloliberton rajibahmed mentioned fragment instance unsupported", "d": "10/2016"}, {"body": "according line terminators could cause problem special chars replaced gentext func try make pr", "d": "10/2016"}, {"body": "maybe better replacement phases chars parsing", "d": "10/2016"}, {"body": "vue character dom element attribute creating new vue instance", "d": "11/2016"}, {"body": "hechentao curious find spaces around handle", "d": "10/2016"}, {"body": "posva find handler called look code find spaces important need warning dev environment", "d": "10/2016"}, {"body": "hechentao spaces introduces first place", "d": "10/2016"}, {"body": "posva yes made mistake wrote code like adding warning case make vue friendly", "d": "10/2016"}, {"body": "registered globally vuecomponent call unnecessary", "d": "10/2016"}, {"body": "see another way inline simple component nt require clientside template rendering specifically want saw pr coming fix would allow vifvelse conditional root main template would nice know anyway", "d": "10/2016"}, {"body": "use render function please make sure read docs opening issues asking questions", "d": "10/2016"}, {"body": "already using render function missing piece seems simply pass object component options also explained docs course", "d": "10/2016"}, {"body": "thanks linusborg works thought tried think forgot wrap object render ran problems", "d": "10/2016"}, {"body": "tencent support template string currently use template", "d": "10/2016"}, {"body": "crossjs know since vue supports according readmemd nt support occasion", "d": "10/2016"}, {"body": "vue supporting nt mean use js features supported expressions use templates must take target browsers account", "d": "10/2016"}, {"body": "valid keycode aliases", "d": "10/2016"}, {"body": "want support custom keys define global keycodes", "d": "10/2016"}, {"body": "example posted jsfiddle taken vue guide key aliases either removed guide added keycode object", "d": "10/2016"}, {"body": "oh indeed may need amend doc ping chrisvfritz", "d": "10/2016"}, {"body": "way think usage sample could better support builtin custom submit pr repo", "d": "10/2016"}, {"body": "applies guide submit pr", "d": "10/2016"}, {"body": "wrong works according docs", "d": "10/2016"}, {"body": "yes works single letter key aliases come back wo nt", "d": "10/2016"}, {"body": "custom mind something like nt case", "d": "10/2016"}, {"body": "mean single letter key aliases coming back feature removed believe need amend doc reflect change question please see keycodes api link documentation need help suggest using forum instead", "d": "10/2016"}, {"body": "mean deprecated bug could come back say feature removed wo nt weird though since ca nt find deprecation vue changes maybe missing", "d": "10/2016"}, {"body": "reproduce make sure using latest version vue", "d": "10/2016"}, {"body": "looking build chrome extension check", "d": "10/2016"}, {"body": "soviut build extension amp csp versions mac os chrome error occurs could provide info issue", "d": "10/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "11/2016"}, {"body": "longer works iterator value iterated primitive value eg string number similar affect local variable function scope use array objects instead", "d": "10/2016"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "10/2016"}, {"body": "posva alright trying reproduce turned whether initial array empty nt matter however issue watching still fiddle steps reproduce press create text press button actual see pressing button new text appears expected text appeared right pressing create text", "d": "10/2016"}, {"body": "working intended find better explanation smile", "d": "10/2016"}, {"body": "posva read docs see example see using push whose changes vue supposed detect also nt explain works changing inner array object contain array push instead also using push include example", "d": "10/2016"}, {"body": "directly access element array", "d": "10/2016"}, {"body": "seems indeed working", "d": "10/2016"}, {"body": "bad sorry amcsi", "d": "10/2016"}, {"body": "hey thanks fix looks like issue still persist updated jsfiddle steps reproduce go authregister switch steps go back authlogin click login button", "d": "10/2016"}, {"body": "follow migration guide", "d": "10/2016"}, {"body": "aphofstede thanks nt checked let try", "d": "10/2016"}, {"body": "nt support either implicitly eating nonexistent paths lead hard debug scenarios eg make typo everything fails silently also breaking change question", "d": "10/2016"}, {"body": "working migrating lots components breaking change behaviour different maybe documentation warning message sent console rather exception actually failing silently vue warn error evaluating expression mydatapropertydoesnotexists typeerror read property undefined forked example point vue", "d": "10/2016"}, {"body": "looking code version try catch within function watcherprototypeget outputs warning message", "d": "10/2016"}, {"body": "frizzauk warning means supported try catch done component level instead expression level causes affected component output nothing nt affect components", "d": "10/2016"}, {"body": "understood surely statement within template engine handle whether property path exists granted javascript nt really support behaviour hence third party libraries lodash provide basic functions get plug gaps seems shame write verbose statements wrapping function call eg vif doespathexist datapropertydoesnotexists", "d": "10/2016"}, {"body": "frizzauk make typo everything fails silently component consider using higher node", "d": "10/2016"}, {"body": "gettype func seems deal multitype props returns first type try make pr", "d": "10/2016"}, {"body": "sure understand issue expecting value cast boolean although said either string boolean would using order specify prop cast nonconsistent", "d": "10/2016"}, {"body": "consistent behaviour differs expectations using magic convert eventual boolean type multiple allowed types caller passes booleanable value would expect boolean type also passed custom validator resolved boolean conforms another type array allowed types passes custom validation also valid otherwise invalid", "d": "10/2016"}, {"body": "mean magic refer value say normal differ types differents order array matters", "d": "10/2016"}, {"body": "referred piece code mentioned observations order matter interpret x z", "d": "10/2016"}, {"body": "share rest team", "d": "10/2016"}, {"body": "workaround export default components buttonview vuecomponent buttonview render function createelement return createelement parentiscomplex button div slotsdefault computed iscomplex return true false make sense", "d": "10/2016"}, {"body": "nt added already chrisvfritz aphofstede using jsx would also work nt fit use cases well template", "d": "10/2016"}, {"body": "distinctly remember adding feature investigate probably later today", "d": "10/2016"}, {"body": "supported never supported binding performed creation time different types binding expects different bound data types would add huge amount complexity internal implementation need use branches", "d": "10/2016"}, {"body": "intended function name", "d": "10/2016"}, {"body": "define functions signature use", "d": "10/2016"}, {"body": "simplesmiler mean", "d": "10/2016"}, {"body": "understand convenience react world however props vue components assigned react dedicated property allowing pass props without declaration possibly occur naming conflict", "d": "10/2016"}, {"body": "ktsn yeah problem opinion especially use jsx style issue usefully besides use props validation avoid problem like react put props props object also vue great use restructure app want get", "d": "10/2016"}, {"body": "like ktsn explained feasible vue imo maintainable always declare props", "d": "10/2016"}, {"body": "nice catch thank added pr case next time prefer submitting pr", "d": "10/2016"}, {"body": "work indeed bug", "d": "10/2016"}, {"body": "vue support manually addingremoving classes already using vuemanaged class binding want manage class vue nt mix implementation intentionally using string ensure class order", "d": "10/2016"}, {"body": "ok thanks sometimes use thirdparty library change class update data cover sometimes makes library work", "d": "10/2016"}, {"body": "template rendered immediatly wait whatever api calls might started usual solution using keep parts rendering data eg", "d": "10/2016"}, {"body": "linusborg mentioned try work still sent error statsproducts products", "d": "10/2016"}, {"body": "actually seems work component gives error main vue instance", "d": "10/2016"}, {"body": "issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum stack overflow gitter happy help", "d": "10/2016"}, {"body": "needed could supply test case function rendercode code context callback var createbundlerenderer require vueserverrenderer createbundlerenderer var renderer createbundlerenderer code rendererrendertostring context callback function done var bundlecode var vue require vue moduleexports function context return new promise function resolve reject resolve new vue template app join n rendercode bundlecode function err html err done err return try htmlshouldequal app catch e done e return done", "d": "10/2016"}, {"body": "hi thanks filling issue open migration helper repo instead thanks question simply", "d": "10/2016"}, {"body": "addressed via template slots basically slot element serves template given data child component similar passing render function instead passing alreadyrendered elements open issue discussing feature details start working", "d": "10/2016"}, {"body": "envomer inside vfor column columns new vue data return columns key opt title options html myhtml partials myhtml edit methods edititem xxx", "d": "11/2016"}, {"body": "kenberkeley partials deprecated nt", "d": "11/2016"}, {"body": "envomer use slot dynamic component instead vue", "d": "11/2016"}, {"body": "updates issue envomer solved problem also trying implement datatables vue vue recompile datatable dom inside datatable drawcallback function make action buttons work datatable datatable drawcallback function settings var element appdatatable vm compile elementget work compile removed", "d": "1/2017"}, {"body": "chrislandeza try dynamic component instead demo", "d": "1/2017"}, {"body": "solution", "d": "5/2017"}, {"body": "ucdit answer called scoped slots see eg child component parent component hello parent propstext result hello parent hello child", "d": "5/2017"}, {"body": "chrislandeza solved problem", "d": "9/2017"}, {"body": "said done render functions trivially easy implement think best left userland", "d": "10/2016"}, {"body": "said easy things like mutate single items need events something else look harder render well idea", "d": "10/2016"}, {"body": "testing discovered attribute reserved components exactly need", "d": "10/2016"}, {"body": "read common pitfalls chapter async documentation please check synchronous iteration functions section specially multiple callbacks section seems case", "d": "10/2016"}, {"body": "jbruni thanks response adding fix problem looks like might couple things play nt notice error hidden appeared much earlier output think still bug within causing error never invoke provided callback multiple times side note benchmark test project already using avoid error nt used warmup phase", "d": "10/2016"}, {"body": "hmm branch ca nt seem reproduce even using node close feel free provide information ensure reproduction", "d": "10/2016"}, {"body": "working expected reactive bindings works js end open question forums help", "d": "10/2016"}, {"body": "posva think working expected make sense make computed data call component last get value never computed make confuse computed value cached value although cache false", "d": "10/2016"}, {"body": "docs however note affects programmatic access inside javascript databindings still dependencydriven therefore doenst work pass computed property prop databinding works execute", "d": "10/2016"}, {"body": "fnlctrl oh see means way bind computed value child component thx", "d": "10/2016"}, {"body": "nt mean bind computed value prop child component nt work case computed value nt dependencies nt dependency reactive", "d": "10/2016"}, {"body": "yeah get sorry lost point", "d": "10/2016"}, {"body": "thanks reporting fixing", "d": "10/2016"}, {"body": "upon investigation cdata actually xml type usage supported without vue", "d": "10/2016"}, {"body": "hi vopjie vue problem problably vuecli problem either webpack problem issues github reserved bug reports please use forumvuejsorg ask webpack experts stakc overflow", "d": "10/2016"}, {"body": "ok thank much", "d": "10/2016"}, {"body": "hi thanks filling issue actually belongs vuejsorg repo please open issue instead thanks", "d": "10/2016"}, {"body": "fnlctrl mean belongs vuejsorg repo nt bug", "d": "10/2016"}, {"body": "longer bug way old problem docs nt updated", "d": "10/2016"}, {"body": "\u5df2\u7ecf\u627e\u5230\u89e3\u51b3\u65b9\u6848", "d": "10/2016"}, {"body": "reproduction please", "d": "10/2016"}, {"body": "problem thanks answering fiddle remove body id vue initialization select works like problem exists chrome pc mac included autofocus text input well fiddle nt see mean take testhtml load locally chrome see input gets focus appjs loading loaded losts focus vue works fine setup", "d": "10/2016"}, {"body": "behaviour firefox safari works well", "d": "10/2016"}, {"body": "using vue realized following use camelcase html prop work fine although documentation suggests kebabcase problem use webpack uglifyplugin minify bundle camelcase props lead errors bug pretty nasty think camelcase forbidden general htmlprops", "d": "6/2017"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "unless sure vuerelated bug please use forum supportreleted questions forumvuejsorg", "d": "10/2016"}, {"body": "hi samgre thanks report look seems adding key topmost vfor seems make work docs recommended provide key vfor whenever possible unless iterated dom content simple intentionally relying default behavior performance gains think may nonetheless considered bug ping", "d": "10/2016"}, {"body": "thanks fast reply somehow missed attribute learning vue vfor worked nicely without submitting issue noticed also work around bug changing element name either reproduction example", "d": "10/2016"}, {"body": "please make sure follow issue reporting guideline provide reproduction jsfiddlecodepen etc thanks", "d": "10/2016"}, {"body": "updated nueko u using laravel elixir yes something browsersync delay", "d": "10/2016"}, {"body": "yes hot reload", "d": "10/2016"}, {"body": "according phanan length tasks interestingly sixth reserved keyword causes vue template parser fail reproduce issue easily using one task reproducing fiddle", "d": "10/2016"}, {"body": "keywords breaks foraliasre regexp expression try make pr", "d": "10/2016"}, {"body": "iraklisg update fiddler could assign server data variable initalize app would better way", "d": "10/2016"}, {"body": "seemed setting user main app component also component underneath component still thought element seems weird", "d": "10/2016"}, {"body": "keep experiencing seemingly simple cases template tries access data property wants render data exists component data return somedata null however setting somedata method besides initial data property causes error thrown happen anyone else seems like bug vue either improper error handling something end maybe correctly seems pretty straightforward seeing individual node think rendered serverside rendering match clientside seems verified remove typeof window undefined check created method set data client server everything matches error thrown way around update error produced set data within mounted method reason way scenario serverside rendering coupled clientside rerender seen projects try prefetch data would nt seem ordinary set data within created activated beforemount methods throwing error try", "d": "10/2016"}, {"body": "really know hydration part codebase well seems asking app break rendering component server therefore div rendered server app booting client change state component component virtualdom rendered essentially means server nt render div virtualdom client expects exist reason happen case change component state initial clientside render virtualdom virtualdom renders without div like server change components state triggering rerender includes div", "d": "10/2016"}, {"body": "linusborg thanks trying understand error produced sounds like solid reason", "d": "10/2016"}, {"body": "got error due comments containing angle braces outside one singlefilecomponents eg file vue readme component alternative", "d": "5/2018"}, {"body": "type error please help trouble guyz", "d": "6/2018"}, {"body": "closed issue different problem use forumvuejsorg questions please", "d": "6/2018"}, {"body": "hi thanks filling issue please provide repro jsfiddlecodepen etc thanks", "d": "10/2016"}, {"body": "example linked function look fine outside thatyou using deprecated vue functionality everywhere ready vel debounce dispatch please clean code vue copatible syntax see problem persists", "d": "10/2016"}, {"body": "closing since looks like usage question encourage follow linusborg instructions still trouble open topic forums forumvuejsorg", "d": "10/2016"}, {"body": "actual component one showed yesterday jus referentially js export default props class placeholder data function return address return input bound autocomplete address google autocomplete object autocomplete google inputs retrieved inputs route longname country longname longname locality longname postalcode shortname api domain key libraries places mounted function consolelog mounted windowonload thisloadscript thisapidomain key thisapikey amp libraries thisapilibraries thisbindautocomplete controls address changes send listeners return void watch address function emit setaddress thisaddress methods load google class given library param src param callback return void loadscript function src callback var script documentcreateelement script documentbodyappendchild script callback scriptonload callback scriptsrc src bind autocomplete property return void bindautocomplete function thisautocomplete new googlemapsplacesautocomplete refscomplete types geocode thisautocompleteaddlistener placechanged thispipeaddress look places dispatch event return void pipeaddress function var data var place thisautocompletegetplace placeaddresscomponents undefined var lt placeaddresscomponentslength var input placeaddresscomponents types thisinputs input data input placeaddresscomponents thisinputs input data jsonstringify data emit setaddress jsonparse data get user location return void geolocate function navigatorgeolocation var vm navigatorgeolocationgetcurrentposition function position var geolocation lat positioncoordslatitude lng positioncoordslongitude var circle new googlemapscircle center geolocation radius positioncoordsaccuracy vmautocompletesetbounds circlegetbounds mounted method even fired thanks", "d": "10/2016"}, {"body": "better asking question forums", "d": "10/2016"}, {"body": "forums", "d": "10/2016"}, {"body": "appreciate help want leave anyone may problem take reference needed uninstall elixir compiler vue install new one problem installed started using new version without uninstalling old one thanks", "d": "10/2016"}, {"body": "using one handler multiple parameters handlevalid value type type value type valid true inside components emit valid value email emit valid value password", "d": "10/2016"}, {"body": "multiple type fields maybe could use id case instead", "d": "10/2016"}, {"body": "try something like vue isvalid valid invalid export default data return fields email value valid false password value valid false computed isvalid return objectvalues thisfields every field gt fieldvalid input components value input validity status", "d": "10/2016"}, {"body": "get confused model update part thought update value something works would good certainly great main issue need fields state whereas previously nt could use refs state pretty major pain ass clutters state without good reason", "d": "10/2016"}, {"body": "main issue need fields state whereas previously nt could use refs thedutchcoder inconvenient indeed something mind situations like", "d": "10/2016"}, {"body": "add context could previously need add additional state handler deal js data return email value isvalid false password value isvalid false method dynamically handles input changes computed prop computed isready return thisemailisvalid amp amp thispasswordisvalid mainly extra useful state handler bit pain would great could alternative used refs remain reactive sure implications would deprecated trying illustrate use case old refs useful", "d": "10/2016"}, {"body": "would ok rename issue something like refs reactive able use computed properties", "d": "10/2016"}, {"body": "sure go thanks discussion guys appreciated vue amazing framework open conversations around make better", "d": "10/2016"}, {"body": "get confused model update valid part thought update value component emits event accepting prop vmodel update value parent component would need something like vue props value oninput event emit value eventtargetvalue valid thissomevalidatorfunction imagine better way though without reactive refs perhaps using mixins somehow still reactive refs though super useful thing general", "d": "10/2016"}, {"body": "alright least example works added state real issue combination vuex since vuex getters nt yet available state defined ca nt use populate values could use something quite dirty", "d": "10/2016"}, {"body": "two repos compare two scenarios hope clearly illustrates current problem biggest issue right fact ca nt use computed props child component anymore even nt work emit event nt updated yet", "d": "10/2016"}, {"body": "also found reactive refs useful unit tests like suggested way replace sort pattern otherwise would nice work", "d": "10/2016"}, {"body": "agree thedutchcoder using refs easy way parent read child information inadvertently makes refs seem useless without reactivity commonly also use practice check validity ref components validate parent component", "d": "10/2016"}, {"body": "access could create use html isvalid valid invalid normal input would try computed setter using testing checking component instance calling methods child components data stuff andor never problem", "d": "10/2016"}, {"body": "using vue meteor really miss feature meteor default frontend blaze ref available part party package part core possible core least plugin would valuable option", "d": "1/2017"}, {"body": "indeed inconvenient trying use computed properties control appearance element based property two siblings html codus js computed showtitle return refsloginmodalshown refssignupmodalshown believe legitimate use case nice able something like however seems empty computed property executed simple test included following computed property logged second later populated refs object logged thoughts", "d": "4/2017"}, {"body": "another use case running testing whether component focused use control state right listening separate methods set data property called truefalse works pain implement solution computed properties shine", "d": "4/2017"}, {"body": "well use case would even work reactive refs changed way neither data dom changed", "d": "4/2017"}, {"body": "ah good call technically thing changing damn", "d": "4/2017"}, {"body": "ca nt recall focus event bubbles register event listener save target element component data would reactive computer prop could reevaluate", "d": "4/2017"}, {"body": "second thought could lead unnecessary rerenders", "d": "4/2017"}, {"body": "simplest workaround using", "d": "7/2017"}, {"body": "also find situations reactive handy without must resort complex solution eg emitvuex get children state anyway think getting children state parent natural straightforward without reactive feature actually useless", "d": "8/2017"}, {"body": "related thinking seems nt reactive completely useless outside event handlers nt", "d": "10/2017"}, {"body": "guru awful lotta folk seem get trouble nt think viewmodel vue loosely inspired mvvm least step store pattern global variable contains page state take example email password current values would say validity page level state inputs interacting directly state declared components computed prop isvalid also looks state variable implement without without ref see many folk getting knots nt think store vue stuff directly talking vue stuff antipattern vue wants interact store", "d": "10/2017"}, {"body": "application starts multiple controls various components start multiple stores component store order organize state application logical reactive objects bound respective component need access main vue reactivity start useful otherwise start using signal topdown signal mess far away", "d": "10/2017"}, {"body": "personally impression refs mostly meant useful means get html element reference absolutely need nt reactive anyway using way directly access child component state seems like violation good component design agree would convenient could see tempted take advantage convenience ways would ultimately make components harder manage especially third party component component creator makes guarantees propsevents interface ultimately one business uses internal state nt make assumptions remaining compatible versions author worry others relying use internal state", "d": "10/2017"}, {"body": "course everyone tries design components way sibling components like case button lives different slot parent think refs components actually make code cleaner instead cluttering meaningless container components hold part state children", "d": "10/2017"}, {"body": "true see point well imagine middle ground would something like distinguished public private propertiescomputedsmethods way component interface could remain welldefined components could take useful references children", "d": "10/2017"}, {"body": "think kinda like idea could maintain compatibility making everything public default someone wants privatize data could specify fields part public interface using property like public component refs could proxy objects contain exposed members", "d": "10/2017"}, {"body": "updates", "d": "1/2018"}, {"body": "sibling components like case button lives different slot parent use bus instance example use dedicated state management solutions like vuex info meaningless container components hold part state children meaningless may good solution make maintainable use case", "d": "1/2018"}, {"body": "akryum use case", "d": "1/2018"}, {"body": "solution provide inject without using reactive data documentation provideinject", "d": "1/2018"}, {"body": "hi expression attribute require reactivity computed something else internal vue logic always child undefined html child typeof refsmychild thank", "d": "2/2018"}, {"body": "refs reactive could also watched", "d": "5/2018"}, {"body": "progress feature", "d": "8/2018"}, {"body": "see problem reactive refs solve also think good reason reactive says docs refs meant escape hatch direct child manipulation avoid accessing refs within templates computed properties know important pattern components kept isolated communicate props events interface refs exist edge cases pattern insufficient refs reactive allow antipattern refs used instead events result components coupled agree messy making forms vue inputs separate components doubt reactive refs would convenient think easy abused better solution considered", "d": "9/2018"}, {"body": "nt use template", "d": "10/2016"}, {"body": "asselin thanks good catch shmasya brought attention mistake documentation problem templates anything", "d": "10/2016"}, {"body": "linusborg need method use old way template", "d": "10/2016"}, {"body": "sure vue offers ways", "d": "10/2016"}, {"body": "linusborg path choose easier faster way using render created people came react", "d": "10/2016"}, {"body": "let move vuejsorg repo shmasya matter preference familiar templates suggest stick templates use render functions feel component logic expressed templates", "d": "10/2016"}, {"body": "shmasya case needed write render function control template could provide beginning page render functions provides example might want write one vs use template linusborg go ahead open issue vuejsorg repo per evan", "d": "10/2016"}, {"body": "pattern longer supported recommended vue always try drive presence child components via parent state instead imperatively", "d": "10/2016"}, {"body": "investigation decided keep current behavior changing value way prop validation simply produces warnings side effect makes possible entirely strip related code production mode preserve consistent behavior devprod prop validation quite expensive perf sensitive case nt seem strong advantage setting invalid value justify perf loss prod mode consider breaking change update documentation accordingly", "d": "10/2016"}, {"body": "well think find solution question need set data variable accept value props change data corresponding event emit input event vmodel handle value change something along lines template javascript javascript data function return checked thisvalue props value work", "d": "10/2016"}, {"body": "phatchai work around issue", "d": "10/2016"}, {"body": "issues bugs feature requests please use forumvuejsorg gitter", "d": "10/2016"}, {"body": "phatchai example works correctly change parent model checkbox component would nt change need take checked props emit event input onchange nt store local state example vue export default name vswitch props value methods changehandler emit input thisvalue", "d": "12/2017"}, {"body": "needs better documentation vmodel everywhere look says shorthand input emit input eventtargetvalue issue proves otherwise bug lack documentation nt use examples broken solution use eventtargetchecked eventtargetvalue", "d": "9/2018"}, {"body": "myxibrium solution nt work changing vue export default props value", "d": "10/2018"}, {"body": "hi weepy thanks suggestion nt think feasible though older browsers nt support custom elements reliably use element names identify vnode component internally would change many places mere convenience improvement feels inconsistent see component element names use templates placeholders appear final template component successfully processed", "d": "10/2016"}, {"body": "thanks number killer", "d": "10/2016"}, {"body": "number already currently browser support intend keep", "d": "10/2016"}, {"body": "ca nt check repro right could migrating props anti pattern", "d": "10/2016"}, {"body": "inline props immutable value every time parent rerenders mutated child prop reset back inline value relying reactively mutating inline prop usage longer makes sense therefore inline values made reactive want allow inline props initial value declare field uses props value", "d": "10/2016"}, {"body": "declare component template may want set initial value attributes bind parent variablecan vuejs support proponce much convenient set initial value template js code", "d": "11/2016"}, {"body": "closed issue also issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "11/2016"}, {"body": "think expected behavior since created root component rule data scope", "d": "10/2016"}, {"body": "explained ktsn root direct children appear root template everything parent template compiled parent scope everything child template compiled child scope", "d": "10/2016"}, {"body": "clear morning thanks", "d": "10/2016"}, {"body": "hi thanks filling issue get pojo viewmodel object way easy use situation specially ajax pass reactive data obj getterssetters library example ajax work data pojo guess could hardly practical advantage cloning passing need deep clone implementation decent performance suggest lodashunderscore probably vue concern side note really care performance probably avoid using objectkeys array prototype functions loop object", "d": "10/2016"}, {"body": "want clone ajax nt see reason converted object works exactly serialization nt see point cloning", "d": "10/2016"}, {"body": "ok probably need test give vue data directly jquery ajax throw exception look solution internet found answer use jsonparse also mentioned vue api web site try found better solution get plain object guess cause jquery exception getter setter try next days create jsfiddler example vue jquery prove issue project working lodash underscore needed keep mind suggestion js code suggestion improved code jsonparse objectkeys work faster prop obj obj prop hasownproperty make test", "d": "10/2016"}, {"body": "ok tested team fnlctrl suggest better performance thanks", "d": "10/2016"}, {"body": "ok tested jquery ajax helper giving data object works perfectly really sure happends days ago reason jquery give back exception seems appear anymore", "d": "10/2016"}, {"body": "hi thanks filling issue improvement roadmap using design decision avoid manually parsing expressions bloats code takes time unlikely changed however relatively easy remove add every expression write template afterwards maybe option compiler try using jsx nt negative opinions official babel plugin compiling jsx vue render function really works great much flexible templates nt require", "d": "10/2016"}, {"body": "hmm precompiled templates although using cpscompliant work strict mode seems bit top platform enforce strict mode party code though removing generated render functions involves fundamental changes compiler implementation marginal gain unfortunately nt think happen time soon alternative solution fnlctrl suggested using render function jsx", "d": "10/2016"}, {"body": "hi problem salesforce exposes spa develop components components must directly manipulate dom others components use official way based events communicate components strict mode security features required keep component sort sandbox said tried jsxrender functions works precompiled templates lot better still productive even jsx except lack valid vmodel alternative use value onclick binding clearly optimal lot data entry understand situation probably edge case still sad hear feature roadmap", "d": "10/2016"}, {"body": "also concerned turn security features use vue could deal breaker casually cruising code nt come across anything necessitates like know technical reason nt seem replaced also replacing lines like lines like furthermore nt understand purpose building strings rather using actual functions replacing dynamic closure variables templates like create closure easy replace name value var foo elvalue create function regular javascript string function var x foo tostring replace foog elvalue usable function standalone mode easy template prebuilt mode believe pattern would make possible violate csp still build tools get strings need export could get help someone little familiar code pretty confident could get converted insecure nonstandard proper secure something missing nt possible way", "d": "11/2016"}, {"body": "resolved issue modifying compiler way simple modification let compile templates strict mode difference approach every expression references view model variables must prefixed example xx becomes xx think could avoided introducing expression parser logic determine expression variable view model variable could slow compilation easy patch would great option instruct vueloader vueify compile templates strictmode think users need functionality could accept prefix vm variables code better switch another framework", "d": "11/2016"}, {"body": "really nt even get fancy check add prefix key functions tested simple demo perhaps test help find missing fix beyond strict mode nt see reason yet needs created insecure strings run eval easy create functions stringify later", "d": "11/2016"}, {"body": "see reasons explained", "d": "11/2016"}, {"body": "modified compiler strict mode compliant changing lines code saying solution fancy agree pr trying address issue clean way careful could lot edge cases address maybe would change something different could value vm could use loop variable think prefix vm variables case anyway seems trying exactly thing using two different approaches maybe approach could easier want modify compiler additional option", "d": "11/2016"}, {"body": "micheletriaca sorry looking phone looked like lot lot extensive line wrapping see browser see two agree think controlleras syntax angular basically idea intemplate prefix saying honestly would prefer think mix two approaches could keep api compat break existing apps", "d": "11/2016"}, {"body": "using example approach users could compile templates strict mode case would need write expressions referencing also scope jsx example seems solution unlikely accepted reason nt created pr want break existing apps think correct approach address issue one suggested babel plugin postprocess templates use full javascript parser assign correct scope variables expressions", "d": "11/2016"}, {"body": "filed issue requires information using vue vue bug suggestion bug reproducible link jsfiddle component nt handler function vue issue best", "d": "10/2016"}, {"body": "using vue bug error message use well vue take suggestion improve error message style make specific mistake developer makes mistake fix little time knowing exactly mistake comparison react js show component name along line number course error wish error messege specific", "d": "10/2016"}, {"body": "lots messages vue nt really say much vue safety checks seem lacking unfortunately", "d": "10/2016"}, {"body": "guess vue add bit info warnings component name component type make warning message configurable development env", "d": "10/2016"}, {"body": "try provide component information whenever one maybe oversight justnobody please provide specific examples messages lacking improve complaining achieves nothing", "d": "10/2016"}, {"body": "nt really complaining figured kind something people already knew run plenty small edge cases past gave odd nondescript message actual issue instead rooted deep source issues nt emit error instead caused weird rendering bug easier track others nt bother reporting since figured stupid one particular actually created pull request took long figure wrong imagine lot fixed bad staying silent guess message readers think bug report even might end bug", "d": "10/2016"}, {"body": "even providing name key component nt help much thanks stopping adding issue improvement", "d": "10/2016"}, {"body": "thanks evan", "d": "10/2016"}, {"body": "hi noticed recently lack line numbers makes things really hard debug especially component big component couple thousands lines received warning vue warn error render function typeerror vmvalues itemname undefined component name line number firefox console kind cases would really useful specified line number course split component several smaller ones dig lines editor search point please consider adding line numbers next versions thank", "d": "11/2017"}, {"body": "please add line numbers got next message vue warn error render typeerror read property length undefined found know fails construct variablelength variable null problem many length constructs data coming external service", "d": "11/2017"}, {"body": "read property length undefined nt find problem big webapp hard suppose found file cause nt know error exactly erraze line line find line broken xd", "d": "11/2017"}, {"body": "like please something thanks", "d": "12/2017"}, {"body": "love vue lot working two years lack specificity render errror complaintrequest fix error occurs either template corresponding js code line number would greatly help even problem located either template js code", "d": "12/2017"}, {"body": "problem", "d": "1/2018"}, {"body": "yes problem understand means nt know fix going components find issues kind lot work", "d": "6/2018"}, {"body": "vuecommonjs means nothing try find occurred error", "d": "8/2018"}, {"body": "agree line number source file speedup debugging lot", "d": "9/2018"}, {"body": "anything new issue closed since issue still", "d": "9/2018"}, {"body": "would love fixed debugging complicated right need file name line number easier debugging please fix", "d": "9/2018"}, {"body": "default go data attribute goes string range input already starts number source truth solve put ps hey brasilian nt asks question us first bug xd", "d": "10/2016"}, {"body": "hi thanks filling issue may surprising javascript type html input values regardless type attribute string browser behavior work around use modifier halfeld suggested", "d": "10/2016"}, {"body": "correct wrong believe vue root instance use propsdata check passing component would correctly mind posting vue specific code verify", "d": "10/2016"}, {"body": "true propsdata would need used javascript files part server side views meaning output variables const app new vue el app simple", "d": "10/2016"}, {"body": "nt tried using propsdata personally believe strictly using props root instance deprecated see root instance longer use template props use propsdata instead solution laravelvue apps include data external store aka script tag take look laravel default bootstrap file see laravelcsrftoken reference could follow pattern include user root instance data object instead propspropsdata ps sorry poor formatting writing phone", "d": "10/2016"}, {"body": "craigpaul actually workaround", "d": "10/2016"}, {"body": "craigpaul pointed passing props root instance templates deprecated please use instead glad found workaround", "d": "10/2016"}, {"body": "fnlctrl one use propsdata", "d": "10/2016"}, {"body": "true propsdata would need used javascript files part server side views meaning output variables saw craigpaul suggested replied thought knew", "d": "10/2016"}, {"body": "render function check brasilian written article", "d": "10/2016"}, {"body": "hi thanks filling issue get runtime build compile templates either indom templates option case need standalone build helpful section explaining", "d": "10/2016"}, {"body": "thanks halfeld fnlctrl standalone version works fine case needed use standalone version brunch alias config brunchconfig", "d": "10/2016"}, {"body": "chrisvfritz", "d": "10/2016"}, {"body": "thanks davidkhess open issues vuejsvuejsorg repo core documentation", "d": "10/2016"}, {"body": "", "d": "10/2016"}, {"body": "try using node", "d": "10/2016"}, {"body": "egoist said", "d": "10/2016"}, {"body": "parsing generating empty text node two probelm workaround remove space release fix edit remove template default slot guess work repro", "d": "10/2016"}, {"body": "upgrade probably bug report issue instead", "d": "9/2016"}, {"body": "tested latest vue vueloader works try using vue latest vueloader updating still issue please open issue vueloader", "d": "10/2016"}, {"body": "confirm happens even freshly cloned project never happened rc releases environment details node v npm v npm ls grep vue vue vueloader vuehotreloadapi vuestyleloader vuetemplatecompiler vuerouter vueserverrenderer vuex vuexroutersync", "d": "9/2016"}, {"body": "checked distvuejs source code line dont change made changed works sure break stuff xd", "d": "9/2016"}, {"body": "noticed need reverting npm main export commonjs build fixing soon", "d": "9/2016"}, {"body": "fixed w please fresh npm install", "d": "9/2016"}, {"body": "import libary get error ssr nt want change code", "d": "11/2016"}, {"body": "facesea import get error ssr", "d": "11/2016"}, {"body": "dualwield stop ssr waiting update used inject object nt know", "d": "11/2016"}, {"body": "fyi something vue fix instead libraries prevent accessing directly without checking environment first opening issues libraries want use regarding", "d": "11/2016"}, {"body": "thank much", "d": "11/2016"}, {"body": "majority libraries uses window document clientoriented think instead asking everyone find solution problem better think global universal solution would solve problems glance thank", "d": "1/2017"}, {"body": "agree ramyou end forking libraries patching check environment would great incorporated vue way vue convert framework hells totally love sailsjs vuejs architecture kudos vuejs team regards", "d": "1/2017"}, {"body": "add selected attribute template update demo", "d": "10/2016"}, {"body": "peteranny clarify expected behavior optionssplice options b rendered html becomes getting result provided clicking remove clicking value b option become index exactly become value b click became click", "d": "10/2016"}, {"body": "fnlctrl um thank testing think asked wrong question according testing value b become click true question value b selecting b anyway seen image select option ought select option value misguessed value b nt change", "d": "10/2016"}, {"body": "peteranny may bug remained changed dom supposed reflect change sure try adding prop defcc suggested note mustache binding propsattrs deprecated please use instead add prop probably made vue think safe update selected value dom", "d": "10/2016"}, {"body": "tested worked expected marking bug", "d": "10/2016"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "watcher dependencies change need reevaluate find whether value changed filter part watcher expression reevaluated makes sense", "d": "9/2016"}, {"body": "ahh yes make sense", "d": "9/2016"}, {"body": "hello thanks filing issue seems bug indeed", "d": "9/2016"}, {"body": "seems bug android webview still", "d": "11/2016"}, {"body": "works interesting found turn falsy values strings vue apply attribute expected case applying style attribute similar issues aria attribute boolean value eg input element falsy value", "d": "9/2016"}, {"body": "problem caused vue code case please ask stack overflow similar place issue tracker reserved exclusively bug reports feature requests vuejs", "d": "9/2016"}, {"body": "yes nt think asking stack overflow help issue affected many wordpress sites witch includes script mean vuejs used wordpress", "d": "9/2016"}, {"body": "nicebro undestand concern issue tracker think place fix incompatibilities cms sadly turn forum idea maybe find help wordpress community", "d": "9/2016"}, {"body": "hi found solution someone else interested maybe cleanest least vuejs works", "d": "9/2016"}, {"body": "something babel buble build env nt understand modifying vue code repro", "d": "9/2016"}, {"body": "posva dev environment babel officially supports object spread operator stage see however quite sad rollup nt support also sad vue chose rollup quote babel preset things like spread attribute works right box use browserify webpack plugins included therehowever stated time supported rollup least tons issues solve get working still nt got workingi gave rollup went webpack solution took minutes set webpack spread attribute works", "d": "9/2016"}, {"body": "practical difference supported browsers also standardized works future use reason write extra code achieves nothing", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "making components functional original vue example duplicating inside please make sure check implementation matches original implementation posting questions thanks", "d": "9/2016"}, {"body": "using vue example vue still rc officially released master branch still change name hook example works expected also works expected", "d": "9/2016"}, {"body": "using locally right computed property works function another problem code overlooked see works bad sorry", "d": "9/2016"}, {"body": "actually works replaced also works inner replaced works outer replaced html toy toy b guess using multiple inside ed caused problem doubt root cause nt think keying valid indeed warned", "d": "9/2016"}, {"body": "yes u r right however program use multi templatewhich may cause nested template vfor multiple vif condition make use velse run problem add normal div prevent problembut may bring many meaningless tag control switch nexttick avoid problem btw use key real program run wellso nt think key problemi agree template problem", "d": "9/2016"}, {"body": "thank", "d": "9/2016"}, {"body": "two keyed children inside also get error duplicate keys html order avoid need add thing keys html", "d": "12/2017"}, {"body": "", "d": "9/2016"}, {"body": "slot attribute must used parent element panel otherwise move element outside panel", "d": "9/2016"}, {"body": "posva fnlctrl", "d": "9/2016"}, {"body": "screenshot reproduction", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks example hard follow one letter variable names everywhere also make sure problem nt appear without vuex adding example said tried using keys example think update example publish forums able get help", "d": "9/2016"}, {"body": "remove vuex codepen add keys vforand change single letter significant word use data set dataand use splice data occurs think bugmay help", "d": "9/2016"}, {"body": "moreafter testingi found actual problem isin template must one root elementor situation would happen even though add two template one render still problemi think vue consider multiple element int template forbiddenit throw warn otherwise bug click root element wrap thing normal click without root element sth happend vuejs version reproduction link steps reproduce open console run test function expected open console run success function click keep one root element vfor problem dispear", "d": "9/2016"}, {"body": "please specific mean late binding provide desired usage code sample vague feature request", "d": "9/2016"}, {"body": "pulling data input fields achieved vanilla js access form element access form variable using name attribute field even add element fast reference vue instance vue", "d": "9/2016"}, {"body": "posva nt want pull data field really want pull data model wrote wrong sorry thank response already found way get data dynamic model accomplised via vm compile", "d": "9/2016"}, {"body": "unfortunately expected behavior confusing know basically impossible access inside render function functional functional components eager render function called directly render function child component instances created sense like rendering context instead stateful components instantiated parenttochild order child components access parent instance", "d": "9/2016"}, {"body": "would possible document functional section component documentation", "d": "9/2016"}, {"body": "asselin yes cc chrisvfritz", "d": "9/2016"}, {"body": "shall done", "d": "9/2016"}, {"body": "thank guys", "d": "9/2016"}, {"body": "hi danjel kind misunderstand happening whenever reactive data changes render function called true function creates new virtual dom vue diffs new vdom old one changes dom two differ since whole vdom diffing incredibly fast javascript compared actual dom updates ver cheap operation actually verify chrome devtools codepen right click toggle button demo inspect element left click button make toggle devtools elements tab see element highlight changed vue list button get highlighted rerendered", "d": "9/2016"}, {"body": "sidenote performance huge lists want optimize could extract list child component depends list data case vue would even rerender vdom child component click toggle button instead would reuse current vdom vue understands child component depend data toggle button changed", "d": "9/2016"}, {"body": "oh explains lot thanks definitely keep mind course absolutely right actual rerendering taking place still initial rendering taking quite guess nothing dom slow vue needs create dom nodes first", "d": "9/2016"}, {"body": "still initial rendering taking quite guess nothing dom slow vue needs create dom nodes first correct", "d": "9/2016"}, {"body": "linusborg issues slove problem thx", "d": "11/2017"}, {"body": "intend solve anything closed issue better describing specific situation forum forumvuejsorg see post", "d": "11/2017"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks bug clear reproduction steps", "d": "9/2016"}, {"body": "nevermind use vue django jinja seems using returns breaks vue well necessarily vue fault thought", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks add css classes", "d": "9/2016"}, {"body": "please make sure follow issue reporting guideline provide reproduction jsfiddlecodepen etc reproduction created please open issue vuerouter repo thanks", "d": "9/2016"}, {"body": "vuerouter work vue vuerouter see releases page", "d": "9/2016"}, {"body": "ugh stupid ie guess go flicker version share callback pr welcome", "d": "9/2016"}, {"body": "using syntax version syntax changed lot please read docs using version", "d": "9/2016"}, {"body": "thanks bro really nt know ended docs may add notification legacy documentation alert people current docs", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "9/2016"}, {"body": "thanks remember deleted problem", "d": "9/2016"}, {"body": "use also result", "d": "9/2016"}, {"body": "please use jsfiddle reproduce", "d": "9/2016"}, {"body": "last version vue please", "d": "9/2016"}, {"body": "update last version effect", "d": "9/2016"}, {"body": "bug root element template vue root element allowed", "d": "9/2016"}, {"body": "one root element canjsfiddle html export default data return open false use result html test msg false test slot default", "d": "9/2016"}, {"body": "ca nt use jsfiddle use", "d": "9/2016"}, {"body": "thank think find solution", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks enough variable need replaced code check templates help setup", "d": "9/2016"}, {"body": "would appreciate pr directly", "d": "9/2016"}, {"body": "let check got vue rollup working multiple projects intrigues", "d": "9/2016"}, {"body": "vue constructor call", "d": "9/2016"}, {"body": "idiot thanks", "d": "9/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "9/2016"}, {"body": "hi posva reproduced seems issue appear chrome chrome version ox", "d": "9/2016"}, {"body": "thanks checking", "d": "9/2016"}, {"body": "missing event input typefile let add pr", "d": "9/2016"}, {"body": "leocflam happening input value set js browser security reasons means input read therefore proper way handle using handler right way handle worth mentioning docs", "d": "9/2016"}, {"body": "leocflam example better uses filelist better value", "d": "9/2016"}, {"body": "fyi created pr add warning", "d": "9/2016"}, {"body": "great detailed hey thanks", "d": "9/2016"}, {"body": "maybe good idea add section official documentation aswell found searching quite detailed information file input even though change warning available feels quite hard create responsive form file uploads spa", "d": "5/2017"}, {"body": "nice idea chrisvfritz opinion", "d": "9/2016"}, {"body": "everyone using vue npm fact possibly think would good idea include generic reminder vue plugins likely also need updated", "d": "9/2016"}, {"body": "chrisvfritz updates either way moved vuejsorg repo", "d": "11/2016"}, {"body": "done sorry forgot come back close", "d": "11/2016"}, {"body": "also noticed remove vmodel component working correctly", "d": "9/2016"}, {"body": "hi thanks filling issue work custom components need manually emit input event checkout docs", "d": "9/2016"}, {"body": "fnlctrl always need emit input event maybe try explain trying basically trying create custom textfield component need recreate lazy modifier thought handle way oninput e const value etargetvalue thisisdirty value btw need updated immediately ca nt use onchange listener thislazy emit input value lazy prop enabled would emit input event blur see issue nt emit event inside function sure handle", "d": "9/2016"}, {"body": "fnlctrl also nt explain part removing fixes issue cc", "d": "9/2016"}, {"body": "always need emit input event yes using vmodel components work nt explain part removing thisisdirty value fixes issue sorry nt notice noticed part missing nt quite time dig leave open maybe posva linusborg would kindly explain going", "d": "9/2016"}, {"body": "sqal vue means nt fire event prop always remain initial value since never fire event prop never changes thing trigger rerender state input char first time char appears first native behavior tag input causes change turn causes rerender notice still empty content input gets cleared subsequent char inputs native behavior still takes effect see well time remains rerender occurred content cleared removed even first rerender occur changed see input immediately consequence rerendered modified code templatebased one make things clearer", "d": "9/2016"}, {"body": "happens oninput triggered first time changes true false leads rerender component used render function since prop still empty string content input reset subsequent calls oinput nt lead rerender already true happens nt emit event parent gets value triggers update prop child would lead new value inserted input upon first rerender everything would fine example broke cycle speak edit ah centaur beat", "d": "9/2016"}, {"body": "thank centaur linusborg detailed explanation answers helped understand vue little bit better", "d": "9/2016"}, {"body": "review code made changes emit event changes happens child", "d": "11/2017"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks", "d": "9/2016"}, {"body": "third time already ask question issue please nt makes harder us review real issues vue", "d": "9/2016"}, {"body": "ok last time registred forum github account post topic emailnotconfirmedemailsent error", "d": "9/2016"}, {"body": "add public email github profile time register forum send confirmation email", "d": "9/2016"}, {"body": "public email gmailcom allready github account receive confirm registration message", "d": "9/2016"}, {"body": "must shown profile work", "d": "9/2016"}, {"body": "got crazy spent last hour register forum error misconf redis configured save rdb snapshots currently able persist disk commands may modify data set disabled please check redis logs details error sorry distract realy nt know write forum nt like move another forum issue tracker confirm account manualy register second public email baranova idteru github account cant confirm error", "d": "9/2016"}, {"body": "try using instead case", "d": "9/2016"}, {"body": "fyi binding boolean object looks like binding value basically think intended js behaves passing copy boolean instead reference get working using key binding actual property", "d": "9/2016"}, {"body": "intended behavior mentioned comparison issue make sure migration guide", "d": "9/2016"}, {"body": "seems like using sake transition effects suggested usage similar earlier issue used together element instead think source time yield correct outcome wontfix since equivalent usage workaround", "d": "9/2016"}, {"body": "thanks help workaround nt work case course timers demo demo purpose real world usage deal user events could lot complicate jsfiddle get many flickering problems js errors implementing hack decided switch reliable solution using css classes without counting vue transitions looking forward using vue hoping things get better good luck", "d": "9/2016"}, {"body": "\u5c1d\u8bd5debug \u6570\u7ec4\u7684\u4fee\u6539\u662f\u5426\u672a\u88abvue\u8ffd\u8e2a", "d": "9/2016"}, {"body": "\u8bf7 \u7ed9 \u91cd \u73b0", "d": "9/2016"}, {"body": "forgot tag friend", "d": "9/2016"}, {"body": "please read issue guidelines read docs ask questions forum gitter", "d": "9/2016"}, {"body": "finally found problemi forgot change original code tab index another file warn warn", "d": "9/2016"}, {"body": "first forgive post going similar situation vuejs version vuexjs version file actionsjs export const addform dispatch gt dispatch addform export const deleteform dispatch gt dispatch deleteform componentvue lt template lt ul class dropdownmenu lt li lt click addform save lt lt li lt li lt click deleteform delete lt lt li lt ul lt template import addform deleteform vuexactions export default actions addform deleteform result vuecommonjs vue warn property method addform defined instance referenced render make sure declare reactive data properties data option vuecommonjs vue warn property method deleteform defined instance referenced render make sure declare reactive data properties data option correct warning", "d": "12/2016"}, {"body": "carvalhoviniciusluiz nt defining component please refer", "d": "12/2016"}, {"body": "duplicate", "d": "9/2016"}, {"body": "using valid dom structure find work please feel free reopen", "d": "9/2016"}, {"body": "thanks reporting actually duplicate", "d": "9/2016"}, {"body": "know closed maybe future reference help migration", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "would add class via already present element stay thats case nothing transition", "d": "9/2016"}, {"body": "sorry simplified example actually", "d": "9/2016"}, {"body": "still question basically function present definition animationtransition present anyway put terms expect would exactly right", "d": "9/2016"}, {"body": "decoration class make semanticize semantic ui use selector example prevent naming conflict wo nt work issue also occur want put transition", "d": "9/2016"}, {"body": "disclaimer bear csswizardry weak never worked semantiui correct wrong semanticui relies order classnames sounds like recipe desaster dynamic uis work section element would would look like leave transition valid html furthermore vue uses ocurrences would removed", "d": "9/2016"}, {"body": "think change naming convention animation solve problem temporary sorry wasting time thanks explanation", "d": "9/2016"}, {"body": "need sorry always glad help", "d": "9/2016"}, {"body": "think text element style applied basically intended still unsure use", "d": "9/2016"}, {"body": "posva agree ca nt apply text needs surrounding element work vshow", "d": "9/2016"}, {"body": "intended abstract element target apply fyi never worked even", "d": "9/2016"}, {"body": "well definitely shame please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "9/2016"}, {"body": "looks like windowpostmessage chromium sometimes random delays problem happens chance project still havent found reliable way reproduce", "d": "9/2016"}, {"body": "case may bug chromium tried stable version browser", "d": "9/2016"}, {"body": "delays reproduce chromium based browsers chrome opera delays firefox tried ie yet", "d": "9/2016"}, {"body": "starting point repro", "d": "9/2016"}, {"body": "faced similar problem windows chrome example yellow square nt move scrolling container element one yellow square swings vertically scrolling problem", "d": "9/2016"}, {"body": "well reproduction part problem small lag sometimes delay gets bigger still problem", "d": "9/2016"}, {"body": "sigh may need revert primary reason changed implementation original implementation buggy ios uiwebview gt simply breaks scrolling page bit however sniffing apart environments like wkwebview native ios safari extremely tricky uses setimmediate shim using uses macrotask queue instead microtask queue used difference macrotasks queued current browser renderingio jobs eg repaint scroll event microtasks queued leads behavior seen wonderfulpanda jsfiddles delays seen xelia likely associated heavy repaints scroll guess revert uiwebview sniffing", "d": "9/2016"}, {"body": "indeed seems like regression workaround works define value vmodel field upfront", "d": "9/2016"}, {"body": "fixed", "d": "9/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "9/2016"}, {"body": "posva vuejs jsfiddle", "d": "9/2016"}, {"body": "version way old please upgrade latest version reopen issue persists", "d": "9/2016"}, {"body": "thank advise run test problem exist way could tell performance optimization initialization time related documents", "d": "9/2016"}, {"body": "look guide search", "d": "9/2016"}, {"body": "posva problem similar use vue render grid cells cost almost simple way make fast", "d": "9/2016"}, {"body": "better searching asking forums google also help", "d": "9/2016"}, {"body": "posva thank much search information proposal accepted yet", "d": "9/2016"}, {"body": "seems sortdirectives function breaks objectkeys groupedmap returns array whose elements strings sorts string type value breaks", "d": "9/2016"}, {"body": "troubles", "d": "9/2016"}, {"body": "also problem directives get object params object string representation", "d": "9/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks", "d": "9/2016"}, {"body": "looking wrong source code element directives wontfix html attributes lowercased browser vue parse way around standardcompliant events lower case nonstandard events supported vue nt problem using string templates", "d": "9/2016"}, {"body": "template context simply access properties methods vm variables data one properties html datatostring also works without tostring get nice format simply use element html data", "d": "9/2016"}, {"body": "thanks quik answer maybe english bad maybe write line manual clear expressions evaluated javascript data scope owner vue instance", "d": "9/2016"}, {"body": "ping chrisvfritz", "d": "9/2016"}, {"body": "linusborg template context actually access methods etc docs correct since object nt override using simply gives expected", "d": "9/2016"}, {"body": "add little info vue internally uses keyword extend scope chain vue instance within templates means properties instance accessed directly instead example demonstrate vue troubleshooting purposes recommend instead using within lifecycle hook method able inspect explore entire instance interface made job", "d": "9/2016"}, {"body": "please important level already used components purposely override vue vshow behaviour current level inline style appropriate put condition visible class instead using vshow makes sense hidden element visible classes anyway", "d": "9/2016"}, {"body": "sylvainpolletvillard said want apply create class", "d": "9/2016"}, {"body": "posva vhide apply class element hidden would nonissue would nt class applied via vbind seems like contrived way go hiding element would make vhide completely useless responsive design popular css framework", "d": "9/2016"}, {"body": "nt exist create using vshow directive reference even publish npm post yes class applied vbind", "d": "9/2016"}, {"body": "posva sorry meant sounds like bit freudian slip haha said expanding sylvainpolletvillard said component overriding directives really something widely supported seems something like would edgecase either handled vue internal logic kind decorator whereas something common responsive framework usage supported assume also good reason directive nt apply class easy selecting nt know enough say perhaps shed bit light reasoning", "d": "9/2016"}, {"body": "applying classes mean something like html maybe modifier come handy", "d": "9/2016"}, {"body": "would still vs nuclear bomb css specificity nothing betting double conflict application layout terrible idea imo know reasons bootstrap classes use first place making decision implies bootstrap claims priority element visibility state vue interfere priority war otherwise would opposite problem user wants override styles css ca nt vue", "d": "9/2016"}, {"body": "posva yeah understood meant like said thought seemed like contrived way would defeat purpose use responsive classes remarking philosophy design choice design allow components override show directive argue poor design choice support popular css frameworks intended issue return many times future folks using responsive classes since simply look like working agree codysherman vue take precedence something like responsive class since model represent accurate picture display intent", "d": "9/2016"}, {"body": "sylvainpolletvillard correct wrong would nt modifier bound directly element like currently implemented take precedence regardless talking class applied element think would right way vue implemented", "d": "9/2016"}, {"body": "know reasons bootstrap visible classes use important first place making decision implies bootstrap claims priority element visibility state vue interfere priority war agree otherwise would opposite problem user wants override styles css ca nt vue statically overriding dynamic decision vue css seems strange idea well agree codysherman vue take precedence something like responsive class since model represent accurate picture display intent agree think nt want introduce default behaviour would breaking change left psova suggestion modifier like vshowimportant telling people build directive use class binding", "d": "9/2016"}, {"body": "sylvainpolletvillard correct wrong would nt important modifier bound directly element like vshow currently implemented take precedence regardless talking class applied element think would right way vue implemented brainbacon yes inline style highest specificity", "d": "9/2016"}, {"body": "agree think nt want introduce default behaviour would breaking change vue perhaps midterm solution like would work long documentation highlighting exact use case maybe name like would appropriate think behavior default future talking breaking changes", "d": "9/2016"}, {"body": "statically overriding dynamic decision vue important css seems strange idea well personnally use media print queries layout handled want always visible hidden printed usecase form composed multiple steps one visible time computer need visible printed change wo nt possible anymore since ca nt override inline media queries sure valid use cases overriding css necessary something like looks like right thing", "d": "9/2016"}, {"body": "something like looks like right thing seems like lot added complexity something common depending every designer think interaction responsive logic model logic", "d": "9/2016"}, {"body": "would say vue problem bootstrap problem bootstrap using important forces everyone specificity war use static css important unless specific reasons like printing nt think common case", "d": "9/2016"}, {"body": "pure css solution might help anyone caught dilemma", "d": "10/2016"}, {"body": "could bootstrap problem time bootstrap also reasons use display properties vue nt change default behaviour bootstrap ca nt remove utilities still like posva suggestion adding option like want use another option could adding new global configuration property conditionalrenderingpriority type boolean default false usage adds inline styles added", "d": "5/2017"}, {"body": "codysherman cool", "d": "3/2018"}, {"body": "thank much gijovarghese glad able help", "d": "3/2018"}, {"body": "think problem vue file size nt matter electron anyway", "d": "9/2016"}, {"body": "fyi also fixed currently review", "d": "9/2016"}, {"body": "fixed", "d": "9/2016"}, {"body": "transitions longer triggered via imperative dom manipulations need control vue rendering mechanism", "d": "9/2016"}, {"body": "hi thanks filling issue replaced vue old reference nt work anymore", "d": "9/2016"}, {"body": "\u624b\u52a8 destroy \u5728", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "", "d": "3/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "9/2017"}, {"body": "", "d": "4/2018"}, {"body": "weird databinding seems recognized nothing shows ie add list elements example list elements show text within message todotext displays list elements text weird", "d": "9/2016"}, {"body": "hi thank reporting issue please provide live reproduction jsfiddle reproduce problem provided code also please tell us version vuejs use", "d": "9/2016"}, {"body": "hi thanks response using next version latest seems work cdn version vue jsfiddle however try use exact code locally nt work mentioned using webpack bundle code code webpack building simple appjs file though maybe whole templaterender alias issue mentioned vue installation remove webpack together load vue cdn plain appjs file code still nt work weird try upload code server different test", "d": "9/2016"}, {"body": "ah think know happening think serverside view preparation written handlebars stripping vue syntax duh noticed client code browser source message extract code single html page stays shows content expected sorry confusion thanks help", "d": "9/2016"}, {"body": "issue var todoapp new vue el app data displaytitle true displayaddtasks true displaytaskstatistics true displaytasks true displayprogressbar true", "d": "1/2017"}, {"body": "seems related", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "nt see names useful mixins directivesfilterscomponents need names referenced templates mixins nt would breaking change obvious gain", "d": "9/2016"}, {"body": "name avoid global namespace pollution makes easier import modules mixins defined without worrying global variable stored simply register name internally instead nothing breaking existing method still fully supported last example gave showed current objectbased mixin system proposed namebased system used together detecting object vs string trivially easy also gave examples without name show backwardscompatability", "d": "9/2016"}, {"body": "mixin nature different assets think proposal overloading different purpose template reference vs injsusage overloading semantics two different usage module system global namespace issue nonexistent even nt use module system nest global namespace", "d": "9/2016"}, {"body": "intended change longer creates nonexistent properties basic idea rootlevel properties must declared instance creation", "d": "9/2016"}, {"body": "way", "d": "10/2016"}, {"body": "ok nonexistent properties could tracked could tracked ridiculous", "d": "10/2016"}, {"body": "building large forms need duplicate property names template data initialiser function create make sure objects edited possible properties present null value missing properties binding vue vmodel still creates properties without warning reactive property meaning properties become reactive leading strange behaviour instance using computed properties custom vmodel directive solution pity default behaviour changed", "d": "10/2016"}, {"body": "definitely need well bindings nonexistend subproperties workarounds models dealing way big provide default stuff also send api messy", "d": "2/2017"}, {"body": "codeofsumit always try fill property possible use next time please use forum stackoverflow questions thanks", "d": "2/2017"}, {"body": "posva follow forums thank", "d": "2/2017"}, {"body": "according vue documentation syntactic sugar problem still creates property make reactive combine vfor dynamically added objects could end collection objects reactive reactive said vmodel still creates property desired effect motivating declare things properly achieved silent threat reactiveness bugs exploding user faces instead proper warning mitigation common sense vmodel behavior get except evan want stop using start writing sugar free sad", "d": "4/2017"}, {"body": "behavior reverted long discussion", "d": "5/2018"}, {"body": "problem jade escaping please open issue", "d": "9/2016"}, {"body": "workaround use", "d": "9/2016"}, {"body": "use module build failed ca nt use lt pug vue used computed effect", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "thanks much", "d": "9/2016"}, {"body": "\u8bf7\u8bf4\u660e\u7248\u672c \u7ed9\u4e00\u4e2a\u57fa\u672c\u7684\u91cd\u73b0", "d": "9/2016"}, {"body": "way explicitly tell vue value interpreted expression writing even provided modifier something similar would take characters type simply quoting nt see advantage", "d": "9/2016"}, {"body": "could solution thoughts revolved around making setting directive object setting something like", "d": "9/2016"}, {"body": "matkovsky make directives behaviour inconsistent secretly accept literals without way user detect looking markup", "d": "9/2016"}, {"body": "posva oh see understood", "d": "9/2016"}, {"body": "build makegetterfn global function problem could resolved need replace path scope", "d": "9/2016"}, {"body": "updated jsfiddle use vue also switched test use problem gets better visibility output read instead reads vue nt problem", "d": "10/2016"}, {"body": "please provide jsfiddle reproduces", "d": "9/2016"}, {"body": "jingman thanks", "d": "9/2016"}, {"body": "hi thanks filling issue use element scope limited element also means evaluated every item need use outer tag", "d": "9/2016"}, {"body": "fnlctrl thanks know way work wondering use vif work velse work", "d": "9/2016"}, {"body": "special directive depends previous words need scope meanwhile using vif vfor element limits scope element ca nt reached fri sep hanson notifications githubcom wrote fnlctrl thanks know way work wondering use vif work velse work receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "found unorthodox way pull render item component hook init function manually disable watcher store item vnode cache later know whether item visible get vnode cache enabledisable watcher crazy hack boy works snappy also render calls item list nt changed reuse vnodes itemcache even though reusing vnodes bad read wip documentation still might want officially sanctioned way something like", "d": "9/2016"}, {"body": "trying implement virtual scroll list container sure going right direction let render function return items rendered viewport interested see something like nt think deactivate watcher approach something consider something like reactvirtualized may useful reference", "d": "9/2016"}, {"body": "related vue setting svg elements simply nt work ie", "d": "9/2016"}, {"body": "ie nt currently support innerhtml method svg elements alternative solutions innersvg polyfill allegedly works internet explorer newer", "d": "11/2016"}, {"body": "expected behavior component rendered new props need recalculated", "d": "9/2016"}, {"body": "prop always skip validation want prevent use", "d": "9/2016"}, {"body": "\u8bf7\u7528jsfiddle codepen\u4e4b\u7c7b\u7684\u5de5\u5177\u7ed9\u91cd\u73b0", "d": "9/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "9/2016"}, {"body": "nt use arrow functions hooks like point vm arrow functions ca nt bound vue", "d": "9/2016"}, {"body": "thx explanation", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks filters used text interpolation vue", "d": "9/2016"}, {"body": "removed use", "d": "9/2016"}, {"body": "ohh version component way use style tks", "d": "9/2016"}, {"body": "\u8bf7\u4f7f\u7528\u8bba\u575b\u63d0\u95ee \u4e0d\u4f1a", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "event object custom events emitted via passes along arguments", "d": "9/2016"}, {"body": "called event intended referencing part fiddle remove event array works errors", "d": "9/2016"}, {"body": "alias first argument handlers", "d": "9/2016"}, {"body": "hi thanks filling issue please provide live example jsfiddle codepen etc help us confirm locate bug thanks", "d": "9/2016"}, {"body": "would love idea would possible used huge project unfortunately ca nt upload public using uses list dependencies", "d": "9/2016"}, {"body": "understandable maybe describe circumstances happens load specific component click link xy right load app latter case limit source commenting components used app start right ca nt anything way understanding happening", "d": "9/2016"}, {"body": "ping emilmoe", "d": "9/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "9/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions thanks yes", "d": "9/2016"}, {"body": "ok thanks use", "d": "9/2016"}, {"body": "nt understand whats wrong", "d": "9/2016"}, {"body": "please read docs carefully avoid using issues ask questions", "d": "9/2016"}, {"body": "example uses default function sanitation real application use markdown parser proper sanitation hand vuejsorg purely static site user information", "d": "9/2016"}, {"body": "updated example use overall markdown sanitation still largely userspace problem thanks reporting issue though", "d": "9/2016"}, {"body": "hi thanks filling issue unfortunately browser behavior click click event automatically triggered outer div receives events one label one input work around adding clickprevent", "d": "9/2016"}, {"body": "given fnlctrl said could click handler input element spare add label", "d": "4/2018"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "9/2016"}, {"body": "yes could submit pr great", "d": "9/2016"}, {"body": "ok submit pr check thanks update oh something wrong circleci wrong nt modify", "d": "9/2016"}, {"body": "thanks nt worry", "d": "9/2016"}, {"body": "unit test fix released yet need build source also second assertion needs callback", "d": "9/2016"}, {"body": "hello thanks filing issue zhis bug however imports runtimeonly build support inhtml templates read quick solution put changes showed instead", "d": "9/2016"}, {"body": "think saw docs must initialise every props different philosophy issue", "d": "9/2016"}, {"body": "root components nt props nt make sense anyway way set except propsdata put values anyway works child components said work root guess look", "d": "9/2016"}, {"body": "\u4e0e\u7f51\u9875\u4e2d\u5e76\u65e0\u5dee\u5f02", "d": "9/2016"}, {"body": "\u5b89\u5353\u539f\u751f\u548cweb\u901a\u4fe1\u9700\u8981\u7531\u539f\u751f\u5411web\u6ce8\u5165\u4e00\u4e2a\u5bf9\u8c61", "d": "9/2016"}, {"body": "mwebviewloadurl javascript showresult resultstr working anyone could make", "d": "2/2017"}, {"body": "resolve", "d": "5/2017"}, {"body": "", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "iceuncle", "d": "8/2017"}, {"body": "iceuncle \u80fd\u5426\u5e2e\u5fd9\u770b\u770b\u7684\u5440\u8c22\u8c22\u4e86", "d": "8/2017"}, {"body": "\u54ea\u4f4d\u54e5\u4eec\u6709\u9047\u5230\u8fc7\u5e76\u4e14\u89e3\u51b3\u7684\u5e2e\u5fd9\u770b\u770b\u8c22\u8c22", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "vue\u6709\u5185\u7f6eeventbus", "d": "8/2017"}, {"body": "created\u91cc\u9762\u6dfb\u52a0 windowfunctionnamethisfunctionname", "d": "8/2017"}, {"body": "think way checkboxes derived results underlying state instead rendering checkboxes based rendered based state determines already reactive", "d": "9/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions", "d": "9/2016"}, {"body": "intentional directives may multiple bindings element due different modifierargument combinations", "d": "9/2016"}, {"body": "hi thanks filling issue using von components listen native events like click use modifier", "d": "9/2016"}, {"body": "thank", "d": "9/2016"}, {"body": "use modifier", "d": "9/2016"}, {"body": "channelname undefined case forgot add data object", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks work side note recommend using computed filter array first instead using", "d": "9/2016"}, {"body": "supported vue readme", "d": "9/2016"}, {"body": "expected behavior use vue manage class class manipulation needs happen theough vue", "d": "9/2016"}, {"body": "think better handle bounded classname vuejs management many cases one tag prepopulated class vuejs control behaviour works perfect", "d": "9/2016"}, {"body": "hi thanks filling issue special reserved attribute nt using prop name instead passing object simply pass transition name component use inside template html works cssonly transitions javascript transitions must define global asset vuetransition side note since component asset type indeed define mixin use inside components transition longer attribute redesigned component makes things simpler pass transition component child component", "d": "9/2016"}, {"body": "first problem need js hooks need access hooks user generated transition order user difficult debug user nt comply ca nt check would use transition template possible hook get called order would meet needs thanks time", "d": "9/2016"}, {"body": "understand correctly trying access userdefined component transition asset done vref inside child template html transition applied node note child prop type function course give names prop called passing parent component asset child via props", "d": "9/2016"}, {"body": "thanks solved using get right transition hook based create new transition hooks inserted need made mixin vuemixinstransition nt important yet run problems create new issue thanks fnlctrl", "d": "9/2016"}, {"body": "transition hooks designed check retrieve dimensions inside hook call start transition", "d": "9/2016"}, {"body": "related want use user generated transition inside custom component see way access transition hooks", "d": "9/2016"}, {"body": "want use user generated transition inside custom component see way access transition hooks different topic issue continue explaining", "d": "9/2016"}, {"body": "version fixed issue", "d": "9/2016"}, {"body": "yes ok thank", "d": "9/2016"}, {"body": "note tested", "d": "9/2016"}, {"body": "makes sense use prop used vmodel changing value instead use different prop name specific values like something generic like doubt change name prop breaking change real advantage changing furthermore syntax sugar uses prop create directive handle different prop name syntax sugar adapted preferences", "d": "9/2016"}, {"body": "think important usage align normal rather making sure consistent across components write custom form components use seems easy enough remember", "d": "9/2016"}, {"body": "sure understand mean warnings available dev builds currently warning giving required prop provide example trying achieve jsfiddle please", "d": "9/2016"}, {"body": "dev build far know running locally w webpack template vuecli throws error server load hot reload able reproduced using jsfiddle simple jsfiddle give error failed compile template obviously different webpack dev server error modified spa use jsfiddle code also compiles error written original post", "d": "9/2016"}, {"body": "open issue repo request feature webpack vueloader templates compiled failing", "d": "9/2016"}, {"body": "ah right thanks", "d": "9/2016"}, {"body": "going fixed thanks", "d": "12/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bug reports feature requests please use dedicated gitter forum ask questions section guide explaining index itemmessage please avoid using index deprecated", "d": "9/2016"}, {"body": "fnlctrl thanks fast reply post forum may ask use inside component", "d": "9/2016"}, {"body": "first define prop called inside accepts number give another name like pass index using please read components passing props", "d": "9/2016"}, {"body": "fnlctrl wow thanks man", "d": "9/2016"}, {"body": "see", "d": "9/2016"}, {"body": "fixed new release vuerouter", "d": "9/2016"}, {"body": "posva computed properties reusable", "d": "9/2016"}, {"body": "almost everything reusable mixin use function generates mixin way bind computed property dynamically put example fiddle would asap however agree common use case inputs transformations applied proper api least explanation guide necessary tue sep francisco louren\u00e7o notifications githubcom wrote posva computed properties reusable receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "almost everything reusable mixin use function generates mixin way bind computed property dynamically put example fiddle would asap however agree common use case inputs transformations applied proper api least explanation guide necessary put another way computed properties reusable use factory functions mixins work around usability readability nt compare", "d": "9/2016"}, {"body": "project badly needed feature used recommended custom input approach inputcustomjs inputtextjs opinion approach convenient decided use vmodel modifiers including", "d": "9/2016"}, {"body": "customized use cases builtin modifiers support ecmel mentioned recommended approach document details official guide", "d": "11/2016"}, {"body": "idea feature proposal take advantage existing directive already works every element save work writing inputcustomjs every project done already write equivalent inputtextjs custom modifier contains logic needs modified times fact already ships modifiers proves intuitive desirable pattern natural facilitate creation custom modifiers save work creating custom elements implement dommodel binding manually makes sense api perspective would interesting know technical limitations driving decision implementing feature", "d": "11/2016"}, {"body": "chance get issue reopened common use case need automatically format data field typed something like taking turning able create custom vmodel modifier would greatly simplify code since could write vmodeldate instead build custom input component props events", "d": "2/2017"}, {"body": "using vue js project think issue indeed reopened least need modifier", "d": "2/2017"}, {"body": "agree issue reopened sure supposed would like modifier sets variable case input trimmed value empty string love able straightforward way", "d": "3/2017"}, {"body": "functionality redundant added example outside vue appears slowly compromising principles favour conventions practices promoted react community slightly deviating qualities made stand first place would interesting know conscious decision intention make migration react easier coincidence", "d": "3/2017"}, {"body": "writing custom components fine want use party custom component like straight forward way sanitize masked input model values except using computed properties", "d": "3/2017"}, {"body": "want use html standard input typedate field edit date type model wonderfully powerfull extensible framework ca nt box ca nt read date field overwrite date string data select date solution could written two lines twoway filters modifier best solution would support natively checkbox standard input field date special thing", "d": "5/2017"}, {"body": "custom modifiers seems like brainer unless good reason masking input parsing value application use common practice making syntatic sugar like vmodellazycurrency amount would amazing", "d": "5/2017"}, {"body": "custom modifiers simple radio input truefalse values evaluate strings need boolean computed properties smart case since need reimplement computed property every radio input eg radio inputs result computed properties", "d": "6/2017"}, {"body": "custom modifiers agree tobei input typedate work automagically", "d": "7/2017"}, {"body": "custom modifiers come angular background started vue saw thread feel would really help something like angular parsers formatters vue could something like vmodeldateformat result something like mmddyyyy would really cool edit looks like reiterated said", "d": "8/2017"}, {"body": "custom vmodel modifiers case loop nested objects retrieved json use single html template rather template per object case believe computed properties nt work currently putting custom conversion methods server format vmodel format fetching sending data would love something builtin could pass functions", "d": "9/2017"}, {"body": "used available could access property removed addition custom model input values useful feature back framework", "d": "11/2017"}, {"body": "custom vmodel modifiers would great", "d": "11/2017"}, {"body": "well", "d": "1/2018"}, {"body": "necessary feature dry code opinion right create watchers thing form lot input custom modifier would solve everything", "d": "1/2018"}, {"body": "started vue already need type two way filters", "d": "3/2018"}, {"body": "definitely needed", "d": "3/2018"}, {"body": "", "d": "4/2018"}, {"body": "build helpers like usecases imo", "d": "4/2018"}, {"body": "nickmessing nt cover really useful use case described inplace modification input text input box want always formatted like phone user entered text would automatically format seems like basic feature difficult right behavior already exists framework reason restricted frameworkonly code want able add custom modifier would reusable across components projects like filters directives right", "d": "5/2018"}, {"body": "bbugh totally agree similar case formatting ibans would nice declerative way simply put franciscolourenco maybe someone could put reasoning behind supported framework becomes obvious", "d": "6/2018"}, {"body": "custom modifiers plenty usecases could accomplished feature application different inputs format currencies always store cents amount model display nicely formatted dollars amounts inputs model shown usecase sanitizing unescaping html fields order prevent xss atacks model stores input shows", "d": "9/2018"}, {"body": "", "d": "10/2018"}, {"body": "", "d": "10/2018"}, {"body": "", "d": "9/2016"}, {"body": "donnysim put jsfiddle please also try use vuerouter example otherwise issue belongs", "d": "9/2016"}, {"body": "element pops expandtransition class added transition system nt add static class anymore checkout section manually add classes hand via dev tool element animates correctly yes add element quick migration nt need different easing curves enter leave make sure checkout issue transition system changes later closing op know fix already stated problem class added anymore", "d": "9/2016"}, {"body": "oh tried using unminified version vue showed helpful error line feed character according source problem seems ieedge transforms line feeds html entities browsers nt hope helps reproduction unminified version", "d": "9/2016"}, {"body": "well looks like ie issue html spec says add whitespace newlines attrs ie seems ignoring rule console error looks enough use computed property put one single line", "d": "9/2016"}, {"body": "posva thought recent vue bug handles fine certainly possible regression seems new vue make fundamental changes way attributes parsed reproduction uniminfied vue", "d": "9/2016"}, {"body": "oh nt know worked previous version vue rewritten scratch uses virtual dom parse templates maybe vue actually handled fixed easily vue", "d": "9/2016"}, {"body": "happening using edge vue", "d": "8/2017"}, {"body": "valid html however compiler expecting javascript expressions directives interpolations fact directly used javascript expressions afterwards please nt escape characters", "d": "9/2016"}, {"body": "warning suggests using compilerincluded build given using vueloader change work wait migration guide info", "d": "9/2016"}, {"body": "dreampie fnlctrl standalone build add following alias webpack config import vue vuedistvue since tools party libraries may import vue well may cause app load runtime standalone builds time lead errors source vue starter resources", "d": "9/2016"}, {"body": "thanks ok", "d": "9/2016"}, {"body": "prograjkamal thanks heads", "d": "9/2016"}, {"body": "expected filters work interpolations vue use filter method instead", "d": "9/2016"}, {"body": "stagger transition vfor triggered change data nt work vif", "d": "9/2016"}, {"body": "link actually using fixed one docs maybe bug part docs nt updated reflect deprecation", "d": "9/2016"}, {"body": "even prepend incoming routerview old one pushed transition would nt work need horizontal page transitions entering routerview must appending prepending nt matter", "d": "9/2016"}, {"body": "think centaur talking zindex could nt fixed transition classes", "d": "9/2016"}, {"body": "fnlctrl perhaps express clearly pages already otherwise would work specify value believe situation decided insertion order", "d": "9/2016"}, {"body": "centaur technically use make insertion order irrelevant", "d": "9/2016"}, {"body": "centaur sorry nt able infer already using opinion something easily fixed css worth altering javascript fix", "d": "9/2016"}, {"body": "fnlctrl ok try first thanks advice", "d": "9/2016"}, {"body": "markmarijnissen look docs time expected find information", "d": "9/2016"}, {"body": "found docs old newsletter assumed werent written yet expected link current docs op za sep schreef eduardo san martin morote lt notifications githubcom markmarijnissen look docs time expected find information receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "see expected link version select think adding plus looking vue docs click homepage enough think enough", "d": "9/2016"}, {"body": "yes options fined expected dropdown would definitely noticed homepage incomplete warning rc docs loud clear op za sep schreef eduardo san martin morote lt notifications githubcom see expected link version select think adding plus looking vue docs click homepage enough think enough receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "keep date changes nt aware rc guide yesterday think link getting started title would nice", "d": "9/2016"}, {"body": "provide context lack links guide actually intentional many parts still actively revised api changes nt made yet migration guide also nt yet complete imagine may first stop many current vue users", "d": "9/2016"}, {"body": "think might good hold adding link least migration guide done hopefully within days", "d": "9/2016"}, {"body": "pr vuejsvuejsorg closing belongs repo instead", "d": "9/2016"}, {"body": "mydate nt watch look need", "d": "9/2016"}, {"body": "want object property reactive please declare upfront use although vuejs provides api dynamically add reactive properties fly recommended declare reactive properties upfront data option", "d": "9/2016"}, {"body": "also issue blocking issue updates point files look look building pr", "d": "2/2017"}, {"body": "also issue blocking issue inline script escaped update plan insert script page rendered html", "d": "7/2017"}, {"body": "would like major blocker us right", "d": "10/2017"}, {"body": "vue nt react manual dom manipulations fri sep marcin poholski notifications githubcom wrote hey possible binding vbind class test test also removing class mean example vue instance new vue el stuff data test true remove class dom like div removeclass test would expect datatest false removing class div receiving subscribed thread reply email directly view github mute thread", "d": "9/2016"}, {"body": "could feature request", "d": "9/2016"}, {"body": "fundamental assumption upon vue works manipulate dom libs fri sep marcin poholski notifications githubcom wrote could feature request receiving modified openclose state reply email directly view github mute thread", "d": "9/2016"}, {"body": "sure get right absolutely need may use object prop modify properties instead notice antipattern props treated immutable result might unexpected also please use forum gitter questions like repo issue list strictly bug reports feature requests stated contributing guidelines thanks", "d": "9/2016"}, {"body": "fyi asking forum often offline cloudfare message", "d": "9/2016"}, {"body": "wwlsascha thanks info look meanwhile gitter always open friendly", "d": "9/2016"}, {"body": "still access forum europegermany gitter much helpfull currently offensive argument p maybe somebody help directly even nt meet guidelines", "d": "9/2016"}, {"body": "wwlsascha actually concerned impression gitter room offensive nt paying much attention lately could elaborate", "d": "9/2016"}, {"body": "minutes ago really point ca nt access forum time time hard get help", "d": "9/2016"}, {"body": "wwlsascha point nt answer questions make exception everyone start asking questions issues", "d": "9/2016"}, {"body": "also use gitter please understand keep usage questions issue tracker reserved bug reports feature requests", "d": "9/2016"}, {"body": "short answer responsible element insertionremovalreorder caused vue rerender", "d": "9/2016"}, {"body": "hi thanks filling issue however issue tracker reserved bugs feature requests please use forum gitter ask questions thanks", "d": "9/2016"}, {"body": "fnlctrl sorry thanks", "d": "9/2016"}, {"body": "soon", "d": "9/2016"}, {"body": "npm new version must use source code upgrade release much", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "hope npm add file project", "d": "9/2016"}, {"body": "please learn npm works", "d": "9/2016"}, {"body": "ok thanks", "d": "9/2016"}, {"body": "thisdata dbody", "d": "9/2016"}, {"body": "\u8bf7\u4f7f\u7528\u8bba\u575b\u6216gitter\u63d0\u95ee", "d": "9/2016"}, {"body": "\u4ee3\u7801\u4e2d this\u5df2\u4fee\u6539", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "looks like error indeed property never reset let take look", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "realized release fixed", "d": "9/2016"}, {"body": "well explain bad time trying reproduce", "d": "9/2016"}, {"body": "oh going create issue okhand created minimal jsfiddle reproduces problem case want add test great", "d": "9/2016"}, {"body": "either compute create range function nt think introduce nonjavascript syntax", "d": "9/2016"}, {"body": "hi looping case like vuejs", "d": "4/2017"}, {"body": "range function min max var array j var min lt max array j j return array", "d": "5/2017"}, {"body": "metekabak hello use", "d": "7/2017"}, {"body": "tupengtongxue since version work version", "d": "7/2017"}, {"body": "metekabak use lodash util", "d": "7/2017"}, {"body": "using lodash already suggested new syntax thanks anyway", "d": "7/2017"}, {"body": "start range vfor instead", "d": "8/2017"}, {"body": "disagree common case think built way without need custom range function", "d": "8/2017"}, {"body": "totally agree meantime issue ranks quite well google provide way starting index ranged vfor use index instead value", "d": "12/2017"}, {"body": "make end value variable", "d": "1/2018"}, {"body": "kokodoko use variables kind tested making numpages property component data object prop even computed property would work currentnumberofitems define one cases data return currentnumberofitems props currentnumberofitems default computed currentnumberofitems complicated stuff compute return value return", "d": "3/2018"}, {"body": "good answer", "d": "4/2018"}, {"body": "maxijp renders expected number dom elements change value number dom elements drops one demo", "d": "8/2018"}, {"body": "thinsoldier editing countloans vmodel input new value string number number easly deal using example computed property transforms value integer", "d": "8/2018"}, {"body": "seems work", "d": "8/2018"}, {"body": "try adding vif though cleanest method cleaner way define range component", "d": "8/2018"}, {"body": "expected behavior refs reactive depend showtip", "d": "9/2016"}, {"body": "shrug dependency code", "d": "9/2016"}, {"body": "reason calculated initial render present computed property first evaluated computation inside execute dependencies collected refs reactive either computed property never gets reevaluated expected behavior nt see point wrapping anyway", "d": "9/2016"}, {"body": "subject countries example russia currency symbol follows money instead preceedes", "d": "9/2016"}, {"body": "third issue negative number used precision gives strange results currencies currency currencies currency currencies currency var app new vue el currencies data currencies gives two missing separators one wrong", "d": "9/2016"}, {"body": "yless vue shipping wo builtin filters best path forward create filter uses wellsupported currency library create display value", "d": "9/2016"}, {"body": "imo better create filter ship full package used vue fixing vue built filter nt hard working submit pr done releasing package still good idea", "d": "9/2016"}, {"body": "yless mentioned filters removed vue wo nt add new functionality current filters feature request wo nt fullfilled numerous libraries formatting numbers currency strings vue duplicate behaviour pretty easy create filter wrapper around one libraries though custom filter", "d": "9/2016"}, {"body": "comment vue vue nt see feasible due syntax maybe could write helper methods instead add component needs", "d": "9/2016"}, {"body": "index deprecated favor explicit syntax concluded long ago magically injected variables like index mess nested vfor ngrepeat please use current solution using characters longer everything explicit wo nt give surprises full control going", "d": "9/2016"}, {"body": "looks like element patched efficiency instead replaced somehow proactively triggering previous click event need immediate fix add unique attributes component instruct virtual dom elements completely separate entities", "d": "9/2016"}, {"body": "nt seem related vue see fiddle even button without would submit form original fiddle vue rendering second button correctly without adding makes work properly", "d": "9/2016"}, {"body": "example click second button form submitted first one triggers submit chrisvfritz seems found source bug reopen issue", "d": "9/2016"}, {"body": "clegendre clarify expected behavior btw required proper bug report per issue reporting guidelines seeing clicking first button submits form assume think bug fiddle showing happening without vue involved browser works issue provided proper explanation", "d": "9/2016"}, {"body": "update fiddle update button b type button example case button type button submit form browser works explanation following example button type button submit form replaced direct sibbling hierarchy button type submit", "d": "9/2016"}, {"body": "okay makes sense indeed bug", "d": "9/2016"}, {"body": "upon investigation sure anything vue surprisingly browser seems determine form submission type button triggered event event reaches form element rather type event triggered vue patches button inplace toggled happens event triggered event reaches form element way get around changing vue async queueing works ditching mutationobserver nt think worth since easily worked around keying two buttons", "d": "9/2016"}, {"body": "sorry reopen issue another repro link nt involves form sample button c toggles apparition button b effetct button c applied button b ok attribute applied components intuitive thank help", "d": "9/2016"}, {"body": "wo nt able help nt repro please provide one way may already fixed recent commits though land soon wait untill draft repro error persists wed sep zuibunan notifications githubcom wrote vuejs version steps reproduce built app like vuexexamplechat complex problem sometimes switch thread error occurred like pictures view change events still trigger message list view multiple types like text audio video image etc replace complex html different message item normal text item app works well maddening thing error vuejs without clue code syntax error errors never happened used upgrade vuejs sorry ca nt provide demo actually happening image image image image receiving subscribed thread reply email directly view github mute thread", "d": "9/2016"}, {"body": "upgrade vuejs error still occurred", "d": "9/2016"}, {"body": "ca nt help provide repro close feel free reopen provide one", "d": "9/2016"}, {"body": "works fine", "d": "9/2016"}, {"body": "happens change event fires dom gets chance update therefore vmodel updates value change event dom gets chance update solution updated fiddle works", "d": "9/2016"}, {"body": "vue watch methods date objects mutate vue recognize generally advised store anything plain objects data though", "d": "9/2016"}, {"body": "nt device test work", "d": "9/2016"}, {"body": "posva yeah works wanted post example breaks app op nt use check looping inherited properties definitely want avoid recommend start using eslint follow good js practices", "d": "9/2016"}, {"body": "closing", "d": "9/2016"}, {"body": "works thanks", "d": "9/2016"}, {"body": "vue intentionally extends properties plain objects", "d": "9/2016"}, {"body": "sorry nt follow definereactive code comment says cater predefined gettersetters presumably means callhonor predefined getters setters properties defined object derived classes made two fiddles compare binding behavior vue property getterssetters invoked correctly vue property getterssetters invoked huge breaking change causes internal fields back property getterssetters get sync model result mess anything simplest models perhaps something wrong seems like huge breaking change ca nt get vue behavior back able migrate apps vue pointed earlier fiddles fix seems really simple", "d": "9/2016"}, {"body": "may sort worked vue never meant api docs clearly state emphasis mine data object vue instance vuejs recursively convert properties gettersetters make reactive object must plain native objects existing gettersetters prototype properties ignored recommended observe complex objects", "d": "9/2016"}, {"body": "chime design decision made", "d": "9/2016"}, {"body": "may interesting typescript cc ktsn", "d": "9/2016"}, {"body": "shame indeed case might able support vue useful trivial binding scenarios strange definereactive specifically gets property description caters original gettersetter invoking exactly objectdefineproperty obj key enumerable true configurable true get function reactivegetter var value getter gettercall obj val calling original getter return value set function reactivesetter newval setter settercall obj newval calling original setter else val newval nt know much intent original design code seems clear enough line gets property calling getownpropertydefinition without looking derived classes seems like bug mean reason get property descriptors defined class ancestors specific goal wrap ui controls vue components easy vue angular angular react even knockoutjs vue components ca nt data members getterssetters nt see could perhaps computed properties would seem like lot extra work potential errors confusion like said hard understand seems like silly bug easily fixed tested would open whole lot practical scenarios improve compatibility vue applications", "d": "9/2016"}, {"body": "note although using typescript core discussion issue getterssetters inheritance applies around corner imho fully supporting getterssettersclassesinheritance would huge handicap framework", "d": "9/2016"}, {"body": "record vue wrappers controls work great also least five sample apps use controls extensively realworld scenarios today ported five samples vue mainly remove sync bindings replace change events update model pretty trivial samples work great long apply fix mentioned vuejs file break strange ways nt happy provide copies samples anyone interested vue version published site next week sure vue though fingers crossed", "d": "9/2016"}, {"body": "evan conf right sure chime finds bit time", "d": "9/2016"}, {"body": "thanks thorsten really want make work love framework makes itch see close working way need two little lines looking forward evan comments insights perhaps change detail implementation sure soon release vue support next week tons people asking story vue hope good news", "d": "9/2016"}, {"body": "wow indeed unintentional breaking change real cause changed property enumeration conversion mass refactor caused conversion include prototype properties well", "d": "9/2016"}, {"body": "addressed note demo would still work bit differently due behavior difference however different topic", "d": "9/2016"}, {"body": "okay totally wrong track superficial knowledge inner workings reactivity apologies bernardocastilho glad evan could answer question positively", "d": "9/2016"}, {"body": "excellent news tested fix samples work beautifully users happy know support soon released thank much great support thorsten evan congratulations fantastic", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks question vague make sure make clearer asking forums gitter wink", "d": "9/2016"}, {"body": "lot similar questions answer forum referring already checked luck", "d": "9/2016"}, {"body": "hi thanks filling issue however scoped style vueloader feature believe bug please open issue instead thanks", "d": "9/2016"}, {"body": "related vue please check http library responsible http requests api calls possibly missing", "d": "9/2016"}, {"body": "tried already use works production started failing local copy", "d": "9/2016"}, {"body": "rjchauhan check api", "d": "9/2016"}, {"body": "discussionsupport possible forumvuejsorg", "d": "9/2016"}, {"body": "hint assume use vueresource production server running https chrome means header lowercase vueresource expects see ticket workaround also solved recent release vueresource", "d": "9/2016"}, {"body": "please use forum gitter ask questions checkout weex vuenative project powered alibaba currently one", "d": "9/2016"}, {"body": "\u6ca1\u80fd\u91cd\u73b0", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "type", "d": "9/2016"}, {"body": "wgbbiao \u7684\u786e\u662fbug bug vmodel loses binding used dynamically bound eg working example bug working example static", "d": "9/2016"}, {"body": "never supported support dynamic types", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "working expected since array intantiated stats object still empty timeout think looking something like", "d": "9/2016"}, {"body": "open console see values still undefined even remove timeout still undefined", "d": "9/2016"}, {"body": "avanerk ready hook fired compilation use recommend using either computed property method", "d": "9/2016"}, {"body": "personally nt see points directive simply use negation operator ca nt live without create vhide directive vue lt vue function toggledisplay el ishidden elstyledisplay ishidden none bind function el binding toggledisplay el bindingvalue update function el binding toggledisplay el bindingvalue wo nt able use transition system", "d": "9/2016"}, {"body": "already discussed sum pure syntax sugar character definitely worth adding core vue prefer one way", "d": "9/2016"}, {"body": "hello sailengsi thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "9/2016"}, {"body": "linusborg op asking feature log also return data though nt make clear english sailengsi since deprecated going get new features though easy write log want copy modify original code need", "d": "9/2016"}, {"body": "fnlctrl thank modified", "d": "9/2016"}, {"body": "use wheel event", "d": "9/2016"}, {"body": "sqal said", "d": "9/2016"}, {"body": "hi pespantelis thanks filing issue could provide reproduction jsfiddle please would help us lot get bottom", "d": "9/2016"}, {"body": "sorry figure write config routerstart function fault sorry", "d": "9/2016"}, {"body": "vue nt manage css generate rules scoped css one vueloader features believe bug please open issue instead", "d": "9/2016"}, {"body": "expected behavior object extensible skipped observation", "d": "9/2016"}, {"body": "yes feel produce least log warning production took long time understand nt work", "d": "9/2016"}, {"body": "probably related", "d": "9/2016"}, {"body": "sqal except", "d": "9/2016"}, {"body": "centaur issue slot content reused cause fixed", "d": "9/2016"}, {"body": "vue detect changes made libraries also vue works assumption modify dom libs", "d": "9/2016"}, {"body": "interesting hack indeed think would work type inside template wo nt work binding data think would nt security issue since fact hacking", "d": "9/2016"}, {"body": "yup bind expressions simpler computation like forcing using example danger template expressions vue angular since broken way combined server side templating like jade injects parts page like logged user name jade template variable put malicious content like braces tricking vue execute see stack slides slide presentation", "d": "9/2016"}, {"body": "btw vue serverside rendering broken way allows arbitrary code execution", "d": "9/2016"}, {"body": "hmm true one may use template engines vue create security loopholes doubt much done vue end without great efforts prs always welcome smile opinion solved frameworkagnostic tool plugin template engines recommended even enforced anyone uses vue ng whatever frontend framework", "d": "9/2016"}, {"body": "solution vue framework put big disclaimer users set strict content security policy disallow inline scripts sent iphone sep \u5b8b\u94c4\u8fd0 notifications githubcom wrote hmm true one may use template engines vue create security loopholes doubt much done vue end without great efforts prs always welcome opinion solved frameworkagnostic tool plugin template engines recommended even enforced anyone uses vue ng whatever frontend framework receiving authored thread reply email directly view github mute thread", "d": "9/2016"}, {"body": "discussed long ago issue moment use vue client side framework compile template potentially generated malicious party already busted simply many ways get around system need evaluate arbitrary content xss loopholes apply simply impractical framework take responsibility user practice simple rule always able trust template pass vue agree make prominent docs though", "d": "9/2016"}, {"body": "nothing vuejs since vue takes control dom page rendered script tag executed vue even started", "d": "9/2016"}, {"body": "oh bad", "d": "9/2016"}, {"body": "explained thanks sirlancelot still execute vue nothing manipulating dom using native api elementinnerhtml", "d": "9/2016"}, {"body": "ca nt get meaningful information jsfiddle consider narrowing problem providing isolated reproduction", "d": "9/2016"}, {"body": "nt error developer console hardly make shorter html try non minified version edit seems come version file use using rawgitcom get direct version repo seems work", "d": "9/2016"}, {"body": "okay actually seem like line okay quite see guess minified heroku becomes", "d": "9/2016"}, {"body": "glad find solution problem jsfiddle included minified js file use provided jsfiddle template contributing guidelines show issue", "d": "9/2016"}, {"body": "found problem solution would wrap parenthesis think done first place though", "d": "9/2016"}, {"body": "please try removing extra code nt cause bug minimum use minimum code create fiddle", "d": "9/2016"}, {"body": "likely duplicate fixed close", "d": "9/2016"}, {"body": "reason ca nt use vue events instead html bouton", "d": "9/2016"}, {"body": "vue works assumption manipulate dom vue retrieves removes indom templates compiles render functions render virtual dom back real dom vue nt remove indom templates", "d": "9/2016"}, {"body": "pretty stupid use case know since worked could misleading people migrating use case pretty specific since use vuejs website using turbolinks reloads entire body every time link pressed bind lots events everywhere", "d": "9/2016"}, {"body": "usage never documented obviously hack wouldnt surprise people fri sep grafikart notifications githubcom wrote pretty stupid use case know since worked could misleading people migrating use case pretty specific since use vuejs website using turbolinks reloads entire body every time link pressed bind lots events everywhere receiving modified openclose state reply email directly view github mute thread", "d": "9/2016"}, {"body": "thanks vuejs code", "d": "9/2016"}, {"body": "process trying migrate vue legacy parts jquery trying move vue means nothing approach bit trying first vue component amongst legacy components saying move vuejs way intermingle", "d": "4/2017"}, {"body": "lucky work around anyone else finds easy way get around attach listeners vue mounts element vue created el shadow dom handlers still work mounted", "d": "4/2017"}, {"body": "oppianmatt could share clearer example ca nt tell api documentation best go currently trying var addhandlers function el var button elgetelementbyidname tooltipitem buttonaddeventlistener click function event consolelog clicked eventtarget new vue el app template components app mounted function addhandlers el anyone better knowhow comes across please indicate approach event handling even possible vue", "d": "5/2017"}, {"body": "got work moving script tag preexisting dom scripts vuejs app code", "d": "10/2017"}, {"body": "squarenomad case nt using vue handling click post legacy js scripts people migrating vue big codebase libraries yeah sroberson pointed attaching handlers vuejs created shadow dom works whether putting script tags code run synchronous attaching handlers vue takes dom handlers set vue taken going lost strange effects also ca nt really modify dom elements vue owns", "d": "10/2017"}, {"body": "thing use vuejs page disables events reenable", "d": "10/2017"}, {"body": "wonderful vuejs guide example wrap existing js module example use uses technique attaching el mounted stage", "d": "10/2017"}, {"body": "hello world example always simple real world cruel init using vuejs inited party framework", "d": "10/2017"}, {"body": "met problem added onsubmit listener form form bound vue onsubmit listener got lost solutions", "d": "11/2017"}, {"body": "trying migrate legacy jquery plugins bootstrap plugins knockoutjs code vuejs removal original event handlers mount huge pain absolutely single problem plugins events set knockoutjs supports mix manual event dom changes viewmodel dom event changes perfectly vuejs decision strange would correct case everyone lived ideal world projects created scratch depend external libs never refactored otherwise user unfriendly approach", "d": "4/2018"}, {"body": "possible virtual dom include save restore original event handlers well least optionally also existing dom recompiling mount probably unnecessary step", "d": "4/2018"}, {"body": "stevenwung dmitrisintsov met problem migrating jquery undestand pain temporary solution may mount vuejs small containers page rewritten vue try mount vue instance js scipts", "d": "4/2018"}, {"body": "met problem migrating jquery yeah sroberson pointed attaching handlers vuejs created shadow dom works whether putting script tags code run synchronous attaching handlers mounted funny face use case migrating kinda vue somethinig fact vue vue jquery top use case vue legacy code side bundled minified access source vue code several viewmodels managed vue page nonvue parts dom still issue comes life want add new listener within dom managed legacy vue code listener gets erased vue fix use workaround assign nonvue event listener timeout assuming vue finished repacing part dom time timeout ended way listener landed onto dom already rendered vue done js module loaded vue code loaded like last tag vuecontaining bundles loaded know coarse especially could coarse slower devices networks timeout value tested real device implementing production far nothing better comes mind use case", "d": "9/2018"}, {"body": "related vue please read error carefully", "d": "9/2016"}, {"body": "thanks standard strict", "d": "9/2016"}, {"body": "change rules", "d": "9/2016"}, {"body": "nt change try delete effect", "d": "9/2016"}, {"body": "please get familiar way eslint works vuecli template use extends set eslint rules depoending chose init either nt like rules overwrite file case rule want change disable called error message shows disable like", "d": "9/2016"}, {"body": "thanks get skill", "d": "9/2016"}, {"body": "thanks linusborg save time", "d": "11/2016"}, {"body": "hi please make sure ask question forums gitter chat passing props html", "d": "9/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "9/2016"}, {"body": "general proposal discussion created fiddle yet required like create demonstrate thanks", "d": "9/2016"}, {"body": "already justified changes copy deal deprecation reason deprecating event flows depend components tree structure hard reason components tree becomes large simply put nt scale well large apps nt want set pain later also solve communication sibling components instead use pattern similar eventemitter nodejs centralized event hub allows components communicate matter components tree vue instances implement event emitter interface actually use empty vue instance purpose pattern serve replacement simple scenarios complex cases recommended introduce dedicated state management layer using vuex example shown upgrading guide talking recursive communication multiple components listen event event recognised common parent every child aware", "d": "9/2016"}, {"body": "posva thanks information bus hub really works well simple single component point single component point communication several components component type problem unfortunately normal case many cases want use event update small data belonging specific component current event bus implementation give information destination origination node seen uid every component maybe use unique uid event wiring support point point event communication fact exact event bus support component type component type communication simple solution address requirement triggered event tree update data vuex great application level global static state data management understand maybe good specific local component data management thought welcome issue", "d": "9/2016"}, {"body": "cnweibo answered question example forum think example fill needs", "d": "9/2016"}, {"body": "simple solution address requirement triggered event tree update data solved simply vuex without complicated events system vuex great application level global static state data management understand maybe good specific local component data management local means single component use case managing state across multiple components global vuex modules state subtrees global variable kind global drive groups components vuex modules whole events vs sharedstates discussion settled months ago conclusion use either global event bus vuex id recommend read vuex works thu sep cnweibo notifications githubcom wrote posva thanks information bus hub really works well simple single component point single component point communication several components component type problem unfortunately normal case many cases want use event update small data belonging specific component current event bus implementation give information destination origination node seen uid every component maybe use unique uid event wiring support point point event communication fact exact event bus support component type component type communication simple solution address requirement triggered event tree update data vuex great application level global static state data management understand maybe good specific local component data management thought welcome issue receiving subscribed thread reply email directly view github mute thread", "d": "9/2016"}, {"body": "close issue solutions provided github issues right place ask support anyway see guidelines", "d": "9/2016"}, {"body": "ktsn thanks demo fiddle exactly want simple solution fnlctrl spend time called modular vuex state management thanks", "d": "9/2016"}, {"body": "opinion broadcast needed falling props dataflow dispatch reimplemented singlelevel von emit like vue involved component situation custom event buses used", "d": "9/2016"}, {"body": "really von component tag custom event component work well emit component event data retrieved", "d": "9/2016"}, {"body": "cnweibo record event data retrieved", "d": "9/2016"}, {"body": "event data retrieved sure makes think otherwise", "d": "9/2016"}, {"body": "fnlctrl linusborg sorry misunderstanding make things clear pattern fnlctrl provided really retrieve data event handler even", "d": "9/2016"}, {"body": "copypasting comment another issue think removing dispatch terrible idea nt first ui frameworklibrary implement notion bubbling actionsevents visual tree well established idea take away functionality premise able dispatch event causes side effects unknown parent tree sounds like recipe trouble need leave responsibility users sure common sense use feature appropriately new concept really ca nt see benefit change library built upon long time established web technologiesconcepts dom dom events fact bubble visual tree years one complaining nt idea components something recently embraced thanks proposal web components opinion makes sense vue components behave similarly regular dom elements regards event handling done proposed alternative use global event bus seems illogical something practical effective easier understand due well established concept years already existed proposals thread remind emberjs wants passing closure actions properties components level hierarchy tedious unnecessary vuejs reason wrote aside really like library seriously think terrible change", "d": "10/2016"}, {"body": "event bus paradigm proposed solution exact thing eventbased architecture often times inferior declarative statebased architecture say app user log eventbased solution listen login event fire event later username password respond said event accordingly whatever components listening comes problems though biggest one components nt rendered dom event fired nt going receive change along knowing parts application receive event addition receivers event ca nt possibly know event coming without additional information given excuse language massive clusterfuck dealt nt care use let use stateful approach create global state variable representing user account info signed user login information signed user logs set account info everything app relies state variable updates accordingly events nt matter component created always display correct information could use event update global state update declarative approach lets write components way always appear way depending exactly localglobal state regardless user application without listen things happen believe vue meant along akin things software development took us figure damn well glad edit oh nt forget watch parameters say send ajax request perform action changes eg user logs watch loggedin variable true load profile images something like", "d": "10/2016"}, {"body": "understand saying random component modify global state think thing random component bubble event god knows still run risk application flow dirtied accidentally ways handle paradigms clean manner usually end responsibility framework user certain situations one mechanism make sense example agree loggedin state something known whole application global state makes sense button application user clicks usually handle logic behind actually logging user something handled higher chain might component might route button likely need notify something intent log button therefore need modify global state directly removal dispatch need button component know global object manages application user session notify directly intent makes button tightly coupled whole application might button nested levels deep declare handler every level intent reaches destiny totally unnecessary", "d": "10/2016"}, {"body": "actually every level makes code harder maintain", "d": "10/2016"}, {"body": "well obviously directly changing state problematic vuex solves issue mutations actions true solutions fit bill better others never encountered situation declarative logic nt better option specific case probably make button specific logging heh addendum loginrelated component nested deep reason mutate global state", "d": "10/2016"}, {"body": "log button example vuex store referring mentioned global object look vuex works expect tightly coupling random component rest app state simply manage reference store desirable example log button part third party library really wish nt take away choice use either paradigm especially event bubbling widely recognized therefore easy comprehend new contributors project", "d": "10/2016"}, {"body": "depends mean random component router view component example full rights access commit store opinion however smaller component reuse button form ui element times nt logical reason access store using props events since data vue application topdown want keep much local state toplevel possible deep nesting problem avoided much possible much bother propagate events two levels chances might need rethink template structure goes deeper mostly tangent though often times easier paradigms understand ones end getting abused end hell become unwieldy statebased approach much straightforward agreed upon us currently using free continue using move another framework approach nt preference", "d": "10/2016"}, {"body": "times nt logical reason access store using props events exactly point deep nesting problem avoided much possible sometimes option much bother propagate events two levels true levels go deeper easier paradigms understand ones end getting abused end hell become unwieldy users discipline free continue using move another framework approach nt preference mmk simplicity convenience reason considering switching ember vue one things enjoyed vue removing seems arbitrary team removed lot features release honestly agree one thank replies", "d": "10/2016"}, {"body": "ktsn alternatives broadcast dispatch simple removal come improve got better", "d": "10/2016"}, {"body": "rhyek would like give couple points raised since discussion already brushed number topics would like get back basics deprecated diospatch broacast implicit coupling parent deeply nested child dispatches event way infer relationship code true oviously look changes deprecations introduced vue might realize removing implicit behaviour favour explicit alternatives common theme deprecating fits right example js parent events someevent function deeply nested child dispatch someevent fine parent one direct child case listener template real extra work either becomes hard follow especially teams soon nested children especially deeply nested even one direct child either look children rely code comments document event tiggered child component additional boilerplate well say like dispatch broadcast nt pass components agree easier come across many situations actually nessessary rather chain passing event would rather case data would changedappended trip component event names use deeply nested components would explicit namespacing events otherwise could clashing js parent events close function deeply nested child dispatch close deeply nested child dispatch close children thirdpartylibs screwed catch event component middle rename parent nt forget comment someone looking code might think nothing event renaming using emit template listeners problem use simple short event names everywhere wo nt clash event callback attached template really wish nt take away choice use either paradigm thought paradigms work equally well would treat equally nt think reasons therefore try steer users pactices found work best leaving way get around global bus method would also like talk worries global state sure understand position fully yet maybe provide example think dispatch broadcast work best try show approach could improve situation", "d": "10/2016"}, {"body": "think dispatch broadcast event bus address different things make code easy maintain decoupled different scenarios keep great hard say one better every cases", "d": "10/2016"}, {"body": "cnweibo think pretty exhaustive arguments sides honestly nt see point addressing different things feel free make arguments tell certainly happen really really want hard implement plugin", "d": "10/2016"}, {"body": "linusborg truly appreciate time took write reply understand arguments say like dispatch broadcast like honestly definitely seemed odd like said event bubbling something ubiquitous among many platforms point much thing similar ever encountered preview events wpf paired normal events tunnel visual tree topmost element source original event get sent directly chain related elements nt spread everything would explicit namespacing events agree usually anyways also people used jquery furthermore platforms send source object argument handler could maybe filter contexts based hint dom events available example platforms benefit working static types clash pretty hard encounter event instance class case honestly nt understand concern vuejs team people ca nt careful enough using sure could find plenty things wrong using library far go protect users careless fine parent one direct child case emit listener template real extra work either honest question decidedly new vue aside declaring listeners every level nt also event every component chain seems annoying conclusion let quote something someone said issue vuecli introducing official templates new projects probably know locked official templates gives freedom time causes need decisions think end meter balance many decisions make front users many ones users want agree philosophy attitude encountered issue strangely contrast see comment comments boils freedom taking away choices based although good ultimately flawed intentions really really want hard implement plugin probably end probably", "d": "10/2016"}, {"body": "linusborg also therefore try steer users pactices found work best leaving way get around global bus method trying steer forcing", "d": "10/2016"}, {"body": "tried implementing feature eventbus methods may help", "d": "10/2016"}, {"body": "posva plan mean basically declare event bus object module import wherever else want nt like tbh definitely use things strongly believe want every time", "d": "10/2016"}, {"body": "case honestly nt understand concern vuejs team people ca nt careful enough using well point one team could point reallife usecase preferable solutions also bus global state nt see countless forum posts answered either might subjective view maybe understand whole team thinks experience always inferior solution drop core point want renew offer discuss real example sure could find plenty things wrong using library far go protect users careless course delicate question hard balance find judge case case fine parent one direct child case emit listener template real extra work either honest question decidedly new vue aside declaring listeners every level nt also emit event every component chain seems annoying since talk direct parentchildreleationships would emit deeply nested children course reemit every level repeat nt found presented situations dispatching across many nested children really nessessary preferable solutions therefore try steer users pactices found work best leaving way get around global bus method trying steer forcing say make life little harder use bus thing achieve similar behaviour cases reimplement plugin quite easily forcing use ae making way around bit harder", "d": "10/2016"}, {"body": "think also add every vue instance liking something constructive waiting examples", "d": "10/2016"}, {"body": "posva think also add every vue instance vueprototype bus new vue like pretty clever liking something constructive think pretty valid criteria choosing use something least case stated many times think event bubbling place waiting examples mean really need given examples situations nt like idea using event bus declaring listeners every level want see code could maybe come something make point bit clearer feel event bubbling pretty standard thing people appreciate something useful event buses state managers least kind paradigm shift although hard comprehend stretch seem like hipster territory course kidding last comment like stated see uses definitely find problem solve actually projects worked using ember tend write service acts exactly like global state manager assure trying stubborn purpose really like vue want love know", "d": "10/2016"}, {"body": "nt also emit event every component think terms event bubbling nt use component composition eg html open modal close modal component need care events component two instances direct logical children single instance despite complicated view hierarchy nesting", "d": "10/2016"}, {"body": "think repeating point end working around issue somehow seems strange discussion revolved around stating several workarounds something pretty standard practical nt exist anymore whatever reason linusborg well point one team could point reallife usecase dispatch preferable solutions emit sounds like civil engineer asking reason close highway exit says something like offramp leads intersection people get confused whether turn left right people know way lived years new citizens often get lost couple minutes want avoid say alright sure close cool travel km next offramp manage thank replies glad open discussion least seems like good team", "d": "10/2016"}, {"body": "sounds like civil engineer asking reason close highway exit says something like offramp leads intersection people get confused whether turn left right people know way lived years new citizens often get lost couple minutes want avoid add bad methaphor aswell view like road encourages people race faster speed limits rarely payed attention add bumpers force people slow like arrive destination quickly speeding sure might server well times observe part road constantly years amount accidents andpeople missing next offramp simply worth many drivers one problems attested nt like bumpers well destinations road fast one bumpers take one nt like road view nt nice liking something constructive think pretty valid criteria choosing use something least case stated many times think event bubbling place think posva meant like constructive argument discussing weither keep something add something library wide range users keep asking valid reallife usecase discuss instead personal preferences", "d": "10/2016"}, {"body": "yeah except blew perfectly good highway built another rubberized asphalt read somewhere pretty neat also extra km example think one posted original question recursive components ok one imagine want something every level sequence event caught perfectly good example dispatch pretty straightforward", "d": "10/2016"}, {"body": "want see code yes please", "d": "10/2016"}, {"body": "posva gave example previous comment note think seconds without dispatch proves point", "d": "10/2016"}, {"body": "example think one posted original question recursive components ok one imagine want something every level sequence event caught perfectly good example dispatch pretty straightforward js recursivechild something export default methods dispatch dispatch dosomething events dosomething function something dont return true nessessary make event bubble nt like unexpressivness js recursivechild something export default methods dosomething someting dont emit dosomething really worse got another one", "d": "10/2016"}, {"body": "ok sure recursive yet still nested like alright going rough day thanks come something better later post either lost interest", "d": "10/2016"}, {"body": "recursive yet still nested like would add listener template seen good bad depending weither stress verboseness vs expressiveness btw situation chain event till parent done something like mourn coupling components praise expressiveness bit type big deal still claim real usecase example probably different optimization available like global store depends individual scenario hard argue example code anyways nice discussion enjoy welldeserved sleep", "d": "10/2016"}, {"body": "rhyek looks like workarounds determined use first place goal goal allow components communicate one another decent maintainability achieving goal inferior solution list practical pros cons excluding preferences dropped also note dom event bubbling fundamentally different crosscomponent communication argument event bubbling widely recognized nt mean must good solution problem trying solve done commenting thread find hard argue nt like", "d": "10/2016"}, {"body": "different deprecated api due symmetry logical completeness would nt cut limb hardly use", "d": "9/2016"}, {"body": "ridiculous justification boss", "d": "9/2016"}, {"body": "screenshot one qq group vuejs predict questions come future users commonly expect symmetric api brings symmetric usage would nt decide cut limb hardly use would cut nt use causing trouble like vermiform appendix", "d": "9/2016"}, {"body": "meet question first think work venter", "d": "12/2017"}, {"body": "problem", "d": "9/2016"}, {"body": "directive reset input value blur give param always change value see", "d": "9/2016"}, {"body": "vmodel directive reset input value blur give number param always change value number see", "d": "11/2016"}, {"body": "buwder simply copied comment going add anything delete comment", "d": "11/2016"}, {"body": "linusborg issue seems fixed", "d": "11/2016"}, {"body": "may case ca nt verify issue tagged p", "d": "11/2016"}, {"body": "fyi maybe helps tried debug transitionprototypeleave worked perfectly debugging debugger attached fails explained issue", "d": "9/2016"}, {"body": "try", "d": "9/2016"}, {"body": "try height always set", "d": "2/2017"}, {"body": "matkovsky tested codepen actually works still issue update repro messed link kingwl sorry repro nt working cdn", "d": "2/2017"}, {"body": "checking bug element rerendered first time set height hook therefore css transition triggers height still need ensure height always set used setting height use requestanimationframe hook make work properly way leave hook also works solution proposed using reliable solution", "d": "2/2017"}, {"body": "maybe try maxlength something like nt actually think bug handle dom update blur way optimization", "d": "8/2016"}, {"body": "intended behavior nt reformat text long user typing want customize behavior need implement", "d": "8/2016"}, {"body": "ucmz apparently delimiters defined percomponent vaguely mentioned", "d": "8/2016"}, {"body": "tribex confirmed thanks missed original announcement working example completeness sake", "d": "8/2016"}, {"body": "sorry guys seen many answers actual answer show one simple example use delimiters components mean vue files", "d": "11/2016"}, {"body": "component script nt recognize delimiters export default delimiters", "d": "11/2016"}, {"body": "hello isaevbehruz issue tracker reserved exclusively bug reports feature requests encourage ask forum stack overflow gitter happy help", "d": "11/2016"}, {"body": "linusborg using like says bug report though probably another issue details isaevbehruz would mind providing jsfiddle reproducing issue would good start", "d": "11/2016"}, {"body": "bug report open separate issue recycle old closed slightly related issue also initially asking use claiming work fiddle works expected", "d": "11/2016"}, {"body": "linusborg alrighty", "d": "11/2016"}, {"body": "sorry linusborg bad asking tribex also tried example yes works mentioned question delimiters nt work vue files iv put delimiters option iv compiled nt work", "d": "11/2016"}, {"body": "oh may right sorry need check remember correctly changing delemiters may available standalone build indom templates reasoning templatws files precompiled ca nt conflict servetside template system custom delimiters existed first place", "d": "11/2016"}, {"body": "actually docs available standalone build using", "d": "11/2016"}, {"body": "thanks linusborg right need custom delimiters files", "d": "11/2016"}, {"body": "pls change delimiters using vue webpacksimple new vue delimiters el app render h gt h app nt work pls help", "d": "1/2018"}, {"body": "pls change delimiters using vue webpacksimple new vue delimiters el app render h gt h app nt work pls help move delimiters vue use template example nt add delimiters new vue use template", "d": "5/2018"}, {"body": "case someone want work globally", "d": "7/2018"}, {"body": "aymanalkom thanks nt work use code says vue defined absolutely weird use following code worked vue app component make work component defined globally thanks", "d": "9/2018"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "8/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks think bug need provide proper reproduction", "d": "8/2016"}, {"body": "nt properly initialize data reactivity ca nt work reliably set initial values provide data", "d": "8/2016"}, {"body": "linusborg current version something mandatory need initialize properties nosql database would need frontend", "d": "8/2016"}, {"body": "linusborg behavior expected however said xereda works normally property object code needed solve issue take part facility already provided vuejs", "d": "8/2016"}, {"body": "xereda required longer implicit create nonexistent paths intentional decision although want let users lazy also want write maintainable code although use nosql without schema feel maintain another persons database schema", "d": "8/2016"}, {"body": "accepted arguments thanks return involved", "d": "8/2016"}, {"body": "evan intentional sounds like intentional murder people lazy life long mirroring whole schema looks pretty weird background native javascript objects", "d": "10/2016"}, {"body": "duplicate", "d": "8/2016"}, {"body": "bug support filterby", "d": "8/2016"}, {"body": "please read", "d": "8/2016"}, {"body": "oh useful feature want easy way", "d": "8/2016"}, {"body": "intended behavior using component attributes component element explicitly declared prop set component root node plain dom attributes", "d": "8/2016"}, {"body": "expected behaviour using templates think using render functions nt want default behaviour way override", "d": "8/2016"}, {"body": "remove root vnode", "d": "8/2016"}, {"body": "tried mounted hook work supposed use jquery", "d": "8/2016"}, {"body": "think makes sense keep behavior consistent templates render functions want allow user customize nonroot element using attributes component placeholder need declare attributes want intercept props", "d": "8/2016"}, {"body": "case purpose render functions thought render functions allow level customization simple input component map html input attributes props user want apply datasomething attribute input", "d": "8/2016"}, {"body": "would great way override default behavior", "d": "8/2016"}, {"body": "victorwpbastos yeah think", "d": "8/2016"}, {"body": "victorwpbastos exactly trying accomplish think consumer component trying put attribute onto deeply nested element nt strong separation concerns reason using components", "d": "8/2016"}, {"body": "hello please use forum gitter things like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "8/2016"}, {"body": "question initializing empty objects unnecessary performance overhead intentionally avoided performance critical functions like", "d": "8/2016"}, {"body": "unintentional fixed", "d": "8/2016"}, {"body": "using vif vshow time supported sorry vshowvelse supported", "d": "8/2016"}, {"body": "need use prop see", "d": "8/2016"}, {"body": "thanks", "d": "8/2016"}, {"body": "yeah pretty hidden docs", "d": "8/2016"}, {"body": "indeed bug fixed commit referenced", "d": "8/2016"}, {"body": "related vue hint something exceeds limit try breaking", "d": "8/2016"}, {"body": "netroby wow wonderful see", "d": "8/2016"}, {"body": "tkaven nice see remember please let know", "d": "8/2016"}, {"body": "see", "d": "8/2016"}, {"body": "intentional decision probably remain changing would breaking pretty straightforward workaround using explicit keycodes", "d": "8/2016"}, {"body": "would never guessed current functionality never used mac keyboard problem described nonissue solution created confusion part feel like docs least state delete handles delete key amp backspace key user keyboard created pr interested", "d": "8/2016"}, {"body": "thanks lot works perfectly rc", "d": "9/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks regarding need recommended approach creating extended component handles underlying conversion logic eg", "d": "8/2016"}, {"body": "duplicate already fixed", "d": "8/2016"}, {"body": "accessing nonexistent index", "d": "8/2016"}, {"body": "reproduce please provide live reproduction jsfiddle codepen etc", "d": "8/2016"}, {"body": "way already deprecated mustache binding props instead use", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "fnlctrl", "d": "8/2016"}, {"body": "vue data determines ui looks like way around attribute set vue case write back data expected behavior want value initially", "d": "8/2016"}, {"body": "hi please make sure ask question forums gitter chat form submitting enter keydown event nt release enter key better see effect therefore keyup event always happens", "d": "8/2016"}, {"body": "thank answer nt know normal behavior form submitted keydown posted issue thought bug vuejs", "d": "8/2016"}, {"body": "nt make sense functional component functional option simply ignored use create component instance definition functional components instances lifecycle either", "d": "8/2016"}, {"body": "make component another asset type like wonder api consumers make mistakes", "d": "8/2016"}, {"body": "herringtondarkholme may good idea", "d": "8/2016"}, {"body": "herringtondarkholme already simplified component", "d": "8/2016"}, {"body": "posva would argue component different many ways state lifecycle ed configurations applied component behaves less like asset type", "d": "8/2016"}, {"body": "component use composite ui using interface templates also rc breaking changes introduced", "d": "8/2016"}, {"body": "\u8bf7\u7ed9\u91cd\u73b0 jsfiddle codepen jsbin etc", "d": "8/2016"}, {"body": "\u90a3\u4f60\u81f3\u5c11\u8bf4\u4e00\u4e0bios\u7cfb\u7edf\u7248\u672c\u5427", "d": "8/2016"}, {"body": "\u5728ios plus \u548c", "d": "8/2016"}, {"body": "draguo \u8bf4\u53e5\u9898\u5916\u8bdd \u4f60\u8fd9\u4e2a\u5fae\u4fe1\u7684\u63a7\u5236\u53f0\u662f\u54ea\u91cc\u7684", "d": "8/2016"}, {"body": "rubyless", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "jsfiddle \u4f60\u53eb\u6211\u600e\u4e48\u5e2e\u4f60 \u53e6\u5916\u4f60\u786e\u5b9a\u4e0d\u662f vconsole", "d": "9/2016"}, {"body": "\u7ecf\u6d4b\u8bd5\u5728 os x safari vconsole \u81ea\u5df1\u7684 console vconsole \u5f00", "d": "9/2016"}, {"body": "jsfiddle vuecli \u6784\u5efa\u7684 \u5b9e\u4f8b \u5728\u6700\u540e\u8fd4\u56de\u7684 result \u503c\u662f\u4e0d\u540c\u7684 \u5de6\u8fb9\u662f ios \u7684iphone plus \u53f3\u8fb9\u662f\u6211\u7684\u5c0f\u7c73\u624b\u673a \u5728 ios \u7684iphone \u4e0a\u6ca1\u6709\u4e0a\u8ff0\u95ee\u9898", "d": "9/2016"}, {"body": "\u600e\u4e48\u89e3\u51b3\u7684\u6211\u4e5f\u9047\u5230\u76f8\u540c\u7684\u95ee\u9898", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "\u6839\u672c\u539f\u56e0\u662f\u5982\u679c\u5728for fri sep draguo notifications githubcom wrote computed\u4f7f\u7528\u5c0f\u95ee\u9898 receiving commented reply email directly view github mute thread", "d": "9/2016"}, {"body": "children never guaranteed order", "d": "8/2016"}, {"body": "please provide live reproduction without using vueresouce jsfiddle codepen etc", "d": "8/2016"}, {"body": "seems like working expected", "d": "8/2016"}, {"body": "sorry fault passed string value thus ca nt located properly problem solved thank", "d": "8/2016"}, {"body": "sign github account", "d": "8/2016"}, {"body": "sorry authorization", "d": "8/2016"}, {"body": "experiencing github autorized forum rejecting issues redirecturimismatch parameter url", "d": "11/2016"}, {"body": "vmodel since empty inputs reset zero according description", "d": "11/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "vueloader works vueloader expects export plain object order let compile template need register global component", "d": "8/2016"}, {"body": "jetiny docs discuss parentchild communication", "d": "8/2016"}, {"body": "works access url probably access jsdelivrnet work china url work access directly", "d": "8/2016"}, {"body": "vueorg nt belong vue project access vuejsorg cnvuejsorg without problems maybe issue cdn particular", "d": "8/2016"}, {"body": "either cdn problem network issue either nothing vue", "d": "8/2016"}, {"body": "change dev version see console vue warn failed compile template avoid using javascript keyword property name new expression vmodel new found root instance", "d": "8/2016"}, {"body": "please provide reproduction jsfiddlecodepen etc", "d": "8/2016"}, {"body": "snowffer ping", "d": "8/2016"}, {"body": "posva writing repro demo jsfiddle", "d": "8/2016"}, {"body": "posva sorry ca nt repro watch question new value equal old value watcher would triggered right", "d": "8/2016"}, {"body": "least vue", "d": "8/2016"}, {"body": "yeah looks like method broken", "d": "8/2016"}, {"body": "longer accepts argument auto removal remove dom node", "d": "8/2016"}, {"body": "wow ok thanks pointing remove parameter acually useful thing share reason removed", "d": "8/2016"}, {"body": "question sqal currently solve incompatible issue additional code addition vm destroy seems strange must append code vm destroy true still support parameter great thanks", "d": "8/2016"}, {"body": "cnweibo fyi usage fiddle considered bad practice general manually destroy instances manipulate dom element instance rendered parent component nt provide argument anymore methods like deprecated recommended usage making datadriven make component controlled parent scope toggle emitting event", "d": "8/2016"}, {"body": "soa makes code predictable", "d": "8/2016"}, {"body": "posva datadriven nice cases also insist developing datadriven way cases reasonable readable code destroy anyway proposal vuejs support destroy true good nt think necessary also ok alternative solution thanks", "d": "8/2016"}, {"body": "cnweibo want control lifecycle component manually manually means create using insert destroyremove would recommend mixing datadriven using component parent template imperative control destroying manually", "d": "8/2016"}, {"body": "thanks clarification got", "d": "8/2016"}, {"body": "also met", "d": "8/2016"}, {"body": "error caused line works remove looks like error complex cause may work remove parts", "d": "8/2016"}, {"body": "related vue please read javascript arrayprototypeforeach time", "d": "8/2016"}, {"body": "time laughing", "d": "8/2016"}, {"body": "shame", "d": "8/2016"}, {"body": "placed component surrounding", "d": "8/2016"}, {"body": "google use fri aug shakeeb sadikeen notifications githubcom wrote huge form fields feel much redundancy code write best way new vue data user firstname lastname username input fields feel something like would nice user object created dynamically possible new vue data user object input fields possible define repeatedly data object form would nice achieve something similar simpler receiving subscribed thread reply email directly view github mute thread", "d": "8/2016"}, {"body": "please check updated post vmodel pre defined data object right question map subkeys object input name getting vfor objectkeys would help please elaborate", "d": "8/2016"}, {"body": "expert code need modifying something like probably want vue new vue data user object maybe using object vfor like vue new vue data user object", "d": "8/2016"}, {"body": "sure autogenerating form models child component good idea using render option idea reset button affect input fields", "d": "8/2016"}, {"body": "userland problem since achievable via components", "d": "8/2016"}, {"body": "generating inputs dflock yes generating input elements data binding actually sorry missed clarify first post ktsn thanks trying achieve would nice vue box aware technical side cool feature like laravel collective form model binding current approach would nice could kind approach box form vmodel user submit submitform yeah even thanks would pleased could direct correct way exact thing trying achieve similar laravel collective form model binding new vue el app data user type object default methods submitform function user object contains thisuserfirstname thisuserlastname directly submit json object api submititwith thisuser", "d": "8/2016"}, {"body": "html please use forums ask questions next time", "d": "8/2016"}, {"body": "fnlctrl please check last comment checked fiddle sorry trying achieve already full form designed input tags need bind dynamically without adding inputs", "d": "8/2016"}, {"body": "mean without using vmodel", "d": "8/2016"}, {"body": "trying achieve please read one", "d": "8/2016"}, {"body": "possible please redesign form", "d": "8/2016"}, {"body": "great available future way clean alot redundancy variable name feature request", "d": "8/2016"}, {"body": "non issue already solve easily enough vfor evan said", "d": "8/2016"}, {"body": "implemented likely wontfix revisit working", "d": "8/2016"}, {"body": "note behavior introduced reverted next release instead new custom directive hook introduced called element inserted parent node", "d": "8/2016"}, {"body": "hello thank filing issue hackey workarounds called closures everywhere js situations use babel avoided using arrow function transpiled function bound current context closure done providing something like scope would nessessitate changes fundamental level vue instance structured operates opinion wo nt worth", "d": "8/2016"}, {"body": "way using rather within vue object", "d": "8/2016"}, {"body": "possible main instance otherwise read components", "d": "8/2016"}, {"body": "nt think worth adding feature since nonissue use arrow functions way scope something advised angular styleguide", "d": "8/2016"}, {"body": "disagree feel problem every developer run course vue project every developer course project mention bind angular styleguide advised using scope unrelated reason think alternative important", "d": "8/2016"}, {"body": "yes may encounter problem learned javascript started using arrow functions solve fri aug notifications githubcom wrote disagree feel problem every developer run course vue project every developer var vm course project mention bind angular styleguide advised using scope unrelated reason think alternative important receiving commented reply email directly view github mute thread", "d": "8/2016"}, {"body": "interested solution right cleanest solution put default function parameter example satisfying solution personal bases nt take much space keep good work look forward full release", "d": "8/2016"}, {"body": "time passed best practice find comes lot working axios", "d": "3/2017"}, {"body": "mentioned original response arrow functions", "d": "3/2017"}, {"body": "excellent know way forward thank vuex andor axios example learned arrow functions yet sent ipad mar thorsten l\u00fcnborg notifications githubcom wrote mentioned arrow functions receiving commented reply email directly view github mute thread", "d": "3/2017"}, {"body": "lot documentation arrow functions web specific vue", "d": "3/2017"}, {"body": "would advantage", "d": "8/2016"}, {"body": "basic functionality async promise related things", "d": "8/2016"}, {"body": "also helpful code splitting done systemimport returns promise though might need extra default check", "d": "8/2016"}, {"body": "using async components vue webpack vuerouter sometimes still need async data vue file ca nt resolve well right trying use return promise vue file returns vue component object componentobj callback works well still problem ca nt read part vue file must apply template string makes vue file little ugly question solution resolve support async promises vue file get part part smile linusborg simple vue vue export default require vue resp gt let wrappertemplate const components respjson foreach data template index gt let component component index wrappertemplate lt component gt components component data gt data template return name websiteedit template lt componentswrapper gt components componentswrapper template lt div gt wrappertemplate lt div gt components", "d": "8/2016"}, {"body": "jounqin attempt export async component file async components always declared used instead defined", "d": "8/2016"}, {"body": "resolve async data create vue instance works well also trying resolve async promise function means must save data store read initialized data simple code javascript const init metainit \u9700\u8981\u9884\u5148\u62c9\u53d6\u6570\u636e vue getthen res gt const data resjson const actions initactions \u5b8c\u6210\u540e\u5982\u679c\u662f\u5b57\u7b26\u4e32\u8868\u793a\u76f4\u63a5\u5c06\u6240\u6709\u6570\u636e\u5bfc\u5165 action typeof actions string storedispatch actions data else \u5426\u5219\u5e94\u8be5\u662f\u5bf9\u8c61\u7c7b\u578b \u904d\u5386\u5c06\u5bf9\u5e94\u6570\u636e\u5bfc\u5165\u5bf9\u5e94 action const key value objectentries actions storedispatch key data value metafetched true \u6570\u636e\u5bfc\u5165 store \u6210\u529f\u540e\u8fdb\u5165\u7ec4\u4ef6 next also think", "d": "8/2016"}, {"body": "jounqin problem async components trying solve async components designed code splitting resolving data deal async data create instance first loading state fetch data ps please nt hijack issue irrelevant questions", "d": "8/2016"}, {"body": "sorry see trying finding way reolve async promise function create vue instance commit problems final word used someone product designer example nt like", "d": "8/2016"}, {"body": "jounqin need fetch data displaying components may time use vuerouter", "d": "8/2016"}, {"body": "posva oh course using tried resolve async promise hook pass resolved data initializing vue instance hook use resolve think maybe little high coupling data needs save store", "d": "8/2016"}, {"body": "jounqin well another subject sure find information searching google forums", "d": "8/2016"}, {"body": "ok thx sorry bothering posva", "d": "8/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile", "d": "8/2016"}, {"body": "call keeps checkbox toggling see remove gui works fine vs attribute dom property currently current status get applied element dom correcting issues gui well dom work expected first checkbox", "d": "8/2016"}, {"body": "linusborg without checkbox would swithing checked even state false check checkbox example nt prevent changing checked state click real state getting changed using event prevent change checkbox already changed status component relies prop value false defult set checkbox checked state checkbox remain unchecked prop value change see fiddle case", "d": "8/2016"}, {"body": "well vue correctly update input attribute gui switch seems problem gui behaviour using", "d": "8/2016"}, {"body": "nt know set log render function despite preventdefault workaround get called see state trully changed gui said virtual dom vue wants render checkbox checked value gui way impression vue thinks nothing change keeps using cached dom", "d": "8/2016"}, {"body": "mean demonstrated screenshots switch value vue correctly removes attribute screenshot switch vue correctly sets attribute screenshot browser gui seems screw event though vue correctly removes attribute value switches happens async function ended gui still displays checked checkbox else vue expected get problem whole thing pretty weird idea currently", "d": "8/2016"}, {"body": "okay debugging browser behaviour problem behaviour add debuggers follow along actually prevent unchecking box immediately stict sense soon click event starts checkbox becomes unchecked screen dom still checked even revert gui state called called box still screen unchecked fact box stays unchecked complete call stack including dom update vue done browser chrome revert gui status back makes box screen checked time dom gui sync ideas", "d": "8/2016"}, {"body": "thanks looking consider possible workaround done vue implementation", "d": "8/2016"}, {"body": "could tell knew workaround would look like", "d": "8/2016"}, {"body": "linusborg workaround working fine far chrome mozilla", "d": "8/2016"}, {"body": "great works also tested safari", "d": "8/2016"}, {"body": "miljanaleksic label bug seems browser behaviour workaround implemented easy enough keep open discussion though see weither come clever way catch vue somehow honestly doubt", "d": "8/2016"}, {"body": "yes tough call nt get core perhaps could document hint render functions examples", "d": "8/2016"}, {"body": "first checkbox expected behavior calling second checkbox working intended emitting wrong event name works event name fixed", "d": "8/2016"}, {"body": "hello please repost one fiddles possible miljanaleksic linusborg seeing problem currently sounds much like described unfortunately fiddles gone ca nt see code workaround mentioned miljanaleksic make sense context also nt really understand render functions probably part weakness additionally nt see could event name wrong von click clicked event template component clicked method methods object event fires method component definition must work everything else expect occuring exact description problem vertical list tasks one task next etc task checkbox right user checks checkbox indicate task completion task disappear vuex implementation triggers change across entire application task disappear lists next task list moves otherwise appears spot old task checkbox accompanying next task appears checked even though certainly fact checkbox previous task never actually seems disappear instead seems hang around task text changes next problem need try show reproducible example please let know make effort make fiddle show problem time permitting application complex reproducing trivial may reasonably able reproduce questions thanks creating vue better alternative angular et al event name misusing miljanaleksic linusborg could share work around could reproduced without render functions note currently using eventpreventdefault checked checkbox hanging around less ideal considering checkbox never appears checked maybe resort buttons instead checkboxes even images swap manually thank advance", "d": "9/2017"}, {"body": "nt really sound like problem sounds like nt key list items start thread forumvuejsorg continue necessary closed issues place", "d": "9/2017"}, {"body": "nt unique id try case caching issue etc nt resolve issue added unique id checkbox previously hmmm maybe needs higher level multiple elements vue components template try keying needed elements thank thoughts apologize commenting closed issue nt resolve problem start thread forum create fiddle illustrates problem thanks", "d": "9/2017"}, {"body": "use modifier using components", "d": "8/2016"}, {"body": "thank works indeed documented custom event part component section could also added event modifiers part methods event handling section", "d": "8/2016"}, {"body": "thanks missed documentation would agree clegendre could added", "d": "11/2016"}, {"body": "would also helpful add vuemigrationhelper possible nt required", "d": "11/2016"}, {"body": "chrisvfritz could added vuemigrationhelper maybe could try ship", "d": "11/2016"}, {"body": "unfortunately nt something migration helper catch look adding second reference guide", "d": "11/2016"}, {"body": "expected behavior vuecomponent registers global components", "d": "8/2016"}, {"body": "answer answering question dont ask registering global component instead ask factory creating instance instance", "d": "8/2016"}, {"body": "well simpler explained way equivalent expecting equivalent", "d": "8/2016"}, {"body": "nt make sense component registration separate concern component inhertence implicitly mixing two nt sound like good idea breaking change", "d": "8/2016"}, {"body": "completely userland problem different apis different loading requirements nt see core", "d": "8/2016"}, {"body": "problem using vif component root element inside template since component destroyed vif goes false show function called related issue guess vue prohibit using vif component root element", "d": "8/2016"}, {"body": "unfortunately using element root element still nt work see", "d": "8/2016"}, {"body": "using wo nt work explained fnlctrl due issue would say recommended pattern anyway would rather pass prop component b use component popup component controls ie close button event let parent listen component parent change state value several advantages parent knows weither popup shown nt need use tight coupling child components via js code parent stays control actually show hide popup", "d": "8/2016"}, {"body": "closing takes care", "d": "8/2016"}, {"body": "linusborg reproduction already using supposed fix release notes guess still edge case covered", "d": "8/2016"}, {"body": "wait nt invalid component version root element false know component resolve root instance fragment instance case even single element false", "d": "8/2016"}, {"body": "prograjkamal valid point fnlctrl also mentioned first response however bug still occurs move child div see updated codepen", "d": "8/2016"}, {"body": "point reactive meant far know evan computed prop reevaluate change assume changeget filled computed props evaluated initially would call expected behaviour", "d": "8/2016"}, {"body": "ah think true thanks provide error warning message using values computed getters could large pit fall users", "d": "8/2016"}, {"body": "kind warning would hard implement may scenarios someone uses inside computed property good reason wants update another reactive value changes vue would check weither nonreactive elements used worth opinion rather make clear guide api docs computed properties react changes references computed properties chrisvfritz opinions", "d": "8/2016"}, {"body": "thanks explaining linusborg", "d": "8/2016"}, {"body": "agree implementing warning probably nt feasible make clear guide take care think use case one tempted use slots computed property though moving data one props reactive would better solution", "d": "8/2016"}, {"body": "nt understand problem exactly provide replication least actual code relevant part found hooks onchange event adding onchange function event myprop undefined tell us much vue generally set prop undefined must something make vmodel aproach work", "d": "8/2016"}, {"body": "repro try changing radio radiolist anything else radio works", "d": "8/2016"}, {"body": "thanks indeed seems like bug emitted input event correctly received component", "d": "8/2016"}, {"body": "look generated render function component change event looks like bug maybe normal behavior input type radio another component", "d": "8/2016"}, {"body": "change work vuemdl wo nt work particular things like mdswitch behave like would like exposed properties match expected eg workaround able following get vmodel working expected checked component value change committed longer work means solution using vmodel property value right way last change thoughts ps progress vuemdl code working", "d": "8/2016"}, {"body": "petejohanson something look vuemdl end", "d": "8/2016"}, {"body": "import standalone build read whole section", "d": "8/2016"}, {"body": "thanks linusborg answer used vuedistvuejs instead vue gives following warning components rendered", "d": "8/2016"}, {"body": "configure alias per instructions link work expected", "d": "8/2016"}, {"body": "made change keeps thing hotupdate applied element correct wrong configuration using vueloader webpack templates compiled render functions already use runtimeonly version vue right working version upload repository comparison", "d": "8/2016"}, {"body": "gbisheimer get setup seems custommodified version webpack template likely configured correctly instead bug", "d": "8/2016"}, {"body": "uploaded working version used vuecli output project base modified little bit integrate rails project edit also included nodemodules packages vue vueloader case wont able get related packages versions install packagejson version specification", "d": "8/2016"}, {"body": "seems related vue vueloader use master branch reproduction repo replace nodemodulesvue vueloader folders ones branch works expected nothing else modified", "d": "8/2016"}, {"body": "replacing incorrect installs flat deps without replacing creating version mismatches would remove deps since needed latest deps make sure alias configured correctly remove reinstall everything fresh close modified setup involves many variants may responsible would different matter reproduced official template problem persists please try narrow issue open issue", "d": "8/2016"}, {"body": "tested using vuecli template template working expected try find wrong configuration report back thanks support great work", "d": "8/2016"}, {"body": "looks problembug", "d": "8/2016"}, {"body": "sure weither strictly bug one might want add interpolated data textarea content weither comment", "d": "8/2016"}, {"body": "yep sure categorised bug surely documentation allowed console warn something like", "d": "8/2016"}, {"body": "afaik supposed use vmodel inner content textareas thought documented", "d": "8/2016"}, {"body": "documented see vmodel changes", "d": "8/2016"}, {"body": "iagafonov thanks make sure add docs evening", "d": "8/2016"}, {"body": "thank linusborg main raison posted issue avoid ugly things like js contact reactive object multiple existing properties need add new key named invited contacts index index contact contact list thiscontacts var updatedcontact var contact updatedcontact contact updatedcontactinvited true add new invited key becomes reactive thiscontacts set index updatedcontact update method able simply", "d": "8/2016"}, {"body": "longer augmenting builtin prototypes either global instance methods avoid adding even nt seem need prototype method anyway use custom helper function really want attach vue easier access", "d": "8/2016"}, {"body": "define component functional component functional components instance want use props functional components get via argument", "d": "8/2016"}, {"body": "hi please make sure follow issue reporting guideline issue list reserved bug reports feature requests use gitter chat root official forum ask usage questions thanks", "d": "8/2016"}, {"body": "demo vue bug amp less css nice", "d": "9/2016"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "vue externalized basically want make sure global modifications make global vue singleton done calls like fine vue internally avoids duplicate plugin installation", "d": "8/2016"}, {"body": "indeed component gets compiled directive already removed attr dom directive tries access want access attr access use case problem trying solve", "d": "8/2016"}, {"body": "component dynamic property myattrvariable idea use attribute myattr also vue directive course possible bind variable additional property shared specific component would solve one one directive element lot duplication protect component attributes directive user must also aware components properties hand one also want implementation directives bound implementation details specific component ie getting attributes trough vm preferable explicit unsurprising get attributes trough element attribute interface similar problem one directives compete attribute one play priority attribute select one win fiddle one case one using index vfor two directives need time gotten trough vm directly one needs two attributes component index index instead index index means directive writers must also careful step properties components used element one must careful collision unknown directive directive authors instance fact attributes extracted meant quite literally tried similar stuff also one get unobserved attributes vnodedataattrs params understand must heavy design decisions compiler architecture balance various vuejs features case might look natural local scope issue", "d": "8/2016"}, {"body": "give real example real names nt understand directives components sharing attrs name choice handle attr named easily solved meaningful variable name", "d": "8/2016"}, {"body": "expected behavior imo conflicting propparams confusing personally avoid scenarios completely also longer possible due directives longer params", "d": "8/2016"}, {"body": "thank info super remove params prevent scenarios awesome", "d": "8/2016"}, {"body": "second button click emits event event bubbles eventually cached vue transtition listens event order catch end main transition quick fix would stop propagation button ill look weither fix think comparing event even though css attribute button really transitioning situation beyond", "d": "8/2016"}, {"body": "adding transitionendstop worked thanks thought something related handling transitionend event found vue try patching", "d": "8/2016"}, {"body": "really bug behavior set bound value none options selected converted nexttick called bug devtools ignores fields value separate issue opened devtools repo", "d": "8/2016"}, {"body": "thank quick reply makes sense know expect behaviour future", "d": "8/2016"}, {"body": "runs patreon", "d": "8/2016"}, {"body": "bug fix", "d": "3/2017"}, {"body": "interesting seems regression linusborg need file new issue reopen one", "d": "3/2017"}, {"body": "better fire new one always following issue reporting guidelines", "d": "3/2017"}, {"body": "option bind value settimeout update value problem happen", "d": "3/2017"}, {"body": "works manually remove acutal dom element gets inserted let vue taker care creating new one js line reason work probably moved dom element somehow loses reference component instance saved element attribute called moved element would assume something creation removal ghost node think vue ca nt much", "d": "8/2016"}, {"body": "ok cool thanks thought might knew could something wrong thanks time", "d": "8/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks hint use components", "d": "8/2016"}, {"body": "templates need one root element child root element see even elements rendered aforementioned reason nothing dynamic components props wrapping everything makes work ps would see warning vue use vueminjs", "d": "8/2016"}, {"body": "vrbvillor close", "d": "8/2016"}, {"body": "headed report probably issue add findings case helps noticed dropdown flickering even though model options unchanged vue function fired causing repaint seems different object properties rendered page fiddle object replaced rerendered change prop nt trigger rerender issue present versions vue present vue", "d": "8/2016"}, {"body": "jingman tested chrome windows nt reproduce bug guess safarirelated", "d": "8/2016"}, {"body": "fnlctrl chrome mac version oddly enough issue actually nt occur safari wink", "d": "8/2016"}, {"body": "jingman odd indeed tested firefox bug edge reproduction", "d": "8/2016"}, {"body": "think bug talking original post fiddle components use rerendered parent changes content might changed", "d": "8/2016"}, {"body": "jingman please open new issue reported problem certainly something entirely different close issue ops problem bug expected behaviour", "d": "8/2016"}, {"body": "face fee", "d": "8/2016"}, {"body": "replicate behaviour setting value attribute adding input event", "d": "8/2016"}, {"body": "linusborg said", "d": "8/2016"}, {"body": "reasoning behind works fine custom components seems quite bit almost seems like punishment actually like jsx", "d": "11/2016"}, {"body": "honestly perspective jsx firstclass citizen development added later babel transform designed jsx mind specifically directives compiled normal javascript inserted render function template compilation far nt time felt pressure replicate delicate piece code jsx compiler compiler code templates really reusable would recreated pretty much scratch including things like parsing modifiers jsx know etc", "d": "11/2016"}, {"body": "team use production env want write tests component runtime version supported jsx ugly use render function teammates understand easily use version tests sample please support thanks", "d": "3/2017"}, {"body": "supposed use children templates", "d": "8/2016"}, {"body": "imagine timing problem two properties closely linked use object property validate object properties whole validate function", "d": "8/2016"}, {"body": "petejohanson see function invoked data already prepared right way separate two data want use basic validation using didt find solution use nested object", "d": "8/2016"}, {"body": "validator functions called loop setting prop one could work props right orde b injected array tobeprocessed props function go b would complicated things like prop b depending validator invalidates b successfully validated previous value etc pp short think validate props depend use hook props set properly component compiled yet", "d": "8/2016"}, {"body": "think solution b ok validating propa nt care valid check want read validation nt think good idea valid together hook maybe little dirty said didt find solution use basic validation using nested object array like type", "d": "8/2016"}, {"body": "jounqin set computed property validate propa probb whatever props want", "d": "8/2016"}, {"body": "fnlctrl solution like validating together hook think validation proper place rather mixing business logic", "d": "8/2016"}, {"body": "jounqin nt see using computed properties though nt like write mixin validate props beforecreate hook logic separated", "d": "8/2016"}, {"body": "fnlctrl difference point validation validation hooks course could right sounds strange", "d": "8/2016"}, {"body": "jounqin linusborg said feature prop validation depending props complex errorprone needs correct prop initialization order commonly needed solve problem interdependent validation propa requires propb propb require propa hand already easy enough implemented computed properties opinion feature nt included vue since userspecific therefore recommendations remain use computed properties b use mixin check inside hooks", "d": "8/2016"}, {"body": "one vue template parsing limitations wo nt fix workaround use vue template parser longer relies dom unless using real dom template long using string templates inline javascript strings compiled via singlefile components longer subject template parsing limitations however relying mounting element existing content template using el option still subject limitations read", "d": "8/2016"}, {"body": "workaround use vue refactor content loop component use special attribute turn tabel rowcell component", "d": "8/2016"}, {"body": "linusborg thanks nt aware workaround", "d": "8/2016"}, {"body": "fnlctrl thank much check sure falling love vuejs p linusborg check kinda new vuejs nt use components yet", "d": "8/2016"}, {"body": "\u662f\u7528\u6765\u62a5 bug bug \u8bf7\u4f7f\u7528\u8bba\u575b\u63d0\u95ee", "d": "8/2016"}, {"body": "\u597d\u6ef4", "d": "8/2016"}, {"body": "\u8bf7\u7ed9\u91cd\u73b0", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "\u91cd\u73b0\u7684\u610f\u601d\u662fjsfiddlenet codepenio\u4e4b\u7c7b\u7684\u5728\u7ebf\u4f8b\u5b50", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "\u6ca1\u4e8b \u90a3\u628a\u8fd9\u4e2aissue\u5173\u4e86\u5457", "d": "8/2016"}, {"body": "\u540e\u9000 \u524d\u8fdb", "d": "9/2016"}, {"body": "", "d": "9/2016"}, {"body": "fnlctrl", "d": "9/2016"}, {"body": "zhujz \u6211\u70b9\u4e00\u4e0bupdate", "d": "9/2016"}, {"body": "fnlctrl", "d": "9/2016"}, {"body": "\u597d\u5427", "d": "9/2016"}, {"body": "\u62b1\u62f3", "d": "9/2016"}, {"body": "wed sep zhujz notifications githubcom wrote \u62b1\u62f3 receiving mentioned reply email directly view github mute thread", "d": "9/2016"}, {"body": "", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "html itemname works need remove extra", "d": "8/2016"}, {"body": "minimized extrait ca nt removed way found solve like nt know reason", "d": "8/2016"}, {"body": "looks like bug affecting sibling elements", "d": "8/2016"}, {"body": "fnlctrl", "d": "8/2016"}, {"body": "issue vue issue one vue plugins please try removing one see error persists file issue plugin repo", "d": "8/2016"}, {"body": "henjue provide version vue using using vue vueloader make sure use vueloader moved vuejsvueloader", "d": "8/2016"}, {"body": "please specific try forum first maybe solution problem provided forum", "d": "8/2016"}, {"body": "rajibahmed stated make sure ask question forums gitter chat question vague render function sort however like question", "d": "8/2016"}, {"body": "doc explicitly tells use time", "d": "8/2016"}, {"body": "user created object considered plain object check guards native objects eg proper way explicitly avoid observation freezing object", "d": "8/2016"}, {"body": "nt seem prevent entire object walked", "d": "8/2016"}, {"body": "nt seem prevent entire object walked freezes entire object however recursive", "d": "8/2016"}, {"body": "fenduru observation system stop walk whenever detects frozen object happening please provide proper reproduction", "d": "8/2016"}, {"body": "stated changelog vshow respects original display value element would set none", "d": "8/2016"}, {"body": "indeed irrational seen situation set original design attaching nobody removed would nice see hint console actually faced server side rendering sets goes away", "d": "8/2016"}, {"body": "change ment fix situation display none set css removing display dom would keep invisible make sense completely remove display set none though chrisvfritz think", "d": "8/2016"}, {"body": "miljanaleksic thanks exactly topic debate office happening case drop inline css set back evaluates respect original inline value imo respect original inline value correct behaviour engineer dictates happening library instead inline css class used case inline set override value class thing agreed debate small warning vue console devmode course hurt", "d": "8/2016"}, {"body": "think ignore inline using together nt make sense overriding logical behavior needs able override value set ssr", "d": "8/2016"}, {"body": "please open issue correct repository think bug need support ask forum gitter", "d": "8/2016"}, {"body": "simplified repro bit vuerouter unrelated issue ps nt need including vuerouter tag call still need using module bundler", "d": "8/2016"}, {"body": "since fix leave hook call next component instead current wait prerelease make online repro thanks", "d": "8/2016"}, {"body": "stephanedemotte unfortunately guarantee refs update order relation transition hooks transition happening simultaneously vnode patching process enter happens first remove happens next incoming component enters already replaces current ref general nt think relying refs inside transition hooks good idea maybe better explain trying achieve necessary", "d": "8/2016"}, {"body": "try different transition page transtition vuerouter link ask help vue help got try update kickstart vue keep logic really need get different complex transition able create cool spa like noize laposte done website vue transition need reference current component get data get router name etc see noize transition different everytime go collection home one leave collection detail return collection different one idea let page component create transition component check route get width height etc thanks", "d": "8/2016"}, {"body": "next step let components transition page component wait promisesall component finish component page lunch function think create awesome robust spa", "d": "8/2016"}, {"body": "fyi place inside child component root allows different transitions child component", "d": "8/2016"}, {"body": "try mode outin dont work transition inside view router", "d": "8/2016"}, {"body": "deal", "d": "8/2016"}, {"body": "solution already didnt manage find using transition root child component router doesnt wait done executes route leave transition finished", "d": "3/2017"}, {"body": "functional component receives data object passed object clicknative event pass render function second argument otherwise event wo nt registered also since want event register normal element would key data object key used rendering component two things pass properly constructed data object render function b pass ctxdata render function remove modifier parent", "d": "8/2016"}, {"body": "linusborg ca nt find best way achieve custom template custom u show best practise thanks", "d": "8/2016"}, {"body": "however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "8/2016"}, {"body": "looks like bug workaround", "d": "8/2016"}, {"body": "use instead works fine looks like comes directive demo", "d": "8/2016"}, {"body": "followed element using play nice together vif relys previous sibling elements vif result one evaluated evaluated item loop lead unexpected behaviour", "d": "8/2016"}, {"body": "surround element use", "d": "8/2016"}, {"body": "trick found make work solution still add false transition vuejs transitioned element add false attribute make work nt work guess needs transition way still feels like hack advice opinion slidertransition transition trick sliderbackdrop transition opacity opacity slidercontent transition transform transform translatex sliderenter sliderleave opacity trick sliderbackdrop opacity slidercontent transform translatex calc", "d": "8/2016"}, {"body": "yeah think way vue know nested element listen event listening element fake master transition best workaround think", "d": "8/2016"}, {"body": "simplesmiler asked improvement definitely possible vue getcache transitions happen element get elements attribute", "d": "8/2016"}, {"body": "bit easier using though still requires top level element transition know max delay sliderenteractive sliderleaveactive transition trick sliderenter sliderleaveactive sliderbackdrop opacity slidercontent transform translatex calc demo", "d": "11/2016"}, {"body": "wontfix addressed via ability explicitly declare transition durations", "d": "1/2017"}, {"body": "additionally stack trace exception fully generated vue dont know actual function file line error thrown vue generates one error message without taking care catched exception stack trace could subject issue would helpful real stack trace", "d": "8/2016"}, {"body": "element allowed put child html handle problem use attribute fyi free html restriction precompile templates using", "d": "8/2016"}, {"body": "thanks workaround", "d": "8/2016"}, {"body": "mutating vnode key time vnodes already rendered real dom nodes mutating nt anything instead directly render function returning", "d": "8/2016"}, {"body": "btw need also need registering retrieve use directly", "d": "8/2016"}, {"body": "fix error described issue unfortunately click button latest fiddle second appears second time see error console clicking button wo nt transition third", "d": "8/2016"}, {"body": "thanks advices regarding unnecessary boilerplate solution nt seem fix issue though linusborg mentioned", "d": "8/2016"}, {"body": "missing modifier click event component", "d": "8/2016"}, {"body": "posva nt change vmodel work well", "d": "8/2016"}, {"body": "nt understand question consider asking question forums gitter chat", "d": "8/2016"}, {"body": "confirm came across yesterday well", "d": "8/2016"}, {"body": "name console still vuecomponent version", "d": "8/2016"}, {"body": "nt use change constructor name anymore make whole runtime build cspcompliant option affects debug messages vuedevtools inspection", "d": "8/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests stated contributing guidelines thanks", "d": "8/2016"}, {"body": "ok", "d": "8/2016"}, {"body": "classb key object variable", "d": "8/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "8/2016"}, {"body": "deprecated see", "d": "8/2016"}, {"body": "oh right thinking without thanks closing issue eliaztray explicitly use", "d": "8/2016"}, {"body": "hello dogrod thanks filling issue smile however issue tracker reserved bug reports feature requests please use dedicated forum gitter questions", "d": "8/2016"}, {"body": "intended reason registeredupdated render process recommended rely templates intended programmatic access javascript updated include", "d": "8/2016"}, {"body": "mean using properties also stop working use templates solve custom events currently pass validation results children parent like", "d": "8/2016"}, {"body": "use rerender view update data find reactively update use ensure data given say vue taskqueue", "d": "5/2017"}, {"body": "issue seems fixed already update demo use version", "d": "9/2016"}, {"body": "defcc yes forgot close", "d": "9/2016"}, {"body": "thank", "d": "9/2016"}, {"body": "hello icodebuster thanks filling issue smile however issue tracker reserved bug reports feature requests please use dedicated forum gitter questions", "d": "8/2016"}, {"body": "looks like issue chrome proxy implementation rather vue problem unfortunately nt think much", "d": "8/2016"}, {"body": "undefined maybe available moment initial render anyway issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "8/2016"}, {"body": "got right result warn console", "d": "8/2016"}, {"body": "maybe user available moment initial render locking encourage ask forum gitter", "d": "8/2016"}, {"body": "quick work around use object instead primitive values vmodel way using vmodel primitive values inside array looks weird really surprised worked", "d": "8/2016"}, {"body": "fnlctrl thanks filling information actually think weird use vmodel primitive value array use vmodel custom components would nice bind iterated model objects directly html", "d": "8/2016"}, {"body": "wontfix breaking change recommendation obviously using array objects instead", "d": "8/2016"}, {"body": "ok see thank description", "d": "8/2016"}, {"body": "browser test works expected chrome", "d": "8/2016"}, {"body": "linusborg chrome nt work safari firefox well", "d": "8/2016"}, {"body": "windows office right check osx later definitely works", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "please check console mentioned printed console unexpected", "d": "8/2016"}, {"body": "see mean thanks", "d": "8/2016"}, {"body": "problem", "d": "8/2016"}, {"body": "reason nextframe nexttick next frame decided mechanism vue internal scheduling queue uses microtask queue via mutationobserver two different concepts next frame timing implementation detail care instead using transition eventshooks perform tasks desired timings", "d": "8/2016"}, {"body": "use nonminified build see warning attribute interpolation deprecated use vbind", "d": "8/2016"}, {"body": "thanks", "d": "8/2016"}, {"body": "expected valid html needs escaped template parsing also requires escaping properly", "d": "8/2016"}, {"body": "autoprefixing supports css property names values", "d": "8/2016"}, {"body": "thanks answer", "d": "8/2016"}, {"body": "quite new vue trying figure best way achieve", "d": "8/2016"}, {"body": "chois maybe use class names instead", "d": "10/2016"}, {"body": "quangv using vue together gsap animations", "d": "10/2016"}, {"body": "nice gsap amazing vue great thinking combining assuming work nicely together thursday october cho garcia notifications githubcom wrote quangv using vue together gsap animations receiving mentioned reply email directly view github mute thread", "d": "10/2016"}, {"body": "indeed javascript playing much better new vue transitions", "d": "10/2016"}, {"body": "hi thanks filling issue afraid information provided enough provide live example jsfiddle codepen etc", "d": "8/2016"}, {"body": "well think explanation clear fiddle", "d": "8/2016"}, {"body": "sorry previous fiddle prove component syntax working use one", "d": "8/2016"}, {"body": "looing source vue looks attribute looking", "d": "8/2016"}, {"body": "colon becomes expression referring dynamic variable however trying refer static component id like difference javascript", "d": "8/2016"}, {"body": "read message makes furious see dont intend fix doc", "d": "8/2016"}, {"body": "gsouf nt realize difference example provided example docs", "d": "8/2016"}, {"body": "well example doc work realize something clear way explained", "d": "8/2016"}, {"body": "working", "d": "8/2016"}, {"body": "similar bindings start interprets attribute value javascript expression instead plain string make clear", "d": "8/2016"}, {"body": "ok see without colon explained doc think behavior looking", "d": "8/2016"}, {"body": "gsouf try incorporate", "d": "8/2016"}, {"body": "gsouf example documentation working looking example seem ignored part", "d": "8/2016"}, {"body": "posva yes figured didnt understand starting point vuejs trivial tests component system see fits needs confused didnt know difference though either bug documentation typo common big documentations", "d": "8/2016"}, {"body": "well confusion also comes fact trying create component example missing part tat mentioned", "d": "8/2016"}, {"body": "ok see without colon explained doc think behavior looking fair general behaviour props leading colon explained docs chapter data binding syntax shortcuts see obvious someone scanning docs specific topic therefore think try change docs use longhand version bindings example would look like would tell someone new vue heshe look order fully get going", "d": "8/2016"}, {"body": "completeness could also add mention confuse binding components bindings takes expression versus special attribute takes static string related vue template rendering documented template rendering", "d": "8/2016"}, {"body": "mikekidder thing one takes expression static string", "d": "8/2016"}, {"body": "ah ok still learning corrected better statement", "d": "8/2016"}, {"body": "mikekidder nt think makes sense explain attribute specifically works like prop vue documented use props well common pitfalls throughout documentation eg", "d": "8/2016"}, {"body": "yes entirely right read section thanks well explained", "d": "8/2016"}, {"body": "javascript expressions templates run babel parser recognize syntax either design decision otherwise templates standalone build would require babelruntime browser work", "d": "8/2016"}, {"body": "vue working without problems", "d": "8/2016"}, {"body": "ok reopening actually works standalone build work runtimeonly precomiled templates seems like bug indeed sorry premature close", "d": "8/2016"}, {"body": "works templates preserved strings compilation contained expressions get compiled javascript functions browser nt interact uglifyjs templates compiled functions thus processed uglifyjs however specific error caused uglifyjs able handle syntax bug vue future add babel transpile support render functions", "d": "8/2016"}, {"body": "thanks explanation fixed moving class generation component method", "d": "8/2016"}, {"body": "dalphyx seems behaving expected directive set false alters component execution moment test component available", "d": "8/2016"}, {"body": "fact work anymore probably fixed fixed vdom patch errors components empty root eg root vif transition bug", "d": "8/2016"}, {"body": "linusborg using vif root node forbidden nt warn", "d": "8/2016"}, {"body": "already deleted comment entirely correct", "d": "8/2016"}, {"body": "great bug wasted hours change logic gt lt", "d": "8/2016"}, {"body": "issue", "d": "9/2017"}, {"body": "tomkaltz please open separate issue thanks", "d": "9/2017"}, {"body": "maybe issue", "d": "9/2017"}, {"body": "tomkaltz iva similar issue manage solve issue endup acheive going", "d": "6/2018"}, {"body": "need cart object total create another computed property value please next time make sure ask question forums gitter chat", "d": "8/2016"}, {"body": "ok thanks want current existing cart object data computed total value dont understand pass computed value cart object doesnt work", "d": "8/2016"}, {"body": "need cart object total create another computed property value", "d": "8/2016"}, {"body": "using use watcher instead raw dom listener listens input event whatever changed listener overwritten", "d": "8/2016"}, {"body": "sign github account make sure email github profile set public least first time", "d": "8/2016"}, {"body": "hi thanks reply tried login using github email says email confirmed nt received email vue forum github email set public already could help matter thanks denis karabaza notifications githubcom sign github account github make sure email github profile set public least first time receiving authored thread reply email directly view github mute thread", "d": "8/2016"}, {"body": "setting github email public nt enough tried changing forum email check", "d": "8/2016"}, {"body": "hi thanks reply seems way find email setting forum since logged using github email miss something image \u5185\u5d4c\u56fe\u7247 thanks regards nicol\u00e1s mutis mesa notifications githubcom setting github email public nt enough tried changing forum email check receiving mentioned reply email directly view github mute thread", "d": "8/2016"}, {"body": "vue \u7248\u672c", "d": "8/2016"}, {"body": "\u5ffd\u7565", "d": "8/2016"}, {"body": "confirm example working vue working best", "d": "8/2016"}, {"body": "wontfix consider breaking change example also fixed supposed work reason using vnode multiple times render tree something supported vdom patching algorithm put another way slot rendered template hand would want render exact thing multiple times cases want render list things using different data way pass data slot content use case makes sense see trying build options component better way render list child components parent scope", "d": "8/2016"}, {"body": "talking shorthand deprecated use instead use computed property way", "d": "8/2016"}, {"body": "phanan apply filter vhtml tried things nt work expected", "d": "8/2016"}, {"body": "use computed property example way please use forum gitter questions like", "d": "8/2016"}, {"body": "bug component option function returning object using minified vue ca nt warn", "d": "8/2016"}, {"body": "thank much", "d": "8/2016"}, {"body": "ca nt trigger transition directly mutating dom works transition triggered insertionremoval vnodes state change", "d": "8/2016"}, {"body": "hi thanosalexander please make sure follow issue reporting guideline issue list accepts bug reports feature requests use gitter chat room forum ask question thanks", "d": "8/2016"}, {"body": "looked issues fixed using vpre directive", "d": "8/2016"}, {"body": "using syntax browser nt support make sure stick supported features template expressions transpiled", "d": "8/2016"}, {"body": "supposed somehow thought templates transpiled realising ill assumption thanks", "d": "8/2016"}, {"body": "nt work release edit ok looks like works lazy modifier issue triggers change event", "d": "8/2016"}, {"body": "thanks sqal pointer", "d": "8/2016"}, {"body": "first example setting local variable even changing object", "d": "8/2016"}, {"body": "use vmodel directive create twoway data bindings form input textarea elements myinput component form input data passed child components using props", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "\u6211\u4e5f\u9047\u5230\u8fc7\u7c7b\u4f3c\u7684\u95ee\u9898 amaze\u7684select\u662f\u6539\u53d8\u503c\u540e\u89e6\u53d1change\u4e8b\u4ef6 \u4f46\u662f\u6211\u7ed9vmodel\u52a0\u4e0alazy\u540evmodel\u8fd8\u662f\u6ca1\u529e\u6cd5\u76d1\u542c\u5230\u6539\u53d8\u540e\u7684\u503c", "d": "2/2017"}, {"body": "hyiso \u662f", "d": "8/2016"}, {"body": "hyiso", "d": "8/2016"}, {"body": "\u89c9\u5f97\u662f\u4f60 js", "d": "8/2016"}, {"body": "hanai \u4e0d\u8981 \u89c9\u5f97 \u5728\u7ebf\u8bd5", "d": "8/2016"}, {"body": "\u8fd9\u4e0d\u662f bug \u53ea\u662f\u8ba9 input \u6807\u7b7e\u83b7\u5f97 test \u83b7\u5f97\u503c issue \u662f\u63d0 bug \u548c feature \u7684\u5730\u65b9 gitter \u91cc", "d": "8/2016"}, {"body": "reason different functions vue makes array reactive modifies function vue notified array changed use modify array vue notiifed use vue notified source vuejs guide", "d": "8/2016"}, {"body": "wontfix explained seems particular reason use call instead direct splice", "d": "8/2016"}, {"body": "prograjkamal thanks reply encounter problem use lodash function lodash use function base module new javascript could recommend javascript utils library working vue want find library manipulating collections thanks", "d": "8/2016"}, {"body": "pzxbc vue also adds remove method array use one instead lodash version", "d": "8/2016"}, {"body": "prograjkamal tip remove removed avoid using plan upgrade", "d": "8/2016"}, {"body": "fnlctrl thanks nt realize", "d": "8/2016"}, {"body": "hit issue using lodash vuejs using function reactive array nt invoke watchers see", "d": "4/2017"}, {"body": "hello toilal hit problem lodash function using vuejs another workaround could use replacing array method lodash function mutate array", "d": "7/2017"}, {"body": "\u662f\u7528\u6765\u62a5 bug bug issue", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "miljanaleksic fyi implemented support decided revert point wrapping direct node manipulated use inside component becomes indirect imo ends harder reason two options use case use parent scope use inside child component case also allow user pass props customize transition", "d": "8/2016"}, {"body": "playing around changes introduced new bugs difficult confirm plus process chance experiment different configurations keeping transitions direct gives full power overall process complex components could necessary totally agree decision thanks letting know", "d": "8/2016"}, {"body": "hard time understanding nt allow transitions observe root element components determining transition applied making increasingly difficult write dry code components responsible visibility transition picking placing transition inside component work case want single instance collection components displayed simplified representation code looks like group window components share single column window responsible visible state like said making difficult control windows using transition ca nt take advantage transition amazing mode feature html html understand really matter opinion structure code maybe rare case suggestions would appreciated feel least option transition element render transitions based root element components assume always vshow components assuming visibility always controlled component transition based elements exist sorry bit rant continue explore solutions thanks", "d": "10/2017"}, {"body": "property exist warning using chromeffedge added warning event name", "d": "8/2016"}, {"body": "using chrome originally getting exception thrown warnings messages recall correctly think seen message property trying various things normally get exception thrown thanks change", "d": "8/2016"}, {"body": "hi please follow issue reporting guidelines make sure ask questions forums gitter chat keep questions issues smile question handle reset event like hope helps", "d": "8/2016"}, {"body": "konw way handle reset event auto rest", "d": "8/2016"}, {"body": "write directive listens event finds triggers amp every input element inside form", "d": "8/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "8/2016"}, {"body": "\u662f\u7528\u6765\u62a5 bug bug issue", "d": "8/2016"}, {"body": "", "d": "4/2017"}, {"body": "shengxiaoya", "d": "4/2017"}, {"body": "\u5982 \u6211\u9700\u8981\u62bd\u53d6this slotsdefault\u4e2d\u7684\u4ee3\u7801\u5185\u5bb9", "d": "4/2017"}, {"body": "shengxiaoya", "d": "4/2017"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "8/2016"}, {"body": "hedgehogking tried reproduce luck vue issue vuetouch open issue nt binding click touchend", "d": "8/2016"}, {"body": "special situation click next box next box items show mouse click item right mouse english poor forgive \u539f\u59cb\u90ae\u4ef6 \u53d1\u4ef6\u4eba eduardo san martin morotenotifications githubcom \u6536\u4ef6\u4eba vuejsvuevue noreplygithubcom \u6284\u9001 qqcom mentionmention noreplygithubcom \u5468\u4e09 \u4e3b\u9898 vuejsvue touchend trigger twice tap event invuetouch hedgehogking tried reproduce luck vue issue vuetouch open issue nt binding click touchend receiving mentioned reply email directly view github mute thread", "d": "8/2016"}, {"body": "may looking", "d": "8/2016"}, {"body": "crazy may slowly event trigger twice position label input \u539f\u59cb\u90ae\u4ef6 \u53d1\u4ef6\u4eba eduardo san martin morotenotifications githubcom \u6536\u4ef6\u4eba vuejsvuevue noreplygithubcom \u6284\u9001 qqcom mentionmention noreplygithubcom \u5468\u56db \u4e3b\u9898 vuejsvue touchend trigger twice tap event invuetouch may looking eventstoppropagation receiving mentioned reply email directly view github mute thread", "d": "8/2016"}, {"body": "hedgehogking create thread forums people likely look question forums closed issue", "d": "8/2016"}, {"body": "ok thanks", "d": "8/2016"}, {"body": "vue instance methods wrapped point original spy assign spy variable asserting", "d": "8/2016"}, {"body": "hi thanks answer tried way u suggested still got error", "d": "8/2016"}, {"body": "interesting use case attribute nt work well multiple conditional nodes adjusted use componentbased api similar next release", "d": "8/2016"}, {"body": "expected behavior changed identity array mutated watcher triggered equivalent rerender dom nt get touched", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "jsfiddle \u67e5\u770b\u5b8c\u6574\u91cd\u73b0", "d": "8/2016"}, {"body": "opacity opacity \u4f1a\u4e00\u76f4\u7b49\u5f85 opacity \u7684 transitionend", "d": "8/2016"}, {"body": "agree could useful however probably better suited optional helper package likely package includes common vnode helpers included shipping default could waste majority users still using templates", "d": "8/2016"}, {"body": "would love helpers something like already", "d": "7/2017"}, {"body": "thought helper package like one exist", "d": "10/2017"}, {"body": "yeah im need thats helper", "d": "1/2018"}, {"body": "added yet", "d": "9/2018"}, {"body": "behavior change latest behavior fixed behavior follows simple rule static means class always want programmatically control presence nt static class first place", "d": "8/2016"}, {"body": "thanks clear reply behavior correct beautiful project worked btw thought could add test since changed", "d": "8/2016"}, {"body": "nothing vue", "d": "8/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "issue question asked gitter forum via issue even prefer chinese read issue reporting guidelines", "d": "8/2016"}, {"body": "really nt think makes sense vue template scoping lexical similar javascript works components imported used benefits saving import statements end user nt seem like reasonable tradeoff convenience vs correctness", "d": "8/2016"}, {"body": "afraid issue description fiddle still hard understand please try narrow reproduction provide clearer description exactly expected", "d": "8/2016"}, {"body": "hi see periodprice selects ie shows shown example variables available use like firefox browsers", "d": "8/2016"}, {"body": "mewejo issue vuejs believe attempting remove tags selectoption polymer hashad similar issue", "d": "8/2016"}, {"body": "mewejo sample working minimal amount refactoring", "d": "8/2016"}, {"body": "imo meant work way purpose initialize data hence longer used initialization", "d": "8/2016"}, {"body": "prograjkamal said access properties object vue nt watch", "d": "8/2016"}, {"body": "thought two way databinding work elements component component instantiated via code phanan maybe named key updated fiddle make sense", "d": "8/2016"}, {"body": "think bug expected behaviour try explain bear object reactive changes object applied reactively replace entire object initialize component props propsdata opposed template expression vue parse dependency tracking hooks like computed properties track object came vue see object passed propsdata came applies example", "d": "8/2016"}, {"body": "additional found another bug dont set tag component programmer report issue uncaught typeerror read property tagname null blank template component header footer javascript export default added tag template issue disappear bug vue", "d": "8/2016"}, {"body": "export syntax incorrect parentheses nt webpack errors terminal btw since vue issue ask kind questions official forum gitter stackoverflow", "d": "8/2016"}, {"body": "sqal javascript todotext x export default data function return newtodo todos text add todos methods addtodo function var text thisnewtodotrim text thistodospush text text thisnewtodo removetodo function index thistodossplice index removed write script customer components also dont thing console error", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "import todo componentstodovue consolelog todo see import looks like vue component maybe issue vueloader", "d": "8/2016"}, {"body": "sqal sir right true vue component check vueloader dont set vueloader match file setting javascript moduleexports entry srcmainjs output path dirname static filename buildjs", "d": "8/2016"}, {"body": "version vue amp vueloader using oh move script tag buildjs closing tag probably app nt rendering", "d": "8/2016"}, {"body": "sqal vueloader yes move end page successful problem must move end page", "d": "8/2016"}, {"body": "becouse vue nt wait dom finish loading nt listen domcontentloaded event put script app anything else dom completely loaded yet vue ca nt find required components bad explaining things hope understand though p", "d": "8/2016"}, {"body": "sqal great understand", "d": "8/2016"}, {"body": "seems question nt really vue using webpack general stack overflow would appropriate place ask help also likely get timely reply", "d": "8/2016"}, {"body": "issue modal window nt know wrong vuejs version steps reproduce use vueloader modalvue javascript export default mounted documentgetelementbyid app appendchild el javascript text show modal import modal uimodal export default data function return showmodal false components modal expected click close button close modal window actually happening console shows error", "d": "12/2016"}, {"body": "moonlik please follow issue reporting guidelines provide live reproduction jsfiddle codepen etc open separate issue thanks", "d": "12/2016"}, {"body": "fnlctrl ok sorry", "d": "12/2016"}, {"body": "moonlik issue moved component call top template", "d": "12/2016"}, {"body": "problem storejs javascript const state forms const mutations addform state newform stateformspush newform const actions listform context gt vue gt respbody data gt const form id dataid data datadata html datahtml contextcommit addform form componentvue javascript export default created storedispatch listform computed forms return storestateeasyformsforms domexception failed execute insertbefore node node new node inserted child node solve problem", "d": "12/2016"}, {"body": "please dont comment old closed issues original issue fixed problem bug likely thing either ask help forum open new issue proper bug report interactive reproduction", "d": "12/2016"}, {"body": "please ask questions forum gitter specific", "d": "8/2016"}, {"body": "vmodel computed works using incorrectly closing please redirect question gitter forum", "d": "8/2016"}, {"body": "yeah know large objects iframe ca nt set model directly iframe nt loaded yet hmm ca nt explain details iframe dynamic element added new element new properties input handle elements", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "\u539f\u6765\u662f\u8fd9\u6837\u8c22\u4e86", "d": "8/2016"}, {"body": "quick side note globally register component either something funny redundant", "d": "8/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "8/2016"}, {"body": "dom", "d": "8/2016"}, {"body": "\u800c\u4e14vue\u80fd\u76d1\u542c \u5230", "d": "8/2016"}, {"body": "\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u5f00 issue bug", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "find another question demo change updated dom nt update", "d": "8/2016"}, {"body": "event registered external bus need tear gets repetitive write mixin automate", "d": "8/2016"}, {"body": "process tearing nt able find docs", "d": "8/2016"}, {"body": "vm", "d": "8/2016"}, {"body": "moved", "d": "8/2016"}, {"body": "necessary", "d": "8/2016"}, {"body": "fyi renderer assumes encoding encodes entities may interfere html parsing encoding special chars add extra cost ssr even needed need encode special chars write transform stream pipe response sending back browser", "d": "8/2016"}, {"body": "use ssr html page source code wouldt show chinese ok thanks", "d": "8/2016"}, {"body": "using jsx babel plugin make sure upgrade", "d": "8/2016"}, {"body": "error message example using transition jsx", "d": "8/2016"}, {"body": "said make sure use", "d": "8/2016"}, {"body": "course upgraded removed reinstalled dev dependencies", "d": "8/2016"}, {"body": "afraid ca nt reproduce problem sat aug jounqin notifications githubcom wrote course upgraded removed reinstalled dev dependencies receiving modified openclose state reply email directly view github mute thread", "d": "8/2016"}, {"body": "please ensure jsfiddle link working", "d": "8/2016"}, {"body": "please ask answer issues guide jsifiddle codepen etc ask question way nt answer question see contributing thanks", "d": "8/2016"}, {"body": "related vue answer question add objectassign polyfill page many ways eg using webpack install polyfill via npm using babel use transformruntime plugin using bundler use", "d": "8/2016"}, {"body": "nothing vue use polyfill", "d": "8/2016"}, {"body": "hi please make sure ask question forums gitter chat javascript objects passed reference shares object instead create new object using like first example", "d": "8/2016"}, {"body": "fixed related commits", "d": "8/2016"}, {"body": "sounds good pr would appreciated", "d": "8/2016"}, {"body": "hello interested resolving issue marked progress", "d": "2/2017"}, {"body": "enough say", "d": "2/2017"}, {"body": "posva cool thanks", "d": "2/2017"}, {"body": "still working want look", "d": "12/2017"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "hi issue resolved", "d": "9/2016"}, {"body": "since author closed issue one day opening look assuming fixed issue similar problem please open another issue think really bug please provide reproduction ask forumvuejsorg think may mistake part need helpsupport", "d": "9/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "8/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "8/2016"}, {"body": "yes feeling whether vue add similar data drive attempt complete hook function solve still going put issue community determine thank answering", "d": "8/2016"}, {"body": "ideally depend condition children thunk current behavior confusing though see improve", "d": "8/2016"}, {"body": "particular use case hoc component rendering component layout component experimenting seems issues happens hoc functional version works version nt", "d": "8/2016"}, {"body": "fixed related commits note next release longer necessary supported pass component children thunks directly pass children vnodes", "d": "8/2016"}, {"body": "wrong syntax use vhtml html", "d": "8/2016"}, {"body": "ah thanks", "d": "8/2016"}, {"body": "working jsx", "d": "8/2016"}, {"body": "voronianski nt use", "d": "8/2016"}, {"body": "hi please make sure ask question forums gitter chat closing usage question doubt messages variable exist define vue instance using appalert component", "d": "8/2016"}, {"body": "reproduce works", "d": "8/2016"}, {"body": "yes works please add thismessagepush object ready hook appvue see errors", "d": "8/2016"}, {"body": "yiyunzhi works browser", "d": "8/2016"}, {"body": "vue bug safari seems treat inside form submit button default submits form reloads page", "d": "8/2016"}, {"body": "yes add von submitprevent form stays visible", "d": "8/2016"}, {"body": "without type button considered submit button default browser", "d": "8/2016"}, {"body": "vbind instead works also vbind class classes works since vbind class becomes class", "d": "8/2016"}, {"body": "work itis supported know shorthand bug", "d": "8/2016"}, {"body": "element attribute vbind binding value like binding datasomething thought possible", "d": "8/2016"}, {"body": "explained iagafonov bug template syntax error op part therefore closing", "d": "8/2016"}, {"body": "support binding object original fiddle using intended", "d": "8/2016"}, {"body": "oopps second time witin hours found something new vue feature thought knew everything even clearly documented api docs bad", "d": "8/2016"}, {"body": "appears fixed", "d": "9/2017"}, {"body": "issue branch", "d": "9/2017"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "provide jsfiddle issue please template outside", "d": "8/2016"}, {"body": "also takes one argument object invalid syntax assume error example code", "d": "8/2016"}, {"body": "srroy think mistake trying run simple example jsfiddle look like real project ist running prefectly testing upgrade project vue vuex thanks guys", "d": "8/2016"}, {"body": "hello cnweibo thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "8/2016"}, {"body": "linusborg created little complex fiddle demonstrate concept vif second time truthy vif compile customized component please check", "d": "8/2016"}, {"body": "continues forums", "d": "8/2016"}, {"body": "hello nothing related vue given please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "8/2016"}, {"body": "strange", "d": "8/2016"}, {"body": "note functional component first instead renders children", "d": "8/2016"}, {"body": "expected reusing vnodes render tree", "d": "8/2016"}, {"body": "emit warning attempted least within array children", "d": "8/2016"}, {"body": "chrisvfritz nice would add quite runtime cost sure worth good mention render function guide though", "d": "8/2016"}, {"body": "way issues like receive satisfactory answer", "d": "8/2016"}, {"body": "works add think problem vue tracks items index default filtereditems change vue uses old value corresponding specify vue uses old values corresponding", "d": "8/2016"}, {"body": "thanks tried nt works right usage fault", "d": "8/2016"}, {"body": "hechentao recently started learning vuejs strongly suggest use place shorthands", "d": "8/2016"}, {"body": "thank advice use vuejs several months great", "d": "8/2016"}, {"body": "property default value warning nt accidentally set property nt exist work fine still prefer using since works objects objects also deprecated lastly take support questions either forum gitter future", "d": "8/2016"}, {"body": "tutorial says however ways add property make reactive instance created", "d": "8/2016"}, {"body": "well warning message error wo nt show production warning explains better properly initialize data setting nonexistent path absolute vm instance consider preinitializing property data option reliable reactivity better performance set works better preinitialize data vue tells app work either way", "d": "8/2016"}, {"body": "ok see warning message use yellow color printed consolewarn", "d": "8/2016"}, {"body": "way around work use string templates seems custom elements using using shadow dom bad idea mix vue", "d": "8/2016"}, {"body": "similarly error could useful showed component trying reference element thanks awesome project", "d": "8/2016"}, {"body": "step similar error using objects props element inside object bound template element missing error thrown javascript error browser ends code executions page may rendered correctly great props type object checked existence child members object used template", "d": "8/2016"}, {"body": "want check code see patch seems error checked render function right check vue template compiler thanks", "d": "8/2016"}, {"body": "also issue accessing sub properties nonexisting properties eg options yet defined imho would better follow angular way resolve string interpolations errors empty string log error nonrelease mode", "d": "12/2016"}, {"body": "guys gitter join receive support getting issue assigned worked first timer oss", "d": "8/2017"}, {"body": "dmcfaddengalway discourage starting feature feature request pretty old forum discord server gitter", "d": "8/2017"}, {"body": "number modifier use vmodelnumber instead", "d": "8/2016"}, {"body": "nt think vue responsibility also computed property may get used nontemplate scenarios instead detect unused code coverage tool", "d": "8/2016"}, {"body": "deprecated new version use instead", "d": "8/2016"}, {"body": "note api supports deleting vm keys also prefer vuedelete", "d": "8/2016"}, {"body": "hello sirzxj thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "8/2016"}, {"body": "wow fast thank evan", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "\u521a\u60f3\u4e86\u4e00\u4e0b", "d": "8/2016"}, {"body": "input", "d": "8/2016"}, {"body": "\u6bd4\u5982 \u5982\u679c\u6211\u80fd\u901a\u8fc7input\u83b7\u53d6\u5230 test \u548c", "d": "8/2016"}, {"body": "\u7528 watcher", "d": "8/2016"}, {"body": "", "d": "8/2016"}, {"body": "input", "d": "4/2017"}, {"body": "mean bind prop item dynamic property binding supported right enough item properly swapped new item object inside items array like", "d": "8/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question use use static prop name try syntax computed field names would work environment", "d": "8/2016"}, {"body": "vue problem installed plugin", "d": "7/2016"}, {"body": "sorry webpack problem", "d": "7/2016"}, {"body": "would say behaviour intentional rightly may seem developer practical prevent errors invalid types overriding default willcan lead stange behaviour users app show errors somehow value x simply changed etc possibility responsibility handle error component explicitly oops something went wrong simple make sense", "d": "8/2016"}, {"body": "feels like denoted docs really error swapped back debugging version error shown console invalid props thanks", "d": "8/2016"}, {"body": "related vue visit learn css please", "d": "7/2016"}, {"body": "first issue vue second inlinestyle", "d": "7/2016"}, {"body": "see thank anyway jounqin", "d": "7/2016"}, {"body": "need enable debug mode first", "d": "7/2016"}, {"body": "thanks fnlctrl", "d": "7/2016"}, {"body": "enable debug vueconfigdebug true vuecomponent child template msg props msg number var vm new vue el test console errors warnings", "d": "7/2016"}, {"body": "strangerru case provide jsfiddle reproduction please", "d": "7/2016"}, {"body": "change library path vue starts work", "d": "7/2016"}, {"body": "remember use development version non min repro warning would helpful already exists vue nt vue let give look", "d": "7/2016"}, {"body": "change library path vue starts work remember use development version non min repro nt always work seen jsfiddle google chrome", "d": "7/2016"}, {"body": "mean uncomment line works otherwise warning shows issue", "d": "7/2016"}, {"body": "oh sorry yes works thanks", "d": "7/2016"}, {"body": "please open issue corresponding vuecli template instead", "d": "7/2016"}, {"body": "transition system reworked dedicated builtin components hooks custom events elements something similar emit custom events element transition applied note listen events element defined closer implements root element component transitioned example first case wo nt able access instance directly event handler would defined parent scope second case wo nt able listen leave events time fired instance already undergoes destruction listener already dismantled also note enabled router option cover use case", "d": "7/2016"}, {"body": "looks awesome thanks", "d": "7/2016"}, {"body": "nevermind til use javascript hooks css transitions nt actually tested case pretty sure would fix", "d": "7/2016"}, {"body": "interesting question think clickrelated keydown triggers blur input even click event fired tricky", "d": "7/2016"}, {"body": "standard behavior browser might want listen event instead proper way would use complicated logic give button moment disappear input blur force button visible button focused", "d": "7/2016"}, {"body": "event enough think thank much simplesmiler", "d": "7/2016"}, {"body": "hi zce guess refer fact switching cities wrong sub selected expected behaviour using trackby index docs warn solution nt use trackby nothing bad oyu nt render hundrets items b trackby actual unique poperty case name", "d": "7/2016"}, {"body": "linusborg thanks", "d": "7/2016"}, {"body": "pass raw data returned component includes event listeners listeners registered returned component", "d": "7/2016"}, {"body": "awesome thanks", "d": "7/2016"}, {"body": "thanks reporting quite lot going example eg state change hook component slot etc work isolate specifically combination causing problem seeing", "d": "8/2016"}, {"body": "chrisvfritz two things combination causing problem component slot ios safari state change nt reactive dom", "d": "8/2016"}, {"body": "seems problem", "d": "9/2016"}, {"body": "still problem tested ios", "d": "11/2016"}, {"body": "chrisvfritz meet problem simplify", "d": "6/2017"}, {"body": "issue closed follow guideline encourage ask usage questions forum gitter", "d": "7/2016"}, {"body": "first nt solve problems still need bundling second terribly inefficient asset transpilation runtime need send transpilers client compile everything simply feasible want decent ux thing browser transpiling systemjsjspm although vue plugin offers much less optimal development experience webpack counterparts recommendation use webpack", "d": "7/2016"}, {"body": "hello thank interest project however certainly bug component created parent user code parent added automatically issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "7/2016"}, {"body": "linusborg thanks feedback component created parent user code parent added automatically ok documentation says set parentchild relationship setting parent property unfortunately bug either vuejs upgrade vuejs documentation nt true change parent setup new parentchild relationship let work make clear thanks", "d": "7/2016"}, {"body": "think bug need provide reproduction", "d": "7/2016"}, {"body": "linusborg created jsbin demonstrate wrong normal component dynamic mounted component clicking button normal component receive broadcasted message root vue instance vm parent points root vue instance dynamic mounted component receive broadcasted message root vue instance vm parent undefined setting explicitly child parent rootvueinstance help please check whether vuejs bug vuejs documentation bug something wrong thanks", "d": "7/2016"}, {"body": "hi vuejs team look fiddle check whether issue something wrong thanks", "d": "7/2016"}, {"body": "nt breaking change introduced beta onwards reckon documentation nt updated yet", "d": "7/2016"}, {"body": "rekateka see thanks", "d": "7/2016"}, {"body": "hello thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "7/2016"}, {"body": "ref", "d": "8/2016"}, {"body": "read docs vueset", "d": "7/2016"}, {"body": "thanks using set method ok", "d": "7/2016"}, {"body": "hi luckymore think trying dynamically render select options select list defaulting please select see example regarding nt setted automatically model source truth view select list defaults value specify using model nt default value view", "d": "7/2016"}, {"body": "hello luckymore thank interest project version longer supported converning bugs long enough abouot release furthermore usagesupport question encourage ask forum gitter", "d": "7/2016"}, {"body": "dpweberza thx", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "please reopen issue docs repo wwwgithubcomvuejsvuejsorg", "d": "7/2016"}, {"body": "thank linusborg", "d": "7/2016"}, {"body": "children must arrays eg nonarray shorthand works strings", "d": "7/2016"}, {"body": "dude awesome correct laracon still time respond issue requests thanks today second day vue totes lovin", "d": "7/2016"}, {"body": "userland issue also webpack", "d": "7/2016"}, {"body": "nt work argument callback still like test code", "d": "7/2016"}, {"body": "need use avoid module syntax transpiled currently still issues webpack showed eventually work", "d": "7/2016"}, {"body": "actually seems even webpack preset still returns object guess ed modules webpack", "d": "7/2016"}, {"body": "yep still nt work makes import asynccomponent becoming something foolish", "d": "7/2016"}, {"body": "updated works js component resolve gt systemimport app gt resolve mdefault component resolve gt require app gt resolve mdefault", "d": "7/2016"}, {"body": "difference previous solution still must resolve point could provide solution prevent anyway maybe code like javascript import vuerouter vuerouter const resolveasynccomponent resolve gt gt mesmodule amp amp objectkeys length amp amp mdefault resolve export default new vuerouter mode hash routes path component resolve gt require app resolveasynccomponent resolve otherrouteswithasynccomponent", "d": "7/2016"}, {"body": "buildsystem specific easy enough userland single function nt think needs vue", "d": "7/2016"}, {"body": "intentional parsing string quite costly use custom helpers wrap function achieve eg", "d": "7/2016"}, {"body": "even answered evan closed still want emmet basic syntax quite helpful", "d": "8/2017"}, {"body": "hi please make sure ask question forums gitter chat depens usecase backend server render backends like ruby rails better use inlinetemplates spa nodejs use files prototyping inline tags fine top define components globally needed vueextend used nt file time wo nt even need use", "d": "7/2016"}, {"body": "baiang understand vue rely global scoped names template compilation step doest know runtime component data properties redefine global ones define method component definition use like use template simply", "d": "7/2016"}, {"body": "\u4f7f\u7528", "d": "7/2016"}, {"body": "crossjs current", "d": "7/2016"}, {"body": "cuiziwei \u5728 template \u91cc\u4f7f\u7528", "d": "7/2016"}, {"body": "crossjs", "d": "7/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "7/2016"}, {"body": "functional components auto attribute transclusion get exactly returned render function pass raw data", "d": "7/2016"}, {"body": "hello thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "7/2016"}, {"body": "everything works fine pass object way", "d": "7/2016"}, {"body": "doh idiot much solution forgotten obvious answer closing", "d": "7/2016"}, {"body": "actually issue laravel php generating json objectmodelclass get quoted keys thus compiler vue break property passing", "d": "10/2016"}, {"body": "need pass json string params single quotes important generated json double quotes", "d": "10/2016"}, {"body": "well course using still working properly", "d": "10/2016"}, {"body": "send problem vuejs forum", "d": "10/2016"}, {"body": "created failing test try look source find comes", "d": "8/2016"}, {"body": "working fix first idea solution pretty dirty see way around need edit compilenode method add new condition check find text childnode containing opening delimiter encounter case every node next text childnode containing closing delimiter treated text", "d": "8/2016"}, {"body": "hi entirely convinced considered bug according docs mustache tag replaced value msg property corresponding data object example data object able get error message modified example hello world docs state triple curly braces ultimately compiled vhtml directive see console following warning happening vue looking properties data object find working example", "d": "9/2016"}, {"body": "bilie example nt quite right html hello world actually compiles html note single quotes see version works fine interpolated version fails indeed bug", "d": "9/2016"}, {"body": "chrisvfritz since vue utilizes objectdefineproperty convert instance data observed object inline expression without instance data would compiled bug suspect anyone would inline expression interpolation like good reason", "d": "1/2017"}, {"body": "chrisvfritz agree issue bug like share findings initial debugging sessions version seems handle double triple curly braces used double curly braces testing vue support triple curly braces vue called vendor function parse entire template whole string html code html hello world html start tag text parsed function parsetext plain text start tag text hello end tag text world parsed parsetext plain text end tag html hello world html start tag text hello world function parsetext found vue construct pattern n g end tag html hello world html hello world", "d": "2/2017"}, {"body": "thanks sharing research html interpolation indeed removed", "d": "2/2017"}, {"body": "think bug rather html quirk first see demo note raw encoded code effect used attribute different effect used body fact works html quirk html tolerates even promotes nonencoded attributes written properly would maps works exactly would expect", "d": "2/2017"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "supports deleting root level keys use instead", "d": "7/2016"}, {"body": "hey thanks realized instead thanks close one hope helpful others", "d": "7/2016"}, {"body": "reproduce working warning nt cause behavior difference unlikely vue issue", "d": "7/2016"}, {"body": "needs first parse string document fragment cache clone wontfix workaround use", "d": "7/2016"}, {"body": "structural directives reserved create binding directives instead create higherorder component controls children purpose probably want wait docs work virtual dom wip docs", "d": "7/2016"}, {"body": "bug need give component unique key avoid otherwise way vue know vue able track object identity adding hidden markers objects need explicitly mark using similar fixed", "d": "7/2016"}, {"body": "reproduce please provide reproduction", "d": "7/2016"}, {"body": "richardwyke try deleting nodemodules folder installing npm dependencies similar issues solved like solution works could wise highlight release notes others", "d": "7/2016"}, {"body": "thanks miljanaleksic sorted sorry false alarm", "d": "7/2016"}, {"body": "realize reactive data source using computed properties work expected instead generate child components source data array base computed properties array", "d": "7/2016"}, {"body": "problem jsbin works fine jsfiddle example", "d": "7/2016"}, {"body": "yup locally well bug yay", "d": "7/2016"}, {"body": "removing folder reinstalling dependencies everything works fine", "d": "7/2016"}, {"body": "although directly related fixed", "d": "7/2016"}, {"body": "hi provide editable version better could nt find way debug wechat browser hint", "d": "7/2016"}, {"body": "wechat browser lives inside im called wechat tedious debug use something like chrome devtools one must install adware qq browser pc use consoles inspectors inside", "d": "7/2016"}, {"body": "thanks info fnlctrl", "d": "7/2016"}, {"body": "\u4e0d\u8fc7\u8fd9\u4e2a\u95ee\u9898\u4f60\u53ef\u4ee5\u8fd9\u6837\u6765\u89e3\u51b3 \u901a\u8fc7watch vue\u53cc\u5411\u7ed1\u5b9a\u7ed3\u675f\u4e4b\u540e\u4f1a\u89e6\u53d1watch watch value function n nlength gt n nsubstr var self nexttick function selfvalue n", "d": "7/2016"}, {"body": "use maxlength", "d": "7/2016"}, {"body": "crossjs", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "let use english discuss discuss english contribute vuejs thanks hero", "d": "7/2016"}, {"body": "look look", "d": "8/2016"}, {"body": "found issue change keyup keydown also fail use blur works", "d": "8/2016"}, {"body": "stonelee provide editable version also nonadware version browser wo nt intentionally install adware debug", "d": "8/2016"}, {"body": "posva changing link makes editable tested wechat browseralipay browser android could nt reproduce bug guess one old ios safari issues worth mentioning code mutating vmodel bounded value inside event handler opinion reasonable usage", "d": "8/2016"}, {"body": "fnlctrl thanks tried nt search great news could test nt seem right either stonelee think issue deal order events fired different browsers value updated correctly browser seems updating input see whole input value actually need set input value inside function use agileago stated therefore closing please tell still encounter issue", "d": "8/2016"}, {"body": "guarantees anything nonreleased branch uses exports use use", "d": "7/2016"}, {"body": "spam please", "d": "7/2016"}, {"body": "want span", "d": "7/2016"}, {"body": "yeah go", "d": "7/2016"}, {"body": "hi topcaho thanks filing issue unfortunately nt really understand core problem expected behaviour build jsfiddle demonstrate problem maybe comparison", "d": "7/2016"}, {"body": "longer recommended create custom directives behaves like instead dispatch native dom events directive use listen template", "d": "7/2016"}, {"body": "ca nt nt test think remember object actions mentioned", "d": "7/2016"}, {"body": "nicolasparada sorry nt know thinking async functions get called call bad", "d": "7/2016"}, {"body": "nicolasparada btw notation shortand like", "d": "7/2016"}, {"body": "know ca nt use shorthand syntax together async", "d": "7/2016"}, {"body": "nicolasparada", "d": "7/2016"}, {"body": "use earlier actually works fine async functions running project", "d": "7/2016"}, {"body": "yeah sorry bad nt know thought", "d": "7/2016"}, {"body": "one nt computed", "d": "7/2016"}, {"body": "nicolasparada dont think possible implement asyncawait computed extremely hard track changes async functions ca nt predict function calls await changed", "d": "7/2016"}, {"body": "edited make clear issue checkboxes", "d": "7/2016"}, {"body": "awesome thanks", "d": "7/2016"}, {"body": "temporary workaround would surround directive", "d": "7/2016"}, {"body": "sirlancelot thanks work", "d": "7/2016"}, {"body": "duplicate allready fixed", "d": "7/2016"}, {"body": "far know added concurrently works added even setting true", "d": "7/2016"}, {"body": "venter element frame set starting styles never see dev tools eyes anyway works like seems confusing admin check", "d": "7/2016"}, {"body": "ah see misapplied thanks closing could useful document bit clearly reading vue features understood differently especially since mentioned works manner reactcsstransitiongroup example styling tutorial nt work behaviour", "d": "7/2016"}, {"body": "yunsuncn setting automatically generate classes use default makes lot sense imho want different class first appearance need specify see details", "d": "7/2016"}, {"body": "nt think necessary tedious type fine especially use arrow functions", "d": "7/2016"}, {"body": "vue update algorithm built upon assumption dom structure altered arbitrary party code unlikely code could work even additional guard added intention support willing dig code open pr review", "d": "7/2016"}, {"body": "going look mean time aware better way implementing functionality vue friendly manner would appreciate", "d": "7/2016"}, {"body": "javascript remove el dom param element el function remove el indoc el return false elparentnoderemovechild el added quick hack see cause issue seems resolved shall create pr", "d": "7/2016"}, {"body": "need information html ideally please provide reproduction", "d": "7/2016"}, {"body": "like fork", "d": "7/2016"}, {"body": "jsfiddle would better", "d": "7/2016"}, {"body": "posva ssr could hard repro jsfiddle fork fine take look time", "d": "7/2016"}, {"body": "must downloaded pokeman go", "d": "7/2016"}, {"body": "erbing like", "d": "7/2016"}, {"body": "similar problem occurs variable equal empty string", "d": "7/2016"}, {"body": "indeed overlooked sorry", "d": "7/2016"}, {"body": "fixed via", "d": "7/2016"}, {"body": "hi please make sure ask question forums gitter chat take look", "d": "7/2016"}, {"body": "hi please make sure ask question forums gitter chat provide information", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "\u662f\u7528\u6765\u62a5 bug bug issue", "d": "7/2016"}, {"body": "\u539f\u7406\u548c ng", "d": "7/2016"}, {"body": "\u662f\u7528\u6765\u62a5 bug bug issue", "d": "7/2016"}, {"body": "vue allow selfclosing tags like react wrong right works", "d": "7/2016"}, {"body": "linusborg however yet", "d": "7/2016"}, {"body": "oh tried get main vue instance slot component course return slots", "d": "7/2016"}, {"body": "added list tonight", "d": "7/2016"}, {"body": "leave evan", "d": "7/2016"}, {"body": "use vbind", "d": "7/2016"}, {"body": "repsacby thank", "d": "7/2016"}, {"body": "ucbrowser officially supported", "d": "7/2016"}, {"body": "scoped slots harder reason since compiled inside component visible cf variable main issue already way achieving behaviour components props concepts already exist vue moreover scoped slot possible vue pass components functions easily use render functions code snippet working nicely still use prefer using scopedslot syntax may consider using handle name modification share lib others benefit", "d": "7/2016"}, {"body": "makes sense release standalone plugin curiosity would idiomatic way achieve sort functionality vue", "d": "7/2016"}, {"body": "coming back asap fiddle illustrate", "d": "7/2016"}, {"body": "coming back example soon idea use render function use prop functions bind function call vm context", "d": "7/2016"}, {"body": "chrisvfritz helped one declare function vue object methods pass component obviously code would look much better jsx also need make sure available something", "d": "7/2016"}, {"body": "ping joshglendenning", "d": "7/2016"}, {"body": "joshglendenning recently shared workaround check", "d": "7/2016"}, {"body": "posva interesting thanks update convenient way use dom element template string instead using miljanaleksic take look thanks", "d": "7/2016"}, {"body": "also gist solution anyone interested", "d": "7/2016"}, {"body": "joshglendenning yes use jsx react", "d": "8/2016"}, {"body": "joshglendenning curious made plugin way compatible vue vueelementdirective deprecated making solution longer work", "d": "12/2016"}, {"body": "scoped slots exists vue need plugin", "d": "12/2016"}, {"body": "ah cool right", "d": "12/2016"}, {"body": "oh man amazing nt know added vue great work always vue", "d": "12/2016"}, {"body": "indeed possible already needs proper documentation inner architecture framework unfortunately currently highpriority focus eventually officially", "d": "7/2016"}, {"body": "thanks evan looking forward good know eventually able makes case really strong adopt vue organization regards best luck working towards release", "d": "7/2016"}, {"body": "first congratulations releasing vue evaluating vue last months especially works together haxe using nice macro able really get best worlds issue think boils changing way virtual dom translated interface dom looking code think need overwrite functions nodeops object createelement appendchild etc think best way really appreciate could take look understand really busy moment quick pointers enough us", "d": "10/2016"}, {"body": "remcohuijser probably create fork add directory alongside model platform implementation done", "d": "10/2016"}, {"body": "sounds like good plan tricky thing want use html dom interfaces alongside interface dom interfaces feel makes sense able pass nodehandler something creating new vue instance handler offers createelement function etc manipulates dom creating handler dom manipulation changed javascript data shared interface var data create vueinstance mount html element var new vue data data el htmlelement nodehandler new htmlhandler var new vue data data el htmlelement create html handler default create vue instance mount one elements var new vue data data el ourelement nodehandler new ourownhandler think", "d": "10/2016"}, {"body": "nt see reason listing explicit prop anyway impossible accessing raw component vnode data wait official documentation", "d": "7/2016"}, {"body": "\u5c24\u5927\u7684\u8fd9\u4e2a\u540c\u6784\u7a0b\u5e8f vuessrdemo", "d": "7/2016"}, {"body": "issue", "d": "7/2016"}, {"body": "likely velocity applies animation next frame fix adding hook sets", "d": "7/2016"}, {"body": "yup trick thanks apologize erroneous bug report", "d": "7/2016"}, {"body": "intended implement please see", "d": "7/2016"}, {"body": "kkszymanowski could create plugin save slots content expect seems quite specific feature", "d": "7/2016"}, {"body": "miljanaleksic feels like part core ktsn said intended implemented close wait patiently functionality thanks", "d": "7/2016"}, {"body": "also add", "d": "7/2016"}, {"body": "hello thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "7/2016"}, {"body": "looks like safari bug thought", "d": "7/2016"}, {"body": "e think looks like use cause", "d": "7/2016"}, {"body": "link removed demo please open look top right corner color fff sometime black", "d": "7/2016"}, {"body": "reproduced without vuejs looks like safari bug would avoid adding vif hide link receive data", "d": "7/2016"}, {"body": "vue \u548c os", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "lianer ios \u7684 \u88ab", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "hi bananatron thanks filing issue check resolve workaround would", "d": "7/2016"}, {"body": "reason nt work line regular expression used parse paths allow keys start dash figuring weither reason ie allowing makes parsing unreliable sth", "d": "7/2016"}, {"body": "valid javascript path using", "d": "7/2016"}, {"body": "vue object seems think setting index array sets index nan also view example believe", "d": "7/2016"}, {"body": "bananatron set object keys nonvalid identifiers javascript different", "d": "7/2016"}, {"body": "understand set properties believe line using notation nt work vue objects provide example set vue object key starts dash", "d": "7/2016"}, {"body": "use uses regular old javascript notation js nt make lot sense linusborg gave solution first reply", "d": "7/2016"}, {"body": "got thanks guy help", "d": "7/2016"}, {"body": "nt know anybody reading still related problem put property vue instance name like imagesrc quoted valid javascript key vue code reason vuejs nt bind remove dash works section docs kebabcase camelcase seems unrelated idea nt work", "d": "12/2016"}, {"body": "fabd vbind expects javascript expression ca nt use identifiers really want use use accessible templates", "d": "12/2016"}, {"body": "fnlctrl thank much looking kebab notation workaround last hours need docs think", "d": "6/2018"}, {"body": "fnlctrl thank people wondering object data looks like like", "d": "6/2018"}, {"body": "hi please make sure ask question forums gitter chat provide information", "d": "7/2016"}, {"body": "know use vue set vueset function sorry trouble", "d": "7/2016"}, {"body": "side note checked chrome even clicking toggle like crazy reproduce reported problem appears firefox", "d": "7/2016"}, {"body": "looks like firefox bug nt seem support absolute positioning inside container animation indeed messed firefox think making impossible vue listen css transition events", "d": "8/2016"}, {"body": "posva works though", "d": "8/2016"}, {"body": "true bug nt occur dunno helps", "d": "8/2016"}, {"body": "record happening transition referring adjacent empty text node debug false remove component debug true refers comment node somehow able remove component", "d": "8/2016"}, {"body": "fixed branch working project nt able upgrade yet known workaround setting implications", "d": "12/2016"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "7/2016"}, {"body": "think bug sure", "d": "7/2016"}, {"body": "make sure github email address public registering set back private received confirmation email", "d": "7/2016"}, {"body": "already still getting email", "d": "7/2016"}, {"body": "problem able create new topic", "d": "7/2016"}, {"body": "opsrj managed get confirmation email change email vue account setting github generated email registered forum nt get email get change active email", "d": "7/2016"}, {"body": "afaik ava support running tests browsers", "d": "7/2016"}, {"body": "function occured rendering loop rendering flow think render function functional component updating parent props bad practice vue mistake comment comments please tell us", "d": "7/2016"}, {"body": "kazupon sorry counter showing purposes nt realize affect rendering flow child component updated repro warning message equal previous", "d": "7/2016"}, {"body": "thanks found mistake function see detail", "d": "7/2016"}, {"body": "kazupon hmm contains raw attributes need pass function component property called tag props", "d": "7/2016"}, {"body": "okay case need pass props ctxprops h function", "d": "7/2016"}, {"body": "kazupon props meant tag attributes component properties sorry mistake provided repro works expected except warning extra render calls component properties applied tag attributes example need create node looks like component gets property passes function node attributes", "d": "7/2016"}, {"body": "somewhat expected vnode data fresh objects render added warning using observed objects vnode data get around simply shallow copy object sending", "d": "7/2016"}, {"body": "thanks", "d": "7/2016"}, {"body": "ca nt reproduce", "d": "7/2016"}, {"body": "\u7528", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "reproduce likely due outdated bower version make sure install latest", "d": "7/2016"}, {"body": "indeed thank pointing", "d": "7/2016"}, {"body": "temporary workaround bypass issue escaping backtick wo works items title one title two anyone investigating seems issue nt occur array contains single element", "d": "7/2016"}, {"body": "made change regular expression seems working fine however seemed like important regexp sure patch highlighted part red", "d": "7/2016"}, {"body": "skyronic regexp tool looks useful", "d": "7/2016"}, {"body": "linusborg used handy", "d": "7/2016"}, {"body": "skyronic thx use lot tests ruby lib works fine", "d": "9/2016"}, {"body": "neonpaul may interested know already possible equivalent acts like attribute also meantime accomplish want vueception", "d": "8/2016"}, {"body": "given released issue considered resolved", "d": "9/2016"}, {"body": "danielsamuels possibly still feature could added vue made migration easy trying may much demand", "d": "10/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines sure vue bug please provide minimal jsfiddle containing set reproducible steps lead behavior described thanks", "d": "7/2016"}, {"body": "issue", "d": "7/2016"}, {"body": "solve problem", "d": "7/2016"}, {"body": "fnlctrl thanks response dynamic component pattern meet requirement dynamically loaded template templatestr string data works template firstsublastsub component gap dynamic compile make alive firstsub component template data live reactive manner thanks found async component pattern bridge gap make dynamic loaded html live fnlctrl unfortunately know give props async component say yourcomponentsfromapi contains async component access someprop property within async component raised one stackoverflow specific question thanks", "d": "7/2016"}, {"body": "fnlctrl please see live fiddle", "d": "7/2016"}, {"body": "dynamic ajax loaded template arbitrary random tried extracting dynamic bits create static components asyncloaded webpack need pass props dynamically created component use propsdata", "d": "7/2016"}, {"body": "hello cnweibo issue usagesupport question issue tracker reserved exclusively bug reports feature requests seem know issue closed may continue forum thread linked op", "d": "7/2016"}, {"body": "fnlctrl right extract dynamic data template string work want way like save templatestr including variables database fetch whole throw data vuejs rendering propsdata seems valid dynamical component thanks", "d": "7/2016"}, {"body": "fnlctrl idea make webpack work use browersify unfortunately support feature mentioned asyncloaded", "d": "7/2016"}, {"body": "related issue feature request wrote resolve may help javascript import lodash import vue vue export default props name props value template created let props thisprops apply properties component data forown thisprops value key gt consoledebug key key propspush usage", "d": "7/2016"}, {"body": "terrydai thanks seems great idea try usage understand well field uiform mean would give little explain usage code thanks lot", "d": "7/2016"}, {"body": "cnweibo jade template using semanticui", "d": "7/2016"}, {"body": "terrydai found contribution great idea comments intention valuesync give small explain name props valuesync respectively full caught following proposal thanks", "d": "7/2016"}, {"body": "cnweibo need review docs definition", "d": "7/2016"}, {"body": "terrydai got defined jade", "d": "7/2016"}, {"body": "vue great also always keep use latest version production project everything work well except keepalive also try search keepalive infomation google issue fourm hope example demo show new keepalive work really useful thanks hard work", "d": "7/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "7/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "7/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "7/2016"}, {"body": "posted chat without response params validation feature", "d": "7/2016"}, {"body": "directive params deprecated unlikely get validation support", "d": "7/2016"}, {"body": "use forum vue js gitter question like", "d": "7/2016"}, {"body": "see created issue closing favor", "d": "7/2016"}, {"body": "well continued test found vue problem chrome firefox automatically render attributes lowercased initially vue read seems lowercased foreign attributes even though use still hope find solution ref", "d": "7/2016"}, {"body": "case wontfix use string precompiled templates wo nt problem", "d": "7/2016"}, {"body": "simonmysun workaround use kebabcase modifier eg", "d": "7/2016"}, {"body": "really appreciate prograjkamal great solved problem thank much read document", "d": "7/2016"}, {"body": "wrong", "d": "7/2016"}, {"body": "gets rendered output nt code comments think comment better", "d": "7/2016"}, {"body": "production always use minifieruglifier", "d": "7/2016"}, {"body": "guess right", "d": "7/2016"}, {"body": "production code minify templates included vueify vueloader comments stripped comments ignored default", "d": "7/2016"}, {"body": "record using javascript multilines works purpose", "d": "7/2016"}, {"body": "going setting keep comments would nice setting like ractive", "d": "10/2016"}, {"body": "use please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "7/2016"}, {"body": "nt think vue responsibility easily write custom directive emit change event use alongside", "d": "7/2016"}, {"body": "makes sense maybe would useful lot people directive included default", "d": "7/2016"}, {"body": "disagree convenient logically separating html events handled html elements vue events handled vue components makes things much straight forward reason without muddying together", "d": "7/2016"}, {"body": "would still separated directive", "d": "7/2016"}, {"body": "hello giuseppeannunziata thank filing issue however bug due way vue particular works arrays duplicate entries lead odd behaviour like observing tracking index vue even warns docs say mode also handle duplicate values source array use", "d": "7/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "7/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks use case consider using webpack code splitting async components", "d": "7/2016"}, {"body": "thanks response gitter accessed cn know submitted one stackoverflow pasted also found quite common questions raised please spend little time give vuejs users answer achieve goal dynamically compile mount ajax loaded content vuejs aware html right scope thanks", "d": "7/2016"}, {"body": "proper way suggested async components mon jul cnweibo notifications githubcom wrote thanks response gitter accessed cn know submitted one stackoverflow pasted also found quite common questions raised please spend little time give vuejs users answer achieve goal dynamically compile mount ajax loaded content vuejs aware html right scope thanks receiving mentioned reply email directly view github mute thread", "d": "7/2016"}, {"body": "give try really works right parentchild relationship still one thing annoyed dynamical loaded content works async component template template contains child component must define child component global component vuecomponent childshouldbeinasynccomponent work way browserfiywebpack manner info components childshouldbeinasynccomponent component configuration object thanks", "d": "7/2016"}, {"body": "export function component files instead vue export default resolve reject gt someapicall gt resolve component stuff catch gt reject error message sure actually works though", "d": "7/2016"}, {"body": "kingdaro followed official vuejs async component works expected remaining issue let async component know child component defination referrenced template must let child component global defined vuecomponent pattern", "d": "7/2016"}, {"body": "comments valid use normal webpack browsefiy pattern referencing child component component localchildcomp pattern ignore sorry bring confusing info", "d": "7/2016"}, {"body": "aware", "d": "7/2016"}, {"body": "already fixed sorry", "d": "7/2016"}, {"body": "bug design decision listen vue events components native events used custom component von listens custom events emitted component longer listens dom events", "d": "7/2016"}, {"body": "example best way transition wrap button explicitly define potential use cases events", "d": "7/2016"}, {"body": "yes explcitly define events emit generally try reduce implicit behaviours vue make reasoning code generally harder road often results little bit boiler plate obvious examples single wrapped button save people sanity complex situations", "d": "7/2016"}, {"body": "thank", "d": "7/2016"}, {"body": "found issue fixed within vuejs change vuejs verson add native click work wo nt alert changed wo nt alert document also explain usage native", "d": "10/2016"}, {"body": "hello cemelo thanks filing issue seems indeed issue transition works without transition nt work either look", "d": "7/2016"}, {"body": "linusborg worries man tried look without knowledge codebase could nt figure reason heads bug seems happen vif well", "d": "7/2016"}, {"body": "wow ok actually nt close wraptag fault please close issue", "d": "7/2016"}, {"body": "sqal hey bro nt close wraptag", "d": "10/2016"}, {"body": "show item transitioning duplicated element added dom seen also two elements directive vm inserts wrong element fiddle updated better enlighten bug edit happens element leaving dom", "d": "7/2016"}, {"body": "cemelo thanks update think transition system needs revised deal vdom updates like stay tuned", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "suggest maybe exist alternative could past properts imagine something like", "d": "3/2017"}, {"body": "implemented", "d": "7/2016"}, {"body": "nt using", "d": "7/2016"}, {"body": "yep forget always use shorthands", "d": "7/2016"}, {"body": "hmm function shorthand still supported seems like bug", "d": "7/2016"}, {"body": "good know edited issue reason thought deprecated longer called seemed eliminate use case feature bug", "d": "7/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "7/2016"}, {"body": "using standalone build use module bundler eg browserifywebpack nt matter globals", "d": "7/2016"}, {"body": "phanan sorry mistakes thanks", "d": "7/2016"}, {"body": "thanks", "d": "7/2016"}, {"body": "properties order objects guaranteed javascript also please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "7/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines sure vue bug please create reproducing fiddle", "d": "7/2016"}, {"body": "thanks", "d": "7/2016"}, {"body": "wrapping function within solve problem read", "d": "7/2016"}, {"body": "oh okay could please elaborate exactly happening", "d": "7/2016"}, {"body": "use vbind", "d": "7/2016"}, {"body": "thanks lot", "d": "7/2016"}, {"body": "hi adding need repro label waiting repro hope repro self explanatory could nt understand explanation", "d": "7/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "7/2016"}, {"body": "ah example using old outdated syntax updated", "d": "7/2016"}, {"body": "oh wait worked passed tag worked appeared options passed directive way lets say component way btw still passing constructor despite undefined works may confusing", "d": "7/2016"}, {"body": "hello thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "7/2016"}, {"body": "thank fiddle look", "d": "7/2016"}, {"body": "seems notevil problem run jsfiddle error thrown notevil line function imported esprima undefined investigation error thrown load requirejs without requirejs use vue expectedly guess execution esprima delayed requirejs notevil executed immediately notevil fails import parse function notevil seems support amd style loading", "d": "7/2016"}, {"body": "closed reason ktsn explained", "d": "7/2016"}, {"body": "sorry fault markup component div closed sorry noise", "d": "7/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "7/2016"}, {"body": "hello anrananran thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "7/2016"}, {"body": "misunderstood propsdata actually pass object directive looks like trying", "d": "7/2016"}, {"body": "excited read failed tried found issue provides code", "d": "7/2016"}, {"body": "binds attributes nt pass props guess pass prop explicitly", "d": "7/2016"}, {"body": "update directive ok situation wrote better solution javascript import lodash import vue vue export default props name props value template created let props thisprops apply properties component data forown thisprops value key gt consoledebug key key propspush fnlctrl tks reply wrote directive really appreciate would add feature future template", "d": "7/2016"}, {"body": "problem terrydai good solution try manually create new instances mount particular element like", "d": "7/2016"}, {"body": "fnlctrl right sorry misleading terrydai marking duplicate", "d": "7/2016"}, {"body": "related vuejs", "d": "7/2016"}, {"body": "hello please make sure ask question forums gitter chat use issues keep track bugs feature requests", "d": "7/2016"}, {"body": "using latest", "d": "7/2016"}, {"body": "yesi use", "d": "7/2016"}, {"body": "little bug js file nt work", "d": "7/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "7/2016"}, {"body": "wormen find way seems nt possible yet feasibility depends way vdom used binding actual dom nodes also imposes code splitting since even vue capable rendering web worker legacy eg jquery stuff libraries would still render ui thread ps know discussed gitter chat room forum stackoverflow nobody answered far could find least question posted gitter", "d": "12/2016"}, {"body": "matthiasg yes found solution problem vuejs nothing", "d": "12/2016"}, {"body": "wormen may ask whether still usingconsidering vue vue community nt responsive inquiry needed rendering inside web workers look elsewhere", "d": "12/2016"}, {"body": "matthiasg point rendering inside workers missing something obvious something super complex render", "d": "12/2016"}, {"body": "matthiasg functionality would like take advantage vuejs web workers wrote vuejs use web workers", "d": "12/2016"}, {"body": "andreiglingeanu personally nt need right investigate since dom updates interactions angular took ms interfered scrolling speed caused intermittent slow downs planning move product angular vue next weeks need ssr necessarily web workers yet interested potentially rendering inside service worker experimental option would require similar architecture idea server could push certain data updates dormant devices every service worker would use prerender matching html client requested html would already prefilled uptodate data make full use streaming rendering", "d": "12/2016"}, {"body": "matthiasg hm set html actual dom via sort directive sure faster approach", "d": "12/2016"}, {"body": "andreiglingeanu number projects blog posts discussing merits example implementations basically render vdom worker transmit patch ui thread applies actual dom dom event handlers forward web worker work total spread across two threads even low level phones cores ui thread blocked easily xml parsing etc said priority right us either interested seeing vue succeed though concerned wormen question went totally without response kind glad found another solution issue course", "d": "12/2016"}, {"body": "one thing notice used arrow function nt arrow functions lexical point current vue instance arrow functions ca nt bound also go sharedjs replace focus focus nt understand step supposed replace method name string consolelog call additional space", "d": "7/2016"}, {"body": "ok another example without arrow function reference textarea document almost problem different hot reload sharedcontroller instances equal workaround parent elstextarea reference acceptable nave multiple nested app replacing quoted string focus consolelog focus consolelog focus triggers hot reload", "d": "7/2016"}, {"body": "seems understand problem hot reload kills new state replaces old one expected replace state ready actual ready replace state", "d": "7/2016"}, {"body": "amp problem please open appropriate repo", "d": "7/2016"}, {"body": "\u8fd9\u4e2a\u5c5e\u4e8e", "d": "7/2016"}, {"body": "expected behavior higher priority case applies element produces", "d": "7/2016"}, {"body": "hi paveltytyuk adding repsacby explained make work putting vif seperate element like", "d": "7/2016"}, {"body": "markrjr none examples work running additional plugins using os x chrome firefox work fine", "d": "7/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile", "d": "7/2016"}, {"body": "duplicate", "d": "7/2016"}, {"body": "second div vif command third div style attribute value isshow changed second div copy inline style third div space template", "d": "7/2016"}, {"body": "fixed fix", "d": "7/2016"}, {"body": "got polyfill right rose", "d": "7/2016"}, {"body": "got added array proto rose", "d": "7/2016"}, {"body": "hello thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "7/2016"}, {"body": "thank replying currently forum allow github account oauth login get confirm email post forum", "d": "7/2016"}, {"body": "sorry hear assume checked spam folder disable modes registering massive problems spam bots unfortunately try look issue evening", "d": "7/2016"}, {"body": "make sure set github email public register turn back private get confirmation email", "d": "7/2016"}, {"body": "linusborg thank guys turned github email public relogined forum still get confirmation email click link reminder tips sure checked spam folder also revoked vuejsforum github authorized application recreate loginaccount forum still help using gmail email", "d": "7/2016"}, {"body": "ca nt reproduce", "d": "7/2016"}, {"body": "hello thank filing issue please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "7/2016"}, {"body": "oh update everything worked", "d": "7/2016"}, {"body": "referring select example please check evan comment see syntax changed little bit select example date emit update shipped next release", "d": "7/2016"}, {"body": "yep select example already updated reflect latest changes branch case breaking change previous versions outlined comment sqal linked clone repo locally check branch example works intended close issue bug", "d": "7/2016"}, {"body": "ty", "d": "7/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "7/2016"}, {"body": "thsi bug event sent children two instances child components react one reasons deprecated unintended behaviours make rather useless current scenario need use multiple instances anyway encapsulate component matter template etc", "d": "7/2016"}, {"body": "filter syntax uses space argument delimiter anyone wants work relevant logic", "d": "7/2016"}, {"body": "working simple expression parser parse filter syntax rather regex acceptable method make pull request soon", "d": "9/2016"}, {"body": "defcc code size also concern nt want bloat code relatively rare use case", "d": "9/2016"}, {"body": "ok got", "d": "9/2016"}, {"body": "children guarantee order rely", "d": "7/2016"}, {"body": "problem add dataattribute order used filters render slots nuber dataattribute", "d": "8/2016"}, {"body": "trivial sync vue horizon even official horizon examples using vue currently team bandwidth work nt write binding share community", "d": "7/2016"}, {"body": "right thanks forgot official horizon examples heat pace might worthwhile idea highlight trivial sync vue actually somewhere plain sight", "d": "7/2016"}, {"body": "sorry enough justify significant breaking syntax change looks better subjective", "d": "7/2016"}, {"body": "hello languanghao thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "7/2016"}, {"body": "set option false", "d": "7/2016"}, {"body": "yes try still throw error module always think fit bundling vue file due keyword", "d": "7/2016"}, {"body": "rollup bundle whole app single function scope throw error nesting whole bundle another function scope build setup typically would final bundle js rollup bundle nonstrict function use strict code", "d": "7/2016"}, {"body": "believe terrykingcha correct modules default strict ca nt contain code using keyword bundler possible output file without strict mode error occures running rollup seen", "d": "8/2016"}, {"body": "question eirikb", "d": "11/2016"}, {"body": "gongph real solution remove dependency vue might gone nt checked need hack right away evaluating code runtime plausible horrible workaround made small library fun", "d": "11/2016"}, {"body": "fyi latest versions generate render functions nt use", "d": "11/2016"}, {"body": "digging happens unbuild process called defer undefined refs unbound deferred true stops happening", "d": "7/2016"}, {"body": "share location problem src", "d": "7/2016"}, {"body": "sorry sure nt srcdirectivesinternalcomponentjs line child destroy false defer", "d": "7/2016"}, {"body": "close fixed", "d": "7/2016"}, {"body": "computed properties derived data recreated time source changes mutating nt make sense source value never changes computed change child emit event let parent mutate source instead", "d": "7/2016"}, {"body": "ok thank", "d": "7/2016"}, {"body": "\u7528 trackby", "d": "7/2016"}, {"body": "\u6e32\u67d3\u91cd\u590d\u7684 primitive value \u9700\u8981 \u91cc\u9762 \u662f\u9ed8\u8ba4\u884c\u4e3a\u5c31\u4e0d\u9700\u8981\u4e86", "d": "7/2016"}, {"body": "fnlctrl", "d": "7/2016"}, {"body": "\u5c24\u5927 demo", "d": "7/2016"}, {"body": "trackby trackby \u6b63\u662f\u9650\u5236\u4e86\u4e0d\u80fd\u6709\u91cd\u590d sat jul pm agileago notifications githubcom wrote \u5c24\u5927 trackby id demo trackbydistinct receiving mentioned reply email directly view github mute thread", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "agileago \u9884\u8bbe\u4e86\u6bcf\u4e2a id", "d": "7/2016"}, {"body": "hi sorry late reply think issue internet explorer minimum reproduction code code dom api use vue issue avoid using", "d": "7/2016"}, {"body": "close days inactivity", "d": "7/2016"}, {"body": "input tags self closing yeah think worth mentioning guide tiny example textarea could nt find one", "d": "7/2016"}, {"body": "nonroot component inline props immutable every time parent rerenders local value overwritten inline value mutating props antipattern guaranteed work", "d": "6/2016"}, {"body": "uncaught typeerror read property tagname null issue fixed already think dont need fix issue however unexpected would required forces odd contortions compared using unwrapped tag think tag required svg namescpace tag see url namespaces crash course", "d": "7/2016"}, {"body": "kazupon good hear fixed already tried adding svg namespace element inside template nt help updated example namespaces set tag suggested nt help either issue seems nothing namespaces tag correctly handled manually set template string instead referencing existing tag using usual use case", "d": "7/2016"}, {"body": "kazupon also workaround nt actually add namespaces surrounding tags wrapping element without namespaces works", "d": "7/2016"}, {"body": "updated example able get working adding containing element changing without renaming element even adding directly element nt work", "d": "7/2016"}, {"body": "closing issues end life receive critical security patches", "d": "4/2018"}, {"body": "see", "d": "6/2016"}, {"body": "thanks figured someone must brought could nt find", "d": "6/2016"}, {"body": "repro nt show source code", "d": "6/2016"}, {"body": "attached source", "d": "6/2016"}, {"body": "buggy internet explorer vue detaching elements moving around dom svgs children moved elements lost see example element svg icon simply moved another using ie icon disappears browsers remains something vue could anything imagine one solution use string template script tag template solve current issue many times eg list rendering vue use meaning face issue ideally would component injects full svg code given icon instead using work much better ie", "d": "7/2016"}, {"body": "close days inactivity", "d": "7/2016"}, {"body": "use symbols instead groups work polyfill svgxuse", "d": "4/2017"}, {"body": "fergaldoyle almost years later one greatest wtf ie moments dev path", "d": "4/2018"}, {"body": "able fix using vpre tag help use either svg parent elements", "d": "7/2018"}, {"body": "hello thank interest project please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "6/2016"}, {"body": "second time today please use forum gitter", "d": "6/2016"}, {"body": "hello monkong thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests encourage ask forum gitter", "d": "6/2016"}, {"body": "bug error appears initialized emtpy tring data use array vfor initialize empty array instead vfor nothing complain working version wiht", "d": "6/2016"}, {"body": "ok havbe correct reason initial value though initializing empty array would better problem initial value since attribute array working jsfiddle still bug technically reopen issue evaluate improve mabe vuewarn dev mode", "d": "6/2016"}, {"body": "please provide minimal repro example jsfiddle post please", "d": "6/2016"}, {"body": "provided example good enough think first impression essentially issue seems top size data simply much alternative working code commented example works wrapper element element vfor since higher priority element ca nt stop thirdlevel loop occurring wrapperelement without vif variations break", "d": "6/2016"}, {"body": "linusborg pointed higher priority using together basically looping every possible field entire data structure field also results thousands unnecessary nested fragments limitation compilation best practice always separate different elements eg using wrapper element problem", "d": "6/2016"}, {"body": "know cause want know problem version history examples", "d": "6/2016"}, {"body": "iirc priority vif vfor changed previous version vif higher priority changed made impossible vif reference individual items vfor", "d": "6/2016"}, {"body": "hi use vue web recently broken browser would problem", "d": "10/2016"}, {"body": "xiaoshuangli issue vue think found bug open new issue minimal repro broken website general", "d": "10/2016"}, {"body": "posva thanks trying still learning vue feel awesome", "d": "10/2016"}, {"body": "found made stupid mistake thanks lot", "d": "10/2016"}, {"body": "duplicate", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile question need define parent", "d": "6/2016"}, {"body": "used interpolate plain html nt process bindings", "d": "6/2016"}, {"body": "thanks bug fixed reinstall vueloader work properly", "d": "6/2016"}, {"body": "works perfect ty", "d": "6/2016"}, {"body": "hot reload working name modules version description main appjs scripts build webpackdevserver hot inline author license isc dependencies lodash vue vueifyinsertcss webpack devdependencies babelcore babelloader cssloader stylus stylusloader vuehotreloadapi vueloader vuetemplatecompiler webpack webpackdevserver could tell problem thanks", "d": "12/2016"}, {"body": "close fixed", "d": "7/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests", "d": "6/2016"}, {"body": "fixed also introduced small breaking change component directly emit value instead also means emitting value native event need", "d": "6/2016"}, {"body": "thanks quick fix like change fits usual procedure passing emittingdispatching events today", "d": "6/2016"}, {"body": "ok got remove entry key work successful", "d": "6/2016"}, {"body": "well trying write element component directive course issue wink", "d": "6/2016"}, {"body": "hi thanks reporting issue looks like template parsing bug give go evening one beat improved repro", "d": "6/2016"}, {"body": "welp grin", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "crossjs said deep watch use option please read manual also forum gitter better fits questions like", "d": "6/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "6/2016"}, {"body": "sorry", "d": "6/2016"}, {"body": "jquery event system native browser event vue nt know jelement suggest read", "d": "6/2016"}, {"body": "also get stuck please ask forum gitter sure lot folks help", "d": "6/2016"}, {"body": "tks", "d": "6/2016"}, {"body": "actually since transition system renamed would make sense rename really sure one fact sounds lot like part hesitation fully recommend", "d": "6/2016"}, {"body": "good point think take pass hooks across different parts lib ensure consistent naming convention", "d": "6/2016"}, {"body": "bit offtopic farstretched always wondering convention vue options well namely adjective plural noun singular noun verb", "d": "6/2016"}, {"body": "sounds good major patterns think seeing verb simple past eg verb infinitive eg prefix verb infinitive eg think would best convention settle think option also seems generally moving towards feels nicest may also one fully accommodate every situation places hooks may exhaustive almost midnight lifecycle methods transition system custom directives", "d": "6/2016"}, {"body": "phanan good point could good time also set explicit rules follow naming component options looking api think might reverseengineered rules seeing noun use noun accept many things use plural eg accept thing use singular eg noun something use verb infinitive eg boolean option use adjective eg current exceptions verb simple past perhaps conjugated present perhaps", "d": "6/2016"}, {"body": "fair big proponent renaming things unless warning try use oldstyle name warning pop use arbitrary name case might handled custom code", "d": "6/2016"}, {"body": "thorough evaluation current directive hooks context farreaching campaign consistency couple areas confusion noticed possible solutions end confusions updated directive interface actually referring updates two separate things could cause confusion first triggered directive value updated second triggered component updated times called called also runs instancecomponent lifecycle hook renaming hooks make context actually updated clear could useful consistency lifecycle verbs within component lifecycle hook point access data nothing mounted onto dom yet understanding also case hook use verb instead consistency similarly cleanup might happen hook may also good use verb preference changes concepts create update destroy mirrored directives leaves mount conspicuously missing despite waiting element document part one common use case directives see among others convenience may good complete set hook mounting simplified something like possible solution assuming prefix verb infinitive pattern possibilities new", "d": "6/2016"}, {"body": "simplesmiler think right arbitrary renames pretty annoying want sure anything renaming nt new name feels better actually makes vue api clearer intuitive case directives since work quite differently used changing hooks might actually alleviate confusion users wo nt expect behavior quite big changes take new arguments longer instances longer called initial existing lifecycle methods would change move prefix verb infinitive pattern lifecycle methods already changed thinking existing vue users would basically learn scratch anyway transition system already follows pattern changes would necessary advantage consistent names especially new users little experience probably guess name hook right time whether component lifecycle directives transitions whatever else think might worth", "d": "6/2016"}, {"body": "worried among people debug things half hour find use old name hook grinning", "d": "6/2016"}, {"body": "like avoid big naming changes sake api continuity goal consistency changes possible see right feels inconsistent hook custom directives transitions think fix could settle following present tense verb indicates user implementing hook perform specified action past tense verb indicates action performed framework hook exposed timing camelcase prefixed verb also indicates action waswill performed framework hook exposed timing purposes based rules changes would reason changed first place due boolean hook however think determine need appearing transition simply testing presence either actual hook", "d": "6/2016"}, {"body": "implemented branch", "d": "6/2016"}, {"body": "already works need specify vue filters without attribute obvious reasons allows types", "d": "6/2016"}, {"body": "thanks see mean fwiw nt seem parsing vtext though template jade template part vue file compiled vueloader nt investigated yet pipeline breaking", "d": "6/2016"}, {"body": "try prevent default cause keyup tab default event already took place", "d": "6/2016"}, {"body": "thank sleewoo method works another relevant question user nt press tab button use mouse select things else instead catch event together tab key", "d": "6/2016"}, {"body": "question qa site like stackoverflow vue forum issue asking think event need", "d": "6/2016"}, {"body": "yerkopalma right also works thanks help", "d": "6/2016"}, {"body": "local component option using wrong give template instead", "d": "6/2016"}, {"body": "giving localcomponent template seems add correctly childcount however content nt rendered even also give rootcomponent template take component register globally seems work fine", "d": "6/2016"}, {"body": "lukasknuth pass component constructor instead instance option like following code", "d": "6/2016"}, {"body": "well feel stupid thanks ktsn still feel documentation explicitly state used localcomponents could send pullrequest vueorg repository", "d": "6/2016"}, {"body": "hello awakeningj thank interest project please follow guidelines report issue particular provide example wwwjsfiddlenet similar service reproduces problem thank", "d": "6/2016"}, {"body": "make sure also reinstall using", "d": "6/2016"}, {"body": "sorry maybe mistake also strange try modify already solved like work lrcdata lrcblockindex work", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "many jquery plugins including dispatch jquery events native dom events listens native dom events chain call", "d": "6/2016"}, {"body": "native element use component name", "d": "6/2016"}, {"body": "im sorry simplified name post github components using compounded named case one really using", "d": "6/2016"}, {"body": "provide jsfiddle reproduction", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "registered alongside used scope", "d": "6/2016"}, {"body": "nt means endup two global components arkitem able exist without according docs var child vueextend var parent vueextend template components available parent template mycomponent child would able example isnt examples isnt working", "d": "6/2016"}, {"body": "everything parent template compiled parent scope everything child template compiled child scope javascript var child vueextend var parent vueextend template components available parent template mycomponent child work template use case following template compiled parent template note child inside parent template need", "d": "6/2016"}, {"body": "means externally outside template cant invoke child would need global component access parent parent example workflow would impossible right example must global component two child exactly mattering parent want differentiate would go like case global components way way shirnk global components element child within name outputting im child outputting note using name places", "d": "6/2016"}, {"body": "milewski try use wo nt let specify templates components prohibit use slots", "d": "6/2016"}, {"body": "sorry mistake", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "mlyknown", "d": "6/2016"}, {"body": "\u4e0d\u8981\u7528 issue \u6a21\u62df \u53ef\u4ee5\u7528 \u6765\u89e6\u53d1", "d": "6/2016"}, {"body": "sorry \u5230 google\u6ca1\u641c\u5230", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "6/2016"}, {"body": "hello njleonzhang thank interest project however usage question encourage ask forum gitter issue tracker exculesively bug reports feature requests", "d": "6/2016"}, {"body": "duplicated value officially supported trigger error vue look console line subsequent behavior therefore unpredictable prone problems", "d": "6/2016"}, {"body": "implemented", "d": "6/2016"}, {"body": "please open issue vuerouter repo instead also reproduction", "d": "6/2016"}, {"body": "problem solved", "d": "11/2016"}, {"body": "nt problem since repro provided confirm tue nov pm stoneyong notifications githubcom wrote problem solved receiving subscribed thread reply email directly view github mute thread", "d": "11/2016"}, {"body": "", "d": "6/2016"}, {"body": "talking vueify need install well", "d": "6/2016"}, {"body": "yes going use need install generally solve errors", "d": "6/2016"}, {"body": "phanan set", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "classes unnecessary goal divide methods simply put separate file", "d": "6/2016"}, {"body": "besides please use forum andor gitter questions", "d": "6/2016"}, {"body": "phanan thank wrote questions gitter bobody answer", "d": "6/2016"}, {"body": "hello thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "6/2016"}, {"body": "posva click go bar delete vmodel test good delete transitionmode outin also good", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "lincenying nt think problem related transition ignored anyway issue related repsacby said item yet inserted dom nexttick keeps calling forceupdate", "d": "6/2016"}, {"body": "sorry nt focused enough bug already fixed shipped next version", "d": "6/2016"}, {"body": "please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "6/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks question please read reactivity depth section guide reactive data source", "d": "6/2016"}, {"body": "root level properties start underscores reserved vue internal prototype methods", "d": "6/2016"}, {"body": "use recursive components like register globally see recursive component", "d": "6/2016"}, {"body": "thanks hero quickly explain close issue first time see github refresh itselft close issue", "d": "6/2016"}, {"body": "add another note phanan answer nt register components globally instead component vue shortcut name component", "d": "6/2016"}, {"body": "thanks simplesmiler work", "d": "6/2018"}, {"body": "thanks telling us fails system unfortunately ca nt really deduce anything else information care provide bit details", "d": "6/2016"}, {"body": "bug uncaught error user logic", "d": "6/2016"}, {"body": "added ability use handle error instead throwing", "d": "6/2016"}, {"body": "efficient great novices usually handle errors place data returned server abnormal time entire page vue components lose jobs encountered two examples throw warning frame level avoid best course thanks", "d": "6/2016"}, {"body": "looks like bug", "d": "6/2016"}, {"body": "different browsers trigger events different orders something vue change vue responsible normalizing behavior listening event instead", "d": "6/2016"}, {"body": "solved problem wrapping logic changehandler always access updated values another solution could watcher property", "d": "6/2017"}, {"body": "fixed \u4ee5\u540e\u6b64\u7c7b\u95ee\u9898\u8bf7\u5230\u5bf9\u5e94\u7684 repo \u5f00", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "think intentional special value replaced default want default send cc phanan recall mentioning", "d": "6/2016"}, {"body": "thanks simplesmiler wondered might case got ta love breaking changes sure would send undefined currently send either jsonencoded php array null change null something else would send undefined send string fails prop expects array plus would compile string anyway even nt fail could send empty array obviously stays empty array doesnt fallback default prop value feel null would made sense bridging php js", "d": "6/2016"}, {"body": "something like like", "d": "6/2016"}, {"body": "ok thank seems explicitly set opposed set php callback sent string latter case causing vue squawk former like example works fine recognised js undefined", "d": "6/2016"}, {"body": "fyi previous misbehavior treating fixed commit", "d": "6/2016"}, {"body": "duplicate", "d": "6/2016"}, {"body": "hi checked bin object remains expected", "d": "6/2016"}, {"body": "interesting looks like bug", "d": "6/2016"}, {"body": "working expected gets new value assigned changed assignment assignment", "d": "6/2016"}, {"body": "ealvespt still called happening", "d": "6/2016"}, {"body": "simplesmiler hmmm indeed nt noticed interesting edit noticed use computed property components works expected", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile question passing data child props way go modify child components either use two way bindings emit events child component catch parent child computed prop work better post repro forums gitter", "d": "6/2016"}, {"body": "posva maybe nt make clearbut thanks anyway wayi tried several times nt receive confirm email forums also searched trash email using gmail would bother check server log see going thanks", "d": "6/2016"}, {"body": "hughgr need make github email public settings auth", "d": "6/2016"}, {"body": "export component constructors returned vueextend functions", "d": "6/2016"}, {"body": "theoretically directive ignored sure worth special case", "d": "6/2016"}, {"body": "common issue people nt think need", "d": "6/2016"}, {"body": "please post issue corresponding vuecli template repo also make sure installed", "d": "6/2016"}, {"body": "repo fixed", "d": "6/2016"}, {"body": "caching issue sorry", "d": "6/2016"}, {"body": "volodymyrrudyi example using shows issue resolved", "d": "6/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question put modal element template toggle code", "d": "6/2016"}, {"body": "simplesmiler thanks good answer want dynamically create modal modal instance inserted documentbody", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "simplesmiler thanks share problems define component template app clone dom append body good thanks", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "simplesmiler jonagoldman ok done see", "d": "6/2016"}, {"body": "fundon clone dom append body exactly lose reactive bindings experience issues follow forum", "d": "6/2016"}, {"body": "problem executed design change case try tag", "d": "6/2016"}, {"body": "thanks prograjkamal explanation", "d": "6/2016"}, {"body": "prograjkamal curious decided execute reasoning behind", "d": "7/2017"}, {"body": "sagv vfor adds extra params ie item index scope vdirectives use hence executed first note nt put vfor vifvshow tag use nest vfor vifvshow shown jsfiddle", "d": "7/2017"}, {"body": "must use lowercase id html caseinsensitive", "d": "6/2016"}, {"body": "point mention root cause issue please help whether scenario root vm instance refer couldnotavailabeincomp div elemenet say access comp vm els verify test using vuedev tool chrome true update document really costs several hours figure thanks", "d": "6/2016"}, {"body": "also please note dom element attached vel couldnotavailabeincomp comp template transcluded content matter thanks", "d": "6/2016"}, {"body": "getting exact issue rolled back everything working", "d": "6/2016"}, {"body": "still select vmodel stuck endless loop problem suggestion thanks", "d": "7/2016"}, {"body": "issues created custom drop lists bootstrap toggle switch create list check boxes list one selected affects three filter options created using getter within getters underlying arrays restricted automatically affects selected check boxes getters use arrays filter options times works debugging code resolve bugs often fallen trap permanently loops seems controlled venderjs file calls getters reason sure happen turn method filters selects underlying arrays action one still causes getters run", "d": "9/2018"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "6/2016"}, {"body": "thank", "d": "6/2016"}, {"body": "\u4f60\u628a \u6539\u4e3a \u5728\u4f60\u66f4\u65b0\u5b50\u7ec4\u4ef6\u7684 props filter \u88ab\u91cd\u65b0\u8d4b\u503c\u5927\u6982\u5728\u4e0b\u9762\u7684\u5730\u65b9", "d": "6/2016"}, {"body": "\u5982\u4e0a\u6240\u8ff0", "d": "6/2016"}, {"body": "nt really see practical disadvantage using nonprefixed special attributes really want keep vue related attributes different always use", "d": "6/2016"}, {"body": "experience found disadvantages nonprefixed attributes scanning vue templates known code written read many times special prefix vue specific attributes stand easier identify especially vue specific attributes start really irks scan vue template got remember attribute vue attribute adding vue specific atrributes future likely many vue attributes future may likely take string value instead js expression cases require add another special attribute naming things hard especially using global namespace using prefix make easier add vuespecific attributes beginner pitfalls beginner definitely fall like write stead one special attribute transition would go simplicity attributes may come find better prefix ps clearly hack work", "d": "6/2016"}, {"body": "many come really true want limit number special attributes currently nt plans adding anymore ones serve clear purposes remember already using custom elements make clear plan change currently work", "d": "6/2016"}, {"body": "want limit number special attributes currently nt plans adding anymore really commend effort foresight software developers fortune tellers never know edge cases overlooked maybe reading much think reluctance add special attributes direct consequence vue specifc prefix prefixes adding new one easy without consider polluting global scope interference already existing htmlsvg attributes increasing numbers concede experienced hence know better vue still alpha situation occurs new special attribute required please consider adding prefix instead", "d": "6/2016"}, {"body": "removing events obj parent trick think events obj childmsg key overwriting method bind template", "d": "6/2016"}, {"body": "changed example note using template event name turned lowercase browser part template parsing restrictions avoid using uppercase letters event names nt limitation", "d": "6/2016"}, {"body": "ahh makes sense thanks guys", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile may handy", "d": "6/2016"}, {"body": "socket", "d": "3/2017"}, {"body": "make sure element id present vue instance rendered otherwise need provide reproduction", "d": "6/2016"}, {"body": "thank proposal figured move template section advance works thanks", "d": "6/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "6/2016"}, {"body": "found spaces line javascript may affect malfunction", "d": "6/2016"}, {"body": "removing need repro label since jsfiddle provided", "d": "6/2016"}, {"body": "tried reproduce happen issue close", "d": "7/2016"}, {"body": "solve seo question guidelines vue docs inside vueserverrenderer", "d": "6/2016"}, {"body": "also need serverrenderer", "d": "6/2016"}, {"body": "wonder documentations vue server side rendering thank", "d": "7/2016"}, {"body": "linusborg would love help guys somehow docs anything", "d": "7/2016"}, {"body": "stylehuan sharpc listed rest assured documenting server side rendering meantime might enjoy browsing tests rajibahmed like help love feedback updated guide note transition system page date everything else current latest beta", "d": "7/2016"}, {"body": "meiyuanchen regarding seo worries impression google search crawlers able understand javascript announced change back google dominate search engine americas europe middle east rest asia exceptions russia china half search traffic china flows baidu interpret javascript crawlers yandex dominate engine russia started crawling javascript pages since last year serverside rendering sake seo somewhat depends site audience hopefully info provided helps said serverside rendering returns prerendered plain html text content crawled searchbots help actually mentioned seo motivation vue serverside issue brought", "d": "7/2016"}, {"body": "server side rendering also needed metatags think facebook etc", "d": "8/2016"}, {"body": "blocka yes also came back add google crawlers fullproof js renderers ca nt fully trusted yet process js like would think relevant new vueserverrenderer greatly appreciated", "d": "8/2016"}, {"body": "part migration ported filters custom components emitting input event referring two parts love submit simple way filter custom component example especially read filter issue nt clear changelog approach nt work also documented unless missed entirely possible", "d": "8/2016"}, {"body": "nt clear changelog approach nt work need vmodel component feature developed provide mechanism works bit like sync cases makes sense components emulating inputs behavior", "d": "8/2016"}, {"body": "linusborg oh derp course upgrade guide wip seeing anything definitely want contributecover", "d": "8/2016"}, {"body": "elithrar closest thing upgrade guide currently changes issue see building real one prior final release would actually great help could compile list things like see covered beyond already issue", "d": "8/2016"}, {"body": "would actually great help could compile list things like see covered beyond already issue indeed may blind spots familiar versions", "d": "8/2016"}, {"body": "ok seems good place cover additional migration guide requests x migrate vue filters custom component thread provides evidence need x comprehensive lifecycle hook guide ready mounted caveats given common ready usage x replacing debounce implementation partially covered definitely needs clearly featured docs", "d": "8/2016"}, {"body": "love contribute vue generating spanish translation guides would something would interested cheers", "d": "9/2016"}, {"body": "srodriki definitely see", "d": "9/2016"}, {"body": "vuerouter docs amp vuex docs done right", "d": "9/2016"}, {"body": "yep", "d": "9/2016"}, {"body": "elithrar currently developing twoway filters components examples talked mentioned might good examples share", "d": "9/2016"}, {"body": "chrisvfritz quick example using custom vmodel component w debounce inside", "d": "9/2016"}, {"body": "gist link gives", "d": "9/2016"}, {"body": "linusborg fixed", "d": "9/2016"}, {"body": "thanks elithrar added section twoway filters specifically migration guide would love hear thoughts", "d": "10/2016"}, {"body": "chrisvfritz great writeup breaking vue vue steps great job illustrating changes required benefits custom component approach", "d": "10/2016"}, {"body": "hello give details please jsfiddle would helpful", "d": "6/2016"}, {"body": "ah yes indeed fixing", "d": "6/2016"}, {"body": "closed via", "d": "6/2016"}, {"body": "hmm probably need extra config option something like", "d": "6/2016"}, {"body": "yeah would nice property like components ignoredelements guess config makes sense something component able", "d": "6/2016"}, {"body": "already implemented ship", "d": "6/2016"}, {"body": "perfect", "d": "6/2016"}, {"body": "thanks congrats releasing vue would consider pr document went docs first see config option came understand want keep docs config minimum also initialized empty array instead null way users push custom element names without check initialize variable", "d": "9/2016"}, {"body": "intended work reusable components instance say party component order warn user needs know implementation details appjs import thirdpartycomponent thirdpartycomponentjs vueconfigignoredelements customelement new vue el root template components thirdpartycomponent alternative third party module modifies global config state seems antipattern similar better modules export component configs rather", "d": "1/2017"}, {"body": "little context could probably helpful app github forum something else", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile", "d": "6/2016"}, {"body": "duplicate", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile use syntax html index itemmessage", "d": "6/2016"}, {"body": "could use directive instead filter check gist hope helps", "d": "6/2016"}, {"body": "please ask questions forum gitter", "d": "6/2016"}, {"body": "pespantelis thanks better solution hack solution want use another tag work correct", "d": "6/2016"}, {"body": "could try instead", "d": "6/2016"}, {"body": "pespantelis thank worried many data show many setinterval run may lead performance problems", "d": "6/2016"}, {"body": "pespantelis update solution one setinterval javascript import vue vue import moment moment vuedirective momentago update time thiselinnerhtml moment time fromnow unbind stopautoupdate momentagokey var intervaltimes funs function runautoupdate intervaltimes return run consoleinfo moment run intervaltimessetinterval function var key funs funskey function stopautoupdate key key return delete funs key isemptyobj funs clearinterval intervaltimes function isemptyobj obj var key obj return false return true", "d": "6/2016"}, {"body": "pespantelis still problem use vuerouter setting keepalive mode inactive component still keep update", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile question pass data prop possible access property really used inside type component keep mind makes component harder reason", "d": "6/2016"}, {"body": "got itthanks", "d": "6/2016"}, {"body": "maybe describe issue exactly find solution reading readme doc use vref direction", "d": "6/2016"}, {"body": "hello please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described also please include version used", "d": "6/2016"}, {"body": "good idea created jsbin template ok firefox failed ie", "d": "6/2016"}, {"body": "need wrap tag", "d": "6/2016"}, {"body": "pespantelis thank works fine", "d": "6/2016"}, {"body": "seems ie removes inside pespantelis said nt need wrap", "d": "6/2016"}, {"body": "posva right maybe ie removes template node", "d": "6/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "6/2016"}, {"body": "nt include set property hook eg", "d": "6/2016"}, {"body": "technically bug root cause wrong transition name vue waits event determine transition ended since matching css classes applied transition triggered thus transition essentially never ends preventing vue removing element autotimeout however still rather hard detect misspelled transition name", "d": "6/2016"}, {"body": "believe bug element attributes property returns collection attribute nodes using input field named attributes replaces contents property demo vue uses property thought hard even impossible change error message inform conflict believe ok also reason want set field named attributes could interpolate attribute", "d": "6/2016"}, {"body": "exactly pespantelis described unfortunately way workaround vue part recommended solution avoid using input names also native dom element properties", "d": "6/2016"}, {"body": "thanks reporting issue fix involves changes fixed additional refactoring", "d": "6/2016"}, {"body": "watcher enables checkbox variable changed switch first dropdown variable changed hence watcher triggered correctly suggest reset variable first dropdown changes", "d": "6/2016"}, {"body": "thank example try implement similarly however sure changed first dropdown used relevant selected option element removed dropdown model change triggered imho dom model sync", "d": "6/2016"}, {"body": "fixed triggering dom event dropdowns options removed works time expression removes option recalculated fire change event vue get notified change relevant property needs updated recalculation triggered would nice would happen automatically would handled framework pressure anyone close issue working example anyone interested trying solve something similar", "d": "6/2016"}, {"body": "sorry old documentation somewhere fault", "d": "6/2016"}, {"body": "would supported", "d": "6/2016"}, {"body": "simplesmiler nt think feasible provide seamless migration build like upgrade due much underlying implementations changed deprecation warnings mostly used features simulated", "d": "6/2016"}, {"body": "believe simulated adding optional parameter defaults build build work build using syntax give warnings switch order use default build build using parameter encourage new syntax default mark feature deprecated certainly look like elegant prefer seamlessmigration build nt problems facing certain seamless migration possible workarounds many find acceptable", "d": "6/2016"}, {"body": "prograjkamal hmm good idea toggle incompatible interfaces using flags would definitely make migration build feasible", "d": "6/2016"}, {"body": "nothing primitive values per se reactivity caveat due limitations javascript", "d": "6/2016"}, {"body": "use normal data property general bad idea mutate objects created within computed properties since objects temporary recreated every time computed property recomputed case expect mutation work computed property returning original data objects reference instead creating new ones", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "\u597d\u7684 \u56e0\u4e3a\u4e1a\u52a1\u9700\u8981\u9891\u7e41 set nonexistent path", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "ok \u56e0\u4e3a\u6211\u53d1\u73b0\u5728 safari thanks", "d": "6/2016"}, {"body": "chrome \u7684 devtools vue", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile normal two way binding achieved modifier", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile", "d": "6/2016"}, {"body": "question component rely values implicitly provided compilation scope said pass whole parent prop explicitly make sure define prop component", "d": "6/2016"}, {"body": "hi thank question first use usage data binding bound object value attributes defined reactive data eg option computed properties therefor need define property option computed properties etc last note mode class style support array objects checked example codes found nt defined codes work code", "d": "6/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question use case dynamic list attributes unknown upfront eg props attributes depending type component classstyle talking", "d": "6/2016"}, {"body": "thank much ask questions right place later", "d": "6/2016"}, {"body": "think better done think actually meant double brackets agree newline already handled correctly doublebracket expression consistency sake handled correctly triplebracket expression", "d": "6/2016"}, {"body": "simplesmiler realworld case encountered attributes making line longer actually everything added splitting multiple lines much nicer also mean triple brackets since code passed highlightjs", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile example using express need example", "d": "6/2016"}, {"body": "removed cdnjs since usage", "d": "6/2016"}, {"body": "done", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "", "d": "7/2016"}, {"body": "come level smile use events bindings many times use said create directive adds element directives", "d": "6/2016"}, {"body": "use shorthands almost always used arguments nt think shorthands nonargument usage makes sense", "d": "6/2016"}, {"body": "think could useful something like bind property vue instance form model instead one would simply glad work pr", "d": "12/2017"}, {"body": "vs use", "d": "4/2018"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question put expanded variant template directly tell vue show conditionally", "d": "6/2016"}, {"body": "computed property manual changes ignored", "d": "6/2016"}, {"body": "bug mapped array different objects computed property mutating derived objects cause changes temporary lost whenever source data changes", "d": "6/2016"}, {"body": "looks like problem", "d": "6/2016"}, {"body": "fixed feel free reopen issue persist next alpha release", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile use variable passed children items click set variable state depend variable", "d": "6/2016"}, {"body": "maybe help", "d": "6/2016"}, {"body": "fyi deprecated props behavior scott", "d": "6/2016"}, {"body": "please see template structure included first post pass data inner item componemt problem child items componemts directly childs parent vue instancethey childs childs childs instances need clarification", "d": "6/2016"}, {"body": "think introduces whole new layer two implicitly unreadability mention combine two events like event receive event event", "d": "6/2016"}, {"body": "think events would nothing logical key presses would needed dospecialstuff see idea heading like making interactive programs certainly mixing matching events would handy however agree phanan placing html suggested nt clean phanan way mix match events introduce cleanly html currently scott", "d": "6/2016"}, {"body": "phanan could made explicit idea events would passed array another object first example shows probably right assertion honest question best current alternatives currently possible something cleaner html best think associating function probably one listener eg checking combinations within calling appropriate functions html becomes cleaner solution whole counting js code seems much verbose least current way simplifying could least shorthand like would preserve current behavior offer extra complexity even thankful could clarify good things please tell getting wrong", "d": "6/2016"}, {"body": "go simple inside handler check event etc determine action", "d": "6/2016"}, {"body": "agree phanan implementation unreadable confusing eye solution help within handler allowing much flexibility", "d": "6/2016"}, {"body": "ok thanks", "d": "6/2016"}, {"body": "yes good potential event interface like suggestions made also questionsuggestion along lines stream interface", "d": "6/2016"}, {"body": "ping posva", "d": "3/2017"}, {"body": "expected replaced different dom node vue way track", "d": "6/2016"}, {"body": "duplicate wontfix want class controlled vue nt put static class first place", "d": "6/2016"}, {"body": "sorry searching hard enough found componentname property solved", "d": "6/2016"}, {"body": "likely wontfix vue scoped css relies compiletime transformation template uses purely runtime data use something like nest styles div", "d": "6/2016"}, {"body": "solution nt work tag nt like maybe add something like use complied", "d": "6/2016"}, {"body": "wondering vue add data left selector able select generated elements", "d": "8/2017"}, {"body": "cevio autoprefixer checks styles ckeck different browsers browser puts value able work necessary code simplified", "d": "6/2016"}, {"body": "finico said prefixes styles automatically current browser actual issues eg prefix please report", "d": "6/2016"}, {"body": "finico simplesmiler thanks help alreay resolve problem thanks much", "d": "6/2016"}, {"body": "ca nt reproduce list detailed steps lead mentioned error", "d": "6/2016"}, {"body": "look gif got thanks hard work vuejs changed life", "d": "6/2016"}, {"body": "thanks repro fixed branch", "d": "6/2016"}, {"body": "hi thank reporting seem vuerouter issue please report issues", "d": "6/2016"}, {"body": "hi nt mean instead second loop appears working fixed", "d": "6/2016"}, {"body": "boss thank much", "d": "6/2016"}, {"body": "hi thank reporting use options please see document think resolve way jsfiddle url", "d": "6/2016"}, {"body": "think something fixed since expected behavior reasonable", "d": "6/2016"}, {"body": "means specified component included option register component global id option", "d": "6/2016"}, {"body": "kazupon component published npm github author nt know name users use outside use internal use think check whether defined", "d": "6/2016"}, {"body": "fenivana thanks explanation oh see try fix issue", "d": "6/2016"}, {"body": "kazupon thanks really like quick response vuejs team awesome", "d": "6/2016"}, {"body": "closed via", "d": "6/2016"}, {"body": "kazupon thank work vuejs awesome could please correct official example contain name attribute vuecomponent definition", "d": "10/2016"}, {"body": "set different name id vue file", "d": "7/2017"}, {"body": "fingerpich js export default name isname", "d": "8/2017"}, {"body": "emadadly want different name id vue file used component recursively set id global name", "d": "8/2017"}, {"body": "fingerpich still working concepts think following set component name globally file create vue instance ie abovebefore vue instance creation add something like import mycomponent componentsmycomponentvue vuecomponent mycomponent mycomponent new vue components member app another component makes available template used", "d": "8/2017"}, {"body": "btw found issue getting error well seems name member singlefile vue component ignored stopped including names started naming member referenced globally eg valid approach used global registrations seems appropriate register used locally however sure performance impact registering locally repeatedly component nested within many components", "d": "8/2017"}, {"body": "indeed name singlefile vue component seems ignored running right", "d": "11/2017"}, {"body": "dynamically importing singlefile component solved issue", "d": "12/2017"}, {"body": "also issue displays unknown custom element lt randomquote gt register component correctly recursive components make sure provide name option library use code appjs var vue require vue vueconfigdebug true comment line production new vue el app created function thislaravueinitcall home data laravue require laravuecoffee components require componentscoffee moduleexports custom elements titles require componentstitlecoffee randomquote require componentsrandomquotecoffee randomquotecoffee moduleexports template require randomquotetemplatehtml created gt random mathfloor mathrandom quote quotes random data gt ret quote quotes notice small things rewards inversely proportional even largest avalanche triggered small things great things done series small things brought together great things done impulse series small things brought together coming together beginning keeping together progress working together success small beginnings come great things randomquotetemplatehtml quote", "d": "4/2018"}, {"body": "hello bug please see cloned jsbin modifications notice inside onsubmit log triggered however direct communication resolve use case programmatic execution form interaction call onsubmit method see", "d": "6/2016"}, {"body": "hey mean even use form someone decide submit given form jsline typed console callback called add plainjs eventlistener additionally vm order catch event", "d": "8/2016"}, {"body": "flosch yes valid form submit button", "d": "8/2016"}, {"body": "hey guillaumevincent thanks answer concern way submit form perfectly know rather preventing people submit way want instance without validation process would prefered worry someone typing console instance expected eventlistener actually executed submit event even though easily solvable submit var form new vue el myform data somefieldtovalidate issubmitallowed false methods validate function validate fields execute xhrrequests etc add nonvuejs eventlistener ensure form submitted another way typing console form eladdeventlistener submit formonformsubmitbind form", "d": "8/2016"}, {"body": "flosch adding plain listener wo nt help problem programmatic fire event", "d": "8/2016"}, {"body": "scenario wanted submit form outside form calling refsformsubmit would nt fire savedata function workaround form html save vue component method savedata function manually trigger validation refsformcheckvalidity try focus error refsformreportvalidity return hopefully helps someone still submitted via refsformsubmit still manually trigger validity although sure reportvalidity reliable", "d": "12/2017"}, {"body": "garethtigfreight golly g man saved night ddd", "d": "6/2018"}, {"body": "relying template reactive updates set remember unregister vm removed however manually instantiating child components part recommended best practice especially consider using proper component instead", "d": "6/2016"}, {"body": "\u81ea\u5df1\u89e3\u51b3\u4e86 hellots use strict import component vueclasscomponent var vselect require vueselect export interface hello extends vuejsvue component template require hellohtml components vselect export class hello data return selected null options foo bar baz hellohtml vselect", "d": "6/2016"}, {"body": "try set method see reactivity depth", "d": "6/2016"}, {"body": "renshine pass data event sub component loop people suggest using vif loop list instead using preserved", "d": "6/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile take look", "d": "6/2016"}, {"body": "hello thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described cloned repo tested chrome works well next time provide simple repro people ca nt go whole application help", "d": "6/2016"}, {"body": "thanks feedback provide ghpages link soon impossible reproduce bug codepen jsfiddle due pianojs nature", "d": "6/2016"}, {"body": "see case may due pianojs great create repro without pianojs", "d": "6/2016"}, {"body": "posva hi codepen repro steps reproduce insert text first input select text click button near input looking forward response", "d": "6/2016"}, {"body": "thanks found bug update resets values caching taking back actually solves issue sure test though may write test ps tomorrow going sleep", "d": "6/2016"}, {"body": "nt internet yesterday hope able evening", "d": "6/2016"}, {"body": "finally got internet back trouble creating test breaks unit test try today test although overkill calling blur method input nt behave way actually fix came setting input value nt changed blur basically adding conditions", "d": "6/2016"}, {"body": "browser removes elements vue get access following html spec allowed direct children element browser dependet behaviour ca nt fixedchanged least branch vue use virtual dom templates free us limitations workaround move fuctionality component use turn element component", "d": "6/2016"}, {"body": "use like", "d": "6/2016"}, {"body": "teddyzhu correct scenario generally used elements loop one element time", "d": "6/2016"}, {"body": "linusborg know thought using option like list ul example use tbody tag allowed mre one time table teddyzhu updated fiddle link like linusborg said need loop two table rows time vfor tr option unfortunately", "d": "6/2016"}, {"body": "anyone bump issue working fiddle replaced tag please feel free close issue", "d": "6/2016"}, {"body": "already", "d": "6/2016"}, {"body": "nt work ie", "d": "3/2017"}, {"body": "block work days believe vue issue", "d": "6/2017"}, {"body": "took find correct use share html itemid itemname", "d": "6/2017"}, {"body": "aymkdn works", "d": "7/2017"}, {"body": "want loop itemrealname itemdepartmentname want loop twice trick though produce many tbody elements seems display correctly valuevaluename valuevaluetype", "d": "8/2017"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question tried code works without issues", "d": "6/2016"}, {"body": "well answer implement directive rather component also better turn things around let ajax component import use spinner component instead wrapping spinner component around ajax component", "d": "6/2016"}, {"body": "simplesmiler thanks advice implemented according proposal works great", "d": "6/2016"}, {"body": "twoway props deprecated", "d": "6/2016"}, {"body": "english uses plural form", "d": "6/2016"}, {"body": "looks like bug meantime work around", "d": "6/2016"}, {"body": "bug seems way accomplish", "d": "6/2016"}, {"body": "thanks clarifying pespantelis", "d": "6/2016"}, {"body": "pespantelis entirely correct bad", "d": "6/2016"}, {"body": "biggest problem proxy way simulate consistent behavior browsers support way maintain reference consistency observed objects point proxies create separate copy original object copy fail cases try compare js var obj var proxy new proxy obj handlers obj proxy false introduces complexity accessing nested properties always need careful whether value retrieved real one proxy otherwise lead obscure bugs rely comparators imo even annoying use also wo nt make internal binding code much simpler intercept manipulations small part reactivity system proxies installed directly object ca nt makes nogo", "d": "6/2016"}, {"body": "gon na drop link", "d": "12/2016"}, {"body": "know vue switching using proxies able overcome transparent proxy issue working library falling issue object equalities", "d": "7/2018"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "6/2016"}, {"body": "provide information bug please read contributing guidelines next time ps first time", "d": "6/2016"}, {"body": "trust obvious number friends confirmed sorry forgot tell use vue", "d": "6/2016"}, {"body": "provide page repro bug maybe need install chinese input software english thanks", "d": "6/2016"}, {"body": "still explaining happens matter trust", "d": "6/2016"}, {"body": "sorry look gif", "d": "6/2016"}, {"body": "function oncompositionend e etargetcomposing false trigger etarget try comment line line bug fixed", "d": "6/2016"}, {"body": "dist files date please wait actual release filing bugs", "d": "6/2016"}, {"body": "\u4e3a\u4ec0\u4e48\u4e0d\u662f pricelist width width \u5b8c\u5168\u6ca1\u5fc5\u8981\u7528 set", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "\u521d\u59cb\u58f0\u660e\u4e3a \u4e0d\u5c31\u884c\u4e86", "d": "6/2016"}, {"body": "\u597d\u5427 \u4f46\u6211\u89c9\u5f97\u6570\u636e\u91cf\u4e00\u591a", "d": "6/2016"}, {"body": "current dist file date please wait util actual release", "d": "6/2016"}, {"body": "give go evening fairly easy fix", "d": "6/2016"}, {"body": "hello astragit thanks report provided reproduction fiddle provide correct version fiddle missing exernal vuejs file library template component nest without clear reasonrelation issue seems unfinished kind see refer really conclusive anyways think happening code kind gets ahead runs circle set prop trigger twoway sync propagate value item parent also set immediatly afterwards original object prop kind race condition change twoway prop triggers event update parent element time update said parent element d\u00edrectly trigger downwards update prop result depends reactive update event fires beause reactive updates async first direct update succeeds happens synchroneously parent object number property stack done reactive update parent twoway prop comes along changing first change already triggered rreactive event downwards changing prop first guessobservation bottom line ttwoway bindings bitch debug especially tinker sides binding time setting done everything behaves normally nt think bug simply sideeffect antipattern working twoway bindings", "d": "6/2016"}, {"body": "thanks detailed answer put two vuejs scripts version commented switch versions see different result understand good practice use twoway props way wonder code works well version maybe related watcher invocation order fix introduced", "d": "6/2016"}, {"body": "presumably ca nt tell first glance", "d": "6/2016"}, {"body": "watcher queue different watch expression order like order set last watch run", "d": "6/2016"}, {"body": "yeah seems case ok closing issue judging edgecase sideffect reactivity entirely preventable manipulating two sides binding time one nt anyways", "d": "6/2016"}, {"body": "close issue please comment think reopened", "d": "6/2016"}, {"body": "please forget issue found solution basically since passing fixed string property binding changing value need call string parameters component following way matteo", "d": "6/2016"}, {"body": "hello dsonet thank much report continue pull request", "d": "6/2016"}, {"body": "hi linusborg fyi updated reproduction case also new fix", "d": "6/2016"}, {"body": "local debugging found changing line solved issue see nt break existing functionality separate related issue ie select element moved either element descendant moved element within dom even code change reset present issue displaying first option instead blank eg html test", "d": "6/2016"}, {"body": "need define element directive use move block block", "d": "5/2016"}, {"body": "thanks would hoped block would immediately fire everything done loading coming angular background kind works angular feature request personally prefer writing directive controllers controllers time even jquery write plugins underneath regular code also mean time might good idea document explicity overlooked guide andor api", "d": "6/2016"}, {"body": "thany define things locally instead globally", "d": "6/2016"}, {"body": "could work thanks go try", "d": "6/2016"}, {"body": "wo nt implemented vuejs core nt want endorse deep class inheritance use obviously super verbose easily write helper shorten something like", "d": "6/2016"}, {"body": "hi softomatix wrote vuesuper might helpful", "d": "6/2016"}, {"body": "sorry keep answering closed thread really like known vue using classes besides nt want endorse deep class inheritance agree deep inheritance god thing encourage really good argument using classes directly times ago wrote something static properties would problem native classes else could problem could found solution would possible vueextend type class parallel make natural integration typescript wrote single strange thing vue really like rest lot bl", "d": "6/2016"}, {"body": "druppy classes awesome also", "d": "6/2016"}, {"body": "ok interesting read understand reason better guess vueclasscomponent enable static type checking ts fake data types class declaration rest could good idea reconsider inheritance case", "d": "6/2016"}, {"body": "render function return virtual node actual dom nodes please wait proper docs", "d": "5/2016"}, {"body": "ok got something working createelement see would relatively easy work kinda hyperscript like interface idea mon may evan notifications githubcom wrote render function return virtual node actual dom nodes please wait proper docs receiving authored thread reply email directly view github mute thread", "d": "5/2016"}, {"body": "weepy yes basically hyperscript slightly different vnode format also jsx babel plugin", "d": "5/2016"}, {"body": "weepy possible etc handlers vue render function", "d": "6/2016"}, {"body": "voronianski", "d": "6/2016"}, {"body": "thanks figured ing data using template prop", "d": "6/2016"}, {"body": "seems default value causes problem set transition xxxx xxxx anthing removed normally", "d": "6/2016"}, {"body": "let take look", "d": "6/2016"}, {"body": "need negative priority particular reason", "d": "5/2016"}, {"body": "seen negative priority examples nt seen limitation documentation priority positive must mentioned documentation negative priorities converted imo case copiedpasted one example modified adding spent time discover working", "d": "5/2016"}, {"body": "sorry delay checked nt work priority bind priority since using bind param directive get applied attribute longer exist", "d": "6/2016"}, {"body": "strange see jsfiddle link originals quastion working priority working priority explanation clear", "d": "6/2016"}, {"body": "priority f gets converted default priority think avoid priorities lt default value gets applied", "d": "6/2016"}, {"body": "unrelated vuejs vuejs interface library use local storage", "d": "5/2016"}, {"body": "whitespace elements generated need explicitly generated whitespaces work", "d": "5/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question mutate existing object executes reference changed similar shallow watch solution either use computed prop instead coerce make sure change reference instead mutating", "d": "5/2016"}, {"body": "good point however issue opened vuejsorg repo instead", "d": "5/2016"}, {"body": "ah explains could nt find source filed", "d": "5/2016"}, {"body": "issue", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "nodebb", "d": "5/2016"}, {"body": "medmin", "d": "5/2016"}, {"body": "hello thanks reporting issue please follow issue reporting guidelines provide minimal jsfiddle demonstrating issue", "d": "5/2016"}, {"body": "ho bad release fire asap", "d": "5/2016"}, {"body": "probably typo somewhere put hook see available", "d": "5/2016"}, {"body": "since reproduction provided within week assume issue needs investigation close still problem please provide reproduction reopen issue", "d": "6/2016"}, {"body": "please provide reproduction", "d": "5/2016"}, {"body": "passing expects actual element want remove", "d": "5/2016"}, {"body": "bug takes reference item index", "d": "5/2016"}, {"body": "thanks quick response could removemethod change form example tutorial scotchio found example vuejs nt realise using example newer version two problems vrepeat dos nt work replaced vfor scottioexample call deletemethod integerparameter deleteevent function index nt work change following code deleteevent function index confirm die daten l\u00f6schen unfortunately found small documentation remove vuedocu notice change paramtype method thanks helping step vuejs realy handsome jslibrary sorry terrible english", "d": "5/2016"}, {"body": "yes breaking change", "d": "5/2016"}, {"body": "fairly simple hood detecting function mixin use options property instead thu may katashin notifications githubcom wrote using vueclasscomponent project try split component features small mixins think good mixins option also allows extended vue constructors write components mixins uniformed format addition advantage type system use typescript example two mixins receive props event handlers detect changing form values component props onchangename function onchangeemail function class userformmixin extends vue onchangename name string gt void onchangeemail email string gt void component props onchangehobby function onchangewebsite function class profileformmixin extends vue onchangehobby hobby string gt void onchangewebsite website string gt void mixins applied component following way mixins option allows extended vue constructors userprofileform component must methods userformmixin profileformmixin component receive methods props component mixins userformmixin profileformmixin class userprofileform extends vue implements userformmixin profileformmixin onchangename name string gt void onchangeemail email string gt void onchangehobby hobby string gt void onchangewebsite website string gt void would like contribute suggestion ok receiving subscribed thread reply email directly view github", "d": "5/2016"}, {"body": "ktsn think feature great especially benefit use type system claim done easily provide sample make vue without class style vue", "d": "11/2017"}, {"body": "already implemented", "d": "11/2017"}, {"body": "ktsn need integrate type system check question", "d": "11/2017"}, {"body": "expected since csp build parsing evaluating expressions using evaluator may consider switch something supports future stick expressions", "d": "5/2016"}, {"body": "sure similar issue using template strings inside like staticimg scopeitem jpg works fine modern browsers however breaks probably phantomjs test confused template strings inside vue expression converted despite", "d": "7/2016"}, {"body": "expects javascript expression need even probably supported csp expression parser nt handles syntax", "d": "7/2016"}, {"body": "hello thanks reporting issue please follow issue reporting guidelines provide minimal jsfiddle jsbin demonstrating issue also make sure use nonminified version get helpful warnings", "d": "5/2016"}, {"body": "using nonminified version vue development maybe warning something wrong", "d": "5/2016"}, {"body": "since reproduction provided within week assume issue needs investigation close still problem please provide reproduction reopen issue", "d": "6/2016"}, {"body": "change template like consider anything inside readonly nonreactive need template depend data make multiple components different template use dynamic pick one need particular data", "d": "5/2016"}, {"body": "expected mutating objectarray without replacing", "d": "5/2016"}, {"body": "ahhh ok makes sense thanks quick response", "d": "5/2016"}, {"body": "work think probably something else", "d": "5/2016"}, {"body": "nt successful reproducing fiddle provided application created using maintains array store initialized six empty objects component iterates lists decides display component array element populated component array element still empty object initial view rendered expected however performing action changes value store array components displayed example action clicking listing pops expected action component show component show however screenshot see six components show addition running master branch uses instead works expected master branch issue", "d": "5/2016"}, {"body": "ah ok related basically used component able match wontfix since longer work use negation condition instead", "d": "5/2016"}, {"body": "code computed property component prop nt know code actually works without throwing error without doubt wrong way component props taking data parent childbut int case parent updates child updated child computed property want best accomplished using vref computed property parent like approach makes parent computed property defines property child", "d": "5/2016"}, {"body": "computed properties readonly never used twoway prop probably give warning raise error computed properties used twoway prop vmodel", "d": "5/2016"}, {"body": "mentioned ca nt field prop computed property trying achieve would recommend approach calculating data child passing parent make parent responsible calculating data use children display fnlctrl computed properties getterssetters perfectly valid use pass sync prop", "d": "5/2016"}, {"body": "simplesmiler thanks nt know", "d": "5/2016"}, {"body": "\u5341\u4e4b\u516b\u4e5d\u662f\u56e0\u4e3a\u4f60\u6ca1\u6709\u5728\u7236\u7ec4\u4ef6\u7684 data \u91cc\u9762\u58f0\u660e markdown", "d": "5/2016"}, {"body": "\u4f7f\u7528watch\u5c31\u53ef\u4ee5\u89e3\u51b3", "d": "11/2016"}, {"body": "think better consistent convenient listening component native dom events makes unpredictable new dom event introduced future library dispatching custom dom events happen use custom event name also native dom event confusing listen time lead hard debug bugs mon may pm \u52fe\u4e09\u80a1\u56db notifications githubcom wrote vue need offer common dom event features write custom components example mainvue click moduleexports components btn require btnvue methods go function e todo go certain url btnvue moduleexports methods click function e emit click e think necessary receiving subscribed thread reply email directly view github", "d": "5/2016"}, {"body": "well another way think html elements mean native dom event also confused sometimes works preserve custom component listen native dom events another syntax listen custom event declaratively instead", "d": "5/2016"}, {"body": "hmm maybe add modifier", "d": "5/2016"}, {"body": "prefer personal favor native custom event case", "d": "5/2016"}, {"body": "custom events recommended way custom components produce side effect parent especially twoway props deprecated much commonly used", "d": "5/2016"}, {"body": "change fires blur input captures every keystroke confusing referring discussion confusing listen time lead hard debug bugs talking building core framework specific issues evan framework library always warn developer use name custom event native think delegation custom components native events treated way also people coming different ecosystems might expect modifier lucky waste mins ran posted issue using jsx styled components answer helped deviation pointer experienced react user", "d": "10/2018"}, {"body": "using wrong method definereactive internal even documented use vueset vm set", "d": "5/2016"}, {"body": "thanks fixed related test probably placed", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "hi brandon ca nt think way computed properties best think categorize pages desired behavior regards nav items store category page make navbar responsible calculating given page calculation rely computed properties another way page construct update manually rather computed property syntax send navbar page enters manage overwrite reference changes make propagate", "d": "5/2016"}, {"body": "thanks quick response simplesmiler much appreciated toy ideas post settle reason following would nt work updating groupby groups updating navitems", "d": "5/2016"}, {"body": "played actually looks like send whole page navbar able save depend computed properties nt know implications top head though", "d": "5/2016"}, {"body": "oh interesting right sending page app extracts properties try approach well", "d": "5/2016"}, {"body": "simplesmiler noticing computed property used view updated even predecessors update right override", "d": "5/2016"}, {"body": "computed properties lazy update upon access binding directive including view output depends property updated reactively way get nonupdated value dependencies got updated find details guide insidecomputedproperties found issue computed properties work feel free open new issue reproduction", "d": "5/2016"}, {"body": "simplesmiler posting help others needed attach navitems via enclosing object update would noticed sibling view navitems options items also add watcher immediate true", "d": "5/2016"}, {"body": "simplesmiler computed property accessed within component accessed sibling component predecessor changed computed property likely accessed within said component intended behavior close otherwise file new issue", "d": "5/2016"}, {"body": "hi brandon thanks interest however github issues used bug reports feature requests please move discussions forum instead", "d": "5/2016"}, {"body": "reproduce issue feel free file hacky solution original issue idiomatic solution would define set possible nav items strategies use vuex state container store current strategy necessary data close issue evan faster", "d": "5/2016"}, {"body": "apologies nt sure intended behavior reserve known bugs going forward may denis karabazanotifications githubcom wrote reproduce issue feel free file hacky solution original issue idiomatic solution would define set possible nav items strategies use vuex state container store current strategy necessary data close issue evan faster receiving authored thread reply email directly orview github", "d": "5/2016"}, {"body": "forgot", "d": "5/2016"}, {"body": "missed tag", "d": "5/2016"}, {"body": "simplesmiler excuse get json object render", "d": "5/2016"}, {"body": "onenewlife please ask questions like forum gitter use objects need key value guarantee order keys", "d": "5/2016"}, {"body": "issue vue issue way semver versioning higher version number begging version tells npm want latest fix changing version number packagejson note", "d": "5/2016"}, {"body": "nodejs version", "d": "5/2016"}, {"body": "okay use html raw webpackconfighs", "d": "5/2016"}, {"body": "please read vueloader docs", "d": "5/2016"}, {"body": "read docs", "d": "5/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question use slots content distribution pass component like", "d": "5/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests also would help could provide demo jsfiddle", "d": "5/2016"}, {"body": "\u8bf7 google composition events \u7136\u540e\u770b\u6e90\u7801", "d": "5/2016"}, {"body": "\u54c8\u54c8 \u5b83\u4e5f\u6709\u7c7b\u4f3c\u4e8evuecli\u7684\u5de5\u5177 \u5982\u56fe", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "\u4f60\u7528vue\u5199\u7684\u9875\u9762\u6253\u5305\u540e\u590d\u5236\u5230express\u7684public\u76ee\u5f55\u5c31\u884c\u4e86", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "pc\u7aef\u7279\u6b8a\u60c5\u51b5\u4e0b\u4f1a\u51fa\u73b0\u53e6\u5916\u4e00\u4e2a\u95ee\u9898", "d": "6/2016"}, {"body": "done", "d": "5/2016"}, {"body": "normally nt need event vue manage dom anyway repo issue list strictly bugs feature requests type questions better fits forum gitter please direct", "d": "5/2016"}, {"body": "need deep watching please read doc applicable", "d": "5/2016"}, {"body": "hi yczz seems code povided missing actual please provide complete example reproduce behaviour see bug", "d": "5/2016"}, {"body": "following code able run normally", "d": "5/2016"}, {"body": "stage accepting vue bug reports since official release yet tests complete", "d": "5/2016"}, {"body": "hope implemented please projects rely keepalive", "d": "5/2016"}, {"body": "really useful hope supports component constructor thanks", "d": "5/2016"}, {"body": "wrote listview component removes invisible items list scrollling depends avoid reinitializing items components come view hope keep demo", "d": "5/2016"}, {"body": "implemented", "d": "6/2016"}, {"body": "close issue", "d": "5/2016"}, {"body": "follow rules", "d": "5/2016"}, {"body": "messed quotes code need escape vue related simple javascript", "d": "5/2016"}, {"body": "ok pay attention next time check code thank u", "d": "5/2016"}, {"body": "wangqianjun", "d": "5/2016"}, {"body": "please ask questions forum gitter", "d": "5/2016"}, {"body": "hi question best suited forum gitter quickly answer question use lifecycle hooks vue provides case try using hook depending specifics bootstraptable", "d": "5/2016"}, {"body": "vue replaced want make sure child components also mounted use source", "d": "10/2017"}, {"body": "drasnop wrong guarantee", "d": "4/2018"}, {"body": "drasnop fires well children rendered use case rendering array objects vuex store nt know matters fyi anyone else seeing thing", "d": "5/2018"}, {"body": "components updated", "d": "7/2018"}, {"body": "matthewmorgan thing using getter load data store using vfor template get problem resolved", "d": "7/2018"}, {"body": "piotrgulbis matthewmorgan uthpala coolcorey made little work around solution bit tricky works put code end function ends task ex example pushes callback event queue finally execution stack empty view rendered callback called", "d": "7/2018"}, {"body": "relevant rollupjs documentation sourcemaps", "d": "5/2016"}, {"body": "reason debug issue production using nonminified version development", "d": "5/2016"}, {"body": "track bugs occur production use minified version vuejs seems almost universal practice libraries frameworks jquery angular include source map minified production version file also trivial accomplish build stage thanks", "d": "5/2016"}, {"body": "included future releases", "d": "5/2016"}, {"body": "could provide details expecting general nt replacing root data instead update properties within", "d": "5/2016"}, {"body": "fixed suggest avoid accessing properties like either pass props reference via object nested", "d": "5/2016"}, {"body": "alright thanks swift replies case wondering bug caused misconceptions instance data", "d": "5/2016"}, {"body": "thinking believe replacing instance something users simply avoid makes reactive properties vm instance indeterministic prohibited users always trigger changes setting proxied property vm instead particular use case wontfix since pretty straightforward workaround", "d": "6/2016"}, {"body": "examples trying compose mixin approach pourly designed yet place mixin need reach vmdata elements extends common behavior posible instead define private object mixin share behavior data component mixin", "d": "7/2017"}, {"body": "nt like idea runtime mixins makes components behavior unpredictable depending mixins applied merging data merging options totally different concepts data perinstance state options like class definition component merging data recommended replace original object new data", "d": "5/2016"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile question think calling instead", "d": "5/2016"}, {"body": "hello thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described also try use latest stable version please", "d": "5/2016"}, {"body": "need use csp build csp without", "d": "5/2016"}, {"body": "thanks guide want say firstly asking detailed info error shown developer", "d": "5/2016"}, {"body": "information always installation page vue detect whether function generation failed due invalid expression csp policy", "d": "5/2016"}, {"body": "see code find error caught handler nt get message warn message wrong new function execution thu may evan notifications githubcom wrote information always installation page vue detect whether function generation failed invalid expression csp policy receiving mentioned reply email directly view github \u8ffd\u968f", "d": "5/2016"}, {"body": "right added", "d": "5/2016"}, {"body": "thanks thought would put error caught warn called think stretchable", "d": "5/2016"}, {"body": "native element", "d": "5/2016"}, {"body": "button ok", "d": "5/2016"}, {"body": "fyi indent level lead fixing thanks reporting", "d": "5/2016"}, {"body": "hook", "d": "5/2016"}, {"body": "use moment fix issue let come back better answer", "d": "5/2016"}, {"body": "components compiled documentfragment inserted use one workarounds mentioned btw also seems like bad idea access outside dom within component", "d": "5/2016"}, {"body": "posva thanks got workaround works twiknight workaround catch component ready function access function defined directive bind function right good idea access outside dom within component situation reasonable access parent within component thanks great effort", "d": "5/2016"}, {"body": "cnweibo mean move function directive function use mixin another way define event listener component emit event mounted", "d": "5/2016"}, {"body": "twiknight thanks got point first proposal move function directive read function catch yet annoying problem make sure vlogsomething directive attached element dom raise question want vlogsomething directive used anywhere access information parent element thanks", "d": "5/2016"}, {"body": "cnweibo sorry made typo mean hook declare mixin use way javascript const myoptions options mixins logmixin const mycomp vuecomponent myoptions see", "d": "5/2016"}, {"body": "twiknight thanks got", "d": "5/2016"}, {"body": "someone elaborate best method resolving issue vue running similar issue however ca nt get access vue instance within directive scope window object instead vue instance someone able clarify best way achieve waiting target instance component ready state directive use appropriate context gain access vue instance", "d": "2/2017"}, {"body": "vue directives changed lot hook signatures different access vm third argument hook old workaround still needed want access vm directive", "d": "2/2017"}, {"body": "thank prompt reply helps thought tested argument bind obviously missed sub issue ultimate goal aiming searched pretty extensively pretty new vue nt many directivescomponents concepts ultimately trying add custom directive component building custom directive plugin would like incorporated component behavior able get work basic html structure simple vue instance however confusion arises integrating custom directive component html template definition trouble directive accessing vue instance attempting bind directive assuming need define directive within props component define within able instantiate using vnode still able get work need little understanding custom directive communicates component props indeed directive behavior appropriately translated components directive approach incorporating libraries components even appropriate way anymore better approach unaware exists suitable task thanks help", "d": "2/2017"}, {"body": "fixed", "d": "5/2016"}, {"body": "arrows work design incorrect use defining methods use enhanced object literals instead", "d": "5/2016"}, {"body": "thanks", "d": "5/2016"}, {"body": "moment alpha api may could likely change official support available plugins currently subject change ported work use risk however would certainly recommend waiting rc version aiming bring beta soon tests plugin updates complete", "d": "5/2016"}, {"body": "recommend using latest vue version carefully read vue features make migration easy possible", "d": "5/2016"}, {"body": "nonstandard property used tools node starting discuss official support modules wait something standarized", "d": "5/2016"}, {"body": "ok", "d": "5/2016"}, {"body": "fixed using new instead", "d": "2/2017"}, {"body": "rpjohnst docs web official npm field convention", "d": "3/2017"}, {"body": "ryanve place ran seems convention shared among several bundlers", "d": "3/2017"}, {"body": "rpjohnst cool thanks", "d": "3/2017"}, {"body": "yes part feature", "d": "5/2016"}, {"body": "use template resolve problem", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "nt tell writing template way", "d": "6/2016"}, {"body": "nt use interpolation inside attributes otherwise browser try fetch vue even changes", "d": "6/2016"}, {"body": "write like works", "d": "2/2017"}, {"body": "raychenfj works", "d": "8/2017"}, {"body": "testing attribute seems vue nt render dom binding datacomputed values eg underlying data got work cc posva", "d": "8/2017"}, {"body": "different tag", "d": "10/2017"}, {"body": "raychenfj pretty good", "d": "10/2017"}, {"body": "raychenfj provided elegant solution", "d": "11/2017"}, {"body": "raychenfj cool", "d": "3/2018"}, {"body": "wanted chime similar solution using nuxt framework vue setting mediastream thru vuex nt work using state webcam initiated thru button click nonchild component needed set mediastream video object component method runs click button toggle view well kick ended probably cleanest let constraints windowconstraints audio false video facingmode user since component need set source already createdmounted fired usual worked like wanted", "d": "6/2018"}, {"body": "please ask forum gitter thanks", "d": "5/2016"}, {"body": "great vue uses flow want use flow userland", "d": "9/2016"}, {"body": "blocka setup flow usual workflow please nt hijack issues questions", "d": "9/2016"}, {"body": "posva tried get issue vue type definitions nt worry already asked question gitter forum flow irc channel vue sources received response really find examples people uses flow vue irc channel basically seems need publish flow definitions people use", "d": "9/2016"}, {"body": "already replied post forum seems load vue src", "d": "9/2016"}, {"body": "linusborg check forum nt get notifications nt realize somebody answered continue discussion", "d": "9/2016"}, {"body": "plan bring tightly integration flow userland particularly interested plan bring static type checking components especially props computed way flow integrates well react box", "d": "12/2016"}, {"body": "saw certain features available standalone build mean npm version significantly different", "d": "5/2016"}, {"body": "rekateka standalone build means compiler runtime default export npm package runtime installing npm likely precompile templates build tool", "d": "5/2016"}, {"body": "thanks still couple questions regarding compiler features used forum", "d": "5/2016"}, {"body": "worrisome changes made docs review chance great work keep man redefining web development thank", "d": "5/2016"}, {"body": "get directive see two directives know use thank", "d": "5/2016"}, {"body": "banricho good point overlooked see updated directive function signature", "d": "5/2016"}, {"body": "first sorry quite sure could ask problem little bit requirements want say requirement hope design component usage like hope children kind arguments limit attributes make component usage like think quite good hope like one made react coverflow", "d": "5/2016"}, {"body": "andyyou question probably best posted forum since nt issue clear suggestion real help issue find requirements ca nt met vue forum thread open new issue scott", "d": "5/2016"}, {"body": "smolinari thanks", "d": "5/2016"}, {"body": "complex cases recommended introduce dedicated state management layer using vuex seems imply state used events see completely separate event moment time whereas state change could say could watch state also convey specific moment instead anytime something changes interested meaning behind recommendation", "d": "5/2016"}, {"body": "jrenton generally consider event system simply component telling component b change state telling b something else first case use state management managing shared state b instead using event system let tell b change state second case think handled event bus approach pretty well", "d": "5/2016"}, {"body": "jrenton instead soup components talking vuex suggest single channel components express intentions actions record facts mutations", "d": "5/2016"}, {"body": "using twig along vue vue passing data components like note twig tags vue using custom delimiters understanding things correctly vue like right", "d": "5/2016"}, {"body": "gholol actually seems old usage nt work first place", "d": "5/2016"}, {"body": "well worked fine like said data coming twig templating engine vue nt work trying pass like said without single apostrophes data property gets undefined error syntaxerror missing property list edit works forgot mention data variable string", "d": "5/2016"}, {"body": "jrenton idea motivation quite simple seems vue nt like react compel us use jsx choose lot hope use children element syntax parameter arguments pass args parent template language like bit many attributes say attr name quite long put things one line easier make code one line characters", "d": "5/2016"}, {"body": "feeling adventurous today wanted see much effort would take migrate unfortunately since possible use simple interpolation anymore would go something simple", "d": "6/2016"}, {"body": "inline templates work binding expressions", "d": "6/2016"}, {"body": "way get working nt mind saying regression lovely syntax got us used yes know assume interpolation removed performance reasons hope worth uglier syntax", "d": "6/2016"}, {"body": "oskarkrawczyk assume want end something like dom expression would render version proper fact", "d": "6/2016"}, {"body": "simplesmiler understood think spoiled bit", "d": "6/2016"}, {"body": "dynamically insert component like", "d": "6/2016"}, {"body": "bind values attribute depend expression example expect next result", "d": "6/2016"}, {"body": "nervgh right place ask question use ternary expression", "d": "6/2016"}, {"body": "simplesmiler thanks answer try say objectsyntax useful cases work expect", "d": "6/2016"}, {"body": "nervgh object syntax applicable attributes take list strings native attributes attribute components would way detect child side whether meant send list strings proper object", "d": "6/2016"}, {"body": "deprecated nt break really common design patterns ca nt think able simple components handling form fields without simple components different form field types eg textbox component template also complex component lists provides ui add remove elements arrays data structure use components eg like note components two props node data structure edited component responsible providend ui editing node massive static data structure contains typesfields hierarchy stuff like work without seems would severely complicate things create sort messaging system components subcomponents somehow communicate parent subcomponent parent figure part data structure modify really hope missing something looks like saying using components create editors parts data structure antipattern whaat far thing used vue guessing think removing feature encourage people write cleaner code maybe effect people many people write much nastier code work around limitation modifying state useful thing computers please continue make easier", "d": "6/2016"}, {"body": "jasonwoof work custom components component simply needs expose prop named emit event value needs synced parent eg see example", "d": "6/2016"}, {"body": "thanks explanation link stuck remove nt see advantage disadvantages example linked shows achieve thing either see disadvantages vmodel method requires significant boilerplate subcomponent side complicated learn etc pass one value vmodel multiple props nt see switching vmodel makes anything clearercleaner cases indication parent child component easily modify parent state syntax prop template would even argue clear thing pass objectsarraysetc props mutable child component ca nt shield programmers able change state child components case assume common seems like introducing stumbling block removing thing makes passing string values works passing object values makes code simpler consistent always data props writable child side matter data type new vuejs days ago see far vuejs valuable mainly two things easy dom manipulation templates automatic valuedata change propagation including triggering template changes least discovered far seems removing makes difficult get vuejs consistently second", "d": "6/2016"}, {"body": "jasonwoof explicit vs implicit side effects outside components scope makes difference long term maintainability", "d": "6/2016"}, {"body": "one could argue people simply learn use experience far different people tend rely much create code later hardly debug design decision force people right beginning example sync value parent child well decide hey value changes need something parent create function nice later realize watcher seems fire nt want ca nt really tell ca nt really put anywhere trace behaviour much hard thinking realize really want something happen value changed parent child grandparent try find way differenciate scenarios function somehow realize makes simple thing complicated end someone tells us remove sync throw away use oneway prop emitted event handle situation code becomes simpler explicit simple reason data flows becomes easier debug bug found quickly move becomes even crazy sync one level deep anti pattern seen forums gitter chat removing forces people write clear explizit maintainable code start code wo nt stay simple enough long time", "d": "6/2016"}, {"body": "ok thank explaining good hear problem trying solve seriously doubt help though make people ca nt easily break patters like people far worse things work around limitations reminds lot abstraction abstractions get us much trouble make code hard read hard debug etc ca nt fix taking away ability make abstractions pretty much thing makes programming possibleuseful solution language framework level teaching advice learning encourage people make things overly abstract sounds like talking design philosophy many cases great philosophy keep mind coding imposed limitation programmer thinks limitation stops needs going work around result problems trying avoid worse people going stop trying mutate parent state children ca nt force people thing complicated enough would work around problem passing parent objectarray key child modify guess last bit hit heart trying get across personally see lack problem work around use framework bet lot people approach perhaps goes without saying makes little angry people try impose design philosophies would much rather build things go terribly wrong learn use systems purposely withhold power fear might use badly", "d": "6/2016"}, {"body": "ps sorry ca nt help one comment leave guys alone programmers write code debug happens every programmer every language every framework programmers become better programmers make mistakes make code fix learn write things differently future please nt dumb framework everybody attempt make programmers abstract corner make stuff little bit confusingcomplex becomes mess ca nt debug", "d": "6/2016"}, {"body": "jasonwoof nothing dumbing preventing users common pitfalls ensuring better maintainability definition part job framework made decision based first hand experience designing using framwork observing user behavior various use cases antipattern discorage users using provide guidence idiomatic solution free disagree based personal opninion find arguments hardly convincing", "d": "6/2016"}, {"body": "people going stop trying mutate parent state children ca nt force people sure wo nt force may edge cases might still nessessary still access pass prop etc quite frankly much convient ing event time wo nt attractive sugar also etal part official guide users use actively working around suggested best practices free nt encourage behaviour consequently framework encourage similar behaviour providing magical syntactic sugar like feel feature misused scenarios opposed best practices framework seeks establish", "d": "6/2016"}, {"body": "\u5c24\u5927", "d": "6/2016"}, {"body": "compatibility look like vuerouter", "d": "6/2016"}, {"body": "changes needed compatible hoping better incorporate router vue", "d": "6/2016"}, {"body": "blakenewman get boilerplate template together vuecli ca nt seem get working", "d": "6/2016"}, {"body": "currently change changes needed vueloader make compatible currently used experimentation dependencies large scale applications updated", "d": "6/2016"}, {"body": "eta beta release candidates", "d": "6/2016"}, {"body": "evertt alpha due week beta follow documentation completed maybe support core extending libraries vuerouter ect release candidate beta proven successful", "d": "6/2016"}, {"body": "blakenewman thank quick concise complete response best", "d": "6/2016"}, {"body": "workaround vue", "d": "6/2016"}, {"body": "hi jsx already usable", "d": "6/2016"}, {"body": "reohjs would personally see real step backwards vue support jsx scott", "d": "6/2016"}, {"body": "reohjs evan stream last night mentioned could made plugin imagine goes beta would nt take long someone create happy core jsx plugin sounds like great idea", "d": "6/2016"}, {"body": "happy core", "d": "6/2016"}, {"body": "yeah plugin however seen templates lot benefits standard components", "d": "6/2016"}, {"body": "jsx compilation easy achieve plugin think function would replacement", "d": "6/2016"}, {"body": "providing interface create custom vmodel modifiers way replace way filters seems already used parse user input example parsing formatting simple independent specific data property using modifier would allow parsingformatting reused much less boilerplate setting computed property individual data property creating new component input type want parsingformatting applied", "d": "6/2016"}, {"body": "hi currently working plugin support vuejs directive using wondering migrate code since deprecated directives longer instances better approach directive javascript import languages srcpluginstranslatelanguages import translateutils srcpluginstranslateutils const translatedirective terminal true params translaten translateplural paramwatchers translaten function thistranslate isplural function return translaten thisparams amp amp translateplural thisparams bind function thisboundtranslate thistranslatebind thismsgid thiselinnerhtmltrim thistranslate languageseventemitteron languageslanguagechangedeventname thisboundtranslate unbind function languageseventemitterremovelistener languageslanguagechangedeventname thisboundtranslate translate function let n thisisplural parseint thisparamstranslaten let translation translateutilsgettranslation thismsgid n thiselinnerhtml thisvm interpolate translation export default translatedirective", "d": "6/2016"}, {"body": "throwing short words since new vue say happy see reduction api general underthehood helpers javascript really powerful already computed properties plus reactive features framework almost everything achieved kudos next release", "d": "6/2016"}, {"body": "kemar familiar gettext would simply extend vueprototype translate method", "d": "6/2016"}, {"body": "ability register assets array syntax removed working alpha wondering intentional ie know shorthand looks similar scenarios array syntax useful", "d": "6/2016"}, {"body": "see mention wondering easy would make vue nativescript talk", "d": "6/2016"}, {"body": "something along lines nativescript vue would either weex mentioned quasar scott", "d": "6/2016"}, {"body": "longer generic child component inform parent eventchange nt seem fit pattern global bus vuex use case use range slider search filters range slider component generic child several different search filters currently use range slider finished sliding parent knows trigger search based change", "d": "6/2016"}, {"body": "jrenton inline listeners", "d": "6/2016"}, {"body": "great job guys point view changes say best approach create component tree based one way flow much simple easy debug maintain without data truthness would inverse proportional far top component", "d": "6/2016"}, {"body": "want say makes happy", "d": "6/2016"}, {"body": "expected added list release curious issue still open", "d": "6/2016"}, {"body": "zephraph yes continuously updating list make updates api nothing huge far occasional breaking changes previous alphas", "d": "6/2016"}, {"body": "case used event dispatching past stuck vuex parent component list child components child dispatching event value changed parent able something reaction change tried array child values vuex store thing child component know getter action element array needs update far see vuex provide functionality dynamically get trigger mutuation value wrong would best way handle case without event dispatching", "d": "6/2016"}, {"body": "removed would tell direct child something particular thing happens would scenario data actually changed reactive props nt seem fit could use prop pass timestamp random data watch prop child seems strange global event bus would require generation unique ids child reacting events parent instance parent component child parent listen using inline listener anything way round could pass instance emitter via prop child sound terrible", "d": "6/2016"}, {"body": "gwildu actions take arguments pass item id along action instead making item component fetch corresponding item store fetch list parent pass item data item component prop items locally unique ids generate one item created received api time cuid good enough", "d": "6/2016"}, {"body": "fergaldoyle due parent always knowing children put child get reference child vm either call method directly however would advise rethinking architecture case events flowing make component really hard reason", "d": "6/2016"}, {"body": "playing around vuejs noticed snabbdom pass render function get headlinea paragraph vuejs get way modify text content inside", "d": "6/2016"}, {"body": "dubcanada pass children", "d": "6/2016"}, {"body": "right would make sense thanks", "d": "6/2016"}, {"body": "hi question transition system vue rather proposal nt see plans vue vue often encountered need detect transitionanimation set would end using settimeout hacky ugly way agree question vue way detect end css transition use transition combined vshowvif possibly via event would happy see something like next vue release thanks hearing", "d": "6/2016"}, {"body": "sqal transition hooks", "d": "6/2016"}, {"body": "dubcanada supported next release omitting data creating element", "d": "6/2016"}, {"body": "thanks fergaldoyle simplesmiler hint emit aware parent able listen events emitted child course makes sense listen nonbubbling event", "d": "6/2016"}, {"body": "hi bit background working webgl would like interfaces surface means need render interface example canvas convert content canvas texture working angular react vue vue makes sense reading react came across reactcanvas project interesting thing instead transforming virtual dom real dom nodes draw canvas vue also using virtual dom wondering something like done well", "d": "6/2016"}, {"body": "hello clarification removing generic workflow handling props generic component might look like going recommended way tracking prop basic case seems surely relies parent component returning value prop component gets reflects recent change mean need something like seems like lot boilerplate handle passing changing value notifying parent value changed tracking change internally case change nt propagated back parent missing bit vue magic reactivity also chance lot props handle could get quite complicated could almost see working wrappercomponent children access order mutate directly wrappercomponent handling propscomputedwatches", "d": "6/2016"}, {"body": "towerful exactly mean tracking value want setter style instead explicit power oneway flow parent decide apply change requested child mark child hold apply change later eg checking back server", "d": "6/2016"}, {"body": "simplesmiler using computed property allows bind template use setter amp getter contained place makes easy go see functionality value gets updated opposed different ways access value mutate value within component scattered throughout code using explicit way within model using setters seems like object going cluttered type methods template opposed actual methods guess applies user selects option component component relies value show selected relying parent component passing back component able unless user selects option trigger component display update manually seems moving away vue reactivity internal value track template react use settersgetters wrap property track internal changes amp raise external events watch property update internal value changed externally perhaps struggling get head around new way", "d": "6/2016"}, {"body": "towerful nt one scott", "d": "6/2016"}, {"body": "towerful seems describe essentally components act like inputs user changes value ui want change reflected bound data immediatly types components use comonents myinputvue export default props value special prop received vmodel makes interface real elements custom input components essentially identical twoway binding complex components receive multiple props simple custom inputs abstract discourage using becomes hard reason situations parent decide value receives child data implicitly changed like provide example solvabel vmodel approach still beneftis using may better foundation discussion abstract theory", "d": "6/2016"}, {"body": "oh miss definitely op even discussion comments ago feel bit stupid could original post updated make little clear used component linusborg top head think case component would work missed part original post even complicated object components would matter nesting components reenforces single responsibility components makes lot sense", "d": "6/2016"}, {"body": "towerful using thing synchronous way crosscomponent data flow inherently asynchronous watcher queue demo seen confuse lot people oneway flow makes explicit props synchronous forces rely synchronous trying trick way around cluttered methods simple cases always complicated cases good thing method adjust state keep consistent eg trigger updates manually segway next point moving away reactivity nt agree statement simple cases nt need magic make child pick value updated complicated cases props would use explicit really part reactivity escape hatch trigger manual updates expressed computed good one react changes synchronously like computed using heavily may find data updates taking ticks propagate ever stumbled upon directly nested know talking handler provides better escape hatch letting complicated model changes applied synchronously simultaneously asynchronously child expresses intent making sure child receive updated values next tick receive inconsistent state", "d": "6/2016"}, {"body": "could implement way listen emits similar events dispatch broadcast feels vuejsesque something along lines listen vuecomponent cart template carttemplate data return quantity watch quantity function quantity oldquantity consolelog quantity changed oldquantity quantity new vue el container data function return quantity cartquantitychanged function newquantity consolelog quantity change emitted computed gold function return thisquantity basically would automatically attach global bus", "d": "7/2016"}, {"body": "event busses pattern want encourage useful edge cases generally store pattern like vuex preferred implementing api makes using bus easier feels officially supported would wrong signal looking example stored quantity store accessed components events would nessessary computed property component would update automatically simple example code without using real store solution like vuex var store cart quantity vuecomponent cart template carttemplate data return storecart new vue el container data function return storecart computed gold function return thisquantity", "d": "7/2016"}, {"body": "would say general idea make harder shoot foot sun jul thorsten l\u00fcnborg notifications githubcom wrote event busses pattern want encourage useful edge cases generally store pattern like vuex preferred implementing api makes using bus easier feels officially supported would wrong signal receiving commented reply email directly view github mute thread", "d": "7/2016"}, {"body": "kharysharpe intended listened child instance also added benefit able tap original context instance used", "d": "7/2016"}, {"body": "date release pretty excited changes congrats thinking using vue redux", "d": "7/2016"}, {"body": "sendoushi date yet final release beta may within week vuex also developed alongside feature much simpler api current vuex also integrates vue ecosystem much nicely redux", "d": "7/2016"}, {"body": "vuex also developed alongside feature much simpler api current vuex also integrates vue ecosystem much nicely redux chrisvfritz fantastic hear always felt current api bit overly unnecessarily complicated ended things like compensate js const mutations login state stateloggedin true logout state stateloggedin false export const types objectkeys mutations dynamically generate actions like rare anything complicated needed example export const actions typesreduce el gt var action eltolowercase camelize action dispatch args gt dispatch el args return", "d": "7/2016"}, {"body": "roadmap vue vuex planned release together one compatibilities different versions", "d": "7/2016"}, {"body": "relating question status vuerouter going get vue support soon vue testing need done without router", "d": "7/2016"}, {"body": "gwildu likely released somewhat together vuex support vue pre vuex still receive support vue longer supported uninen vue router receiving love next release vue", "d": "7/2016"}, {"body": "thanks nfo chrisvfritz", "d": "7/2016"}, {"body": "chrisvfritz uninen correction vuex also works vue next major version support vue", "d": "7/2016"}, {"body": "runtime build since nt include compiler need either precompiled templates compile step manually written render functions way precompile templates without using vueifyvueloader files would good idea babel plugin transform properties functions components", "d": "7/2016"}, {"body": "", "d": "7/2016"}, {"body": "possible create terminal component elementdirective gone", "d": "7/2016"}, {"body": "mentioned vmodel longer cares initial inline value always treat vue instance data source truth consider deal checkbox arrays custom components updated solved transfer prop child component parent component get inline value via emit event parent component tell value changed compiler compiles directive according compiler generate prop bind event updated however life cycle hook nt trigger due directly changes attribute means ca nt get event native html checkbox component modifying value trigger event changes", "d": "7/2016"}, {"body": "yunsuncn way able get around issue add property specific value ala val use set actual value emit changes vmodel input event", "d": "7/2016"}, {"body": "johnleider wrote custom directive simulate way generate models strict way checking prop checking element tagname otherwise another custom component prop may overwrite default model behaviour", "d": "7/2016"}, {"body": "hi know release date", "d": "7/2016"}, {"body": "thanosalexander decided date yet introduced major breaking changes transition system throughly tested still couple weeks think release opinion", "d": "7/2016"}, {"body": "oki go dont think step stable big thank", "d": "7/2016"}, {"body": "docs one reason vue early adopted documentation reason holding back saw issue following docs nt see getting close get finished soon probably ignoring much going hood reason rising question", "d": "7/2016"}, {"body": "plans implement transitionmode outside component switching", "d": "7/2016"}, {"body": "miljanaleksic docs ready officially released still beta follow progress documentation even contribute", "d": "7/2016"}, {"body": "aristidesfl already done miljanaleksic adding linusborg mentioned new guide already complete even read source like keep mind though writing nt fully updated reflect changes significant peer review still come minor api changes considered unless want help fix typos improve explanations recommend waiting officially publish maybe rc stage also agree excellent documentation vital part vue even dan abramov react team loves docs one personal goals docs even better meantime though anyone wants learn early recommend feature unit tests uptodate resource available one primary resources writing documentation generally quite readable familiar jasmine", "d": "7/2016"}, {"body": "thanks chrisvfritz useful information give new docs shot taking consideration wip feedback required time get serious vue", "d": "7/2016"}, {"body": "render function using nt seem handle arrays like snabbdom way pass data called functions example snabbdom use get first argument seems error vuejs beta way pass data amp event using create element", "d": "7/2016"}, {"body": "dubcanada event handling vue different snabbdom curry function array syntax simply attaches multiple handlers event", "d": "7/2016"}, {"body": "trying get slots content string instead rendering standard nodes easy workaround vnodes nt found way workaround", "d": "7/2016"}, {"body": "miljanaleksic try rendering getting element content hiding element css", "d": "7/2016"}, {"body": "thanks help render final output would different creating component wrap child contents tag encode html", "d": "7/2016"}, {"body": "case render output different element original though make point templating nt way writing content way describing content written content recommend storing text string js resource somewhere else project especially user input kind passing child prop make things thousand times easier anyway", "d": "7/2016"}, {"body": "right kingdaro best nt mix concepts keep simple nice syntax hihgligthig though", "d": "7/2016"}, {"body": "using directive variable available anymore nt see reference change bug missing reference", "d": "7/2016"}, {"body": "miljanaleksic use", "d": "7/2016"}, {"body": "must php dev like know feel lol scott", "d": "7/2016"}, {"body": "smolinari embarrassed one haha made self believe already tried seems nt well enough working thanks sorry waisting time open ticket another issue sure anymore using registered component element available immediately something like would work time foo getting rendered still undefined vue working expected missing time", "d": "7/2016"}, {"body": "missing pass dom elements component instances props", "d": "7/2016"}, {"body": "bad idea let say dropdown component want connect button trigger independent components instead connecting query passing reference directly", "d": "7/2016"}, {"body": "miljanaleksic even better connect via state openclose state maintained common parent parent pass state dropdown prop parent listens button event toggle state way dropdown button completely decoupled button reused control types components dropdown controlled types input components", "d": "7/2016"}, {"body": "easy get rid old habits blame jquery mainly approach evan correct go way even means dropdown integration would tedious parent component would know listen different events opening closing dropdown clicked outside dropdown self etc many events workarounds dropdown solving", "d": "7/2016"}, {"body": "parent component would know listen different events opening closing dropdown clicked outside dropdown self etc many events workarounds dropdown solving still totally dropdown component register outside clicks etc dropdown simply emit close event parent someone clicks outside eample", "d": "7/2016"}, {"body": "yep yep time refactor components thanks everyone awesome community", "d": "7/2016"}, {"body": "one apply component took look generated code using template compiler lot code nt quite understand documentation directives default compiletime directive extract directive directive present runtime want directive also handled runtime definition return true transform function", "d": "7/2016"}, {"body": "blocka nt access builtin directives using function handle equivalent logic example ternary expression expression normal element translated binding event listener", "d": "7/2016"}, {"body": "figured probably wind handled hoc already handing conditionals way although thinking using", "d": "7/2016"}, {"body": "vue two stated advantages vuex vs redux performance better vuex mutates state works best vue replacing old state performance equivalent dirty checking vuex aware vue application using virtual dom mitigate", "d": "7/2016"}, {"body": "blocka mitigate overall perf still much better redux changed granularity reactivity let make comparison vue reactivity finegrained every directive every text binding corresponding watcher results finegrained updates data changes cost dependency tracking overhead initial render slightly higher memory usage redux reactivity granularity whenever anything changes whole app needs rerendered react redux binding optimization connected containers user still needs extensively implement gain better performance vue reactivity medium granularity component corresponding watcher keeps track component dependencies data changes components depend change need rerender virtual dom essentially best case scenario react nt need anything achieve vue generally see compared slightly slower still fast updates small data changes decently faster updates medium large data changes significantly faster initial render", "d": "7/2016"}, {"body": "hey nt get transitions animatedcss work somebody idea", "d": "7/2016"}, {"body": "prop names wrong camelcase vs kebapcase still applies", "d": "7/2016"}, {"body": "linusborg sorry already tried small fiddle css transitions name tag works fine", "d": "7/2016"}, {"body": "using component component visibility modifiers used eg component emits event event emitted dependent whether modifier used", "d": "7/2016"}, {"body": "fergaldoyle played little think ca nt use vmodel modifiers custom element since need manually emit input event want achieve lazy behavior need bind event input eg", "d": "7/2016"}, {"body": "calebboyd use put element", "d": "7/2016"}, {"body": "fergaldoyle according docs think vmodel would react instead use change behavior emit give different results depending whether given", "d": "7/2016"}, {"body": "scratching head playing around simple example reason binding nt working elements also probably noted docs vfor ranges like start instead", "d": "7/2016"}, {"body": "lauritzen scratching head playing around simple vfor example reason value binding nt working select elements seems work expected working", "d": "7/2016"}, {"body": "public service announcement encourage ask support questions forum gitter issue reserved discussions new api handle support various questions get hand thank", "d": "7/2016"}, {"body": "vm get deprecated vueget instead useful evaluating computed exressions like", "d": "7/2016"}, {"body": "iagafonov lot scenarios useful therefore part core need functionality one scenarios easily add similar behaviour help eg lodash js import get lodashget vueprototype get get component var value get thissomeobject somepathtovalue course could also add class method vueget simply import locally need choice", "d": "7/2016"}, {"body": "linusborg first nt use lodash something like secondly lodash implementation slow runtime try deep exression structure vue complies new specified function parseexpression binded scope itis trivial part difficult reimplement course get compile function every time nice parseexression part api vueutil example", "d": "7/2016"}, {"body": "iagafonov also parse path runtime retrieve value dynamically otherwise get error path exist also perf difference negligible cases nt want lodash plenty path retrieval libraries nt part vue concern anymore", "d": "7/2016"}, {"body": "alternatives deprecated param attributes", "d": "7/2016"}, {"body": "talking params directive find binded attributes inside vnode object click bind el binding vnode vnodedataattrs gt color red", "d": "7/2016"}, {"body": "sqal reply question talking param attributes lazy number debounce instance prior could number param attribute get results without using param attribute", "d": "7/2016"}, {"body": "padams mentioned post modifiers", "d": "7/2016"}, {"body": "find vue props change render function always called wonder support decide whether rerender", "d": "7/2016"}, {"body": "okay see post", "d": "7/2016"}, {"body": "hechentao evan explained little bit", "d": "7/2016"}, {"body": "hechentao thhe render function always called required vue need reactivity reactive data used component changed willl trigger render function vdom diffing none data changed update nessessary render function called", "d": "8/2016"}, {"body": "thing done react mobx fairly certain nt implement however like vue mobx insists mutable state reason bought immutable state concept case react back mean somebody insists immutable state vue going good match", "d": "8/2016"}, {"body": "context argument functional components plus find little bit confusing knowing exactly makes wonder correct approach probably children slots lazy still supporting two different ways getting behaviour functional components functions thus nt childrens imho childrens deprecated keep slots lazy", "d": "8/2016"}, {"body": "blocka implement reactive data react mobx true reactivity core vue functionality one cup tea person wrongparty", "d": "8/2016"}, {"body": "miljanaleksic raw get every node regardless slot go resolved based names incoming children", "d": "8/2016"}, {"body": "thanks maybe details docs would avoid confusions chrisvfritz", "d": "8/2016"}, {"body": "miljanaleksic add note", "d": "8/2016"}, {"body": "regarding filters using computed property seems straightforward enough handle case using filter vmodel one wants filter list names typing input field done", "d": "8/2016"}, {"body": "thoughts vue warn data field computed property nt used template imagine limitations super helpful know could afford pulling useless store imports nt needed", "d": "8/2016"}, {"body": "think setting reference component prototype found self often accessing context currently available object", "d": "8/2016"}, {"body": "actually nt seems reliable way access context done", "d": "8/2016"}, {"body": "miljanaleksic share use cases frequently accessing context", "d": "8/2016"}, {"body": "kingdaro open issue sounds good feasible", "d": "8/2016"}, {"body": "padams still use computed property", "d": "8/2016"}, {"body": "chrisvfritz basically workarounds example set variables context child expecting set ref component earlier vue self agree common least reliable way access within component vnode present component mounted using templates least conclusion far would content knowing access proper way", "d": "8/2016"}, {"body": "another situation would useful reusing component root another component html name bar example would return component foo instead bar si correct parent child dependent direct communication could context", "d": "8/2016"}, {"body": "miljanaleksic leave one would say like reaching probably wrong way time think probably never use", "d": "8/2016"}, {"body": "situation transitions scenario modal default display none css combined would never shown becasue directive removes display property css ones persist ca nt change css project requirements ca nt use custom directive seems vue transitions relies specifically thinking directive evaluate right vshow could set display property block need try anyway could good idea add modifier vshow allow setting display block inlineblock thought", "d": "8/2016"}, {"body": "chrisvfritz expected functional components parent reference immediate parent used slots context component instead", "d": "8/2016"}, {"body": "compilation template fails contains lt possibly htmlsensitive characters worked escaping lt lt solves issue", "d": "8/2016"}, {"body": "glurg expected escape lt properly", "d": "8/2016"}, {"body": "want use transitions list components type keep state following docs see components different lets say tab component transition items ca nt find way", "d": "8/2016"}, {"body": "miljanaleksic single element need multiple items", "d": "8/2016"}, {"body": "tried one well still nt see achieve transitiongroup works addingremoving elements components would inited losing state beside idea tab show one component time exactly list", "d": "8/2016"}, {"body": "linusborg appreciate help solution obvious know transitions applied ca nt figurate transitioned components created new issue clarity sake jsfiddle example components created time", "d": "8/2016"}, {"body": "thank much improving keepalive feature works expected literally changing life products works ethics able learn build deliver products long time standby keep simple approach high tech available everyone use build upon eternally gratefull", "d": "8/2016"}, {"body": "miljanaleksic patreon campaign wink wink", "d": "8/2016"}, {"body": "know phanan totally right started supporting evan personally soon company products start giving results make sure support becomes noticeable", "d": "8/2016"}, {"body": "lifecycle hook deprecated favor according changelog guarantee component rendered mounted called causes sporadic errors want initialize certain jquery components like selectize component initialized lifecycle hook use instead ready hook emulated like", "d": "8/2016"}, {"body": "glurg yes work way also nessessariy many cases", "d": "8/2016"}, {"body": "reason ca nt hook regardless also across even resorted things like looping raf check dom etc aug pm thorsten l\u00fcnborg notifications githubcom wrote glurg yes work way also nessessariy ready many cases receiving mentioned reply email directly view github mute thread", "d": "8/2016"}, {"body": "using render functions core directives ignored reasonable easy reproduce using plain js workarounds probably solves edge case issues makes reconsider using template instead thats possible best option situations docs could definitely offer guidance topic besides could good idea helper working render functions would help solving common situations make one miss template", "d": "8/2016"}, {"body": "miljanaleksic sorry deleted comment noticed works vshow custom directives yeah said case vmodel required add inputchange listener update data manually", "d": "8/2016"}, {"body": "new hook supposed called route fired activatesmounts im seeing behavior currently", "d": "8/2016"}, {"body": "wprater solely related nothing else", "d": "8/2016"}, {"body": "im wrapping routerview keepalive seem find hook route back pervious view called need certain dom rendered", "d": "8/2016"}, {"body": "wprater please avoid using thread unrelated questions bug file issue corresponding repo reproduction", "d": "8/2016"}, {"body": "vue jsx support object spread operator tried nt work", "d": "8/2016"}, {"body": "put lot effort get working works documented", "d": "8/2016"}, {"body": "blocka thanks thought property name needed", "d": "8/2016"}, {"body": "options nt support array type work eg javascript var parent vueextend name parent template var child vueextend name child template hello new vue el app components parent child replace false template bug", "d": "8/2016"}, {"body": "qingweili simply supported anymore since never officially documented feature reason write", "d": "8/2016"}, {"body": "small suggestion chance normal array iteration use range use make sense users coming php even consistent jq js", "d": "8/2016"}, {"body": "rc stage api change anymore wo nt introduce alternative syntax thing either nt think mental overhead significant enough warrant", "d": "8/2016"}, {"body": "new version would handle case calendar component coming semantic ui uses classic text input show date human format like july example using twoways filter convert string proper date object data directly ready submit since filters wo nt work anymore vmodel could thing thanks", "d": "8/2016"}, {"body": "shadowrr would possible see code", "d": "8/2016"}, {"body": "padams sure go first filter use vmodel calendar input purpose write value change proper date type data postgres date would use like component input calendar system return date human readable format start date", "d": "8/2016"}, {"body": "recommend reading post discusses twoway filters also may better ask questions", "d": "8/2016"}, {"body": "missed post talking gon na see thanks", "d": "8/2016"}, {"body": "hi doubts new life cycle hooks want register event handler mounted deregister unmount make work add checks amp logics created amp beforedestroy hooks vue would use attached amp detached hooks mounted hook unmount hook feels bit corresponding reason unmount hook provided", "d": "8/2016"}, {"body": "corresponds counter parts need indom check events nt care indomoffdom appropriate places", "d": "8/2016"}, {"body": "used custom component von listens custom events emitted component longer listens dom events may missed posts design decision behind would make binding simple click events components verbose", "d": "8/2016"}, {"body": "fnlctrl use native modifier", "d": "8/2016"}, {"body": "miljanaleksic thank much think modifier added issue", "d": "8/2016"}, {"body": "could use koa server problem koa", "d": "8/2016"}, {"body": "js import vue vue vuecomponent expanding functional true render createelement children const data props name expanding beforeenter el elclasslistadd collapse consolelog beforeenter enter el elclasslistremove collapse elclasslistadd collapsing elstyleheight consolelog enter afterenter el elclasslistremove collapsing elclasslistadd collapse consolelog afterenter beforeleave el elclasslistadd collapsing elclasslistremove collapse elstyleheight consolelog beforeleave leave el consolelog leave afterleave el elclasslistremove collapsing elclasslistadd collapse elstyledisplay none consolelog afterleave return createelement transition data children call enter hook", "d": "8/2016"}, {"body": "fundon ask question forums gitter chat", "d": "8/2016"}, {"body": "locking thread api freeze rc document longer updated many people using general faq thread bug please open separate issue following issue reporting guide question please use forum gitter", "d": "8/2016"}, {"body": "update definitive detailed list changes see new migration guide", "d": "9/2016"}, {"body": "make function bare unthrottled function make computed property returns wrapped version javascript var vm new vue methods socket function consolelog thissocket computed throttledsocket function return throttle thissocket vmthrottledsocket vmthrottledsocket vmthrottledsocket vmthrottledsocketcancel", "d": "5/2016"}, {"body": "sirlancelot thank much sir", "d": "5/2016"}, {"body": "examples using combination watcher hoping something like following would work method fires throttled computed throttleupdates return throttle thisupdatefilters thisthrottle", "d": "8/2016"}, {"body": "need computed method seems work way op posted except debounced method lacks cancel method", "d": "4/2018"}, {"body": "im sure figured moved know longer issue", "d": "4/2018"}, {"body": "oh nt actually talking problem spent almost hours figuring debounced function lacks cancel method debounce works otherwise fine need use computed trick want use cancel method debounced function know fix still idea needs done way bit obvious imo example codepen", "d": "4/2018"}, {"body": "vue wraps functions bound function defined properly wrapped function nt contain method even likely going work properly component used multiple times page using computed property ensures debounced method created component instance", "d": "4/2018"}, {"body": "makes sense thanks", "d": "4/2018"}, {"body": "hi please make sure ask question forums gitter chat keep questions issues smile", "d": "5/2016"}, {"body": "hello confirmation email signed github make sure email set public github profile also try change email forum profile questionyou confusing component resolution component instantiation instantiate component markup already resolved thus url known beforehand though make higher order component define url declaring component js var asyncexample function url return function resolve return vue vuecomponent asyncexampledata asyncexample adminpermissionsdata vuecomponent asyncexamplerules asyncexample adminpermissionsrules go ahead close usage question feel free post link forum get access", "d": "5/2016"}, {"body": "thanks quick response want", "d": "5/2016"}, {"body": "simplesmiler written following code test according proposal always pop following error help javascript scope issue sure thanks lot declare wrapper function url componentoptions object paramter function fetch data url within promise call resolve function following declare component control ajaxuseradd displayhide vif mechanism trigger shouldopenme true thanks", "d": "5/2016"}, {"body": "way still get received verification email login github account email public available think possibly signed forumvuejsorg days ago time github account expose email address", "d": "5/2016"}, {"body": "hi issue post thread forumvuejsorg solved manually update email forumvuejsorg still bug scenario first logged system github email set public forum never update even set github email public please know thanks", "d": "5/2016"}, {"body": "solved javascript closure feature", "d": "5/2016"}, {"body": "please file router issues vuerouter issue tracker also please provide live reproduction possible debug issue", "d": "5/2016"}, {"body": "got answer write deactive fun nothing remove deactive everything ok", "d": "5/2016"}, {"body": "props", "d": "5/2016"}, {"body": "note prop passed object array passed reference mutating object array inside child affect parent state regardless binding type using \u5b98\u7f51\u7684\u89e3\u91ca", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "cnweibo \u54c8\u54c8", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "\u8bf7\u522b\u5728 issue \u91cc\u804a\u5929", "d": "5/2016"}, {"body": "\u597d\u7684 \u5728 evan notifications githubcom \u8bf7\u522b\u5728 issue \u91cc\u804a\u5929 receiving mentioned reply email directly view github", "d": "5/2016"}, {"body": "jsonparse jsonstringify", "d": "8/2016"}, {"body": "inside", "d": "4/2017"}, {"body": "shuaibird", "d": "4/2017"}, {"body": "plasmatium", "d": "5/2017"}, {"body": "shuaibird", "d": "5/2017"}, {"body": "plasmatium event listener\u5728beforecreate\u51fd\u6570\u4e2d\u7ed1\u5b9a\u662f\u4e0d\u662f\u5408\u7406\u7684\u505a\u6cd5", "d": "5/2017"}, {"body": "shuaibird \u5728\u4ee3\u7801\u5408\u9002\u7684\u5730\u65b9", "d": "5/2017"}, {"body": "plasmatium \u6211\u5199\u7684immutableremove\u51fd\u6570", "d": "5/2017"}, {"body": "shuaibird", "d": "5/2017"}, {"body": "shuaibird plasmatium", "d": "4/2018"}, {"body": "bolelee", "d": "4/2018"}, {"body": "zhangquxi \u6211\u8bd5\u8fc7\u8fd9\u6837\u53ef\u4ee5\u66f4\u4f18\u96c5\u4e00\u70b9clone prop", "d": "6/2018"}, {"body": "ok replace line index replace index id vfor passed argument new id", "d": "5/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question chances trying method pass item method html itemtitle itemclicked help try using vanilla methods findindex find", "d": "5/2016"}, {"body": "oh sorry ok thank help", "d": "5/2016"}, {"body": "working expected take look use avoid always initilize data", "d": "5/2016"}, {"body": "thanks", "d": "5/2016"}, {"body": "could method editer using indexid without filtering personnes first cause index row current object probably something like click editer personneid instead get user id send personneobject click editer personne", "d": "5/2016"}, {"body": "nt work possible use index filterby select user use personneid backend yes html view want use index vuejs method editer editer function index", "d": "5/2016"}, {"body": "provide js bin", "d": "5/2016"}, {"body": "change click editer personne editer function pers thisinputnom persnom thisinputprenom persprenom thisinputid persid work correct index number current row list people c b sort list index b index c index backside index c index b index index correlate", "d": "5/2016"}, {"body": "yes ok thanks artfuld", "d": "5/2016"}, {"body": "great thanks artfuld going ahead close", "d": "5/2016"}, {"body": "works well together think last part could customized easily", "d": "5/2016"}, {"body": "nt probably never complicates project obvious gain project looking standalone reactive implementation check", "d": "5/2016"}, {"body": "fair enough thanks check", "d": "5/2016"}, {"body": "\u9884\u5148\u8bbe\u7f6e", "d": "5/2016"}, {"body": "\u7684\u503c\u662f \u4e3a \u4e00\u4e2a\u6709\u6548\u7684\u9ed8\u8ba4\u503c", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "related", "d": "5/2016"}, {"body": "duplicate", "d": "5/2016"}, {"body": "callstack", "d": "5/2016"}, {"body": "seems related", "d": "5/2016"}, {"body": "fixed", "d": "5/2016"}, {"body": "vue issue perse take look bin notice suffers problem best take explain would create element attribute set loaded memory played right away hence invisible video reason second video nt suffer bug actually invalid becomes valid vue interoperation", "d": "5/2016"}, {"body": "parsing template vue creates cached version memory without attaching dom seems attribute makes video play even dom unfortunately much vue deal instead autoplay start video component hook note wo nt happen vue longer cache real template fragments", "d": "5/2016"}, {"body": "thanks lot explanation", "d": "5/2016"}, {"body": "issue vue nuxt", "d": "12/2017"}, {"body": "probably issue reported recently", "d": "5/2016"}, {"body": "sqal issue thanks", "d": "5/2016"}, {"body": "appear issue works intended need detect changes object keys use watcher also please provide actual live reproduction issue persists", "d": "5/2016"}, {"body": "simplesmiler yeah actually checked vue related issue everyting seems working fine need use deep watcher", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "\u8981\u5206\u6e05\u5bf9\u8c61\u952e\u540d\u548c\u53d8\u91cf\u7684\u533a\u522b fri may \u5bae\u6ca2\u3068\u3082\u304b notifications githubcom wrote receiving modified openclose state reply email directly view github", "d": "5/2016"}, {"body": "\u8c22\u8c22\u5927\u795e\u767e\u5fd9\u4e2d\u89e3\u7b54\u95ee\u9898", "d": "5/2016"}, {"body": "", "d": "7/2016"}, {"body": "honest nt like idea vm state nothing whether validation failed suppose implement validation fails vm last valid value value hardly useful may incomplete user seeing screen basically nt see convincing use case vuejsvuevalidator warrant yet another extension already quite complex btw think better way handle validation shipping component works", "d": "5/2016"}, {"body": "thanks feedback got", "d": "5/2016"}, {"body": "side note actually achieve already using mixin nt recommend using though add loop props everywhere", "d": "5/2016"}, {"body": "see", "d": "6/2016"}, {"body": "designed work like think doc explains pretty well stands replace parent content basically using reverse still idea trying achieve reading explanation want insert plain text use", "d": "5/2016"}, {"body": "devboxr use place former defines box later defines content placed box", "d": "5/2016"}, {"body": "hi evansimplesmiler understand docs say great job writing saying use case allow work trying achieve simple component contains using component want repeat markup unordered list instead use slot contains list items placed appropriate slot inside component inside unordered list wrap anything else first would unnecessary markup secondly break see mistake jsbin updated example would guys approach", "d": "5/2016"}, {"body": "case question opened issue please adhere issue reporting guidelines", "d": "5/2016"}, {"body": "already allow ignore qq", "d": "5/2016"}, {"body": "avoid use tag wrapper could use instead html template slot content template slot content", "d": "5/2016"}, {"body": "think possible compiled inside scope compiled inside scope", "d": "5/2016"}, {"body": "please adhere contributing guide direct question gitter forum sure get lots help believe missing feature want request instead feel free modifyreword issue open new one thanks", "d": "5/2016"}, {"body": "fnlctrl", "d": "5/2016"}, {"body": "simplesmiler thanks", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "see style serious note people including feel comfortable productive writing javascript without semicolons disagree read however often viable team environment working project established code style requirements \u8bed\u6cd5\u957f\u5f97 clike \u4e0d\u4ee3\u8868\u5b83\u672c\u8d28\u4e0a\u548c c \u5f53\u7136\u5e94\u8be5\u52a0\u5206\u53f7 \u53ef\u4ee5\u52a0\u5206\u53f7\u4f46\u662f\u5927\u5bb6\u90fd\u4e0d\u52a0 scala ruby python swift groovy \u81f3\u4e8e\u8bf4 \u5f88\u96be\u603b\u7ed3\u4ec0\u4e48\u65f6\u5019\u52a0\u4e0d\u52a0 token \u6709 production return", "d": "5/2016"}, {"body": "fnlctrl said also type question nt belong please read contributing guide", "d": "5/2016"}, {"body": "\u6709\u9053\u7406", "d": "6/2016"}, {"body": "ca nt say better jquery docs jquery course idea applies inadvisable bind handlers events element sequence events triggered varies browser browser receiving two events others one doubleclick sensitivity maximum time clicks detected double click vary operating system browser often userconfigurable avoid must implement mechanism example utilizing nonetheless vue issue", "d": "5/2016"}, {"body": "try change value two fields see difference", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "\u5982\u679c\u60f3\u81ea\u52a8\u5c06\u7528\u6237\u7684\u8f93\u5165\u8f6c\u4e3a number nan nan \u5219\u8fd4\u56de\u539f\u503c \u4e0a\u9762\u7684demo\u662f\u52a0\u4e86number\u4f1a\u505a\u4e00\u4e2anumber \u548c", "d": "6/2016"}, {"body": "iframe load function var iframe thiscontentwindowdocumentbody points jquery object iframe var ifr documentgetelementbyid iframe contentwindowdocumentbody new vue el ifr data title title injected data components editable editablecomponent use native selector instead jquery selector jquery selector returns jquery object operated vue try code function invoked successfully", "d": "5/2016"}, {"body": "points document node jquery object iframe regardless even swap iframe documentgetelementbyid like code function still invoked codepen try code see function still invoked", "d": "5/2016"}, {"body": "check depends indocument check vue instance created main window contained within iframe document check failed use instead fix released", "d": "5/2016"}, {"body": "thanks man", "d": "7/2016"}, {"body": "\u4e0d\u8981\u7528", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "intentional allow styling slot elements", "d": "5/2016"}, {"body": "hi duplicate", "d": "5/2016"}, {"body": "please read docs use vueconfigdelimiters", "d": "5/2016"}, {"body": "hi evan nothing respect please take look code example guess miswrote question using delimiters configuration problem enforces use inline templates components well causes errors trying use js default vue able use delimiters", "d": "5/2016"}, {"body": "use new delimiters vueconfigdelimiters var mycomponent vueextend data function return innermsg hello template code ca nt resolved possible ignore delimiters component declaration", "d": "5/2016"}, {"body": "believe blame vuejs javascript want interpret expression think virtually impossible use syntax jsx similar problem class use classname", "d": "5/2016"}, {"body": "okay thanks figured nt intend blame vue way would interesting still use delimiters main view app default templates vue config globally", "d": "5/2016"}, {"body": "really boring visually would good took understand working example", "d": "5/2016"}, {"body": "codebryo really vue concern javascript syntax use plain strings concat instead template strings better yet nt use inline strings templates", "d": "5/2016"}, {"body": "vueconfigdelimiters new vue delimiters working vueconfigdelimiters vuecomponent message props body author created template author body created", "d": "3/2017"}, {"body": "anboo delimiter settings template string try changing js author js author nevertheless issues vuejs accepting new delimiter setting app uses properly parse template tag using templating engine render html page may need wrap block", "d": "4/2017"}, {"body": "actually vue checks element list common tags like suggested test triggered nonproduction environments warnings seems common tag list missing several tags though simply misunderstanding anything", "d": "5/2016"}, {"body": "need test white list included standard tags things need checking tag name list", "d": "5/2016"}, {"body": "please upgrade latest version still happens let know", "d": "5/2016"}, {"body": "version still happens", "d": "5/2016"}, {"body": "addressed ships", "d": "6/2016"}, {"body": "\u8bf7\u9009\u62e9 \u5bf9\u5e94undefined\u5457 \u8bf7\u9009\u62e9 \u5426", "d": "5/2016"}, {"body": "\u4e0d\u8bbe\u7f6e \u5c31\u884c\u4e86", "d": "5/2016"}, {"body": "select \u503c\u6bd4\u5bf9\u7684\u65f6\u5019\u7528\u7684\u662f match value", "d": "5/2016"}, {"body": "bummer restart chrome works sorry false alarm", "d": "5/2016"}, {"body": "related lines", "d": "5/2016"}, {"body": "please use cspcompliant build", "d": "5/2016"}, {"body": "ty", "d": "5/2016"}, {"body": "message suggests change please use issues ask simple questions like future", "d": "5/2016"}, {"body": "ok", "d": "5/2016"}, {"body": "nt work trying following getting error interpolation inside attributes deprecated use vbind colon shorthand instead simple vue making complicated unknown", "d": "10/2016"}, {"body": "got problem found solution yet", "d": "10/2016"}, {"body": "maybe read docs find complicated unknown", "d": "10/2016"}, {"body": "zjhiphop actually simple long read doc least migration guide normally fan using issue list support since saying complicatedunknown fiddle please note though doable nt mean setting id fly often unnecessary keep issue list clean locking discussion welcome open thread active forum", "d": "10/2016"}, {"body": "maybe try code people reuse", "d": "5/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "5/2016"}, {"body": "hi look vuefilter", "d": "5/2016"}, {"body": "rendered data objects key attempt add hidden key objects order track object frozen strategy used need explicitly use key case added warning", "d": "5/2016"}, {"body": "thanks submitted pr update documentation well", "d": "5/2016"}, {"body": "fixed dev branch working expected next release", "d": "5/2016"}, {"body": "fragment components", "d": "5/2016"}, {"body": "\u6a21\u677f\u91cc\u7684\u6ce8\u91ca\u4f1a\u8ba9\u7ec4\u4ef6\u53d8\u6210 fragment inline \u4e0d\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898", "d": "5/2016"}, {"body": "true well rendering html could false made really simple example using together click shows", "d": "5/2016"}, {"body": "hi please make sure ask question forums gitter chat get faster feedback want keep questions issues smile question computed property complicated next time take time provide reproduction jsfiddle please", "d": "5/2016"}, {"body": "posva thats clarification however think must bug either vshow template rendering computed properties ie computed property return means display content also tested also behaves kindly check link webpack bin", "d": "5/2016"}, {"body": "obonyojimmy pretty sure thing failing property watched component access route problem provide narrower example repro actually big difficult check give look may help understand", "d": "5/2016"}, {"body": "jquery problem nt dispatch native events cases see", "d": "5/2016"}, {"body": "add another note emit event", "d": "5/2016"}, {"body": "sorry buzz reading clue update vmodel update checkbox javascript tried document code like vmodel updated accordingly without jquery", "d": "6/2016"}, {"body": "flyyang directly update model never change element variables manually", "d": "6/2016"}, {"body": "thanks saved headaches", "d": "9/2016"}, {"body": "case someone else stumbles upon make sure model updated using elements", "d": "11/2017"}, {"body": "mykeels nice write", "d": "3/2018"}, {"body": "think anywhere atilkan long direct reference element question placing attribute element question work eg vue component html export default mounted directly reference checkbox via ref attribute value consolelog refscheckbox could also reference different component directly advisable direct access component like html import mycheckbox pathtocheckboxvue export default components mycheckbox mounted const mycheckbox refsmycheckbox references mycheckbox component const checkboxelement mycheckbox refscheckbox references input typecheckbox within mycheckbox component checkboxelementdispatchevent new event change trigger change event must trigger event external component suggest using vue event emitters rather direct reference keep components clean also looks like fiddle link nt work anymore url vue script broken", "d": "3/2018"}, {"body": "got input event emit happen checkbox value changes using computed template input", "d": "3/2018"}, {"body": "mykeels update answer use check box radio input", "d": "8/2018"}, {"body": "", "d": "5/2016"}, {"body": "evan notifications githubcom closed receiving subscribed thread reply email directly view github", "d": "5/2016"}, {"body": "onenewlife script requirejs \u62a5\u9519 \u53c2\u8003requirejs\u7684\u6587\u6863", "d": "1/2017"}, {"body": "cmal vuejs \u4f7f\u7528\u4e86 define html \u4e2d\u5f15\u5165 vue api requirejs amd", "d": "1/2017"}, {"body": "onenewlife \u521a\u5f00\u59cb\u662f\u76f4\u63a5\u5728html\u4e2d\u52a0\u5165script", "d": "1/2017"}, {"body": "", "d": "1/2017"}, {"body": "hello since inside attributes deprecated use instead working demo", "d": "5/2016"}, {"body": "hi expected behaviour passing literal object parsed string interpolate variable feature btw think would possible vue though anyway also use computed property", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "\u65e2\u7136\u7528\u4e86 vshow \u5c31\u4e0d\u8981\u7528 css \u53bb\u63a7\u5236\u4e86 \u7528 vshow \u7ed1\u5b9a\u7684\u503c\u53bb\u63a7\u5236\u554a", "d": "5/2016"}, {"body": "\u5728 \u767b\u5f55\u9875\u9762 \u6709\u597d\u51e0\u4e2aform \u5207\u6362\u767b\u5f55\u6ce8\u518c\u5fd8\u8bb0\u5bc6\u7801 \u6211\u53ea\u662f\u7b80\u5355\u5728\u6bcf\u4e2aform\u52a0\u4e2a\u53d8\u91cf\u7528vshow\u63a7\u5236\u663e\u793a \u5176\u4e2d\u5c31\u6709\u9898\u76ee\u6240\u8bf4\u7684 \u9690\u85cf \u6837\u5f0f", "d": "5/2016"}, {"body": "vshow \u8981\u4fdd\u7559\u521d\u59cb display display css \u5c31\u4e0d\u5e94\u8be5\u9ed8\u8ba4\u662f display vue", "d": "5/2016"}, {"body": "", "d": "5/2016"}, {"body": "\u4e5f\u8bb8\u7ec8\u6781\u65b9\u6848\u662f\u6269\u5c55\u4e00\u4e2a\u6307\u4ee4\u6216\u662fvshow\u80fd\u5e26\u5916\u9970\u7b26\u6216\u662f\u53c2\u6570", "d": "5/2016"}, {"body": "using object array object key enumeration order guaranteed specified however guaranteed implemented every browser also arrayonly method", "d": "5/2016"}, {"body": "oh yeah items supposed array thanks nt notice", "d": "5/2016"}, {"body": "hi please make sure sure ask question forums gitter chat get faster feedback try questions issues smile question use return style object pass var method sorry misread thought applying specific style depending simplesmiler answer way go", "d": "5/2016"}, {"body": "jsoncode html", "d": "5/2016"}, {"body": "issue \u662f\u7528\u6765\u63d0\u4ea4 bug", "d": "5/2016"}, {"body": "\u53ef\u4ee5", "d": "5/2016"}, {"body": "hi please make sure sure ask question forums gitter chat get faster feedback try questions issues smile question caveat update raw value array detected therefore attribute never updated instead", "d": "5/2016"}, {"body": "posva thank answer asked forums yesterday one answered thought might issue asked see working thank", "d": "5/2016"}, {"body": "hello hooks emitted nothing life cycle directives time second directive bound already emitted directive never receives per use case time directive bound element bound already exists point waiting closing bug", "d": "5/2016"}, {"body": "okay thank clarification description much clear documentation", "d": "5/2016"}, {"body": "thanks", "d": "9/2017"}, {"body": "incorrect markup xml treated opening tag", "d": "5/2016"}, {"body": "thanks", "d": "5/2016"}, {"body": "still alpha wait making benchmark ga least rc stage smile scott", "d": "5/2016"}, {"body": "sure get vue least faster vue also alpha things probably change", "d": "5/2016"}, {"body": "yeah proper comparison scott", "d": "5/2016"}, {"body": "got old apps still using upgrade forced besides nt see necessarily people still believe higher version number means better sometimes means bloated talking vue", "d": "5/2016"}, {"body": "issue list repo exclusively bug reports feature requests going close issue guys continue discussing benchmarks forum gitter", "d": "5/2016"}, {"body": "wo nt performance advertized feature", "d": "5/2016"}, {"body": "boussou performance version alpha beta besides talking advertized like paid something", "d": "5/2016"}, {"body": "see quotes", "d": "5/2016"}, {"body": "boussou seem serious misunderstanding benchmarks work machine vue version runs almost fast raw js version mean means overhead framework already almost negligible specific benchmark matter fast framework magically make browser faster takes browser move circles impossible vue make reason seeing big improvements previous versions vue vue already fast previous versions basically specific benchmark bad choice measuring perf improvements vue versions also never draw conclusions single microbenchmark benchmarks test narrow scenario reflect overall performance framework cases also different typical usage patterns real applications side note circle moving benchmark considered one worst ones often made joke framework authors really interested looking folder next branch compare", "d": "5/2016"}, {"body": "evan know creator vue please stay away condescending attitude promoter vue several years smart piece code obvious framework run fast raw js version unless using special browser feature like shadow dom indeed wanted see overhead framework performance gain incoming really believe vuejs fast faster angular moreover far easier maintain despite numerous api changes versions meaning zero also say angular version benchmark hacky unfair vs vue version uses real composents calculated fields still vue faster ok benchmarks always wrong benchmarking protocol env etc ie always run new tab yet need numbers compare think absolute values useless relative values informative think always better following blindly trends", "d": "5/2016"}, {"body": "explaining bad benchmark choice measure vue perf complain attitude take minute reflect entitled attitude demand proof vue indeed faster respect needs mutual pay respect due", "d": "5/2016"}, {"body": "leave last word sign respect", "d": "5/2016"}, {"body": "indeed act differently setting selected even list options move works expected", "d": "5/2016"}, {"body": "use inside behavior inconsistent browsers nothing vue use string templates subject exceptions", "d": "5/2016"}, {"body": "rtfm reading changed return object style binding got visible circle running", "d": "5/2016"}, {"body": "please read feature tracking list appendto deprecated", "d": "5/2016"}, {"body": "know went past issues wanted certain mount generates el good way fixed circle benchmark vue indeed faster compared twice fast", "d": "5/2016"}, {"body": "since doubt tried jsfiddle versions obvious faster missing something", "d": "5/2016"}, {"body": "nt try opening issue", "d": "4/2016"}, {"body": "actually tried reply tests worked sorry inconvenience", "d": "5/2016"}, {"body": "quickly tried fiddle svg loaded within html seems work one solution could try changing use tag", "d": "4/2016"}, {"body": "nirazul yep works unfortunately approach right one current project", "d": "4/2016"}, {"body": "hello tried using without otherwise could set directive tell work please next time provide jsfiddle edit better help also used minified version vue even use vue devtools", "d": "5/2016"}, {"body": "matkovsky failsafe way make work ajaxing svg file body tag beginning leverage browser cache benefits failsafe local approach unfortunately using svgs path still error prone nt think vuejs error guess chrome ignores svg symbols within template tags nt update afterwards loaded real dom expert sure details behaviour", "d": "5/2016"}, {"body": "indeed chrome bug duplicate able isolate repro requirements see comments nt time open proper bug chrome feel free", "d": "5/2016"}, {"body": "vuejs patreon campaign removed email address issue security", "d": "4/2016"}, {"body": "thank bridge evan able contact email would like able discuss l\u00e9on", "d": "4/2016"}, {"body": "hi otherwise answer besides live france", "d": "4/2016"}, {"body": "appears work cases vue currently support using components instead use prop signal parent change value demo approach", "d": "4/2016"}, {"body": "thanks clarification surprised worked cases", "d": "5/2016"}, {"body": "\u5199\u4e86\u7ec4\u4ef6 b \u7684\u5b9e\u73b0\u4f9d\u8d56\u4e86 \u8fd9\u65f6\u7684demo \u540c\u65f6\u9875\u9762\u4e0a\u7684dom\u7ed3\u6784\u91cc \u7684\u7f16\u8bd1 \u521d\u59cb\u5316\u7684 \u628a \u7ec4\u4ef6b", "d": "5/2016"}, {"body": "code looks like including vux components make sure import necessary components right path", "d": "5/2016"}, {"body": "airyland yes sure import necessary components right path still errors", "d": "5/2016"}, {"body": "provide minimal reproduction jsfiddle please", "d": "5/2016"}, {"body": "posva jsfiddle support webpack", "d": "5/2016"}, {"body": "bluemsn haha handle issues mail also idea people help try make sure make short nt include half project", "d": "5/2016"}, {"body": "posva open url check", "d": "5/2016"}, {"body": "issue caused component circular reference", "d": "5/2016"}, {"body": "thanks airyland", "d": "5/2016"}, {"body": "yes assumes behavior always true also longer relies actual dom template parsing long using direct dom elements template source longer subject parsing limitations example use component root node", "d": "4/2016"}, {"body": "example use component root node limits component one tag type though eg ca nt use nt issue limitation said ca nt really think practical case would necessary classes attributes though preserved", "d": "4/2016"}, {"body": "everything else works", "d": "4/2016"}, {"body": "ohhh messed around fiddle nt realize attributes merged works us poked api reference nt explain happens element attributes inner content maybe could better clarified", "d": "4/2016"}, {"body": "pr submitted docs repo", "d": "4/2016"}, {"body": "point reasoning wherein option removed used use component tag act mounting point customelement acts single node mounting point virtual dom preventing behavior find quite cumbersome continually add surrounding around nodes template would cleaner keep components node names per webcomponents spec easier style around well", "d": "8/2016"}, {"body": "seems like bad assumption completely remove option appears one thinks got serverside rendered html components ie using vue simply attach functionality causes inconsistency css rendering cases vue yet loaded gets bootstrapped consider following part collection inside flexbox container flexbox layout affects immediate descendants left put styles template root one point page going look incorrect page looking correct incorrect based upon vue bootstrapped curious way vue suffering option especially default made think needs consideration affects circumstances typical spa specifically cases components nt injected clientside", "d": "3/2018"}, {"body": "something wanted practical difficulty isolating new features patch fixes costs lot think process basically followed development model every commit goes releasing patch inevitably includes new features separating features bug fixes separate branches keeping sync minor release makes development model lot complex said convinced every little detail semver especially projects marketing concerns often easy people argue favor strict semver version numbers practically impact success project case vue important part majorbreaking bumps follow strictly really want go superstrict semver could hidden features later announce part take opportunity explore possibility semantic minor releases blank slate", "d": "4/2016"}, {"body": "isolating new features patches solved problem presumptuous think understand costs argument benefits outweigh costs though understand point may disagree however ca nt get board marketing claim marketing benefit derived calling version vs calling finally anecdotes lodash follows strict semver nt see jdalton marketing problem anything developers use lodash instead underscorejs simply lodash follows semver underscorejs level stewardship greatly appreciated users react follows semver goofiness switching year due marketing concerns interesting see embracing large major version number happy hear explore possibility semantic minor releases hope come conclusion better community", "d": "4/2016"}, {"body": "youngsteveo basically saying worth point reconsider ps probably know cost nt really know much working", "d": "4/2016"}, {"body": "gotcha thanks", "d": "4/2016"}, {"body": "array primitiv value two arrays value store reference single array use set function nothing happens would expected think boolean value proposed express possible forms comparison either would get overcomplicated really fast", "d": "4/2016"}, {"body": "watch array length prop", "d": "4/2016"}, {"body": "asking basically diff values expensive cases indicating approaching problem wrong angle trying perform imperative operations based diff ideally nt need care detailed difference values working ui use computed properties ensure everything updates automatically need diffing legit reasons implement indus pointed structural diffing trivial problem", "d": "4/2016"}, {"body": "vue router likely streamline rebuild use issues opened vuerouter discuss good implementation may already", "d": "4/2016"}, {"body": "njleonzhang probably want hook instead also necessary define fields inside object something like", "d": "4/2016"}, {"body": "simplesmiler use give explanation", "d": "5/2016"}, {"body": "njleonzhang hook called component shown rendering happen data arrived read docs", "d": "5/2016"}, {"body": "link broken", "d": "10/2016"}, {"body": "steviey", "d": "10/2016"}, {"body": "links", "d": "4/2016"}, {"body": "nt think feature released yet vue ago feature added ago", "d": "4/2016"}, {"body": "sorry build script currently nt run windows due env variables intentional fix get closer official release really want try use crossenv", "d": "4/2016"}, {"body": "modify add code see export single file vue gist exportsinglefilejs important thing works windows console stdout base c vue \u03bb npm run build vue build c node buildbuildjs error could load c imported c enoent file directory open c c processtickcallback modulerunmain run startup c vue \u03bb npm run build vue build c node buildbuildjs c c c c c c c c c c c c distvuecommonjs c c c c c c c c c c distvuecommonminjs distvuecommonminjsgz c c c c distvuejs c c c c distvueminjs distvueminjsgz c c c c packagesvuetemplatecompilerbuildjs c c c c packagesvueserverrendererbuildjs c vue \u03bb", "d": "10/2016"}, {"body": "ran issue reopened going supported edit also confirm workaround zhoukekestar works scott", "d": "2/2017"}, {"body": "processenvtarget \u5c31\u662f\u6a21\u5757\u8def\u5f84\u89e3\u6790\u51fa\u9519\u4e86\u5427 \u5c31\u662frolluppluginalias\u7684\u95ee\u9898", "d": "3/2017"}, {"body": "nt work way like returning function vs calling function also bad idea nt", "d": "4/2016"}, {"body": "thanks reply means return function delayed called means way simplify cause appears many places", "d": "4/2016"}, {"body": "nt quite understand need use native dom methods difference", "d": "4/2016"}, {"body": "maybe confused attached deprecated components longer possibility offdom work closed", "d": "4/2016"}, {"body": "need call without arguments creates appending otherwise yes work", "d": "4/2016"}, {"body": "done progress towards alpha version", "d": "4/2016"}, {"body": "agree switch template systems upgrade nt great could turn lot work especially template solution heavily used", "d": "4/2016"}, {"body": "also server side place conflict migrate angular vue different delimiters make lot difference", "d": "4/2016"}, {"body": "think reason behind eg party component template uses change delimiters would cause party component break maybe could reworked vue option instead global configuration eg js import vue vue const appvue vueextend delimiters export default appvue app would import extended vue configured presets could manually set delimiters per vue", "d": "4/2016"}, {"body": "rpkilby vuejscollaborators discussing currently thinking enabling locally instances rather global option still discussion discover possible side effects", "d": "4/2016"}, {"body": "rpkilby precisely one reasons deprecation rework componentlevel option makes sense compromise look", "d": "4/2016"}, {"body": "sounds great thanks", "d": "4/2016"}, {"body": "implemented branch note still deprecated vue longer supports injecting html arbitrary positions always need use containing element", "d": "4/2016"}, {"body": "add like point inline templates something sets vue apart frameworks lot js frameworks want write templates template files compile vue nt something makes vue feel magical existing template want reactivity clean js wrap custom tag like write js done use serverside rendering variables already want course start migrating apibased template furthermore also allows much comprehensible serverside routing think crucial vue something added afterwards nt make vue project start project pull vue always charm vue eg angular react", "d": "4/2016"}, {"body": "hmm maybe could plugin personally nt use think mostly useful template partially rendered server", "d": "4/2016"}, {"body": "azamatsharapov indeed exactly point always made vue great backend developer still easily declare routes functionality backend render views use javascript original intent interaction", "d": "4/2016"}, {"body": "azamatsharapov tons developers thing makes vue special adapt whatever style project working removed solely bad practice well meh awesome never bit even inlinetemplate filters return excited vue mostly stressed upgrade", "d": "4/2016"}, {"body": "especially surprising inline templates useful serverside rendering removed update promises improved serverside rendering support", "d": "4/2016"}, {"body": "nt surprising goal serverside rendering nonblocking streamed vue instance rather user wait render anything else happen regardless find travesty", "d": "4/2016"}, {"body": "promises improved serverside rendering support think completely different thing vuejs work server render templates jeffreyway phroggyy agreed active phplaravel user earlier know many people use technical reason remove least avoid increased size library maybe made plugin probably makes everybody happy", "d": "4/2016"}, {"body": "use inline templates everywhere statamic reasons taylorotwell spark provides great middleground php javascript building spas want understand follow best practices one literally one reasons love using vuejs ca nt even imagine approach able vue without thought kind making panic little", "d": "4/2016"}, {"body": "glad one feels like vue magical use cms project spas ca nt imagine glad could use vue within cms project first time worked quite sure removal make impossible use framework half projects leads sad sad circumstance maintainlearn two different systems frontend frameworks sublime piece api opinion really really good reason remove well possibility support plugin see like jeffreyway wow hi btw keep simple variant happy keep implement sort global event bus really looking forward next version", "d": "4/2016"}, {"body": "talking rizqidjamaluddin pointed currently use lt div gt place template lt div gt js file important question vue break behaviour well eg kind templating considered inlinetemplating would viable upgrade path docs reference", "d": "4/2016"}, {"body": "place work lot projects django cms custom delimiters matter made possible declare vue components within backend templates way serverrendering without possibility could nt frontendediting cms anymore thus would effectively break apart would probably switch approach closer spas would mean lot development work backend defining apis etc thus using vue might become budgetary liability well least adapted procedures", "d": "4/2016"}, {"body": "definitely inline template indication would ever removed", "d": "4/2016"}, {"body": "phroggyy quite convenience functionality pure inline templates", "d": "4/2016"}, {"body": "thanks clarifying josephsilber taylorotwell might quite similar meaning might viable upgrade path maybe", "d": "4/2016"}, {"body": "using inlinetemplate way able get one projects working ie nt support tag", "d": "4/2016"}, {"body": "use inline templates quite bit handful spring thymeleaf apps one reasons using think availability makes vue super flexible drop component legacy page add additional functionality without rebuild redo build process", "d": "4/2016"}, {"body": "phroggyy one thing different using inlinetemplate vs template script tag inline template already rendered dom loads flicker template script tag still needs parsed vue injected dom fact empty space gets populated fact sometimes looks bit janky even able use vcloak minimize stands component needs perform ajax request load want sort loading state displayed http request happens inlinetemplate loading state shown soon page renders wait http request finish approach get white flicker component compiles switches loading view waiting http request easy way share loading view vue compiles view needs displayed vue compiled ajax request still happening", "d": "4/2016"}, {"body": "boussou instead couldshould thumbs original post thanks github", "d": "4/2016"}, {"body": "nt notice new feature github almost becomes dev fb", "d": "4/2016"}, {"body": "nt use surprised many people nt want syntax removed library reading comments understood gives us benefits understood utilizing would like combine logics templates ways correct creating component constructors items like example instead writing templates anyone think reason treated bad practice javascript example var base vueextend data function return methods var app new vue components componenta baseextend template templatea componentb baseextend template", "d": "4/2016"}, {"body": "confused deprecation well first thing tried testing codepen uses latest vue build using still works think referring feature might wrong really like clear first", "d": "4/2016"}, {"body": "right property still work related using", "d": "4/2016"}, {"body": "think shipped separate plugin", "d": "4/2016"}, {"body": "curiosity standard vue hello world sort example considered fine inlinetemplate considered bad practice nt attaching new vue object existing markup conceptually inlinetemplate anyways additional limitations", "d": "4/2016"}, {"body": "clarify bit main reason labelled bad practice assuming spa context believe collocation component template logic important longer term maintainability however admit overlooked use case progressive enhancement largely server rendered apps tbh something personally use vue nt realize strong need feature technically complicated support bring back", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "everyone using inlinetemplates mainly server rendered site better solution binding components global namespace tried using laravel include place footer allows one script time suggestions", "d": "5/2016"}, {"body": "fan little utilities like clientside javascipt library nt cover due size performance issues serverside frameworks like laravel django hand support", "d": "4/2016"}, {"body": "asmaps could also simply use vue index itemmessage sorry elements yet needed handle arrays objects basic method implementation could js isempty value value amp amp value instanceof array return valuelength lt", "d": "4/2016"}, {"body": "taylorzane sure use could also use instead convenience feature prevents code duplication phanan reason could also argue yes somewhere line drawn okay wanted ask used django find useful", "d": "4/2016"}, {"body": "phanan reason could also argue exactly internal discussions well", "d": "4/2016"}, {"body": "performance issues phanan mean overall size library mean rendering performance nt seem like would intensive vifvelse vifvfor also maybe could implemented plugin", "d": "4/2016"}, {"body": "mean overall size library mean rendering performance meant regarding small utilities", "d": "4/2016"}, {"body": "hello expected behaviour string want number write make number please tell nt problem nt speak chinese", "d": "4/2016"}, {"body": "thanks answer works problem posva", "d": "4/2016"}, {"body": "\u8bf7\u4e0d\u8981\u5f00\u91cd\u590d\u7684", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "see", "d": "4/2016"}, {"body": "yep seen concern implement global event bus events registered event object looking way automate know seems merely convenience vue convenience simplicity ease use", "d": "4/2016"}, {"body": "nirazul something like following one lifecycle hooks may work looked close enough new api may able use mixin js var autoevents created function var evtid thisoptionsevents bus evtid thisoptionsevents evtid destroyed function var evtid thisoptionsevents bus evtid new vue mixin autoevents events idselected function", "d": "4/2016"}, {"body": "indus sounds like plan try first alpha vue released", "d": "4/2016"}, {"body": "sounds application components control bus components use concern party components listen events emitted arbitrary component vue components instantiated user vue internally party components aware bus system may may using", "d": "4/2016"}, {"body": "recommends using vuex inject bus components need use events seems like overkill small projects liked vue nt require using vuex router even http unless needed also rpkilby states longer universal system party components hurt community whole thinking important jquery think vue needs equivalent", "d": "4/2016"}, {"body": "rpkilby party components still ability directly longer ability dispatch events propagates essentially ensures party component cause side effects direct parent believe good thing isolated component able dispatch event causes side effects unknown parent tree sounds like recipe trouble", "d": "4/2016"}, {"body": "isolated component able dispatch event causes side effects unknown parent tree sounds like recipe trouble totally agree concern direct parent party component able listen event would want fire events global bus would likely want parent get events events ted communicate parent component thought isolated component may cases want event propagate beyond direct parent either way application detail parent component would determine", "d": "4/2016"}, {"body": "rpkilby guess using component listening ted event relevant data sent along affected data parent could handle accordingly function would executing result parent scope", "d": "4/2016"}, {"body": "rpkilby", "d": "4/2016"}, {"body": "correct", "d": "4/2016"}, {"body": "von holy crap idea could entire time facepalm emoji", "d": "4/2016"}, {"body": "rpkilby subscribe vuejsvuejsorg repo commits wink", "d": "4/2016"}, {"body": "viewpoint standalone component developer would need something like working directly call function child also work fully replace communication two nested depending components dismissed mainly please reconsider usecases vuecard vuecollapsible vuecompsscrollspy", "d": "4/2016"}, {"body": "correct paulpflug communication slot components host implemented calling slot components listening event parent tight coupling since designing tightly coupled components meant used together think straightforward solution also complex slot distribution best handled using programmatic function simplify things lot closing think questions answered seems strong arguments deprecation", "d": "4/2016"}, {"body": "think removing dispatch terrible idea nt first ui frameworklibrary implement notion bubbling actionsevents visual tree well established idea take away functionality premise able dispatch event causes side effects unknown parent tree sounds like recipe trouble need leave responsibility users sure common sense use feature appropriately new concept really ca nt see benefit change library built upon long time established web technologiesconcepts dom dom events fact bubble visual tree years one complaining nt idea components something recently embraced thanks proposal web components opinion makes sense vue components behave similarly regular dom elements regards event handling done proposed alternative use global event bus seems illogical something practical effective easier understand due well established concept years already existed proposals thread remind emberjs wants passing closure actions properties components level hierarchy tedious unnecessary vuejs reason wrote aside really like library seriously think terrible change", "d": "10/2016"}, {"body": "feels like back backbone think change bit painful simple apps nt use vuex managing events difficult lot possible app benefits vuex anyways huge project work relied marionette attest lot views listening emitting events great making event listening pattern less magic explicit fine imho", "d": "12/2016"}, {"body": "implemented pretty simple global event bus vue developing vue ui kit fun wanted able open modals anywhere", "d": "12/2016"}, {"body": "using replacement problem child components still process event already destroyed", "d": "12/2016"}, {"body": "", "d": "12/2016"}, {"body": "fnlctrl thks tried method discard events channel finally found way solve simply make determination situations method would solve problem think caused method vuejs method parameter remove dom completely vuejs method remove parameter official document suggest nt destroy component method suggest us use could use method remove dom method destroy order avoid component destroyed processing bus simply make determination situations method would solve problem", "d": "12/2016"}, {"body": "sorry completely point destory nothing event hub global instance nothing lifecycle components use thks tried method addtodo discard events channel addtodo case simply forgot pass second parameter please refer docs locking issue since obsolete future references please refer docs support questions discussions please use gitter forum", "d": "12/2016"}, {"body": "clearly undefined obviously string even empty", "d": "4/2016"}, {"body": "display undefined textbox undefined show empty display empty", "d": "4/2016"}, {"body": "show undefined textbox user understand", "d": "4/2016"}, {"body": "show empty like", "d": "4/2016"}, {"body": "nt define like docs suggested", "d": "4/2016"}, {"body": "lazy define show empty string better like template engine like smarty template engine show empty string variable define", "d": "4/2016"}, {"body": "problem found lazy define define get unexpected results much better declare data structures", "d": "4/2016"}, {"body": "much code write", "d": "4/2016"}, {"body": "show empty string like template engine", "d": "4/2016"}, {"body": "difference one line ca nt work nt declarative understandable", "d": "4/2016"}, {"body": "chenyouxiang vuejs try solve issues goal lightweight create small helper function convert empty string note recommended define properties better maintainability reactivity", "d": "4/2016"}, {"body": "azamatsharapov add piece code vue application possible add helper function applies variables template engine uses beautiful solution case new data nosql database may include new props old data nt make vue crash displaying old data", "d": "10/2017"}, {"body": "really edit future participants bug empty", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "phanan please reopen thanks", "d": "4/2016"}, {"body": "duruitang trying achieve looks trying put data vue structure nt using data props attribute phanan unless know duruitang seems rude ridiculeclose issue without least attempt help seems beginner least point gitter channel forum", "d": "4/2016"}, {"body": "nirazul issue started bug title empty body closed thinking spamtroll duruitang edited filled details reopened yes trying reproduce bug talking", "d": "4/2016"}, {"body": "nirazul sorry fault pressed confirm key opened issue please nt blame phanan sorry bother", "d": "4/2016"}, {"body": "see last section merges two arrays uses copy original nt altered ps use simple", "d": "4/2016"}, {"body": "egoist use vuevuearr altered code vtitle vdestination vleavingtime function new vue el documentbody lt body id documentbody gt data camp shown false apiurl apiordercamps data page limit loadmore true ready function var thisinitmod camp \u521d\u59cb\u5316camp methods initmod function mod var \u91cd\u7f6e mod shown false mod data mod page mod loadmore true \u8bf7\u6c42\u6570\u636e globalweuishowloading ajax url mod apiurl type get timeout data page mod page limit mod limit datatype json complete function globalweuihideloading success function res resret mod data resdata resdatalength lt mod limit mod loadmore false else mod page mod shown true else globalweuishowalert resmsg error function globalweuishowalert \u8bf7\u6c42\u6570\u636e\u51fa\u9519 \u52a0\u8f7d\u66f4\u591a\u6570\u636e loadmore function mod var globalweuishowloading ajax url mod apiurl type get timeout data page mod page limit mod limit datatype json complete function globalweuihideloading success function res resret resdatalength lt mod limit mod loadmore false else mod page working resdata function v mod datapush v working mod data merge mod data resdata else globalweuishowalert resmsg error function globalweuishowalert \u8bf7\u6c42\u6570\u636e\u51fa\u9519 marked section please check", "d": "4/2016"}, {"body": "merge may returning different copy original array use concat instead", "d": "4/2016"}, {"body": "phanan sorry nt think possibility seen strange plausible question", "d": "4/2016"}, {"body": "clarifying point originally came gitter chat filter another changes people nt thrilled losing correction courtesy josephsilber filter param", "d": "4/2016"}, {"body": "thanks removed point scott", "d": "4/2016"}, {"body": "worst case come tiny plugins deal filters problem wo nt work without babel compilation", "d": "4/2016"}, {"body": "stoked changes either filters seems easy alternative registering global mixins however fond idea polluting components methods scopes ultrasimple tasks like pluralize forth never used twoway filters however filters convenient beautiful two things vue always right far", "d": "4/2016"}, {"body": "read post vue stoked new possibilities especially virtual dom server rendering also surprised little sad filters gone one favorite parts vue easily usable chainable mainly easily extensible beautiful syntax use template directly especially combination loops perfect match thinking use computed properties replace filtering every prop want worried writing lot boilerplate future mixins might mitigate part problem still feel like part elegance ease using vue going missing", "d": "4/2016"}, {"body": "everybody agrees please click thumbs description better spamming thousand people even better come meaningful use cases", "d": "4/2016"}, {"body": "never used twoway filters would really miss filters sometimes use computed properties simple cases convenience really speeds workflow consider simple example html item much easier write cases required complex filtering compare following html item javascript new vue el body saying second one hard write use many places start repeating takes extra time could perhaps use useful features either way stay happy vue user sharing opinion filters deprecated", "d": "4/2016"}, {"body": "filters reusable create function format data register filter use instances", "d": "4/2016"}, {"body": "mixin separate module method separate module computed prop function", "d": "4/2016"}, {"body": "left comment announcement thread instead duplicating simply link", "d": "4/2016"}, {"body": "totally understand feeling something super convenient taken away first please take moment read chrisvfritz comment forum thread make discussion easier copy pasting theotherzach thanks passion vue like explain deprecation bit better first introduce member vue core team use vue time freelance ui data visualization work also educator teaches people use vue rails among web technologies run code school help people learn use tools use together almost every day also one big proponents removing filters vue problem filters beginners vue big part reason favor deprecating filters actually beginners working students conversation come student filter basically function mentor yes student ok use normally function parentheses mentor well special kind function student use places like computed value mentor use templates special pipe syntax student one big things trips beginners exceptions filters functions except require special syntax ca nt used everywhere use pipe syntax different pipe syntax may integrated meaning wo nt long people two similar operators something similar quite one actually javascript util libraries useful vue nt one case transforms strings numbers specific filters yes useful applications come util libraries general useful dozens great util libraries choose vue nt utility library frankly none utilities offered bestinclass handling currencies dates even filtering arrays nt focus many apps nt require apps worked face problems require robust solution vue currently offers could offer without introducing significant bloat wheel reinvention apps accountingjs handled currency superbly momentjs mentioned handles dates times nt handle many pluralizations well custom computed value often desirable little advantages computed properties using computed properties place filters also offers advantage processed value easily reused dry way anywhere component find apps time computed property also moves implementation details template leaving clean description component advantage globally defined filters one need look function computer value see tweak exactly working arrays chaining javascript methods even provides linear list processing pipes even declarative easily manipulated way usefulness globally defined whatever need define function anything else want accessible components great way personally never wanted always preferred put helper method module import module need still important note registering globals kind nt made harder case directive say actually one recently looked vue projects every single one somewhere also used fact one past applications nt use debounce technically utility lodash many robust projects offer debounce solutions problem pretty universal ui development kind app writing debounce function also nontrivial enough probably want use lodash implementation nearly every project remains internal debate see goes yes personally seems also others removing debounce removes convenience offered thanks passion seriously love much love vue really glad voicing concerns especially kind respectful way hearing core team designers frontend developers data visualization specialists use vue work pretty diverse definitely dedicated pushing dogfood want eat", "d": "4/2016"}, {"body": "talk cheap let code see without filter apply filterby reverse write global pure filter functions seperate file code reuse js filtersjs function filterby list value return listfilter function item return itemindexof value gt function findby list value return listfilter function item return item value function reverse value return valuesplit reverse join export filterby reverse findby use filters appvue template js reverse demo reverse msg import reverse filterby findby filtersjs export default data return userinput msg hello vue words black block blue alpha methods reverse filterby findby see result filter used following vue code would js reverse demo msg reverse", "d": "4/2016"}, {"body": "boilerplate concerns several ways deal explicitly importexport like raywill demonstrated bit verbose benefits nt lookup vue filter documentation understand works super explicit functions coming implemented functions javascript altercompose fit special uses cases unlike builtin filters touch import programmatically reuse functions methods computed properties anywhere write javascript attach html word go functional advanced users helper functions look like js function returns predicate function arrayfilter function contains value return thing gt thingindexof value gt function getvalue return b gt return getvalue gt getvalue b important design consideration builtin filters useful lack flexibility pure javascript builtin function nt suit needs either end reimplementing something similar shipping final code builtin becomes useless dead code wait vue update release new version", "d": "4/2016"}, {"body": "like prototype approach cases need multiple filters pretty common use along html word cases would add html word approach make code less readable yes least opinion guess could combined filters like nt feel right either open changes want come almost easy way handle also benefit able use filters anywhere really good point", "d": "4/2016"}, {"body": "note vuejscollaborators discussing option provide utilities package current integrated filters plenty resources provide utility tools code base one good thing removing core filters customiseimplement gives lots flexibility", "d": "4/2016"}, {"body": "template expressions simple possible ideally like computed prop hold logic creating filtered data way readable better something like ect much reusable assign computed property even passed child components wanted use filtered data two places easier simpler reliable readable templates simple expressions compared chained filters expressions", "d": "4/2016"}, {"body": "anyone following along answered chrisvfritz", "d": "4/2016"}, {"body": "following solves use case globally available pure view helper functions withdraw filter removal concerns burn em congratulations chrisvfritz changing somebody mind mine internet html word", "d": "4/2016"}, {"body": "totally agree remove filters stick plain js functions", "d": "4/2016"}, {"body": "blakenewman good point mostly convinced point thinking readibility think something like achieved quick jsfiddle concept", "d": "4/2016"}, {"body": "one good thing removing core filters customiseimplement gives lots flexibility always able customizeimplement vue nt utility library frankly none utilities offered bestinclass concerned removing filter functionality templates removing builtin filters make lot sense easily recreated proxying underscoreother util libraries someone could even release single plugin recreates current builtin filters using computed properties place filters also offers advantage processed value easily reused dry way anywhere component course use computed properties reuse elsewhere nt filter still much convenient points posted link shared", "d": "4/2016"}, {"body": "support syntax filters operates like proposed syntax would allow people keep using beloved filters bring line future may hold eventually pipes switch internal implementation without changing api", "d": "4/2016"}, {"body": "pipes approved subject lot changes", "d": "4/2016"}, {"body": "theoretically subject change seems stable status mindeavorespipelineoperator", "d": "4/2016"}, {"body": "josephsilber youngsteveo thelinuxlich think page regarding value pipes general one advantage new compiler pipe generated render function code babel still needs explored inconceivable gains momentum babel plugin developed could happily chain methods pipes everywhere app huge fan livescript functional languages definitely recognize value", "d": "4/2016"}, {"body": "pipeline operator even stage", "d": "4/2016"}, {"body": "thelinuxlich yes believe still waiting champion", "d": "4/2016"}, {"body": "one alternatives wanted mention power javascript allows achieve expressiveness choice imo better putting filtering logic inside templates", "d": "4/2016"}, {"body": "vue perform following cases one user name updated html username gt capitalize seems like former would rerender one object latter would recompute entire list", "d": "4/2016"}, {"body": "rpkilby nt seem equivalent like html capitalize username", "d": "4/2016"}, {"body": "still nt like idea using methods filters gut feeling seems wrong ca nt really explain either way discussed methods making filters available", "d": "4/2016"}, {"body": "nothing suggested thread comes even close expressiveness succinctness filters nt makes real sad like said forum thread removes big chunk makes vue vue looking find corner sobbing audibly", "d": "4/2016"}, {"body": "way change encourages good javascript coding deal", "d": "4/2016"}, {"body": "long discussion user perspective suggested keep syntax support feel elegant natural imagination something like javascript itemname methods filterby items field return filtered orderby items field order return filtered impression would approach best worlds end though convinced removing filters whole actually better thing like thelinuxlich said encourages better javascript logic thinking nt introduce logic laravel blade framework view layer nt vue templates said josephsilber look corner find", "d": "4/2016"}, {"body": "filters feel beautiful syntax exactly filter syntax look like also one attractive thing vue comes batteries included would really sad lose either things opinion make vue stand", "d": "4/2016"}, {"body": "reading thread seems concern filters fact vue default filters really function still sure like filter plugin thinking blakenewman prebuilt examples people come filters plug play would great absolutely agree creating filters userland responsibility still wanted pipe chaining abilities globalness original filter feature concerns globalness covered chaining pipe helps ton reading templates understanding expected output pipe chaining discussed still done bad thing designer gold filter designer tool js programmer argument writing better js falls board book understand would wanted designer want write better code filters allows beautifully smile scott", "d": "4/2016"}, {"body": "thing regarding chaining filters primarily used two purposes formatting text processing array case formatting text time single utility method used chaining really much problem case arrays already pointed array processing fact logic better suited javascript multiple chained array filters may look okay simple get ugly use arguments also encouraging put much logic template really nt also inflexible easily retrive processed value comparison original example written javascript magic alternative syntax filterspecific api learn access processed value intelligently cached also free add sugar top shown previous comments plus template looks cleaner know like handy thing taken away honestly arguments filters right sounds like trying keep syntax syntax sake opinion takes elegant justify feature needs provide objective value case nt see filters", "d": "4/2016"}, {"body": "example exemplifies issue think best js programmer nt need js programmer know says nothing really bad practice smile fact filtering method global also means must go searching docs code decipher output find method really elegant right ok could method name like filterbyorderbyandlimit arguments would correct might feasible still nt look good want filterby orderby need separate method want add currency formatting another method filter chaining templates makes manipulating presentation flexible expressive concern yet properly addressed methods lack knowledge nt allowing understand methods better possible agree much logic template something avoid filter chaining ability simply pop filter anywhere app components templates fantastic concept reason added begin reason reasons name bet money outweigh promotes bad practices mile anything allows flexibility used improperly like vue main argument flexible allowed vue used different ways filters nt much different vue internal nt affect vue might used externally still nt devalue importance remember lot people also said would nogo upgrade important smile new way needs attributes old way chainable global add templates nicely express data templates manipulated forget anything sure everyone pretty much satisfied personally ca nt see happening methods yet scott", "d": "4/2016"}, {"body": "smolinari clearly stated put less logic templates opinion whether like obviously free disagree ca nt help want work recommended best practice given explained chaining issue complex logic done javascript also given examples add globally available methods see example custom chaining syntax similar want goal framework provide believe best way develop front end applications please everyone please nt use upgrade nt give feature back nt work", "d": "4/2016"}, {"body": "nt guys try new alpha release week come really valuable comments based practice maybe try refactor existing app let us know impossible improved got worse discuss better would useful everybody think", "d": "4/2016"}, {"body": "agreed agree smile nt agree proper reason taking something gained much love guess decided time pragmatic js better pragmatic html argument nogo upgrading others said trying communicate mitigate one last argument look user user eyes say system like laravel mvc mvvm system incorporates vue also allows user system build components filter simplifies learning curve allows users system get lot done without touching js fan vue allow nonjs programmers still get lot done reason nt like react jsx combination lot smaller user base vue time goes bet money also understand real flexibility lies js still please nt rely solely js flexibility vue keep mind everyone killer js programmer fact people nt filter nice way get lot done people nice stepping stone towards js manipulation filters ca nt get done go deeper js methods ok enough done thanks listening rate vue still awesome smile azamatsharapov good point scott", "d": "4/2016"}, {"body": "seeing people trying justify bad practices inside js makes sad really nt need pro basic homework nt basic anymore days", "d": "4/2016"}, {"body": "problem filtersinsidemethods semantics oops term filters like static functions methods nonstatic function filters convey extremely different semantics methods biggest difference filters use methods using work changing look like good practice would rather advocate creating separate global object contain filters", "d": "4/2016"}, {"body": "nt look like good practice globals good practice recommended approach explicitly importing helper methods attaching prototype workaround want explicitly import methods semantics filters coined concept anyway javascript would nt invent different semantics uppercase string call function javascript functions", "d": "4/2016"}, {"body": "going make one comment try make personal point clearer mainly trying justify bad practices inside js comment certainly trying realize vue templating system templating system afraid trying move away role feel nt templating enginesystem take twig templating engine successful example one could expect templating system template designers section developers section docs templating system twig powerful template designer chock full default behaviors including filters allows nondevelopers ton template system without directly knowing php learn twig offer use looking vue like see vue template designers section docs smile also important extensibility twig something nt available stock version added developer steps nice thing extensions shared means done nice thing two levels designer developer get much broader base users much much broader behavior defaults nt enough start learn willingly underlying language learn best practices rest saying vue ca nt template engine without learn js say lowering market value considerably say leave door open let others make tools templating engine plugins great everybody fighting templating system also counterproductive imho student talking filters example evan someone learning js someone learning template engine latter bet conversation would go differently rate still think vue winning system hope thoughts might make others think differently vue roles way smile scott", "d": "4/2016"}, {"body": "filters coined concept coined first place believe inside external variables like converted hence plain js functions defined outside component ca nt referenced filters introduced overcome limitation limitation still exists assuming right remove limitation would require devs explicitly code referencing access js functions would referenced js powerful feature prone abuse migrating old code pain current syntax looks way better agree filters basically js functions imported component nt like defined place methods", "d": "4/2016"}, {"body": "hi everyone read whole thread think one would miss built filters like everyone want still around pipe operator templates core team says logic keep javascript templates besides coming feature pipe operator quick summary think could good solution js implement native pipe operator would pipe operator plugin keeping version users wait new feature implementation could included warning coming deprecation something know anyone could implement plugin think would better provided keeped vue team could possible", "d": "4/2016"}, {"body": "could wrong nt think vue allows plugins mess compiler", "d": "4/2016"}, {"body": "azamatsharapov course nt think would mess vue compiler openmouth", "d": "4/2016"}, {"body": "yerkopalma absolutely love pipe operator use obsessively functional languages ca nt wait javascript imagine vue never filters would requesting frontend framework extend javascript syntax domain babel compiletojs language ui framework prefer use language like livescript often problem nt vue javascript fix additionally able pipe results render babel hope even able use tracked plugin want consistently everywhere javascript instead template want pipe likely able today warned pipe using templates likely different precedence behavior one babel smolinari others two phrases variations thereof keep hearing think developers user perspective think beginners imply assumption thinking groups mentioned guess needs reiteration everyone core team either designer frontend developer combination use tools every day work using vue believe thinking beginners made case guess go detail educator proponent eliminating filters thinking beginners personally taught hundreds people maybe even thousand practice web development usually scratch former coding experience done middle schoolers high schoolers university students professional adults senior citizens perspective tell filters seem like exciting magic first ultimately slow student learning introducing complexity limited convenience never angular vue conversation reversed trying introduce hard time explaining needed use talk deprecation eliminated filters curriculum code school gathered enough evidence harm good beginners rather gain experience versatile vue features like methods computed properties even discouraged use filters made easier pick bad practices hope puts two complaints bed see", "d": "4/2016"}, {"body": "imagine vue never filters would requesting frontend framework extend javascript syntax course filters natural templates twig mentioned feel pipe operator natural mustache syntax templates mean mustaches html javascript guys going remove whats different pipe operator", "d": "4/2016"}, {"body": "think children argument dumb far know vue designed teaching javascript frontend developers get shit done latter filters great never angular vue conversation reversed trying introduce hard time explaining needed use much disagree using python framework called django since templating language inspiration later born templating languages filters day one using frontend developers ten years come appreciate beauty usefulness would sad see syntax go away django filters", "d": "4/2016"}, {"body": "uninen please mind tone calling others arguments dumb constructive way participate discussion drawing analogies serverside templating languages one important aspect note serverside template languages amount flexibility vue templates computed properties limited expressions also built completely different purposes outputting static strings vue templates representations interactive dom twoway bindings event handlers component props filters fit limited use case vue context today believe bad idea allow filters everywhere eg filters vmodel vfor von introduces complexity good one possible alternative keeping filters text interpolations ie use inside directives", "d": "4/2016"}, {"body": "interesting reference angular still filters renamed pipes also intentionally removed list filtering ones", "d": "4/2016"}, {"body": "sorry language meaning insult anyone purpose framework hard stuff make look easy developers use tools still argue syntax ca nt beat would sad see go nt know understand much hood mechanisms users point view practicality beats purity related note interesting see much passion seems community vue fresh invigorating tool maybe take part painting particular shed", "d": "4/2016"}, {"body": "another datapoint ember nt filters allow component methods though computed properties use case pure functions performing intemplate transforms register handlebar helper ember helper handlebar helpers syntactically distinct things nt handlebar helpers bring got common piping filter syntax however handlebar templates logicless means require special syntax intemplate function call issue vue nt", "d": "4/2016"}, {"body": "filters simple beginners see magic using pretty output filterordersearch arrays ease define simple clear templates define filters external module templates get javascript import moment moment methods moment date format return moment str format format template suggestion leave old filters template move filters separate module use methods section need use specific filters utils package javascript import moment vueutilsdate import price vueutilsnumbers methods moment price use common filter result translated simple function call note filters use format data like dates numbers strings filtering arraysobjects think better use computed function common vue module javascript import vueutilsarray computed orderstable return thisorders filterby thisfilter sortby date limit benefits beginners ease use old filters computed use pretty function templates format data output programmers write functionsmodules ease use separate module think need core vue vue must utils developerstemplate designer need time require lodash moment else install utils npm ease use save old call syntax templates one important think must done filters must pure functions like getters vuex ease support ease usereuseextend good look templates", "d": "4/2016"}, {"body": "guys need clear upgrade path desire learn modularise javascript code", "d": "4/2016"}, {"body": "thelinuxlich speak filters syntax sugar completely exclude filters beginners vuejavascript bad laravel community like vue simple powerful completely remove filters need give alternative template designers need know sort array filter want enter code form example get result programers must know modularise javascript code rest use small stuff need know speak template designers put html inside code use javascript vueuse vueutils computed orderstable return thisutilsarray thisorders filterby thisfilter sortby date limit example proud need know js filter sort arrays lot people want things hard understand code like need make complicated things type people give simple solution good developers", "d": "4/2016"}, {"body": "one possible alternative keeping filters text interpolations ie use inside directives think could good compromise satisfy everyone ever used filters actually find weird currently would allow convenient text formatting want use filters reduce complexity effectively removing twoway filters", "d": "4/2016"}, {"body": "opinion momentjs filter example already passing much logic templates seriously direct pipe love spec repository reaches", "d": "4/2016"}, {"body": "like vitaliylavrenko suggested could good middle ground scott", "d": "4/2016"}, {"body": "like vitaliylavrenko proposal say something similar pipe operator plugin azamatsharapov said plugins nt mess compiler confuse even possible misunderstood comment", "d": "4/2016"}, {"body": "thelinuxlich better read think developer ask someone nt know javascript developers better something like javascript vueuse vueutils computed orderstable return thisutilsarray thisorders filterby thisfilter sortby date limit middle used like vueresource common lib pipe syntax sugar thing things filterby foo orderby bar limitby ease read need pass data diff templates store modifications one data like javascript padleft capitalize title padright upper title abstract situation use one two templates need store data objects increase memory usage yes use helper method use template template designers far away javascript better something like title capitalize padleft translated function call ease functional think diff people developers ease diff way people want simple", "d": "4/2016"}, {"body": "say much logic templates antipattern instead learn specific dsl filters learn javascript", "d": "4/2016"}, {"body": "thelinuxlich use jsx get react binding things vue get people nt know javascript google something dislike pipe nt use add something like turn onoff people ease say js developers use vue strongest side vue standart common filters need better separate lib ease add vue use want vue something like asm good devs use", "d": "4/2016"}, {"body": "guys think decision vue core team took explained well repeat thing comment something new valuable", "d": "4/2016"}, {"body": "part vue core principles easier nonjs developers even hurts language principles agree probably nt case", "d": "4/2016"}, {"body": "said mostly fine filters deprecated surely miss sake convenience sure similar filter system introduced plugin given proof concept example little earlier could used computed props well inline html itemfoo hand someone wants pipe sure done something like html itemfoo perhaps would hook would allow plugins parse expressions process however want could possible way solely depends complex implement effects would framework performance size would actually want go direction feel like given elegant alternatives easy use plugins something core get used fairly quickly", "d": "4/2016"}, {"body": "filtering arrays sort etc better use computed much clean think problem display data diff format field createdat need template render ddmmyyyy links filters used good alternative get use define date method make template dirty store additional fields cost memory objects became heavy", "d": "4/2016"}, {"body": "final decision filters supported inside text interpolations limits text formatting purposes enforcing logic javascript land vue ship builtin filters community create filter packs needed filter syntax change use function invocation syntax arguments instead spacedelimitered brings inline javascript popular templating languages swig twig", "d": "4/2016"}, {"body": "thanks listening evan makes vue great great leader smile scott", "d": "4/2016"}, {"body": "amp chrisvfritz one thing seems buried discussion twoway filters twoway filters ones hardest replicate proposed solutions consider simple example posted forum thread using computed properties would main drawbacks create new computed property value resulting ton boilerplate code make matters worse computed properties ca nt even nested complex object graph computed properties top level end long verbose property names requiring cognitive overload constantly keep track computed property tracks nested value dismissing usecase trivial less complicated counterproductive used medium largescale applications worked wonders demo necessarily simple technique sound confounded dealing array example intentionally simple iterating array find recourse computed properties way work around separate component item array adding even boilerplate compare example filters js import currency somecurrencyfilter import products productsstub new vue el documentbody data products filters currency one without filters js import currency somecurrencyfilter import products productsstub new vue el documentbody data products components product props product computed price get return currencyread thisproductprice set value thisproductprice currencywrite value shipping get return currencyread thisproductshipping set value thisproductshipping currencywrite value handling get return currencyread thisproducthandling set value thisproducthandling currencywrite value discount get return currencyread thisproductdiscount set value thisproductdiscount currencywrite value know want write could maybe cleaned little creating computed property factories point remains far verbose need since core team seems steadfastly opposed filter pipe syntax would possible introduce param directive param able keep first elegant version js simply rewrite template use param instead magic pipe syntax would strike right balance magic syntax retaining ability easily convert input backandforth without much boilerplate thanks consideration", "d": "5/2016"}, {"body": "rewritten example incorporate filter custom directive jsfiddle although concise filter nt nearly painful imagined nt taken much time put pieces together stuff already available us", "d": "5/2016"}, {"body": "nirazul creating dedicated directives filter proposed needing create new directive reimplements functionality type filter use app simply preposterous addition directive nt even fully work like filters blurring field changing value nt reformat furthermore way directive directive obviously amended features fixes point remains bandaids top something really simple right outofthebox", "d": "5/2016"}, {"body": "nt seen proposition thread mentioning custom directives would please point comment imagine nt written tested use app wanted show possible right alternative possible easily maybe room plugin automate process even obvious quickly written directive lacks full functionality vmodel maybe one custom filter directive combined params andor modifiers would sufficient replace filters let remain constructive tried solve problem always easier bash solution instead making contribution moving forward", "d": "5/2016"}, {"body": "josephsilber need chill preposterous strong word", "d": "5/2016"}, {"body": "hi removing filter motivated reducing template cluttering seriously affecting technical implementation former visual effect issue allowing filter like new javascript form limiting one per expression like vfor list orderby key one pipe sign could make filter processing simpler predictable visually least cluttered since filter parsing allowing expressions would make sense would accommodate existing use casesfunctions like two way filtering item within vfor existing usages one filter could easily mergedupgraded one owners", "d": "5/2016"}, {"body": "tomsmithgroup suggested decided remain supported", "d": "5/2016"}, {"body": "amp chrisvfritz would love hear thoughts regarding twoway filters", "d": "5/2016"}, {"body": "josephsilber computed property factory alluded even much boilerplate js import currenciesfactory somecomputedcurrenciesfactory import products productsstub new vue el body data products components product props product computed currenciesfactory price shipping handling discount though personally would nt create factory example properties actually separate concerns appear right remove filters becomes much obvious complex one component seeing boilerplate huge reason components exist divide complexity manageable concerns look component everything needs easily fit working memory else development becomes much slower errorprone hiding complexity behind syntax filters nt remove complexity demonstrate let look happens problem meets realworld changing requirements say decide discount allowed larger price shipping handling handling exceed x amount discount field percentage instead currency total exceeds certain amount minimum discount automatically applied may tempted make filter complex extra options conditional logic update filter api internal logic think changes might affect anything else consuming filter possibly even outside current component shared filter situation making changes app starts feel daunting shared twofilter allowed delegate internal component state outside component violating component boundaries increasing coupling hiding away complexity still need think every time work component breaking things multiple individually less complex components separately defined computed properties bound props often update one line adjust changing requirement extra options conditionals refactoring satisfy scaling complexity nt think anything outside component even outside single property application beginning still remains easy think update think makes filters initially seductive case easytoreachfor cure duplication duplication boilerplate incidental ie code happens right realworld problems inevitably start rolling ca nt put better sandi metz duplication far cheaper wrong abstraction", "d": "5/2016"}, {"body": "chrisvfritz filters absolutely nothing business requirements filters format data nt manipulate way shape form conceptually param business requirements obviously never handled filters say decide discount allowed larger price shipping handling handling exceed x amount would use proper validation module \u00e0 la currency filter stay place regardless simply displaying underlying value discount field percentage instead currency obviously type longer currency different swap username requirements change even remove param field longer number total exceeds certain amount minimum discount automatically applied minimum applied currency filter stay place still want display currency update filter api internal logic think changes might affect anything else consuming filter twofilter allowed delegate internal component state outside component never put logic state filter filter idempotent function strictly formatting values ideally nt even executed context vm pull additional data duplication far cheaper wrong abstraction said abstracting code happens right filters hand simple idempotent functions format value abstraction tl dr filters abstraction place explicit business requirement filters never internal logic never conceptually similar html attribute param", "d": "5/2016"}, {"body": "two way filter certainly abstraction current behavior twoway filters hides lot magic inside specifically allows input dom value temporarily outofsync underlying model syncs blur field btw josephsilber behavior implemented specifically due request understand feel strongly however biggest problem see twoway filters underlying logic black box user way customize making feature requests better option providing proper building blocks implementing behavior let show possible base component implements outofsyncuntilblur behavior current twoway filters due changes directly use custom components long component accepts prop emits events addition also formats value events currently possible twoway filters tweak component get desired behavior want without tied twoway filters implemented framework base component nt implement parseformatting logic extend methods get custom input components tailored specific use cases case component base component complex twoway filters implementing previous magic behavior however need define component return get full control behave case want change later believe worthy tradeoff example think components unified abstraction reusability gives control also see example previously implemented directive component interface", "d": "5/2016"}, {"body": "better option providing proper building blocks implementing behavior great definitely vue needs however would liked read better option providing proper building blocks starting vue also extend vue new filtering behavior words could nt currency input component along number default filtering components part vue everyone uses currencies point right leave everyone else work currency formatting standard enough make part vue filtering component tool bag great basic example others learn create filtering components one thing missing example finished currency input component feature believe vue also entail currency number formatting change depending person viewer selected locale mean locale data ie dede format currency numbers shown locale explorer stems standard add vue great currency number formatting component system built right vue devs use vue nt need create rather use right spot get vue makes vue powerful templating system using formatting component ca nt used chainable fashion filter like pluginable would fine aurelia twig extensions currency input component could still standard templating filters really need something others nt need constantly reproduce nt show make plugin even plugin interested whole smile scott", "d": "5/2016"}, {"body": "everyone uses currencies point right really one never really used would apply builtin filters useful us others useless topic times wanted use builtin filter ended writing version anyway rendering builtin version dead code feature believe vue also entail debatable comprehensive support pretty complex imo nt belong vue especially users wo nt need anyway would like raise every time attempt make comparison vue another templateframework one critical thing keep mind unlike djangolaraveltwig vue essentially client library thus needs lightweight possible would make sense keep simple enough retaining core features course instead adding features utils sake socalled usefulness elegance want anything core functions preferred way would use plugin even develop take example commonly seen spa vital router state manager nt think yet vuerouter vuex nt belong vue repositories words vue progressive show make plugin even plugin interested whole believe sensible approach thank interest", "d": "5/2016"}, {"body": "much need use areas think go code manually change names things beauty example hours ago took butstrapdatepikker connect despite fact possibility quick seconds manually replaced names days week months ok", "d": "5/2016"}, {"body": "phanan argumentation mentioned plugins agree everyone want currency functionality nt keep app light templating system believe much personal opinion vue also standard functionality available importantly concern nt everyone reinvent currency filter component wheels words like vuerouter vuex available additions vue good number standard filters like currency could oh interestingly enough angular built seems angular supports date number currency filters ember react seem gone let dev world route interesting video maybe vue needs integration formatjs vueintl smile edit ca nt simple scott", "d": "5/2016"}, {"body": "angular built seems angular also comes ngrouter heard shunned ngcommunity favor uirouter angular team replaces ngrouter uirouter result breaking changes pain try improve ngrouter wasting time better solution uirouter already exists vue started supporting currency etc core situation happen vue well find inbuilt filters convenient matter agree vuejs team", "d": "5/2016"}, {"body": "agree filters vue core also fan componentization actually could nt vue offer filters core plugins like vuex vuerouter scott", "d": "5/2016"}, {"body": "could nt vue offer filters core plugins like vuex vuerouter exactly blakenewman shared earlier", "d": "5/2016"}, {"body": "hi final decision page indicated allowing filter text display vtext expressions like vfor item list sortby misunderstand meant keep filter limiting one filter per expression sun may pm phan notifications githubcom wrote tomsmithgroup suggested decided remain supported receiving mentioned reply email directly view github", "d": "5/2016"}, {"body": "may conclude reply twoway filters going supported", "d": "5/2016"}, {"body": "fnlctrl correct build components", "d": "5/2016"}, {"body": "go little offtopic twoway filters really useful production mean really okay let user type anything input reformat blurred business team always demands inputs act like ca nt type anything wrong even use jqueryinputmask purpose since instant twoway change got deprecated one really miss mean really problem twoway filters people overthinking", "d": "5/2016"}, {"body": "fullfs twoway filters extensively used production app lots convenience see filter values realtime instead filter posted server take time refactor code think wo nt miss", "d": "5/2016"}, {"body": "want optimistic updating ui norm today imho especially mobile want input formatted properly practically time input given scott", "d": "5/2016"}, {"body": "way filters really nice vue always build customised components without filters available takes time library provide flexibility also faster convenient way things including filters would nt stop people building components would allow faster development existing functionality fits needs time always compromise api surface conveniency balance found vue already great one getting rid filters seems step back right point balance library becomes smaller codebase boilerplate every projects use grows bigger filters really deprecated maybe would good provide alternative able specify parser formaters vmodel directives easy way filters able write part example provided without filters one also write props value watch value thisfocused thissetdisplayvalue ready thissetdisplayvalue methods oninput emit input target value thisparse elvalue onfocus thisfocused true onblur thisfocused false thissetdisplayvalue setdisplayvalue elvalue thisformat thisvalue flexibility also code result", "d": "6/2016"}, {"body": "aristidesfl filters nt deprecated battle partially lol going limited used text interpolations see scott", "d": "6/2016"}, {"body": "thanks smolinari referring particularly filters though", "d": "6/2016"}, {"body": "please come back need agree said easy lazy user want lazy easy way like keepalive", "d": "8/2016"}, {"body": "may way add custom vmodel modifiers work like twoway filters", "d": "9/2016"}, {"body": "ecmel agreed way go", "d": "9/2016"}, {"body": "open feature request issue", "d": "9/2016"}, {"body": "ecmel similar idea although described type modifiers discussed", "d": "9/2016"}, {"body": "rpkilby discussion closed well may open new one custom vmodel modifiers", "d": "9/2016"}, {"body": "longer able limiting filters seems strange plenty times want use filter attribute binding passing prop ca nt use attributes anymore", "d": "9/2016"}, {"body": "linusborg opened", "d": "9/2016"}, {"body": "limiting filters seems strange plenty times want use filter attribute binding passing prop ca nt use attributes anymore got removed easily replaced computed properties methods limited api possibility caching results one api less use methods template js code need duplicate filter behaviour use app code computed props cached flexibility js pseudocode ahead html computed formattedmodified return date thisitemmodified ddmmmmyyyy h mm ss", "d": "9/2016"}, {"body": "sorry new coming angular filters feels really strange counter intuitive would better every developer develop set filters setting computed entries etc better build considered best practice filter really large array objects element angular one line code possible filter array search input would magic function framework", "d": "12/2016"}, {"body": "considered best practice filter really large array really large array theoretically computed property would good filtering would better every developer develop set filters setting computed entries etc better build used think way started thread since learned basically piece cake create kinds filters sooo many things developer might want filter computed property come realize nt big deal built filters scott", "d": "12/2016"}, {"body": "case equals gt lines json provided firebase database see might think way decide drop feature nonetheless quite additional hassle devs forked fiddle inline data structure need code search string object hand", "d": "12/2016"}, {"body": "nt understand question sorry fiddle looks like one posted scott", "d": "12/2016"}, {"body": "computed vs filters", "d": "1/2017"}, {"body": "filters possibly bad performance since computed every render like methods computed properties easy cake recomputed necessary otherwise results cached means vue fly oh scott", "d": "1/2017"}, {"body": "hey fiddling get great concept", "d": "1/2017"}, {"body": "lock thread discussion long finished vue couple months critique drop filters largely subsided discussion thread productive see new angle topic think needs discussion please open new issue", "d": "1/2017"}, {"body": "contained elements removed part parent element transitions triggered however use css selectors apply transition behavior parent element transition classes", "d": "4/2016"}, {"body": "fqzhang solve like nt think vue problem per se opinion using inside watcher always allow edge cases error appear", "d": "4/2016"}, {"body": "version using update", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "try extract problem jsfiddle quite hard find bug using entire site", "d": "4/2016"}, {"body": "usually putting template empty div solves problem get error", "d": "5/2016"}, {"body": "yerkopalma updates", "d": "5/2016"}, {"body": "ca nt find way reproduce different project seen others issue see tried rufusk said luck anyway start projects never problem think might error using vueify directly provide information let know unfortunatelly ca nt", "d": "5/2016"}, {"body": "reproduce issue different environment check build config something must missing try creating new project including components one one", "d": "5/2016"}, {"body": "tried debugging project see issue js vue files nt use gulp vueify check recommend creating new project vuecli start", "d": "5/2016"}, {"body": "rebuild project vuecli think best option still think weird case related vue guess specific environments issue appears anyway think close issue looks like bad build setting something vue issue smile", "d": "5/2016"}, {"body": "sure please find information ping", "d": "5/2016"}, {"body": "hello chinese speaking users please make sure add couple chinese characters title issue whole description chinese smile way nonchinese unsubscribe issue right notification page better try describe issue english xiexie", "d": "4/2016"}, {"body": "\u76ee\u524d\u7684 keepalive \u5b9e\u73b0\u662f\u901a\u8fc7\u5224\u65ad constructor keepalive \u4f1a\u91cd\u65b0\u8bbe\u8ba1 keepalive", "d": "4/2016"}, {"body": "recommend listening native drag events component call method achieved mnaged create dynamic component system native drag drop acctully hard ie template methods dragnewcompont function e edatatransfersetdata text dataset call event set data drag transfer newcomponentdrop function e consolelog newcomponentdrop var data edatatransfergetdata text call event manaipulate data nb might need recreate destroy dynamic componets drag drop events hope helps", "d": "4/2016"}, {"body": "known issue wechat embedded browser fixed commit next release", "d": "4/2016"}, {"body": "next release come", "d": "5/2016"}, {"body": "found solution", "d": "4/2016"}, {"body": "need use", "d": "4/2016"}, {"body": "hi thank reply works wondering vif false div vif automatically removed dom got warning vue warn error evaluating expression stylesbgcolour", "d": "4/2016"}, {"body": "expected deleted use", "d": "4/2016"}, {"body": "nt work stylesbgcolour always false also understanding delete bg styles vif destroy code inside vue nt evaluate stylesbgcolour", "d": "4/2016"}, {"body": "seeing error warning nt working", "d": "4/2016"}, {"body": "object deletion works vif still work put stylesbg amp amp stylesbgcolour colour option show", "d": "4/2016"}, {"body": "please open separate issue problem preferably isolated codepen reproduction", "d": "4/2016"}, {"body": "could please look", "d": "4/2016"}, {"body": "solved prevent drag events", "d": "4/2016"}, {"body": "please follow issue reporting guidelines provide clear description reproduction steps", "d": "4/2016"}, {"body": "issue might related question", "d": "5/2016"}, {"body": "think budiadiono", "d": "5/2016"}, {"body": "welcome iahu problem seems already make pr fix merged yet reason ca nt understand conversation pr", "d": "5/2016"}, {"body": "ah forget problem code several custom directives app error causing callback directives removing fragment changed problem solved", "d": "5/2016"}, {"body": "iahu using vuevalidator form asking facing issue could yet reproduce fiddle using vuejs", "d": "5/2016"}, {"body": "hi timonreinhard using vuevalidator also could reproduce make pr fix issue may modify source code see", "d": "5/2016"}, {"body": "use array drive children js moduleexports data function return comps childone childtwo components childone require childtwo require", "d": "4/2016"}, {"body": "\u8bf7\u7528", "d": "4/2016"}, {"body": "type number \u4e0d\u662f \u7279\u6027", "d": "4/2016"}, {"body": "\u5e94\u8be5\u662f vue \u7684\u4e00\u4e2a pc \u7aef\u53ef\u4ee5\u7528", "d": "4/2016"}, {"body": "\u7279\u6027\u53ea\u662f\u5728\u503c\u4e3a string \u65f6\u81ea\u52a8\u8f6c\u6362\u4e3a", "d": "4/2016"}, {"body": "\u8fd9\u4e2a\u4e0d\u7b97 bug model breaking", "d": "4/2016"}, {"body": "\u5f3a\u70c8\u5efa\u8bae \u628a\u6587\u6863\u4e2d\u8bef\u5bfc\u6211\u7684 \u4fee\u6539\u4e3a", "d": "4/2016"}, {"body": "vue actually intentionally prevents component destroy transition updating would look weird ux perspective also programming perspective transitions ideally fire forget moment component sent destroying transition considered destroyed anything like transition finishes done transition hook likely wontfix feel free provide information specific use case", "d": "5/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question reference elements", "d": "4/2016"}, {"body": "dom error use numbers ids nothing vue", "d": "4/2016"}, {"body": "hey seems like provided wrong fiddle link", "d": "4/2016"}, {"body": "sorry right one", "d": "4/2016"}, {"body": "hello limitation replace things work", "d": "4/2016"}, {"body": "thank simplesmiler solves problem", "d": "4/2016"}, {"body": "please check section documentation carefully working demo", "d": "4/2016"}, {"body": "ok got pass constructor via vueextend heres working fiddle", "d": "4/2016"}, {"body": "pespantelis thanks behaviour looking see nt think appears official doc yet", "d": "4/2016"}, {"body": "hi thanks filling issue think shared wrong jsfiddle take look fix please", "d": "4/2016"}, {"body": "updated sorry posva", "d": "4/2016"}, {"body": "worries smile", "d": "4/2016"}, {"body": "current parsing mechanism detect nested unwrapped svg elements want use slots wrap wontfix longer issue future versions", "d": "4/2016"}, {"body": "deal custom defineradialgradient component template generating different svg gradients main component camel modifier work attributes case sensitive tags problem rendered browser lowercase like suggestion avoid error ps also added ignore vue components list", "d": "6/2017"}, {"body": "fwiw running exact problem vue anybody else coming google solution wrap element vuecomponent maincomponent template edit may ramifications relative positioning", "d": "2/2018"}, {"body": "already using dev build", "d": "4/2016"}, {"body": "oh right could sworn nt issue confused lack warning nt notice using production build", "d": "4/2016"}, {"body": "api replaces inner content declared slot content distributed controll white space distributing structure slot structured distributed content see example see full example", "d": "4/2016"}, {"body": "nt believe understand actual issue explaining problem api works actually find great feature vue templates actual problem default slot becomes empty form whitespace present named slots removing whitespace making dom elements follow seamlessly way actually default slot show content provided original template simplified example works slots follow without whitespace nt work whitespace present newline jsfiddle example template definition ps sure trying show fiddle link exact copy one provided", "d": "4/2016"}, {"body": "michelpaus thank clarification miscommunication thought suggesting output formatted manner think trying say white space present defined distributable content default slot outputs default slot content", "d": "4/2016"}, {"body": "initial description fiddle bit confusing nt know fiddle better demonstrates issue two axes named slots used whitespace present enclosing tags named slots used whitespace effect named slots used whitespace overwrites default slot inconsistent first case whitespace effect", "d": "4/2016"}, {"body": "might related", "d": "4/2016"}, {"body": "use plain string styles use object", "d": "4/2016"}, {"body": "sure looking best guess scott", "d": "4/2016"}, {"body": "official guide states although use mustache interpolations class classname bind class recommended mix style vbind class use one please try avoid outcome guaranteed", "d": "4/2016"}, {"body": "ah overlooked sorry though would vote possible future", "d": "4/2016"}, {"body": "kvdmolen would nt solution offered work scott", "d": "4/2016"}, {"body": "smolinari right thanks link nt work solution html page", "d": "4/2016"}, {"body": "make sure use dev build already warns usage", "d": "4/2016"}, {"body": "detail example", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "jinjiang html \u6807\u9898\u5185\u5bb9 \u6807\u9898\u5185\u5bb9", "d": "4/2016"}, {"body": "removed vue", "d": "4/2016"}, {"body": "use option", "d": "4/2016"}, {"body": "code example would really helpful", "d": "4/2016"}, {"body": "obonyojimmy something along", "d": "4/2016"}, {"body": "data must plain object giving class explained docs recommended reading", "d": "4/2016"}, {"body": "prototype methods ignored using nonplain objects state rabbit hole complexity supported design", "d": "4/2016"}, {"body": "jonagoldman thanks read thanks asked question example works fine summary works works", "d": "4/2016"}, {"body": "see getter reactive", "d": "4/2016"}, {"body": "hmm exactly cry", "d": "4/2016"}, {"body": "sorry revive old issue could nt find relevant discussion elsewhere encounter problem trying separate presentation logic vue vm clientside business rules persistence code model model class instance pretty natural fact vm attributes support class instances mean vue vm instance intended contain presentation business persistence logic pattern nt considered thanks creating reactive view library used progressively instead taking app way", "d": "1/2018"}, {"body": "hmm interesting read limitation class custom getters equivalent computed properties vue difference handle computed properties somewhere else agree increase side effects add complex edge cases could left user vue supposed unopinionated making somewhat artificial limitation fact imposing opinion cases trivial work around", "d": "4/2018"}, {"body": "works fine ca nt root data object plus want store original reference class instance object vue call getters setters every time", "d": "4/2018"}, {"body": "yeah reactivity tricky probably better limitation complex codebase despite inconveniences always workarounds take back previous comment", "d": "4/2018"}, {"body": "\u7528", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "5/2016"}, {"body": "reproduce latest edgewindows", "d": "5/2016"}, {"body": "tested version microsoft edge microsoft edgehtml still stay maybe bug edge", "d": "5/2016"}, {"body": "hello thanks reporting issue duplicate already fixed release next vue version patch case need", "d": "4/2016"}, {"body": "use watcher since already using", "d": "4/2016"}, {"body": "nt see work use watcher watch reset fails logic cause watcher fire twice reset value manually without vuejs watcher aware example changed", "d": "4/2016"}, {"body": "could run filter saves original value property grab later example vue nt concept original values deals current values", "d": "4/2016"}, {"body": "sirlancelot thanks trick", "d": "4/2016"}, {"body": "problem may also consider work filter handler instead dom event depends problem solving", "d": "4/2016"}, {"body": "hi thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described would help us lot", "d": "4/2016"}, {"body": "hello although standard tag may appear everywhere case browsers please read section explanation similar caveats particular case would use directly sufficient simple cases case want example two per array item would prepare data either computed property filter closing nt much right browser following standard", "d": "4/2016"}, {"body": "raf", "d": "4/2016"}, {"body": "benched raf nt make significant difference", "d": "4/2016"}, {"body": "thx answer \u043f\u0442 \u0430\u043f\u0440 \u0433 \u0432 evan notifications githubcom closed receiving authored thread reply email directly view github", "d": "4/2016"}, {"body": "posva look sounds like requestanimationframe", "d": "4/2016"}, {"body": "cool thanks rpkilby could nt find", "d": "4/2016"}, {"body": "quick fix placing literal vif resolves bug quick fix indeed bug assigning look", "d": "4/2016"}, {"body": "vuejscollaborators fyi due modifiers directives parsed previous directives fed previous directive even though applied directive", "d": "4/2016"}, {"body": "wowsie happen every directivemodifier though eg prevent click default", "d": "4/2016"}, {"body": "simplesmiler happens terminable directives found issue creating pr", "d": "4/2016"}, {"body": "hello thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "4/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "4/2016"}, {"body": "reason implementation make sure clear vue directive achieved clear simple prefix makes simple integrate tools even angular without clashes", "d": "4/2016"}, {"body": "nablex slightly tangent nt need prefix components except stylistic preference unless using global components chance components clash name names defined locally code uses", "d": "4/2016"}, {"body": "building tiny library reusable components taken naming prefix make clear belong central library reason clear wish could use clashes responsibility components", "d": "4/2016"}, {"body": "nablex unlike angular library developer decide name component used template library consumer js var goodlibrary require goodlibrary moduleexports components accordeon goodlibrarygoodaccordeon library consumer decides name", "d": "4/2016"}, {"body": "simplesmiler get possible feature using light development simply stating would nice able choose prefix options generally good thing", "d": "4/2016"}, {"body": "achieve similar behavior passing component prop instead using slots", "d": "4/2016"}, {"body": "simplesmiler solution best available current version vue think like javascript difference passing value already evaluated parent scope vs passing function takes arguments child scope return value addressed future version nt intend introduce suboptimal solutions", "d": "4/2016"}, {"body": "alternative method indeed clean solution situations problem naming component line wrapper component offering lead lot superfluous component generation worse reusing existing component may need wrap new one get naming correct look forward said future version", "d": "4/2016"}, {"body": "update removed corner cases directive implementations though probably optimized intimate knowledge core think cleaner solution component approach proposed directive case component simply exposes additional datamethods much like already exposes slotsprops anyone using component much part api component rest proactively shared component specific name access random state case built list component allows anything image slider button picker actual data lists optional lazy loading windowing multi select functionality requires outside access specify work cases example parts interactive eg clickable example want add swipe support example slider window set fixed size scroll size default selector windowed see example want scope part mouseclick interaction add swipe support trigger previous amp next browsing functionality", "d": "4/2016"}, {"body": "simplesmiler wow know reference component specified inside prop thought reference predefined component inside", "d": "6/2016"}, {"body": "simplesmiler thought accepts string definitely docs looks really helpful situations", "d": "6/2016"}, {"body": "addressed vue", "d": "6/2016"}, {"body": "hei nablex find", "d": "6/2016"}, {"body": "seen issue using instead", "d": "8/2016"}, {"body": "vue getting really close would nice know offer far current pattern pass function prop render function similar function child pattern react conceptually although would great firstclass support like react", "d": "9/2016"}, {"body": "adding functionality props inside slots like using prop component simpler shorter", "d": "9/2016"}, {"body": "really interested know simplesmiler solution still elegant way go vuejs ability able create dynamic slots key good component reusability think topic deserves little section documentation current docs made believe way achieve using custom logic inside render function", "d": "10/2016"}, {"body": "rayrutjes used tsalkakisd solution actually quite elegant simple component pass list users created slot like userid id user currently loop parent component simply specify voila done", "d": "11/2016"}, {"body": "implemented need bespoke solutions nov pm savas vedova notifications githubcom wrote rayrutjes used tsalkakisd solution actually quite elegant simple component pass list users created slot like userid id user currently loop parent component simply specify data voila done receiving commented reply email directly view github mute thread", "d": "11/2016"}, {"body": "oh apparently scoped slots good everyday new feature vue", "d": "11/2016"}, {"body": "vue removes way filters adds scoped slots curious decisions", "d": "11/2016"}, {"body": "implemented need bespoke solutions blocka saying loop non named slots", "d": "11/2016"}, {"body": "come ca nt one non named slot definition sun nov raymond rutjes notifications githubcom wrote implemented need bespoke solutions blocka saying loop non named slots receiving mentioned reply email directly view github mute thread", "d": "11/2016"}, {"body": "use slot vmodel", "d": "8/2017"}, {"body": "\u7f51\u7ad9\u7684 issue \u8bf7\u53d1\u5230\u7f51\u7ad9\u7684 repo", "d": "4/2016"}, {"body": "create custom filter angular ngmodel trim value default sucks want trailing spaces app", "d": "4/2016"}, {"body": "azamatsharapov leave tailing space intact opposite request many cases maybe tailing spaces necessary worth adding library", "d": "4/2016"}, {"body": "luwenjin implicit behaviour unintuitive using filter triming needed seems right way", "d": "4/2016"}, {"body": "posva actually proposing explicit way without trim vmodel trim", "d": "4/2016"}, {"body": "modifier future current vmodel params", "d": "4/2016"}, {"body": "would better modifier notrim make trimming default least scenarios need trimming lot trim form bit cluttering", "d": "5/2016"}, {"body": "need trailing space end textarea using vmodel looks like trimmed automatically current workaround stop trimming", "d": "5/2016"}, {"body": "like idea trim modifier like idea automatically trimming whitespace generally implicit arbitrary modifications data always bad thing", "d": "1/2017"}, {"body": "hey issue nt seem reproducible fiddle provided since removing add class anyhow nt seem issue instead take look compilation scope section vuejs guide trying bind child property within parent scope instead might want try something like hope helps feel nt solve issue please feel free reopen", "d": "4/2016"}, {"body": "move parent scope try like", "d": "4/2016"}, {"body": "hi sure saying want number instead string shoud add number input please next time make sure sure ask question forums gitter chat get faster feedback try questions issues smile", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "4/2016"}, {"body": "hello thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described instance nt even know", "d": "4/2016"}, {"body": "code correct data bug jsbincom", "d": "4/2016"}, {"body": "commit answers question", "d": "4/2016"}, {"body": "yczz directly access value instead going problem trying access value props nt mirror props properties", "d": "4/2016"}, {"body": "props longer merged directly defined instance", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "4/2016"}, {"body": "sorry solution", "d": "4/2016"}, {"body": "describe old way things web page countain vuejs instance without router already know best could try use pjax style", "d": "4/2016"}, {"body": "check discussion", "d": "4/2016"}, {"body": "aha thanks close feature request", "d": "4/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "4/2016"}, {"body": "forget found problem lost vue binding de wizard plugin move content slot jquery html method solution thanks", "d": "4/2016"}, {"body": "still help nt provide repro anyway make sure sure ask question forums gitter chat get faster feedback keep questions issues smile closing feel free reopen issue find really bug", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "4/2016"}, {"body": "ok", "d": "4/2016"}, {"body": "edited sorry reread issue indeed seems logical called per instance however seem related amount instances dom used component data initialisation called twice", "d": "4/2016"}, {"body": "probably want part core css custom js hook moving animations complicated unlikely included core", "d": "4/2016"}, {"body": "made pull request tell guide", "d": "4/2016"}, {"body": "hello sqal would pass static class name binding add directly attribute pretty sure feature really easy add adding static class names class binding nt look right taken look guide section concerning class bindings may help", "d": "4/2016"}, {"body": "far aware already fixed dev", "d": "4/2016"}, {"body": "posva hi dropdown component want bind custom classes options prop also additional classes options true eg name dropdown props open type boolean twoway true default false options type object coerce options return objectassign dropdowndefaults options", "d": "4/2016"}, {"body": "see nt know already supported sweatsmile created array computed property since already fixed closing issue see problem appears new release feel free open issue", "d": "4/2016"}, {"body": "heads use nt actually dev sqal would work dev", "d": "4/2016"}, {"body": "wait sorry wrong close long day even wrote test", "d": "4/2016"}, {"body": "case helps might new vue could nt get static example working static value coming vuex store property seems always lag commit behind example updated classes whenever store changes", "d": "7/2017"}, {"body": "bensmeets probably nt work use inside template never", "d": "7/2017"}, {"body": "tnx sqal tried behaviour nt update class span", "d": "7/2017"}, {"body": "sqal doh found issue safari updating devtools chrome everything works fine seems either safari combination vue dom safari makes showing actual dom inspector", "d": "7/2017"}, {"body": "example could make computed property returning array instead like javascript computedclass let res storestatebodycolor storestatemenu respush navisopen return res", "d": "5/2018"}, {"body": "json ld better handled directive", "d": "4/2016"}, {"body": "maybe directive works better opinion semantically correct component case since component structure reflect dom structure apart debatable choice still bug", "d": "4/2016"}, {"body": "meaningful transitioning outin exactly one item want outin transition vfor items consider using delays css transitionanimations achieve", "d": "4/2016"}, {"body": "think documentation fine beautiful attract people gitbooks documentation nt understand second point confused related repository", "d": "4/2016"}, {"body": "core docs specific demands easily customized gitbook may eventually move docs projects place moment gitbook used quick takes little effort", "d": "4/2016"}, {"body": "cool posva mean new comers get bigger picture many official plugins easily better place showcase plugins", "d": "4/2016"}, {"body": "anything guide could incorporate page vue community efforts part despite links site navigation page could cover topics community forum gitter channel third party contributions awesome vue page show tell subforum contributing vue rules contribute rules issue reporting miss anything scott", "d": "4/2016"}, {"body": "smolinari like turn current community dropdown actual page would take pr", "d": "4/2016"}, {"body": "actually keep drop used often get different places would disadvantageous click page get places maybe linking page bottom pulldown anyone interested explanation glad page let see adding pr scott", "d": "4/2016"}, {"body": "ok pr think better text direct link navigation would join us smile scott", "d": "4/2016"}, {"body": "hello working intended find better explanation smile provide info lodash function using", "d": "4/2016"}, {"body": "using working use part documentation points ca nt watch assignments ca nt watch setting length removing elements fit two cases", "d": "4/2016"}, {"body": "guillaumeleclerc thanks take deeper look later keep updated", "d": "4/2016"}, {"body": "guillaumeleclerc like proposed fix small adjustments however also problems lodash caches reference included vue still would nt trigger changes", "d": "4/2016"}, {"body": "result nt think vue guarantee reactivity use blackbox party lib recommended approach using lodash always use immutable methods returns copy instead use replace original array", "d": "4/2016"}, {"body": "ended using normal think better performance recreating whole array thanks", "d": "4/2016"}, {"body": "facing issue vuejs anybody knows fixed somehow", "d": "5/2017"}, {"body": "nt ca nt really limitation comes reactivity system vue", "d": "5/2017"}, {"body": "since nt work vue ended simply creating method traverses object deletes element marked deletion regardless depth method created granted first pass deepclean obj keys keyslength return deepclean thiswhatever whant ends happening thiswhatever gets updated accordingly regardless depth ways requires less code sure works", "d": "5/2017"}, {"body": "bumped since remove doesnt work since dont perform change trough assignment reverse assign remove returns removed array reverse condition assign result back case works perfect", "d": "1/2018"}, {"body": "recommended use manually construct child components imperative hard maintain probably want make child components datadriven using dynamically render child components instead constructing", "d": "4/2016"}, {"body": "yeah answer afraid hear still thank awesome framework", "d": "4/2016"}, {"body": "mark", "d": "7/2016"}, {"body": "hmm strange even nt change binding", "d": "4/2016"}, {"body": "current suggestion simply avoid using camelcase event names particular reason", "d": "4/2016"}, {"body": "app followed syntax making something like vanilla js events mostly lowercase guess makes sense stick solution vue", "d": "4/2016"}, {"body": "three arguments camelcase allows omit quotes events property different behavior props confusing besides usage pattern similar html vs coffee props someprop vs events someevent currently wo nt work von", "d": "4/2016"}, {"body": "fwiw kind thoughts quoted amp dasherized handler name kind meh would definitely read nicer camelcase usage consistency w props also nice said camelcase handling props necessary since need call code case event handlers would expect event dispatching use dasherized form although dasherized camelcase could probably accepted without conflict general would expect prop event names normalize dasherized form camelcase used conveniencecompatibility javascript", "d": "4/2016"}, {"body": "quoted amp dasherized handler name kind meh readability helps distinguish events methods usually events human readable", "d": "4/2016"}, {"body": "azamatsharapov good point still looks little awkward definitely help distinguish event handlers regular methods", "d": "4/2016"}, {"body": "oppose usage pattern events methods totally different think way confuse wherever use names intentionally", "d": "4/2016"}, {"body": "usually try emphasize difference events methods event nt necessarily carry information needed react example cancel button form within overlay dispatches event call maybe like close overlay user nt intend fill form right mabye form mandatory needs fill aware hundreds ways works separating information actions events next step requested cancel requested resulting orders methods react request xy shifts intent react informational event sth happened method handles", "d": "4/2016"}, {"body": "conclude need keep hyphenated events working suggested camelcase remains unsupported directive another suggestion let bind hypenated form detected difficulty would actually mean different things likely taking risk better worse supporting camelcase", "d": "4/2016"}, {"body": "problem returns first object instead new one", "d": "4/2016"}, {"body": "hmm ca nt really tell much component alone would prefer actual repro", "d": "4/2016"}, {"body": "make proper repro", "d": "4/2016"}, {"body": "fixing bug actually way quicker making repro made pr fixes", "d": "4/2016"}, {"body": "intended breaking changes phantomjs requires nontrivial changes test suite anyone interested feel free try upgrading", "d": "4/2016"}, {"body": "try", "d": "4/2016"}, {"body": "phatomjs supported", "d": "3/2017"}, {"body": "nested nt supported html invalid see template parsing", "d": "4/2016"}, {"body": "closed favor", "d": "4/2016"}, {"body": "hmm actually chrome bug inside created proper namespace works intended firefox suggest open issue chromium meanwhile use instead", "d": "4/2016"}, {"body": "upon investigation nt seem namespace issue still looking", "d": "4/2016"}, {"body": "indeed chrome bug happens inside pointing external url works outside works defs document regardless bug would happen without vue simply append template content body nt render", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks object reactive", "d": "4/2016"}, {"body": "closed", "d": "4/2016"}, {"body": "vue adds event listener element sure vue issue aframe issue since nt happen vanilla vue maybe issue suggest making minimal repro open issue repo", "d": "4/2016"}, {"body": "glad time issue vue well seems far opened issue repo added steps reproduce bug live example", "d": "4/2016"}, {"body": "closed duplicate", "d": "4/2016"}, {"body": "webkit misfortunate feature webkitbased browsers originally implemented older draft backgroundsize omitted second value treated duplicating first value draft include contain cover keywords demo reference", "d": "4/2016"}, {"body": "vue set test prefixed version nonprefixed fix think test nonprefixed version first exception buggy properties like", "d": "4/2016"}, {"body": "using nonprefixed name fix duplicate value issue", "d": "4/2016"}, {"body": "yep works", "d": "4/2016"}, {"body": "simplesmiler ah ok get bitten browser vendors either way oh well yeah let check nonprefixed version first treat sepecial case", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "reproduce working fine sure looking please open tyoe issues webpack template instead core repo", "d": "4/2016"}, {"body": "displays properly would proper link compared", "d": "4/2016"}, {"body": "need use router history mode get rid hash", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "update managed get working modifying first variant like guess issue closed sure sane way update", "d": "4/2016"}, {"body": "nt understand get complex update view state sounds like design problem view state things properly matter shoving new objectarray fetched server", "d": "4/2016"}, {"body": "sorry nt understand using slot instead partial option sweatsmile reason", "d": "4/2016"}, {"body": "using slots pseudoderived promptdialog would following template every attribute foo original dialog component would need attribute outer promptdialog pass inner goes methods defined dialog need define proxies pass call inner bothersome defeats idea behind component extensionclass inheritance", "d": "4/2016"}, {"body": "say abusing partials bad idea partial snippets parent aware data context child tight decoupling dialog component hold state purely presentational pass state state displayed content belong parent component uses dialog", "d": "4/2016"}, {"body": "working intended object", "d": "4/2016"}, {"body": "deep object key changes method get changed key name value parent object nt need whole object thanks", "d": "4/2016"}, {"body": "murphymeng may want clone original object compare clone modified object callback also please direct questions gitter forum thanks", "d": "4/2016"}, {"body": "murphymeng would avoid using favor unidirectional data flow use immutable data useful library called objectpathimmutable whenever watch triggered run comparison figure changed nt", "d": "4/2016"}, {"body": "wanted share another solution provided user answer relative question stackoverflow note adding removing something original array call vmsetvalue method", "d": "12/2016"}, {"body": "phanan thank working think deep complex object plus key occurrence uncertain way much easier use create new object", "d": "4/2017"}, {"body": "sure see benefit following achieve", "d": "4/2016"}, {"body": "think refs nt work expressions unsure one clear benefit would n handling", "d": "4/2016"}, {"body": "see working slightly different syntax exploration needed", "d": "4/2016"}, {"body": "think would solve would minimize need good currently think would great nt see benefit object syntax maybe shorthand", "d": "4/2016"}, {"body": "paulpflug problem directives take expression nt look much better", "d": "4/2016"}, {"body": "think better use dispatch broadcast", "d": "4/2016"}, {"body": "broadcast ca nt control comp receive signal say common signal like use multiple components user space sidebyside mess smile actual current intent make opening closing component easy possible example sidenav modal dropdown one page controlled one buttons aside logic controlling actual content much single page think would best get trivial openclosing things done little effort possible worked ways work signals verbose let component hook click element limited hidden user work twoway bind prop verbose nt like think need opposite sure solve many unknown problems well", "d": "4/2016"}, {"body": "say common signal like open close use multiple components user space sidebyside mess smile use signal never use twice knew modal dropdown sidenav rather specify minimize ambiguity powerful simple enough use cases missing something apart see could useful complicated situations could already built custom directive right", "d": "4/2016"}, {"body": "could already built custom directive right tradeoffs possible custom directive paulpflug problem directives take expression vemit toggleliteral togglecomp nt look much better vemit togglecomp toggle could simply made valid expression emit broadcast dispatch powerful simple enough use cases sure work jquery think good argument question would better status quo want simple clear syntax possible personally avoid even wherever rare edge cases fine liking verbose error prone components props one hand great great job smile", "d": "4/2016"}, {"body": "paulpflug nt think shortcuts happening least one goals keep surface api simple cohesive", "d": "4/2016"}, {"body": "read discussion say definitely nt belong core app gets complex recommended approach centralized state management eg vuex rather overloading custom event system", "d": "4/2016"}, {"body": "hi working intended replace new array work smile", "d": "4/2016"}, {"body": "", "d": "5/2016"}, {"body": "solution better way", "d": "4/2016"}, {"body": "trying bind click handler string example string reference method one way around following html click", "d": "4/2016"}, {"body": "thedutchcoder thanks answer", "d": "4/2016"}, {"body": "hey actually limitation vue detect property deletion reactive object instead using mentioned vue api case would something like", "d": "4/2016"}, {"body": "yes exactly wanted tried vuedelete method earlier guess missed putting try everything works perfectly tqvm fadymak", "d": "4/2016"}, {"body": "hi please make sure sure ask question forums gitter chat get faster feedback try questions issues smile question sure understand point would ignore component maybe use vpre directive", "d": "4/2016"}, {"body": "adding element solve issue", "d": "4/2016"}, {"body": "thank much posva made day", "d": "4/2016"}, {"body": "wait forget mention something also need keep directives working since extended element would like use directives like vmodel disables everything", "d": "4/2016"}, {"body": "saidahemtnolaroads indeed problem fixed attribute nt resolve vue component preserved", "d": "4/2016"}, {"body": "think adding edge cases like really worth since already workarounds bad note", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "nt see one sorry thanks lot", "d": "4/2016"}, {"body": "taking look sure bug", "d": "4/2016"}, {"body": "ok confirmed happens though works thanks bug submission smile jsfiddle edit webpackbin", "d": "4/2016"}, {"body": "seems exact opposite templates", "d": "4/2016"}, {"body": "thattomperson nt work design working intended", "d": "4/2016"}, {"body": "ah ok replace div hope designer nt notice", "d": "4/2016"}, {"body": "nt connected nt natively translate traditional programmatical logic", "d": "4/2016"}, {"body": "blakenewman hides instead removing turns handy definitely reads better", "d": "4/2016"}, {"body": "btw nt forgot issue could nt allocate enough time past two weeks find time weekend sure", "d": "4/2016"}, {"body": "posva understand internals question mind vshow combined velse one issue velse currently terminable means logic behind velse works completely differ based prefixing directive believe opinion would confusing happents would velse applied weird case valid available single element", "d": "4/2016"}, {"body": "vshow would apply guess sure use case thought think replaced let vif work sure would solve real problem recall clearly deal directives priorities applied components component directive given priority", "d": "4/2016"}, {"body": "understand tempting get work think first felt bit counterintuitive would look also agree framework nt changed accommodate behaviour", "d": "4/2016"}, {"body": "posva targeting may also issues case nt want want velse applied vif lot complexity involved internally could done easily user land", "d": "4/2016"}, {"body": "would need use", "d": "4/2016"}, {"body": "scenario nt want code evaluate using terminable time want show hide without removing instance think confusing logical directive available two directives", "d": "4/2016"}, {"body": "case use bind meant content toggling trigger transitions", "d": "4/2016"}, {"body": "nt see could fix blakenewman described agree used content toggling one works one nt makes sense framework behaves like", "d": "4/2016"}, {"body": "ruiposse toggles element html", "d": "4/2016"}, {"body": "course use nt along", "d": "4/2016"}, {"body": "might understood blakenewman said nt understand trying say sorry add end change computed property something else trying show achieve affecting although nt even know bug atm", "d": "4/2016"}, {"body": "trying say noted trying mimic js logic templates nt generally good idea dropped trying add logic templates exist simple possible making work may cause unnecessary confusion especially scanning templates default try spot matching makes contextual sense achievable user land simple negate avoid adding vue necessary expression logic templates simple simple adding expression expression complex really handled js", "d": "4/2016"}, {"body": "mimicking js logic otherwise making vshow vhide work velse nt exist sure point already supposed work nt work components bug simple negate duplicates expression multiple places nt good drop support also nt understand happened ruiposse really think misunderstood talking talking supporting alongside blakenewman brought used subject explain shortly trying say anything deal original bug please", "d": "4/2016"}, {"body": "conditional statement styled directive programmatically bound languages hand relevance language expectations looking template could misleading seems like anti pattern extend work real need achieve easily negating expression view alot declarative implementing suggested complicate internals vue deal use case fully achievable user land mdn else spec", "d": "4/2016"}, {"body": "original bug looking webpackbin provided expecting work nt think something framework support blakenewman literally saying thing opinion nt work nt really know much clear", "d": "4/2016"}, {"body": "original bug looking webpackbin provided expecting velse work vshow nt think something framework support introduce breaking change", "d": "4/2016"}, {"body": "reading discussion inclined agree work first place going case going wontfix since workaround trivial", "d": "5/2016"}, {"body": "least fix document", "d": "5/2016"}, {"body": "centaur evening thanks reminding need salty", "d": "5/2016"}, {"body": "seems compatibility works quite well edge windows breaks chrome also breaks firefox open suse leap", "d": "4/2016"}, {"body": "setting value inside watcher always bad idea say easiest way deal simply using trying control value anyway", "d": "4/2016"}, {"body": "wo nt work case supported since", "d": "4/2016"}, {"body": "need skip observation objectarray use nt need put object order access simply attach hook nt get observed", "d": "4/2016"}, {"body": "nt work cache updated time main resource reactive mostly interested making nested cache object nonreactive", "d": "4/2016"}, {"body": "maybe time rethink model design nest things something observed", "d": "4/2016"}, {"body": "cache used dynamically lookup related resources eg could models author model defines tomany relationship called post model cache contains relationship data well related collection calling authorposts gets posts cache", "d": "4/2016"}, {"body": "design vue discourages putting complex objects statemutating mechanism vue instance putting pure state observed data vue instances may manipulate state anyway want objects responsible manipulations part vue instance state", "d": "4/2016"}, {"body": "first clarifying question exactly mean pure state two types state model state permanent data synchronized store eg todo vue state temporary data controls view behavior eg collapseshow todo list anyway fair model definitely complex request goes current best practices also initial example nt good worked disable observation representative current setup w possible usage js import post componentspost import author componentsauthor import comments componentscomments post template props post data gt collapsed false new vue el body data instance poststorefetch include author commentsauthor vuenonreactive instancecache basically parent vue responsible placing reusable components layout fetchingbinding data associated components child components nt fetch data data different different contexts eg list user comments vs list post comments model fairly dumb exception related objects nested instead looked cache eg may exact object instead multiple copies author object one looked cache nt mutation data made initial fetch also request relevant alternative might observe private object members could members leading single maybe double underscore downside approach would breaking change", "d": "4/2016"}, {"body": "anyone ends needing functionality released vuenonreactive appropriate admonitions everything", "d": "4/2016"}, {"body": "rpkilby thanks sharing", "d": "4/2016"}, {"body": "rpkilby one way copy object remove observablereactivity really useful since want keep array states implement state history object vuex edit solution specific case object needed copy property values moment time care references dynamic updates etc", "d": "8/2017"}, {"body": "right freezing object longterm solution vuenonreactive vue dependency overkill comes something straight forward would nt simple check code enough allow libraries ensure things like caches wo nt observed mostly issue libraries used vue applications least", "d": "9/2017"}, {"body": "tell vue watch defineproperty depth data case want vue get notified changed etc used use case would cause error threejs tries assign values object actually another similar place plain curobj perspectivecamera uuid name perspectivecamera type perspectivecamera parent null children array lodashisplainobject curobj false vueisplainobject curobj true add another condition user disable observing improve vueisplainobject detection", "d": "9/2017"}, {"body": "use destructuring", "d": "11/2017"}, {"body": "fix make isplainobject method return false js objectprototypetostringcall new unobservable object objectnoobserve", "d": "11/2017"}, {"body": "hi one point lost responses data original comment pure state case model instance private reference relationship lookup cache example lookup call dynamic property lookup relationship cache simple attribute access things consider cache pure state nt want observed vue waste resources cache discarded still need reference perform dynamic lookupsupdates cache effectively singleton may updated externally app updates accordingly response suggestions using json stringifyparse object destructuring sufficient duplicates object amp cache well breaking reference original cache updating original cache reference longer update app instances without dynamic lookups updates cache basically pointless would better make related objects simple attributes original model also worth noting suggestions break instance methods objects suggestions mechazawa make sense control type creation types built use vue case external library tied vue nt want go trouble altering types application much straightforward vue layer simply mark certain known properties unobservable criticism vuenonreactive vue dependency overkill comes something straight forward sure would bad thing already using vue application plugin specific vue mistaken build tools smart enough create bundles duplicate dependencies regardless nt correct dev dependency runtime dependency anyway glad see post garnered interest sure solutions work variety cases simply want highlight requirements original comment suggestions nt suitable alternatives case", "d": "11/2017"}, {"body": "recently ran discovered much easier way shortcircuit vue observation logic define property nonconfigurable background application work party library openlayers creates class instances hold data nt support reactivity system trying shoehorn one caused many headaches let tell viable solution large scale application using library let openlayers things way wants make vue play nicer horribly nested uber objects doom prior finding issue application using gigs ram largest dataset caused vue making objects reactive also really slow loading tried vuenonreactive helped get us gig prior using vue application sitting around solution anything nt want reactive simply mark simple stops property properties observed vue dependency arguably even incorrect application largest dataset simple easy required documentation change vue side make official way making something nonreactive", "d": "1/2018"}, {"body": "interesting definitely seems like viable alternative", "d": "1/2018"}, {"body": "way temporarily pause observation reactive unpause later prop watcher within update huge object nt want trigger dom update whole data preparation finished", "d": "3/2018"}, {"body": "intijk exactly see depends trying vue eventually apply state simply pausing calculated nt help much instead trying skip intermediate states apply final state start new object assign object end example psuedocode javascript doupdate const state clonedeep thismystate intermediate state updates thismystate state normal vue caveats object reactivity apply recommendation would use trick skip sections large object nt need reactive need reactive recommend using something like", "d": "3/2018"}, {"body": "morgul already used trick long fact longer want use trick anymore case data object kind big range perform deep copy object quite painful", "d": "3/2018"}, {"body": "intijk sounds incredibly complex something bind vue use case", "d": "3/2018"}, {"body": "morgul nt think case complex case simple data kind big time network load indexed visualization log file visualization component display", "d": "3/2018"}, {"body": "anyone thoughts defining nonreactive field within computed property first idea depends nonreactivity assignment array template props id input computed env function return reactive thisid nonreactive markdown function return markdown within markdownrender envnonreactive internaldata exactly selfdocumenting", "d": "3/2018"}, {"body": "hey guys found issue found facing problem pretty like rpkilby problem project construct series vue virtual doms called vnode json object use json object construct android app anyway json object great size use json vue observed vue tried rpkilby morgul way nt work btw team guys may pretty familiar vue probably cause json observed vue version wondering vue traverse function traverse val seen var keys var isa arrayisarray val isa amp amp isobject val objectisfrozen val val instanceof vnode val amp amp val vuenonreactive return see add val amp amp val vuenonreactive modify json object vuenonreactive true root node json solve problem wondering may cause problem considered new feature vue enable developer configure object observed vue configuring property object objectfreeze may change object immutable object ca nt fit every situation", "d": "3/2018"}, {"body": "consider set escape vue observe procedures today met case vue observe map instance mapboxgl weird things happed map get lighter map instance need passed vue instances add problem resolved", "d": "5/2018"}, {"body": "support officially using large object nt need reactivity component disabling unused reactvity reduced memory object size using magicdawn solution compatibility issue mechazawa best solution think solution setting false works makes vue crash tries set real", "d": "6/2018"}, {"body": "build vue plugin makes possible make vue variables nonreactive uses beforecreate hook cleaner vuenonreactive rpkilby please look comment solution wo nt work next version vue please look vuestatic way make variables nonreactive html export default static return map null mounted thismap new mapboxglmap something heavy", "d": "7/2018"}, {"body": "hi samuelantonioli looks like vuestatic something slightly different disabling reactivity entire object contrast vuenonreactive able disable observation single property keeping rest object reactive said looks like intents slightly different static properties nt observe changes intended rendered template nonreactive properties nt meant observed meant rendered eg model instance reference object cache enables related object lookups want observerender related js new vue data const instance poststorefetch include author commentsauthor vuenonreactive instancecache either way thanks heads look next version using proxies see way dupe observerproxy creation linusborg nt see experimental branch development taking place next version", "d": "7/2018"}, {"body": "still conceptexperiwmnt stage nt published branch yet serious work wo nt begin update door take work hopefully vuecli soon", "d": "7/2018"}, {"body": "thanks update", "d": "7/2018"}, {"body": "sure problem exists scope proxies introduced application make heavy use overhead vs overhead vue current observation seems much smaller devil details suspect problem feels redundant build object js module import return value computed function since wo nt observed nt matter computed function value never recalculated much better separation concerns since business logic type things vue components event trick setting properties nonconfigurable still least invasive least vue dependent way handle problem also reason assume would break es proxies still probably nt want observe nonconfigurable properties could entirely wrong know going away nt know check property configurable plus working like champ production code months similar problem space samuelantonioli openlayers map need work inside vue without vue balloon memory gigs", "d": "7/2018"}, {"body": "agree use another pattern eg import modules use computed properties nt need vuestatic needed pattern could teach employees easy understand use importmoduleandusecomputedproperties pattern nt clear imo bit ot pretty sure proxies good way go concerns browser compatibility nt support interested compatibility layer type polyfill use vue projects stricter browser requirements", "d": "7/2018"}, {"body": "tell vue watch defineproperty depth data idea easier structure data using vue external graphic lib normally multilevel nested large objects specify properties reactive", "d": "9/2018"}, {"body": "might missing something obvious using thispropertyname something big mounted hook nt solution nonobserved properties", "d": "10/2018"}, {"body": "hi vlahanas see", "d": "10/2018"}, {"body": "hello twoway style props binding types especially allows child change value propagate change parent oneway style custom events ed child picked parent please note issue tracker bugs feature requests questions support gitter chat forum find help quicker", "d": "4/2016"}, {"body": "bad though feature yet referenced components props would feature request", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "\u4e0d\u652f\u6301", "d": "4/2016"}, {"body": "think forcing transition case nt quite make sense component really change really trying achieve dynamically switching content transitions rather components probably come new mechanism specifically deal scenario meanwhile somewhat simulate single item", "d": "4/2016"}, {"body": "probably come new mechanism specifically deal scenario meanwhile somewhat simulate vfor single item hey ever implemented", "d": "4/2017"}, {"body": "anyone stumbles upon solved simply adding dynamic key component data change would remount sure elegant way solve", "d": "4/2017"}, {"body": "pierbover thank sharing hint", "d": "4/2017"}, {"body": "think bug create constructor extending also wrote instances created vue compilation every occurrence template based eyes makes sense select instance constructor n relation", "d": "4/2016"}, {"body": "paulpflug instance property pass components directly parameter components different transition apply think work pass component names parameters works intended see note updated reproduction clarify", "d": "4/2016"}, {"body": "understand problem passing component directly comp constructor vue block allowed use constructor multiple times components comp comp think could also components obj obj point way identify component name reason transition triggered component stays place whole time", "d": "4/2016"}, {"body": "problem actually calling object returns cached constructor actually object similar described add dedicated mechanism type transitions", "d": "4/2016"}, {"body": "ok thanks evan", "d": "4/2016"}, {"body": "feature cool err works like think would kind abuse according piece considered rather really need refer issue warning info idea appears ca nt figure duplication fiddle update got warning comes retrieve data children objects works like got two duplicated", "d": "4/2016"}, {"body": "think proposals would good enhancement", "d": "4/2016"}, {"body": "twiknight duplication happens identifier used key excerpt code see derived using results results propose following key path valid look nt heard", "d": "4/2016"}, {"body": "dragantl think mistook proposal thought trying make comparer got totally agree btw mentioned generic feature referring certain directive", "d": "4/2016"}, {"body": "makes sense welcome pr anyone wants take crack", "d": "4/2016"}, {"body": "make pr", "d": "4/2016"}, {"body": "dragantl oops working thanks offer tho", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "intended simply uses existing element component removed remove component", "d": "4/2016"}, {"body": "suggest alternative using approach mount dynamic components onto body modal know components ahead time include use dynamic switching preserve mounting point", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "nt dispatch native events use watcher watch bound value instead", "d": "4/2016"}, {"body": "case somebody facing issue workaround add plugins one", "d": "4/2016"}, {"body": "hi nt seem clear issue mentioning seems issue webpack configuration opposed vue issue", "d": "4/2016"}, {"body": "fadymak looked really strange vuejs nt work webpack right box even normal behaviour think mention webpackspecific thing somewhere readme doc think would way better make little check environment since vuecommonjs used browser well", "d": "4/2016"}, {"body": "think unintentionally chose wrong version vue use development version see thing needed get overview available versions differences", "d": "4/2016"}, {"body": "nirazul quite disappointing possible use wrong version lib without realizing seemed pretty obvious everything work like butter", "d": "4/2016"}, {"body": "webpack automatically shim unless explicitly tell browserify using webpack beta might cause different behavior", "d": "4/2016"}, {"body": "nope running thanks reply pointed real cause problem webpack indeed shims variable us automagically changed everything worked expected turned vue issue", "d": "4/2016"}, {"body": "fyi suggestion kucherenkovova makes symptom go away sure also solves works around problem perhaps ensuring indeed defined nothing value following also works plugins new webpackdefineplugin processenv", "d": "3/2017"}, {"body": "minjs version suitable imports esmjs version suitable imports", "d": "12/2017"}, {"body": "please provide full reproduction template nt help also try upgrading", "d": "4/2016"}, {"body": "problem update vue test works fine", "d": "4/2016"}, {"body": "horans try adding proper elements default list items tracked identity identity changes corresponding element destroyed created thus losing focus", "d": "4/2016"}, {"body": "problem occurs works fined dalphyx mentioned update narrowed problem push object initialized push rather pushed empty object initialized", "d": "4/2016"}, {"body": "different events stopping nt affect propagating use inner button", "d": "4/2016"}, {"body": "dblclick click different events thanks precision use clickstop inner button wanted simple double click element simple click select double click open like google drive folder document use custom method", "d": "4/2016"}, {"body": "guillaumevincent find solution want thanks", "d": "11/2017"}, {"body": "malian double click simple click element nt really good term accessibility tried another approach", "d": "11/2017"}, {"body": "duplicate please see discussionsolution", "d": "4/2016"}, {"body": "give correct use example", "d": "4/2016"}, {"body": "well see", "d": "4/2016"}, {"body": "provide full runnable reproduction", "d": "4/2016"}, {"body": "ca nt upload zip file", "d": "4/2016"}, {"body": "reproduction actually means runnable code snippet jsfiddlecodepen etc bare minimum code makes bug happen excerpt production code", "d": "4/2016"}, {"body": "sorry problem resoved yet caused vue thank", "d": "4/2016"}, {"body": "use", "d": "4/2016"}, {"body": "thank remove set undefined effects keyword also effect", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "components generated reactive array easy make change way check item show item component list fiddle hope would help btw nt think necessary make reactive think data reactive", "d": "4/2016"}, {"body": "twiknight right components data thus nt reactive vue reactivity simply nt work way dom events case", "d": "4/2016"}, {"body": "standard behaviour please see explaination list rendering syntax similar angular resolve", "d": "4/2016"}, {"body": "thanks clarification link", "d": "4/2016"}, {"body": "reproduce fiddle likely syntax error template please make sure open issue sure bug reliably reproduce issue", "d": "4/2016"}, {"body": "hey believe issue occurring tracking id toggling visibility based index array gets shuffled suggest tracking another property changing way computed created another fiddle see mean jsfiddle demo also note opacity changed going go ahead close however feel nt actually solve issue please feel free reopen issue take deeper look", "d": "4/2016"}, {"body": "set null false", "d": "4/2016"}, {"body": "general recommendation avoid using much always initialize data structures resort absolutely design supporting single key intentionally trying push away dynamically creating nested paths runtime supporting paths nt make powerful since always manually create structure easier abused supports paths also removed", "d": "5/2016"}, {"body": "\u8b66\u544a\u7684\u610f\u601d\u662f\u5efa\u8bae\u4f60\u5728\u7ec4\u4ef6\u7684 data", "d": "4/2016"}, {"body": "think solution fine resolving filters using string ids expressions inconsistent confusing nt know look", "d": "4/2016"}, {"body": "also improve fetching filter instead global", "d": "4/2016"}, {"body": "method computed property calls seen freeze safari", "d": "4/2016"}, {"body": "hey thanks reply case basically structure like html var app new vue el app data step components template methods nextstep function consolelog gostep gostep template step var gostep function step appstep step issue element handler pressed random freeze occurs tried debug good possible however see output believe loop actually called", "d": "4/2016"}, {"body": "ok order give help need provide minimal reproduction jsfiddle smile", "d": "4/2016"}, {"body": "try currently iphone ios testing issue appear yet seen iphone plus ios probably wait till next week get hands testing", "d": "4/2016"}, {"body": "seems like able fix likely completely unrelated vue element click handler anchorelement like freeze happen changing element one two ways either make buttonelement add hrefattribute html next step next step listeners would probably like blame safari still ca nt say sure reproducible situations jsfiddle interestingly removed optional unrelated jslibrary freeze happened different step confused anyway hope may help someone experiences similar issues", "d": "4/2016"}, {"body": "perhaps needed modifier prevent default behaviour link", "d": "4/2016"}, {"body": "remember correctly try well without influence would also expect affect much devicesbrowsers sweatsmile", "d": "4/2016"}, {"body": "anyone script freeze latest version iphone siri browser pop execute urgent needed", "d": "6/2017"}, {"body": "\u8fd9\u663e\u7136\u662f\u65e7 android \u6216\u8005\u662f\u6253\u5305\u73af\u5883\u7684\u95ee\u9898 vshow", "d": "4/2016"}, {"body": "vmodel val \u5728\u54ea\u4e2a\u5b89\u5353\u7248\u672c\u4e0b ajax\u67e5\u8be2\u5bf9\u7684\u5c5e\u6027\u8fdb\u884c\u8d4b\u503c\u65f6", "d": "4/2016"}, {"body": "\u6211\u611f\u89c9\u8fd9\u4e2a\u4e0d\u5c5e\u4e8e\u5728 vue", "d": "4/2016"}, {"body": "looks like unintentional breaking change nt think behavior ever documented workaround move default coerce function pinpointing commit change happened edit commit question", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "landed", "d": "4/2016"}, {"body": "problem want number prop passing static value always get string case casting value seems normal let hear people think smile", "d": "4/2016"}, {"body": "airyland hello guess hard time updating app latest version want code work may question habit opinion autoconverting props bit excessive least ways solving problem adding colon attribute using custom filter coerce function nt think adding extra layer magic good idea plus new edge cases plus affect performance", "d": "4/2016"}, {"body": "fullfs nt think feature adds magic layer user specifying prop type number actually expects component receive number nt binding variable prop value passed always string", "d": "4/2016"}, {"body": "posva static attributes always treated strings nice clear need number nt want bind property use colon treated expression converted number goes booleans nice explicit hard use colon need number", "d": "4/2016"}, {"body": "posva also would breaking change someone may intentionally pass number via static attribute want string concatenation", "d": "4/2016"}, {"body": "fullfs user already specifying prop vue even fires warning would also adde make type work", "d": "4/2016"}, {"body": "posva well type option supposed convert values validtion type words prop requirement see could compared variable types typed languages like javac even typescript another example jsdoccomments methods define param types function awaits receive function could work properly passed incorrect type purpose raises warning try pass incorrect prop type meaning something going wrong expecting", "d": "4/2016"}, {"body": "posva btw sorry rude nt mean offence bad habit mine heavily defend opinion", "d": "4/2016"}, {"body": "feature nt get implemented least explicit warning type defined nt match value passed static", "d": "4/2016"}, {"body": "fullfs np used comments know nice guy smile plus rude defending point normal way", "d": "4/2016"}, {"body": "posva ok thanks way got warning actually", "d": "4/2016"}, {"body": "fullfs yes thinking specific warning tell use btw static value optimise binding get binded like modifier", "d": "4/2016"}, {"body": "posva bound add warning specific case original issue working intended", "d": "4/2016"}, {"body": "nt see reference docs smile", "d": "4/2016"}, {"body": "posva nt work used vfor context", "d": "9/2016"}, {"body": "let guess call focus like", "d": "4/2016"}, {"body": "weilao yeahlike u sayi solve itthx", "d": "4/2016"}, {"body": "forme struggled focus past written module helps common focus use cases particular use case would put input", "d": "4/2016"}, {"body": "", "d": "3/2016"}, {"body": "ie support put instead", "d": "3/2016"}, {"body": "understand never paste dom always cut component template compile process im right", "d": "3/2016"}, {"body": "rule directly contain although directly inside may appear work cases never rely", "d": "3/2016"}, {"body": "reproduced msedge works similar ie many ways", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "ok thanks fast answer", "d": "3/2016"}, {"body": "azamatsharapov fair point standard forum topic though looking juicytablerepeat", "d": "3/2016"}, {"body": "azamatsharapov either look close enough juicytablerepeat solve simple case tr per row solved without issues", "d": "3/2016"}, {"body": "details explained multiple tbody inside table specific case though", "d": "3/2016"}, {"body": "simplesmiler needed time repeating several iteration ca nt solved nt look juicytablerepeat much detail thought could useful piece code something custom get work soon somebody told could use multiple solved issue agree juicytablerepeat might much help looks like messing much dom might play well vue", "d": "3/2016"}, {"body": "html", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "\u8bba\u575b", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "js var app vueextend methods createbook function alert", "d": "3/2016"}, {"body": "vue class bindings affect existing static classes element working intended", "d": "3/2016"}, {"body": "new version problem vuejs", "d": "3/2016"}, {"body": "want class controlled vue nt put static class first place", "d": "3/2016"}, {"body": "relatively new vuejs never used old version use case need class set page load vuejs loaded prevent fouc javascript disabled enable fallback functionality vuejs loaded able remove class eventually came following workaround ideal requires js code know template structure works well anyone suggest better solution love hear", "d": "9/2016"}, {"body": "comes js disabled states common pattern class html tag removed js snippet first possible moment considering fouc problem could add class added compilation renders base styles invalid adapt accordingly css css sidebar default styles sidebarpinned sidebar sidebarinitialized pinned styles", "d": "9/2016"}, {"body": "thanks suggestion nirazul possibility css already bit complicated trying avoid making even complicated plus sidebar could either open pinned closed page load remembered via cookie initalised serverside need two initial states would go something plus rules tweak parts layout needed css sidebarpinned sidebar sidebardefaultpinned sidebarinitialized sidebar sidebarclosed sidebar sidebardefaultclosed sidebarinitialized sidebar sidebarpinned content sidebardefaultpinned sidebarinitialized content sidebarclosed content sidebardefaultclosed sidebarinitialized content also changes specificity rules could create extra bugs certainly requires testing seems like lot work compared javascript edit currently thinking adding extra attribute like understand would run template compiled would written pure js directive", "d": "9/2016"}, {"body": "problem solved mine first suggested solution davejamesmiller thing migrate code vuejs instead using used", "d": "10/2016"}, {"body": "annoying limitation using components ability override classes would nice", "d": "8/2018"}, {"body": "flag triggering change callback right initial watch call synchronous callbacks pass get synchronous callbacks part official api better rely", "d": "3/2016"}, {"body": "duplicate", "d": "3/2016"}, {"body": "bad thanks", "d": "3/2016"}, {"body": "actually second snippet nt work either firefox yosemite", "d": "3/2016"}, {"body": "interesting make work need put vif vfor firefox work chrome way around might something priorities", "d": "3/2016"}, {"body": "yes dependent appearance order due conflicting priority fixed", "d": "3/2016"}, {"body": "sure problem maybe materdev branch build anywhere test works chrome firefox", "d": "3/2016"}, {"body": "zigomir firefox enumeration order reverse therefore fiddle compiled first root scope makes compilation order indeterministic based browser fixed giving different priorities", "d": "3/2016"}, {"body": "ah great thanks explanation wed mar evan notifications githubcom wrote zigomir firefox elementattributes enumeration order reverse therefore fiddle vif compiled first root scope receiving mentioned reply email directly view github", "d": "3/2016"}, {"body": "fix distribution get project", "d": "4/2016"}, {"body": "jeffmarshall dev build", "d": "4/2016"}, {"body": "ok thanks", "d": "4/2016"}, {"body": "\u7528 \u7136\u540e\u81ea\u5df1\u8ba1\u7b97 begin \u548c", "d": "3/2016"}, {"body": "fixed used vbind class changed webapi made retun true false able fix", "d": "3/2016"}, {"body": "loops vfor mess order know iterate group things", "d": "4/2016"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests specified contributing guidelines thanks", "d": "3/2016"}, {"body": "seems like legit issue", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "know guide page also belong api page", "d": "3/2016"}, {"body": "moved vuejsorg repo", "d": "3/2016"}, {"body": "want normal directive", "d": "3/2016"}, {"body": "phanan sorry click vuejs origin click event delay mobile phones", "d": "3/2016"}, {"body": "use fastclick vuetouch issues questions read guidelines tue mar \u5c0f\u4fa0\u540c\u5b66 notifications githubcom wrote phanan sorry click vuejs origin click event delay mobile phones receiving subscribed thread reply email directly view github", "d": "3/2016"}, {"body": "hi project appears longer maintained yet compatible chance builtin solution workaround", "d": "3/2017"}, {"body": "use beta", "d": "3/2017"}, {"body": "well silly thank posva", "d": "3/2017"}, {"body": "catch data", "d": "11/2017"}, {"body": "coding style things", "d": "3/2016"}, {"body": "nothing vue markup html parsed browser becomes write incorrect html vue ca nt produce correct results", "d": "3/2016"}, {"body": "thank reply really interests way believe two complete examples xy xy think learn html standard figure difference", "d": "3/2016"}, {"body": "read issue reporting guidelines", "d": "3/2016"}, {"body": "zhangking hello register partials use see beginner vuejs would faster use either gitter official forum questions like one", "d": "3/2016"}, {"body": "thanks answer want register partials dynamically component want use template developer pass props", "d": "3/2016"}, {"body": "found doest work use mixin javascript import test indexvue import vue vue vuemixin components test new vue el body data template item components test work", "d": "3/2016"}, {"body": "zhangking partials supposed registered dynamically probably many ways could achieve result take look also nt need register component globally use purpose", "d": "3/2016"}, {"body": "fullfs thank much", "d": "3/2016"}, {"body": "vue bug evaluates current value although mutated original object replaced new object contains old value compare", "d": "3/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue \u95ee\u95ee\u9898 ie \u4e2d\u7a7a\u7684 textnode \u5728 clonenode deep", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "complicates template quite bit little benefits nt think worth", "d": "3/2016"}, {"body": "could accomplished custom directive eg html fallback content", "d": "3/2016"}, {"body": "similar problem would like something like would recommended approach new component list task names seems like overkill", "d": "3/2016"}, {"body": "please disregard previous post working along", "d": "3/2016"}, {"body": "code generates active table would nice local vfor variable current index something like vvar curridx html c", "d": "3/2017"}, {"body": "think directive would help greatly performance instance template array parsed every time need display property object html findsubtotal paymentterm shortdescription anfloat findsubtotal paymentterm int anfloat findsubtotal paymentterm cap anfloat findsubtotal paymentterm ins findsubtotal paymentterm fee anfloat findsubtotal paymentterm ter js findsubtotal termindex return thissubtotalsfind st gt sttpterms termindex workaround missing improve performance think reopening issue could solve problem thanks", "d": "1/2018"}, {"body": "alexandrebonneau", "d": "1/2018"}, {"body": "hmm unintended change overlooked merging terminal directive pr", "d": "3/2016"}, {"body": "sorry meanwhile build source get fixed behavior", "d": "3/2016"}, {"body": "vue templates must valid html use way appear inside attribute values plain text bind boolean attribute attribute removed falsy", "d": "3/2016"}, {"body": "thank", "d": "3/2016"}, {"body": "real life example using semanticui often multiple class names tide one condition instinct tell type like first example however vue gave error", "d": "3/2016"}, {"body": "tried second example failed", "d": "3/2016"}, {"body": "second exemple would work expression returning string list best way imo would use list property computed flag", "d": "3/2016"}, {"body": "axnyff use string works well first case still worth consideration edit little reflect use case", "d": "3/2016"}, {"body": "\u53ea\u80fd\u7528\u5728 js", "d": "3/2016"}, {"body": "nt want pass filter want pass function know sounds pretty weird likely want put filter function option instead like test item would work expect", "d": "3/2016"}, {"body": "figured worked data nt try methods seems way logical problem see documentation might little unclear thanks help", "d": "3/2016"}, {"body": "crswll said want pass method instead option officiallysupported option btw weird though vue proxies methods ie accessible templates reason applies add although obviously recommended approach", "d": "3/2016"}, {"body": "yeah meant weird filter still function crappy job wording", "d": "3/2016"}, {"body": "crswll example featured documentation could nt figure function needed placed almost information docs", "d": "8/2016"}, {"body": "\u4e0d\u652f\u6301 css", "d": "3/2016"}, {"body": "\u5b98\u7f51\u6587\u6863 transform explorer yes", "d": "3/2016"}, {"body": "\u7684 bug \u4e0d\u80fd\u6b63\u786e\u5904\u7406\u5e26\u524d\u7f00\u7684\u5c5e\u6027", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "probably need upgrade vuevalidator make use latest terminal directive api cc kazupon", "d": "3/2016"}, {"body": "\u4f60\u4eec\u6709\u7ec4\u4ef6\u7684 dev branch", "d": "3/2016"}, {"body": "dev branch", "d": "3/2016"}, {"body": "\u975e\u5e38\u611f\u8c22", "d": "3/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks question finegrained deep watch usually bad idea cases achieve declaratively computed properties instead", "d": "3/2016"}, {"body": "unintentional breaking change read note access props data without work case", "d": "3/2016"}, {"body": "thanks simplesmiler", "d": "3/2016"}, {"body": "probably related html elements example restrictions elements appear inside custom elements whitelist hoisted thus render properly cases use special attribute indicate custom element could wrong", "d": "3/2016"}, {"body": "yes doesnt work partial", "d": "3/2016"}, {"body": "astaroverov hello jonagoldman right thing browser parse html compiled vue templates partials components valid html compilation browser wo nt allow anything else tag inside got moved outside table probably ca nt use partial inside consider using component", "d": "3/2016"}, {"body": "namemap used detecting possible misuse component tags nt need dynamic components", "d": "3/2016"}, {"body": "\u662f \u5916\u90e8\u7684 menu \u53ea\u4f1a\u4f20\u5165\u5b83\u7684 tab tab menu tab options context children", "d": "3/2016"}, {"body": "\u4e0d\u5efa\u8bae\u8fd9\u6837\u968f\u4fbf\u4f9d\u8d56\u5185\u90e8 \u4f46\u662f\u7ec4\u4ef6\u6ce8\u518c\u662f\u6709\u7a33\u5b9a api", "d": "3/2016"}, {"body": "create component listens hide event child component data dispatch hide event hide whole thing works fine", "d": "3/2016"}, {"body": "hi astaroverov please use gitter official forum questions", "d": "3/2016"}, {"body": "\u4f60\u7528\u7684\u65e7\u7248\u672c\u7684 vue", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "related please open vuerouter repo instead ideally actual code reproduction", "d": "3/2016"}, {"body": "sergeymorkovkin fix", "d": "5/2016"}, {"body": "nt fixed trying find time create proper ticket right repo demo project", "d": "5/2016"}, {"body": "sergeymorkovkin fix exactly issue like", "d": "5/2016"}, {"body": "yet workaround might using vuerouter replace", "d": "5/2016"}, {"body": "encountered problem", "d": "7/2016"}, {"body": "fixed however mutating passed prop recommended practice best treat props immutable values let original owners mutation", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "nt think thing passing components props vue props meant data even though would imagine pass template string construct component suggest reading vue components structure app flow vue way instead", "d": "3/2016"}, {"body": "also slots", "d": "3/2016"}, {"body": "loujiayu hello way please note could use either gitter official forum simple questions", "d": "3/2016"}, {"body": "fullfs ok", "d": "3/2016"}, {"body": "done", "d": "9/2016"}, {"body": "would also disagree notion props data think agree perfectly normal pass functions vue allowed passing component constructors well component black box much like function takes inputs props outputs vdom nothing says props data", "d": "9/2016"}, {"body": "blocka props indeed pass functions though documented anymore", "d": "9/2016"}, {"body": "know ranting props data comment", "d": "9/2016"}, {"body": "well props meant data sense vue conventions rely events register callbacks instead using props even pass callback prop vue encourages seperate two mechanisms said even respect convention scenarios passing function completely valid passing component config object used funtional component also possible pattern", "d": "9/2016"}, {"body": "please open issue reproduction link", "d": "3/2016"}, {"body": "would sync value back example need way convert computed feet inches back", "d": "3/2016"}, {"body": "yep snipped example brevity might better way used series watchers looks like vueselect thing js import vue vue import template templatesheighthtml text export default vueextend props model template template", "d": "3/2016"}, {"body": "think cool feature brings consistency user generated inputcomponents little cost would suggest simple implementation set component let shorthand", "d": "3/2016"}, {"body": "imo bring confusion profit ca nt see problem using pov like want look like real input way subjective", "d": "3/2016"}, {"body": "fullfs nt problem syntax except seems push deprecate", "d": "3/2016"}, {"body": "rpkilby thought moment happening means near future", "d": "3/2016"}, {"body": "think atleast considered advanced input fields usually numerous props change small imagine review code month later profit convention benefit would implicit naming convention imagine different advanced input fields use different names thing etc would save many round trips doc reading recall component uses name value", "d": "3/2016"}, {"body": "paulpflug write tag attributed column problem reviewing html looks even better use working largescale project based vue number developers nt problem understanding component props way even written another developer well might something behind idea nt see experience sorry", "d": "3/2016"}, {"body": "\u4f5c\u8005\u4f60\u597d", "d": "5/2016"}, {"body": "already implemented", "d": "6/2016"}, {"body": "sweet also backported", "d": "6/2016"}, {"body": "rpkilby unlikely see", "d": "6/2016"}, {"body": "anyone else looking vue syntax", "d": "6/2016"}, {"body": "hello html structure trying create valid nested get odd results achieve structure want remove wrapping", "d": "3/2016"}, {"body": "valid display correctly raw html item item header c item c item", "d": "3/2016"}, {"body": "opinion may happening", "d": "3/2016"}, {"body": "jackbit clarify vue uses standard html parser generate html reason html works standalone unit browsers use cleverly interpretate using html structure could get unexpected results browsers clever nested without wo nt work vue intend may feel like caveat vue however comes benefit respects standard dom interpretation", "d": "3/2016"}, {"body": "thought little bit sound like good idea found usually nt want components split parent also nt want store two parts separate one component closing feel free reopen anyway", "d": "3/2016"}, {"body": "workaround", "d": "3/2017"}, {"body": "tsunamilx guess named router views solve problem", "d": "3/2017"}, {"body": "nothing vue nest inside", "d": "3/2016"}, {"body": "really wanthave use trick refered vitaly friedman smashingmagazine dirty like would nt recommend though", "d": "3/2016"}, {"body": "nested case mine though would easy example case nested list suggestions", "d": "3/2016"}, {"body": "jackgit also nothing vue got invalid html using template inside component got inside please note browser parse html compiled vue templates valid html compilation fixed example get work right", "d": "3/2016"}, {"body": "please ask forum gitter repo issues exclusively bug reports feature requests stated contribution guide issue template thanks", "d": "3/2016"}, {"body": "found document fixed adding proper way", "d": "3/2016"}, {"body": "made modifications component believe listening change event twice html html lt div gt mycomponent lt input type radio name vmodel value value change change gt lt input type radio name vmodel value value change change gt lt div gt js js var component vuecomponent mycomponent template documentqueryselector tpl innerhtml data function return value methods change function event consolelog change event consolelog value thisvalue var vm new vue el demo", "d": "3/2016"}, {"body": "carlosingles want listen change event parent vm still trigger twice", "d": "3/2016"}, {"body": "listening dispatch events property try following html html mycomponent js js var component vuecomponent mycomponent template documentqueryselector tpl innerhtml data function return value methods change function event dispatch change thisvalue var vm new vue el demo events change function val consolelog change val", "d": "3/2016"}, {"body": "carlosingles right one child component dispatching change event distinguish component dispatches event", "d": "3/2016"}, {"body": "could pass reference component dispatch event probably good idea trying achieve perhaps holding model main component passing values via props would better approach since could manage values parent component could assign model component example form component manages values get passed via props different input components nt watch value changes since automatically updated", "d": "3/2016"}, {"body": "airyland issue related need rename component event name avoid conflict dom event name listen component event dom event", "d": "3/2016"}, {"body": "carlosingles watching value child component normal usage main problem event name conflicts dom event change event name fix rhyzx think component event name may conflict dom event close moment", "d": "3/2016"}, {"body": "please move repo instead", "d": "3/2016"}, {"body": "like question bug report suggest asking forum gitter sure folks included happy help", "d": "3/2016"}, {"body": "sounds like good idea", "d": "3/2016"}, {"body": "idea nice additionally would good allow api level directive custom directives may ever need single bind", "d": "3/2016"}, {"body": "blakenewman supply without already", "d": "3/2016"}, {"body": "true doh implemented plan keep functionality closing vuejscollaborators reopen change plan", "d": "4/2016"}, {"body": "proposal accepted yet", "d": "9/2016"}, {"body": "vue vue vonce", "d": "9/2016"}, {"body": "grafikart hello like idea first glance nt even look like breaking change", "d": "3/2016"}, {"body": "fyi use dynamic transitions", "d": "3/2016"}, {"body": "noticed trying create feature vuejs documentation nt mention", "d": "3/2016"}, {"body": "nt think detect missing directive lazy load looked code splitting", "d": "3/2016"}, {"body": "believe functionality nt exist could easily implemented setting perhaps", "d": "3/2016"}, {"body": "use case would behaviour useful possibly dangerous somebody would place malicious code directive called accidentally typed instead", "d": "3/2016"}, {"body": "think lazyloading directives granular introduces much implementationusage complexity little gain think keep async loading component level", "d": "3/2016"}, {"body": "use case crm directives used different pages likely would efficient load needed entire set directives would load optional callback handle wherever vue used tue mar nirazul notifications githubcom wrote use case would behaviour useful possibly dangerous somebody would place malicious code directive called vuelaoder accidentally typed instead vueloader receiving authored thread reply email directly view github robert plummer", "d": "3/2016"}, {"body": "robertleeplummerjr could directives single module file import needed component need use use webpack based loading system jsbundles filled directives actually imported", "d": "3/2016"}, {"body": "thanks guys stellar feedback careful consideration believe going process pull needed directives vuejs processes script must say vuejs pretty fantastic blog post handler enpowi work head buried reactredux although fine job vuejs w enpowi seems thing hardly lines lines data setup line user interface lines sadness thanks guys", "d": "3/2016"}, {"body": "pavelcss hello guess using inside template string calling function quite correct could something like though vue considering expression incorrect could bug also please note could ask tips gitter official forum", "d": "3/2016"}, {"body": "creates iteration scope points outer scope case pointing child component need reference parent component something overlooked assigning parent scope pointer since undocumented feature probably changed avoid confusion however time fullfs suggested avoid directly relying child components pass data using props instead", "d": "3/2016"}, {"body": "nt src mode page totally blank", "d": "3/2016"}, {"body": "information build setup mean src mode mean build mode seems like problem coolie please open new issue information available", "d": "3/2016"}, {"body": "sorry detailed information src mode means code develop mode build build mode means production mode uglify concat build command repository directory src mode links directory build mode links", "d": "3/2016"}, {"body": "real answer readability short term could break parameter across multiple lines eg html", "d": "3/2016"}, {"body": "luwenjin hello also problems multiple conditioned classnames like example please note proposing bring new directive syntax sole case look like wise decision tried make directives syntax compact possible make look like common javascript simple expressions arrays objects", "d": "3/2016"}, {"body": "luwenjin make custom method use support browsers", "d": "3/2016"}, {"body": "rpkilby example readonly class special case showing false value ignored common case like object literal vs use style almost never use old style anyway thanks advice fullfs like compact feeling vue like vfor imho one directive used frequently worth breaking rule order make user wring code fasterclearer proposal still common javascript way spread arguments like args function args even sticking listobject type still looking better admit supporting style object literal hard part without supporting proposal almost meaningless easy find elegant way support runtime", "d": "3/2016"}, {"body": "luwenjin tricky way html notice modifiers must unique else vue ignore duplicated directives", "d": "3/2016"}, {"body": "maybe allow duplicated directives", "d": "3/2016"}, {"body": "luwenjin problem transpile js yet transpile expressions inside template rhyzx nice trick duplicates possible browser parser strip second one regarding issue think possible improve syntax supporting objects inside list currently vue supports strings inside list would cover lot use cases", "d": "3/2016"}, {"body": "simplesmiler agree last one also like rhyzx trick ps also possible use custom whatever improved simplesmiler example", "d": "3/2016"}, {"body": "rhyzx wow nice trick simplesmiler transpile yes exactly agree objects inside list nice think divide proposal two parts new syntax best users among alternativestricks vue support degree full syntax objectsfalsevalue inside array object literal omit array brackets imo yes yes costs needs consider", "d": "3/2016"}, {"body": "tag like grows dimensions start thinking write elegantly prefer throw whole thing handle javascript overhead want use different locations different configurations opinion preferable introducing new syntax sugar", "d": "3/2016"}, {"body": "think bindings still valid javascript expression support objects inside arrays nt lot work", "d": "3/2016"}, {"body": "working", "d": "3/2016"}, {"body": "nice", "d": "3/2016"}, {"body": "landed", "d": "3/2016"}, {"body": "known issue fixed particular props inline values reactive", "d": "3/2016"}, {"body": "paste attribute component options", "d": "3/2016"}, {"body": "looks like functions return return already fixed land next release mean time keep using make sure functions return object", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "loeify hello please read", "d": "3/2016"}, {"body": "fullfs thanks", "d": "3/2016"}, {"body": "loeify welcome still questions left may post forum ps sorry felt dryness previous answer", "d": "3/2016"}, {"body": "fullfs ok right starter vue nt read document carefully much documentation begin vue width vue examples", "d": "3/2016"}, {"body": "serious maybe contact admin mirror site", "d": "3/2016"}, {"body": "u use option immediate watch case \u043f\u043d \u043c\u0430\u0440\u0442\u0430 \u0433 littlstonee notifications githubcom know watch used detect value change triggered value changed possible provide apis executing functions data change example var prependcustomfunctionfunction value consolelog avalue changed value var apppendcustomfunctionfunction value consolelog avalue changed value var set value value something data change possible prependcustomfunction value thisvaluevalue something data change executed watch appendcustomfunction value receiving subscribed thread reply email directly view github", "d": "3/2016"}, {"body": "astaroverov thanks replay option immediate used trigger watch callback immediately callback registered need trigger function every time watch expression change may option help maybe still ways modify vm data setter thanks", "d": "3/2016"}, {"body": "littlstonee hello could use something like mirrored values like way please note could ask tips forum sure feature capability probably better write first workaround post issue feature request", "d": "3/2016"}, {"body": "could computed values set option resolve issue could post small example code surrounding needs try evaluate use case", "d": "3/2016"}, {"body": "fullfs thanks tip redesigned component based mirrored values solution works well also thanks kindly note", "d": "3/2016"}, {"body": "router \u7684\u95ee\u9898\u8bf7\u5230 vuerouter \u7684\u4ed3\u5e93\u5f00 issue", "d": "3/2016"}, {"body": "hi oaleynik thanks reporting referenced commit message specifies need merge props data object defined reactive properties vm instance reason code would work props longer merged data object since data object initialized url property vue able detect change see look fiddle hopefully accomplishes trying please feel free reopen issue", "d": "3/2016"}, {"body": "unintentional breaking change let explain previously lt define props merged onto instance object however technically correct props part data documentation states points object passed option returned function contain properties defined props defined vm instance anymore therefore swapping would affect props technically doc never suggested work always directly set prop vm instance instead need set multiple simply call nt think merging props data offers practical usage unlikely reverted let know valid use case specifically depend behavior", "d": "3/2016"}, {"body": "fadymak thank makes total sense honest way thinking nt find mentions release notes fact patch release made debating intentional submitted issue pr case since declarative way passing initial component state configuration way cleaner easier follow thanks clarification", "d": "3/2016"}, {"body": "problem code change seems fair thanks explanation", "d": "3/2016"}, {"body": "hello getting look next time directly provide jsfiddle would perfect", "d": "3/2016"}, {"body": "got working nt trying achieve", "d": "3/2016"}, {"body": "oh forgot recursive components use option", "d": "3/2016"}, {"body": "thank investigating name option solves issue gt gt gt b gt gt b also note jsfiddle gives different warning reproduction link", "d": "3/2016"}, {"body": "switching assignments changes output nt think easily solvable ok workaround declaring component globally could mentioned docs", "d": "3/2016"}, {"body": "gt b gt gt b case caused vue variable declaration hoisted actual value defined later passed still even modules problem languagedesign issue imo work around delay binding compa compb setting manually created hook", "d": "3/2016"}, {"body": "hi thanks feature request imo multifield sorting something usual implemented impact size minimal breaking change implementing feature asap tomorrow smile", "d": "3/2016"}, {"body": "posva supporting key custom sort fn like flexiable opinion smiley", "d": "3/2016"}, {"body": "rhyzx like need add last parameter order safe breaking change cry also add optional first parameter may become harder understand filter done far moment breaking grid example removing ability use filter null parameter although imo reason call filter manually try fix evening edit nt see commit already referenced openmouth thought nt work forks", "d": "3/2016"}, {"body": "rhyzx comparator function think another filter called orders keys sort simplier sure added main repo", "d": "3/2016"}, {"body": "thank ignoring request effort put passing custom sorting comparator like rhyzx said makes sense well hope features included release one day", "d": "3/2016"}, {"body": "dcrystalj appreciate support smile bit slow sorry next time handle request faster muscle custom comparator think included another filter named making filter complex nt good idea code sort filter default compares string though default behaviour code done minutes sweatsmile improved", "d": "3/2016"}, {"body": "nice multiple fields sorted latest version go mean multiple fields multiple sort order like maybe change thank love vuejs", "d": "4/2016"}, {"body": "update suggestion welcome project working", "d": "7/2016"}, {"body": "janbaykara may introduce much complicated filter specific use case tables recommend use computed property order using lodash array specifying properties shall used sort lend", "d": "7/2016"}, {"body": "return orderby thischapters sort getting referenceerror defined vuecomponent suggestion tried npm install underscore fix issue", "d": "3/2017"}, {"body": "rsamal need include library page import use build tool want use lodash recommended", "d": "3/2017"}, {"body": "hmm breaking change public api refactoring regarding props initialization helpful see error actually getting", "d": "3/2016"}, {"body": "fixed one still running problems undefined prop component thank help", "d": "3/2016"}, {"body": "fyi want attach properties instead need information problems particular error stack", "d": "3/2016"}, {"body": "stack trace anything vue get undefined property undefined passed google api triggers error ping information ca nt afford spending time today sorry", "d": "3/2016"}, {"body": "repro guillaumeleclerc looks like functions return return demo shows exact issue worth adding check vue side warn user provided data function return object", "d": "3/2016"}, {"body": "docs defining component data must declared function returns initial data object looks like making mistake file clustervue inside function nt hang values directly instead return values want set object", "d": "3/2016"}, {"body": "sirlancelot know correct said bug paying attention wrote code without warning bug hidden everything break posted another error different data hook wanted know anyone hint remove data hooks created ones next release", "d": "3/2016"}, {"body": "simplesmiler think worth check nonproduction mode warnings always helpful makes vue awesome doc pretty clear imo nothing add", "d": "3/2016"}, {"body": "guillaumeleclerc may something", "d": "3/2016"}, {"body": "thank check something like code thank help", "d": "3/2016"}, {"body": "right using mix get saw looks like documented idreally like write code break next release vue give hints", "d": "3/2016"}, {"body": "guillaumeleclerc sorry change probably gone patch release assured quite rare changes happen patch releases use case trying enumerate props note get prop keys reliable", "d": "3/2016"}, {"body": "ok something like probably put mixin", "d": "3/2016"}, {"body": "looks good closing let know still unresolved issues upgrading", "d": "3/2016"}, {"body": "thank", "d": "3/2016"}, {"body": "everything fixed", "d": "3/2016"}, {"body": "similar", "d": "3/2016"}, {"body": "use instead example jsbin", "d": "3/2016"}, {"body": "work help thx", "d": "11/2016"}, {"body": "works controller html", "d": "7/2017"}, {"body": "thanks", "d": "9/2017"}, {"body": "answer work nonlocal url thanks", "d": "12/2017"}, {"body": "style backgroundimage url imgurl hotelimagename define imgurl data function", "d": "6/2018"}, {"body": "", "d": "8/2018"}, {"body": "cli generated app dynamically gets user imgs names server required advance works html inline template vue template mean need smth like working always says guess defined vue file nt render string value style property tries run function oh tried add function fond solution thank", "d": "10/2018"}, {"body": "please report instead", "d": "3/2016"}, {"body": "like", "d": "3/2016"}, {"body": "fixed", "d": "3/2016"}, {"body": "thanks reply tested code work yet send live demo link later since typing mobile makes crazy", "d": "3/2016"}, {"body": "certainly reproducing", "d": "3/2016"}, {"body": "fullfs thanks reproducing dontt", "d": "3/2016"}, {"body": "investigation nt think implementing means attributes must static adding warning names dynamic reason bit complicated consider inside conditional block inside may destroyed recreated means compileondemand ensure correct lifecycle hooks called components inserted slots thus precompile inserted content simply distribute later another consideration rendered list needs move dom nodes data changes moved places ensure correct behavior rule use case demonstrated however ways achieve end result probably rely partialscomponents see come something allows markup right template", "d": "3/2016"}, {"body": "hello evan also affected think build following simplified component generic component called named array logic ids ie component iterate inject name made fiddle example would like use component working slots injected without way achieve thanks advance", "d": "6/2016"}, {"body": "anxolin check", "d": "6/2016"}, {"body": "damn would like make tablelayout component takes number rows columns props creates grid able slot components get placed right cells based row column value props sure", "d": "10/2017"}, {"body": "volcanicpenguin nt know use case check worked use case may ideal solution working none less", "d": "1/2018"}, {"body": "\u53ef\u4ee5\u4e86 slot\u53ef\u4ee5\u5728vfor \u4e0b\u76f4\u63a5\u4f7f\u7528\u4e86", "d": "4/2018"}, {"body": "prograjkamal hello good see detailed feature request say related", "d": "3/2016"}, {"body": "fullfs thanks related deal slot api though proposal act js feature request act html actually complimentary", "d": "3/2016"}, {"body": "achieve slots currently since pass components props", "d": "5/2016"}, {"body": "thanks simplesmiler solve problem think take long time", "d": "5/2016"}, {"body": "think overly complex edge use case seems better wrap slot element works elementtext content alike programmatically inspect modify slot content using functions", "d": "6/2016"}, {"body": "also got feature request slot api plan raise issue tonight might helpful deals slots accepting components", "d": "3/2016"}, {"body": "paulpflug prograjkamal hello think guys got point also feeling slot api deserves updates useful opinion slot content holder lack sort communication methods scope paulpflug solution looks like way know already certain plans case say looking think good chance discuss little", "d": "3/2016"}, {"body": "description bit hard follow provide example using proposed api", "d": "3/2016"}, {"body": "pseudocode collapsible implementation vue parent ul slot plugin iscollapsible notify processclick moduleexports methods processclick child dispatch close child child li click onclick slot name header collapsiblebody slot content moduleexports data iscollapsible true methods onclick broadcast notify events close child child closing work usage collapsible collapsibleentry p slot header header p content collapsibleentry p slot header header p content moduleexports components collapsible parent collapsibleentry child example main difference working said probably best example idea limit directive attribute accept components behave bit like directive instead try implement probably take", "d": "3/2016"}, {"body": "let put another way directive mixture directives think would make sense put behavior behind attribute principle could also directive main difference takes vuecomponents children works difference handle custom content takes values global scope vue usage collapsible collapsibleentry p slot header header p content collapsibleentry p slot header header p moduleexports data content content components collapsible parent collapsibleentry child", "d": "3/2016"}, {"body": "let put understand words suggestion way communication component data nt belong compiled inside parent scope way pass data dimensions kind reverse events handling", "d": "3/2016"}, {"body": "new vuejs user came across limitation straight away trying build nested components concrete example accordion element accordion element usually made heading content area clicking heading toggle display content something fun easy program vue heading usually simple often containing text possibly icon indicate visually whether accordion opened closed content however contain large sections text subheadings images blocklevel elements plain html accordion might structured simply intended result like html look like end html accordion lorem ipsum dolor sit amet consectetuer adipiscing elit javascript usually added make heading work toggle showing hiding content area like able vue define accordions html like intended usage like code accordion html markup defining heading content elements vue components quite straightforward could like already implements fontawesome icon heading keeps track whether content openvisible js vuecomponent heading template props icon vuecomponent content template props open type boolean default false combine accordion component heading content components particular context accordion define inside accordion component use template accordion problem content parsed vue therefore declared components may nt get used vue simply plonk content html tag dom without looking using markup code intended usage component defined like get html accordion lorem ipsum dolor sit amet consectetuer aqipiscing elit end unrecognisable pseudohtml elements page imagine wo nt trigger functionality might defined subelements either problems html elements inside apart different order would plonked original markup could cause us kinds layout problems workaround try use named slots accordion suggested vue documentation like js vuecomponent accordion component definition heading content go means would longer able use elements directly html rather use normal elements place via slot attributes like note far departure intended usage also longer using heading content element directly move props parent accordion element syntax wanted less modular also produce html overly nested convoluted html accordion lorem ipsum dolor sit amet consectetuer aqipiscing elit end would simpler use subcomponents define whole thing single accordion component single template course means vue actually promoting embedded solutions rather modular ones heading element instance could useful also several contexts ie modals alert boxes view panels etc lastly problem gets compounded even think given page hardly ever using single accordion often several list instances might want coordinate open status accordion open given time vue already great eventmanagement system allows us bubble updown propagate messages well propbinding would allow us easily communicate changes parentchildrengrandchildren pointed paulpflug handling situations subcomponents involved together either convoluted impossible shown specially newbie like currently stands seems possible use vue components slots enable users use code appears intended usage produce html intended result also seems vue unable analyse parse content usefulness subelements limited usecases either subelement present parent subelement contents passed entirely props understand correctly proposed solutions far fall broadly categories fully parse analyse content elements looking possible embedded components implementing logic along way define new type would mark existence subelement innerhtml would look ie template accordion using slot could look something like would search element finds element would insert position would component could also named default slots along component slots like great solution elegant simple enough even newbies understand case heading content components found would placed component slots remainder content element attribute would placed named slot remaining elements would placed default slot note default slot would placed content component also present would indeed give us intended result intended usage code well making incredibly easier nest modular components ad infinitum newbie overview hope misquoting misunderstanding anyone hopefully might find plain english explanation useful last please keep good work vue awesome", "d": "4/2016"}, {"body": "luxlogica problem content parsed vue therefore declared components may nt get used actually vue acting intended problem attaching components using main scope instead scope js fiddle demo", "d": "4/2016"}, {"body": "prograjkamal thank headsup however still ideal solution nt discriminate filter put case wanted make sure thing gets put heading slot heading component content content slot instance accepted using simple named slots sometimes behaviour accepting anything functionality needed indeed usually composing complex nested components want opposite able specific typetag subcomponent goes slot usecases would better able refer component typetag name already identifying subcomponent tag need slot attribute markup making cleaner succinct coding", "d": "4/2016"}, {"body": "want restrict acceptable slot single component might well define code course allow set attributes effectively require right think way programmatic slot api lands vue would able access slots throw errorswarnings incorrect usage would like see suggestion implemented plugin vue core", "d": "4/2016"}, {"body": "thank suggestion look code proposed original comment one solutions came one reduces modularity produces convoluted html end imho kind functionality essential easily composing nested views even basic complexity shown definitely part core detailed programmatic api would extremely useful advanced programmers wanting push boundaries library functionality described basic achieving easy even newcomers", "d": "4/2016"}, {"body": "reason nt want functionality core general enough practically actually want validate html fragment passed slots suggestion however considers one specific case ie passed html fragment must root node specific type user wants allow types tags disallow certain set tags sure validation rules possible slots surely cases considered well talking vue core", "d": "4/2016"}, {"body": "ah see point indeed thinking much narrower usecase want cover usecases could perhaps implement selector directive takes css selector like selector slot html however filtering content done key analyse content placed slot looking possible components need resolved context parent suspect issue may may computationally expensive hence suggestion separate component slot type slot directive already tells vue looking element component analysed component slot html selector slots would simply plonked slot location like named slots component slots would actually inserted analysed run context parent would allow vue know computation needed rather analyse everything order cover every possible usecase need establish order operation slots order slot operations resolve component slots remove passed content resolve selector slots remove remaining content place leftover content default slot would enable essentially wide range selecting filtering slots using simple declarative syntax would cover vast majority use cases without need newbie learn api", "d": "4/2016"}, {"body": "luxlogica think hijacked issue would better create separate issue feature", "d": "4/2016"}, {"body": "think luxlogica proposal close thing reusable components selector pattern take children bad within component probably hidden user would prefer stick parameter html vs usage vs verbosity case worth must assumed user nt know thing hand selectors provide functionality honestly nt encountered case clever nesting components nt solve problem", "d": "4/2016"}, {"body": "paulpflug idea enduser exactly usage proposed total agreement enable developer author complex nested elements allowing simplest possible syntax enduser like proposal aims allow enduser html however prograjkamal pointed quite rightly lot usecases go beyond example nt thought initially idea use css selectors came solution cover wider range usecases probably futureproof suggestions differ humbly suggest use name component slots rather plugin slots seems semantically correct inserting plugins something else vue world inserting previously defined components use css selectors component slots rather merely component names creation selector slots would basically substitute current named slots would also use css selectors making unnecessary enduser need know component implemented type slots used enduser needs know compose element html code using custom tags created components exactly like example using accordion example usage implementation would like html accordion lorem ipsum dolor sit amet would make easier developer enduser", "d": "4/2016"}, {"body": "hello post questions vuejs forum vuejs gitter better answers smile question guess use computed property extra filter save data vm use later closing issue since bug feature requestsuggestion think better way feel free reopen issue eventually changing title feature request", "d": "3/2016"}, {"body": "small update triggering twice plugin trigger method approach works perfectly far see", "d": "3/2016"}, {"body": "look like bug far say trigger hook design otherwise would great risk getting stuck infinite loop called whenever value changes outside scope directive regarding accessing directive never breaks contract directive may change expression passed makes things hard debug also makes directive dependent exact structure component applied", "d": "3/2016"}, {"body": "thanks update started learning vue helpful say values changed outside scope directive mean initial approach tried implement able find solution setup including event happens inside directive dont see track selected value inside component using directive also accessing built functions would great feature case need special functionality example reset selected value together looks like nt use directives kind functionality integrating third party jquery libs", "d": "3/2016"}, {"body": "meant called someone else changes value opposed directive changing value see example looks like nt use directives kind functionality contrary directives great tool integrating thirdparty libraries operate dom way vue gitter channel forum get support", "d": "3/2016"}, {"body": "vladra may also check made modules examples", "d": "3/2016"}, {"body": "go native", "d": "3/2016"}, {"body": "simplesmiler directives great integrating third party libs integration look like terms least seems change value component library changes value directive kinda contradiction fullfs thanks links first link official documentation one problem actually matmoo thanks really helpful check source thanks help everyone since bug think issue closed", "d": "3/2016"}, {"body": "vladra let try explain actually two values first one viewmodel value second dom value first one changes something like second changes pick element select box ui directives means synchronising two values directive thinks dom value changed calls tell vue viewmodel value change someone else directive changes viewmodel value vue calls directive directive update dom value", "d": "3/2016"}, {"body": "happens element still offthedom wait vm ready", "d": "3/2016"}, {"body": "thanks", "d": "3/2016"}, {"body": "nihiue hello definitely pain sometimes think good thing treat way template expression error throwing warning message issue probably labeled propose check value type filter function example expect array could handle like javascript function value arrayisarray value return valuemap function item return item", "d": "3/2016"}, {"body": "think user responsibility handle edge cases custom filters like code write throwing errors javascript always crash app works", "d": "3/2016"}, {"body": "filterby filter \u6216\u8005\u7528 computed property", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "seem trying achieve may use slots distribute content reproduction inspect result see content actually passed components body", "d": "3/2016"}, {"body": "side note perhaps feature implementation vm slots could useful aid content distribution via javascript similar vm refs reasons could provide single modal component instance dom way could dispatch events content use vuex manage state component content distribution help prevent cases two way binding possible code duplication agree open separate issue feature discussion", "d": "3/2016"}, {"body": "blakenewman roadmap", "d": "3/2016"}, {"body": "nt see issue", "d": "3/2016"}, {"body": "blakenewman thanks answer actually want content distributed outside component example html want template insertedmounted div see level possible could get attention thank", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "thanks vuchl looks like looking give try", "d": "3/2016"}, {"body": "geodeveloper feature supported vue yeah party solution could work", "d": "3/2016"}, {"body": "ok though nice something like builtin lot cases need component mounted different element outside component vuchl tried plugin works expected thanks", "d": "3/2016"}, {"body": "component html moved expected least worked hahah", "d": "1/2017"}, {"body": "created directive", "d": "4/2017"}, {"body": "problem click event triggers mobile even use native javascript", "d": "3/2016"}, {"body": "delay happen mobile", "d": "3/2016"}, {"body": "delay nothing vue mitigate delay dedicated libraries", "d": "3/2016"}, {"body": "use vuetouch remove delay", "d": "3/2016"}, {"body": "also add css element", "d": "3/2016"}, {"body": "thnaks", "d": "3/2016"}, {"body": "\u8bf7\u95ee\u6709\u4ec0\u4e48\u597d\u5904", "d": "3/2016"}, {"body": "\u52a8\u6001\u6dfb\u52a0\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u83b7\u5f97\u540c\u6837\u7684context vue\u7684\u901f\u5ea6", "d": "3/2016"}, {"body": "\u4e0d\u5efa\u8bae\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u7ba1\u7406 vue \u672c\u8eab\u7684 mixin \u5373\u53ef \u9884\u626b\u63cf methods", "d": "3/2016"}, {"body": "lodash \u540c\u610f\u4f60\u7684\u8bf4\u6cd5 \u4e0d\u662f\u9884\u626b\u63cf methods", "d": "3/2016"}, {"body": "\u5c24\u795e\u8f9b\u82e6", "d": "3/2016"}, {"body": "make shameless pr vuetransition btw never consider good idea wrap transition vue", "d": "3/2016"}, {"body": "related", "d": "3/2016"}, {"body": "currently manually likely easier", "d": "3/2016"}, {"body": "directives ignored placeholder parent inserted content may contain nonelements e g text nodes directive works slots", "d": "3/2016"}, {"body": "handle moment might right way dealing use case specifically js import store applicationstore import storeanswer applicationstoreactions import validate validatejs export default vuex storeanswer computed", "d": "3/2016"}, {"body": "simply inside handler need reuse logic either make filter compose inside js js function guard handler return function e epreventdefault return handlercall e methods onclick guard function e", "d": "3/2016"}, {"body": "right guess get point thx lot", "d": "3/2016"}, {"body": "acceptstatement \u4f7f\u5f97\u6307\u4ee4\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u51fd\u6570 \u95ee\u9898\u662f\u4f60\u8fd9\u91cc\u6839\u672c\u4e0d\u9700\u8981\u7528 acceptstatement", "d": "3/2016"}, {"body": "reply consolelog fn \u5012\u6570\u7b2c\u4e09\u884c \u7684\u65f6\u5019\u4e0d\u662f\u8c03\u7528\u4e86\u4e00\u6b21", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "acceptstatement \u7684\u4f5c\u7528\u662f\u5f53\u4f60\u5199\u6bd4\u5982 \u7684\u503c\u4e0d\u662f\u5bf9", "d": "3/2016"}, {"body": "might related change fixing issues debounced model data", "d": "3/2016"}, {"body": "forgot issue seen chrome", "d": "3/2016"}, {"body": "confirm report go docs check try typing something input work docs use latest version chrome", "d": "3/2016"}, {"body": "swernerx workaround dont put production app back", "d": "3/2016"}, {"body": "nothing raw html interpolation hood compile content template inserted raw html", "d": "3/2016"}, {"body": "thanks quick addition functionality", "d": "3/2016"}, {"body": "\u6211\u89c9\u5f97 \u8fd9\u5e94\u8be5\u4e0d\u662f vue\u7684 \u6bd4\u5982 \u4f60\u7684 css leave \u7684\u52a8\u753b \u6240\u4ee5\u5b89\u88c5 vue \u4e2d\u7684 transitionend annimationend \u8fdb\u800c\u5bfc\u81f4 \u5143\u7d20\u4f1a \u8fd9\u4e2a\u95ee\u9898 \u5efa\u8bae \u53ef\u4ee5\u5728 jsfiddlenet \u4e0a\u4f7f\u7528\u793a\u4f8b\u4ee3\u7801\u7684\u65b9\u5f0f\u6765\u66f4\u65b9\u4fbf\u7684 debug", "d": "3/2016"}, {"body": "\u7528js\u94a9\u5b50\u68c0\u6d4b\u53d1\u73b0\u6700\u540e\u4e00\u6b65afterleave\u5e76\u6ca1\u6709\u88ab\u89e6\u53d1", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "reproduction link \u7136\u800c\u4f60\u4ecd\u7136\u80fd\u770b\u5230\u5143\u7d20\u6162\u6162\u5730\u53d8\u591a\u8d77\u6765", "d": "3/2016"}, {"body": "\u6211\u8ba4\u4e3a\u4f60\u7684demo\u4ea7\u751f\u7684\u95ee\u9898 \u548cvue\u6ca1\u6709\u5173\u7cfb\u554a", "d": "3/2016"}, {"body": "taoche", "d": "3/2016"}, {"body": "think reason causing problem setinterval since javascript single thread stop setinterval queued executed first one finish", "d": "3/2016"}, {"body": "yidingw actually production environment use setinterval actions triggered user definitely setinterval working online chat room users could recall message found frequently left elements page use setinterval simulate action add timer beforeleave time exiting animation finished element nt removed properly jquery would remove document temporary solution problem", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "eveluty", "d": "3/2016"}, {"body": "transtransition transition opacity opacity transenter opacity transleave opacity", "d": "3/2016"}, {"body": "eveluty \u6211\u8bbe\u7f6e\u4e3aopacity data \u6362\u6210 datasplice datalength \u6bd4\u5982", "d": "3/2016"}, {"body": "\u5e76\u4e14\u52a8\u753b\u6570\u91cf\u4e5f\u4e00\u81f4", "d": "3/2016"}, {"body": "eveluty \u987a\u4fbf\u5b9e\u9645\u573a\u666f\u4e0b\u7528\u6237\u7684\u64cd\u4f5c\u4f1a\u6bd4\u8fd9\u91cc\u7684\u6a21\u62df\u8981\u968f\u673a\u7684\u591a \u53e6\u5916\u73b0\u5728\u6211\u5bf9\u4e8e\u6b8b\u7559\u5143\u7d20\u7684\u5904\u7406\u65b9\u5f0f\u662f\u7528jquery\u5220\u6389", "d": "3/2016"}, {"body": "\u9634\u5f71", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "eveluty \u6240\u4ee5\u8fd9\u4e2aissue\u8fd8\u662f\u6682\u65f6\u5148\u7ee7\u7eed\u5f00\u7740\u597d\u4e86", "d": "3/2016"}, {"body": "\u522b\u7740\u6025\u6211\u8fd9\u4e24\u5929\u5c31\u770b", "d": "3/2016"}, {"body": "timer \u5143\u7d20\u88ab\u63d2\u5165 opacity \u4e3a enter class css transition \u4f46\u662f\u8fd9\u4e2a transition \u8981\u7b49\u5230\u4e0b\u4e00\u4e2a\u6d4f\u89c8\u5668\u7684\u6e32\u67d3 opacity \u4f9d\u7136\u4e3a \u5047\u5982\u5728 enter class transition opacity transitionend \u4e8b\u4ef6 \u5c31\u4e0d\u77e5\u9053\u4f55\u65f6\u8c03\u7528 afterleave \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 enter \u548c leave \u81f3\u4e8e\u80fd\u4e0d\u80fd\u5728 vue", "d": "3/2016"}, {"body": "evan notifications timer \u5143\u7d20\u88ab\u63d2\u5165 opacity \u4e3a enter class css transition \u4f46\u662f\u8fd9\u4e2a transition \u8981\u7b49\u5230\u4e0b\u4e00\u4e2a\u6d4f\u89c8\u5668\u7684\u6e32\u67d3 requestanimationframe opacity \u4f9d\u7136\u4e3a \u5047\u5982\u5728 enter class transition opacity transitionend \u4e8b\u4ef6 \u5c31\u4e0d\u77e5\u9053\u4f55\u65f6\u8c03\u7528 afterleave \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 enter \u548c leave \u81f3\u4e8e\u80fd\u4e0d\u80fd\u5728 vue receiving authored thread reply email directly view github", "d": "3/2016"}, {"body": "\u5e0c\u671b\u80fd\u591f\u5728\u6587\u6863\u91cc\u5f15\u7528\u4e00\u4e0b eveluty", "d": "4/2016"}, {"body": "classicoldsong \u5e94\u8be5\u662f\u5728\u4e0d\u652f\u6301 raf \u7684\u65e7\u6d4f\u89c8\u5668\u5427 \u8fd9\u4e2a\u771f\u6ca1\u529e\u6cd5", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "classicoldsong \u8fd9 \u90a3\u4fdd\u9669\u8d77\u89c1\u53ea\u80fd\u7528 \u5927\u6cd5\u4e86", "d": "4/2016"}, {"body": "iterating object tracking key default behavior nt even need", "d": "3/2016"}, {"body": "docs repo search using algolia docsearch maybe open issue instead", "d": "3/2016"}, {"body": "thanks sure post future documentation issues", "d": "3/2016"}, {"body": "fixed docsearch tada", "d": "3/2016"}, {"body": "sweet", "d": "3/2016"}, {"body": "never use dom api move components generated managed directives guarantee correct behavior", "d": "3/2016"}, {"body": "thanks quick response would recommended solution say lightbox component needs direct child due zordering nature needs lightbox example using dynamic conditionally render views within views lightbox components nested within components switching views stale lightbox elements persist manually removing elements component hook wonder approached wrong reading comment thanks input", "d": "3/2016"}, {"body": "rjoo vuetransferdom", "d": "3/2016"}, {"body": "hmm makes sense elaborate use case seeing trying achieve help", "d": "3/2016"}, {"body": "use case moment object vue model two twoway filters input field one sanitise user input eg take nonnumeric characters filter takes takes known format turns back moment object able switch sanitiser depending user input expected ended mixing two filters one also ran across something else related try explain well expected value oldvalue write method single moment representing date time want give access constituent parts like hours minutes seconds different input fields user initially wrote write function like expecting previous model moment value javascript read function value format return valueformat format write function newvalue oldvalue accessor format make moment partial user supplied data newpartial moment newvalue format example use filter well meant make input field user input update specific part moment object well click away input field set value recently succesfully parsed value correct format however example nt work nt previous value moment object write previous value users input final filter also accepts pointer model object use instead current bindings look like hopefully gives enough context explained well enough people follow offended anyone unconventional snakecasing javascript", "d": "3/2016"}, {"body": "write filters indeed applied reverse order fixed commit however think old value working intended supposed value last time filter called basically instead expecting parsed moment object mutating construct new moment object", "d": "3/2016"}, {"body": "please use correct localstorage api", "d": "3/2016"}, {"body": "localstorage api wrong", "d": "3/2016"}, {"body": "type", "d": "3/2016"}, {"body": "thank fixed checking", "d": "3/2016"}, {"body": "appears ready event called per component using created seems work nt know intentional", "d": "3/2016"}, {"body": "ryanshawty commented component outside hooks still called ca nt use callback need sure attached", "d": "3/2016"}, {"body": "prograjkamal see fri mar pm prograjkamal notifications githubcom wrote straps ca nt find docs related activate hook tell found reply email directly view github", "d": "3/2016"}, {"body": "straps sorry found right commenting deleted comment others wo nt bother guess edited instead deleting", "d": "3/2016"}, {"body": "thank", "d": "3/2016"}, {"body": "nt think case please provide reproduction", "d": "3/2016"}, {"body": "certain maybe problem bound instance definitely works used already maybe scope parent vm inaccessible following problem", "d": "3/2016"}, {"body": "closing inactivity please reopen follow information", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "\u4f60\u8981\u6ce8\u610f\u767e\u5ea6\u5730\u56fe\u521d\u59cb\u5316 \u548c vue", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "baidumapvue export default ready function var map new bmap allmap map operations maphtml bmap true \u4ee5\u4e0a\u5728webpack\u7f16\u8bd1\u65f6\u5c31\u62a5 undefined token", "d": "3/2016"}, {"body": "\u7528attached\u4e8b\u4ef6\u8bd5\u8bd5", "d": "3/2016"}, {"body": "jingsam", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "petjiang \u7559\u70b9\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u5457", "d": "3/2016"}, {"body": "petjiang", "d": "8/2016"}, {"body": "please post docs related issues", "d": "3/2016"}, {"body": "could please follow issue reporting guidelines much easier give good answer problem also using vuex version", "d": "3/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "3/2016"}, {"body": "expected von nt detect event prefixes", "d": "3/2016"}, {"body": "add directive vue transform event add event use vue von", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "vuchl also add directive element browser show", "d": "3/2016"}, {"body": "support outdated nonstandard irregularly named event however write custom directive handle specific case", "d": "3/2016"}, {"body": "thanks see", "d": "3/2016"}, {"body": "change title vuejs slower react rendering svg circles many scenarios vuejs faster fast react eg also mbp vue shows fps around whereas react around drastic could use improvement certainly consider performance bug", "d": "3/2016"}, {"body": "unfortunate thanks response happy see vuejs outperforms use cases newer macbook saw fps vue react use case mind rendering graphs vuejs modern browsers deal svg nodes acceptable fps plans improving performance use case", "d": "3/2016"}, {"body": "would say neither react vue seems suitable use case looking animating several thousand nodes even say svg would wise choice case performance concerns canvaswebgl would much better choice", "d": "3/2016"}, {"body": "well canvas webgl implementations hundreds thousands nodes webgl eg neither canvas webgl stand close svg convenience use", "d": "3/2016"}, {"body": "always tradeoff ease use extreme perf although frameworks like reactvue try optimize perf much possible simply designed specific use cases optimization centered around typical uiheavy applications use case sounds would better choice", "d": "3/2016"}, {"body": "fantastic watching long time prefer however declarative ui definition functionalimperative looks easier", "d": "3/2016"}, {"body": "update thanks use case managed obtain similar fps react also improved nonoptimized dbmon fps", "d": "3/2016"}, {"body": "updated repository remeasured close react indeed hope get vuejs closer native dom future ps bought coffee seattle happy", "d": "3/2016"}, {"body": "anvaka find driven mad trying handle svg vue due restriction supporting camel case tag hardly define smil animation mask filter vue considering plugin support svg vue seems would really take effort probably end special version vue compiler svg", "d": "3/2016"}, {"body": "twiknight since modifier", "d": "3/2016"}, {"body": "simplesmiler thanks try", "d": "3/2016"}, {"body": "anvaka btw idea amazing", "d": "3/2016"}, {"body": "avanka boussou holy cow site cool scott", "d": "3/2016"}, {"body": "expected behavior evaluated trying passing curried version instead", "d": "3/2016"}, {"body": "unfortunately nt seem work either child component following index passed back fine none args available parent", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "gotcha thanks much", "d": "3/2016"}, {"body": "interesting thought never accessible vm template", "d": "3/2016"}, {"body": "azamatsharapov correction made passing right number parameters variable called declared", "d": "9/2018"}, {"body": "nt know bug bit still good know fixed", "d": "3/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks question needs bound", "d": "3/2016"}, {"body": "update rather dom elements handling inputlike component personally strongly recommend singlebinding doublebinding leaves back door bad code intend update dom tree manually using vue", "d": "3/2016"}, {"body": "understand historical problem vuejs jquery usethanks", "d": "3/2016"}, {"body": "vue nt listen direct dom changes listens user input events questions please use gitter room forum", "d": "3/2016"}, {"body": "fiddle loading vue http page fixed working intended", "d": "3/2016"}, {"body": "ie apparently support new syntax works", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "computed get property returns new array longer bound data item sure best way going forward guess depends trying achieve probably better data property array words computed concatenate output aswhen required", "d": "3/2016"}, {"body": "bug using twoway sync intermediate scope variable simply wo nt work consider following example javascript would affect original array changing local variable inside iterator function context think good example makes want completely deprecate modifier easy beginners use inappropriately", "d": "3/2016"}, {"body": "use sync inputlike cases ca nt use vmodel eg case internally uses vmodel bind inputs however component abstracts complicated behavior maybe add admonition docs usage link expected usage", "d": "3/2016"}, {"body": "exactly usage rpkilby several reusable form field components using internally depreciatingremoving would break bad sure way achieve", "d": "3/2016"}, {"body": "yep place use twoway binding would possible add component strategyhandler vmodel twoway binds prop eg something like example kind double duty signals vmodel inputlike component specifies prop vmodel would bind", "d": "3/2016"}, {"body": "complete example based feetinches height input using js heightinputjs import vue vue import template heighthtml vuecomponent name heightinput model value template template data function return feet thisvalue mathtrunc thisvalue inches thisvalue thisvalue", "d": "3/2016"}, {"body": "nevermind looks like inspectordev tools adding return", "d": "3/2016"}, {"body": "live link seems ca nt seem reproduce issue link provided simpler isolated repro eg jsfiddle", "d": "3/2016"}, {"body": "ok try repeat jsfiddle", "d": "3/2016"}, {"body": "could nt repeat jsfiddle \u0441an transition directive difficulty components large number reactive variables nothing", "d": "3/2016"}, {"body": "unfortunately ca nt really triage without testable repro feel free open new issue run later hopefully reproducible", "d": "3/2016"}, {"body": "okay \u043f\u043d \u043c\u0430\u0440\u0442\u0430 \u0433 evan notifications githubcom closed reply email directly view github", "d": "3/2016"}, {"body": "hi fenivana looked code reproduction link see mean error displayed console copied code set exactly system rendered component without errors furthermore examine console output notice log messages created check repeated error thrown system thing happens simply creates component logs messages sequence expected ie created followed check thoughts understand really happening need deconstruct code taking top exactly trying achieve template see button clicked increment property trying render list using vfor however things find confusing docs component tag special tag used dynamically rendering components share single mount point attribute special attribute binding selects component render based property parent vue vm since chosen bind parent vm html element structure valid however raises issue b vfor directive used rendering lists ca nt used render list dynamic components code element essentially saying furthermore binding bound item assume label element comps array docs target binding property parent vm thus isitemname would correct actually existed item data property parent vm name property since property exist value variable javascript declared instantiated undefined thus value item undefined c finally option props binding implementing also suffers problem discussed ie target value binding item property exists parent vm thus value option undefined preceding analysis say happening following property parent vm initially falsy ie value click value becomes truthy ie value becomes truthy thiscomps set foo contained code since thiscomps set foo component tag examines parent vm registered component label foo course finds component contained code components foo template foo props option created function consolelog created thischeck methods check function consolelog check set optionbar true foo component rendered template inserted simply renders div text content foo follows component rendered created lifecycle hook triggered things happen sequence created logged b thischeck method triggered c check logged set optionbar true triggered causes component try create bar property option prop set property true throws error following reasons option prop receives value parent vm already discovered value undefined since item property parent vm give option value non existent b also syntax used set props one way binding syntax parent vm child component means option ca nt mutated foo component c thus set optionbar true triggered tries cause vue perform operation ie dynamically setting previously non existent property foo component undefined property ie option wheeeew may wrong analysis preceding think causing error thrown maybe nature jsfiddle issues code ignored fyi attempt replicate issue system maybe something code fault tolerant jsfiddle issues simply ignored component rendered expected way exactly trying achieve trying dynamicayy generate set divs button clicked hope attempt explain happening helpful regards", "d": "3/2016"}, {"body": "fenivana changed works opinion error caused infinite loop changes causes rerendering component created reactive data foo called changes changed go step infinite loop infinite loop ends error idea", "d": "3/2016"}, {"body": "ahhh see great may ask using vfor component tag understanding shoud nt work appreciate insight regards", "d": "3/2016"}, {"body": "definitely bug somewhere somehow button clicked gets also defined items beforehand issue goes away cc", "d": "3/2016"}, {"body": "var frags thisfrags new array datalength frag thiscreate value alias key frags frag initialization asynchronously recursively calls lets set fragment diff lt important update directivebindupdate watcherrun runbatcherqueue flushbatcherqueue nexttickhandler mutation async timerfunc anonymous function pushwatcher watcherupdate lt stack point depnotify set setpath anonymous function vue set vuecomponentsfoocreated index vuecallhook vueinit vuecomponent build mountcomponent anonymous function anonymous function cb vueresolvecomponent resolvecomponent setcomponent update directivebind linkandcapture compositelinkfn fragment fragmentfactorycreate create lt important diff lt important button pressed synchronously recursively calls set length set elements", "d": "3/2016"}, {"body": "simplesmiler feel saying still want know possible use vfor specifically used rendering dynamic components parent vm almost like saying use vfor tag really appreciate explanation regards", "d": "3/2016"}, {"body": "oakinogundeji common technique rendering list different components driven array would nt nt make sense multiple next", "d": "3/2016"}, {"body": "would solution following", "d": "3/2016"}, {"body": "actually async queue scheduling issue change triggered watcher leads applied synchronously diff finishes basically triggering new diff middle ongoing diff thus messing intermediate state", "d": "3/2016"}, {"body": "side note like point mutating object props recommended practice", "d": "3/2016"}, {"body": "see still learning vue internals supposed work", "d": "3/2016"}, {"body": "know issue resolved questions like clarification response said use common technique rendering list different components driven array dispute say really know best like point mentioned recent documentation problem nt vfor directives rather problem usage directives component tag according contents docs component tag reserved use mount point dynamically switch multiple components bound attribute parent vm would like clarification issue since believe tool popular vue nt throw kind surprises based docs besides relatively new vuejs tool choice building client side apps promote writings really like know simplesmiler able get info quoted ie diff etc special debugger mode enable get insight regards ps hope able contribute much vuejs tutorials articles believe may benefit community contribute", "d": "3/2016"}, {"body": "oakinogundeji right docs phrasing current doc nt imply work conjunction tag generic placeholder custom elements merely serving placeholder template components fact use directive example means", "d": "3/2016"}, {"body": "thanks evan appreciate clarification understand correctly saying component tag primary function serving mount point dynamically rendering child components could also use generate list components would use vfor directive html element appreciate clarified significance itemtype exactly type property signify supposed assign elements list type property thanks response appreciate regards", "d": "3/2016"}, {"body": "simplesmiler hi please access vfordiff impressed amount insight able gain appreciate pointers regards", "d": "3/2016"}, {"body": "oakinogundeji probably easier understand demo interested vue internals enable give stack traces vue warnings add breakpoints chrome devtools", "d": "3/2016"}, {"body": "thanks man really appreciate help yes interested vue internals everything vue really appreciate done may submit material review may helpful beginners like regards", "d": "3/2016"}, {"body": "oakinogundeji evan said chrome devtools vue source code guesswork", "d": "3/2016"}, {"body": "simplesmiler thanks man regards", "d": "3/2016"}, {"body": "\u6211\u4f7f\u7528 currentview\u4e3a\u5bf9\u5e94\u7684\u52a8\u6001\u7ec4\u4ef6 \u6dfb\u52a0ready", "d": "5/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "satrong issue questions posted gitter chat room forum stackoverflow thanks gitter chat room forum stackoverflow \u800c\u4e14\u4f5c\u8005\u5df2\u7ecf\u5199\u4e86 issue \u6240\u4ee5\u4f60 new issue issue list accepts bug reports feature requests issue", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "", "d": "8/2016"}, {"body": "", "d": "12/2016"}, {"body": "\u5373\u4f7f\u4f7f\u7528\u4e86 disabled disabled", "d": "1/2017"}, {"body": "frankfang orangepig satrong vue\u4f5c\u8005", "d": "3/2017"}, {"body": "chuanpro", "d": "3/2017"}, {"body": "frankfang", "d": "3/2017"}, {"body": "\u6216\u8bb8\u53ef\u4ee5\u8fd9\u6837\u5199", "d": "7/2018"}, {"body": "thanks suggestion noted pipe common data piping unix concept familiar seems obvious benefits hand note vue post project going make breaking changes without strong arguments behind", "d": "3/2016"}, {"body": "little offtopic since filters supported expressions version issue need revisited maybe syntax improvement could distinguish actual filters bitwise operations hand migration guide filters directives including deprecated objectives still done computed properties wondering whether adding feature back original idea insights share", "d": "11/2016"}, {"body": "thanks great framework issue would agree niceue vuejs supports full power javascript expressions inside templates use template like strange vuejs supports syntax nt support bitwise wrote demo show strange behavior html n amp n js new vue el app data n alert amp alert html renders shows nt like nt thought perfect solution", "d": "1/2017"}, {"body": "xcatliu revisiting issue turn happier computed property bitwise issue also flexible filters still limited text interpolations vbind expressions", "d": "1/2017"}, {"body": "time created hook called dom compilation started need either compiled element exists dom yet ready element inserted dom", "d": "3/2016"}, {"body": "omg right thought fact thank much closing issue", "d": "3/2016"}, {"body": "component priority yes create directive priority gt like vif directive priority directive init component init higher priority means earlier compilation yoou want create directive compiled later need give lower priority", "d": "3/2016"}, {"body": "components directive priority relative directives scope directive element component considered directive inside component scope also directive priority affects compilation order different collection order collection phase terminal directives like components hardcoded highest priority", "d": "3/2016"}, {"body": "thx answer might worthwhile add ability create terminal directive like vif possible", "d": "3/2016"}, {"body": "astaroverov already possible documented involves lot understanding vue internals basically define directive push name array", "d": "3/2016"}, {"body": "awesome intresting information", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "benefits vue files html xml made xmlparsable already htmlparsable wed mar pm jakub mikulas notifications githubcom wrote single file components awesome xml notation xml elements whole file parsed currently invalid xml standpoint missing root element vue knows problematic suggestion add optional root element vue could parsed xml parser instead html parsers currently vueloader wo nt compile files happy prepare prs reply email directly view github", "d": "3/2016"}, {"body": "playing ideas around deserialization vue files building devcards vue components taking closer look logic around parsefragment nt needed thanks reply closing", "d": "3/2016"}, {"body": "always define componentmethod whatever want could also expose window reference within component data generally good thing ca nt access stuff part scope need referenced within component methods object mysingleton myfunction function moduleexports methods mysingletonmyfunction", "d": "3/2016"}, {"body": "yes function works expected sometimes convenient use directly markup declaring data works want singletons complex services reactivated regarding concern scope yes singletons provide generic globally available services case designed way used everywhere wondering vue prepends feeling without going vue source kind exception unless vue dogmatic accessing scope component markup", "d": "3/2016"}, {"body": "implicitly falling back globals maintainability nightmare look template idea whether variable belongs component globals defined someone idea", "d": "3/2016"}, {"body": "understood recommended way access singletons component markup without adding data would make reactive wanted fact reactivity intended", "d": "3/2016"}, {"body": "recommended way reference global function fairly easy plain javascript", "d": "9/2017"}, {"body": "work", "d": "10/2017"}, {"body": "could well inline handler", "d": "4/2018"}, {"body": "mentioned previous issue inside rabbit hole supporting leads problems convenience give component class name also proposed syntax wo nt work mustache tags vue templates work way appear inside attribute values plain text", "d": "3/2016"}, {"body": "ok use queryselectorall replace hope meet problem compatibility nt know deeper detail vfor vref idea jsp tag", "d": "3/2016"}, {"body": "could probably beforecompile event fired element goes vue compilation", "d": "2/2016"}, {"body": "vue directives removed rendered markup eventual markup compliant", "d": "3/2016"}, {"body": "tips v anymore relevant windows phone said relevant anymore could use datav instruction keep source server compliant order pass tests example edit thinking vbind class syntax become datavbind class change validation failure maybe osef", "d": "7/2016"}, {"body": "figured mixins nt children component strictly speaking produce desired behaviour change dispatch emit everything works expected", "d": "2/2016"}, {"body": "nt prop check default value first would keep line happens omit prop completely another jsbin showing different ways pass non value prop thinking fall back default value cases", "d": "3/2016"}, {"body": "thought nt implement user may explicitly want pass undefined think appropriate map semantics js function calls default value would used passed prop undefined", "d": "3/2016"}, {"body": "see", "d": "3/2016"}, {"body": "thanks going suggest prop option allowing nulls passed case none required props case default would apply prop completely absent", "d": "3/2016"}, {"body": "bit confused commit says ca nt see code handling undefined commit actually says null set default undefined passed prop handled", "d": "10/2017"}, {"body": "check default value value undefined value getpropdefaultvalue vm prop key since default value fresh copy make sure observe var prevshouldconvert observerstateshouldconvert observerstateshouldconvert true observe value observerstateshouldconvert prevshouldconvert assertprop prop key value vm absent found bit vuejs dist around part defaults handled ca nt find comment build function applies props vm anywhere current vuejs build", "d": "10/2017"}, {"body": "duplicate wenliangcan could use something like html key val function", "d": "4/2016"}, {"body": "haha similar issues open time people insist justify implementation well people want use one justification also list bazillion issues closed ask thing xd also found one justifies usecase really well refers specification comes map order still closed", "d": "8/2016"}, {"body": "people wanting use feature argument justify need feature necessary weigh cost benefits problem solved adding feature", "d": "8/2016"}, {"body": "yep still arguments people use close issue still valid least valid usecases eg example elipen justified usecases well mentioned", "d": "8/2016"}, {"body": "want discuss specific issue link please plus feature issue open make sense one issue open request", "d": "8/2016"}, {"body": "important able iterate iterators loops seems plainly obvious fundamental feature language reasons supporting iterators maps sets valid refusing support means limiting decision becoming less less justified time building application internal data stored maps sets instead making available ui need keep data synced two manually write boilerplate import templates conversion whenever data needed exactly vue intended avoid", "d": "9/2016"}, {"body": "since closed worth reiterating current decision short feature trivial implement observation mechanism level justifying use cases amount work tradeoffs would really appreciate feature hand observing data types becomes terribly hacky example compromise performance qualities people currently use maps sets vue might appreciate change", "d": "12/2016"}, {"body": "suppose using arrayfrom inside computed function best friend disappointed", "d": "6/2017"}, {"body": "solution", "d": "7/2017"}, {"body": "small update come ifwhen vue decides drop legacy browsers move evergreen ones instead reactivity alexsandroxpt use computed function returns", "d": "7/2017"}, {"body": "nickmessing try map nt work computed array length value always", "d": "7/2017"}, {"body": "probably solution want lack reactivity changes get propagated vue mentioned earlier sets maps observable vue order use either computed properties methods watchers template expressions etc need create serializable replica structure expose vue naive example uses simple counter providing vue information set updated data mysetchangetracker myset new set computed mysetaslist using tell vue property depends gets reevaluated whenever changes return thismysetchangetracker amp amp arrayfrom thismyset methods add item thismysetadd item trigger vue updates thismysetchangetracker illustrates kinda hacky working method making nonobservable data reactive still real world cases ended serialized versions setsmaps eg probably want store modified versions setsmaps localstorage thus serialize anyway artificial countershacks involved personally think fair solution problem definitely deserves official documentation otherwise impossible justify nonhacky way dealing vue internals", "d": "7/2017"}, {"body": "alexsandroxpt sorry wrong computed hacky inca said another hacky solution would using method example fiddle", "d": "7/2017"}, {"body": "thank nickmessing inca work fine", "d": "7/2017"}, {"body": "right vfor map vfor acts received empty array regardless outcome extended discussion whetherhow support maps sets would save lot people lot debugging time vue simply warned maps sets yet supported see", "d": "8/2017"}, {"body": "yup google search feature brought ticket annoying mixups vueset vfor documentation", "d": "9/2017"}, {"body": "truly vfor documentation", "d": "9/2017"}, {"body": "cc chrisvfritz let try add note support types docs api list rendering section also take look", "d": "9/2017"}, {"body": "wonder console warning would better since would tell people wrong immediately obviating need search solution also already explicit docs types support among definitely see argument one might hope iterables would work nt think currently give readers reason expect would", "d": "9/2017"}, {"body": "quite seeing argument adding support cleanly polyfilled unless missing something seems like vue approach adding reactivity arrays could easily extended sets need wrap", "d": "9/2017"}, {"body": "best guess please correctsorry wrong trickiest part wrap constructor accepts iterable nt see iterable made observable general form function ie referenceable state think generatorbased iterator example", "d": "9/2017"}, {"body": "need wrap constructor would nt passing preexisting sets vue according spec constructor immediately runs entire iterator effectively retaining shallow copy unique items returned iterator got instance nt matter whether created iterator regard created iterator different array created iterator via vue already supports", "d": "9/2017"}, {"body": "use immutable mapssets whatever data structures allow reactivity though simply whole chunk reference changes render render function computed generated array earlier better performance skips creation array mutable data structures unless find way notify vue specific changes manually would simply homebrewing yr solution", "d": "9/2017"}, {"body": "good ca nt", "d": "12/2017"}, {"body": "wenliangcan key nt show page", "d": "12/2017"}, {"body": "keen support", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "future plans add support technical reason vue could support map set", "d": "1/2018"}, {"body": "current problem vueset method plain object triggers way many subscribers property added object actually subscribers properties triggered one property added performance view badly impacted map like collection contains hundredth keys example project thousands subscribers triggered one element added map using vueset operation look deeply vuejs code see problem comes dependencies triggered object means object one property key dependencies keys triggered adding one key using plain objects mimic map look right solution therefore support map vue welcomed large collections items", "d": "2/2018"}, {"body": "news future plans possibly native support", "d": "3/2018"}, {"body": "article details upcoming support nothing official roadmap see current latest core next minor release support native esm import improved async error handling iterator vfor directive sure got information", "d": "4/2018"}, {"body": "found issue debugging heck vue behavior data objects thinking", "d": "8/2018"}, {"body": "people like wondering roadmap evan says video map set support likely arrive may know", "d": "8/2018"}, {"body": "unfortunate issue tracker marked closed especially considering adding support near future follow progress feature another issue somewhere", "d": "8/2018"}, {"body": "wondering sake argument maybe wrong since track array mutation using mutation methods cant track array object logically complete dont get features implemented map ones want would pretty easily addressed especially using something like lodash", "d": "8/2018"}, {"body": "sad team adds might use alternate data structures", "d": "9/2018"}, {"body": "referring yes seems usage wrong nt use property initializers work", "d": "2/2016"}, {"body": "first sorry possible misunderstandings part really trying understand core fantastic library walking edge regarding knowledge js yes referring main inspiration tight typescript classes really coupling understand using provide reactive data resolved el constructing class result extend instance understand saying means extended vue class ca nt hold data given initializing original given options parameter case point may subject change could somehow call original constructor chain would able initialize instance property chain would cause provide possible overwrite values given call class instance would behave almost normally possible vueextend instance really prototype extension real class extension classic sense hope make sense easy explain", "d": "2/2016"}, {"body": "never called actually using raw class treat something holds meta data passed creates actual sub class guess right classic class extension personally recommend trying bend fit classic class extension semantics vue components classes", "d": "2/2016"}, {"body": "ok thanks try bend brain fact thanks clearing", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "undefined null", "d": "2/2016"}, {"body": "ie support inside elements like may want read post", "d": "2/2016"}, {"body": "yes see silly question template located inside tag thought content parsed browser vue compile insert target element wrong thanks", "d": "2/2016"}, {"body": "vue renders template real html compiling html restrictions apply vue templates matter define", "d": "2/2016"}, {"body": "likely parent contains another component root try following template parent", "d": "2/2016"}, {"body": "expacted please read fragment instance docs carefully", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "think using specific use case probably wrong filterby primarily used string inclusion filtering item price like show free list case probably better use two custom filters case suggestion adding keyword really would like avoid making array filter syntax complex fact today encourage users use computed properties whenever possible instead using array filters computed properties give full power javascript whatever want gives cached variable easily get length filtered result case could two computed properties also makes template expressive", "d": "2/2016"}, {"body": "accepted thanks explanation", "d": "2/2016"}, {"body": "oh saw issue know problem proper implement sorry", "d": "2/2016"}, {"body": "actually", "d": "2/2016"}, {"body": "oh smile xie xie", "d": "2/2016"}, {"body": "problem return array nested return array arrays nt seem useful think better describe exact scenario led want feature trying achieve", "d": "2/2016"}, {"body": "actually raised question gitter later realized tackling problem wrong way idea create directive slidetoggle element would bounded element toggled could check visible basically fiddle directive would inside", "d": "2/2016"}, {"body": "messed around bit think understand situation lot better impression held elements component appears get root component helped understand", "d": "2/2016"}, {"body": "note used router yet looks correct indexcomponent initialised kicks sub component null route active kicks set message watcher kicks might wrong way vue batches updates nt believe order see console messages reflects way data batched processed", "d": "2/2016"}, {"body": "router hook fired first hook change subcomponent gets prop old value finally subcomponent updated newest value starting think related vuerouter expected router hooks process component lifecycle hooks", "d": "2/2016"}, {"body": "prop propagation also async using internal batcher queue child called synchronously parent prop nt propagated yet think probably mention doc", "d": "2/2016"}, {"body": "hmm one solution would use anything else could advice", "d": "2/2016"}, {"body": "similar waiting dom updates child hook", "d": "2/2016"}, {"body": "interesting works thanks", "d": "2/2016"}, {"body": "design pass key option thing applies method takes path first parameter", "d": "2/2016"}, {"body": "feels less verbose nest many objects", "d": "2/2016"}, {"body": "think using nested objects declare watch path abusing language syntax note keeping options consistent imperative api azamatsharapov mentioned also keypath handle cases nested objects ca nt eg", "d": "2/2016"}, {"body": "btw evan couple times problem setting paths containing key specifically using worked around maybe good solution thought maybe escaping dot possible path", "d": "2/2016"}, {"body": "alright thank explaining really helped", "d": "2/2016"}, {"body": "azamatsharapov open separate issue", "d": "2/2016"}, {"body": "sure try make repro open", "d": "2/2016"}, {"body": "fyi fiddle blank", "d": "2/2016"}, {"body": "thanks matmoo updated link", "d": "2/2016"}, {"body": "seems better skip observing entire object saw comment nonreactive object converted passed prop maybe need way explicitly declare nonreactive properties vm instance", "d": "2/2016"}, {"body": "agree would good feature think separate fix fixes objects want reactive nonconfigurable properties think way solve nonreactive object suggestion would never observe objects frozen eg tested", "d": "2/2016"}, {"body": "maybe need way explicitly declare nonreactive properties vm instance yes please", "d": "2/2016"}, {"body": "saul makes sense let work fix hand vue already skips observing objects extensible user may objects observed mutable maybe new option like basically simply attaches property instance without converting addition probably add private marker object extensible object passed prop nt get converted", "d": "2/2016"}, {"body": "clarity nonreactivedata becomes opposite data maybe could reactivedata pseudo name data", "d": "2/2016"}, {"body": "please consider add option make working external graphic lib much easier", "d": "9/2018"}, {"body": "", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "param \u505a\u6210", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "make sure use vuehtmlloader instead htmlloader also please open issues corresponding repos", "d": "2/2016"}, {"body": "thank use vuehtmlloader solvedps hope add tip vueorg website", "d": "2/2016"}, {"body": "related", "d": "2/2016"}, {"body": "closing favor", "d": "2/2016"}, {"body": "updating two way filters user typing results awkward ux trust bad idea also way worked old version vue hard get behavior right example reposition cursor text changed filter modify input arbitrarily typing experience would worse time make update fly want please use party library specifically designed", "d": "2/2016"}, {"body": "mentioned docs use triple braces data bindings ignored need add script tags template although convinced inline script execute seems really bad idea", "d": "2/2016"}, {"body": "thanks simplesmiler also works great", "d": "2/2016"}, {"body": "param converts user input numbers saving data object javascript nt restrict user input removed special attribute provided vuejs want physically restrict user input use native html attribute", "d": "2/2016"}, {"body": "apologies wasnt clear enough know doesnt restrict user actually input input wasnt converted numbers saving data vue instance would keep string characters value result errors trying math", "d": "2/2016"}, {"body": "well converts input number input parsed valid number saved asis", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "thank comment get error uncaught typeerror exptrim function parseexpression vue set", "d": "2/2016"}, {"body": "show used best make repro jsfiddle somewhere else", "d": "2/2016"}, {"body": "think way way thissomeobject objectassign thissomeobject b used way instead jqueryextend true nodeattr thanks", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "jsbin seems working intended", "d": "2/2016"}, {"body": "nt understand wrongly mean think situation acceptable dynamicbindprop trigger watch component", "d": "2/2016"}, {"body": "jsbin triggering watcher component", "d": "2/2016"}, {"body": "write vmarr", "d": "2/2016"}, {"body": "expecting watcher fire component initialization case expectation wrong watchers fire existing value changed working intended", "d": "2/2016"}, {"body": "value set propbind ok could tell good method handle situation want something related bindprop component updated", "d": "2/2016"}, {"body": "understanding props work bit need something prop component init components lifecycle hooks tue feb pm \u8ffd\u968f notifications githubcom wrote value set propbind ok could tell good method handle situation want something related bindprop component updated reply email directly view github", "d": "2/2016"}, {"body": "want related prop ca nt life cycle hook wed feb evan notifications githubcom wrote understanding props work bit need something prop component init components lifecycle hooks tue feb pm \u8ffd\u968f notifications githubcom wrote value set propbind ok could tell good method handle situation want something related bindprop component updated reply email directly view github reply email directly view github \u8ffd\u968f", "d": "2/2016"}, {"body": "prop set update wed feb yf z gmailcom wrote want related prop ca nt life cycle hook wed feb evan notifications githubcom wrote understanding props work bit need something prop component init components lifecycle hooks tue feb pm \u8ffd\u968f notifications githubcom wrote value set propbind ok could tell good method handle situation want something related bindprop component updated reply email directly view github reply email directly view github \u8ffd\u968f \u8ffd\u968f", "d": "2/2016"}, {"body": "ok realize another way ready hook handle prop value set watch handle set wed feb yf z gmailcom wrote prop set update wed feb yf z gmailcom wrote want related prop ca nt life cycle hook wed feb evan notifications githubcom wrote understanding props work bit need something prop component init components lifecycle hooks tue feb pm \u8ffd\u968f notifications githubcom wrote value set propbind ok could tell good method handle situation want something related bindprop component updated reply email directly view github reply email directly view github \u8ffd\u968f \u8ffd\u968f \u8ffd\u968f", "d": "2/2016"}, {"body": "could create custom directive use instance properties get thing really make right override directive edit override show directive html directive test", "d": "2/2016"}, {"body": "weotch different use case", "d": "2/2016"}, {"body": "probably better create custom directive like unfortunately internal transition api exposed moment next release able achieve want using function exposed", "d": "2/2016"}, {"body": "vuchl thanks input nt believe solution would trigger transitions like normal simplesmiler would equivalent use case nt think custom directive would work would nt able communicate transition system enter leave cool know new api thanks", "d": "2/2016"}, {"body": "weotch changing opacity want simple class toggle css transitions instead using", "d": "2/2016"}, {"body": "unfortunately internal transition api exposed moment ha got long ago solution edit case needed toggle like great evan decided expose transition api handy", "d": "2/2016"}, {"body": "api transitions new version want trigger transition component custom directive calculations offsetheight need use visibility instead display vshow", "d": "10/2016"}, {"body": "work", "d": "2/2017"}, {"body": "prob fix found custom directive form node module", "d": "3/2018"}, {"body": "trigger events self using emit dispatch event propagates upward along parent chain using dispatch broadcast event propagates downward descendants using broadcast strange behavior actually component getting event work around calling code inside self event", "d": "2/2016"}, {"body": "still believe broadcast behave like dispatch also trigger event might global events want fire caught component well child components sure emit manually point extra work nt need happen", "d": "2/2016"}, {"body": "yeah makes sense although introducing moment would breaking change maybe could considered fix", "d": "2/2016"}, {"body": "yeah understand would break lot code unfortunate sure recommend assuming would part major release implications probably nt want people upgrade minor version code break thanks looking though", "d": "2/2016"}, {"body": "yeah going close since simple workaround changing may cause breakage probably ship enough breaking changes queued major release", "d": "2/2016"}, {"body": "works thanks", "d": "2/2016"}, {"body": "clcik buttons firefox esr emits buttons", "d": "2/2016"}, {"body": "vuchl use chrome", "d": "2/2016"}, {"body": "tested chrome works chrome seems en par ff en en par chrome", "d": "2/2016"}, {"body": "using latest chrome closing since reproduce latest chrome stable", "d": "2/2016"}, {"body": "also meet problem new version vue solve question also event object nt attribute currenttarget relatedtarget", "d": "2/2016"}, {"body": "normal pjax replaces dom elements depends version use pjax pjaxstandalone amp even listeners vue bunch references dom objects way binding tried year ago amp made prototype basically best solution afaik using jquery detach biggest issue face next dealing memory leaks could use vue router alternative would use iframes insure dom refreshed amp object attached amp get dom ready", "d": "2/2016"}, {"body": "make minimal reproduction demonstrates issue ca nt really tell wrong looking code snippets", "d": "2/2016"}, {"body": "closing inactivity", "d": "3/2016"}, {"body": "idea pjax replaces container div using html happens content attached vue instance afaik wrong way lead memory leaks unless calling destroy amp recreate vue object", "d": "3/2016"}, {"body": "normal directives params", "d": "2/2016"}, {"body": "simplesmiler params work well either elementdirective trouble inner content interpolation", "d": "2/2016"}, {"body": "meant following", "d": "2/2016"}, {"body": "simplesmiler see think good enough us thank", "d": "2/2016"}, {"body": "also obvious question put click handler tab click handler fires contents tab actually toggled visible semantic ui functional workaround inelegant", "d": "2/2016"}, {"body": "tried vuejs broadcast mechanism parent class change broadcast custom event children child listen event act accordingly", "d": "2/2016"}, {"body": "parent nt controlling css cssjs ui framework", "d": "2/2016"}, {"body": "rely ui framework emit event execute callback case semantic ui tabs would modules gt tab gt setting section callbacks", "d": "2/2016"}, {"body": "know spent minutes searching online docs looking events came empty apparently blind settings tab hero", "d": "2/2016"}, {"body": "closing question", "d": "2/2016"}, {"body": "please reopen provide reproduction least code actually initiating vue pjax", "d": "2/2016"}, {"body": "html element bit higher dom html style height backgroundimage url filepublicurl gt filename private public javascript javascript document ready pjax end function uploadvue new vue el uploadtool reopen issue", "d": "2/2016"}, {"body": "nt think understand issue give better example", "d": "2/2016"}, {"body": "also please open issue vuerouter repo instead", "d": "2/2016"}, {"body": "thanks rune looks good amp interesting stuff first thought one component per vue file best method sure way multiple components one file neat see related components one file good opposite lead many extra small files loving simplicity added experienced js guy also done router amp theming look good btw pagehtml unused right interested know would perform large app", "d": "2/2016"}, {"body": "cool something mind great prototyping small applications ideally love see support standard files outlined excluding preprocessors way reuse files later want transition webpackbrowserify based setup going close since nt seem like issue feel free share forum show amp tell section", "d": "2/2016"}, {"body": "general idea use prototyping nt know good performance large apps tried change would able mix single component files without wrapping multi component files wrapping never worked babel take look see make work script right script section must standard object", "d": "3/2016"}, {"body": "mrelectronic rune made small mods using right app became large components html files sections standard vue files see taken evan advice also without webpack know html extension makes good work editors intellisense performance seems really fine fyi spent couple days getting webpack slowed totally using yet came across used packagejson lines good effect babel babel src outfile publicjsbundlejs watch liveserver liveserver found file really productive switch amp webpack time right also nt think ideal evan one type code main vuejsorg subprojects nt help people learning imo fantastic work though", "d": "3/2016"}, {"body": "object literals easier clear classes applying black magic however webpack transform could great way handle", "d": "2/2016"}, {"body": "know fact vue would programmed suggests would win lot backend developer hearts including mine though love vue anyway lol scott", "d": "2/2016"}, {"body": "opinion classes offer practical advantages plain object definitions except syntax preferences really like classes use", "d": "2/2016"}, {"body": "bet beer classes become norm time goes wink scott", "d": "2/2016"}, {"body": "smolinari tools allow write components class nt think ever change vue default api use classes", "d": "2/2016"}, {"body": "agree kind solution added base least official plugin silly say feature already ecmascript standard class syntax bad ignore backend developer use js projects looking good mvvm library easy learn backend developer oop much easier understand backend dev exotic us functionalprototype patterns previously used knockoutjs short time stumbled upon vuejs recently seems almost perfect way vue objects created bugs show stopper disadvantage opinion knockout could create objects way want successfully using classes view models", "d": "3/2017"}, {"body": "vue official plugin class components", "d": "3/2017"}, {"body": "learned bit javascript must say concerning comments see bit mistaken nt know power js prototype based object model really take time learn trying fit classical oop js prototype system like putting stocking head date thinking might look better ok analogy might perfect hopefully get idea learn true power js wo nt need stocking scott", "d": "3/2017"}, {"body": "however address original issue custom object literal syntax less flexible using inbuild class system vue would take function parameter treat like class contructor could either use prototype based definitions class syntax like syntatic sugar class based definitions easier understand easier follow even use modules originally designed make another task extend add ui features also could compataible dependency injection libraries like inversify also makes programming components typescript easier get autocomplete fields functions checking parameters return types etc also personal opinion class based design readable defining data literal structures dont feel neccessary recreate class structure original js using literals data instance fields computed reality getters methods methods feel unnecessary recreate oop basics everyone understands form literals dedicated one library considering moving angular vue good typescript support class based components would help lot", "d": "3/2017"}, {"body": "computed properties getters cached smartly updated data dependency change", "d": "3/2017"}, {"body": "data instance fields computed reality getters methods methods also equivalent classes also equivalent classes equivalent classes equivalent classes object literals easy readable way add options party extensions component like vuefire extension features easy integrate class hence use decorators vueclasscomponent provide stuff missing makes less readable personally also supported browsers even standard yet fail see classes flexible way point concede objet literal approach makes support type systems like typescript flow harder sure change personally nt see use components specifically complicated business logic worth typing resides modules store api etc", "d": "3/2017"}, {"body": "basically linusborg said know people coming classheavy language want use classes javascript java c whatever backend language happen used class right simply expressive enough unless resort notevenstandard features like decorators class property initializers may want say ok everyone using build tools fine well using classbased api default may make friendly devs used classes also makes hostile large group users use vue without build tools transpilers advocating preference might missing nuance take account framework offer objectbased api baseline classbased api optin allows us cater groups users", "d": "3/2017"}, {"body": "also watch equivalent classes watch setter props getter inject provide objectassign model selector node changed set get event listeners objectdefineproperties solves used constructor class mention means provide identical functionality class", "d": "3/2017"}, {"body": "watch setter nt make semantic sense receive arguments like setters watchers often nt change anything instances local state set exactly props getter would computed properties distinguish also computed props also set state would nt rather use setters instead watchers inject provide objectassign officially api alternatives add feature class directly constructor somehow like many options objectdefineproperties solves used constructor class sure think leads worse dev experience current api features set class directly methods data computed props watchers props injectprovide plus plugin apis use th options object common interface developer manually assign constructor function essentially leads apis like see vueclasscomponent use decorators work around see nt say vue optionsfeatures somehow configurable class interface nt see advantages disadvantages dev experience classes nothing syntactic sugar concepts use internally without offer zero new actual functionality syntactic sugar nt really sweetneing goods use case use", "d": "3/2017"}, {"body": "found article enlightening coupled knowledge power prototypal inheritence js functional programming two pillars eric mentions made much better sense class currently sort mistake javascript say class ca nt made better either feel old oop programmer really nt fighting beloved class instances javascript actually like added unnecessary baggage scott", "d": "3/2017"}, {"body": "personally think classes useful many situationsin javascript vue instance options api nt one use internally many places real encapsulated class makes sense like vuerouter vuex example", "d": "3/2017"}, {"body": "sure fine also said nt need classes get encapsulation js scott", "d": "3/2017"}, {"body": "exactly setting value set setter either kick event trigger callbacks etc eg foobar triggers callback updates span content point nt limit app class based architecture using classes nt prevent work legitimate reason explicitly prevent devs using class instances choose eg rebuilding content change may need ajax calls get info push notifications etc etc etc putting methods inside giant literal object hard coded properties antipattern instead break components need compiled work might well use features oh mean export class interface literal object interact object holding data hidden favor interface object arbitrary decisions general dislike towards class based development never mind fact many development houses internal teams switching languages regular basis provide easy way devs switch context add extra work aside use class providing data referencing dataproperty datamethod templates code works well", "d": "3/2017"}, {"body": "yeah think vue ca nt transformed use classes get left wayside within year two reading thread learning nt plans people contributing vue development think classes bad idea code base considering obvious direction javascript internet whole glad nt invested much time vue fact many frameworks created solve issues serious javascript development postjitc era js yet caught javascript evolving lot debate consideration dismiss strange looks like frameworks least trying keep react lot things mentioned props etc yet manages use classes happier react allow custom elements rather jsx eh guess ca nt everything maybe polymer real future hard say seems forward compatible", "d": "6/2017"}, {"body": "sjcalamia nothing classes per se others nt well far speak point currently lack two things good argument making public api internally already use classes many places available form class extend besides classes future javascript oop language wo nt become one pseudo classes one available options comes excapsulating objects behaviour simply doubt everyone turn everything class futureproof example arguably one biggest important libs ecosystem classbased sign becoming obsolete reason concerning vue nt seen arguments thread elsewhere arguing vue api class inherent advantages brings except indeed important point typing systems like typscript work better classes hence existance good proposal convert api vue something works classes nice syntax nt require es next features said nice syntax since api nt seem existbe feasible current js standard one vue goals work browser without buildsystem currently nt see realistic way make class api available however things one day along good arguments later major version vue might introduce class api totally possible since mentioned react class api without problems seen also discussed length also react smaller api surface since lacking reactivity system brings watchers computed props need declare props etc react nt run problems detailed previous replies anyway already seem made mind seen future us good luck framework choose react would great choice course", "d": "6/2017"}, {"body": "real issue class built discarded exchange proxy object could provide class sets watchers props etc constructor getters setters devs could simply extend class instead use protected data access actual thing built instead pseudothing provide instead", "d": "6/2017"}, {"body": "also js oop even prototyped instead derived classes js code deals literal objects methods properties supports polymorphism encapsulation inheritance albeit sugar syntax", "d": "6/2017"}, {"body": "sjcalamia case nt realize thread already years old since vue left wayside within year two nt use classes already irrelevant however vue seen exponential growth past years despite lack classes continuing get mindshare something must wrong world think class inheritance ui components oop ui components actually good idea probably also disappointed use react classbased api nt mean encourages even plays nice oop react functional composition core devs explicitly suggest class inheritance level deep experience building uis functional composition mixinstraits based systems much flexible suitable ui components oop trying shoehorn whole oop dogma onto ui components like trying hit screws hammer used hammer easier read matter familiarity practical benefit classbased apis friendly typechecking even argument soon moot vue enhanced type definitions ts contextual typing welcome disagree please constructive fashion actually giving concrete examples classes better future", "d": "6/2017"}, {"body": "keeping vue component definition asis reasons evan outlined right fit features component definition needs said wild idea need get case still someone radar component definition could look like javascript class myvuecomponent extends vue static functional false static el app static template message static components static mixins static model prop value event input render h return h div thismessage initialize component data data return message hello vuejs get computedproperty return thismessage lifecycle hooks beforecreate created beforemount mounted beforeupdate updated activated deactivated beforedestroy destroyed watchers set datamessage value previousvalue consolelog message changed previousvalue value methods somemethod param return new promise resolve gt settimeout resolve quite exotic idea huge fan littered throughout maybe someday someone somewhere could make webpack loader babel plugin convert notation proper vue component definition", "d": "6/2017"}, {"body": "even argument soon moot vue enhanced type definitions ooohh ooh ooh using flow explaining vueconf maybe anytime sooner scott", "d": "6/2017"}, {"body": "agree class nt offer advantage current js syntax vue competes react least us facebook embraced classes official syntax react devs working react becoming used writing code hence would easier transition vue although choose use plugin nt think introduction classes js mistake syntax cleaner makes dev productive makes tooling easier lures devs used oo syntax still important understand works covers also think using flow typescript highlights subtle point even languages untyped weakly typed could strongly typed compile type avoid unnecessary runtime checks problems", "d": "9/2017"}, {"body": "lures devs used oo syntax makes think working typical oop js nt actually offer ultimately unnecessarily leads call js frustration later class js putting proverbial lipstick pig embrace class keyword embrace something like stucco building instead proper building blocks language scott", "d": "9/2017"}, {"body": "claim nt behave expected specifically hatred js js frustration case familiarity mean sep pm scott notifications githubcom wrote lures devs used oo syntax makes think working typical oop js doesnt actually offer ultimately unnecessarily leads call js frustration later class js putting proverbial lipstick pig embrace class keyword embrace something like stucco building instead proper building blocks language scott receiving commented reply email directly view github mute thread", "d": "9/2017"}, {"body": "learn js understand nt hate js love scott", "d": "9/2017"}, {"body": "small sidenote confusing deal classes js trying find instance direct instance class sure way also many ways intuitively work js really class inheritance nt prototype delegation nt claim expert things camp people confused trying oo js found really oo", "d": "9/2017"}, {"body": "nt claim expert things camp people confused trying oo js found really oo exactly getting fortunate learn js ground someone told dump knew oop started enter world js object orientation absolutely prototypal delegation different world understand actually liberating scott", "d": "9/2017"}, {"body": "working js protypal world long time found class implementation liberating refactoring projects use classes issues inheritance extension identification really confused posts nt actually explain negatives classes seem classes work c used writing js sep scott notifications githubcom wrote nt claim expert things camp people confused trying oo js found really oo exactly getting fortunate learn js ground someone told dump knew oop started enter world js object orientation absolutely prototypal delegation different world understand actually liberating scott receiving commented reply email directly view github mute thread", "d": "9/2017"}, {"body": "people want classes probably never actually tried envision equivalent vue current api would look like using classes importantly would using class specced today class may may specced using stagex proposals well tried conclusion using specced features simply way provide something elegant enough end tedious constructor calls nt forget binding instance methods awkward workarounds like attaching static properties class declaration block etc etc polymer uses classes simply declare name element js export default class mynewview extends polymerelement static get return mynewview compare export default name mynewview frequently see react js export default class foo extends reactcomponent constructor props super props thisstate thisincrement thisincrementbind increment compare export default data gt foo methods increment using class class sake actually adds noise achieve amount work benefits maybe much beyond fuzzy warmness able use class represent everything fact terms ui components rarely perform direct oo inheritance time compose via mixins slots higherorder components ca nt even class react things get bit nicer class fields stage decorators stage proposals standards yet may change break even reverted defaulting requiring use vue means delegating risk every user vue nt think responsible choice optin already arguing whether oo js prototypal pretty offtopic pragmatic point view standard today good enough provide decent equivalent vue current api simple class fields decorators reach stage yes happy revisit issue think explained everything say topic locking happens", "d": "9/2017"}, {"body": "extracted vue demo push github download run install requirements libsass may needed run open debug", "d": "2/2016"}, {"body": "believe issue", "d": "2/2016"}, {"body": "works thank", "d": "2/2016"}, {"body": "hi trying vuejs found issue read code jsfiddle works right include tags tr td inside tbody like also works fine including id inside table tag solve issue could please share workaround best regards", "d": "2/2016"}, {"body": "maybe look", "d": "2/2016"}, {"body": "markup invalid table elememts strict rules appear inside", "d": "2/2016"}, {"body": "angelnuernberg thx figured putting wrapping like think solution may also work try later thanks hanai thanks new vuejs today tried search tbody issues failed thanks yyx find strict rules vuejs manual maybe add manual p", "d": "2/2016"}, {"body": "liupangzi html works really vue", "d": "2/2016"}, {"body": "\u8bf7\u7528\u4e2d\u6587\u5728\u8bba\u575b\u63d0\u95ee\u5427", "d": "2/2016"}, {"body": "since breaking change go major release closing keeping breaking changes backlog", "d": "2/2016"}, {"body": "oh sorry stupid bug thank amazing library", "d": "2/2016"}, {"body": "nt know easily implemented vue support feature knowing nt yet supported mobile devices", "d": "2/2016"}, {"body": "note fix handles expression getter generation would still work browsers support template strings natively", "d": "2/2016"}, {"body": "thank works support one placeholder works first exemple one", "d": "4/2016"}, {"body": "yukulele looks still support multi placeholder template string fix hope fix thanks", "d": "6/2016"}, {"body": "works thank", "d": "6/2016"}, {"body": "mark", "d": "9/2016"}, {"body": "use expressions syntax templates unless browsers support reason babel extract expressions transform know vue precompile templates rendering functions backend want know possible use babel transform expressions think posva", "d": "10/2016"}, {"body": "made simple test vue noticed babel properly transform expressions great one benefits use vue instead vue sorry disturb", "d": "10/2016"}, {"body": "chances use index retrieve item original array case might well pass item instead index still need index use", "d": "2/2016"}, {"body": "used visual display simplesmiler suggested need original item pass item directly instead", "d": "2/2016"}, {"body": "nt achievable computed property", "d": "2/2016"}, {"body": "could generate vfor string computed property would still limited string based api features would like see existing vfor internals exposed extensible collections api could provide extension mechanism string vfor api command arg arg maps vuecollection command function arg arg feels like value making vfor string format extensible min", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "mean js var filterby vuefilter filterby component definition computed filteredlocations return filterby thislocations thisfilter state city slice full power javascript also limited built filters write whatever filtering function want", "d": "2/2016"}, {"body": "ok well actually maybe wow better response paradigm error limiting computed use primitives really never thought using arrays objects mental model reactive parts vue spreadsheet data raw data values entered cell computed calculated values depend cells problem spreadsheet paradigm cells rarely contain complex data types vfor string expression delimited calls builtin filters extensible adding filters via vuefilter name function computed properties return complex types results cached dependent values change create new filters manipulate arraysobjects use full js needed see closed thanks evan elegant", "d": "2/2016"}, {"body": "transition considered finished first event fired vue predict many need transition multiple properties complex timing use css animations instead", "d": "2/2016"}, {"body": "wow fast thanks lot", "d": "2/2016"}, {"body": "filter applied directive uses modifier however could always check eventdefaultprevented", "d": "2/2016"}, {"body": "say elements overlapping click modifier ca nt sort one got click first true calls think makes sense switch would false first true second call", "d": "2/2016"}, {"body": "eventtarget tell dom node dispatched event", "d": "2/2016"}, {"body": "say elements overlapping click top without modifier ca nt sort got event second", "d": "2/2016"}, {"body": "paulpflug opposed change suggestion order handlers hypothetical third scenario nt matter would one care element prevented default event still propagate handlers guess mean say curious problem domain", "d": "2/2016"}, {"body": "read article belief good way event management obviously nt work way around issue nt important simply nt use modifier manually code instead", "d": "2/2016"}, {"body": "close since nt seem need fix", "d": "2/2016"}, {"body": "html", "d": "2/2016"}, {"body": "hanai", "d": "2/2016"}, {"body": "\u5c1d\u8bd5\u4f7f\u7528\u8c10\u97f3 google translate", "d": "2/2016"}, {"body": "matmoo", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "\u76f4\u63a5\u8fd9\u6837\u5c31\u597d\u4e86 computed", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "matmoo one best mentor ever found", "d": "2/2016"}, {"body": "\u5927\u5927 \u4f60\u4e0a\u9762\u7684\u56de\u590d\u662f\u4ec0\u4e48\u610f\u601d", "d": "4/2016"}, {"body": "\u6211\u5c1d\u8bd5\u6539\u5199vue \u589e\u52a0velif", "d": "9/2016"}, {"body": "elif", "d": "11/2016"}, {"body": "vuejs \u6c92\u6709\u63d0\u4f9b \u5047\u8a2d\u6709\u4e86 use elseif vue js elseif vuejs \u5e0c\u671b\u652f\u6301elseif\u8bed\u53e5 \u8bf7\u95ee\u5982\u4f55\u5b9e\u73b0 elseif feature request velseif", "d": "11/2016"}, {"body": "\u5927\u81f4\u8fd9\u6837 vbind style background url listcover", "d": "2/2016"}, {"body": "hanai \u5982\u679c\u6211\u8fd9\u91cc\u7684\u80cc\u666f\u56fe\u662f\u7c7b\u4f3c\u4e8e", "d": "2/2016"}, {"body": "hanai \u4ee3\u7801\u5982\u4e0b", "d": "2/2016"}, {"body": "\u53ea\u6709 \u5f53\u7136\u62a5\u9519", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "div class swiperslide vfor slide fieldsslides err vuejs vue warn failed compile template", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "\u8fd9\u6837\u6210\u529f\u4e86", "d": "11/2016"}, {"body": "jiiiiiin style backgroundimage url slideimg", "d": "8/2017"}, {"body": "style background url techcontainbgsrc backgroundsize", "d": "3/2018"}, {"body": "", "d": "2/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted forum stackoverflow thanks", "d": "2/2016"}, {"body": "hi posted forums well received answer sorry regards david feb evan notifications githubcom wrote hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted forum stackoverflow thanks reply email directly view github", "d": "2/2016"}, {"body": "curious library also uses global", "d": "2/2016"}, {"body": "lol", "d": "2/2016"}, {"body": "case version vue loading vue number websites although none ever used vue yet optimistic might become much popular future feature would minimize risk overwriting older newer extended version vue already used website", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "elaborate case use vue lightweight makes sense widget building run lot different sites sites probably nt use vue rather avoid potential version conflicts could", "d": "2/2016"}, {"body": "think using bundling mechanism like webpack browserify nt even issue vue nt add add", "d": "2/2016"}, {"body": "sirlancelot exactly wanted say smile", "d": "2/2016"}, {"body": "sirlancelot nt noticed place use browserify et al simply defining moduleexports inclusion trick", "d": "2/2016"}, {"body": "think best practice expecting code run environment nt control rely window globals expose window globals use module bundler", "d": "3/2016"}, {"body": "actually using changes stopped working somehow", "d": "2/2016"}, {"body": "well seems trying bind parent see fiddle", "d": "2/2016"}, {"body": "actually variable named ca nt see ending well", "d": "2/2016"}, {"body": "true true problem sure design passing within vfor tag cause error thrown simply changing vif tag non tag throw error", "d": "2/2016"}, {"body": "template incorrect html slotname outer div enclosed", "d": "2/2016"}, {"body": "forgot copy ending div tag edited op include ending div tag thanks", "d": "2/2016"}, {"body": "ca nt paragraph tags nested like could browser handling funny", "d": "2/2016"}, {"body": "really realize thanks crswll", "d": "2/2016"}, {"body": "would need pass like", "d": "2/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted forum stackoverflow thanks", "d": "2/2016"}, {"body": "use custom filter record length filtered result", "d": "2/2016"}, {"body": "thanks answer yeah sure already used couple times think good idea implement", "d": "2/2016"}, {"body": "second", "d": "9/2016"}, {"body": "nt recordlength filter return result using vue nt return result filter nothing appears screen", "d": "9/2016"}, {"body": "indeed", "d": "9/2016"}, {"body": "display value number results tried productcount productcountlength displays nothing", "d": "9/2016"}, {"body": "answer nt seem work anymore new way accomplishing", "d": "8/2017"}, {"body": "giologist find solution", "d": "12/2017"}, {"body": "getters setters avoid much generation getset need models painful api like modelset foo foovalue considered implement data adaptors magic false flag like ractivejs", "d": "2/2016"}, {"body": "much many properties reactive type data looking personally never seen gettersetters becoming perf bottleneck details would help", "d": "2/2016"}, {"body": "worse scenario around items presented map dom dom use paging show little possible item contains around properties nested objects gives us around objects perf bottleneck objects created perf tool points objectdefineproperty intensive function especially right properties reactive changing define properties nt wrapped getset", "d": "2/2016"}, {"body": "hmm maybe could property whitelistblacklist feature special scenarios like although another possible approach make data reactive upfront keep pristine initial load feed vue instances needed", "d": "2/2016"}, {"body": "could give us short explanation example data feeding could work smile scott", "d": "2/2016"}, {"body": "smolinari vue converts data reactive set vue instance js var vm new vue data items var items still nonreactive vmitems itemsfilter item gt itema gt second object becomes reactive idea initialize instance empty array keep full data array unobserved pagination change get filtered copy items display set instance causes vue convert way objects converted needed instead huge conversion cost upfront", "d": "2/2016"}, {"body": "thanks explanation evan makes perfect sense especially novice js programmer actually reread reactivity depth makes lot sense would consider another example add docs reactivity depth like give go scott", "d": "2/2016"}, {"body": "performance issue approach mvvm architecture please forgive wall text like describe situation story behind conversation company work fairly large highly customizable suite products share common code strive achieve consistency look feel promote code reuse define clear architecture allow multiple teams work effectively minimum side effects apps consist multiple modules written using interpretation patterns largescale javascript application architecture inside modules follow mvvm approach would like consistent would like developers able switch modules feel comfortable see much love vue would like benefit observable collections computed properties custom model events without relying vue presence extracting observable model separate layer independent vue enables us share paterns across modules modules nt use vue current solution folows classes support us benefits interactive models computed properties watching changes etc model enters vue realm call method returns proxy carrying synchronization logic change prop model vue model updated computed propery model changes vue equivalent updated obviously works way result vue instances nt computed properties watches etc simple methods emitting events handled outside works really well performance impact meaningful visualising large data sets method returns object later augmented vue observed us synchronize changes think would feasible define api required vue able plug existing implementations observable model default adapter provided vue would augment plain object exactly adapter augmentation would necessary vue could use observe update underlying model see value approach think complicated", "d": "2/2016"}, {"body": "simply freezing objectarray let vue skip observation object nested values mitigate perf concerns places replacing large neverexpectedtochange data structures alternatively feed data piecemeal like suggested earlier nt think look adaptors time soon see valid use case rare one practice sure worth effort given priorities", "d": "3/2016"}, {"body": "would better forum turns nt possible bug post suggestion issue scott", "d": "2/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted forum stackoverflow thanks", "d": "2/2016"}, {"body": "hello evan mean one knows already asked even could seems like possibility twoway filter updating fly keypress vue sure way implement functionality via part plugins like use pure vue convenient guess vue enough power kinda stuff least wish code works fine input blur like attr please pay time one thank", "d": "2/2016"}, {"body": "default value used prop present template value passed even overwrite default use case use function instead", "d": "2/2016"}, {"body": "set mind straight use case method property defined missing use case method property defined value undefined falsy thanks time", "d": "2/2016"}, {"body": "coerce simply hook allows child component cast value set matter value falsy", "d": "2/2016"}, {"body": "apologies bringing old thread back life issue seems removed conditionally passing string prop want default best way within prop", "d": "12/2017"}, {"body": "correct robsterlini coerce remove migration guide suggests alternative", "d": "12/2017"}, {"body": "", "d": "2/2016"}, {"body": "thought might end different versions vue think go thank smile", "d": "2/2016"}, {"body": "use webpack refer version script instead creating new require", "d": "2/2016"}, {"body": "think one necessarily assume add component dependency another vue dependency think load instead", "d": "2/2016"}, {"body": "ok real problem vue statically linked example cdn ca nt get atop vue additionally installed dep wo nt even notice points another instance produce wired behavior eg nt working furthermore would allow component developers get rid", "d": "2/2016"}, {"body": "vue statically linked example cdn ca nt get require vue obviously already case", "d": "2/2016"}, {"body": "would reliable way would still add vue webpack bundle without necessity error vue installed", "d": "2/2016"}, {"body": "use different packaging strategies targeting different usage distributing npmbased bundler usage eg webpack browserify need precompile let user import file directly distributing use without build tools eg global vue cdn need wrap whole thing plugin vue passed via assume vue available globally", "d": "2/2016"}, {"body": "case would target statical linking component would distribute versions vue statically linked component statically linked vueuse windowvue vue statically linked component webpack controlled require windowvue vue webpack controlled component statically linked require vue use webpack controlled require", "d": "2/2016"}, {"body": "use really would appreciate cleaner solution", "d": "2/2016"}, {"body": "actually next version vuerouter probably use different api uses plain vue instance root together vuex look like", "d": "2/2016"}, {"body": "api change", "d": "3/2016"}, {"body": "looking issue wondering reason need reference global inside distributed component explain use case bit", "d": "3/2016"}, {"body": "vueclusterize need access workaround nested problem basically building avoided changes proposed actually ca nt think another use case", "d": "3/2016"}, {"body": "cool seems like specific use case since already working although hacky solution need eliminated adding api elsewhere closing", "d": "3/2016"}, {"body": "found another use case singleton component example overlay used behind dialogs modals singleton pattern allows way better handling zindex click events dealing multiple instances current implementation activate overlay calling component needs ref would prefer cleaner solution see easy way adding singleton components vue", "d": "4/2016"}, {"body": "another convincing usecase singleton component made mixin workaround getvue usage look something like would love get around stuff user", "d": "4/2016"}, {"body": "think reconsidered", "d": "4/2016"}, {"body": "check mentioned actually work need treat external bundling component", "d": "4/2016"}, {"body": "nonono stick mixin solution others unreliable error prone point api change others also need instance create issues future solutions unreliable error prone smile", "d": "4/2016"}, {"body": "suggested unreliable", "d": "4/2016"}, {"body": "imagine dependency tree myproject vue mycomponent vue give different versions myproject mycomponent could difficult debug especially maintainer idea tree happens regularly using also stumbled upon components list direct dependency avoided adding webpack config project clearly prefer mixin", "d": "4/2016"}, {"body": "paulpflug believe component specifies npm least never install vue component even version conflict", "d": "4/2016"}, {"body": "sure thing emphasis seen components vue direct dependency already easy fix yes difficult debug error warning accidentally use wrong vue instance wo nt work speak regarding often use repositories installed ignored always deliver different instances avoid completely issue severe like ca nt live without fixing might source annoying mistakes future see could close would smile", "d": "4/2016"}, {"body": "line actually removes element class removed element removed sure bug possible please provide repro", "d": "2/2016"}, {"body": "il try record video happens randomly provide simplified repro monday saw think bug ie removing class layout refreshed reason removing element dom", "d": "2/2016"}, {"body": "managed capture flicker video happening ie mobile update windows phone simplified repro really seem like ie bug delaying cleanup phase seems work around appropriate guards case elements removed", "d": "2/2016"}, {"body": "really seem like ie bug surprise scott", "d": "2/2016"}, {"body": "sztrzask moving removeclass thisel next tick seems resolve flickering using vue nexttick settimeout", "d": "2/2016"}, {"body": "vue nexttick guard checking element still exists next tick", "d": "2/2016"}, {"body": "sztrzask reason existence guard check necessary thinking whether adding nexttick leavedone would make work", "d": "2/2016"}, {"body": "moment consideration belive necessary", "d": "2/2016"}, {"body": "ok found simpler solution add transitioned element ensures animation ending state stays even class removed nt require vue change behavior cater ie bug", "d": "2/2016"}, {"body": "proposed fix works partially flicker less likely appear still happening", "d": "3/2016"}, {"body": "grabs want give hand smiley", "d": "3/2016"}, {"body": "ealvespt sure thing make sure include tests pr", "d": "3/2016"}, {"body": "perfect", "d": "3/2016"}, {"body": "update documentation reflect changes", "d": "3/2016"}, {"body": "ealvespt sure please everyone let continue discussion need pr closing issue keep list clean", "d": "3/2016"}, {"body": "another take named slot wrapped another component content slot also gets inserted unnamed slot", "d": "2/2016"}, {"body": "feels like named slots still nt work nested blocker developing whole application vue files main html file defines overall components composition hierarchy application like fiddle reproducing issue", "d": "3/2016"}, {"body": "probably related", "d": "3/2016"}, {"body": "fullfs really sure directly related working dynamic slot name resolution like vfor however works setting name explicit according littlstonee wrote example working even though slot name absolutely static explicit string literal opinion thing two components createdindicated custom tags main markup one embeded one also templates defined string constructor objects also worth note neither vue root instance related using named slots reproduce issue updated example demonstrate theory little anyway may right related internal way nt think thing", "d": "3/2016"}, {"body": "plunntic yeah see unnamed slot seem accept whatever content inserted named slot restrictions arounnd elements checked attribute believe top level element component expected attribute checked probably goes ed named slots elements treated special way need merge", "d": "3/2016"}, {"body": "plunntic attribute needs present inserted content common parent context example actually working simply rendering empty slot followed component", "d": "3/2016"}, {"body": "thanks makes sense basically possible attach one component instance one slot could useful would way define component template contains header inserted component header slot also contains body inserted component body slot guessing reason work way", "d": "3/2016"}, {"body": "looking", "d": "2/2016"}, {"body": "returns exactly", "d": "2/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted forum stackoverflow thanks", "d": "2/2016"}, {"body": "ok agreed", "d": "2/2016"}, {"body": "need deep watcher", "d": "2/2016"}, {"body": "exactly scenario problem still working solved problem pqvst", "d": "4/2017"}, {"body": "maximelebreton usage deep incorrect", "d": "4/2017"}, {"body": "oups sorry wanted make quick example wrong made jsfiddle effective ultimately realize problem different sorry mistake open new issue", "d": "4/2017"}, {"body": "maximelebreton exact issue figure problem", "d": "4/2017"}, {"body": "issue way array mutated see", "d": "12/2017"}, {"body": "often want write way see difference components tags", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "make sense normalize event names lowercase yes makes sense makes code readable always keep event names lowercase separate dash instead camelcase think adding warning camelcase event names would also good", "d": "2/2016"}, {"body": "means vuejs moving away html spec pursing similar approach like angular", "d": "2/2016"}, {"body": "performance concern", "d": "2/2016"}, {"body": "couple thoughts potential concerns long backwards compatibility exists cool whatever ultimately decided probably continuing using kebab case method lack distinction camelcase lower camelcase could confusing generally speaking would refer class would refer nonclass variable nt think would issue would nt want creating classes named components would agree creating two unique events distinguished case would poor programming biggest concern introducing weird inconsistencies people code example valid identical", "d": "2/2016"}, {"body": "keep kebabcase markup camel case code part html spec ignoring case greater learning curve coming frameworks already learned standard", "d": "2/2016"}, {"body": "agree teevio consistency lost html uses kebabcase amp accepted community standard ecmascript camelcase language keep separate instead hiding react way get react render custom attribute via data amp aria enforces consistency explaining say via mdn link even camelcase lt kebabcase beginner greatly help beginner html understanding", "d": "2/2016"}, {"body": "agree evan readability code consistency important", "d": "2/2016"}, {"body": "look really weird camelcase inside html html html js js", "d": "2/2016"}, {"body": "current version fine", "d": "2/2016"}, {"body": "using vue months still gets everytime big deal warning vue good know fully understand idea support", "d": "2/2016"}, {"body": "backwards compatibility", "d": "2/2016"}, {"body": "agreed need keep backwards compatibility make sense normalize event names lowercase agree azamatsharapov", "d": "2/2016"}, {"body": "teevio vue components roughly classes multiple valid syntax issue already exists work html simply throws away case information much different proposed feature like style arguments picking style stick moeszyslak jonagoldman others concerns moving away html standard totally valid write camelcase tagsattributes html tagattribute name matching performed caseinsensitive manner spec says documents html syntax tag names html elements may written mix lowercase uppercase letters caseinsensitive match names elements given html elements section document tag names caseinsensitive attribute names html elements may written mix lowercase uppercase letters caseinsensitive match names attributes given html elements section document attribute names caseinsensitive using pascalcasecamelcase improves code consistencyreadability totally speccompliant may everyone prefer kebabcase keep using particular different angular angular making templates casesensitive introducing customized html parser contrary vue actually follows spec making js counterparts caseinsensitive", "d": "2/2016"}, {"body": "prefer keeping kebab html like idea consistency like idea spec compliance found camelcase tag html caseinsensitive use instead vue automatically match components defined camelcase ids javascript warning already pretty concise component registration works said others mentioned think allowing camelcase html great long still option continue writing kebab", "d": "2/2016"}, {"body": "yah agreed trying think many arguments could honestly nt would stick like mentioned end day arguing stylistic choices personally think long stick already option use new stuff forced cool changes mentioned", "d": "2/2016"}, {"body": "kebabcase still works using camelcase pascalcase option nt break bc use ca nt addition nt change forces something different new option thing could say suggest make sure option well documented good work always evan scott", "d": "2/2016"}, {"body": "maybe make option warning ignoring say component refer html personally would prefer warning like props course think lateronreadabilty important thing working first try also stumbled upon kebabcasecamelcase problems real problem got warnings wrong default could warning works irrelevant also warnings visible debug mode think", "d": "2/2016"}, {"body": "things like vs vs imagine quite rare occurrences though", "d": "2/2016"}, {"body": "simplesmiler kebab case props would still matched casesensitivity using old rules", "d": "2/2016"}, {"body": "nt promote transparency web standards custom elements spec states names contain hypen simplesmiler said would execute code would especially nasty implementation events html case insensitive lets introduce idea casing library implementation would promote casing html opinion bad idea also use hypen separation file names remove well start adding casing lastly hypen amp casing system coexist promotes different coding styles new developers team prefer paulpflug approach proper warnings area would help lot", "d": "2/2016"}, {"body": "fan making html pascalcamel case breaks web standards know nice keep consistency trying make things tiniest bit consistent add another layer complexity may also enticing bad practices library promote staying standards mislead developers one day may work place using vue resulting understanding html parsed differently totally agree paulpflug adding warning means less work production code puts developers back track writing valid code", "d": "2/2016"}, {"body": "good argument case nt implemented commonly highlighted reason people dislike angular agree totally keeping libraries conforming standards drafted html case sensitive thrown many issues opening situations much flexibility", "d": "2/2016"}, {"body": "blakenewman regarding think already talk previous comment", "d": "2/2016"}, {"body": "comment sums pretty well evan proposing changing html spec proposing changing vue locates component names rather convert kebab camel finding matching component would probably strip dashes accommodate kebab search components case sensitivity html continue spec compliant also would allow us use whatever case want seems like evil bad choice", "d": "2/2016"}, {"body": "plan style promoted style ie docs examples written like option kebabcase style remain primary one", "d": "2/2016"}, {"body": "blakenewman read comment conform standard paulpflug guidobouman already warnings camelcase tags attributes using latest versions however camelcase checks must performed compile time runtime case information would already lost due html parser behavior using vue without wo nt ca nt warnings", "d": "2/2016"}, {"body": "spec blakenewman linked web components state custom element type identifies custom element interface sequence characters must match ncname production must contain hyphenminus character must contain uppercase ascii letters sure relates vue components docs say try loosely follow web components standard may noticed vuejs components similar custom elements part web components spec fact vuejs component syntax loosely modeled spec say spec needs change first order allow camelcase pascalcase scott", "d": "2/2016"}, {"body": "smolinari vue docs say loosely modeled strictly mind leaves room change", "d": "2/2016"}, {"body": "case information may lost could still warning wrote mycomponent template parsed expected vue debug mode look besides warn wrong usage lost case information nt matter could option suppress warning match directly instead equals suggested behavior", "d": "2/2016"}, {"body": "migrating camelcasepascalcase would somewhat jarring see jslike syntax html reason stand jsx paulpflug suggestion problem onboarding beginners issue warning informs user problem", "d": "2/2016"}, {"body": "paulpflug sound like valid idea", "d": "2/2016"}, {"body": "agree warning says feels better silent substitution", "d": "2/2016"}, {"body": "possible global option api eg default", "d": "2/2016"}, {"body": "wondering ideal striving rpkilby said looks weird essentially problem exists js html different technologies use different naming systems using case kebab camel technologies shift weirdness one place another underlying problem persist believe best draw line current line e kebab case html context camlecase pascalcase js context good imo support current conventions instead looking better one ofcourse use warning help beginners", "d": "2/2016"}, {"body": "prograjkamal yeah inclined implement warning", "d": "2/2016"}, {"body": "vote adding warning scott", "d": "2/2016"}, {"body": "adding warning", "d": "2/2016"}, {"body": "warning", "d": "2/2016"}, {"body": "closed via amp", "d": "2/2016"}, {"body": "warning would great spent hour trying figure custom event nt responded answer camel cased name", "d": "1/2017"}, {"body": "warning corresponding component prop would respond version component prop make typo event much vue mean default existing event props like short", "d": "1/2017"}, {"body": "guidobouman template file child component actual event listened parent course took ages figure easy debug thinking would good warn camel case attribute would parsed forgetful folk like perhaps already discussed apologize", "d": "1/2017"}, {"body": "anthonygore unfortunately impossible browser converts html lowercase vue chance access", "d": "1/2017"}, {"body": "question vue convert us remember kebabcase vue files makes things awkward beginners wasted last mins", "d": "10/2017"}, {"body": "one rule commit memory html mean attributes tags attribute values javascript expressions use second statement applies", "d": "10/2017"}, {"body": "related directives respected terminal directives like normal ones copied onto inserted elements mitigated programatic access slots wrap additional element except cases work like fixed width related pretty much except specificity", "d": "2/2016"}, {"body": "seems serves purpose hook styling inserted slot content particular use case merging directives would useful general want limit component inserted content compiled inserted parent child displays nt modify", "d": "2/2016"}, {"body": "potential use case stumbled upon recently detecting changes dimensions slotted element layout purposes general detecting element enters leaves slot worked around exposing method detecting changes side guess programmatic slot api would solve think issue closed reviewed api lands", "d": "2/2016"}, {"body": "want add classes slots ease styling existing css components use components also want use component happens slots css components use variant classes modify look element structure css difficult work around div ca nt style using classes copy styles attribute selector case ca nt use variant classes really hope decide add classes named slots would help ton thanks work vue great", "d": "7/2016"}, {"body": "ended making bunch components drop slots something like header content mixin provide access common components set styling component drop need instead remember exact styling stuff use case decent compromise slotted component nt need know slotted nt keep dropping classes components time", "d": "12/2016"}, {"body": "hack worked works looks like jade convert components follows work component importing component follows good luck", "d": "2/2017"}, {"body": "wishing unless slot explicitly attributes merges original declaration component", "d": "3/2018"}, {"body": "believe way send property paneltitleconfig show divpanelbody see vue docs value", "d": "7/2018"}, {"body": "thanks please move issue vuejsvuejsorg repo instead", "d": "2/2016"}, {"body": "thanks reporting issue filter places minus symbol first quote notation require custom filter corporatefinancespecific use case", "d": "2/2016"}, {"body": "please provide actual reproduction single template snippet far enough diagnose issue", "d": "2/2016"}, {"body": "got sort issue vif use transition dom element deconstructed end finding hard create repo see create jsbin", "d": "2/2016"}, {"body": "tried replicate issue nt fail also back version ov vue behaviour either html issue something else best show screen shot well remove transition slidedown works expected sorry unable provide reproduction", "d": "2/2016"}, {"body": "also problem seems affect safari", "d": "2/2016"}, {"body": "sorry cant paste code due legal reasons try make fiddle evening think sort race condition occurs randomly like time never really jumped vue source idea could cause site switched transitions temporary fix couldnt figure wrong sure even transitions work js event like transition dom element ended calculate transition length css use timeout hiding element try tinkering transition times check making nested one transition shorter outer fix problem using vue version npm issue occurs linux google chrome", "d": "2/2016"}, {"body": "wait event applying dom operation eg setting chances related toggling fast enough transition skipped case try using something like instead closing thread since one able provide repro determine actual cause issue", "d": "2/2016"}, {"body": "ooh might chrome toggle shadow checkbox toggle checkbox remove transition rangeblur works expected whoooo sorry happy able finally reproduce", "d": "2/2016"}, {"body": "matmoo issue actually caused css rule specificity higher specificity two class selectors may want make transition thing lesssass mixin mix add transition rules", "d": "2/2016"}, {"body": "good catch thanks hopefully issues others helpful", "d": "2/2016"}, {"body": "\u5e0c\u671b\u8fd9\u4e2a\u53ef\u4ee5\u5e2e\u52a9\u5230\u4f60", "d": "2/2016"}, {"body": "\u53ef\u4ee5\u53c2\u8003\u6587\u6863\u7684 \u8fd9\u4e2a\u90e8\u5206", "d": "2/2016"}, {"body": "\u5b50\u7ec4\u4ef6\u7684", "d": "2/2016"}, {"body": "thornfieldhe zhang jing vuejsvue thornfieldhe vue \u5728\u7ec4\u4ef6\u5185\u4f7f\u7528checkbox\u7ed1\u5b9a\u591a\u4e2a\u52fe\u9009\u6846\u88ab\u5f53\u4f5c\u5355\u4e2a\u52fe\u9009\u6846\u5904\u7406 \u5e0c\u671b\u8fd9\u4e2a\u53ef\u4ee5\u5e2e\u52a9\u5230\u4f60 reply email directly view github", "d": "2/2016"}, {"body": "nt think need use nwjs", "d": "2/2016"}, {"body": "provide reproduction", "d": "2/2016"}, {"body": "html \u9996\u9875", "d": "2/2016"}, {"body": "von clickself additem event", "d": "2/2016"}, {"body": "event", "d": "2/2016"}, {"body": "nt required", "d": "2/2016"}, {"body": "reproduce example working expected make sure using latest version vue supported reopen provide actual reproduction", "d": "2/2016"}, {"body": "\u5751\u7239\u7684 vue", "d": "7/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted forum stackoverflow thanks", "d": "2/2016"}, {"body": "admin\u6a21\u677f\u4e2d\u90e8\u5206\u5185\u5bb9\u4e0d\u517c\u5bb9", "d": "2/2016"}, {"body": "event listener obviously event passed generally considered bad practice retrieving values dom js", "d": "2/2016"}, {"body": "think outside dom harness power vue filters", "d": "2/2016"}, {"body": "thank understand must load items using vue strart workingfiltering", "d": "2/2016"}, {"body": "please use issues ask general questions use gitter room forum", "d": "2/2016"}, {"body": "done proper place let people know new articletutorial vue", "d": "2/2016"}, {"body": "tweet mention vuejs wed feb pm mtyson notifications githubcom wrote done proper place let people know new articletutorial vue reply email directly view github", "d": "2/2016"}, {"body": "reproduce please specify version using downloaded", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "fixed next release", "d": "2/2016"}, {"body": "nt think makes sense unwatch watcher one one relationship want watch subpath use separate watchers", "d": "2/2016"}, {"body": "well think would easier specifying eg watchers prop nt watched thank explantion", "d": "2/2016"}, {"body": "relying single deep watcher many properties exceptions seems like sign design problems consider using computed properties watching function instead use watch absolutely", "d": "2/2016"}, {"body": "case watching changes entity attributes excluding relationships anyway thank much advice", "d": "2/2016"}, {"body": "trying nt feel right", "d": "2/2016"}, {"body": "hiendv inside", "d": "2/2016"}, {"body": "dispatch event fires request update item whenever attribute changes item updated usecase", "d": "2/2016"}, {"body": "need exclude certain paths sounds odd object supposed persisted piece data persisted alternatively", "d": "2/2016"}, {"body": "actually would refactor instead duplicating lines problem properties watchers eg relationships changes would caught twice causing unneeded update request original item whose actual attributes nt change understand totally logic happen want avoid easiest way anyway thank patience happy lunar new year", "d": "2/2016"}, {"body": "hiendv pardon interruption seems trying reinvent computed properties", "d": "2/2016"}, {"body": "simplesmiler evan said thing guess read documentation carefully enough", "d": "2/2016"}, {"body": "please provide reproduction bug actually happening also make sure read section", "d": "2/2016"}, {"body": "ok actually created jsfiddle writing scratch saw concept works expected compared code jsfiddle saw somehow accidentally put right outside doh", "d": "2/2016"}, {"body": "please provide reproduction", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "haoziluo display \u7528\u6570\u636e\u9a71\u52a8\u89c6\u56fe", "d": "2/2016"}, {"body": "\u8865\u5145\u4e00\u4e0b haoziluo \u5728 \u90fd\u4e0d\u4f1a", "d": "2/2016"}, {"body": "orderlayer\u662f\u4e0d\u662f\u6839\u672c\u4e0d\u5b58\u5728", "d": "2/2016"}, {"body": "\u91cd\u73b0\u7684\u610f\u601d\u662f\u8981\u770b\u5230 bug js orderlayer", "d": "2/2016"}, {"body": "closing inactivity please reopen follow information", "d": "2/2016"}, {"body": "", "d": "6/2016"}, {"body": "row \u8fd9\u6837 \u4e5f\u662f\u663e\u793a\u4e0d\u51fa\u6765\u7684 ndcontent", "d": "11/2016"}, {"body": "\u5728data\u91cc\u628arow\u521d\u59cb\u5316\u8fdb\u53bb", "d": "11/2016"}, {"body": "", "d": "12/2017"}, {"body": "please use forum ask questions know already available use custom directive", "d": "2/2016"}, {"body": "directly give string", "d": "2/2016"}, {"body": "wow nt know", "d": "2/2016"}, {"body": "oevgeny sorry nt spotted forum go future awesome saves lot headache manipulating strings cheers guys", "d": "2/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted forum stackoverflow thanks", "d": "2/2016"}, {"body": "appear inside due html spec restrictions appear inside afaik also table elements like appear naked without surrounding limitation html works unfortunately work around", "d": "2/2016"}, {"body": "thanks use attribute working around", "d": "2/2016"}, {"body": "", "d": "3/2016"}, {"body": "please check works", "d": "4/2017"}, {"body": "defined title data var new vue instance change title title quote title literal title", "d": "2/2016"}, {"body": "oh sob got thx", "d": "2/2016"}, {"body": "please ask questions forum depends context something like", "d": "2/2016"}, {"body": "matmoo sorry nt get case looks like description bit thanks forum link posted topic description detailed", "d": "2/2016"}, {"body": "updated original syntax still good", "d": "2/2016"}, {"body": "oh thanks thought syntax deprecated", "d": "2/2016"}, {"body": "pr", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "hi please make sure read issue reporting guidelines opening issue issue list accepts bug reports feature requests questions posted forum stackoverflow thanks", "d": "2/2016"}, {"body": "fiddle nothing described", "d": "2/2016"}, {"body": "sorry forgot update fiddle fiddle correct", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "technically bug callback called assignment complete usage also nt seem make sense basically equivalent watch", "d": "2/2016"}, {"body": "overlooked fact part see work also see example representative actual code calls conditionally nt want call defined currently following closing issue since bug probably something weird anyways", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "vs \u8a72\u5982\u4f55\u7372\u53d6\u6578\u64da\u6e90", "d": "2/2017"}, {"body": "please make sure read issue filing guidelines opening issues bug reports provide jsfiddle jsbin containing set reproducible steps simple descriptions enough us triage issue", "d": "1/2016"}, {"body": "please provide minimal reproduction form jsfiddle jsbin", "d": "1/2016"}, {"body": "looks like problem laravel blade engine using template partials able get working thanks", "d": "2/2016"}, {"body": "dispatch return value using event system dispatch emit means code asynchronous means happens next decided message receiver nt write something like javascript world use callbacks handle asynchronous logic promises better applicable expects pass multiple arguments including callback function therefore actually need receiver side", "d": "1/2016"}, {"body": "thanks fnlctrl explanation", "d": "1/2016"}, {"body": "fnlctrl thank explaination asynchronous forgot embarrassing", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "okay got working delayed calling broadcast ms also using activate hook alternative", "d": "1/2016"}, {"body": "ikristher think better way delaying broadcast using settimeout", "d": "10/2016"}, {"body": "tried work around basically data prop wo nt bound probably another issue", "d": "1/2016"}, {"body": "working intended think like question please move forum instead also please clarify trying achieve access", "d": "1/2016"}, {"body": "made small fiddle trying build sophisticated clusterizejs functionality form component basically clusters components used within main component depending content overall height rows also components managed corresponding cluster component clusters move scrolling rows get filled appropriate data got already working create rows fixed template code detailed vue clusterizevue clusterize clusterizecluster vfor cluster slot moduleexports components clusterizecluster require clusterizecluster stuff fill clusterizeclusterdata clusterizeclustervue clusterizecluster slot datasync vfor data moduleexports props data type array default clusterizerowvue clusterizerow vshow data null slot moduleexports props data default null want used like ca nt get data within clusterizerow access right clusterizerow within clusterizecluster later want make small datatable like aggrid define content columns clusterizerow need exchangeable buggy version first try", "d": "1/2016"}, {"body": "uploaded current state vueclusterize", "d": "1/2016"}, {"body": "please provide reproduction", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "paste new screenshot", "d": "2/2016"}, {"body": "looks like ios bug since still fixed today great job apple nothing vue fixed user code adding disabled option first one", "d": "2/2016"}, {"body": "see", "d": "1/2016"}, {"body": "shipped", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "relevant dependencies", "d": "1/2016"}, {"body": "comments considered nodes therefore comment well div template created fragment instance template multiple nodes read disadvantages fragment instances one nonprop attributes accepted solve moving comment inside div passing dynamic like", "d": "1/2016"}, {"body": "maybe produce warning obvious change component handling adding comment wrong location", "d": "1/2016"}, {"body": "debug mode vue warn attribute class ignored component component fragment instance", "d": "1/2016"}, {"body": "hmm guess quite hard add information fragment instance created", "d": "1/2016"}, {"body": "thanks would consider updating docs since comment thing specifically feels like little bit gotcha eg multiple conditions turn vue instance fragment instance template contains multiple toplevel elements including html comment nodes", "d": "1/2016"}, {"body": "fixed latest update work dependency", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "sorry", "d": "1/2016"}, {"body": "hmm annoying html parsing preserves camelcase valid camelcase attributes converted directive handle two things considering add modifier bit indirect trivial implement include builtin whitelist valid svg camelcase attributes annoying part list either super long thus shipping lot extra code likely unused lot scenarios incomplete personally work svg lot would like get feedback common camelcase attributes encountered", "d": "1/2016"}, {"body": "could svg attributes whole ignored would simpler", "d": "1/2016"}, {"body": "take whitelist", "d": "1/2016"}, {"body": "simplesmiler ok already dev branch", "d": "1/2016"}, {"body": "thank post", "d": "8/2016"}, {"body": "oops made mistake issue really sorry", "d": "1/2016"}, {"body": "jbrialon would great feature", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "nt quite get useful convincing use case", "d": "1/2016"}, {"body": "case animating different elements using tweenmax using vel pretty convenient use stagger function tweenmax thought would great could retrieve array one example course would applications functionality", "d": "1/2016"}, {"body": "yes could great massive animation stuff", "d": "1/2016"}, {"body": "jbrialon vuejs equivalent similar needs used idea possible achieve requirement", "d": "1/2016"}, {"body": "anygong course implementing vel could use documentgetelementbyid first place", "d": "1/2016"}, {"body": "seems useful might suggest syntax instead use modifier standard modifier would tell directive put elements array", "d": "1/2016"}, {"body": "vels suggestion list good idea", "d": "2/2016"}, {"body": "like modifier preference either suffice", "d": "2/2016"}, {"body": "requirement make window scroll nth row table rendered array supported wrote html must make tr component use get", "d": "2/2016"}, {"body": "convinced benefits suggestion introduces extra syntax vue part increases implementation complexity learning cost simply achieved", "d": "3/2016"}, {"body": "quick pen code see async component loaded object set would expect guess working intended updated accordingly object loaded", "d": "1/2016"}, {"body": "obviously ref set component actually rendered", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "equivalency basically use slots would better also explain use case italso question better posted forums", "d": "1/2016"}, {"body": "sorry move forums added user case", "d": "1/2016"}, {"body": "importing vue src using recommended setups likely related build setup rather vue also providing enough information anyone help", "d": "1/2016"}, {"body": "please provide runnable reproduction", "d": "1/2016"}, {"body": "forum camel case issue props need pass props itemdata itemgroup passingdata", "d": "1/2016"}, {"body": "\u8fd9\u662f batcher \u9884\u671f\u7684 batcher job \u5fc5\u987b\u6709 run \u51b5\u4e14\u8fd9\u91cc\u4e5f\u4e0d\u53ea\u662f", "d": "1/2016"}, {"body": "hehe compiled code", "d": "1/2016"}, {"body": "gebilaoxiong wrong compiled code", "d": "1/2016"}, {"body": "indentation code problem", "d": "1/2016"}, {"body": "yes look fiddle linked indentation error nt correct indentation issue linked fiddle", "d": "1/2016"}, {"body": "code fiddle", "d": "1/2016"}, {"body": "javascript generated coffeescript var mycomponent app componentinstance mycomponent vueextend template n upn downn dirupfoo n dirdownfoo n data function return dir foo false foo false methods changefoo function dir thisdir dir foo thisdir dir foo return consolelog changefoo dir thisdir dir foo watch dirupfoo function return consolelog watchdirupfoo thisdirupfoo dirup handler function return consolelog watchdirup thisdirup deep true dirup function return consolelog watchdirupnodeep thisdirup dir handler function return consolelog watchdir thisdir deep true app documentgetelementbyid app componentinstance new mycomponent componentinstance mount app compiled code machine output got", "d": "1/2016"}, {"body": "gebilaoxiong updated code original post also updated fiddle issue happening fiddle need check local environment", "d": "1/2016"}, {"body": "yes close good night", "d": "1/2016"}, {"body": "fiddle seems working fine could local indentation eg mixing spacestabs closing feel free reopen reproduce", "d": "1/2016"}, {"body": "vue \u672c\u8eab\u6ca1\u6709\u5b9e\u73b0 html parse \u662f\u9760\u6d4f\u89c8\u5668\u6765\u5b9e\u73b0\u7684 html", "d": "1/2016"}, {"body": "\u6211\u5c31\u60f3\u8bf4\u80fd\u4e0d\u80fd\u6574\u7b80\u5355\u70b9\u513f lt vif lt gt \u4e5f\u884c\u554a \u6574\u90a3\u4e48\u957f\u7684\u5355\u8bcd\u6ca1\u6709\u5fc5\u8981", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u80fd\u4e0d\u80fd\u518d\u63d0\u4f9b\u4e00\u4e2a\u7c7b\u4f3c\u4e0a\u9762\u7684\u7b80\u77ed\u7684 \u4eba\u4eec\u7231\u7528\u54ea\u4e2a\u7528\u54ea\u4e2a", "d": "1/2016"}, {"body": "honestly idea trying achieve use normal props", "d": "1/2016"}, {"body": "please ask questions forum issues", "d": "1/2016"}, {"body": "actually question suggestion want implement isolated scope like angular read code vfor may know suggest make easy thx reply", "d": "1/2016"}, {"body": "vue directives different angular directives used dom manipulations need propsscope use components", "d": "1/2016"}, {"body": "spelled class wrong", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "bad analyzed event nt saw currenttarget value hence question thank quick answer", "d": "1/2016"}, {"body": "somewhat related stumbled upon thread searched eventtarget clicked element vue eventcurrenttarget always null turns due consolelog works thus consolelog event expanded browser console currenttarget always null however consolelog eventcurrenttarget contain element clicked stackoverflow explanation bug vue caused js consolelog works leaving users issue waste hours scratching head hope helps", "d": "1/2017"}, {"body": "searching solution catching nonfocusable elements etc searching ended reading thread please consider taking look stackoverflow topic jsfiddle", "d": "3/2017"}, {"body": "thank", "d": "10/2018"}, {"body": "mean something like prevent stop modifiers also better asking questions forum github issues bugs suggestions scott", "d": "1/2016"}, {"body": "smolinari guess counts feature request sure opening modification builtin directives good idea could make code less portable seems common use case achieve simply checking method", "d": "1/2016"}, {"body": "ok guess misunderstood meant ignore bubbled event intended achieve overall scott", "d": "1/2016"}, {"body": "add modifier vue typing modifiers always easier write smile", "d": "1/2016"}, {"body": "often need provide example use case", "d": "1/2016"}, {"body": "added modifier", "d": "1/2016"}, {"body": "scott", "d": "1/2016"}, {"body": "thanks", "d": "2/2016"}, {"body": "please ask questions forums", "d": "1/2016"}, {"body": "sorry way truly great work really like vuejs keep going", "d": "1/2016"}, {"body": "use component smile look", "d": "1/2016"}, {"body": "problem using components exchange go real problems", "d": "1/2016"}, {"body": "nirazul case exactly like instances actually want parent component data inherited like using gone overall expensive terms performance using lighweight vm lower cost", "d": "1/2016"}, {"body": "nirazul take look see works exactly like suggested partials work creates new data scope adding additional props keyitem scope inherits parent data could even use case repeating partial specialy created data objects", "d": "1/2016"}, {"body": "nirazul mean like value true value false", "d": "1/2016"}, {"body": "see mean although nt situation yet wished existed definitely would help encapsulate partials improve reusability", "d": "1/2016"}, {"body": "nirazul case partial part component right", "d": "1/2016"}, {"body": "oliverzy sure part replying refer first comment also use dynamic components registered globally beforehand course", "d": "1/2016"}, {"body": "nirazul okay understand thanks", "d": "1/2016"}, {"body": "partials something always want move away composition mechanism similar string templates personally never use code think concerned performance absolutely use components instead performance absolutely critical replicate blocks without using partials partials although cheaper components still also perf cost", "d": "3/2016"}, {"body": "vuecli \u6216\u8005 yeoman", "d": "1/2016"}, {"body": "hi made example loopback loopbackvueboilerplate", "d": "8/2016"}, {"body": "bad warning stack trace", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "currenttarget", "d": "1/2016"}, {"body": "dafrok \u4e4b\u524d\u4e60\u60ef\u4e86dom\u7684\u65b9\u5f0f \u4e0d\u77e5\u9053viewmodel\u7684\u65b9\u5f0f\u662f\u600e\u4e48\u53d6\u7684", "d": "1/2016"}, {"body": "\u53ef\u4ee5\u8003\u8651\u5c06icon\u505a\u6210button\u7684\u80cc\u666f\u56fe", "d": "1/2016"}, {"body": "vue eventtarget \u548c eventcurrenttarget \u76f4\u63a5 dom", "d": "1/2016"}, {"body": "\u8c22\u8c22\u5404\u4f4d\u89e3\u7b54", "d": "1/2016"}, {"body": "nt need already satisfied use partials register either globally within component used wherever want even dynamic dynamic name attribute", "d": "1/2016"}, {"body": "thank missed documentation possibility pass arguments partials", "d": "1/2016"}, {"body": "looking use case really using components notion necessary component reusing ui logic use components nt matter big small", "d": "1/2016"}, {"body": "partials inherit data parent want pass data independent parent component really want create component", "d": "1/2016"}, {"body": "bug think", "d": "1/2016"}, {"body": "use classbinding arraysyntax final output array element must string see documentation classbinding arraysyntax really really need values classes although ca nt see good practice always use ternary operator", "d": "1/2016"}, {"body": "\u8fd9\u4e2a\u8c8c\u4f3c\u662f chrome \u7684 bug \u867d\u7136\u53ea\u652f\u6301\u5e26 webkit \u4e0a\u6709", "d": "1/2016"}, {"body": "\u4e0d\u5efa\u8bae\u5728 coerce props \u662f\u5148\u4e8e\u7ec4\u4ef6\u672c\u8eab\u7684\u7684 data \u53ef\u4ee5\u505a\u4e00\u4e2a computed", "d": "1/2016"}, {"body": "", "d": "7/2016"}, {"body": "logic behind vif vshow simply work based value truthiness javascript empty object truthy language works changing would break cases users expect empty object work opinion explicitly checking wether empty necessary logical", "d": "1/2016"}, {"body": "understand think instance object passed ever falsey doubt anyone sets data default null going object simply seems sensible cast since likely ever going populated object know angular made checks inside directive much cleaner", "d": "1/2016"}, {"body": "create mixin expose method check object also use computed value", "d": "1/2016"}, {"body": "syropian set want falsy uses logic vue seems sensible seems counterintuitive", "d": "1/2016"}, {"body": "fine agree disagree guess", "d": "1/2016"}, {"body": "hi posva give example solve problem thanks lot", "d": "8/2016"}, {"body": "nayir actually use use computed property check ideally set initial value falsy instead truthy", "d": "8/2016"}, {"body": "simple work around create computed property output bool value let explain example yourcomponentfilevue script section data return myobject computed hasmyobject function return objectkeys thismyobject length yourcomponentfilevue template section", "d": "1/2017"}, {"body": "use lodash globally", "d": "3/2018"}, {"body": "like know answer sure guess performance", "d": "1/2016"}, {"body": "like know answer sure guess performance curious case difference actually still security trumps performance far defaults go would make sense fast insecure edition nondefault", "d": "1/2016"}, {"body": "first reason default perf size csp build needs full blown parserevaluator makes dist file larger second noncsp compliant insecure depends vue used part vue noncpscompliant expression parser uses generate expression getters become insecure user would using vue compile nontrusted html content first place however basically rendering arbitrary untrusted html user already busted matter vue generates expression getters much easily exploitable attacks even vue cspcompliant", "d": "1/2016"}, {"body": "could issue reopened turned request documentation update shows examples situation users know avoid general perhaps elaboration sorts situations would prefer csp version", "d": "1/2016"}, {"body": "thanks explanation btw", "d": "1/2016"}, {"body": "taoeffect feel free open issue better yet pull request", "d": "1/2016"}, {"body": "\u522b\u505a\u4f38\u624b\u515a \u53bb\u770b\u6559\u7a0b \u53bb\u770b\u793a\u4f8b \u987a\u4fbf\u5173\u6389issue", "d": "1/2016"}, {"body": "question call builtin filter part custom one example use filter finish filter found work use directly also bad builtin filters take args chained vue think enough", "d": "1/2016"}, {"body": "vuefilter currency", "d": "1/2016"}, {"body": "right feel free open pr", "d": "1/2016"}, {"body": "probably already hook try running directly see error get", "d": "1/2016"}, {"body": "yes told ok bad running try", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u83b7\u53d6\u5230\u6570\u636e\u540e\u8fd0\u884c mui muislider slider \u5c31\u53ef\u4ee5\u4e86", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "issues please make sure read issue reporting checklist opening issue issues conforming guidelines may closed immediately", "d": "1/2016"}, {"body": "\u76ee\u6d4b\u662fvuenexttick\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898 \u6b64\u7c7b\u95ee\u9898\u8bf7\u79fb\u6b65\u8bba\u575b \u4f1a\u6709\u66f4\u591a\u7684\u4eba\u5e2e\u4f60\u89e3\u51b3\u95ee\u9898 \u5728issue\u91cc\u63d0\u95ee\u4f1a\u589e\u52a0\u7ef4\u62a4\u8005\u7684\u8d1f\u62c5", "d": "1/2016"}, {"body": "dafrok \u91cd\u8981\u7684\u4e8b\u60c5\u8bf4\u4e09\u904d", "d": "1/2016"}, {"body": "vmslide nexttick function dom \u73b0\u5728\u66f4\u65b0\u4e86 mui slider slider interval", "d": "1/2016"}, {"body": "nt true representation array practice rarely encounter need get actual references child components tend abstract state data focus manipulating data", "d": "1/2016"}, {"body": "case intermediate representation data would pass constructor get final result component", "d": "1/2016"}, {"body": "think problem placing actual representation component local state inside components reality component state global store closing bug feature request better continued forum", "d": "1/2016"}, {"body": "store would nt solve object would intermediate representation turned real representation passed component constructor", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "likely serialization issue related vue", "d": "1/2016"}, {"body": "nilssolanki requirement solve problem", "d": "2/2016"}, {"body": "read documentation nt accompanying text though nt see first last code example property called", "d": "2/2016"}, {"body": "wow great thanks btw figured way sure proper approach seems clean works", "d": "2/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "1/2016"}, {"body": "\u8fd9\u4e2a\u9891\u9053\u4e0d\u662f\u7528\u6765\u63d0\u95ee\u521d\u7ea7\u95ee\u9898\u7684 \u53cd\u9988bug pr", "d": "1/2016"}, {"body": "ok", "d": "1/2016"}, {"body": "stackoverflowcom", "d": "1/2016"}, {"body": "images working", "d": "1/2016"}, {"body": "nt know images working paste url", "d": "1/2016"}, {"body": "\u65e7\u7248webview\u6216\u8005\u624b\u673a\u6d4f\u89c8\u5668 \u4e0d\u517c\u5bb9", "d": "1/2016"}, {"body": "ordinary situation find removeclass exec twice last remove pagecurrent work well unnormal situation find removeclass exec remove pagecurrent work wrong", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u95ee\u9898\u89e3\u51b3\u4e86 \u4f46\u662f\u6ca1\u627e\u5230\u4ee3\u7801\u4e0a\u7684\u6839\u672c\u539f\u56e0 \u89e3\u51b3\u65b9\u6cd5\u662f", "d": "1/2016"}, {"body": "dunno agree adding support jquery lt version already years old mentioned since bc breaks reasonable upgrade jquery version project using vuejs go without jquery possible", "d": "1/2016"}, {"body": "encountered scenario day tasked introduce new feature existing legacy system legacy system working jquery dependent could nt upgrade modern versions true upgrading could remedy issue may encounter situations control version legacy system includes youngsteveo mentions go without jquery completely possible described situation beyond control necessarily advocating vue support legacy versions jquery since vue works fine without jquery feel fail gracefully jquery exists think conditional check whether jquery exists", "d": "1/2016"}, {"body": "rjv ah saying use jquery undefined could see", "d": "1/2016"}, {"body": "natively supported browsers also please provide repro using using inline template compiling", "d": "1/2016"}, {"body": "looked around compatibility looks like recognize even though firefox chrome support older versions example say hello var componentuser template usertemplate props hello methods sayhello function consolelog thishello new vue el body components user componentuser", "d": "1/2016"}, {"body": "ok things note avoid compiling raw templates means mount root instance put templates instead use want crossbrowser compatibility", "d": "1/2016"}, {"body": "would add two cents hide template tag display none polyfill doesnt hide template tag counts elements template render template inlined html document end rendered elements number number source template element", "d": "10/2017"}, {"body": "englishextra could elaborate maybe example", "d": "3/2018"}, {"body": "jlmmns work fine", "d": "3/2018"}, {"body": "\u5173\u6389\u5427 \u65e0\u529b\u5410\u69fd \u53bb\u770b\u6587\u6863", "d": "1/2016"}, {"body": "nangegao issue issue", "d": "1/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue javascript \u662f\u52a8\u6001\u7c7b\u578b\u7684", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u7ec4\u4ef6\u53ea\u8981\u88ab\u6253\u5305\u5c31\u4f1a\u63d2\u5165 css", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "berwin \u5efa\u8bae\u770b\u770b\u8fd9\u4e2a", "d": "1/2016"}, {"body": "berwin \u53ea\u7528\u4e8e\u7ec4\u4ef6\u7684\u6837\u5f0f\u90fd\u4f1a\u88ab\u91cd\u547d\u540d", "d": "1/2016"}, {"body": "xiaolongyuan", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "xiaolongyuan", "d": "1/2016"}, {"body": "\u7528", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "", "d": "6/2017"}, {"body": "problem solved forgot install vueloader", "d": "1/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "try paginate data limitby see limiting number displayed items help", "d": "1/2016"}, {"body": "third party implementation possible someone wants implement vue unlikely included core default", "d": "1/2016"}, {"body": "make sure method called compilation available believe working correctly please reopen provide reproduction", "d": "1/2016"}, {"body": "sure working thing changed use int refs instead strings", "d": "1/2016"}, {"body": "please try think work nt file bug questions posted forums", "d": "1/2016"}, {"body": "vue\u7ec4\u4ef6 \u66f4\u591a\u95ee\u9898\u8bf7\u79fb\u6b65\u8bba\u575b", "d": "1/2016"}, {"body": "\u6307\u4ee4\u8bbe\u8ba1\u6709\u95ee\u9898 \u5e94\u8be5\u628ayyyymmdd\u7b49\u4f5c\u4e3a\u6307\u4ee4\u7684value \u66f4\u591a\u95ee\u9898\u8bf7\u79fb\u6b65\u8bba\u575b", "d": "1/2016"}, {"body": "\u8fd9\u79cd\u76f4\u63a5\u505a\u6210\u4e00\u4e2a filter \u66f4\u597d", "d": "1/2016"}, {"body": "thank", "d": "1/2016"}, {"body": "\u6211\u60f3\u4f60\u9700\u8981\u7684\u66f4\u50cf\u662f\u4e00\u4e2aparser\u800c\u4e0d\u662fvue \u8bba\u575b\u4f1a\u6709\u66f4\u591a\u7684\u4eba\u5e2e\u4f60\u89e3\u51b3\u95ee\u9898 \u4e0d\u59a8\u53bb\u770b\u770b", "d": "1/2016"}, {"body": "transition applied initial render dedicated mechanism control next release currently trigger state change initial render simulate initial transition", "d": "1/2016"}, {"body": "alright thanks letting know edit function works great anyway", "d": "1/2016"}, {"body": "vuevalidator bug create separate issue", "d": "1/2016"}, {"body": "behavior htmlminifier used minify html production mode related option open issue meanwhile get around", "d": "1/2016"}, {"body": "got caught common javascript gotcha line assign new reference variable instead modifying data existing reference fixed demo", "d": "1/2016"}, {"body": "oic thanks explanation", "d": "1/2016"}, {"body": "please provide reproduction", "d": "1/2016"}, {"body": "happening component changed hook latest release happens marker come vfor filtered changing quickly try make reduced example", "d": "1/2016"}, {"body": "night research found vuerouter bug repro nt know want close issue open repo look source code seems part code updated vue works fine vue", "d": "1/2016"}, {"body": "nt know want close issue open repo vuerouter bug open issue faster asking someone", "d": "1/2016"}, {"body": "ok", "d": "1/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u7ec4\u4ef6\u554a \u8bf7\u770b\u6587\u6863", "d": "1/2016"}, {"body": "\u6211\u4e4b\u524d\u770b\u4e0a\u4e00\u7ae0 \u8fc7\u6ee4\u5668\u90fd\u53ef\u4ee5\u7528\u5c3c", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u8fd9\u79cd\u9700\u6c42\u548c vue \u6ca1\u6709\u76f4\u63a5\u5173\u7cfb", "d": "1/2016"}, {"body": "\u53ef\u4ee5\u770b\u770b\u8fd9\u4e2a", "d": "1/2016"}, {"body": "provide reproduction issue", "d": "1/2016"}, {"body": "browser ca nt replicate chrome firefox safari test case", "d": "1/2016"}, {"body": "closing inactivity", "d": "1/2016"}, {"body": "getting possibly related weird behavior using debugger statement chrome devtools open increments forever", "d": "5/2016"}, {"body": "vue bug per se reproducible vanilla filed issue chrome tracker", "d": "5/2016"}, {"body": "actually able reproduce different way putting ngif input element", "d": "1/2018"}, {"body": "sometimes get confused", "d": "1/2016"}, {"body": "would say syntaxlogic goes along lines meaning verbs think general inform army soldiers parent child use larger means communicate like bullhorn even radio broadcast message order major army wanted send general message dispatch message go chain command lieutenant colonel colonel general think visualization analogy helps smile scott", "d": "1/2016"}, {"body": "smolinari exactly way thought found meaning selfexplanatory seen names used frameworks even nonjavascript ones creating aliases within api really inline simple rather small surface api vue creates redundancy clutter let focus maintaining trait vue", "d": "1/2016"}, {"body": "thanks smolinari afraid personally familiar enough military metaphor helpful appreciate attempt smiley broadcast suggests sending message many receivers dispatch seems overly formal word sending message single receiver looking official definitions words indeed seem generally accepted meanings result people familiar words outside tech perhaps military likely find use confusing misleading find military use dispatch referring smolinari broadcast seem militaryspeak communicating specifically one subordinates sure full metaphor holds clear amirrustam also enjoy simple small surface api vue definitely suggesting stacking permanent aliases would eventually removed favor descriptive method names parts public api need renamed common migration strategy", "d": "1/2016"}, {"body": "native dom api use send event bubbles upwards vue sends event downward children broadcaster think pretty straightforward angular method thing overall benefits changing name subjective requires us either two sets methods thing raise deprecation warning old ones nt think worth", "d": "1/2016"}, {"body": "fair enough analogs dom api thanks explanation", "d": "1/2016"}, {"body": "note wrote forgot save earlier chrisvfritz think company ceo needs communicate employees use communication method sends message many employees possible message new order could sent company intranet email methods broadcasting information however manager within company wants send message ceo might use email following proper internal rules etiquette would dispatched boss first boss passes along boss continues ceo gets scott", "d": "1/2016"}, {"body": "anyone pleased naming could wrap method attach vueprototype create global mixin", "d": "1/2016"}, {"body": "smolinari thanks taking time never worked company big go channels dispatch message ceo still think words appreciate attempt fine impossible wrap head around nt even need yet wanted bring first thing came across nt think yes course accept respect evan reasoning though azamatsharapov certainly true though comes problems would personally avoid practice someone less likely tripped vue method look seemingly official vue method ca nt find anywhere documentation someone includes future smiley either way main concern accessibility newcomers suggestion nt address", "d": "1/2016"}, {"body": "use prop option handle", "d": "1/2016"}, {"body": "thx", "d": "1/2016"}, {"body": "problem vue removes attribute falsy", "d": "1/2016"}, {"body": "well invalid html although work browsers valid", "d": "1/2016"}, {"body": "ok guess modifier best way go easy pr welcome", "d": "1/2016"}, {"body": "modifier name ok", "d": "1/2016"}, {"body": "yeah think", "d": "1/2016"}, {"body": "way could email email address would convenient talk native language xd", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "rhyzx thank posting issues english smile", "d": "1/2016"}, {"body": "posva wel", "d": "1/2016"}, {"body": "use colon userscount attribute", "d": "1/2016"}, {"body": "thanks variables passed component needs prefix valid type", "d": "1/2016"}, {"body": "tristanbes shortcut directive attribute value always string using vbind", "d": "1/2016"}, {"body": "thanks", "d": "1/2016"}, {"body": "also may explicit also accept array object types eg handy value passing comes another variable data attribute instead hardcoded number", "d": "8/2016"}, {"body": "using still get error creating standalon custom component webpack nt know may causing problem prop parsing", "d": "6/2018"}, {"body": "ediamin vue still takes string solved problem bind usercount", "d": "9/2018"}, {"body": "please leave issues vue issues direct questions forum thank", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "see note api docs", "d": "1/2016"}, {"body": "plain day sorry missed excellent work platform absolute pleasure build", "d": "1/2016"}, {"body": "ways detect part object changed inside watch real target path like third param useful option", "d": "11/2016"}, {"body": "agreed would nice able tell changed array", "d": "1/2017"}, {"body": "want push watching array instance copy array push copy assign copy watching array back simple", "d": "3/2017"}, {"body": "unclegena explain little please could help many us", "d": "3/2018"}, {"body": "bernardmarieonzo according docs note mutating rather replacing object array old value new value reference objectarray vue keep copy premutate value unclegena get old value creating copy existing array another variable create new value reference memory whatever wan na add original array new variable created instead replace old array new one replacing reference memory thisoriginarray copiedarray thus vue references variables able get new old value clear understanding works like basically saving variable object array javascript nt keep record value instead keeps reference location memory change array object update value memory old new value variable reference memory location", "d": "3/2018"}, {"body": "thank dynalz unclegena", "d": "4/2018"}, {"body": "trying watch changes occur based input fields workaround suggested nt apply would really nice limitation removed api newvalue oldvalue properties reflect mutations bound objects example list nested tables inline editable properties able watch root array deep set true diff changes", "d": "5/2018"}, {"body": "im facing exactly issue darkomenz need add new item array based previous selection", "d": "7/2018"}, {"body": "also facing issue nested properties changed input workaround nt applicable large limitation vue supply old values setup cached value refer back pukeinducing hack lessthanideal alternative workarounds refactor entire app object property nested inside child component add onchange event handler every input inputs total anyone better ideas", "d": "7/2018"}, {"body": "ljelewis data object like formdata may use dynamic watch watch inputs case add inputs form watchers initialized eg", "d": "7/2018"}, {"body": "thank awesome support", "d": "1/2016"}, {"body": "unfortunately nt solve duplicate insertion named slot using unnamed slot update test see issue inserted twice", "d": "1/2016"}, {"body": "would use way though one default slot", "d": "1/2016"}, {"body": "changed test case passes", "d": "1/2016"}, {"body": "hmm double check got right commit morning use case simple example html idea sample wrap default slot scrollable div otherwise insert content directly know solved partials complicate template partials syntax work simple scenarios like one nt think", "d": "1/2016"}, {"body": "one default slot nt syntax ensure one default slot makes page since used two unnamed slots", "d": "1/2016"}, {"body": "yeah see mean confusing though", "d": "1/2016"}, {"body": "sorry delay right commit forgot build course project importing vue testing using dist release good thanks", "d": "1/2016"}, {"body": "post forum instead", "d": "1/2016"}, {"body": "expandleave", "d": "1/2016"}, {"body": "\u5728\u5f02\u6b65\u7ec4\u4ef6\u81ea\u5df1\u7684 gitter \u6216\u8005 qq", "d": "1/2016"}, {"body": "nt behave differently placed file please provide actual reproduction file problem ideally full repo", "d": "1/2016"}, {"body": "closing inactivity", "d": "1/2016"}, {"body": "confirm bug exist steps reproduce produce vue component file example register modal use component parts application open modal close modal expected result modal closes nothing left behind actual result modal disappears however elements within modal still clickable changing display table anything table seemingly solve problem", "d": "9/2016"}, {"body": "happens avue file provide code used reproduce", "d": "9/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u8bd5\u8bd5\u5728 soptions \u524d\u9762\u52a0\u4e0a soptions", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "brunocascio future please ask questions like within community forums issues section reporting bugs discussing development project please read issue reporting guidelines hard give optimal solution without knowing actually building quick prettiest potential solution instead specifying use button", "d": "1/2016"}, {"body": "okey thanks sorry regards", "d": "1/2016"}, {"body": "brunocascio nothing sorry feel free ask get help anytime forums always glad help", "d": "1/2016"}, {"body": "really thanks amirrustam code nt work error vuetouch library open pullrequest contribute", "d": "1/2016"}, {"body": "brunocascio fantastic", "d": "1/2016"}, {"body": "personally nt think good idea unless provide convincing use case example", "d": "1/2016"}, {"body": "angular js stateful filters say docs strongly discouraged write filters stateful execution ca nt optimized angular often leads performance issues many stateful filters converted stateless filters exposing hidden state model turning argument filter sure issue would directly reflected vue thought mention sake wellrounded view matter", "d": "1/2016"}, {"body": "purpose interest handle data binding directly promises avoid verbosity initializing data promise returns example compared digging deeper seems add complexity exceeds benefits", "d": "1/2016"}, {"body": "latter nt really need stateful filters write plugin achieve similar vuerx allows directly bind observables", "d": "1/2016"}, {"body": "example simple one looked vuerx think ca nt achieve complex situations", "d": "1/2016"}, {"body": "think complicates mental model declarative binding actual property always plain values", "d": "1/2016"}, {"body": "would like update little issue reason stateful filters useful id raw value need display real human readable data fetched ajax instance js bin wonder suggestion make work", "d": "9/2017"}, {"body": "filter correct abstraction trying accomplish apneadiving based description make component accepts id prop would display userpresentable value components already stateful allowing even show spinner inplace async data fetched feel free ask specifics discord forum", "d": "9/2017"}, {"body": "thanks quick answer sirlancelot", "d": "9/2017"}, {"body": "try call play method need", "d": "1/2016"}, {"body": "use change based quick demo", "d": "1/2016"}, {"body": "crswll demoed", "d": "1/2016"}, {"body": "crswll thanks lot", "d": "1/2016"}, {"body": "\u5f00issuse \u95ee\u8fd9\u79cd\u95ee\u9898 vue\u662fview\u7684\u6cd5\u8bed", "d": "1/2016"}, {"body": "\u627e\u60a8\u4e0d\u5bb9\u6613\u554a \u53ea\u80fd\u8fd9\u6837 \u8bf7\u89c1\u8c05\u554a", "d": "1/2016"}, {"body": "\u5173\u6389\u5427 \u522b\u6d6a\u8d39\u4f5c\u8005\u7684\u65f6\u95f4 \u4e5f\u8ba9\u8001\u5916\u7b11\u8bdd", "d": "1/2016"}, {"body": "xiaolongyuan \u4f60\u600e\u4e48\u5c31\u77e5\u9053\u7684\u5462", "d": "1/2016"}, {"body": "\u4f5c\u8005\u63d0\u5230\u8fc7", "d": "1/2016"}, {"body": "\u63a7\u544a\u662f sue", "d": "1/2016"}, {"body": "\u5144\u53f0 \u4f60\u600e\u4e48\u60f3\u5230\u8fd9\u4e2a\u540d\u5b57\u7684", "d": "1/2016"}, {"body": "goes going explain evan close post nt explaining problem see contributor guidelines scott", "d": "1/2016"}, {"body": "read contributing guidelines first", "d": "1/2016"}, {"body": "case language problems please post questions forumvuejsorg may people speaking language forum", "d": "1/2016"}, {"body": "going explain evan close post nt explaining problem see contributor guidelines scott", "d": "1/2016"}, {"body": "\u8fd8\u662f", "d": "1/2016"}, {"body": "cry \u4e2a\u4eba\u89c9\u5f97\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u4e0a\u7684\u95ee\u9898\u7528\u4e0d\u7740\u5f00issue\u5427 \u5728qq\u7fa4\u6216\u8005 gitter\u91cc\u95ee\u4e00\u4e0b", "d": "1/2016"}, {"body": "\u62b1\u6b49\u6ca1\u6709\u4f7f\u7528 qq \u7fa4\u6216\u8005 gitter jan lipan notifications githubcom wrote \u4e2a\u4eba\u89c9\u5f97\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u4e0a\u7684\u95ee\u9898\u7528\u4e0d\u7740\u5f00issue\u5427 \u5728qq\u7fa4\u6216\u8005 gitter\u91cc\u95ee\u4e00\u4e0b datakey reply email directly view github", "d": "1/2016"}, {"body": "\u8fd9\u91cc\u662f\u53d1bug\u548cfeature", "d": "1/2016"}, {"body": "js var sortable sortablecreate documentgetelementbyid list onend function e var tmp vmarr eoldindex vmarr eoldindex vmarr enewindex vmarr enewindex tmp consolelog vmarr", "d": "1/2016"}, {"body": "lrdbzs many others would glad help could potentially translate lines english hard also know community forum dedicated sections chinese japanese sorry familiar characters differentiate speaking members \u4e2d\u6587 chinese user forum \u65e5\u672c\u8a9e japanese user forum otherwise hope someone else assist", "d": "1/2016"}, {"body": "lrdbzs \u53d6\u53cd\u5c31\u597d\u4e86\u5427", "d": "1/2016"}, {"body": "\u4f4e\u7ea7\u95ee\u9898\u4e0d\u8981\u63d0 \u5173\u6389\u5427", "d": "1/2016"}, {"body": "xiaolongyuan \u8fd9\u4e2a issue vif \u7684\u65f6\u5019\u4e0d\u7ba1 vif bug", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u662f\u7684 \u4ed4\u7ec6\u4e00\u770b \u8fd9\u4e2a\u8fd8\u771f\u662f\u633a\u86cb\u75bc\u7684 lrdbzs sorry \u6ca1\u6709\u4ed4\u7ec6\u770b hack \u4e00\u4e0b \u66ff\u6362\u7684\u5185\u5bb9 \u9ed8\u8ba4\u663e\u793a\u503c \u5f53\u7136 \u5982\u679c\u4f7f\u7528\u5230\u5230\u7ec4\u4ef6\u4f5c\u7528\u57df\u90a3\u4f1a\u5f88\u86cb\u75bc \u8ba4\u771f\u770b\u4e0b \u6211\u5f00\u59cb\u4e5f\u5927\u610f\u4e86 \u66ff\u6362\u7684\u5185\u5bb9 \u5185\u5bb9\u53d8\u6210\u4e86 \u66ff\u6362\u7684\u5185\u5bb9", "d": "1/2016"}, {"body": "xiaolongyuan", "d": "1/2016"}, {"body": "moved", "d": "1/2016"}, {"body": "link page nt work anymore", "d": "6/2018"}, {"body": "please post repo instead", "d": "1/2016"}, {"body": "understood copied", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "mon jan evan notifications githubcom wrote reply email directly view github \u8ffd\u968f", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "see", "d": "1/2016"}, {"body": "unfortunately consistent every element array plain string expression", "d": "1/2016"}, {"body": "thanks evan prompt reply thinking creating component list get value different source either primitive array use index array object unique property value eg uid reused different cases make sense though thanks much advice", "d": "1/2016"}, {"body": "outside component instance js vue require vue wrong gt consolelog vueoptionscomponents moduleexports ready function right gt consolelog vueoptionscomponents", "d": "1/2016"}, {"body": "like posva said likely due module import order", "d": "1/2016"}, {"body": "thanks nt know ready function", "d": "1/2016"}, {"body": "either twig vue change delimiters please twig vue scott", "d": "1/2016"}, {"body": "oh better use forum gitter room questions issues github bugs suggestions scott", "d": "1/2016"}, {"body": "thanks scott", "d": "1/2016"}, {"body": "also use twig tag wrapped around blocks nt want twig interpret", "d": "11/2016"}, {"body": "ios", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u8bf7\u7ed9\u91cd\u73b0", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "\u5168\u90e8\u7684\u4ee3\u7801\u6211\u6ca1\u6709\u65f6\u95f4\u770b \u8bf7\u81ea\u5df1\u82b1\u70b9\u65f6\u95f4\u7f29\u5c0f\u95ee\u9898\u8303\u56f4", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "ios\u8bbe\u5907\u7528\u6570\u636e\u7ebf\u63a5os x \u5f00safari\u8c03\u8bd5\u6a21\u5f0f \u53ef\u4ee5\u8bd5\u8bd5", "d": "1/2016"}, {"body": "closing inactivity", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "please use issues questions stated contribution guide", "d": "1/2016"}, {"body": "sorry already try forum chat pretty hard feedback body knows much vue take decition ask see got pretty fast feedback", "d": "1/2016"}, {"body": "could try stackoverflow tagged vuejs next time get quite fast feedback", "d": "1/2016"}, {"body": "post something chat body something say", "d": "1/2016"}, {"body": "nobody answers means people either online busy question generic nt justify opening issue explicitly stated rules sat jan pm frank sepulveda notifications githubcom wrote post something chat body something say reply email directly view github", "d": "1/2016"}, {"body": "wrong ask help", "d": "1/2016"}, {"body": "socieboy email email email", "d": "1/2016"}, {"body": "use issues track bugs features people using q amp brings unwanted noise system significantly distracts sat jan pm suhaotian notifications githubcom wrote socieboy image email image email image email reply email directly view github", "d": "1/2016"}, {"body": "unfortunately html works similar used recommendation let users compose lowlevel dom like instead let component take data props render options inside component", "d": "1/2016"}, {"body": "would fixing reason try make markdown editor want work like regular textarea like none single page app current markdown code would passed within textarea interest making component usable possible slot best option since passing prop case would require person using format text component unformat text could easily lead issues agree thoughts things like tables actually textarea may point makes sense could thought something like way text area need slot tags within textarea push content slot right textarea normally love vue soon seen work cried lol", "d": "1/2016"}, {"body": "discovered way achieve could cleaned works although probably better", "d": "1/2016"}, {"body": "jordanramstad trying achieve result textarea markdown editor yet solution nt work anymore vue searching ages result noted nt work way go would create custom prop update following snippet seems work get default text tags used view template vue", "d": "11/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "thanks suggestion definitely useful however concern rendered dom structure would different template structure use case bit narrow new core directive necessary nt control app element page", "d": "1/2016"}, {"body": "rendered dom structure would different template structure use case bit narrow new core directive necessary nt control zindex app element page true edge case seems perfect way solve eg bootstrap solution way modal lifecycle inherit parent context aware ng solution little cumbersome providing ways may api extending feature", "d": "1/2016"}, {"body": "yeah definitely extendable think thing preventing internal array since exposed already", "d": "1/2016"}, {"body": "everything need implement third party directive close feel free share add awesomevue", "d": "1/2016"}, {"body": "great thanks", "d": "1/2016"}, {"body": "transfer dom like", "d": "11/2016"}, {"body": "setting value contained value copied referenced work change object reference change like behaviour nothing vue rule set javascript values set object array gt reference dynamic primitives string boolean number gt copy onetime", "d": "1/2016"}, {"body": "ok got thx", "d": "1/2016"}, {"body": "hi saw note interface documentation see description api think reason dom element", "d": "1/2016"}, {"body": "\u987a\u4fbf\u6211\u4e5f\u95ee\u4e2a\u95ee\u9898 var mixinsrequire componentsmixins var app new vue mixins mixins el body replace false template components app require componentspartialheadvue components asyn \u5982\u679c\u5728 headvue", "d": "1/2016"}, {"body": "hi yes could parent giving slots element parent child least theory work slots occupied granted vif satisfied tried dynamic component would need programmatic access component structure add replace components related issue programmatic access slots", "d": "1/2016"}, {"body": "saviilsy idea directives respected terminal directives like normal ones like copied onto inserted elements mitigated programatic access slots wrap additional element work properly anygong question seems unrelated original issue please use forum instead", "d": "1/2016"}, {"body": "please use gitter forum questions issues bugs feature discussions", "d": "1/2016"}, {"body": "global components registered via global method way defining makes local components root instance", "d": "1/2016"}, {"body": "ah mistake thanks", "d": "1/2016"}, {"body": "\u5efa\u8bae\u5728\u751f\u4ea7\u4e2d\u7528 class\u4ee3\u66ff style \u5199\u51e0\u4e2a\u72b6\u6001\u7c7b \u4f7f\u7528\u5185\u8054\u6837\u5f0f\u6709\u5f88\u591a\u5c40\u9650\u6027 \u7ef4\u62a4\u4e5f\u4f1a\u53d8\u5f97\u56f0\u96be", "d": "1/2016"}, {"body": "dafrok", "d": "1/2016"}, {"body": "shawushe", "d": "1/2016"}, {"body": "\u4f46\u662f\u7528autoprefixer\u63d2\u4ef6", "d": "1/2016"}, {"body": "style wed jan pm shawushe notifications githubcom wrote \u4f46\u662f\u7528autoprefixer\u63d2\u4ef6 reply email directly view github", "d": "1/2016"}, {"body": "autoprefixer\u662f\u5f00\u53d1\u73af\u5883\u63d2\u4ef6 \u800cvue\u7684runtime\u662f\u5ba2\u6237\u7aef autoprefixer\u901a\u8fc7\u914d\u7f6e\u9879\u5168\u8303\u56f4\u5730cover\u4e00\u5b9a\u6bd4\u4f8b\u7684\u6d4f\u89c8\u5668 \u800c\u4e0d\u662f\u68c0\u6d4b\u4f60\u4f7f\u7528\u7684\u662f\u4ec0\u4e48\u6d4f\u89c8\u5668", "d": "1/2016"}, {"body": "\u8c22\u8c22 \u6211\u8bd5\u8bd5\u522b\u7684", "d": "1/2016"}, {"body": "dafrok\u89e3\u91ca\u7684\u5f88\u6e05\u695a thx", "d": "1/2016"}, {"body": "vbind class\u4e5f\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5382\u5546\u524d\u7f00\u4e48", "d": "6/2016"}, {"body": "write simple helper use objectassign option accept array array contain components explicit field", "d": "1/2016"}, {"body": "thanks", "d": "1/2016"}, {"body": "could give example mean accepting array nt see mention usage arrays anywhere docs components", "d": "1/2016"}, {"body": "ah nevermind see mean javascript const foo vueextend name foo const example new vue components foo", "d": "1/2016"}, {"body": "please see", "d": "1/2016"}, {"body": "need primitive values vue track identity objects automatically primitive values need give permission update place instead fresh redraw", "d": "1/2016"}, {"body": "native bridge complex scope unlikely work alone closest thing know alibaba amazon china working project called weex uses vue component syntax render native components open source yet plan later year", "d": "1/2016"}, {"body": "would advantage bridge scott", "d": "1/2016"}, {"body": "smolinari native performance advantage", "d": "1/2016"}, {"body": "could understand vuenative would totally cool sounds like weex might kind project probably anyway ask anyway smile please make point announce everywhere weex go open source way follow project status scott", "d": "1/2016"}, {"body": "project called weex uses vue component syntax render native components vue syntax without vue actually working vue mean using vue source mimic syntax", "d": "1/2016"}, {"body": "yerkopalma currently full vue use part vue source code talking future collaboration", "d": "1/2016"}, {"body": "awesome matter time vue native around", "d": "1/2016"}, {"body": "announcing selftracking scott", "d": "1/2016"}, {"body": "smolinari definitely announce time early say", "d": "1/2016"}, {"body": "super thanks scott", "d": "1/2016"}, {"body": "thanks evan great news hopefully happens soon jan evan notifications githubcom wrote native bridge complex scope unlikely work alone closest thing know alibaba amazon china working project called weex uses vue component syntax render native components open source yet plan later year reply email directly view github", "d": "1/2016"}, {"body": "would happy continues tighten scope especially useful native drawer menues route vue maybe integrating native views top vue performance really needed performance vue mobile client already really good tried reactnative find little overkill", "d": "4/2016"}, {"body": "eljefedelrodeodeljefe weex coming", "d": "4/2016"}, {"body": "qusiba thx link", "d": "4/2016"}, {"body": "qusiba signed nothing happened long wait get access scott", "d": "4/2016"}, {"body": "smolinari thx signing member team invite private github permission soon", "d": "4/2016"}, {"body": "jinjiang define soon bit better talking days weeks months smile scott", "d": "4/2016"}, {"body": "jinjiang subscribed mailing list could access smile", "d": "4/2016"}, {"body": "jinjiang please", "d": "4/2016"}, {"body": "smolinari days", "d": "4/2016"}, {"body": "jinjiang could add private beta please thanks", "d": "4/2016"}, {"body": "jpokrzyk simply sign newsletter scott", "d": "4/2016"}, {"body": "done jpokrzyk smolinari", "d": "4/2016"}, {"body": "jinjiang gents alibaba helping evan vue really cool stuff smile edit looking docs cool weex also open source released please please please say yes smile scott", "d": "4/2016"}, {"body": "weex public maybe end june keep watching", "d": "4/2016"}, {"body": "jinjiang going assume public also means open sourced applaud clap smile scott", "d": "4/2016"}, {"body": "jinjiang dumb question nt put native headline copy framework building native mobile crossplatform ui thanks ferry", "d": "4/2016"}, {"body": "also could nt find word vue anywhere first thing searching word vue opened page thought maybe nt use vuejs source style evan post vuejs thinking weex give credit vue page", "d": "4/2016"}, {"body": "look code examples uses vue extensively smile scott", "d": "4/2016"}, {"body": "yes even branch vue think talking weex site reference vue think site really provisory dramatically changed weex get published hope includes vuejs references", "d": "4/2016"}, {"body": "repo related", "d": "10/2016"}, {"body": "right repo weex scott", "d": "10/2016"}, {"body": "yes pretty sure vuepowered weex work seems happening repo mentioned", "d": "10/2016"}, {"body": "great stuff finally alternative react native ionic huge vuejs community", "d": "10/2016"}, {"body": "also like bring attention quasar framework someone already mentioned created ios android apps framework also porting vue speak nt pure native bridge framework pretty good nonetheless scott", "d": "10/2016"}, {"body": "onsen ui vuejs like react native", "d": "11/2016"}, {"body": "would great nativescript support vue added vote vue support nativescript ideas site ideas idea vue look idea called vuejs support nativescript add vote votes time writing", "d": "12/2016"}, {"body": "adding said also github issue concerning nativescriptnativescript wherein valentinstoychev among things said following want encourage someone good knowledge internals vuejs get touch us help guidance development enable vuejs nativescript great experience us work together comment", "d": "2/2017"}, {"body": "hi evan guys nativescript looking help implementing vue nativescript ca nt think anyone better", "d": "3/2017"}, {"body": "weex project moved apache software foundation sure means project", "d": "3/2017"}, {"body": "nt know guys already aware seems stuff happening regards vue nativescript implementation started communityled initiative port nativescript vuejs take look community slack vue channel initial steps taken igor need prs lots help please join us comment", "d": "5/2017"}, {"body": "came across interesting tweet though sure means max lynch ionic regards support vuejs frameworks", "d": "5/2017"}, {"body": "cool ionic actually native ionic emulates native app ui guidelines uses native sdks bringing ui standards device features native apps together full power flexibility open web ionic uses cordova phonegap deploy natively runs browser progressive web app still awesome ionic supports vue though edit okay neither ionic nativescript reactnative weex really native hybrid approaches seems issue least originally native rendering like reactnative", "d": "5/2017"}, {"body": "nesbocaj one draws ionic support progressive web apps interesting discussion pwa", "d": "5/2017"}, {"body": "guys getting familiar vuejs requirements arise mobile development maintain single code base much possible support ios android platform app must also support push notifications know thread almost year old choices please help", "d": "5/2017"}, {"body": "codelabstudios quasar framework", "d": "5/2017"}, {"body": "yes exploring quasar framework awesome", "d": "6/2017"}, {"body": "using quasar latest project lead developer committed project actively involved projects community worth mentioning next version days away many new features", "d": "6/2017"}, {"body": "desktop apps electron works great native mobile apps im still sure use weex nativescript ionic quasar vuecordova edit ok weex looks promising managed install download adb android studio npm install g weextoolkit weex create myapp cd myapp weex platform add android npm install weex run android", "d": "8/2017"}, {"body": "weex framework building native mobile crossplatform uis moreover evan help weex already supported vuejs one frontend frameworks words use vuejs syntax develop native apps based weex steffanhalv good try great vuejs features still available weex platform except web platformbased features like weex project moved apache software foundation asf latest resources weex official website repo mirror apache weex mailing list", "d": "8/2017"}, {"body": "weex horrible documentation broken english", "d": "9/2017"}, {"body": "weex open source project help clean documentation", "d": "9/2017"}, {"body": "weex like reactnative doesnt render webview create real native app like react native", "d": "1/2018"}, {"body": "weex looks well built hard get support looks nice little bit behind vs weex support use many existing nativescript plugins", "d": "1/2018"}, {"body": "like said weex framework building native mobile crossplatform uis moreover evan help weex already supported vuejs one frontend frameworks words use vuejs syntax develop native apps based weex", "d": "1/2018"}, {"body": "native app webview app like react native", "d": "2/2018"}, {"body": "guys forget mobile app development solution uses js lot experience cordova reactnative even recently made app ios using vue result pretty unreliable piece garbage really must using common language use xamarin otherwise go kotlin android swift ios", "d": "2/2018"}, {"body": "agree today think pwa recommended want hibrid app hibrid go kotlin swift", "d": "2/2018"}, {"body": "weex based webview rendered native components mobile however weex also downgraded web render pages webview", "d": "2/2018"}, {"body": "thanks say see compatibility lol ca nt complete hybrid app pwa actually", "d": "2/2018"}, {"body": "one says pwa native hybrid", "d": "2/2018"}, {"body": "another resource says soon weex", "d": "2/2018"}, {"body": "nativescriptvue looks amazing", "d": "2/2018"}, {"body": "watched promo live webinar nativescriptvue looks amazingly promising let keep rolling", "d": "4/2018"}, {"body": "unofficial nt endorsed vue team give full disclaimer coauthored clean fast stable truly native transpiles react native", "d": "6/2018"}, {"body": "sanketsahusoft compiling react native feels kinda dirty would rather prefer nativescriptvue compiling native code without need involve react middleman", "d": "6/2018"}, {"body": "andrewbogdanovtss yeah may sound dirty nativescriptvue exact thing instead using react native bridge using nativescript bridge though also boils personal choice writing styling", "d": "6/2018"}, {"body": "tried change delimiter vueconfigdelimiters", "d": "1/2016"}, {"body": "seems onsenui compiles page asynchronously called page nt finished upgrading custom elements yet called say works properly probably work onsenui provides hook know finished compilation however really vuejs problem closing issue", "d": "1/2016"}, {"body": "thanks reply", "d": "1/2016"}, {"body": "sorry please ask type questions forum issues bugs core feature requests", "d": "1/2016"}, {"body": "link forum opps see already went nevermind smile scott", "d": "1/2016"}, {"body": "well valid javascript keypath need make", "d": "1/2016"}, {"body": "good idea another shorthand like allow skip value like object shorthand", "d": "3/2016"}, {"body": "sjoerdvisscher convinced one handy makes template less readable think vuejs excels readability actually really like sexy dancer want people discuss", "d": "3/2016"}, {"body": "janschoenherr ca nt achieved custom directive", "d": "3/2016"}, {"body": "possible back day calendar", "d": "5/2016"}, {"body": "feature useful component created programmatically number props possible like wrong solution vue warns works propsdata may initializer function component definishion data also dynamic component may operate already initialized unmounted instance create jsfilddle detailed explanation", "d": "7/2016"}, {"body": "would useful especially kind cms relevant components would sent json asynchronically whole composite tree would built runtime dynamic components", "d": "7/2016"}, {"body": "spent time confused docs seem indicate work already used without argument used bind object containing attribute namevalue pairs note mode class style support array objects works elements components demo would great implemented docs updated use case beyond writing less code writing reusable function use unit tests currently write individual mount function every single component lack functionality", "d": "8/2016"}, {"body": "vue thanks vdom render function pretty trivial write proxy component accomplish got idea terrydai solution javascript vuecomponent componentproxy props name type string required true props type object default gt render createelem return createelem thisname attrs thisprops complete working example", "d": "9/2016"}, {"body": "believe current behavior unless attributes referring dom attributes vue props sure case", "d": "10/2016"}, {"body": "feature helpful porting react components vue", "d": "10/2016"}, {"body": "feature works vue latest today even documented see fiddle try changing library top html code ca nt switch vue today backward compatibility primary vmodel support dynamic input types error many dynamic components need feature thanks", "d": "11/2016"}, {"body": "straps code issue helps", "d": "11/2016"}, {"body": "thought try hand fixing vue looks like directive code executed props values populated loss chance seeing vue think current behavior considered bug documentation states possible", "d": "1/2017"}, {"body": "jacobmischka documentation said elements components feature request valid vue well cc posva", "d": "2/2017"}, {"body": "callumacrae works vue always better make explicit use kind proxy component using render", "d": "2/2017"}, {"body": "weird could nt get work test edit testing wrong version vue ignore", "d": "2/2017"}, {"body": "receive object props components define type props object like props profile type object default function return see complete example", "d": "4/2017"}, {"body": "returns undefined returns object literal parser nt interpret two braces object literal block statement", "d": "12/2017"}, {"body": "maybe help", "d": "12/2017"}, {"body": "passing object directly vbind might readable using object shorthand make look nice imo instead", "d": "2/2018"}, {"body": "jasonlfunk using issues ie missing ie package something happening browser seems odd get browser specific vue error like update false alarm found bind declaration php file vuejs file built go different less clean way", "d": "4/2018"}, {"body": "passing triple handlebars svg element actual markup string fixed", "d": "1/2016"}, {"body": "thank much", "d": "1/2016"}, {"body": "vue uses property detect possible transitions giving element transition duration specifying property transition transition actually going leaving transition hangs waiting something happen proper transition", "d": "1/2016"}, {"body": "provide transition classes want entrance transition found omit still get duped items reason mentioned seems work fiddle correct way", "d": "1/2016"}, {"body": "override", "d": "1/2016"}, {"body": "thanks help", "d": "1/2016"}, {"body": "playing around today work safari multiple animated properties using get duplicated items happens safari chrome firefox try fiddle safari possible meantime stick seems work fine", "d": "1/2016"}, {"body": "\u7528 loop \u6216\u8005 foreach", "d": "1/2016"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue \u53ea\u63a5\u53d7 bug \u6216\u8005 feature request", "d": "1/2016"}, {"body": "please nt use issues ask type questions specific questions debugging normal js source maps", "d": "1/2016"}, {"body": "bind literal works expected", "d": "1/2016"}, {"body": "okay confused things vuejs nt alter values get posted form submitted docs seem indicate works binding data property name literal value okay attempt modify documentation make clearer works literals property names also could mention vuejs nt change actually gets submitted serialized form easy workaround add hidden field checkbox like new vuejs want make sure understand works properly mucking around docs thanks quick reply wonderful framework also listening recent podcast interviews really appreciate actually familiar frameworks speak tradeoffs one instead usual mine bestest everything else sucks schtick many people seem exhibit", "d": "1/2016"}, {"body": "seems still issue usually checkboxes dont send data empty serialized send run example check checkbox requred pass actually value even jordanlev tbh nt understand workaround hidden input", "d": "6/2018"}, {"body": "jossnaz seeing false value sent part actual submitted form data browser mean json data serialized vue component workaround hidden input opposite situation describe want browser send false value form data checkbox unchecked wanting value sent use technique", "d": "6/2018"}, {"body": "vue templates valid nt support self closing tags form", "d": "1/2016"}, {"body": "got thanks response ian evan notifications githubcom wrote vue templates valid nt support self closing tags reply email directly view github", "d": "1/2016"}, {"body": "value string instead number probably work even string next release add force value number", "d": "1/2016"}, {"body": "listens native dom events fires jquery events native events known issue really problem firing native events call method custom directive", "d": "1/2016"}, {"body": "inform would trying figure long way trigger native change", "d": "1/2016"}, {"body": "scott", "d": "1/2016"}, {"body": "brianvoe hi change event method component like", "d": "12/2017"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue \u95ee\u8fd9\u7c7b\u95ee\u9898 getter setter", "d": "1/2016"}, {"body": "work perfectly new commit built personally still fails embedded vif block issue", "d": "1/2016"}, {"body": "thx", "d": "1/2016"}, {"body": "place kind question", "d": "12/2015"}, {"body": "zchking please us vue community forum stackoverflow types questions issues section within github reporting potential bugs providing feedback enhance project", "d": "12/2015"}, {"body": "looks like new year countdown needs urgently happy new year make sure read contribution notes new year trollface", "d": "12/2015"}, {"body": "thanks happy new year", "d": "1/2016"}, {"body": "azamatsharapov hero", "d": "1/2016"}, {"body": "prefixed properties reserved vue internal properties available direct binding bind", "d": "12/2015"}, {"body": "thanks evan explanation dec evan notifications githubcom wrote prefixed properties reserved vue internal properties available direct binding bind datamessage reply email directly view github", "d": "12/2015"}, {"body": "using vue best naming strategy private variable name computed props example prop called passed avoid mutation define variable datacomputed prop however best name came advices naming strategy circumstance", "d": "10/2016"}, {"body": "somewhere documented noticed properties suddenly trying use underscore names privates typescript sure nt using privates html side", "d": "4/2017"}, {"body": "api docs", "d": "4/2017"}, {"body": "thx found reference properties start proxied vue instance may conflict vue internal properties api methods access vm dataproperty", "d": "4/2017"}, {"body": "sorry necro feel like better explanation error message thrown know happening spent hours today minutes duck debugging colleague find nt taking data view", "d": "6/2017"}, {"body": "necro totally agree understand reason error message pretty unclear", "d": "10/2017"}, {"body": "please open feature request better error message see previous messages thread closed issues good place continue conversations", "d": "10/2017"}, {"body": "done api rest consume returns properties", "d": "3/2018"}, {"body": "done api rest consume returns properties access using", "d": "3/2018"}, {"body": "specifically want reuse vuex getter another getter first one child object name embedded access spear get error", "d": "3/2018"}, {"body": "guys linusborg said", "d": "3/2018"}, {"body": "see browser console", "d": "12/2015"}, {"body": "define css rules classes", "d": "12/2015"}, {"body": "defined class enter leave example add enter leave class use css animations like", "d": "12/2015"}, {"body": "pespantelis compare", "d": "12/2015"}, {"body": "vue tell whether want transition end event event added ability manually specify transition type let vue know end transition css animation finishes next patch want use build dev branch", "d": "12/2015"}, {"body": "ok see thank much made crazy", "d": "1/2016"}, {"body": "gitter", "d": "12/2015"}, {"body": "could provide jsfiddle also stand", "d": "12/2015"}, {"body": "intended slot content considered parent thus styled parent", "d": "12/2015"}, {"body": "actually might better way handle let move", "d": "12/2015"}, {"body": "think misunderstood vue reactivity works object blackbox complex internal state plain data object vue guarantee observe see", "d": "12/2015"}, {"body": "vue \u7684\u6a21\u677f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u72b6\u6001\u5230 dom vue \u7684\u6a21\u677f\u672c\u8eab\u63d0\u4f9b\u7684\u903b\u8f91\u539f\u8bed\u6bd4\u5982 \u548c slots \u548c", "d": "12/2015"}, {"body": "", "d": "1/2017"}, {"body": "detect nested value changes inside objects enable option", "d": "12/2015"}, {"body": "reproduce please provide reproduction", "d": "12/2015"}, {"body": "anygong \u628a\u53c2\u6570\u91cc\u7684\u53cc\u5f15\u53f7\u6362\u6210\u5355\u5f15\u53f7", "d": "12/2015"}, {"body": "closing inactivity", "d": "1/2016"}, {"body": "nt always guarantee reflow example firefox prefer explicitly forcing reflows", "d": "12/2015"}, {"body": "trying accomplish sure vuejs run nodejs server need something like jsdom emulate nt know trying", "d": "12/2015"}, {"body": "please ask questions gitter forum regarding question vue currently needs jsdom render things node", "d": "12/2015"}, {"body": "note fix parent class overwrite child class always sets entire class want preserve child class still use instead", "d": "12/2015"}, {"body": "think put description issue title worried", "d": "12/2015"}, {"body": "copy pasted console warning provide repro ad show interest creating issue otherwise get ignored", "d": "12/2015"}, {"body": "closed skull", "d": "12/2015"}, {"body": "please specific issue closing descriptions provided", "d": "12/2015"}, {"body": "sorry nt think clearly whether vue issue wrong way created issue put aside lately forgot totally", "d": "12/2015"}, {"body": "ping", "d": "12/2015"}, {"body": "fenivana looked vuestrap scott", "d": "12/2015"}, {"body": "smolinari said bootstrap means boot loader entry point appjs rather bootstrap css framework", "d": "12/2015"}, {"body": "doh sorry mentioned anything lol scott", "d": "12/2015"}, {"body": "hi time please check thank much", "d": "2/2016"}, {"body": "could provide example please", "d": "12/2015"}, {"body": "first add date watcher activated twice", "d": "12/2015"}, {"body": "nt think understand yourissue well honest seems watch callback lacks logic original pen shows soon input got focus alert get watch missing logic try simple ghetto solution best one html alert old val old new val new javascript var demo new vue el demo data message null alert old new watch message function newval oldval oldval null thisalert thisalert thisold oldval thisnew newval function datepicker datepicker code pen reference", "d": "12/2015"}, {"body": "work value written inserted manually", "d": "12/2015"}, {"body": "pavelcss silly solution point problem implementing callback", "d": "12/2015"}, {"body": "\u5982\u679c\u7ed9\u52a0\u4e2a\u5c5e\u6027\u6bd4\u5982", "d": "12/2015"}, {"body": "vuejs", "d": "12/2015"}, {"body": "maybe use could provide example fiddle", "d": "12/2015"}, {"body": "zepto html \u56de\u590d js reply function eve pid idx var var iptele evetarget parent find input var remsg ipteleval trim", "d": "12/2015"}, {"body": "thanks pespantelis", "d": "12/2015"}, {"body": "infinite list worry using components influence performance use little bit zepto method code pespantelis", "d": "12/2015"}, {"body": "configured component option maybe future allow configured places", "d": "12/2015"}, {"body": "thanks wrong project could useful example explanation around location options apply component assume applies listed merry christmas", "d": "12/2015"}, {"body": "\u6211\u7684\u6a21\u578b\u5927\u6982\u662f\u8fd9\u6837\u5b50\u7684", "d": "12/2015"}, {"body": "\u600e\u4e48\u5728 save \u65b9\u6cd5\u91cc \u53d6\u51fa\u6240\u6709 images \u91cc\u7684 path", "d": "12/2015"}, {"body": "change parameters callback", "d": "12/2015"}, {"body": "pespantelis thank right", "d": "12/2015"}, {"body": "\u56e0\u4e3a \u88ab\u79fb\u9664\u540e\u7acb\u523b\u4f1a\u540c\u6b65\u8c03\u7528 css \u6216\u8005 \u7b49\u4e00\u5e27\u5c31\u597d\u4e86", "d": "12/2015"}, {"body": "specific mean like function", "d": "12/2015"}, {"body": "closing details provided", "d": "12/2015"}, {"body": "user stackoverflow issue", "d": "12/2015"}, {"body": "\u5df2\u7ecf\u5728 \u770b\u5230\u8fd9\u4e2a\u95ee\u9898\u4e86", "d": "12/2015"}, {"body": "expected object guarantee enumeration order determined js engine use explicit ordering", "d": "12/2015"}, {"body": "interesting behaviour looking forward fix", "d": "12/2015"}, {"body": "interesting nt found sooner good catch scott", "d": "12/2015"}, {"body": "class bindings array syntax", "d": "12/2015"}, {"body": "nice bill thanks solution still binding test nt cause icon inserted twice scott", "d": "12/2015"}, {"body": "smolinari would say judging docs went along two default ways bind classes always assumed interpolation attribute value would nt work without prefixing", "d": "12/2015"}, {"body": "cool pespantelis looks figured issue nice work pantelis scott", "d": "12/2015"}, {"body": "thanks smolinari smiley", "d": "12/2015"}, {"body": "\u8fd9\u91cc\u7684 markdown html", "d": "12/2015"}, {"body": "issue", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "\u9879\u76ee\u80cc\u666f\u662f\u505a\u4e86\u4e00\u4e2acss", "d": "12/2015"}, {"body": "\u90a3\u5c31\u76f4\u63a5\u4f5c\u4e3a\u7ec4\u4ef6\u7684 \u800c\u4e0d\u662f\u7528 \u554a", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "\u56e0\u4e3a \u8bf7\u4e0d\u8981\u7528 issue", "d": "12/2015"}, {"body": "please provide reproduction", "d": "12/2015"}, {"body": "possible force render element component", "d": "12/2015"}, {"body": "possible rather figure really wrong forcing rerender tue dec pm kirk bushell notifications githubcom wrote possible force render element component reply email directly view github", "d": "12/2015"}, {"body": "like well like know indeed update issue feels like sure", "d": "12/2015"}, {"body": "ca nt tell reproduction tue dec pm kirk bushell notifications githubcom wrote like well like know indeed update issue feels like sure reply email directly view github", "d": "12/2015"}, {"body": "let know test need difficult investigation providing thorough report ie force rerender component", "d": "12/2015"}, {"body": "internal api may may future nt want people using insist call vmdigest instance force rerender point vm log state component see reactivity issue forcing rerender nt help much diagnosing problem tue dec pm kirk bushell notifications githubcom wrote let know test need difficult investigation providing thorough report reply email directly view github", "d": "12/2015"}, {"body": "tbh trying make hard people often make wrong assumptions actually causing issue time helpful provide actual code", "d": "12/2015"}, {"body": "oh agree wanted investigate nt aware log perfect investigate using figure hell convert vue something usable demo p", "d": "12/2015"}, {"body": "okay quick test local log shows data applicable instance nt rendering call digest shows expect fastclick appears getting way somewhere vue calls odd click event firing getting right data back parent component data correctly rerendering updating required collection selected exercises anyways setup fiddlebin reproduce", "d": "12/2015"}, {"body": "closing inactivity feel free reopen repro information available", "d": "12/2015"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "12/2015"}, {"body": "boiled probably get fixed recommendations use instead unless good reason use attribute alongside directive", "d": "12/2015"}, {"body": "close nt issue still get looked especially worked previous build", "d": "12/2015"}, {"body": "nt going get answers questions issue software possible bug post otherwise gitter channel forum ask questions sorry runaround going get answer evan anyway might well close issue move question one support areas thanks scott", "d": "12/2015"}, {"body": "nt seem like bug closing please post similar questions forum instead", "d": "12/2015"}, {"body": "ardoramor find solution", "d": "3/2016"}, {"body": "\u6211\u73b0\u5728\u5c31\u5728\u7528\u8fd9\u5757\u505a\u5fae\u4fe1\u7684\u5f00\u53d1 \u5982\u679c\u5fae\u4fe1\u5347\u7ea7\u5230\u6700\u65b0\u7248\u672c\u7684\u8bdd \u5e94\u8be5\u517c\u5bb9\u6027\u90fd\u6ca1\u4ec0\u4e48\u95ee\u9898", "d": "12/2015"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue \u5bf9\u5b89\u5353\u7684\u652f\u6301\u6d4b\u8bd5\u8fc7\u7684\u662f \u4ee5\u4e0b\u4e0d\u80fd\u4fdd\u8bc1 transition", "d": "12/2015"}, {"body": "triggers http request fetch css inserted asynchronous ready called synchronously insertion way works short answer use vueify", "d": "12/2015"}, {"body": "\u4e3a\u4ec0\u4e48\u8981\u5148\u4e8e vif sun dec pm zhonglei qiu notifications githubcom wrote vif \u7684\u4f18\u5148\u7ea7\u662f div vif vif vif \u7684\u6761\u4ef6\u4e3a false \u4e00\u4e2a\u7b80\u5355\u7684 demo reply email directly view github", "d": "12/2015"}, {"body": "\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a loading loading \u8fc7\u7a0b\u4e2d vif \u5f97\u5230\u7684\u662f \u5c31\u53d8\u6210 true loading \u5148\u4e8e vif \u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u7528 \u800c\u4e0d\u662f\u8fd9\u6837 ps \u77e5\u9053 vuerouter \u4e0a\u6709\u4e2a data router", "d": "12/2015"}, {"body": "\u770b\u6765\u53cc\u5411\u7ed1\u5b9a\u4f60\u8fd8\u6ca1\u61c2", "d": "12/2015"}, {"body": "\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u6211\u4f1a\u5728\u6307\u5b9a\u7684 dom", "d": "12/2015"}, {"body": "html loading \u5c55\u793a\u6570\u636e", "d": "12/2015"}, {"body": "\u5728 evan notifications githubcom loading \u5c55\u793a\u6570\u636e reply email directly view github", "d": "12/2015"}, {"body": "\u5728 vue dom loading \u76f8\u5173\u7684\u4e1c\u897f\u505a\u6210\u4e00\u4e2a\u7ec4\u4ef6\u7684 mixin", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "\u5728 evan notifications githubcom \u5728 vue dom vloading loading \u76f8\u5173\u7684\u4e1c\u897f\u505a\u6210\u4e00\u4e2a\u7ec4\u4ef6\u7684 mixin reply email directly view github", "d": "12/2015"}, {"body": "sublime text solarized maybe also hell place kind questions oo", "d": "12/2015"}, {"body": "material theme please nt use issues ask questions", "d": "12/2015"}, {"body": "please use issues ask questions use either gitter forum", "d": "12/2015"}, {"body": "got sorry", "d": "12/2015"}, {"body": "vue reactive data must plain objects treat complex objects reactive data need attach instance set thismap map created hook", "d": "12/2015"}, {"body": "included source control please install npm", "d": "12/2015"}, {"body": "however learned apple stop supporting safari windows", "d": "12/2015"}, {"body": "already", "d": "12/2015"}, {"body": "anyone actually use safari windows nt think even officially distribute anymore dead browser nt really think worth catering", "d": "12/2015"}, {"body": "sure computed properties run update efficient scott", "d": "12/2015"}, {"body": "computed properties track accurate dependencies sure request makes sense", "d": "12/2015"}, {"body": "would useful want refer member string key eg perhaps using loop generate string keys", "d": "6/2018"}, {"body": "wow actually ie fires nonstandard native event button clicked sometimes rendered initially guess avoid using custom event name wondering anything work around nt really good idea moment", "d": "12/2015"}, {"body": "lets manually specify element nodes ignored", "d": "12/2015"}, {"body": "yeah add", "d": "12/2015"}, {"body": "specific expect", "d": "12/2015"}, {"body": "effect actually achieve required filters passed prop using computed properties component", "d": "12/2015"}, {"body": "think confusing useful particular two sources thing big red flag prop passed parent child mess around value derived prop prop computed computed achieve want separated really point mixing", "d": "12/2015"}, {"body": "nt think builtin vue use media query breakpoint detection library together dynamic components achieve", "d": "12/2015"}, {"body": "please see", "d": "12/2015"}, {"body": "damn read docs twice including section still got bitten thanks anyway playing around vue days easy nice angular", "d": "12/2015"}, {"body": "svg works prefer working svgs", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "\u8fd9\u4e2a\u548c vue \u6ca1\u5173\u7cfb filter \u6216\u8005", "d": "12/2015"}, {"body": "thanks", "d": "12/2015"}, {"body": "currently intended behavior refs defined scope sure makes sense define refs surrounding component could lead pretty tricky cases html refsnested nested html case nested array nt really sound useful", "d": "12/2015"}, {"body": "closing since nt seem common use case lack discussion", "d": "1/2016"}, {"body": "problem think let developers decide name vref developer solve conflict vref name let see code situation use refsnested index name situation need add feature make accept variable", "d": "2/2016"}, {"body": "could nt see", "d": "2/2016"}, {"body": "also problem posible syntax like proposed workaround get specific component inside loop", "d": "3/2016"}, {"body": "yerkopalma ensure one kind component inside use use css selector base element", "d": "3/2016"}, {"body": "finally agree case els become complex understand rethinked solution avoid", "d": "3/2016"}, {"body": "agree dynamic vref could really useful example multiple instances component want track one call method unique id assigned component required prop used consumer easily fetch without hunt tree eg built pagination component accepts prop would nice consumer could something like", "d": "4/2016"}, {"body": "sorry nt see example related said", "d": "4/2016"}, {"body": "well probably misunderstood sorry", "d": "4/2016"}, {"body": "noirbizarre resolve end", "d": "7/2017"}, {"body": "frankfang manage fix already exact problem", "d": "8/2017"}, {"body": "mrphilipt use", "d": "8/2017"}, {"body": "frankfang okay able resolve issue using vmodel selector instead vref instance putting something data turns nt really need vref", "d": "8/2017"}, {"body": "example worked around problem edit note component example boolean property controls visibility modal essence example call fetches component array", "d": "4/2018"}, {"body": "cause works similar present inline element first rendered sets initial value changing attribute effect need set corresponding property bit frustrating centralized documentation correspondence html attributesproperties may attributes like need add list", "d": "12/2015"}, {"body": "open drop code console js new set documentbodyinnertextmatch default az wg defaultview defaultplaybackrate defaultmuted defaultchecked defaultvalue defaultselected belongs corresponding attribute yet current list complete", "d": "1/2016"}, {"body": "looks like nt content attribute though property", "d": "1/2016"}, {"body": "initialize every variable data object", "d": "12/2015"}, {"body": "yes case pulling xhr instead seems bit unnecessary since items property also nt one may may set added later", "d": "12/2015"}, {"body": "also think would good differentiate data needed display logic data actually displayed scott", "d": "12/2015"}, {"body": "may wrong adding properties object make work objects added later declare every prop used play around example", "d": "12/2015"}, {"body": "psova correct knew declaring make work vue makes reactive declared directly way described work thing setting data handcoded array fetched xhr still inject properties merely saying common pattern fetching objects later adding observed value helper function make easier users", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "add dummy object every property watched", "d": "12/2015"}, {"body": "posva closer nt complete control data object retrieve handcoding data object constructing clientside take approach ideas modify code add property items would great", "d": "12/2015"}, {"body": "sjoerdvisscher fetch model somehow create upgrade items using hope example clear enough", "d": "12/2015"}, {"body": "posva quite verbose example nt think scott", "d": "12/2015"}, {"body": "smolinari nt think small example lines", "d": "12/2015"}, {"body": "thanks suggestion think somewhat similar proposed exactly wanted explicit possible like add extensions possible native prototypes", "d": "12/2015"}, {"body": "sound promising scott", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "called synchronously similar adding element synchronously page load browser optimize render element directly without triggering transition using proper fix give browser time render initial state adding leave class trigger transition", "d": "12/2015"}, {"body": "reproduction", "d": "12/2015"}, {"body": "probably forgot", "d": "12/2015"}, {"body": "closing inactivity", "d": "12/2015"}, {"body": "works minimal test case need live repro", "d": "12/2015"}, {"body": "got jquery datatables pagination fails javascript insert el target param element el param element target function el target targetparentnodeinsertbefore el target guess jquery plugin removes element dom vue fires anyway problem vue closing", "d": "12/2015"}, {"body": "catch localstorage reactive need something reactive trigger changes basically use object represent login state loginlogout modify localstorage object together initialize object reading localstorage app load see exactly trying", "d": "12/2015"}, {"body": "thanks man article exactly trying", "d": "12/2015"}, {"body": "best place check local storage app initialization see user already logged previous session tutorial referenced line inside startup file vue initialised done something similar recommended", "d": "11/2017"}, {"body": "gebilaoxiong", "d": "12/2015"}, {"body": "gebilaoxiong work well javascript var testvm new vue el ct data name \u6d4b\u8bd5\u4eba\u5458 info age school \u6d4b\u8bd5\u5b66\u6821 frends html infoage", "d": "12/2015"}, {"body": "luckymore", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "luckymore \u6211\u7684\u610f\u601d\u662f\u5728\u4ee3\u7801\u4e2d\u64cd\u4f5c\u5220\u9664age \u660e\u767d\u5417", "d": "12/2015"}, {"body": "vuex \u5c31\u6ca1\u7ee7\u7eed\u8ddf\u8fdb\u4e86", "d": "12/2015"}, {"body": "deep watcher \u624d\u4f1a\u89e6\u53d1 \u4e0b\u4e2a\u7248\u672c\u4e0d\u9700\u8981 deep", "d": "12/2015"}, {"body": "nope ca nt linked parent scope", "d": "12/2015"}, {"body": "saw thatbut access data inside slot anything originally inside tags considered fallback content fallback content compiled child scope displayed hosting element empty content inserted vue data json moduleexports data function return something cool butca nt inside slot even try parent data", "d": "12/2015"}, {"body": "mean example last comment work", "d": "12/2015"}, {"body": "sorry made typo fallback original content", "d": "12/2015"}, {"body": "real example", "d": "12/2015"}, {"body": "expected original content compiled parent scope fallback content compiled child scope original content refers root vm empty data fallback content refers child component data use fallback content", "d": "12/2015"}, {"body": "slot special element", "d": "12/2015"}, {"body": "scott", "d": "12/2015"}, {"body": "part shadow dom specification think one besides standard html elements worry", "d": "12/2015"}, {"body": "ah makes sense take maybe best practice namespace components eg rather maybe guide section components make general recommendation", "d": "12/2015"}, {"body": "used required lifted nice since always avoided conflicts also little annoying guess custom elements specification dropped requirement lazy look haha makes nervous new tag released could make things messy", "d": "12/2015"}, {"body": "indeed good practice namespace fact vue would warn commonly used html elements add list", "d": "12/2015"}, {"body": "actually spec several rules custom element type identifies custom element interface sequence characters must match ncname production must contain hyphenminus character must contain uppercase ascii letters list reserved element names follow rules well", "d": "12/2015"}, {"body": "yeah vue originally followed spec enforced hyphen component names however spec remained draft status still going constant changes lots disagreements within work group vue implementation loosely modeled spec aim spec compliant api stability gt draft spec flux", "d": "12/2015"}, {"body": "list reserved directives", "d": "12/2017"}, {"body": "miss list directives api documentation", "d": "12/2017"}, {"body": "linusborg oh see nt know", "d": "12/2017"}, {"body": "looks like bug windows chrome mouse released outside firing event safari also behavior mac chrome firefox correctly fire event try see way achieve consistent behavior vue also file bugs chrome safari fix behavior", "d": "12/2015"}, {"body": "confirmed indeed chromechromiumwebkit bug fired respectively wontfix vuejs", "d": "12/2015"}, {"body": "well said filter functionmethod like way looks feels readable read pipeline", "d": "12/2015"}, {"body": "function sometimes refers one two functions read write still function nt", "d": "12/2015"}, {"body": "appreciate ideas however please note vue reached status used production many unlikely consider breaking changes without substantial concrete reasons mean syntax preference obviously", "d": "12/2015"}, {"body": "nt suggesting breaking change though understand syntax issues low priority", "d": "12/2015"}, {"body": "mindplaydk special kind function say function side effects filter intended modify data displayed view hand method intended much things like emitting events creating requests change model etc filter never changes model", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "galenyuan", "d": "12/2015"}, {"body": "luckymore", "d": "12/2015"}, {"body": "\u52a0\u4e00\u4e2a saving flag", "d": "12/2015"}, {"body": "\u8fd9\u4e2a\u771f\u662f\u4e2a\u5f88\u795e\u5947\u7684\u95ee\u9898 \u6211\u7814\u7a76\u4e86\u534a\u5929\u53d1\u73b0\u662f \u5728\u770b\u5230 granttype \u7684\u503c\u4e3a form submit \u4e8b\u4ef6 \u5982\u679c\u4f60\u628a granttype \u8fd9\u4e2a\u7edd\u5bf9\u662f \u7684 bug", "d": "12/2015"}, {"body": "ok got", "d": "12/2015"}, {"body": "seems like still fixed", "d": "2/2016"}, {"body": "hi twiknight works nice problem comes css declare element like like hidden expandleave working example", "d": "12/2015"}, {"body": "always define leave transition vue detects element transition duration waiting event want element leave instantly add", "d": "12/2015"}, {"body": "thx commenting", "d": "12/2015"}, {"body": "sure new according vue concept reactivity data initialized front add show items data works scott", "d": "12/2015"}, {"body": "agree smolinari completely sure vue handle internally years experience angularjs tell always avoid using nginit lot reasons makes sense create data inside html", "d": "12/2015"}, {"body": "agree smolinari init data created function datas created eidtor developer vue", "d": "12/2015"}, {"body": "thanks actually solved problem additional init function leslieyq commented still think better vinit directive leave option user already", "d": "12/2015"}, {"body": "point people found bad practice randomly add additional data templates general templates treated like pure function side effects except event handlers component state initialized single place function also makes easier read understand code later leslieyq solution adds nonreactive property called data observation already done always declare properties directly", "d": "12/2015"}, {"body": "would useful forms especially since nt support initial values", "d": "12/2016"}, {"body": "sure think however sure better explain mean nt support initial values scott", "d": "12/2016"}, {"body": "referring first notice red thing documentation refers attribute inputs", "d": "12/2016"}, {"body": "warning saying nt data initialized front vmodel wo nt know show form input fields words data initialized default value assign value property within data option form rendered vmodel also show initial value form fields scott", "d": "12/2016"}, {"body": "hello want option achieve one sample getting bind dom function call vfor error oops data found checkifdeleted axiosget gt return resstatus", "d": "6/2017"}, {"body": "try see", "d": "12/2015"}, {"body": "works thanx", "d": "12/2015"}, {"body": "use dev build nonminified see warning prompts use", "d": "12/2015"}, {"body": "still valid vue work arraypush works find change unshift alters array correctly dom duplicates last element trackby thing work", "d": "1/2017"}, {"body": "rgigger need use attr vue", "d": "1/2017"}, {"body": "hi issue rgigger help array changes correctly duplicates last mycomponent bug something wrong", "d": "12/2017"}, {"body": "using index key default behaviour need use unique identifier eg db id otherwise deletions array reuse components please next time consider using forum discord server stackoverflow questions first feel free come back open issue turns bug", "d": "12/2017"}, {"body": "may problem simple arrays unshift elements change indexes vue renders additional component new element old last element array rest components dont change unshift trigger vue component rerender existing elements", "d": "12/2017"}, {"body": "realized blur handler checking situation maybe check done directly inside listener function realized also blur handler calling debounced version listener nt make much sense debounce blur event opinion think better sync model directly blur event avoid stale data summited clicking submit button right last input field", "d": "12/2015"}, {"body": "debouncing blur handler create different issue explain use case want", "d": "12/2015"}, {"body": "yeah please open separate issue", "d": "12/2015"}, {"body": "need custom filter", "d": "12/2015"}, {"body": "need use item timely thanks", "d": "12/2015"}, {"body": "", "d": "8/2016"}, {"body": "issue belong take look", "d": "12/2015"}, {"body": "lorengreenfield nt think way going creating new vue instance correct ever one instance instances components partials forked example follow suggested parentchild pattern see parent child component parent instance call scope child component parent instance returned record update vue use followed steps reproduce issue able reproduce issue like said way attempting instantiate parentchild relationship incorrect", "d": "12/2015"}, {"body": "wanted use baked component system nt think creating parentchild relationship required works fine event system little surprised prevents transitions working way components extended vue instances nt", "d": "12/2015"}, {"body": "correct component simply syntactic sugar may one root instance certainly something like manage components logical different prevents instantiating child using", "d": "12/2015"}, {"body": "pre used vm addchild create children scroll bottom page instances nt created using vueextend optional changed fine adapt interestingly using transitions old addchild system also issue", "d": "12/2015"}, {"body": "well stand corrected skimmed change logs found release notes instance method vm addchild deprecated instead new option parent introduced usage pretty simple var child parent addchild options var child new vue parent parent suppose need brush vue docs", "d": "12/2015"}, {"body": "working fiddle second child vue instance attribute transitions still work expected", "d": "12/2015"}, {"body": "ok seems key el option parent think call problem solved going rework code little bit makes sense taylorzane thanks help", "d": "12/2015"}, {"body": "interesting proposal technical concerns compilation would happen runtime means include entire transpiler runtime app expression parsing slower maybe could compiletime eg vueloadervueify transpilers would expand simple expressions quite verbose code eg array comprehension coffeescript compile js var cubes num cubes function var len results results len listlength lt len num list resultspush num return results single expression therefore easily passed vue expression parser evaluation possible modify vue expression parser make work going nontrivial", "d": "12/2015"}, {"body": "think compilation compiletime would greatly improve performance nt feel coffeescript slow compile one hundreds evals per second add would also remove need bundle transpiler runtime app could stay devdep fact code transpiles much verbose output certainly hurdle understand output single expression granting one ability use alternate language may worth overhead extending parser look parser source walk call parser start finish fully understand steps would take", "d": "12/2015"}, {"body": "well testing morning realized compiletime may feasible option coffeescript nt know others relies node modules nt available browser transpiling javascript secondary loader may best bet would still modify expression parser handle multiple expression expressions", "d": "12/2015"}, {"body": "coffeescript user would nt use affects performance amount js code written inside htmljade minimal therefore benefit using coffee expression counter amount work needed setup handle dialect really like idea behind think mean lot work little value", "d": "12/2015"}, {"body": "fact code transpiles much verbose output certainly hurdle incorrect coffeescript code starts smaller expands size native js would occupy used cs four years work transpiled output inspector frequently mon dec eduardo san martin morote lt notifications githubcom wrote coffeescript user would nt use affects performance amount js code written inside htmljade minimal therefore benefit using coffee expression counter amount work needed setup handle dialect really like idea behind think mean lot work little value reply email directly view github", "d": "12/2015"}, {"body": "markhahn think evan concerned fact transforming expression coffeescript long javascript function example main issue see expression parser forbids functions among things", "d": "12/2015"}, {"body": "think posva comment pretty much sums take much work marginal gain done way nt affect vue core expression parser works however nt seem case", "d": "1/2016"}, {"body": "browser using works fine chrome", "d": "12/2015"}, {"body": "using chrome osx el capitan", "d": "12/2015"}, {"body": "seems work fine please specific steps necessary reproduce issue expecting actual behavior", "d": "12/2015"}, {"body": "expected input create form become blank submit form actual input becomes empty click click create button try press key everything works except input emptied intended replicating click create new task button fill input characters anything press enter key click create new task button able see input filled last value filled broken unintended repeat steps time click create button click create new task button able see empty input actual expected thanks response clarification needs made please feel free ask", "d": "12/2015"}, {"body": "thank much appreciated", "d": "12/2015"}, {"body": "looked", "d": "12/2015"}, {"body": "azamatsharapov yes really helpful talk vueify unit tests tests way complex source code really think browsing source code helpful think coz source code helpful one would write docs framework", "d": "12/2015"}, {"body": "thetutlage take look set nightwatch inspired", "d": "12/2015"}, {"body": "posva seems interesting nightwatch good option believe test click events using css selectors nightwatch", "d": "12/2015"}, {"body": "yes using css selectors great allows write maintainable tests even elements change", "d": "12/2015"}, {"body": "thetutlage open source framework docs good enough contribute make better tests nt care kind framework using nt understand vue docs unrelated link source code gave helpful believe willing code example using casperjs testing tool look api check options click talking selecting element limited css class use plain js way casperjs least check clicklabel casper docs example idea nightwatch similar casper works selenium casper works phantomjs slimerjs also please ask kind questions forum next time", "d": "12/2015"}, {"body": "opinionated test guidance nice seriously nt take granted ask demanding tone vue provided free nt obligations solve problems technically even problem basically asking free research already got something free could suggested along lines would nice vue provides official guidelines approach testing vueify chose phrase vue owes makes sad maintainer really said testing guide mentioned karma plugins browserify webpack ever occur using browserify plugin karma would allow use tests vuespecific issue period", "d": "12/2015"}, {"body": "seems like angry bird one forced write vuejs respect project always nice open integration options rather rude saying job decided vuejs free know one ever pay respect gain respect", "d": "12/2015"}, {"body": "nitishtyagi wow wow please stay away community behaviour toxic points trying defend nt even make sense read initial comment nt respectful", "d": "12/2015"}, {"body": "nitishtyagi must troll way serious talk respect guy gives one best written pieces code ever seen asks behave decent way ask nicely respect", "d": "12/2015"}, {"body": "agree posva jonagoldman nitishtyagi thetutlage clue oss community effort evan nt let get bothered put together something masterful personally appreciative hard work please keep scott", "d": "12/2015"}, {"body": "yeah troll nt waste time guy contributions", "d": "12/2015"}, {"body": "believe leave issue guys think rude asking let talk testing seriously browsing issues found community diverted towards quoted trolling someone profile great jonagoldman fancy aswell respect hard work maintaining open source easy task requires lot time management lot hard work nice reply even better", "d": "12/2015"}, {"body": "post nt rude thetutlage still nt wanted open positive dialog documentation testing basically left door closed evan noted tone scott", "d": "12/2015"}, {"body": "thetutlage nt get vibe comparing profiles showing nitishtyagi github activity meaning probably fake trolling account anyways better stop discussion contributing nt really belong", "d": "12/2015"}, {"body": "nitishtyagi trollface", "d": "12/2015"}, {"body": "reading comments following work years wanted personally reach give thanks life blood poured project", "d": "12/2015"}, {"body": "thanks everyone made positive responses thread thetutlage trying make simple point want nice answer ask nicely think asked nicely think", "d": "12/2015"}, {"body": "jdavidberger put default option", "d": "12/2015"}, {"body": "simplesmiler wo nt work empty string nt make sense simple fiddle something crop lot situations old handled gracefully", "d": "12/2015"}, {"body": "want bind value want empty string set value empty string current behavior explicit think even evaluates javascript nt think loose necessarily graceful", "d": "12/2015"}, {"body": "know old post seems value null evaluted null expected behavior typeof consolelog returning string example parent node nodelabel export default props value action parentnodes methods updatevalue key value consolelog typeof value value value null let newvalue thisvalue key value consolelog key value emit input newvalue", "d": "2/2017"}, {"body": "seeing related problem since nt apply attribute falsey value attribute ends left option seeing following set model instead default option selected rendering like note vue particular project", "d": "3/2017"}, {"body": "checked indeed work latest version vue appears regression fixed somewhere latest release", "d": "3/2017"}, {"body": "assigned value null evaluate string null parameters net mvc expect null value null solution thanks", "d": "9/2018"}, {"body": "main correct distributed npm source code", "d": "12/2015"}, {"body": "vue csp", "d": "6/2016"}, {"body": "ca nt reproduce please make live demo", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "happens include adds active class element click using array syntax preserves existing classes element consider element add array syntax always false vue knows third class array empty attempt remove active class vue never able render assumes element comparison using object syntax vue knows want toggle class say intended behavior vue part careful using array syntax another library also modifies classes", "d": "12/2015"}, {"body": "would using vuestrap possible alternative scott", "d": "12/2015"}, {"body": "smolinari cool", "d": "12/2015"}, {"body": "yeah found library like oh yeah cool nt cover bootstrap already working version match looks promising scott", "d": "12/2015"}, {"body": "coderzh nt forget vuemdl stuckouttongue", "d": "12/2015"}, {"body": "nice work posva got feature set vuestrap actually interested vuemdl simply different everybody brother using bootstrap scott", "d": "12/2015"}, {"body": "thanks smolinari vuestrap mean feature set affraid wo nt case follow different set features may however add features top", "d": "12/2015"}, {"body": "pretty close featurecomponent set still keep good work keep eye smile scott", "d": "12/2015"}, {"body": "thanks great always looking feedback smile", "d": "12/2015"}, {"body": "use vif slots question", "d": "12/2015"}, {"body": "means two default slots time good use component fragment instance root node attach make sure always give component single root node also please post questions forum", "d": "12/2015"}, {"body": "javascript", "d": "12/2015"}, {"body": "obj x false b true c obj \u7684\u987a\u5e8f\u662f x b c vue data xxx obj obj c b x", "d": "12/2015"}, {"body": "yuhere \u4f60\u5b66\u8fc7js\u5417 cry", "d": "12/2015"}, {"body": "luckymore cry \u4fee\u6539vue\u5173\u4e8eobserverwalk observerprototypewalk function obj var keys objectkeys obj var keyslength thisconvert keys obj keys observerprototypewalk function obj var keys objectkeys obj var \u548c vue \u65e0\u5173", "d": "12/2015"}, {"body": "\u867d\u7136\u786e\u5b9e\u548c vue property enumeration thu dec pm zack notifications githubcom wrote yuhere vue reply email directly view github", "d": "12/2015"}, {"body": "\u4e0d\u5e94\u8be5\u4f9d\u8d56\u5bf9\u8c61\u7684 property enumeration \u4e0d\u8fc7property enumeration \u5982\u679c\u4f60 \u4e0d\u8ba4\u4e3a\u5b83\u662fbug \u6216", "d": "12/2015"}, {"body": "specs property\u539f\u751f\u987a\u5e8f \u4fee\u6539diffzip", "d": "12/2015"}, {"body": "\u8bf7\u53d1 pull request \u4e0d\u8981\u7528\u4e0a\u4f20 fri dec pm yuhere notifications githubcom wrote specs image jasmine property\u539f\u751f\u987a\u5e8f \u4fee\u6539diffzip reply email directly view github", "d": "12/2015"}, {"body": "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5bf9property\u7684\u987a\u5e8f\u6539\u53d8\u662f\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\u7684 \u7684\u4f7f\u7528\u73af\u5883\u4e2d\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684", "d": "12/2015"}, {"body": "decided problem nedd userlist component", "d": "12/2015"}, {"body": "resolved original error nt look right though great make live reproduction", "d": "12/2015"}, {"body": "like", "d": "12/2015"}, {"body": "notice template accesses computed property component", "d": "12/2015"}, {"body": "hm interesting could nt find anything docs either happening put template scope component would item scope basically plain object", "d": "12/2015"}, {"body": "computed properties exposed directly component inside component indeed plain object passed prop yeah component scope basically looks like install vuedevtools inspecting instance makes lot easier understand state", "d": "12/2015"}, {"body": "unfortunately constant spammers spamming wiki disable make pull request share app forum show amp tell section", "d": "12/2015"}, {"body": "point partials scopeless ie evaluated surrounding scope want prop passing use dynamic components", "d": "12/2015"}, {"body": "rpkilby thanks creating issue planning tackling day work got way", "d": "12/2015"}, {"body": "curious could nt done custom twoway filters maybe missing something", "d": "3/2016"}, {"body": "davidkhess indeed seems possible", "d": "3/2016"}, {"body": "davidkhess yes possible issue however adding builtin support problem approach unexpected coming frameworks magic built handle number inputs writing filter handle possible suboptimal compromise envisions like seems adding transforms", "d": "3/2016"}, {"body": "morgul completely understand tend favor less magic", "d": "3/2016"}, {"body": "rpkilby morgul real usecase modifier think exist already number parameter text inputs nt enough", "d": "3/2016"}, {"body": "posva really discussed surprising getting number number input vue way handling directive discussed fact could better implemented transform vue syntax handling sorts issues consistent exact type thing transforms made number one", "d": "3/2016"}, {"body": "posva seems like date transform datedatetime input types would useful however interested able register transforms eg momentjs transform instead potentially built date transform json transform", "d": "4/2016"}, {"body": "rpkilby think two way filters work pretty well guide actually talk maybe explicit example showing docs help nt think modifier needed two way filters already address issue", "d": "4/2016"}, {"body": "posva yes currently guess problem vague want emphasize minor dissatisfactions api dealing various data types thoughts nt really formed anything cohesive boolean values array selection handled magically inputs fair kind necessary number values handled magically inputs require paramater data type requires twoway filter result leaves us given checkbox magical behavior understandable someone would expect number would magical behavior well forgetting add parameter easy source bugs get special treatment anyway replaced filter filters seem like used value transformations request type transformation also nt like idea polluting filter namespace type transformation filters form context nt make much sense least great vue global componentlocal registration nt really issue example edit regardless opinions think would good add section two way filters form docs way handling type conversion also really want reemphasize minor consistencyapi nitpicks vue huge boon existing form bindings work one downside proposal would overlap twoway filters vmodel type transforms apparently like bulleted lists", "d": "4/2016"}, {"body": "rpkilby nice analysis writeup agreed things inconsistent", "d": "4/2016"}, {"body": "rpkilby thanks thoughtful input definitely improve", "d": "4/2016"}, {"body": "new thoughts given deprecation filters outside interpolated text vue", "d": "5/2016"}, {"body": "ditto removing filters seems beg hook vmodel accomplish typevalue transformations", "d": "5/2016"}, {"body": "problem type transformations conversion value back string straightforward eg date transformer programmatically set bound value object way vue know display text input box back similar concepts twoway filters type transformations also definition makes view sync underlying state take use case instead implicit magic conversions let sync user actually inputs underlying value source truth build derived values separately based value example perform transformations need send server persistence use computed properties based bound value need display elsewhere different format", "d": "6/2016"}, {"body": "take use case instead implicit magic conversions let sync user actually inputs underlying value source truth build derived values separately based value preface upon rereading unclear talking removing directive argument applied sort transformation form data stored model numeric inputs simple use cases may sufficient cases preferred however use case fields rare case admittedly got since need perform math operations user input would end significantly computed properties operations code save server would annoying complex merger computed properties underlying data object agree principal let sync user actually inputs however contention user presented field user intention input number vue store number user nt know spec number inputs weird asked number input number fine work somewhere specifying transform two way filter something like nt want define computed properties write code try merge computed properties another object turn json send server feels like inelegant solution compared frameworks use case numeric inputs little pedantic could apply logic values check boxes truefalse vs string values date fields radio buttons etc time large number properties need special handling run problem nt think use computed property scales well lot sanguine felt like clear path forward elegance used rest framework", "d": "6/2016"}, {"body": "morgul still available conversion number string straightforward case arbitrary types eg date", "d": "6/2016"}, {"body": "argument api uses iso format serialize dates clientside data model deserializes date strings native objects application code expects interact objects perform transformations need send server persistence use computed properties based bound value need display elsewhere different format oneoff type transformation fine morgul said problematic scale latest project dealt lot dates lieu type transforms used twoway filters point made switch using momentjs updating filter incredibly simple template changes required still filter dry change readwrite functions contrast using computed properties would painful new date input would require additional boilerplate setting twoway computed prop computed properties nt dry updating would require globally updating computed property probably huge issue practice definitely prone error thoughts type transformations also definition makes view sync underlying state would disagree view representation underlying state type transformation simply transforms unrepresentable type date object something representable date string programmatically set bound value date object way vue know display text input box back similar concepts twoway filters type transformations definitely similar twoway filters however seem like would much simple intentionally minimal api makes sense transforms vmodel directive modifier otherwise complicate template syntax modifier syntax permit additional arguments template would keep transforms simple get input value produce output value similar filters agree vue nt provide builtin transforms except number possible api js vuetypetransform date render value return value valueisoformat parse value return value new date value undefined", "d": "6/2016"}, {"body": "would line coerce functionality component props", "d": "9/2016"}, {"body": "rpkilby opened", "d": "9/2016"}, {"body": "boolean modifier would great", "d": "2/2018"}, {"body": "works perfect indeed boolean modifier would also nice addition", "d": "8/2018"}, {"body": "az wed aug jerry jacobs notifications githubcom wrote works perfect indeed boolean modifier would also nice addition receiving subscribed thread reply email directly view github mute thread", "d": "8/2018"}, {"body": "petersngithub think description lacks details would help lot tell bit andor show example jsbin similar tool one see going case", "d": "12/2015"}, {"body": "somewhat inevitable cell count simply large currently simple way make magically fast two possible ways around rethink ui design really need cells rendered time even make sense pagination need interactivity every single cell scrap write custom directive simply renders table maybe nt using vue render first place", "d": "12/2015"}, {"body": "also interested listing large amounts data reports however real interactivity needed except regular linking would imagine possible without kind performance issues would best practice include large set data vue scott", "d": "12/2015"}, {"body": "smolinari pagination probably reasonable solution performance ux wise real bottleneck many items rendered page time limit reasonable amount might work virtual scroll list renders items viewport future", "d": "12/2015"}, {"body": "pagenation report nt really good usability reports looking would limited maximum maybe rows could columns lot data yes decent reporting system would need show amount maybe need come completely different way show data hmm maybe sort infinite scrolling might answer scott", "d": "12/2015"}, {"body": "nt think web framework handle many cells acceptable rendering performance assuming reactive instead static html yeah dirty work implement infinite scroll virtual scroll", "d": "12/2015"}, {"body": "issue records cost almost render would great way render without data binding make sense", "d": "4/2016"}, {"body": "kennedytedesco records nt sound right assume nested template look like", "d": "4/2016"}, {"body": "sorry mistake happiness problem nt vue", "d": "4/2016"}, {"body": "experiencing issue records sure problem vue described", "d": "5/2016"}, {"body": "hit problem really must show records time simplest solution use divs instead table render time case reduced seconds aprox rows columns cells like said usually best option question whether really painting cells cases showing data justified edge cases need handled care", "d": "8/2017"}, {"body": "also issuei large size data row key value binding ul li ok binding select option slow think select binding large size data common situation find vue way support without databind example", "d": "12/2017"}, {"body": "hi kinanson use value vbind value instead vmodel test element really fast", "d": "12/2017"}, {"body": "fact reali try binding select also slow maybe tray rows", "d": "12/2017"}, {"body": "kinanson try slow ok really slow think browser issues things environnement little bit faster demo gif gave mac", "d": "12/2017"}, {"body": "try", "d": "12/2017"}, {"body": "huge problem needs addressed somehow im using laravel needed infinite scrolling table load rows per batch ive using vue entire project using vfor table quickly noticed couldnt handle large amount rows without slowing entire page also scrolling becomes laggy sticky workaround dynamically create table html insert using vhtml terrible workaround code extremely messy hard work absolutely love using vuejs massive setback need interactivity every single cell scrap vfor write custom directive simply renders table innerhtml nt someone vuejs team written us big deal", "d": "6/2018"}, {"body": "soletiq really need display thousands rows time get much better performance using tables", "d": "6/2018"}, {"body": "works slightly better even rows start notice lag scrolling one else find gigantic issue one build application infinite scrolling like feed posts similar facebook twitter scrolling behavior would feel terrible hundred posts solution found generate html application uses vuejs entirely terrible solution", "d": "6/2018"}, {"body": "soletiq seen", "d": "6/2018"}, {"body": "works slightly better even rows start notice lag scrolling rows nothing thousands div elements penalty performance sure issue somewhere else", "d": "6/2018"}, {"body": "extremely simple table certainly advanced either columns use vif else elements number conversions small logoicon images removing images nt help equally significant problem using vfor scroll bottom load rows takes time batch insert rows table since handle increasing amount rows get hundred rows actually take seconds insert next batch whereas generating html load new rows half time soletiq seen try thank", "d": "6/2018"}, {"body": "could post simplified reproducible use case", "d": "6/2018"}, {"body": "gif scrolling first batch scrolling much smoother gif scrolling batches rows rows look closely scrolling glitchy smooth gets worse load rows also really important mention changing state values extremely slow example click button brings modal simply changes state open false open true takes amount rows table furthermore loading batches takes increasingly longer loading times example loading next batch amount rows takes almost would take maybe changed table elements divs little performance impact im using vue material currently tables code im using vfor still switched datalength instead data stored storing index im retrieving value column im using vueperfectscrollbar scrolling main content done everything think solution terrible solution generating html javascript", "d": "6/2018"}, {"body": "soletiq could post reproducible example", "d": "6/2018"}, {"body": "put usability issue aside tested performance vfor vuejs compared reactjs found vuejs vfor render lines reactjs render lines vuejs takes seconds render reactjs takes seconds render vuejs times slower reactjs worst vuejs testing rendering lines vuejs hang browser chrome kill browser process os however reactjs easily render lines seconds summarize test results number lines vuejs reactjs seconds seconds minutes seconds forever minutes conclusion reactjs capacity vuejs rending large amount data important many application may need render large amount data occasionally amount data within range example data set may never reaches capacity rendering lines within seconds application accommodate lot scenarios without complex solutions actually came issue rendering components primary contains file name adding one complex components vue material design button component rendering unbearably slow optimize component without using advanced component order let renders reasonable time although ultimate solution rendering large amount data may using paging techniques opinion capacity also important capacity like reactjs go lot without reaching limitation platform", "d": "7/2018"}, {"body": "ethandeng vue performance use functional components list", "d": "7/2018"}, {"body": "akryum nt tried could provide code thanks", "d": "7/2018"}, {"body": "experience rendering lists divs experienced noticeable better performance react vue nothing drastic ethandeng mentioning react app definitely feels snappy weird though benchmarks vue usually comes top react", "d": "7/2018"}, {"body": "akryum tested code export default name perftest render h const lines let lt linespush hello world return lines feel improvements performance whole lot", "d": "7/2018"}, {"body": "say measuring performance rows show one screen pointless practical use case need rows rendered time large amount data seconds render time pretty much still unusable using virtual list component ps make sure test production mode", "d": "7/2018"}, {"body": "one use case customer want generate report contains data lines data wait print hand save pdf file using browser email report needs done time app support pagination searching get access data another point capacity mentioned rendering lines simple data pointless time except case framework support rendering complex components without hanging browser another point enterprise apps exposed big data set randomly start project hard predict upper limit data set afford put good design everywhere application", "d": "7/2018"}, {"body": "say measuring performance rows show one screen pointless practical use case need rows rendered time maybe rows case rendering thousands svg nodes screen", "d": "7/2018"}, {"body": "current scenario simply listing files folder web app could files files make sense let view pics desktop app page", "d": "7/2018"}, {"body": "argument nothing react vs vue perf difference nt exist vue react must something wrong setup usage seems make whole conversation pointless either way using virtual scroll component need render items list seem ignored", "d": "7/2018"}, {"body": "thanks links yes nt feel much differences vue react links took second look project seems culprit party ui library introduced app root removing code nt see perf difference good know issue framework thanks", "d": "7/2018"}, {"body": "confirm almost difference two production builds using vuecli createreactapp elements rendered vue react also reason firefox windows vue consistently faster react", "d": "7/2018"}, {"body": "akryum tried curiosity practical seems vue sample never renders result react takes render lines another discovery seems vuejs silently stops effort rendering instead hanging browser react make effort anyway get job done reasonable time minute two console trying render vue", "d": "7/2018"}, {"body": "ethandeng simply reasonable number web framework deal requirement use react fine", "d": "7/2018"}, {"body": "ethandeng also virtual scroller perfect solution use case make app render items almost instantly", "d": "7/2018"}, {"body": "thanks always good know boundary framework also using vue material ui library anyone good guess slows rendering much got chrome debug tool rendering divs recalculate style total time self time elements affected pending ms initiator reveal first invalidated createstyleelement addstylesclientjs parse html total time self time ms range", "d": "7/2018"}, {"body": "ethandeng happy elementui please take look quasar framework see fits needs better wo nt help rendering issue nt really issue might areas going stick elementui much better asking rendering issue likely give answer nt issue rather use case incorrect smile scott", "d": "7/2018"}, {"body": "findings related issue performance difference actually introduced referencing css files indexhtml file either indexhtml imports css files using import js file createstyleelement addstylesclientjs slow rendering quite lot removing references css file vuejs actually shows better performance react vuejs rendering divs seconds better seconds reactjs however since need use vuejs material ui library tested using vuejs render raised buttons using reactjs material ui library rendering raised buttons reactjs material ui library significantly shower rendering divs done within seconds however vuejs material ui library never renders hangs browser know may issue worried may related style loader implemented vue another finding using code cause maximum call stack size exceeded using vfor template export default name perftest render h const lines let lt linespush hello world return lines", "d": "7/2018"}, {"body": "pretty sure css performance completely framework agnostic problem", "d": "7/2018"}, {"body": "\u7528", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "\u90a3\u5f97\u7ed9\u91cd\u73b0", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "\u56e0\u4e3a\u7b49\u4f60\u5c55\u5f00 log", "d": "12/2015"}, {"body": "", "d": "10/2016"}, {"body": "\u8bd5\u8bd5consoledir", "d": "6/2017"}, {"body": "", "d": "8/2017"}, {"body": "", "d": "1/2018"}, {"body": "mutating array returns array vue nt keep old copy intended", "d": "12/2015"}, {"body": "ignore works", "d": "12/2015"}, {"body": "\u6211\u624b\u5934\u6ca1\u6709", "d": "12/2015"}, {"body": "\u4f60\u770b\u4e0b\u628a\u90a3\u4e00\u884c\u7684 \u6539\u6210", "d": "12/2015"}, {"body": "\u7684\u503c\u4e00\u76f4\u90fd\u662f\u90fd\u662ffalse \u53e6\u5916\u7684\u503c\u4e5f\u662ffalse", "d": "12/2015"}, {"body": "\u6539\u6210", "d": "12/2015"}, {"body": "\u6539\u6210", "d": "12/2015"}, {"body": "\u6211\u7528 vue qq \u66f4\u65b0 vue", "d": "12/2015"}, {"body": "trying use native element vue component case nt warning", "d": "12/2015"}, {"body": "trying custom element trixeditor causing warning way ignore escape warning tag set config", "d": "12/2015"}, {"body": "currently builtin mechanism however register empty elementdirective also makes vue skip content inside element", "d": "12/2015"}, {"body": "thanks lot planned use vuejs company wedevscom really cool simpler thing made", "d": "12/2015"}, {"body": "great idea lbineau would nice", "d": "12/2015"}, {"body": "would awesome feature", "d": "12/2015"}, {"body": "thu dec pm stephen young notifications githubcom wrote image would awesome feature reply email directly view github", "d": "12/2015"}, {"body": "something like polymer neon animation", "d": "12/2015"}, {"body": "possible trigger css transition demand time smil style vuecomponent define custom transition component lay inside directive want perform transition inject component method component call transition whenever like finish component publish days time", "d": "12/2015"}, {"body": "twiknight nice idea opinion javascript transition object really powerful feature hook state animation pause etc nt know enough vuejs think big effort implement extension transition order apply property", "d": "12/2015"}, {"body": "lbineau nt need hooks control transition need know animation done listen event possible way return promise", "d": "12/2015"}, {"body": "demo lbineau", "d": "12/2015"}, {"body": "angular similar concept nganimateswap", "d": "12/2015"}, {"body": "hand pretty much simulate demo", "d": "12/2015"}, {"body": "pretty cool simplesmiler shows elegance vue nt scott", "d": "12/2015"}, {"body": "smolinari believe done angular way wink missing piece analogue transitionmode components", "d": "12/2015"}, {"body": "probably vue still much elegant angular scott", "d": "12/2015"}, {"body": "solution mentioned add animation later week", "d": "12/2015"}, {"body": "could gents ladies add works forum scott", "d": "12/2015"}, {"body": "smolinari already added thanks", "d": "12/2015"}, {"body": "vswap changing elements would killer feature similar functionality changing components currentview trigger refresh something like src want trigger animations changing stuff", "d": "3/2016"}, {"body": "needed feature getting around creating simple arrays one item force vuejs transitions solution bit messy something like item every time changes transition used would awesome something simpler bit less hacky item", "d": "3/2016"}, {"body": "one area really miss transitions css class changes would great able assign transitional classes certain css class changes like angular would great help let say building responsive site want hide mobile sidebar transition mobile always visible desktop today use content disappears desktop use pure css transitions apply element yeah would love see ability add transitionclasses css class changes", "d": "3/2016"}, {"body": "transition could play nicely state changes vuex", "d": "4/2016"}, {"body": "quite like many aspects reactmotion solves problem trivial though certainly necessary every app might make sense core library think excellent candidate party maybe even officially supported directive plugin", "d": "5/2016"}, {"body": "would love see something like flip implemented general transition component either core helper library", "d": "5/2016"}, {"body": "nirazul definitely good idea plugin uses flip works great", "d": "5/2016"}, {"body": "amazing chance lands vue day", "d": "5/2016"}, {"body": "fyi already possible using prop html text div swapped transition changed also work simulated using dummy html text trigger transitions manipulating array work case nontrivial replicate exact behavior want avoid introducing conflicting apis given around corner think recommendation using workaround", "d": "6/2016"}, {"body": "small example fiddle sure set transition classes based example", "d": "6/2016"}, {"body": "nirazul familiar animated list plugin looks like may forgotten", "d": "6/2016"}, {"body": "trying animate using vue transitions problem need elements remain dom visibly otherwise flow changes animating set frames slider use vif vshow inactive elements hidden use key frame x automatically addsremoves elements within transition way transition classes applied affect visibility might looking something possible remaining active would good", "d": "2/2017"}, {"body": "still possible ca nt find transition attribute anymore component", "d": "5/2018"}, {"body": "codeofsumit talking list yes possible check doc need class transitiongroup", "d": "5/2018"}, {"body": "maxirozay talking transitioning change list enter leave like text want change background color seconds text changes", "d": "5/2018"}, {"body": "ca nt seem replicate following vue use case similar tonypee scenario particularly need callbacks provided transitions nt want hideshow elements move anyone else luck see property template appears dom vue processing fyi already possible using prop text div swapped transition changed also work", "d": "10/2018"}, {"body": "using csp version", "d": "12/2015"}, {"body": "see need use csp build chrome apps", "d": "12/2015"}, {"body": "thanks", "d": "12/2015"}, {"body": "well first nt sound like good idea would suggest take look vuex cleaner state management solution second simple", "d": "12/2015"}, {"body": "ca nt live within element gets thrown browser police soon dom parsed happens vue anything ca nt anything example situations isattribute", "d": "12/2015"}, {"body": "nirazul said", "d": "12/2015"}, {"body": "easy way attach whatever want hook hook called vue already finished observation phase note vue apiinternal properties start either long property nt use two prefixes totally fine", "d": "12/2015"}, {"body": "using latest version seems properties created within hook still reactive setting workaround", "d": "3/2016"}, {"body": "created private props ca nt track vue nt think reasonable props defined vue data props methods one scope vue define data prefix vue tell ca nt find prop", "d": "1/2017"}, {"body": "still really unclear thisbest practices vue loading stripe js client inside component want accessible anywhere within component nt need available globally though would ok best option following code well numerous variations nt work", "d": "6/2017"}, {"body": "ended getting work sure better way though", "d": "6/2017"}, {"body": "yup basic principle set property later declare initialized vue data note nonreactive data private begin expose vue keep data privately current file module working rely public getters proxy specific private data template requires properties albeit might mean boilerplate question got answer data nonreactive template render reactively data anyway template references data something must seriously consider beforehand especially passing props components since nt reactive anyway one approach using far sort like singletonlocal services lazily instatiated stuff resort property lazily instantiatelookup something store nested private reference vue instance context yet found singletonsglobals simply return value directly via global service locator direferencecontainer something example note plain js easily adopted vanilla js", "d": "8/2017"}, {"body": "glidias simple example want create vuejs component cesium threejs etc need initialize inside component access instance later methods events nt want make viewer instance reactive lowlevel object library want smth like javascript import cesium cesium export default name cesiumviewer data return data created thiscesium new cesiumviewer el methods drawpath points actions thiscesium need way store internal variable cesium instance instance lowlevel need reactive", "d": "9/2017"}, {"body": "usecase identical deshadow lunrjs initialize lunr index object use throughout lifetime component however nt need reactive", "d": "9/2017"}, {"body": "anything wrong using store nonreactive properties long future conflict options vue adds globally looks cleaner declaring inside export default name mydashboard toolbar dashboard lt nonreactive property mounted consolelog optionstoolbar lt use nonreactive property data return reactive data", "d": "12/2017"}, {"body": "nothing wrong really many plugins use well ie vueapollo vuefire etc", "d": "12/2017"}, {"body": "think bigger problem lack clear pattern init proposed using using proposed prograhammer job neither solution explicitly saying non reactive properties instance logic related component lifecycle obviously waiting something happen really mind simply wanting define non reactive instance state also pattern since everyone call properties whatever want otoh using seems hackish exposes vue guts also distinction reactive non reactive state either live level better solution imo would explicit syntax declare non reactive component state personally really like first idea ardoramor using underscores non reactive properties", "d": "1/2018"}, {"body": "well repeat saying nt feel usefulimportant enough worth adding dedicated api neither solution explicitly saying non reactive properties instance anything reactive nt enough everything needs dedicated api react takes extreme everything prop local state little nothing else otoh using options seems hackish exposes vue guts also distinction reactive non reactive state either optionsmystring live level optionsdata optionsmethods nothing reactive options used create component since nonreactive data experience mostly exactly constants options actually find place quite fitting react want provide abstractions use case justfies added technical debt maintaince burden personally nt feel like case better solution imo would explicit syntax declare non reactive component state personally really like first idea ardoramor using underscores non reactive properties data would breaking change definite", "d": "1/2018"}, {"body": "nothing options reactive reactive natural state things javascript justify sticking non reactive component state anywhere non reactive options used create component since nonreactive data experience mostly exactly constants options actually find place quite fitting quite contradictory argue putting component state directly reactive component state live alongside etc instead living directly assume means component state reactive component state either case logical non reactive state would either go inside inside property eg directly would breaking change definite makes sense arguing something need done", "d": "1/2018"}, {"body": "quite contradictory argue putting component state directly options passage quoted explicitly says experience nonreactive state usually constant options sense state wo nt change constant use code talk directly options put dedicated object established pattern many many plugins party components use define config options constants etc pp also flags like functional true inheritattrs false live directly options well nt doubt instances one actual component state mutated reactive eg performance reasons experience edge case deserving api arguing something need done arguing issue seeing severe enough warrant action leads additional api everything needs api things sufficiently solved establishing pattern personally think one cases could add something docs define official pattern deal extending api surface wo nt get vote least agree looking offical pattern switch vuejsorg repo open issue", "d": "1/2018"}, {"body": "sense state wo nt change constant use code state means ok talk directly options put dedicated object yes nt solve problem consistent official pattern solving arguing issue seeing severe enough warrant action leads additionbal api ok", "d": "1/2018"}, {"body": "official way declaring nonreactive state", "d": "1/2018"}, {"body": "given base component possible extendmixin component custom options case instead explicitly like export default name implementation extends base privates objectassign privatesecond override baseprivates", "d": "2/2018"}, {"body": "would really like explicit place nt manually done store nonreactive data use time things like dictionaries used rendered templates never need trigger rerender considering component definitions", "d": "4/2018"}, {"body": "using declare static data vuetify datatable headers used templates change nt need reactive vue typescript declarations changed account theses cases adding additional properties component declaration triggers unkown property error would try nt know exactly theses declarations work yet", "d": "6/2018"}, {"body": "actually possible ams documented", "d": "6/2018"}, {"body": "nt see big problem usage javascript import vuenoreact utilsnoreact export default data return nontrackedvariable null mounted thisnontrackedvariable vuenoreact googlemaporsomethingelse think functionality easily implemented using function nt think necessary include core vue nonreactive state still component data therefore live data component lives people use nt know ways add nonreactive objects way describe thanks allows us keep data good thing way ca nt add reactivity nonreactive objects accident", "d": "7/2018"}, {"body": "clever hack hack using internal api coudl break anytime wo nt recommend nice workaround", "d": "7/2018"}, {"body": "could add official vue plugin would ok imho soon core changes plugin gets update easiest solution least effort could imagine use way gets supported officially considered hack anymore", "d": "7/2018"}, {"body": "probably nt think already working experimental branch official branch use proxies implement reactivity hack official would work branch since wo nt property example", "d": "7/2018"}, {"body": "think clear find solution nonreactive data adding core could lead common practices nt helpful beginners lead big efforts relatively small gains core developers adding plugin tells framework users still relatively uncommon shows best practice use plugin instead add although nt belong psychological implications framework development definitely consider changing approach everyone thinks meant nonreactive data even core developers advocate lead impression framework inconsistencies planning stage something like gets added definitely work best practice core developer vue would like give solutions least effort core developers like plugin solution open question overshadowing variables affects data props static", "d": "7/2018"}, {"body": "linusborg developers assume structureproperties relatively stable future releases assuming vuejs internal probably depended partially could nt find documentationrecent examples used might feel secure weakerthanapi strongerthanconvention approach dedicated property ie reserved documented somewhere added vue typescript declarations etc", "d": "7/2018"}, {"body": "would nt like use something like causes friction usage eg templates elsewhere every time said reusing parts core framework add functionality retrospect would considered hack many nt build trust community think solution would ok still feels hackish", "d": "7/2018"}, {"body": "developers assume structureproperties options relatively stable future releases assuming vuejs internal probably depended partially could nt find documentationrecent examples used part public api documented api docs instantiation options used current vue instance useful want include custom properties options default approach countless plugins using developers define perinstance options plugins like vueapollo vuelidate etc pp", "d": "7/2018"}, {"body": "samuelantonioli example desired official api aminimal implementation official implementatio would use options", "d": "7/2018"}, {"body": "best practice use something like html test optionsstatictest export default static test null mounted optionsstatictest googlemaporsomethingelse yes would love see guides docs framework users know best practice leads trust supported way", "d": "7/2018"}, {"body": "best practice use something like mentioned evan right beginning duscussion people usually add properties", "d": "7/2018"}, {"body": "ok looks good seems would nt hard support nonreactive data vue core plan add core eg called otherwise would write plugin injects global mixin adds support nt problem solution even using although goodlooking dedicated variable imo would like able tell people teach vue best practice", "d": "7/2018"}, {"body": "basically javascript idea plugin pluginsstaticjs function install vue vuemixin beforecreate const static optionsstatic static amp amp typeof static function objectassign staticapply else static amp amp typeof static object objectassign static export default install done think could perfectly added guide would approve best practice", "d": "7/2018"}, {"body": "created plugin published npm adds support see vuestatic npm package use best practice employees thanks much linusborg use case crescentfresh deshadow html import cesium cesium export default name cesiumviewer data return data static return cesium new cesiumviewer el methods drawpath points actions thiscesium think clear easytolearn pattern", "d": "7/2018"}, {"body": "approaches listed dont solve problem using typescript without vueclasscomponent want store timeout handle component instance assigning variable beforecreatedcreated hook doesnt work typescript thinks isnt declared option like non reactive properties core appropriate generic typing would make nonclassstyle components much easier deal typescript one could say use class style components looking pretty sweet background lot hackyish stuff gets done wonder plan fully support class based components without reflecting class something like js class mycomp extends vue constructor super component options expressable via class constructs new mycomp mount app", "d": "8/2018"}, {"body": "let say parent components pass data implicitly children child components implicitly make use parent scope variables later look deeply nested child component uses mysterious property idea inherited parent chain hints template actual composition happens check implementation details every component chain figure one introduced property scope want extract child component reuse makes use inherited properties makes tightly coupled parent components much work refactor everything make reusable give component may get used different context different parents explicit data passing makes individual component decoupled usage context makes easier reason maintain makes component reusable necessary", "d": "12/2015"}, {"body": "first thank response regarding closures could applied well grab closest vue instance yes check component chain brilliant could reference properties vue instance directly example pts z regarding child component expecting x z tightly coupled source structure anyways regardless data got named therefore explicit data passing required part parent collections named differently internal structure x z unusual design scenario could still pass data explicitly winwin would also like note forced abandon templates inject templates jquery actually could get work due syntax wanted pass entire object template could nt figure documentation would awesome worked even better", "d": "12/2015"}, {"body": "vuejs sophisticated framework uses established principles established libraries framework unlikely undesirable throwing away core principles due argumentation nt really know aiming nt provide jsfiddle try help specific use case nt work", "d": "12/2015"}, {"body": "sure", "d": "12/2015"}, {"body": "things needed fixed passing directly instance root instead passing component declare props expects add definition use syntax svg attributes see errors console use shorthand instead working fiddle", "d": "12/2015"}, {"body": "evan thanks probably fault big deal regarding way make template system transparent optionally pass data props automatically way component data declared vue parameter option compare componentless example fiddle componentless component look simple notice nt need redundancies redundant data syntax props html parameters think important first discovered vue shock simplicity design everything meticulously simple without sacrificing functionality literally could cleaner tried beautiful however component standard vue instance requires extra declarations extra abstraction way pass data simple know great abstraction reason often nt need vue usually nt right place abstraction opinion many times wa nt template function exact way vue instance functions template brings regarding nt ever pass data like opinion nt even vue job worry let vue work complex objects package name alias object however want first var j b b c c new vue el id data j root access obviously need able access root data props html letting access root object props subsequently html major disservice component system use expanded syntax combined props system makes component system significantly complicated needs goes reasons chose vue first place solution going continue use vue honest cleaner inject html manually worry passing data around component system please consider feature like something think would benefit framework future thanks help", "d": "12/2015"}, {"body": "component boundary simplicity whole point components break code logically isolated units feel redundant pass data probably using components prematurely nt actually need remember vue simple stuff focus simple probably nt realize maintainability issues give rise large applications pass data missing point point object pass vue instance container vue needs know property name order reference templates case js var new vue el id data way vue tell original object variable name access templates top level property vue instance ever sees", "d": "12/2015"}, {"body": "vue needs know property name order reference templates yes nt need know parent object name way vue tell original object variable name access templates top level property vue instance ever sees nt need knowcare variable name reason put name variable passing data components requires would nt option pass data automatically need access could pass components issue would resolved would next issue remember vue simple stuff course vue great making complicated stuff simple best thing vue saying vue pass data automatically saying option", "d": "12/2015"}, {"body": "pass whole assign root component data single property root instance data components accept pass subcomponents make data global observe every component options reduce reusability components extent demo", "d": "12/2015"}, {"body": "simplesmiler solutions abcd bar graph html lt span gt b lt span gt js var freindship b magic new vue el demo data template demotemplate replace false using template system access data missing point probably using components prematurely nt actually need nail head", "d": "12/2015"}, {"body": "sorry late chimer see saying none saying though loss dry repeating data declarations props etc small violation considering benefits modularity reusability etc think gets however rant may rest us admit awe brilliance say indeed smarter teams people developing frameworks vue included may get resume", "d": "7/2016"}, {"body": "pass bulk events elegantly let say build vue component called event listeners properties need passed explicitly using templates otherwise easy way bind event listeners besides deriving child component eg difficult repeating properties event handlers complete violation dry seems way implement merge functionality violation kiss", "d": "2/2017"}, {"body": "yo try solution interpreted desires correctly want solution following traits creates dependencies parent components creates dependencies child components require passing data component component require receive data component even require components simple solution even require vue create data model js export import data model whatever components want use use answer question using vue go back regular javascript declare b page scope access exactly like want", "d": "12/2017"}, {"body": "issue twoyear old closed quite time nt even apply current state vue", "d": "12/2017"}, {"body": "simplesmiler thanks excellent advice please consider points sirlancelot passing data relevant ever props provideinject parent vuex revisiting issue years wiser think legitimate use case presented passing data parent component possibly deep child reason complained prop syntax passing children deep results ridiculous amount code repetition believe caught long time ago taken long time provideinject address use case still nt fully address look deeply nested child component uses mysterious property idea inherited parent chain hints template actual composition happens check implementation details every component chain figure one introduced property scope evan sound lot like closures js sounds great well said whole point components break code logically isolated units well turns component logically isolated whether using props closures runtime parent context must provide required attribute parent component declaratively pass attribute prop child components access parent attributes via parent parent component arrtibute suggestion parent component data available reference via closure regardless passing method required attribute must exist parent scope good reason methods logical isolation runtime question input need declared twice component props code ca nt props inferred code like closures js want declarative input props parameters want inferred input convenient familiar way like closures provide js decision made ultimately understand performance king vue prevents shooting feet vuex inject global state provideinject selectively inject state parent dangerous walk chain options exist carefully limit select must passed regarding jochantrelle nt jerk think gets however rant may rest us admit awe brilliance find ironic requested solution implement differently provideinject introduced vue let quote injected property inject would traverse parent chain first provider reached provideinject provide data distant descendant allows create amazing functionalities indeed smarter teams people developing frameworks vue included may get resume well familiar react provideinject similar react context feature ngcontroller looks like came right side regarding decoupling explicit data passing makes individual component decoupled usage context makes easier reason maintain makes component reusable necessary evan nt component need prop prop come runtime comes context parent component runtime real difference declarative vs implied decoupling well sometimes want declarative props sometimes nt nt vue give dev sharp knives let use right tool job like js would even argue provide inject solution unfortunately even tighter coupling parents children wanted parent explicitly declare providing closure scenario child free reference parent data without parent knowing cleaner less dependent admittedly poorly performing solution key child says need thismyattr nt walk chain find regarding modularityreusability loss dry repeating data declarations props etc small violation considering benefits modularity reusability except modularity reusability nt lost dependency somewhere component chain whether dependency expressed using vuex explicitly props parent inject etc dependency still exists component still reusable matter approach used child component still ideologically requires whether passed explicitly parent provide reason performance dev option components nt need start like solution better provideinject attribute component uses nt func data attr computed etc automatically added props list runtime prop passed parent check parent scope chain nothing yet still found default prop value used default silently fail alternatively powerful inject provide avaliable injects data root descendants injects descendants thisx like vuex store inherits parent attributes current instance walk chain inject first x regardless provided parents inherits levels parent attributes current instance better provideinject syntax", "d": "1/2018"}, {"body": "checkednames variable array show vue code please", "d": "12/2015"}, {"body": "thank forgot set vue instance", "d": "12/2015"}, {"body": "docs working", "d": "12/2015"}, {"body": "assume original issue resolved reopen", "d": "12/2015"}, {"body": "sorry \u5df2\u7ecf\u89e3\u51b3\u4e86 \u662f\u81ea\u5df1\u60f3\u9519\u4e86 \u8bf7\u5173\u95ed", "d": "12/2015"}, {"body": "\u4e0d\u8981\u5728\u8fd9\u91cc\u8d34\u95ee\u9898 \u95ee\u9898\u4e0a\u8bba\u575b\u6216\u8005segmentfaultcom", "d": "12/2015"}, {"body": "\u89e3\u51b3\u4e86\u81ea\u5df1\u4e5f\u53ef\u4ee5\u5173", "d": "12/2015"}, {"body": "many items rendering component look like array objects look like", "d": "12/2015"}, {"body": "date component panel display current month days weeks object line code follows add components page chrome case seconds time render html javascript", "d": "12/2015"}, {"body": "would slow takes less machine", "d": "12/2015"}, {"body": "nt know complex logic code use chrome timeline analysis see time consumption execution javascript code full component code html year \u5e74 month \u6708 \u5468 \u4e00 \u4e8c \u4e09 \u56db \u4e94 \u516d \u65e5 nodecontent hour \u65f6 minute \u5206 second \u79d2 \u786e \u5b9a \u6e05 \u7a7a \u4eca \u5929 \u73b0 \u5728 var calendermixin require calendermixinvue export default mixins uuiuuimixin calendermixin props \u7ec4\u4ef6\u7c7b\u578b uitype type string default udatetime \u7ec4\u4ef6\u63cf\u8ff0 label type string default mode type string default date currmode type string default date computed \u65e5\u671f\u9009\u62e9\u9762\u677f datapanel function var alldaycount var result var date new uuidate thisyear thiszeropad thismonth \u7b2c\u4e00\u5929\u661f\u671f\u51e0 var firstday dategetday \u5f53\u524d\u6708 var currmonth dategetmonth \u5f53\u524d\u5e74 var curryear dategetfullyear \u5f53\u524d\u6708\u603b\u5929\u6570 var currdaybycurmonth dategetmonthdaynum \u4e0a\u4e2a\u6708\u7684\u5e74 var beforeyear dategetmonth dategetfullyear dategetfullyear \u4e0a\u4e2a\u6708 var beforemonth dategetmonth dategetmonth \u4e0a\u4e2a\u6708\u603b\u5929\u6570 var beforemonthday uuidategetmonthdaynum beforeyear beforemonth \u4e0b\u4e2a\u6708\u5e74 var nextyear dategetmonth dategetfullyear dategetfullyear \u4e0b\u4e2a\u6708 var nextmonth dategetmonth dategetmonth \u4e0a\u4e2a\u6708\u663e\u793a\u5929\u6570 var oldday firstday firstday oldday else firstday oldday \u4e0b\u4e2a\u6708\u663e\u793a\u5929\u6570 var newday alldaycount currdaybycurmonth oldday var lt result var j j lt j var obj beforemonthday beforemonthday currdaybycurmonth currdaybycurmonth beforemonth beforemonth currmonth currmonth nextmonth nextmonth beforeyear beforeyear curryear curryear nextyear nextyear oldday oldday newday newday j j result push thisgetdaycontent obj \u6dfb\u52a0\u5468\u4fe1\u606f thisaddweek result return result methods \u65e5\u671f\u9762\u677f\u5355\u51fb datepanelhandle function event var op jquery eventtarget attr op var data jquery eventtarget attr data var currdate new uuidate thisyear thiszeropad thismonth op lastmonth currdateaddmonth thisyear currdategetfullyear thismonth currdategetmonth else op nextmonth currdateaddmonth thisyear currdategetfullyear thismonth currdategetmonth else op selectdate thismode date thisdatavalue new uuidate data parentinitpanel thisisopen false else thisselectdate data else op ok thisdatavalue new uuidate thisselectdate thiszeropad thishour thiszeropad thisminute thiszeropad thissecond thisisopen false else op clear thisdatavalue null thisisopen false else op today thisdatavalue new uuidate thisisopen false else op openselectmonth thiscurrmode selectyearmonth else op openselecttime thiscurrmode time \u83b7\u53d6\u65e5\u671f\u5185\u5bb9 getdaycontent function obj var result isold false isnew false isactive false year month content var count obji objj count lt objoldday result isold true isnew false isactive false isweek false value objbeforeyear thiszeropad objbeforemonth thiszeropad objbeforemonthday objoldday count content objbeforemonthday objoldday count else count gt objoldday objcurrdaybycurmonth result isold false isnew true isactive false isweek false value objnextyear thiszeropad objnextmonth thiszeropad count objoldday objcurrdaybycurmonth content count objoldday objcurrdaybycurmonth else result isold false isnew false isactive false isweek false value objcurryear thiszeropad objcurrmonth thiszeropad count objoldday content count objoldday thisselectdate resultvalue resultisactive true return result \u6dfb\u52a0\u5468\u4fe1\u606f addweek function ar var lt var ar var date ar unshift isold false isnew false isactive false isweek true value content uuidategetweek date date date", "d": "12/2015"}, {"body": "sorry simply enough information want help least provide live reproduction nt time guess component works actually test", "d": "12/2015"}, {"body": "closing feel free follow", "d": "12/2015"}, {"body": "thank reply propaganda loading date first time panel input gains focus rendering", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "oubushixb \u56e0\u4e3a\u53ef\u80fd\u8fd8\u4f1a\u6709\u5176\u4ed6\u56fd\u5bb6\u7684\u670b\u53cb\u6765\u770b\u5230\u8fd9\u4e2a\u95ee\u9898 \u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u4e2d\u6587 \u4f46\u662f\u57fa\u672c\u80fd\u4e0agithub\u7684\u4eba\u90fd\u4f1a\u82f1\u6587\u7684", "d": "12/2015"}, {"body": "treri right", "d": "1/2016"}, {"body": "vue android xiaomi ios encountered problem android phone phone kernel uc rendered cell nodes slow essentially ios completed within android rendering cell nodes approximately around uc browser may reasons slow use zeptojs create cell approximately nodes sequentially append go takes", "d": "8/2016"}, {"body": "ask questions forum seems related vuerouter stuckouttongue", "d": "12/2015"}, {"body": "forgot call", "d": "12/2015"}, {"body": "already included file html although tried nothing changed please note router fully functioning far see say warning thanks prompt response", "d": "12/2015"}, {"body": "hmm please provide live repro possible", "d": "12/2015"}, {"body": "sample code warnings check bitbucket", "d": "12/2015"}, {"body": "ah component constructor instance instead", "d": "12/2015"}, {"body": "little weird ca nt use new vue instead vueextend use component constructor using new vue new guys first thought using new vue", "d": "5/2016"}, {"body": "xiaoppp familiar oop terms makes instance certain class makes subclass certain class", "d": "5/2016"}, {"body": "nested child components created first either way children offers guarantee order rely", "d": "12/2015"}, {"body": "tried using parent div like html", "d": "12/2015"}, {"body": "support autoclosing tags always close custom elements mon dec eduardo san martin morote lt notifications githubcom wrote tried using parent div like reply email directly view github", "d": "12/2015"}, {"body": "okay use instead right", "d": "12/2015"}, {"body": "yes", "d": "12/2015"}, {"body": "recursively updated along parent chain", "d": "12/2015"}, {"body": "could please update description note broadcasting available event", "d": "12/2015"}, {"body": "submit pr vuejsorg repo", "d": "12/2015"}, {"body": "would inside lifecycle hook also called switch dynamic components used control timing dom manipulations would work component compiled content therefore created children would work", "d": "12/2015"}, {"body": "turns part vuerouter transition pipeline vue sorry chaos", "d": "12/2015"}, {"body": "remove transitionfadein updated example perfect guess use vif component creating another jsfiddle illustrate", "d": "12/2015"}, {"body": "still leaves problem stacking due inactive ones removed flow document kind fixes jumps go back", "d": "12/2015"}, {"body": "works chrome though got urgent things right come later nobody find solution sorry", "d": "12/2015"}, {"body": "using chrome well get solution seem help though kind understand would thought would increased well decreases instead decreases", "d": "12/2015"}, {"body": "actually css specificity gotcha always present put overriding time adjust css rules order would work properly", "d": "12/2015"}, {"body": "wow call frontend dev basic thing thanks quick close", "d": "12/2015"}, {"body": "hmm rendered empty add see value", "d": "12/2015"}, {"body": "better yet create repro possible", "d": "12/2015"}, {"body": "thanks prompt response problem typo instead thanks much", "d": "12/2015"}, {"body": "use forums questios smile", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "nt make sense prop computed time use two way filters though", "d": "12/2015"}, {"body": "like see issue reopened lets say component something like child component msg props msg type string required false default hello computed msg cached false get function elswidget get text set function value elswidget set text value ready function elswidget superwidget text thismsg parent script define instance child like view creates powerful interaction interface underlying value generatorcontainerproducer declares values passed course well familiar underlying code vue yet internally value provider assign value trigger call update internal value", "d": "12/2015"}, {"body": "use native event eg", "d": "12/2015"}, {"body": "thanks", "d": "12/2015"}, {"body": "von dblclick still wrong", "d": "8/2016"}, {"body": "reference vue", "d": "11/2016"}, {"body": "note necessary binding native events components", "d": "11/2016"}, {"body": "nice", "d": "9/2017"}, {"body": "inpute dbclick solve problems dblclick", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "thanks", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "vue observer ignores prototype properties design", "d": "12/2015"}, {"body": "reactive set either", "d": "12/2015"}, {"body": "initialized please read", "d": "12/2015"}, {"body": "possible workarround tried works instead call", "d": "12/2015"}, {"body": "merged", "d": "12/2015"}, {"body": "found culprit vif show without works expected second problem read documentation nt say mix fallback slot named slots assumed would let wrong", "d": "12/2015"}, {"body": "make jsfiddle reproduction", "d": "12/2015"}, {"body": "kind understand behavior maybe working intended also said docs nt say guess ca nt", "d": "12/2015"}, {"body": "suggested several times opinion nested computed properties confusing actually get defined data object polluting raw data sounds bad work inside nested computed properties confusing vm object imo nested computed properties provide substantial benefits flat ones proper naming eg", "d": "12/2015"}, {"body": "yes nt feel like pollution syntax nt see confusion vm like computed properties advantage see pass along song object another component cumbersome songduration property fri dec evan notifications githubcom wrote suggested several times opinion nested computed properties confusing actually get defined data object polluting raw data sounds bad thissongduration work inside nested computed properties confusing vm song object imo nested computed properties provide substantial benefits flat ones proper naming eg songduration reply email directly view github", "d": "12/2015"}, {"body": "nt think components add random getters raw data objects observe pass object component expect component observe add stuff note return object computed property eg feel free pick better name pass around", "d": "12/2015"}, {"body": "sorry little late party nt terribly expensive looks like change part song cause songwithextrastuff rerun update duration property every song maybe update duration properties maybe song properties even nt changed maybe far new vue know works would even noticeable performance impact event calculated properties nested objects update appropriately thank much example", "d": "5/2017"}, {"body": "mentioned acklenx mixing original properties computed property good solution lead unnecessary computations original property changed showcase fiddle property depends properties however computed even another property originalc changed simple usecase extending computed property looks totally fine organic getting fullname user component data things used accomplished filters ago since really preferred way well regular methods extending user would good spot given large components represent pages multiple users storing fullnames flat structure cumbersome another reallife usecase actually brought namespace properties passed outside modules vuex state example stated issue nested properties methods would provide flexibility distinguish common outside properties direct component ones", "d": "7/2017"}, {"body": "know way late issue hour pulling hear making babel understand spread operator thinking nt want duplicate object arrived following conclusion become also put trigger trigger somewhere html way pollute scope one variable never set thought check data songduration makes answer better proud guys p ps try add trigger prop data vue still flip moreover looks like loophole works oo", "d": "8/2017"}, {"body": "issue please read line help understand regarding data attributes lowlevel method retrieve data attributes unless convenient data method already retrieved working fiddle data set explicitly item retrieve value", "d": "12/2015"}, {"body": "alexandrebonaventure explicitly stated know jquery feature point unclear unexpected behavoir vue simplicity clean way handling data bindings alot possible solutions workarounds umm natural way considering often people use jquery vue", "d": "12/2015"}, {"body": "really jquery issue rather vue unexpectedness comes jquery works rather vue works nt make sense change vue jquery unexpected behavior", "d": "12/2015"}, {"body": "kerbylav already data viewmodel would want give roundtrip though dom probably better way achieve trying achieve", "d": "12/2015"}, {"body": "simplesmiler jquery libs uses data mechanism keep options states stuff components example would great easy clean way bind data dynamically yes course jquery issue still implement reimplement similar behaviour quite frustrating would suggest keep things done reusable way kind custom directive perhaps", "d": "12/2015"}, {"body": "kerbylav afraid jquery plugins designed reactivefriendly jquery standardize data flow general write custom directive component per jquery plugin", "d": "12/2015"}, {"body": "kerbylav interested bootstrap tooltips check maybe info help", "d": "12/2015"}, {"body": "according spec allowed tag", "d": "12/2015"}, {"body": "expected similar use", "d": "12/2015"}, {"body": "okay whats solution dynamically add options select", "d": "8/2016"}, {"body": "milewski select options created directive reading data prop local read doc guide form section examples still questions please address forum chat", "d": "8/2016"}, {"body": "fails object behavior commonly considered bad design javascript language initialize empty object", "d": "12/2015"}, {"body": "initializing cause evaluate true means wo nt able use create another variable store whether object selected remove type check", "d": "12/2015"}, {"body": "fnlctrl need change", "d": "2/2018"}, {"body": "fnlctrl workaround either using exaggerated expression template writing getter object check initialized seems right using typescript vue complicates even one denote objects approach work status issue upcoming release", "d": "5/2018"}, {"body": "sounds like useful option define transition object", "d": "12/2015"}, {"body": "course use little complicated", "d": "12/2015"}, {"body": "alternatively", "d": "12/2015"}, {"body": "great enough provide js hook", "d": "12/2015"}, {"body": "define either inline javascript definition", "d": "12/2015"}, {"body": "enterclass leaveclass also pass function since times need random transitions needs custom logic situation", "d": "1/2016"}, {"body": "dsonet computed variables probably work", "d": "1/2016"}, {"body": "oevgeny thanks reply nt try way mentioned yet seems inline want also vuetransition make reusable", "d": "1/2016"}, {"body": "plan make enterclass leaveclass dynamic example carousel slide may slide left right assign vue transition slide enter leave classes unchangeable slide either left right case need assign dynamic classes way thanks great work", "d": "2/2016"}, {"body": "implemented see works alpha", "d": "6/2016"}, {"body": "supported props", "d": "11/2016"}, {"body": "avoid synchronous http requests hangs ui waiting", "d": "12/2015"}, {"body": "yes need set object use setted nt sync object pass previous data setted data", "d": "12/2015"}, {"body": "nt think understand mean", "d": "12/2015"}, {"body": "use array drive child components", "d": "12/2015"}, {"body": "children dynamics say carousel component lets developer put child component inside dynamically", "d": "12/2015"}, {"body": "telling use array keep track children dynamically tracked way nt understand try playing around js console bit wed dec pm yifeng notifications githubcom wrote children dynamics say carousel component lets developer put child component inside dynamically reply email directly view github", "d": "12/2015"}, {"body": "reference", "d": "8/2017"}, {"body": "add child components get instantiated data fetched behavior unlikely change short term since potentially breaking", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "thanks works browser supports computed property names vue feature work old browsers", "d": "12/2015"}, {"body": "maybe transpile expressions us", "d": "12/2015"}, {"body": "possible easy babel turns complex code", "d": "12/2015"}, {"body": "nt carefully study docs turns special array syntax", "d": "12/2015"}, {"body": "vue concern using unconfigurable linter create method", "d": "12/2015"}, {"body": "always avoid warning exporting variable", "d": "12/2015"}, {"body": "cost pay using imperative apis note omit div empty div created chain", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "curiosity happens instead", "d": "12/2015"}, {"body": "well researching src codes found variable even provided vue custom events", "d": "12/2015"}, {"body": "thanks think something like explicit need basically wrap calling handler set current scope reset afterwards", "d": "12/2015"}, {"body": "got", "d": "12/2015"}, {"body": "\u7528 \u7136\u540e\u5728\u4e8b\u4ef6\u91cc\u9762", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "", "d": "9/2017"}, {"body": "", "d": "12/2015"}, {"body": "could someone translate issue", "d": "12/2015"}, {"body": "test uncaught typeerror read property indexof null vuetouchjs eventindexof gestures recognizertype gestures \u8fd9\u6837\u5199\u4e5f\u4e0d\u884c test", "d": "12/2015"}, {"body": "vuetouch", "d": "12/2015"}, {"body": "thank much", "d": "12/2015"}, {"body": "von touchstart ontouchstart", "d": "8/2017"}, {"body": "\u7136\u540e\u83b7\u53d6 issue \u95ee\u95ee\u9898", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "\u611f\u8c22\u5927\u795e\u89e3\u7b54", "d": "8/2017"}, {"body": "please nt use issues questions", "d": "11/2015"}, {"body": "make sure include jquery vue vue knows needs handle jquery triggered events jquery fire native events vue detects jquery presence listen jquery events include jquery vue wo nt work", "d": "11/2015"}, {"body": "well actually including jquery vue ideas globaljquery global require jquery globalvue require vue vueuse require vueresource vuedirective selectpicker require salestooldirectivesselectpicker", "d": "11/2015"}, {"body": "tested locally seems work fine still issue please provide live reproduction", "d": "11/2015"}, {"body": "yep sorry seems using old bootstrapselect plugin", "d": "11/2015"}, {"body": "nt make html invalid looks like bug htmlminifier believe fixes related issues", "d": "11/2015"}, {"body": "posva thanks try", "d": "11/2015"}, {"body": "using webpack use instead using alone option need make work vue templates", "d": "11/2015"}, {"body": "please nt use issues questions", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "azamatsharapov binding event good way solve", "d": "11/2015"}, {"body": "use custom directive", "d": "11/2015"}, {"body": "\u8bb0\u4f4f\u7ed1\u5b9a\u91cc\u9762\u662f javascript \u5728 js \u91cc\u9762 \u5e26\u77ed\u6a2a\u7684\u5c5e\u6027\u540d\u9700\u8981\u7528\u5b57\u7b26\u4e32", "d": "11/2015"}, {"body": "tanks", "d": "12/2015"}, {"body": "vfor higher priority vshow vshow compiled inside vfor fragment velse outside fragment therefore connect use negation vshow instead fri nov pm ryan mortier notifications githubcom wrote using velse nt seem work sibling element also using vfor see following stackoverflow jsfiddle heading testname data available table new vue el table actual output image image expected output image image reply email directly view github", "d": "11/2015"}, {"body": "thanks clarifying", "d": "11/2015"}, {"body": "thanks", "d": "11/2015"}, {"body": "show us code please", "d": "11/2015"}, {"body": "closing inactivity", "d": "12/2015"}, {"body": "hello new vue made implementation vue cdn link script using package manager everything works fine chrome ff make work ie already try babelpolyfill thing nothing worked indexhtml vuejs controller open console view seems deletes app div help please", "d": "1/2018"}, {"body": "mariomenjr provide reproduce please", "d": "1/2018"}, {"body": "mariomenjr please use new issue tool open new issue", "d": "1/2018"}, {"body": "cant use", "d": "11/2015"}, {"body": "nt know thing", "d": "11/2015"}, {"body": "added mostly potential devtools use cautious additional memory usage since adding array every single node directive seems nt need textnodes may bring usage acceptable level elaborate bit use case found", "d": "11/2015"}, {"body": "writing directive useful way check attribute bindings gives lot detail although simple attribute check would probably meet requirements done issue referenced memory usage concern probably worth enabling production builds", "d": "11/2015"}, {"body": "think close vue reactivity system pretty memory hungry like avoid noncritical memory consumption", "d": "12/2015"}, {"body": "fired component compiled inserted purpose control timing dom manipulation hook order best practice writing expressions potential unset property conditional check", "d": "11/2015"}, {"body": "nt know easy could explain vue designed throw exception expression binding contains null object thanks", "d": "11/2015"}, {"body": "run js get error expressions vue templates", "d": "11/2015"}, {"body": "found error throw debug enabled sorry close", "d": "11/2015"}, {"body": "theres simple working example", "d": "11/2015"}, {"body": "please use issues ask questions stated contribution guidelines", "d": "11/2015"}, {"body": "ca nt ask question forum ca nt verify email address signed github email address never verified email address pulled mstnorris usersnoreplygithubcom although nt github account email address also contribution guidelines link would help thanks using similar thins renders markdown separately looking render markdown type textarea div", "d": "11/2015"}, {"body": "mstnorris likely nt public email address github account deleted account maybe try signing directly email address contribution guidelines linked right input boxes open new issue", "d": "11/2015"}, {"body": "thanks nt know missed must autopilot sign", "d": "11/2015"}, {"body": "sub element array nt traverse working intended object properties like fine access via alias", "d": "11/2015"}, {"body": "nt want orderby traverse actually general situation orderby would fail item nt sortkey think orderby could robust situation evan notifications closed reply email directly view github", "d": "11/2015"}, {"body": "would expect desired behavior items sortkey always top bottom sort result indeterministic best solution make sure data formatted consistently", "d": "11/2015"}, {"body": "clarify document eg make sure sortkey existed orderby wouldnot work properly etc", "d": "11/2015"}, {"body": "please read short newval oldval reference type values arrays objects mutated rather replaced entirely", "d": "11/2015"}, {"body": "found another issue sure whether bug click change selected button value inside array changed update method directive triggered deep true set directive", "d": "11/2015"}, {"body": "firing clicking change selected closing since original issue explained simplesmiler", "d": "11/2015"}, {"body": "really bug vue example used tag natively supported older android fixed docs repo", "d": "11/2015"}, {"body": "overlooked switched new release script nt make real difference package managers resolve github handle formats probably stick prefix", "d": "11/2015"}, {"body": "big deal noticed rawgit link nt work added prefix sticking sounds fine", "d": "11/2015"}, {"body": "small change forgot list debug mode warning generated due actual error throws error benefits get stack trace way real error occurred previously available printed stack warning imo better debugging purposes particular reason makes undesirable", "d": "11/2015"}, {"body": "well use fault tolerance throughout views eg package description packageextraimage check image directly need test extra first maybe correct approach easier extending package optional default values", "d": "11/2015"}, {"body": "rewrite shortcircuit directives oninside element", "d": "11/2015"}, {"body": "absolutely convenient able ignore hand warnings nt pretty anyway", "d": "11/2015"}, {"body": "discovered happens vif directive vshow vbind still fault tolerant", "d": "11/2015"}, {"body": "input type reference eg see data works correctly", "d": "11/2015"}, {"body": "use form", "d": "11/2015"}, {"body": "use forum questions next time example vueloader learn", "d": "11/2015"}, {"body": "woops sorry must confused tabs anyway seen example intuitive looks like lot overhead using method creating new component importing registering component html", "d": "11/2015"}, {"body": "ca nt really tell wrong looking things try use plain syntax initial data declared properly point using use chrome profiling tool take memory heap snapshots see leak somewhere provide context code", "d": "11/2015"}, {"body": "hello thanks quick reply tried nothing changed could crash remains recording situation actually code snippet whole lifecycle listens pusher catches two events one counts success amp total variables counts fail amp total variables ca nt see wrong structure weird way use vuejs whole projects today without headache thanks making brilliant library helps much front end", "d": "11/2015"}, {"body": "component look like", "d": "11/2015"}, {"body": "investigating found problem occured using pusherchannel like wrong declaration inside vue component anyone define like thanks helping btw", "d": "11/2015"}, {"body": "window event listen normal elements lifecycle hooks components", "d": "11/2015"}, {"body": "sir template script data return fullheight documentdocumentelementclientheight however resize browser height remains", "d": "7/2016"}, {"body": "riliwanrabo need use event handler window listen resize event shown code sets value data nothing else want instead js initialize data data return fullheight documentdocumentelementclientheight bind event handlers method defined ready function windowaddeventlistener resize thishandleresize beforedestroy function windowremoveeventlistener resize thishandleresize methods whenever document resized reset fullheight variable handleresize event thisfullheight documentdocumentelementclientheight case though seems like style work well without needing use resize event html questions feel free ask vuejs forums gitter", "d": "7/2016"}, {"body": "store target boundingclientrect anything else use common resize event window loop request resize compare current size stored size callback needed", "d": "11/2016"}, {"body": "thought forceupdate would recalculate computed properties within component listening window resize event forceupdate callback thinking computed property uses window width would recalculate accordingly update template supposed work thinking wrong way thx", "d": "2/2017"}, {"body": "eybarta think wrong forceupdate cost lot use event variable", "d": "2/2017"}, {"body": "try vueresize", "d": "2/2017"}, {"body": "use instead vue see", "d": "11/2017"}, {"body": "pablohpsilva thanks simple works really cool", "d": "11/2017"}, {"body": "hey pablohpsilva ro listen width child component pass parent component element", "d": "2/2018"}, {"body": "anyone found good way debounce types events would really rather events firing user resizes screen little bit debounce would go long way", "d": "7/2018"}, {"body": "adsoncicilioti hello could make child component listen resize event take care events remembering remove component destroyed event triggered emits event parent component hear something", "d": "7/2018"}, {"body": "kidbrazil using lodash find standalone debounce use like recompute computed props resize", "d": "7/2018"}, {"body": "kidbrazil eybarta said exactly would consider really want debounce event depending build debounce events give trouble compute something needed", "d": "7/2018"}, {"body": "pablohpsilva thanks look getting loadash added app cheers", "d": "7/2018"}, {"body": "im trying resize canvas using iframe canvas sizes independent dom changes changed using script elements scale reasons window resizes neighbours change sizes independently vue frameworks current project want use canvas draw editable grid concept example jsfiddle applying vue wished track onresize event iframe called even window vueindependent resize didnt find reference windowonresize vue source suggest vue nexttick called window element resized vue support onresize would able change canvas sizes using reactive attibutes vue component thanks", "d": "7/2018"}, {"body": "kidbrazil looking debounce function adding lodash kind overkill standalone debounce function use debounce", "d": "8/2018"}, {"body": "cool guys trigger resize event manualy following code works fine jquery change pure js without jquery even tried make defined", "d": "8/2018"}, {"body": "might wrong place try asking stackoverflow", "d": "8/2018"}, {"body": "know closed issue future visitors mutationobserver api probably best way handle set mixin components need resized based size children", "d": "8/2018"}, {"body": "aidangarza nt respond element resized modified chrome already shipped resizeobserver best solution issue older browsers use polyfill try solutions like resizedetector fyi integration vuejs try vueresize component implement directive implemented vresize directive based resizedetector", "d": "8/2018"}, {"body": "save another var restore user cancels tue nov van campenhoudt notifications githubcom wrote hello possible get initial value variable user press cancel action example initial value hello start editing hello word saving call cancel method hox retrieve initial value case hello thanks help reply email directly view github", "d": "11/2015"}, {"body": "please use gitter channel forum questions", "d": "11/2015"}, {"body": "variables seem linked", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "ooo want something like find another beter way close issue", "d": "11/2015"}, {"body": "hi diving way vuejs whihc great far posting issue question topic forgive irrelevant andor already seen wondering difference api actually using javascript parent component filter function evt const filter value evtdetail datafilters filter selected value child component select function evt const evttarget const indexof tparentnodechildren const e new customevent select detail filter thisfor value thisoptions eldispatchevent e bad idea use vue api thanks help", "d": "1/2016"}, {"body": "vue custom event system lighter weight pure javascript nt full propagation effect triggered event contained", "d": "1/2016"}, {"body": "thanks clarification", "d": "1/2016"}, {"body": "nevermind turns thirdcomponent activate hook nt call done", "d": "11/2015"}, {"body": "\u4f60\u8fd9\u4e2a\u601d\u8def\u5b8c\u5168\u4e0d\u5bf9 \u60f3\u8981\u5916\u5c42\u7684 \u7528 \u5c31\u53ef\u4ee5", "d": "11/2015"}, {"body": "error code epreventdefault function nt surprise reassign e", "d": "11/2015"}, {"body": "ok updated code another error set property touches undefined view compiled nt seem know touches data object please check console posting nonbugs still issues please use forum gitter", "d": "11/2015"}, {"body": "matmoo sorry fault still nt work well think another problem touch event", "d": "11/2015"}, {"body": "matmoo yes checked console checking code fixed soon problem still alive think nonbug", "d": "11/2015"}, {"body": "native object array also contains native objects plain objects vue observes plain objects convert plain objects setting vm eg", "d": "11/2015"}, {"body": "got thanks lot code works well mac ipad andriod phone even though psv amp felt uncertain", "d": "11/2015"}, {"body": "pass two way prop use vmodel inside component example coffee jade vue labelmdlcheckboxmdljscheckbox vbind foronceid vbind class isdisabled disabled ischecked ischecked inputmdlcheckboxinput vbind valuevalue typecheckbox vbind idonceid vmodelchecked vbind disableddisabled spanmdlcheckboxlabel slot common require mixinstogglecoffee moduleexports checked validator value typeof value boolean value instanceof array required true twoway true disabled boolean id string value required false computed ischecked typeof checked boolean checked else value checked mixins common ready componenthandlerupgradeelements el", "d": "11/2015"}, {"body": "posva see tks", "d": "11/2015"}, {"body": "hustliucn pass item directly", "d": "11/2015"}, {"body": "thx lot", "d": "11/2015"}, {"body": "bind bound value falsy attribute removed", "d": "11/2015"}, {"body": "fixed", "d": "11/2015"}, {"body": "jjaulimsing data nested need make deep copy one option make work data plain circular shared references prototypes functions", "d": "11/2015"}, {"body": "simplesmiler came across workaround minutes posting read jquery doc extend supports deep copy sure vueutilextend supports read documented api proceeding workaround suggested guess thanks clarifying well cause", "d": "11/2015"}, {"body": "nothing jquery extend always shallow clone", "d": "11/2015"}, {"body": "terms state management general concept let source truth reactive object shared multiple component instances start describing app state plain object example pass object prop player controller share state identity changing one component automatically sync one replace though cause component loose reference original object object also live standalone javascript module service point components nt need relationship able share object source truth", "d": "11/2015"}, {"body": "related vue using iterate array wrong usage guaranteed work consistently different javascript engines", "d": "11/2015"}, {"body": "thank using way past couple years without ill effects well except one people find issue later link much discussion", "d": "11/2015"}, {"body": "set one one please nt use issues ask questions", "d": "11/2015"}, {"body": "update one one vue batches dom updates watchers calls", "d": "11/2015"}, {"body": "please provide way update actually replace object referenced data eg etc", "d": "1/2018"}, {"body": "", "d": "1/2018"}, {"body": "akryum thank much try", "d": "1/2018"}, {"body": "directive stuckouttongue attribute reactive directives reactives", "d": "11/2015"}, {"body": "help", "d": "11/2015"}, {"body": "checkout builtin template escaping django users tags", "d": "11/2015"}, {"body": "thing wrong code", "d": "11/2015"}, {"body": "forgot", "d": "11/2015"}, {"body": "unfortunately fact relatively expensive add aliases vue properties need reactive would extra initialization memory costs would wasteful always define every repeated fragment since always used define custom methods like use like", "d": "11/2015"}, {"body": "understood cheers", "d": "11/2015"}, {"body": "regard think wont needed could replaced html crumb last", "d": "11/2015"}, {"body": "although see coming nt think edge case like justifies special directive vuejs core especially caused bug another library", "d": "11/2015"}, {"body": "vprimachenko thanks reply gotcha cheers", "d": "11/2015"}, {"body": "also annoying generates html like tag list gets long wo nt linebreak sometimes developers forget writing html inside tags", "d": "5/2017"}, {"body": "suffering well actually bug must render space tags tags rendered spacing", "d": "10/2017"}, {"body": "could put html entire website one line still work doubt bug generated html jadepug thing long source looks proper nt matter generated html looks like long valid html", "d": "10/2017"}, {"body": "could put html entire website one line still work doubt bug generated html spaces tags legitimately different html though really problem inline elements like reporters using time really affects layout experience generally problem developers need remove space tags stop browsers affecting layout want control spacing specifically css current behavior definitely sane choice see times might want trigger behavior wonder could work around component span content though", "d": "10/2017"}, {"body": "simple workaround would use adding space elements directly possible move parent results expected outcome could also replace space nonbreaking space", "d": "9/2018"}, {"body": "different approaches looking also explanations things would added vue api", "d": "10/2018"}, {"body": "get dead link doc", "d": "11/2015"}, {"body": "appears loading cached version docs page sorry inconvenience", "d": "11/2015"}, {"body": "ah found fix guess apply fix manually", "d": "11/2015"}, {"body": "cool glad found", "d": "11/2015"}, {"body": "hopefully update soon", "d": "11/2015"}, {"body": "teevio reacts event one apparently may triggered different order depending browser", "d": "11/2015"}, {"body": "simplesmiler ahhhh nt thought bug", "d": "11/2015"}, {"body": "use", "d": "11/2015"}, {"body": "sorry nt clear enough understand nexttick works afaik nt tell event handler element involved eg eventtarget find input focus eventtarget set sound like reasonable feature nov evan notifications githubcom wrote closed reply email directly view github", "d": "11/2015"}, {"body": "order fixed something like otherwise might need implement list item component", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "run well feel like default used prop defined", "d": "11/2015"}, {"body": "want explicitly set value undefined", "d": "11/2015"}, {"body": "posva indeed good point however failing see api designer would make sure would give example would work rant feel like undefined type nt existed first place one js language constructs probably late get rid every time come head head undefined types javascript always bad circumstances", "d": "11/2015"}, {"body": "may component showing yet waiting async resource available although null could used may tricky users", "d": "11/2015"}, {"body": "bringing table", "d": "11/2015"}, {"body": "semantics providing value prop absent ie consumer component even provide value different providing value value posva mentioned could lead unexpected results users also breaking change general try avoid strong benefits think use case covered suggested option though", "d": "12/2015"}, {"body": "hi think debatable javascript sole purpose precisely case explicitely saying value affected sole definition value ecma specifications nt interpreted value absence value also dump keys ones opinion set property anywhere interpreted value assigned case vue properties trigger default", "d": "12/2015"}, {"body": "debatable exactly users feel way point breaking change prefer leave current state unless everyone agrees changed", "d": "12/2015"}, {"body": "agreed perhaps next major semantic version could reconsidered opening community already suggest hard workaround coerce option makes even better thanks", "d": "12/2015"}, {"body": "possible access default value coerce callback could manually needed event better way would possible conditionally pass prop child component undefined passed", "d": "1/2016"}, {"body": "decision opinion embedded nature javascript schema use default value property property passed undefined actually nt embedded mongoose schema definition logical opinion else make default item value resort default want add new item items pushing undefined value items list component takes care default value nt put component logic parent right workaround use case ensure item passed undefined get default value working thank kindly vue team", "d": "10/2017"}, {"body": "im still favouring undefined value value use default value value null false use passed one otherwise write could write", "d": "10/2017"}, {"body": "could build component use computed property based prop passed prop matches criteria make default use within component", "d": "10/2017"}, {"body": "computed property nt break vbinding nature properties", "d": "10/2017"}, {"body": "sirlancelot yeah sort makes props default value obsolete way usually approach similar things nt use default prop values could cases would work sake consistency across project", "d": "10/2017"}, {"body": "lopugit way use computed properties two way binding vmodel", "d": "10/2017"}, {"body": "revati could show example use saying way without explaining rest us still poking dark", "d": "1/2018"}, {"body": "wickedsik go little bit expresive way handle optional props", "d": "1/2018"}, {"body": "change result selecting different option select bound nt affect dependencies computed property", "d": "11/2015"}, {"body": "sorry tried make clear post parent form component watchers setup values change value occurs id either added unsaved object removed depending whether new value different old value accordingly unsaved object passed child form inputs cache set false correctly update vm template note vm behaves expected view falls synch", "d": "11/2015"}, {"body": "using modify object", "d": "11/2015"}, {"body": "vue global yes wonder could project work ids objects coming ajax numerical strings eg set statement like ask notice caused issue calling component yesterday change calls double quoted attributes ie single quoted ones double quoted numerical strings otherwise databinding display values failed wonder whole concept trying support native data structure numerical strings causing issues perhaps reformat data", "d": "11/2015"}, {"body": "well seems like work hard determine really wrong without reproduction please provide minimal repro help isolate problem", "d": "11/2015"}, {"body": "yeah lot mixins dependencies try strip put pastebin something thanks evan ps still lovin vue become goto tool used base last projects enjoyable least painful ones ever done", "d": "11/2015"}, {"body": "closing inactivity", "d": "11/2015"}, {"body": "optimization faster time bind arguments ps please use issues ask questions", "d": "11/2015"}, {"body": "sorry read readme carefully", "d": "11/2015"}, {"body": "html case insensitive nt use uppercase event names", "d": "11/2015"}, {"body": "thanks lot", "d": "11/2015"}, {"body": "point watcher fire data changes instead thinking stopping firing conditional check inside watcher callback", "d": "11/2015"}, {"body": "wish could cry case conditional check watcher callback since way check whether going receive deletion messages via websocket come one time every object array saved every modification array get case receive deletion message object save remaining documents db receive another deletion message different object saved previous step possible repetition depending number deleted objects results errors backend trying update data longer exists recommended vuejs pattern", "d": "11/2015"}, {"body": "nt think understand use case maybe using deep watcher persist whole wrong idea begin probably use component item array finegrained persistence", "d": "11/2015"}, {"body": "hello guess understand issue dalanmiller fact stuck similar issue fact nt want watcher trigger callback every time manually decide affect value somewhere instance got data rest api call async way decide affect data component watcher detect change trigger callback notice update changes rest api data change got api set call issue codepen explain vuejs want fire change manually change value textarea code variable call onupdatecode sync change every time gt want coder variable call onupdatecoder add dirty silence mechanism onupdatecoder called change text coder textarea coder want tried better solution vuenexttick fail think could worked vuenexttick dispatch setting priority parameter come code somehow got similar issue integrating acejs vuejs component ace team got issue resolved comment nightwing next comment davidthornton notice logic already answered issue really case think design pattern issue nt know write smart code idea", "d": "11/2016"}, {"body": "seems encounter similar issue solution use watch instead watch option watch return handler function call want stop watch watch value terrible", "d": "12/2016"}, {"body": "issue think fix simple use watch function decide would like call method", "d": "12/2016"}, {"body": "found action firefox chrome different updated event triggered firefox fall stuck never come chrome deal correctly", "d": "1/2018"}, {"body": "new api mentioned upgrade guide general changes", "d": "11/2015"}, {"body": "think relevant issue post although want add new question better trying work json row attah id follwing way idnumber value idnumber value si helpfull becuase access directly row want using id problem longer accepts push function want add new row simple reprodutiont issse", "d": "7/2016"}, {"body": "js filter", "d": "11/2015"}, {"body": "\u8c22\u8c22", "d": "11/2015"}, {"body": "enough information please provide reproduction", "d": "11/2015"}, {"body": "please use forum general queries forumvuejsorg would say expected behavior disabled still want value", "d": "11/2015"}, {"body": "hi matmoo thanks feedback reason thought unexpected submit form normally post data contain disabled selected value work around easily enough issue", "d": "11/2015"}, {"body": "wonder validator formsubmit form validate really okay", "d": "11/2015"}, {"body": "oh validation form example think nt issue please feel free close nt match initial expectations thought would bring", "d": "11/2015"}, {"body": "access raw value element also get think makes sense keep current behavior", "d": "12/2015"}, {"body": "took figure simple little trick make work", "d": "6/2016"}, {"body": "please post questions forums also unlikely get helpful response without showing code", "d": "11/2015"}, {"body": "question bug", "d": "11/2015"}, {"body": "provide reproduction like says issue reporting guidelines edit code least", "d": "11/2015"}, {"body": "description vague considered bug report", "d": "11/2015"}, {"body": "menu template menu item template component use like none events fired", "d": "11/2015"}, {"body": "javascript", "d": "11/2015"}, {"body": "menu item export default props icon type string default computed classes return uihasicon thisiconlength gt menu export default props icon type string default morevert position type string default bottomleft data return isopen false computed classes return uiisopen thisisopen menuclasses let classes classes mdopen thisposition true return classes methods open thisisopen true close thisisopen false component export default methods handleclick event handlemouseenter event", "d": "11/2015"}, {"body": "put together fiddle code reproduce issue", "d": "11/2015"}, {"body": "believe hit sort fragment instance caveat specifically fragment instance nonflowcontrol directives nonprop attributes transitions component element ignored root element bind please check fiddle read carefully part docs", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "see warning props initialized wrong types properly set might good idea relax prop initialized properly", "d": "11/2015"}, {"body": "restriction setting expected value works conclusion ajax calls better set restriction perhaps thanks", "d": "11/2015"}, {"body": "implemented", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "sorry operation advocated operational data instead operating dom", "d": "11/2015"}, {"body": "finally found way even easier add condition check value editor watch method make sense silent option sorry useless issue working example", "d": "11/2015"}, {"body": "hi chagamkamalakar post issue vuejs forum please lot people help way focus bugs suggestions vuejs thank", "d": "11/2015"}, {"body": "sorry sorted issue keeping code thanks suggestion use vuejs forum", "d": "11/2015"}, {"body": "see chagamkamalakar post vuejs forum anyway think maybe better solution issue like using directive", "d": "11/2015"}, {"body": "capture provide repro", "d": "11/2015"}, {"body": "tried keyup keydown created handlecmdenter try capture key events keyup last key released triggers event keydown two events fired keyup registers cmd keyup enter key accessible", "d": "11/2015"}, {"body": "mac cmd key considered modifier check event modifier keys works properly javascript using please provide much information possible preferably live demo", "d": "11/2015"}, {"body": "thank responding quickly figured way around seems suitable solution add event handler von keydown handlecmdenter event method handle key combination handlecmdenter function e emetakey ectrlkey amp amp ekeycode etargetformsubmit event handlers form submission nt work calling submit directly called click event submit button instead modified method trigger click event submit button event handlers form get trigger way handlecmdenter function e emetakey ectrlkey amp amp ekeycode var button etargetform find button type submit suggestions cleaner way ears thanks responding quickly think pretty awesome active community created vuejs pleasure use", "d": "11/2015"}, {"body": "josephjbrewer also write get rid", "d": "11/2015"}, {"body": "combo key", "d": "6/2018"}, {"body": "please ask questions forum issues bugs feature requests", "d": "11/2015"}, {"body": "thanks suggestion general advice scenarios like prefer initialize button objects properly whenever possible way nt need worry workarounds reactivity would work expected", "d": "11/2015"}, {"body": "straps need set one field mutating data issue much simpler way problem actually arises need set fields would like see syntax like", "d": "11/2015"}, {"body": "consider add callback vue lifecycle let us initialize component data observed case init belong component parent simplesmiler get point think could better maintain familiarity libraries many us use every day underscore lodash etc thanks", "d": "11/2015"}, {"body": "straps chose similar javascript functionality standardized name really matter though fine", "d": "11/2015"}, {"body": "simplesmiler ok already taken components", "d": "11/2015"}, {"body": "create pr want focus complex stuff milestone", "d": "2/2016"}, {"body": "blakenewman would great development nt really started yet see branch created submit prs", "d": "2/2016"}, {"body": "late party simplesmiler get point think could better maintain familiarity libraries many us use every day underscore lodash etc actually lodash uses turn based alias", "d": "2/2016"}, {"body": "discussion vuejscollaborators decided feature implemented considered bad practise thus implementation considered bad practise reasons non implementation exploits bad practices vueassign become unpredictable browsers interpret order keys properties differently thus causing unpredictable results wanted property set prior another guaranteed object structure declared documentation says", "d": "4/2016"}, {"body": "giving good thought agree fields predefined work setting multiple fields", "d": "5/2016"}, {"body": "looks like fallen victim", "d": "11/2015"}, {"body": "short needed go html html", "d": "11/2015"}, {"body": "airtonix reason nt placing markup component template html", "d": "11/2015"}, {"body": "rpkilby", "d": "11/2015"}, {"body": "intention partials mostly allowing flexibility composing template parts depending component props dynamic partials really meant runtime swaps although looking transition effects parts indicates may better make components", "d": "11/2015"}, {"body": "could used ifelse statements transitions big amounts texts creating components performance cost wiser using partials anyway thanks looking", "d": "11/2015"}, {"body": "hmm sure vue actually performs call scenario described", "d": "11/2015"}, {"body": "code scenario described try put printed seven times javascript import vue vue var app new vue el content data list name name b name c name name e name f name g name h settimeout function applist name b name c name name e name f name g name h name case perform javascript import vue vue var app new vue el content data list name name b name c name name e name f name g name h settimeout function applist name h name name b name c name name e name f name g", "d": "11/2015"}, {"body": "livoras replacing entire list fresh objects therefore vue removing old fragments inserting new ones fact neither examples call call times add proper identity tracking see call cases", "d": "11/2015"}, {"body": "added shown previous comment", "d": "11/2015"}, {"body": "tested exact code locally got move call making calls please provide live demo", "d": "11/2015"}, {"body": "ah sorry looking second snippet yes indeed making calls", "d": "11/2015"}, {"body": "livoras thanks lot suggestion actually optimizes scenarios single item moved", "d": "11/2015"}, {"body": "great job called actually optimizes scenarios nonadjacent items moved", "d": "11/2015"}, {"body": "nt think bug add classes component way quite useful", "d": "11/2015"}, {"body": "referencing feature totally fine wrong final component end two identical class names seen fiddle would never write code right vue nt neither", "d": "11/2015"}, {"body": "see one writing twice user free add class multiple times like waiting vue fix mistakes", "d": "11/2015"}, {"body": "despite reasons behind repeated class vue could merging instead appending classes way using jqueryaddclass expect library add class nt already exists nt expect fix mistakes help keep code clean", "d": "11/2015"}, {"body": "could feature yet example gave clearly developer mistake real use case jquery example providing nt relate talking adding class component already holds class", "d": "11/2015"}, {"body": "application using class locate dom init vue style initial dom would make sure stays way vue replaced content keep class component template declaration yes purpose could change end duplicating classes names could still argument could remove component component would prompt style issues reason decide change initial dom class nt think big deal would expect class merging feature", "d": "11/2015"}, {"body": "read understand problem think problem could explicit", "d": "11/2015"}, {"body": "hmm really related named slots actually using inline tags ie nt support fixed", "d": "11/2015"}, {"body": "\u90fd\u662f patch", "d": "11/2015"}, {"body": "using syntax version please read latest docs", "d": "11/2015"}, {"body": "chars inside attribute string escaped expected behavior", "d": "11/2015"}, {"body": "whitespace referring really understanding problem", "d": "11/2015"}, {"body": "consider minimum example line moduleexports data function return line whitespace note whitespace front tag rendered nt remove tags works happens using combination embedded html tags", "d": "11/2015"}, {"body": "benromberg vue somehow trim spaces probably nt need triple braces first place likely nt want real tags inside rather want encoded display need use", "d": "11/2015"}, {"body": "simplesmiler thanks chiming aware implications usage indeed intended", "d": "11/2015"}, {"body": "benromberg nt get need real inside syntax highlighting", "d": "11/2015"}, {"body": "thanks works like charm", "d": "11/2015"}, {"body": "need notify masonry trigger reflow new items added set data use wait dom update use whatever method masonry api force recalculate layout issues vuespecific bugs feature discussions please post questions like forum future", "d": "11/2015"}, {"body": "ok", "d": "11/2015"}, {"body": "wrote one simple masonry vue directive recently hope may helpfull", "d": "2/2017"}, {"body": "feature supported tried got warning", "d": "4/2017"}, {"body": "getting error putting propsexample test component", "d": "5/2017"}, {"body": "accepted practiceanswer issue", "d": "1/2018"}, {"body": "yes known issue general advice never rely vmodel create nonexistent property follow best practice properly initialize data", "d": "11/2015"}, {"body": "unfortunately vue expression parser support alphanumeric identifiers avoid using unicode chars identifiers", "d": "11/2015"}, {"body": "\u62a5 bug \u8981\u7ed9\u91cd\u73b0\u554a\u540c\u5b66 \u4f60\u8fde\u4e00\u884c\u4ee3\u7801\u90fd\u6ca1\u6709\u600e\u4e48\u5e2e\u4f60", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "fixed", "d": "11/2015"}, {"body": "think use encountered problem today cat", "d": "11/2015"}, {"body": "unusual quirk suggested solution seems work way thanks", "d": "11/2015"}, {"body": "\u56e0\u4e3a\u4f60\u540c\u65f6\u628a value", "d": "11/2015"}, {"body": "likely router view components prop case please reopen reproduction", "d": "11/2015"}, {"body": "sorry correct another routerview sat nt realise", "d": "11/2015"}, {"body": "former removes vue instance accepts callback latter synchronous", "d": "11/2015"}, {"body": "okay arrayprototype remove documentation", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "want angular vue nt use angular directly vue angular without heaviness", "d": "11/2015"}, {"body": "looking something like also angular nt option cases", "d": "11/2015"}, {"body": "would add data gathered one place good thing many reasons really nt understand sentence data methods completely separated actually opposite imho", "d": "11/2015"}, {"body": "boussou used angular example nothing angular good practice around want small classes encapsulate functionality without tied vue vue able utilize", "d": "11/2015"}, {"body": "got", "d": "11/2015"}, {"body": "probably vue get opnionated reactive state ie source truth ui needs plain objects makes state serializable rehydratable however nt prevent sharing reactive objects vue instance class choice rather thinking service class instance data think like vue instance service class instance sharing data something like could probably work", "d": "11/2015"}, {"body": "sorry sound ungrateful sounds lame service probably charge fetching data maybe remedied static function service calling would nt allow view call service methods mean create proxy methods every service method may want allow view access every vue uses service sad example js import order order vuecomponent orderpage also bind view example instead looks quite lame disappointed", "d": "11/2015"}, {"body": "remember include parens need proxy methods", "d": "11/2015"}, {"body": "closing since like openended discussion feel free continue forums", "d": "11/2015"}, {"body": "please provide repro", "d": "11/2015"}, {"body": "closing inactivity", "d": "11/2015"}, {"body": "chinese all\u5168\u9009\u662f\u597d\u7684 \u7136\u540e\u518drun\u4e00\u4e0b \u518d\u53bb\u5168\u9009\u53cd\u9009 control\u4e86", "d": "11/2015"}, {"body": "\u5148\u9009\u62e9 \u7684\u8bdd watch \u4e5f\u6709\u95ee\u9898", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "zcoding \u8fd9\u53ea\u662f\u5355\u5411\u7ed1\u5b9a\u5427", "d": "11/2015"}, {"body": "\u8fd9\u91cc\u786e\u5b9e\u6709\u4e00\u4e2a edge reactive \u66f4\u597d\u7684\u505a\u6cd5\u662f\u5229\u7528 \u652f\u6301 checkbox \u7ed1\u5b9a\u5230 array", "d": "11/2015"}, {"body": "\u597d\u7684", "d": "11/2015"}, {"body": "\u5982\u679c\u89c9\u5f97 array line", "d": "11/2015"}, {"body": "", "d": "7/2016"}, {"body": "please read docs vueset instance methods", "d": "11/2015"}, {"body": "read docs convenient see blow vfor template code get plain json object", "d": "11/2015"}, {"body": "currently use get pojo", "d": "11/2015"}, {"body": "use objects", "d": "11/2015"}, {"body": "ok use json methods get plain objects special method case please post questions forum next time", "d": "11/2015"}, {"body": "thanks response tried gets error referers vm instance method scope", "d": "11/2015"}, {"body": "btw using latest vue upgrade", "d": "11/2015"}, {"body": "expects path string first argument", "d": "11/2015"}, {"body": "set object reference obviously object want clone explicitly clone reason vue clone object set", "d": "11/2015"}, {"body": "use vueset set nt mentioned tue nov pm eason shen notifications githubcom wrote dont get item one item vfor repeat set von click event handler onitemclick argument item want set new property item would weird resolve key path situation \u53d1\u81ea\u6211\u7684 iphone \u5728 notifications githubcom set carinfo set object reference obviously object want clone explicitly clone reason vue clone object set reply email directly view github reply email directly view github", "d": "11/2015"}, {"body": "better performant way get plain json vue data following code click test get performance better result jsonparse jsonstringify", "d": "10/2016"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "8/2017"}, {"body": "tanrenjie", "d": "8/2017"}, {"body": "limitation html permits inside gets cut browser vue reach either enclose whole table component use syntax", "d": "11/2015"}, {"body": "thank helped", "d": "1/2016"}, {"body": "encountered issue switching components child components", "d": "11/2015"}, {"body": "hmm nt expect use case like custom directive duplicates old behavior access directive bound element custom directive simple let know helps", "d": "11/2015"}, {"body": "aware ability access alternate directives element proves trivialize previously trying less solves problem use method previous system removes builds new copy options option groups support also understand would nt expected use case potentially questionable ui choices taking place thanks help", "d": "11/2015"}, {"body": "\u4e4b\u524d\u7684 issue objectdefinepropery \u65e0\u6cd5", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "please describe ran error provide reproduction stack trace nt helpful", "d": "11/2015"}, {"body": "inactive", "d": "11/2015"}, {"body": "issue pretty sure vuerouter specific though open one", "d": "11/2015"}, {"body": "issue really hard put finger calling inca end posting issue vuerouter", "d": "9/2016"}, {"body": "believe original version fixed ago remember authors mentioning fix somewhere issue associated anyway currently using vue rc vuerouter next basically rewrite nt believe seen issue", "d": "9/2016"}, {"body": "\u4f60\u7528\u7684\u662f \u662f", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "items item type num type num", "d": "8/2016"}, {"body": "nt sound like good idea pass parent name prop", "d": "11/2015"}, {"body": "\u4e0d\u7528vtransition", "d": "11/2015"}, {"body": "\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 \u8981\u901a\u8fc7props\u6216\u8005\u662f\u4e8b\u4ef6\u56de\u8c03\u673a\u5236\u901a\u4fe1", "d": "11/2015"}, {"body": "props\u5f62\u5f0f\u8981\u5982\u4f55\u4f7f\u7528\u5462", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "\u95ee\u9898\u8bf7\u4e0d\u8981\u5f00", "d": "11/2015"}, {"body": "add name option see docs name option mon nov kfirba notifications githubcom wrote hey faced problem day updated vue version beta release rc release code broke code takes folders tree renders folderstree manager component registers locally folder component folderstree using folder component template vfor root folders folder component checks see children renders using folder component along vfor children basically render nice folder tree worked perfectly beta releases upgraded rc releases got weird error true current release aswell root folders rendered properly tries render children folder throws error says folder component nt registered solution found issue register folder component globally beforecompile method folderstree weird sorry took thing long report indeed bug intentional reply email directly view github", "d": "11/2015"}, {"body": "oh nt seen guess new thanks quick reply tho", "d": "11/2015"}, {"body": "ways case interested flux model used vuex thirdparty event emitter often evan says eventapproach little hard reason compared props example would personally go flux maybe try redux share store data actions functions instances", "d": "11/2015"}, {"body": "azamatsharapov nt think need delegate job party package feels like needs something vue provides rare want notify siblings something happened may something result true fire event using jquery library native js listen event vue components nt feel right", "d": "11/2015"}, {"body": "vue allencompassing framework nt attempt solve problems limit vueonly solution mon nov kfirba notifications githubcom wrote azamatsharapov nt think need delegate job party package feels like needs something vue provides rare want notify siblings something happened may something result true fire event using jquery library native js listen event vue components nt feel right reply email directly view github", "d": "11/2015"}, {"body": "sure never mentioned try use vue everything think elementary task pretty common maybe addressed seems easy implement nt presenting anything new nice addition current events system like polishing current events system whether entirely decision mere suggestion", "d": "11/2015"}, {"body": "opinion need type event communication use global event bus instead probably simpler think using webpack browserify already shim node event emitter requires nothing vue pattern applied application", "d": "11/2015"}, {"body": "leave someone might interested simple solution vue register global vue instance early application act like event bus want emit event wherever want listen events register listener", "d": "8/2016"}, {"body": "aledmb fyi already smile", "d": "8/2016"}, {"body": "oh nice see", "d": "8/2016"}, {"body": "bus pattern works well thanks aledmd", "d": "9/2016"}, {"body": "aledmb solution fantastic solved problem mine", "d": "10/2017"}, {"body": "amp \u548c \u548c \u4f20\u9012\u7684\u624d\u662f javascript", "d": "11/2015"}, {"body": "amp \u5bf9\u4e8ebool", "d": "11/2015"}, {"body": "yes work", "d": "11/2015"}, {"body": "one small thing watch component linkers cached first compilation first occurrence child component failed locate component compile time affect later instances circumvented making component prop required", "d": "11/2015"}, {"body": "thanks works perfectly close ticket", "d": "11/2015"}, {"body": "correct behavior please read", "d": "11/2015"}, {"body": "matmoo thanks explanation", "d": "11/2015"}, {"body": "nt helpful get actual source debugging whats confusing dist file meant read source sat nov pm michael qu notifications githubcom wrote install vue npm use webpack pack find webpack compile vue source use sourcemap source code vue also show source tag chrome dev tool makes little bit confusing packagejson main srcvuejs think main script distvuejs distvueminjs npmpublish version reply email directly view github", "d": "11/2015"}, {"body": "yeah nt need debug debuging code examble trying debug indexjs type filter source tag", "d": "11/2015"}, {"body": "show full path though ignore vue files dist file already packed webpack inefficient webpack packs sun nov michael qu notifications githubcom wrote yeah nt need debug vue debuging code examble trying debug indexjs type index filter source tag image img reply email directly view github", "d": "11/2015"}, {"body": "please provide reproduction", "d": "11/2015"}, {"body": "reproduction sorry nt understand", "d": "11/2015"}, {"body": "make live editable demo using service like debug", "d": "11/2015"}, {"body": "okey", "d": "11/2015"}, {"body": "tried jsfiddle worked work webpack require", "d": "11/2015"}, {"body": "hmm nt seem vue core issue closing maybe get info provide repository webpack setup", "d": "11/2015"}, {"body": "provide email address add repo bitbucket", "d": "11/2015"}, {"body": "sorry nt really time look full projects need isolate problem provide minimal reproduction repo github", "d": "11/2015"}, {"body": "okey thank dear", "d": "11/2015"}, {"body": "hi dear done jsfiddle work nested component", "d": "11/2015"}, {"body": "okey fixed nexttick right way", "d": "11/2015"}, {"body": "open fiddle wait minute see updated element correctly looks like issue library", "d": "11/2015"}, {"body": "simplesmiler timeago work well", "d": "11/2015"}, {"body": "getting problem plugins one animatemodaljs", "d": "11/2015"}, {"body": "alioygur may bit offensive mean talking fact work callback jquery plugins similar code work properly", "d": "11/2015"}, {"body": "simplesmiler okey got", "d": "11/2015"}, {"body": "alioygur anyway fine workaround unless willing dig jquery plugin code", "d": "11/2015"}, {"body": "simplesmiler yes right thank dear", "d": "11/2015"}, {"body": "assume using please read section", "d": "11/2015"}, {"body": "using vueloader dependencies list routes file", "d": "11/2015"}, {"body": "still applies", "d": "11/2015"}, {"body": "fix read doc confused", "d": "11/2015"}, {"body": "okey got use vuehtmlloader instead htmlloader", "d": "11/2015"}, {"body": "need install use load image extensions webpack config", "d": "11/2015"}, {"body": "binding array primitive values change array entire list rerendered avoid behavior add", "d": "11/2015"}, {"body": "oh sorry forgot thanks", "d": "11/2015"}, {"body": "supersummer sure testing", "d": "11/2015"}, {"body": "simplesmiler sorry got wrong version", "d": "11/2015"}, {"body": "issue", "d": "11/2015"}, {"body": "transcluded children also component array checking presence probably method future something like", "d": "11/2015"}, {"body": "thanks tip", "d": "11/2015"}, {"body": "gives impression atmost one component slot reality multiple components targeted single slot think better change name determine count supply common use case", "d": "3/2016"}, {"body": "agree prograjkamal last point methods look like nice way solve problem like see universal way contentslotcomponent communication", "d": "3/2016"}, {"body": "addressed however difficult backport similar api unfortunately going land", "d": "11/2016"}, {"body": "addressed however difficult backport similar api unfortunately going land addressed reply vague thread needs continuation", "d": "10/2018"}, {"body": "think caused template tag try", "d": "11/2015"}, {"body": "likely ie enforces elements allowed inside similar use nontemplate version", "d": "11/2015"}, {"body": "thanks posting saved ton time", "d": "11/2015"}, {"body": "handle please post questions forum", "d": "11/2015"}, {"body": "provide reproduction", "d": "11/2015"}, {"body": "please specific likely method returning rendered empty", "d": "11/2015"}, {"body": "used evaluate older versions", "d": "11/2015"}, {"body": "well never intended work likely coincidence worked", "d": "11/2015"}, {"body": "please read upgrade notes carefully object prototypes longer extended use instead", "d": "11/2015"}, {"body": "bit day took minutes figure going", "d": "11/2015"}, {"body": "sounds like magic maybe warning would helpful", "d": "11/2015"}, {"body": "azamatsharapov entirely sure seems magical expect mess data types keeping whatever type set instead used input input coerced string something would expect thinking another way already said number declaring nt sufficient magic vue paying attention information user already given intentions", "d": "11/2015"}, {"body": "morgul turns raw value still string yeah vue messing data type preserving browser default behavior casts type ask param attribute", "d": "11/2015"}, {"body": "ah nt aware nt actually worked raw input fields long time still feels like obvious feature", "d": "11/2015"}, {"body": "calling autocasting magical evan also said string html blame want enhancement standard html add vue param cast opinion", "d": "11/2015"}, {"body": "think try stay close native behavior value conversions user explicitly wants keep current behavior", "d": "12/2015"}, {"body": "would open alternative syntax html feels keeping syntax", "d": "12/2015"}, {"body": "morgul sounds like good idea open separate issue", "d": "12/2015"}, {"body": "evan please see regarding simular issueworkaround involve autocasting instead splicing attribute number empty", "d": "5/2017"}, {"body": "case someone else stumbles across addressed per morgul suggestion documented form input bindingsmodifiersnumber hoping save next person step go find docs", "d": "4/2018"}, {"body": "thanks update stumbled across thanks everyone good work", "d": "5/2018"}, {"body": "bad idea mix two styles addition reason gets confused treats attribute pretty nasty work around use one style added warning usage", "d": "11/2015"}, {"body": "hard tell wrong without actual reproduction", "d": "11/2015"}, {"body": "found workaround weird may give hint changed deletion method address array directly use method works super weird clue", "d": "11/2015"}, {"body": "really doubt makes difference ca nt really help without actual repro", "d": "11/2015"}, {"body": "try make reproduction way addressing array like suggested comment indeed solves problem super surprised", "d": "11/2015"}, {"body": "kfirba work change following", "d": "11/2015"}, {"body": "kfirba using polyfill something tells array callback copy", "d": "11/2015"}, {"body": "simplesmiler try get home youngsteveo using explicit polyfill method supported use browserify babel nt think creates polyfill method", "d": "11/2015"}, {"body": "simplesmiler uhmm works", "d": "11/2015"}, {"body": "try original code say store reference array callback log see fact array logs false likely using something messes array methods", "d": "11/2015"}, {"body": "get however nt remove object array super weird", "d": "11/2015"}, {"body": "kfirba unfortunately objects observed scalar values arrays call mutation methods like shift push splice etc nt matter remove items data array property collection object", "d": "11/2015"}, {"body": "kfirba weird indeed ca nt reproduce behavior closing provide repro dig", "d": "11/2015"}, {"body": "please open questions forum instead issues bugs features use case use custom filter", "d": "11/2015"}, {"body": "pass prop without always interpreted plain string attributes matter content want pass literal number need use html", "d": "11/2015"}, {"body": "thanks quick response would great info add section guide", "d": "11/2015"}, {"body": "got problem actually using object confirm passed string", "d": "6/2018"}, {"body": "hey raschidgithub old issue ask forum discord server need share code nobody able help", "d": "7/2018"}, {"body": "vrepeat deprecated vue please use vfor", "d": "11/2015"}, {"body": "please read release notes", "d": "11/2015"}, {"body": "another make vuejs code js remove transition ok", "d": "11/2015"}, {"body": "ca nt reproduce need make actual reproduction", "d": "11/2015"}, {"body": "error also try make repro", "d": "11/2015"}, {"body": "try make repro later", "d": "11/2015"}, {"body": "demo first bug jsfiddle", "d": "11/2015"}, {"body": "alexandrebonaventure typeerror thisop function find reason use variable start properties start proxied", "d": "11/2015"}, {"body": "repro errors extra selectors fixed working properly without errors", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "still happens remove parent component vif child inside still transitioning understand nice situation nt happen technically dom node around anymore leavedone would help opinion edit tried hard create fiddle ca nt reproduce", "d": "7/2016"}, {"body": "come accross problem today found leavedone function execute twice thisop null end first time lead problem", "d": "8/2016"}, {"body": "\u6700\u8fd1\u4f7f\u7528 vuerouter onhide \u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\u8fd0\u884c", "d": "8/2016"}, {"body": "vue", "d": "12/2017"}, {"body": "case vuejs ca nt finish migration part app depending behavior", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "slated release willimplement btw", "d": "12/2015"}, {"body": "yeah milestone", "d": "12/2015"}, {"body": "", "d": "9/2016"}, {"body": "use component opinion item separated component", "d": "11/2016"}, {"body": "fyi already shipped new nt know evan wants back port though", "d": "11/2016"}, {"body": "vue", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "vue vue vue", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "\u6240\u4ee5\u6211\u8bf4\u4f60\u601d\u8def\u4e0d\u5bf9", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "rendongsc vfor vif", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "\u6bd4\u5982\u4f2a\u4ee3\u7801 react const config id row gt rowid name row gt rowname const data id name sy objectkeys config map item gt config item render data item \u8fd9\u6837\u4ee5\u540e\u53ef\u4ee5\u4efb\u610f\u4fee\u6539config vue \u600e\u4e48\u5b9e\u73b0 \u662f\u4e0d\u662f\u53ea\u6709 slot \u65b9\u5f0f", "d": "12/2017"}, {"body": "amp jsx\u7684\u7528\u6cd5", "d": "12/2017"}, {"body": "", "d": "4/2018"}, {"body": "thanks", "d": "11/2015"}, {"body": "seem like use case improved", "d": "11/2015"}, {"body": "idea workaround solution see turn component directive apply tag sexy want", "d": "11/2015"}, {"body": "aha fact proper way handle make element directive instead since want interpret anything passed plain string need control slot distribution mechanism", "d": "11/2015"}, {"body": "look thanks time mate", "d": "11/2015"}, {"body": "need use correct build setup browserify need vueify", "d": "11/2015"}, {"body": "thanks must overlooked somewhere docs", "d": "11/2015"}, {"body": "ok found putting single prop work js mpleft float left width height background red mpmain float left width foo height background green bar height background blue vuecomponent masterpage template left aside props params watch params function val log nexttick function consolelog leftaside elsleftaside debugger vuecomponent foo template foo vuecomponent bar template bar new vue el html data view name masterpage params showleft false childview foo ready function var settimeout function meview name masterpage params showleft true childview bar", "d": "11/2015"}, {"body": "please use asking questions answer question pass event info though click eventhandler event e el think work top head", "d": "11/2015"}, {"body": "related vuejs", "d": "11/2015"}, {"body": "discussion jqueryjquery", "d": "11/2015"}, {"body": "looks like nothing vue", "d": "11/2015"}, {"body": "know promises supported vuerouters hooks please use forum chat questions", "d": "11/2015"}, {"body": "per component inserted user calls passedin callback return promise think unimplemented feature reported", "d": "11/2015"}, {"body": "ah ok nt know", "d": "11/2015"}, {"body": "ah forgot issue mentioned promise implemented mentioned actual doc places assume promises vuejs core introducing promise handling particular case probably worth since", "d": "11/2015"}, {"body": "question bug please post forums", "d": "11/2015"}, {"body": "please provide information want looked", "d": "11/2015"}, {"body": "block compiled offdom fragment inserted unfortunately somewhat necessary ensure correct compilation results general directives assume workaround wait trying access note means extra checks function ok", "d": "11/2015"}, {"body": "thanks understood", "d": "11/2015"}, {"body": "something like please use chat forum questions", "d": "11/2015"}, {"body": "yes thanks", "d": "11/2015"}, {"body": "thanks", "d": "11/2015"}, {"body": "content editable involves lot complexity input bindings best use external library dedicated purpose eg mediumjs wrapped custom directive", "d": "11/2015"}, {"body": "sorry saw close issue hello bdedardel work summernote today found question solution use summernote onchange callbacks like let program vue instance detail model program know good way solve problem probably already got", "d": "12/2015"}, {"body": "abdulahkam thanks post try solution even summernote respond exactly needs", "d": "12/2015"}, {"body": "props stripped reaching warning check need worry", "d": "11/2015"}, {"body": "need", "d": "11/2015"}, {"body": "please read upgrade guide carefully vfor need explicitly pass data props", "d": "11/2015"}, {"body": "swear god work five minutes ago well must mistyped something guess apologies", "d": "11/2015"}, {"body": "quick review noticed worked accidently reverted shown updated fiddle nt work", "d": "11/2015"}, {"body": "search section", "d": "11/2015"}, {"body": "indeed bad though seems counter intuitive vfor explicitly respecify variable", "d": "11/2015"}, {"body": "intuitive trying refactor reuse component later", "d": "11/2015"}, {"body": "post code example", "d": "11/2015"}, {"body": "hmm guess savvy post code spaced code lines show sure better way post inline code", "d": "11/2015"}, {"body": "eybarta read use markdown two compiled thing nt mix pick one style html", "d": "11/2015"}, {"body": "ok thx", "d": "11/2015"}, {"body": "humucai", "d": "11/2015"}, {"body": "yanxyz", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "smarttable \u8d70\u4e0d\u5230consolelog fire", "d": "11/2015"}, {"body": "\u8bf7\u4ed4\u7ec6\u770b\u770b \u7684 api \u6587\u6863 \u53ea\u63a5\u53d7 expression \u6216", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "\u66f4\u597d\u7684\u529e\u6cd5\u662f\u505a\u4e00\u4e2a row row \u7ec4\u4ef6 watch", "d": "11/2015"}, {"body": "model name newvalue oldvalue", "d": "11/2015"}, {"body": "", "d": "12/2016"}, {"body": "ah custom directive nt setup priority properly params api change fiddle fixed explicit priority work default next release", "d": "10/2015"}, {"body": "literal modifier nt work props literal props prop string", "d": "10/2015"}, {"body": "even simpler thanks", "d": "10/2015"}, {"body": "see warning console need add array contains duplicate values", "d": "10/2015"}, {"body": "markdown \u5417", "d": "10/2015"}, {"body": "sortby \u628a\u5927\u5199\u7684 b", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "design see docs fragment instance", "d": "10/2015"}, {"body": "said design better warnings case later releases", "d": "10/2015"}, {"body": "yeah thinking could useful", "d": "10/2015"}, {"body": "glad hear eventually implemented future versions thanks", "d": "10/2015"}, {"body": "believe take name would clash existing meaning transitionmode", "d": "3/2016"}, {"body": "implemented prop although like backport noncritical change requires nontrivial effort given bandwidth reducing scope number critical features low hanging fruits unfortunately implemented", "d": "11/2016"}, {"body": "years chance implementing feature", "d": "8/2018"}, {"body": "read comment", "d": "8/2018"}, {"body": "sorry terrible reader", "d": "8/2018"}, {"body": "warning explains using object object converted array passed filter changed", "d": "10/2015"}, {"body": "proof", "d": "10/2015"}, {"body": "image dom node nodes tree see image load request chrome network panel", "d": "10/2015"}, {"body": "proof mean reproduction jsfiddle jsbin", "d": "10/2015"}, {"body": "proof also see directly", "d": "10/2015"}, {"body": "likely browser attempts download image vue gets chance remove element dom try wrapping template even inlining js", "d": "10/2015"}, {"body": "unfortunately happens vue clones template even node offdom still trigger network request happens vue compiles simple workaround use trigger request compiled", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "sorry bad forgot jade ca nt pass", "d": "10/2015"}, {"body": "try register filter initializing vm post questions like forumvuejsorg next time", "d": "10/2015"}, {"body": "thanks work write filter initializing vm mybe custom filters part guid indicate", "d": "10/2015"}, {"body": "says recommend dedicate hour two reading whole guide useful", "d": "10/2015"}, {"body": "good reading guid part", "d": "10/2015"}, {"body": "please make live reproduction", "d": "10/2015"}, {"body": "solved minutes ago component inserted json string prop method converted json string array override prop seems tries iterate json string method called solved renaming prop save converted json string data array component", "d": "10/2015"}, {"body": "return jsonobject instead jsonstring", "d": "8/2016"}, {"body": "please nt use issues simple questions questions better asked gitter channel forum nginclude may want take look", "d": "10/2015"}, {"body": "p \u91cc\u9762\u4e0d\u80fd\u5d4c\u5957", "d": "10/2015"}, {"body": "style", "d": "10/2015"}, {"body": "aware format however need ability pass dynamic object directive building formbuilder", "d": "10/2015"}, {"body": "able simulate behaviour directive add bindings thought sure best", "d": "10/2015"}, {"body": "issue moving unknown attribute keys passed longer attach object vattr vbind works know keys think need special directive vbind much like class amp style accepts object could pass unknown attributes output element sure others makes great difference way built cases currently would nt need track state object outputs attributes static", "d": "10/2015"}, {"body": "temporary solution grab old source remove priority option necessary add object register custom directive necessary seems work well enough still think supported", "d": "10/2015"}, {"body": "supports object binding check commit", "d": "10/2015"}, {"body": "works well nt reactive fine cases currently need feature thank", "d": "10/2015"}, {"body": "thegc ah reactive case next patch", "d": "10/2015"}, {"body": "testing helps", "d": "10/2015"}, {"body": "", "d": "11/2015"}, {"body": "hmm something overlooked renaming option use also js import chartist xxx export default components chartist", "d": "10/2015"}, {"body": "want accurate whitespace use tag", "d": "10/2015"}, {"body": "works fine", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "\u8bf7\u4e0d\u8981\u7528 issue", "d": "10/2015"}, {"body": "vue\u6709\u8def\u7ebf\u56fe\u4e48", "d": "10/2015"}, {"body": "\u6700\u8fd1\u5fd9 \u4e2d\u6587\u6587\u6863\u7684\u7ffb\u8bd1", "d": "10/2015"}, {"body": "\u54e6 \u5929\u554a \u6211\u7cdf\u7cd5\u7684\u82f1\u8bed", "d": "10/2015"}, {"body": "\u6211\u5f53\u524d\u6b63\u4f7f\u7528", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "bind called directive first bound element", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "\u53ef\u4ee5\u5728 \u91cc\u9762\u7b2c\u4e00\u6b21\u8c03\u7528\u8bbe\u7f6e\u4e00\u4e2a flag \u4e3a true \u5c31\u4e0d\u518d\u66f4\u65b0", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "skupr next time create fix submit pr smile sure contribute right branch", "d": "10/2015"}, {"body": "extra comment node turning component fragment instance remove comment node ensure component template single root node", "d": "10/2015"}, {"body": "yeah kind namespaceing would really beneficial result cleaner code example personal project moment ui describing variables live yet ui manipulator live prefixed makes imo fact consistent yet typo prone code eg", "d": "10/2015"}, {"body": "nt see point style preferences makes different say methods invoked instance nt nested", "d": "10/2015"}, {"body": "mainly style preference yes another use case convenient pass group methods child component vue validation component used show serverside validation errors used component conjunction mixin watereddown version component inherit true props name property type string required true mixin js data return servervalidation methods isinvalid property hasown thisservervalidation property return true isvalid property return thisisinvalid property getvalidationerror property thisisvalid property return null page short component mixin work hand hand since vue supported component able utilize validation methods directly parent component fast forward pass methods directly child component passing separately input field would severely clutter template thought grouping single object passing would make sense might approaching wrong happy hear alternate solution regardless still think allowing methods grouped good idea like nesting shorter method names smile", "d": "10/2015"}, {"body": "still hold opinion nested methods confusing useful preferred way connecting child parent method via parent child tightly coupled using effectively directly calling", "d": "11/2015"}, {"body": "nested methods would useful giving mixin methods namespace", "d": "2/2017"}, {"body": "resetting data objects plain json kill prototypes could create instantiated class based objects rootnested object methods since prototypes methodsgetterssetters proxied vue still accessible via data nested data objects problem nt get computed caching unless manually import nested getters optionally namespaced flat vue structure order manually proxy custom haxevx compiletime macro haxevx nt vanilla vue provide objectoriented dot access rerout root vue instance anyway nested accessors vue typically would exist nested vue components vuex modules rather objectoriented nested accessors else set flattened objectpropertyname proxy access however think using non computed nested access object methods nt much problem case though long nt reset yr data plain json nt need caching", "d": "8/2017"}, {"body": "agree thanks input glidias would cool able allows find quickly method comes case know searching definition method inside validation mixin style preferences imo", "d": "11/2017"}, {"body": "also like advocate implemented using objects namespace group functions much convenient prefixing cleaner also allows ides fold methods well workaround accomplished using functions instead objects used like perfect still gives organizational benefits couple years opinion changed", "d": "11/2017"}, {"body": "adopt approach put place simply use without function brackets order get computed caching avoid recreating object fact tend use pseudo singletonssingleglobal refsutilityclassesobjects etc well way get perfect solution approach done css modules well however assume methods stateless methods stateful notreactive methods whose states data lie outside vue", "d": "11/2017"}, {"body": "validation simply example usecase may may always make sense use computed property nt negate original uses nested methods", "d": "11/2017"}, {"body": "", "d": "2/2018"}, {"body": "", "d": "2/2018"}, {"body": "decent workaround", "d": "3/2018"}, {"body": "", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "", "d": "5/2018"}, {"body": "locking going happen", "d": "5/2018"}, {"body": "currently easy add use transition hook", "d": "10/2015"}, {"body": "thanks lot", "d": "10/2015"}, {"body": "", "d": "2/2016"}, {"body": "may ask list view component zenozeng scott", "d": "3/2016"}, {"body": "smolinari see thu mar pm scott notifications githubcom wrote may ask list view component zenozeng scott receiving mentioned reply email directly view github", "d": "3/2016"}, {"body": "thanks zenozeng scott", "d": "3/2016"}, {"body": "dropping cases manipulate data instead items transitions hook also attachdetach hooks deprecated component removed destroyed", "d": "5/2016"}, {"body": "nt abuse use components want reuse templates use partials", "d": "10/2015"}, {"body": "according spec nested tags allowed see", "d": "10/2015"}, {"body": "longer necessary longer creates anonymous child instances", "d": "10/2015"}, {"body": "yes pass props", "d": "10/2015"}, {"body": "likely passing prop correctly note need explicitly pass props using custom component ca nt help without looking actual code closing since unlikely bug", "d": "10/2015"}, {"body": "thanks quick response distilled code bunch share seems pretty simple straightforward right could definitely issue end using directive anywhere component nt think related component props section calling component thanks taking look", "d": "10/2015"}, {"body": "bryannielsen take guess say trying pass literal string prop syntax would without", "d": "10/2015"}, {"body": "treat expression try evaluate", "d": "10/2015"}, {"body": "ah absolutely right simplesmiler got overzealous converting props upgrade thanks help thanks awesome framework", "d": "10/2015"}, {"body": "passing props", "d": "10/2015"}, {"body": "ahhhh thanks", "d": "10/2015"}, {"body": "chrome removes empty tags inside options vue related", "d": "10/2015"}, {"body": "ok empty nt oct evan notifications githubcom wrote chrome removes empty tags inside options vue related reply email directly view github", "d": "10/2015"}, {"body": "ah sorry assume chrome removes tag vue starts clear might worth comment docs somewhere probably one fall trap oct kai duebbert kai mapsunitedcom wrote ok empty nt oct evan notifications githubcom wrote chrome removes empty tags inside options vue related reply email directly view github", "d": "10/2015"}, {"body": "need provide reproduction showing code causing error", "d": "10/2015"}, {"body": "hi ran updating code using older version vuerouter problem improper vlink syntax correct syntax error message could improved though", "d": "10/2015"}, {"body": "tries access key undefined access data html format would look something like", "d": "10/2015"}, {"body": "invalid key names html", "d": "10/2015"}, {"body": "wow even works arrays", "d": "10/2015"}, {"body": "hmm magic", "d": "10/2015"}, {"body": "make repro", "d": "10/2015"}, {"body": "one libraries nt cdn version make fiddle work", "d": "10/2015"}, {"body": "turns changing order complicated thought like workaround children still destroyed refs kept seems address specific issue although sure valid use case want child alive leave hook", "d": "10/2015"}, {"body": "nt quite address issue accidentally left line editing code around lot yesterday updated file parent animateout supposed something like parent supposed call method child tell animate child nt receive transition events parent animates leave happens transition calls parent parent would call child reference sufficient since methods called child el nt referenceable anymore", "d": "10/2015"}, {"body": "considered type subanimation route hook instead transition", "d": "10/2015"}, {"body": "works perfectly thank", "d": "10/2015"}, {"body": "hello similar problem await refs code work put alert test inside refsmenusenlignemloadlist put first loading give error put second loaded fine solution write code without async", "d": "12/2017"}, {"body": "solved problem beforedestroy mount", "d": "12/2017"}, {"body": "warning relaxed alpha version using old check fixed soon", "d": "10/2015"}, {"body": "excellent good hear correct assuming means attribute binding still behave expected", "d": "10/2015"}, {"body": "yes", "d": "10/2015"}, {"body": "update write like jade want begin colon like", "d": "10/2015"}, {"body": "personnaly use everywhere writing jade never bug webpack repro", "d": "10/2015"}, {"body": "think proper jade syntax separate attributes commas never issue make sure upgrade everything webpack vueloader latest version", "d": "10/2015"}, {"body": "gave shot mostly works caveat nt update whilst select box still open", "d": "10/2015"}, {"body": "squirmy thank think found reason nt initial property wo nt work properly found another problem changed object nt fired event", "d": "10/2015"}, {"body": "event fires user input nt fire set value javascript", "d": "10/2015"}, {"body": "problems actually surprised disabled thing worked set selected object try instead problem setting object nt exist select", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "unfortunately would somewhat interfere vue compilation process simple change future new vue devtool allow inspect directives bound element", "d": "10/2015"}, {"body": "fixed also introduces api custom directives easily handle params", "d": "10/2015"}, {"body": "believe missing", "d": "10/2015"}, {"body": "oh yes oo looking wrong place edit thank", "d": "10/2015"}, {"body": "fiddle used dev branch dev version guess want old syntax deprecation warnings use migration branch working rc fiddle", "d": "10/2015"}, {"body": "thanks mainly concerned anyone looking broken example doc", "d": "10/2015"}, {"body": "fixed thanks", "d": "10/2015"}, {"body": "\u8d34\u4ee3\u7801", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "see red note section passing object reference ensures child sets wo nt affect parent want completely fresh object need make deep clone", "d": "10/2015"}, {"body": "thanks", "d": "10/2015"}, {"body": "deep clone modifier something like custom modifier", "d": "3/2016"}, {"body": "weilao could use custom filter", "d": "3/2016"}, {"body": "fullfs thanks works", "d": "3/2016"}, {"body": "exactly happen modifying array reference", "d": "10/2015"}, {"body": "change keep vue model", "d": "10/2015"}, {"body": "need deep clone array", "d": "10/2015"}, {"body": "name myname name myname mon oct simon notifications githubcom wrote vueloader created custom component use html file accesstoken name moduleexports props token name pass token long string prop component seems vue handle large strings output token empty short string got problems name prop shown myname reply email directly view github", "d": "10/2015"}, {"body": "typo reason updated post", "d": "10/2015"}, {"body": "sorry replied old issue email sent github", "d": "10/2015"}, {"body": "isssue kind solved original code use prop name case could nt set property like example work", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "found problem yesterday sure intended", "d": "10/2015"}, {"body": "design", "d": "10/2015"}, {"body": "thanks quick response", "d": "10/2015"}, {"body": "added", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "html", "d": "10/2015"}, {"body": "running similar issue needing combine array object shorthands current solution something like would make sense allow multiple vbind class statements", "d": "10/2015"}, {"body": "rpkilby ca nt two attributes name use case complex enough use computed property", "d": "10/2015"}, {"body": "create array like data ab abc abcd datta qweqweqwe datta qweqweqwe datta qweqweqwe", "d": "6/2018"}, {"body": "wanted also fri oct alexandrebonaventure lt notifications githubcom wrote way assign value multiples modifiers von directive von focus reseterrordisplay input reseterrordisplay von focus input reseterrordisplay thanks reply email directly view github", "d": "10/2015"}, {"body": "much complexity almost benefit imo", "d": "10/2015"}, {"body": "like arrilot said complex could also use shorthand way readable imo", "d": "10/2015"}, {"body": "agree arrilot handler different events pretty rare use case", "d": "10/2015"}, {"body": "even use case issue irrelevant able enter input first need focus input field already called want reset error display might better watch model check valid reset errors think scenario could useful", "d": "10/2015"}, {"body": "marcvdm may something etc still hmm thin definitely useful enough modify syntax", "d": "10/2015"}, {"body": "karevn combination mouseover obsolete use", "d": "10/2015"}, {"body": "may something mouseover mousemove keyup keydown needed many times uncommon since alternative fri oct pm marc van der meulen lt notifications githubcom wrote karevn input keyup keydown combination mouseover obsolete use mousemove reply email directly view github", "d": "10/2015"}, {"body": "thanks suggestion however opinion useful enough warrant syntax adjustment adjust syntax enables something easily achieved case typing convenience addition nt play well shorthand none look right explicit", "d": "10/2015"}, {"body": "well easier thought magic happens", "d": "10/2015"}, {"body": "suppose display templates vue initialised put templates tags wrap invisible div actually think problem addressed vue question specific app code design", "d": "10/2015"}, {"body": "karevn ah thanks idea choose wrap invisible div event listening display yes bug need thought fellows", "d": "10/2015"}, {"body": "ghprod nt need display mount vue instance visible element initialisation templates stay invisible", "d": "10/2015"}, {"body": "karevn ah yappp thanks lot closed", "d": "10/2015"}, {"body": "ghprod use vcloak directive also please post questions forum issues", "d": "10/2015"}, {"body": "oevgeny ah bad didnt notice forum sorry thanks hint", "d": "10/2015"}, {"body": "oevgeny ghprod talks moment vue launched directives effect", "d": "10/2015"}, {"body": "karevn yes style display none works perfectly", "d": "10/2015"}, {"body": "animatedcss add element thanks", "d": "10/2015"}, {"body": "ghprod wow good know", "d": "10/2015"}, {"body": "oevgeny ghprod talks moment vue launched directives effect nt need vue initialized correct way hide vue templates compiled", "d": "10/2015"}, {"body": "fiddling around jsfiddle got following error result filter bound current vm ca nt way bind better ways solve problem facing", "d": "10/2015"}, {"body": "marcvdm exactly worked around app still workaround solution btw warning show fiddle replaced binding expression generates warning", "d": "10/2015"}, {"body": "hmm think watcher created deep option fix instead shallow watcher right", "d": "10/2015"}, {"body": "use case design going work deep nothing twoway bindings filtered copy nt really make sense anticipated cases like usage somehow bypassed warning check give warning scenarios", "d": "10/2015"}, {"body": "may still kind solution think possible deepwatch changes filtering result run write filter reassign initial value", "d": "10/2015"}, {"body": "nt see reasons code complexity work think next way initial object passed filter build new one array iterated filter results changed run write filter rebuild initial value always possible appspecific detail streamlined version marcvdm workaround imo", "d": "10/2015"}, {"body": "yes marignally useful feature involves lot code complexity maybe requires rewriting parts filters work although theoretically work given limited time nt see ever become priority foreseeable future free investigate submit pr feel worth effort", "d": "10/2015"}, {"body": "okay look solution thing \u043e\u043a\u0442 \u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c evan notifications githubcom \u043d\u0430\u043f\u0438\u0441\u0430\u043b yes marignally useful feature involves lot code complexity maybe requires rewriting parts filters work although theoretically work given limited time nt see ever become priority foreseeable future free investigate submit pr feel worth effort reply email directly view github", "d": "10/2015"}, {"body": "ije code example would helpful", "d": "10/2015"}, {"body": "sorry many lines project paste keypart dynamic component template look like parent vm config look like look like", "d": "10/2015"}, {"body": "sorry forget note parent vm also dynamic component", "d": "10/2015"}, {"body": "karevn thank", "d": "10/2015"}, {"body": "screen shot console warn messages", "d": "10/2015"}, {"body": "ije design behavior new versions need default values props pass prop config", "d": "10/2015"}, {"body": "declaring props enough need duplicate", "d": "10/2015"}, {"body": "looks like props properly deduped merged however seems bad idea duplicate props multiple mixins nt think mixin mechanism problem rather use mixins imo use multiple mixins serve distinct purpose two mixins overlapping responsibilities probably need rethink design", "d": "10/2015"}, {"body": "thanks duplicated props actually bad idea think remove dep require mixins component", "d": "10/2015"}, {"body": "curious imagine mixin prop need redefine prop default value component", "d": "10/2015"}, {"body": "oevgeny probably work like described docs sure props thought", "d": "10/2015"}, {"body": "oevgeny sounds like bad idea ideally nt want sub fields option merged multiple sources especially object like prop makes code hard reason hooks hand makes sense", "d": "10/2015"}, {"body": "azamatsharapov thank also think something wrong approach", "d": "10/2015"}, {"body": "bug report \u548c feature", "d": "10/2015"}, {"body": "use tries bind variable given want send hardcode string try using without colon like fixed working fiddle docs reference", "d": "10/2015"}, {"body": "thanks breakdown correct value seems getting passed get logs warning ca nt resolve component item nt everything working intended right", "d": "10/2015"}, {"body": "binding binding variables intended send literal string bind literal string using count quotes part string get notice quotes like want send literal string without bind like hope helps wrong please correct", "d": "10/2015"}, {"body": "ah right failure resolve warning indeed nt usually wrap quotes around missing component thought vbind syntax binding expressions necessarily variables since moustache syntax deprecated else would something like imagine supposed work", "d": "10/2015"}, {"body": "strip quotes seems reproducible", "d": "10/2015"}, {"body": "questions general discussion better posted forums issue list bug feature requests cutting references deep copy object simplest form", "d": "10/2015"}, {"body": "wtf document", "d": "1/2017"}, {"body": "first issue set delimiter something ambiguous inside valid javascript expressions makes difficult differentiate interpolation tag vs object literal users vue parser recommend using something obvious eg code update section invalid syntax directives expect single valid javascript expression", "d": "10/2015"}, {"body": "okay", "d": "10/2015"}, {"body": "may suggest using forums bug reporting", "d": "10/2015"}, {"body": "piece already compiled dom mounted need reomove old dom append new one", "d": "10/2015"}, {"body": "\u8fd9\u662f ie", "d": "10/2015"}, {"body": "read guide send props template", "d": "10/2015"}, {"body": "apologies looking last half hour", "d": "10/2015"}, {"body": "see working example", "d": "10/2015"}, {"body": "limitation prop syntax longer issue longer use mustaches indicate expressions props since escape slash going wontfix", "d": "10/2015"}, {"body": "good looking forward", "d": "10/2015"}, {"body": "working intended far tell initially passing items string indeed wrong type give parent initial value empty array works properly", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "\u662f\u8fd9\u6837\u7684", "d": "10/2015"}, {"body": "thanks", "d": "8/2016"}, {"body": "", "d": "9/2018"}, {"body": "different scoping rules deprecated use nonminified version fiddles see warnings", "d": "10/2015"}, {"body": "replaced new api use build migration warnings also see latest doc rcvuejsorg", "d": "10/2015"}, {"body": "mean broken seems replacing default header correctly", "d": "10/2015"}, {"body": "bad must tired yes worked realized later side note unrelated comment nt looked vue andor web development today reason home finding vue much simpler awesome von applied want handle events click lost focus button", "d": "10/2015"}, {"body": "please post questions forumvuejsorg instead also note syntax different", "d": "10/2015"}, {"body": "transition", "d": "10/2015"}, {"body": "thanks", "d": "10/2015"}, {"body": "compat issue vuerouter beta fixed next release router", "d": "10/2015"}, {"body": "thanks reply check today curiosity happened made break testing seemed like route components properly registered root component properly registered aswell super frustrating bug happens clue causes", "d": "10/2015"}, {"body": "core going internal api changes final release stable type breakage longer happen", "d": "10/2015"}, {"body": "hey tested version issue idea", "d": "10/2015"}, {"body": "trying access components nested components beta strict mode default use alpha releases upgrading get deprecation warnings mon oct kfirba notifications githubcom wrote hey tested version issue idea reply email directly view github", "d": "10/2015"}, {"body": "sure mean define components root vue instance router called component file define routes components access every component ancestors defined case access components defines bootstrap file code js import requirements using browserify windowvue require vue windowvuerouter require vuerouter insert vuerouter vueresource vue vueuse vuerouter vueuse require vueresource import actual routes aliases import configrouter routes create router object set options const router new vuerouter inject routes vuerouter object configrouter router bootstrap app const app vueextend require appjs routerstart app app appjs js moduleexports routesjs js moduleexports component defined use code worked fails returns error components defined btw mean beta release strict mode", "d": "10/2015"}, {"body": "longer allows child components access ancestor assets either register globally explicitly depend child components mon oct pm kfirba notifications githubcom wrote sure mean define components root vue instance router called component routesjs file define routes components access every component ancestors defined case access components appjs defines bootstrap file code import requirements using browserifywindowvue require vue windowvuerouter require vuerouter insert vuerouter vueresource vue vueuse vuerouter vueuse require vueresource import actual routes aliases import configrouter routes create router object set options itconst router new vuerouter inject routes vuerouter object configrouter router bootstrap appconst app vueextend require appjs routerstart app app appjs moduleexports template require apphtml data function return user null token null authenticated false business false admin false components navcomponent require componentsnavjs footercomponent require componentsfooterjs routesjs moduleexports configrouter function router home component navcomponent footercomponent defined use code worked fails returns error components defined btw mean beta release strict mode reply email directly view github", "d": "10/2015"}, {"body": "expected mutate user object replacing", "d": "10/2015"}, {"body": "create script js shell creates branch add new compiled code push branch like ghpages give look", "d": "10/2015"}, {"body": "posva know auto compile hard automatically run rebase revert something like nt think elegant maintain one branch best approach templateurl", "d": "10/2015"}, {"body": "want one branch keep folder release honestly branch release force pushing nt issue furthermore branch follows different path wo nt deal kind issues", "d": "10/2015"}, {"body": "think dir another branch nt like trying something ajax may works way", "d": "10/2015"}, {"body": "imho complicating things make messier confused master branch another ghpages branch release hosted github messy lot people using technique", "d": "10/2015"}, {"body": "um believe dist part git repository really hard accept", "d": "10/2015"}, {"body": "talking ghpages want host page github deploy content somehow common way separated ghpages branch", "d": "10/2015"}, {"body": "two branches nt need dist folder inside master branch", "d": "10/2015"}, {"body": "plan support somewhat simulate using async components", "d": "10/2015"}, {"body": "know two ways neither like", "d": "10/2015"}, {"body": "afraid implement sun oct pm kane blueriver notifications githubcom wrote know two ways neither like reply email directly view github", "d": "10/2015"}, {"body": "got thanks posva", "d": "10/2015"}, {"body": "another food thought would think allowing template function returns new dom elements nt need cloned", "d": "10/2015"}, {"body": "seems benefits approach inline syntax highlighting jsx possible compile jsx string instead", "d": "10/2015"}, {"body": "use things like return string course lose time creating nodes transform string parsed back dom nodes figured since take string create dom nodes via parsing functions nodes directly supplied would skip step thus gain time short template gets assigned nodes compiler would clone missing something way compiler working", "d": "10/2015"}, {"body": "actually template parser gets direct node simply clones childnodes mon oct christophe eymard notifications githubcom wrote use things like outerhtml return string course lose time creating nodes transform string parsed back dom nodes figured since take string create dom nodes via parsing functions nodes directly supplied template would skip step thus gain time short template gets assigned nodes compiler would clone missing something way compiler working reply email directly view github", "d": "10/2015"}, {"body": "yes enclosed everything far supposed nodes present dom get id would much hassle change behaviour textvuetemplate attribute nt recall mime use clone childnodes otherwise clone everything reason limited cloning childnodes", "d": "10/2015"}, {"body": "keeping behavior consistent uses inner content excluding outer node assume using babel plugin transpiling would something like work", "d": "10/2015"}, {"body": "ah actually quite nice think close issue anyway realize requestsuggestion probably vue scope thank time", "d": "10/2015"}, {"body": "thanks rc site previewing docs examples updated moved officially vuejsorg", "d": "10/2015"}, {"body": "never designed work situations like say wontfix", "d": "10/2015"}, {"body": "please post questions forums yes change delimiters", "d": "10/2015"}, {"body": "sorry thanks quick response looked documentation config options nt able find exactly looking thanks", "d": "10/2015"}, {"body": "honest highly doubt accuracy methodology chrome timeline profiling memory snapshots show inconsistent results using timeline profiler record node counts shows node counts increasing however try identify leak comparing memory snapshots dom leaks found author drool actually opened issue long time ago see comment also see paul irish comment basically saying forced garbage sweeps may always clean nodes fact already detached way track node leaks using memory snapshots comparison todomvc app using latest beta snapshots diffs clean nothing even look reasonable explanation snapshots force cleaner gc profiling mechanisms beyond control someone tells vue dom leaks testing using profiling mechanism tell leaks tell leaks coming", "d": "10/2015"}, {"body": "thanks clarifying", "d": "10/2015"}, {"body": "nt use hook", "d": "10/2015"}, {"body": "alexandrebonaventure called component insertion need onetime event dom insertion dom related initial jobs", "d": "10/2015"}, {"body": "need sort juggling timeline domdependent create hook hook", "d": "10/2015"}, {"body": "example nt clear added key parts part gsap animation library surely domdependent talking gsap example use case jquery plugins many libraries domdependent ca nt initiate hook elements time even compiled hook libraries wo nt work elements nt inserted dom tree", "d": "10/2015"}, {"body": "still possible use though", "d": "10/2015"}, {"body": "ok acceptable solution", "d": "10/2015"}, {"body": "use development build see warning tells nt", "d": "10/2015"}, {"body": "replaced slightly different semantics see", "d": "10/2015"}, {"body": "simplesmiler thank", "d": "10/2015"}, {"body": "see", "d": "10/2015"}, {"body": "nt mean required mean fri oct pm christopher case lt notifications githubcom wrote vue creating component twoway binding specified required warning still thrown example var component vuecomponent props show type boolean default false twoway true prints warning vue warn prop show expects twoway binding type reply email directly view github", "d": "10/2015"}, {"body": "could fixed reliable visibility check determining css transitions see commit", "d": "10/2015"}, {"body": "move vuerouter repo instead also note version using ideally provide repro", "d": "10/2015"}, {"body": "really necessary whenever object passed vue instance set already reactive object also becomes reactive", "d": "10/2015"}, {"body": "create communication storage like let store new vue data path data true let view new vue data storepathtosomedataits watch function consolelog update must use watch code think first example see pretty really", "d": "10/2015"}, {"body": "astaroverov please read nt think understand reactivity works vue", "d": "10/2015"}, {"body": "thx helped", "d": "10/2015"}, {"body": "actually happening tables", "d": "10/2015"}, {"body": "hmm similar custom elements inside tables allow certain elements inside guess need implement something like", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "turns even implement still quite awkward use slots table elements parent template directly render table elements gets rendered basically table elements appear naked ignored content transclusion even starts suggestion always transclude nontable elements use inside instead", "d": "10/2015"}, {"body": "hmm interesting impossible insert headers columns fly", "d": "10/2015"}, {"body": "think looking vpre updated example", "d": "10/2015"}, {"body": "ah yes indeed thank", "d": "10/2015"}, {"body": "problem", "d": "10/2015"}, {"body": "provide reproduction", "d": "10/2015"}, {"body": "inactive", "d": "10/2015"}, {"body": "think need use development version migration also turn debug mode vue show warnings", "d": "10/2015"}, {"body": "oevgeny thanks work", "d": "10/2015"}, {"body": "attribute interpolation mustaches inside attributes works allowed inside native attributes partial vuespecific attribute must use reactive binding", "d": "10/2015"}, {"body": "yeah understand issues section correct", "d": "10/2015"}, {"body": "wrong shorthands", "d": "10/2015"}, {"body": "sorry clear shorthand syntax work getattribute", "d": "10/2015"}, {"body": "first checks static nt exist checks dynamic one", "d": "10/2015"}, {"body": "dynamic one expects expression evaluates partial id static one expects literal partial id", "d": "10/2015"}, {"body": "ask forum", "d": "10/2015"}, {"body": "thanks reporting vue using check browser returns looks like bug chrome valid elements return unknown instead filed bug chrome ignore warning also warning show use production build", "d": "10/2015"}, {"body": "chrome team considers wontfix moment added extra rule exclude affected elements check", "d": "10/2015"}, {"body": "oh chrome issue bad thanks patch headsup production build nt notice", "d": "10/2015"}, {"body": "thing happens details tag vue", "d": "5/2016"}, {"body": "thing happening tags firefox", "d": "6/2016"}, {"body": "gangwolf addressed", "d": "6/2016"}, {"body": "got chrome still issue", "d": "6/2017"}, {"body": "nt still issue open issue repro take look", "d": "6/2017"}, {"body": "element nt", "d": "6/2017"}, {"body": "right linusborg thought getting error", "d": "6/2017"}, {"body": "sorry tag clearly spent much time writing js forgetting html", "d": "6/2017"}, {"body": "vshow works dom elements replacing ca nt use display none etc try vif instead", "d": "10/2015"}, {"body": "replacing dom works case", "d": "10/2015"}, {"body": "component contains another component makes parent component fragment instance two components share root node general avoid components contain another component would first place", "d": "10/2015"}, {"body": "several object types displayed similar way inner component handles presentation several outer ones contain business logic specific particular type object pass data inner component instance", "d": "10/2015"}, {"body": "add warning case future release simple solution wrap component outer element html use instead", "d": "10/2015"}, {"body": "specific issue please nt understand expecting", "d": "10/2015"}, {"body": "expect component created specific id id change data model component iterate objects id property achieve using trackby id even without trackby components never reused new objects collection iterating string array different looks like bug", "d": "10/2015"}, {"body": "primitive values always reuse instances like default always use objects expect positiontracking full rerendering", "d": "10/2015"}, {"body": "makes sense keep object component bound trackby id use full rerendering objects also reasonable keep id bound component use full rerendering use case following iterate ids objects want load object db created instead forced watch id reinitialize component whenever id changes initialization logic contain multiple steps component might appear unexpected intermediate states", "d": "10/2015"}, {"body": "primitive values unique identities array contains two duplicate primitive values reliable way know component correspond also iterating ids load object inside components sounds inefficient one http request every item better way approach fetch objects one request first iterate actual data", "d": "10/2015"}, {"body": "nt thought duplicates array objects also object several positions fundamentally different primitives already handle way duplicate primitives may occur often duplicate objects scenarios case understand defaults flag like trackbyidentity iterate objects efficiency also issue since cache load related objects every component wonder put loading logic component initialization including loading root object", "d": "10/2015"}, {"body": "would actually warn array contains duplicate objects agree using default behavior based value types confusing use caching mechanism raise warning prompting duplicate values found stuck still id proper data reload", "d": "10/2015"}, {"body": "like anyway much straightforward use push items array try make interface datadriven whenever possible avoid relying imperative adhoc manipulations", "d": "10/2015"}, {"body": "use vue google maps api infowindow concept window appears click marker map windows dynamically added dom google maps api informs us window help domready event want attach vue component newly appeared window use inline template way template provided inside component would meet glitch tried variants get rid glitch inline template solution nt see option put regards", "d": "10/2015"}, {"body": "need could much simpler", "d": "10/2015"}, {"body": "please close issue respect work much bug feature solution cover topic aware without inline templates works perfectly said need use inline template otherwise glitch rendering video google maps api dictates rules places html dom apply template afterwards see text falling infowindow rendering use methods framework documentation nt work want help create framework better tried several variants narrowed issue came reproduction issue simply closed completely understand ca nt require anything framework opensource expect real issue would investigated free time please reopen issue", "d": "10/2015"}, {"body": "reproduction misusing option return selector option must return real element returning selector always selects first element already compiled bug framework", "d": "10/2015"}, {"body": "thanks makes sense case last question somehow pass variable object would visible inside method tried yet available call somehow put dynamic inside function would allow something like nt rendering works fine reason change objects done inside newly created objects affect application nt managed reproduce short regards", "d": "10/2015"}, {"body": "pavelpolyakov ever sort issue addchild generated component sharing data earlier created addchild trying add modal via addchild cause ca nt figure markup experiencing thing certainly appropriate way ca nt seem find frowning", "d": "2/2016"}, {"body": "ah looks like sort quite issue though seems keeps hunting telescope", "d": "2/2016"}, {"body": "found exclamation stuckouttonguewinkingeye seems passing construction options parameter vs etc magically works left posterity tophat", "d": "2/2016"}, {"body": "bigbluehat please paste rich code part nt understood solution comment would interesting check regards", "d": "2/2016"}, {"body": "pavelpolyakov think dealing different issues however basic difference js var componentdef template data function return name var app vue methods addcomponent function addchild componentdef seemed happening ever adding fully formed child component rather extended component based first parameter since nonfunctionbased component definition look identical vue nt know care mis using fixed smile", "d": "2/2016"}, {"body": "yeah aware vue longer modify", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "vprimachenko definitely recommend putting pr", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "pr would proceed contribution guidelines states checkout topic branch dev merge back dev yet lives pullrequest github contain single branch also nt feel comfortable making public fork submit line patch abandon later", "d": "10/2015"}, {"body": "vprimachenko please pr beta branch handle backporting alpha branch pr totally fine people submit fixes time feel comfortable fork anything way like nobody gon na judge fork", "d": "10/2015"}, {"body": "merged", "d": "10/2015"}, {"body": "fixed", "d": "9/2017"}, {"body": "easy implement although curious particular use case", "d": "10/2015"}, {"body": "came across trying migrate since separated ca nt implement logic function seems default values flexible case components get default values local cache cache service available vm", "d": "10/2015"}, {"body": "see thanks explanation", "d": "10/2015"}, {"body": "thanks lot evan", "d": "10/2015"}, {"body": "hmm found problem larger knows parsers like char attribute names", "d": "10/2015"}, {"body": "karevn means crappy parser valid html attribute char", "d": "10/2015"}, {"body": "constructive", "d": "10/2015"}, {"body": "karevn current syntax correctly parsed supported browser commonly used nodejs parsers like parser implemented correctly according html spec able handle syntax unfortunate case happens notsostandardcompliant parser toolchain fixed nt see reason change vue syntax someone could happen write non standardcompliant html parser", "d": "10/2015"}, {"body": "tell anything changing syntax least would pragmatic become defensive think comprehensive testing surrounding ecosystem make sure vue works fine tools", "d": "10/2015"}, {"body": "apologize sound defensive opening issue implies think something done vue core address problem nothing vue core opened issue vueloader directly htmlloader instead thu oct pm nikolay karev notifications githubcom wrote tell anything changing syntax least would pragmatic become defensive think comprehensive testing surrounding ecosystem make sure vue works fine tools reply email directly view github", "d": "10/2015"}, {"body": "see figured fixed problem another project code actually still think worths retest vue surrounding frameworks webpack browserify etc release preventive action", "d": "10/2015"}, {"body": "sure point beta thu oct pm nikolay karev notifications githubcom wrote see figured fixed problem another project code actually still think worths retest vue surrounding frameworks webpack browserify etc release preventive action reply email directly view github", "d": "10/2015"}, {"body": "karevn save life updating vue", "d": "11/2015"}, {"body": "please provide reproduction", "d": "10/2015"}, {"body": "sorry new fiddle maybe wrong sorry", "d": "10/2015"}, {"body": "listen event created hook instead ready hook", "d": "10/2015"}, {"body": "created hook nt catch either", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "dennisver fixes issue thank", "d": "10/2015"}, {"body": "thank", "d": "9/2015"}, {"body": "\u4e2d\u6587\u6587\u6863\u7684 issue", "d": "9/2015"}, {"body": "repro note triggers event listeners instance", "d": "9/2015"}, {"body": "stumble upon problem happens subchild repro bug return true instances works", "d": "10/2015"}, {"body": "use trigger events siblings", "d": "10/2015"}, {"body": "thelinuxlich thougt done mutual parent handles event prop sibling handle change prop interested ways", "d": "10/2015"}, {"body": "sibling dispatches parent gets message broadcasts another message another sibling gets much pingpong nt think", "d": "10/2015"}, {"body": "thelinuxlich nt thinking another message prop sibling thought props communicating events made communicate please confirm", "d": "10/2015"}, {"body": "posva seems recommendation section wiki binding syntax reference von also listen custom vue events emitted via vm emit used child component idea props events constitute public api component props passing data events handling actions", "d": "10/2015"}, {"body": "yeah read smile", "d": "10/2015"}, {"body": "turns fixed beta forgot backport alpha fixed", "d": "10/2015"}, {"body": "design template passed via evaluated different context parent vue instance context see", "d": "9/2015"}, {"body": "design see", "d": "9/2015"}, {"body": "pass parameters slot parent", "d": "1/2016"}, {"body": "alioygur mean give example", "d": "1/2016"}, {"body": "please report doc issues docs repo better yet submit pr fixes", "d": "9/2015"}, {"body": "please post questions forum", "d": "9/2015"}, {"body": "plans adding utility method something similar access said clean data eg vmdata vm datadata vmnestedobjectdata etc maybe note section api documentation", "d": "10/2015"}, {"body": "furey think simple enough need extra api method feel free send pr docs", "d": "10/2015"}, {"body": "sure proseterminology done", "d": "10/2015"}, {"body": "keep mind case date turns string jsonparse jsonstringify new date date string utc cases would better use deep cloning use custom replacer", "d": "10/2015"}, {"body": "use content insertion", "d": "9/2015"}, {"body": "btw please submit questions forum issues bugs", "d": "9/2015"}, {"body": "asking something related nonstrict mode deprecated guess right way generate component first party extend override assets third party js var grid require grid note third party component note first party component function gridfactory partials return template partials cell partialscell var cell note partial new vue el components gridone gridfactory cell cell gridtwo gridextend partials cell cell think worth discussing forum", "d": "9/2015"}, {"body": "tried implementing content insertion sadly unable access local scope deal breaker try way simplesmiler thanks", "d": "9/2015"}, {"body": "thanks prompt fix", "d": "9/2015"}, {"body": "yep moment use custom directive like", "d": "9/2015"}, {"body": "seofood sharing directive stuckouttongue", "d": "9/2015"}, {"body": "sure javascript moduleexports bind function thiseladdeventlistener click function e epreventdefault", "d": "9/2015"}, {"body": "would useful project seofood tried adding unbind clause code cleanup case stops working use combination vif directive sure even necessary unbind", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "created complete version automatically handles button anchor form elements find gist", "d": "9/2015"}, {"body": "", "d": "10/2015"}, {"body": "would make sense always call certain events eg particular legit use cases nt want preventdefault three cases", "d": "10/2015"}, {"body": "guess makes sense element von directive", "d": "10/2015"}, {"body": "skyrpex course talking context behavior", "d": "10/2015"}, {"body": "thing consider behavior click modifier keys ctrl shift andor otherthanleft mouse button nothing infuriating app ignoring middle click open link new tab", "d": "10/2015"}, {"body": "eg click easily imagine wanting multiple things happen click like closing ancestor components thu oct pm denis karabaza notifications githubcom wrote thing consider behavior click modifier keys ctrl shift andor otherthanleft mouse button nothing infuriating app ignoring middle click open link new tab reply email directly view github", "d": "10/2015"}, {"body": "maybe special option like ko", "d": "10/2015"}, {"body": "think make explicit approach applied match developer expectations may yet another attribute name modifier like", "d": "10/2015"}, {"body": "hmm nice suggestion attribute modifier think call automatically want opposite", "d": "10/2015"}, {"body": "thelinuxlich looks good problem events like click bubble default events like mouseover bubble cases defaults different different event types look good", "d": "10/2015"}, {"body": "defaults different different event types would horrible thu oct pm nikolay karev notifications githubcom wrote thelinuxlich looks good problem events like click bubble default events like mouseover bubble cases defaults different different event types look good reply email directly view github", "d": "10/2015"}, {"body": "agreed keep original behavior want", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "good options", "d": "10/2015"}, {"body": "options proposed karevn look better opinion remind functions first time ever heard laughing funny name btw", "d": "10/2015"}, {"body": "event bubbling event capturing event propagation different things", "d": "10/2015"}, {"body": "rastishka bubble propagation thing difference vs though like modifier approach fact thinking exactly karevn proposed went sleep yesterday seems rare specific use case think fine leave javascript land", "d": "10/2015"}, {"body": "like idea always preventing default unless specified time adding click handler element default behavior desired html click click click", "d": "10/2015"}, {"body": "anyone know angular definitely prevent events submit comes mind", "d": "10/2015"}, {"body": "josephsilber looks like submit one ng docs ngsubmit additionally prevents default action form means sending request server reloading current page form contain action dataaction xaction attributes", "d": "10/2015"}, {"body": "youngsteveo seems harder remember think like without modifier behavior native browser behavior means called means called seems much simpler conceptually", "d": "10/2015"}, {"body": "landed alphabeta branches modifiers used together", "d": "10/2015"}, {"body": "syntax working angular way cases example", "d": "10/2015"}, {"body": "nervgh use", "d": "10/2015"}, {"body": "thanks", "d": "10/2015"}, {"body": "could please put everything single reproduction next time use would make much easier debug", "d": "9/2015"}, {"body": "original usage wrong correct version note quotes around makes path search aka searching original code evaluating expression results also filter instead", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "finico required mainjs several time ok package init", "d": "9/2015"}, {"body": "honghe totally ok webpack inline calls module anywhere need instantiated", "d": "9/2015"}, {"body": "simplesmiler thank one question use replace packs code ca nt find definition", "d": "9/2015"}, {"body": "honghe nt think answer really depends implemented webpack update future please post questions forum tracker bugs", "d": "9/2015"}, {"body": "properties start underscore proxied vm instance may conflict vue internal private properties access template", "d": "9/2015"}, {"body": "got thanks reply good luck release", "d": "9/2015"}, {"body": "homepage css issue vue bug", "d": "9/2015"}, {"body": "sorry necro seems issue deeper cf html editor key editor key outer loop changed input lose value blur", "d": "9/2015"}, {"body": "actually separate issue opening new one", "d": "9/2015"}, {"body": "use ionic components vuejs collectionrepeat mobile ui", "d": "12/2015"}, {"body": "chenjiecnooc nt see related topic ionic depends angular angular component directives compatible vue require almost complete rewrite thing reuse ionic css", "d": "1/2016"}, {"body": "eljefedelrodeodeljefe cspcompliant build", "d": "9/2015"}, {"body": "thanks noting examples updated accordingly beta", "d": "9/2015"}, {"body": "many problems fiddle computed properties exposed component instance original data fiddle setting true raw data object actual component instances need use list access component instances nt know calling parent please read section carefully make sure understand method also pass number assume index remove item index need use native methods like removal getter check rather fixed fiddle", "d": "9/2015"}, {"body": "thanks evan reply seems misunderstood components well following suggestion code worked like charm first using methods since nt work somehow used methods methods working original code thank guiding right direction ritesh", "d": "9/2015"}, {"body": "retrieving multiple templates async results many http requests general bad production recommended approach use build tool like browserify webpack gives file modularity development ability bundle like production see vue treats components basic building block better load components asynchronously rather templates achieve webpack auto bundlesplitting vue async component feature", "d": "9/2015"}, {"body": "needs cost templates loads almost never consideration webpack adds significant level complexity nt feel need browserify hand used projects would play rather nicely babel direction leaning aside async component support actually really interesting little test case electron app wrote small component loader loads html disk approach could used anyone wishing load html templates threw gist case anyone interested", "d": "9/2015"}, {"body": "exposed", "d": "9/2015"}, {"body": "vue detect changes add afterwards set show variable data object also use method look", "d": "9/2015"}, {"body": "vue statement \u5fc5\u987b\u5728 js", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u4f60\u53ef\u4ee5\u8fd9\u6837", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u4e0d\u597d\u610f\u601d \u6211\u60f3\u95ee\u4e0b \u5982\u4f55\u7ed1\u5b9a\u591a\u79cd\u4e8b\u4ef6 \u6211\u53ea\u770b\u5230\u5355\u4e2a\u7684\u4f8b\u5b50 \u5982", "d": "10/2015"}, {"body": "\u54e6 \u6211\u770b\u5230\u4e86\u8fd9\u4e2a \u662f\u7528\u9017\u53f7\u9694\u5f00\u5417", "d": "10/2015"}, {"body": "\u6211\u53d1\u73b0\u8981\u8fd9\u6837\u624d\u4e0d\u4f1a\u62a5\u9519 \u4f46\u6587\u6863\u91cc\u6ca1\u6709\u63d0\u5440", "d": "10/2015"}, {"body": "expect use case evaluated topmost scope work", "d": "9/2015"}, {"body": "yes misunderstood scoping rules everything working fine without thanks", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "please move questions forum", "d": "9/2015"}, {"body": "sorry new", "d": "9/2015"}, {"body": "see workaround", "d": "9/2015"}, {"body": "thanks much thelinuxlich went sure proper approach works far", "d": "9/2015"}, {"body": "glad worked", "d": "9/2015"}, {"body": "nt work filters however", "d": "9/2015"}, {"body": "yeah suggest use computed property", "d": "9/2015"}, {"body": "thanks works great", "d": "9/2015"}, {"body": "issue \u53ea\u5904\u7406 bug \u548c feature", "d": "9/2015"}, {"body": "thanks anyway share problem right place later using english best ability way forum url mentioned correct may right thanks solving problem", "d": "9/2015"}, {"body": "common parent parent instead child", "d": "9/2015"}, {"body": "simplesmiler use mvvm frameworks like angular avalon directive scope anywhere html document ca nt really done vue", "d": "9/2015"}, {"body": "kxxoling angular avalon simply scan whole page vue nt finer control part page put vue control want whole page", "d": "9/2015"}, {"body": "manage data one vue model vue supports nested scope decide use router lately worrying vue whole document get side effects btw use chinese make better explanation good english communication", "d": "9/2015"}, {"body": "kxxoling vue supports custom components instance component viewmodel ability pass data instance hierarchy via props think component elementdirectives angular", "d": "9/2015"}, {"body": "simplesmiler case little data shared need one attribute model whereas main interactive part easy way share data rather using hook manually change data", "d": "9/2015"}, {"body": "kxxoling instances may share data reference would recommend makes dependency implicit js var commondata var new vue el data commondata var new vue el data commondata", "d": "9/2015"}, {"body": "kxxoling look docs component props", "d": "9/2015"}, {"body": "simplesmiler works thanks lot nope thought would higher class functions nt get started study yet using", "d": "9/2015"}, {"body": "kxxoling component core vue recommend read guide get idea", "d": "9/2015"}, {"body": "thought feature thanks", "d": "9/2015"}, {"body": "javascript example", "d": "9/2015"}, {"body": "pretty sure never meant work way point filtering boolean", "d": "9/2015"}, {"body": "directives takes single javascript expression object literal use filter syntax inside javascript expressions add filters end directive filter would need process object instead string also recommended use computed properties binding value gets complicated", "d": "9/2015"}, {"body": "add use methods achieve something similar desired syntax", "d": "9/2015"}, {"body": "use bindings apply runtime", "d": "8/2017"}, {"body": "fixed", "d": "9/2015"}, {"body": "yeah known issue autocasting current prop syntax longer case using new prop syntax", "d": "9/2015"}, {"body": "\u7a81\u7136\u60f3\u5230\u8bbe\u7f6e vueconfigasync provinceid \u611f\u89c9\u5f02\u6b65\u6a21\u5f0f \u4e0b\u7684select", "d": "9/2015"}, {"body": "\u8bf7\u7528 jsfiddle \u7ed9\u4e2a\u91cd\u73b0", "d": "9/2015"}, {"body": "put rule english github", "d": "9/2015"}, {"body": "allanfreitas recommended use english would nt make required chinese users nt feel comfortable simply ca nt accurately describe issue english", "d": "9/2015"}, {"body": "closing inactivity", "d": "9/2015"}, {"body": "\u5982\u679c\u4f60\u77e5\u9053", "d": "9/2015"}, {"body": "ca nt use styles", "d": "9/2015"}, {"body": "good practice rely default whitespace use css instead", "d": "9/2015"}, {"body": "far know mobile os disallows programmatically triggering input behaviors eg raise keyboard trigger date picker works user triggered input nothing vue", "d": "9/2015"}, {"body": "ask use case nt mind mean usage general transitions would work element changes state might misunderstanding would trigger transition without changing element state", "d": "9/2015"}, {"body": "yes course jfiddle trying show painful animate element transition system thought handle leaving entering dom trying trigger animation place without removing element like page could useful also plenty stuff like trigger shake form validation fail etc clear thanks", "d": "9/2015"}, {"body": "internal transition system provided handles tricky parts around insertingremoving elements together css transitions insertingremoving stuff need internal transition system trigger css transition setting css style toggling css classes use external animation library anything want example", "d": "9/2015"}, {"body": "triggering specific animation demand feature like similar usecase element could simply supply class remove animation least nt control class lifetime strange vue goes great length support something like flip method implement custom triggers", "d": "6/2017"}, {"body": "maybe could provided something like directive edit also see discussion possible workarounds", "d": "3/2018"}, {"body": "according contribution guide questions vuejsdiscussion", "d": "9/2015"}, {"body": "sorry moved", "d": "9/2015"}, {"body": "\u7528 csp csp", "d": "9/2015"}, {"body": "\u9488\u5bf9csp\u505a\u4e86\u517c\u5bb9\u5904\u7406\u7684", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u611f\u8c22\u4f5c\u8005 esprima\u6da8\u59ff\u52bf\u4e86", "d": "9/2015"}, {"body": "\u4f60\u662f\u7ed9 set \u6765\u5efa\u5c5e\u6027", "d": "9/2015"}, {"body": "really annoying see issues chinese traduction nt always reliable nt making effort one handle question ps english nt native language either", "d": "9/2015"}, {"body": "fnlctrl \u8bd5\u8fc7 set \u4e86 \u4e5f\u4e0d\u884c", "d": "9/2015"}, {"body": "posva sorry boss chinese mine native language easy known use chinese raise issue en version question mustache bindings model view disabled detail app runs well local server mock data run real server real data one sections view update model data get server async sever response data updated view keep image attached data consoled looks set get function missed need finish data operate vue instantiation try set function also make effort thanks", "d": "9/2015"}, {"body": "disabled actually probably never set read section make sure provide reproduction \u91cd\u73b0 describing issue almost never helps", "d": "9/2015"}, {"body": "recommend posting different language english chinese find hard express posva look positive side learned new word today \u91cd\u73b0 reproduction smile", "d": "9/2015"}, {"body": "azamatsharapov use word sexual reproduction reproduction saying aftrer looking single meaning character", "d": "9/2015"}, {"body": "posva \u91cd\u73b0 literally means recurrence chinese \u91cd chong \u73b0 xian appearanceoccurence offtopic", "d": "9/2015"}, {"body": "indeed offtopic kinda fun smile", "d": "9/2015"}, {"body": "posva idea saying fnlctrl made clear think anyways let see \u91cd\u73b0 issue", "d": "9/2015"}, {"body": "thanks issue fixed init data vue instantiation \u5b9e\u4f8b\u5316", "d": "9/2015"}, {"body": "use case component switching tabs similar angular material tabs looks like rendered component problems without directive wo nt work option ignored wo nt appear decide live solve problem add every time use annoying", "d": "9/2015"}, {"body": "sensible api without need using directive component created dispatches event parent register", "d": "9/2015"}, {"body": "wo nt work define within even see fiddle sorry typo works fine thanks", "d": "9/2015"}, {"body": "still needs work fiddle", "d": "9/2015"}, {"body": "nt think private component import together parent component", "d": "9/2015"}, {"body": "conceptually really private component never used elsewhere outside nothing capture dispatched events developers importing suffice usage intuitive otherwise needs documented every single ui component peer dependency", "d": "9/2015"}, {"body": "developer needs aware private sat sep pm fnlctrl notifications githubcom wrote conceptually tab really private component tabs tab dependency tabs peer dependency tab never used elsewhere outside tabs nothing capture dispatched events developers importing tabs suffice usage intuitive otherwise needs documented every ui component peer dependency reply email directly view github", "d": "9/2015"}, {"body": "ok private would better relationship dependency explicitly specified something like option injected parent vm case componentsdirectives otherwise using component means looking docs finding possible dependencies including parent vm exist", "d": "9/2015"}, {"body": "nt think really bad like composition rather dependency sat sep pm fnlctrl notifications githubcom wrote ok private would better relationship dependency explicitly specified something like dependency option injected parent vm case body componentsdirectives otherwise using component means looking docs finding possible dependencies including parent vm exist reply email directly view github", "d": "9/2015"}, {"body": "ok guess live thanks", "d": "9/2015"}, {"body": "read section component scope works using inside child component template", "d": "9/2015"}, {"body": "record use inlinetemplate component get directive working", "d": "9/2015"}, {"body": "read component scope communication instances still could nt figure clean way currently implementing tabs component would look like gets rendered directive intended dispatch event component registering current element content tab angular approach work used inside template tried adding still wo nt work directive function points instead understand reason compiled scope ca nt use pass current element tl dr actually need something added attribute directive prop whatever child elementcomponent execute function like dispatching event passing argument demonstrated guide without need manually defined child component definition would kindly give advice", "d": "9/2015"}, {"body": "thoughts think need directive uses scope component attached without defined component option like angularjs", "d": "9/2015"}, {"body": "ok found solution inside directive bind function use access scope component attached maybe provide public property accessing prefixed private properties nt look like quite right thing", "d": "9/2015"}, {"body": "please post questions vuejsdiscussion", "d": "9/2015"}, {"body": "oops sorry", "d": "9/2015"}, {"body": "use handle update", "d": "9/2015"}, {"body": "options array replaced nt work", "d": "9/2015"}, {"body": "idea seems like problem", "d": "9/2015"}, {"body": "got working ugly hack consider something similar example", "d": "9/2015"}, {"body": "html new vue el app components comp require path comp data let index return function createnode const node data index childnodes const l mathfloor mathrandom let lt l nodechildnodes createnode see pen bokvvo texvnars terencez codepen", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "vuejs", "d": "9/2015"}, {"body": "indexcoffee templatehtml html nodeareaname", "d": "9/2015"}, {"body": "terencez", "d": "9/2015"}, {"body": "terencez", "d": "9/2015"}, {"body": "\u662f\u5728 webpack progress colors watch", "d": "9/2015"}, {"body": "\u5728\u4e0b\u4f7f\u7528 webpack \u6253\u5305\u751f\u6210 \u6811\u72b6\u89c6\u56fe \u53ea\u751f\u6210\u4e86\u7b2c\u4e00\u7ea7\u8282\u70b9 componentstreeshowindexcoffee componentstreeshowtemplatehtml html nodeareaname", "d": "10/2015"}, {"body": "componentstreeshowchildindexcoffee componentstreeshowchildtemplatehtml html nodeareaname componentstreeshowindexcoffee componentstreeshowtemplatehtml html nodeareaname", "d": "10/2015"}, {"body": "\u9012\u5f52\u8c03\u7528\u975e\u5168\u5c40\u6ce8\u518c\u7684\u7ec4\u4ef6\u9700\u8981\u7ed9\u7ec4\u4ef6\u4e00\u4e2a", "d": "10/2015"}, {"body": "componentstreeshowindexcoffee componentstreeshowtemplatehtml html nodename \u4f20\u5165\u7ed3\u6784\u5316\u6570\u636e\u6765\u4f7f\u7528 html", "d": "10/2015"}, {"body": "componentstreeshowindexcoffee", "d": "10/2015"}, {"body": "applies autofill login pages", "d": "9/2015"}, {"body": "tried autofillevent polyfill original angular thread polyfill correctly fires change event vue able catch", "d": "9/2015"}, {"body": "meh polyfill works jqueryangular guess need even generic polyfill", "d": "9/2015"}, {"body": "autocomplete seems work fine case browser autofills page load", "d": "9/2015"}, {"body": "actually issues initial page load later autofill separate form polyfill also nt appear work even though jquery loading", "d": "9/2015"}, {"body": "try vue instance hook following", "d": "9/2015"}, {"body": "nt fix sadly added notice everything autofilled except password input click anywhere dom login button gets enabled perhaps security feature", "d": "9/2015"}, {"body": "saying email data updated password", "d": "9/2015"}, {"body": "email appears loaded even without polyfill perhaps related", "d": "9/2015"}, {"body": "sounds like browser autofill implementation issue btw version vue using", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "update vue autofills fine firefox sure chrome password manager nt work anyway thanks looking issue", "d": "9/2015"}, {"body": "theoretically always wait short period page load force trigger events input fields unless chrome security limitations approach", "d": "9/2015"}, {"body": "", "d": "9/2017"}, {"body": "hi guys advice correctly solve", "d": "10/2017"}, {"body": "problem advice", "d": "10/2017"}, {"body": "ya anything new issue since", "d": "11/2017"}, {"body": "hi everyone solution turn input component give ref use mounted hook emitting input js input element value seems possible without component input convinced turning inputs separated components good practice", "d": "12/2017"}, {"body": "krivoops ran similar situation ended basing solution article mounted function ended looking like dont copy paste code unique component beautiful solution need app good luck", "d": "12/2017"}, {"body": "christophernewton best solution far", "d": "1/2018"}, {"body": "still get better solution overcome issue", "d": "8/2018"}, {"body": "still could fixed", "d": "8/2018"}, {"body": "using password manager called lastpass issue happening anyone knows quick fix", "d": "8/2018"}, {"body": "pratikshaparsewar look answer earlier covers browsers implementation last pass certain inject values input think would better luck sending message last pass team implementation rather thread based browsers saved password approach", "d": "9/2018"}, {"body": "try integrate codeearlier fixing issue removed vmodel replaced thisemail eventtargetvalue thispassword eventtargetvalue within method fri sep pm jon leibham notifications githubcom wrote found workaround autofill page load mounted settimeout function documentqueryselector forminput blur settimeout might necessary notice inconsistencies without receiving mentioned reply email directly view github mute thread pratiksha parsewar image", "d": "9/2018"}, {"body": "great thank", "d": "9/2015"}, {"body": "note method context always bound instance declared matter called examples method called parent instance repeat instance better pass method instead", "d": "9/2015"}, {"body": "bad webpack failed changes loaded", "d": "9/2015"}, {"body": "\u8fd9\u662f\u4e0d\u662f\u8fd8\u662f\u7531\u4e8e\u540c\u65f6\u7ed1\u5b9a\u4e86 vmodel \u548c value\u5f15\u8d77\u7684\u554a", "d": "6/2016"}, {"body": "quickfix use", "d": "9/2015"}, {"body": "posva yeah right bug report", "d": "9/2015"}, {"body": "see warning console telling nt use together ok still recommended use instead", "d": "9/2015"}, {"body": "update syntax updated according comment implemented", "d": "9/2015"}, {"body": "update sep implemented", "d": "9/2015"}, {"body": "put demo childvue component data needs function object", "d": "9/2015"}, {"body": "thanks see", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "yes ca nt use standard html tag names component names", "d": "9/2015"}, {"body": "thx lot", "d": "9/2015"}, {"body": "warning common elements future basically use inside like selfrecursive call never ends vue needs support selfrecursive components eg file tree components", "d": "9/2015"}, {"body": "got issue instead recursive call vue nt render element javascript import vue require vue vuecomponent header header component new vue el app template data think good warn user elements allowed open pr using commontagre trigger warn nt know much vue internals probably best idea thanks", "d": "11/2015"}, {"body": "warn component options added warning global registration well", "d": "11/2015"}, {"body": "", "d": "9/2015"}, {"body": "suggestion break vue concept able", "d": "9/2015"}, {"body": "like see convincing use case supporting involves nontrivial addition observation mechanism", "d": "9/2015"}, {"body": "involves nontrivial addition observation mechanism maybe helps js var var set new set symboliterator set var arrayfrom set consolelog consolelog false like see convincing use case supporting new general thing js think support", "d": "9/2015"}, {"body": "nervgh use cases angular supporting cool scenario requires ui state set map", "d": "9/2015"}, {"body": "closing nt think cases necessary use represent ui state json serializable benefits nt justify amount work needed properly support especially available every browser", "d": "12/2015"}, {"body": "valid use case supports need set nt want fields initially displayed invalid ui add class show input valid invalid element element marked valid invalid brought focus marked touched nt want potentially massive array containing times input brought focus set would ideal", "d": "4/2017"}, {"body": "kylemccarthy", "d": "5/2017"}, {"body": "implementing tree data structure iterator converting arrays would result large unnecessary overhead", "d": "8/2017"}, {"body": "state issue", "d": "12/2017"}, {"body": "mapssets useful stuctures urgent support vue otherwise inefficient use vue apps", "d": "2/2018"}, {"body": "weird issue support objects consequent also support maps sets exactly reason", "d": "3/2018"}, {"body": "progress", "d": "10/2018"}, {"body": "good point doable", "d": "9/2015"}, {"body": "also meet question solation make timer listen check dom height value get dom height value means dom render code \u7b80\u5355\u5224\u65ad\u5143\u7d20\u6e32\u67d3\u5b8c\u6210\u540e\u6267\u884c\u67d0\u64cd\u4f5c render function call var handle argv", "d": "9/2015"}, {"body": "ways solation ca nt check dom ist display dos ca nt get value height width", "d": "9/2015"}, {"body": "niluanxy think consider repo listen resize element writing component case however vue update size hook rewrite adding event bus trigger event like let know update size info needed way rewrite import vuesrctransition explicit possible export transition plugin use know", "d": "9/2015"}, {"body": "loading text animation news topic thanks", "d": "6/2016"}, {"body": "outlined behavior original request actually conflicts slot usage unlikely implemented consider handle async components pending state separately", "d": "11/2016"}, {"body": "using model link input data", "d": "9/2015"}, {"body": "hoping would nt add property data object logic contained template usage kind like html one place add thing submit disabled textbox value empty another place add thing array works nt used able vel vref became reactive except binding button disabled property input element value use vmodel add property data object make value reactive would seem add little bit cruft also sync value two separate input boxes nt want", "d": "9/2015"}, {"body": "well nothing vue observe react simple input component using callback maybe wrong wait master turn", "d": "9/2015"}, {"body": "wo nt work vue reactivity requires source truth javascript dom vue observe change dom element property simple rule thumb need reactivity needs", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "nice", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "great", "d": "9/2015"}, {"body": "finally", "d": "9/2015"}, {"body": "like clear separation dataflow warning madness ahead currently two types directives first accept expressions similar props second accept statements similar props quite parallel props directives directives actually kind unbound props injected component instance modify instance behavior bit like adhoc mixins applied component component consumer look closely props directives make sense crazy", "d": "9/2015"}, {"body": "simplesmiler mind mentioned dropping v altogether make everything custom attributes saw happened", "d": "9/2015"}, {"body": "guess issue names start clash wonder solved unified call syntax proposal c went googling", "d": "9/2015"}, {"body": "would emit custom event child assuming bind parent syntax instance", "d": "9/2015"}, {"body": "thelucre", "d": "9/2015"}, {"body": "something like props validation events", "d": "12/2016"}, {"body": "short answer supposed template compilations cached modifying runtime makes optimizations impossible use dynamic partials", "d": "9/2015"}, {"body": "know right", "d": "9/2015"}, {"body": "pass prop", "d": "9/2015"}, {"body": "wow thanks fast zap still one question pass component write correct behaviour", "d": "9/2015"}, {"body": "nt work scopes since going deprecated", "d": "9/2015"}, {"body": "ok miss smile", "d": "9/2015"}, {"body": "fiddle blank", "d": "9/2015"}, {"body": "sorry updated link", "d": "9/2015"}, {"body": "property observed declare set nondeclared property becomes nonobserved property convert observable property however set notice property nt exist therefore create observable property best practice always declare want observed", "d": "9/2015"}, {"body": "thanks evan mostly confused thiscatname ginger fixes issue thiscat cat nt would setting thiscatname created method mean thisdog becomes observed would setting thiscat cat prevent thisdog observed", "d": "9/2015"}, {"body": "simply causes error vm nt even finish initialization", "d": "9/2015"}, {"body": "ah yes see thanks sorry bother", "d": "9/2015"}, {"body": "several ways like import need actually recommended approach although repetitive clearly shows method comes add example instances better yet group global helpers mixin know look maintain make separate global like fine scope small put everything namespace object", "d": "9/2015"}, {"body": "big thankyou trying directly assign properties vue instance going nuts smile", "d": "1/2018"}, {"body": "thanks answer directive syntax best smirk component syntax yjeroen changing literaldynamictwowayonetime towards vue javascript instead template suggested option pretty good yum", "d": "9/2015"}, {"body": "looks good like possibility v prefix shorthand option also like prefix affix maybe consistency full notation shorthand example html sure improvement maybe makes harder think another maybe stupid question expressions amp literals use quotes literals leave quotes expressions something like html", "d": "9/2015"}, {"body": "really like latest proposal clear two major groups vue users us mostly backend developers using vue frontend library really wish keep consistent syntax others developing fullstack spa apps would prefer shorter concise syntax latest proposal caters well groups ca nt speak everyone came vue really disliked verbose frontend frameworks got angular good example introducing ton new syntax confusing backender like simple rule like would mean lot would make templates clear readable", "d": "9/2015"}, {"body": "new vue user use angular almost year one public angular modules placed sorry ad create long list like vue blush", "d": "9/2015"}, {"body": "dennisver full syntax denotes arguments best keep consistent nonquoted attribute values work value nt contain spaces impractical", "d": "9/2015"}, {"body": "agree thanks tried vue first time one first things clear whether use quotes coming ember nt really tried angular always associated quotes literal strings could also explain downside using mustaches expressions", "d": "9/2015"}, {"body": "dennisver ember templates parsed strings actually nonvalid html eg would work vue use real dom template vue templates must also valid html real html write attribute without quotes space encountered parsing nonquoted attribute value treated end value would actually parsed short always quote attribtues vue", "d": "9/2015"}, {"body": "like new proposal prefer events instead although clashes twoway syntax literal dynamic twoway onetime shortcuts think enforced prop definition instead dynamic props would standard literal could reuse shortcut twoway onetime component prop schema", "d": "9/2015"}, {"body": "thelinuxlich yeah like better especially trying real templates much easier spot also think might make sense use twoway bindings dynamic props default would imo confusing nothing differentiate normal attributes directives prefix also think beneficial able tell whether child component mutate parent state without look implementation details binding type indicator", "d": "9/2015"}, {"body": "another symbol twoway binding avoid misunderstanding maybe like ember mut var", "d": "9/2015"}, {"body": "clashes twoway syntax yeap literal dynamic twoway onetime shortcuts think enforced prop definition instead ie javascript think component like function js definition param number param object b param array c function foo b c code using foo need know work deal", "d": "9/2015"}, {"body": "correct analogy like", "d": "9/2015"}, {"body": "topic made sleepless came next problem first main goals changes see two make learning curve low possible avoid confusions make syntax flexible possible captain obvious yep opinion next things confusing three types directives literal nonliteral terminate ca nt find good reasons feels wrong complicated work well good design always dead simple see lots questions gitter github issues regarding vs nt always see code several types binding expressions remember combined acceptable proposal step let replace terminal directives controlflow tags never felt good nt see code time nt create indentation whatsoever stand vue also tags make one step extract control flow directives separate tags vue much readable imo feel intuitive people familiar template engine step make directive expressions uniform literal nonliteral directives let get rid term directive call expressions need types expressions direct value assignment simple work fine literal string number boolean assign evaluated expression work fine case expression freeform javascript expression evaluated vue instance context property path like valid js expression optional valid js expression last two cases expressions assignable nature gives us item onetime assignments use first syntax looks better follows concept everything double quotes expression twoway assignments expression writable avoid confusion working directive use next syntax evaluated twoway current vue instance context event handling new ideas vonclick etc sounds good consistency expression take current instance property bind event possible problems solution see room errors vue errors caught automatically directive code appropriate warnings displayed example let doodle little bit build shopping cart sketch vue moduleexports data function items name iphone quantity price validation errors object name value format validationerrors checkoutform name email methods validateform function validation code filters nameformatter read function value return value write function value return value component name email field error freeform markup compiled", "d": "9/2015"}, {"body": "karevn appreciate ideas concept terminal directive really exposed user normal user reactive vs literal every directive reactive default seems simple enough plus already like everywhere prefer binding type concept specifically designed component props component first class concept props mechanism data flow components directives different mixing binding type indicator normal directives nt sound like good idea using curlies indicate expressions sounds unnecessary already clearly defined expressions may appear attributes shorthand notations finally please note trying fix issues changes possible toned original proposal one want natural progression clear upgrade path trying reinvent syntax mistake made original proposal", "d": "9/2015"}, {"body": "tech standpoint works less fine conceptual readability standpoints feels illogical languages statements container control blocks attributes offered straightforward syntax universal native html tags components closer contemporary frameworks polymer react lower learning curve existing solution examples curlies used tell expressions vs literal values nt particularly like curlies may confused mustache bindings elegant option basically thougts breaks existing code relies vue rewriting dependent code inevitable already good time polish syntax revisit future nt experience angular came backbone directly took look first time impression hell going syntax polymer react syntax look much elegant natural taking account angular hype react polymer taking may sign everything good syntax vue learn lesson", "d": "9/2015"}, {"body": "karevn would argue latest proposal migration process drastically simplified certainly true breaks existing code changes view layer required sure actual logic furthermore current syntax proven popular lot developers due simplicity clarity judging learning curve already low compared frameworks like react never able fully comprehend", "d": "9/2015"}, {"body": "karevn syntax pretty much proposed polymer offers almost syntax terms logic except requires use wrapper element whereas vue optional use directly element reactjsx javascript expression completely different construct nt see proposal closer others nt see offering substantial improvement catering personal preference less trying force polymer expressions always mustaches mindset vue vue basic rule expressions always prefixed attributes one better subjective nt see convincing reason suddenly jump ship nt break anything seamlessly upgrade app following deprecation warnings would ideal process simpler people", "d": "9/2015"}, {"body": "think misunderstood proposal key points move control logic custom tags improve readability simple oversee currently implication think vue core code become cleaner change yes thinking minus specific symbol choice would equally happy whatever works best really think better vanything systems work polymer react even windows presentation foundation natural reinvent wheel works well frameworks also think vue internal directive code straightforward case sure acasar let describe worked switched days ago webpack recompiled everything refreshed page seen hundred warnings references line numbers code vue warnings show stacktraces vuejs code also js errors vue core code caused syntax incompatibility spent whole two days replacing syntax redebugging code even simple syntax change forces review templates use regexbased global replacement pray regex good enough forget replace forget explicitly declare variables use words even end world decent work simple yet manual mostly acasar totally right react syntax nightmare sometimes offering steal best properties simple attr binding syntax worst ones like mixing html js syntax", "d": "9/2015"}, {"body": "karevn said already always using everywhere almost exactly polymer said subjective natural nt necessarily mean natural personally find curlies expression wrapper symbols noisy annoying type make vue templates look like string templates fact html attribute annotations systems work valid argument argue polymer far far away taking inprogress versions unstable definitely nt represent best experience possible final ship together version focuses ensuring smooth upgrade experience latest proposal experience already improved would nt make sense make experience worse introducing even bigger syntax changes arguable improvements want make clear syntax change current syntax sucks fact working well many us trying fix small issues within current syntax let move something completely new sounds like goal maybe vue", "d": "9/2015"}, {"body": "karevn regarding upgrade experience upgraded medium sized app took hours ca nt say went completely smoothly frustrations along way overall anything drastic still bigger app waiting upgrade going hold finished proposals afraid upgrade process would even harder also personally big fan syntax proposed acknowledge come different backgrounds probably seems lot natural", "d": "9/2015"}, {"body": "make learning curve low possible avoid confusions closer contemporary frameworks polymer react lower learning curve existing solution nt fix broken took minutes memorize new changes thougth good memory mean general learning curve still think vue api makes perfect sense learnable day two funny comparing vue libraries mentioning learning curve new api bring sense explicity think makes easier learn compared libraries api", "d": "9/2015"}, {"body": "azamatsharapov calm please discussion", "d": "9/2015"}, {"body": "sorry forgot insert smiley smile", "d": "9/2015"}, {"body": "acasar two accounts azamatsharapov nt seem get point changes nt think current syntax worths efforts laziness learning anything spending time efficiently changes inevitable would like best syntax possible release keep referring libraries like newbies background see syntax feel familiar beginning increases vue chances succeed succeed library nice architecture pretty stable code vue good points unquestionably look familiar based experience people imagine went ruby rails backbone wpf world see attr src something hmm colon mean read docs make sure background see hmmm looks like assign ruby hash js object think got", "d": "9/2015"}, {"body": "read docs make sure personally took like days read vue docs first wo nt annoying public simple questions first js library yeah also backbone past probably much think mandatory learn docs first vue docs seem easy understand yeah understand mean people different backgrounds colon thing optional like ifelse vs ternary use sure miss something personally would nt use shortsyntax better type vbindvon later read html like plain english", "d": "9/2015"}, {"body": "karven posted company account mistake seems nt get unnoticed add one comment familiarity came angular felt right home vue even felt much easier intuitive use judging popular angular still many feel seems changing syntax completely nt end well well guess jury still azamatsharapov also prefer longer syntax see harm offering concise shorter one seems valid usecases understand optional", "d": "9/2015"}, {"body": "azamatsharapov indicates like people take look vue gitter thread see question would appear people read docs acasar think new syntax problem angular fact syntax changed people nt trust angular anymore", "d": "9/2015"}, {"body": "karevn yeah active used shout like hey read docs dude maintainer trying please people providing short syntax removes leaves easy read syntax people may say verbose", "d": "9/2015"}, {"body": "azamatsharapov always good idea remember human psychology designing technical system meeting peoples expectations key success", "d": "9/2015"}, {"body": "karevn right problem expectations necessarily represent vue users", "d": "9/2015"}, {"body": "sure thing neither best gather statistics vs vs proposal things work question preferred users", "d": "9/2015"}, {"body": "karevn note proposal based vue current syntax around quite time used many positive feedbacks blunt nt think opinions hold weight mine trying best address concerns changes really obligation accept suggestions think fine line suggestions like better put framework", "d": "9/2015"}, {"body": "think vue simple enough learned represented syntaxes nt see problem newbies learning make syntax logical anyone could get hold days rather focus code maintainability extensibility large ammounts code easily understandable supportable right see", "d": "9/2015"}, {"body": "taking account opinion one seriously differs less consistent always good idea give alternative ideas consideration sometimes change mind sometimes make sure original idea best engineering", "d": "9/2015"}, {"body": "karevn given fair consideration explained multiple times nt think would work may work designing brand new library context acknowledging constraints working also important part engineering", "d": "9/2015"}, {"body": "need blood hocho laughing american english british english talk russian english omg satisfied correct analogy like analogy correct example good comparison think completed directive syntax component syntax left hand right hand voting yjeroen thelinuxlich understand votes already blush", "d": "9/2015"}, {"body": "nervgh syntax particular sure link follow", "d": "9/2015"}, {"body": "javascript definition said thelinuxlich problem component props syntax propose something like need think js definition syntax", "d": "9/2015"}, {"body": "sure thing neither question preferred users funny evan bdfl gets votes rest us get mon sep pm evan notifications githubcom wrote nervgh syntax particular sure link follow reply email directly view github", "d": "9/2015"}, {"body": "markhahn actually others makebelieve democracy works nowadays", "d": "9/2015"}, {"body": "nervgh regarding prop binding types still believe declared template level possible enhancement would also offer verbose syntax since twoway oneway nt much meaning sake consistency readability may possible something like html", "d": "9/2015"}, {"body": "acasar latest comment twoway onetime modifiers declared templates readability mostly depend directive logic component logic think javascript moduleexports props propname twoway true declaration tells property requires twoway access using oneway template expression generate warning set false twoway access still available depending template onetime true property evaluated one time regardless template syntax request looks like good idea sure considering options", "d": "9/2015"}, {"body": "trust totally making end decision like latest proposal top feel post confusing shorthand von different thought component different binding shorthands since shorthands beginning attribute name maybe place beginning well instead end attribute name", "d": "9/2015"}, {"body": "acasar looks tempting one side smirk another side encapsulation way amount sides three abstraction encapsulation polymorphism dizzyface", "d": "9/2015"}, {"body": "acasar last comment looks reads well using wording rather twoway onetime bindings great idea personally pretty obvious shorthand maps words directly end sure make best decision library knows already gotten awesome library far", "d": "9/2015"}, {"body": "lucky bdfl look vue stands seen many shitty suggestions suggested people ca nt see big picture", "d": "9/2015"}, {"body": "acasar think helps attrprop bindings start prefix know belong category colon nonnative attribute tells prop binding type special symbol placed equal sign tells prop handles value differently different prefixes especially using shorthand makes less straightforward prop potentially start three different prefixes remember moved prefixes back one prefix", "d": "9/2015"}, {"body": "agree probably keep uniform prefix shorthand syntax across binding types problem originally trying address lack meaning shorthand symbols events bindings think quite good amp nt mean anything confusing since binding types common always check docs get right maybe could something like maybe even filter suggestions even keep bad expressive maybe bit confusing beginners", "d": "9/2015"}, {"body": "syntax eg looks like invalid xml basically way syntax could even work acasar proposal feels valid", "d": "9/2015"}, {"body": "problem current alpha syntax work without syntax work nt guys think second one preferrable related things grouped together avoiding confusion less code repeating would even cleaner", "d": "9/2015"}, {"body": "step let replace terminal directives controlflow tags concept terminal directive really exposed user normal user reactive vs literal every directive reactive default seems simple enough work webdev many examples directives like placing anywhere element html templates difficult reading looks like game directive directive think proposal make directives like elements bad comparison brings unification case single right way directives listed important propagate influence child elements", "d": "9/2015"}, {"body": "mentioned many times use control directives tag get exact result keeping code style consistent nothing library library force opinion form like brings unnecessary verbosity template punished meet someone expectations", "d": "9/2015"}, {"body": "simplesmiler deal people may put attribute end attribute list completely unreadable case visually scan line element make sure terminate directive proposal little bit longer errorprone possible implement syntaxes", "d": "9/2015"}, {"body": "syntax already use tue sep nikolay karev notifications githubcom wrote simplesmiler deal people may put vif attribute end attribute list completely unreadable case visually scan line element make sure terminate directive proposal little bit longer errorprone possible implement syntaxes reply email directly view github", "d": "9/2015"}, {"body": "simplesmiler punished meet someone expectations punished punished someone else judge expressed opinion proposal karevn believe could find compromise could find intuitive", "d": "9/2015"}, {"body": "nervgh sorry going happen nt see offers substantial benefits substantial enough warrant yet another breaking change", "d": "9/2015"}, {"body": "supporting etc avoid bc breaks let ppl choose happy problems except fact stuff build maintain", "d": "9/2015"}, {"body": "two ways something unless shorthand double docs users would need learn two ways", "d": "9/2015"}, {"body": "yjeroen consider shorthand ca nt difference note fact actually", "d": "9/2015"}, {"body": "actual discussion drifted away quite bit original post new syntax works mostly intuitive enough utilise go without consulting docs last vue project something thing struggling difference binding types hard grasp difference syntax rest looks easy enough accept move smiley positive statement", "d": "9/2015"}, {"body": "agree yjeroen two ways something even pain big project someone definitely something similar different way people go wtf every time see would even try search special meaning story method every single new developer beginning believe special meaning regular thought triggers special listeners something problem adding property component ofc", "d": "9/2015"}, {"body": "arrilot need attribute condition expression becomes nt better plus added new api makes people happy end different ways thing", "d": "9/2015"}, {"body": "nirazul binding type indicator assume people somewhat used possible provide verbose version special symbols shorthands maybe get rid could also apply literal directives", "d": "9/2015"}, {"body": "karevn implied control structures independent tags intuitive using attributes languages statements container control blocks attributes simple counter argument case css want show hide particular element would normally apply remove class element html stuff would nt wrap element another one purpose hiding html stuff also comparing vue languages even frameworks probably fallacy one insists compare directive angular used attribute intents purposes identical", "d": "9/2015"}, {"body": "use instead dots von uses syntax html suggestion would html", "d": "9/2015"}, {"body": "yjeroen actually think makes sense use modifier colon already double meaning arguments bind shorthand html think look pretty consistent although introducing sort another concept super easy read understand maybe drop use", "d": "9/2015"}, {"body": "although nice concise semantic benefits outweigh former", "d": "9/2015"}, {"body": "shorthand could twoway binding considered default dot modifier supplied would equivalent", "d": "9/2015"}, {"body": "youngsteveo currently consensus among major frameworks component dataflow topdown default twoway bindings allow child component mutate parent state makes sideeffects harder reason want explicit indicators", "d": "9/2015"}, {"body": "okay makes sense could one way considered default dot modifier supplied", "d": "9/2015"}, {"body": "youngsteveo yes current semantics props", "d": "9/2015"}, {"body": "aha good idea nt argument similar modifier problem see bind shorthand consistency issues see well shortened replaced shortened colon replaced well vs cases vxxx colon thought using colons argumentmodifier although colon way prettier decision drop semantic benefits", "d": "9/2015"}, {"body": "yjeroen think postfix html double duty colon tiny issue think ok ambiguity leading colon denotes shorthand colon directive name denotes argument consistent imo arg optional part full directive syntax theory keeping everything consistent also able", "d": "9/2015"}, {"body": "yes right see better rereading post actually reading code instead looking character differences clear read", "d": "9/2015"}, {"body": "quite like direction going favouring expressiveness short type opinion better way go expressive syntax always strong advantage vue however two questionsremarks prefer verbose wording onetime twoway binding types instead sync clear synonym onetime sync sync child property back parent shorter type without dash look seamless completely understand need introduce modifiers since mind needlessly add complexity structure much prefer multiple arguments separated colon explanation way almost think directives normal functions default argument values von event key expression gt function von event key expression vbind property binding expression gt function vbind property binding oneway expression", "d": "9/2015"}, {"body": "acasar sounds good describing original indicator types reasons using modifiers prevents ambiguity colon usage especially shorthand vs colon nt make sense literal modifier would look like argument proposal literal directive syntax still demands special concept semantically modifier already concept buried cryptic syntax arguments pretend", "d": "9/2015"}, {"body": "thanks reply makes sense noticed one thing explained original post proposal aims eliminate micro syntax expressions bind multiple classes single element currently like", "d": "9/2015"}, {"body": "special char like acceptable consider original syntax like", "d": "9/2015"}, {"body": "sync", "d": "9/2015"}, {"body": "acasar use object literal", "d": "9/2015"}, {"body": "hax considering nt compose well modifier syntax discussing", "d": "9/2015"}, {"body": "seems use indicate twoway binding sure strong use case binding anyway use bind event symbols indicate twoway binding interesting idea example use use twoway binding dolls", "d": "9/2015"}, {"body": "guess something like since seems really verbose common use case could nt make simpler making consistent event syntax could true style since special attribute besides class", "d": "9/2015"}, {"body": "hax personally nt like decision using indicating twoway overloads semantics listening events triggers digest cycle vue nt need digest cycle semantic mismatch also sure good idea copy syntax something works", "d": "9/2015"}, {"body": "acasar two braces even shorter reason like keep single attribute native counterparts also single attributes", "d": "9/2015"}, {"body": "something similar symbols makes really easy read template personally big fan symbols html", "d": "9/2015"}, {"body": "sure dotnotation definitely good decision drop cryptic notations totally thing exchange easy wrap mind around acasar start worrying complicated syntax arguments maybe right time outsource object javascript", "d": "9/2015"}, {"body": "azamatsharapov think symbol better longterm angular add symbol sugar though symbols angular chosen may fit vue", "d": "9/2015"}, {"body": "hax longterm hmm think actually using symbols better longterm read template time reading plain english easier symbols", "d": "9/2015"}, {"body": "azamatsharapov symbols may little learning curves suit common concept use operators write plain english please understand nonenglish users like plain english plain smile", "d": "9/2015"}, {"body": "hax funny concept though math symbols people get lower grade school seen many people nt know meaning", "d": "9/2015"}, {"body": "hax use operators study math school find easy spot means id html number real life vue using plain english almost everywhere look api docs yeah ca nt argue nationality may find easy memorize symbollike api", "d": "9/2015"}, {"body": "sorry good examples maybe better examples jquery even better example anyway know different thought example coffeescript replace many symbols plain english read coffeescript code without syntax highlighting find terribly kill eyes could read section readable think", "d": "9/2015"}, {"body": "decided main latest syntax reference separate discussion thread avoid confusions outdated proposalsreferences always refer thread latest proposal", "d": "9/2015"}, {"body": "latest proposal binding type indicators shorthand syntax omission dropped short syntax binding type indicators mind asking clarification", "d": "9/2015"}, {"body": "latest proposal dream coming true", "d": "9/2015"}, {"body": "considering latest syntax something like possible", "d": "9/2015"}, {"body": "latest proposal nice question warning raised people use camelcase reference instead using dash foresee people forgetting", "d": "9/2015"}, {"body": "yjeroen even possible thought browsers get rid case also like proposal going syntax getting really consistant", "d": "9/2015"}, {"body": "fairly large app written lurking interest waiting dust settles think converting looks coming together nicely wonder though spirit keep vobvious worth deprecating vel vref great like bindings treating simply shorthand element reference would make obvious easier explain well catering like readabilityverbosity think", "d": "9/2015"}, {"body": "small consistency improvement prevent anyone misunderstanding dotnotation suggest following change html", "d": "9/2015"}, {"body": "could explicit", "d": "9/2015"}, {"body": "fullfs yes", "d": "9/2015"}, {"body": "josephsilber tentatively dropping short syntax type indicators since explicit yjeroen seems impossible moment definitely looking solution looks like thing still seem bit unresolved replacement still keep eye", "d": "9/2015"}, {"body": "nice need", "d": "9/2015"}, {"body": "fullfs gone far say", "d": "9/2015"}, {"body": "fullfs simplesmiler nt decided whether remove yet bit verbose exact thing", "d": "9/2015"}, {"body": "tentatively dropping short syntax type indicators since explicit mean", "d": "9/2015"}, {"body": "could maybe add changelog next time change nt think see timestamp edit last time", "d": "9/2015"}, {"body": "thought still rooting make adding class condition little easier right code bad still tiny downgrade length readability object literals still form microsyntax understand natively single attribute every event attribute still add multiple handlers single element think would pretty much way also possible define multiple event handlers using object literals exclusive", "d": "9/2015"}, {"body": "acasar would nt call object literal microsyntax javascript expression know write javascript know write object literal point removing microsyntax always safely assume directive takes single expression event handlers use multiple attributes handle different events native syntax eg fact allow key modifier native syntax would force key detection javascript strict improvement hand nt see offers readability improvement object literal problem allows split classmanipulation logic multiple attributes mismatch native counterpart think two ways thing clear benefit example vs shorthand alternative syntax nt offer specific benefits removed considering removing altogether use", "d": "9/2015"}, {"body": "since curly braces used mustache expressions seeing single braces used object literals bit jarring even though nt allow mustaches attributes anymore always safely assume directive takes single expression mean would nt directive get object", "d": "9/2015"}, {"body": "josephsilber object literal valid javascript expression", "d": "9/2015"}, {"body": "latest syntax wonderful reads really well intuitively respect", "d": "9/2015"}, {"body": "thanks latest alpha release really like syntax think could find even concise wording modifier like example since essentially passing raw value nt parsed", "d": "9/2015"}, {"body": "acasar like since literals used place probably literal makes sense shorten name sure though vm variables raw literal strings", "d": "9/2015"}, {"body": "maybe string", "d": "9/2015"}, {"body": "thought shortening much less selfexplanatory", "d": "9/2015"}, {"body": "josephsilber like really short since passing raw value somehow appropriate options like expressive end fine using quotes probably work anyway since valid expression", "d": "9/2015"}, {"body": "another viable option", "d": "9/2015"}, {"body": "think precise semantic name use value literally interpolate aside nt even know directive binding debate mentioned official vue docs anywhere finally found vuerouter use grapnel routing apps propsbindings literal", "d": "9/2015"}, {"body": "simplesmiler laughed would open possibilities like validation future mean", "d": "9/2015"}, {"body": "shorter explains intent even better would mistake knowing value would string number", "d": "9/2015"}, {"body": "prefer reference type validation anything else related type value example parsing prefer etc", "d": "9/2015"}, {"body": "extra letters really hard deal imo semantically accurate important concise especially letters difference", "d": "9/2015"}, {"body": "looks bit long compared others makes different among", "d": "9/2015"}, {"body": "noticed change beta going way mean previously directive option like directive special syntax something simple name potentially overlapping almost anything", "d": "9/2015"}, {"body": "fullfs vue components already modeled web components custom elements contentslot api web components use normal elements indicate turn another element already using dynamic components", "d": "9/2015"}, {"body": "regarding vs something shorter personally nt mind extra characters however thelinuxlich brings good point vlink get string number technically literals case made using well explains intention pass value directive without parsing expression confusion parsing problem solved sufficient documentation felt worth drawing attention felt really good point might missed", "d": "9/2015"}, {"body": "morgul nt think evaluate syntax based make sense without docs impractical rather think evaluate syntax make sense enough need read docs may better reflect end result value bound string better reflects intent directive either reactive literal reactive directives take expressions literal directives take strings directive reactive default modifier makes literal reflect underlying difference", "d": "9/2015"}, {"body": "said agree", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "alright agree completely onboard", "d": "9/2015"}, {"body": "reactivenonreactive maybe something", "d": "9/2015"}, {"body": "might little messier nice shorthands must use colon vdirective besides though important rails users would feel bit inconvenient handle attributes contains colons use rails code generate html least hope syntax would remain release way directives alias basic directives like ok needed include attr name vue would framework project xd", "d": "9/2015"}, {"body": "cicholgricenchos colon necessary directive names contain hyphens know directive called", "d": "9/2015"}, {"body": "closing issue specific concerns please post forum instead", "d": "9/2015"}, {"body": "really depends drag drop lib using render mechanism may conflict party lib trying", "d": "9/2015"}, {"body": "closing repro", "d": "9/2015"}, {"body": "masonry relies element already inserted read width height wait vm attached masonry directive", "d": "9/2015"}, {"body": "thanks lot triggering window resize actual component attached get around issue feels better also helps keep unbind directive happening quickly getting weird right transition component comes", "d": "9/2015"}, {"body": "intended destroyed vm used want reuse component js var app vueextend template mount empty div append app instead mounting var app new app mount appendto app destroy old one app destroy true create new instance mount app new new app mount appendto app however sounds like rare use case want destroy remount instead resetting state app", "d": "9/2015"}, {"body": "thanks use way yes think abnormal usage smile trying reuse vuecomponent within meteor blaze template", "d": "9/2015"}, {"body": "dammit", "d": "9/2015"}, {"body": "use case fri sep pm jonas laursen notifications githubcom wrote noticed callback watch function called value set current value would nice option callback called even though value fiddle demonstrating behavior open console see callback called value set value twice row reply email directly view github", "d": "9/2015"}, {"body": "point api triggers value actually changed vue also buffers multiple changes event loop callback trigger latest value making trigger every set defeats purpose sure better way achieve want closing feel free continue discussion maybe start new thread trying vuejsdiscussion instead", "d": "9/2015"}, {"body": "case plot new value graph every time changes updating value changed graph represents wrong image change time", "d": "9/2015"}, {"body": "would need update graph value changed", "d": "9/2015"}, {"body": "trend change time imagine value changed times value changed times graph flat line followed small increment updating value changes graph turns continuously rising line instead obviously make event fire get new data trigger graph update may big issue", "d": "9/2015"}, {"body": "always rerender setinterval rather inside watch callback", "d": "9/2015"}, {"body": "ever better idea thanks", "d": "9/2015"}, {"body": "another thing store latest value list n latest values n number points drawn yet another one store alongside actual value increment callback watch callback draw graph", "d": "9/2015"}, {"body": "intended change old behavior formatting value user type results awkward ux scenarios found much natural useful let user type whatever want format later twoway filters originally designed want limit typed input add listener update input value", "d": "9/2015"}, {"body": "oh damn removed veryveryveryvery useful feature know already possible almost thing option project forms leaning removed behavior ca nt move", "d": "10/2015"}, {"body": "like go use jquery honestly", "d": "10/2015"}, {"body": "fullfs really simple revert remove", "d": "10/2015"}, {"body": "wow thanks providently always would like option possible", "d": "10/2015"}, {"body": "\u628a", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "real world use case", "d": "9/2015"}, {"body": "small use cases register everything globally large apps much maintainable component explicitly depend needs maybe useful situations benefits comes global tradeoff idea behind something marginally useful negative implications maintainability let remove", "d": "9/2015"}, {"body": "yep application popup window complex structure custom editor elements elements combined levels hierarchy making inefficient declare explicitly parent element parent types declared elements lines repeating code also good register globally never appear parts application love loaded locally", "d": "9/2015"}, {"body": "importing explicitly worthwhile repetition allows look component hierarchy alone understand dependencies come implicit fallback wo nt remember imported components hierarchy months later", "d": "9/2015"}, {"body": "good memory thanks remember app consists two different pieces registering welldefined set components specific would prefer choice load assets suspect thing happened custom directives filters let share impression worked went well minus minor learning curve things minimalistic clean api syntax reliable code became worse better code repetition features use removed making rewrite code starting think made mistake choosing vue react sure breaking changes waste time future", "d": "9/2015"}, {"body": "karevn much helpful actually list specific things made dev experience worse addition issue prereleases means api stability guarantee first place value stability stick wait stable also final migration release using prerelease means agreed deal constant breaking changes even released probably good idea use nonreleased workinprogress branch designing api based experience feedback entire community entitled whatever think feel free switch frameworks changes direction like fact react also import everything explicitly repeat even stuff", "d": "9/2015"}, {"body": "reading discussion almost agree really nt see point removing existing code provided feature instead making default tastes differ people prefer fallback approach intuitive sometimes especially components loaded dynamically worked around mixins factories etc takes precious time sure thing always balance ideal architecture cost changes case lines code namely would hurt anyone left cost significant time use unstable version really need readwrite binding filters feature probably backported see question api prefer prefer vue period question rely vue api long term reliability handsomeness changes breaking serious reason case new binding syntax broke code okay let readable forces better code structure case nope change might nonbreaking set default", "d": "9/2015"}, {"body": "yes upgrading always come pain refactoring chance vue break free legacy config options strictly semver nothing break want last long possible reliability issue talked regarding strict mode surely costs refactoring time heavily relied ideally new users pick vue nt even need know thing existed api surface small possible global structuring pattern consistent possible making possible disable strict mode essentially encourages two different styles structuring vue apps imagine people working one app uses moving another project uses creates fragmentation developer experience want get rid possibility reasonable place kind unlucky caught middle transition appreciate feedback needs done done", "d": "9/2015"}, {"body": "see concrete use case kind stuck trying build extendable application extandable widgets widget developer defined piece application plug global application extend points dynamically loaded startup application instance application different set widgets instances application live page loaded widget add dynamically created component vuejs application widgets contain widgets children aware startup part managed user application loaded widgets need aware register widgets problem want avoid register widgets globally compatibility reasons components built loaded dynamically need register components components contain children lot registering might used see mean please note moment didnt try local registration components making tests global registration js var components performance bottleneck think semi global component scope might useful could help build applications closed scope component components reachable root children components vuejs roots think", "d": "8/2016"}, {"body": "global registration nt register recursively registers component inside option guess nt problem mon aug soufiane ghzal notifications githubcom wrote see concrete use case kind stuck trying build extendable application extandable widgets widget developer defined piece application dynamically loaded startup application instance application different set widgets loaded widget add dynamically created component vuejs application widgets contain widgets children aware startup part managed user application loaded widgets need aware problem want avoid register widgets globally widgets loaded dynamically need register widget widget contain children lot registering might used see var components appcomponents template components components template components components performance bottleneck receiving subscribed thread reply email directly view github mute thread", "d": "8/2016"}, {"body": "fnlctrl global registration problem global registration register vuecomponent instances local registration registers current component way register root children semi global something allows register current vue instance including components added instance opinion problem vue though static global way restricted packageddistributable local way", "d": "8/2016"}, {"body": "registration actually already possible since vue prototypal inheritance", "d": "8/2016"}, {"body": "fnlctrl sure understand want show fiddle sent please note example error clear enough maybe didnt understand want explain let start want explain globaly register components perfect single page app locally register component component good ship components dependencies local reusability ca nt make available components parent children something like registering globally components current instance components loaded instance omponents loaded vm instances see example understand", "d": "8/2016"}, {"body": "oops seems fiddle nt saved correctly one intended show reading example right", "d": "8/2016"}, {"body": "forked example corrected work hope understood correctly want add dynamic components limited inside foo", "d": "8/2016"}, {"body": "fnlctrl thank example seems cover trying achieve yet using method example registers component make available children example see fiddle register would like available loaded", "d": "8/2016"}, {"body": "forked example point components clear dependency tree dynamic components depending nt exception", "d": "8/2016"}, {"body": "fnlctrl example available anymore could use problem pollute vue instance component could register foo children bar children foo grand children etc adds lot complexity case largedynamic app see mean register locally ca nt inherit components children grandchildren current components", "d": "8/2016"}, {"body": "yes see point sorry nt aware registering component foo nt make global inside foo scope unlike vuecomponent look source see mon aug soufiane ghzal notifications githubcom wrote fnlctrl example baz available foo anymore could use vuecomponent baz problem pollute vue instance baz component could register baz foo bar foo children bar children foo grand children etc adds lot complexity case largedynamic app see mean register locally ca nt inherit components children grandchildren current components receiving mentioned reply email directly view github mute thread", "d": "8/2016"}, {"body": "thanks point want ship standalone library depends vue registering components given instances real benefit anyway standalone library allowed register global vue instance would break standalone part please let know talking might implmented vue", "d": "8/2016"}, {"body": "well guess reason obvious overlook wasnt using get fiddle ride home mon aug \u5b8b\u94c4\u8fd0 fnlctrl gmailcom wrote yes see point sorry nt aware registering component foo nt make global inside foo scope unlike vuecomponent look source see mon aug soufiane ghzal notifications githubcom wrote fnlctrl example baz available foo anymore could use vuecomponent baz problem pollute vue instance baz component could register baz foo bar foo children bar children foo grand children etc adds lot complexity case largedynamic app see mean register locally ca nt inherit components children grandchildren current components receiving mentioned reply email directly view github mute thread", "d": "8/2016"}, {"body": "well nt work well", "d": "8/2016"}, {"body": "strange indeed looking", "d": "8/2016"}, {"body": "read source code found vue hack like without using vueextend vuecomponent btw vuecomponent helper function vueextend modifies vueoptionscomponents though approach nt work extended vue suppose problem caused components resolution keep looking", "d": "8/2016"}, {"body": "fnlctrl ok thanks tried check things came conclusion dont know core enough find works way know expected behavior", "d": "8/2016"}, {"body": "think comments resolve asset function used child instances need access assets defined ancestor chain suggests registering components extended vue supposed work", "d": "8/2016"}, {"body": "code function body look ancestor chain right maybe implemented yet", "d": "8/2016"}, {"body": "nt know enough yet still learning behavior guess ancestor chain refers first parameter", "d": "8/2016"}, {"body": "guess conclude cause srccoreglobalapiextend makes extended classes use method parents tested copy coreglobalapiassets use corresponding code inside dist version stripped types course vueextend make look like change work though guess cause performance penalty", "d": "8/2016"}, {"body": "gsouf think found last piece puzzle equivalent workaround without modifying vue js var root vueextend rootoptionscomponentsfoo rootextend template foo rootoptionscomponentsbar rootextend template bar uses new root template mount app", "d": "8/2016"}, {"body": "hi fnlctrl thanks output sorry delay indeed looks like comoponents inherit components constructor parent currently looking apply patch use case case remains attached constructor instance looking part instance", "d": "8/2016"}, {"body": "fnlctrl due way javascript works thanks example could workaround extending dynamically vue instance create making everything available application js createvueinstance function el data var vextend vueextend vextendpartial somesemiglobalpartial vextendcomponent somesemiglobalcomponent vextendextend checking core built look built allow easy integration per instance available components workaround stable enough thanks help btw think example showed could deeply explained doc nt find mention", "d": "8/2016"}, {"body": "gsouf welcome thinks issue enough want implement similar feature smile", "d": "8/2016"}, {"body": "semiglobal use case relatively universal layout component content configurable components use layout component eg component use layout want configure content component b component may use layout configure content component c etc pattern supported solution replace design pattern widely used ios improve code reuse flexible design", "d": "2/2017"}, {"body": "hpsoar probably need slots", "d": "2/2017"}, {"body": "design follows basically allow two things cell simple config cell css style sufficient many cases insert component cell used special cases ctitle item cname export default components props columns items data function return tableresponsive display block width minheight overflowx auto", "d": "2/2017"}, {"body": "please provide reproduction", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "ids must unique point", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "totally agree", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "tried syntax find browser transform camelcase lowercase means write somecomp transform somecomp destroys benefits easy discover", "d": "9/2015"}, {"body": "terencez thanks pointing think solved adding warning suggests using dashcase auto converts camelcase like props", "d": "9/2015"}, {"body": "oh actually gets converted browser parsing really way detect guess make clear docs", "d": "9/2015"}, {"body": "alternatively html", "d": "9/2015"}, {"body": "actually something node intuitive esp new users clues guess wat stands even experienced users also make mistake using", "d": "9/2015"}, {"body": "ya also think alternative notation intuitive confused esp new users uses dot notation js equation template later seems assign imo although old notation let user remember transform nonintuitive confused", "d": "9/2015"}, {"body": "disagree argument notation intuitive even chrome devtools browser devtools selector syntax quite together ubiquitous jquery syntax many developers clear means select store variable", "d": "9/2015"}, {"body": "terencez nirazul agree", "d": "9/2015"}, {"body": "\u8fd8\u662fvref", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "zhongxingdou english please", "d": "9/2015"}, {"body": "people complaining intuitive could change instance properties instead html", "d": "9/2015"}, {"body": "thelinuxlich", "d": "9/2015"}, {"body": "thelinuxlich hmm looks like prop component though prop ref modifier say something like html let rename", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "agreed", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "ok maybe plaintext would nt hurt comprehension still love aliases use html", "d": "9/2015"}, {"body": "nirazul necessary shorthand something short nt think", "d": "9/2015"}, {"body": "seems necessary vbind von nt get difference shorness ease use", "d": "9/2015"}, {"body": "nirazul makes easier except used old syntax explicit easier remember new users", "d": "9/2015"}, {"body": "totally agree main syntax reason like decision drop really accustomed dollar syntax name dom references leading since forever syntax appealed nt want see go without least trying convince nevermind changes look promsing", "d": "9/2015"}, {"body": "causes problems templating engines forcing use plain html possible keep old vel item syntax backup", "d": "10/2015"}, {"body": "jhaesus template engine", "d": "10/2015"}, {"body": "slim found something works like longer use regular syntax render html vel item suppose", "d": "10/2015"}, {"body": "", "d": "9/2015"}, {"body": "wow ca nt believe finally lol", "d": "9/2015"}, {"body": "fiddle uses sure want ran working fine", "d": "9/2015"}, {"body": "simplesmiler oh thank swift response closing issue", "d": "9/2015"}, {"body": "ie \u4e0d\u652f\u6301\u539f\u751f template tag \u6240\u4ee5 template table tr \u4e0a vrepeat \u5373\u53ef", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u53ef\u4ee5 tue sep pm hbshun notifications githubcom wrote reply email directly view github", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "bug report \u548c feature request \u63d0\u95ee\u53ef\u4ee5\u5230", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "started working send pr soon", "d": "9/2015"}, {"body": "great", "d": "9/2015"}, {"body": "close let continue discussion pr thread", "d": "9/2015"}, {"body": "scoping issue require explicitly passing props type checks work expected disable type checking component", "d": "9/2015"}, {"body": "good point", "d": "9/2015"}, {"body": "hi slot attribute removing", "d": "9/2017"}, {"body": "oh see im sad", "d": "9/2017"}, {"body": "read scoping difference", "d": "9/2015"}, {"body": "btw probably need update mustachetype props bindings replaced syntax anyone faced problem done", "d": "9/2015"}, {"body": "nav native element nt using component first place wed sep terencez notifications githubcom wrote find component name defined set optionscomponents implicit component name nav template lead max call size exceeded way disable behavior expect rename component name nav others reply email directly view github", "d": "9/2015"}, {"body": "think source vue checked tag name native html registering component might mistaking though", "d": "9/2015"}, {"body": "azamatsharapov missed new ones", "d": "9/2015"}, {"body": "closing think renaming obvious thing good idea avoid ambiguity native element vs recursive calls", "d": "9/2015"}, {"body": "copypaste typo examples opening different tag closing", "d": "9/2015"}, {"body": "youngsteveo oops fixed", "d": "9/2015"}, {"body": "would mean would work html element still workaround", "d": "9/2015"}, {"body": "youngsteveo would work anything", "d": "9/2015"}, {"body": "think mixing syntax vuecomponents syntax web components bad idea", "d": "9/2015"}, {"body": "question stay similar would become stay", "d": "9/2015"}, {"body": "nervgh vue components modeled web components already uses custom elements slot api yjeroen stay part component special vocabulary", "d": "9/2015"}, {"body": "best see corresponding implementation code", "d": "11/2016"}, {"body": "new syntax javascript object literal ca nt mix filters pipe whole object filter cases probably want bind style computed property inlining filters multiple properties messy", "d": "9/2015"}, {"body": "makes sense think readable warning compatibility reasons", "d": "9/2015"}, {"body": "object repeat guarantee order javascript specified spec thus enginedependent need order guarantee use array use filter", "d": "9/2015"}, {"body": "upcoming", "d": "9/2015"}, {"body": "hbrls yes", "d": "9/2015"}, {"body": "\u53ef\u4ee5\u7528\u81ea\u5b9a\u4e49 filter key filter", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "writing blur necessary ensure correct twoway filter behavior write function must called order determine wether model value changed wo nt anything value remains current model value", "d": "9/2015"}, {"body": "hmm think warning may aggressive consider remove unobservable object warning", "d": "9/2015"}, {"body": "feeling warning unobservable objects fully ignored try put together example", "d": "9/2015"}, {"body": "vue convert keys nonnative objects replacing still reactive eg ca nt expect reactive", "d": "9/2015"}, {"body": "sure thing feeling confirmed formal tests completely ignored passed props gives field", "d": "9/2015"}, {"body": "nah works expected nt show jsonstringifiable", "d": "9/2015"}, {"body": "hmm makes sense bit confusing nt know jsonstringifiable nt think placeholder indicate object would great", "d": "9/2015"}, {"body": "yeah could use improvement future priority moment", "d": "9/2015"}, {"body": "trying pass result service call contains array dates route data hook throwing warnings turn debug mode able see useful logs spamming console", "d": "9/2015"}, {"body": "cheapsteak warning going removed next release", "d": "9/2015"}, {"body": "short screencast see problem", "d": "9/2015"}, {"body": "fixed small hack", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "yeah currently possible adhoc good standardize api", "d": "9/2015"}, {"body": "looks want actually way inject global mixin achieve like extend default vue instances behavior applied every single vue instance created however undocumented moment could make something like js apply global mixin vuemixin created function optionsmycustomoption consolelog optionsmycustomoption new vue mycustomoption gt one advanced use case may need special handling merging custom option values example hook special merge strategy merges multiple hook functions array called default strategy simple overwrite need custom merge strategy need register", "d": "9/2015"}, {"body": "sounds good mixin plugin hook every event merge strategies make also sense since might differ depending plugin option", "d": "9/2015"}, {"body": "issue occured vuevalidator maybe could solve issue try fix issue vuevalidator thanks", "d": "9/2015"}, {"body": "trace call stack tried switch debug mode", "d": "9/2015"}, {"body": "remove warning next version", "d": "9/2015"}, {"body": "azamatsharapov impact thing warnings warn trace data", "d": "9/2015"}, {"body": "yeah nt notice getting warning thought error wants see trace", "d": "9/2015"}, {"body": "probably related", "d": "9/2015"}, {"body": "supported current already support read filters twoway filters", "d": "9/2015"}, {"body": "questions posted vuejsdiscussion instead main repo", "d": "9/2015"}, {"body": "please post questions vuejsdiscussion", "d": "9/2015"}, {"body": "order make array filters like work array object repeats preconverts values arrays piping filters thus avoid returning nonarray values inside filters case better convert array another array rather object use method workaround future versions raise warning return nonarray values filter", "d": "9/2015"}, {"body": "ing facilities used simplified away gone issue properly solved using change also makes using filter logical filters receive value referenced directive user return specifically formatted values filter promotes filter reuse", "d": "10/2015"}, {"body": "actually bit complicated involves compatibility yes work proposed official", "d": "10/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "see filters contextaware always way access inside filter function", "d": "12/2016"}, {"body": "xpepermint intentional change filters pure transforms try explicitly pass state filter arguments", "d": "12/2016"}, {"body": "thx", "d": "12/2016"}, {"body": "answers question well", "d": "9/2015"}, {"body": "fixed component tag well", "d": "8/2017"}, {"body": "\u4ee5\u540e\u95ee\u9898\u8bf7\u53d1\u5230", "d": "9/2015"}, {"body": "\u989d", "d": "9/2015"}, {"body": "mouseup select index select index \u5728 notifications project \u53ea\u80fd parentlist set reply email directly view github", "d": "9/2015"}, {"body": "tcdona", "d": "9/2015"}, {"body": "sinoon hi function return \u73b0\u5728\u4e3b\u8981\u662f\u60f3\u5355\u72ec\u64cd\u4f5c project \u53ea\u80fd vmprojectlist set \u91cd\u5199\u6240\u6709\u7684\u6570\u636e\u7684\u65b9\u5f0f\u89c9\u5f97\u5f88\u4e0d\u4f18\u96c5 \u4ee5\u4e0a\u6211\u90fd\u6574\u7406\u5230 vuejsdiscussion", "d": "9/2015"}, {"body": "sinoon", "d": "9/2015"}, {"body": "\u4e0d\u884c\u662f\u56e0\u4e3a\u4f60\u7684\u521d\u59cb\u6570\u636e\u5bf9\u8c61\u91cc\u9762\u6ca1\u6709 vue \u5bf9\u8c61\u4e5f\u53ef\u4ee5\u76f4\u63a5 \u6570\u7ec4\u7684 \u4e0d\u63a5\u53d7 sinoon", "d": "9/2015"}, {"body": "vue", "d": "9/2015"}, {"body": "think need listen resize event window update mobile field handler", "d": "9/2015"}, {"body": "every single component seems repetitive trying avoid already know could get working like hate every single one main vue instance components fire main vue instance always default value", "d": "9/2015"}, {"body": "store check screenwidth method expensive use mixin btw type questions posted vuejsdiscussion instead", "d": "9/2015"}, {"body": "intellectproductions find good solution handle", "d": "3/2016"}, {"body": "options", "d": "9/2015"}, {"body": "thanks problem solved try add guide later section guide wrong nt option still gets rendered tags around intended components implicitly get replace false option template", "d": "9/2015"}, {"body": "option used default changed guess guide slightly date needs updating", "d": "9/2015"}, {"body": "guide updated", "d": "9/2015"}, {"body": "thread old know option get removed", "d": "5/2018"}, {"body": "yes", "d": "5/2018"}, {"body": "curiosity would mind sharing reasoning", "d": "5/2018"}, {"body": "mistake nt read guide carefully use registered component parent instance template make sure component registered instantiate root vue instance", "d": "9/2015"}, {"body": "looks like plugin creating nonobserved fields fly recommended practice still work though", "d": "9/2015"}, {"body": "edit explicit", "d": "9/2015"}, {"body": "nicee nt know looked directives obviously close enough sorry posting silly question variable passed data object like read documentation sure fully understanding got working documentation says use style object like elementstyleheight access like elementstyles appropriate behavior", "d": "9/2015"}, {"body": "yes like usually make computed property though", "d": "9/2015"}, {"body": "nt computed properties typically concatenation sort heavy logic replacing value key though", "d": "9/2015"}, {"body": "plus move computed properties tag ca nt read js data function return current current slide speed speed animation slide count many slides slider object thumbnailheight height thumbnails slidewidth style width height marginleft margin left entire slider container flip slides computed function return styles width function return thisstylewidth px height function return thisstyleheight px marginleft function return thisstylemarginleft px ca nt access thisstyles component vstyle styles wo nt work anymore read data method computed would like use computed automatically add thisstyleheight px getter instead typing px everywhere", "d": "9/2015"}, {"body": "ie throwing away mustache tags inside attributes longknown issue using vstyle preferred compatibility last comment using wrong syntax computed", "d": "9/2015"}, {"body": "see computed properties things inferred existing data styles fall description would", "d": "9/2015"}, {"body": "oh thank", "d": "9/2015"}, {"body": "need connect global vm option becomes available data binding", "d": "9/2015"}, {"body": "variable changes use update changed", "d": "4/2018"}, {"body": "trusktr please use forums discord questions variable changes need reassign even set created hook wo nt observed ps answer back please", "d": "4/2018"}, {"body": "", "d": "9/2015"}, {"body": "scope gotcha use component root node compiled parent scope actually sends parent scope nt instead automatically available inside component see note replaced different scoping behavior works way expected", "d": "9/2015"}, {"body": "ah figured anyway achieve read guide would like pass prop index value", "d": "9/2015"}, {"body": "nt need access inside component template already", "d": "9/2015"}, {"body": "want access component though template wanted pass prop inside vue component wanted access prop component code know slide thumbnail refers", "d": "9/2015"}, {"body": "inside component", "d": "9/2015"}, {"body": "oh wow thanks nt realize easy", "d": "9/2015"}, {"body": "way get inside template upd decided problem", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "global keypress events dispatched elements better handle global keypress events separately eg attach listeners component event", "d": "9/2015"}, {"body": "sorry novice example code", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "vue use syntax see also scroll full changelog gt arguments", "d": "11/2015"}, {"body": "syntax seem work static elements form inputs proper way achieve still bind listeners body", "d": "2/2016"}, {"body": "sagalbot would like know find solution seen koel project uses purposed tried implementing key events like app work koel appvue tried adding key events similarly appvue triggered", "d": "3/2016"}, {"body": "primozrome koel author reason works app lies fullpage element basically setting makes element focusable reactive key events let drag thread longer though vue repo meant bug reports feature requests happy help gitter", "d": "3/2016"}, {"body": "provide repro using", "d": "9/2015"}, {"body": "sure thing repro created", "d": "9/2015"}, {"body": "spent time nt think due comment issue affected looks like comment nodes output dom vue using vfor far tell issue caused something else ca nt seem resolve", "d": "9/2015"}, {"body": "ok anchor nodes empty textnode normal mode comment node debug mode code hacks around comment nodes also check empty textnodes", "d": "9/2015"}, {"body": "thanks info however nt resolve issue walk reproduction steps updated fiddle read property error still appears note happens dragging two lists like example dragging within list appears ok ideas", "d": "9/2015"}, {"body": "guess meant indeed performs superior fiddle", "d": "9/2015"}, {"body": "yes right thanks correction updated issue correct versions", "d": "9/2015"}, {"body": "actually situation seems complicated fix indeed improve performance still major performance regression using sufficiently complex large array items filtering slicing itemsit fine nearly unusable unfortunately nt time moment dig deeper set new fiddle demonstrates filtering works fine setting value js terribly slow inputting values vmodel input form reverted back", "d": "9/2015"}, {"body": "also situaton user input extremely slow ended implementing custom filter case", "d": "9/2015"}, {"body": "duebbert filtering computed property using array specify specific key filter like", "d": "9/2015"}, {"body": "regression filtering large arrays fixed duebbert would appreciate try", "d": "9/2015"}, {"body": "earliest monday sep evan notifications githubcom wrote regression filtering large arrays fixed duebbert would appreciate try reply email directly view github", "d": "9/2015"}, {"body": "tested seems fixed excellent work many thanks", "d": "9/2015"}, {"body": "still use snakecase declaring props options templates use camelcase refer parsed minus operation", "d": "9/2015"}, {"body": "actually meant something like fact coffee somecomponent vueextend props somevalue props somevalue type string html html somevalue underscore perfectly aligned coffeescript conventions declaring props html markup using totally acceptable difference vue would parse html attribute variable instead based optional config option", "d": "9/2015"}, {"body": "ca nt use html", "d": "9/2015"}, {"body": "right somehow nt thought looks like quite nice workaround issue anyway hand nt aligned html conventions least bit uncommon still think would nice feature vue solution makes happy smile thanks lot", "d": "9/2015"}, {"body": "would like reopen working web server demand snakecase coding convention supported vue props could propose global config also think pull request helpful", "d": "3/2017"}, {"body": "opinion", "d": "3/2017"}, {"body": "would line rubyrails conventions well global config would plus", "d": "7/2017"}, {"body": "nt think interested line backend technology personally see benefit adding support even casing existing camelcase amp kebabcase enough use cases adding another one like valid reason", "d": "7/2017"}, {"body": "well coffeescript really like rubyrailscoffeescript coding standard probably would nt hard vue look props available determine prop defined assigning finds", "d": "7/2017"}, {"body": "sorry sounded rude nt mean following html javascipt coding standards vue nt follow coding standards since affiliated", "d": "7/2017"}, {"body": "close", "d": "9/2015"}, {"body": "thought related", "d": "9/2015"}, {"body": "nt fix bug unfortunately", "d": "9/2015"}, {"body": "please describe steps reproduce error", "d": "9/2015"}, {"body": "hi see link developer toolsfirebug open explain app list component working vrepeat ok need add search field searching list item change de vrepeat add letter filtering list remove letter clear search term occurs error thank", "d": "9/2015"}, {"body": "vuevalidator bug please open issue vuevalidator repo instead", "d": "9/2015"}, {"body": "hi sorry mistake thk", "d": "9/2015"}, {"body": "multiple clause longer supported make support array objects probably use one single computed property instead", "d": "9/2015"}, {"body": "bindstyle taking array good save lots additional computed properties achieve thing", "d": "9/2015"}, {"body": "add transition see red tip end section", "d": "9/2015"}, {"body": "specifically dom events tied dom dispatched user interactions therefore handled dom vue events often app internal logic emitted javascript handled javascript mixing two would likely cause confusion want simple write custom directive listen vue events though", "d": "9/2015"}, {"body": "likely due jsdelivr cdn errors version upgrade work fine", "d": "9/2015"}, {"body": "filters currently supported inside prop expressions probably", "d": "9/2015"}, {"body": "ok thx reading receiving", "d": "9/2015"}, {"body": "implemented", "d": "9/2015"}, {"body": "nt declare property wo nt observed two examples listed actually equivalent setting want unless fully understanding use case maybe option simply attaches nonobserved properties instance", "d": "9/2015"}, {"body": "moment first code block actually dealing problem event declare property starting hook hook maybe option statics simply attaches nonobserved properties instance mean statics keyword proposal add statics options vue", "d": "9/2015"}, {"body": "swannknani ah see problem vue private properties ca nt proxy prefixed properties found data maybe relaxed checking property already exists proxying", "d": "9/2015"}, {"body": "ok thanks understand maybe option statics simply attaches nonobserved properties instance ok implement something like order deal cases maybe pointed check property already exists proxying otherwise throw warning something like", "d": "9/2015"}, {"body": "swannknani thought probably bad idea may need add new private properties vue prototype future weird prefixed worked upgrade starts throw warning original use case using vector data binding expect reactive need declare data yes prefix", "d": "9/2015"}, {"body": "original use case using vector data binding expect reactive need declare data yes prefix nt need property reactive stop wrong declare straight component way access", "d": "9/2015"}, {"body": "nt need reactive nt declare still attach plain property vm eg", "d": "9/2015"}, {"body": "btw beneficial mean would documentation tests issue tracker used people without require vue directly would also make vue source code bit easier read since fewer files", "d": "9/2015"}, {"body": "see comment evan reply", "d": "9/2015"}, {"body": "thanks azamatsharapov missed thread guess close one extract", "d": "9/2015"}, {"body": "azamatsharapov thanks point thread", "d": "9/2015"}, {"body": "probably track exactly slow like people otherwise may hard help", "d": "9/2015"}, {"body": "info refers cpu profile cpu profile", "d": "9/2015"}, {"body": "questions lot complex computed properties tried building using production settings", "d": "9/2015"}, {"body": "tried building using production settings computed object", "d": "9/2015"}, {"body": "see understand turned default caching computed properties seems cached default nt want manually set cache false every computed properties like", "d": "9/2015"}, {"body": "add computed properties perf issue go away alpha default", "d": "9/2015"}, {"body": "yes works thanks good work", "d": "9/2015"}, {"body": "guess going back default", "d": "9/2015"}, {"body": "youngsteveo yep memory cost seems trivial compared situations like", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "refactored code removing two complex mindate maxdate set single method method manually called needed ajax calls less magic performant even cache set true", "d": "9/2015"}, {"body": "csp branch purpose", "d": "8/2015"}, {"body": "support atom somehow normal release trying get atom use vue would problem could option use strict mon aug pm evan notifications githubcom wrote closed reply email directly view github", "d": "9/2015"}, {"body": "markhahn csp support involves shipping entire javascript parserinterpreter file size becomes twice large two versions first place", "d": "9/2015"}, {"body": "understand pester atom team using strict tue sep evan notifications githubcom wrote markhahn csp support involves shipping entire javascript parserinterpreter file size becomes twice large two versions first place reply email directly view github", "d": "9/2015"}, {"body": "markhahn probably due restrictions chromium embedded framework atom running privileged app access file system allowing eval opens potential security loopholes also chrome os firefox os apps also enforce csp although environments file size nt matter anyway", "d": "9/2015"}, {"body": "size nt matter atom either already gigantic use one copy npm module packages make csp version available npm tue sep evan notifications githubcom wrote markhahn probably due restrictions chromium embedded framework atom running privileged app access file system allowing eval opens potential security loopholes also chrome os firefox os apps also enforce csp although environments file size doesnt matter anyway reply email directly view github", "d": "9/2015"}, {"body": "markhahn already", "d": "9/2015"}, {"body": "npm name tue sep evan notifications githubcom wrote markhahn already reply email directly view github", "d": "9/2015"}, {"body": "tag", "d": "9/2015"}, {"body": "yes vue csp works ok", "d": "9/2015"}, {"body": "thanks never seen syntax like thought versions tue sep pm notifications githubcom wrote yes vue csp works ok reply email directly view github", "d": "9/2015"}, {"body": "hmm seems vue csp nt work apm publish sure probably way include js file", "d": "9/2015"}, {"body": "hmm seems vue csp nt work apm publish please post issue atomapm thu sep pm notifications githubcom wrote hmm seems vue csp nt work apm publish sure probably way include js file reply email directly view github", "d": "9/2015"}, {"body": "nt use case transition visibility components statedriven managed imperatively", "d": "8/2015"}, {"body": "like except repeating code vue blablabla moduleexports data function return initialized false ready function thisinitialized true would much handy write something like parent template", "d": "8/2015"}, {"body": "meant used parent component though consider use case mentioned popup lightbox sidebar part app whether displayed managed piece state app eg app template something like component also needs able control showhide state pass parent state component twoway prop inside sidebar close setting either case nt see need initialization transitions", "d": "8/2015"}, {"body": "closing inactivity", "d": "9/2015"}, {"body": "great first see options think voptions", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "use like", "d": "9/2015"}, {"body": "syntax ca nt visit property obj objlist following example options value equal node text wish options value equal objvalue", "d": "10/2015"}, {"body": "ije issue bit data syntax instead", "d": "10/2015"}, {"body": "need write customized select component accepts property specifies either options option groups acts exactly property version vuejs thanks advance", "d": "11/2015"}, {"body": "haixinghu", "d": "11/2015"}, {"body": "fyi think still using old param", "d": "2/2016"}, {"body": "quick question creating dynamic selects depending data would like set way first option always selected passed vmodel since setting formdata empty object initial load vmodel bind doesnt get assigned vmodel get work would like add selected option vmodel", "d": "12/2017"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "8/2015"}, {"body": "using component like without alias", "d": "8/2015"}, {"body": "oh might vm observing prefixed properties data contain lot properties", "d": "8/2015"}, {"body": "vast majority properties defined using nt prefixed using properties prefixed define directly vm like however using without aliases using alias significant performance increase vue without aliasing vue aliasing however still quite lot slower vue aliasing try narrow specifically could causing slow", "d": "8/2015"}, {"body": "briefly describe question look like using lot", "d": "8/2015"}, {"body": "commit imagine related try commenting lines local files see makes difference", "d": "8/2015"}, {"body": "wow suspicious seemingly right change commented lines practically restored performance numbers vue vue without looking code something toggle config options answer previous questions using handful times copy paste using", "d": "8/2015"}, {"body": "ok using", "d": "8/2015"}, {"body": "seems caused sync mode merging lot props repeated object every merge called thus forcing entire list reevaluated tested would longer happen", "d": "8/2015"}, {"body": "thanks", "d": "8/2015"}, {"body": "read filter affects dom value want limit model value two decimals need still write filter", "d": "8/2015"}, {"body": "filter fiddle removes nonnumeric characters nt round value want round value model filter", "d": "8/2015"}, {"body": "happen every mustache tag provide reproduction", "d": "8/2015"}, {"body": "actually problem sorry nt see already issue opened", "d": "9/2015"}, {"body": "closing repro available", "d": "9/2015"}, {"body": "problem ie every mustache tag problem sure provide reproductioni ues vtext instead mustache expression think best way vue version", "d": "10/2015"}, {"body": "kennywho nonstandard use laughing", "d": "10/2015"}, {"body": "sake ie change tag", "d": "10/2015"}, {"body": "thank alot ramreddy", "d": "10/2016"}, {"body": "makes sense although difference terms memory usage pretty small computed properties results less memory cases probably nt need worry", "d": "8/2015"}, {"body": "agree setting default especially since computed properties simple would allow developer finetune application applying caching needed rather removing caching everywhere", "d": "8/2015"}, {"body": "personally debated bit introducing change yeah seems trade memory performance really better default cache default false", "d": "8/2015"}, {"body": "reference", "d": "9/2015"}, {"body": "would overridable globally andor per component per computed property", "d": "9/2015"}, {"body": "simplesmiler probably per property global override nt seem like good idea cases time disable caching know want access getter contains nonreactive dependencies eg datenow dom sizes", "d": "9/2015"}, {"body": "directives compilation priorities default priority custom directive bound already removed able get vmodel value use priority higher", "d": "8/2015"}, {"body": "thanks sorted", "d": "8/2015"}, {"body": "something like mind nt got time great someone wants work said relies lot vue internals maybe first step start ux tool ie present reactivity users component hierarchy would ui like stage think wise start things implementationbound", "d": "8/2015"}, {"body": "forgot document second category showing observable values instead gettersetters chrome extension useful works looking dom means observe declaratives want method looking observable values resolved needs work even stepping code least breakpoint hit could something runs console", "d": "8/2015"}, {"body": "would ui like yes implementation would much easier beginning suggestion ui design ui could run second web page browser based would also mean could run atom editor facebook nuclide later could even sourcebased linking vue user source code like real ide last part would obviously long terms", "d": "8/2015"}, {"body": "markhahn needs sort communication bridge injected app page injecting ui current page", "d": "8/2015"}, {"body": "note lot ideas flowing moment many bad ideas good way start designing needs sort communication bridge injected app page idea node bridge debug api developers hook debuggers chromium apis low level vue could least querying keypaths find observables acting beginning simple gdblike commandline repl interface could used talk debug api api would hard first ui would easy since would map user interaction api calls later higherlevel uis like one probably thinking could implemented api would one pullrequest vue api everything else could decoupled affect vue core injecting ui current page yes could done even api idea api could called anywhere even injected code current page api looks hard drop idea quickly really feel api proven method using debuggers course disagree api idea drop final say ideas would nt work unless agree", "d": "8/2015"}, {"body": "let close move vuejsdiscussion time work nodechromium debug api seems bit lower level mind note gives clean state instead gettersetters even paused break point think would generally useful something along lines ember inspector", "d": "8/2015"}, {"body": "amber example looks quite nice sun aug evan notifications githubcom wrote closed reply email directly view github", "d": "8/2015"}, {"body": "please specific happen upgrade version using previously code look like ca nt expect people help posting screenshot", "d": "8/2015"}, {"body": "previous version updated error", "d": "8/2015"}, {"body": "vuerouter tests working properly need real demo see wrong", "d": "8/2015"}, {"body": "strange works perfectly except messages console project error point", "d": "8/2015"}, {"body": "looked little bit mistake turned certainly find element id error gave router causing falls", "d": "8/2015"}, {"body": "error occurs announcement", "d": "8/2015"}, {"body": "unplugged router error still announcement", "d": "8/2015"}, {"body": "could due fact used nodejs php problems", "d": "8/2015"}, {"body": "using router start app router closing provide repro actual error", "d": "8/2015"}, {"body": "cited example moment code provided example", "d": "8/2015"}, {"body": "turns two errors one vue second vuerouter two identical error reproduce example able arises error", "d": "8/2015"}, {"body": "example nt even using router correctly show error originally described", "d": "8/2015"}, {"body": "router code taken example minor changes", "d": "8/2015"}, {"body": "mounting two vue instances onto element", "d": "8/2015"}, {"body": "even hook selectors disable error still persists", "d": "8/2015"}, {"body": "means example irrelevant error need provide one actually shows error", "d": "8/2015"}, {"body": "link showed code fact used", "d": "8/2015"}, {"body": "showing error screenshot many times explain ca nt help error happens means something wrong setup shown", "d": "8/2015"}, {"body": "new \u4e00\u4e2a vue \u6765\u66f4\u65b0\u7684", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4e0d\u8981\u7528 svg \u5b57\u7b26\u4e32\u8d4b\u503c\u554a vue \u53ef\u4ee5\u76f4\u63a5\u7ed1\u5b9a svg \u7684", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6307\u4ee4\u5728 vue \u91cc\u9762\u76f4\u63a5\u7528", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u53ef\u80fd\u662f", "d": "8/2015"}, {"body": "hi closed solution", "d": "11/2015"}, {"body": "app cpde async factory function slider component hooks", "d": "8/2015"}, {"body": "part vue concern general recommendations", "d": "8/2015"}, {"body": "btw", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u67e5\u770b\u63a7\u5236\u53f0", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4f60\u770b\u5230 webpack \u7684\u8b66\u544a\u6ca1\u6709 \u4f1a\u5bfc\u81f4 vue", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "figured grabbing value url hash hash value true nt get cast boolean checkbox get checked casting boolean works sure broke", "d": "8/2015"}, {"body": "\u786e\u5b9e\u662f\u4e2a", "d": "8/2015"}, {"body": "pluralize filter follows simple rules handle irregular special cases amp write custom filter type formatting", "d": "8/2015"}, {"body": "please provide reproduction exactly environment working", "d": "8/2015"}, {"body": "fault chrome extension block esc event spent whole afternoon debug sorry wasting time", "d": "8/2015"}, {"body": "\u0442\u0443\u0442 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043d\u0435 \u0437\u0430\u0434\u0430\u044e\u0442 \u0432\u0430\u043c \u0441\u044e\u0434\u0430 \u0438\u043b\u0438 vuejsdiscussion", "d": "8/2015"}, {"body": "azamatsharapov \u0430 \u043c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u044f \u044d\u0442\u043e\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u0430\u043b \u0442\u0430\u043c \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u0434\u043e\u043a\u0430\u0445 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0432\u043e\u0434\u0443 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u0442\u0443", "d": "8/2015"}, {"body": "wormen \u0432\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0443 \u0432\u0430\u0441 \u043f\u043b\u043e\u0445\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0441 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u043c \u0432\u043e \u0432\u0442\u043e\u0440\u044b\u0445 \u0443 \u0432\u0430\u0441 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0435 bug report \u0438 \u043d\u0435 feature request \u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0447\u0442\u043e \u043a\u0443\u0434\u0430 \u043f\u0438\u0441\u0430\u0442\u044c \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f issue \u0433\u0438\u0442\u0445\u0430\u0431 \u0432\u0430\u043c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u044d\u0442\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0432\u044b\u0434\u0435\u043b\u044f\u044f \u0435\u0451 \u043a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u0436\u0435 \u0434\u043e\u043a\u0438 \u0442\u0430\u043a \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432\u044b \u0443\u0432\u0435\u0440\u0435\u043d\u044b \u0447\u0442\u043e \u0432 \u0434\u043e\u043a\u0430\u0445 \u0447\u0435\u0433\u043e \u0442\u043e \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0430\u044f \u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u044d\u0442\u043e \u0441\u0430\u043c\u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0438\u043b\u0438 issue \u0442\u0430\u043c \u043e\u0442\u043a\u0440\u044b\u0442\u044c", "d": "8/2015"}, {"body": "\u0430 \u043d\u0430\u0441\u0447\u0435\u0442 \u0432\u0430\u0448\u0435\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430 \u0435\u0441\u043b\u0438 \u0432\u044b \u0434\u043e\u043a\u0438 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u0435\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u0442\u043e \u0442\u0430\u043c \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c\u0441\u044f \u043d\u0438\u0447\u0435\u0433\u043e \u043e \u0441\u0435\u043b\u0435\u043a\u0442\u043e\u0440\u0430\u0445 selector \u0431\u0435\u0440\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \u0432\u0442\u043e\u0440\u043e\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442", "d": "8/2015"}, {"body": "\u044d\u0442\u043e \u044f \u0432\u0438\u0434\u0435\u043b \u0432 \u0442\u043e\u043c \u0438 \u043f\u0435\u0447\u0430\u043b\u044c", "d": "8/2015"}, {"body": "\u8fd9\u91cc\u4f60\u7b49\u4e8e\u628a \u8ddf\u81ea\u5df1\u548c", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "whwnow", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "ca nt directly use class subclass vue use really want classes take look", "d": "8/2015"}, {"body": "think something like js import basewidget basewidget export default class griditem extends basewidget constructor options optionstemplate templatewidgetgriditem html super options", "d": "8/2015"}, {"body": "package manager bower vs package ready install via npm bower duo leverage favorite eco system", "d": "9/2015"}, {"body": "happening", "d": "10/2015"}, {"body": "josephsilber official release likely week next", "d": "10/2015"}, {"body": "cdn", "d": "10/2015"}, {"body": "process actually move issues create another repository", "d": "10/2015"}, {"body": "matteocontrini move", "d": "10/2015"}, {"body": "done", "d": "10/2015"}, {"body": "clap", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "", "d": "10/2015"}, {"body": "sparkles", "d": "10/2015"}, {"body": "nice install version via npm", "d": "8/2015"}, {"body": "sdebacker proposal proposing changes people provide feedback", "d": "8/2015"}, {"body": "yes proposed changes already pushed branch", "d": "8/2015"}, {"body": "sdebacker install branch note branch unstable use risk", "d": "8/2015"}, {"body": "thanks returns matches found", "d": "8/2015"}, {"body": "sdebacker version npm using", "d": "8/2015"}, {"body": "upgrade npm via homebrew perhaps need", "d": "8/2015"}, {"body": "weird tried works maybe typo", "d": "8/2015"}, {"body": "great proposal", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "component scoping still compiled parent scope except scope", "d": "8/2015"}, {"body": "implemented alpha branch", "d": "8/2015"}, {"body": "switched zsh bash run", "d": "8/2015"}, {"body": "interpreting correctly deprecation vrepeat lieu vfor create true partials opposed vms within standard use case experience loss functionality passing object back event handlers", "d": "8/2015"}, {"body": "mattymil yet see use case anonymous child vm necessary cases pass event handler data object repeated array", "d": "8/2015"}, {"body": "ok interesting thanks sep pm adam patarino notifications githubcom wrote practice dynamic components passing data children currently something like new spec would like reply email directly view github", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "doc rcvuejsorg syntax support", "d": "10/2015"}, {"body": "furybean supported use", "d": "10/2015"}, {"body": "simplesmiler thanks", "d": "10/2015"}, {"body": "little late party sure feature using alias syntax allowed store data vm application component state example wanted turn editing mode item list could would nt dilute object since longer using vm assuming longer possible clean workaround maybe understanding change actually moved yet nt chance experiment looking current code base trying evaluate pain involved", "d": "12/2015"}, {"body": "", "d": "7/2016"}, {"body": "vue \u7684\u6e32\u67d3\u5f53\u7136\u4e0d\u4f1a\u5305\u62ec \u4f9d\u8d56 inline \u5143\u7d20\u4e4b\u95f4\u7684 whitespace margin", "d": "8/2015"}, {"body": "looking forward breaking changes", "d": "8/2015"}, {"body": "like except worried killing agree good pattern general sometimes useful easiest way handle complex interactionsdata passing tightly coupled components", "d": "8/2015"}, {"body": "davidkhess yet come across situation absolutely needed make work sure make things easy necessarily good way direct parentchild situations always use props multiple nested components big mess performance implications trying share something entire component tree put access", "d": "8/2015"}, {"body": "see like convenience javascript closure visibility everything every parent scope create typically capture couple vars practice overuse closures would bad style certainly come handy patterns code tightly coupled", "d": "8/2015"}, {"body": "davidkhess know like lexical scoping however difference javascript functions need written together get lexical scoping fairly clear understand look file components definition unit isolation often separated different files used together defined template parent component look child component ca nt easily reason context used make components maintainable rely self discipline ie use need exactly want move away want system maintainablebydefault", "d": "8/2015"}, {"body": "use rarely components declared within another component file way visually see nesting implications much like javascript closure mainly playing devil advocate could live without years burned couple times decisions overly restrict system behavior later forced go back open back personally comfortable position got enough vueyears belt yet take strong stance", "d": "8/2015"}, {"body": "base component widget extending multiple variations text widget image widget etc use component select correct widget pass props different widgets would need different props currently place use extend worries hold widgets array main app vrepeat create", "d": "8/2015"}, {"body": "would removing using lead get wrong element example would query result using many components mixins apply behaviors sorry nt seen new query api ignore comment html", "d": "8/2015"}, {"body": "terencez sure understood original usage would query api solve", "d": "8/2015"}, {"body": "sorry nt describe issue clearly problem select element declared template including transcluded elements example html want select element element using easy locate using get result reason ignoring comment assume problem resolved new query api provided", "d": "8/2015"}, {"body": "predefine things need also put things depend certain data inside block", "d": "8/2015"}, {"body": "hi evan thanks quick reply followed advise still get errors console changed push items array using method makes difference missing something updated js fiddle thanks kris", "d": "8/2015"}, {"body": "meant", "d": "8/2015"}, {"body": "worked great thanks however getting really weird behaviour rename todo todotable getting errors console funny enough remove span template error gone", "d": "8/2015"}, {"body": "actually using fine use options warning heuristics bit aggressive ignore also considering improving param since really intuitive", "d": "8/2015"}, {"body": "also somewhat annoying warnings appear even repeating", "d": "8/2015"}, {"body": "dgerber gon na gone warn used inside select", "d": "8/2015"}, {"body": "ok longer necessary allow bind even object", "d": "8/2015"}, {"body": "see", "d": "8/2015"}, {"body": "please provide reproduction code nt show problem", "d": "8/2015"}, {"body": "screenshot submission along array enough", "d": "8/2015"}, {"body": "correctly bag", "d": "8/2015"}, {"body": "enough need actual code reproduces bug like ca nt fix bugs looking screenshots", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "sorry save", "d": "8/2015"}, {"body": "duplicate objects array push clone instead code also quite messy fixed", "d": "8/2015"}, {"body": "vmodel nt work hidden input nt using hidden input using vue store state dom store js directly", "d": "8/2015"}, {"body": "came across need using type select tag way works hides select show something else know use directive wold easier could override behaviour", "d": "11/2015"}, {"body": "issue edge liking hidden inputs came across think intention hidden inputs set oneway binding case much better use", "d": "3/2016"}, {"body": "yeah rjoo solution saved day", "d": "6/2016"}, {"body": "libraries like semanticui require hidden input eg display dropdown multiples selection rjoo using solve problem use vuejs whats version using", "d": "10/2016"}, {"body": "overcame problem using parent element watching change either hidden field wait callback party lib like semantic ui new value ref wrap party scripts components make reusable quick example would look semantic ui dropdown vue require semanticdistcomponentsdropdownjs export default props value mounted el dropdown dropdown setting onchange value gt emit input value use usual works like charm vuejs lt", "d": "2/2017"}, {"body": "mainjs appjs change template wrapped much want vuecomponentvue badumtss", "d": "3/2017"}, {"body": "cspeer thank code works still logs warning info change dropdown vuedevtools ready detected vue dropdown undefined", "d": "3/2017"}, {"body": "mclxly sure got latest semantic ui version nt see warnings code exactly like one described", "d": "3/2017"}, {"body": "cspeer semantic ui today fixed problem move following function vue component", "d": "3/2017"}, {"body": "store state dom store js directly party plugins like jquery color picker", "d": "3/2017"}, {"body": "hi please explain limitation got vue html dom allows set values hidden inputs", "d": "4/2017"}, {"body": "problem knocking head desk hour implement workaround semanticui dropdown tomorrow suspect need trumbowyg ace use heavily application well semanticui form elements suspect underlying issue regardless input type onchange events happen response user actions setting value programmatically since thirdparty controls using store state nt manually trigger event nothing vue watch alas guess wait semanticui everyone else vue things", "d": "6/2017"}, {"body": "sent pr suggested addition documentation", "d": "6/2017"}, {"body": "want use submit event form", "d": "7/2017"}, {"body": "hi please explain limitation got vue html dom allows set values hidden inputs meant provide twoway binding react tu userinput hidden fields ca nt user input consequently nt make much sense vmodel hidden input use", "d": "7/2017"}, {"body": "vinayakkulkarni thanks code snippet clue get semantic calendar plugin work vue js", "d": "7/2017"}, {"body": "using modified version bootstrap datepicker created small component usage", "d": "7/2017"}, {"body": "ah guess tried way semantic calendar nt work", "d": "7/2017"}, {"body": "using semantic calendar datepicker listening picker change event updating underlying property works dates chosen picker made directly user input element field properties come prop rather binding individually mutating field prop value key would nt considered best practice props events purists could something similar using custom input component calling code use vmodel native form element html moduleexports name fieldinputdate props field mounted function const f refsvaluefield const fdata thisfield refswrapper calendar type date today true onchange function date text mode fdatavalue text return true", "d": "7/2017"}, {"body": "cspeer got problem wanted try solution ever encounter problem select value alway previous value selected example empty select pick value consolelog get empty tat pick value previously picked one gets consoleloged", "d": "10/2017"}, {"body": "know issue old ca nt find simpler solution use basic layout semantic ui dropdown want share work around using semantic ui dropdown attaching change event hidden field", "d": "10/2017"}, {"body": "case acebalajadia solution nt work listing come alternative way", "d": "4/2018"}, {"body": "rather needing hidden input element pass data vue directly set data object directly vue declared variable available global context example html directly set value vmyourdata whatever data may placing hidden input", "d": "9/2018"}, {"body": "please post questions please read docs opening questions", "d": "8/2015"}, {"body": "use filter please open questions vuejsdiscussion", "d": "8/2015"}, {"body": "\u5982\u679c\u65b0\u65e7\u5185\u5bb9\u6709\u90e8\u5206\u91cd\u590d\u7684\u8bdd\u53ef\u4ee5\u8003\u8651\u52a0\u4e0a index", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "listvue newarray b c", "d": "8/2015"}, {"body": "xiaoyou\u4e0a\u6b21podcast\u91cc\u8bf4\u7684animation\u7684\u94a9\u5b50\u4ec0\u4e48\u7684 \u662f\u6307\u7684\u662f\u5565\u54c7", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u73b0\u5728 \u5bf9\u7528\u6237\u6765\u8bf4\u663e\u793a\u5168\u90e8 \u5c06\u6765\u7684\u7248\u672c\u4f1a\u9488\u5bf9", "d": "8/2015"}, {"body": "please provide reproduction nt work intended", "d": "8/2015"}, {"body": "consider following paginated list multiple columns javascript function entitiesperviewport paginated list child scrollable container var clientheight parent elclientheight return thiscolumns mathround clientheight thisentityheight prior change computed property evaluation always worked must placed docs state computed properties cached lazily reevaluated necessary offer explanation conditions invalidate cache suspect changes tracked invalidates cache", "d": "8/2015"}, {"body": "hmm guess personally use computed properties making view declarative ie bind template never rely imperative code never meant used getter guess lot people teffenellis right cache invalidates reactive dependency changed vue way knowing external dependency like changed make cache optional since makes performance difference computed property unusually expensive", "d": "8/2015"}, {"body": "believe adding config making computed property cache optional might unnecessary clarification documentation help user understand computed property appropriate getter function computed properties cached reevaluated reactive dependency changed thank", "d": "8/2015"}, {"body": "teffenellis could done unobtrusive way default work like without caching really need caching specific scenario enable perproperty basis", "d": "8/2015"}, {"body": "per computed configuration defaulting", "d": "8/2015"}, {"body": "make one step plus boolean value alwayscached alwaysreevaluated properties", "d": "8/2015"}, {"body": "karevn nt really see point making function makes unnecessarily complicated", "d": "8/2015"}, {"body": "hard way function bit overkill may helpful complex cases make work ways function use result mark cache record stale boolean use enabledisable caching", "d": "8/2015"}, {"body": "think making accept function make confusing people may end creating slow apps nt use correctly thing computed properties remember somebody complaining performance evan advising use heavy operations inside computed properties implemented caching", "d": "8/2015"}, {"body": "computed properties evaluated point easier make one computation function handler computed properties smarter removed alltogether sake simplicity tried use current state ended using approaches recomputed data methods could control caching strategy effectively enough imho question make easy use newbies powerful enough advanced usage words make aggressively cached default evan cache option optional function cache advanced usage example current app lots computations related window object dom element sizes would useful control caching one function passed several computed properties least api mark cached computed value stale", "d": "8/2015"}, {"body": "karevn nt think really understand computed properties automagic always uptodate property used compute value based reactive values putting lot windowdom sizes inside computed properties expect act dependencies say using wrong find useful", "d": "8/2015"}, {"body": "got computations based vue reactive values pretty cheap bother caching", "d": "8/2015"}, {"body": "karevn cheap time also say computed property mapfilterreduces huge array slow let suppose additional computed properties rely one calling expensive computed property many times necessary", "d": "8/2015"}, {"body": "agree still think adding control caching hurt", "d": "8/2015"}, {"body": "meant function value option make sure confusion function return value determine cache flush ie returns true keep cached false triggers recalculation", "d": "8/2015"}, {"body": "karevn would useful know call function call reactive dependency changes really different cached", "d": "8/2015"}, {"body": "implemented vue computed properties nt updating shared store updated computed properties needed vmodel attribute situation shared store contains root node render pipeline manager render function creates new elements passing previous element pipeline slot essentially nested components referencing store property computed property referenced vmodel attribute updates root node data via store trickles render pipeline exactly expected however computed properties child nodes remain value sure bug vue good use case computed property cache busting update issue also exists root node computed properties made methods avoid issue however child nodes still rely computed property described", "d": "11/2016"}, {"body": "later reverted caching enabled default computed properties behavior describing mostly like shared store nt made reactive description still vague determine real cause think bug opening separate issue proper reproduction", "d": "11/2016"}, {"body": "way force recalculation computed property eg flushing cache", "d": "2/2017"}, {"body": "mesqueeb please nt ask question issues even less closed ones use forum instead use method", "d": "2/2017"}, {"body": "solved problem think may facing problem use single store computed properties reactive store getters use store module reactive longer stuck days update nothing submodules update find", "d": "12/2017"}, {"body": "already implemented shipped next release", "d": "8/2015"}, {"body": "checked release ca nt see change area meant work", "d": "8/2015"}, {"body": "bad overlooked pr writing release note", "d": "8/2015"}, {"body": "suppose add release notes", "d": "8/2015"}, {"body": "actually minor issues regarding feature officially include patch release", "d": "8/2015"}, {"body": "thanks great effort greetings czech republlic evan notifications githubcom actually minor issues regarding feature officially include patch release reply email directly view github", "d": "8/2015"}, {"body": "shipped", "d": "8/2015"}, {"body": "supposed work thought eg clicking checkbox willl sets finished model instead true", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "thanks", "d": "8/2015"}, {"body": "note vue templates parsed actual html tag template parsed actual tag breaks expression rule thumb never include tags inside mustache expressions vue stringbased template language use either filter computed property case", "d": "8/2015"}, {"body": "thanks detailed report appreciated", "d": "8/2015"}, {"body": "\u76f4\u63a5", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "textarea \u7684 selectionstart selecitonend \u8fd9\u79cd", "d": "8/2015"}, {"body": "\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "duplicate yes going added", "d": "8/2015"}, {"body": "\u4e0d\u60f3\u901a\u8fc7props", "d": "8/2015"}, {"body": "\u63d0\u95ee\u8bf7\u5230 vuejsdiscussion", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "peaktai", "d": "8/2015"}, {"body": "please post questions vuejsdiscussion function access", "d": "8/2015"}, {"body": "merci beaucoup thanks tip vuejsdiscussions", "d": "8/2015"}, {"body": "weird problem eventtarget suppose anchor like click eventtarget anchor perfect write tag fontawesome like eventtarget becomes tag inside write like everything supposed eventtarget becomes tag check sure issue belongs thread new thread", "d": "5/2016"}, {"body": "hello potasiyam usage question encourage ask forum gitter try use issue tracker bug reports feature requests question use eventcurrenttarget need node listener", "d": "5/2016"}, {"body": "hope solve someone problem use vue ref username onclick function access like", "d": "7/2017"}, {"body": "inserted content follow component scope rules seems looking inlinetemplate", "d": "8/2015"}, {"body": "hi evan looked still getting weird behaviour fiddle shows looks like correctly compiled child scope without needing use note however binding nt update type box fiddle shows happens put component longer compiles component binding still nt update type box sure make", "d": "8/2015"}, {"body": "ah sorry nt look original fiddle careful enough related rather manually mounting vue instance inside another use one toplevel instance", "d": "8/2015"}, {"body": "ok thanks help", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "matmoo understandable interested another time example", "d": "8/2015"}, {"body": "wormen assume english native language understanding question correctly sorry", "d": "8/2015"}, {"body": "matmoo place clear", "d": "8/2015"}, {"body": "decision needed", "d": "8/2015"}, {"body": "wormen people community speak russian nt afraid duplicate messages russian although probably ask questions vuejsdiscussion vue gitter \u0432 \u043a\u043e\u043c\u044c\u044e\u043d\u0438\u0442\u0438 \u0435\u0441\u0442\u044c \u043b\u044e\u0434\u0438 \u0440\u0430\u0437\u0433\u043e\u0432\u0430\u0440\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u043f\u043e\u0440\u0443\u0441\u0441\u043a\u0438 \u0442\u0430\u043c \u0447\u0442\u043e \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0437\u043c\u0435\u0449\u0430\u0442\u044c \u0432 vuejsdiscussion \u0438\u043b\u0438 vue gitter", "d": "8/2015"}, {"body": "simplesmiler thanks", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "try", "d": "8/2015"}, {"body": "perfect thank", "d": "8/2015"}, {"body": "ran problem trick nt solve using version managed get working right way", "d": "10/2015"}, {"body": "mattbit using", "d": "11/2015"}, {"body": "mattbit animabear curly braces supported props since thus idiomatic way", "d": "11/2015"}, {"body": "simplesmiler see thanks change log", "d": "11/2015"}, {"body": "also use single quotes attribute items text cats generate json backend uses double quotes default", "d": "5/2016"}, {"body": "case anyone finds issue google searching thing vue figures interpolation props removed like proper way simply", "d": "12/2016"}, {"body": "helgesverre thanks lt", "d": "12/2016"}, {"body": "try bind array variable might need uses spread syntax", "d": "6/2018"}, {"body": "thank needed get errors go away funny thing still handing array vars without data problems warning", "d": "7/2018"}, {"body": "problem removed friends baang worked", "d": "8/2018"}, {"body": "itangog nt work wrapped", "d": "8/2015"}, {"body": "inside wo nt register top vm could many conflicting see handle official todomvc example", "d": "8/2015"}, {"body": "sure read code trying break everything written currently use dispatch event component tell parent selected bound main app broadcasts components message say new component selected works exactly thought made sense could change use way prop start going multiple layers gets bit messy imo still using internally let live add new global emitter people use current system nt work", "d": "8/2015"}, {"body": "use heavily willing rewrite everything really starting feel messy", "d": "8/2015"}, {"body": "start going multiple layers gets bit messy imo wrote something like earlier probably wo nt come soon events use sometimes global utility would useful interesting cases events dev centralizing app data state", "d": "8/2015"}, {"body": "adding global would nice please nt remove current ones find useful know intent improves readability use three heavily mon aug azamat notifications githubcom wrote start going multiple layers gets bit messy imo wrote something like context earlier probably wo nt come soon events use sometimes global utility would useful interesting cases events dev centralizing app data state reply email directly view github", "d": "8/2015"}, {"body": "also heavily rely relied event bus finished projects really felt bit messy eventually time sending events controller instance top handled sometimes another event broadcast chain sort globalized localized system implement something like really love idea please make sure switched custom modules node ecosystem like one thing consider us use sort modularisation like webpack browserify really make sense implement eventbus instance existing eventbus fingertip writing", "d": "8/2015"}, {"body": "markhahn remove anything plenty time migrate honestly think benefits decoupling event system view structure outweighs express intent example global event bus grep know former trigger latter event propagation depends components structured ca nt sure nirazul currently vue instances implement emitter interface already matter exposing internals already totally optional sure use whatever external event library want since without global emitter would common pattern good make sure users using certain build tools still access functionality", "d": "8/2015"}, {"body": "honestly think benefits decoupling event system view structure outweighs express intent broadcast dispatch realized arguing strongly simplicity removing things agree removed mon aug pm evan notifications githubcom wrote markhahn remove anything plenty time migrate honestly think benefits decoupling event system view structure outweighs express intent broadcast dispatch example global event bus grep emit event event know former trigger latter event propagation depends components structured ca nt sure nirazul currently vue instances implement emitter interface already matter exposing internals already totally optional sure use whatever external event library want since without broadcast dispatch global emitter would common pattern good make sure users using certain build tools still access functionality reply email directly view github", "d": "8/2015"}, {"body": "building application global event bus pattern lead app easier manage think building common ui components think useful communicate relative components like structure intend coupled structure information also carried events implicit example closes also let close easy event", "d": "8/2015"}, {"body": "menu closes also let submenus close easy broadcast menuclose event event one name without namespace problems global bus would require awkward namespacing code tue aug pm terencez notifications githubcom wrote building application global event bus pattern lead app easier manage think building common ui components think broadcast dispatch useful communicate relative components like menu menuitem submenu structure intend coupled structure information also carried events implicit broadcast dispatch example menu closes also let submenus close easy broadcast menuclose event reply email directly view github", "d": "8/2015"}, {"body": "terencez markhahn see use case control boundary events right prevent event dispatched go outside remember corresponding event handler contain inserted content nt implicit namespace problem remember manually fragile pattern part unhappy current implementation love see way solve problem keeping usefulness", "d": "8/2015"}, {"body": "control boundary events confused global bus boundaries right must misunderstanding meaning boundary wed aug evan notifications githubcom wrote terencez markhahn see use case control boundary events right prevent event dispatched menuitem go outside menu remember return false menu corresponding event handler boardcast menuitem contain inserted content nt implicit namespace problem remember manually fragile pattern part unhappy current implementation love see way solve problem keeping usefulness reply email directly view github", "d": "8/2015"}, {"body": "markhahn yeah true agree global event bus issues maybe want event listeners default ie broadcasted dispatched event handled stops unless handler explicitly pass would naturally contain events sent within subtree nt accidentally affect parts application", "d": "8/2015"}, {"body": "would prefer keep way clearly personal preference lazy arguments made either default return good coding would make every return explicit grin wed aug pm evan notifications githubcom wrote markhahn yeah true agree global event bus issues maybe want event listeners return false default ie broadcasted dispatched event handled stops unless handler explicitly pass return true reply email directly view github", "d": "8/2015"}, {"body": "like idea defaulting specifying event propagate semantic providing handler callback executed want event propagate something like js handler propagate eventa function data propagate something data handler propagate eventb function data propagate something data propagate", "d": "8/2015"}, {"body": "youngsteveo agreed definitely worth considering", "d": "8/2015"}, {"body": "return true semantic standard used everywhere everyone know means semantic providing easy migration path may seem easy looks like lot unneeded complexity everyone want change something works someone show example current methods nt work break something wed aug pm ryan p kilby notifications githubcom wrote import vue vue vueextend emitters dispatch vuedispatchbus components created function dispatch function data bus propagate methods thething function couple thoughts deprecating existing emitters providing easy migration path different buses provide different behaviors events propagated throughout vue hierarchy thought current dispatch emitter similar dom event bubbling whether good thing nt know familiar mental model regular dom event handlers maybe solution separate emitter behavior bus vues would register multiple buses possiblities dispatch bus vue hierarchy aware sends events vue hierarchy broadcast bus vue hierarchy aware sends events vue hierarchy global bus vue hierarchy agnostic broadcasts events vues registry local bus like current emit could maybe default required bus thoughts emit could take optional bus name specify bus emit message onto defaults local bus otherwise existing dispatch broadcast methods would provided respective buses shortcuts calling emit child vuescomponents automatically register reply email directly view github", "d": "8/2015"}, {"body": "sorry prematurely submitted comment hashing thoughts thought able delete sent email", "d": "8/2015"}, {"body": "markhahn imagine component say includes private child component communicates dispatching event eg want make component reusable nt want events dispatched child leak outside potentially affect higherup component also happens listen event sure avoid namespacing events full control whole application component used someone else unknown environment guarantee dispatched event wo nt accidentally trigger unwanted handler tree ensure event nt leak intercept level current api explicitly return probably people", "d": "8/2015"}, {"body": "good example understand argue reverse return truefalse default continue argue anything complex wed aug pm evan notifications githubcom wrote markhahn imagine component say menu includes private child component menuitem menuitem communicates menu dispatching event eg closed want make component reusable nt want closed events dispatched child leak outside menu potentially affect higherup component also happens listen closed event sure avoid namespacing events thats full control whole application component used someone else unknown environment guarantee dispatched event wo nt accidentally trigger unwanted handler tree ensure event nt leak intercept menu level current api explicitly return false probably people reply email directly view github", "d": "8/2015"}, {"body": "markhahn opinion literal booleans easily become antipatterns used function parameters return values unless function name semantically indicates expecting boolean like something like example boolean parameters make code less semantic example looks like function saving object third param second param would look function definition find params better api would something like pretty much reason saving object want upsert option true nt want log anything semantic regarding make analogies returning indicate really means mean mean event successfully handled mean event propagate mean backend operation successful everyone know means semantic really true pun intended jk everyone knows means expected intrinsic semantic explicit", "d": "8/2015"}, {"body": "agree everything pointed although using less ambiguous call example always seen return false mean stop propagating talking reversing think would really bad would opposite standard would really confuse everyone maybe simple call would unambiguous semantic still argue meaning stop propagation would fine know opinion flipflopping place try think things better typing least stimulating thinking hope btw googling semantic results relating meaning language logic meaning events clearly stop propagating semantic semantic", "d": "8/2015"}, {"body": "markhahn completely agree using event handler stop propagation common however firmly reject semantic meaning events clearly stop propagating semantic knowing thing make explicit subjectively know meaning applying context experience look objectively boolean context beyond would argue would much ugly said guess gets job done end day", "d": "8/2015"}, {"body": "first started working components vue assumed event propagation stopped first component listening got hit thats made sense course carefully reading docs aware return false want propagate something like propagate", "d": "8/2015"}, {"body": "necessary make listening events dispatch check event dispatched handler event attribute optional root component call broadcast stop propagation default", "d": "8/2015"}, {"body": "couple thoughts could fix namespace issue using reverse domain naming instance comexampleclosed kind verbose would work viewmodel could declare terminates event hierarchy leaf node starts new event hierarchy point events nt propagate across broadcast sends event new hierarchy dispatch sends event parent event hierarchy propagate call approach would work used consistently handler would declarative setting viewmodel handlers would nt need worry option could also generalized event bus pattern call option root viewmodel single event bus inherited children hierarchy hitting viewmodel declares everything share new bus actually like option", "d": "8/2015"}, {"body": "davidkhess interesting ideas one problem call event root solution defines upperbound events lowerbound relies child component also declare event root strong guarantee", "d": "8/2015"}, {"body": "true enough ie optin mechanism event forwarding default behavior safer ca nt think way option declaratively without creating lot extra declarative setup least isolated event handlers", "d": "8/2015"}, {"body": "ok problem extra argument events may emit unknown length arguments simply append end argument list handler nt really know one arguments length different guess go although less explicit seems straightforward solution", "d": "8/2015"}, {"body": "implemented alpha branch", "d": "8/2015"}, {"body": "vue \u6709 partial", "d": "8/2015"}, {"body": "probably data become synonym", "d": "8/2015"}, {"body": "azamatsharapov probably libs rely attributes nt know user really wants data attribute prop", "d": "8/2015"}, {"body": "really like proposal way code speaks looks even cleaner", "d": "8/2015"}, {"body": "whilst agree like fact v becasue easy understand vue based attribute rather third party anything else could config value becasue would quite like use u still leaves e looking thml know part vue system", "d": "8/2015"}, {"body": "matmoo literal directives need used together reactive directives eg makes sense also component also used components treated like directive params beginning nonprefixed exception actually never liked since always considering deprecating", "d": "8/2015"}, {"body": "actually suppose makes consistent props component", "d": "8/2015"}, {"body": "hello use von directive one tag bind one event like question please give suggestsforgive poor english", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "azamatsharapov thx", "d": "8/2015"}, {"body": "like proposal especially get nonbreaking way deprecation warnings indeed confusing keeping track literals dynamic literals expressions apply", "d": "8/2015"}, {"body": "overall simplifies understanding code thing personally nt like bullet syntax sometimes clean easy understand example html sample button achieve result new syntax", "d": "8/2015"}, {"body": "gapipro agree string concatenation bit ugly syntax html sample button", "d": "8/2015"}, {"body": "would nt appropriate way handle particular case many attributes behave like", "d": "8/2015"}, {"body": "davidkhess yeah could something like html sample button still clear interpolation syntax", "d": "8/2015"}, {"body": "nt know personally prefer since explicit going", "d": "8/2015"}, {"body": "think go step support object syntax remove addition accept array html", "d": "8/2015"}, {"body": "would nt nicer instead kind object syntax support html expression string", "d": "8/2015"}, {"body": "gapipro find unnecessary difference format data handle expression example", "d": "8/2015"}, {"body": "yes unnecessary like easier notice coding html", "d": "8/2015"}, {"body": "gapipro idea make attribute databindable adding similar better syntax", "d": "8/2015"}, {"body": "oh ok got", "d": "8/2015"}, {"body": "like", "d": "8/2015"}, {"body": "two thumbs", "d": "8/2015"}, {"body": "like somewhat related find always using never advantage likely use one ultimately wondering good case deprecated favor", "d": "8/2015"}, {"body": "vshow showshides element css vif adds removes dom possible use vshow faster think got right", "d": "8/2015"}, {"body": "possible use vshow faster matmoo source fact", "d": "8/2015"}, {"body": "holic vshow simple css toggling vif true conditional compilation example component inside vif destroyedcompiled vif toggled vif also lazy ie condition false load wo nt anything use really depends use case", "d": "9/2015"}, {"body": "number case vif nt work vshow never took trouble find going think vshow cleaner anyway nt change dom structure mon aug pm evan notifications githubcom wrote holic vshow simple css toggling vif true conditional compilation example component inside vif destroyedcompiled vif toggled vif also lazy ie condition false load wo nt anything use really depends use case reply email directly view github", "d": "9/2015"}, {"body": "never faster improve overall performance application removing dom elements nt need right things like modals dropdown menus", "d": "9/2015"}, {"body": "call method binding expression eg", "d": "9/2015"}, {"body": "holic toggling css element display noneblock vs compiling inserting new dom nodes think pretty obvious markhahn ive got edge case vif moment need look complete upgrade something along lines simplesmiler drop menus sure would vshow case unless dynamically generated", "d": "9/2015"}, {"body": "separate prefix use properties prefix becomes literal string also torn losing mustaches makes sense would nice still able bar baz value foo mycomponent string mean value foo always string always oneway binding way works actually means pass string pass number would break bc change changed string templating would consistent difference would subtle confusing would make sense think also taking logical extreme would mean bind variable whose name starts ends value", "d": "9/2015"}, {"body": "nkovacs attributes props different things means dynamically binding plain html attribute specifically data passing components original syntax basically guess something prop normal attribute also considering preserving mustaches normal attribute bindings mustaches inside never happen", "d": "9/2015"}, {"body": "well components basically custom elements nt really see much difference attributes properties would nice able able use mustaches literal strings properties instead side note would nt also make sense already works one way yes need special code handle twoway binding looks logical template reinforces properties attributes different", "d": "9/2015"}, {"body": "nkovacs idealistic view makes sense polymer vue vue components custom elements even real elements attributes properties different bad idea pretend explained proposal purpose prefix know follows always expression nt make sense mustaches inside expressions mustaches string interpolations appear inside plain strings vue templates string templates real html plus binding syntax want make explicit", "d": "9/2015"}, {"body": "sorry made mistake example tooltip property prefix", "d": "9/2015"}, {"body": "considering new binding syntax way bind clicks right sometimes use constructions like useful extending components", "d": "9/2015"}, {"body": "sep thoughts like get feedback one remaining problem new syntax literal directives previously reactive literal directives share prefix ideal see prefixed directive template remember whether literal order read understand value new syntax prefixed directives supposed reactive lose ability create custom literal directives sometimes actually useful example directive used vuerouter time want literal string value following reactivity rule need wrap inside quotes bit awkward thinking start ask really necessary keep prefix directives simply custom attributes example register directive named longer appears instead similar normal attributes also use prefix indicate reactivity core directives would become html indicates attribute values expressions simulate literal directive simply omit prefix suppose rename use follows html downside lose familiar prefix explicitly tells us something directive may also much conceptual shift current api find less disruptive way solve literal directive problem would great", "d": "9/2015"}, {"body": "fullfs maybe something like currently clean", "d": "9/2015"}, {"body": "ok like ability pass arguments functions ca nt imagine something like rejecting prefix actually thing vuerelated attributes", "d": "9/2015"}, {"body": "current v syntax readable mixing bind stuff would throw away useful visual information make less readable wed sep pm andrey notifications githubcom wrote onclick event event ok like ability pass arguments functions ca nt imagine something likeonclick event event sep thoughts rejecting v prefix actually thing vuerelated attributes reply email directly view github", "d": "9/2015"}, {"body": "also like prefix immediately recognize properties something vue process fixing app work see warning props declared child component one use case always trigger warning understood warning correctly page uses dynamic components components tabs utilizes different props end component looking like would advice case also transitions work plain element css transitions fails suspect may transition applied noncomponent nt time verify somewhat offtopic unobservable objects also giving headaches used able store variable display current time update timer every x seconds throws warning walker goes object stumbles date object inside complains seem fail nested component works fine top level simply switching back solves problem deprecation warning displayed", "d": "9/2015"}, {"body": "lot things normal html attributes component props directives expressed way html attributes one way make everything consistent would normal html attributes prefixed props prefixed directives prefixed everything attributes props directives literal default prefix something achieve reactivity downside verbose almost case except instead prefix used mustaches props prefixed directives implicitly reactive without mustaches another thing go using special symbols attribute names prefix suffix literal prefix oneway reactive prefix twoway reactive prefix onetime computed", "d": "9/2015"}, {"body": "alchen components stick certain probably implement single interface read set props", "d": "9/2015"}, {"body": "new approach like approach remove special cases little confusing makes consistent dynamic binding tag attributes special vue related directives would definitely like see prefix allows see related vue sure event syntax seems fine almost equal readability sure nt use much looking familiar without prefix agree accept expression default therefor ca nt without prefix maybe also reduce amount different variations still doubts looking cleanclear mustache way looks nicer performance without mustache better simplesmiler making everything literal default nt seems good way mostly use dynamic reactive binding vm properties instead passing plain string values think code became much bloated special symbols either best way makes code alien stuff first look person familiar enough vue", "d": "9/2015"}, {"body": "agree fullfs von expression based event handlers vprop prop expressions vbind expression based directives attributes v literal directives plain literal attributes nothing vue clean would nice likely impossible trying cram multiple namespaces single existing one element attributes", "d": "9/2015"}, {"body": "davidkhess suggestion looks quite nice", "d": "9/2015"}, {"body": "really appreciate feedback everyone updated proposal directives flow control amp form handling html handlers also used component props used like html literal directives add colon end directive name indicate literal html also eliminates need custom directive declare literal simply provide function used literal directive plain string passed function used dynamically value expression passed instead call changes note reason choosing colon practice nonalphabetic easilytypable chars allowed attributes names colon looks natural used assignment operator many languages", "d": "9/2015"}, {"body": "perfect", "d": "9/2015"}, {"body": "looks pretty good", "d": "9/2015"}, {"body": "looks nice much remember evaluated expected quite natural events ordinary attributes without prefixes always literal expected literal directives evaluated default also expected due prefix behavior could changed advanced usecase need worry really need", "d": "9/2015"}, {"body": "really like dropping prop simpler better still kind like vbind von otherwise think latest really good compromise competing design issues really like hack attribute name nice use xml namespace syntax", "d": "9/2015"}, {"body": "feels unique inverting logic suffix nosuffix rule simple nosuffix literal suffix reactive html update mnemonics write literal value assign variable", "d": "9/2015"}, {"body": "simplesmiler actually looks great makes rule simple get feeling event handlers look like colon hyphen longer necessary feels much cleaner hyphen html click double colon looks bit weird maybe colon used single purpose", "d": "9/2015"}, {"body": "clap", "d": "9/2015"}, {"body": "simplesmiler really looks even simple remember kind long type verbose read", "d": "9/2015"}, {"body": "seems little trouble syntax jade users", "d": "9/2015"}, {"body": "byodkm afaik jade handle fine valid attribute names", "d": "9/2015"}, {"body": "sorry tested mixin element needs care", "d": "9/2015"}, {"body": "think implemented fallback thus making syntax colon shorthand", "d": "9/2015"}, {"body": "simplesmiler nice", "d": "9/2015"}, {"body": "whether directive twoway bound decided directive props decided calling syntax default oneway twoway onetime would make sense apply rules directives directives special enough directive may require twoway syntax via declaration show warning called oneway syntax may performance benefit oneway directive called onetime syntax literal custom directives looks bit wordy explicitly says may modify value explicit oneway onetime may performance benefit well got complicated thought", "d": "9/2015"}, {"body": "agree nosuffix literal suffix reactive v directives nt need nt literal case", "d": "9/2015"}, {"body": "simplesmiler point twoway binding explicit enough imo however probably make sense something like sounds unnecessary best practice avoid mutating alias reference vue also handles special case use alias pointing primitive value negligible performance implications jfliu change core directives reactive still possible create literal custom directives eg vuerouter also important keep rule consistent whenever see know expression plain string", "d": "9/2015"}, {"body": "way plain text templating would still strings mean nice variables attributes plain text use syntax would seem different", "d": "9/2015"}, {"body": "fullfs still considering whether keep mustaches attributes problem slippery slope allow attributes people would think able use anywhere eg ok somewhat solved syntax rule mustaches allowed inside expressions still nt like two ways thing latter bit harder type keeps things consistent", "d": "9/2015"}, {"body": "practice dynamic components passing data children currently something like new spec would like", "d": "9/2015"}, {"body": "adampatarino still flux see comments simplified syntax would look like", "d": "9/2015"}, {"body": "ah yup like better definitely current consistency", "d": "9/2015"}, {"body": "see well synstax nice clear ps way okay actually mean sometimes nice dynamic", "d": "9/2015"}, {"body": "fair enough directives able replace many cases radio buttons textarea also files work either yet textarea would work lack value attribute radio buttons wo nt work bind guess possible hijack semantics attribute need anyway feels wrong say better stick warn binding another option would make special case directive radio buttons textarea", "d": "9/2015"}, {"body": "wow unfortunately seems ie handle attributes end colon fine stupid", "d": "9/2015"}, {"body": "unfortunate specifically colon angular deal angular templates full special symbols", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "simplesmiler afaik longer directly write real html templates angular everything parsed engine materialized dom specifically ie discards attributes ends colon thinks namespace followed empty string attribute name empty also weird situation attribute names like parsed browser try call name results error", "d": "9/2015"}, {"body": "guess revert syntax looks verbose compared ugghh hate ie much", "d": "9/2015"}, {"body": "oh actually ie handle attribute names start colon looks weird html also ie treats invalid leading char", "d": "9/2015"}, {"body": "feels lispy maybe edit hand probably worth", "d": "9/2015"}, {"body": "simplesmiler much different issue makes core directives verbose html", "d": "9/2015"}, {"body": "following bad people hate drop technical reason keep prefix maybe missed", "d": "9/2015"}, {"body": "moment verbose less expressive", "d": "9/2015"}, {"body": "would argue prefix easier spot rather easier miss suffix see following examples", "d": "9/2015"}, {"body": "arguments prefixing vuerelated properties give vue nice namespace work within avoids clashing frameworks eg one set could reactive another could literal", "d": "9/2015"}, {"body": "holic reactive indicator work props nt make sense prefixes", "d": "9/2015"}, {"body": "maybe edit nt look beautiful though", "d": "9/2015"}, {"body": "simplesmiler considered invalid spec unfortunately", "d": "9/2015"}, {"body": "since always treated expressions syntax could look something like trouble deal literal vs reactive always reactive prefix prefix treated regular directiveprop directives need prefix denote compiled differently regular directives", "d": "9/2015"}, {"body": "following option nt like want hear opinion need support ie run templates automatic tool turn growing", "d": "9/2015"}, {"body": "holic personally fine dropping prefix altogether instead think directives custom attributes instead prefixed attributes conceptual shift though people seem care lot knowing something vue specific html colon prefix read lispy think actually cool", "d": "9/2015"}, {"body": "use without prefix native attribute personally nt like dropping prefixes directives start clash normal attributes component properties regarding prefixes fine use unprefixed versions custom elements would work would still required least shenanigans props may clash normal attributes", "d": "9/2015"}, {"body": "rewrote todomvc colon prefix syntax holic pointed really easier spot", "d": "9/2015"}, {"body": "maybe overthinking get rid concept literal directives prefixes always means expressions colon prefix essentially syntax sugar directives like simply need quotes seems like okay tradeoff considering cost differentiating literal reactive html", "d": "9/2015"}, {"body": "like simple clear custom directives prefix remain", "d": "9/2015"}, {"body": "finico prefix remain custom directives", "d": "9/2015"}, {"body": "directives like simply need quotes ugh directives reactive literal", "d": "9/2015"}, {"body": "josephsilber", "d": "9/2015"}, {"body": "yeah could work guess ie ok quacks colon", "d": "9/2015"}, {"body": "yep found implemented colon syntax sat sep pm joseph silber notifications githubcom wrote yeah could work guess ie ok quacks colon reply email directly view github", "d": "9/2015"}, {"body": "vuejs user may add two cents much prefer expressive syntax instead messy yes takes milisecond longer write reads well looks good far important mind also liked much vue properties prefixed really important visual clue thrown window easily actually prefer see something like html", "d": "9/2015"}, {"body": "think better since used separating words property names coud make shorthand syntax developer choose one use", "d": "9/2015"}, {"body": "maybe suffix could optional shortened think consistent would provided defaults", "d": "9/2015"}, {"body": "acasar think prefix overrated also pretty obvious spot vue already uses custom elements custom attributes directive params nt look vue specific vocabulary library get used another reason dropping semantically different directives event handling different data binding means make whatever attribute follows reactive makes applicable normal attributes component props using props feels semantically wrong finally shortening creates confusion", "d": "9/2015"}, {"body": "latest proposal updated original post without literal directive special case yet", "d": "9/2015"}, {"body": "sure like fact colon used two different contexts start attribute name indicates reactivity middle attribute name separates name filter might little confusing", "d": "9/2015"}, {"body": "josephsilber also thought kind confuse colon syntax optional shorthand could fine", "d": "9/2015"}, {"body": "latest proposal great agree everything love shorthand syntax people would like everything v prefix cmon directives", "d": "9/2015"}, {"body": "bemoaning lack directive though", "d": "9/2015"}, {"body": "josephsilber still renamed", "d": "9/2015"}, {"body": "something like hold hats folks late little loopy html leave hyphens wordseparators leave colons separating vue stuff stuff attribute names doublecolon binding switch second colon denote twowayonetime bindings valid attribute name according attention grabbing", "d": "9/2015"}, {"body": "sethlopezme looks confusing tbh especially directives seed vue colonel smile", "d": "9/2015"}, {"body": "hmm looking latest proposal would like point would many different styles nt bindattr bind attr makes sense optionally drop bind happened v bind styles binding", "d": "9/2015"}, {"body": "yjeroen colon shorthand optional nt use binding attributes consist alphanumeric chars hyphens consistent nt make sense together less confusing use colon one purpose using first char literal literal already means take literal string bindings one special char followed expression api since different syntaxes different types bindings directives event handlers attributeprop bindings prefixing everything prefix nt make complexity go away want explicitness previously three types mixed umbrella directives microsyntax using arguments multiple clauses giving event handlers attribute bindings syntax makes directives much simpler time makes binding types explicit realize binding types lowered number core directives complete gotten rid directive arguments multiple clauses", "d": "9/2015"}, {"body": "would mind point something directives syntax lately facing issue vmodel filters got components representing fields abstract form fields could used multiple times template different data templates contains example inputs vmodel filter something like issue filter nice fields filters form config represented simple js object question way make filter name variable could controlled components data hope get feature ps felt like could related deciding directives syntax", "d": "9/2015"}, {"body": "fullfs nvm nt notice yeah currently impossible dynamically apply filters sounds like could solved designing components differently would need details though", "d": "9/2015"}, {"body": "still renamed different directives", "d": "9/2015"}, {"body": "josephsilber previous literal directives attributes literal default able", "d": "9/2015"}, {"body": "info regarding stylesclasses missing latest spec info", "d": "9/2015"}, {"body": "matmoo thanks added", "d": "9/2015"}, {"body": "think vue directive start v attributes nt prefix may mistaken attributes libs specially people begininng vue recently", "d": "9/2015"}, {"body": "renanvaz happening current proposal directives start v event handlers attribute bindings directives", "d": "9/2015"}, {"body": "renanvaz agree vue directives start important visual cue helps namespace vue without prefix feels like vue polluting global namespace", "d": "9/2015"}, {"body": "thelinuxlich believe attributes vue resources part lib prefix something essential identify resources part package regardless function see attribute begin v know know look", "d": "9/2015"}, {"body": "zfedoran sense global namespace false assumption likely never using two dombased databinding solutions together already using custom elements everywhere polymer aurelia amp angular use tons nonprefixed custom attributes well technically nt really matter mostly mindset issue use vue html managed vue anything native html attribute likely vuespecific frameworks dombased templating plus like long list three prefixes really hard remember pointed thelinuxlich explained comment event handlers attribute bindings different semantics directives", "d": "9/2015"}, {"body": "like see counter argument people developing huge single page apps anything helps code sanity welcome", "d": "9/2015"}, {"body": "thelinuxlich matters even less huge spas building spa framework means fully adopt framework idioms tolerance api intrusiveness higher think people advocating prefix mostly use vue enhancement existing html thus keeping vue easily spottable important understandable use case vue believe new syntax worthwhile tradeoff", "d": "9/2015"}, {"body": "dare repeat point prefixes without prefixes custom directives may clash component properties", "d": "9/2015"}, {"body": "simplesmiler keeping directives people arguing everything vue related", "d": "9/2015"}, {"body": "evan got question gone deal related shenanigans", "d": "9/2015"}, {"body": "suggestion make prefixes configurable us would really prefer vue attributes easily spottable change von bind vbind everyone happy", "d": "9/2015"}, {"body": "comments based development experience big small systems concern growth vue community startups focus one product focus specific tools believe detail use influence lot decision really would write cleanest syntax web producrs agencies large flow projects variety used libraries bigger detail makes much easier identify part package example someone trying maintain small project made vue undocumented resources help identify attributes part library used also seen cases systems part legacyold one area system reformulated used different lib case could also problems id package", "d": "9/2015"}, {"body": "renanvaz sure appreciate comment anyone picks project would still need learn vue btw need capitalize every character first prefix nt magically tell vue works learned know vuespeicific nt really make much difference practice", "d": "9/2015"}, {"body": "simplesmiler good question open new issue", "d": "9/2015"}, {"body": "people willing make much costlier sacrifices adopting framework like react feel like counterarguments lack substance kind rant disappears year p", "d": "9/2015"}, {"body": "think newbie html vue", "d": "9/2015"}, {"body": "rather learn upfront v bind knowing exactly feature get confused middle learning curve api seems inconsistent", "d": "9/2015"}, {"body": "honest like keep prefix useful seeing code tells like functionattribute something maybe something else prefix like see something special vuerelated attributes colon good one example going used literal directives right looks crazy also feeling first meeting directives options like wtf nt even right sometimes problem ca nt spot attribute ca nt detect something functional could take minutes understand going", "d": "9/2015"}, {"body": "agree fullfs new syntax learning curve much steeper remember almost everything prefixed vue used custom prefixes quite lot working wordpress environment control possible conflicts third party things worked without conflicts native html attributes clever modifiers minimalistic clear tons new syntax remember reason code clarity nt fix broken", "d": "9/2015"}, {"body": "broken horribly whole point way know template whether attribute value literal expression becomes confusing fast angular made mistake fixing angular aurelia also special syntax differentiate two behooves us remake mistakes others already rectified", "d": "9/2015"}, {"body": "josephsilber point still angular directiveswhatever something special syntax variables directives bindings ca nt see functional attributes looking like common attribute still opinion angular syntax mess glad see vuejs syntax nice clear compared angular", "d": "9/2015"}, {"body": "people complaining readability nt easier read sure super easy read anyone basic english knowledge think also saves time see everything may find looking api docs often speaks", "d": "9/2015"}, {"body": "azamatsharapov well nt bad worries talking readability important thing teammates chosen vuejs project simplicity short time required starting write really awesome work directive easy understand remember ps synonyms first used function bind events using", "d": "9/2015"}, {"body": "ps bind synonyms first used function bind events using sounds like ing much think evan mentioned somewhere would like remove thing better use said kind agree used times written projects vue already team use also prop like", "d": "9/2015"}, {"body": "like disagree terms using relied heavily two projects vuejs far perfect replacement messy classhooks pollute class namespaces cleaned dom initialisation gets used supposed used js automated really really great easy use", "d": "9/2015"}, {"body": "azamatsharapov places used project reliable", "d": "9/2015"}, {"body": "hmm interesting nt select elements js code much css yeah people code different", "d": "9/2015"}, {"body": "like thank everyone contributed discussion far think still issues disagree let recap stay would best syntax denote literal directive visually obvious without verbose awkward still question happy syntax either unprefixed special attributes agree less obvious vuespecific directives prefix nt make sense also need distinguish several types special attributes component props easily identifiable appear custom element components using component know props expects directive params eg attributes appear alongside directive uses similar components using directive know params accepts works multiple directives still appear alongside either component flowcontrol directive appear alongside components special case problematic people plain attribute linked directive component makes obvious vuespecific scanning template possible solutions find better syntax literal directives make literal directive moment feels bit awkward find different obvious syntax case accept special case one single attribute like find syntax clean explicit impossible bad idea try please everyone please make sure comments backed technical reasoning rather personal preference", "d": "9/2015"}, {"body": "thoughts expression bindings literal html", "d": "9/2015"}, {"body": "latest proposal btw extend syntax binding types sake consistency html also filters", "d": "9/2015"}, {"body": "fan far natural read fact current syntax works well ok maybe tweak another complete change", "d": "9/2015"}, {"body": "matmoo another option drop colon shorthand use reactive bindings literal bindings colon looks different plain attributes fact benefits stands providing visual clue lot people want always indicates reactivity", "d": "9/2015"}, {"body": "karevn normal attributes html primitive exception set strings dictionary maybe svg attributes like ordered list points commands", "d": "9/2015"}, {"body": "simplesmiler props future attributes may", "d": "9/2015"}, {"body": "latest proposal literal component property stands different html also since shorthand shorthand literal leading dash html think technically valid attribute", "d": "9/2015"}, {"body": "karevn pass expression prop attributes like basically special cases among native attributes attributes plain strings expect nt even make sense also future attributes may demand different ways handle value eg quite complex microsyntax impossible generalize mapping objectarrays final string unknown future attributes", "d": "9/2015"}, {"body": "another option drop colon shorthand use v reactive bindings v v literal bindings looks really consistent v clearly shows vue related things case matter habit already used old syntax new one looks weird sometimes", "d": "9/2015"}, {"body": "actually possible result binding expression passed attributespecific function future", "d": "9/2015"}, {"body": "variations comparison use dot instead colon indicate reactivity benefits looks cleaner shorthand actually reads quite naturally componentprop something html", "d": "9/2015"}, {"body": "karevn write function already right", "d": "9/2015"}, {"body": "would leading work ie", "d": "9/2015"}, {"body": "simplesmiler quite funny ie parse fine ca nt call leading luckily latter avoided work ie ie drops attributes ending even parsing phase", "d": "9/2015"}, {"body": "ca nt wait reverse binding filters support notation look good probably people confuse class definitions", "d": "9/2015"}, {"body": "karevn dot denotes class css nt see confusion comes", "d": "9/2015"}, {"body": "stylistically leading colon looks much better leading dot", "d": "9/2015"}, {"body": "css background may think method call outstanding coder mean others nt make learning curve steeper", "d": "9/2015"}, {"body": "karevn unfamiliar syntax steep learning curve learning curve api handles inherent complexity dot colon nt make difference complex things", "d": "9/2015"}, {"body": "favor syntax also josephsilber said reads much better leading syntax though thought hyphenated attribute w filter looked weird could perhaps something like also prop syntax way put attribute name always felt odd part value attribute perhaps something like edit actually nevermind last part nt valid apparently", "d": "9/2015"}, {"body": "dot colon notations look good also satisfied elref got back actually everything wanted also came idea dots colons could used onewaytwoway notations oneway one dot twoway two dots", "d": "9/2015"}, {"body": "really like discussion going everyone think best readable styles syntaxes looks quite messy use everywhere imho either", "d": "9/2015"}, {"body": "yjeroen yeah seems using literal introduces least amount change current html", "d": "9/2015"}, {"body": "btw new syntax think makes sense deprecate global config", "d": "9/2015"}, {"body": "testing internal changes actually expand characters usable attribute names still feel different prefixes reactiveliteral directives look stylistically weird consistently denoting directive whether literal looks weird using chars verbose really something special really directives leverage special chars like html finally move binding type indicator component prop value", "d": "9/2015"}, {"body": "last change binding type indicator nice rest ugly dollar sign directive name looks like", "d": "9/2015"}, {"body": "sorry dislike everything last comment excluding last one disappointed happen think looks waaay better ugh", "d": "9/2015"}, {"body": "definitely favor binding type indicators new syntax still sure though looks even odd using denote literal", "d": "9/2015"}, {"body": "note really sorta like thinking loud form said everyone different stylistic taste comments technically bad idea welcome nt like ughh really constructive", "d": "9/2015"}, {"body": "nt really much discuss technically besides ie quirks anything goes thought stylistic preferences", "d": "9/2015"}, {"body": "syntax consistency semantic correctness readability somewhat subjective everything stylistic preference wed sep pm joseph silber notifications githubcom wrote nt really much discuss technically besides ie quirks anything goes thought stylistic preferences reply email directly view github", "d": "9/2015"}, {"body": "going explicitness road like emberjs example mut keyword", "d": "9/2015"}, {"body": "thelinuxlich good point aurelia also uses syntax template going quite verbose think special char less tradeoff easier type succinct templates vs able understand going without reading docs although value latter quickly diminishes become familiar framework assuming keep binding indicators think idea indicating literal directive also adding special symbol makes sense keeps idea directives start consistent consistent prop binding type indicators special char use largely stylistic preference list everything already taken html super explicit", "d": "9/2015"}, {"body": "support syntax feel like much easier type also nt look weird might used correct", "d": "9/2015"}, {"body": "kinda interesting go along special syntax html childmsg ugly maybe maps surprisingly well javascript", "d": "9/2015"}, {"body": "nt think ugly like", "d": "9/2015"}, {"body": "think syntax used often intuitiveness ease typing also quite important easier type requires shift key", "d": "9/2015"}, {"body": "oh easy type define objects like instead hard type also requires shift key need type often", "d": "9/2015"}, {"body": "important make code readable otherwise understand wrote year ago", "d": "9/2015"}, {"body": "oevgeny come requires key must use special keyboard", "d": "9/2015"}, {"body": "ok got agree karevn code readability utmost importance", "d": "9/2015"}, {"body": "greennyreborn mistake would anything else ok typing much vue karevn expressed idea better", "d": "9/2015"}, {"body": "agree code readability important nt forget html standard syntax javascript code html template", "d": "9/2015"}, {"body": "way really step make things intuitive imho user need remember refel need know define component access via inside component found confused accessing refel via wrong shortcut couple times syntax make clear", "d": "9/2015"}, {"body": "ijackua alternative syntax great", "d": "9/2015"}, {"body": "renanvaz stable specification html templates official one mess mozilla google apple nt settle common ground yet anything goes", "d": "9/2015"}, {"body": "also like syntax looks less obvious also let think comment", "d": "9/2015"}, {"body": "renanvaz restrictions character sets attribute names largely legacy sgmlxml longer make much sense html context chars valid serialized html ie parsed browser restrictions dom methods standards body working relax restrictions dom methods well really fine ref see twitter thread", "d": "9/2015"}, {"body": "really love sytax proposal name name name name happy concernig directives bindings prefer colon syntax", "d": "9/2015"}, {"body": "try value expression except maybe change better", "d": "9/2015"}, {"body": "one thing syntax style classes often contain dashes pretty tiresome write code like html also really easy forget single quote somewhere making optional like html match json format seems pretty much intuitive", "d": "9/2015"}, {"body": "karevn use camelcase", "d": "9/2015"}, {"body": "booyah", "d": "9/2015"}, {"body": "opinion overhead unified clean syntax component html overhead etc unified like syntax html etc vattr enough cases could add specific directives like smile vue api could concise expressive like gulp api great relax vue relaxed", "d": "9/2015"}, {"body": "overall big fan react design philosophy one issue react jsx render function often involves lot logic ends looking like piece program fact rather visual representation interface developers bonus designerdeveloper hybrids like template makes much easier think visually design css jsx mixed javascript logic breaks visual model need map code design contrast vuejs pays cost lightweight dsl directives visually scannable template logic encapsulated directives filters believe v prefix overrated makes easy visually scan code vue specific attributes kind visual representation interface vs piece program stated one differences vue react one advantages vue imo goes well libraries dropping v prefix makes template kind piece program work libraries besides nt see downside keeping vprefix", "d": "9/2015"}, {"body": "nervgh missing points binding type prop flexible runtime rather fixed definition explicit template nt dig implementation details child component order understand binding type prop special cases like also overhead imo worse upfront learn works consistently comparison edge cases higher cost remember know edge cases argument multiple clause syntax necessary use also overhead amp explained nt see proposal expressive concise", "d": "9/2015"}, {"body": "nervgh sorry going tangent gulp simple thing well much complexity complexity showed plugins modules even gulp suffers simplicity things like caching arbitrary file lookup transformations failure management play well streams", "d": "9/2015"}, {"body": "dennisver really correct analogy difference jsx vs templates completely different single prefix vs prefixes dropping prefix simply breaking prefixes explicitly defined functionality semantics realized simply calling everything directives nt hide inherent complexity different types data bindings people worry makes harder work libraries without giving real examples library specific would break used vue honestly sounds like fud see real example new syntax breaks compatibility another lib", "d": "9/2015"}, {"body": "v prefix stands vue hold attributes related vue framework used directives still use prefix v directive letter v nt mean directive give feeling used vue related attributes think everyone gives vue try first time feeling whether correct nt worry libraries break worry lot harder scan html vue related attributes let take bootstrap example button trigger modal vclass vbindclass bindclass attribute nt tell vue related whereas vclass", "d": "9/2015"}, {"body": "except know anything data nowadays javascript framework dsl", "d": "9/2015"}, {"body": "anything data nowadays javascript framework dsl technically anything data valid html everyone ignores rules though sat sep pm alisson cavalcante agiani lt notifications githubcom wrote except know anything data nowadays javascript framework dsl reply email directly view github", "d": "9/2015"}, {"body": "dennisver people may think vue related always meant directives day register custom directive gets prefix point new api feels different current impression new api make sense also nt make much difference putting multiple attributes line honest equally bad personally multiple attributes really worry making look visually different use colon shorthand", "d": "9/2015"}, {"body": "installed rewrited directive new syntax looks confusing binding type prop flexible runtime rather fixed definition explicit template nt dig implementation details child component order understand binding type prop special cases like vhref vsrc vstyle also overhead imo worse bind upfront learn works consistently comparison edge cases higher cost remember know edge cases argument multiple clause syntax necessary use vattr also overhead right new syntax according proposal moment already directives different hidden behaviour think directive component may behavior naturally ps anyway thanks vue", "d": "9/2015"}, {"body": "nervgh honestly nt understand confusing colon means dynamic prop star means one time every special symbol clear purpose ambiguity comparison think confusing something string expression way tell would component mutate parent state way tell nt know props twoway way answer find implementation child component compare template way way bigger overhead props directives", "d": "9/2015"}, {"body": "big thank everyone participated conversation far feedback appreciated thread gone bit longer expected like reset conversation based current syntax let continue discussion", "d": "9/2015"}, {"body": "changing literaldynamictwowayonetime towards vue javascript instead template taking example vue component template wrote head sure right way sorry nt fun mind exercise", "d": "9/2015"}, {"body": "\u73b0\u5728\u5c31\u6709 priority", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "attribute", "d": "8/2015"}, {"body": "agree", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "implemented alpha branch need removal beta", "d": "8/2015"}, {"body": "javascript vuecomponent insertcfparams template insertcfparamstemplate data function return params result loading false methods submit function using works fine vue problem changed vue changed error console says function workaround using vue", "d": "10/2015"}, {"body": "please read docs carefully objects deprecated since methods", "d": "10/2015"}, {"body": "thanks man oevgeny", "d": "10/2015"}, {"body": "docs still mentions set", "d": "2/2016"}, {"body": "matthewcanty right depreciated", "d": "2/2016"}, {"body": "currently building large application strict turned really beneficial", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "considering would one pass assets parent child imagine slider component lets consumer specify custom transition slides would possible extending component overriding assets currently possible containing component asset provider component hacky gets job done", "d": "8/2015"}, {"body": "simplesmiler imagine component would come set predefined transitions let user pick one although theoretically pass like looks hacky", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "never used pattern would nt want rely", "d": "8/2015"}, {"body": "confirmed deprecation warning implemented alpha option removed beta", "d": "8/2015"}, {"body": "implement component hierarchy two components assetcomponent", "d": "9/2015"}, {"body": "indus explicitly depend assetcomponent components", "d": "9/2015"}, {"body": "sorry revive old thread couple helper filters example lets shorthand found handy drop anywhere debugging mean register filters every component wish use alternative", "d": "9/2015"}, {"body": "jasonvarga register globally", "d": "9/2015"}, {"body": "root vue instance gives deprecation warnings use inside component", "d": "9/2015"}, {"body": "vuefilter pre", "d": "9/2015"}, {"body": "oh right wonderful thanks", "d": "9/2015"}, {"body": "activate hook called using", "d": "9/2015"}, {"body": "alexandrebonaventure used dynamic component switching", "d": "9/2015"}, {"body": "guess way right call resolve promise instance loading remote data also wondering way reference child vm refs using", "d": "9/2015"}, {"body": "alexandrebonaventure yes since using lowerlevel imperative api responsible managing timing fo refs using latest alphabeta pass private option creating child", "d": "9/2015"}, {"body": "thanks asking questions using vue wisiwyg software called hype need mount child components separate wrappers way found maybe helpful know usage development", "d": "9/2015"}, {"body": "alexandrebonaventure cool looks really interesting", "d": "9/2015"}, {"body": "thanks interest link latest project using vue hype workflow gives us ability prototype design quickly keeping stable structure logic javascript vue", "d": "9/2015"}, {"body": "agreed", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "would affect iterating object edit nvm looks like use alias iterating object already alias value property", "d": "8/2015"}, {"body": "cheapsteak yep difference instead", "d": "8/2015"}, {"body": "way alias key well nested repeats", "d": "8/2015"}, {"body": "yeah currently angular really want avoid complicating syntax something", "d": "8/2015"}, {"body": "maybe vrepeat supported objects first place single way order object keys upd guess irrelevant issue still", "d": "8/2015"}, {"body": "single way order object keys list web page always ordered showing series images order tue aug pm denis karabaza notifications githubcom wrote maybe vrepeat supported objects first place single way order object keys reply email directly view github", "d": "8/2015"}, {"body": "simplesmiler", "d": "8/2015"}, {"body": "markhahn dom elements certainly ordered seems like repeat array point message parenthesis imaginary part syntax", "d": "8/2015"}, {"body": "dom elements certainly ordered contents dom nt gave example nt care order images shown tue aug pm denis karabaza notifications githubcom wrote markhahn dom elements certainly ordered vrepeat val object orderby key seems like repeat array point message parenthesis imaginary part syntax reply email directly view github", "d": "8/2015"}, {"body": "guess opened new issue oh well markhahn data unordered sure way user perceives data representation may unordered representation developers working always ordered think abstract far away fact different scenarios things without order sometimes care particular order items visual representation independent order absolutely positioned points scatterplot sometimes care particular order items want ordering stable refresh insertion new item items nt jump around much participants discussion sometimes want items ordered quasirandomly every item given equal exposure sometimes items inherent order may ordered given criteria rows table sortable columns understand may implemented using current syntax think repeating object keys different repeating array repeating object keys without gives false sense stably quasirandomly ordered may improved perfomancewise truly orderindependent data wrong assumption truly orderindependent data less modifications made dom data changes", "d": "8/2015"}, {"body": "simplesmiler object key order defined", "d": "8/2015"}, {"body": "simplesmiler implied behavior repeating object keys without orderby order property enumeration order implemented browser javascript engine order opinion reasonable assumption separating object iteration different syntax implementation complicates issue", "d": "8/2015"}, {"body": "josephsilber thanks aware think transpilation aggressive minification like babel closure compiler break order original minified scripts behave differently fair javascript still think possible write special directive unordered data would outperform general case", "d": "8/2015"}, {"body": "browser implemented yet way know", "d": "8/2015"}, {"body": "closed favor", "d": "8/2015"}, {"body": "looks great behave add component", "d": "8/2015"}, {"body": "exclusive content insertion adding makes sense", "d": "8/2015"}, {"body": "see compiled context", "d": "8/2015"}, {"body": "yes considered child", "d": "8/2015"}, {"body": "could support way compiled local scope inheriting assets consumer take grid component exposing customizable cells one must either name partial component globally use cell use grid component mixin grid template would look like usage", "d": "8/2015"}, {"body": "implemented alpha branch", "d": "8/2015"}, {"body": "sounds great hope especially improve props namespace issue", "d": "8/2015"}, {"body": "calling would make clear reserved", "d": "8/2015"}, {"body": "work way binding present send prop blank data defines defaults works nicely separating would need merge defaults prop data create correct data structure creating component trying make component responsible data app make sense", "d": "8/2015"}, {"body": "matmoo sure get mean declare defaults props directly", "d": "8/2015"}, {"body": "hmm using vrepeat array create components data comes anyway maybe irrelevant", "d": "8/2015"}, {"body": "functions vars passed via parameters local variables space vue stay sun aug pm evan notifications githubcom wrote problem currently props merged instance data problems data props declare property name order priority merging clear prop overwrite field name data way around currently props initial values available inside data functions field returned data gets overwritten prop merged clear whether component property private state prop passed thus changed parent unless go check component props declaration proposal move props name space example thisprops avoids merging problem either make props reserved field make props makes explicit something prop obtained outside component reply email directly view github", "d": "8/2015"}, {"body": "would add syntax things like mustaches one vue biggest features simplicity nt see proposal enough benefit excuse added complexity things like removing great perfection attained nothing add nothing remove antoine de saint exup\u00e9ry", "d": "8/2015"}, {"body": "markhahn yes would make template bit verbose tradeoff conciseness note necessarily simplicity explicitness component stateful state change time different say pure function call could helpful clearly know part state external thus change without component anything said also sure proposal yet would love get feedback others", "d": "8/2015"}, {"body": "could helpful clearly know part state external thus change without component anything objects passed functions also change without function help ca nt tell object string using syntax adding syntax like hungarian notation would horrible adding scope meaning variables using syntax slippery slope vars passed function look different local vars look different closure vars look different global vars", "d": "8/2015"}, {"body": "still sure using way bindings would data prop", "d": "8/2015"}, {"body": "opinion vue one best frameworks ever seen simplicity moving params scope would make structure complex show warning param data property name", "d": "8/2015"}, {"body": "gamperl yeah could work maybe something like nt redefine prop data use prop default value instead", "d": "8/2015"}, {"body": "would actually like separate believe keeps simpler", "d": "8/2015"}, {"body": "warning instead different namespaces time add confusion adding props data attributes name real use case props data name right", "d": "8/2015"}, {"body": "warning sounds like good idea", "d": "8/2015"}, {"body": "embrace probable interference taking next way state info data props specification external interface available higher level component properties created function become defaults props passed outside would also suggest rename props attributes make straightforward see people often confused gitter discussions bad times", "d": "8/2015"}, {"body": "called renamed later sounds better shorter type", "d": "8/2015"}, {"body": "emitting warning name clashes case param data attribute name seems like lead trouble confusion", "d": "8/2015"}, {"body": "azamatsharapov call one letter", "d": "8/2015"}, {"body": "karevn point introducing breaking changes naming preferences objectively shorter easier type people gotten used offer substantial benefits justify change", "d": "8/2015"}, {"body": "implemented branch", "d": "8/2015"}, {"body": "using literal directive also internal flag nt need set provide literal directive automatically dynamic literal really want literal directive html", "d": "8/2015"}, {"body": "thanks misunderstood doc", "d": "8/2015"}, {"body": "misunderstood doc written apps vue great btw still get confused mustache needed needing situations even replacement happening confusing would cool allowed places things evaluated evaluation parser could strip sun aug pm tiga wu notifications githubcom wrote thanks misunderstood doc reply email directly view github", "d": "8/2015"}, {"body": "use computed property", "d": "8/2015"}, {"body": "thanks", "d": "8/2015"}, {"body": "note fix reverted reason users care computed properties getters called definition computed property getter pure side effects behavior demonstrated vue internal async update queue works vue relies async update queue ensure correct behavior actually matters example amp", "d": "9/2015"}, {"body": "although top two examples result new data still performance problem modified new result old data wait old data wait unnecessary calculation new data wait spend time sync true reduce performance problem caused computed properties reevaluated case javascript vueconfigdebug true vue new vue el demo data content old data methods readcontent function var self", "d": "9/2015"}, {"body": "performance problem actually slows app simple computed properties fast evaluate extra calls ok tradeoff ensure correctness system real case behavior cause noticeable performance issue consider fixing", "d": "9/2015"}, {"body": "please provide debuggable reproduction", "d": "8/2015"}, {"body": "added examples locked professional project ca nt give access evan schrieb please provide debuggable reproduction reply email directly view", "d": "8/2015"}, {"body": "katywings evan asking sscce fiddle start vue", "d": "8/2015"}, {"body": "ahh really missunderstood xd yeah create one today denis karabaza schrieb katywings evan asking sscce fiddle start vue reply email directly view", "d": "8/2015"}, {"body": "okay starting two items b press add item button first item create item c b item b radiuses looses checked state thanks lot help", "d": "8/2015"}, {"body": "sure helps", "d": "8/2015"}, {"body": "found cause insert new instance radio inputs attribute instance updated yet based moment page inputs thus selecting one deselects others suggest simply remove name attribute nt need submit form send array instead getting form", "d": "8/2015"}, {"body": "yeah priority model updates change names impossible fix framework something like pause vmodel computations update vrepeat variables index resume vmodel computations think framework get widely adapted future problem occur like case easy switch form action submit input name elements ajax submit simplesmiler looks easy dancer thank man try workaround strange trackby index helps two days ago tried trackby uid didnt help", "d": "8/2015"}, {"body": "simplesmiler workaround works perfectly thank", "d": "8/2015"}, {"body": "closing found workaround edge case rather nonrecommended pattern nt seem justify amount effort work around", "d": "8/2015"}, {"body": "think worth mention docs fact radio buttons require attribute radio also radio buttons example probably stripped attributes", "d": "8/2015"}, {"body": "simplesmiler yeah good idea", "d": "8/2015"}, {"body": "please post questions vuejsdiscussion instead main repo", "d": "8/2015"}, {"body": "simply", "d": "8/2015"}, {"body": "endaaman thanks suggestion sorry probably misunderstood points article reading used google translate thought problem using together eg getting wrong model value inside listeners seems case josephsilber suggested using simply use inside expressions sorry suggesting open pr due misunderstanding pray directive still nice work ps reserved meta property inside may want pick different name store value", "d": "8/2015"}, {"body": "selected state working", "d": "8/2015"}, {"body": "following valid equivalent true following invalid", "d": "8/2015"}, {"body": "also using select element use dynamic options", "d": "8/2015"}, {"body": "using actually ajax call get traininglist using vmodel ajax method post url modaluserinfo token documentqueryselector token getattribute value data thisuserinfo success function traininglist todome create function repetitive lines thatnextwizard tabindex thattrainings traininglist var trainingpage training text thattrainings function key trng alert trainingpage trngname", "d": "8/2015"}, {"body": "problem get state compiled", "d": "8/2015"}, {"body": "work using", "d": "8/2015"}, {"body": "sorry working browser select last list selected options", "d": "8/2015"}, {"body": "please look example carefully looking multiple select need add multiple attribute", "d": "8/2015"}, {"body": "really recommended breaks reactivity guarantee however call call", "d": "8/2015"}, {"body": "yes course app quite big complex makes difficult understand thanks considering anyway", "d": "8/2015"}, {"body": "well usually advice adding new data properties fly prefer deterministic data model helps reason app gets big", "d": "8/2015"}, {"body": "yes totally right already started moving towards approach", "d": "8/2015"}, {"body": "yeah error doc support paths fact since everything deprecated", "d": "8/2015"}, {"body": "correct use set even object setting exists root", "d": "8/2015"}, {"body": "yeah calls internally note difference vs former accepts paths vm instance method latter accept keys data object enhancement method", "d": "8/2015"}, {"body": "make sense would suggest updating docs avoid confusions deprecating add seems correct thanks evan", "d": "8/2015"}, {"body": "big problem selecting options example", "d": "8/2015"}, {"body": "fiddle works properly latest branch wait next release please", "d": "8/2015"}, {"body": "thanks evan", "d": "8/2015"}, {"body": "purpose checkbox show selectednot selected class state td based claimselected need add hidden input", "d": "8/2015"}, {"body": "please post type questions vuejsdiscussion next time although dirty add listener input stop event propagation future versions also directly", "d": "8/2015"}, {"body": "indeed causing infinite loop mutates array triggers filter applied make sure sort copy", "d": "8/2015"}, {"body": "perfect thanks evan", "d": "8/2015"}, {"body": "perfect even", "d": "2/2017"}, {"body": "lost hours similar place array mutation case used function template mention maybe help developers used following code template produced infinite loop warning html tel lesson learned prepare mutate data adding local component state", "d": "5/2017"}, {"body": "supposed destroy previous child since waitfor event happened yet set yet", "d": "8/2015"}, {"body": "yeah saw post discussion currently idea probably need new hook instead called right first insertion hook provide callback also accepts returning promise", "d": "8/2015"}, {"body": "really related discovered accidentally looking code intended usage waitfor could fixed waiting event component reloaded cache component data needs though might stale need wait", "d": "8/2015"}, {"body": "use object format form style classes dynamic options currently supported suggest using selector like style options", "d": "8/2015"}, {"body": "ok thanks property use option object", "d": "8/2015"}, {"body": "maybe making vrepeat options obsolete could reconsidered whenever extend base html select plugins custom directive weird things happen", "d": "8/2015"}, {"body": "checkout official example reason used options makes difficult handle twoway syncing", "d": "8/2015"}, {"body": "seems updating backing options array later respect viewmodel initialization nt work since usually fill select actually ajax return callbacks hard issue work around cry please take look slightly modified official example also design perspective maybe filling text property options view responsibility viewmodel one smile thanks", "d": "8/2015"}, {"body": "example assumes options static instead ing use inside update options", "d": "8/2015"}, {"body": "closing think anyway improve current select syntax", "d": "8/2015"}, {"body": "auto casted cases people want number pass number want literal string numbers", "d": "8/2015"}, {"body": "able", "d": "9/2015"}, {"body": "nt use use", "d": "8/2015"}, {"body": "ok thx try use vrepeat together watch thx", "d": "8/2015"}, {"body": "use components", "d": "8/2015"}, {"body": "input textbox would like new data event fired", "d": "6/2017"}, {"body": "another elegant workaround wrap onclick logic vuenexttick onclickfunc vuenexttick gt goes onclick logic", "d": "3/2018"}, {"body": "", "d": "6/2018"}, {"body": "likely due router instability please reopen router repo instead", "d": "8/2015"}, {"body": "\u770b\u8d77\u6765\u4f60\u7684\u6570\u636e\u7ed3\u6784\u91cc\u9762\u6709\u5bf9 window", "d": "8/2015"}, {"body": "\u5199\u9053 \u770b\u8d77\u6765\u4f60\u7684\u6570\u636e\u7ed3\u6784\u91cc\u9762\u6709\u5bf9 window reply email directly view github", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u628a\u4ee3\u7801\u548c\u8be6\u7ec6\u7684\u91cd\u73b0\u6b65\u9aa4\u53d1\u7ed9\u6211", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "\u4e0d\u8981\u7528\u538b\u7f29\u7248\u672c\u7684", "d": "8/2015"}, {"body": "", "d": "8/2015"}, {"body": "briefly mentioned guide think twoway filters looking", "d": "8/2015"}, {"body": "exactly thing twoway filters nt allow type anything want input unless use want context play fiddle messed many fronts empty input ca nt enter anything anymore stuck since keeps formatting value starts hitting backspace change press backspace many times want nothing change maybe fixed triggering read lazily", "d": "8/2015"}, {"body": "well thing formatting user input tricky thing nt think get expect angular formattersparsers either think trying impossible transform relationship user input value underlying model value gets converted number way know text format back yeah actually want persist user types format user blurs twoway filters created use case generally twoway binding nt make sense case two separate piece state store underlying value display value handle events separately closing formattersparsers wo nt solve issue", "d": "8/2015"}, {"body": "formatters angular invoked model changes source form element prevents issues outlined see example type input field stay way set value button input field set nt call formatter blur think different point important thing formatters called type", "d": "8/2015"}, {"body": "josephsilber ah makes sense would make twoway filters easier use", "d": "8/2015"}, {"body": "sure understand saying think good idea default behavior twoway filters think calling read blur", "d": "8/2015"}, {"body": "josephsilber yes current twoway filter behavior confusing hard use think angular formatter behavior simplifies issue need prevent triggering model view updates user typing", "d": "8/2015"}, {"body": "please reopen issue", "d": "8/2015"}, {"body": "beautiful thank much", "d": "8/2015"}, {"body": "sunglasses", "d": "8/2015"}, {"body": "vuejs possibility use object filter read write functions work anymore", "d": "10/2016"}, {"body": "", "d": "10/2016"}, {"body": "didnt work try use filter inside input gives error dont aloud use filter like vmodel price currency like example using vue one knows whats wrong", "d": "4/2017"}, {"body": "hmm looks like props skipped case situation would fragment passed instance", "d": "8/2015"}, {"body": "probably useful practical usage trying get vue working framework benchmark", "d": "8/2015"}, {"body": "hah seems lot faster old version", "d": "8/2015"}, {"body": "yeah friend work saying vue lot slower react styleattribute based animations thinking ca nt right even slower ca nt much found benchmarks couple months ago looks like vue twice fast react", "d": "8/2015"}, {"body": "well bottleneck styleattributebased animations almost never framework properties animating", "d": "8/2015"}, {"body": "ing component get limited abilities ca nt access case think evan mentioned somewhere issues wrap tag", "d": "8/2015"}, {"body": "repeated components automatically available inside component template components get limitation component scope rules", "d": "8/2015"}, {"body": "duplicate already fixed", "d": "8/2015"}, {"body": "jsfiddle link", "d": "8/2015"}, {"body": "\u5c31\u6709\u4e86", "d": "8/2015"}, {"body": "patrickhertling nt think solved vue rather external library using jquerystuff depending needs general case custom twoway directives solution might looking", "d": "8/2015"}, {"body": "thank think use directive", "d": "8/2015"}, {"body": "use two way directives tried using detect change set value working", "d": "3/2017"}, {"body": "issue testing vue controlled form selenium running selenium tests vue nt catch changes wonder method refresh whole dataset view", "d": "3/2017"}, {"body": "markskayff found way text inputs dispatch native input event types use native change events trigger v model update", "d": "3/2017"}, {"body": "facing issue working solution", "d": "5/2018"}, {"body": "set properties element imperatively need dispatch native event force bound data update different elements need different event types element event type property change checked change checked input value inputvalue changeselected", "d": "5/2018"}, {"body": "eddyerburgh tried solution working scenario pls see completed details scenario getting error indexvue uncaught typeerror thiscartformitem n dispatchevent function", "d": "5/2018"}, {"body": "principle vueutil methods must useful vue internal code need specific util methods use lodash lodash also ships standalone versions individual methods", "d": "8/2015"}, {"body": "look code style semicolons unless necessary nt issues minimized vue sources reproduce", "d": "8/2015"}, {"body": "nt write semicolons necessary", "d": "8/2015"}, {"body": "thanks sharing using totaljs vue builtin js compressor totaljs problem webpack code including vue js code one line without semicolon browser blocked seems compressor nt insert semicolon webpack vue code tried use yui compressor tried uglify compress generated code still nt work util modified source code totaljs avoid using builtin compressor better solution used semi add semicolon vue everything came back normal cheers", "d": "8/2015"}, {"body": "seems compressor nt insert semicolon would consider broken follow javascript standard would file issue repo sat aug pm charlie li notifications githubcom wrote thanks sharing using totaljs vue builtin js compressor totaljs problem webpack code including vue js code one line without semicolon browser blocked seems compressor nt insert semicolon webpack vue code tried use yui compressor tried uglify compress generated code still nt work util modified source code totaljs avoid using builtin compressor better solution used semi add semicolon vue everything came back normal cheers reply email directly view github", "d": "8/2015"}, {"body": "believe semicolons makes code readable especially developers accustomed programming languages php java cc furtherless even semicolons needed engine use feature called semicolon insertion engine recognizes semicolon needed automatically adds still needed final code automatically inserted missing add place emca specs script module parsed left right token called offending token encountered allowed production grammar semicolon automatically inserted offending token one following conditions true sounds like missing semicolon corrected automatically inserted normal script semicolon needed written unneeded semicolons removed sure due personal developer experience nt see even use daily project nosemicolon style guideline still tend look next line see going course since engine allows anybody use whichever style prefer kind regards oh forgot", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "thanks already read course many similar posts people also like insult offering pov th matter examining word word emca specs reason tend use semicolons declaring variables beginning function engine automatically hoist declaration code clear putting end interpreted semicolon needed automatically inserted var declared declaration automatically hoisted final interpreted code missing place hoisted declarations called asi asr r emoval unnecessary valid final statement asi way around reason js developers tell put var declarations top reflect final code interpretation also tell avoid semicolons one case tell rely automation case tell since js allows forms something like psr javascript would good least eyesbrain adjust coding style switching form project another outside scope discussion fun believe asi leads uncertainty always hated statement behaviour js developer decide statement ends hey way one final note kidding kind regards thank much vuejs", "d": "4/2016"}, {"body": "whole point readability subjective neither approach technically superior correct simply point complaining whether people code uses", "d": "4/2016"}, {"body": "agree complaining maybe nt clear fun expressing point view reason prefer omitting semicolons move declarations top common style guideline among developers could useful php standard group useful te community write php code many ways opening different frameworks code seeing style helpful saves time", "d": "4/2016"}, {"body": "personal experience liked using semi come cc background trying semi style found faster code readable", "d": "4/2016"}, {"body": "posva still prefer using says matter personal preference wanted say emca specs states certain js statements must end semicolon add interpreter add evaluation valid js statements allowed write code way js asi transform valid statements specs says removed previous expressions needed automatically added missing quoting emca certain ecmascript statements must terminated semicolons semicolons may always appear explicitly source text convenience however semicolons may omitted source text certain situations situations described saying semicolons automatically inserted source code token stream situations may things way comfortable quoting circumstance assignment statement must begin left parenthesis good idea programmer provide explicit semicolon end preceding statement rather rely automatic semicolon insertion quoting specs end preciding statement must many projects adds beginning next statement fine always use technique combining many scripts one fine reading code relying asi many big projects using feels natural add code programming language use provide asi start omitting rule js sure sooner later forget phpc even multiple sql query kind regards", "d": "4/2016"}, {"body": "guess avoid using python nt support well philosophies conventions enforced language designers cjs developers would prefer semicolons pythonjs developers would prefer semicolons since specs allow styles matter preference", "d": "4/2016"}, {"body": "fnlctrl nope misunderstood saying whatever prefer stated simple things personal preference reasons behind quoting emca specs never said anyone find line correct intended thing complaining general topic nothing project community fact js developers tells put declaration top engine put clear time tell avoid even engine adds believe either advice use forbid allow people choose advice use one use reason behind writing code closer interpreted nobody feel sorry right others using semicolons way nobody feel sorry right using pls let stop nt want silly thing turn religious struggle spaghetti vs fettuccine explained like fettuccine well like spaghetti well telling eat fettuccine avoid spaghetti", "d": "4/2016"}, {"body": "interested conversation nt think belongs feel free discuss semicolons elsewhere", "d": "4/2016"}, {"body": "moved vuejsdiscussion personally nt like style shown post people whatever like cases want components well encapsulated rely simple props rather entire app state", "d": "8/2015"}, {"body": "fixed", "d": "8/2015"}, {"body": "use inline expressions like need something complex consider using computed property", "d": "8/2015"}, {"body": "ah thanks put pr documentation noting", "d": "8/2015"}, {"body": "ok able remove clicked user following changes html javascript", "d": "8/2015"}, {"body": "remove item directly take either index number actual object remove", "d": "8/2015"}, {"body": "thanks lot fast answer", "d": "8/2015"}, {"body": "actually intended content outlet get content elements match selector regardless appearance order allows block content reused multiple times component sometimes useful also think better rendered result depend outlets ordered use specific selector example", "d": "8/2015"}, {"body": "\u4e0a\u9762\u7528 \u4e0d\u662f", "d": "8/2015"}, {"body": "\u603b\u662f\u628a \u5199\u6210\u4e86", "d": "8/2015"}, {"body": "\u5728webpackvueloader", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "", "d": "10/2016"}, {"body": "updated fiddle examples looks like vue loosing bindings even using method using keypath value prop like", "d": "8/2015"}, {"body": "nt initializing created hook returning inside option specifically initializing observed properties", "d": "8/2015"}, {"body": "\u65b0\u589e\u7684\u60c5\u51b5 \u63d0\u4f9b\u4e86 set \u51fd\u6570\u7684 \u4e0d\u662f\u76f4\u63a5 \u8d4b\u503c", "d": "8/2015"}, {"body": "\u4e4b\u524d\u4e5f\u60f3\u8fc7\u7528 \u8ba9\u6211\u8bef\u4ee5\u4e3a", "d": "8/2015"}, {"body": "\u770b\u5230\u6839\u672c\u6ca1\u6709 level \u6539\u6210 \u548b\u6837", "d": "8/2015"}, {"body": "use codes place like selectpackage dl vrepeat items template vif template vif isfirstmonth dt groupname dd vrepeat item von click onchoose itemid skuid isfirstmonth span skuname template vif isfirstmonth dt groupname dd vrepeat item von click onchoose itemid skuid isfirstmonth vshow skuid span skuname", "d": "8/2015"}, {"body": "using latest version fix related nested templates safari still happens please provide jsfiddle reproduction", "d": "8/2015"}, {"body": "vuejs provide new directive like worked maybe concise syntax use instead easy use use scene", "d": "8/2015"}, {"body": "demo", "d": "8/2015"}, {"body": "velse maybe vempty also since composing views three conditions common nothing show something show something different needs adjusting", "d": "8/2015"}, {"body": "happening try create alternate grid like using safari version os x version vuejs version", "d": "7/2016"}, {"body": "thanks unfortunately nt fix issue use settimeout eg chrome never works ms sometimes realistic test case keep clicking link quickly nt able break chrome clicking fast enough able firefox also easier computer swapping firefox entering div also gets pushed leaving one fast enough real app enough time move mouse one menu item one click happen", "d": "8/2015"}, {"body": "testing requestanimationframe setting justentered false next frame always enough firefox fact even nesting two requestanimationframes nt enough settimeout clicking menu items including mouse movement one menu item using backforward mouse", "d": "8/2015"}, {"body": "real reason styles toggle enter leave fast enough opacity nt started interpolating yet still gets applied thus css transition triggered event never fires simple quite unintuitive fix giving tiny value different example", "d": "8/2015"}, {"body": "yeah know hoping would possible fix using requestanimationframe looks like pretty much impossible", "d": "8/2015"}, {"body": "better option might allow option actual object like angular", "d": "8/2015"}, {"body": "yeah would definitely work", "d": "8/2015"}, {"body": "would cool", "d": "8/2015"}, {"body": "installed latest code dev branch still nt work debug code find inside selectjs execute line object object string value", "d": "8/2015"}, {"body": "jfliu course serialized object value works syncing back model", "d": "8/2015"}, {"body": "example code still nt work try", "d": "8/2015"}, {"body": "jfliu build dist folder contains standalone build vuejs however files checkedin release happens dev branch files date", "d": "8/2015"}, {"body": "simplesmiler installed clone repo run build task code works thanks", "d": "8/2015"}, {"body": "needed value worked input", "d": "3/2017"}, {"body": "appsparkler afaik serialization like necessary least docs show following example", "d": "3/2017"}, {"body": "seems like support objects values dropped", "d": "11/2017"}, {"body": "ndabap work gives output html bar screenshot good luck", "d": "11/2017"}, {"body": "still sollution", "d": "7/2018"}, {"body": "zealotrahl please see answer question", "d": "8/2018"}, {"body": "would nt perfect use case broadcasting event root view models would listen react", "d": "8/2015"}, {"body": "update bindings", "d": "8/2015"}, {"body": "since picture worth thousand words would think biggest issue running using components view models three separate unrelated view model hierarchies", "d": "8/2015"}, {"body": "yeah though using broadcast like nt want inject globalize object vm prefer solution private data translator object kept away vms pluginmixin essentially becomes service injected vm either automatically vms plugin manually mixin exports functions public api essentially keeping private data separated", "d": "8/2015"}, {"body": "note way using creating children view models body tag view model see fiddle added logging make clear best way get parent child relationships like working use component system", "d": "8/2015"}, {"body": "oh confusing thanks pointing even fix nt work real app actually dynamic component", "d": "8/2015"}, {"body": "two problems first functions components returning second key problem order bind need make sure view model defined otherwise vue binds calls see reference translator therefore ca nt watch causes update created updated later", "d": "8/2015"}, {"body": "right using add works component even though translator nt defined root either work children", "d": "8/2015"}, {"body": "understanding deal setting data components directives compiled executed nt think effect anything already compiled dom point maybe could shed light subtlety", "d": "8/2015"}, {"body": "another reason prefer initializing data properly working verison internally calling vm causes watchers reevaluated new dependency non existing watchers aware essentially forced dirtycheck digest cycle like angular propagates child child normal components derive parent data via also forceupdated digest cycle", "d": "8/2015"}, {"body": "table element restrictions elements appear inside custom elements hoisted render properly cases use component directive syntax docs scroll tip", "d": "8/2015"}, {"body": "fwiw work bind text area value property instead ie", "d": "8/2015"}, {"body": "\u5728 branch", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "btw example filter use js vuefilter optionify function items text value return itemsmap function item value null return item text", "d": "7/2015"}, {"body": "separate issue looks good though open pr", "d": "8/2015"}, {"body": "use tried adding none select ignoredoverriden nt show", "d": "8/2015"}, {"body": "pdcmoreira released yet", "d": "8/2015"}, {"body": "updates released yet", "d": "12/2015"}, {"body": "shayac use new version vuejs dynamically create lot better", "d": "12/2015"}, {"body": "actually share root cause bindings reactive renaming one closing", "d": "7/2015"}, {"body": "implemented", "d": "8/2015"}, {"body": "", "d": "7/2015"}, {"body": "duplicate", "d": "7/2015"}, {"body": "got fiddle strange reason problem dependent number repeated inside number props got inside function oo", "d": "7/2015"}, {"body": "comment lines app still lag", "d": "7/2015"}, {"body": "aye still lag warning different duplicate objects supported vrepeat using components transitions", "d": "7/2015"}, {"body": "another thing app freezes infinite loop warnings", "d": "7/2015"}, {"body": "try branch fixed infinite check want make sure also fixed performance problem", "d": "7/2015"}, {"body": "nt help infinite check still present probably investigate problem occurs one page also using hacks work maybe hacks way", "d": "7/2015"}, {"body": "ah set false fun begins", "d": "7/2015"}, {"body": "hmm fixed fiddle though using file dist didnt build branch fri jul andrey notifications githubcom wrote ah set vueconfigasync false fun begins reply email directly view github", "d": "7/2015"}, {"body": "build yeah tried new version separated document another computer ca nt get right new also tried reproduce example right ca nt even get vue fixbatcherinfinitecheck branch work asyncfalse mode getting error", "d": "7/2015"}, {"body": "added getting error looks like current computer code behaves different get inifinite loop code", "d": "7/2015"}, {"body": "probably nt help fiddle working properly fix branch app still infinite loop probably infinite loop need make new fiddle showing infinite loop problem fix branch lowlevel details fiddle component lot default data fields fields merged objects array every field causes call object inside array watcher watching array triggered every call triggers updated infinite check something number elements array also performance issue fix branch makes sure watcher updated every async update cycle counts infinite loops watcher pushes queue", "d": "7/2015"}, {"body": "thanks detailed explanation makes things clear still points left could please give working fiddle code example thoughts problem always visible want make accent following points tested versions vuejs also versions code async made different tests lets review results amp bunch errors amp infinite loop error depends computer amp everything fine yay amp infinite loop error depends computer either failed building properly problems nt occur system", "d": "7/2015"}, {"body": "see point yes setting get error fix branch using actual app honestly nt recommend exactly type situation", "d": "7/2015"}, {"body": "well yes actually nt intend used beginning thing funny till version vuejs bug probably components used inside waitfor component would ignore work synchronously trying move v found app working new version finnaly began work whole app designed work depending synchronous vuejs behavior", "d": "7/2015"}, {"body": "hmm one hack try remove lines", "d": "7/2015"}, {"body": "going close since issue let know suggestion helped anyway", "d": "7/2015"}, {"body": "duplicate", "d": "7/2015"}, {"body": "could implemented enhancement builtin filterby need detect search keys", "d": "7/2015"}, {"body": "run today love see implemented optional array datakey parameter especially declare advance pass vue component", "d": "8/2015"}, {"body": "array argument good idea expecially passed data parameter k august steve notifications githubcom wrote run today love see implemented optional array datakey parameter filterby filterkey name power especially declare advance pass vue component reply email directly view github", "d": "8/2015"}, {"body": "would good improvement waiting", "d": "8/2015"}, {"body": "yeah fixed", "d": "7/2015"}, {"body": "using note use case nt need expression works without comparison statement something like side effects example nt detect statement directive get result handler function", "d": "7/2015"}, {"body": "thank comment dynamicconstraint b expression right worked without", "d": "7/2015"}, {"body": "still love know line referenced nt pass return value value would immediately useful least one use case", "d": "5/2016"}, {"body": "proposed solution think bit finegrained make template async basic unit vue apps component", "d": "8/2015"}, {"body": "return value promise runtime api nt think using splitting component files", "d": "7/2015"}, {"body": "think template option accept promise exactly use case", "d": "7/2015"}, {"body": "even write import template indexhtml text return promise nt build", "d": "7/2015"}, {"body": "hi using vuejs environment little key write modules using standard syntax use load main vue module nt require bundling complexities setup look something like following javascript somecomponentjs import vue vue import template pathtotemplatehtml text const somecomponent vueextend template template export default somecomponent javascript somevuejs import vue vue import somecomponent somecomponent vuecomponent somecomponent somecomponent new vue html served client includes following bits html systemimport somevue let know anything better articulated", "d": "8/2015"}, {"body": "like tip work always build final script every change", "d": "8/2015"}, {"body": "like tip work always build final script every change browser caching issue bundle pathname changes per build would get around caching individual module paths static however browser would caching old versions files", "d": "8/2015"}, {"body": "hey thelinuxlich able make work basically switched using systemjs builder started building self executing bundles vue something similar js var template require templatehtml text var component vueextend template template vuecomponent app component new vue el app let systemjs builder cli transpile javascript", "d": "10/2015"}, {"body": "moved webpack", "d": "10/2015"}, {"body": "movement bring vuejs singe file components jspm world yet", "d": "5/2016"}, {"body": "looks like looking making systemjs plugin vue components", "d": "6/2016"}, {"body": "made example also importing templates could use async components templateurl property yet", "d": "12/2016"}, {"body": "link gives error", "d": "8/2017"}, {"body": "yes ziyuang removed days ago encourage use webpack performance systemjs really high", "d": "8/2017"}, {"body": "expected behavior reference type values arrays objects mutated rather replaced entirely vue nt nt need cache deep copy value like angular even gives different values still need diff arrays anything useful trying achieve old value", "d": "7/2015"}, {"body": "exaplaination makes sense changed recently case since beginning", "d": "7/2015"}, {"body": "always case", "d": "7/2015"}, {"body": "ok thnx", "d": "7/2015"}, {"body": "think deprecated allowed elements weird actually working second jiddle", "d": "7/2015"}, {"body": "right way", "d": "7/2015"}, {"body": "thanks", "d": "7/2015"}, {"body": "two problems modifying value user types would often result weird ux specifically need functionality twoway binding best way achieve using write filters often actually want display sync underlying model", "d": "7/2015"}, {"body": "case create component used without purpose get default behavior system input put transparent input component template bind value hand create component want make least one selected watch state attached update group state changed however tap selected deselected reselect wo nt propagate model input ideas achieve purpose", "d": "7/2015"}, {"body": "reselect nexttick unlocked", "d": "7/2015"}, {"body": "expected behavior first case exactly described second case content transcluded also resolved parent scope basically repeated component follows semantics components rather inline repeats", "d": "7/2015"}, {"body": "means want use repeat meta info wrap around communicate specified type parent repeated template break", "d": "7/2015"}, {"body": "component used meta info available inside component automatically nt explicitly pass parent check parent inline repeat wrapper checking kinda dirty enough use case definitely improved later", "d": "7/2015"}, {"body": "ca nt tell wrong based description helpful provide sort reproduction issue", "d": "7/2015"}, {"body": "closing inactivity", "d": "8/2015"}, {"body": "found correct place post", "d": "7/2015"}, {"body": "would every event could events vue nt even know wrong current method sat jul dmitry krokhin notifications githubcom wrote form use directive manually prevent default action new vue el asis methods addtask function e epreventdefault work idea made approach simpler like new vue el tobe methods addtask function work reply email directly view github", "d": "7/2015"}, {"body": "ca nt add labels issues looks like repository owner please note enhancement current method ok match dry principle opinion form processing big part web applications sure feature included core register issue discuss behaviour", "d": "7/2015"}, {"body": "sounds like overkill add core directive simple task think userland concern aka make custom directive feel free open new issue discuss vuejsdiscussion", "d": "7/2015"}, {"body": "although present source code automatically converted plain strings build tools distributed file nt contain running error somewhere", "d": "7/2015"}, {"body": "yes building application webpack", "d": "7/2015"}, {"body": "uipoet webpack auto shims detects work without special setup running webpack example fine experiencing errors provide repro", "d": "7/2015"}, {"body": "testing repo determined issue configuration webpack polyfills thank time", "d": "7/2015"}, {"body": "could try using instead", "d": "7/2015"}, {"body": "excellent got working using syntax throughout many thanks fast reply", "d": "7/2015"}, {"body": "\u81ea\u5df1\u9009\u62e9\u7b2c\u4e09\u65b9\u5e93 momentjs numeraljs \u505a\u6210\u81ea\u5b9a\u4e49 filter", "d": "7/2015"}, {"body": "pipe another custom filter strips cents also please ask questions like vuejsdiscussion gitter channel", "d": "7/2015"}, {"body": "\u7c7b\u4f3c\u7684\u63d2\u4ef6\u901a\u5e38\u5efa\u8bae\u7528\u4e00\u4e2a custom directive", "d": "7/2015"}, {"body": "code worked ybwdaisy message document ready function datetime datetimepicker format yyyymmdd hh ii timezone cst autoclose true clearbtn true todaybtn true vuedirective tolerious bind function consolelog bind update function value consolelog value unbind function consolelog unbind var vml new vue el divcontainer data message value auto change select certain date", "d": "9/2016"}, {"body": "tolerious \u7684\u65b9\u6cd5vmodel\u65e0\u6cd5\u4e0d\u7ed1\u5b9a", "d": "10/2016"}, {"body": "accaolei init datetimepicker input different id bind input value different data refer code", "d": "10/2016"}, {"body": "thinks tolerious", "d": "11/2016"}, {"body": "function startdatedatepicker datetimepicker hide function ev var value startdatedatepicker val vmstartdate value registerdatepicker datetimepicker hide function ev var value registerdatepicker val vmregisterdate value var vm new vue data startdate null registerdate null", "d": "3/2017"}, {"body": "thanks known issue fixed", "d": "7/2015"}, {"body": "sure related set component default values nt work unless understanding incorrectly", "d": "7/2015"}, {"body": "nouveller separate issue also fixed", "d": "7/2015"}, {"body": "ah brilliant using work around time look forward fix new release thanks", "d": "7/2015"}, {"body": "thanks", "d": "7/2015"}, {"body": "could bit confusing global config option change option default set", "d": "7/2015"}, {"body": "want point indicating current design ridiculous polite way open feature request", "d": "7/2015"}, {"body": "thinking something like value optional specified model contain whole object talked discussion", "d": "7/2015"}, {"body": "filter approach awesome using computed properties way useful", "d": "7/2015"}, {"body": "suggested discussion thread write reusable custom filter transform array reason dedicated attributes conversion many possible cases attribute syntax wo nt suffice eg source data could object select needs optgroups textvalue need formatted etc custom filter gives full capability sort transform want attribute syntax extra syntax one particular use case", "d": "7/2015"}, {"body": "ridiculous design people often forget get free spent numerous hours thank bringing us lightweight amp smart alternative angular", "d": "7/2015"}, {"body": "filter approach", "d": "7/2015"}, {"body": "sorry born frustration nt malice behind definitely appreciate fantastic vuejs would great filter approach could added documentation", "d": "7/2015"}, {"body": "worries added todos docs", "d": "7/2015"}, {"body": "need additional attributes options like data selected etc smile", "d": "4/2016"}, {"body": "use guess could nt past acted funky ca nt remember yeah", "d": "4/2016"}, {"body": "detailed component scoping section basically iterated loop would undefined parent scope making error think", "d": "4/2016"}, {"body": "", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "\u7ec4\u4ef6\u91cc\u66b4\u9732\u4e00\u4e2a user", "d": "7/2015"}, {"body": "alexorz \u8bd5\u8bd5\u8fd9\u4e2afiddle", "d": "7/2015"}, {"body": "alexorz \u867d\u7136\u8001\u5b9e\u8bf4\u6211\u7684\u82f1\u8bed\u4e5f\u4e0d\u600e\u4e48\u6837", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "vm \u6b63\u786e\u7684\u7528\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\u7684", "d": "7/2015"}, {"body": "log items items \u7684get \u6240\u4ee5\u6211\u5c1d\u8bd5\u7740\u76f4\u63a5vm log items", "d": "7/2015"}, {"body": "\u4f60\u5e94\u8be5\u7528", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "\u9519\u8bef\u8c03\u7528\u6808\u603b\u6709\u5427 thu jul pm \u6728\u98ce notifications githubcom wrote typeerror redefine property document typeerror redefine property reload appendto reply email directly view github", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "\u770b\u8d77\u6765\u4f60\u662f\u5728 ready hook \u91cc\u9762\u5e72\u4e86\u4ec0\u4e48\u4e8b\u60c5\u5bfc\u81f4\u4f60\u7684 vm \u8bd5\u56fe\u53bb observe \u67d0\u539f\u751f\u5bf9\u8c61\u4e86", "d": "7/2015"}, {"body": "\u5199\u9053 \u770b\u8d77\u6765\u4f60\u662f\u5728 ready hook \u91cc\u9762\u5e72\u4e86\u4ec0\u4e48\u4e8b\u60c5\u5bfc\u81f4\u4f60\u7684 vm \u8bd5\u56fe\u53bb observe \u67d0\u539f\u751f\u5bf9\u8c61\u4e86 reply email directly view github", "d": "7/2015"}, {"body": "\u6bd4\u5982\u5982\u679c\u4f60\u5728 \u91cc\u9762\u6709\u4e00\u4e2a vue \u5c31\u4f1a\u53bb\u89c6\u56fe\u89c2\u5bdf document vm \u7684 data", "d": "7/2015"}, {"body": "\u5199\u9053 \u6bd4\u5982\u5982\u679c\u4f60\u5728 data \u91cc\u9762\u6709\u4e00\u4e2a vma vue \u5c31\u4f1a\u53bb\u89c6\u56fe\u89c2\u5bdf document objectdefineproperty vm \u7684 data reply email directly view github", "d": "7/2015"}, {"body": "\u4f60", "d": "7/2015"}, {"body": "closing inactivity", "d": "7/2015"}, {"body": "warning nt understand written support", "d": "8/2015"}, {"body": "suggest try old version like last version need test", "d": "8/2015"}, {"body": "also problem line vue chrome client browser version works fine chrome", "d": "9/2015"}, {"body": "occurs also means dom much bigger needs performance issue array objects passed lot components creates enormously long attribute value number places dom", "d": "7/2015"}, {"body": "version vue using", "d": "7/2015"}, {"body": "happening least month", "d": "7/2015"}, {"body": "weird props directives removed compilation never seen maybe something linux chrome", "d": "7/2015"}, {"body": "maybe give pointer debug like removal happens code read code clean fri jul evan notifications githubcom wrote weird props directives removed compilation never seen maybe something linux chrome reply email directly view github", "d": "7/2015"}, {"body": "removed", "d": "7/2015"}, {"body": "apparently happens put attribute component nt include attribute component props list see happens assume unused attributes know fix guess good happen since acts warning attribute unused", "d": "7/2015"}, {"body": "give example would helpful", "d": "7/2015"}, {"body": "let say imagine building clone phpmyadmin receives data describe table statement builds row editor form data binding expressions inherently dynamic case know field names running sql describe table", "d": "7/2015"}, {"body": "looking", "d": "7/2015"}, {"body": "hope see", "d": "7/2015"}, {"body": "still nt fully understand enables current syntax achieve maybe code samples", "d": "7/2015"}, {"body": "pseudocode related phpmyadmin clone described", "d": "7/2015"}, {"body": "already", "d": "7/2015"}, {"body": "wow", "d": "7/2015"}, {"body": "evan put js fiddle showing todoish example", "d": "7/2015"}, {"body": "great example showing one example dynamic usage logic might complex kind business application", "d": "7/2015"}, {"body": "clear idea allowing interpolations inside directive expressions right mustaches means evaluated result expected string used string inserted dom id lookup evaluating mustaches expressions evaluated makes two layers abstraction end making templates confusing", "d": "7/2015"}, {"body": "think would valuable add ability interpolate string evaluating expression method works well objects nested level found way bind dynamically maybe add modifier binding clear mustaches example maybe gettersetter function passed disclaimer read spec may addressed", "d": "6/2016"}, {"body": "bhoriuchi computed property use computed property setter", "d": "6/2016"}, {"body": "simplesmiler tried computed properties twoway binding ill give shot thanks tip update simplesmiler issue running using computed property way pass arguments computed property inside getter even point component background use case creating form builder uses json object build forms config object less dimensional array objects rowsforms form config object model field path string field set order use computed property would need able determine component using component binding rowform index order look model path config object currently working using preinitialized dimensional array called bind form model watch object changes update parent data object dislike approach requires preinitialize array dynamic field addition need levels nesting using form builder component another component needs set object looks something like path string would look like update changed using multidimensional array plain object key names used deep watch keep data sync parent still think interoplated bind would beneficial", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "trick", "d": "7/2016"}, {"body": "victorwpbastos work setting deeply nested objects use fieldname key example following data field string use enter value form data would end looking like reason interpolated bind useful building dynamic nested inputs cant hard code parent path eg animaldog directive", "d": "7/2016"}, {"body": "revisited found simple solution create custom object add getterssetters created using model path string simple example inputlist js div div vfor form configforms input vmodel formdata formmodel import vue vue import lodash export default props value config computed methods vueset obj path val let value obj let fields isarray path path topath path let f fields let idx number f let p fields idx idx fieldslength vueset value p val else value p vueset value p isnumber p value value p data return formdata created foreach thisconfigforms form gt objectdefineproperty thisformdata formmodel get gt get thisvalue formmodel set v gt thisvueset thisvalue formmodel v use js div inputlist vmodel formdata configformconfig import inputlist inputlist export default components inputlist data return formdata name jon loc id formconfig forms type input model locid type input model loc name", "d": "10/2016"}, {"body": "using way way set watcher reactive data created dynamically", "d": "12/2016"}, {"body": "luqmanrom familiar inner workings vue watcher believe anything created vueset watched could add code watch dynamic props emit evens changes seep watch target object someone else might better suggestion", "d": "12/2016"}, {"body": "wrote toolkit also allows mutate vuex using vmodel", "d": "2/2017"}, {"body": "trick directive usage component gist reference", "d": "4/2017"}, {"body": "hi body using vuejs laravel dynamic custom form fields coming database followed vmodel form name field works problem get field values laravel controller anybody using tylerotwell formjs class help greatly appreciated thanks", "d": "1/2018"}, {"body": "help forum one dedicated answering questions", "d": "1/2018"}, {"body": "really struggled trying function invoked find value example trying build date range picker looks like presets coming array looks like also two dates input fields component amp really want compare date user selected dates passed preset configuration set value either unable nt accept conditions ca nt nt allow alias passed function ca nt something like allowing conditional statements least solve problem easily also may something fundamentally wrong please point could achieve different way", "d": "2/2018"}, {"body": "currently solved problem exploiting fact computed properties function calls script template really seems like hack sure please suggest", "d": "2/2018"}, {"body": "anybody know also works combination vuex explained want input field little bit dynamic access scope dom element inside following code", "d": "8/2018"}, {"body": "vielhuber try use", "d": "8/2018"}, {"body": "hi vue question related topic dynamic vmodel directive implementing vue component dynamically control vmodel modifier etc example", "d": "8/2018"}, {"body": "\u4e0d\u8981\u628a\u590d\u6742\u5bf9\u8c61\u5f53 \u5e94\u5f53\u662f\u53ef\u4ee5\u65e0\u7f1d\u8f6c\u5316\u4e3a json \u4e0d\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u6570\u636e\u7ed1\u5b9a\u7684\u4e1c\u897f\u4e0d\u8981\u653e\u5728 data", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "\u5728\u7ec4\u4ef6\u91cc \u628a\u767e\u5ea6\u5730\u56fe\u5b9e\u4f8b\u5316\u597d\u540e \u53ef\u4ee5\u52a8\u6001\u628a\u8fd9\u4e2a\u6dfb\u52a0\u5230\u7236\u7ea7\u7684data\u91cc parent add bmap map \u7136\u540e\u7236\u7ea7\u5c31\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\u767e\u5ea6api\u4e86 vm databmapcenterandzoom new bmappoint", "d": "7/2015"}, {"body": "\u53ea\u4e0d\u8fc7\u8fd9\u6837\u8c03\u7528\u7684\u8bdd \u6bcf\u6b21\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a undefined", "d": "7/2015"}, {"body": "\u4e0d\u8981\u628a\u590d\u6742\u5bf9\u8c61\u653e\u8fdb map \u4e0d\u9700\u8981\u653e\u8fdb vue", "d": "7/2015"}, {"body": "\u4f46\u662f\u6211\u662f\u8981\u505a\u4e00\u4e2a\u767e\u5ea6\u5730\u56fe\u7684\u7ec4\u4ef6component \u5728\u7ec4\u4ef6\u91cc add bmap map \u52a0\u4e0b\u5212\u7ebf\u662f\u4e3a\u4e86\u4e0d\u91cd\u5199\u8fd9\u4e2a\u5bf9\u8c61 \u5916\u90e8\u8c03\u7528\u7684\u65f6\u5019 \u5728\u7ec4\u4ef6\u4e0a\u52a0\u4e2a vref bdmap vm bdmap databmapcenterandzoom new bmappoint", "d": "7/2015"}, {"body": "good idea", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "recommended use option parameter element use computed properties achieve desired behaviour", "d": "7/2015"}, {"body": "think really looking nt want use optgroup want prepend item identifier debug mode help troubleshoot looking group items together debug mode debug mode", "d": "7/2015"}, {"body": "doc says need dynamically render list options element recommended use attribute together vmodel need specify attribute specify array options list render make computed property react value changing use work around issue hope helps", "d": "7/2015"}, {"body": "right works workaround thanks seems like bit overkill wa nt accomplish still wonder vif vshow nt work inside vrepeat thanks help", "d": "7/2015"}, {"body": "probably spans allowed inside option elements wed jul romain l\u00e9ger notifications githubcom wrote right works workaround thanks seems like bit overkill wa nt accomplish still wonder vif vshow nt work inside vrepeat thanks help reply email directly view github", "d": "7/2015"}, {"body": "confirmed put elements inside get crunched plain text", "d": "7/2015"}, {"body": "oups nt thought thanks", "d": "7/2015"}, {"body": "\u9700\u8981\u663e\u793a\u7684\u589e\u52a0inherit vuecomponent mycomponent inherit true template hello name", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "butsalt \u591a\u8c22\u8be6\u7ec6\u7684\u56de\u7b54", "d": "7/2015"}, {"body": "according releases since think change missing doc post issues related documentation repo", "d": "7/2015"}, {"body": "got thanks reply", "d": "7/2015"}, {"body": "\u8bf7\u4ed4\u7ec6\u770b", "d": "7/2015"}, {"body": "need vue could nt internal module plugin", "d": "7/2015"}, {"body": "yes wink internal module plugin providing user custom assets api us plugin developer plugin user well think gets advantage consistency", "d": "7/2015"}, {"body": "nt think part vue core vue singleton could potentially lead namespace clashes feels natural expose type assets plugin module maybe add conventions plugin authoring guide", "d": "7/2015"}, {"body": "okay smiley try custom assets management pluginside well come think right", "d": "7/2015"}, {"body": "expose assets plugin similar vue idea js var vv require vuevalidator var min vvvalidator min users register custom validators vvvalidator myvalidator function value", "d": "7/2015"}, {"body": "could use external event bus", "d": "7/2015"}, {"body": "speaking external event buses recommend evan nt ever used one advice appreciated", "d": "7/2015"}, {"body": "azamatsharapov node builtin eventemitter probably easiest one webpack browserify mock believe also use", "d": "7/2015"}, {"body": "thank", "d": "7/2015"}, {"body": "using vuejs try emit event global like u recommend trying something like eventemitteremit myevent mymessage component componentbvue like events myevent function msg consolelog msg use events componentb get event", "d": "6/2016"}, {"body": "maaarkin register listener bus like also issue closed github issues reserved feature proposals bug reports please consider opening thread community forums forumvuejsorg", "d": "6/2016"}, {"body": "ca nt piece dom compiled ca nt compile proper way make component include form template create append dom need new one destroy old one needed remove time start create new instance still feels wrong able reset state vue instance keep using form", "d": "7/2015"}, {"body": "oh please post questions vuejsdiscussion instead repo", "d": "7/2015"}, {"body": "thanks replying reason want avoid huge vue object created different vue objects different states", "d": "7/2015"}, {"body": "maybe use dynamic components switch depending state", "d": "7/2015"}, {"body": "people might like remove vue dom render react component inside target element well vue destroys target element simple might think basically need make new element inside container want mount vue read thread", "d": "9/2017"}, {"body": "\u8fd9\u4e0d\u53eb\u53cc\u5411\u7ed1\u5b9a \u4e0d\u9700\u8981\u76d1\u542c\u6570\u636e\u53d8\u5316\u4e3a\u5565\u8981\u7528 vue \u63d0\u95ee\u8bf7\u5230 bug report \u548c feature request", "d": "7/2015"}, {"body": "somewhat expected actually creates new copy content every time toggled ux perspective probably better instantly remove stale instances condition changed", "d": "7/2015"}, {"body": "got ta thanks", "d": "7/2015"}, {"body": "want", "d": "12/2015"}, {"body": "luckymore src imgurl defaultimg", "d": "5/2016"}, {"body": "implemented although like backport noncritical change requires nontrivial effort given bandwidth reducing scope number critical features low hanging fruits unfortunately implemented", "d": "11/2016"}, {"body": "array mutated reference change different completely replace array new one option internal meant public use maybe underscore", "d": "7/2015"}, {"body": "see need track length array moment using expression worked thanks", "d": "7/2015"}, {"body": "ahhh problem case would detect objects property change", "d": "11/2015"}, {"body": "brings relational database models feeling stealing idea smile supporting additional arguments like would make flexible instead nt get thing prop method like", "d": "7/2015"}, {"body": "azamatsharapov property defining variablesvalues basically like old passed values component property could named differently could also work property name even multiple assignments work like also would default argument nt set argument sure put argument like also work", "d": "7/2015"}, {"body": "would nice create computed variables ca nt method mon jul steffan notifications githubcom wrote using vrepeat directive sometimes happens related object needed depending current value example iterating array items gettype method used get related type object exists name gettype value name would nice create computed variables vrepeat like name typename since type depends item object value omitted automatically passed gettype value method name typename created directive seems like useful addition vrepeat directive reply email directly view github", "d": "7/2015"}, {"body": "sure add directives syntax sugar like different ways deal example computed array use components custom directive described opinion fine leave userland thing", "d": "7/2015"}, {"body": "\u56e0\u4e3a\u4f20\u8fdb\u6765\u7684\u65f6\u5019 \u5df2\u7ecf\u88ab\u7f16\u8bd1\u8fc7\u4e86\u554a", "d": "7/2015"}, {"body": "\u5199\u9053 \u56e0\u4e3a\u4f20\u8fdb\u6765\u7684\u65f6\u5019 text \u5df2\u7ecf\u88ab\u7f16\u8bd1\u8fc7\u4e86\u554a reply email directly view github", "d": "7/2015"}, {"body": "\u5199\u9053 \u56e0\u4e3a\u4f20\u8fdb\u6765\u7684\u65f6\u5019 text \u5df2\u7ecf\u88ab\u7f16\u8bd1\u8fc7\u4e86\u554a reply email directly view github", "d": "7/2015"}, {"body": "priority \u7684\u9ed8\u8ba4\u4e3a \u548c repeat", "d": "7/2015"}, {"body": "\u5982\u679c\u4f60\u60f3\u8981\u5b8c\u5168\u5bf9\u7528\u6237\u9690\u85cf vue \u7684\u5b58\u5728\u90a3\u6211\u4e5f\u6ca1\u529e\u6cd5\u4e86", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "\u5199\u9053 closed reply email directly view github", "d": "7/2015"}, {"body": "please provide code produced issue", "d": "7/2015"}, {"body": "closing inactivity", "d": "7/2015"}, {"body": "simpler version fiddle without component opacity fade", "d": "7/2015"}, {"body": "repeated array contains primitive values automatically mode impossible accurately track position duplicate primitives value want accurateposition transitions always use objects repeat array", "d": "7/2015"}, {"body": "thanks evan makes sense updated fiddle behave expected methods still animate", "d": "7/2015"}, {"body": "animate items element enteredleft dom want smooth moves reorders better absoluteposition items animate csstransform based", "d": "7/2015"}, {"body": "makes sense technical perspective seems counterintuitive point view user thanks explanation able develop decent workaround btw love library whole", "d": "7/2015"}, {"body": "repo questions vuejsdiscussion repo example outside ed need move sure wrapping elements every step iteration element like model", "d": "7/2015"}, {"body": "suggested please nt post questions repo", "d": "7/2015"}, {"body": "exactly wanting happen list checkboxes checked state could hold languages object rather string html new vue data languages name english checked true name japanese checked false name chinese checked true use filtermap retrieve names selected languages jsfiddle demonstrating", "d": "7/2015"}, {"body": "guess use case use check boxes similar manner use select ability select multiple selections sort check apply scenario checkables come array possibilities jul notifications githubcom wrote exactly wanting happen list checkboxes checked state could hold languages object rather string new vue data languages name english checked true name japanese checked false name chinese checked true use filtermap retrieve names selected languages jsfiddle demonstrating reply email directly view github", "d": "7/2015"}, {"body": "old example please open questions like vuejsdiscussion instead core repo", "d": "7/2015"}, {"body": "vue templates need valid html self closing tags xhtml syntax outdated never use see", "d": "7/2015"}, {"body": "nt see component documentation caused little time wasting would good add", "d": "1/2016"}, {"body": "set option like allow like html var mycomponent vueextend template custom component voidelement true allow template void element vuecomponent mycomponent mycomponent", "d": "1/2016"}, {"body": "think saying something far fundamental nt want go", "d": "1/2016"}, {"body": "ediamin actually codeofdavid actually ca nt go vue uses browser builtin html parser know posted issue", "d": "1/2016"}, {"body": "would great mentioned somewhere documentation", "d": "7/2016"}, {"body": "asumaran see vuejs template engine dombased uses native parser comes browser instead providing custom one benefits approach compared stringbased template engines also caveats templates individually valid pieces html", "d": "7/2016"}, {"body": "vue templates need valid html self closing tags xhtml syntax outdated never use see using tags selfclosing invalid though far know valid example even question link nt say never used able handle valid xhtml least wellformed xml actually quite important since still good serverside template engines tools rely xml xhtml xml actually help structure prepostprocessing depending overall build environment", "d": "12/2016"}, {"body": "harbulot fyi selfclosing tags works long nt use indom templates", "d": "12/2016"}, {"body": "fnlctrl templates converted render functions use selfclosing tags compiling vue single file components", "d": "5/2017"}, {"body": "alexsasharegan would like know answer question", "d": "7/2017"}, {"body": "works vueloader files", "d": "7/2017"}, {"body": "see thank suppose part confusion results use term string template documentation seems inconsistent following implies templates defined string literals however following defines string template singlefile component seems though number individuals confused perhaps docs could changed kind clear confusion", "d": "7/2017"}, {"body": "also work templatecompiler included full build vue compiles string templates render functions code used vueloader basically issue op browser parsing html vue chance read using inline templates", "d": "7/2017"}, {"body": "string templates probably defined kind like template defined dom could confuse people templates dom string templates easy get right", "d": "7/2017"}, {"body": "consider vue components foreign elements", "d": "8/2018"}, {"body": "\u4f60\u7684 initvm \u662f\u600e\u4e48\u5199\u7684\u4e3a\u4ec0\u4e48\u4e0d\u653e\u4e0a\u6765 results \u5efa\u8bae\u4ed4\u7ec6\u770b\u8fc7\u6587\u6863\u540e\u518d\u5f00 vuejsdiscussion", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "would awesome configurable via global option like js props", "d": "7/2015"}, {"body": "youngsteveo sure config necessary seems unlikely conflict party libs even use nondataprefixed syntax avoid", "d": "7/2015"}, {"body": "please make fiddle better explain problem best practice always using plain objects vue data data data behavior behavior belongs viewmodel", "d": "7/2015"}, {"body": "closing inactivity", "d": "7/2015"}, {"body": "return default value prop inside function well warning seems necessary case described solution would little verbose better", "d": "7/2015"}, {"body": "might good idea sometime really need function default value like format might confusing", "d": "7/2015"}, {"body": "unless use function factory except", "d": "7/2015"}, {"body": "quite obvious nt need make copy functions", "d": "7/2015"}, {"body": "great thanks advise", "d": "7/2015"}, {"body": "know vuejs must use factory function instance default props", "d": "9/2017"}, {"body": "jituanlin assume primitives always copied safely quite possible shallow copy objectarray would simply work somewhat better force explicit factory fn expect programmer would remember bit every time lest bugs code hell", "d": "10/2017"}, {"body": "fyiuramron freedom risk choose freedom", "d": "10/2017"}, {"body": "jituanlin get case general case agree still notice frameworks used reduce cognitive load streamline functionalities case arrayobject props similar function vue explicit factory method easily extended even replaced factorysingleton function completely external component regular utility function wish risk invalid forced copies objects etc also case little freedom gained forcing framework use underthehood factory cloningcopying function instead simply allowing programmer explicitly even say allowing provide factory instead forcing provide reference existing object actually increases freedom time reducing risk simplest case additional characters think cost managable chuckles", "d": "10/2017"}, {"body": "ended looking object looks like take note brackets", "d": "2/2018"}, {"body": "using solution proposed reusing component end prop undefined coincidence scaffold project realized", "d": "7/2018"}, {"body": "recommended compose vue templates using dynamic html strings therefore triple curlies treat content static html nt compile use partials instead", "d": "7/2015"}, {"body": "created pr address componentsdirectivesetc", "d": "7/2015"}, {"body": "different props props primarily used inside javascript expressions dash case awkward hand use component ids tag selectors nt see benefits using camelcase", "d": "7/2015"}, {"body": "valid reason line deduction might require better grasp framework used junior dev would would like able tell either always camelcase javascript always dashcase html always camelcase javascript except interfacing html new props naming convention kind throws got pr today fella given started naming get around remember camel dash seenoevil", "d": "7/2015"}, {"body": "directives elementdirectives components ones demand dashcase appear html tag names attributes never appear methods expressions props thing appear places hence syntax allowed nt like idea creating alternative syntax sake easier remember especially confusion came understanding framework works", "d": "7/2015"}, {"body": "sake consistency would put side effect making easier remember mainly people nt yet familiar framework would nt see reason apprehensive sure know unreasonably critical developers smile reasoning inconsistency solid requires one reason perhaps bit familiarityexperience using well else could know sure things never appear methods expressions think might worth change would lessen confusion nt yet well understand framework works understand would undesirable bog codebase api", "d": "7/2015"}, {"body": "reopening rethinking suggestion starts make sense addition remember past someone raised suggestion another reason object shorthands js import componenta componentsa import componentb componentsb export default components componenta componentb", "d": "7/2015"}, {"body": "would really nice camelcase could used everywhere code hyphens used html templates could even enforced fri jul pm evan notifications githubcom wrote rethinking suggestion starts make sense addition remember past someone raised suggestion another reason object shorthands import componenta componentsaimport componentb componentsb export default components componenta componentb reply email directly view github", "d": "7/2015"}, {"body": "cool pr relevant update", "d": "7/2015"}, {"body": "youngsteveo yeah would merge decide make change nice rebase latest though", "d": "7/2015"}, {"body": "rebased note tests currently broken latest dev new unit test still passing", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "closing think problem changed switched component including children using instead broadcast event getting children one needs", "d": "7/2015"}, {"body": "\u5192\u6ce1\u7684\u4e8b\u4ef6\u8981\u7528 dispatch emit", "d": "7/2015"}, {"body": "\u6211\u628aemit\u6539\u6210dispatch\u4e5f\u4e0d\u884c", "d": "7/2015"}, {"body": "\u7236\u7ec4\u4ef6\u7684 ready events \u9009\u9879", "d": "7/2015"}, {"body": "\u89e6\u53d1\u4f20\u9012\u7684 data \u6570\u636e \u7ed9\u7236\u7ea7\u7684", "d": "7/2015"}, {"body": "\u8c22\u8c22 \u641e\u5b9a\u4e86 require vueresource", "d": "7/2015"}, {"body": "\u4e0b\u9762\u7684\u4ee3\u7801 \u4e3a\u4ec0\u4e48\u8981\u89e6\u53d1 input \u4e8b\u4ef6\u5462 \u8fd9\u4e2a input dreampie", "d": "1/2017"}, {"body": "gongph", "d": "1/2017"}, {"body": "\u591a\u8c22\u4f60\u7684\u94fe\u63a5 fnlctrl", "d": "1/2017"}, {"body": "hi fnlctrl \u6211\u5728\u770b vladimir kharlampidi \u5927\u795e\u5c01\u88c5\u7684 html export default props active boolean methods ontabshow function e emit tab show e ontabhide function e emit tab hide e html export default methods onopen event consolelog button open emit button open event onclosed event consolelog button closed emit button closed event js import vue vue import vuewebpack srcvuewebpackjs vueuse vuewebpack const app new vue el app methods onopentest event alert hello html button", "d": "1/2017"}, {"body": "ps \u4e3b\u8981\u662f fnlctrl", "d": "1/2017"}, {"body": "docs could use improvement property debounce dom events debounces model updates since already using think terms reacting model changes rather reacting dom events use watcher watch change bound value please use vuejsdiscussion questions repo issue tracker bugs features", "d": "7/2015"}, {"body": "still case tried debounce nt apply", "d": "3/2017"}, {"body": "", "d": "3/2017"}, {"body": "sirlancelot thanks", "d": "3/2017"}, {"body": "basically happens observed problems use code b observed fine next code work expected", "d": "7/2015"}, {"body": "design two reasons data objects need persistable inspectable via also ignores prototype properties observe prototype property adding property getter object shadows prototype property longer dynamic prototype chain lookups prototype mutated change wo nt reflected observed object want property observed make instance property instead prototype property", "d": "7/2015"}, {"body": "hmm okay thought little bit looks like current design optimal make model methods prototype properties ignored vue use watched instance properties", "d": "7/2015"}, {"body": "whole idea props pass data attributes setting value", "d": "7/2015"}, {"body": "option setting default value props configuration", "d": "7/2015"}, {"body": "thelinuxlich take next way props attributes data default data data fetched external places proxied vue instance design", "d": "7/2015"}, {"body": "ok one explained yet purpose default value props", "d": "7/2015"}, {"body": "thelinuxlich user source luke default value props literally default value example next code later use component instance name tom use name bob please note values mapped property vue instance would point also props always overwrite data keys use source luke", "d": "7/2015"}, {"body": "described desired behavior cat missing name attribute default tom happening", "d": "7/2015"}, {"body": "working far tell provide example nt work", "d": "7/2015"}, {"body": "please make sure provide repro", "d": "7/2015"}, {"body": "encountered problem narrowed props data ca nt used together data wins think usable together", "d": "7/2015"}, {"body": "paulpflug upgrade latest version please work together nevermind fixed indeed bug", "d": "7/2015"}, {"body": "fixed via", "d": "7/2015"}, {"body": "nt", "d": "7/2015"}, {"body": "paulpflug latest dev", "d": "7/2015"}, {"body": "following example bit verbose unless data set parent pass prop set data prop default useless missing", "d": "6/2016"}, {"body": "hi guys works object type prop job property raw object without quantity property expecting set configuration nt nt work either edit works pass job object pass without property nt add default value", "d": "9/2016"}, {"body": "known issue fixed dev branch", "d": "7/2015"}, {"body": "ok thanks sorry nt find", "d": "7/2015"}, {"body": "use vcloak", "d": "7/2015"}, {"body": "problem due nt update file", "d": "7/2015"}, {"body": "please provide debuggable reproduction using jsfiddle similar service", "d": "7/2015"}, {"body": "sorry delay need add horas item datas list item", "d": "7/2015"}, {"body": "looks like using quite outofdate version vue please consider upgrade latest version", "d": "7/2015"}, {"body": "upgrade vuejs version vevents crash doc find vevents see vevents deprecated sorry", "d": "7/2015"}, {"body": "last functional version changes vevents crash munch clean", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "thank help", "d": "7/2015"}, {"body": "assigning component destroyed expect mon jul pm fenix notifications githubcom wrote minimal example var foo new vue el foo data bar ready function var destroy settimeout function mebar throws uncaught typeerror set property bar null often occurs switching components quickly wrapping code trycatch block good idea eat errors add complexity reply email directly view github", "d": "7/2015"}, {"body": "expect error suppressed inside vue internal least production environment vueconfigdebug false", "d": "7/2015"}, {"body": "basically javascript error nt believe vue suppress think would best check every http response component still alive", "d": "7/2015"}, {"body": "even instance destroyed still valid object assign whatever else bound props sideeffect objectdefineproperty evan said time even need think must always take care every ajax async callbacks", "d": "7/2015"}, {"body": "throwing error simply accessing property destroyed instance seems obtrusive preserved data reference destroyed instances however note mutate data already destroyed instance possible cause side effects instances happen observe object still recommended check instance still alive inside async callbacks", "d": "7/2015"}, {"body": "quickly thanks think newly introduced side effect mixed blessing sometimes expected", "d": "7/2015"}, {"body": "questions posted vuejsdiscussion function used create initialdefault state component called merging external data use lifecycle hooks access fully resolved data", "d": "7/2015"}, {"body": "looks like usage error part new dev add components removing instances string values resolved problem", "d": "7/2015"}, {"body": "think changing whole object watcher catches changes init property recommended wo nt happen yeah sometimes need fly", "d": "7/2015"}, {"body": "yes sometimes adding dynamic components rely main object say behaviour new introduced changelog reference assume bug", "d": "7/2015"}, {"body": "actually new ing rootlevel property always trigger full digest watchers watcher watching nonexistent property would caught dependencies initialization way notify unless full digest also strongly recommend ing root level properties fly", "d": "7/2015"}, {"body": "useful info evan nt know probably added somewhere docs", "d": "7/2015"}, {"body": "thanks looking evan maybe getting confused watching nonexisting property eg start watching changes myvalue add another root level value object become would expect watch exclusively triggered myvalue data changed seems wrong", "d": "7/2015"}, {"body": "yeah adding root level property triggers reevaluation watchers component normal watchers previous value new value nt change callback triggered deep watchers would trigger even value could object mutated maybe case digest could shallow ie calls callback value changed", "d": "7/2015"}, {"body": "shallow option sounds good deeper level watchers nt matter object mutated matter watched value changed nt mind default behaviour optional would keep always code", "d": "7/2015"}, {"body": "thanks evan", "d": "7/2015"}, {"body": "hmm seems actually happens even without using vue even consecutive javascript command asynchronousness issue unrelated vuejs", "d": "7/2015"}, {"body": "want probably directive vshow reworked fiddle allow animations vue way", "d": "7/2015"}, {"body": "issue using jquery sample new value nt get alerted change however add lazy option get alerted probable happens cause jquery plugin triggers change event input event", "d": "7/2015"}, {"body": "jefferey way using typeahead vue", "d": "7/2015"}, {"body": "chalkin questions like posted vuejsdiscussion also please make sure provide debuggable example using jsfiddle codepen jsbin", "d": "7/2015"}, {"body": "see release notes trascluded component child host component work", "d": "7/2015"}, {"body": "oevgeny actually read release notes nt help much note together directives transcluded components still compiled host parent scope host parent scope host parent scope unless misunderstanding content compiled scope parent example content compiled root scope parent", "d": "7/2015"}, {"body": "ah yes got", "d": "7/2015"}, {"body": "triggers listeners component hierarchy level achieve easiest way would use callback prop hook parent informed trigger within parent approach sibling components stay decoupled", "d": "7/2015"}, {"body": "sends event component descendants sends parent chain direct method notify sibling components nirazul suggested dance use standalone event emitter global event bus instead relying component structure event passing also please post questions like vuejsdiscussion issues directly related new features bugs", "d": "7/2015"}, {"body": "caused browsers default behavior whenever element appended new parent browser resets seems firefox browser persists value properly ideally browsers persist value guess ca nt change add ugly patches vue", "d": "7/2015"}, {"body": "set option want keep wrapping component tag also probably want set custom tag custom html tags default", "d": "7/2015"}, {"body": "awesome nt catch documentation nt default way make elements behave like", "d": "7/2015"}, {"body": "replace true behavior intuitive think terms components especially using single file components root element related styles contained component write template gets rendered set change default", "d": "7/2015"}, {"body": "using single file component maybe bit biased towards worked lot real web components say write template gets rendered nt true using child component explicitly creating tag dom wo nt get rendered replaced content always trade nevertheless right nt really way style whole element within single file component one would need something like css rule poylmer", "d": "7/2015"}, {"body": "nt use calls ready hook unless reason aware likely think problem", "d": "7/2015"}, {"body": "using test case", "d": "7/2015"}, {"body": "awesome fast", "d": "7/2015"}, {"body": "also along lines possible strict mode instead private assets available vue instance children descendants available vue instance children descendants forcing children state asset dependencies rather getting parent seems equal better decoupling", "d": "7/2015"}, {"body": "array syntax would also make obsolete current project using vue components declared root app people keep sticking things convenience strict mode would lovely", "d": "7/2015"}, {"body": "supported via note assets use field strict mode defaults false", "d": "7/2015"}, {"body": "great stuff", "d": "7/2015"}, {"body": "specify selector component registered array nt mentioned release notes", "d": "7/2015"}, {"body": "cheapsteak use field added release note", "d": "7/2015"}, {"body": "thanks", "d": "7/2015"}, {"body": "core core nt need vue core util design internal exposed advanced users plugin authors may find useful need specific helper either bring use actual generalpurpose util library like lodash", "d": "7/2015"}, {"body": "provide repro may transpiler using", "d": "7/2015"}, {"body": "wanted avoid making repo public made collaborator helps using gulp babel code question watch run", "d": "7/2015"}, {"body": "interestingly causing behavior mounting app instance string template option defaults contents template replaces tag causes chromespecific runtime error reason blocks rerendering user interaction happens code works properly firefox safari fixed simply giving app option added warning particular case", "d": "7/2015"}, {"body": "also fiy code works chrome canary bug present current stable version chrome", "d": "7/2015"}, {"body": "nice find thanks taking time find", "d": "7/2015"}, {"body": "seen problem well safari mobile desktop code looks like timeout occur reason happens occasionally around frustratingly also means ca nt reliably repeat bug see nothing weird console except mixedcontent warnings http https suppose culprit code works fine firefox chrome", "d": "11/2016"}, {"body": "also would match variable names used right mismatch makes code readability hard think html snakecase propa code camelcase propa consistency issue", "d": "7/2015"}, {"body": "html attributes caseinsensitive way differentiate vs passing prop template", "d": "7/2015"}, {"body": "html attributes caseinsensitive know weird nt like ugliness propa valuepropapropa even html agree nt change even though wish worked way making option would nice done current project maybe issue pr thu jul evan notifications githubcom wrote html attributes caseinsensitive way differentiate propa vs propa passing prop template reply email directly view github", "d": "7/2015"}, {"body": "gave another thought maybe implemented backwards compatibility vue could detect camel case props look hyphenated attributes html", "d": "7/2015"}, {"body": "converting camelcase props hyphenated attributes pretty standardaccepted convention", "d": "7/2015"}, {"body": "quick thanks fri jul evan notifications githubcom wrote closed via reply email directly view github", "d": "7/2015"}, {"body": "although html attributes caseinsensitive think still need distinguish letter case html doms vuejs seems willing support svg example left side one work google chrome archlinux vbind causes failure text binding leaves error", "d": "7/2016"}, {"body": "shall open new issue", "d": "7/2016"}, {"body": "simonmysun yes please open new one", "d": "7/2016"}, {"body": "ok", "d": "7/2016"}, {"body": "expected behavior add vue assumes async operations emitting event otherwise point using perform ajax request result always comes back asynchronously emitting event synchronously effect", "d": "7/2015"}, {"body": "hm know thanks lot", "d": "7/2015"}, {"body": "ran well problem dynamic component components async emit event rendered worked around using nexttick also issue things async cases sync others eg function gets data server clientside data yet available caches calls callback immediately next time", "d": "8/2015"}, {"body": "\u5f00 issue \u524d\u8bf7\u9605\u8bfb", "d": "7/2015"}, {"body": "please move vuejsdiscussion leave main repo featurebug related issues sounds like need array data structure representing steps operations would simply pushing removing array", "d": "7/2015"}, {"body": "sure mean exactly like", "d": "7/2015"}, {"body": "let move questions like vuejsdiscussion thanks", "d": "7/2015"}, {"body": "different", "d": "7/2015"}, {"body": "javascript assume comp define vendor lib vuecomponent comp template name data function return name hal following block code ca nt really work try change dataname comp app global component settings hope vuecomponent comp defaults like vuecomponent comp optionsmixins data function return name halhal new vue el wrap", "d": "7/2015"}, {"body": "extending allows one base component many extended sub classes different use cases mutate original lose flexibility together hand nt see benefits mutating base class except saving keystrokes anyway really want", "d": "7/2015"}, {"body": "\u4f7f\u7528vuecomponent comp optionsdata javascript var getdata vuecomponent comp optionsdata vuecomponent comp optionsdata function var data getdatacall var name halhal var key data key key return data", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "ok thank", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "correct intended behavior read", "d": "7/2015"}, {"body": "ah ok thanks anyone looking future simple solution add component tag", "d": "7/2015"}, {"body": "arrays use instead", "d": "7/2015"}, {"body": "hi tried thisroster set thisnewmemberid thisnewmemberrole still problem id creates empties array adds", "d": "7/2015"}, {"body": "seems wrong try need props vrepeat bind data child iterance", "d": "6/2015"}, {"body": "miljanaleksic yes work work sake consistancy work repeat identifier commonstandard way loop thing", "d": "6/2015"}, {"body": "read", "d": "6/2015"}, {"body": "please read example nt work component expression prop compiled parent scope case prop needed simply access inside component", "d": "6/2015"}, {"body": "use communicate data childparent components website documentation communicating instances bad practice separate elements thats employ modularity helps simplify", "d": "6/2015"}, {"body": "use twoway props also please use vuejsdiscussions questions", "d": "6/2015"}, {"body": "found solution vuenexttick", "d": "6/2015"}, {"body": "yep computed properties directives considered internal watchers always get notified user watchers closing opened issue docs repo", "d": "6/2015"}, {"body": "see use tag insert content", "d": "6/2015"}, {"body": "sorry nt see den documentation working thanks", "d": "6/2015"}, {"body": "thanks detailed report really appreciated", "d": "6/2015"}, {"body": "getting called", "d": "6/2015"}, {"body": "weird put right shows page gets loaded", "d": "6/2015"}, {"body": "note setting value programmatically either via trigger event update model directly without relying hidden inputs closing vue bug feel free continue discussion though", "d": "6/2015"}, {"body": "oh make sense thanks way recommend way set model directly via jquery function thanks", "d": "6/2015"}, {"body": "setting model nt via jquery function", "d": "6/2015"}, {"body": "well thing autocomplete function chose member depending chose id set use jquery plugin autocomplete learned vuejs set", "d": "6/2015"}, {"body": "initialize autocomplete lifecycle hooks component needs reference component instance good practice also teardown autocomplete component hook", "d": "6/2015"}, {"body": "course thanks lot", "d": "6/2015"}, {"body": "update looks like breaking change might early", "d": "6/2015"}, {"body": "using filters", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "note vue prop system semantics aim map strictly html attributes semantics agree prop expects boolean type makes sense map absence prop nt like making map even give bogus value boolean attribute set true eg spec design imo quite confusing literal nt think necessary deprecate simply spec nt allow", "d": "6/2015"}, {"body": "disagree change think create confusion prop attribute like think prop always needs value instead prefer say template partially rendered server comes would nt want casted boolean would like restrict prop boolean purpose prop assertion also vue directive params used without value eg confusing", "d": "6/2015"}, {"body": "yeah maybe deprecation bit extreme suggestion within suggestion notice terminating question mark azamatsharapov precisely initially proposed prop somethingexceptprop trigger warning map undefined consideration realizing browsers nt care value much going backtrack say presence attribute always bind true except using old syntax value false describe legit use case want single expression truefalsestring opposed using exception mechanism explicit exceptions node err value pair rust option", "d": "6/2015"}, {"body": "zacreature sorry sure understand mean describe legit use case want single expression truefalsestring opposed using exception mechanism said template may partially rendered server meant something like returns error want error casted true course prevent error simple example everybody expert may make mistake mainly mentioned confusion introduced proposed changes", "d": "6/2015"}, {"body": "legit case meant piece code average programmer would write particular purpose maybe optimist like believe average programmer sense returning error instead using language built error handling mechanism believe php two nt agree newbies favor tolerating mistakes eventually designing functions behave way get trouble see example modern languages builtin error handling mechanisms reason things fail good code always fail safe technically errors propagated crossing language barriers php html js propagation needs explicit framework unless ask since realm confusion sooner later someone expect regular html components work truefalse thing way expected vue handle boolean attributes per html spec would result checkbox always checked even returns error proposal attempts mitigate half sources confusion deprecation would long run remove confusion vue components would behave way html components", "d": "6/2015"}, {"body": "would want vuejs strictly follow html spec prop assertion must support casting right still nt agree opinion let see people maintainer framework say thank detailed explanation", "d": "6/2015"}, {"body": "modern languages builtin error handling mechanisms yes many argue using exceptions unless absolutely needed trycatch slow operation also lose much context caused error many including prefer deal errors happen mon jun azamat notifications githubcom wrote would want vuejs props strictly follow html spec prop assertion must support casting right still nt agree opinion let see people maintainer framework say thank detailed explanation reply email directly view github", "d": "6/2015"}, {"body": "markhahn intentionally used error handling opposed exception handling effort avoid confusion obviously failed point generally better send errors separate channel opposed returning low memory environments c functions manipulate data pointers sent arguments return integer status code nodejs continuations expect called rust haskell scala use course lots languages good old fashioned propagating exceptions big fan agree downsides even situation mandates errors sent results checking return code special values equivalent handling errors one expect backendagnostic mvvmframework", "d": "6/2015"}, {"body": "evan changed looked changes looks like missing prop boolean assertion casted false", "d": "6/2015"}, {"body": "azamatsharapov yes affect write code falsy anyway simply longer warns prop expected boolean missing assuming prop assertion html", "d": "6/2015"}, {"body": "hmm thought would useful case prop value prop nt passed could logical imo false false true true undefined missing yeah big deal", "d": "6/2015"}, {"body": "falsy anyway ca nt see use case differentiating boolean property vs one want make sure provided still add", "d": "6/2015"}, {"body": "meant kind case yes solves nt realize thanks", "d": "6/2015"}, {"body": "someone needs receive undefined boolean prop multitype prop include boolean simply set default value undefined see jsfiddle comparison results various boolean props scenarios", "d": "1/2018"}, {"body": "yeah documented somewhere preprocessed array array filters work object well", "d": "6/2015"}, {"body": "hi regarding could nt syntax force application filter object like see", "d": "7/2015"}, {"body": "vue extends observed objects ensure change detection help therefore part vue responsibility", "d": "6/2015"}, {"body": "right way", "d": "6/2015"}, {"body": "use", "d": "6/2015"}, {"body": "share variables trough componentes new vue ready function access socket variable component nt want repeat code", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "nt work print console object root show io object right use show undefined", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "hmm better like current props syntax first array object array string identical format array second format keyvalue pair nt know value means type configuration target property rather configuration like validate require although type configuration might used widely doubt bit confusing", "d": "6/2015"}, {"body": "key", "d": "6/2015"}, {"body": "butsalt talking consistency attribute keyvalue map arrays string work well excellent readability want enumerate list properties also want add options reading list becomes difficult imo thing shortcut designed condense stuff like easy read", "d": "6/2015"}, {"body": "yes keyvalue map style consistent options used array syntax mostly extended original array processing logic landed without breaking backcompat", "d": "6/2015"}, {"body": "list items async transitions", "d": "6/2015"}, {"body": "oh u r right actually use hooks", "d": "6/2015"}, {"body": "transitions gets bit tricky need nested nextticks transitions buffered another tick reflow happens think make less ugly", "d": "6/2015"}, {"body": "well tried nested nextticks work back", "d": "7/2015"}, {"body": "huxpro \u9ebb\u70e6\u95ee\u4e0b \u7684\u65f6\u95f4\u95f4\u9694 \u662f\u600e\u4e48 \u786e\u5b9a\u7684 \u8fd8\u662f\u662f\u4e00\u4e2a\u56fa\u5b9a\u503c \u8c22\u8c22", "d": "7/2016"}, {"body": "hucy transitionduration css\u91cc\u9762\u81ea\u5df1\u5b9a\u4e49\u7684 \u4e0d\u8fc7\u7528settimeout fn transitionduration \u7684\u65b9\u5f0f\u4e5f\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u6b21\u90fd\u80fd\u6eda\u52a8 \u6211\u4e00\u822cready\u65f6\u5019\u5b9e\u4f8b\u5316iscroll \u7528watch\u6765\u76d1\u542c\u91cc\u9762data\u7684\u53d8\u5316 \u6bcf\u6b21\u53d8\u5316\u90fd\u6267\u884crefresh", "d": "7/2016"}, {"body": "perseverancez \u597d\u50cf\u662f\u6ca1\u6709\u4e00\u4e2a\u94a9\u5b50\u51fd\u6570\u53ef\u4ee5\u660e\u786e\u6307\u51fadom\u7ed3\u6784\u662f\u5426\u5b8c\u5168\u63d2\u5165 \u5728\u6d4f\u89c8\u5668\u6e32\u67d3\u5b8c\u6bd5 \u8fd9\u5bfc\u81f4\u65e0\u6cd5\u786e\u5b9a\u7684\u65f6\u673a \u6211\u9047\u5230\u95ee\u9898\u662f \u5728\u4f7f\u7528\u5207\u6362\u7ec4\u4ef6\u65f6\u5e0c\u671b\u53ef\u4ee5\u4fdd\u5b58\u4e4b\u524d\u4e00\u4e2a\u9875\u9762\u7684\u6d4f\u89c8\u4f4d\u7f6e \u867d\u7136\u6709\u914d\u7f6e\u4f46\u662f\u6709\u65f6\u5019\u4e0d\u594f\u6548 \u4e8e\u662f\u6211\u60f3\u5728dom\u7ed3\u6784\u6e32\u67d3\u5b8c\u6bd5\u7684\u65f6\u5019\u4e4b\u524d\u7684\u4fdd\u5b58\u7684\u6eda\u52a8\u9ad8\u5ea6 \u5c31\u9047\u5230\u95ee\u9898\u4e86 \u6211\u5c1d\u8bd5\u4f7f\u7528 \u65e0\u8bba\u5728\u8fd8\u662f\u8bbe\u7f6e\u503c \u7531\u4e8edom\u7ed3\u6784\u672a\u6e32\u67d3\u5b8c\u6bd5 \u5b83\u5728\u6267\u884c\u56de\u8c03\u7684\u540e\u8fd8\u662f\u4f1a\u6eda\u52a8 \u6211\u4e5f\u5c1d\u8bd5\u4e86\u76d1\u542c\u4e8b\u4ef6\u8bbe\u7f6e \u8fd9\u5bfc\u81f4\u7684\u95ee\u9898\u662f\u9875\u9762\u4f1a\u4e0d\u505c\u4e0a\u4e0b\u6eda\u52a8 \u800c\u4e14\u4ec0\u4e48\u65f6\u5019\u53d6\u6d88\u4e8b\u4ef6\u76d1\u542c\u4e5f\u6210\u4e86\u4e00\u4e2a\u95ee\u9898 \u6211\u7684\u89e3\u51b3\u65b9\u6cd5\u662fsettimeout fn maxtime \u8bbe\u7f6e\u4e00\u4e2a\u8db3\u591f\u957f\u7684\u5b9a\u65f6\u5668 \u7b49dom\u6e32\u67d3\u5b8c\u6bd5\u540e \u518d\u53bb\u8bbe\u7f6e\u7684\u503c \u6216\u8005\u76f4\u63a5 \u4e0d\u77e5\u9053\u6211\u7684\u7406\u89e3\u5bf9\u4e0d\u5bf9 \u521a\u7528vue\u53ef\u80fd\u6709\u4e9b\u5730\u65b9\u7406\u89e3\u4e0d\u662f\u5f88\u5bf9\u8fd8\u8bf7\u591a\u591a\u6307\u6559 \u8c22\u8c22\u4f60\u7684\u56de\u590d", "d": "7/2016"}, {"body": "hucy \u81ea\u5df1\u8bbe\u7f6e\u8fc7\u5ea6\u7279\u6548\u7684\u65f6\u95f4 \u5e76\u8bbe\u7f6etransitionmode outin \u5728ready\u4e2d\u5b9e\u4f8b\u5316iscroll\u5e76scrollto\u76f8\u5bf9\u5e94\u7684\u4f4d\u7f6e \u6211\u8bd5\u4e86\u4e0b\u662f\u53ef\u4ee5\u6eda\u52a8\u7684 \u624b\u673a\u4e0a\u6ca1\u6d4b \u6211\u628a\u4ee3\u7801\u8d34\u51fa\u6765\u770b\u770b\u80fd\u4e0d\u80fd\u5bf9\u4f60\u6709\u5e2e\u52a9 js ready function thisscroll new iscroll jsscroll \u5b9e\u4f8b\u5316 thisscroll amp amp thisscrollscrollto \u6eda watch list function \u76d1\u542c\u6eda\u52a8\u533a\u57df\u6570\u636e\u7684\u53d8\u5316 nexttick function thisscroll amp amp thisscrollrefresh iscol function thisscroll amp amp thisscrollrefresh html css", "d": "7/2016"}, {"body": "use vuejsdiscussion gitter chat ask questions also check contributing guide", "d": "6/2015"}, {"body": "looks like webcomponentsjs bug mount directly instead everything works firefox returns wrapped object wrong attributes array", "d": "6/2015"}, {"body": "thanks suggestion landed although difference", "d": "6/2015"}, {"body": "cool thank much taylorzane", "d": "6/2015"}, {"body": "props data return become default parent nt provide although agree default directly seems better", "d": "6/2015"}, {"body": "usually key defined observed defined default value without also defining breaks assumption", "d": "6/2015"}, {"body": "without also defining data breaks assumption nt everything props independent data whether default thu jun pm stephen young notifications githubcom wrote usually key defined data observed defined props default value without also defining data breaks assumption reply email directly view github", "d": "6/2015"}, {"body": "love see prop property set natural assume default value provided nt necessarily needs come parent", "d": "6/2015"}, {"body": "markhahn hmm yeah maybe wrong", "d": "6/2015"}, {"body": "closed via", "d": "6/2015"}, {"body": "thanks fast catch detailed repro fixed release soon", "d": "6/2015"}, {"body": "yeah thanks", "d": "6/2015"}, {"body": "tried", "d": "6/2015"}, {"body": "please use questions nt codebase use approach nirazul mentioned use external utility lib function eg underscore lodash type functionality fall within vue scope", "d": "6/2015"}, {"body": "sorry try options afraid use nirazul approach may working browsers thank", "d": "6/2015"}, {"body": "fselias actually quite safe side", "d": "6/2015"}, {"body": "except stringify index nulls destination object", "d": "5/2017"}, {"body": "var obj var copy objectassign obj consolelog copy", "d": "9/2017"}, {"body": "rikardocorp shallow copy objects within obj copied references", "d": "9/2017"}, {"body": "try recursive functions nt know compares performance javascript var f g var c e var b new object copy reference var b consolelog true alter one object alters hence copy reference consolelog true", "d": "1/2018"}, {"body": "trying several options function worked thanks avijit gupta function copy var output v key output arrayisarray key v key output key typeof v object copy v v return output following works var name name name var b copy var c copy b name consolelog c name", "d": "5/2018"}, {"body": "sharing use case need assign callback attribute object noticed jsonparsestringify approach clone callback functions used lodash clone end", "d": "5/2018"}, {"body": "issue tracker help platform please go stackoverflow receiving help code think found bug please make sure read contribution guidelines first describe bug experiencing", "d": "6/2015"}, {"body": "vue documentation example handle array input checkboxes solution tried work correctly already posted issue different place nobody give solution", "d": "6/2015"}, {"body": "suggested please use questions example anyway", "d": "6/2015"}, {"body": "thank much apologies posting wrong section", "d": "6/2015"}, {"body": "oh submit discussion sorry", "d": "6/2015"}, {"body": "change variable name nt really see would break things maybe update minifier use uglifyjs instead", "d": "6/2015"}, {"body": "vuerouter", "d": "6/2015"}, {"body": "resolve vue", "d": "6/2015"}, {"body": "\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u52a0\u4e2a \u8bbe\u6210", "d": "6/2015"}, {"body": "vshow vuecomponent mgslider page \u9875\u9762beforecomplete", "d": "6/2015"}, {"body": "loadview loadview \u4f20\u8fdb\u53bb\u7684\u4e00\u4e2a defer", "d": "6/2015"}, {"body": "\u8fd9\u4e2a\u5c31\u8ddf vuerouter", "d": "6/2015"}, {"body": "loadview", "d": "6/2015"}, {"body": "\u5f53\u7136\u5f97\u662f\u5f02\u6b65\u7684\u5566", "d": "6/2015"}, {"body": "\u4f60 readmemd bug", "d": "6/2015"}, {"body": "\u770b", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "point extension subclass inherit everything superclass looks like case use mixins instead", "d": "6/2015"}, {"body": "also rendering works take attribute block", "d": "6/2015"}, {"body": "played around little seems like event run current tick picked updated previous fiddle illustrate seems like bug think support synchronous eventfiring", "d": "6/2015"}, {"body": "read link seems like solve problem going close issue apologies spam hope helps someone else", "d": "6/2015"}, {"body": "dhruvio provide example code working nexttick struggling article helpful edit minutes passed realized nt using set", "d": "8/2015"}, {"body": "hey breland waitfor listens events end current event loop iteration run logic inside vue instance follows say current event loop listener wo nt pick event waitfor wo nt listening yet wrote phone apologies formatting weird hope answers question nt understand recommend googling processnexttick works vue nexttick method analogous cheers aug tyler breland notifications githubcom wrote dhruvio provide example code working nexttick struggling article helpful reply email directly view github", "d": "8/2015"}, {"body": "listener simply listens native change event fire blur input work type need provide jsfiddle reproduction finally want react data changes nt rely dom listeners better way use underlying data directly", "d": "6/2015"}, {"body": "saying compiling template two versions vue nt sound like would work properly two versions vue probably better clearly divide areas managed eg use version compile element use version b compile element compiling piece dom two versions vue sounds like really bad idea", "d": "6/2015"}, {"body": "also like directive nice way turn html element component dynamically basically like custom element spec element turned custom element using attribute vue html item component pseudo code template lt div gt item lt div gt need order get result dynamic components work tag attribute like vue html item component pseudo code replace true needed remove lt component gt template lt div gt item lt div gt directive makes dynamics components easier apply existing elements keep semantics html good semantics wrong semantics", "d": "6/2015"}, {"body": "sure understand correctly would nt replace option solve problem like dynamically attach component different contexts like", "d": "6/2015"}, {"body": "steffans plan default always include correct semantic element use component template leave case raw template looks like html rendered result would semantically correct", "d": "6/2015"}, {"body": "recent commit replace option default probably combat exact problem thing note less obvious actually without digging template using component nt seem like huge problem knowing html element type styling etc useful", "d": "6/2015"}, {"body": "example tag would need added component template html item component pseudo code template lt li gt lt div gt item lt div gt lt li gt actually liked directive behavior exactly using custom elements nt replace element extendenhance way replacement optional needed times web component vue component default replace could somehow confusing element always part template html auto replace true implicit template lt button gt mega button lt button gt recreate button element vue directive would actually never use new syntax directive looks nicer html works maybe nicer", "d": "6/2015"}, {"body": "disagree proposal adds need know exactly element type megabutton targeting good", "d": "6/2015"}, {"body": "steffans nt use", "d": "6/2015"}, {"body": "post default true recommended usage would always include root element component template use custom element component whenever possible use dynamic components use table elements guess relaxing restriction bit nt hurt strong preference style", "d": "6/2015"}, {"body": "yes would first choice well previous comments mainly using dynamic component case applying directive existing element seems easier creating generic tag relaxed", "d": "6/2015"}, {"body": "keeping configurable prefixed around trick purposes appreciative smile", "d": "6/2015"}, {"body": "vote shorter vcomponent works tables provide flexibility replacing", "d": "6/2015"}, {"body": "fail see advantage know use megabutton component need know requires button tag p", "d": "6/2015"}, {"body": "thelinuxlich normally custom element used whenever possible however using directive actually intended apply component certain tag like way component could work multiple tags always considered replace option disabled current would replaced anyway wink", "d": "6/2015"}, {"body": "relaxed limitation since still useful tablesvg elements cases provide component different element type functionality changing could get confusing time breaking change", "d": "6/2015"}, {"body": "loss attribute means vuejs longer feasiable sites requiring seo words longer create progressively enhanced site directives good enough ca nt use events methods properly nvm saw", "d": "11/2015"}, {"body": "airtonix equivalent vcomponent attribute also sure anything seo final rendered markup custom elements replaced root element template", "d": "11/2015"}, {"body": "seems gone anyway simulate previously possible vue within single page even different versions nt seem would possible longer cms mine using vuejs ui would force web site hosted within also upgrade version vuejs avoidable used thanks", "d": "11/2015"}, {"body": "commit", "d": "11/2015"}, {"body": "bigbluehat two copies vue compiling piece dom unfortunately longer possible adds lot extra complexity vue compiler marginal benefits however use one vue completely skip sub dom tree compiled using another vue copy", "d": "11/2015"}, {"body": "hrm sure would work case content items within page blueink components cms update dynamically change inject buttons settings editing deleting well enabling drag drop around page web site also needs access dom trees content smile chew see options remain thanks idea though", "d": "11/2015"}, {"body": "relevant seo content page constructed response server browser google index content thanks pointing directive combined still able take standard tags decorate attributes looking framework full blown clientside applications simple progressive enhancement also adopting atomic design able put parts together childparent relationship important react nt attributes tags destroys content angular long time adequate personally strategy work team others find difficult grok angular backbone still relies underscore knockout vuejs moment provides team something simple write code enough builtins potentially would nt need write js get simple concept flows working thanks etc essential part vuejs write components attributes destroy original markup", "d": "11/2015"}, {"body": "airtonix may also interested feature yet", "d": "11/2015"}, {"body": "please use vuejsdiscussions repo questions code looks fine although nt post template component please make jsfiddle show problem", "d": "6/2015"}, {"body": "thanks fixed", "d": "6/2015"}, {"body": "ok found replace answer expected directive functionality", "d": "6/2015"}, {"body": "btw directive could solve table issue", "d": "6/2015"}, {"body": "oops thiselsetattributes proper method", "d": "6/2015"}, {"body": "always write custom sort filter make sure call copy array", "d": "6/2015"}, {"body": "solve problem", "d": "11/2015"}, {"body": "", "d": "11/2015"}, {"body": "problem solved putting images public folder put images public folder template sure use vbind src template data flowers name sunflower melody cost qty null img", "d": "9/2018"}, {"body": "hmmm thing happened last issue deleting code rewriting memory everything works problem development environment try harder submitting issues sorry trouble", "d": "6/2015"}, {"body": "known issue fixed", "d": "6/2015"}, {"body": "nt think understanding mean", "d": "6/2015"}, {"body": "closing inactivity feel free reopen could provide jsfiddle demonstrating issue clearly", "d": "6/2015"}, {"body": "try computed property view synced property also check", "d": "6/2015"}, {"body": "hi pretty similar situation got list consider lastmsgdate c javascript lastmsgdate function c return moment cmessages cmessageslength ts fromnow nt think computed property answer since property timestamp message nt change", "d": "2/2017"}, {"body": "stepbeta make var update", "d": "2/2017"}, {"body": "stepbeta case u must iterate set every message individually better option make separated component like", "d": "2/2017"}, {"body": "sure understand list conversations list messages component showing list conversations one show id timestamp last message conversation code wrote previous message would put var", "d": "2/2017"}, {"body": "provide context curious know use case would need recursively update watcher times", "d": "6/2015"}, {"body": "editor arbitrary json data widgets components responsible various subsections json data widgets appear editor template many times widget responsible subsection json via key defines json looks like within subsection creates manages ui widget updates editor overall document json realtime via watcher tried twoway binding nt work well bootstrap scenario ie json document blank widget needs initialize subsection problem coming initialization sure exact path execution basically editor template compiled widget initializing subsection json overall json document managed editor overall json document one getting many updates one widget widget initializes finds needs initialize subsection json causes update editor document json wrestling trying come elegant way implement vue suggestions welcome", "d": "6/2015"}, {"body": "saying toplevel json object passing sub trees child components child component modifies sub tree gets initialization", "d": "6/2015"}, {"body": "yep put way makes think work around registering watch nexttick", "d": "6/2015"}, {"body": "nt quite understand component needs mutate sub tree gets though give example initialization", "d": "6/2015"}, {"body": "instance widget manages address city etc nt want editor know understand create proper default value widget start blank ie overall document want widget initialize subsection sane default let bindings inputs ui take", "d": "6/2015"}, {"body": "guess make number configurable lifting max update count make app work intended", "d": "6/2015"}, {"body": "yes templates max complexity tens widgets would probably set around", "d": "6/2015"}, {"body": "thanks btw really appreciate admire work vue", "d": "6/2015"}, {"body": "welcome", "d": "6/2015"}, {"body": "please make sure upgrade provide jsfiddle reproduction issue", "d": "6/2015"}, {"body": "fiddle found click moreless link first two times works third time throws error mentioned", "d": "6/2015"}, {"body": "use please read issue reporting guidelines opening issue thanks", "d": "6/2015"}, {"body": "fixed", "d": "6/2015"}, {"body": "thanks lot", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "\u8fd9\u91cc\u9700\u8981\u7528 \u53e6\u5916\u4ee5\u540e\u7528", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "realized easy way showing template compiled", "d": "6/2015"}, {"body": "simply removes instance dom reinserts later likely reset scrolling position behavior different", "d": "6/2015"}, {"body": "behavior different nt implement upgraded guess save position leave page restore return nt big deal thinking maybe way use keepalive changed maybe make plugin mon jun evan notifications githubcom wrote keepalive simply removes instance dom reinserts later likely reset scrolling position behavior different reply email directly view github", "d": "6/2015"}, {"body": "yeah common issue spas nt think could potentially offer option behavior", "d": "6/2015"}, {"body": "application need router jun pm evan notifications githubcom wrote yeah common issue spas nt think keepalive vuerouter could potentially offer option behavior reply email directly view github", "d": "6/2015"}, {"body": "think domfragment state preservation plugin alternative directive keepalive replace using name new directive something different directive pr core code enhance keepalive nt think performance problem since happens component changes code set scroll position fast", "d": "6/2015"}, {"body": "code works fast notice functionality placed scrolling element ca nt figure add scrollable elements entire page replacing keepalive option guessing proper way add feature make new directive needs added scrollable element although work developer hoped give control choose elements fix need develop new directive maybe called vkeepscroll adds functionality element assume put two handler functions global code nt studied write directive template methods onscroll e gt ele etarget elesetattribute datavuescrllft elescrollleft elesetattribute datavuescrltop elescrolltop attached gt ele elqueryselectorall datavuescrllft elescrollleft elegetattribute datavuescrllft elescrolltop elegetattribute datavuescrltop let know posting much detail thought maybe someone would let know heading wrong path", "d": "6/2015"}, {"body": "custom directives pretty easy", "d": "6/2015"}, {"body": "mean reevaluated seems thing different warning", "d": "6/2015"}, {"body": "wrapper prevents signedin content appearing consider following javascript initial load application state rootdata profile null user authenticates ui updates reflect rootprofile username foobar image user signs ui updates reflect rootprofile null vue warn error evaluating expression profileimage warning implies something done incorrectly approach replacing logged user object incorrect warning misleading thank help", "d": "6/2015"}, {"body": "due internal changes relating order prop changes synced practice affect app behaves safely ignore warnings next release restore old behavior longer throw warnings case", "d": "6/2015"}, {"body": "well tried patch method immediately ran situation since passing value needed directive expression prop instead using constant directive expression proper value directive expression evaluated ie guess really asking two way dynamic binding sigh case curious use case need create user interfaces json data hardcoded values template bind inputs model based runtime information", "d": "6/2015"}, {"body": "think misread code sample mustaches supported nt recommend usage either reason appearance interpolation tags explicitly indicates whole thing evaluated string mixing interpolation inside expressions makes difficult read understand whether something string expression meant following usage supported", "d": "6/2015"}, {"body": "completely agree drawbacks struggling find good way deal dynamic binding issues tested jsfiddle worked safe top level attribute binding", "d": "6/2015"}, {"body": "yes fine", "d": "6/2015"}, {"body": "great think gives need solve", "d": "6/2015"}, {"body": "put outer component template use custom element replaced one additional note following line needs changed empty textnode want make sure accessing first element child fixed example", "d": "6/2015"}, {"body": "wow great many thanks best", "d": "6/2015"}, {"body": "want prevent called twice using flag variable", "d": "6/2015"}, {"body": "good catch implement like anyone looks working solution use one vuetransition fade leave function el done var isdone false", "d": "6/2015"}, {"body": "\u5347\u7ea7\u5230 content \u786e\u5b9e\u6709", "d": "6/2015"}, {"body": "\u5347\u7ea7\u5230\u4e86", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "\u66f4\u65b0\u5230\u6700\u65b0\u7684 dev \u770b\u4e0b mon jun pm \u6728\u98ce notifications githubcom wrote reply email directly view github", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "getting property like works nt equal msg since alias", "d": "6/2015"}, {"body": "vrepeat identifier instead passing repeated object component pass prop instead expected behavior however noted actually bug code working without attribute content inside compiled parent content discarded component nt template", "d": "6/2015"}, {"body": "computed properties behaving expected mentioned bug fixed", "d": "6/2015"}, {"body": "thanks reporting issue fix asap", "d": "6/2015"}, {"body": "thanks works great", "d": "6/2015"}, {"body": "sorry vue never work way polyfill", "d": "6/2015"}, {"body": "use troubles documentfragment part", "d": "6/2015"}, {"body": "none polyfills make work nondom objects limitation browser even get past fragment error still wo nt work properly", "d": "6/2015"}, {"body": "cry", "d": "6/2015"}, {"body": "like communication parent child explicit passing callback may mean check presence callback makes possible side effects child component actions explicit look callback passed parent problem events although decoupled idea many listeners could triggered side effects emit something hand like reduce amount apis serve similar purposes feel fit use case better check implemented past commits use custom directive", "d": "6/2015"}, {"body": "official release fact one time one way syntax uses different syntax", "d": "6/2015"}, {"body": "use splice method right key mlist datamdata mlist datamdata key middatamid mlist datamdata delete key mlist datamdatasplice consolelog jsonstringify mlist datamdata break", "d": "6/2015"}, {"body": "work objects need use arrays", "d": "6/2015"}, {"body": "yes correct mentioned discarded solution read care note condition classes would performancewise perform condition check instead twice", "d": "6/2015"}, {"body": "yes sorry nt paying attention enough \u0433 \u0447 j bruni wrote yes correct mentioned discarded solution read care note condition classes haserror field would performancewise perform condition check instead twice reply email directly view github", "d": "6/2015"}, {"body": "cases going cause performance issues unless method takes must serious problem implemented said directly pass object returned computed property inside computed property call", "d": "6/2015"}, {"body": "work tried also please read issue guidelines opening one questions opened vuejsdiscussion", "d": "6/2015"}, {"body": "thank much worked sorry posting discussion great library getting hands wet", "d": "6/2015"}, {"body": "nt wan na upset anyone think worth reading issue reporting guidelines following", "d": "6/2015"}, {"body": "sorry forum somewhere general discussion", "d": "6/2015"}, {"body": "post non featurebug related issues", "d": "6/2015"}, {"body": "btw changes far documented release notes officially later week might breakage since still early project think switch", "d": "6/2015"}, {"body": "thanks suggestion home page", "d": "6/2015"}, {"body": "could give example necessary mustache tags directive values contain one expressionstatement", "d": "6/2015"}, {"body": "large constant particular case documentation purposes value best kept model template", "d": "6/2015"}, {"body": "thanks", "d": "6/2015"}, {"body": "love see happen perhaps something like template might look like var mycomponent new vue data function foo name bar name bat exports function return thisfoo template something want support think possible custom directive", "d": "6/2015"}, {"body": "mechanism restricts parent children context signatures situation eg menu sub menu good way communicate parent children", "d": "6/2015"}, {"body": "latest branch changes related issue transcluded components considered children host component means following case two use event system communicate content still properly compiled parent scope note issue specifically transcluded components host", "d": "6/2015"}, {"body": "content still properly compiled parent scope currently would compiled scope changing next release misunderstand", "d": "6/2015"}, {"body": "azamatsharapov even current version compiled parent scope scope template belongs", "d": "6/2015"}, {"body": "oh course thinking instead get", "d": "6/2015"}, {"body": "nt think good idea opens possible typing errors eg missing comma adds internal overhead converting array get purely stylistic preference", "d": "6/2015"}, {"body": "opens possible typing errors many fewer current typing requirement adds internal overhead converting array kind conversion fast maybe usecs vue compile time nt hotspot means get purely stylistic preference nt precedence done elsewhere vue personally nt see need current array syntax tue jun evan notifications githubcom wrote nt think good idea opens possible typing errors eg missing comma adds internal overhead converting array get purely stylistic preference reply email directly view github", "d": "6/2015"}, {"body": "see typing errors latter would throw former would result unknown run time behavior", "d": "6/2015"}, {"body": "understand also ca nt find similar examples use coffeescript teacup coffeescriptbased template noisy things like mustaches really stand typical vue code looks like note looks compared rest vuecomponent showlist paramattributes curshowidx allshows template render gt div showlist gt div showlistinner gt div show vrepeat show allshows vtext showtitle vclass selected showshowidx curshowidx way plugin current option maybe different name converted like could multiple things like call plugin", "d": "6/2015"}, {"body": "possible implement mixin", "d": "6/2015"}, {"body": "looks like easy solution lucky run used vue expandability impressive impressive vue code small clean begin notice used instead planned change like ps atom editor currently trying decide recommended framework arguing use vue time", "d": "6/2015"}, {"body": "yes renamed checkout upcoming changes beta rc release notes", "d": "6/2015"}, {"body": "markhahn unfortunately realized mixin example would work properly data initialization process relies initialize props happens hook however think easier write small helper function similar using preprocess template", "d": "6/2015"}, {"body": "thanks thinking educational greedy want exactly way grown appreciate vue complaints sat jun evan notifications githubcom wrote markhahn unfortunately realized mixin example would work properly data initialization process relies optionsprops initialize props happens created hook however think easier write small helper function similar using render preprocess template vuecomponent showlist props parseprops curshowidx allshows reply email directly view github", "d": "6/2015"}, {"body": "wow reactjslike looks pretty good prefer", "d": "6/2015"}, {"body": "interesting could give real world use looks cool ca nt think way using", "d": "6/2015"}, {"body": "looks good required prop provided", "d": "6/2015"}, {"body": "mostly intended shipping standalone reusable components props essentially api exposed component required prop provided type mismatches vue throw warning", "d": "6/2015"}, {"body": "thank evan think good addition current component system", "d": "6/2015"}, {"body": "shipped", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "closing repro inactive", "d": "6/2015"}, {"body": "option b makes sense think vast majority users rely classic mustache tags arguing custom tags akin spacesvstabs debate option b opinionated component remains compatible ecosystem opinionated app still use common third party components", "d": "6/2015"}, {"body": "vote option b reason liked syntax easily see string escaped scanning without wasting time checking triple braces", "d": "7/2015"}, {"body": "agree youngsteveo grand scheme things appears spaces vs tabs argument fairly low importance unless missing something", "d": "7/2015"}, {"body": "michaeljcalkins mostly situations people writing direct html vuejs templates inside another templating system also happens use mustache tags", "d": "7/2015"}, {"body": "experimentation implementing change actually affects many parts compilation chain requires nontrivial refactoring benefits marginal one always put root template string instead raw html going move forward", "d": "8/2015"}, {"body": "ever revisited alternative solution available use alternate delimiters projects avoid twig conflicts started putting components bower obviously need use default delimiters use anyone nt work projects detailed version query question stackoverflow", "d": "8/2016"}, {"body": "looking template compiler see possible theory depending vue generates ast possible add componentlevel delimiters sure", "d": "8/2016"}, {"body": "interested reconsidering believe could implemented vue overriding leaves question would specified component source", "d": "8/2016"}, {"body": "martywallace tribex fyi already componentlevel delimiters", "d": "8/2016"}, {"body": "fnlctrl oh well simplifies things btw correct link believe meant", "d": "8/2016"}, {"body": "even hacky way achieve within component javascript moment achieve want forcing update delimiters include vue component includes like", "d": "8/2016"}, {"body": "change normal delimiters triple changes would turn triple general want avoid breaking changes stylistic preferences", "d": "6/2015"}, {"body": "like syntax escaped variables would opposed adding config option specify unescaped delimiters could still default triple mustache", "d": "6/2015"}, {"body": "sounds like good idea probably consider part", "d": "6/2015"}, {"body": "awesome thanks", "d": "6/2015"}, {"body": "configurable separately implemented branch", "d": "9/2015"}, {"body": "please report bugs questions posted seems similar think discussed", "d": "6/2015"}, {"body": "markhahn sure helps always change delimiters something prefer eg", "d": "6/2015"}, {"body": "hmm think see pass dynamic props dynamic component syntax although different still needs mustaches think tags somewhat necessary attribute start since otherwise way tell databound plain string attribute", "d": "6/2015"}, {"body": "thanks tip replacing mustaches necessary attribute start v well another request mine wish vue components used v mon jun pm evan notifications githubcom wrote hmm think see vwith pass dynamic props prop something dynamic component syntax although different still needs mustaches think tags somewhat necessary attribute start v since otherwise way tell databound plain string attribute reply email directly view github", "d": "6/2015"}, {"body": "chosen something much less noisy", "d": "6/2015"}, {"body": "btw nt use mustaches problem including modules use", "d": "6/2015"}, {"body": "hmm interpolation config global might issues use thirdparty component template probably add componentlevel option delimiters", "d": "6/2015"}, {"body": "probably add componentlevel option delimiters would cool seems global one useless deprecated think modules important issue global like general globals suck mon jun pm evan notifications githubcom wrote hmm interpolation config global might issues use thirdparty component template probably add componentlevel option delimiters reply email directly view github", "d": "6/2015"}, {"body": "kinda unusual use case instead using write filter probably use watcher since vmodel locks writing model need use wait unlocks overwrite affect select vmodel", "d": "6/2015"}, {"body": "thanks lot help", "d": "6/2015"}, {"body": "tricky parse regex literals inside directives easily confused division operator think reasonable change making vuevalidator also accept string pattern validator", "d": "6/2015"}, {"body": "sounds like reasonable solution means regexp literals used inside directive expressions documented", "d": "6/2015"}, {"body": "yes rare use case since validation probably use case would happen cases possible use filter computed property avoid add note docs", "d": "6/2015"}, {"body": "sounds good thanks", "d": "6/2015"}, {"body": "closing resolved", "d": "6/2015"}, {"body": "\u4f60\u8fd9\u4e2a \u662f\u60f3\u5e72\u5565 \u4e0d\u662f\u8fd9\u4e48\u7528\u7684\u554a", "d": "6/2015"}, {"body": "sort \u518d\u7528 sort", "d": "6/2015"}, {"body": "\u5c31\u4f1a\u6539\u53d8 dom dom nodes jquery \u52a8\u753b\u5b8c\u6210\u7684\u65f6\u5019\u4fee\u6539\u6570\u7ec4\u987a\u5e8f", "d": "6/2015"}, {"body": "\u4f60\u8fd9\u4e2a\u4e0d\u5c5e\u4e8e", "d": "6/2015"}, {"body": "update initialize items array strange get errors though empty rows still output could access data", "d": "6/2015"}, {"body": "vue works converting data fields gettersetters nt initialize field want add later call mentioned model section guide", "d": "6/2015"}, {"body": "would one vm set key val vue working reporting errors simply trying display value json file like vue trying easy complicated confusing thing ever tried use something even simple", "d": "10/2016"}, {"body": "tried updating latest", "d": "6/2015"}, {"body": "yes updated comment unfortunately nt help still trying figure missing fiddle reproduce problem", "d": "6/2015"}, {"body": "okay think finally got reproduced steps reproduce click one number list repeatedly click first number second list second list grow length repeated elements three factors contributes problem outer component inner component uses inner component uses css transition new fix found implement function transition simple call", "d": "6/2015"}, {"body": "applied css animation using time vue running transition detects element css animation vue assumes want trigger transition based css animations listen animationend event determine transition ends however case leave animation leave transition never finishes providing explicit leave callback fixes problem think unexpected side effect new mixed cssjs transition mode maybe need allow js transition indicate knows pure javascript transition try detect css properties", "d": "6/2015"}, {"body": "added give transition things work properly", "d": "6/2015"}, {"body": "okay makes sense nt think css animations anything took little longer reproduce fast thanks updates think also nice either give warning simply require transitions present happens would nt first thing think searching", "d": "6/2015"}, {"body": "obvious reading updated transition docs yet", "d": "6/2015"}, {"body": "indeed recommended usage error fixed anyway btw expose prop use", "d": "6/2015"}, {"body": "see second section faq vuejs nt support custom gettersetters data objects however use computed properties instead", "d": "6/2015"}, {"body": "well completely rules vue im using breezejs get data server uses getters setters everything sun jun pm evan notifications githubcom wrote closed reply email directly view github", "d": "6/2015"}, {"body": "surprised client data management solution nt offer sort unwrap plain json functionality guess bad match", "d": "6/2015"}, {"body": "unwrapping objects plain javascript object would defeat purpose breezejs objects entities lots nice behavior built find getting breezejs entities working mvvm library choice keen writing one rather working app instead fighting tools shame getterssetters vue supposed chosen one", "d": "6/2015"}, {"body": "well possible vue wrap original property descriptor support objects gettersetters performance implications take account aware could become potential issue rare use case decided implement", "d": "6/2015"}, {"body": "\u5f00 issue \u975e bug \u95ee\u9898\u8bf7\u53d1\u5230", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "\u6211\u521a\u7528 cordova cordova android cordova \u770b\u770b\u5427", "d": "6/2015"}, {"body": "htc \u5199\u9053 \u6211\u521a\u7528 cordova cordova android reply email directly view github", "d": "6/2015"}, {"body": "\u5199\u9053 \u6211\u521a\u7528 cordova cordova android reply email directly view github", "d": "6/2015"}, {"body": "branch rely precisely used csp enforcing environments observation mechanism nothing moment supporting objectobserve really high priority chromechromium still environment supports requires pretty heavy changes made nt think spec reaches stage browsers start implement", "d": "6/2015"}, {"body": "brilliant choice", "d": "11/2015"}, {"body": "lol", "d": "11/2015"}, {"body": "brilliant choice", "d": "11/2015"}, {"body": "also worth say object observe going removed chrome version probably ecma spec proposal see objectobserve implementation status", "d": "3/2016"}, {"body": "hmm doc source markdown work", "d": "6/2015"}, {"body": "nt know nt studied contribution guidelines surely markdown would easier port html plain text use atom editor lets bring devdocs selection source selfishly asking one experienced area willing may take stab fri jun pm evan notifications githubcom wrote hmm doc source markdown work reply email directly view github", "d": "6/2015"}, {"body": "docset dash osx app asume easy apply devdocs experience devdocs", "d": "6/2015"}, {"body": "good idea guidelines documentation using scraper", "d": "6/2015"}, {"body": "krisak yjeroen markhahn one work", "d": "7/2015"}, {"body": "one work would great thu jul chen notifications githubcom wrote krisak yjeroen markhahn one work reply email directly view github", "d": "7/2015"}, {"body": "", "d": "7/2015"}, {"body": "looks great smile", "d": "7/2015"}, {"body": "thanks kikyous", "d": "7/2015"}, {"body": "kikyous thanks lot also use devdocs", "d": "7/2015"}, {"body": "thanks mucho fri jul azamat notifications githubcom wrote kikyous thanks lot also use devdocs reply email directly view github", "d": "7/2015"}, {"body": "looking would mind adding license file clear applies thanks", "d": "7/2015"}, {"body": "thibaut added", "d": "7/2015"}, {"body": "thanks docs", "d": "7/2015"}, {"body": "thibaut cheers", "d": "7/2015"}, {"body": "demonstrate use case change necessary getting first glance", "d": "6/2015"}, {"body": "full context vueformidable built vue branch scenario without changes compile parent vm passes value child child computed property setter type casting sets default value issues watcher fire compilation value parent stays sync also component casting set watcher fire anyway props missing data initialized rather seems appropriate problem json schema primitive type", "d": "6/2015"}, {"body": "possible plugin work without proposed changes ran tests changes prop test cases failing agree initializing props would reasonable change though", "d": "6/2015"}, {"body": "yes work less straightforward ways using custom events maybe adding one level nesting data model initializing props would already help way", "d": "6/2015"}, {"body": "thanks props initialized think initial set order needs maintained behavior consistency past versions", "d": "6/2015"}, {"body": "make jsfiddle", "d": "6/2015"}, {"body": "self closing tag syntax xhtml need close properly templates", "d": "6/2015"}, {"body": "please post questions vuejsdiscussion thanks", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "\u9ebb\u70e6\u770b\u4e0b\u5f00 issue", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "\u4e0d\u8981\u518d\u50cf\u4e0a\u6b21\u90a3\u6837\u4e0a\u4f20\u6574\u4e2a\u4ee3\u7801\u4e86 jsfiddle", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "change component vue fires transition misunderstood", "d": "6/2015"}, {"body": "ah ended transition nt actually anything right works expected", "d": "6/2015"}, {"body": "using vue version refer routing section guide page vuerouter progress yet already work check issue reporting guidelines report appropriate issues repo", "d": "6/2015"}, {"body": "thanks exactly looking also support hashbang", "d": "6/2015"}, {"body": "sounds like useful improvement think possible requires changes current content resolution algorithm static probably look actually makes realize rewrite elementdirective would make transclusion logic much simpler", "d": "6/2015"}, {"body": "wow turns works", "d": "6/2015"}, {"body": "use inside hooks points instance animated yeah staggering tricky get right take look improved", "d": "6/2015"}, {"body": "list already elements add another one nt want delay transition ca nt use index need element index array newly added elements", "d": "6/2015"}, {"body": "nkovacs nt think task javascript managed achieve effect wanted writing confess ugly custom css selectors looks like tedious approach quite manageable preprocessor mostly even unwanted animate classes still perfect pressing soon", "d": "6/2015"}, {"body": "interesting thing items stuck leave applying exactly opacity css transition triggered item removed transition delay passed fix behavior giving small nonzero opacity eg", "d": "6/2015"}, {"body": "experiments branch simply add container looks like working alright possible add finergrained control maybe reverse order eg", "d": "6/2015"}, {"body": "looks pretty good exactly looking", "d": "6/2015"}, {"body": "awesome played around bit added animation reorder first emptying array repopulating nexttick perfect try pin elements place animation nt jump around also ran bug version nexttick hack click add items click empty finishes try adding items give time get uncaught typeerror read property removechild null", "d": "6/2015"}, {"body": "one suggestionwish hook control staggering eg speed slow element instead constant really important would nice", "d": "6/2015"}, {"body": "fixed jumping around giving leaving elements absolute position reorder animation looks good remove items broken assumes every element current one beforeleave going leave gives absolute position", "d": "6/2015"}, {"body": "alternative solution fixes remove items makes reorder empty look bad", "d": "6/2015"}, {"body": "ok managed get look way want think need hook runs stagger settimeout started give elements going removed absolute position animation starts hooks need run beforeleave hooks", "d": "6/2015"}, {"body": "made bunch improvements fiddle work without errors", "d": "6/2015"}, {"body": "define custom stagger amount providing hooks transition object", "d": "6/2015"}, {"body": "ship part", "d": "6/2015"}, {"body": "thanks", "d": "6/2015"}, {"body": "doc example indicates passed string retrieving value example fixed note filter syntax changed behave like expected original fiddle", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "good catch", "d": "6/2015"}, {"body": "general avoid binding like array primitive values use objects mutate object", "d": "6/2015"}, {"body": "ah see thanks taking time headsup works looking forward", "d": "6/2015"}, {"body": "\u5f00 issue \u7c7b\u4f3c\u95ee\u9898\u8bf7\u53d1\u5e03\u5230", "d": "6/2015"}, {"body": "think appropriate place question vuejsdiscussion repo", "d": "5/2015"}, {"body": "azamat said polymer based web components spec importantly custom elements use vue components custom elements see", "d": "5/2015"}, {"body": "find vuecustomelement", "d": "3/2017"}, {"body": "deprecated package would love see vue core team supporting custom elements ecosystem", "d": "7/2017"}, {"body": "webcomponents standard polymer best path webcomponents vue accept webcomponent library", "d": "7/2018"}, {"body": "understand already supported correctly configured ignoredelements vue", "d": "7/2018"}, {"body": "info select line elements tab devtools inspector see", "d": "5/2015"}, {"body": "running vue chromeos browser version platform official build stablechannel samus firmware ubuntu", "d": "5/2015"}, {"body": "problem vue beta version packagejson dependency set accidentally got beta version nt expect set got everything worked intentional change bug", "d": "5/2015"}, {"body": "please refer thread upcoming breaking changes", "d": "5/2015"}, {"body": "need wrap quotes otherwise vue look data property vm instead need write", "d": "5/2015"}, {"body": "thank nt realize pass literal string thought employee scope", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "seems general problem new properties set", "d": "5/2015"}, {"body": "limitation current path parser nt handle dynamic path segments dynamic static thus able call keys exist improved future best practice always prefer providing default values use sparingly", "d": "5/2015"}, {"body": "ok understand second fiddle change set add also change output bug fixed yesterday", "d": "5/2015"}, {"body": "interesting works using", "d": "5/2015"}, {"body": "uwe unrelated fix simply calls hood key present path static checked step step path dynamic evaluate expression works keys along path already created observed", "d": "5/2015"}, {"body": "supported branch via however also warning suggesting preinitialize fields", "d": "5/2015"}, {"body": "simply gives reference raw dom node also use radio would suggest reading whole guide nt done please post nonbug issues", "d": "5/2015"}, {"body": "\u5728 repeat", "d": "5/2015"}, {"body": "vreapt", "d": "5/2015"}, {"body": "\u9664\u975e\u4f60\u52a0\u4e86 nexttick \u4f1a\u4e0d\u7cbe\u786e nexttick", "d": "5/2015"}, {"body": "vuenexttick", "d": "6/2015"}, {"body": "fixed beta", "d": "5/2015"}, {"body": "yes seems work correctly fiddle", "d": "5/2015"}, {"body": "wo nt work case", "d": "5/2015"}, {"body": "actually instead", "d": "5/2015"}, {"body": "precisely question", "d": "5/2015"}, {"body": "quite sure get mean maybe code snippet", "d": "5/2015"}, {"body": "believe similar issue array objects data using populate list front end using use filter show certain records works great nt seem way access filtered records within javascript make calculations perform actions records total filter filterby show easy way get array data filtered records", "d": "6/2015"}, {"body": "using vref", "d": "6/2015"}, {"body": "wow exactly looking thank", "d": "6/2015"}, {"body": "closing original author nt provided explanation also nonbug moved vuejsdiscussion anyone wishes continue discussion", "d": "6/2015"}, {"body": "lifecycle events fire bottom child components hooks fire first", "d": "5/2015"}, {"body": "cool thanks documented somewhere", "d": "5/2015"}, {"body": "hmm nt think explicitly documented add updating docs", "d": "5/2015"}, {"body": "version using ca nt reproduce please include repro format jsfiddle", "d": "5/2015"}, {"body": "commented parent vm uncomment throw error console", "d": "5/2015"}, {"body": "thanks fiddle issue fixed current upgrade might want add toplevel element component eg", "d": "5/2015"}, {"body": "thank", "d": "5/2015"}, {"body": "fix landed beta however general would advice usage try use consistent data format block", "d": "5/2015"}, {"body": "thanks", "d": "5/2015"}, {"body": "closing bug see vuejsdiscussion", "d": "5/2015"}, {"body": "\u5b8c\u5168\u4e0d\u660e\u767d\u4f60\u7684\u610f\u601d", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6307\u4ee4 custom directive", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "vuenexttick", "d": "5/2015"}, {"body": "\u8fd9\u4e2aapi\u4f3c\u4e4e\u4e0d\u80fd\u6ee1\u8db3\u6211\u76ee\u524d\u7684\u4e1a\u52a1\u9700\u6c42 \u6211\u7684\u4f7f\u7528\u573a\u666f\u662f\u7ed3\u5408iscroll\u548czeptoajax ajax\u5f02\u6b65\u8bfb\u53d6\u6570\u636e\u8d4b\u503c\u7ed9vue\u5bf9\u8c61\u7684 data \u5728\u9875\u9762\u6e32\u67d3\u5b8c\u6210\u540e\u9875\u9762\u957f\u5ea6\u53d1\u751f\u53d8\u5316 iscroll\u5fc5\u987b\u5e94\u8be5\u6267\u884crefresh\u624d\u80fd\u6b63\u5e38\u4f7f\u7528 \u6211\u5728nexttick\u4e2d\u6267\u884c\u8fd9\u4e2a\u56de\u8c03\u662f\u4e0d\u8d77\u4f5c\u7528\u7684 \u6700\u540e\u88ab\u8feb\u4f7f\u7528\u4e86settimeout \u6211\u89c9\u5f97\u5e94\u8be5\u662f\u6709\u66f4\u597d\u7684\u529e\u6cd5\u7684", "d": "5/2015"}, {"body": "nexttick vrepeat", "d": "5/2015"}, {"body": "\u6211\u7406\u89e3\u4e86 \u5e94\u8be5\u662f\u6bcf\u6b21\u8d4b\u503c\u540e\u8c03\u7528nexttick \u6211\u770b\u6587\u6863\u4e0a\u5199nexttick\u662f\u5168\u5c40api \u8bef\u4ee5\u4e3a\u662f\u4e00\u6b21\u914d\u7f6e\u540e\u5168\u5c40\u90fd\u4f1a\u8fc7\u6765\u8dd1\u8fd9\u4e2a\u56de\u8c03", "d": "5/2015"}, {"body": "iscroll touchstart refresh \u5f53\u524d\u7684 iscroll ng reslove vueroute vueroute", "d": "6/2015"}, {"body": "\u6211\u4e5f\u5728\u505a\u7c7b\u4f3c\u7684\u9700\u6c42 \u8bf7\u95eenexttick \u662f\u53ea\u5728\u8d4b\u503c\u540e\u8c03\u7528 \u90a3\u4e48\u6211\u73b0\u5728\u628a\u6570\u636e\u653e\u5728 vuex\u91cc\u9762\u4e86 \u518d\u5728\u9875\u9762\u5207\u6362\u4e4b\u540eiscroll\u7684\u7ed1\u5b9a\u5c31\u5931\u6548\u4e86 \u6682\u65f6\u7528\u7684 dafrok \u7684\u65b9\u5f0f settimeout \u8bf7\u95ee\u6700\u4f73\u5b9e\u8df5\u662f\u5982\u4f55\u554a", "d": "4/2016"}, {"body": "miaotaizi \u7406\u8bba\u4e0anexttick\u4f1a\u5e2e\u4f60\u5224\u65ad\u4f60\u7684\u573a\u666f\u662f\u5426\u9700\u8981settimeout", "d": "4/2016"}, {"body": "", "d": "4/2018"}, {"body": "jsfiddle workaround", "d": "5/2015"}, {"body": "confirm quote passed upon time something thought ok behaviour removed quotes manually btw thing without momentjs", "d": "5/2015"}, {"body": "yeah think time nt want quotes would make sense vue strip need use alternating quotes", "d": "5/2015"}, {"body": "reason contains quotes filter differentiate raw strings vs dynamic bindings eg vs", "d": "5/2015"}, {"body": "ah see problem though someone writes filter without using stripquotes able accept parameters spaces example using pluralize", "d": "5/2015"}, {"body": "hmm good point two options autostrip quotes builtin filters although means every custom filter also need make filter syntax consistent strings quotes treated data property vm think may good opportunity introduce second", "d": "5/2015"}, {"body": "filter sometimes receives object instead simple string times string normal one href receives object two receive strings", "d": "5/2015"}, {"body": "looks like attributes cause become object", "d": "5/2015"}, {"body": "nkovacs noted fix next beta release", "d": "5/2015"}, {"body": "thanks", "d": "5/2015"}, {"body": "let move since likely caused router implementation", "d": "5/2015"}, {"body": "scoperelated breaking changes since content inside component transcluded compiled parent scope looking method parent instead child get old behavior adding component html content treated component template ref", "d": "5/2015"}, {"body": "hello using came across issue something else related", "d": "4/2016"}, {"body": "problem something else although unrelated syntax error post anyway works export default methods submitform alert test nt export default methods return submitform alert test", "d": "5/2016"}, {"body": "adius must object function", "d": "5/2016"}, {"body": "syntax error oh probably posted intentionally newbies sorry", "d": "5/2016"}, {"body": "comma separating list considered multiple clause item gets directive instance first instance second one seems case trying bend component directive directives vue supposed handle simple mapping data property dom manipulation want something encapsulates complex behavior especially accepting options use component instead", "d": "5/2015"}, {"body": "components good place dom manipulation", "d": "5/2015"}, {"body": "whatever want inside component leverage builtin directives direct manipulation", "d": "5/2015"}, {"body": "okay cool make sense angular says keep directives react says components vue says let fancy stuff components keep directives small manipulations", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "great missed somehow thanks seeing delete node something tells unrelated", "d": "5/2015"}, {"body": "directly accessing usually recommended case recursive components makes things easier otherwise could use event system send event parent make decoupled", "d": "5/2015"}, {"body": "still work latest vuejs tried replacing remove delete getting parentmodelchildren delete function error jsfiddle tree view example changed dblclick call delitem method added delitem method follows methods delitem function parentmodelchildren delete thismodel", "d": "9/2017"}, {"body": "wow really nice plans early obviously never enough bandwidth actually get would love standalone projects help get exposurecontribution", "d": "5/2015"}, {"body": "currently another vuevalidator project maintained kazupon vueresource definitely could fill gap missing", "d": "5/2015"}, {"body": "steffans want share efforts vue community welcome efforts hope vuejs community users increase", "d": "5/2015"}, {"body": "yes sure standalone projects plugins would nice vuevalidator plugin implementation differs current one works without provides form events kazupon might take look plugin maybe features merged", "d": "5/2015"}, {"body": "cool would testuse vueresource almost apps using vue ship standalone plugin npm possible many thanks sharing", "d": "5/2015"}, {"body": "steffans", "d": "5/2015"}, {"body": "steffans looked vuevalidator plugin implementation project maybe merge features builtin validators event merge forms attribute based validation design philosophy validation different vuejsvuevalidator vuevalidator project ca nt tell better", "d": "5/2015"}, {"body": "looked vueresource pagekitpagekit project cool think share standalone project vuejsvueresource maintained steffans", "d": "5/2015"}, {"body": "kazupon yes validator plugin based current angular implementation uses name attribute like idea moving resource plugin vuejsvueresource add repo move current code", "d": "5/2015"}, {"body": "steffans invited vueresource team vuejs org", "d": "5/2015"}, {"body": "", "d": "6/2015"}, {"body": "", "d": "5/2015"}, {"body": "hmm feels weird change type select end indeterministic data structure form specific use case example", "d": "5/2015"}, {"body": "use case rather anecdotal came demo selector component", "d": "5/2015"}, {"body": "see open pr proposed change ideally test case", "d": "5/2015"}, {"body": "fair enough ok rely mutationobserver", "d": "5/2015"}, {"body": "nt think vue bottom line support nt mutationobserver", "d": "5/2015"}, {"body": "closing since really marginally useful clear proper way access attribute value changes within directive code", "d": "6/2015"}, {"body": "\u8bf7\u770b\u5b8c\u6587\u6863\u518d\u5f00", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "belinchung", "d": "5/2015"}, {"body": "\u4e24\u4e2a\u9009\u62e9 \u4e0d\u8981\u76f4\u63a5\u5199\u5728 dom \u7684\u5f62\u5f0f \u7528", "d": "5/2015"}, {"body": "brings breaking changes see release notes pin specific version", "d": "5/2015"}, {"body": "also tagged default installed version", "d": "5/2015"}, {"body": "exactly figured happened thought would useful warn newbies like may messed doc see release notes wonder official replacements vcomponent vwith beacome fond way thank much awesome library", "d": "5/2015"}, {"body": "still development follow along discussion", "d": "5/2015"}, {"body": "appear error", "d": "5/2015"}, {"body": "data look like", "d": "5/2015"}, {"body": "look like", "d": "5/2015"}, {"body": "method line result triggers diff outer repeat mutated via diff setting index new array result diff algorithm thinks brandnew set data full rerender thus transitions triggered one option simply mutate current child array triggers update inner repeat outer one transitions would work expected note approach trigger update compare repeat one using index access register dependency expression tracks mutation", "d": "5/2015"}, {"body": "ah thanks much unclear part code worked well thought love vue", "d": "5/2015"}, {"body": "seems already fixed", "d": "5/2015"}, {"body": "vue \u672c\u8eab bug \u7684\u95ee\u9898\u8bf7\u53d1\u5230", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "\u4f7f\u7528 id", "d": "5/2015"}, {"body": "\u6211\u73b0\u5728\u57fa\u672c\u4e0d\u8bbe id \u53ea\u628a body", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "vhtml \u53ea\u7528\u4e8e\u8f93\u51fa\u9759\u6001", "d": "5/2015"}, {"body": "\u8fd9\u662f\u53ea\u6709 firefox \u624d\u4f1a\u62a5\u7684 vue", "d": "5/2015"}, {"body": "nt think improvement significant enough complicating api thanks suggestion", "d": "5/2015"}, {"body": "know old request encountered need would super nice rather", "d": "7/2015"}, {"body": "could easily something like could even make mixin use everywhere want", "d": "7/2015"}, {"body": "nirazul solution good maybe leave context binding calling code useful mixin js methods baywatch function props watcher var iterator function prop watch prop watcher propsforeach iterator thisbaywatch b c thisdosomethingbind", "d": "7/2015"}, {"body": "yes viable solution", "d": "7/2015"}, {"body": "done extend per instance basis", "d": "5/2016"}, {"body": "could look making plugin ca nt write example moment look plugins page see add methods edit super hacky", "d": "5/2016"}, {"body": "looking feature well three variables binded three input elements form need listen changes three variables update canvas third party library using pass array variables would trigger single function seem like simplest solution anyone another solution nt want rely pluginown code modifying simple case", "d": "12/2016"}, {"body": "form seems sensible enough implement hard document", "d": "12/2016"}, {"body": "would build computed property derived desired properties watch update skip performance penalty allocating discarding array commaseparate dependent values finally return something always different taking comments linters might complain perfectly valid js", "d": "12/2016"}, {"body": "sirlancelot nice solution whenever need computed property accomplish append computed property name computed would become personal convention sharing case someone finds useful", "d": "1/2017"}, {"body": "made simpler reference reactive properties return value guaranteed different every time way avoid performance overhead array operation original example sirlancelot though trivial cases also x z objects would give result every time xyz changed prevents watcher fired js new vue computed compoundproperty required reference properties thisx thisy thisz return different value every time return datenow performancenow", "d": "1/2017"}, {"body": "two cents watchers supported expressions could globally mix method would return way generate unique value define watcher would called every time changed demo watch expression define computed prop watch instead best way think ease creation computed field", "d": "1/2017"}, {"body": "wanted also add two cents got situation also watch two variables already mentioned nt think would possible natively would significant improvement", "d": "3/2017"}, {"body": "debounce callback function", "d": "6/2017"}, {"body": "also encounter similar situation need watch multiple state change component", "d": "9/2017"}, {"body": "sirlancelot interesting solution small suggestion would use object return value since number give result things happens fast buggy example consistent example", "d": "9/2017"}, {"body": "sirlancelot thanks nice solution", "d": "10/2017"}, {"body": "fyi directly watch getter via without need separate computed property", "d": "10/2017"}, {"body": "think sirlancelot solutions pose risks performance construct entirely new object sake hashing multiple watchers particularly dangerous want hash large number watchers together wouldnt safer define watchers beginning component constructed spread operator simple reducer done relatively little clutter guess pretty similar vuex would nice utility function map watchers provided allowing something like even want provide access key allowing programmatic generation watchers", "d": "2/2018"}, {"body": "solution worked pretty well found readable making computed properties watch component use instance like based thattomperson suggestion", "d": "3/2018"}, {"body": "based denwerboy solution pass watched property name callback function useful save changes localstorage automatically call mount inspect arguments", "d": "3/2018"}, {"body": "ractive solves watching multiple paths asterisk could things like seems strange ca nt easily define single callback watcher multiple properties vue", "d": "3/2018"}, {"body": "wanted watch data props emit vmodel together single object ended going", "d": "5/2018"}, {"body": "maybe another solution could", "d": "5/2018"}, {"body": "evan solution already best slight adaptation avoid array construction", "d": "5/2018"}, {"body": "thread seems bikeshed lot answers already provided let stop nt get worse prevent spamming around people see solutions", "d": "5/2018"}, {"body": "twoway binding using dynamic expression parsed static path thus vue generate dynamic setter basically nt call property nt already exist comparison static path generates setter loop path segments call key nt exist already case probably necessary ensure fields observed manually calling field", "d": "5/2015"}, {"body": "since available observed objects would possible use place directly setting path enable use dynamic expressions", "d": "5/2015"}, {"body": "would require nontrivial changes current path parser sure use case worth effort least", "d": "5/2015"}, {"body": "worries mostly curious familiar internals feel free close nt something plan implement time soon", "d": "5/2015"}, {"body": "take look comments pr", "d": "5/2015"}, {"body": "found answer thanks", "d": "5/2015"}, {"body": "shredmaster future submitting solved problem helps everyone lots users end looking solve problem get", "d": "1/2016"}, {"body": "days ago wondering thing ended attaching event handlers manually would nice able von still nt know possible", "d": "1/2016"}, {"body": "possible op wanted using see also codepen example", "d": "2/2016"}, {"body": "someone else issue want use modifier default event ordering important default event first", "d": "2/2017"}, {"body": "ok saw vuenexttick", "d": "5/2015"}, {"body": "also helps somehow docs vm watch returns unwatch function stops firing callback", "d": "5/2015"}, {"body": "length evaluated block executed common pattern", "d": "5/2015"}, {"body": "yeah somehow nt work always updated pr check result truthy calling", "d": "5/2015"}, {"body": "closing error might thrown bug line mentioned source problem", "d": "5/2015"}, {"body": "recommended mix fulldata replace singleprop essentially trying mutate object passed component additional properties better pass object another property getting removed fulldata replace also longer supported", "d": "5/2015"}, {"body": "thanks fix second problem reproduct yosemite chrome yosemite safari chrome looks ok ok means browser wait calculation completed start transition yosemite chrome looks transition started button clicked refreshed calculation completed difficult describe behavior maybe put video animated gif helpful", "d": "5/2015"}, {"body": "probably chrome handles css transitions heavy computations computed property nt sound like good idea first place", "d": "5/2015"}, {"body": "closing since root node issue fixed branch", "d": "5/2015"}, {"body": "add listener form element reset data might bit inconvenient gives flexibility reset set nonempty default values", "d": "5/2015"}, {"body": "oh thought empty data automatically figured resetting form nt fire inputs change events", "d": "5/2015"}, {"body": "bummer", "d": "2/2018"}, {"body": "read example let know feel example nt clear enough work improving doc", "d": "5/2015"}, {"body": "spotted code snippet guide ca nt understand example leverage way order add private section hidden data members methods viewmodels also moduleexport require api shown sample come thanks il evan notifications githubcom ha scritto read example let know feel example nt clear enough work improving doc reply email directly view github", "d": "5/2015"}, {"body": "every field inside mixin mixed component object component instance component options contains fields fields merged together example may multiple components need hooks tedious define hooks extract hooks mixin let components use mixin sure mean hidden section always add object vm instance use namespace private stuff eg created hook set make sure key unlikely conflict people code assumes using commonjs module bundler build app explained section building larger apps", "d": "5/2015"}, {"body": "got thanks", "d": "5/2015"}, {"body": "fixed", "d": "5/2015"}, {"body": "component data nt field thus set nt trigger update think make sense default make paramattributes observed meanwhile get around using", "d": "5/2015"}, {"body": "great solved think make sense default make paramattributes observed think really good necessary api document paramattributes noted array attribute names set vue instance initial data useful passing data component seems equal options poor english", "d": "5/2015"}, {"body": "priority issue second case available property component bind parent scope property first case works outer provides extra layer scope", "d": "5/2015"}, {"body": "means proper way combine component using tag like little weird acceptable close", "d": "5/2015"}, {"body": "proper behavior attributes component template overwriting placeholder merging complex need compiled different scopes", "d": "5/2015"}, {"body": "hmm supposed work normal attributes although happened worked past versions nt really recommend usage instead simply", "d": "5/2015"}, {"body": "right got used vattr nt even think use normal attribute syntax saying components essentially custom elements would great worked normal elements", "d": "5/2015"}, {"body": "html accepts string inline css", "d": "5/2015"}, {"body": "works css split thank much", "d": "5/2015"}, {"body": "\u5b9a\u4e49\u4e00\u4e2acomponent javascript vuecomponent testa template aaaa \u518d\u5b9a\u4e49\u4e00\u4e2acomponent javascript vuecomponent testb template \u624d\u80fd\u5f97\u5230\u6b63\u5e38\u7ed3\u679c", "d": "5/2015"}, {"body": "dalphyx jsfiddle", "d": "5/2015"}, {"body": "\u5c31\u662f\u6807\u51c6\u7684 dom \u4e8b\u4ef6\u554a", "d": "5/2015"}, {"body": "\u6807\u51c6\u7684dom", "d": "5/2015"}, {"body": "onclick", "d": "5/2015"}, {"body": "\u57fa\u672c\u529f\u4e0d\u624e\u5b9e", "d": "5/2015"}, {"body": "thank really appreciate fast turnaround", "d": "5/2015"}, {"body": "accessing directly error thrown vue internally latter appreciate jsfiddle", "d": "5/2015"}, {"body": "directly indeed", "d": "5/2015"}, {"body": "probably using component toplevel elements result block instance basically manages block nodes defined vstart comment node vend comment node previously block instance points first toplevel element points comment node case curious trying block instance since conceptually nt root node", "d": "5/2015"}, {"body": "ah completely right popup element got moved root element zindex issues kept working never noticed course nt work thanks", "d": "5/2015"}, {"body": "example remove use following template main vm instance works nt work situation", "d": "5/2015"}, {"body": "oh actually works typo template", "d": "5/2015"}, {"body": "yeah jsfiddle works trying find cause local bug thank alot", "d": "5/2015"}, {"body": "second issue try instead", "d": "5/2015"}, {"body": "ca nt called vue internals", "d": "5/2015"}, {"body": "well show code", "d": "5/2015"}, {"body": "related", "d": "5/2015"}, {"body": "figured root tag template may need warning case debug mode", "d": "5/2015"}, {"body": "sjoerdvisscher fiddle uses see", "d": "5/2015"}, {"body": "telling vue tag asking vue output vrepeat item attribute value tag think error expected case course", "d": "5/2015"}, {"body": "yeah unclear create fiddle understand mistake think warning debug mode needed case", "d": "5/2015"}, {"body": "warning message would definetely helpful right let hear decide available", "d": "5/2015"}, {"body": "actually works correctly another regression fixed expect soon", "d": "5/2015"}, {"body": "oh thanks evan", "d": "5/2015"}, {"body": "sorry use", "d": "5/2015"}, {"body": "caused transitionend events firing page regains focus happens mode fixed branch", "d": "5/2015"}, {"body": "yeah known bug part refactored branch fixed release", "d": "5/2015"}, {"body": "worked around wrapping component separate contexts", "d": "5/2015"}, {"body": "note specific usecase using property name defined item access property parent data", "d": "5/2015"}, {"body": "yeah dynamic vcomponent able access repeated context special convenience although possibly confusing one using component directives repeat container compiled parent scope using wrapper case recommended solution", "d": "5/2015"}, {"body": "thanks clarification", "d": "5/2015"}, {"body": "instead call former correct context", "d": "4/2015"}, {"body": "swear going write like nt ca nt remember smile thanks evan", "d": "5/2015"}, {"body": "define filter", "d": "4/2015"}, {"body": "ah yes simple effective thanks", "d": "5/2015"}, {"body": "done vue achieve vue thanks advance", "d": "8/2016"}, {"body": "wonder issue edit yup bug namniak team feel free close move", "d": "4/2015"}, {"body": "fixed branch", "d": "4/2015"}, {"body": "example wrapping inside custom directive", "d": "4/2015"}, {"body": "evan thank much wish vue examples people could see beauty simplicity", "d": "4/2015"}, {"body": "nice solution epic example using custom directives however onselect probably replaced onclose use onselect date value updated click date type date manually tab input field javascript vuedirective datepicker bind function var vm thisvm var key thisexpression thisel datepicker dateformat ddmmyy onclose function date datematch vm set key date else vm set key consolelog invalid date update function val thisel datepicker setdate val var v new vue el main data dt methods checkdate function consolelog thisdt", "d": "7/2015"}, {"body": "another truly epic thing date picker directive encapsulated inside component like javascript vuecomponent customcomponent got ta love vuejs smile", "d": "7/2015"}, {"body": "awesome", "d": "12/2015"}, {"body": "thank much another great feature developed vue team", "d": "2/2016"}, {"body": "careful using bootstrapdatepicker attempt using changedate event lead endless loop could figure resolve need change jquery datepicker implementation", "d": "6/2016"}, {"body": "possible vuejs tried sample got datepicker displayed nt set data underlying model edit ok got okay nt get nt update die model", "d": "12/2016"}, {"body": "thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "12/2016"}, {"body": "btw error exists least back", "d": "4/2015"}, {"body": "yeah triple curly braces static everywhere look issue general good idea avoid using directives inside though", "d": "4/2015"}, {"body": "error fixed branch triplecurly html always static ie contents never compiled", "d": "5/2015"}, {"body": "ok thanks", "d": "5/2015"}, {"body": "using vcomponent broken object component always empty regardless many times vref used working misunderstand", "d": "4/2015"}, {"body": "azamatsharapov aye right looks like case simple maybe inside need check carefully", "d": "4/2015"}, {"body": "nt use option", "d": "4/2015"}, {"body": "oooops looks like missing something reeeeaaaly important daaaamn long thanks man going cry need eye examination something", "d": "4/2015"}, {"body": "simply need change glasses another one like evan", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "\u8fd8\u662f\u5f97\u770b\u4ee3\u7801\u91cd\u73b0 \u9876\u5c42\u7684\u5143\u7d20\u4e0d\u80fd\u662f\u7ec4\u4ef6\u7684\u54e6", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "issue \u7684\u4e00\u4e2a\u826f\u597d\u4e60\u60ef\u662f\u81ea\u5df1\u63d0\u4f9b\u4e00\u4e2a\u6700\u7b80\u6d01\u7684 bug", "d": "4/2015"}, {"body": "localhost user", "d": "4/2015"}, {"body": "\u539f\u56e0\u662f\u4f60\u7684\u7ec4\u4ef6\u5728 loadview \u91cc\u9762\u90fd\u88ab\u8bbe\u7f6e\u6210\u4e86 \u5c31\u53d8\u6210\u4e86 user user mgpage user \u7ec4\u4ef6\u548c\u5176\u4ed6\u9875\u9762\u7ec4\u4ef6\u5b9a\u4e49\u4e3a \u628a mgpage \u4f5c\u4e3a\u4e00\u4e2a mgpage \u4e0d\u8981\u7528", "d": "4/2015"}, {"body": "\u5199\u9053 \u539f\u56e0\u662f\u4f60\u7684\u7ec4\u4ef6\u5728 loadview \u91cc\u9762\u90fd\u88ab\u8bbe\u7f6e\u6210\u4e86 replace \u5c31\u53d8\u6210\u4e86 user user mgpage user \u7ec4\u4ef6\u548c\u5176\u4ed6\u9875\u9762\u7ec4\u4ef6\u5b9a\u4e49\u4e3a mgpageextend \u628a mgpage \u4f5c\u4e3a\u4e00\u4e2a mixin \u4e0d\u8981\u7528 replace reply email directly view github", "d": "4/2015"}, {"body": "hmm usually auto track latest release npm within hours opened issue", "d": "4/2015"}, {"body": "thanks hopefully get fixed soon", "d": "4/2015"}, {"body": "fixed branch", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "zip \u89e3\u538b\u5373\u53ef gulp webpack mgheader", "d": "4/2015"}, {"body": "\u786e\u8ba4\u662f", "d": "4/2015"}, {"body": "fixed dev branch \u5728\u65b0\u7248\u672c\u53d1\u5e03\u524d\u4f60\u53ef\u80fd\u9700\u8981\u624b\u52a8 build \u4e00\u4e0b dev \u7248\u672c\u7684", "d": "4/2015"}, {"body": "thanks isolating issue indeed due transcluded content snapshotted across recompiles looking better strategy transcluded content properly recompiled part block", "d": "4/2015"}, {"body": "find directive placeholder comments static example html something content partial something compiling transcluded template mycomp directive comments like contains start comment end comment figure parts dynamic experimental code js checkcontent function el el el thisel var stack var lt elchildnodeslength var node elchildnodes iscontent flag set instancecompile raw content compiled parent nodeiscontent nodenodetype nodeisend amp amp stack thisplaceholdernodes thisplaceholdernodeslength node thisplaceholderpositions thisplaceholderpositionslength else nodeisstart stack thisplaceholdernodes thisplaceholdernodes push node thisplaceholderpositions thisplaceholderpositions push stack else stack thiscontentnodes thiscontentnodes push node thiscontentpositions thiscontentpositions push keep track transcluded components contained within conditional block need call attachdetach hooks thistranscpnts thisvmtranscpnts amp amp thisvmtranscpntsfilter function c return elcontains c el update function value thisinvalid return value avoid duplicate compiles since update called different truthy values thisunlink var frag templateparserclone thistemplate persist content nodes parent thistransclude frag thiscompile frag else thisteardown transclude function frag var el fragchildnodes thiscontentnodes var l thiscontentnodeslength lt l var node thiscontentnodes var j thiscontentpositions elreplacechild node elchildnodes j thisplaceholdernodes var offset var l thisplaceholdernodeslength lt l var startnode thisplaceholdernodes var endnode thisplaceholdernodes var start thisplaceholderpositions offset var end thisplaceholderpositions offset var len end start var node startnodenextsibling var j node endnode j lt len elreplacechild node elchildnodes start j else elinsertbefore node elchildnodes end j safe skip compiling node children nodesetattribute vpre node startnodenextsibling j lt len offset len j j lt len elremovechild elchildnodes j else offset j len elreplacechild startnode elchildnodes start elreplacechild endnode elchildnodes end using strategy dynamic", "d": "4/2015"}, {"body": "find strategy works", "d": "4/2015"}, {"body": "created new branch major refactoring transclusion logic works correctly jsfiddle demo includes test case", "d": "4/2015"}, {"body": "thank strategy used branch also solved another problems", "d": "4/2015"}, {"body": "thanks looks like new inplace update algorithm still needs tweaking decided remove current codebase ensure stability probably revisit later release", "d": "4/2015"}, {"body": "fixed release see submitted pr updated vue todomvc would like well", "d": "4/2015"}, {"body": "sure couple minutes", "d": "4/2015"}, {"body": "fast oo", "d": "4/2015"}, {"body": "submitted thanks quick responses evan", "d": "4/2015"}, {"body": "problem one developers ran morning app removing vwith allowed us get app running luckily couple weeks development lot breaks changing", "d": "4/2015"}, {"body": "pushed fix branch please try see fixes issue let know breaks upgrade thanks reporting issues", "d": "4/2015"}, {"body": "sorry failing google google failing npm install dev branch", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "nt seem trick version git dev put together fiddle get home", "d": "4/2015"}, {"body": "unfortunately still seems broken work fiddle", "d": "4/2015"}, {"body": "working broken editupdate stubbing undefined data property seems make things work say would nt big deal although perhaps consider either warning using set property nt stubbed therefore would update anything previousy tried bind warning trying pass something bound property exist", "d": "4/2015"}, {"body": "turns small optimization attempt nt carefully thought fixed real branch", "d": "4/2015"}, {"body": "case fixed branch case bit different option works instance still active set instances destroyed event listeners also also means recommended use event system listen internal lifecycle hooks", "d": "4/2015"}, {"body": "oh think also means component may cleared invoking internal detached event worth documenting guide", "d": "4/2015"}, {"body": "closing actionable item regarding codebase", "d": "5/2015"}, {"body": "\u4f60\u662f\u7528\u7684 vueloader", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "questions open new issues", "d": "4/2015"}, {"body": "niluanxy", "d": "7/2017"}, {"body": "ah found issue usage supported work fix", "d": "4/2015"}, {"body": "data \u53e6\u5916\u8fd9\u7c7b\u95ee\u9898\u4ee5\u540e\u8bf7\u53d1\u5230 vue \u5b9e\u73b0\u6216\u662f bug \u7684", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "vrepeat computed property", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "questions open new issues", "d": "4/2015"}, {"body": "vue uses dombased templating vue directives allow direct access dom nodes gives user flexibility work dom also couples implementation real dom using vdom would break almost existing code direction interested going least project", "d": "4/2015"}, {"body": "fwiw react even stable always breaking api nt feel yet like natural way developing webapps like vuejs believe ember vdom implementation much better still time tell way go", "d": "4/2015"}, {"body": "vdom useful isomorphic app maybe vue goal", "d": "8/2016"}, {"body": "huangyingjie vue virtual dom serverside rendering", "d": "8/2016"}, {"body": "add declare global event receiver component logs events useful debugging", "d": "4/2015"}, {"body": "events travel components tree depending method use intercept events globally simply monkeypatch", "d": "4/2015"}, {"body": "questions please open new threads", "d": "4/2015"}, {"body": "idiomatic way wrap inside custom directive", "d": "4/2015"}, {"body": "make example want load jquery javascript libs require jquery work load javascript libs maybe compatible requirejs mean javasript lib use like import javascript lib pure lib frontend searched whole morning issue still find right answer think everyone need", "d": "4/2016"}, {"body": "vinhtq question unrelated vue read using jquery requirejs also always resort including accessing global make sure include files proper order according dependencies", "d": "4/2016"}, {"body": "look jsfiddle", "d": "4/2017"}, {"body": "\u4f60\u8fd9\u4e2a\u95ee\u5f97\u6709\u70b9\u7b3c\u7edf\u5427 \u80fd\u4e0d\u80fd\u5177\u4f53\u4e00\u70b9", "d": "4/2015"}, {"body": "\u5047\u8bbe\u6211\u6709\u4e00\u4e2a\u8bc4\u8bba\u7ec4\u4ef6", "d": "4/2015"}, {"body": "\u628a\u5b83\u5d4c\u5957\u5728\u5361\u7247\u7ec4\u4ef6\u91cc\u5457", "d": "4/2015"}, {"body": "item datacommentlist \u6ca1\u6709\u89e6\u53d1\u66f4\u65b0", "d": "4/2015"}, {"body": "avoid directly setting elements databound array indices changes picked vuejs instead use augmented set method objectobserve one blame", "d": "4/2015"}, {"body": "oh use case thanks simplesmiler", "d": "4/2015"}, {"body": "wow good catch", "d": "4/2015"}, {"body": "hi found add line code make works certainly temporary solution think solve better way thisinitelement el optionslinkfn el thiscontainerunlinkfn undefined", "d": "4/2015"}, {"body": "already made fix", "d": "4/2015"}, {"body": "turns need", "d": "4/2015"}, {"body": "", "d": "4/2015"}, {"body": "take consideration accept nested paths expressions cost precisely tracking propertypath changed composite watcher significantly expensive extra anonymous function reality almost never perf bottleneck", "d": "5/2015"}, {"body": "yea right forgot expressions", "d": "5/2015"}, {"body": "need data reactive attach vm instance prefix everything mixin name", "d": "4/2015"}, {"body": "yes prefixing would kinda elegant solution", "d": "4/2015"}, {"body": "maybe something like privatemethods privatedata privatecomputed sections options object would better ideally behavior nonprivate counterparts exposed vm instance time usually add sections nonreactive members refer optionsprivatexxxyyy far best solution", "d": "4/2015"}, {"body": "one thing note currently works bug fixed wo nt work unless use replace", "d": "4/2015"}, {"body": "maybe better use watch", "d": "4/2015"}, {"body": "work event type dom type even click nt work tried dom created template doesnt work von vmodel others work seems like jquery cant use selector dom created js list rendered vrepeat dont know watch list item val using watch method confused tot", "d": "4/2015"}, {"body": "made fiddle could play maybe find solutions", "d": "4/2015"}, {"body": "hi back lol thanks helping", "d": "4/2015"}, {"body": "edited link fiddle calling parent method component wo nt work right way use vue events something like also mistake parent template changed", "d": "4/2015"}, {"body": "many thanks u help lot", "d": "4/2015"}, {"body": "would nice nt delete jsfiddle", "d": "7/2016"}, {"body": "reproducible errors without random first item subitems gets second time click button first item subitem gets second time click button", "d": "4/2015"}, {"body": "ok figured true false reason inherits reused parent vm also using trackby", "d": "4/2015"}, {"body": "thanks digging fixing", "d": "4/2015"}, {"body": "vue updates dom asynchronously right changed items array call callback dom would updated", "d": "5/2015"}, {"body": "jsfiddle", "d": "4/2015"}, {"body": "throw warning basically root vm nt need component", "d": "4/2015"}, {"body": "try ondeomready use like jquery small", "d": "4/2015"}, {"body": "ca nt reproduce make jsfiddle", "d": "4/2015"}, {"body": "\u6c42\u89e3", "d": "4/2015"}, {"body": "true vue forced synchronous mode debug stack traces debug mode watcher fires immediately change child component hook fires normal mode watcher deferred fires hook agree somewhat confusing behavior think improve think try avoid relying order hookswatchers fired specifically example watcher needed", "d": "4/2015"}, {"body": "thanks explanation tried example version found different behavior suggested changed code order avoid relying", "d": "4/2015"}, {"body": "questions open new issues", "d": "4/2015"}, {"body": "think overmodularizing without real benefits vue api already simple enough nt need eventswatchingdom pretend nt exist going get way difference probably save like eventual file size worth nontrivial effort modularize everything nt think", "d": "4/2015"}, {"body": "need define component initiate main instance", "d": "4/2015"}, {"body": "make fiddle anyway fine long code reproduces issue locally", "d": "4/2015"}, {"body": "unfortunately ca nt easily isolate issue reopen issue find thanks", "d": "4/2015"}, {"body": "perhaps would make sense", "d": "4/2015"}, {"body": "yes think checking presence sufficient", "d": "4/2015"}, {"body": "thanks", "d": "4/2015"}, {"body": "sorry english \u6211\u7528\u7684\u662fvuecil phone \u6211\u7528\u4e86\u8fd9\u4e2a\u65b9\u6cd5 return detect incompatible browsers", "d": "1/2017"}, {"body": "personally much testing vue minimum need following", "d": "12/2017"}, {"body": "pixelbacon return false vue working fine", "d": "1/2018"}, {"body": "", "d": "4/2015"}, {"body": "vue", "d": "4/2015"}, {"body": "\u8fd9\u4e2a\u529e\u6cd5\u4e0d\u9519 \u8c22\u4e86 \u4f60\u8bf4\u8fd9\u4e2a\u529e\u6cd5 \u9700\u8981\u628a\u6570\u636e\u9884\u5148\u8f6c\u6362\u6210\u4f60\u9700\u8981\u7684 text value \u683c\u5f0f \u8fd9\u6837\u8fd8\u662f\u9700\u8981\u591a\u505a\u4e9b\u8f6c\u6362\u5de5\u4f5c", "d": "4/2015"}, {"body": "\u5c5e\u6027\u652f\u6301 filter \u6bd4\u5982\u53eb \u5c31\u53ef\u4ee5", "d": "4/2015"}, {"body": "hmm check pulse tab nt know got impression last comment last year", "d": "4/2015"}, {"body": "sorry made mistake meant commit right last year february exactly meant still plans continue developing personal project mentioned last official release last year f wrong thanks", "d": "4/2015"}, {"body": "last commit dev branch hours ago", "d": "4/2015"}, {"body": "ohh see great know still kicking awesome projet", "d": "4/2015"}, {"body": "nt think define method data property vue component seems done", "d": "4/2015"}, {"body": "nadirabid pass method component", "d": "4/2015"}, {"body": "btw currently going around problem creating closure capture value save another variable", "d": "4/2015"}, {"body": "could following javascript var popupcomponent vueextend methods open function method definition instantiate popupcomponent additional methods javascript var popup new popupcomponent methods close function method definition", "d": "4/2015"}, {"body": "vue autobind functions inside data objects binding fine", "d": "5/2015"}, {"body": "good job", "d": "4/2015"}, {"body": "fullfs happening chrome", "d": "3/2015"}, {"body": "youngsteveo yep check subject please occurs probably", "d": "3/2015"}, {"body": "fullfs whoops missed sorry", "d": "3/2015"}, {"body": "quick search shows fixed related issue traced found issue may come textarea child template placeholder set textarea already contained text actually placeholder vue nt handle situation wish helps little issue", "d": "3/2015"}, {"body": "liuyanghejerry great work gathering information thanks way using everything works fine wonder", "d": "4/2015"}, {"body": "fullfs right guess workaround", "d": "4/2015"}, {"body": "vwith used change editor html like html maybe stackoverflowcom good place ask type questions", "d": "3/2015"}, {"body": "ok thanks take question stack", "d": "3/2015"}, {"body": "right way terms routing vue since really scope framework depends app needs cases recreating vue instance fine since unless page consists thousands child instances render fast enough ux perspective want cache already instantiated vue instance remove dom instead destroying later route activated simply reappend also benefits persisted state needed", "d": "3/2015"}, {"body": "got thanks carry thank framework", "d": "3/2015"}, {"body": "beware use combined jquery end memory leaks", "d": "3/2015"}, {"body": "boussou mean", "d": "3/2015"}, {"body": "nested tags invalid browsers parse fact contain blocklevel element blocklevel element close tag circumstance inner tag closes outer one sibling elements improve html code solve problem example change inner demo", "d": "3/2015"}, {"body": "thank simple problem", "d": "3/2015"}, {"body": "another expanded question following html code two tables tablea table nt reflect vue model tableb table reflects vue model focus focus html html messages json key key code completely different perhaps", "d": "3/2015"}, {"body": "first table wo nt affect parent data second table using rebuild nested repeat dom input box always loses focus type maybe try way complete goal html key jsfiddle however giving every item property input stops losing focus using really makes confused think need time step source code vue", "d": "3/2015"}, {"body": "code wanted wo nt affect parent data want affect use key like understood", "d": "3/2015"}, {"body": "questions please open issue", "d": "4/2015"}, {"body": "need define data create view instance even null dynamic properties use see docs", "d": "3/2015"}, {"body": "var data list var vue new vue datalistpush gt \u76d1\u542c\u5230\u53d1\u751f\u53d8\u5316", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "\u6dfb\u52a0\u65b0\u6570\u636e\u53ef\u4ee5\u7528", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "try though appears causes string quotes passed argument giving filter something like", "d": "3/2015"}, {"body": "calebboyd", "d": "3/2015"}, {"body": "string passed literally said must escape probably parser problem get around fixed fiddle", "d": "3/2015"}, {"body": "calebboyd", "d": "3/2015"}, {"body": "make fiddle", "d": "3/2015"}, {"body": "yes use fiddle", "d": "3/2015"}, {"body": "also noticed ready events called reverse order vrepeat list created events called n followed ready events n maybe behaviours related", "d": "3/2015"}, {"body": "hmm diff move algorithm ends inserting instances reverse order easy change might want time animations based reliable", "d": "3/2015"}, {"body": "yeah work wed mar pm evan notifications githubcom wrote hmm vrepeat diff move algorithm ends inserting instances reverse order might easy change might want time animations based index reliable reply email directly view github", "d": "3/2015"}, {"body": "hey guess kinda hard comment error without fiddle finally time create stripped version look error tell working intended", "d": "4/2015"}, {"body": "hmm class interpolation sets class attribute evaluated string overwrites classes added think maybe worth make support taking object make computed property", "d": "4/2015"}, {"body": "angular chooses depending type received maybe good way go also welcome possibility using array", "d": "4/2015"}, {"body": "objects supported via", "d": "6/2015"}, {"body": "cool thank much great work way help push project forward", "d": "6/2015"}, {"body": "moment helpful thing probably hanging gitter channel vuejsdiscussions help people also writing tutorials blog posts would great", "d": "6/2015"}, {"body": "busy work recently also feature set stabilized nt want pack vue core planned changes mainly default true add improvements", "d": "3/2015"}, {"body": "ah good know wondering moving meteor would impact release cycles", "d": "3/2015"}, {"body": "thanks response sounds promising", "d": "3/2015"}, {"body": "think need specify el option case el sitecontent described remove", "d": "3/2015"}, {"body": "assume using older version vue code would work nt provide option vm instance unmounted state call instead js var vue require vue var title vueextend template title var title new title data title awesome title title mount sitecontent use divsitecontent root node references", "d": "3/2015"}, {"body": "getting lunch realized taking wrong approach changed code update datainput updated vmodel vhtml first assigned vue object variable order target html javascript var vm new vue el editor filters marked marked pseudocode function myajaxcallback myajaxdata vm datainput myajaxdata myfield", "d": "3/2015"}, {"body": "nt return array returns length array push", "d": "3/2015"}, {"body": "vue detect changes made directly setting array indices eg wo nt detected instead need use trigger watcher", "d": "3/2015"}, {"body": "document said problem due limitations javascript limitaion could please make sepecific fact find works try detect array", "d": "3/2018"}, {"body": "heard array detected defineproperty", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "timeout", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "\u662f\u53ef\u884c\u7684\u554a", "d": "3/2015"}, {"body": "\u6ca1\u6709events \u53c2\u6570 vonclick noticedata xxx event", "d": "3/2015"}, {"body": "\u4e0d\u9700\u8981\u76f4\u63a5\u64cd\u4f5c dom dom vue \u8c8c\u4f3c\u4e0d\u592a\u5efa\u8bae\u76f4\u63a5\u64cd\u4f5c dom", "d": "3/2015"}, {"body": "dom event active class \u53ef\u4ee5\u7528 vclass", "d": "4/2015"}, {"body": "functionality added", "d": "3/2015"}, {"body": "thanks", "d": "3/2015"}, {"body": "exactly problem component designed use top child tag container bad surprise started nesting writing following select child element whatever deep css selector working root ca nt write think good way set restriction maybe people need select children", "d": "3/2015"}, {"body": "found workaround issue html selector", "d": "3/2015"}, {"body": "fixed merging", "d": "4/2015"}, {"body": "case need approach nt use data bindings", "d": "3/2015"}, {"body": "thanks feature addition use case string replacement large svgs eg replace occurrences something else nt want add svg string data knew nt going change worried might incur unnecessary overhead might totally offparanoid open suggestions better implementations", "d": "4/2015"}, {"body": "addressed original case work warning time", "d": "4/2015"}, {"body": "awesome thank", "d": "4/2015"}, {"body": "issue well workaround using start property set set annoying sure work use case", "d": "3/2015"}, {"body": "actually design transition supposed run element attacheddetached state changed initial render element already dom state change also imagine items transitions page probably nt want everything animate initial render workaround explicitly trigger state change initial render basically ayamflow said", "d": "4/2015"}, {"body": "makes sense trigger every transition page load though would convenient able set flag component transition happens immediatly maybe kind directive hide thing might belong userland", "d": "4/2015"}, {"body": "yeah flag attribute would probably help something like", "d": "4/2015"}, {"body": "transitiononinit looked react flag thing", "d": "11/2015"}, {"body": "keeping track part planned features", "d": "11/2015"}, {"body": "ever implemented", "d": "9/2016"}, {"body": "pierbover prop gt transition api change", "d": "9/2016"}, {"body": "awesome fnlctrl", "d": "9/2016"}, {"body": "question nt really anything vue case use build tool like gulp create two separate tasks one runs js files browserify vueify transform one runs css css prefixer", "d": "3/2015"}, {"body": "thanks problem nt explicit css files vueify transform extracts styles vue file inserts insertcss module document head", "d": "3/2015"}, {"body": "ah sorry misunderstood question suspect gulp plugin prefixes html work vue components like one example nt work could always separate css components prefix gulp require css template property component options using browserify", "d": "3/2015"}, {"body": "currently preprocessors supported vueify hardcoded think make extensible", "d": "3/2015"}, {"body": "moving discussion", "d": "3/2015"}, {"body": "thanks quick great comments gulphtmlautoprefixer", "d": "3/2015"}, {"body": "quick gist people want run autoprefixer using custom preprocessors", "d": "5/2015"}, {"body": "thanks sun may kris zima notifications githubcom wrote quick gist people want run autoprefixer using custom preprocessors reply email directly view github", "d": "5/2015"}, {"body": "silvershell tried jsfiddle issue occured could tell us issue code", "d": "3/2015"}, {"body": "closing inactivity", "d": "5/2015"}, {"body": "first select boxes like question html select box value string want whole object value could use jsonstringify jsonparse though people would consider ugly solution", "d": "2/2015"}, {"body": "hello know options attribute using repeat suitable cases eg add empty value first thank explanation add support whole object select would nice feature", "d": "2/2015"}, {"body": "found another way get error add item run timeout timeout set value cleaning list see error demo", "d": "2/2015"}, {"body": "note change default value text null text default work well", "d": "2/2015"}, {"body": "guess summarize problem anyone else list cleared conditions false however inner condition still executed resulting error even though skipped due outer condition evaluating false looks like evaluated hierachically instead order evaluated", "d": "2/2015"}, {"body": "expressions expected valid javascript unless set flag true", "d": "2/2015"}, {"body": "thank sorry missed docs", "d": "2/2015"}, {"body": "implemented", "d": "6/2015"}, {"body": "issue nt happen chrome firefox also changed include webcomponentslitejs firefox issue nt happen think related shadow dom vue", "d": "2/2015"}, {"body": "make simple reproduction issue sun feb pm notifications githubcom wrote issue nt happen chrome firefox also changed include webcomponentslitejs firefox issue nt happen think related shadow dom vue reply email directly view github", "d": "2/2015"}, {"body": "test link test chrome click link view updated test firefox view nt change thanks", "d": "2/2015"}, {"body": "looks like getting mangled", "d": "2/2015"}, {"body": "wow actually nothing vue seems webcomponentjs breaks safari ff", "d": "2/2015"}, {"body": "filed issue", "d": "2/2015"}, {"body": "silly mistake made everything works fine", "d": "2/2015"}, {"body": "looks like looking", "d": "2/2015"}, {"body": "right pretty much however interesting note compiled directives would cool way thing something like compiled could use cleaner syntax like instead btw really love framework managed create elegant well documented easily comprehensible software economy features previously used angular finally realized despite supported google widely recommend inelegant overcomplicated inefficient mess also interested mithril ultimately turned idea forced template html javascript use jade works well vuejs frontend software stack currently consists vuejs jquery jade stylus autoprefixer browserify gnu make setup working really well moving vuejs breath fresh air", "d": "2/2015"}, {"body": "noticed one significant difference feature originally proposed allow caller get return value since usual case one receiver significant disadvantage example say got callback child needs either confirm reject changes based success callback may require contacting server andor user interaction easily handled parent returning promise callback called however possible granted could solved parent responding broadcast event need event handlers context possibly way differentiate children type", "d": "2/2015"}, {"body": "actually additional arguments provided passed callback", "d": "2/2015"}, {"body": "talking return values", "d": "2/2015"}, {"body": "oh see misread case promise valid sure worth adding specific optionsyntax hand possible use simple callbacks", "d": "2/2015"}, {"body": "ok callbacks bad option still like idea option could really simplify parentchild interaction coupling", "d": "2/2015"}, {"body": "think could easily implemented mixin including core would feel redundant btw appreciate kind words framework", "d": "2/2015"}, {"body": "understand reluctance add features parallel way work together ignoring ability return data would like thought", "d": "2/2015"}, {"body": "agree userland plugin suggestion anything core plugins", "d": "2/2015"}, {"body": "agree keeping vuejs simple plugins require extra boilerplate code increase page startup time due loading extra js files also nt follow release schedule create added maintenance headache issue keeping plugins date become problem every project ever used significant number plugins", "d": "3/2015"}, {"body": "jcoffland thinking making template syntax cleaner taking another look proposal think makes sense start feel actually fall category directives deserve better semantic syntax want support dom events vue component events gets bit tricky comes naming think clean well suited dom events means need use different syntax vue event handlers currently thinking would look like would trigger child emits event", "d": "6/2015"}, {"body": "proposed way looks good would impose restrictions event naming right use complex event names like namespaceeventname action submit etc possible guess though may good thing ps agree jcoffland something like would nice", "d": "6/2015"}, {"body": "agree cleaner current directives vs one disadvantages see conflict ca nt name prop like onclick example never named props like people may highlighting caveat guide would helpful though", "d": "6/2015"}, {"body": "like v prefixes simply says reader vue attributesyntax makes kind vue namespace", "d": "6/2015"}, {"body": "", "d": "6/2015"}, {"body": "azamatsharapov pass data props prop name like nt make much sense internally throw warning people actually name props", "d": "6/2015"}, {"body": "yeah know everyone english speaker around globe warning would good yes", "d": "6/2015"}, {"body": "agree v prefix good", "d": "6/2015"}, {"body": "think vue events different dom events cleaner separation good vue similar dom event system would prefer another way like events looks new event directives looks good usable", "d": "6/2015"}, {"body": "prefer v prefix vue related attributesproperties", "d": "6/2015"}, {"body": "prefer prefix", "d": "6/2015"}, {"body": "prefix useful working team tell designer colleagues mess anything prefixed long also since everybody prefers prefix changing everything vue related html prefix example directive nt prefix", "d": "6/2015"}, {"body": "azamatsharapov depending docs directive params", "d": "6/2015"}, {"body": "since deprecated one component related directive", "d": "6/2015"}, {"body": "oevgeny thanks reminding directive param takes argument anyway saying changing everything vue related html prefix ask ok without prefix anyway sound weird prefix", "d": "6/2015"}, {"body": "azamatsharapov also said directive nt prefix sounds weird like also look", "d": "6/2015"}, {"body": "oevgeny meant directive items things earlier said everything vue related let argue nonnative english speakers also said depending docs probably meant according docs anything related languagegrammar terminology mistakes discussed", "d": "6/2015"}, {"body": "azamatsharapov want say others list directive params ok according docs reason nt prefixes hope english bad know agree mistakes sorry", "d": "6/2015"}, {"body": "looks like community prefers stick current syntax think worth giving better clearer name changed going move forward prefix", "d": "6/2015"}, {"body": "agree sticking prefix vuejs directives original feature request user already create component parameters namespace via issue asks ability create user defined callbacks similar manner perhaps using component option named", "d": "6/2015"}, {"body": "big fan functionality pretty much achieved using already come long way reducing api removing multiple ways thing abbreviation entirely clear unless already know used functionality would good candidate mixin really desired", "d": "6/2015"}, {"body": "jcoffland mentioned original proposal usage already simulated directly calling parent easy abstract mixin although like idea well mostly style preference seems others prefer directive style also youngsteveo mentioned like avoid vue official api multiple ways thing best left userland strongly prefer style", "d": "6/2015"}, {"body": "agree keeping api simple angular went wrong still bothered squirrelly nature event system vs direct callbacks mentioned return values supported thing nt like events run tree caught explicitly stopped component emits event nt use event runs willy nilly around component tree direct callbacks happen cases one receiver easy default case events multiple receivers default also need three different functions amp emit events first place could wire components together explicitly method callbacks code would readable simpler imho note work around call parent method works want map callback parent would also nice able map callbacks siblings using ref id example example defines callback user maps defines callback mapped method would also like able put expressions callbacks", "d": "6/2015"}, {"body": "aha realized wanted already works due internal compilation improvements", "d": "6/2015"}, {"body": "even works sibling calling idea", "d": "6/2015"}, {"body": "awesome looks like pretty much exactly looking documentation syntax", "d": "6/2015"}, {"body": "normal props paramattributes renamed props except pass methods methods autobound parent", "d": "6/2015"}, {"body": "got thanks tried passing methods beginning great allows asking adding extra option never really liked name anyway attempt conform existing scheme like better tried run fiddles nt work load although appears run browser console get expression run expression evaluated vuejs load time function call usage work return values eg like", "d": "6/2015"}, {"body": "call braces treated statement return value remove braces work", "d": "6/2015"}, {"body": "oh see mean parenthesis braces though", "d": "6/2015"}, {"body": "oops yes", "d": "6/2015"}, {"body": "fixed merging", "d": "2/2015"}, {"body": "thanks fixed", "d": "2/2015"}, {"body": "ca nt help first problem need give specific situation undefined second issue yes way get data child pass parent variable child using use modifies variable case would use variable vue guide talks data passing vwith jsfiddle passes parent field child manipulates textbox top child component change text underneath also changes parent scope meaning working want html vara", "d": "2/2015"}, {"body": "oh using bidirectional bindings using introduced guess use vwith case think really nice could expose sort api component scope introducing property viewmodel expose certain functionsdata", "d": "2/2015"}, {"body": "well data already exposed access example way annoying imperative comparison would access child data idea able update without breaking changes", "d": "2/2015"}, {"body": "yeah saying child data exposed gives read write access child data potentially dangerous however suggesting commonjs style functionality components let say data variable child component read well modify could expose function child component way could parent could read child component parent accidentally modify gives fine grained control really want expose components", "d": "2/2015"}, {"body": "run something similar ref inside nested component using passed data data passed data changed inside became workaround manually saving reference reference hook probably best way go things need get done", "d": "2/2015"}, {"body": "fix related bug sure addressed issue though", "d": "2/2015"}, {"body": "closing since actionable repro investigate feel free reopen pops", "d": "5/2015"}, {"body": "actually transition triggered via directive belongs parent context transition functions points parent instance move child works expected maybe less confusing always call transition functions instance bound element animated one pretty simple change thoughts ayamflow", "d": "4/2015"}, {"body": "transition function context set element closest vm instance means element root node instance instance used context regardless whether transition triggered parent directive", "d": "4/2015"}, {"body": "yes thought transitions methods set current vm guess expected behavior target transition thanks change", "d": "4/2015"}, {"body": "could use option tag add remove vmodel filter etc also advantage explicit", "d": "2/2015"}, {"body": "problem ing tags scope data set template compiled example pass data component using value nt set big issue using directive time problems", "d": "2/2015"}, {"body": "hmm parameter nt directive specific parameter hence expressions evaluated case want input output seems strange", "d": "2/2015"}, {"body": "okay might right one side point noticed investigating first problem look source code though seems suggest take expression reason nt take filter seems strange", "d": "2/2015"}, {"body": "tmiguelt might try sure makes sense perhaps using computed property would preferable", "d": "2/2015"}, {"body": "support filters merging", "d": "2/2015"}, {"body": "probably looking dist file instead code checkbox", "d": "2/2015"}, {"body": "interestingly neither parent child hooks fired using thought might let get vm dom pass curious", "d": "2/2015"}, {"body": "thoughts", "d": "2/2015"}, {"body": "workaround vm", "d": "2/2015"}, {"body": "note hook depends hook turn triggered two ways element already document vm compiled vm inserted via vue either method like directive controls child vm like directly inserting vm element able trigger stated docs", "d": "2/2015"}, {"body": "would handle case", "d": "2/2015"}, {"body": "knownasilya hi found solution attaching vue infowindow regards", "d": "9/2015"}, {"body": "pavelpolyakov see comment", "d": "9/2015"}, {"body": "knownasilya thought found another solution well anyhow think looks better", "d": "9/2015"}, {"body": "supposed work design", "d": "2/2015"}, {"body": "okay thanks help think add list things need user friendly error messages make pr get chance", "d": "2/2015"}, {"body": "show jsfiddle shows behaviour copied code changed component base vue instance completely skipping", "d": "2/2015"}, {"body": "think thats point change renders expected something", "d": "2/2015"}, {"body": "apologies tmiguelt post unnecessarily ambiguous skipped bit template spews custom filter returns expected behaviour actually see nothing case displaying stringified array objects updated op avert possible confusion anyone else might caught issue thank much fix calebboyd", "d": "2/2015"}, {"body": "fixed merging", "d": "2/2015"}, {"body": "thanks evan smiley", "d": "2/2015"}, {"body": "sorry last error chrome app component must defined model entity since tried two ways mentioned nt work really ca nt accept make html file several templates separating sharing data way implement things like controllers vuejs", "d": "2/2015"}, {"body": "nt think vue simulate controllers like right make child component often still put child template child component ca nt use existing parent template example work think would worked vue changed start compiling html parent scope issues compiling working way actually second point thread similar problem wanting controllerscomponents without template evan think reasonable way make everyone happy scoping issues compile template child scope child component template far know component without template totally useless moment going break existing code think would solve problems course could call controllers try distinguish components like ember either way might good idea", "d": "2/2015"}, {"body": "random idea maybe attribute flag eg indicates nt want content transclusion inside component", "d": "2/2015"}, {"body": "yeah quite like idea effect suggestion explicit might allow reuse component different template contexts", "d": "2/2015"}, {"body": "attribute", "d": "3/2015"}, {"body": "like sound well ran situation found expecting vue use inline template option nt provided even expect used template option provided", "d": "3/2015"}, {"body": "looking thing", "d": "3/2015"}, {"body": "vue great inlinetemplate could primary frontend framework using pimcore allows drag amp drop snippets serverside html editables place page could great use vue component generated html", "d": "3/2015"}, {"body": "ugly hack works case course work direct child components", "d": "3/2015"}, {"body": "", "d": "3/2015"}, {"body": "major improvement idea included future release", "d": "4/2015"}, {"body": "way getting keycode directly within filter use separate listener", "d": "2/2015"}, {"body": "believe supposed use", "d": "2/2015"}, {"body": "sorry jsfiddle ate fiddle recreate", "d": "2/2015"}, {"body": "fiddle still nt seem repeater", "d": "2/2015"}, {"body": "closing inactivity", "d": "5/2015"}, {"body": "interesting problem since know component state stored data variable always override original data store original data rather function generates module component like javascript function exactly data function component originally function getdefaultdata return b b moduleexports data getdefaultdata methods resetdata function data getdefaultdata assuming components commonjs modules recommend anyway browserify vueify transform", "d": "2/2015"}, {"body": "seems like work thanks", "d": "2/2015"}, {"body": "tmiguelt cheapsteak nt work anymore vue", "d": "10/2016"}, {"body": "moduleexports data defaultdata methods resetdata function data defaultdata write like ca nt work must function get default data wan na reset", "d": "10/2016"}, {"body": "vue reference", "d": "11/2016"}, {"body": "works thx", "d": "11/2016"}, {"body": "", "d": "2/2017"}, {"body": "objectassign data optionsdata works", "d": "3/2017"}, {"body": "caution bind context using method may want apply context", "d": "6/2017"}, {"body": "thank solution would work component function", "d": "8/2017"}, {"body": "works components", "d": "8/2017"}, {"body": "resetting initial property values running lifecycle hooks", "d": "9/2018"}, {"body": "thanks seems duplicate", "d": "2/2015"}, {"body": "edit post put backticks around html markdown parser nt delete", "d": "2/2015"}, {"body": "done thanks", "d": "2/2015"}, {"body": "thanks much easier read according html spec element contain phrasing content ie content mostly text related markup table list accepted child nodes quite possible browser deleted component placing inside issues like past basically yes expected behaviour vue issue related html spec obvious solution use elements direct root vue components", "d": "2/2015"}, {"body": "probably use vcomponent tag start use template block must define template component dom opposed using templating engine like jade handlebars", "d": "1/2015"}, {"body": "elements special usage vue used block container nt work", "d": "2/2015"}, {"body": "thank reply fiddles minimum code caused error actually like use vrepeat template vcomponent paramattribetus explain created new fiddles fiddle work fine would nt like nesteddiv tryed change div template nt work tryed vrepeat template outside vcomponent vwith inside amp enable replaceoption nt work implement use paramattributesoption without nesteddiv vrepeat vcomponent might wrong way", "d": "2/2015"}, {"body": "nt think able use template specify property seems like trying", "d": "2/2015"}, {"body": "oh makes sense would nt like write template html actually use amp building large app used customtag instead vcomponent expected", "d": "2/2015"}, {"body": "use appendto older vue version", "d": "2/2015"}, {"body": "far know ca nt make input components limitations vue made thread discussion nt heard anything yet", "d": "1/2015"}, {"body": "vwith twoway", "d": "2/2015"}, {"body": "possible make optionally oneway new oneway directive alternative maybe missing way parse string literal within", "d": "4/2015"}, {"body": "shoshi try using mentioned starting post oneway still mistaken also could describe usecase", "d": "4/2015"}, {"body": "yes work quick oversimplified gist use case basically main vue makes get index request api among many things sets type modal load modal sets template subcomponent makes another get show request load modal data hoping another directive might accomplish guess semantic argument since vue tags start makes sense attrs normally present html would prefixed like attrs like make perfect sense custom attrs nice option prefix way making look obviously different normal html attrs", "d": "4/2015"}, {"body": "nevermind issue still present need pass parent vue component needs mustaches mustaches data becomes twoway bound see line coffeescript close change component changes data parent vue", "d": "4/2015"}, {"body": "strangely enough issue camel case attrs issue dashed attrs however using dashes prompts error vue warn seem using camelcase paramattribute html nt differentiate upper lower case use hyphendelimited attribute names info see seems like actual bug", "d": "4/2015"}, {"body": "syntactic sugar twoway nt really understand want change child close nt want child view change affect parent simply make local copy compiled hook", "d": "4/2015"}, {"body": "using oversimplification see seems bit odd really contents modal contain button clicking button makes ajax call call succeeds modalview changes success state another subcomponent child view subcomponents conditions thus nt want update parent every time child changes based new data could set extra var nt change like suggested nice overcomplicate adding stuff need pass value also browser nt need spend extra resources waiting changes never occur though sure much matters vue know makes difference angular angular directives multiple options scope really useful sure goal keep vue light think great chose vue angular project possible oneway binding could make future version would fit within vision vue still architectural option missing thanks hard work creating maintaining updating vue truly fantastic", "d": "4/2015"}, {"body": "replicate behavior jsfiddle make easier solve issue", "d": "1/2015"}, {"body": "fiddle duplicate", "d": "3/2015"}, {"body": "resolved fix", "d": "4/2015"}, {"body": "indeed fixed", "d": "2/2015"}, {"body": "seems like nt working debug looks like changes value traversed looks fine", "d": "1/2015"}, {"body": "btw using directly appending google maps infowindow everything worked fine", "d": "1/2015"}, {"body": "template changes well since tried added comments element", "d": "1/2015"}, {"body": "possible make isolated reproduction issue", "d": "1/2015"}, {"body": "found issue setting instantiation worked fine nt work changed everything works", "d": "1/2015"}, {"body": "way change one attribute time something like", "d": "1/2015"}, {"body": "use anyway trigger one update cycle", "d": "1/2015"}, {"body": "oh good", "d": "1/2015"}, {"body": "useful path string eg", "d": "1/2015"}, {"body": "thanks working replaced nt bug breaking change bug", "d": "1/2015"}, {"body": "directly replacing also work make isolated jsfiddle replacing causing original issue", "d": "2/2015"}, {"body": "closing inactivity", "d": "5/2015"}, {"body": "sure necessary general want avoid implicit conventions since makes code harder understand unless already know convention", "d": "2/2015"}, {"body": "closing inactivity", "d": "5/2015"}, {"body": "problem bit today attr would work", "d": "2/2015"}, {"body": "sorry late reply turns attr would completely solve problem say markup html test since allowed inside browser throw away end empty nothing trancluded html test since supposed nested directly browser try smart render html test whole transcluded component template obviously ideal general hard make transcluding table elements work properly nt really see benefits cases probably want pass data let component handle rendering", "d": "4/2015"}, {"body": "clarify issue using list children generated", "d": "1/2015"}, {"body": "yes exactly", "d": "1/2015"}, {"body": "issue allow type horizontal cancellation listener order remain order registered regardless children sorted later basically means event trigger order guaranteed vm order array think broadcast definition reach possible children level words behavior component able affect event propagation children siblings original use case probably better idea pass extra argument broadcast call accurately identify matching child", "d": "2/2015"}, {"body": "suspicion inputs blurring actually deleted recreated next frame means lose focus guess though would mean vue reruns entire change one object element seems unnecessary anyway fiddle anyone wants look", "d": "1/2015"}, {"body": "thank codepen tmiguelt think suspicion absolutely correct", "d": "1/2015"}, {"body": "vue converts object fresh array update ca nt place updates array identity changed maybe diffing actual object better solution work around converting object array use array instead need data persistence convert array back object nt sound ideal work", "d": "2/2015"}, {"body": "thank end implementing suggested workaround ago wadditional parsing data persistence luckily nature data completely arbitrary worked fine happy close thread unless prefer leave open future implementation purposes", "d": "2/2015"}, {"body": "fixed beta", "d": "5/2015"}, {"body": "nice feature using beta like vmodel array index mycustomkey working nice", "d": "8/2015"}, {"body": "yeah older versions android quirky implementation bugs nt device version test glad know found workaround", "d": "2/2015"}, {"body": "guide avoid directly setting elements databound array indices changes picked vuejs instead use agumented set method instead use fiddle fixed also fixed coffeescript getting rid entirely", "d": "1/2015"}, {"body": "zhouzhuojie probably close issue seems like question answered tmiguelt", "d": "1/2015"}, {"body": "assuming question along lines nt function get called call submit form directly cause submit button clicked suspicion js problem vue mdn says form onsubmit event handler example onsubmit return false triggered invoking method geckobased applications general guaranteed invoked html user agents", "d": "1/2015"}, {"body": "basically tmiguelt said seems browser behavior issue", "d": "2/2015"}, {"body": "couple times seems watchedreferenced property nt originally specified data section adding property usually cures", "d": "1/2015"}, {"body": "issue also repeats try nullify data property bind several times example html customerid customername try set raise error first run modify raise error next loop", "d": "1/2015"}, {"body": "changing fixes problem", "d": "1/2015"}, {"body": "try fiddle html value", "d": "1/2015"}, {"body": "thanks", "d": "1/2015"}, {"body": "although reason nt work fiddle html value", "d": "1/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "", "d": "1/2017"}, {"body": "lshnltt check", "d": "1/2017"}, {"body": "sterilesummer", "d": "1/2017"}, {"body": "weird behavior trying something weird tag nt really make sense explicitly hidden dom components designed add content dom look dom code runs appears html gfd gfd reason completely disappeared anyway might want rethink code want component nt put want reference element use instead", "d": "1/2015"}, {"body": "nt see problem using vcomponent also believe planned behavior disappears compilation nice want divide html files blocks block container contents place like component loses vm context one el also present points comment node nt see problem link vref component vm", "d": "1/2015"}, {"body": "tags treated symbolic wrappers block nt work", "d": "2/2015"}, {"body": "okay understood another question would consider make support directives please really nice use sometimes especially costructions tabletrtd guess could redirect top level element component template check one would render", "d": "2/2015"}, {"body": "sure understand use case tabletrtd give example", "d": "2/2015"}, {"body": "templates placing keep templates tpl files near js files time time use plain without classes serving template holder looks like lt lt one holder without classes visual decoration example case forced keep component template container separated content container thing want keep content one tpl file case ca nt use extra table structure components whose containers display inlineblock", "d": "2/2015"}, {"body": "using though seems simply want access raw template something like use template", "d": "2/2015"}, {"body": "nah accessing template case case decomposition want decompose page several components content toppanel header footer etc also smaller components using component mount point allows escape using extra wrapper example got block named toppanel html main articles feedback block container notice actual part toppanel visual decoration want mount toppanel page actually two ways first one get extra wrapper without actual role use second one got rid extra wrapper toppanel containerstarting point got detached content makes mess templates preventing toppanel normal reusing using solves problem serves mount point disappears rendering", "d": "2/2015"}, {"body": "guess using", "d": "5/2015"}, {"body": "looks like issue one root element template switching table divs recreates problem adding albeit invalid wrapper around fixed", "d": "2/2015"}, {"body": "possible duplicate fails silently component root element", "d": "2/2015"}, {"body": "yes think right duplicate issue guess leave discussion thread", "d": "2/2015"}, {"body": "ca nt change template component created property component instances parameter pass constructor initial template sort loading barspinner replaced content loaded way create component spinner component new content loaded used dynamic vcomponent parent template changed variable bound new component loaded server causing component change spinner new component also wo nt need scope data functions also use dynamic vpartial", "d": "1/2015"}, {"body": "thanks comment use case different trying display html markup returned server page html markup vuejs directives eg vtext etc want reactive figured part template fine suppose could load html data part different component creating component instance pass template", "d": "1/2015"}, {"body": "still think situation look fiddle code duplicated html javascript create default component vuecomponent default template replaced seconds create parent viewmodel var vm new vue el body data currentview default pretend load data server would actually get url data function windowsettimeout function", "d": "1/2015"}, {"body": "absolutely right actually using currentview pattern described main website nt think would also apply case well thanks showing light", "d": "1/2015"}, {"body": "hi guys way achieve vue fiddle nt work anymore version wondering new way", "d": "6/2016"}, {"body": "enchufadoo async components", "d": "6/2016"}, {"body": "simplesmiler think loads code component trying render component dinamically example provided achieve currentview changes component changes understand seen many people postscomments say achieved using still nt seen working example ca nt event get work simplest code wondering possible", "d": "6/2016"}, {"body": "simplesmiler realized achieve using vif thanks", "d": "6/2016"}, {"body": "enchufadoo well question nothing original topic wink correct way", "d": "6/2016"}, {"body": "tmiguelt ok go single file template syntax return ajax like html name template loaded ajax export default data return name ajax template make work vue want work way coz ide support etc", "d": "10/2016"}, {"body": "tmiguelt ok go single file template syntax returned ajax like html name template loaded ajax export default data return name ajax template make work vue think putting native protected runtime template compiler something vue missing want work way coz ide support etc nt want use webpack code splitting like want able load template ajax use browser", "d": "10/2016"}, {"body": "emahuni think looking", "d": "2/2017"}, {"body": "experiencing error revert back make app work almost definitely bug could try investigations", "d": "1/2015"}, {"body": "actually pretty weird indicates linker called target vm already destroyed would need isolated reproduction identify cause", "d": "1/2015"}, {"body": "kvdmolen repro issue jsfiddle look", "d": "1/2015"}, {"body": "agonbina definitely try pinpoint amp isolate difficult happens sometimes though happen right emit event receiver vcomponent updated executed html perhaps gives first insight according hackernewsexample working isolating issue", "d": "2/2015"}, {"body": "please see comment issue believe issue related events cause components added removed changing variables effect alters event propagation case list event listeners may change event code traversing list think event propagation code make copy event listener list begins processing list iterating list check listener still exists calling", "d": "2/2015"}, {"body": "closing since likely fixed transclusion refactor", "d": "5/2015"}, {"body": "vif conditionally insert remove element based truthyness binding value need think javascript expression evaluate false array empty", "d": "1/2015"}, {"body": "like checking mutation graph array become empty set false", "d": "1/2015"}, {"body": "nt check array mutation vue", "d": "1/2015"}, {"body": "could", "d": "1/2015"}, {"body": "html fiddle", "d": "1/2015"}, {"body": "oh okay nt realize could access array properties inside directive thanks", "d": "1/2015"}, {"body": "item array detailrowid contains dynamic data getting referenceerror detailrowid defined possible handle kind access", "d": "11/2016"}, {"body": "", "d": "6/2017"}, {"body": "sadly unreliable often gives error", "d": "11/2017"}, {"body": "sorry hear question exactly supposed statement posted two year old closed issue zero information exact problem", "d": "11/2017"}, {"body": "issue nt function believe issue vue dynamically creates constructor function using camelized name inherently name variable valid javascript identifier slashes camelize ignores slashes see annoying see thinks believe recommended way namespacing components use hyphens camelize correctly also able used directly html may working library extent", "d": "1/2015"}, {"body": "also think generally recommended use hyphens component identifier dealing web components example polymer required use name attribute component", "d": "1/2015"}, {"body": "component names slashes supported", "d": "2/2015"}, {"body": "script tags bottom page code wrapped dom ready callback element nt exist try instantiate vue", "d": "1/2015"}, {"body": "thanks right", "d": "1/2015"}, {"body": "edit actually trouble figuring exactly causing difference code fiddle going close reproduce consistently", "d": "1/2015"}, {"body": "able reproduce fiddle closely replicating code ca nt tell exactly problem seems something setting parent list compilation", "d": "1/2015"}, {"body": "vue nt support deep watching dependencies vue nt register dependency initially nt exist list objects exactly issue posted couple weeks ago simplified fiddle absolute minimum notice still nt work allselected nt change however define property start even nullundefined value code work fiddle thing changed making list equal", "d": "1/2015"}, {"body": "thanks explanation seems add function exists order add things compile reregister dependencies fixed code close issue related one already open", "d": "1/2015"}, {"body": "put work sure getting error since element html inside nt break though think issue child nodes directive bound gone update honestly shot dark run situation seems like want array seem like right tool job", "d": "1/2015"}, {"body": "fixed", "d": "1/2015"}, {"body": "run problem well node undefined put undefined check node toarray nodechildnodes get working", "d": "7/2015"}, {"body": "going assume nt possible watch object convenient form might manually lot code", "d": "1/2015"}, {"body": "closing inactivity", "d": "1/2015"}, {"body": "bad figured", "d": "1/2015"}, {"body": "think problem value correct amp html always handle strings", "d": "1/2015"}, {"body": "think actually bug works elements nt look like works", "d": "1/2015"}, {"body": "yep right could problem case arithemics value like", "d": "1/2015"}, {"body": "looks like fixed dev branch hope works selects allow multiple values tonumber function support arrays", "d": "1/2015"}, {"body": "", "d": "2/2015"}, {"body": "okay figured issue apparently data passed parent vwith following way caused inconsistent behaviour nt know whether bug desired way working hope helps someone else might run issue", "d": "1/2015"}, {"body": "yep normal vue behaviour afaik update dom frame model changes checking components nt created yet next frame fiddle need access components soon created get dispatch event ready callback parent view model listen perfect example vue guide right", "d": "1/2015"}, {"body": "check memory usage vuenexttick vue deliberately lot things asynchronously avoid blocking ui probably nt delete immediately addition might keep deleted vms longer case need transition rate dom items removed eventually might immediately", "d": "1/2015"}, {"body": "done try isolate code amp get back", "d": "1/2015"}, {"body": "hi isolated code end memory leak even obvious changing thanks note behavior associated pjax framework may know pjax also used github noticed github growing used memory aka memory leak example click repeatedly issue button", "d": "1/2015"}, {"body": "ended conclusion core vue creating leaks source compiler probably closure somewhere", "d": "1/2015"}, {"body": "hmm ran fiddle checked chrome task manager memory usage definitely grow although think still possible could issue code rather vue either way might want look gets back", "d": "1/2015"}, {"body": "hmm looking code suspect memory leak might code calling vue constructor multiple times run modify data necessary", "d": "1/2015"}, {"body": "hi thanks reply pjax application corresponds new page display click app menu button new html content loaded via ajax put main content div corresponding vue object related data initialized remove jquery events call destroy previous view object removing suggest case keep vue object replace el content dynamically", "d": "1/2015"}, {"body": "ca nt speak memory usage situation many better ways going read page guide want make spa vue change pages etc first make pages modules see link use routing library module hash change using webpack put dynamic directive page changes main page component module loaded", "d": "1/2015"}, {"body": "long solves memory leak problem least try trying build alternative heavy angular proto built please help escape monster", "d": "1/2015"}, {"body": "read link provided nt think solve mainly packaging solution could come vcomponent usage wich test", "d": "1/2015"}, {"body": "ah sorry meant whole page section mention routing although highly recommend packaging pages modules anyway since allow lazy load", "d": "1/2015"}, {"body": "tried sample uses deprecated vview vcomponents see memory leaks sadly conclude vue ready prod", "d": "1/2015"}, {"body": "yeah tried new version seem legitimate issue", "d": "1/2015"}, {"body": "ran first example locally chrome dev tools heap snapshots heap recording shows pretty clean garbage collection mind posting heap snapshotrecording results", "d": "1/2015"}, {"body": "tried another way check see memory grows seems chrome choose run gc performance reasons manually forcing gc memory seems recovered red arrow still exist detached dom trees shows leak exists post another capture show step click button problem even recover manually find crazy go app eat smthing like per menu click maybe point chrome would decide recover", "d": "1/2015"}, {"body": "detached dom trees reading using debubgger know retainers object tab maybe example incorrect app bad jquery interaction", "d": "1/2015"}, {"body": "outside task manager initial stage mutliple clicks counter reach click force gc easy interpret even gc lost last column shows pure js memory lower gc", "d": "1/2015"}, {"body": "think heap usage seeing perfectly normal believe see similar usage using frameworks snapshots probably want take lot see keep growing indefinitely gc complex long gc produces proper collection nt affect user experience fine addition chrome lot jit compilation js code compiled machine code gced possibly contributing growing usage even forced gc", "d": "1/2015"}, {"body": "nt bug vue intentional feature guide bottom section hood vuejs attaches hidden property ob recursively converts object enumerable properties getters setters enable dependency collection properties keys starts skipped means nt proxied onto still attached data field accessed fiddle however workaround idea started variable underscore probably private variable probably nt binding dom stuck data structure workaround fine change remove underscore since nt private anyway", "d": "1/2015"}, {"body": "thanks lot", "d": "1/2015"}, {"body": "another case access index key value adding deleting property whoes key starts underscore workaround case fiddle thanks advance", "d": "1/2015"}, {"body": "hmm sure behaviour happening might actually bug think making things difficult using underscores properties trying bind", "d": "1/2015"}, {"body": "actually using underscores really choice data structure defined found easy way change addition found another wired behaviour add another normal property along adding property underscore works fiddle", "d": "1/2015"}, {"body": "properties observed changes use store static data change time need change data structure create beforecompile hook js var data id new vue created function set id dataid also probably keep reference view model instance created properties instead manipulating data object like jsfiddle provided", "d": "1/2015"}, {"body": "running issue nested data contains attributes beginning preventing observation properties beginning makes lot sense view models applies nested data could come number different rest apis starts bit restrictive would possible relax restriction existing rule applies view models simple nested data properties beginning ob property ignored", "d": "7/2015"}, {"body": "davidkhess skipped observation proxying still access templates", "d": "7/2015"}, {"body": "yes skipped observation ca nt bind expect ui update mutated instance let say get resource via rest api store result let also assume rest api response happens contain something like property list topics bind allows multiple selection render page bullet list change value using bullet list never update seems bit landmine people working apis happen use property names rest resources seems reasonable rule vue objects less reasonable apply nested data naming developer may control", "d": "7/2015"}, {"body": "davidkhess fair enough sounds like good idea observe skip proxying root level", "d": "7/2015"}, {"body": "sounds like great solution", "d": "7/2015"}, {"body": "run problem binding images come couchdb stored attachements couchdb would great could observe say objektattachments right copy extra dataattachments property thanks lot change behaviour", "d": "7/2015"}, {"body": "closed via", "d": "8/2015"}, {"body": "yet another example time currency", "d": "1/2015"}, {"body": "currently write filters work better tool condition user interface example application write filter used disable alpha keys disambiguate character used separate decimal places would nice keep functionality though maybe different kind filter", "d": "1/2015"}, {"body": "write filters present longer force update back dom", "d": "2/2015"}, {"body": "good improvement allows almost everything except way currency example storing valid values yes way currency restricting user input yes vue user point view ideally would way explicitly enable disable forced update like example however would probably make sense able set template difference presentational belongs element modified example double pipe loosen filter update cycle maybe separate attribute", "d": "2/2015"}, {"body": "twoway currency problem ca nt fixed disabling sync alone since requires detailed control place cursor updating input value dom particular cases like probably better write custom directive instead", "d": "2/2015"}, {"body": "point disabling sync update input value dom need replace cursor right", "d": "2/2015"}, {"body": "nt want format currency example reason hard interact nt know correctly restore cursor position dom update resets cursor", "d": "2/2015"}, {"body": "thinking format would disabled input manipulated user let user write anything edit yes even though talking would best talking compromise", "d": "2/2015"}, {"body": "oh mean delay formatting user blurs input", "d": "2/2015"}, {"body": "yes", "d": "2/2015"}, {"body": "use although would time make sync model delayed", "d": "2/2015"}, {"body": "great option caveat mentioned problem situations", "d": "2/2015"}, {"body": "vue tag attribute requires expression valid javascript code expression array object number case could hand simple html attribute requires string hence use mustache bindings variable interpolation see ref", "d": "1/2015"}, {"body": "suggestions going hope vuecomponent already precompiles templates nt know sure", "d": "1/2015"}, {"body": "template compilations cached long string frozen object usage seems interesting take look vacation", "d": "1/2015"}, {"body": "thanks informal question plan integrate formatjs considering contributing feature", "d": "1/2015"}, {"body": "tarh personally plan feel free contribute", "d": "1/2015"}, {"body": "think questions coming confusion components guide says vuecomponent asset registration method means return navbar component store manipulate rather defines navbar components created actually instantiate component need use somewhere html template guide mentions ways use vcomponent directive like html use component name tag name like use create component location dom used classical inheritance like defining class using like instantiating class address questions property vue instance automatically populated child components instantiate html along vref directive like html could modify uinav component accessing properties wanted however modifying data child object often better using event system decouples components allowing reused modified lot less difficulty example happens put uinav component inside another component change code accesses child component another level component chain", "d": "1/2015"}, {"body": "documentation vref registers reference child component parent easier access add child component parent vm conversely adding component parent vm add references vm automatically documentation due limitations vue detect properties directly added deleted object therefore expected addingremoving references vm object done via vm add vm delete following documentation one way add components dynamically parent vm well creating vref javascript create root vm var vm new vue el body create classtype profile root vm attached per desired dynamic behavior var profile vueextend name profilecomponent el function return documentcreateelement p template firstname lastname aka alias create instances type profile var new profile data firstname edward lastname snowden alias citizen appendto documentqueryselector somenode var new profile data firstname anne lastname frank alias appendto documentqueryselector somenode add vm add vm add access components via reference directly consolelog vm therefore following might useful instead use framework provided api set add delete", "d": "1/2015"}, {"body": "tmiguelt builtap thanks guys reason make something like library component frontend making something like common admin cp type applications lot components added admit documentations vuejs far basic sample application uses vueloader using plain javascript thanks pointers appreciated happy new year", "d": "1/2015"}, {"body": "html key value value", "d": "12/2014"}, {"body": "nt contain first pass computed property wo nt pick dependency essentially got dead computed property never updates think mentioned docs best practice predictable data structure ie explicitly list tab objects compilation builtap solution also works", "d": "1/2015"}, {"body": "yes recognize nt data structure intentionally requesting either way dependencies updated defined possibly better vue log warning message something bound undefined property case lot trouble working dom behaving strangely warning might save people issue", "d": "1/2015"}, {"body": "use add property observed", "d": "1/2015"}, {"body": "actually reason nt defined example really sure jsfiddle anyway vote vue warning situation think plenty warnings development version good idea", "d": "1/2015"}, {"body": "bit late revisit method actually", "d": "4/2015"}, {"body": "bit later gon na work value computed property comes vuex store", "d": "5/2017"}, {"body": "yeah agree usage feels cumbersome would fairly easy extend proposed method nt need unfortunately deal possible situations handled", "d": "1/2015"}, {"body": "hi briansakal code works fine check ps fiddle use vuejs", "d": "1/2015"}, {"body": "closing inactivity", "d": "1/2015"}, {"body": "tried appears worked able use jquery without well sure bug might help someone", "d": "12/2014"}, {"body": "still problem directive reduces number children implementing directive ladda buttons buttons builtin loading indicators changes dom wrapping children one copied code wrapping one child works fine wrapping multiple children even text nodes resulting newlines annoying vue fails typeerror see", "d": "9/2016"}, {"body": "answer question maybe interested discussion gist basic defintion file far complete", "d": "12/2014"}, {"body": "close duplicate feel free continue discussion briefly looked tds file vue nt time actually write maybe indus solution help", "d": "1/2015"}, {"body": "cyancat sure understand trying explain multi root template exactly nt see reason would want set data property view model use vwith override value many ways", "d": "1/2015"}, {"body": "agonbina set default data issue issue vwith work properly case simple one without default data multi root template single root template multi root template case comment block make template multi root type complicated example include cases could see different caused structure template", "d": "1/2015"}, {"body": "actually template contains one node component becomes block component means nt root node rather documentfragment directives attached placeholder like lost transclusion theoretically fixed though", "d": "2/2015"}, {"body": "fix recently run workaround utilising time priority fixed rather glaring issue imo", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "thanks lot looking forward formal release", "d": "2/2015"}, {"body": "please append jsfiddle example", "d": "1/2015"}, {"body": "duplicate issue closed", "d": "2/2015"}, {"body": "seeing problem exactly likely related notice loop vuejs greater equal think happening calls modify words events cause event listeners added removed example event affects scoped variable components may detached able work around using instead places event could affect value", "d": "2/2015"}, {"body": "scoped available children", "d": "12/2014"}, {"body": "aha make sense love", "d": "12/2014"}, {"body": "thanks", "d": "12/2014"}, {"body": "known issue ie browsers recommended use instead", "d": "12/2014"}, {"body": "mean want virtual dom vue looking standalone virtual dom implementation", "d": "12/2014"}, {"body": "virtual dom vue", "d": "12/2014"}, {"body": "virtual dom vue interesting concept quite different vue current templating strategy realdombased thinking nt see practical implementation without completely overhauling api would feel like different project wo nt happen near future", "d": "12/2014"}, {"body": "thanks man looking forward", "d": "12/2014"}, {"body": "need wrap quotes vue nt treat colon argument separator", "d": "12/2014"}, {"body": "solution version", "d": "1/2016"}, {"body": "version syntax vbind xlink href icon iconid still giving error", "d": "9/2016"}, {"body": "well syntax changed read documentation", "d": "9/2016"}, {"body": "already solution xlink href also got problem able use vattr vbind position used vuejs also component using vuejs", "d": "5/2017"}, {"body": "sure problem nt use vbind issue closed alsomst years please open thread forumvuejsorg need help", "d": "5/2017"}, {"body": "found docs", "d": "5/2017"}, {"body": "simply", "d": "11/2017"}, {"body": "expected behavior current version oneway moment however become twoway next release code would work", "d": "12/2014"}, {"body": "awesome thanks ideas date converting ractivejs due problems templating engine trying figure make code update properties continue conversion knowing work correctly time done converting thanks much vuejs love templating speed ease use", "d": "12/2014"}, {"body": "likely christmas", "d": "12/2014"}, {"body": "related component scope change since belongs parent scope need inject explicitly using really want maybe put child component template", "d": "12/2014"}, {"body": "thank fix code please feedback understanding mistaken smile", "d": "12/2014"}, {"body": "thanks want make pr", "d": "12/2014"}, {"body": "yes ticket closed pr opened", "d": "12/2014"}, {"body": "guess simple one would good enough define function use strict need check assign guess leaves flexibility developer", "d": "12/2014"}, {"body": "thing watch filtered security", "d": "12/2014"}, {"body": "going list settable properties dom nodeelement seems actual usage dedicated directive pretty rare probably meaningful use case since others covered cases needed also trivial write custom directive leave", "d": "5/2015"}, {"body": "tmiguelt dealing third party js like bootstrap jquery usually find best separate logic regarding items vm events like way keep track modal state simultaneously calling appropriate bootstrap methods show modal also may want read mvvm guides also take another look vue docs way trying use computed properties little wrong generally used display purposes modifying state actions paramattributes also noted using vue want try stay away manipulating dom libraries like jquery would much better maintainability wise dom state controlled vue", "d": "12/2014"}, {"body": "still nt explain error none code actively break vue even slightly better way honestly ca nt see issue using computed properties like getterssetters trigger logic changed plus toggle function nt option need actively set visibletruefalse rather toggling opposite value", "d": "12/2014"}, {"body": "root cause issue computed setter triggered compilation phase means dom altered compilation linker work properly brandonjpierce pointed recommended perform dom manipulations computed setters want achieved simply using watchers instead", "d": "1/2015"}, {"body": "michaelliao believe select returning string value select different value see mean", "d": "12/2014"}, {"body": "yes also returns string converted number vuejs number specified", "d": "12/2014"}, {"body": "yeah currently nt support param fix", "d": "12/2014"}, {"body": "updated using vm interpolate render td compile render inner component advice thanks", "d": "12/2014"}, {"body": "write directive implement sorting functionality close issue", "d": "1/2015"}, {"body": "", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "rarely use default behaviour", "d": "12/2014"}, {"body": "nt started converting rather large app yet thing least looking forward", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "replacetrue makes sense always creating one extra layer breaks readability semantic structure html", "d": "12/2014"}, {"body": "cool since breaking change probably wait though", "d": "12/2014"}, {"body": "hand woult possible pass template prevent component replacing node html ie html content like thefooter use template possible", "d": "12/2014"}, {"body": "say less components use replace true go code base get accurate number wednesday december florian morel notifications githubcom wrote hand woult possible pass template prevent component replacing node html ie content like thefooter use template possible reply email directly view github", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "ayamflow reckon want pick old element lifecycle callback attach created also may able pick embedded template using hash tag starts used queryselector use selected element innerhtml template string allows use common trick include templates", "d": "12/2014"}, {"body": "normanzb use case easy seo footer stuff nt want use embedded templates javascript manipulation basically", "d": "12/2014"}, {"body": "ayamflow oh meant want keep content use vue manipulating visual changes right find problem edge version", "d": "1/2015"}, {"body": "yes using vuecomponent vuevueextend", "d": "1/2015"}, {"body": "ayamflow although bit tricky still achievable using method mentioned may want start separate thread someone fixes", "d": "1/2015"}, {"body": "yep thanks try", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "still plans release", "d": "5/2015"}, {"body": "inclined preserve current behavior behavior actual custom elements web components similar angular components defaulting replace true makes bit weird manually mounting instances template replace node mounted using less breakagemigrating work existing apps", "d": "5/2015"}, {"body": "thanks original intention allow simple paths like fail silently property present computed properties indeed seems undesired behavior", "d": "12/2014"}, {"body": "computed property", "d": "12/2014"}, {"body": "", "d": "4/2018"}, {"body": "hasikii \u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u8ba1\u7b97\u5c5e\u6027\u6765\u5b9e\u73b0\u53d6\u53cd", "d": "4/2018"}, {"body": "gloomyline computed\u600e\u4e48\u7528set\u8ba1\u7b97\u6570\u7ec4\u67d0\u9879\u7684\u6539\u53d8\u5462", "d": "4/2018"}, {"body": "hasikii vmodel\u662f value value \u548c change event target valuevalue", "d": "4/2018"}, {"body": "", "d": "4/2018"}, {"body": "putting inside", "d": "12/2014"}, {"body": "thanks fixed", "d": "12/2014"}, {"body": "hey evan unfortunately still working tested branch property tracked set clone repo build dev webpack see happening", "d": "12/2014"}, {"body": "works expected", "d": "12/2014"}, {"body": "moved vuejsdiscussions", "d": "12/2014"}, {"body": "really sure code works binding attribute readonly according mdn fairly sure best way according html spec dyamically modify elements using vue use directive html text fiddle", "d": "12/2014"}, {"body": "tmiguelt vue feature also using attribute different property jmooresparc still put inside using dynamic options using dynamic options nt put anything inside gets rid error example", "d": "12/2014"}, {"body": "see thank situation updaing options object ajax request based different input values change one inputs performing ajax call modifying options object result", "d": "12/2014"}, {"body": "still running issues removing initial", "d": "12/2014"}, {"body": "initial issue unfortunately build good bit initial html server come client populated hybrid returning html vue take causes types problems nt think vue issue resolved end modifications generate", "d": "12/2014"}, {"body": "options depcrated new version similar scenario address cascade add new address encounter iss ajax response select ui show correctly follow capture", "d": "2/2017"}, {"body": "give example", "d": "12/2014"}, {"body": "purely internal implementation note", "d": "12/2014"}, {"body": "think left user space", "d": "12/2014"}, {"body": "okie dokie", "d": "12/2014"}, {"body": "even try example guide also errors uncaught typeerror read property set undefined", "d": "12/2014"}, {"body": "yeah bug give empty function work also fixed branch", "d": "12/2014"}, {"body": "still nt work see example without directive method", "d": "2/2017"}, {"body": "emailerimikko vue directives longer", "d": "2/2017"}, {"body": "content compiled parent scope", "d": "12/2014"}, {"body": "mean amp nt belongs parent scope following value number index", "d": "12/2014"}, {"body": "case first compiled parent scope injected child component since parent scope nt empty different use without component", "d": "12/2014"}, {"body": "got thank", "d": "12/2014"}, {"body": "issue following since everything parent template compiled parent scope well content going inserted child component", "d": "12/2014"}, {"body": "jails thanks replying quite sure understand tag inherit container component scope case since separate vue component scope ie acts separate component might missing something maybe working example fiddle provided would help understand new behavior basically want elements get inserted scope containing instance", "d": "12/2014"}, {"body": "data belongs component scope write way otherwise data belongs parent scope write way hope help", "d": "12/2014"}, {"body": "hmmm intention though want wrap dynamically inserted block markup inside template data instance ready used dynamically inserted block example template html count use way final template html count showing count count given returns data interpolated output look like html showing count works newer releases maybe shed light whether attempting done", "d": "12/2014"}, {"body": "new mechanism explained short semantics block changed uncompiled template injected parent already compiled content injected parent might need rethink expect work case showed fiddle assume trying dynamically inject uncompiled template component achieve template somewhere eg pass id paramattribute hook replace placeholder template content leverage returns cloned fragment template", "d": "12/2014"}, {"body": "hmmm kinda sucks feel great flexibility content insertion mechanism longer situation example control template replacing block plugin used others structure template working components latter child first surely get work using suggestion think usefulness reduced quite bit personally would much rather work way new scope inheritance mechanism ca nt really think use case would need inject content interpolated parent scope child component opinion thanks taking time explain change", "d": "12/2014"}, {"body": "simple idea parent component template coupled state child component except explicitly passed via makes easier reason scoping larger applications", "d": "12/2014"}, {"body": "bit created loading component tried use like html loading belong every view component since nt work forced repeat axloader declaration inside every component template", "d": "12/2014"}, {"body": "thelinuxlich need repeat right case make loader partial replace", "d": "12/2014"}, {"body": "need put every component okay cause logic insertion point ca nt see replace vpartial", "d": "12/2014"}, {"body": "might missing something else way compiled makes much sense useful right ca nt see good reason block components template dynamic block compiled scope parent component inserted instead scope component inserted think option choose want interpolation happen scope containing component would great sure would possible ways", "d": "12/2014"}, {"body": "nvm saw understand decision adopt approach although replacing raw uncompiled block nested useful personally suggestion emulate pre behavior able replace tag beforecompile seems like point already transcluded", "d": "12/2014"}, {"body": "closing discussion behavior still open continued", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "html", "d": "12/2014"}, {"body": "\u4e3a\u6bdb\u6ca1\u4e0b\u6587\u4e86", "d": "12/2014"}, {"body": "jsfiddle", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "html", "d": "12/2014"}, {"body": "click modify limitid \u6211\u8981\u83b7\u53d6\u5f53\u524dlimitid", "d": "12/2014"}, {"body": "\u76f4\u63a5 \u4e0d\u5c31\u884c\u4e86\u561b", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "modify limit data \u7684\u8bdd\u83b7\u53d6\u7684\u5230\u7ed3\u679c\u662f undefined", "d": "12/2014"}, {"body": "\u54e6\u662f\u6211\u5f04\u9519\u4e86 \u76f4\u63a5 \u5e94\u8be5\u5c31\u53ef\u4ee5", "d": "12/2014"}, {"body": "methods modify function consolelog dname smalltestmodal modal show \u663e\u793a\u4e00\u4e2a\u5f39\u7a97 new vue el smalltestmodal data name dname gcost dgcost", "d": "12/2014"}, {"body": "modal directive modal modify \u91cc\u9762\u7ed9\u5b83\u8bbe\u7f6e\u65b0\u7684 \u8fd9\u91cc issue \u4e3b\u8981\u662f bug \u548c feature", "d": "12/2014"}, {"body": "recommended approach share global vars pass root component root vm linked problem angular handle vue definitely", "d": "12/2014"}, {"body": "great thanks answer", "d": "12/2014"}, {"body": "interesting actually global symbol explicitly allowed expression parser expression simple keypath vue uses faster keypath parser treats path segment added check special case", "d": "12/2014"}, {"body": "html attributes differentiate upper lower case attribute actually treated get around use dash case paramattributes vue auto convert camel case setting data", "d": "12/2014"}, {"body": "thanks see api docs however intuitive maybe warning use paramattribute camel case would good idea", "d": "12/2014"}, {"body": "good idea added", "d": "12/2014"}, {"body": "perfect thanks", "d": "12/2014"}, {"body": "oh works limit inputing numbers", "d": "12/2014"}, {"body": "want limit input numbers add trigger native browser behavior", "d": "12/2014"}, {"body": "tried chrome also input words way found bug work eg work since eg work since", "d": "12/2014"}, {"body": "try jsfiddle edge version send link working either", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "oh breaking change see blog post fixed version", "d": "12/2014"}, {"body": "great thank", "d": "12/2014"}, {"body": "see first change basically using component anything parent template compiled parent scope case need put child component template", "d": "12/2014"}, {"body": "would rethink design two computed properties depending one another constraint look like", "d": "12/2014"}, {"body": "simplified looks like svg shape reacts hammerjs inputs pan rotate scale inputs trigger calculation transformation matrix render shape accordingly proplem far component also hasneeds sort public api properties like use values initialize transformation shape values properties also feed bindings eg rendering text rotation need observed two inputs entering single function finally updating two similar things hammer updating matrix updating properties api setting eg property updating matrix updating properties investigated topic bit looks like common problem common edge case knockout something called deal peek function lets access observable computed observable without creating dependency watchtowerjs observersystem upcoming angular faces similar issue", "d": "12/2014"}, {"body": "nt quite understand circular dependency use case though", "d": "12/2014"}, {"body": "two possible events function called unified parameters recalculate matrix also rotation keep sync updating rotation meens triggering watcher keep two inputs completely seperated buisnesslogic eg updating shape etc triggered", "d": "12/2014"}, {"body": "make matrix computed property depends transform properties modify transform properties finally matrix apply bind directive seems could oneway data flow", "d": "12/2014"}, {"body": "thanks suggestion patience think see direction move moment seems lead similar problems multitouch gesture updates three properties translation rotation scale trigger three watcher run matrix calculation three times different values one another maybe combine single object one deep watching observer said many thanks help", "d": "12/2014"}, {"body": "indeed new design trick small drawbacks close want nevertheless really belive situations developers face circular triangular dependencies well vuejs fantastic", "d": "12/2014"}, {"body": "glad works thing even circular dependency eventual value able stabilize additional iteration vue stop new evaluated value otherwise probably problem design actually helpful look problem functional way ie eventual needed value derived raw values oneway dataflow", "d": "12/2014"}, {"body": "got case like ca nt get head around redesign order make work suggestion example js bin var vm new vue el temperatureconverter data celsius fahrenheit kelvin watch fahrenheit function val thiscelsius parseint val thiskelvin parseint val celsius function val thisfahrenheit parseint val thiskelvin parseint val kelvin function val thiscelsius parseint val thisfahrenheit parseint val", "d": "1/2016"}, {"body": "make one source truth make two computed properties two computed properties setters update source truth", "d": "1/2016"}, {"body": "works thanks lot example js bin var vm new vue el temperatureconverter data celsius computed fahrenheit get function return parseint thiscelsius set function val thiscelsius parseint val kelvin get function return parseint thiscelsius set function val thiscelsius parseint val", "d": "1/2016"}, {"body": "ok bit old problem way last comment user input stuff celsius field trying write anything say fahrenheit change celsius immediately change fahrenheit try typing fahrenheit field example implement similar thing two fields two watchers semafor nt feel right way came", "d": "10/2016"}, {"body": "kristofferdarj drop calls behaves much reasonably otherwise operations strict inverses fixed point see comment stabilizing expect leads f changes c changes f problem seeing see vue docs ideas round shown values elements integers", "d": "7/2017"}, {"body": "function called data observed hence value right data observed function called first time value set time", "d": "12/2014"}, {"body": "makes sense seems like option nt useful getting access directive arguments inconsistent example isliteral set true nonexpression argument argument accessed via bind method isliteral set true expression argument mustaches argument available via argument bind update methods isliteral set true expression argument filter value available via bind method noncalculated state update called cases bind value undefined mentioned doc suggests value argument available designed", "d": "12/2014"}, {"body": "code behaviors intended forgot update descriptions custom directive functions upgrade updated basically called data binding finished immediately called first time initial value", "d": "12/2014"}, {"body": "probably jquery works done leaves element state element enters simply setting element css property initial value clears inline styles element imagine calling already shown element wo nt anything", "d": "12/2014"}, {"body": "thank reply really enjoy using vuejs yes know mean also noticed guide page tried express necessity kind writing point may intuitive displaying process left done function know simple make function jsjs shared", "d": "12/2014"}, {"body": "display part different different directives setting could operations part intentionally abstracted transition logic applied everywhere", "d": "12/2014"}, {"body": "understand intention thanks", "d": "12/2014"}, {"body": "\u53ea\u8981\u5728 data \u91cc\u7ed9 loves \u6240\u6307\u5411\u7684", "d": "12/2014"}, {"body": "want nested view need register component use invoke parent code created outer vm already compiled whole dom inner vm created basically nothing make sure read component section guide", "d": "12/2014"}, {"body": "fixed", "d": "12/2014"}, {"body": "reproduce", "d": "12/2014"}, {"body": "closing nt really need use option use case", "d": "12/2014"}, {"body": "refactoring fixed commit", "d": "12/2014"}, {"body": "closing discussed gitter", "d": "12/2014"}, {"body": "case try setting makes rendering synchronous easier use jquery additional dom manipulation", "d": "11/2014"}, {"body": "tried used jqueryui conjunction sortable items got deleted every time moved one sortable list another nt know yet worked poorly try make js fiddle next days showing", "d": "12/2014"}, {"body": "jsfiddle showing sortable items get deleted sorted still nt figured turns happening regardless using", "d": "12/2014"}, {"body": "", "d": "1/2015"}, {"body": "suggest dom operation attached lifecycle vue using vrepeat classical question stackoverflow however angularjs think similar", "d": "4/2015"}, {"body": "closing inactivity", "d": "5/2015"}, {"body": "honest nt clear vision best approach prefer keep separate layer possibly mixin provides easy integration via instantiation options", "d": "12/2014"}, {"body": "moving vuejsdiscussions", "d": "12/2014"}, {"body": "intended change probably explicitly documented basically markup parent template compiled parent scope includes directives written component node content going transcluded example resolved component instead current release bug compiles directives twice parent scope child scope therefore throws warning directive still works fixed soon", "d": "11/2014"}, {"body": "oh falling though cracks understand well work next release since use vue always attached components settings directives owned component change surely brake workflow give basic example custom component pass many options like callbacks even video path thoughts could achieve thing without hacking around child references", "d": "11/2014"}, {"body": "recommended interface component using encapsulate directive usage inside component using reasoning behind thing parent component needs know child component basically syntax sugar passing data", "d": "11/2014"}, {"body": "tricky get right making working properly twoway binding would bloat vue considerably usually recommend using standalone lib specifically designed eg mediumjs", "d": "11/2014"}, {"body": "actually much simplier actual connection contenteditable needed connecting mutationobserver contenteditable set", "d": "12/2014"}, {"body": "mutationobserver available everywhere though nt make sense vue include mutationobserver polyfill feature", "d": "12/2014"}, {"body": "ecmascript way detect new property addeddeleted vuejs nt dirty checking like angular afaik need manage add delete sure best way write seems working", "d": "11/2014"}, {"body": "works great indeed thank", "d": "11/2014"}, {"body": "using select options known issues use param", "d": "11/2014"}, {"body": "demo see events console", "d": "11/2014"}, {"body": "nt think good way implement want item component child component general directly watching index recommended", "d": "11/2014"}, {"body": "hmm sure many people still safari ios", "d": "11/2014"}, {"body": "safari windows xx", "d": "11/2014"}, {"body": "sadly nt even machine test version safari hate say nt think support browser given rare", "d": "11/2014"}, {"body": "original group objects nt property observed therefore changing wo nt trigger updates use builtin filter need make sure every group object property default observed", "d": "11/2014"}, {"body": "ok add property compiled works possible filter pass one parameter example vrepeat childgroup groupchildgroups filterby", "d": "11/2014"}, {"body": "pass multiple arguments filters builtin accepts one search string either write filter chain multiple filters", "d": "11/2014"}, {"body": "ok thanks", "d": "11/2014"}, {"body": "sorry got vuecomponent similiar functionality", "d": "11/2014"}, {"body": "pass instead define child component maybe nt need component", "d": "11/2014"}, {"body": "sample example case complicated add inherit true child component work anything wrong codes", "d": "11/2014"}, {"body": "use longer need use reference parent scope properties directly", "d": "11/2014"}, {"body": "ok got thanks", "d": "11/2014"}, {"body": "thanks indeed correct behavior also glad know improving performance app", "d": "11/2014"}, {"body": "ok got right way solve kind case creating component scratch base component extend data extremely useful cases", "d": "11/2014"}, {"body": "oh mean expected behavior correct one fixed", "d": "11/2014"}, {"body": "hmmm seems like one mixin listed component definition adding new keys object data function work take look piece code js var firstmixin data function return sortable cursor move var secondmixin data function return sortable handle handle var mycomponent vueextend mixins firstmixin secondmixin new mycomponent mount app tried dev branch", "d": "11/2014"}, {"body": "yeah merging merges toplevel properties nt merge recursively made recursive commit", "d": "11/2014"}, {"body": "w e e ps unrelated issue might another bug maybe tried logging sortable using throws message bug possible log keypaths observed", "d": "11/2014"}, {"body": "agonbina indeed fixed", "d": "11/2014"}, {"body": "also whenever try set property starts sign get warning message properties set view model instance happens component instances children another component ex child set property grid instances column nested grid using vue", "d": "12/2014"}, {"body": "make fiddle reserved key problem", "d": "12/2014"}, {"body": "hmm difficulties reproducing problem jsfiddle release npm exact code cdnjs dist edit well replaced npm vue package cdnjs source exposing vue global instead problem gone still like know npm package latest code though cdnjs release newer", "d": "12/2014"}, {"body": "weird though maybe create cloneable repo using npm version demonstrates issue", "d": "12/2014"}, {"body": "ok repo problem clone npm install get vue webpack also uncomment script tag includes cdnjs version comment requiring vue mainjs file build see problem go away although cdnjs version issue nt merge reserved properties component nested within another component case column inside grid", "d": "12/2014"}, {"body": "hah actually using minified production version cdn suppresses warnings reserved key warning leftover old design longer needed removed", "d": "12/2014"}, {"body": "oh wow well hopefully last question issue supposed work non observed keys able retrieve using", "d": "12/2014"}, {"body": "afraid limitation work reserved keys proxied vm internal methodsproperties retrieved via called vm possible prototypal inheritance parent scope", "d": "12/2014"}, {"body": "understandable", "d": "12/2014"}, {"body": "problems worked correct confused different", "d": "11/2014"}, {"body": "vue uses asynchronous dom updates updates batched executed next frame via guarantees called dom updated watchers also fired async however option watchers registered directives compiled called directives update dom call directives compiled called dom updates alternatively set disable async updates", "d": "11/2014"}, {"body": "closing inactivity", "d": "12/2014"}, {"body": "looks like related already solved", "d": "11/2014"}, {"body": "yeah fixed latest commit", "d": "11/2014"}, {"body": "one fixed right tested problem still occurs", "d": "11/2014"}, {"body": "nah nt check build files branch build", "d": "11/2014"}, {"body": "well built still focus blinking hell", "d": "11/2014"}, {"body": "amendment still blinking complex form fiddle blinking dig little thanks response", "d": "11/2014"}, {"body": "oh got problems occurs placeholders cyrillic russian symbols maybe others nonlatin symbols go like", "d": "11/2014"}, {"body": "looks like bug event placeholders cyrillic falsefires conditions example sometimes fires page load even input focused also fires even input focused without value changes probably placeholder fading one true cyrillic latin symbols overall function begins repeat circular begins change cursor position maybe bug remove following code focus blinking wo nt occur", "d": "11/2014"}, {"body": "hmm kinda control since like ie bug likely mistakingly firing events called even though value nt change using filters input elements safely remove code mentioned use custom build", "d": "11/2014"}, {"body": "sadly use filters inputs try come solution thanks", "d": "11/2014"}, {"body": "good news looks like fixed added focusouting input cyrilic placeholder browser returns funny numbers case interrupt handler everything works fine nt much testing maybe missed something", "d": "11/2014"}, {"body": "awesome thanks finding solution", "d": "11/2014"}, {"body": "reproduce issue jsfiddle works", "d": "11/2014"}, {"body": "must another issue play reproduce outside code", "d": "12/2014"}, {"body": "inactivity", "d": "12/2014"}, {"body": "intended behavior merging results either child mutating parent data unpredictable ways child losing reference parent data parent data changes wo nt sync", "d": "11/2014"}, {"body": "see way provide default values incomplete models tried setting properties vm nt get turned observable values data bindings nt work seems unfortunate fully specify object map individual property currently", "d": "11/2014"}, {"body": "ready need order make new property observable", "d": "11/2014"}, {"body": "oh right thanks", "d": "11/2014"}, {"body": "thanks indeed bug fixed latest commit", "d": "11/2014"}, {"body": "cool thanks could include build commit", "d": "11/2014"}, {"body": "commit build files releases modify local copy according", "d": "11/2014"}, {"body": "works like charm thanks", "d": "11/2014"}, {"body": "components isolated scope default read part guide", "d": "11/2014"}, {"body": "thanks data inheritance seem appropriate creating child instance markup hence trying use two features together think issue latter works advertised code document ready function windowapp views components windowappcomponentsnewsitem vuecomponent newsitem template title picture url photo windowappviewsmain new vue el main data news title title photo clownjpg markup returns warning document ready function windowapp views windowappviewsmain new vue el main data news title title photo clownjpg components newsitem template title picture url photo bug", "d": "11/2014"}, {"body": "second example", "d": "11/2014"}, {"body": "got thanks", "d": "11/2014"}, {"body": "try using attribute input element specify increasedecrease number click button", "d": "11/2014"}, {"body": "gapipro related problem try typing fahrenheit", "d": "11/2014"}, {"body": "ok see ignore suggestion", "d": "11/2014"}, {"body": "hmm contenteditable tricky use case nt recommend using directives inside suggestion use library specifically designed contenteditable eg mediumjs wrap custom directive", "d": "11/2014"}, {"body": "use case", "d": "11/2014"}, {"body": "something like use lodash", "d": "11/2014"}, {"body": "also useful extend new objecthash", "d": "11/2014"}, {"body": "nt think problem adding listeners nt everything directives", "d": "11/2014"}, {"body": "thought would handy add directives afterwards eg use vuetouch constant way probably right", "d": "11/2014"}, {"body": "use write filter", "d": "11/2014"}, {"body": "ok thanks", "d": "11/2014"}, {"body": "think solution comes inflexiblity eg data form array objects think preprocessing ok tradeoff need lot extract preprocessing function global utility nt think handled vue", "d": "11/2014"}, {"body": "ah thanks pointing added vuejsorg", "d": "11/2014"}, {"body": "ah thanks pointing added vuejsorg", "d": "11/2014"}, {"body": "thanks reporting fixed latest commit", "d": "11/2014"}, {"body": "yes removed problem contenteditable works simple situations try use something complex lot additional problems arise actually scope need work contenteditable suggestion use specific library eg wrap inside custom directive add changes doc", "d": "11/2014"}, {"body": "sounds reasonable maybe try pull request", "d": "11/2014"}, {"body": "ok", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "components actually works instantiate imperatively ie default values use inside templates element mount component inline value override default value want replace element component mounted use", "d": "11/2014"}, {"body": "ah ok got thanks might worth clarifying distinction", "d": "11/2014"}, {"body": "project uses old option lot components nt think makes sense move template string think go modifying element instead", "d": "11/2014"}, {"body": "yeah intent suppress warning accessing something nt exist guess better explicit errors", "d": "11/2014"}, {"body": "interesting write directive parent template going compiled parent scope however directive found parent scope therefore fallback compiled child scope child isolated scope default ca nt access parent property might sound bit confusing solution either use child pass msg using", "d": "11/2014"}, {"body": "hm seems reasonable came another approach actual use case nt blocker thanks", "d": "11/2014"}, {"body": "error message get try using plain jade compile file see get likely syntax issue", "d": "11/2014"}, {"body": "nt got error message output exports format incorrect btw use templatehtmlloader compile jade html sure problem whether", "d": "11/2014"}, {"body": "different string content begin jade original vue file content vueloader js uid user profile moduleexports data function return msg hello got errors", "d": "11/2014"}, {"body": "hard say wrong without looking setup might want create cloneable repo current setup also nt think caused anything vue closing post questions vuejsdiscussions instead", "d": "11/2014"}, {"body": "need access filtered result either use custom filter computed property array", "d": "11/2014"}, {"body": "sorry nt get exactly build filter help situation main issue variable altered inside directive filter used however nt think writing custom filter return string result good approach gamename working result", "d": "11/2014"}, {"body": "see case use computed array", "d": "11/2014"}, {"body": "thanks works like charm", "d": "11/2014"}, {"body": "hi also need filterby feature could count filtered objects nt get code snip thisgamesfilter filter comes", "d": "4/2015"}, {"body": "danielchou native array method javascript assumed refers array computed retuns array", "d": "4/2015"}, {"body": "nirazul thank native filter method powerful", "d": "4/2015"}, {"body": "dgerber use get count", "d": "6/2015"}, {"body": "also worth noting examples case sensitive search ea vs ea mean difference accounting treat eastern means searching ea might cause filteredgameslength return even though result like easteregg hunt edit solved issue changing gamename searchquery tolowercase regardless user types results accounted", "d": "4/2016"}, {"body": "vue perspective minimizing number child vue instances created whichever uses fewer would performant", "d": "11/2014"}, {"body": "try changing template movie template documentgetelementbyid movie innerhtml seems working strings right", "d": "11/2014"}, {"body": "yeah thanks example also works vshow instead vif", "d": "11/2014"}, {"body": "actually caused fact vue compiled template reason skipped put template instead would work properly", "d": "11/2014"}, {"body": "looking frame source jsfiddle seems two body tags oevgeny code replaced everything worked fine", "d": "11/2014"}, {"body": "thanks answers guys clear", "d": "11/2014"}, {"body": "order events fire different orders firefox something vue control logically want react change property instead using click listener", "d": "11/2014"}, {"body": "ok thanks relay case different see watch status list", "d": "11/2014"}, {"body": "case listen instead", "d": "11/2014"}, {"body": "resolved thanks lot", "d": "11/2014"}, {"body": "work working encounter exception warning migrate advice thanks", "d": "11/2014"}, {"body": "upgrade change list", "d": "11/2014"}, {"body": "chinese guide outdated child components isolated scope default need use inherit parent data use explicitly pass data", "d": "11/2014"}, {"body": "performance issue probably caused paginate filter filter default searches every property recursively every update full depth walk every single one objects try replace custom filter checks specific fields want", "d": "11/2014"}, {"body": "tested hypothesis building actually pretty performant could probably improved somewhat taking away attribute two need search though however modify code search filter leave pagination way app actually quite sluggish creates new array reference objects memory sure look issue", "d": "11/2014"}, {"body": "many items displaying per page", "d": "11/2014"}, {"body": "edited original reflect working jsfiddle illustrate problem ca nt replicate slowness code pretty close exactly using two differences real app building table rows styled involved repainting happen real app following computed property place set directly onto data experiment since could cause issue", "d": "11/2014"}, {"body": "resolved vue backbonecollection causing big performance issue sure yet following offending bit pseudocode var data customercollection customersfetch return new vue el applicationwrapper template require customersearchhtml data extend searchtext pagenumber data computed customers function return thiscustomercollectiontojson", "d": "11/2014"}, {"body": "ok computed property reevaluated every time something changes means every time switch page calling tojson entire collection also probably want avoid including backbone collection vue data vue attempt observe entire collection causing tojson call inefficient collecting dependencies nt observe backbone collections nt see need use computed property", "d": "11/2014"}, {"body": "thought computed properties would reevaluated every time dependency computed property changed since never change collection figured would problem good know storing things vue thought could get away since view need interact eventually persisting data back server know probably store scope thanks", "d": "11/2014"}, {"body": "data properties methods set instance short answered nt use conflicting names", "d": "11/2014"}, {"body": "makes sense wanted make sure nt something insidious", "d": "11/2014"}, {"body": "html nt want", "d": "11/2014"}, {"body": "dang never thought much simpler first thought thanks xrado", "d": "11/2014"}, {"body": "ca nt reproduce make fiddle", "d": "11/2014"}, {"body": "closing inactivity", "d": "12/2014"}, {"body": "closing inverting purpose vcloak", "d": "11/2014"}, {"body": "seems stupidly obvious got anyone else gets google", "d": "9/2017"}, {"body": "need use attribute element checkout doc", "d": "11/2014"}, {"body": "fyi works correctly vue", "d": "11/2014"}, {"body": "actually bug placeholder attribute cloned clone value set original placeholder implemented workaround vue template parser deal", "d": "11/2014"}, {"body": "awesome thanks", "d": "11/2014"}, {"body": "commit access map use install next branch", "d": "11/2014"}, {"body": "change filter modifiers seems broken could exported possible add new codes like add things like function keys", "d": "2/2016"}, {"body": "whitelynx exposed next release", "d": "2/2016"}, {"body": "thanks", "d": "2/2016"}, {"body": "use return constructor already registered something retrieve id", "d": "11/2014"}, {"body": "got problem fix problem", "d": "11/2014"}, {"body": "using filters brings back problem", "d": "11/2014"}, {"body": "ok removed automatic type casting seems cause trouble convenience get rid issues undeletable zero input dots still one annoying behavior use filters invalid input erase whole input content unfortunately works input something invalid eg browser vue forces input value blank sense vue strictly keeping view model sync avoid using filters together", "d": "11/2014"}, {"body": "also problem used filters", "d": "1/2015"}, {"body": "hmm vif never supposed used vrepeat actually console warning", "d": "11/2014"}, {"body": "ah missed one applying old csp patch fixed thanks reporting", "d": "11/2014"}, {"body": "tricky issue modify input value javascript unfocus wo nt triggered modifying value want using filter workaround would either use vmodel listen events instead", "d": "11/2014"}, {"body": "sorry nt get thing listen events instead could detailed mean already listening input change event mean use filters modify input value manually listening events instead", "d": "11/2014"}, {"body": "input elements also dispatch native events user modifies value", "d": "11/2014"}, {"body": "mean mutation dom events could give example please", "d": "11/2014"}, {"body": "simply although case callback fired get beforefiltered value maybe use instead", "d": "11/2014"}, {"body": "oh ok thanks sigh hoped filters make life easier handling forms seems wo nt case got cases like almost every form liveformatting input value already requires tricks make remove symbols buttons standing whitespace need make tricks think would smarter use something like jqueryplugn", "d": "11/2014"}, {"body": "hi floschieldbobby look link developed example component library boilerplate develop something else good luck", "d": "11/2014"}, {"body": "hi hwclass thanks lot take look right", "d": "11/2014"}, {"body": "requirejs uses amd rather commonjs however basic commonjs based example using browserify", "d": "11/2014"}, {"body": "missed examples sincerely sorry question thanks maybe would interesting merge official vuejs repo onlyone miss closed however", "d": "11/2014"}, {"body": "mentioned documentation site", "d": "11/2014"}, {"body": "going back title issue vuejs used together requirejs", "d": "8/2016"}, {"body": "gamadril question answer vuejs used together requirejs thanks", "d": "1/2017"}, {"body": "cmal yes would nt although recommend use bundlers like webpack", "d": "1/2017"}, {"body": "posva hi currently problem using vuejs requirejs add vuejs html tag requirejs props error described followed instructions given result use jquery way problem vue give opinions deal examples successed using vuejs requirejs thank much", "d": "1/2017"}, {"body": "cmal sorry last time used requirejs years ago recommend use something else bundling like webpack start remember post question forums locking keep quiet", "d": "1/2017"}, {"body": "\u8fd9\u79cd\u60c5\u51b5\u5c31\u4e0d\u8981\u7528 computed property \u554a", "d": "11/2014"}, {"body": "en ftr ftr ctr module text function tr module text return module text vuefilter ftr function text module return tr module text var vm new vue el demo data en english computed ctr function module text return tr module text", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "\u6211\u770b\u4e0d\u592a\u660e\u767d\u4f60\u60f3\u8981\u5e72\u5565 \u80fd\u4e0d\u80fd\u63cf\u8ff0\u5f97\u6e05\u695a\u4e00\u70b9", "d": "11/2014"}, {"body": "function tr module text return module text tr module text tr module en", "d": "11/2014"}, {"body": "jsfiddle \u7136\u540e\u8bf4\u6e05\u695a\u4f60\u60f3\u5b9e\u73b0\u4ec0\u4e48\u5427", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2016"}, {"body": "\u8fd9\u662f ios \u7684\u4e00\u4e2a vue \u6ca1\u4ec0\u4e48\u5173\u7cfb sat nov cc notifications githubcom wrote \u8fd9\u4e2a\u9501\u5c4f\u540e\u6253\u5f00\u4f1a\u5931\u6548 \u8fd9\u4e2a\u9501\u5c4f\u540e\u6253\u5f00\u6b63\u5e38 reply email directly view github", "d": "11/2014"}, {"body": "\u6211\u7528\u7684\u662fandroid", "d": "11/2014"}, {"body": "\u8fd9 \u4f46\u662f setinterval \u8ddf vue \u4e5f\u6ca1\u6709\u5173\u7cfb\u554a sat nov pm cc notifications githubcom wrote \u6211\u7528\u7684\u662fandroid reply email directly view github", "d": "11/2014"}, {"body": "\u53ef\u80fd", "d": "11/2014"}, {"body": "data passing context shifting actually two different use cases like keep semantics consistent also makes implementation easier internally admit name bit misleading associated context shifting templates case vue maybe future add something specifically", "d": "11/2014"}, {"body": "officially supported actually super verbose code", "d": "11/2014"}, {"body": "\u4e16\u754c\u6700\u597d", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "update released vuesuper ran case well written pretty simple plugin provides super property access parent methods sure pitfalls would make sense formalize vue best left plugin javascript vuesuperjs export default function install vue objectdefineproperties vueprototype super get function const methods thisconstructorsuperoptionsmethods windowvue windowvueuse install", "d": "9/2015"}, {"body": "make sure using instance dom methods like vue detect native dom manipulations", "d": "11/2014"}, {"body": "yep", "d": "11/2014"}, {"body": "directive data passed wo nt compiled specific reason need data instead", "d": "11/2014"}, {"body": "component template contains need expand initial array rendering component example passed like expand component responsibility specific case render component", "d": "11/2014"}, {"body": "fine expand later extra call update negligible", "d": "11/2014"}, {"body": "right behaviour makes sense knowing directive guess misinterpreted hook description thanks", "d": "11/2014"}, {"body": "masoodahm could watch changes appuserlistpages value broadcast event vm would manipulate data really sure entire app laid hard code specific use case", "d": "11/2014"}, {"body": "thanks brandon probably would solved problem however tried something else reading solution works post solution others learn thread deleted since problem resovled using variable vm like thispages forces filter called thispages updates solved problem", "d": "11/2014"}, {"body": "close want discuss open new issue vuejsdiscussions repo", "d": "11/2014"}, {"body": "masoodahm please post solution im trying load laravel pagination ajax get pagination instead actually works pagination huuge hehe", "d": "6/2015"}, {"body": "thanks somehow missed porting old code", "d": "11/2014"}, {"body": "moved discussion", "d": "11/2014"}, {"body": "closing seems possible stated please reopen solution without using", "d": "11/2014"}, {"body": "reopening issue seems way observe new properties object sure good reason vuejs using method right ca nt figure", "d": "11/2014"}, {"body": "available chrome polyfill uses dirty checking inefficient vue observation mechanism nt detect properties added directly setting must use order vue pick change", "d": "11/2014"}, {"body": "thanks reporting caused change transition implementation components transitioned destroyed transition finishes", "d": "11/2014"}, {"body": "interesting app state changes transition see things changing element transitions anyway disconnect data bindings transition starts", "d": "11/2014"}, {"body": "latest commit fixed", "d": "11/2014"}, {"body": "much better thanks however event listeners still seem listening registered object initiation", "d": "11/2014"}, {"body": "currently directives locked dom updates happen transition events expected work component destroyed event listeners breaking logic reason", "d": "11/2014"}, {"body": "using routing route changes data events get fired data changes leads intercomponent communication starts getting messy removing makes everything work well haha going continue without transitions", "d": "11/2014"}, {"body": "reworked bit work like except called transition finishes also let know causes happen", "d": "11/2014"}, {"body": "awesome seems working great", "d": "11/2014"}, {"body": "feature interesting anyone would love hear feedback good bad", "d": "11/2014"}, {"body": "might useful case described nt think belongs core maybe could live plugin", "d": "11/2014"}, {"body": "consider example changing variable pointer property vm wo nt get picked however wrap services array object", "d": "11/2014"}, {"body": "thanks", "d": "11/2014"}, {"body": "deprecated yeah missed change doc internal utils directly accessible", "d": "11/2014"}, {"body": "woo sweet closing", "d": "11/2014"}, {"body": "make fiddle filter accept argument mean repeated value rather list", "d": "11/2014"}, {"body": "fixed fault sorry details nested component getting inside vrepeat filter applied correctly forgot put key instead triggered weird error", "d": "11/2014"}, {"body": "hmm yeah seems bug jsfiddle would helpful", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "fixed thanks", "d": "11/2014"}, {"body": "awesome thanks", "d": "11/2014"}, {"body": "limitations arrays primitive values use arrays objects work", "d": "10/2014"}, {"body": "template interprets block directives template ignored template content extracted block", "d": "10/2014"}, {"body": "oh see intercalating one template element inbetween support directives solved problem", "d": "10/2014"}, {"body": "binding vwith work either template", "d": "10/2014"}, {"body": "filters must used end maybe filter called template looks cleaner eg", "d": "10/2014"}, {"body": "indeed looks way better", "d": "10/2014"}, {"body": "first think explicitness actually better referring upscope property latter even sure scope chain falls back also three nested levels data property name probably need rethink design second starting components isolated scope default inside component think scope component alias component inside nt make sense", "d": "11/2014"}, {"body": "see discussion", "d": "10/2014"}, {"body": "skipped watching data object properties starts nt quite get discussion", "d": "10/2014"}, {"body": "oh sorry misread description prefixed data observed proxied could potential clash builtin propertiesmethods still access", "d": "10/2014"}, {"body": "ok got mention changes page", "d": "10/2014"}, {"body": "think directive component instead vuejs directives dom manipulations", "d": "10/2014"}, {"body": "ok thanks pointer", "d": "10/2014"}, {"body": "thanks reporting never used uc android probably never use smartisan since old version found way fix close", "d": "10/2014"}, {"body": "indeed", "d": "10/2014"}, {"body": "haha considering removing since filter trying much think could better dealt userland casebycase basis want take stab better implementation filter go ahead submit pr", "d": "10/2014"}, {"body": "ok turns documentation wrong pluralize filter include number self requires least one argument", "d": "11/2014"}, {"body": "think post good way write plugins using new option example js var mymixin created function thisstate foo destroyed function teardown thisstate null methods hello function consolelog thisstate var component vueextend mixins mymixin var c new component chello good thing approach avoids modifying default vue options plugin might look like nt think fixed way though feel free make suggestions", "d": "10/2014"}, {"body": "could understand plugin ran vuejs run mixin sorry poor english", "d": "10/2014"}, {"body": "plugin mixinonly need call instead pass create components js var validationmixin require vuevalidation mixin vuecomponent componentwithvalidation mixins validationmixin", "d": "10/2014"}, {"body": "ok thank sample code advice could understand advice continue development vuevalidator plugin", "d": "10/2014"}, {"body": "design vue instances used observed data example use", "d": "10/2014"}, {"body": "ok actual use case building hierarchical selector keeping state original data object end iterating children vms computed properties", "d": "10/2014"}, {"body": "general good idea make computed properties depend data components computed properties evaluated first time child components even created yet might want consider dispatching events child components lifecycle hooks", "d": "11/2014"}, {"body": "hi \u7136\u540e\u8ba9\u6211\u770b\u4e0b\u51fa\u6765\u7684 stack trace stack trace \u4e5f\u53ef\u4ee5", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "branch \u6700\u65b0\u7684 commit", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "viewmodel page model bug caused issues passing items event listeners since fixed take look", "d": "10/2014"}, {"body": "ok great thx", "d": "10/2014"}, {"body": "every item vm registered child vm instead", "d": "10/2014"}, {"body": "array dom element man achieved code html text x possible make shortcut", "d": "10/2014"}, {"body": "haha right thought actually use", "d": "10/2014"}, {"body": "also possible make global like codes maybe intuitive way html text x", "d": "10/2014"}, {"body": "would complicate internal implementation might easier give class", "d": "10/2014"}, {"body": "maybe right perhaps misusing need find another way instead", "d": "10/2014"}, {"body": "thanks fixed", "d": "10/2014"}, {"body": "component definitions require function", "d": "10/2014"}, {"body": "right forgot", "d": "10/2014"}, {"body": "ok find directive good solution vue good thx", "d": "10/2014"}, {"body": "fixed due change", "d": "10/2014"}, {"body": "thank", "d": "10/2014"}, {"body": "assume item unique id id also set dom elements use jquery sortable hook inside hook call get array sorted ids update model array match order sorted ids easiest way probably create new array replace old one", "d": "10/2014"}, {"body": "try tonight tomorrow comment back method worked thanks", "d": "10/2014"}, {"body": "seems work lists lists within lists try modify make work submit separate issue would nice method would return current state binded object based dom", "d": "11/2014"}, {"body": "created feature request would understand nt want add wanted submit case someone else wanted add make plugin", "d": "11/2014"}, {"body": "thanks fixed", "d": "10/2014"}, {"body": "first suggest avoid side effects inside filters filters pure functions concern transforming single value case would use watch value update split accordingly problem using filter change ui filter gets called first updated however filter part evaluating moment value written model yet directive triggered old value example reveal issue internal async batching patched using would work correctly", "d": "10/2014"}, {"body": "makes sense updated used watch result seems similar", "d": "10/2014"}, {"body": "hmm done hook works correctly need figure late behaves differently", "d": "10/2014"}, {"body": "using new option also works correctly inside option works correctly next like discovered", "d": "10/2014"}, {"body": "ok latest commit cases working intended", "d": "10/2014"}, {"body": "yup also works latest thank reference simple iteration variable total split limit ended like", "d": "10/2014"}, {"body": "cool", "d": "10/2014"}, {"body": "actually noticed input type take strings long parsed something like example string break string work hope helps", "d": "10/2014"}, {"body": "want input field display formatted string afaik default behavior set value anything parsed number erase whole thing note filter using default read filter formats data way model view input writes model gets formatted set input value resulting erasing everything working example would require use read write filters", "d": "10/2014"}, {"body": "humm right input parse similar way parseint set value input set value erasing characters bit odd since regular input parse cant anymore vue nt exactly wrong would still helpful warn situation think", "d": "10/2014"}, {"body": "browser setting results empty value nothing vue actually", "d": "10/2014"}, {"body": "added warning using readonly filters however behavior within scope vue warnings", "d": "10/2014"}, {"body": "til input types parse numbers glad hear warning thanks", "d": "10/2014"}, {"body": "ha thanks", "d": "10/2014"}, {"body": "found vm set field value true", "d": "10/2014"}, {"body": "hmm actually wrong", "d": "10/2014"}, {"body": "need", "d": "10/2014"}, {"body": "variable sometimes needs update value common exactly user enters page parameters page displays data links page different parameters", "d": "10/2014"}, {"body": "curious dealing params ca nt update params routing eg", "d": "10/2014"}, {"body": "getting params page like logic triggers attached event component view", "d": "10/2014"}, {"body": "ended something similar vuehackernews project", "d": "11/2014"}, {"body": "interesting side effect internal mechanism deal filters turns fix outofbound issue range inputs", "d": "10/2014"}, {"body": "reopened commit dev brings back issue behaviour seems great range inputs though", "d": "11/2014"}, {"body": "hmm reverting seems like bad idea", "d": "11/2014"}, {"body": "make special case", "d": "11/2014"}, {"body": "good catch thanks", "d": "10/2014"}, {"body": "depending handling options pass expression custom one option", "d": "10/2014"}, {"body": "yes without specifying model name element already maybe directive access raw element attributesdirectives template would easy get trying figure good dry design form validaton manageable complex forms first idea already mention filters way go see similar problem filter nt know caller model yourothers take", "d": "10/2014"}, {"body": "pushed makes attribute removal happen link time means give custom directive higher priority priority time called attribute still present", "d": "10/2014"}, {"body": "nice solution thanks", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "related matter event passed handler access target element would also useful filters access element validation purposes might validator many similar elements way right reference element manually filter parameter correct", "d": "10/2014"}, {"body": "aristidesfl would need access element value already passed filter", "d": "10/2014"}, {"body": "implementation validator", "d": "10/2014"}, {"body": "idea able things like example", "d": "11/2014"}, {"body": "would mind sharing point view merits particularities xradovuevalidator comparison kazuponvuevalidator", "d": "11/2014"}, {"body": "think largely syntax differences would nt one better one like better seems kazupon version supports moment", "d": "11/2014"}, {"body": "always next frame data change although deferring mechanism depends whether available wrapped know data ui change depends emit custom event watch callback", "d": "10/2014"}, {"body": "clarify wrote party plugin nt meant vue plugin example", "d": "10/2014"}, {"body": "hmm give brief description expect use event", "d": "10/2014"}, {"body": "example second instance plugin fixed send input events changed results vue updating model reflect changes made fake slider user idea vue sending input change events changes dom element plugin listen update interface accordingly", "d": "10/2014"}, {"body": "one example events would useful see elegant way please let know thank", "d": "1/2015"}, {"body": "nt need events vstyle", "d": "1/2015"}, {"body": "bdaglish great answer much simpler slight modification used sliders", "d": "1/2015"}, {"body": "happy solution provided effectively say nt use solutions want fully custom range slider current setup works updating model value via custom slider component way around changes model data reflected custom component connected input field component fire user dom events eg inputchange data modified programmatically vuejs opinion work around effectively affects sliders custom non standard input methods ca nt easily styled via css things like rangesliderjs material design light", "d": "1/2016"}, {"body": "workaround using watch manual model updates usage viewtemplate custom component implementation js import vue vue import jquery import rangeslider rangesliderjs const rangeslider vueextend template connects dom attributes template programmatic values props value type number twoway true watch value function value el rangeslider update true true dispatch changevalue value ready function el rangeslider polyfill false vuecomponent rangeslider rangeslider export default rangeslider parent view js import vue vue export default vueextend methods savehorizon function value thiscontributioninvestmenthorizon value figure would nicer solve declarative htmltemplate syntax instead custom event listenersetting properties repeated every single view using slider component", "d": "1/2016"}, {"body": "btw would probably interesting watchers know origin change eg insideoutside twoway binding currently update directions inside valuewatcher", "d": "1/2016"}, {"body": "clarify looking something like readswrite like normal input fields model defined attribute value", "d": "1/2016"}, {"body": "use third party plugin slider like jequery slider use component make slider get value slider slider text box component get value slider onchange normal component trigger make thanks", "d": "3/2017"}, {"body": "components default isolated scope want inherit parent model pass component", "d": "10/2014"}, {"body": "yeah inheriting scope component intuitive inherited parent scope instead", "d": "10/2014"}, {"body": "clear components isolated scope also think content scope parent see modaldialog example modaldialog component html confirmdelete component name retrieved confirmdelete component also ember components work", "d": "11/2014"}, {"body": "agreed nt implement requires tricky internal changes probably land", "d": "11/2014"}, {"body": "next branch", "d": "10/2014"}, {"body": "delimiter api changed need provide tokens", "d": "10/2014"}, {"body": "yea works nt fully read changesmd bad thanks", "d": "10/2014"}, {"body": "vrepeat", "d": "10/2014"}, {"body": "\u7528 \u7684 object repeat object \u6dfb\u52a0\u5c5e\u6027\u7684\u65f6\u5019\u8981\u7528", "d": "10/2014"}, {"body": "nt device hand test moment think likely wrap native js test raf call see still working", "d": "10/2014"}, {"body": "yes right tried example device wakes count longer updated meaning request animation frame never triggered file bug apple", "d": "10/2014"}, {"body": "closing apple bug also latest build able get around setting false", "d": "10/2014"}, {"body": "fixed thanks", "d": "10/2014"}, {"body": "fixed next branch", "d": "10/2014"}, {"body": "\u6709\u6ca1\u6709\u7c7b\u4f3cangularjs", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "interesting turns firefox implements nonstandard method changed strategy hash created fixes issue", "d": "10/2014"}, {"body": "well requires bit understanding vue internals write plugins also depends type plugins want write basically several possiblities add global method eg vueelement add set global assets directivesfilterstransitions etc eg vuetouch add vue instance methods attaching convention vue instance methods prefixed nt conflict user data methods example method overwritten methods option", "d": "10/2014"}, {"body": "want write thank much listing possibilities mapping examples thanks also headsup naming convention well already ran forget writing example plans expand documentation plugins release", "d": "10/2014"}, {"body": "yes expand part docs", "d": "10/2014"}, {"body": "thanks excited release though really called", "d": "10/2014"}, {"body": "well big rewrite expect bit unstable basically want see stable usage pushing", "d": "10/2014"}, {"body": "nope directives mapping plain data dom behavior also dom nodes observed using vue observation mechanism need insert dom nodes use native dom api", "d": "10/2014"}, {"body": "function triggered vhtml", "d": "10/2014"}, {"body": "yep planned bit twoway filters think validation done userland plugin", "d": "10/2014"}, {"body": "thx info", "d": "10/2014"}, {"body": "keyword expression interpreted trying valid javascript expression avoid keywords expressions", "d": "10/2014"}, {"body": "although true think confusing since objdelete valid javascript least possibility call delete method somehow", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "nt work", "d": "10/2014"}, {"body": "rename method back", "d": "10/2014"}, {"body": "yes following would work nt obvious", "d": "10/2014"}, {"body": "version using works correctly", "d": "10/2014"}, {"body": "using", "d": "10/2014"}, {"body": "stuck afraid either rename method use workaround", "d": "10/2014"}, {"body": "problem right evaluating frameworks", "d": "10/2014"}, {"body": "curious need access instance data function", "d": "10/2014"}, {"body": "remember grid component passing options inside data function component grid component one options setup function call click function calls method upper vm", "d": "10/2014"}, {"body": "hmm sure good way crossvm method calls makes vms tightly coupled harder reason dispatch events child vms", "d": "10/2014"}, {"body": "understand couplement issue actually singlepage router happens variable inside master vm easily call wherever need inside components inheriting master vm", "d": "10/2014"}, {"body": "thing could happen socket instance variable master vm components reusing instance", "d": "10/2014"}, {"body": "alright", "d": "10/2014"}, {"body": "thanks lot", "d": "10/2014"}, {"body": "good catch", "d": "10/2014"}, {"body": "simple example seems work correctly suspect something else using component vif well", "d": "10/2014"}, {"body": "demo", "d": "10/2014"}, {"body": "oh ok thought referring property instead yeah caveat creates anonymous wrapper instance around content inherits normal properties empty object probably rework part later since anonymous instance nt ideal anyway", "d": "10/2014"}, {"body": "also make annoying intermittent", "d": "10/2014"}, {"body": "provide information seeing type behavior eg css rules applied element type transition directive triggering transition", "d": "10/2014"}, {"body": "directive triggering transition transitions see get access app experiencing", "d": "10/2014"}, {"body": "confirm transitionend triggered element nt removed", "d": "10/2014"}, {"body": "fixed latest changes branch", "d": "11/2014"}, {"body": "hmm excitement actually testing safari issue still exists chrome", "d": "11/2014"}, {"body": "closing inactivity", "d": "5/2015"}, {"body": "fixed thanks", "d": "10/2014"}, {"body": "actually caused way vmodel restores cursor position updating value adjusted restoring algorithm work example seems common use case another thing using write filter instead read one", "d": "10/2014"}, {"body": "yeah noticed fixed branch thanks reporting", "d": "10/2014"}, {"body": "ca nt seem reproduce make jsfiddle", "d": "10/2014"}, {"body": "sure able see iteration vrepeat rendered latest chrome firefox however safari getting error", "d": "10/2014"}, {"body": "actually caused nasty bug safari pretty tricky fix vue side since vue relies clonenode lot internally sure fix time soon meanwhile suggestion use wrapper div instead template see webkit team reacts bug report", "d": "10/2014"}, {"body": "interesting thanks looking", "d": "10/2014"}, {"body": "ok workedaround next branch hope fix soon", "d": "10/2014"}, {"body": "hi follow think experiencing issue ios safari latest safari mac jsbin since seems still issue would nt useful place warn docs apple fixes bug", "d": "7/2015"}, {"body": "dwightjack jsbin seems work fine safari", "d": "7/2015"}, {"body": "right looks like problem related something else sorry", "d": "7/2015"}, {"body": "nt compile content meant static html snippets recommended define components parts need change dynamically switch components instead raw html", "d": "10/2014"}, {"body": "thanks indeed started using components currentview instead though larger projects order keep files separate feature dynamically load html files vuedirectives inside would great", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "loops mean javascript engine needs create function turn seen point following link writes avoid forin loops function based iteration logic behind pretty straightforward instead looping set indexes like would dowhile forin might loop additional array items also requires effort order loop items javascript set function one functionbased iteration comes slew performance issues extra function introduced corresponding execution context created destroyed top additional object added scope chain thanks", "d": "10/2014"}, {"body": "talking looping arrays firebase example looping object array also nt heard anywhere creates function iteration largely engine implementation dependent hardly truth modern engines like interferes optimization looped object hashslow mode possible situations vue uses loop internally target object simple performance difference far small justify writing different way", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "components isolated scope default make component work intended still trying find proper solution eg directives written inline component always compiled inherited scope know need invoke method root scope", "d": "10/2014"}, {"body": "yup closing thanks", "d": "10/2014"}, {"body": "personally nt used typescript much vue requires pretty special treatment extend functionality works need look ts class transpiling works first hand know working vue ts lot works might want take look join forces", "d": "10/2014"}, {"body": "made gist pattern maybe helps somebody else think little bring vues extend tss extend closer together", "d": "10/2014"}, {"body": "indus issue extending vue directly typescript call super vue implied configuration passed constructor yet proceeds ts class member creation fix add support vue pass false constructor defer configuration call vueinit config change allows map typescript class vue side effects using production seeing limitations key logic", "d": "10/2014"}, {"body": "logic greatly simplified option merging externalized constructor constructors simply call think make ts integration bit easier guys think", "d": "10/2014"}, {"body": "missed change thanks", "d": "10/2014"}, {"body": "merge options code lets say create something needs ready funktion internal setup also want give user possibility paste options well another readyfunction example maybe mergeoptions vues extendprocedure available vueutil called every instantiation seems wrong", "d": "10/2014"}, {"body": "typescript needs way subclass vue via prototype pass configuration instance via constructor typescript class instances create members call super thus creates subtle timing issue vue could instanciated passing configuration via constructor subclasses would fail attempting pass members super existed solution pass super false vue call separate vue method set configuration via subclass ok team breaking vuets make vue better adapt external way set configuration vue ted mon oct indus notifications githubcom wrote merge options code lets say create something needs ready funktion internal setup also want give user possibility paste options well another readyfunction example constructor instanceopt maybe mergeoptions vues extendprocedure available vueutil called every instantiation seems wrong reply email directly view github", "d": "10/2014"}, {"body": "made gist pattern use basic definition file use vueprojects works perfect even subclassing got even better ts modifier although say holy grale truth made nice comparisson two possible aproches sum perspective use straight forward almost benifits plain js misuse small hack get benifits ts like intellisense think second approach done like shown gist way superior writing definition files always weak point using ts passion write keeping uptodate constant work classapproch get definitions writing code stays sync development said ts vue make significant move towards depends paradigm hacks affort think making vue fit ts wont painless affects parts code fully oversee would maybe also worth trouble", "d": "12/2014"}, {"body": "hi anything changed vue introduction business need use typescript application self made set small medium size independent decoupled components vue looks like natural choice lack ts support big blocker us rivetsjs looks like abandoned option neither however way bind js object jquery node object nice fact solves problem possible vue implement reasonable time amount behavior mean implementing way embedding custom object inside vuecomponent object anything like likely cause problems road anyway options far tell quick looking vue code concept goes quite deep ca nt see easy solution solutions indus sure understood correctly byt must say beginning big app rewrite feelings strong avoid hacking unusual use libraries really happy hack vue extend concept way anyway indus manage solve otherbetter way think possiblereasonable alter vue extend mechanism hard eventually would", "d": "6/2015"}, {"body": "slcodenine think would possible simulate using annotations similar angular declare options static property simply add decorator maybe even make look classy bit plumbing decorator sure feasible end vue subclass defined prototypally inheriting static object contains component options merge step happens decorator extracting options class declaration seems static properties obviously requires using typescript", "d": "6/2015"}, {"body": "one issue vuets end fighting internal nature vue vue elegant api use js objects cramming ts via classes ts language features may best choice using vue ts simply typing values directly using classmodules would love see deeper integration typescript something lost process unless done ground similar approach one key issue misalignment model definitions model instance use within vue makes ts compiler go stir crasy model properties created one place yet used runtime somewhere else mapping hard wrap typescript definition properties app specific something vue knowledge take example var demo new vue el demo data message hello vuejs demomessage hello vuets typescript see el data message part app model definition problem comes demomessage set typescript know came thus clearly error compiler perspective vuets solution class extend vue define properties class members thus instance api sync class definition sort favoring vue instance api generating vue constructor api suit works ideal pretty sure great solution would love see ts vue work closer together would happy help projects using vuets would love better solution ted", "d": "6/2015"}, {"body": "thinked gwt vue small project github repos test uses vue gwt generate application skeleton compile time ts requirement would nice solution java developers", "d": "6/2015"}, {"body": "never used gwt honestly idea needed make work vue", "d": "6/2015"}, {"body": "btw able write decorator talked albeit transpiled using babel decorator work ts familiar ts packagingbuild setups want try adapting ts welcome", "d": "6/2015"}, {"body": "seems going offtopic try explain better typescript java features mentioned gwt enables compile java source code javascript code furthermore gwt let reuse preexistent javascript code java code interested make fork contribute java version api vuegwt vuets would great", "d": "6/2015"}, {"body": "welcome find useful although probably wo nt able help much since nt use gwt java", "d": "6/2015"}, {"body": "slcodenine still using tsclass based approch works well couple projects made adoptions reflect newer versions ts eg union types vue eg newer version ts definition file found hack using tsclasses inherit vue would normal way block ts extend function extend manually vue even never problems would happy see first class support", "d": "6/2015"}, {"body": "indus sorry late response nt much time test options anyway thanks help helped lot overall decided go class decorator pattern looks less invasive rest ts code needs annotation managed make work ts mean solution created pr would cool confirm correct work road looks like working indeed end one knows vue better maybe see possible problems ready work make usable everyone basically business done basic transformations make typescriptish removed part introducing error basically sure necessary anyway ps would nt better provide write access everyone master branch one contribute small example style repo without need fork", "d": "6/2015"}, {"body": "slcodenine cool glad get working necessary make sure instance gets fresh copy initial data otherwise object shared among instances class class function called plain function otherwise would easier needs bit work deal maximum call stack issue likely handling circular references public write access sounds bit open fork pr pretty standard imo since long run may use official recommendation ts users", "d": "6/2015"}, {"body": "anyone interested typescript support vuejs get typescript declaration file easiest way install npm module tsd create directory typings well tsddts file reference javascript file top block javascript editors typescript capabilities understand vue code works especially well github atom browser typescript plugin well microsoft new crossplatform code editor visual studio code typescript declaration files enable editors understand javascript parse enable code completion hits intellisense creating typescrpt declaration file difficult done several basically collection interfaces define parameters return values object functions library current version vue definitelytyped vesion", "d": "7/2015"}, {"body": "go bit reacty fluxy classes flatextendible need remove data stuff decorators really powerful things use heavily javascript import vue elementdirectives components listen watch vue elementdirectives evilicon components player export class app extends vue really think static properties static inherit true static props test", "d": "7/2015"}, {"body": "jabher interesting ideas decorator made also experimental feel free make version", "d": "7/2015"}, {"body": "think bit fastndirty though working good also needs integration far wrapper slow loading due nothing compiled babel compiling everything browser fast attempt example code javascript const components vuecomponent class testcomponent extends vuecomponent static template component components testcomponent class app extends vuecomponent static template message message new app el main ideas async data template generation deep integration try implement", "d": "7/2015"}, {"body": "using following syntax vue components written typescript typescript load decorators destruct decorators vuecomponent const createcomponent prop lifecyclehook eventhook vuecomponent transform class demo vue component called demo createcomponent demo vuecomponentbase provides declarations vue provieds component makes sure typescript support type checking autocomplete class demo extends vuecomponentbase put github repo tiny library examples derived original vue examples", "d": "8/2015"}, {"body": "jabher gamperl cool pretty sure nt nt need one official class interface vue components us would subtle preferences beauty easily create interface top vue transpilers", "d": "8/2015"}, {"body": "would disagree every person make good implementation take significant amount time sure something kind something dumb wrapper appear soon anyway deep integration always better least performance speaking vue really looking like made btw gamperl looks like caching anything also bind local componentsdirectivesfilters also objectgetownpropertynames iterating property descriptors sounds like kind bad idea especially serious projects caching help solve fully implementation relying upon event decorators either important using getters setters computed properties methods em methods override constructor using annotations methodsprops using static attributes template inherit looks like one obviously preferable way implement vue would really good idea make bundled default happy help take amount time rewrite parts app actually checking vue code weekend strong feeling following options possible would propose restructure application bit create endpoints one creating classic vue interface another one expose vue class possible though bit complex endpoints footprint rather small maintainability become worse users make", "d": "8/2015"}, {"body": "jabher imo vue ship lean core runs environments anything assumes shipped plugin think possible reference implementation class interface nt want make way use vue", "d": "8/2015"}, {"body": "vue ship lean core runs environments temporary decision long need transpilers would stay effect even widespread native support", "d": "8/2015"}, {"body": "josephsilber call temporary native support pretty dismal moment judging long took universally supported say take another years widespread adoption without need transpilers addition current class interfaces rely stage proposals property initializers part time vue would probably rewritten pure already", "d": "8/2015"}, {"body": "sob", "d": "8/2015"}, {"body": "josephsilber haha something replaces javascript", "d": "8/2015"}, {"body": "webassembly maybe write go smile", "d": "8/2015"}, {"body": "know cool guys actively using babel mostly looking compatibility table best idea guys front making big ecommerce app us company hundreds thousands shops worldwide ember babel internet explorer transpilers already adopted even lot big corps using becoming good practice right", "d": "8/2015"}, {"body": "josephsilber let go clojure yeah smile", "d": "8/2015"}, {"body": "jabher exactly mean need transpilers make work vue core contain parts rely transpilers class interface ship separately", "d": "8/2015"}, {"body": "dammit understood idiot vue supports prototype extension literally make nothing decorators events objectgetownpropertydescriptors stuff javascript class test extends vue test documentbodyinnerhtml working new test el body ready function thistest man needed support decorators even relying upon main app make pr tomorrow nt mind usage something like", "d": "8/2015"}, {"body": "jabher please make standalone module said nt want vuecore installitandyougeteverything eg vuerouter vueresource separate packages vuecore used without used together needed decorators", "d": "8/2015"}, {"body": "jabher implementation feature complete proof concept want separate methods computed properties without using getownpropertynames", "d": "8/2015"}, {"body": "gamperl actually need later becoming prototype properties simply double work hand continuing investigate stuff see everything kind overcomplexified kind blocking implementation details", "d": "8/2015"}, {"body": "great discussion heard vuejs today quite fond typescript like many seems like none implementations provide type safety template string something recently added ts tsxjsx support might suggest something like following ts class person public classname myclass constructor public first string public last string public age number thisclassname someotherclass function render p person type safety refactoring methods vars wo nt silently break return data member variables methods var data new person john doe suggested var demo new vue el demo data data render render seem plausible fail use vuejs binding since assigned value property name", "d": "10/2015"}, {"body": "hello wrote type definitions vuerouter anyone would like add file definitely typed please inform", "d": "11/2015"}, {"body": "coffeescript", "d": "11/2015"}, {"body": "auvipy want coffee script", "d": "11/2015"}, {"body": "writing vuejs apps coffeescript", "d": "11/2015"}, {"body": "spending time thinking problem came simple solution typed templates typedtmpl nt implemented features vue time however good handlebars replacement", "d": "11/2015"}, {"body": "well wrote independent template engine whats connection vue", "d": "11/2015"}, {"body": "support typescript", "d": "11/2015"}, {"body": "wrote definitions nt tested definitions might mistakes", "d": "12/2015"}, {"body": "tinkering think problem separation two members object passed eg struggled hours trying create generic type definition would make typescript understand inside functions may refer either members members nt think possible looks like working feature lets define type function calls currently feature different idea take actual class pull apart using decorator basically write model part naively plain class without vue got far would want pass see statement possible pull pass along filters things nt important typesafety nt really know know seen far nt work something like passing object actual typechecking internally structure eg assertion members accessed even exist defeats purpose using typescript simply checking structure passed crude rather uninteresting need find way write models actually get checked", "d": "1/2016"}, {"body": "mindplaydk month ago wrote prove concept idea using decorators similar ones github production code works perfectly", "d": "1/2016"}, {"body": "gamperl using decorators similar ones github production code works perfectly thanks sharing", "d": "1/2016"}, {"body": "hello created", "d": "1/2016"}, {"body": "many ways approach honestly wish vue would go angular way port whole thing typescript much better large projects", "d": "1/2016"}, {"body": "mindplaydk read post using class vueoptions may want look pattern proposed year ago may bit outdated still using something similar time", "d": "1/2016"}, {"body": "think like best far seen gamperl thing would differently things nt matter type lifecycle event handlers formatters nt used actual methods class would nt define static members methods decorators since nt matter would probably define interface fixed set callbacks example one returns list formatters defined type think problem everyone would come something slightly different conducive building community everyone running different direction also seems like every solution come works one class internally multiple components working together think hard address starting classes trying transform vue components using decorators runtime transformations think trying apply type safety afterthought something complex nt really viable approach betting one reason angular team moved typescript want something comfortably scales big projects large teams plain js lots docblocks external documentation nt best way go", "d": "1/2016"}, {"body": "using annotated typescript classes vue fairly big project works perfectly nt experience problems complexity personally really like typescript company mostly using typescript project like vue makes totally sense use plain js using typescript restrict usage typescript community make harder people start", "d": "1/2016"}, {"body": "using typescript restrict usage typescript community make harder people start think strange point view true think typescript would likely audience switching typescript nt affect angularjs community plenty people continue use compiled js using prebuilt js whole point typescript essentially javascript type annotations output plain js essentially typescript type annotations stripped eg would written plain js anyhow main difference plain js jsdoc typescript far superior type system stronger typechecking tool much better designtime ide feedback providing higher productivity use typescript consumer nt ever look typescript code take prebuilt js code work people consume js libraries begin whether built preprocessed plain js typescript coffeescript something else anyhow point view nt wish long language debate really nt feel js suitable many complex things gets used today better options", "d": "1/2016"}, {"body": "mindplaydk would nt agree less clear identity users migrating alternative frameworks due move typescript end compiling languages js end js right anyhow think support languages looked help grow community however using typescript build view wo nt necessarily solve anything bloat compiled distribution version", "d": "1/2016"}, {"body": "using typescript build view wo nt necessarily solve anything bloat compiled distribution version clearly really used typescript", "d": "1/2016"}, {"body": "think right place start flame war expressed earlier move vue ts discuss provide nice ts interface vue every thing pointless", "d": "1/2016"}, {"body": "gamperl said", "d": "1/2016"}, {"body": "hello think adding typescript definition files repository current version contains definition file", "d": "2/2016"}, {"body": "possible distribute definition files separately ideally want keep separate vue written typescript available vsvsc users nice", "d": "2/2016"}, {"body": "needed separate going utilize definitelytyped copy paste files included nt download manually would like hear opinions people really wonder people hopes", "d": "2/2016"}, {"body": "definitelytyped sounds like better idea", "d": "2/2016"}, {"body": "worked typescript yrs vue yrs thoughts publish vuejs definitions definitely typed trust dts published unless wrote generate appdts specific app viewmodelapi vueify frustrating part vuejs typescript dynamic nature vuejs api viewmodel generates api runtime gettersetters alternate location methodsevents scoped viewmodel code structure typescript understand shift unless informed thus either needs remapping model api needs dts file denotes app api believe vueify generate dts file could help assert type conformance use viewmodel methodfilterstemplatesevents feels right path go vue need written typescript vue api change using typescript api babel enabling generation typescript definition file specific vue file would provide many benefits autocompletion model errors development method errors template errors see react jsxtsx thought allot hindsight contorting vue ts structures ideal today generating dts enhance vuejs use feels along path would like see ted thu feb pm evan notifications githubcom wrote definitelytyped sounds like better idea reply email directly view github", "d": "2/2016"}, {"body": "frustrating part vuejs typescript dynamic nature vuejs api thought allot hindsight contorting vue ts structures ideal today generating dts enhance vuejs use feels along path would like see insightful think pretty much nails feel missing various thirdparty dts files accompanying contortion code mixins etc whether trust libraries approach contorting vue match ts typical oo patterns may deed still fear making cornerstone big ts projects seen sort thing go wrong since started writing ts years ago using plain js large projects something get behind anymore", "d": "2/2016"}, {"body": "mindplaydk would love hear missing latest definitelytyped definitions one core team heavy typescript user recognize useful lot projects want support", "d": "5/2016"}, {"body": "would nice vueclasscomponent latest definition sync imho thing dont make vue brain choice vue dont use classes extend constructor called make somewhat parallel class system vue used classes typescript integration would much smooth", "d": "5/2016"}, {"body": "druppy mostly class current state insufficient awkward defining components static properties either use attach outside class declaration use decorators stage proposal reality never extend components one levels deep always export plain object options nt even use explicitly personally nt use typescript dts file saying sync vuejs core anything preventing working properly typescript", "d": "5/2016"}, {"body": "ok using static properties directly guess need look commenting miss constructor seems like close make components classes extends parent class know details vue shapes current model hoped use classes future code js ts code regarding dts files overlaps dont collide due namespace would nice one file needed", "d": "5/2016"}, {"body": "figured add anyone interested made library decorators allows build fully featured vue components standard familiar typescript syntax due way vue handles works perfectly ides intellisense used along vuerouter build complete database admin app still nt tested every corner case working really well maintaining updating vue enough interest", "d": "7/2016"}, {"body": "looks quite nice itsfrank give go real soon really like vueclasscomponent evan made covers aspects like ability use typescripts full potential vue even makes exiting", "d": "7/2016"}, {"body": "good news convinced project manager use vuetypescript prototype project starting means working withon vuetypescript every day professional setting least september lead substantial feature additions validation coming weeks obviously vuetypescript remain opensource free use mit license", "d": "7/2016"}, {"body": "great itsfrank really curious see evolve", "d": "7/2016"}, {"body": "awesome itsfrank", "d": "7/2016"}, {"body": "looked many different ways integrate typescript vuejs itsfrank decorator system exceptional restructures ts vue compatible js structures compiletime types must map definiton files really ideal model follow would like see become official way vue ts integrate benefits vuejs remains uneffected stays focused js version without needing ts core project vue typescript wraps existing vue api likely trails slightly ideal given api consistent value types added really remaining area work typing within templates tsxjsx transforms great work itsfrank vue typescript becoming defacto way integrate ts vuejs actively evaluating approach use active project harland clarke thanks", "d": "7/2016"}, {"body": "good way integrate webpack", "d": "7/2016"}, {"body": "amcsi look seed app vue typescript webpack integrated evaluation seed project really highlights good implementation really good errors vs code propscomps workflow aligned vue runs aspect lack vueify externalized templates html although looking move standalone html templates reasons prior sped", "d": "7/2016"}, {"body": "would nice see vue typescript publish sample project templates vue cli ts browserify ts vuerouter browserify ts webpack ts vuerouter webpack", "d": "7/2016"}, {"body": "possible work vue files", "d": "7/2016"}, {"body": "think possible changes would need happen vueify lang ts typescript needs compile ts files time mapping errors back vue ts code embedded hard externalizing template using ts files gets ide ts workflow normal tsconfig also template external could process template js get ts errors across templates typescript react within tsx jsx transform errors template", "d": "7/2016"}, {"body": "would nice see vue typescript publish sample project templates vue cli ts browserify ts vuerouter browserify ts webpack ts vuerouter webpack create simple vuecli template basead vuetypescriptseed try", "d": "7/2016"}, {"body": "thank motivating hear positive feedback country past five days updates slowed planning adding new features week amcsi vue format even starting vue js stopped using favor external templates vscode nt able provide coding assist currently support multisyntax files set editor html worked fine highlighting however lost autocompletion functions case typescript half benefits think adding langts functionality vueloader would make functional would lose one two main benefits typescript ides start handling multisyntax files danielschmitz skimmed repo looks solid good stuff indeed planning making vuecli templates near future also yet try vuetypescript vuex never used vuex seems like quite popular would important make sure work nicely together someone experience could try point issues vuex vuetypescript would go long way making vuetypescript closer v", "d": "7/2016"}, {"body": "itsfrank webstormphpstorm could potentially support nt support ts code vue script tags yet already make use dt stuff use regular kind situation real reason vue file support editors nt support anyway real reason editors support nothing interpret got ta start somewhere p nt want make demands could really nicetohave", "d": "7/2016"}, {"body": "amcsi yeah however nt think vuetypescript leverage yet warrant changes editor side take look issue inline html scripts nt forced doubt", "d": "7/2016"}, {"body": "still think vue support even editor showers red squiggles something work towards anyways though small components pain make three separate files", "d": "7/2016"}, {"body": "itsfrank nt know vscode user webstormphpstorm yea like said think gets possible compilers things editors may change accordingly allow editing ways well", "d": "7/2016"}, {"body": "hello itsfrank build complex example pls wait hours thankyou", "d": "7/2016"}, {"body": "itsfrank seems gap lack components mapping object typically verbose component names simplify template use using components example import vuecomponent vuetypescript import subcomponent componentssubsubcomponent import tankcomponent componentstanktankcomponent vuecomponent template require battlehtml export class battle extends vue might also nice provide generic means adding items component object case api changes new items components events etc example import vuecomponent vuetypescript import subcomp componentssubcompsubcomp import tankcomp componentstankcomptankcomp vuecomponent template require battlehtml export class battle extends vue", "d": "7/2016"}, {"body": "case think current behavior vuecomponent sufficient example import vuecomponent vuetypescript import subcomp componentssubcompsubcomp import tankcomp componentstankcomptankcomp vuecomponent template require battlehtml components sub subcomp tank tankcomp export class battle extends vue vuecomponent allows use entire component api decorator vuetypescript trailing think decorators created properties referenced code case contents components object never referenced inside class typescript nt know", "d": "7/2016"}, {"body": "anyone reading issue future something like actually perfectly valid import vuecomponent vuetypescript vuecomponent mycomponent data hello goodbye computed confusedgreeting function return watch function new old consolelog old became new export class uselessclass case adding html would instantiate component like standard vuejs vuetypescript missing features passed decorator pass values used code inside decorator simply cast like ugly work vuetypescript gets updated like typescript superset javascript dont lose features vuetypescript sort built mentality well except things outside typescripts control like vueify", "d": "7/2016"}, {"body": "digging ok keeping vuecomponent object generic object passed taking deeper look output looks like ts injecting methods decorator metadata runtime see overhead transforming data structures runtime component creation thought ts compiler compiletime runtime makes think differently another item typescript see types across methods instances invalid mistyping string number ts caught error check missed ready error essentially vuecomponent object type checked scoped class please take wrong way digging understand works", "d": "7/2016"}, {"body": "yes small overhead mainly iterating keys constructing component object loadtime since vuecomponent evaluated file loaded overhead effect components loaded since point already constructed pure vuejs include utility vuetypescript measure time impact vuetypescript vs total load time look source ts nt plan documenting even medium scale project negligible compared vue loadtime would need create components multiple thousands individual variables functions effect far tell typechecking vuecomponent object really nt way since object component class merged prior loadtime philosophy using decorators class behaviors vuecomponent much possible use object option provided vuetypescript ill post output timing utility shortly", "d": "7/2016"}, {"body": "output medium size project components times ms note project uses vuerouter loader resource touch plus bootstrap jquery threejs", "d": "7/2016"}, {"body": "following thread looking convert personal vue gwt toolkit typescript vue gamperl initial protoype great help typescript features decorate every class make component heavy weight instead code like extra runtime overhead code generated using feature specify type functions ts interface mymodel msg string export default name foo specify component name data mymodel return msg hello methods append mymodel suffix string thismsg suffix computed uppermsg mymodel return thismsgtouppercase template get intellisense paradigm without overhead decorators happen use typescript use inheritance typescriptbased components take look vuets disclaimer author", "d": "9/2016"}, {"body": "dyu nice idea without decorators code gets much simpler loose intellisense methods hooks typescript interface mymodel msg string export default name foo specify component name data mymodel return msg hello methods append mymodel suffix string thismsg suffix mymodel suffix string thisappend suffix shows error since mymodel methods template idea fix", "d": "9/2016"}, {"body": "could mymodel used together vuejsvue form self class typescript interface mymodel msg string interface mymodelself extends modelmsg vuejsvue export default data mymodel return msg hello methods append mymodelself suffix string readable bit verbose", "d": "9/2016"}, {"body": "gamperl sure remove errors ts export interface mymodel msg string append mymodel msg string export default methods append mymodel suffix string thismsg suffix mymodel suffix string thisappend suffix druppy yep works well appears verbose sure uses classes without decorators complex components using similar approach vuets", "d": "9/2016"}, {"body": "hello reading feel need one true vuets like vuejs would love official vuets project discover lot good way use typescript vue looking use itsfrank one dig bit would possible see merge one dyu one like idea org great idea logo also one true community drive project rised could add vuejs readme lot good thats nice", "d": "9/2016"}, {"body": "aloisdg think current way things going dts files becomes part npm maintained vue team ideal possible way official way support typescript vue focus expanding foundation", "d": "9/2016"}, {"body": "trying angular found package tshelpers package enable us reduce file size using decorators", "d": "9/2016"}, {"body": "closing vue vuerouter vuex ship typings right npm packages terms component decorators offical many great community solutions thanks everyone involved discussion", "d": "10/2016"}, {"body": "would still nice able use typescript vue files well far know possible right", "d": "10/2016"}, {"body": "amcsi vuetsloader use typescript single file component", "d": "10/2016"}, {"body": "oh wow", "d": "10/2016"}, {"body": "also introductory guide vuets integration check", "d": "10/2016"}, {"body": "made vue typescript example using standalone vue little experience vuetswebpack feel free make pull request working would nt recommend encountered many bugs far use instead", "d": "10/2016"}, {"body": "would please file bugs related projects curious", "d": "10/2016"}, {"body": "curious people thread interested type safety vue component ide features autocompletion eg prompt feel ts vue nt prerequisite implementing ide features writing projects using vue component ts everything else far feeling type vuex store great never found needing much type vue component hooking data actionsgetters store template although appreciate itsfrank herringtondarkholme work would nt use vuetypescript keeping templatestylescript visual proximity file important avts looks promising find benefit brings nt outweigh complexity brings", "d": "11/2016"}, {"body": "understand arguments regarding hard time making ts vuejs work fully together pragmatic approach may seem sensible like autocomplete feature working building production code pure ts makes sleep really good night seems like close could get class back could become beatiful maybe would help correct med wrong templates like could show boot project using vuetsloader using vuets files maybe merge tsloader using within vue files vanilla ts use far understand biggest unresolved issue use tsx file via tsc support pass react hand core component ts support close able make ts integration nearly painless hope next project make use ar ts goodies", "d": "11/2016"}, {"body": "druppy gotten spread operator work jsx running issue posted", "d": "11/2016"}, {"body": "might quirky found setting vue sfc file type typescript enough editors give semantic completion though highlighting lost works vscode vim", "d": "11/2016"}, {"body": "herringtondarkholme would mind sharing screenshot vscode", "d": "11/2016"}, {"body": "vim vscode usefule comment mhegazy guess ts service robust enough ignore html tags editors sending service", "d": "11/2016"}, {"body": "well salsa giving best guess novdec vscode plans restore js support html write vue language server based vscode html language server leverage salsa enable intellisense language features jsts vue sfc would nt go details digress topic interested open issue continue discussion", "d": "11/2016"}, {"body": "seanjm nope bit turned fact need use ts babel hope new feature ts bring focus able use different code models vue really good performance low footprint really makes vue solid choice", "d": "11/2016"}, {"body": "druppy debugged posted working configuration gist", "d": "11/2016"}, {"body": "know people thread gon na love", "d": "5/2017"}, {"body": "thank much sharing octref right time needed", "d": "5/2017"}, {"body": "thanks octref played bit really like proper typescriptin inside component files anyone interested compatible template", "d": "5/2017"}, {"body": "zigomir experimental wip would nt say good idea distribute widely yet see context future bright ts definitions provided much better semantical intellisense typechecking region etc used augment shape contextual typing", "d": "5/2017"}, {"body": "current vuejs default webpack templates support css preloaders almost outofbox need relevant entries already wonder could done typescript one start writing typescriptbased components extra changes webpack config even letting typescriptbased components coexist babelbased ones quite close achieve objective experiments local project still need rename entry point changing loaded way configure webpack entry point could loaded individual typescriptbased files loaded", "d": "6/2017"}, {"body": "believe people come around post still years later wrote article medium describing optimally setup typescript vue using webpack starter", "d": "7/2017"}, {"body": "typings vueutil recommended use vueutil", "d": "7/2017"}, {"body": "opening issue almost exactly years ago nt commented alot know issue closed say improvement solution dreamed wanted thank people making possible clap fyi", "d": "10/2017"}, {"body": "nt think makes sense use nested value computed property computed properties meant data needs persisted every time computed property getter invoked fresh copy value returned case object computed property every time get different object trying write back modifying different object every time also example nt explain want way since eventually want write back instead", "d": "10/2014"}, {"body": "fair enough problem originally trying solve something akin following view model array objects view displays objects radio selection selected object persisted model html objname elsewhere view display checkbox configures currently selected object originally attempted following case properties could manipulated selected object first tried method several ways around multiple computed properties child vm config directly watching keypath care seems like good reasons way originally attempted large part motivation asking thanks", "d": "10/2014"}, {"body": "resolved new param attribute elements", "d": "10/2014"}, {"body": "oh actually bound value evaluates true unsets inline display value fallback whatever initial css value element initially want overwrite initial style explicitly use instead", "d": "10/2014"}, {"body": "want element initially hidden js loads inline", "d": "10/2014"}, {"body": "use css rules", "d": "10/2014"}, {"body": "seems fix reset wait nexttick update", "d": "10/2014"}, {"body": "change components instantiated next tick broadcast events happens since events synchronous new components miss might case", "d": "10/2014"}, {"body": "mean receive broadcast events matter fire also array empty reproducing issue took bit diving though chrome script debugging tool find", "d": "10/2014"}, {"body": "wow ca nt believe stupid bug know look fix commit p", "d": "10/2014"}, {"body": "haha splice removing elements nice", "d": "10/2014"}, {"body": "actually deletes elements index hence empty children array", "d": "10/2014"}, {"body": "oh wow learn something every day", "d": "10/2014"}, {"body": "adding managed work around issue", "d": "10/2014"}, {"body": "components default isolated scope direct access parent properties many ways get around make component access parent properties use pass bind still considering directives root element isolated component handled tricky theoretically handled component scope context feels natural able bind parent property", "d": "10/2014"}, {"body": "using computed properties instead function", "d": "10/2014"}, {"body": "rayfranco computed properties good choice however want pass value function computed properties solve problem", "d": "10/2014"}, {"body": "chaomao tried", "d": "10/2014"}, {"body": "rayfranco way works however function invoke twice elegant", "d": "10/2014"}, {"body": "longer evaluate twice", "d": "10/2014"}, {"body": "right fiddle ca nt seem find issue", "d": "10/2014"}, {"body": "sorry wrong sample wait update", "d": "10/2014"}, {"body": "update cloudflare cdn", "d": "10/2014"}, {"body": "indeed bug sorry fixed next branch", "d": "10/2014"}, {"body": "issues code could computed property property method called causing conflict part issue actually nt need method method nt define first", "d": "10/2014"}, {"body": "thanks fast support great project", "d": "10/2014"}, {"body": "tested works", "d": "10/2014"}, {"body": "hi sure something similar documented", "d": "10/2014"}, {"body": "use value initialized initialized bindfunctions update test param value click work example", "d": "10/2014"}, {"body": "expected behavior rules thumb list properties expect component option upfront possible component initialized way add observed data", "d": "10/2014"}, {"body": "sorry indeed bug directive skips setting watcher falsy initial value give truthy initial value work meanwhile fixed next branch", "d": "10/2014"}, {"body": "thank looking", "d": "10/2014"}, {"body": "resolved check release", "d": "10/2014"}, {"body": "create custom filter filters array anyway want", "d": "10/2014"}, {"body": "thanks tip also seems handled ing work fine", "d": "10/2014"}, {"body": "able achieve", "d": "10/2014"}, {"body": "instead pm evan notifications githubcom wrote able achieve setting transition none vleave reply email directly view github tim smart developer tel fax level cuba st po box marion st wellington new zealand", "d": "10/2014"}, {"body": "sorry though said try", "d": "10/2014"}, {"body": "great works thanks", "d": "10/2014"}, {"body": "way toggle moment able disable transitions something like hack setting something like sure would work since nt android device test", "d": "10/2014"}, {"body": "upgrade using everything works well thanks new api looks simple amp nice like", "d": "10/2014"}, {"body": "using expression incorrectly actually calling instance dom api method method nt manipulate array never call instance methods expressions write expression mutates array turn removes instance", "d": "10/2014"}, {"body": "got thanks", "d": "10/2014"}, {"body": "using longer happen", "d": "10/2014"}, {"body": "yep still using npm", "d": "10/2014"}, {"body": "yeah bunch breaking changes make sure read changes doc", "d": "10/2014"}, {"body": "thanks stick sanitizing dots", "d": "10/2014"}, {"body": "got gets reference anyway dig recursion issue otherwise close vue rocks", "d": "10/2014"}, {"body": "reason alias causing infinite loop first recursion referring parent children instead repeating list make work alias write like guess without alias makes much simpler", "d": "10/2014"}, {"body": "field present initial vue detect newly added properties either define initial data fine use", "d": "10/2014"}, {"body": "thanks", "d": "10/2014"}, {"body": "good catch fixed", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "close since related vue code feel free post vuejsdiscussion", "d": "10/2014"}, {"body": "sounds quite vague anyway actually use workaround", "d": "10/2014"}, {"body": "using transitions element vif", "d": "10/2014"}, {"body": "seems working fine sure happening", "d": "10/2014"}, {"body": "pass object changes object reflect parent", "d": "10/2014"}, {"body": "component like changes currentdate inside component nt reflect parent forcing", "d": "10/2014"}, {"body": "reason nt reflect parent component isolated scope avoid modifying parent state take whatever data parent gives unidirectional data flow needs access modify parent state make inherit parent scope", "d": "10/2014"}, {"body": "would inherit much good pattern", "d": "10/2014"}, {"body": "sure big component input field make component", "d": "10/2014"}, {"body": "would love keep behavior consistent arguments passed functions javascript ca nt modify original variable outside function within mutate object passed", "d": "10/2014"}, {"body": "makes sense", "d": "10/2014"}, {"body": "used create custom components behaving like form inputs using vwith eg would switch component could use like concept keeping parent scopes untouched makes sense except seems way reproduce inputtype behaviours using components nt find another way would great way using vmodel custom components suggestions", "d": "12/2014"}, {"body": "inside although maybe could old", "d": "12/2014"}, {"body": "use inside component template still gon na reference child property clone right manually watching value change operating parent using quite dirty one sure understand reasoning behind change whole point vm library performs bidirectional binding maintaining accurate representation decoupled data imposing hierarchical flow architecture javascript ca nt modify original variable outside function within mutate object passed sure understand mean eg javascript root scope var rootvariable foo parent scope function var parentvariable consolelog rootvariable bar", "d": "12/2014"}, {"body": "mean js var rootvar var rootobj function child parentval parentvala parentval child rootvar consolelog rootvar child rootobj consolelog rootobja pass object indeed mutate child component ca nt change parent reference", "d": "12/2014"}, {"body": "ok example makes sense think context vm library handling bidirectional binding key allow form inputs manipulate source data components access parent scopes nt see big difference semantics form input comes preexisting component library applies custom behaviour html tag custom ui component level access right", "d": "12/2014"}, {"body": "thinking tend agree oneway restriction unnecessary likely reverted next point release", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "hugely appreciated reverted discussion took place although noticed reverted back newer versions thing vmodel directive still escaping logic made readaptable custom components impossible create custom components behave like form inputs manipulating referenced value parent scope let take example someone wanting create switch multiple choice different markdown select possible using default html inputs nothing like allowed understand reasoning philosophy behind one directional data flow approach nt really allow anyone adopt different patterns exception form inputs still behave like twoway binding custom components sort escape rule nt mean annoying reopening conversation since still using vuejs long time great supporter one things always appreciated aspect unopinionated versatile vuejs presented start lightweight vm class nt try enforce upon monolithic architecture allowing truly modular however wish structure tour application escaping framework hell feature war feels bit like step back trying impose philosophy limiting choice really expect vuejs", "d": "10/2016"}, {"body": "custom components use work native inputs see docs essence component accepts prop component value changes emit event new value parent uses component value updates", "d": "10/2016"}, {"body": "oh nt spot guess pulled elaborate rant nothing sorry actually quite nice implementation still really liked two way data binding syntax present sub versions though", "d": "10/2016"}, {"body": "give context reproduce mobile devices particular ipad", "d": "10/2014"}, {"body": "tested iphone ios ca nt seem reproduce issue css using transition", "d": "10/2014"}, {"body": "email test case translatez transforms", "d": "10/2014"}, {"body": "cool able reproduce issue using css fixed simple test case let know works app seems using npm install next", "d": "10/2014"}, {"body": "working great ipad thanks getting issues chrome android though", "d": "10/2014"}, {"body": "specify versions chrome android", "d": "10/2014"}, {"body": "android chrome pm evan notifications githubcom wrote specify versions chrome android reply email directly view github", "d": "10/2014"}, {"body": "hmm exactly setup everything seems work fine exactly running", "d": "10/2014"}, {"body": "nevermind everything working fine cheers", "d": "10/2014"}, {"body": "cool app looks slick btw let know launches", "d": "10/2014"}, {"body": "router", "d": "4/2016"}, {"body": "pm want see app reproduce", "d": "10/2014"}, {"body": "need call remove element", "d": "10/2014"}, {"body": "work expected stuck moment", "d": "10/2014"}, {"body": "gotcha hoping put logic parent vm would nt modify child every time use looking forward giving shot soon", "d": "10/2014"}, {"body": "thanks bug compilation logic fixed", "d": "9/2014"}, {"body": "issue use overwriting component initial parent object nt want overwrite entire need pass individual properties using also longer necessary manually list dependencies computed properties", "d": "9/2014"}, {"body": "ok thank", "d": "9/2014"}, {"body": "thanks catching fixed", "d": "9/2014"}, {"body": "thanks catching bug computed property setup procedure mutating original option object causing pollute instances fixed", "d": "9/2014"}, {"body": "thing bugging well made work like edit changed option make less confusing js var mycomponent vueextend name mycomponent options vuecomponent mycomponent options constructor name logged console", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "maybe could make work addchild used options", "d": "10/2014"}, {"body": "indus yeah made work", "d": "10/2014"}, {"body": "bug component nested repeat class name gets lost compilation", "d": "4/2015"}, {"body": "interesting class name actually shows myclass beforecompile changes ready seems chrome issue since works properly safari devtools", "d": "4/2015"}, {"body": "isolated issue indeed chrome bug", "d": "4/2015"}, {"body": "tried track code stupid", "d": "4/2015"}, {"body": "use inside callback trigger next batch rendering also item vuecomponent use hook", "d": "9/2014"}, {"body": "thanks seems worked", "d": "9/2014"}, {"body": "prints warning using nonminified version longer throws error", "d": "9/2014"}, {"body": "\u7ee7\u627f\u4e4b\u540e\u786e\u5b9e\u4e0d\u9700\u8981\u9876\u5c42\u7684 vue \u6700\u540e\u90a3\u6bb5\u4ee3\u7801\u770b\u4e0d\u592a\u61c2\u4f60\u60f3\u505a\u4ec0\u4e48", "d": "9/2014"}, {"body": "\u7ee7\u627f\u4e4b\u540e\u786e\u5b9e\u4e0d\u9700\u8981\u9876\u5c42\u7684 vue \u554a", "d": "9/2014"}, {"body": "\u5c31\u662f\u8bf4\u5df2\u7ecf\u6709\u89c6\u56fe \u7528vueextend \u51fa\u6765\u7684component\u600e\u4e48\u6837\u548c a\u5173\u8054\u8d77\u6765", "d": "9/2014"}, {"body": "\u548c vue", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "resolved one thing note using mustache binding attribute nt create twoway binding sets initial value use twoway bindings", "d": "9/2014"}, {"body": "thanks although nt need two way binding particular instance work correctly using vmodel looking forward release thanks effort", "d": "9/2014"}, {"body": "way evan want say thanks great job framework quite enjoyable far compared angularjs", "d": "9/2014"}, {"body": "tested vue see performance improvement strangely trying use onetime interpolation feature working example", "d": "9/2014"}, {"body": "oh actually messed result jsfiddle still using even slower onetime interpolation nt help much", "d": "9/2014"}, {"body": "well obviously going slow meant complex markup creating vue instance every repeated item setting data binding essentially paying upfront cost make consequent updates faster let say complex list takes render raw js takes modify one item array update takes like single data binding update raw rendering feel janky imagine typing filtering list perf largely cssbound raw rendering jank build every keystroke become much noticeable making tradeoff take longer render initially faster update later argue applications opposed contentcentric websites like news media instant feedback user input much important initial rendering hand almost every databinding library super slow test case compared raw rendering vue already among fastest although could still improved slower particular case repeated markup simple repeated lists complex templatedata general faster", "d": "9/2014"}, {"body": "reason markup simple boiled app slow performance test case basically swapping hundreds thousands objects user changes levels state app switching level level level level reload state objects causing noticeable delay click vuejs link jsfiddle multiple times see delay alternatively way turn data binding vrepeat array basically constant triggering view updates based array changes necessary", "d": "9/2014"}, {"body": "static rendering think simply example", "d": "9/2014"}, {"body": "right way disable binding like making custom emitter custom function data", "d": "9/2014"}, {"body": "hmm think easiest thing write custom directive bind array manually assemble markup directive update function", "d": "9/2014"}, {"body": "first thank fantastic framework design strategies speedup init time grid scenario long loading time vs raw using version upgrading new version advantage situation", "d": "10/2014"}, {"body": "way vrepeat without databinding ie know want render component forget", "d": "10/2014"}, {"body": "want render huge array fastest way write directive similar instantiating component incur lot additional work even rendered plain innerhtml always fastest also important something ca nt done builtin directives always write", "d": "10/2014"}, {"body": "thanks fixed", "d": "9/2014"}, {"body": "know probably related angular debounce feature unlike angular vue nt digest whole scope single update single update really single update vue synchronous changes batched anyway really necessary debouncethrottle anything", "d": "9/2014"}, {"body": "nt want trigger property updating every keypress event throttle every like search feature grid jsfiddle", "d": "9/2014"}, {"body": "feel belongs userland something needed usecase project really vue general", "d": "9/2014"}, {"body": "ayamflow agree plugin though", "d": "9/2014"}, {"body": "something like vueplugin hello function name consolelog hello name var sayhello vueuse hello sayhello bob", "d": "9/2014"}, {"body": "plugin better use built standalone every option would need", "d": "10/2014"}, {"body": "let leave userland feasible approach use two separate properties one vmodel one search key throttle callback vmodel property change search key property", "d": "10/2014"}, {"body": "thanks fixed", "d": "9/2014"}, {"body": "nt appear work still still fail trigger event", "d": "2/2016"}, {"body": "ryanmortier conflicts modifier syntax introduced use periods event names", "d": "2/2016"}, {"body": "weird theoretically nodes always comment ref node end need details setup", "d": "9/2014"}, {"body": "closing could nt reproduce", "d": "9/2014"}, {"body": "able reproduce working sorting library looks like sorting last item list vrepeat comment node moved end beginning vrepeatordered list exception occurs try put together reproduction case", "d": "12/2014"}, {"body": "example reproduction steps seems like sorting library responsible comment getting moved could vue protect error anyway way could define repeat depend comment retaining position within list", "d": "12/2014"}, {"body": "problem could nt find easy fix inside vue instead made sure comment always end list sorting sortable options javascript onend function evt thislistsplice evtnewindex thislistsplice evtoldindex", "d": "1/2015"}, {"body": "", "d": "6/2015"}, {"body": "dunno going help anyone case elements array nt id field", "d": "7/2015"}, {"body": "would need", "d": "9/2014"}, {"body": "take look enhanced grid example search feature fired lot times type something", "d": "9/2014"}, {"body": "oh way nt know vue bug try filter search param sort nothing happens", "d": "9/2014"}, {"body": "adding set function computed property filtered data see triggers change inside get function nt update new value sorted clicking header", "d": "9/2014"}, {"body": "observations accessing well note every time access computed property calling evaluation function search param returning new array every access longer works sorting returned copy longer need list possible dependencies computed property functions", "d": "9/2014"}, {"body": "maybe vue computed properties way peek value without triggering dependencies avoid behavior sort latest array data nice", "d": "9/2014"}, {"body": "ok finally understood rewrote grid component issue invalid gon na close watcher serves well manually determine dependencies", "d": "9/2014"}, {"body": "would benefit something like currently done lameo hack creates array n empty elements purpose repeating", "d": "9/2014"}, {"body": "yeah would handy feature include", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "found behavior changed pass something like component nt merge existing data properties replaces", "d": "9/2014"}, {"body": "cool revisit examples finish testing currently close", "d": "9/2014"}, {"body": "yup due internal changes default shallow watch made updates force deep watch", "d": "9/2014"}, {"body": "thought true end force initial callback give try maybe something like angulars watchgroup watchcollection would solution way quick responder many thanks affort really like work", "d": "9/2014"}, {"body": "thanks api still slightly flux release feel deep watching frequent use case immediate callback invocation third argument deep watching fourth immediate callback", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "\u4f60\u5bf9 computed computed \u662f\u4e00\u4e2a get", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "\u7248\u672c\u91cc\u9762 computed \u4f60\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u91cc\u9762\u5728 computed component \u7684 ready", "d": "9/2014"}, {"body": "use view destroyed switch another view switch back two socket handlers old one referencing already destroyed instance set null using want clean socket handlers view hook", "d": "9/2014"}, {"body": "keepalive works", "d": "9/2014"}, {"body": "event view components keepalive navigated", "d": "9/2014"}, {"body": "use attached wed sep pm alisson cavalcante agiani lt notifications githubcom wrote event view components keepalive navigated reply email directly view github", "d": "9/2014"}, {"body": "worked way detect inside view component active one", "d": "9/2014"}, {"body": "well currently always check", "d": "9/2014"}, {"body": "way since spa tested many routing libs one best", "d": "9/2014"}, {"body": "nice api looks pretty clean feels like express", "d": "9/2014"}, {"body": "directives fully tested yet things break stage probably try production stuff", "d": "9/2014"}, {"body": "actually thanks raising issue found pretty stupid bug observer implementation fixed", "d": "9/2014"}, {"body": "cool", "d": "9/2014"}, {"body": "html simple", "d": "9/2014"}, {"body": "ok replaced every source code related vue augmenting objects behavior nt happen", "d": "9/2014"}, {"body": "show usage example", "d": "9/2014"}, {"body": "vue next js somewhere could use fiddle", "d": "9/2014"}, {"body": "finally simulated mouseover chart see console", "d": "9/2014"}, {"body": "behavior nt happen nt assign chart thischart", "d": "9/2014"}, {"body": "set work surprised works though since underlying object augmentation mechanism largely", "d": "9/2014"}, {"body": "disadvantages setting flag false", "d": "9/2014"}, {"body": "slightly slower object observation practice going produce noticeable perf issues unless data structure huge like objects", "d": "9/2014"}, {"body": "one thing note providing default data set observed nt see need observe chart object remove default data also work", "d": "9/2014"}, {"body": "vue swaps observed data object property faster method augmentations turn behavior", "d": "9/2014"}, {"body": "turn behavior would nice thanks clarification", "d": "9/2014"}, {"body": "apply lib hooks", "d": "9/2014"}, {"body": "angular used check custom directive event could probably something better fiddle", "d": "9/2014"}, {"body": "nt work", "d": "9/2014"}, {"body": "could provide example using vuenexttick", "d": "9/2014"}, {"body": "thelinuxlich", "d": "9/2014"}, {"body": "thanks", "d": "9/2014"}, {"body": "nt work inside another", "d": "11/2014"}, {"body": "yes checkout vcomponent keepalive changes fri sep pm alisson cavalcante agiani lt notifications githubcom wrote would nice single page apps option persistent vview would recreated every time go route reply email directly view github", "d": "9/2014"}, {"body": "great gon na close issue", "d": "9/2014"}, {"body": "looks like really want use vwith set visitors visitors bind parent data view data specified pm alisson cavalcante agiani wrote something like component used vview ready function thisvisitors parentvisitors would expect anytime parentvisitors changes component visitors array would change nt would right way reply email directly view github", "d": "9/2014"}, {"body": "since using vview apparently nt work together vwith would hard components wants different property root vm", "d": "9/2014"}, {"body": "gone work component eg html var root new vue el div data aaa b bbb view components template msg replace true b template msg replace true", "d": "9/2014"}, {"body": "also try hook instead", "d": "9/2014"}, {"body": "nt worked root vm updated component nt receive change", "d": "9/2014"}, {"body": "way possible access parent root properties inside component templates like", "d": "9/2014"}, {"body": "yes work obviously recommended", "d": "9/2014"}, {"body": "working", "d": "9/2014"}, {"body": "least vview", "d": "9/2014"}, {"body": "try without putting template", "d": "9/2014"}, {"body": "closing fixed", "d": "9/2014"}, {"body": "hard vue plugins like assume full control dom probably better use whole table let plugin handle everything", "d": "9/2014"}, {"body": "sad hear past datatables integration knockout easy", "d": "9/2014"}, {"body": "generally avoid using vue jquery plugins really depends plugin wants manipulate dom ca nt help without seeing code", "d": "9/2014"}, {"body": "anybody else stumbles across approach integrating datatables looks like create simple datatables component creates datatables instance component dom provide model via props object used initialize datatables instance configure model via props provide component prop used provide array datatables instance use watch property reload table needed via props provide writable object component status information written component rows selected one row selected multiple rows selected etc nt hard accomplish tends enough trick cases", "d": "4/2016"}, {"body": "davidkhess post example code help issue", "d": "4/2016"}, {"body": "dependencies lodash personal design decisions get idea vuecomponent datatables props options status data template ready function var self", "d": "4/2016"}, {"body": "use following approach", "d": "11/2016"}, {"body": "try html script var datatableresult var columns var vm download table default data datatableresult articul dateadd discount groupid img price productid retail viewing visible wholesale wholesaleamount sorry english", "d": "12/2016"}, {"body": "managed programmatically mount vue component element well pass props anyone tell appropriate strategy seems work components nt show vue dev tools big deal datatables provides callback function createdcell allows manipulate td node figured would hand dom control datatables create table go back vue manually mounting vue components callback code letting datatables take control table dom applicabilityicon vue file go back vue code mounting component programmatically", "d": "7/2017"}, {"body": "land googling vue datatables another approach found works use vue render using nonobservable list variable hand datatables use datatables calls alter data created function nonobservable vars go thisdatatable null thispersons vfor iterate one time thisinit methods init function thispersons getthedata thisdatatable personstable datatable gist detailed code", "d": "12/2017"}, {"body": "still pretty unstable moment install directly github", "d": "9/2014"}, {"body": "hoping add much overhead thinking points development stable others wish cut made npm points simply using next branch crap shoot stability reason asking opportunity end users projects already using get codebases converted changed api", "d": "9/2014"}, {"body": "yeah problem without enough test coverage nt think current codebase ready tirekicking yet probably remaining bugs moment coverage gets decent probably release people try", "d": "9/2014"}, {"body": "thank precisely asking", "d": "9/2014"}, {"body": "hey thanks noticing trying changes transition systems seems due forcelayout called synchronously instead next frame likely revert change tue sep pm prater notifications githubcom wrote im seeing quite noticeable performance degradation transitions switching forced full tree layout happening frame transitions think try debugging tonight although looks using forcelayout transition animation refactor see get back reply email directly view github", "d": "9/2014"}, {"body": "would mind sharing usage scenario eg many elements transitioned css properties transitioned complex transitioned element", "d": "9/2014"}, {"body": "dynamic binding im triggering animations transition using classes transitioning transform using roughly elements fill viewport hth", "d": "9/2014"}, {"body": "single element reverted branch trigger transition next frame let know fixed issue", "d": "9/2014"}, {"body": "multiple elements inside transitioned element ensured behavior ones transitioned give change shot minutes sep evan notifications githubcom wrote single element reverted next branch trigger transition next frame let know fixed issue reply email directly view github", "d": "9/2014"}, {"body": "see commit next", "d": "9/2014"}, {"body": "commit use latest commit", "d": "9/2014"}, {"body": "seems bit better however think found another bottleneck element removed transition repaints whole tree happens addremove process removed element case still animating appropriate wait callback remove element need animation handler", "d": "9/2014"}, {"body": "venter sep pm evan notifications githubcom wrote sure understand correctly mean enter leave transitions different durations reply email directly view github", "d": "9/2014"}, {"body": "visibly affecting framerate think might better use css animations make sure animations duration simulate delay animations", "d": "9/2014"}, {"body": "hand ca nt seem reproduce visible difference comparison see still visible degradation commit", "d": "9/2014"}, {"body": "follow reason im using token class behavior change sectionname data would persist child component would transition two components possibly scope changes data value updated transition happening styles affected token fix", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "yes considered could probably option code actually already implemented need provide option utilize", "d": "9/2014"}, {"body": "", "d": "9/2014"}, {"body": "spec reserved keyword used identifier eg identifiername eg latter valid error thrown android phonegap uses stock android browser webview container incorrectly implements reserved keyword parsing logic hand probably change something like old browser compatibility", "d": "9/2014"}, {"body": "ah perfect sorry know agree change something like super tested vue android excellent option create mobile hibrid apps memory usage better use ionic angular problem found issue", "d": "9/2014"}, {"body": "going hate haha found next branche another keywords issue keyword file srccompilecompilejs line var def optionsdirectiveswith", "d": "9/2014"}, {"body": "throw error android", "d": "9/2014"}, {"body": "yes hate android", "d": "9/2014"}, {"body": "oh well use bracket syntax keywords lol", "d": "9/2014"}, {"body": "test passed close issue", "d": "9/2014"}, {"body": "somewhat related highly recommend catching types things", "d": "9/2014"}, {"body": "cecchi thanks nt like code style enforced machine", "d": "9/2014"}, {"body": "somewhat shot dark handler inside method evaluates handler set latter would evaluate outdated value would also explain sample value set continue enter characters resumes previous value judging console messages asd asdf asdfj asdfjk asdfjkl asdfjklm asdfjklmn edit codepen additionally log value watch callback see despite ue passed watch callback still retains previous value supports theory looking model directive seems indicate updates handled asynchronously would explain see locking mechanism checked would lock calling within another call property seems like use case designed originally seems somewhat dangerous reupdate property watcher callback without structured update process something like angular would really useful discard pending callbacks outdated values tldr sure bug inherent tradeoff slim efficiency vue seems go might great idea synchronously update property property callback vue lacks explicit digest cycle directives handle updates asynchronously tried codepen wrapping behavior desire", "d": "9/2014"}, {"body": "watch callback fired callback handles syncing user input data overwritten user input typically use get around", "d": "9/2014"}, {"body": "gotcha thanks much help vue really awesome nice work", "d": "9/2014"}, {"body": "part reason component names must contain hyphen personally think works fine current usage work fine", "d": "9/2014"}, {"body": "interesting never picked hyphen requirement documentation perhaps warning console test usage get warning removed warning pulling static prefix inside html", "d": "9/2014"}, {"body": "found documentation avoid naming collisions native elements stay consistent custom elements specification component id must contain hyphen usable custom tag interpreted applicable since nt using custom tag syntax application", "d": "9/2014"}, {"body": "ahh trying already yeah recently reverted warning got work officially personally nt think namespaced components necessary idea could work interested hear", "d": "9/2014"}, {"body": "yes best stay ahead breaking changes branch application hoping future versions break one thing time hierarchy components purpose best practice thing changed name issue making hyphenation hard requirement feature enforcement via warning making documentation explicit necessary", "d": "9/2014"}, {"body": "reason nt think namespacing necessary larger applications want avoid registering components globally instead use module system require needed components defining application component eg way component encapsulates components needs name whatever like without worrying conflicting names", "d": "9/2014"}, {"body": "application mixture truly global components views registered front components specific one view registered within local modules earlier comment thought intent components require hyphenated names exporting component configuration module registering globallylocally hyphenatedplain easy change done case case basis hyphen merely optional initially believed documentation close issue", "d": "9/2014"}, {"body": "hyphen required wish use component form pseudo custom elements eg", "d": "9/2014"}, {"body": "great docs already read thank engaging clarifying", "d": "9/2014"}, {"body": "dispatching custom dom events element using listen vue component events", "d": "8/2014"}, {"body": "dispatching custom events emit dom events yes using von listen vue component events gist von directive", "d": "8/2014"}, {"body": "think better dedicated dom events fact introduces new option", "d": "8/2014"}, {"body": "implement something similar new api example directive bind events js think user component interface easier use one directive dom level abstraction understand sometimes messy want mix dom events custom events", "d": "8/2014"}, {"body": "new option intended used component definition time js eg like keep markup totally write custom directive bind component events think better keep separate", "d": "8/2014"}, {"body": "yes known issue addressed", "d": "8/2014"}, {"body": "possible component instantiated ca nt change type changing data suggestion removing original object replace new one different type", "d": "8/2014"}, {"body": "similar approach sorry new vue", "d": "8/2014"}, {"body": "way idea behind problem dynamically add menu certain user time clicks function function fetches data propagate ui tree tree also propagated application modulesplugins removingreplacing whole index trivial doable need manually dumping temp var dumping index wanted show together items added modules nt handled already vue since replacing object properties adding nodesarrays observed ko straight forward index modification wish know point view suggest another thing without component approach", "d": "8/2014"}, {"body": "moved mithril", "d": "8/2014"}, {"body": "hi still availabledoable also another project ill develop vuejs comes", "d": "9/2014"}, {"body": "take look using next branch get idea ko example differentiation folder item new example using approach", "d": "9/2014"}, {"body": "thanks evan", "d": "9/2014"}, {"body": "please patient complete rewrite currently complete also test coverage work officially released", "d": "8/2014"}, {"body": "\u80af\u5b9a\u4e0d\u53ef\u80fd\u628a jade \u5305\u88c5\u5728 vue browserify jadeify", "d": "8/2014"}, {"body": "hi trying", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "multibyte string example \u3042\u3042\u3042", "d": "8/2014"}, {"body": "thanks reporting issue behaves differently fires events event fixed", "d": "9/2014"}, {"body": "opinion want new directive like bind children following vm databardiv element directly", "d": "8/2014"}, {"body": "hard understand nt misusing vue data", "d": "8/2014"}, {"body": "putting dom nodes data bad idea circular references probably looking something like", "d": "8/2014"}, {"body": "proposed introduce hatch manipulate dom nodes directly avoid mxss pitfall caused difference browser html parser nonbrowser based html parsers use treat html text fragment think cases need parse html text fragment dom subtree sanitize client side use purpose however must treat fragment string avoid mxss case would better treat directly putting dom nodes data bad idea circular references hmm resolve problem provide single way binding dom case probably looking something like feel proposal makes sense also think use convenience accept approach need iterate create list hand", "d": "8/2014"}, {"body": "hmm resolve problem provide single way binding dom case nt think dom node belongs intended data like specific hash holds dom references lile something like like make array dom references avoid overriding issue", "d": "8/2014"}, {"body": "like vref vrepeat make array dom references avoid overriding issue sounds good agree said thank discussion close issue duplicate", "d": "8/2014"}, {"body": "comparing apples amp oranges obviously ko vs vue compared provide binding html markup imho vue wins verbosity ko mithril quite different generates vue markup way optional syntax looks like old school js onclick etc", "d": "8/2014"}, {"body": "vue awesome", "d": "8/2014"}, {"body": "mean tags vue already supports using component custom tags component name must contain hyphen eg use", "d": "8/2014"}, {"body": "hi boussou actually comparing evaluating go one playing around vue likely happy yes using vue sorry yes supports already", "d": "8/2014"}, {"body": "nt close issue", "d": "9/2014"}, {"body": "closing inactivity", "d": "9/2014"}, {"body": "cases would convenient able retrieve pointer given dom node component without creating new component wonder could nt keep api vref however amp vue manage differences", "d": "8/2014"}, {"body": "like idea keeping api simple promise vm reference mixed array dom nodes could confusing well dispatching refs two different arrays maybe another idea using dom nodes", "d": "8/2014"}, {"body": "rayfranco mistake right really looking ability get access dom node without vm effectively vel", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "mainly way work vue query selector create strong dependance toward dom structure exists otherwise think dom report structure js opposite may wrong nodes parsed directives anyways necessary query", "d": "8/2014"}, {"body": "rayfranco using directives avoid need directly querying dom apart dom elements specific behavior canvas video enables access api getcontext pauseplay still decoupled dom believe less dom vm better testing instance", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "introduce new directive refers dom node would need care case new one like html agree ayamflow comment new directive make array dom references", "d": "8/2014"}, {"body": "", "d": "9/2014"}, {"body": "good commit reference thanks addition", "d": "9/2014"}, {"body": "oops nt know pasted wrong commit lol", "d": "9/2014"}, {"body": "yeah probably necessary jsdom slow also vue rendering large portion time spent setting dynamic bindings needed serverside rendering", "d": "8/2014"}, {"body": "maybe could learn something rendr", "d": "8/2014"}, {"body": "looking mercury modular alternative react supposed fast virtualdom module idea possible maybe could possible plug vue vdom serverside rendering sure plugin would enough like dedicated compiler", "d": "8/2014"}, {"body": "hi thinking combine server side client side rendering bindings inject additional processing jade slm simple template template function produce parts rendered html injected marks html comments special format index binding indicated binding next sibling dom element array serialized bindings data used render view client process look like find marks find needed nodes marks attach bindings nodes trigger events needed since vue supports finding marks use treewalker js function getcommentnodes containernode var treewalker documentcreatetreewalker containernode nodefiltershowcomment null false var comments treewalkernextnode commentspush treewalkercurrentnode return comments consolelog getcommentnodes documentbody reduce parsing time find markers simple format content show page loaded question doable side start implementing side examples html index parentmsg childmsg", "d": "9/2014"}, {"body": "interesting idea thoughts would work text bindings right vue still walk whole tree directives text parsing actually relatively cheap part vue rendering procedure ideally want reuse template server client concept marking bindings comment nodes definitely idea worth exploring", "d": "9/2014"}, {"body": "would work text bindings right vue still walk whole tree directives provide simple example text binding illustrate idea complex like ifs repeats even components possible yes ca nt dom operations server side bindings work html ast binding require dom delayed processed client main idea try produce full valid terms content html attach bindings provide dynamic behavior nt research vue internals yet know bindings complex give example could try illustrate binding could work text parsing actually relatively cheap part vue rendering procedure constructing dom slow part right ideally want reuse template server client slm compile template functions require small runtime helpers escaping attributes merging unzipped yes templates reused server client also slm quite small unzipped compile templates client side yet working", "d": "9/2014"}, {"body": "bumping told cheerio nodejs jquery allowing render dom faster jsdom least said fullfs might want give try previous setup compare", "d": "10/2014"}, {"body": "good point ayamflow times faster still enough another thing wo nt help launching module allows work html stored string real dom using jquery syntax word works plain text dom emulation current state ca nt work plain text need dom way gone little crazy developed decent server rendering module vuejs uses modules like text parsing expression parsing copies almost behavior excluding events dynamic things etc even stable fast thing quality code poor afraid wo nt help end though maybe could interesting concept", "d": "10/2014"}, {"body": "fullfs wow still sounds pretty cool though picking prerendered content front end", "d": "10/2014"}, {"body": "mean rerender client example ractivejs way event blinking know flaw shows things like flashbanners render twice back picking imagine process go like get html server get raw templates somewhere initialize vuejs vue renders dom tree wo nt append document creates hidden dom tree vue starts matching present visible nodes nodes hidden dom tree searching equal elements changing binding hidden nodes visible nodes note process requires equal html rendering result every side method still need render twice plus time matching relinking take look derbyjs uses interesting mechanism html picking broadly speaking sets ids nodes unique value like sends map embedded json containing ids marks probably rerenders dom shadows ps ok probably tell right know team working new project wanted use kind fullstack framework bothsides rendering isomorphic ideology sharing templates code server client long story decided go way ok main thing vuejs really good far developed framework prototype based vuejs bothsides rendering nt know could share forces something least could provide feedback also troubles development due several vue features would like make suggestions enhancements fullstack approach point view", "d": "10/2014"}, {"body": "interesting blowing everything away nt ideal working maybe good enough would love hear feedback get shoot email profile", "d": "10/2014"}, {"body": "nt think best way either anyway ca nt manage better without serious vue modifications wanted leave vue original state talking right way make notes need kind template precompilation function convert raw html tokens could send server client make first initialization faster handlebars ractive something similar nt want spend time rendering nodes twice need way still need kind map fully compiled vue instance match html againt could use precompiled templates make map without creating real dom nodes faster right next could make matching vue would pick html server nodes without need create new ones replacing existing think ps actually sure motivated go trouble making vue work fullstack technology mean nt want trouble subject plans imagined would great", "d": "10/2014"}, {"body": "limitation mainly comes vue approach dombased templating issue angular vue compilation process relies dom leaves string parsing browser basically designed isomorphic javascript mind could made work separate stringbased parser server leave hints rendered html plugin client side helps vue pick hints yeah nontrivial efforts really priority vue ok leaving space frameworks designed specifically isomorphism mind eg react", "d": "10/2014"}, {"body": "ok thanks explaining focus developing crazy stuff pseudovue rendering", "d": "10/2014"}, {"body": "recently made prerelease project working use vuejs also insane script imitates vue behavior server side vueserver use one component code server client glad say working fine sorry russian ca nt help could press buttons also check javascript disabled see serverside html ps thanks much vuejs like made fall love frontend development", "d": "2/2015"}, {"body": "nice glad know working", "d": "2/2015"}, {"body": "started experimenting picking hints part branch got simple text binding far looks like html soon vue initialized overwrite serverside text clientside text could skipped making linking functions aware run first time would skip dom manipulation set watchers", "d": "6/2015"}, {"body": "nkovacs wow nice please keep updated wondering possible expose compilation hooks made optional plugin", "d": "6/2015"}, {"body": "vmodel seems work box tried implement vrepeat reusing elements generated server think works pretty ugly hack though edit fixed handling vrepeat initialization items rerendered vstart vend anchors correctly placed nt need render separate template last normal element", "d": "6/2015"}, {"body": "nkovacs looks great could combine serverside vuelike rendering would work completly perfect", "d": "6/2015"}, {"body": "nkovacs mean already able things like", "d": "6/2015"}, {"body": "opened issue fork todo list stuff already works box great", "d": "6/2015"}, {"body": "considering writing new app vue wanted know status nkovacs ssrendering pocs another relates evan vision eventually supportingmerging ssrendering vue thanks", "d": "12/2015"}, {"body": "nkovacs work likely longer relevant plan experiment ssr early intuition getting idiomatic vue components render node relatively easy proper hydration without blowing away serverrendered dom tricky", "d": "12/2015"}, {"body": "problems trying solved making vue ssr capable one thing want another actually understand reasons wanting none offered thus far like put forth reasons one might want ssr maybe better seo longer needed accessibility really hard make waiaria capable content client side fast first paint screen times loading needs fast paint times factors problems might need considered last bit information help develop point view nt already one please look blog currently neither serverside rendering vue truly understanding benefits ssr outweigh risks insight especially evan would greatly appreciated scott", "d": "12/2015"}, {"body": "use vueserver right compitable latest vuejs version also tested production though blow away serverrendered dom like said", "d": "12/2015"}, {"body": "smolinari google one se russian segment example highly dependent yandex able properly parse js right maybe soon could also share vuejs components templates services like emails generation api resources provide html", "d": "12/2015"}, {"body": "good points thanks fullfs andrey others edit discussion going another js framework watching scott", "d": "12/2015"}, {"body": "thank smolinari fullfs responding principle use case related custom clientside performance metric timetofirst art art gift web site important scaffold dom pullin media cdn cache ensure endusers see product asap impetus behind question process proofing app vue ssred dom replaced vue component instances vs attaching dom would show stopper us case simply nt gotten point proof test yet", "d": "12/2015"}, {"body": "ssred dom replacing overall ok looks fine try serfing eng support sorry probably wo nt notice moment replacing ofc restrictions example animate something like banners videos pull parts content moment replacing problem make ssr dom client dom little different good thing vuejs fast first loading wo nt take much time rerender dom ssr dom also allow begin loading simple media content like images app inited boost", "d": "12/2015"}, {"body": "blowing away existing dom sounds expensive reality really bad especially app complex eg displaying catalog artworks anything focusing optimizing image compression distribution would probably yield much better return", "d": "12/2015"}, {"body": "looking lightweight js frameworks currently tinkering riotjs wanted keep eye vuejs see take ssr like offer another couple reasons ssr important ssr extremely important want largest international user base possible many parts world running old browsers even feature phones many devices either nt run js nt js features required run modern site without downloading obscene amount shims bandwidth latency concerns emerging markets may allow downloading js alone referring vue size number seen many modern sites serverrenderedclientrendered hybrid app ensures reach largest audience still allowing modern experience users enjoy additionally initial page load faster users js required working page excuse progressive enhancement plug", "d": "12/2015"}, {"body": "would say hydration hooks model would best approach allow ssr become behaviour driven giving possibility serve partial ssr templates diverting load server applicable would also mean vue extended cope ssr outside core better core bloated think vue incorporating ssr could attract larger audience also think vue could help reduce complexity ssr hydration model described", "d": "3/2016"}, {"body": "closing", "d": "4/2016"}, {"body": "thanks tested bug gone stay tuned release", "d": "8/2014"}, {"body": "expecting", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "\u043d\u0438\u043f\u0430\u043d\u044f\u0442\u043d\u0430", "d": "8/2014"}, {"body": "vif \u53ef\u4ee5\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u6216\u8005 computed", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "maybe allowing like specs passing booleans nt really selfexplanatory", "d": "8/2014"}, {"body": "already branch callback stop dispatchbroadcast recursions ayamflow vm instance events create event objects rely return value", "d": "8/2014"}, {"body": "ahead thanks grab", "d": "8/2014"}, {"body": "note branch complete yet wait official release", "d": "8/2014"}, {"body": "worries happy see going towards path solves issue easily patch current version tree interim", "d": "8/2014"}, {"body": "yes nt intended provide detailed change records use case concerned final changed value want get access every incremental change event use emitter emits events synchronously eg well documented going change possibly separate api methods eg watch watchsync", "d": "8/2014"}, {"body": "give try thanks", "d": "8/2014"}, {"body": "bug likely go away", "d": "8/2014"}, {"body": "ok thank", "d": "8/2014"}, {"body": "think one", "d": "8/2014"}, {"body": "orz thank much calebboyd", "d": "8/2014"}, {"body": "would want pass callback use events", "d": "8/2014"}, {"body": "read events part impression implemented dom events slow look code see implemented theoretically could implemented directly traversing parents list want provided perf", "d": "8/2014"}, {"body": "please feel free close issue mechanism amp perf fine", "d": "8/2014"}, {"body": "hi problem released", "d": "9/2014"}, {"body": "join issue planning release new version", "d": "9/2014"}, {"body": "might css transitions handled olderversion webkit nt old device test guess internally two transition definitely triggered together since rely data transitions event loop batched", "d": "8/2014"}, {"body": "good know transitions triggered together first thought queue handled animation frames frame rate goes sometimes synchronous function could slip transition queue quite abstract thinking guess nt think webkit version since could happen computer app go slow reasons reproduce bug app vue couple month ago uses kind transitions toggling panel classement ranking see always sync even disappear end transition sometimes app easy see fixed background hide bug project currently working obvious user something went wrong", "d": "8/2014"}, {"body": "animation going time", "d": "8/2014"}, {"body": "yes views like methods setscene function ithiscurrentscene return see toggle property responsible views toggle dispatch events views tell set unset use case event could start use requestanimationframe view never using background called updating data issue simple views using requestanimationframe involved way bad using requestanimationframe vuejs using nexttick instead", "d": "8/2014"}, {"body": "asked raf css transitions going together sometimes would cause noticeable jank seems issue nothing think something try write similar transition vanilla jscss see issue persists old devices since vue simply toggling css classes pretty sure toggling done event loop", "d": "8/2014"}, {"body": "took another look figured indeed caused vue enter transitions batched nexttick delay want make sure trigger one forced layout leave transitions one frame difference two fixed", "d": "8/2014"}, {"body": "thanks lot watching works nice every devices closing issue happy smile", "d": "8/2014"}, {"body": "first issue might component created inserted dom yet directive created yet however sure really cause would help reproduce bug fiddle question raf settimeout triggered strictly counting time rather simply put task function queue queue guaranteed executed order even takes longer exhaust queue", "d": "8/2014"}, {"body": "try make fiddle work component either created custom vview manually cases first instantiation component call might understand actually basic dom rendering fact job minimize job queue browser takes less render smooth experience", "d": "8/2014"}, {"body": "alright indeed coming fact component created procedurally hook called vm added dom find behavior odd expecting fire component el compiled attached dom vm fragment compiled inserted anyway used custom hook like use appendto callback send event somecomp appendto wrapper function somecomp emit hook added component hook added someawesomemethod nt need weird double nested anymore probably watch ready added event dom logic feeling lazy", "d": "8/2014"}, {"body": "also try hook although hook kinda unreliable sometimes", "d": "8/2014"}, {"body": "ah nt think one thought called try", "d": "8/2014"}, {"body": "description seems bit abstract give bit info third party lib actually", "d": "8/2014"}, {"body": "using owlcarousel one views managed vue owl provides slider functionality image section backed view binding populates list images use vue initially set everything markup bindings image slides place tell owl wrap slider functionality achieve slider directive bind hook sets new slider like naltatis said initializing slider leads dom manipulations adds wrappers images model updates vue tries rerender list images dom original state vue knows things fall apart vue still renders list correctly wrong place bindings etc still intact nt seem affected third party dom manipulation could possibly work around removing slider view update occurs set afterwards could find hook update callback fires vue already updatedrerendered views digging code could find way notified happens es nt seem good fit trying either hope explanation gives little context point us right direction thanks help", "d": "8/2014"}, {"body": "using owl carousel top list items rendered want actually something done update triggered right case carousel teardown right change model", "d": "8/2014"}, {"body": "right feel like clean solution part setting new carousel inside slider directive part tears lives outside directive would nice way handle symmetry know mean", "d": "8/2014"}, {"body": "personally nt recommend type hacks going introduce core however easy implement fork specifically inside need anther loop existing one", "d": "8/2014"}, {"body": "alright thanks recommendation understood correctly would turn kinda thing removing slider updating model ensure right order", "d": "8/2014"}, {"body": "yes think rare use case also nonrecommended introduce new concept directive api", "d": "8/2014"}, {"body": "alright leave close let know find nice way encapsulate nicely", "d": "8/2014"}, {"body": "looks like made", "d": "4/2016"}, {"body": "testing textlength gt vue thinks object well behavior going away simply use empty string", "d": "8/2014"}, {"body": "ok thank", "d": "8/2014"}, {"body": "since tags simple array would nt use html value see displaying list section arrays primitive values", "d": "8/2014"}, {"body": "case result bind described wrong", "d": "8/2014"}, {"body": "use seems html value example using identifier array primitive values stable suggest use value instead", "d": "8/2014"}, {"body": "thank answer probably right sorry mishap", "d": "8/2014"}, {"body": "reason set item item might belong arrays still able access outer loop", "d": "8/2014"}, {"body": "thank speedy response indeed sound sensible", "d": "8/2014"}, {"body": "understand issue curious use case primarily trying readwrite vm data case newly introduced probably alleviate problem", "d": "8/2014"}, {"body": "use case directive thought could better push dom references parent instantiate template realised going vuejs design used purpose even verbose looking forward see property master branch", "d": "8/2014"}, {"body": "update instance flag indicates whether instance created flowcontrol directives etc component use flag locate first parent anonymous mechanism also used", "d": "8/2014"}, {"body": "thanks lot evan closing issue", "d": "8/2014"}, {"body": "hard polyfill due lack gettersetters plan bottom line vuejs support mobile browsers talking specifically", "d": "8/2014"}, {"body": "could use polyfill reliable estimates show around internet still using sad true", "d": "1/2015"}, {"body": "nt think work code seems try neither exist also tries native defineproperty works dom nodes need work ordinary js objects nt way testing however", "d": "1/2015"}, {"body": "yeah think right say partial support common case getters setters values", "d": "1/2015"}, {"body": "currently access created hook original content component tags resolved", "d": "8/2014"}, {"body": "sorry nt quite clear enough needs dynamic scenario looks similar currently access inner dom elements elchildren layout computations works fine core problem new item added array need recompute things event signaling changed would able", "d": "8/2014"}, {"body": "evan thoughts", "d": "8/2014"}, {"body": "know data changes know dom change nexttick change data address issue", "d": "8/2014"}, {"body": "believe would work would nt clean encapsulationwise simple scenario shows issue trying address imagine image pager pager vue component list images provided part content tag using vrepeat directive pager needs aware number images size loop properly number images changed dynamically fly example think netflix experience changing row changes set images view could put listener array somehow force update pager would much cleaner event came let know content updated way user component would nt write content glue code", "d": "8/2014"}, {"body": "sort similar thought seems observing dom changes bit inefficient surprisingly however want observe changes dom use mutationobserver defined part supported current browsers", "d": "8/2014"}, {"body": "nadirabid note mutationobserver mutationevents use mutationobserver polyfill", "d": "8/2014"}, {"body": "right hasty neglect ie sometimes edit another note quick note mutationobserver supposed efficient replacement mutation events polyfill might actually unusually slow", "d": "8/2014"}, {"body": "nadirabid thanks reply already knew mutationobservers really neat feature dog slow hoping would efficient way achieve vue", "d": "8/2014"}, {"body": "closing still think ing array proper way handle watcher created hook always fire dom updated reflecting array change", "d": "9/2014"}, {"body": "look moment sharing items component instances", "d": "8/2014"}, {"body": "gaydenko problem share items component instances since child views inherit data model parent seems natural thing different instances reference data edit suggesting workaround suppose could generate new array view b filter rather filter original array might work original implementation seems like work also", "d": "8/2014"}, {"body": "guess create array instance hook fact guess good way avoid sharing instances long nt class constants", "d": "8/2014"}, {"body": "indeed bug two directives racing setting index children data likely resolved since vm scope separate data shared", "d": "8/2014"}, {"body": "thanks", "d": "8/2014"}, {"body": "leave workaround anyone else might run problem alternately something akin following works vm filtered array seems work properties nested parent template explicitely passes seems work better items array changed either consuming view", "d": "8/2014"}, {"body": "\u624b\u52a8\u521b\u5efa\u4e00\u4e2a vm \u554a", "d": "7/2014"}, {"body": "guess want use tag rather one also want instantiate vue component definition", "d": "7/2014"}, {"body": "doh yes silly thanks", "d": "7/2014"}, {"body": "full svg tag list really long current map includes commonly used ones probably include possible tags though", "d": "7/2014"}, {"body": "yah would love full svg support well using coming react element js mapping really sucks add lot elements makes wonder way tunnel things without specifying everything disclaimer nt looked code saying past react project quite painful add multiple unsupported tags", "d": "7/2014"}, {"body": "huh right longer thought least", "d": "7/2014"}, {"body": "seems commonly used currently included tags since lot tags list used anyway added two template parser closing", "d": "8/2014"}, {"body": "less useless include well give idea html want avoid adding svg tags take least following graphics elements structural elements see important groups firstclasscompanion", "d": "9/2014"}, {"body": "ah thanks indus nt really worked lowlevel svg much mostly libs really helpful", "d": "9/2014"}, {"body": "jsdom compatibility roadmap current focus getting fleshed branch meanwhile appreciate effort determining cause issues", "d": "7/2014"}, {"body": "thanks response work matter", "d": "7/2014"}, {"body": "located problem templateparserjs check template dom fragment one doe nt work jsdom always returns false tried replace rendering went fine", "d": "8/2014"}, {"body": "thanks looking much appreciated", "d": "8/2014"}, {"body": "testing jsdom seems work js var jsdom require jsdom jsdomenv html test done function err window var frag windowdocumentcreatedocumentfragment consolelog frag instanceof windowdocumentfragment gt true ideas also instances also property check give false positive elements", "d": "8/2014"}, {"body": "using jsdom code example work looks like problem may context loss taking place something research also true checking good fast testing", "d": "8/2014"}, {"body": "looks like kind trick anonymous wrapper function use window object far understand window object get received several places script require system gets copied every time instead simple inheritance dom fragments created different objects wo nt work child different reason called utils function wo nt show message nodejs console", "d": "8/2014"}, {"body": "curious using vue inside jsdom including standalone built version option using", "d": "8/2014"}, {"body": "use like var fs require fs var jsdom require jsdom jsdom set direct path though also replaced mainjs compiled vuejs nt seem work well may necessary var compilerpath requireresolve vue replace srcmainjs distvuejs var compilersrc fsreadfilesync compilerpath jsdomenv html html src compilersrc done function errs window another way include inside jsdom tried way rough using check consolelog works vuejs code copypasted compiled code inside jsdom done function declaration necessary global variables document navigator maybe something else", "d": "8/2014"}, {"body": "following worked fine js var fs require fs var jsdom require jsdom var compilerpath requireresolve vue replace srcmainjs distvueminjs var compilersrc fsreadfilesync compilerpath jsdomenv html lt div gt hello lt div gt src compilersrc done function err window var vue windowvue var vm new vue template temp data hello hello world consolelog vm elinnerhtml vmhello changed vuenexttick function consolelog vm elinnerhtml think might callback", "d": "8/2014"}, {"body": "code works fine well ok sorry bad gave exact example right start wrote first post problem try use vue components try code var compilerpath requireresolve vue replace srcmainjs distvueminjs var compilersrc fsreadfilesync compilerpath jsdomenv html lt div gt hello lt div gt lt div vcomponent test gt lt div gt src compilersrc done function err window var vue windowvue vuecomponent test template would template var vm new vue template temp data hello hello world consolelog vm elinnerhtml vmhello changed vuenexttick function consolelog vm elinnerhtml", "d": "8/2014"}, {"body": "tested wip next branch code worked fine closing comprehensive serverside rendering tests release thanks digging", "d": "8/2014"}, {"body": "anyone checked vue ca nt get work", "d": "7/2015"}, {"body": "remoe checked work yeah though maybe fixed easily", "d": "7/2015"}, {"body": "remoe fullfs error stack trace look like", "d": "7/2015"}, {"body": "ok tested windows newer version vue one need change others nt run mounting need investigate", "d": "7/2015"}, {"body": "changing code throws following stack trace iojs jsdom vue", "d": "7/2015"}, {"body": "turns subtle problem checking jsdom element returns true refactored little bit rely check latest snippet working", "d": "7/2015"}, {"body": "confirmed thanks", "d": "7/2015"}, {"body": "try use vueroutervue jsdom app works without jsdom following warning vue throws anyone working jsfiddle sample vue vuerouter ca nt get work", "d": "8/2015"}, {"body": "generate xy pairs within cells array", "d": "8/2014"}, {"body": "well probably late reply missing comma first line p", "d": "9/2014"}, {"body": "input updated model write locked avoid circular updates modify model sliding ignored computed property locked got changed general avoid side effects computed properties getters", "d": "7/2014"}, {"body": "right currently way opening exceptions lock mechanism", "d": "7/2014"}, {"body": "tests limiting value setter works value slider forcing ui directly seem work using filter almost works except slider gets jerky idea", "d": "7/2014"}, {"body": "filter values applied async think direct ui manipulation proper work around vue dom updates applied async model changes hand jsut set slider", "d": "7/2014"}, {"body": "would good idea however specific case min still needs adjusted dynamically variable value since also requires direct dom manipulation think prefer limiting value looks little bit better thank input", "d": "7/2014"}, {"body": "probably interested branch", "d": "7/2014"}, {"body": "branch released intended version leading however since full rewrite expect take iron potential new issues", "d": "7/2014"}, {"body": "pretty excited see vue maturing grown big fan would mind expanding reasons behind rewrite presumably api change primarily implementation change pm evan wrote next branch released intended version leading however since full rewrite expect take iron potential new issues reply email directly view github", "d": "7/2014"}, {"body": "full rewrite", "d": "7/2014"}, {"body": "guotie see post", "d": "7/2014"}, {"body": "way clean concise neat words still ones applying design want happy knowing vue become monster", "d": "7/2014"}, {"body": "gaydenko absolutely certain tradeoffs made terms correctness vs conciseness overall scope size library remain close right things belong vue core lib always live plugin", "d": "7/2014"}, {"body": "great", "d": "7/2014"}, {"body": "wait long time next branch", "d": "7/2014"}, {"body": "guotie expect take another month fixed timeline yet", "d": "7/2014"}, {"body": "handler need change model changing directly dom element documentqueryselector", "d": "7/2014"}, {"body": "yes made purpose external library changes hidden inputs values need changes reflected vue data model", "d": "7/2014"}, {"body": "case interaction different worlds would use events sending pubsub guess conceptually correct different worlds share data send messages see probably external library nt events aware", "d": "7/2014"}, {"body": "vue detect changes directly setting input elements design know external lib changed input value manually trigger event input element notify vue sync value back model", "d": "7/2014"}, {"body": "yes solved problem", "d": "7/2014"}, {"body": "others searching following jquery code used force vue update data value hidden field changed generally external plugin library", "d": "6/2016"}, {"body": "please see", "d": "7/2017"}, {"body": "also got issue resolve defined easy accessible place function finish handlers way markup kept clean also results less typing strongly sure vue api must extended way", "d": "7/2014"}, {"body": "reason works change back use stops working strange", "d": "7/2014"}, {"body": "preprocessing vue filter functions function body contains filter inlined compiled getter think directly setting works bypasses step meanwhile definitely try make function filters work intended upcoming version", "d": "7/2014"}, {"body": "expected behaviour see dependency collection gotcha section", "d": "7/2014"}, {"body": "bitten problem found real reason vue behaving way laziness operator indeed expression immediately return look whatever value result need called upon fiddle provided returning starts false never called meaning vue register dependency however called anytime property computed first used assignment return meaning laziness never cause us trouble", "d": "8/2017"}, {"body": "one caveats vue since runtime dependency getter access tracking determine dependencies computed property means boolean considerations must seperated first seperate variables stringing operator avoid caveat make codebase much longwinded since ca nt conveniently string conditions single line could easily use haxe macro optionally decompose single line conditional expressions multiple variabledeclared conditions targeting specific environments lazy evaluation needs avoided however issue occur ifelse block requiring preevaluate certain conditions required vue environment intially thought ideal vue would seperate js compilermacropreprocessor engine would analyse computed function expressions precompute ast tree detect expressions cident accesses already precompute bindings already vuevue componentsmodulesstores also avoids overhead preprocessing dependencies getters runtime however easier said done particularly tricky cases indirect function calls fromto different computed getterssetters methods even local dynamic variables may retrieve multiple dependencies across multiple functions hard even haxe macro accompanying ast since nt retrieve dependencies via expressions infer logically potential runtime assignments expressions thus end often cost bit boilerplate often resort manually listing dependencies manually codebases neede vue reflect alternatively always set flag false nt care caching", "d": "8/2017"}, {"body": "case javascript aheadoftime dependency tracking doomed fail ca nt know advance property accessed property names strings result arbitrary computations including network calls", "d": "8/2017"}, {"body": "want point old issue fixed long time ago working expected least since vue", "d": "9/2017"}, {"body": "expected behavior defining component definition like setting something constructor prototype shared across instances type native javascript objects instance properties defined constructor similarly vue component instance data defined hook", "d": "7/2014"}, {"body": "add watcher inside ready event watcher readded every time component created", "d": "7/2014"}, {"body": "hmm yeah makes sense chance advising users sort structuring guide time future", "d": "7/2014"}, {"body": "thelinuxlich afaik ready triggered per instance component", "d": "7/2014"}, {"body": "oh okay", "d": "7/2014"}, {"body": "getter andor setters executed initialization determine data dependencies computed properties need recalculated dependency modified", "d": "7/2014"}, {"body": "thank", "d": "7/2014"}, {"body": "solved issue changed view directive vuedirective xview bind function", "d": "7/2014"}, {"body": "good concern consider adding official", "d": "7/2014"}, {"body": "solve problem latest vue", "d": "11/2014"}, {"body": "recommended way still use custom directive view management want finest control", "d": "11/2014"}, {"body": "ok worked fine btw get access templateparser writing custom directive", "d": "11/2014"}, {"body": "hmm currently way open next release", "d": "11/2014"}, {"body": "thanks usually fine call listener value since spec says calling removeeventlistener arguments identify currently registered eventlistener eventtarget effect case checking handler first avoid expensive call still good change", "d": "7/2014"}, {"body": "good monitoring event bindings useful", "d": "7/2014"}, {"body": "understand html specification", "d": "7/2014"}, {"body": "missing closing div brackets", "d": "7/2014"}, {"body": "check regarding selfclosing tags", "d": "7/2014"}, {"body": "thanks replies using self closing never realized xhtml vs sorry derp amp thanks quick reply", "d": "7/2014"}, {"body": "fixed dev branch already thanks noting", "d": "7/2014"}, {"body": "really problem way vue data observation works least nt like nondeterministic data structures basically sees reference something template eg assume exists nt exist create placeholder thing conditional nt work easiest workaround stub user object nt user behavior go away next release uses different strategy problem", "d": "7/2014"}, {"body": "method call unbinds directiveslisteners etc removes element dom keeps instance alive reinsertion", "d": "7/2014"}, {"body": "thanks", "d": "7/2014"}, {"body": "design mistake key value never attached data piece data belong multiple parent objects always used directly whether using repeat alias using alias available", "d": "8/2014"}, {"body": "", "d": "7/2014"}, {"body": "impractical vue add comprehensive support every input type possible extend adding custom handlers reference implementations found", "d": "12/2014"}, {"body": "looks good nt impractical support input types", "d": "1/2015"}, {"body": "achieve simply", "d": "7/2014"}, {"body": "would nt insert component template dynamically like vview", "d": "7/2014"}, {"body": "since want keep views alive created together one visible one time", "d": "7/2014"}, {"body": "okie dokie", "d": "7/2014"}, {"body": "watcher stay belongs parent unwatch hook though", "d": "7/2014"}, {"body": "ok solved using broadcast", "d": "7/2014"}, {"body": "mean populating", "d": "7/2014"}, {"body": "yeah", "d": "7/2014"}, {"body": "currently issues used together populated options compiled time options present yet someone suggested introducing separate directive might make easier work dynamic options", "d": "7/2014"}, {"body": "oh got", "d": "7/2014"}, {"body": "thelinuxlich", "d": "7/2014"}, {"body": "great gaydenko", "d": "7/2014"}, {"body": "solution coming point", "d": "9/2014"}, {"body": "see vmodel select param sat sep pm rangermauve notifications githubcom wrote solution coming point reply email directly view github", "d": "9/2014"}, {"body": "cool reference docs", "d": "9/2014"}, {"body": "one problem options attribute nt separate value displayed screen use content tag localized string representing actual value option far understand new feature takes array options gets used value content", "d": "9/2014"}, {"body": "hmm yeah think improved give example desired markup", "d": "9/2014"}, {"body": "practice array items gets changed based localization items objects contain code might look like expected behavior items array might changed runtime language preferences changed retain correct value despite displaying different string structure might best allowing distinction well current behavior would useful", "d": "9/2014"}, {"body": "rangermauve check", "d": "9/2014"}, {"body": "perfect", "d": "9/2014"}, {"body": "might wrong place ask could expect see release start using", "d": "10/2014"}, {"body": "check rc releases", "d": "10/2014"}, {"body": "vue nt boot automatically compilation starts explicitly create top level instance", "d": "7/2014"}, {"body": "ooh see btw excellent job crafting api vuejs", "d": "7/2014"}, {"body": "thanks glad like", "d": "7/2014"}, {"body": "vcloak", "d": "7/2014"}, {"body": "exactly", "d": "7/2014"}, {"body": "sure understand example fully could put clickhandler logic inside text component listening dom event component logic handle stored within component make code reusable edit see want change behavior sibling elements vms one actually received event run issues managing kind behavior cleanly end day components ideally deal children recommend registering child vm parent vm using manage event api check", "d": "7/2014"}, {"body": "got thank", "d": "7/2014"}, {"body": "template mean partials", "d": "7/2014"}, {"body": "yeah using like vuespa example", "d": "7/2014"}, {"body": "supposedly partials inserted ready hook look", "d": "7/2014"}, {"body": "native browser behavior", "d": "7/2014"}, {"body": "ermmm right element dragging mistake", "d": "7/2014"}, {"body": "could know property get changed data problem solved", "d": "7/2014"}, {"body": "ways make properties separate object watch documentation says additional properties attached viewmodel data object ready hook observed introduce thisresult alternatively docs say comes processing object data properties keys starts skipped rename result result", "d": "7/2014"}, {"body": "thank bdaglish made test result still want way use wrapper scope watching result solve problem feel good way try demo saw property attached ready hook still observed way use result truly make observed result dose nt render html template demo", "d": "7/2014"}, {"body": "interesting use case make improvements interface event includes exact path changed inside object wait till next major release im meanwhile grouping different objects seems easiest workaround", "d": "7/2014"}, {"body": "okay using grouping way fit case looking forward watch new feature", "d": "7/2014"}, {"body": "closed fast grouping way make code fatter enhancement tag", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "asip key problem async function case", "d": "7/2014"}, {"body": "thanks working next major release address issue", "d": "7/2014"}, {"body": "internal single example quotes really obligatory treat content string literal nt evaluating number current context", "d": "7/2014"}, {"body": "necessary support dynamic accessors eg update changes", "d": "8/2014"}, {"body": "encapsulate", "d": "7/2014"}, {"body": "oops forgot put fiddle used instantiation option like thecomponentjs moduleexports template require thecomponenthtml indexjs var root new vue components thecomponent require thecomponent", "d": "7/2014"}, {"body": "dug source found private components stored hash fix interested know shorter way though", "d": "7/2014"}, {"body": "ignore apparently tangled wires untangle gt lt sorry noise", "d": "7/2014"}, {"body": "nt define component definition since component nt template vue way tell expect observe property way vue initializes data observing twostep process first observe properties option scan template see thing user expect bind template found property found process observed add new observed property best practice define data fields option even value", "d": "7/2014"}, {"body": "fabulous info thanks best seriously", "d": "7/2014"}, {"body": "loading indicator indicate images component", "d": "7/2014"}, {"body": "component date fetched remote source", "d": "7/2014"}, {"body": "would create loader component nest", "d": "7/2014"}, {"body": "sounds like great idea thanks", "d": "7/2014"}, {"body": "hmm general avoid depending another vm computed properties design perspective ideally page components nt aware footer logic whether show footer depending current page seems belong footer put pagefooter relationship object footer component instead scattered component assume using switch pages property app vm footer computed property like", "d": "7/2014"}, {"body": "seems missing closing bracket p", "d": "7/2014"}, {"body": "a\u0155rr im idiot", "d": "7/2014"}, {"body": "sure one especially computed properties bring extra complexity internals filters able nest seems purely readabilitysyntax preference thing one way define filters object first gradually build js var filters group filterscurrency validators filtersemail filtersname", "d": "7/2014"}, {"body": "would also love see computed properties could detail involved complexity please feels unatural nt supported support would allow template like instead loses information context property right mainly readability issue nt believe readability overlooked", "d": "7/2015"}, {"body": "might read better template nt make sense javascript points actual data way make return computed without polluting original data object really want template read nicely something like", "d": "7/2015"}, {"body": "makes sense thanks answer", "d": "7/2015"}, {"body": "verison ff warning error breaks execution", "d": "7/2014"}, {"body": "ok looks like recently added ff annoying message affect behavior vue since lot libraries depend hack ff maintain backwards compatibility perf implications negligible use cases vue", "d": "7/2014"}, {"body": "noticing integration components firefox extremely slow keeps spitting error spinning works fine webkit browsers small set stuff rendering", "d": "6/2016"}, {"body": "using anyway like versions behind tue jun pm paperscissors notifications githubcom wrote noticing integration components firefox extremely slow keeps spitting error spinning works fine webkit browsers small set stuff rendering receiving modified openclose state reply email directly view github mute thread", "d": "6/2016"}, {"body": "use", "d": "7/2014"}, {"body": "give view", "d": "7/2014"}, {"body": "ah thank nt know give id first", "d": "7/2014"}, {"body": "give example behave afaiu remove need things like right", "d": "7/2014"}, {"body": "well currently template option accepts three things template string id selector template node either node native node documentfragment already fix intended make possible example removes need call extra", "d": "7/2014"}, {"body": "also consider acornjs alternative potentially slightly faster parser esprima played shimmingmodifying today could nt get far esprimaacorn solid parsing javascript syntax object even instrumenting string nt get us much closer goal actually executing without breaking strict unsafeeval csp maybe missing something ideas", "d": "7/2014"}, {"body": "nt got time dig yet take look", "d": "7/2014"}, {"body": "definitely useful thanks references", "d": "7/2014"}, {"body": "worth able get working strict csp environment using browserified version notevil package nt time right test thoroughly could heavily optimized get job done anyone looking quick dirty solution may good starting point complete implementation commit", "d": "7/2014"}, {"body": "csp compliant build available branch", "d": "10/2014"}, {"body": "yes something bracket access syntax working properly planned fixed next release", "d": "6/2014"}, {"body": "marvellous thanks", "d": "6/2014"}, {"body": "following tested working html value vals value var vm new vue el demo data keys foo bar vals created function lt thiskeyslength var k thiskeys thisvals add k test", "d": "9/2014"}, {"body": "able get around issue boxing everything template tag div referencing easy way found template aka documentfragment lacking would nt work thanks alessandro", "d": "6/2014"}, {"body": "use template tag option instead eg", "d": "6/2014"}, {"body": "unfortunately nt work dom node would vue id lookup based anyway use template pass actuall innerhtml supposed parse thanks", "d": "6/2014"}, {"body": "catch used created cached documentfragment reuse actual element vue use render stuff hand tags used render node browsers wo nt render parses content documentfragment need options work working example", "d": "6/2014"}, {"body": "configuration like el div template thisshadowroot data test input thisshadowroot pointing template getting", "d": "6/2014"}, {"body": "alternative tried modify div lookup slightly el thisshadowrootqueryselector div template thisshadowroot data input input got uncaught datacloneerror failed execute clonenode shadowroot shadowroot nodes clonable thats probably evil lies", "d": "6/2014"}, {"body": "would use shadowroot template post fiddle see setup", "d": "6/2014"}, {"body": "quite sure implement fiddle honest otherwise would done first place going give try template getting shadowrooted content encapsulatedhidden rest dom ever look polymer polymerprojectorg similar twoway binding functionality shadowroot place thing wanted something similar regular web components look independent solution like", "d": "6/2014"}, {"body": "sorry bring another point possible invert relationship data vue instance hand vue reference object would get reference watched used directivebind", "d": "6/2014"}, {"body": "mean watch data actually used templates", "d": "6/2014"}, {"body": "exactly", "d": "6/2014"}, {"body": "unfortunately possible moment", "d": "6/2014"}, {"body": "okay limitation current implementation nt come requirement", "d": "6/2014"}, {"body": "idea something meant observed however simply vm created late additions never get watched", "d": "6/2014"}, {"body": "see point thing data pointing fairly large object holds simple object like arrays string like also dom elements well stuff likely watched reside object convenience would big effort adapt rather make configurable", "d": "6/2014"}, {"body": "prefix properties properties ignored observer also anything pure js object ignored", "d": "6/2014"}, {"body": "yeah noticed escaping prefix would ultimately break mixing things object every entry would adhere rule nt imho detection nonstandard js objects work currently functions html nodes plain values watched object still run rangeerror maximum call stack size exceeded", "d": "6/2014"}, {"body": "found nodes implement full htmlelement interface use vue rough test using vue custom elements", "d": "6/2014"}, {"body": "thanks giving try workaround currently wrapping span around shadomdoms content anything specific need htmlelement miss shadowroot node", "d": "6/2014"}, {"body": "oh way using chrome native shadowroot might well differ quite bit polyfill platformjs provides", "d": "6/2014"}, {"body": "testing chrome seems spec draft shadowroot implement full element interface e g etc", "d": "6/2014"}, {"body": "finally figured caused infinite loop within data binding nt properly distinguishing regular objects nodedocument like objects thus indexing forever extend convertkey function also check special objects specific fields documenturi documents stylesheets used shadowroots objects nt really know implement less fuzzy way shadowroots really lacking identifying attribute think never want watch either think thanks alessandro", "d": "7/2014"}, {"body": "closing due inactivity check currently proof concept", "d": "9/2014"}, {"body": "package vue component web component could nt find examples far oh see gist provided shows would nice recipe accessible via official docs real life examples cheers", "d": "1/2017"}, {"body": "closing since addressed different issue", "d": "7/2014"}, {"body": "nt everything vue", "d": "6/2014"}, {"body": "agree evan nothing mvvm", "d": "6/2014"}, {"body": "thanks feedback", "d": "6/2014"}, {"body": "methods present created vm", "d": "6/2014"}, {"body": "ok thanks", "d": "6/2014"}, {"body": "working", "d": "7/2017"}, {"body": "gijovarghese given answer stack overflow general syntax incorrect need assign instance variable start using assigning anything try use methods look working example", "d": "7/2017"}, {"body": "", "d": "6/2014"}, {"body": "thanks answer documented better maybe still learning vuejs things would never thought seems little unintuitive willing eager contribute love vue asking know accept pr", "d": "6/2014"}, {"body": "submit pr docs", "d": "6/2014"}, {"body": "case anyone struggling like vuejs js vm watch data function newval oldval", "d": "11/2015"}, {"body": "get property changing watching data", "d": "12/2015"}, {"body": "documented easy", "d": "12/2015"}, {"body": "janokary documentation give hint know property changed using able get notify new oldvalue property viewmodel property changed", "d": "12/2015"}, {"body": "mentioned guitcastro still nt mention watch item within list say list like watch using know item mutated changed issue guys livestream work", "d": "12/2015"}, {"body": "noeldavies wondering docs say watching array mutates even provide new value entire array could nt even loop old new values find differences", "d": "1/2016"}, {"body": "need think reactive way shouldt need know property changed watching whole objectarray case need perform custom logic specific property change watch property", "d": "2/2016"}, {"body": "keepitreal think recommend way work around component wraps element array wrappercomponent would watch mutations something like html", "d": "2/2016"}, {"body": "components thanks usmanhalalit next question tell changed like variable consolelog first argu get whole data object makes sense way tell specifically changed", "d": "3/2016"}, {"body": "familiar jqueyui define use access vm data least", "d": "6/2014"}, {"body": "right actually simple", "d": "6/2014"}, {"body": "sorry wrong case sample code abc prepended onto select box", "d": "6/2014"}, {"body": "looks like issue observerensurepath", "d": "6/2014"}, {"body": "thanks information let investigate detail", "d": "6/2014"}, {"body": "need swap values array see documentation mutation methods section small example", "d": "6/2014"}, {"body": "use raw html docs third note box", "d": "6/2014"}, {"body": "would something like", "d": "9/2016"}, {"body": "instanceofmichael answer vue using vue use computed properties apply filters combined", "d": "10/2016"}, {"body": "like sure allows run filter escaping", "d": "10/2016"}, {"body": "instanceofmichael use computed properties said docs instead html unsafestring customfilter something like said really like old syntax discussed somewhere understand reason removal", "d": "10/2016"}, {"body": "runs escape custom filter instead", "d": "10/2016"}, {"body": "need escape use html escape function", "d": "10/2016"}, {"body": "need escape use html escape function use one builtin vuejs instead adding extra dependency", "d": "10/2016"}, {"body": "use em vhtml yourcomputedpropertie help", "d": "2/2017"}, {"body": "wondering use vue builtin html escape functionality computed property usersupplied input need escape replace certain unicode characters images output final html template accomplish fine computed property like instanceofmichael said think using vue builtin html escaping functionality would ideal possible", "d": "3/2017"}, {"body": "looks like vue uses following hood js let decoder export default decode html string string decoder decoder documentcreateelement div decoderinnerhtml html return decodertextcontent", "d": "4/2018"}, {"body": "please refer plans obviously nt much time thought work plugins much keep vue core well maintained vue never intended alternative fullsolution frameworks like angular philosophy use together libraries via ecosystem like component browserifynpm also addresses pretty different concerns compared backbone similar knockout terms use case personally think already viable alternative knockout although mature", "d": "6/2014"}, {"body": "error thrown initially undefined set empty array", "d": "6/2014"}, {"body": "desired behavior", "d": "6/2014"}, {"body": "desired behaviour variations total property nt check radio buttons clicking radio buttons changes property total like explained workaround found far use computed property empty get method like", "d": "6/2014"}, {"body": "case might easier listen change event radio buttons instead using vmodel", "d": "6/2014"}, {"body": "right case empty get also seems work well thanks", "d": "6/2014"}, {"body": "supposed drag", "d": "6/2014"}, {"body": "images", "d": "6/2014"}, {"body": "figured required dragover event", "d": "7/2014"}, {"body": "vue uses plain objects models general compatible backbone model also necessary use backbone models vue plain objects fairly simple implement validationajax functionalities libraries", "d": "6/2014"}, {"body": "libraries thinking example", "d": "6/2014"}, {"body": "eg", "d": "6/2014"}, {"body": "thank closing", "d": "6/2014"}, {"body": "using adapters \u00e0 la rivets integrating vue application written backbone since models parse save logic already built tested either serialize back forth hand buy way run multiple code paths apis worked big web startups kinda crappy require parsing passed webapp nt think use case would uncommon would especially rad feature something like amp model front end data modeling tools var customers new customers customersfetch urlfragment customers written backbone var customersview new customersview model customers customersviewrender else urlfragment customer written vue var customer findcustomer customers urlfragment customervue customer", "d": "10/2014"}, {"body": "started issue coming precisely rivets adapters", "d": "10/2014"}, {"body": "need js land good stand data modeling absence made conspicuously obvious new wave view layer frameworks like vue react ractive etc full featured libraries saw need nt opened wider community yet ember emberdata angular resource backbone backbonemodel best tool seen far ampersandmodel since allows access data accessor may even observable way vue deal nt looked deep enough vue source know sure sure super busy getting door thoughts vueresource would work adapters possible", "d": "10/2014"}, {"body": "example wrote using vue backbone model essence since manipulated independently anything wraps operates pojo used persistence layer", "d": "10/2014"}, {"body": "awesome try make work collections fun relevant people existing backbone apps amp want get rid bb view part", "d": "1/2015"}, {"body": "made test works partially works partially incomplete see lot complete much work sync way update newly added models stuff created must performed ends maintainning two arrays objects syncrhonized unless choose refresh full array array change", "d": "1/2015"}, {"body": "think computed properties may help", "d": "6/2014"}, {"body": "use computed property convert different properties create computed property property want store cents display dollars", "d": "6/2014"}, {"body": "filter get probably good idea use filters purpose yes need create computed property property want however extract conversion logic functions reuse computed property definitions", "d": "6/2014"}, {"body": "considering vue heavily influenced rivetsjs among others wondering reason filters seems like natural fit since already specify keypathproperty set write directive keypathproperty nt need specified filter implementation making filter reusable different properties like code also seems readable computed properties", "d": "6/2014"}, {"body": "really good point set filter could simplify validations consider adding next version thanks", "d": "6/2014"}, {"body": "thank", "d": "6/2014"}, {"body": "emit event vm", "d": "6/2014"}, {"body": "attach handler directive instance", "d": "6/2014"}, {"body": "bpierre want set private handler directive dispatched abroad advice demo also uses thanks really cool", "d": "6/2014"}, {"body": "correct wrong longer possibility vue object would one maintain reference function registration unregistration documentation says apart el treat arguments readonly never modify need share information across hooks recommended element dataset ca nt done dataset property stringmap", "d": "10/2017"}, {"body": "facing issue jasonbodily proper way save handler function reference unbind later", "d": "11/2017"}, {"body": "jasonbodily nevcos know meet need simply use parameter define destroy function hook", "d": "11/2017"}, {"body": "hcysunyang yes meets need actually implemented way wondering best way thanks", "d": "11/2017"}, {"body": "hcysunyang works looks counterintuitive", "d": "4/2018"}, {"body": "solution proposed hcysunyang looks like kind hack misleading seems like something vuerelated fact arbitrary key using would work well confirm intended correct way achieving maybe remove event listeners vue dom management guarantee memory leak issues", "d": "5/2018"}, {"body": "recommendation advice cleaning event listeners vue greatly appreciated", "d": "8/2018"}, {"body": "normally nt clean listeners manually element destroyed removed dom longer referenced javascript listeners also removed precisely longer referenced element thus able garbage collected guaranteed dom related vue cases passing references elements event listeners around accidentally create memory leaks retaining references nt need worry cleaning event listeners", "d": "8/2018"}, {"body": "fnlctrl worry code actual framework code cases sure something like vue usual piece code vue guarantee preconditions mentioned dom requires order remove listeners", "d": "8/2018"}, {"body": "yes otherwise would memoryleak bug rare would fixed", "d": "8/2018"}, {"body": "vue directive listening input event occur change content via js could manually trigger tested firefox chrome may need abstraction layer support every browser reason need change outside app", "d": "6/2014"}, {"body": "another solution could change value vm let job", "d": "6/2014"}, {"body": "many richtext editor change textarea javascript example insert image execute found way get work capture setrangetext call like vue process vmodel textarea", "d": "6/2014"}, {"body": "want avoid complicating internals one solution input elements bound augmented method syncs current view state back model nt manually emit event thoughts", "d": "6/2014"}, {"body": "sounds good", "d": "6/2014"}, {"body": "\u8fd9\u4e2a\u95ee\u9898\u5728", "d": "5/2015"}, {"body": "thanks noticed probably needs cast stuff like strings", "d": "6/2014"}, {"body": "add without", "d": "6/2014"}, {"body": "want cast strings setting style values number results setting empty string instead value", "d": "6/2014"}, {"body": "", "d": "6/2014"}, {"body": "", "d": "6/2014"}, {"body": "thanks nt work time", "d": "6/2014"}, {"body": "etanxing look html initialization devtools see selected value correctly set vue issue chrome windows", "d": "6/2014"}, {"body": "etanxing google chrome issue works time firefox safari nt work st time google chrome", "d": "6/2014"}, {"body": "seems quite inconsistency browser behaviors regarding form input elements try resolve consistent implementation next version", "d": "6/2014"}, {"body": "remoe sure either asip chrome stable windows amp mac thanks", "d": "6/2014"}, {"body": "closing discussion done", "d": "6/2014"}, {"body": "nt answer question question bind model select question preselect select element pretty different personaly need von change behavior preselect without binding model property need oneway databind", "d": "1/2017"}, {"body": "please nt comment closed issues years ago ask questions forumvuejsorg open new issue found bug thanks", "d": "1/2017"}, {"body": "", "d": "3/2017"}, {"body": "know close jun", "d": "3/2017"}, {"body": "nickmessing know actually helped july", "d": "7/2017"}, {"body": "ergonomicus initial issue vue vue please tell browsers behave wrong using simple opposite ternary example", "d": "7/2017"}, {"body": "nickmessing talking whether use ternary thing provided working example vue pointed right direction got desperately googleing around solution might help others future", "d": "7/2017"}, {"body": "ergonomicus good point sorry rude", "d": "7/2017"}, {"body": "took example expanded use case wrong would expect preselected", "d": "7/2017"}, {"body": "guilhermeaiolfi use object designed strings", "d": "7/2017"}, {"body": "sure used working pre selecting using vif", "d": "7/2017"}, {"body": "guilhermeaiolfi fiddle without object gets converted string used object use example possible context", "d": "7/2017"}, {"body": "please nt use github issues questions questions support please use discord chat room gitter chat room official forum issue list repo exclusively bug reports feature requests", "d": "7/2017"}, {"body": "guilhermeaiolfi using nt need hardcode attribute however need aware must strictly equal value order get selected updated fiddle", "d": "7/2017"}, {"body": "quick question creating dynamic selects depending data would like set way first option always selected passed vmodel since setting formdata empty object initial load vmodel bind doesnt get assigned vmodel get work would like add selected option vmodel", "d": "12/2017"}, {"body": "simply use work", "d": "6/2018"}, {"body": "actually seeing spots could implemented sure spot best possibly definevmprop downside reference original method match bound method ie sure matters", "d": "6/2014"}, {"body": "nt really think issue since always", "d": "6/2014"}, {"body": "sorry example nt complete actually using context several levels deep either something like even unclear goal instead ultimately trying avoid traversing much avoid making component tightly coupled another thoughts", "d": "6/2014"}, {"body": "holic tried use events instead traversing vms chain", "d": "6/2014"}, {"body": "yeah really good practice explicitly call methods parents events make code decoupled", "d": "6/2014"}, {"body": "perhaps structured application wrong failing see events could solve using vue power product search root vm houses individual components search input field attached coordinates routing root vm two child components one results product search one shopping cart search triggered root sends results component generate product results results clicked add cart display result changes whether product cart products removed cart subsequently changes results displayed way see events working case parent parent listening events relay via children seems weird would guys recommend structuring application", "d": "6/2014"}, {"body": "nt necessarily need make vue event system nt make sense use global event bus like node event emitter even empty vm", "d": "6/2014"}, {"body": "also nt want add additional lib eventbusmediator could use root cheap mediator like", "d": "6/2014"}, {"body": "closing since usage issue rather implementation one holic feel free continue discussion want", "d": "6/2014"}, {"body": "considered could handy", "d": "6/2014"}, {"body": "first glance looks pretty think object events created flexible example adding event element etc object could nt add events different viewmodel state", "d": "6/2014"}, {"body": "dmfilipenko fair point guess two syntax coexist without much problem", "d": "6/2014"}, {"body": "favor backbone like event object would clean methods many components dmfilipenko dynamically binding event handlers viewmodels initialization seems like recipe unnecessary state ca nt picture reasonable situation following would nt work case checking current state expensive would implicate issues design", "d": "7/2014"}, {"body": "need watch inside array objects probably better create component used together way child component instance gets notified changes assigned data", "d": "6/2014"}, {"body": "great thanks", "d": "6/2014"}, {"body": "css property prefixed nt think chrome shipped nonprefixed transform yet", "d": "6/2014"}, {"body": "thanks please consider google group vue thank great library", "d": "6/2014"}, {"body": "ahmadibrahim ratchet vue work deciding vue ratchet ionic would prefer vue solution course", "d": "1/2015"}, {"body": "vue great ratchet pain ass think ratchet dead tried ionic nt like used vue bootstrap", "d": "1/2015"}, {"body": "went ionic nt want deal mobilerelated browser issues active angular painful compared vue project deadline angular right tool hybrid app took several hours understand subtle differences provider service factory feature angular like vue dependency injection makes testing easier end appreciate vue even simplicity", "d": "1/2015"}, {"body": "think vwith replaces data object", "d": "6/2014"}, {"body": "ahmadibrahim also think made pull request fix behaviour", "d": "6/2014"}, {"body": "inherit individual properties", "d": "6/2014"}, {"body": "intended behavior ensure computed properties amp expressions need access properties nt throw errors", "d": "6/2014"}, {"body": "would nt issue anyway since resulting values missing", "d": "6/2014"}, {"body": "way explicitly replace object ie clean one", "d": "6/2014"}, {"body": "bit hack overwrite different data type assign object wiped clean", "d": "6/2014"}, {"body": "chains one level eg clean object error case probably better mutate place", "d": "6/2014"}, {"body": "nt provide benefits commonjs still needs transpiling anyway supported browsers bothering standard actually ships", "d": "6/2014"}, {"body": "component importexportmodule supported box agree component actually break vue workflow worth instead", "d": "6/2014"}, {"body": "module import syntax rediscussed according", "d": "6/2014"}, {"body": "broader purpose directive could post jsfiddle", "d": "6/2014"}, {"body": "use note cause circular updates directive function need implement kind lock case", "d": "6/2014"}, {"body": "exactly needed guess missed api ref thanks jtremback making fiddle solved ended", "d": "6/2014"}, {"body": "difference firefox processes stores element attributes compared webkit blink sure ie run example firefox order reversed vue nt give directive special priority directives use watch want something value changes", "d": "6/2014"}, {"body": "thanks dlh explanation", "d": "6/2014"}, {"body": "von change onchange", "d": "4/2016"}, {"body": "know old thread sure browser consistence problem solved trying capture change chrome key press value model changes firefox mouse make model changes nothing comes onchange watch help suggestions update much worth", "d": "8/2016"}, {"body": "liredbox working chrome firefox mac encounter problems using change though using watch way go way first tried called addthing method thing variable set watch made work", "d": "8/2016"}, {"body": "another hack wait next tick", "d": "12/2016"}, {"body": "using works well use case something like removing option selecting js option", "d": "9/2017"}, {"body": "want ask add upload file used change event uploaded file also tried von change thanks", "d": "2/2018"}, {"body": "found way solve problem maybe try", "d": "6/2018"}, {"body": "maoxiaoke fyi answer vuejs compliant", "d": "6/2018"}, {"body": "nexttick called dom changed correct ok use nexttick settimeout ok case", "d": "6/2018"}, {"body": "frizar well according doc correct defer callback executed next dom update cycle think seems much like idea works since least documented somewhere anyway last months nt deal kind hack except unit tests may useful dealing asynchronous stuff think use hacks wrong", "d": "6/2018"}, {"body": "anyone solved", "d": "7/2018"}, {"body": "anyone solved lodash solved problem helps template something like tested chrome firefox", "d": "9/2018"}, {"body": "solution add notify method object data binding add still horrible hack", "d": "10/2018"}, {"body": "nt think content tag selfclosing need", "d": "6/2014"}, {"body": "confirm see", "d": "6/2014"}, {"body": "aha try nt considered closing tag assumed simple replacement thanks", "d": "6/2014"}, {"body": "dmfilipenko trying repeat empty array", "d": "6/2014"}, {"body": "brandonpierce code changes original array", "d": "6/2014"}, {"body": "supposed use custom directives way directives meant manipulating dom also nothing code links together either pipe sort filter use computed property", "d": "6/2014"}, {"body": "thanks misunderstood concept directives", "d": "6/2014"}, {"body": "ah never thought guess check bound element iframe implementation", "d": "6/2014"}, {"body": "tried using provided minified version already minified semicolons", "d": "6/2014"}, {"body": "vue breaking people builds stylistic choices", "d": "6/2014"}, {"body": "jtremback semicolons discussed many times fact tool deal arbitrary javascript work semicolonless javascript closure compiler rare exception enforces special stylistic requirements advanced mode work way phrase would closure compiler ca nt deal semicolonless javascript rather semicolonless javascript breaking people builds", "d": "6/2014"}, {"body": "minified version also successfully run closure compiler even", "d": "6/2014"}, {"body": "development production version vue processed closurecompiler advancedoptimizations errors", "d": "6/2014"}, {"body": "also issue nothing automatic semicolon insertion related usage reserved javascript words completely fine use reserved word according spec issue minimizer", "d": "6/2014"}, {"body": "yeah bad assumed semicolons ran kind problems closure compiler past log indicate keyword problem according spec jordangarcia share version closure compiler using might fixed part since working dlh", "d": "6/2014"}, {"body": "closing due inactivity", "d": "6/2014"}, {"body": "hi come across issue expecting number vms update inner vm number spins control looks like may regression testing works expected", "d": "6/2014"}, {"body": "encountered problem another example", "d": "6/2014"}, {"body": "fixed thanks examples guys", "d": "6/2014"}, {"body": "used registering child vm parent vm property name suggests provides reference child parent access directly used inheriting data parent child serves totally different purpose", "d": "5/2014"}, {"body": "ok maybe distinction needs docs several usecases almost equivalent though", "d": "6/2014"}, {"body": "created fiddle code sure whether bug remove function click add item multiple time added item set position however click remove click add item added list although item removed dom shows item actually removed list dom updated", "d": "5/2014"}, {"body": "using need supply appropriate css rules see transition effects documentation since missing css rules vue never notified transition finished thus element nt get removed dom section documentation happens removing element directive show becomes false vuejs apply vleave class element trigger transition wait transition finish listening event remove element dom remove vleave class", "d": "5/2014"}, {"body": "thanks quote updated fiddle adding css rules works", "d": "5/2014"}, {"body": "thank much see problem code read documentation thorough", "d": "5/2014"}, {"body": "sure necessary since check vue methods well thanks suggestion though", "d": "6/2014"}, {"body": "due vrepeat instances inheriting lazy option parent easy fix", "d": "5/2014"}, {"body": "excellent thanks", "d": "5/2014"}, {"body": "implemented rough fix work given example let know still happens situations", "d": "5/2014"}, {"body": "", "d": "6/2014"}, {"body": "actually nested child component removed instead vview fixed", "d": "5/2014"}, {"body": "thanks evan works nicely", "d": "5/2014"}, {"body": "think read somewhere docs updates append quickly vue wo nt notice changes batched within event loop use vuenexttick like fixed fiddle also sure needed explicity call creating component second thing aware hook using triggered vview variable change first time use", "d": "5/2014"}, {"body": "basically ayamflow said docs", "d": "5/2014"}, {"body": "oh see feature needed current use case attributes static enough produce right bindings html", "d": "5/2014"}, {"body": "dynamic two way binding tricky implement honestly rare use case moment may look requests feature", "d": "6/2014"}, {"body": "running issue trying build form based data one part model need bind input values another part model based data would happy entertain work arounds far watches ends model order make work think would work completely dynamic two way binding onetime evaluation mustache reactive expressions sort like dynamic literal evaluated directive update function powerful complex completely dynamic two way binding would solve problem well enough instance right fails", "d": "6/2015"}, {"body": "already work long initialized data properly provide fiddle working intended", "d": "6/2015"}, {"body": "think demonstrates", "d": "6/2015"}, {"body": "chance reopen happy open new issue", "d": "6/2015"}, {"body": "", "d": "1/2018"}, {"body": "sounds like good idea", "d": "5/2014"}, {"body": "jiyinyiyong value need stringified already also use case like would definitely use computed properties", "d": "5/2014"}, {"body": "brandonjpierce yes problem running supposed frank try step vue could nt find wrong another method another component works readlly hard believe", "d": "5/2014"}, {"body": "defined component twice one empty definition causes error", "d": "5/2014"}, {"body": "stupid mistake gt lt request warnings duplicated component definitions one writes skeleton project tends copy code inlitialize views problem may occur hard get infomation back code closing", "d": "5/2014"}, {"body": "actually issue could never figure enter leave animations nt fire using vview templates use vrepeat animations nt fire simple slide items page back would end quick bounce using vrepeat changing vrepeat full template including individual item array events fire items slide page new ones slide one appears issue vrepeat templates used along vtransition vview could someone please verify thanks", "d": "5/2014"}, {"body": "fiddle demonstrating issue menu vrepeat transitioning others animations fire menus using vrepeat animations jsfiddle", "d": "5/2014"}, {"body": "looks like bug take closer look time possible nice minimal fiddle better isolates issue", "d": "5/2014"}, {"body": "yeah produce one really quick copyedit code using display note rewrote app using static templates read vrepeat vanimation vtransition work using vrepeat vanimation works reason vleave transitionend nt appear caught using vrepeat even though vanimations fired using vrepeat template destroyed well vrepeated items inside container vleave added could nt figure even vanimations nt working set animation noticed drawing blank div upon inspection noticed vrepeated items deleted vleave appended basically rendering useless anyways angular ember ractive etc remove elements leave event completed something note besides issue vrepeat love total simplicity vuejs hope continued development cheers", "d": "5/2014"}, {"body": "fixed underlying cause issue example would still need css changes work properly though", "d": "5/2014"}, {"body": "thank already applied necessary css fixes posting fiddle needed absolute position container etc reason browserify nt create require function using standalone option set vue managed compile working copy dev branch working thus far vanimation vrepeat rewrite code prefer vtransition need keyframes post results thank", "d": "5/2014"}, {"body": "vtransition also works flawlessly thank patch", "d": "5/2014"}, {"body": "mean selectbox first option could give arbitrary value since nt matter value", "d": "5/2014"}, {"body": "found easiest solution add empty value nothing selected directly html like adding empty value options would result option without value attribute text would become value", "d": "5/2014"}, {"body": "also concern validator vuejs forked vuevalidator developing validator interesting please check project", "d": "5/2014"}, {"body": "great kazupon useful", "d": "5/2014"}, {"body": "thelinuxlich thanks project still wip please take note", "d": "5/2014"}, {"body": "way directives designed nt really allow happen possible create custom dsl filter arguments like kazupon take vuevalidator", "d": "5/2014"}, {"body": "use overwrite v", "d": "5/2014"}, {"body": "avoid potential conflicts using attributes still need prefix everything unnecessary verbosity obvious benefits vuejs removes directive attributes compiling rendered markup clean tidy etanxing said", "d": "5/2014"}, {"body": "vuejs removes directive attributes compiling rendered markup clean tidy well vuejs works html parsed browser means contains invalid attributes ok ca nt change know bit thank", "d": "5/2014"}, {"body": "casue error use use overwrite vue csp found noting related document", "d": "3/2016"}, {"body": "minonheart looking old issue config option deprecated long time ago short answer longer configure prefix attributes removed rendered anyway", "d": "3/2016"}, {"body": "would welcome feature attribute html specification starts data prefix valid ide also complain nt like warnings code simple demo latest intellij idea", "d": "4/2016"}, {"body": "actually valid html lot ides editors respect spec custom attributes belonging declared xml namespace must prefixed must course even must defined character range valid xml could nt find spec nt say", "d": "9/2016"}, {"body": "right specs ones talked htmlspec xmlcompatible part htmlspec edit far understood spec means allowed prohibits contain", "d": "10/2016"}, {"body": "note difference valid html syntax vs fullyvalid html former means adheres syntax constraints laid spec syntax latter entails following spec every extreme detail eg element nt certain attribute use element syntax level attribute names defined follows attributes name value attribute names must consist one characters space characters null quotation mark apostrophe characters control characters characters defined unicode vue templates valid html syntax level practical reasons enables speccompliant html parser able parse vue templates makes possible reuse excellent htmlbased tools already aspects tooling however opinion striving fullyvalid html templating syntax completely pointless template eventually gets rendered browser template job convey connection javascript model final desired output fullyvalid html making templates fully valid html zero practical benefits except maybe getting rid warnings overlyrigorous ide", "d": "10/2016"}, {"body": "opinion page first render js events fire free broken html event dependent javascript fails render clean mess things uglier seeing js framework fail render jumbled mess template tag soup halffunctioning elements idea adding exclusive attributesprefixes adds additional attack vector may minority position days", "d": "10/2016"}, {"body": "note difference valid html syntax vs fullyvalid html spec makes distinction one conforming class documents conforming documents comply conformance criteria documents one conformance criteria authors must use elements attributes attribute values permitted specification means documents using attribute nonconforming also note conformance checkers must check input document conforms parsed without browsing context meaning scripts run parser scripting flag disabled however may matter conforming useragents still required parse attribute intended", "d": "11/2016"}, {"body": "maybe would good idea document designdecision somewhere inside vuedocumentation attributes xmlattribute compatible containing colon sign must decided sometime past relation specs would nice seems lot confusion whole data thing nt get wrong used understand html differently seems work inside browsers fails syntaxchecker even like checker tried dummy website mine syntax checker sees attributes fails errors like evaluation used webframeworks customer requires website syntaxcheckercompliant vue ca nt used could developers please references designdecision coming yes feels bit odd discuss closed issue", "d": "11/2016"}, {"body": "understand said say vue template respect valid html syntax output vue eg generating ssr respect fullyvalid html allows indexer correctly understand code ok fine property generated final html render thing allows page fullyvalid html exact role could way generate remove like using sideeffect remove method lost chunck part", "d": "3/2017"}, {"body": "wtf make things right give dev possibility use datav instead v valid html", "d": "4/2017"}, {"body": "thanks commenting year old issue completely nonconstructive fashion", "d": "4/2017"}, {"body": "think pretty selfexplanatory", "d": "5/2014"}, {"body": "well found documentation slightly confusing nt understand term target element referred vm also backticks obvious mean variable usage examples would also made documentation clearer", "d": "5/2014"}, {"body": "behavior jquery counterparts assume people know feel free submit pr doc site", "d": "5/2014"}, {"body": "mix additional properties construction option object entire object available vm example", "d": "5/2014"}, {"body": "well solve problem described depending route assign different strings could pass value", "d": "5/2014"}, {"body": "oh ok misunderstood problem updates asynchronously like directives emit events", "d": "5/2014"}, {"body": "tindzk ran similar problem recently solve method called main app changes value also property used send initialization parameters section component section dispatch event passing section id section instance handled main app handler simply extends sure fit needs clear let know", "d": "5/2014"}, {"body": "good idea certainly work used similar approach parts application long run would glad could better technique specifying construction parameters views think proposal pass parameters rafaelrinaldi understand solution correctly really different maintaining global variable", "d": "5/2014"}, {"body": "think probably better handled option", "d": "10/2014"}, {"body": "getting data asynchronously would recommend promise based approach instantiate vue instance received data ready method used vue compiled bindings real code get idea", "d": "5/2014"}, {"body": "contents inserted asis without compilation insert gets compiled rest template insert compilation already happened wo nt get compiled", "d": "5/2014"}, {"body": "reasons decided behaviour better performance would like see way flagging field update results directives parsed brandonpierce thanks looks like good workaround tell wrong", "d": "5/2014"}, {"body": "designed inserting static html want swappable dynamic content turn components use", "d": "5/2014"}, {"body": "still entirely convinced supposed work like fine workaround brandon suggested fiddle work use rather see working version would great could extend section accordingly people similar problem find solution quickly", "d": "5/2014"}, {"body": "tindzk also another route take turning directive component application flow would roughly like following javascript function promisefunc ajax data return promise vuecomponent foo data ajaxdata promiseall promisefunc function instantiate vm instance new vue working example found", "d": "5/2014"}, {"body": "similar example", "d": "5/2014"}, {"body": "change place everything works fine", "d": "5/2014"}, {"body": "pass method model binding", "d": "5/2014"}, {"body": "example nt work correct variant nt work brandonpierce", "d": "5/2014"}, {"body": "dmfilipenko", "d": "5/2014"}, {"body": "brandonpierce nt work", "d": "5/2014"}, {"body": "common pitfall events triggered synchronously updates applied asynchronously via first example handler function called updated data", "d": "5/2014"}, {"body": "also tripped behaviour surely sequence directives nt matter recommended way getting uptodate model value event listener equivalent vue angularjs apply use run digest cycle manually well batched update feature vue something like apply nt make sense though", "d": "5/2014"}, {"body": "ospatil unfortunately order matter cases mostly two way bindings like changes queued yet applied reliable way wait next event loop", "d": "5/2014"}, {"body": "closing expected behavior", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "like bind event", "d": "5/2014"}, {"body": "vonce sounds better", "d": "5/2014"}, {"body": "nt vonce keep vone president", "d": "5/2014"}, {"body": "agree wryk marfalkov sounds better think", "d": "5/2014"}, {"body": "use case could help see scenario would need without modifying something else eg hiding clicked element example", "d": "5/2014"}, {"body": "closing due inactivity", "d": "6/2014"}, {"body": "created directive vonce someone need", "d": "6/2014"}, {"body": "one use case think would handling image loading error may want retry give first retry", "d": "9/2016"}, {"body": "intended event triggered state element changes already attached beginning fire", "d": "5/2014"}, {"body": "ah thought would nice place setupclean things time node added dom like mediator dom events guess set variables false instantiation update hook viable solution thanks", "d": "5/2014"}, {"body": "use events instances fire even true startup", "d": "5/2014"}, {"body": "worried two vm one dom one disabled subscribe mediator event disabled one might fire unwanted method ahah moment vif totally deletescreates vm instance boolean update right subscribe mediator cleanup trick", "d": "5/2014"}, {"body": "yep use also vm destroyed listeners registered removed automatically", "d": "5/2014"}, {"body": "nice try close thanks followup", "d": "5/2014"}, {"body": "gmaps provide api listen enter event select suggestions might manually", "d": "5/2014"}, {"body": "closing due inactivity", "d": "5/2014"}, {"body": "hi zheneva use delete operator variable javascript properties eg write browser javascript evaluate work however jsfiddle wrapping code function therefore variable local function want deallocate really good news javascript", "d": "5/2014"}, {"body": "nt vote best way small helper inside filter get value path", "d": "5/2014"}, {"body": "use", "d": "5/2014"}, {"body": "filter arguments always passed plain strings retrieve value keypath nt exist current vm recursively fallback try parent", "d": "5/2014"}, {"body": "greate thanks", "d": "5/2014"}, {"body": "oops thanks catching fact changing api change forgot update example", "d": "5/2014"}, {"body": "dmfilipenko try add vuejs fiddle external resources", "d": "5/2014"}, {"body": "marfalkov seems post old link correct", "d": "5/2014"}, {"body": "dmfilipenko hope helps", "d": "5/2014"}, {"body": "marfalkov thanks", "d": "5/2014"}, {"body": "computed properties display persistence case manually compute save data ie making ajax call", "d": "5/2014"}, {"body": "solved using watch first last variable", "d": "5/2014"}, {"body": "hiding showing elements better use vshow instread vif vif instantiates another vm see fiddle", "d": "5/2014"}, {"body": "yes works thank", "d": "5/2014"}, {"body": "changing data within ready callback help case", "d": "9/2014"}, {"body": "working also side note actually reference group without data working inside vm actually set", "d": "9/2014"}, {"body": "nt know thanks", "d": "9/2014"}, {"body": "oops saw custom file maybe loading file individually gruntfilejs instead using would improve findability commandf gruntfile attempt find built", "d": "5/2014"}, {"body": "use add additional custom tasks creating files nt think hard figure", "d": "5/2014"}, {"body": "true simpler loading individually looks like would also trick think would also easier notice", "d": "5/2014"}, {"body": "right able find though know check tasks directory sorry distraction", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "think impossible configuration expect one character expand", "d": "5/2014"}, {"body": "wryk yes impossible maybe delimiter param vueconfig would array strings instead array characters example html title html get unescaped html delimiters vue double last character first string first character last string feature request think would difficult implement feature needs changes srctextparserjs send pull request present poor newbie thank", "d": "5/2014"}, {"body": "main concern unescaped html delimiters think suggestion sounds pretty good definitely consider since breaking change wait", "d": "5/2014"}, {"body": "hellojosh try person name instead person person work", "d": "4/2014"}, {"body": "marfalkov thanks looking miss typed variable name fixed edit first textbox values change edit second textbox values change", "d": "4/2014"}, {"body": "hellojosh ahh see think", "d": "4/2014"}, {"body": "", "d": "5/2014"}, {"body": "twarogowski would seem like something outlined would answer working said reason vue setting getter setter new property object seems happen method well lifecycle methods ready attached", "d": "4/2014"}, {"body": "see fiddle data objects augmented methods property additiondeletion properly tracked experimental feature fully documented yet", "d": "4/2014"}, {"body": "works indeed thanks smile methods make way stable api assume second argument add may also complex object whole newlyadded graph augumented", "d": "4/2014"}, {"body": "twarogowski actually already latest release officially documented complex object yes recursively tracks new object", "d": "4/2014"}, {"body": "superb thanks detailed answer smile vue great", "d": "4/2014"}, {"body": "great running problems exactly looking want note current behavior understand adds properties adds properties update properties also exists update value property already exists great think strong addition api wanted note experience perspective someone unaware implementation complexities admit nt work way expected assumption would add property nt already exist new property would getters setters enable binding watching also learned expected perform update keypath already existed superb work vue", "d": "5/2014"}, {"body": "uping ca nt make work implemented get nan fiddle", "d": "9/2014"}, {"body": "reason interpreted minus calculation seems use case still broken work intended though", "d": "9/2014"}, {"body": "oh nice catch yeah nt work either fiddle workaround use manually set child vm", "d": "9/2014"}, {"body": "closest could find issue nt use components also tried using root element component template tried repeat tags also nt work", "d": "4/2014"}, {"body": "think component template compiled documentfragment added document tree removed browser", "d": "4/2014"}, {"body": "ok seems generic problem dom interesting thing jquery seems coping well", "d": "4/2014"}, {"body": "okay tried latest works perfect release note says rocks", "d": "4/2014"}, {"body": "located source bug fix soon indeed wacky one", "d": "4/2014"}, {"body": "nt set parent values always sets values current vm general nt recommend changing parents state within child since makes tightlycoupled use events possible", "d": "4/2014"}, {"body": "thanks evan", "d": "4/2014"}, {"body": "seems fiddles working properly latest release let know things still break", "d": "4/2014"}, {"body": "sorry nt work example second example select list data group items group page initialization", "d": "4/2014"}, {"body": "due compiled compiled yet option elements present initial data manipulate set value hook work properly", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "got work hopefully cleaner way", "d": "4/2014"}, {"body": "something thinking involves different parsing strategy compared current implementation nt got time test yet syntaxwise probably go handlebarslike style since current syntax mustacheinspired", "d": "4/2014"}, {"body": "", "d": "6/2014"}, {"body": "closing discussion ifelse scenario still perfectly resolved think deal breaker", "d": "9/2014"}, {"body": "caused parser treating identifier current solution use method instead inline expression gets fixed", "d": "4/2014"}, {"body": "sounds good", "d": "4/2014"}, {"body": "reverting removes error allows browserify successful include vue build versions result error", "d": "4/2014"}, {"body": "also problem resolved updating browserify", "d": "4/2014"}, {"body": "thanks updated browserify error longer occurs", "d": "4/2014"}, {"body": "think similar spirit challenge containers arbitrary vue content work", "d": "4/2014"}, {"body": "would possible simply compile select attribute around line compilejs would allow back etc nt got time right install node amp component et al pull learn build try fix run tests etc etc liking vue lot far indeed feature would handy quite components least demo image slider", "d": "5/2014"}, {"body": "one solution handle arbitrary number pages make sub component access raw contents manually instantiate", "d": "5/2014"}, {"body": "", "d": "4/2014"}, {"body": "reason happening line emitterjs see sure args explicity passed need digging src", "d": "4/2014"}, {"body": "yeah trick greatly improved internal emitter performance fixed amount args much faster guess case causes confusion user make external version use instead", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "steps replicate", "d": "5/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "use callback wait render", "d": "4/2014"}, {"body": "nt role vuenexttick", "d": "4/2014"}, {"body": "ayamflow ah yes using better safer", "d": "4/2014"}, {"body": "documented", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "ah missed somehow thanks exactly wanted", "d": "4/2014"}, {"body": "seems working make jsfiddle reproduce issue", "d": "4/2014"}, {"body": "tried works sorry bothering", "d": "4/2014"}, {"body": "hi kind stuck someone hep img vrepeat images filterby profile vattr src src computed src function return img thisimagepath thisimagepath seems return undefined much appreciated thanks advanced", "d": "7/2015"}, {"body": "basic example basically modify achieve whatever css effect want", "d": "4/2014"}, {"body": "great thank", "d": "4/2014"}, {"body": "yes happens identifiers used know causing issue try fix time", "d": "4/2014"}, {"body": "ok fact issue caused using primitive values arrays use objects instead primitive values bug nt occur general find better way handle primitive arrays", "d": "4/2014"}, {"body": "true wrapping primitive ints object see improvement recreating whole array dom elements however first update captured changes reflected vm please take look modified fiddle first keystroke reflected vm subsequent changes ignored try modify value text input first character gets updated", "d": "4/2014"}, {"body": "code trying use int filter hotelstarscode consolelog val outputs typeof object try parseint values get string value hotelstarscode defined example returns nan check return zero int vrepeat get error even return int problem vuejs nt int filter vrepeat ca nt get value solve help please sorry english", "d": "9/2015"}, {"body": "lensgolda returning array filter", "d": "9/2015"}, {"body": "oh thanks", "d": "9/2015"}, {"body": "yes two events documentation", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "amchang imo problem occurs whenever nest vrepeat directives nt matter use components see issue", "d": "4/2014"}, {"body": "seems fiddle issue outer used object look time", "d": "4/2014"}, {"body": "merged", "d": "4/2014"}, {"body": "short tag syntax exist see element one void elements element foreign element may single solidus character character effect void elements foreign elements marks start tag selfclosing custom element foreign element void element case remove final get browser try close tags exactly get firefox dom inspector", "d": "4/2014"}, {"body": "thanks bpierre", "d": "4/2014"}, {"body": "thought maybe regex fits better case wildcards", "d": "4/2014"}, {"body": "pretty hacky way take look fairly easy understand introducing wildcardsregex emitter implementation would bring performance concerns since emitter central observation implementation called lot", "d": "4/2014"}, {"body": "thanks kind hacky solution good enough smile", "d": "4/2014"}, {"body": "looking thing version syntax like", "d": "5/2016"}, {"body": "example version", "d": "7/2017"}, {"body": "try code still work", "d": "7/2017"}, {"body": "endoplasmic solution also work", "d": "7/2017"}, {"body": "njleonzhang ya edited comment say others stumble bit clear", "d": "7/2017"}, {"body": "endoplasmic great dependence implementation", "d": "7/2017"}, {"body": "njleonzhang example work side", "d": "7/2017"}, {"body": "xiaolp endoplasmic provided sample", "d": "7/2017"}, {"body": "stress", "d": "11/2017"}, {"body": "never mind anyone else problem look response closing", "d": "4/2014"}, {"body": "multiple clauses meant create multiple instances otherwise pretty messy logic imo inside directives", "d": "4/2014"}, {"body": "could use semantically correct nested table hard say solve issue clear understanding trying accomplish without fiddle example", "d": "4/2014"}, {"body": "thanks brandon table expert imo nesting table solve problem proper aligning column widths better use multiple tbody sections within one table", "d": "4/2014"}, {"body": "depends components setup generally something like following inside child component dispatches event root vm trickle children vm another component could listen event like see technically could also add pub sub library communicate either way works matter personal preference point", "d": "4/2014"}, {"body": "thanks clarification", "d": "4/2014"}, {"body": "array callback second parameter exists means array mutated object containing mutation info", "d": "4/2014"}, {"body": "works fine many thanks", "d": "4/2014"}, {"body": "vm watch array callback second parameter mutation component created hook expected log mutation object speak actual logs array reverted", "d": "1/2017"}, {"body": "hi crescentfresh issue made two years ago vue version find current docs", "d": "1/2017"}, {"body": "reading docs looking relevant code see information made available watchers know mutation event caused array change accurate statement", "d": "1/2017"}, {"body": "clarification get warnings try use vview vrepeat together like however vcomponent works fine problem need dynamic capabilities vview chance sort", "d": "4/2014"}, {"body": "question like would greatly helpful include fiddle trying accomplish number ways go trying", "d": "4/2014"}, {"body": "brandonpierce right narrowed problem let explain working sample problematic sample lists working difference fact latter example vview vrepeat directives applied element however change vview directive vcomponent works reason vcomponent mixed vrepeat within html element vview bug intended behavior", "d": "4/2014"}, {"body": "ok think got right vview recreates vm replaces html element would conflict vrepeat also creates new vms correct", "d": "4/2014"}, {"body": "essentially wrap method mustache binding vue knows evaluate value compile time see", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "tried computed properties", "d": "4/2014"}, {"body": "yes trying right computed value nt get updated one conditions change", "d": "4/2014"}, {"body": "need reference explicitly variables thislock true first pass thisstatus observed see end link javascript get function thislock thisstatus return thislock thisstatus", "d": "4/2014"}, {"body": "yes works thank", "d": "4/2014"}, {"body": "vif multiple expressions seem supported tried worked expected", "d": "9/2015"}, {"body": "u please share code", "d": "12/2015"}, {"body": "take look trying make happen working", "d": "12/2015"}, {"body": "fair vif nt use complex expression computer properties microdreamit go fixed nt use issues personal problems even nt related vif anyway", "d": "12/2015"}, {"body": "hi problem want realize write like work use property show refresh browser gone solve thanks", "d": "8/2016"}, {"body": "mqliutie using latest version work expected case try adding makes whole condition normal js expression resolved execution", "d": "8/2016"}, {"body": "used generator two components like although used refresh page neither gone vue version thanks reply", "d": "8/2016"}, {"body": "mqliutie must something wrong check fiddle recommend upgrading", "d": "8/2016"}, {"body": "found mistake set value variable nt initialized value show first", "d": "9/2016"}, {"body": "mqliutie must something wrong check fiddle recommend upgrading fiddle url working maybe vue version issue", "d": "9/2018"}, {"body": "thanks sharing tip ljonathanl reminder kind discussion could posted since sourcecode related", "d": "4/2014"}, {"body": "brandonpierce awesome work cool", "d": "4/2014"}, {"body": "obsoleter thanks side note looks much cleaner decoupled used nodejs browserify environment", "d": "4/2014"}, {"body": "thumbsup", "d": "4/2014"}, {"body": "hey guys vacation lately nt active take closer look back work", "d": "4/2014"}, {"body": "closing since really related code base feel free add wiki move vuejsdiscussion", "d": "5/2014"}, {"body": "problem read short dispatch native browser event input imo convenient", "d": "4/2014"}, {"body": "reasoning explained issue linked vue picks native events plugin probably firing jqueryonly events simply relay events manually", "d": "4/2014"}, {"body": "definitely create fiddle", "d": "4/2014"}, {"body": "see console first call menubuttons returns proper array buttons second instead submenubuttons returns undefined remove vif directive works expected", "d": "4/2014"}, {"body": "also creates intermediate vm wrap conditional block nt thought way make intuitive yet rough solution would give block access list", "d": "4/2014"}, {"body": "closing due inactivity", "d": "5/2014"}, {"body": "reason vue looks template definition converts string actual documentfragment internally easy solution put templates head find semantic yes nt hurt make lazy load", "d": "4/2014"}, {"body": "hi try", "d": "4/2014"}, {"body": "tried seems give result", "d": "4/2014"}, {"body": "ok seems happen nt reference elsewhere parent template weird bad guess nt need fixing mine probably bit edge case", "d": "4/2014"}, {"body": "try name component hyphen like explained example tagfruit example works javascript vuecomponent tagfruit template type optionstype color optionscolor var fruits new vue el fruits data fruits type banana color yellow type orange color orange", "d": "4/2014"}, {"body": "yeah seems work way guess incorrect use thanks mate", "d": "4/2014"}, {"body": "doc value primitive value arrays containing primitive values access value simply value", "d": "4/2014"}, {"body": "brandonjpierce make component text area accomplish using compiler nt think much documentation yet", "d": "4/2014"}, {"body": "yeah textarea currently handles one time evaluation compile time reason since textarea twoway binding modified user content evaluated longer possible determine part content considered bindings", "d": "4/2014"}, {"body": "problem thanks clarification", "d": "4/2014"}, {"body": "yeah add something like", "d": "4/2014"}, {"body": "rethinking problem probably better", "d": "10/2014"}, {"body": "think good idea computed property depends dom element attributes need manually update calculation attributes otherwise turn dependent dom attribute vue component data change computed property", "d": "9/2017"}, {"body": "also edge use case involves needing reference dom element may hidden depending breakpoint hidden underlying data changes computed values end incorrect features nt rendered properly window resize method could simply recompute window resize dom element available", "d": "1/2018"}, {"body": "dom nt sources truth using vue dom simply view data data exists dom gon na bad time", "d": "1/2018"}, {"body": "sirlancelot nt sources truth dom vue incrementallyadoptable javascript framework like use vue jquerylike tool entrusted dom vue admit vue fullabstract power let need operate dom sometimes want use vue simple action", "d": "1/2018"}, {"body": "sirlancelot bit tough explain datacomputed values remain source truth go detail referencing dom elements render indicator element selected tab ui indicator transitionsanimates width left position new tab clicked smallmobile screens different ui used select dropdown select tabs utilize data let call render widthleft position indicator computed method let call returns width left offset button corresponds value problem arises user changes via select ui small viewport since value changes tabs nt displayed ca nt get widthleft offset selected tab therefore nt return correct value user switches medium breakpoint tabs redisplayed indicator nt styled properly edge case bueno current solution move tabs offscreen via css instead still inspected whenever changes causes headaches buttons tab hierarchy could manually breakpoint change little saner explicit sorry length think enhancement warrants investigation could useful", "d": "1/2018"}, {"body": "computed property depends server call want offer refresh button could good use case", "d": "3/2018"}, {"body": "like inline expressions vuejs automatically collects dependencies computed properties refreshesrecomputes dependencies change may need reference dependencies need recomputation check following example", "d": "4/2018"}, {"body": "similar usecase benjarwar also want position element based offset another element currently retrieving element via inside computed property vue seems pick update changes probably sure goes behind scenes call returns new object way around nwaughachukwuma also favor way think would practical realize could retrieve data interval update component data instead using computed property however seems computationally expensive since would also reretrieve data nt explicitly need since use component question many times per site potentially hundreds nt want recollect often necessary edit meantime recommend dirty hack opinion relatively little boilerplate although said dirty let recompute demand", "d": "6/2018"}, {"body": "get reconsideration functionality think several use cases outlined would provide less hacky way getting values especially dealing responsiveness needing calculate layout styles across multiple dom elements get could ripe abuse unintended side effects current workarounds feel antipatterny providing explicit method", "d": "6/2018"}, {"body": "another use case trying calculate inactive markers leaflet based time elapsed markers generated computed property need refersh markers every mins able without wiring thru vuex store seems wrong able ask vue recompute markers every mins ideal solution", "d": "7/2018"}, {"body": "greetings use workaround trigger set computed property depend dummy property need recompute triggered elsewhere something like", "d": "8/2018"}, {"body": "adding recompute method datadriven nt expect core team implement ever especially consider evan already provided far easier understand solution second comment issue make sense understand vue datadriven dependency tree", "d": "8/2018"}, {"body": "also implemented userland plugin played around publish plugin soon show easy expand vue features really revisit way designing data never found need thing building vue apps points said sirlancelot true", "d": "8/2018"}, {"body": "could come uses vue internal mechanism though", "d": "8/2018"}, {"body": "pretty neat added separated option nt impact computed properties", "d": "8/2018"}, {"body": "ljonathanl think intended behavior assign part viewmodel data converted object intercepts array methods getterssetters objects keeping reference item list keep ability insert value back two questions would expect happen instead use case keeping references list items around list purged use empty array instead splice truly new array viewmodel old reference affect", "d": "4/2014"}, {"body": "thank answer agree data model belong vue see update fiddle item created added list list purged item modified another vue example business part secondly think bug modify item frame waiting vuenexttick example list kept empty good behavior empty array solution data model belong vue example set listitems empty array lost reference model", "d": "4/2014"}, {"body": "date object jsonstyle plain object need store timestamp number", "d": "3/2014"}, {"body": "write custom filter eg", "d": "3/2014"}, {"body": "thing yesterday try hack repeat directive update function collection write template dirty use string finally create method vue using like maybe filter better solution", "d": "3/2014"}, {"body": "ljonathanl thanks snippets went something similar let close think enough input find way", "d": "3/2014"}, {"body": "looks like access via based came following approach read content next step figure instantiate subcomponents may exist panel template consumes via custom vcomponents nt getting rendered", "d": "3/2014"}, {"body": "make fiddle sure trying achieve follow comment", "d": "3/2014"}, {"body": "dwabyick may ask domutilsdirectqueryselectorall googles nothing", "d": "3/2014"}, {"body": "thanks response setup fork vuebrowserifyexample shows roughly trying", "d": "3/2014"}, {"body": "lithiumjake routine made work around fact ca nt easily select direct descendants elementqueryselectorall without knowing element id", "d": "3/2014"}, {"body": "restate problem understand better simply triplestache template bindings dynamically compile vcomponents possible manually invoke compile manually adding content fork vuebrowserifyexample demonstrates fyi reason build components eg tab panel supply content via dom via js constructor", "d": "3/2014"}, {"body": "use manual compilation note partial compilations partially undone bindings released entire vm destroyed", "d": "4/2014"}, {"body": "thanks thoughts approach tab generic panelling component maybe panel tab could generic vm manually call compile injected dom content", "d": "4/2014"}, {"body": "looks bit better assign target vm choice vm", "d": "3/2014"}, {"body": "thank responded quickly tip", "d": "3/2014"}, {"body": "organisation collaborator definitelytyped would gladly help vue expert yet pool effort created tracking ticket dt note definitions dt repo automatically get pushed nuget plus dedicated cli client ide like webstorm intellij builtin support dt repo big mvcish frameworks popular dt example jquery amp angularjs definitions downloaded crazy numbers", "d": "3/2014"}, {"body": "hmm familiar nugetvisualstudio stuff seen ted patrick typescript definition vue although old version wondering anything date", "d": "3/2014"}, {"body": "nice let hope checks fyi nugetvisualstudio stuff works definition authors nt need anything magic interests contribution guide dt wiki info course case cover", "d": "3/2014"}, {"body": "unsafecode please upvote hah would excellent support vue scoped callback use", "d": "4/2014"}, {"body": "need revisit vue definition problems run defined var amp functions generate gettersetters different api location typescript wants understand behavior statically dynamic nature limits type benefits across codebase examples vue new vue data title todos vuetitle new location title variable shifts configuration runtime use configdatatitle vuetitle true methods vue configuration object must object literal modules classes typescript uses functions define internal structures thus makes approach incompatible working make generation object literal dynamic pass strongly typed class reflects runtime api vue yet generates object literal vue constructor feel approach work requires shimconversion code construction planning use vue typescript app thus need get complete soon estimate weeks time remains", "d": "4/2014"}, {"body": "great hear working looked definitelytyped contribution guide important really top page links page codeplex wiki handy patterns inspiration recently added sure cached", "d": "4/2014"}, {"body": "plan submit definitely typed really want get api right typescript weakness applying metadata driven apis extangularvue side effects find important often go beyond definition making typescript features mesh framework ton value modulesclasses ts large frameworks ship oop model within framework used work sencha worked mapping typescript extjs core issue typing metadata class abstraction tough puts heavy burden compiler saw build times generated definition files ext find real benefit wrapping framework apis vs raw definition simplifies development model exposes deeper typing support speeds compilation time ext wrote wrapper called exts strongly typed proxy ext apis net effect get proxy performance hit app startup construction get really clean compiletime errors option use moduleclass patterns ts provides definitions great small complexity rises find wrapping often better approach tsvue wrapper vue attempts ts class approach vue todomvc app ts module approach vue todomvc app class approach work need get object literal generation working correctly fri apr bart van der schoor lt notifications githubcom wrote great hear youre working looked definitelytyped contribution guide important really top page links page codeplex wiki handy patterns inspiration recently added sure cached reply email directly view github", "d": "4/2014"}, {"body": "cool know stuff personal experience modelling meta data driven systems know angularjs ts defs dt popular highly rated never used though looking forward solution vue quite sure would work practice requires runtime code might suited dt project dt typings preference either way world would like combine vue typescript way works great", "d": "4/2014"}, {"body": "hey updates typescript definitions quite keen integrate two", "d": "4/2014"}, {"body": "nothing report expect good state month active project depends thu apr nathan ridley notifications githubcomwrote hey updates typescript definitions quite keen integrate two reply email directly view github", "d": "4/2014"}, {"body": "hey going updates", "d": "6/2014"}, {"body": "first version vuets typescript approach using vue currently depends next build vue given uses within call super map class members vue config important part aligns configuration api runtime api vue typescript class allows finding interfacetype errors deep within project handy team development larger apps actively using vue larger project continue refine approach ongoing sorry delay ted thu jun pm nathan ridley notifications githubcom wrote hey going updates reply email directly view github", "d": "7/2014"}, {"body": "thanks ted work closing put link vuets readme", "d": "10/2014"}, {"body": "separate option placed inside", "d": "3/2014"}, {"body": "related expression parsing changing directive nt trigger changes changing anything actual data changing reference directive object fact modify existing properties directive object implement directive sets data back bit tricky need call trigger proper updates one thing note since trigger directive result infinite loop case need something looks like need return early true know looks bit tedious probably provide builtin method rare user land need kind stuff also consider bad practice explicitly modify parent state access parent chain inline expressions probably use pass status object", "d": "3/2014"}, {"body": "works perfectly thanks problem directive applied element inside two apply focus element expression evaluates true boolean value needs set false original parent parent vm order listen set true must apply focus", "d": "3/2014"}, {"body": "check current website docs api filters gt", "d": "3/2014"}, {"body": "thanks wryk closed favour", "d": "3/2014"}, {"body": "jbadeau taken stab simple wrapped component bootstrap well uses component though intention putting effort building bootstrap components needed time allows", "d": "3/2014"}, {"body": "nt really understand imperative vs declarative question saying want use piece data declarativelyused invoked template component use data another imperatively created invoked constructor js component", "d": "3/2014"}, {"body": "question seen examples use hierarchical data model like view set declarative component use subtree data like bind imperative widget component data maybe makes sense trying wrap head around combine styles general would usually use declarative style though", "d": "3/2014"}, {"body": "obsoleter cool man def nt want write customcomponent widgets wrapping existing ui toolkits seems pretty easy", "d": "3/2014"}, {"body": "suppose use data imperatively vuejs data objects observed multiple instances nt necessarily belong vm manytomany relationship", "d": "3/2014"}, {"body": "yes thats though thats wanted know thanx allot fast response", "d": "3/2014"}, {"body": "computed property suggestion think point computed properties allow stuff javascript something better expressed interpolation syntax probably belongs template", "d": "3/2014"}, {"body": "case pipe array custom filter arbitrary filtering", "d": "3/2014"}, {"body": "good idea", "d": "3/2014"}, {"body": "hmm component instances use watcher save specific case save settimeout would also work think even easier way", "d": "3/2014"}, {"body": "haha found actually compiling directives backwards instead loop directives comes gets compiled first reversed order make compile order consistent order appear markup", "d": "3/2014"}, {"body": "yeah fails current regex checks level deep parens come robust one", "d": "3/2014"}, {"body": "meantime suggest putting simple logic inline expressions case seems better use method handler", "d": "3/2014"}, {"body": "yeah using method expect index whole object big deal change works noticed inline expressions limitations example nt possible executed like keep logic inline expressions minimum sometimes useful avoid creating new methods assigning property", "d": "3/2014"}, {"body": "always create new method takes statement limited inline expressions statement purpose want discourage logic templates", "d": "3/2014"}, {"body": "think doable", "d": "3/2014"}, {"body": "curiosity since expressions support subset js function calls ternary operator comparison operators missed would difficult implement csp support", "d": "3/2014"}, {"body": "well happy lightweight dropin parser available parsers generated jison seems pretty bloated nt time write", "d": "3/2014"}, {"body": "implemented robust parser parse directives note parses structure directive expressions csp still supported", "d": "3/2014"}, {"body": "thanks site repo vuejsvuejsorg", "d": "3/2014"}, {"body": "sounds good thanks help seems nt automatic sync yet cdnjs good someone keep date please use name vue keep consistent sources", "d": "3/2014"}, {"body": "okay pr requested close issue either add reject", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "great vuejs could option jsfiddle framework amp extensions", "d": "3/2014"}, {"body": "sorry annoying reason new versions nt pushed jsdelivr", "d": "6/2015"}, {"body": "greenify nt set auto updating use cdnjs though", "d": "6/2015"}, {"body": "ah happens identifier looking", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "handle pass boolean", "d": "3/2014"}, {"body": "also along bpierre example simple pass truthy falsy value vue handle check state", "d": "3/2014"}, {"body": "wrong", "d": "3/2014"}, {"body": "nothing forgot include vue", "d": "3/2014"}, {"body": "wow really embarrassing lol sorry wasting time", "d": "3/2014"}, {"body": "worry use url jsfiddle notice missing dot raw github", "d": "3/2014"}, {"body": "using latest browserify fixed bug caused kind error", "d": "3/2014"}, {"body": "good catch seemed fix seeing unknown component undefined app still seems work weird", "d": "3/2014"}, {"body": "ahh using vview initializing undefined", "d": "3/2014"}, {"body": "nevermind fiddle looking thanks catch", "d": "3/2014"}, {"body": "fixed", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "known issue resolved", "d": "3/2014"}, {"body": "hi tried new still ca nt seem get work", "d": "3/2014"}, {"body": "oh thought manipulating object properties inside array trigger change ca nt set index way pick change use extended method see", "d": "3/2014"}, {"body": "cool thanks", "d": "3/2014"}, {"body": "nt directly instantiate components options instead pass constructor extend options compose template like html tags directive", "d": "3/2014"}, {"body": "version browserify using tried seems work", "d": "3/2014"}, {"body": "info using browserify time included file url linked release notes saw failure fix fix cloned repo used install properly everything worked like charm confusion around documentation ca nt add vuejs file project expect browserify work", "d": "3/2014"}, {"body": "oh see browserify static analysis calls unminified built version vue work assumes loaded directly global scope amd environment minified version works calls mangled usage commonjs environment always use source code version", "d": "3/2014"}, {"body": "exactly make sure add docs browserify users", "d": "3/2014"}, {"body": "directives like manages child vms put vm template root node case child vm finds directive instantiated already instead put parent template semantically also clearer applevel logic", "d": "3/2014"}, {"body": "ok thanks", "d": "3/2014"}, {"body": "also tried registering partial vuepartial still problem", "d": "3/2014"}, {"body": "fixed thanks spotting forgot clonenode rewriting vpartial real directive branch updated second jsfiddle working", "d": "3/2014"}, {"body": "confirmed awesome", "d": "3/2014"}, {"body": "tested latest dev branch longer happening thanks reporting", "d": "3/2014"}, {"body": "list anywhere api changes", "d": "3/2014"}, {"body": "repo release notes", "d": "3/2014"}, {"body": "pushed fixes dev branch new vrepeat algorithm nt take async transitions account fixed", "d": "3/2014"}, {"body": "awesome thanks", "d": "3/2014"}, {"body": "nevermind thought way sorry issue spam", "d": "3/2014"}, {"body": "unescaped html use triple mustache see third tip section", "d": "3/2014"}, {"body": "facepalms miss thanks man", "d": "3/2014"}, {"body": "post snippet using likely go away next release completely rewritten", "d": "3/2014"}, {"body": "sorry nt use vwith ah see nt find code", "d": "3/2014"}, {"body": "hmm ok vcomponent somehow uses vwith internally ca nt help much without looking code likely gone", "d": "3/2014"}, {"body": "ok done sample first init start page load second script would rebind", "d": "3/2014"}, {"body": "tested latest build longer produces error something noted probably good idea use compile element twice new version custom element tags must contain hyphen", "d": "3/2014"}, {"body": "compile element twice handle multiple routes replace view found sample thanks", "d": "3/2014"}, {"body": "remoe check example test suite", "d": "3/2014"}, {"body": "know suggested earlier offered solution change source difficult since many earlier projects use notation seems making notation configurable would make vue better citizen existing ecosystem", "d": "3/2014"}, {"body": "landed part syntax", "d": "3/2014"}, {"body": "thanks fast", "d": "3/2014"}, {"body": "clap", "d": "3/2014"}, {"body": "fixed thanks", "d": "3/2014"}, {"body": "moved faq", "d": "3/2014"}, {"body": "also interesting thing noticed inspect broken textarea correct values us still showing double curly braces oo", "d": "3/2014"}, {"body": "interesting issue neat use vue tried getting work breaking component issue think textarea idiosyncrasies correct value see inspector think attribute reason stuck thinking uncompiled text value overwrites compiled text", "d": "3/2014"}, {"body": "awful hack causes compiled textarea content pushed back attribute trigger event update model diff git asrccompilerjs bsrccompilerjs index asrccompilerjs bsrccompilerjs compilerprotocompiletextnode function node var el token directive var el token directive parentnode val compilerprotocompiletextnode function node thisbinddirective directive nodeparentnoderemovechild node parentnode nodeparentnode parentnoderemovechild node val parentnodevalue parentnodetagname textarea utilsnexttick function parentnodevalue val", "d": "3/2014"}, {"body": "fixed", "d": "3/2014"}, {"body": "brandon original example working commit one see", "d": "3/2014"}, {"body": "content inside textarea parsed attribute textarea element nt allow partials documentfragments get around setting though", "d": "3/2014"}, {"body": "clarifies thank", "d": "3/2014"}, {"body": "also related bug vmodel input changes causes reflow interrupting input todomvc example basically order array nt change dom manipulation necessary", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "ahhh never thought fix", "d": "3/2014"}, {"body": "error still ocurring without vuejs", "d": "3/2014"}, {"body": "filipelinhares waaaat", "d": "3/2014"}, {"body": "chrome error without vuejs", "d": "3/2014"}, {"body": "crazy report bug chromium project also firefox content edited first letter longer capitalized", "d": "3/2014"}, {"body": "linked issue chromium issue list closing", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "also believe changing property string object wo nt create getters setter subproperties object right", "d": "3/2014"}, {"body": "intended behavior prevent computed properties throwing errors enable collecting dependency try access properties exist yet swapping string object object recursively observed ie converted gettersetters process changing truly conditional basically starting value falsy things inside simply wo nt compiled somehow resolve problem well", "d": "3/2014"}, {"body": "truly conditional vif landed dev branch nt see reference commit", "d": "3/2014"}, {"body": "dyu", "d": "3/2014"}, {"body": "thanks always", "d": "3/2014"}, {"body": "month think probably nt lot finished ones unforturnately internal projects creative lab using vue public", "d": "3/2014"}, {"body": "open page wiki may add others projects find using vue", "d": "3/2014"}, {"body": "added", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "believe browserify meant used npm bower really use bower maybe could try debowerify", "d": "3/2014"}, {"body": "according bower spec bower packages ship standalone built versions code using browserify go fullnpm instead using bower", "d": "3/2014"}, {"body": "paglias nt need bower using browserify", "d": "3/2014"}, {"body": "like use bower registrer contains lot client side libraries nt avalaible npm would like avoid using two different package managers client side dependencies found useful able use specific commitsbranches library outside released versions indipendently using browserify possible npm bower given current setup would enough expose folder bower", "d": "3/2014"}, {"body": "course nt ask build vue every commit want use unreleased version rely source files compiled", "d": "3/2014"}, {"body": "paglias would better using git clone want access source much better asking developer break conventions two approaches", "d": "3/2014"}, {"body": "kristoferjoseph asking break convention approach ability use specific commit branch documented feature bower suppose found might useful mine suggestion make easier use vue", "d": "3/2014"}, {"body": "checked seems bower longer prefers built versions jquery also shipping bower distribution dev branch includes work setup", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "jiyinyiyong documentation filters states second argument filter function interpolation arguments access viewmodel within filter function need reference get data", "d": "3/2014"}, {"body": "example current version obsoleter jiyinyiyong want mention upcoming changes next version filter arguments passed filter function real arguments instead array would make custom filters easier write obsoleter pointed raw string intended use raw string key access dynamic property using also filter accesses function body marked computed filter directive uses computed filter parsed expression including filters properties accessed filter tracked dependency", "d": "3/2014"}, {"body": "thanks pointing looking forward", "d": "3/2014"}, {"body": "yes think contrast difference monitors tweak legible moved", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "make work objects", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "could something like html click something message get working using dev branch commit see probably way invoke handlers expressions using get event object", "d": "3/2014"}, {"body": "use atm ugly hack elegant able write something like selectchoice e", "d": "3/2014"}, {"body": "get access basically logic needs one expression put method", "d": "3/2014"}, {"body": "every time miss something like think nt remember docs go look course right first paragraph", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "fine create childvms directives long manage well internal directives implemented internal method compiler instances called allows get constructor available current instance example using approach address concern bind remove cache current innerhtml documentfragment instantiating new childvm hook set compler clone cached fragment way leverage outlet normal components note requires use dynamic component directive like basically nt provide inner content wiped away", "d": "3/2014"}, {"body": "bit cumbersome", "d": "3/2014"}, {"body": "dynamically swapping components easy said still possible create pretty robust directive exactly want", "d": "3/2014"}, {"body": "thanks makes lot sense let fix rough edges dynamic component ideas second example gave work something compilation order seems get stuck loop", "d": "3/2014"}, {"body": "got pretty rough implementation accounts gt yield vwith actually swaps outside node", "d": "3/2014"}, {"body": "cool something belongs userland would compare complexity directive others directives built real projects make core vue", "d": "3/2014"}, {"body": "say pretty rare type logic control directives userland think enabling kind dynamic interpolation second example see taking time", "d": "3/2014"}, {"body": "introduced new directive based previous dynamic component test implementation find suitable view control use dynamic component directive checkout updated routing example", "d": "3/2014"}, {"body": "wow cool", "d": "3/2014"}, {"body": "share jsfiddle showing behavior", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "think happens event delegation handlers actually stored root node something like jquery needed", "d": "3/2014"}, {"body": "thanks confirmed working", "d": "3/2014"}, {"body": "vuejs file browserify require srcmainjs vue nodemodules directory", "d": "3/2014"}, {"body": "vuejs file npm moved different directory used require vue pulling nodemodules require vue work", "d": "3/2014"}, {"body": "think problem always dist version reason use", "d": "3/2014"}, {"body": "particular reason closed", "d": "3/2014"}, {"body": "really like idea conditional partials ideas possible syntaxes", "d": "3/2014"}, {"body": "something like", "d": "3/2014"}, {"body": "passing function returns name partial javascript gt somefunc thinking something like might better fit component", "d": "3/2014"}, {"body": "thinking special syntax resolving current literal directives dynamically html", "d": "3/2014"}, {"body": "love", "d": "3/2014"}, {"body": "alternatively allow interpolation inside literal directives html inline existing syntax advantage previous option pass additional inline options although sure actually need", "d": "3/2014"}, {"body": "yesssssssss", "d": "3/2014"}, {"body": "would like input duckbox bpierre obsoleter", "d": "3/2014"}, {"body": "would useful already come across one situation thought would nice dynamically choose component prefer interpolation syntax consistent already also data needs passed simply use two ways thing concepts vuejs users learn special syntax javascript hash directive value unlike anything else key hash arbitrarily special pass additional data component partial concepts vuejs users learn interpolation syntax literal directives interpolated values mustachestyle bindings way used html attributes text", "d": "3/2014"}, {"body": "great dynamic literal mechanism would really helpful think first idea complicated literal would confusing allow additional options prefer second idea looks like know could also lead confusion value update resolution maybe concept onetime binding could reintroduced even performance gain significant could make sense design point view used dynamic literals html", "d": "3/2014"}, {"body": "necessarily onetime resolution admittedly contrived example suppose list data want graph two way binding used would allow easily swap back forth sure could one multiple ways display data former would cleaner", "d": "3/2014"}, {"body": "obsoleter think case may want dynamic directive related literal directives", "d": "3/2014"}, {"body": "bpierre think asking blurs line much dynamic literal directives behind syntax pairs well mustachestyle bindings two way binding literal directives would require lot related functionality outside directive plus dynamic literals resolved would pretty easy build directive userland", "d": "3/2014"}, {"body": "simplicity sake decided stick syntax rule thumb inside literal directives resolved counted individually repeated items", "d": "3/2014"}, {"body": "landed", "d": "3/2014"}, {"body": "work using build dev branch commit", "d": "3/2014"}, {"body": "obsoleter thanks fixed need add tests later", "d": "3/2014"}, {"body": "remove bindings pushing object array reference object still observed main viewmodel push shallow copy object", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "darn really hoping find built way push copy whole object case breaks lot pointless repetition instead using jquery since already", "d": "6/2015"}, {"body": "internal equivalent although documented", "d": "6/2015"}, {"body": "awesome looking created stackoverflow q hopefully help others run includes fiddles show", "d": "6/2015"}, {"body": "hi situation following object javascript data navigation step prev current next using maintains data binding thus say also update object pushed trying avoid anyone advise something wrong actual bug utilexport played around fiddle forked new version could replicate issue right option seems properties", "d": "11/2015"}, {"body": "jjaulimsing shallow clone copies top level properties vuejs data objects reactive reference want nonreactive copy use deep clone easy way use something like", "d": "11/2015"}, {"body": "real troublesome find solution possible add notes documentation suggestion section example todo list list rendering", "d": "6/2017"}, {"body": "hmm yeah mention basically instantiation compilation assets need registered beforehand", "d": "3/2014"}, {"body": "fact suggest nt even return extended constructor return options plugin app allows user code rename component theoretically required describe component", "d": "3/2014"}, {"body": "yes main concern instantiate extended vm code could replace better register component name still verbose user maybe plugin api vue see proposal provide something simplify instantiation code templates extended vms", "d": "3/2014"}, {"body": "get makes sense think addition could also take optional base class follows convention accepting optional base class rough thoughts need polishing also previous suggestion removing chaining returning registered component also worth considering think part though since going pretty big api change", "d": "3/2014"}, {"body": "maybe try unify single thing", "d": "3/2014"}, {"body": "yes could make sense since terms appears everywhere difference see component attached another viewmodel viewmodel instance id called template could replaced look confusing conversely term viewmodel could replaced term component everywhere except getting started section could replaced nonchainable js current extend var extendedcomponent vuecomponent get component current component name var extendedcomponent vuecomponent extendedcomponent still except returns extended component var extendedcomponent vuecomponent someregisteredcomponent inheritance var extendedcomponent vuecomponent extendedcomponent basecomponent becomes extendedcomponentcomponent anotherextendedcomponent anotherbasecomponent equivalents new vue vuecreate vuecomponent someregisteredcomponent create vuecreate someregisteredcomponent", "d": "3/2014"}, {"body": "another vote unifying seems job also handling registration retrieval components like bpierre suggestion favors terminology think helpful say vue component reusable instantiatable viewmodel vue components everything get except define going reusing", "d": "3/2014"}, {"body": "agree unifying everything vuecomponent projects hardly ever using vueextend syntax create components vuecomponent maybe change extends inheritance method eg", "d": "3/2014"}, {"body": "edited issue title keep relevant", "d": "3/2014"}, {"body": "thoughts playing options fact serve different purposes becomes obvious extended constructor say extended constructor also methods case mean different things js subcomponent using vue base class encapsulated inside mycomponent mycomponentcomponent subcomponent extendedcomponent using mycomponent base class nt necessarily part mycomponent var extendedcomponent mycomponentextend case unifying two would actually cause confusion noted bpierre becomes weird example back original problem think core issue vuejs trying support two different paradigms first backbonestyle class amp inheritance based api second web component style declarative markupbased api think use tag also create image node think need support gives greater flexibility little verbosity case outweighed benefits think would still help provide sugar common tasks prefer without affecting underlying semantics", "d": "3/2014"}, {"body": "let see understand subcomponent created inside existing component like inherit instantiation options would globally registered would usable within instances correct however example instances receive properties overriden instantiation options correct", "d": "3/2014"}, {"body": "obsoleter yes asset registration method similar etc means take constructor function register id originally expects constructor function directly passing option object syntax sugar think source confusion", "d": "3/2014"}, {"body": "agee keeping definitely use cases either one start getting advanced applications think good explanation differences mentioned docs would enough people understand", "d": "3/2014"}, {"body": "thanks evan example clear makes sense maybe could added somewhere documentation composing viewmodels page maybe new concepts page plugin api adding components directives etc vue constructor extended vue shared simple init function method", "d": "3/2014"}, {"body": "think issue assumes components registered globally feels bit weird encapsulated constructor personally recommend second syntax original options also cherry pick component plugin exports option objects bit verbose think makes concepts clearer", "d": "3/2014"}, {"body": "small nitpick enough warrant separate issue somewhat relevant current discussion popular js libraries jquery underscore also others methods modify target object contrast creates new subclassed instance may somewhat confusing vue users alternative name suggestions", "d": "3/2014"}, {"body": "pesho think makes perfect sense like rather constructor happens expose static methods different jquery underscore mostly object holding bunch utility methods", "d": "3/2014"}, {"body": "added explanation docs", "d": "3/2014"}, {"body": "moved", "d": "3/2014"}, {"body": "hi could provide complete example add url external resource", "d": "3/2014"}, {"body": "thanks replying asked", "d": "3/2014"}, {"body": "hope helps", "d": "3/2014"}, {"body": "gotcha use inline expression like passing vm instance data object either use handler example", "d": "3/2014"}, {"body": "using vue reset form", "d": "3/2014"}, {"body": "also fiddle referencing rawgithub wich serving content wrong mimetype vue nt even loaded use rawgithub without dot proxy", "d": "3/2014"}, {"body": "think manually reset", "d": "3/2014"}, {"body": "ok got", "d": "3/2014"}, {"body": "nt forget register effect via vueeffect", "d": "2/2014"}, {"body": "javascript transitions renamed effects better differentiate css transitions css animations javascript effects need pass options name need specify effect html greet fixed fiddle docs", "d": "2/2014"}, {"body": "aha moment needed nest object thanks", "d": "3/2014"}, {"body": "nice tried use javascript effects docs nt enough brains understand jsfiddle example finally got thanks learning extended jsfiddle accordion list nice slidetransition works quite nice run different problem canshould parent vm access children vms created vrepeat ended ugly code accessing internal state parent vm guesshope better way", "d": "6/2014"}, {"body": "yes use vref directive together", "d": "6/2014"}, {"body": "aha found answer docs vref used together vrepeat value get array containing child components mirroring data array accordionjsfiddle use vref works fine", "d": "6/2014"}, {"body": "sure bug since actually working since data properties methods exposed vm instance avoid anyway", "d": "2/2014"}, {"body": "currently access extra properties bit verbose dev branch added access easily", "d": "2/2014"}, {"body": "nt want add custom properties passed view prototype", "d": "2/2014"}, {"body": "blacklist options nt get mixed also vm instances proxy access could potentially cause naming collisions conceptually anything vm instance nt start either data property bindable method", "d": "2/2014"}, {"body": "roger thanks", "d": "2/2014"}, {"body": "could also return created component guess could source confusion another approach explicit js vuecomponent form vuecomponent loginform extends form becomes horrible idea var form vueextend var loginform vueextend extends form", "d": "2/2014"}, {"body": "know option would confusing haha nt mention", "d": "2/2014"}, {"body": "maybe return new created objects static methods chaining necessary case imho", "d": "2/2014"}, {"body": "c style extend vue component form component loginform form loginform extends form", "d": "2/2014"}, {"body": "closing due lack consensus benefits substantial", "d": "3/2014"}, {"body": "ok mistake returns new component written like", "d": "2/2014"}, {"body": "yeah registration methods return chaining however considering convenience syntax extending components see", "d": "2/2014"}, {"body": "would even useful could change delimiters underscore template example javascript templatesettings interpolate g var template template hello name template name mustache gt hello mustache", "d": "2/2014"}, {"body": "changing delimeters wo nt help case user still able call say break everything parse attributestyle directives user chance break anything", "d": "2/2014"}, {"body": "ahh sorry nt vigilant enough", "d": "2/2014"}, {"body": "hackish way monkey patching", "d": "2/2014"}, {"body": "bpierre yes great mustachestyle bindings also used node attributes example docs html hello name course strange user contain mustaches lol attribute example contain anything", "d": "2/2014"}, {"body": "true certainly break future release", "d": "2/2014"}, {"body": "new option", "d": "2/2014"}, {"body": "wow incredible speed man becoming framework dream thanks", "d": "2/2014"}, {"body": "want totally something similar vuejs necessary super heavy views want explicitly control lifecycle sub view better memory management cases compose everything together use display based view state", "d": "2/2014"}, {"body": "would nice could option tell vue subvue child therefore able dispatch messages catch broadcasted messages hierarchy vms", "d": "2/2014"}, {"body": "marfalkov good point internal compiler option occurred make public option example could get benefits access scope event communication etc", "d": "2/2014"}, {"body": "great", "d": "2/2014"}, {"body": "accidentally checked test file thanks noting", "d": "2/2014"}, {"body": "fixed thanks", "d": "2/2014"}, {"body": "triple mustaches see", "d": "2/2014"}, {"body": "bpierre said", "d": "2/2014"}, {"body": "ooops thanks", "d": "2/2014"}, {"body": "able access hook", "d": "2/2014"}, {"body": "example", "d": "2/2014"}, {"body": "fun", "d": "2/2014"}, {"body": "marfalkov nice one", "d": "2/2014"}, {"body": "works use directive bind function able get value available thisvalue", "d": "2/2014"}, {"body": "set called creating custom directive nt vue treat literal directive basically need access binding values even though called case also use html", "d": "2/2014"}, {"body": "definitely weird also available update hook defined useful think implicit literal directive udpate hook may little nonobvious", "d": "2/2014"}, {"body": "right make explicit options", "d": "2/2014"}, {"body": "also get initial value argument available", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "would think property containing string", "d": "2/2014"}, {"body": "might boolean options future limiting everything single string type feels less flexible", "d": "2/2014"}, {"body": "ok thanks", "d": "2/2014"}, {"body": "meant post faq apologies", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "readme\u91cc\u663e\u793a\u7684\u662f\u6700\u65b0\u7248\u54e6", "d": "11/2017"}, {"body": "intended simple inline data attribute value interpreted raw values instead binding child component already access parent data directly template actually share data use", "d": "2/2014"}, {"body": "see built better example see missed obvious solution case basically component like bind data property parent vm parent vm already property directly directly use ideally like bind component app way bind input value property first version base demo working using sync two properties events sake completeness finally version quick amp dirty directive order synchronize two properties without adding code like last one structures kept separated like think", "d": "2/2014"}, {"body": "thanks detailed examples totally make sense think something like could indeed useful also makes think lock mechanism prevent values circular triggering", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "thanks man removed forced layout tested single element worked browsers seems without force layout triggering becomes inconsistent revert change", "d": "2/2014"}, {"body": "ah stupid still need delegation", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "updated fiddle", "d": "2/2014"}, {"body": "jquery selector looks element dom element appended dom yet give jquery component element search context would work", "d": "2/2014"}, {"body": "thanks wrong way eg el baz jquery getting rusty", "d": "2/2014"}, {"body": "achievable via", "d": "2/2014"}, {"body": "could make fiddle", "d": "2/2014"}, {"body": "hellojosh component view model want access data parent either need combine directive go combine directive supply object parent view model latter probably bit cleaner example section documentation also shows", "d": "2/2014"}, {"body": "obsoleter thanks help duckbox fiddle shows something simple trying", "d": "2/2014"}, {"body": "hellojosh looks like bug fixed sometime works fiddle", "d": "2/2014"}, {"body": "hellojosh seems working latest version side note concept components vuejs instance nontrivial data logic view states use case seems partial would simpler", "d": "2/2014"}, {"body": "jsfiddle examples available would nice nt delete qa help lot", "d": "5/2014"}, {"body": "something like feels complicated javascript var foo vueextend template foo ready function var self attached function selfonattached methods onattached function consolelog know attached attached function consolelog attached run var new vue template components foo foo attached function broadcast attached appendto body var new foo appendto body", "d": "2/2014"}, {"body": "see fiddle attached gets called console logs attached", "d": "2/2014"}, {"body": "fiddle", "d": "2/2014"}, {"body": "see gets called second case", "d": "2/2014"}, {"body": "ahhhhhh ffs marfalkov apologize get saying explicitly setting child component attach event fire error design sure use created method instead attached get outcome looking", "d": "2/2014"}, {"body": "duckbox problem unfortunately use attached callback big mixed jqueryknockout datagrid build vue attached view", "d": "2/2014"}, {"body": "wondering use attached callback parent attached children", "d": "2/2014"}, {"body": "would clean keep relevant code module attached callback instead parent attached callback dynamically creating components based events", "d": "2/2014"}, {"body": "right one component needs attached callback imagine components attached callbacks would messy", "d": "2/2014"}, {"body": "true think solution broadcasting top level vm address next release", "d": "2/2014"}, {"body": "awesome", "d": "2/2014"}, {"body": "thought seems problematic recursively fire attacheddetached child components two events meant indicate component element relationship parentnode whether inside dom consistent behavior native dom mutation events use case something like", "d": "2/2014"}, {"body": "live broadcast one case would good could let say afterrendered callback", "d": "2/2014"}, {"body": "hook fired compilation done note component compiledrendered attached dom", "d": "2/2014"}, {"body": "fired view rendered nt", "d": "2/2014"}, {"body": "nope saying compilation less thing rendering hook fired means data bindings processed element stabilized", "d": "2/2014"}, {"body": "strange tried ready nt work case look thanks", "d": "2/2014"}, {"body": "provide fiddle illustrating problem ran would great closing", "d": "2/2014"}, {"body": "since using way nt really bother good point javascript var vm new vue created function var self consolelog self vm true", "d": "2/2014"}, {"body": "yes moment wondering purpose", "d": "2/2014"}, {"body": "amp", "d": "2/2014"}, {"body": "give example", "d": "2/2014"}, {"body": "using way", "d": "2/2014"}, {"body": "component use different methods pesca scarta", "d": "2/2014"}, {"body": "declare attributes components ca nt use whatever user writes attribute automatically", "d": "2/2014"}, {"body": "blacklist native attributes depending element type cumbersome whitelist approach explicit safer", "d": "2/2014"}, {"body": "think dataattributes bit misleading potential confusion datatset api perhaps bindattributes example seems odd whereas need rename binding key instance well dataqty seems messy", "d": "2/2014"}, {"body": "yes bindattributes also sounds misleading really binding starting value maybe", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "paramattributes feb pierre bertet notifications githubcom wrote elementattributes htmlattributes tagattributes domattributes attributes reply email directly view github", "d": "2/2014"}, {"body": "ah misthought whole binding part initial data follow absolutely paramattributes sounds perfect describe", "d": "2/2014"}, {"body": "dead simple attr", "d": "2/2014"}, {"body": "marfalkov already option hash attribute keyvalues added element", "d": "2/2014"}, {"body": "exact opposite maybe names could reflect something like", "d": "2/2014"}, {"body": "setattributes getattributes sounds good", "d": "2/2014"}, {"body": "nt think logical counterparts part element options component configuration option", "d": "2/2014"}, {"body": "makes sense", "d": "2/2014"}, {"body": "hmmm guess shorthand componentbased projects clarify spec", "d": "2/2014"}, {"body": "vuerequire works already called static way really ugly solution could require modules relevant plugins", "d": "2/2014"}, {"body": "yeah actually one reasons use component browserify let think", "d": "2/2014"}, {"body": "maybe dedicated plugin api could provided documented instead exposing internal components", "d": "2/2014"}, {"body": "could try commonjseverywhere", "d": "2/2014"}, {"body": "actually thinking shipping built versions npm instead would allow get rid emitter hack also split observer package", "d": "2/2014"}, {"body": "scrap browserify attempts parse requires inside throws compile time error", "d": "2/2014"}, {"body": "yup browserify attempts parse bundle making dynamic paths impossible likes utils static named module without define list modules packagejson etc fri feb pm evan notifications githubcom wrote scrap browserify attempts parse requires inside throws compile time error reply email directly view github", "d": "2/2014"}, {"body": "modules exposed plugins theoretically need plugins mess parts anyway docs updated together next release plugin spec mature", "d": "2/2014"}, {"body": "think may also true requirejs setup use almond shim", "d": "2/2014"}, {"body": "nt work used component calls overwritten build step instance could fixed like bpierre suggested js var modules utils utils config config transition require transition observer require observer viewmodelrequire function path return modules path", "d": "6/2014"}, {"body": "yeah might better way go open prs", "d": "6/2014"}, {"body": "", "d": "2/2014"}, {"body": "agreed option create directives implementation like since literal directives need data binding capabilities nt need method directive definition provide method data binding work skipped essentially makes literal directive using bad consequences fact avoid using quotes literal values makes directive expression requires lot internal work evaluate clarify docs better thanks", "d": "2/2014"}, {"body": "also documented", "d": "2/2014"}, {"body": "moving vuejsorg repo", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "sure approaching built comprehensive css animation library optimized animations use take find keep great work", "d": "2/2014"}, {"body": "thanks brandon vue animation transition support provide hooks custom css would provide flexibility actual css code developers wo nt bundled vue core would cool collection css animations used vue box", "d": "2/2014"}, {"body": "amp", "d": "2/2014"}, {"body": "hi brandon happy know vue working regarding question ideally want include much possible template initialization possible compile appended nodes really needed fiddle add append element however example remove input node associated bindings autodestroyed remain memory lot stuck like could cause memory leaks application think better solution including input template showhide", "d": "2/2014"}, {"body": "idiomatic implementation moment could result verbosity template complexity js code greatly reduced next version vue make able iterate object could help multiple fields need functionality", "d": "2/2014"}, {"body": "fun example breaking functionality component directive vuejs awesome", "d": "2/2014"}, {"body": "really nice obsoleter great use components", "d": "2/2014"}, {"body": "obsoleter use filters", "d": "2/2014"}, {"body": "thanks fast reply excellent examples", "d": "2/2014"}, {"body": "filipelinhares awesome thank must missed docs", "d": "2/2014"}, {"body": "definitely something interested could also used prerendering page server side initial speed seo way vue built assumes presence dom requires full dom simulation node like jsdom quite heavy probably mess around see much work would time moment focusing consolidating core api plugin spec", "d": "2/2014"}, {"body": "one thoughts came roadmap instead jsdom ran runtime would task would execute task dev compile manifest object data intercepted dom output bootstrap sorts initial load obviously would require vue plugin read manifest contents bind data prerendered markup", "d": "2/2014"}, {"body": "server side necessary manpulate dom data binding libary guys talking interesting prebuild process like component one recently riverjs wrote contains feature also data binding build make prebuild process worked see responstery install riverjs g npm", "d": "3/2014"}, {"body": "tested vue work jsdom provide prerendered version page however making vue able pick already rendered page seems require much internal hassle probably easier use service like prerenderio hand thelinuxlich idea reusing components npm already feasible component definitions assume existence vue cases", "d": "3/2014"}, {"body": "much work would adapt vue run without access full dom", "d": "3/2014"}, {"body": "mrlundis vue template compile mechanisms relies existing html parser live dom nodes pretty much requires half rewrite nt think feasible moment tested work jsdom", "d": "3/2014"}, {"body": "making vue able pick already rendered page seems require much internal hassle shame really like vuejs make almost perfect framework", "d": "3/2014"}, {"body": "racking brain thinking would best way achieve prerendering comment winner particular bit using hashes found nt work building single page app engine curious combining lib routing engine like ideal opinion", "d": "4/2015"}, {"body": "robertleeplummerjr vue pair pretty much routing lib really depends routing lib like best", "d": "4/2015"}, {"body": "high fives nt want brag javascript rules", "d": "4/2015"}, {"body": "seo problem front side render templates perfect solved really think server side render worth consider vuejs", "d": "11/2015"}, {"body": "pinescheng try", "d": "11/2015"}, {"body": "mentioned vue forum someone came custom prerendering solution vue blazing fast open source could please share contact details person request opensource custom prerendering solution want use vue badly need ssr feature next project ssr must feature vue wants compete frameworks like react aurelia", "d": "1/2016"}, {"body": "ansarizafar already open sourced", "d": "1/2016"}, {"body": "seen repo nt look like perfect solution chance official ssr solution worked recently aurelia playing vue dont want use framewok request consider working feature make vue best framework", "d": "1/2016"}, {"body": "limited knowledge agree ansarizafar reworked version vue ssr suboptimal even though understand might work way except jsdom way throwing thoughts would nt possible go hybrid desktop web applications spidered vue melded standard server rendered templates like laravel could nt components made desktop web application also reusable full vue application pure clientside rendering would reserved say backend nonspidered web applications mobile apps key sure everyone looking reusability beyond seo concerns nt vue components give us would components built desktop web application compatible full vue web application scott", "d": "1/2016"}, {"body": "ansarizafar smolinari hello well yeah guys absolutely right many us want vuejs ssr want official perfect etc also one asked may look easy hell work make way also remember vuejs nt team developers working salary like react alone well quite still developing stuff made vueserverjs understood wanted help also felt like skilled help developing vuejs think still something help guys could provide direction ps vueserverjs perfect restrictions etc still used production already even get perfect isomorphic app get used understand way works also ready ask related queston", "d": "1/2016"}, {"body": "disrespect work meant part fullfs hope understood smile fact appreciate effort made lot two parallel projects similar goals although vue nt ssr goal wasted effort practically useless userland dev perspective understand rewritten parts vue make also work serverside please correct wrong correct project module plugin ties vue works vue would make much attractive make sense scott", "d": "1/2016"}, {"body": "smolinari yeah understand mean offence feel mean already insanely great job get bit emotional vueserverjs right independent module shares part code vuejs probably future also okay made single practical purpose needed ssr project using vuejs already reached goal open sourcing bonus also hope day vuejs support ssr nativly really need ssr using vuejs vueserverjs help", "d": "1/2016"}, {"body": "list stable spec developers force write engine like vuellvm node translate", "d": "5/2016"}, {"body": "sure know plan ssr capability built vuejs smile scott", "d": "5/2016"}, {"body": "mistake changed way counting seconds nt fix filter nothing broken", "d": "2/2014"}, {"body": "listening events", "d": "2/2014"}, {"body": "root rootvm hello function msg consolelog someone said hello msg", "d": "2/2014"}, {"body": "rootvm compiled children compiled time attached listener ready hooks already fired order capture children ready event attach listener parent ready hook", "d": "2/2014"}, {"body": "nt seem work fireing inside grandready childready rootready", "d": "2/2014"}, {"body": "oops sorry meant parent created hook", "d": "2/2014"}, {"body": "yeahh thank", "d": "2/2014"}, {"body": "things hold json compliant values strings work raw nodes wo nt intended transform strings html situation seems looking partials register partial inside templates use partials converted documentfragments cached would efficient", "d": "2/2014"}, {"body": "aye right partials work fine fast went ballmer peak", "d": "2/2014"}, {"body": "perf gain minimal probably better suited prerendered server side", "d": "3/2014"}, {"body": "thanks fixed initial data undefined inline value used", "d": "2/2014"}, {"body": "honestly sure causing perf difference vue firefox likely dom layoutrendering javascript optimization would nt say faster ff wrong far know pretty performant browser also note benchmark specific series operations reflect every aspect browserframework performance", "d": "2/2014"}, {"body": "sorry bump experiencing issues exactly symptoms unfortunately ca nt publicly provide link site also ca nt pin problem reduced test case since large project experience vue instance child component instances would behave extremely slowsluggish firefox tested win compared browsers system ff versions systems win mac", "d": "12/2017"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "thanks noticing fixed", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "hi guide doc also always pass additional data manually instantiate components", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "augmenting object mutator methods instead set remove etc like currently done arrays methods could intercepted", "d": "3/2014"}, {"body": "pesho hmm interesting thought concern adding methods arrays less likely run conflicts since elements accessed indices objects much maybe prefix methods think make sense manipulating repeater array", "d": "3/2014"}, {"body": "yes prefixing makes sense already discouraged prefix inside viewmodels also methods probably made nonenumerable using objectdefineproperty", "d": "3/2014"}, {"body": "make consistent array augmentations eg probably also use prefix differentiate builtin array methods", "d": "3/2014"}, {"body": "agreed unprefixed versions could probably remain aliases arrays", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "hi rudasn top level array changes vuejs nt rebuild whole list items example viewmodel associated removed piece data destroyed similarly add new elements array existing viewmodels unaffected index updated necessary amount work done vue linearly proportional amount changes data let know understood concerns correctly", "d": "2/2014"}, {"body": "thanks evan something wrong code trying loop object first converting array reset array property one objects changes order property ordered dictionary words resetting array causes rebuild everything apparently tried creating directive loop objects work directives eg component also defined thoughts especially appreciated feb evan notifications githubcom wrote hi rudasn top level array changes vuejs nt rebuild whole list items example arr pop viewmodel associated removed piece data destroyed similarly add new elements array existing viewmodels unaffected index updated necessary amount work done vue linearly proportional amount changes data reply email directly view github", "d": "2/2014"}, {"body": "give example data described think mapping object array use need serialize data map array back object data format also considering adding directive looping objects stay tuned", "d": "2/2014"}, {"body": "thanks phone atm ca nt provide data example object keys id child objects value child object child objects order property defines order display one object loop directive would greatly appreciated feb evan notifications githubcom wrote give example data described think mapping object array use vrepeat need serialize data map array back object data format also considering adding directive looping objects stay tuned reply email directly view github", "d": "2/2014"}, {"body": "ago might cause working though keep getting error", "d": "2/2014"}, {"body": "fixed think kind npm cache error", "d": "2/2014"}, {"body": "sorry found solution needed", "d": "2/2014"}, {"body": "add help event listeners specify methods without duplicate piece data", "d": "2/2014"}, {"body": "mizchi one thing note json compliant best practice exclude functions data objects putting functions always preferred want use custom vue constructor repeated items combine guide", "d": "2/2014"}, {"body": "use situation", "d": "2/2014"}, {"body": "great asked faq", "d": "2/2014"}, {"body": "img tag affiliated windowdocument document setting imgsrc wo nt trigger download give try", "d": "4/2014"}, {"body": "aztack recommended way use shortcut cases want construct list attributes programmatically", "d": "11/2015"}, {"body": "anyone explain one loop used use srcxxxx without getting error case error occur nested loops error purl error nested loop purl data used", "d": "4/2016"}, {"body": "raywill explained use", "d": "4/2016"}, {"body": "", "d": "5/2016"}, {"body": "dickyeka vbind src src evaluates expression would need following", "d": "5/2016"}, {"body": "id love know image request even made place img tag hardcoded src div ngiffalse image request still made even template rendered plunkr open console look requesting image", "d": "10/2016"}, {"body": "becuase vue template dom vue chance find parse render elements browser sees vue tries download", "d": "10/2016"}, {"body": "template syntax error invalid expression vattr src image", "d": "11/2016"}, {"body": "want change images get vueresource placeholder image use result blank space ok problem images link provide success got blank solution thanks", "d": "12/2016"}, {"body": "got solution link use vue directive anymore perfect solution espesially vuejs function imgerror source sourcesrc noimagegif sourceonerror return true", "d": "12/2016"}, {"body": "post old im similiar issue case im getting bad request image source binding images want load employees every property loads fine get image vue seems encoding string navigate url without image gets loaded reason tacking", "d": "12/2016"}, {"body": "surgiie images content white space first character url encode mean white space true try images load code looks like bellow methods vue scope vue directive", "d": "12/2016"}, {"body": "billxcode thanks lot problem errors tip helped days searching solution", "d": "1/2017"}, {"body": "currently loading problem returns invalid template error image load gives errors point fix somewhere", "d": "5/2018"}, {"body": "syntax current version vue simply", "d": "5/2018"}, {"body": "hi started toying vuejs ran issue nesting data collections using repeat directives displaying data working fine however element subordinate vms destroyed bound data currently removed well hook afterdestroy listener example try clicking itemsremove n buttons unintended behaviour better approach use", "d": "2/2014"}, {"body": "interesting nt considered type usage maybe remove behavior", "d": "2/2014"}, {"body": "hey evan first think great job vue case pojos composability difference maker also speed ofc question done full time like angular guys eg google sponsored thanks", "d": "2/2014"}, {"body": "dyu thanks project moment started using new projects creative lab potential dedicate substantial part fulltime bandwidth future", "d": "2/2014"}, {"body": "think favour handle related data explicitly necessary thanks looking really enjoy using vue far", "d": "2/2014"}, {"body": "cmenke thanks thinking think suggestion makes sense originally added hook wanted allow users manually destroy repeated instances expressions seen example believe problematic general bad practice example manually destroying repeated vms proper way simply manipulate source data array latest patch reverted behavior", "d": "2/2014"}, {"body": "say words different better angular suited", "d": "2/2014"}, {"body": "charuru reasons use vue angular although might apply everyone vuejs flexible less opinionated solution allows structure app way want instead forced everything angular way interface layer use light feature pages instead full blown spa gives bigger room mix match libraries probably important distinction vuejs much simpler angular general learn almost everything really fast get productive vuejs better performance nt use dirty checking vuejs clearer separation directives components directives meant encapsulate dom manipulations components stand selfcontained unit view data logic angular lot confusion two also note vuejs relatively young project angular battleproven larger community want something large serious production app might want pick angular vuejs supports angular suppots", "d": "2/2014"}, {"body": "post would great wiki faq btw angular still beta att", "d": "2/2014"}, {"body": "hi evan week evaluating frontend framework use arrived angular react found must say really like clear style vuejs understand angular problem gets really slow creates lot watchers example ngrepeat found nice article says conventional wisdom angularjs says keep number databound elements wonder vuejs similar problem scaling databound elements fact vuejs nt use dirty checking winning factor angularjs use dirty checking", "d": "2/2014"}, {"body": "yjeroen angular gets slow lot watchers every time anything scope changes watchers need reevaluated vuejs nt suffer uses event based observing mechanism changes trigger independently unless explicit dependency relationships believe angular uses dirty checking support vuejs able get plain object syntax using features nt support hand dirty checking also benefit original data objects modified anyway vuejs converts object properties gettersetters", "d": "2/2014"}, {"body": "thank elaborate response disadvantage using change listeners changing original object something developer needs aware disadvantage taken care vuejs", "d": "2/2014"}, {"body": "yjeroen minor caveats observed objects see bunch gettersetters first define gettersetters data objects nt much problem data objects expected obtained plain json vuejs provides computed properties vuejs sometimes attach hidden properties data objects order observe developer accidentally overwrite properties would break rare run situations easy avoid nt set anything start data objects apart caveats use vuejs observed objects like normal objects loops work intended time nt even need worry", "d": "2/2014"}, {"body": "trying update array items vue data object tried using vmodel tried specifying handler specific assigning fromto neither one update look debugger method values evaluate would expect still nt seem update vm sure missed point", "d": "2/2014"}, {"body": "adamgd sorry one gotchas interpolate changes happen inside array elements propagate array data fact changed binding notified recommended log stringified data console instead outputting", "d": "2/2014"}, {"body": "adamgd example fiddle", "d": "2/2014"}, {"body": "hi evan wondering anything horizon release robust working example vuecomponent saw roadmap discussion routingpagejs curious anyone sample project incorporating routing page transitions etc using component really like way vue structured much angular trouble figuring structure app", "d": "2/2014"}, {"body": "mikegioia yes definitely part plan first step probably module probably watch keep updated", "d": "2/2014"}, {"body": "brandonpierce thank tested another fiddle dom mirroring data rather interpolation understand quirk interpolation rather something fundamental change watching initially thought response gotcha documented somewhere", "d": "2/2014"}, {"body": "ok thanks", "d": "2/2014"}, {"body": "adamgd documented interpolating objects pretty recent addition might changes later", "d": "2/2014"}, {"body": "question vuejs template initialization tried vuejs svg template sorry minor issue almost worked problem caused strict svg rules instatiation template sorry coffeescript javascript multiline text bothersome occurs error first simple reason svg property must filled instatiation strictly html error template expanded injection works well want ask vuejs inject values template dom svg initialization send defaut value blaced point worst want prepare custom error catcher grasp problem angular vuejs directive dom initialization know set works dirty idea sorry long post", "d": "3/2014"}, {"body": "directive vattr looking", "d": "3/2014"}, {"body": "ohhhh simple solution lost thought difficult anyway thx", "d": "3/2014"}, {"body": "possible use vcomponent stringbased directive interpolated attribute", "d": "3/2014"}, {"body": "ayamflow higher priority interpolation compiled attributes interpolated edit directives start prefix interpolated", "d": "3/2014"}, {"body": "would hard implement new partial behavior able replace element instead innerhtml javascript gt mypartial think syntax could nt much simpler javascript lt mypartial stripped version problem", "d": "3/2014"}, {"body": "marfalkov nt think replace partial syntax solution problem think something allows conditional partial look later week", "d": "3/2014"}, {"body": "conditional partials sounds really good", "d": "3/2014"}, {"body": "marfalkov think solution use subcomponent item hook conditionally modify element manually elegant kinda job", "d": "3/2014"}, {"body": "thank really elegant way haha", "d": "3/2014"}, {"body": "marfalkov side note think dividers data array quite unsemantic maybe consider making dividers css pseudo classes", "d": "3/2014"}, {"body": "example", "d": "3/2014"}, {"body": "based solution", "d": "3/2014"}, {"body": "marfalkov yeah much cleaner", "d": "3/2014"}, {"body": "smartestshortest way implement searchtext filter current vue like currently possible filter right", "d": "3/2014"}, {"body": "remoe using simple filter possible manually trigger filter reevaluate searchtext changes simpler version use method", "d": "3/2014"}, {"body": "remoe version filter", "d": "3/2014"}, {"body": "bpierre cool might consider adding builtin filters working vrepeat", "d": "3/2014"}, {"body": "bpierre hey thanks nt know", "d": "3/2014"}, {"body": "bpierre cool adding onto example sorting simple builtin vrepeat filters", "d": "3/2014"}, {"body": "builtin filters another component component", "d": "3/2014"}, {"body": "misclick", "d": "3/2014"}, {"body": "vrepeat sorting paginated efficient hand data array vue sort place would better simply replace presorted array eg thisitems sorteditems assume latter would cause existing vrepeated vms mirrored array destroyed", "d": "3/2014"}, {"body": "dyu sort place obviously efficient slightly new array set checks see new array contains identical data old array reuses existing vm dom nodes much possible setting sorted array since arrays contain elements computation compare arrays moving existing dom nodes instead destroying rebuilding vms algorithm also makes feasible pipe array filters use computed property array note latter bug fixed dev", "d": "3/2014"}, {"body": "possible fix repetitive use prefixes example separation namespaces like nt work thought components possible use multiple components element widget multiple features like separate one namespace like concerns totally independent way achieve currently", "d": "3/2014"}, {"body": "haggen depending features may want separate concerns component see something similar rather large spa app component system works great also use kind system rather nicely pubsub pattern case loading component data via ajax key thing remember component essentially another instance vue class access niceties", "d": "3/2014"}, {"body": "mentioned following also stick parent vm data object hook vm instantitated please explain later fundamental reason nt assigned earlier general would like stick hook data stores available parent compilation eg like", "d": "3/2014"}, {"body": "pesho bad actually nt make difference viewmodels observed like regular objects note also means get nested data expect ie use bindings general notice vms vue different vms knockout plain objects different data trying bend vue behave like ko simply nt serve well", "d": "3/2014"}, {"body": "better adopt loose coupling pubsub", "d": "3/2014"}, {"body": "say ca nt used bindings fiddle example seems work fine even computed properties crossvm dependencies seem work fine", "d": "3/2014"}, {"body": "pesho expressions computed properties actually evaluated simple bindings performance reasons simple bindings like blank", "d": "3/2014"}, {"body": "brandonpierce attach component element case need bunch loosely coupled features template thought could separate features namespaces using components", "d": "3/2014"}, {"body": "haggen yes actually generally going use lot decoupled components project instantiate single vue instance long add components instantiate main vue instance inherited take fiddle example currently project using requirejs components dependency main application file instantiates main vm hope makes sense", "d": "3/2014"}, {"body": "thing vms handle twoway sync raw data view logic nt belong category construct arbitrary objects manipulate raw data elsewhere example remember vm sync layer put everything app", "d": "3/2014"}, {"body": "brandonpierce wtf use bunch empty attach components proper way like component names speared space comma multiple vcomponent element well thank much test approach right edit oh noes got wrong p anyway think best move away vue since state vars less templating", "d": "3/2014"}, {"body": "haggen vue actually designed state vars gives freedom template want example gave quick dirty would link production code using techniques mentioned unfortunately private repo read docs see call components like html tags well pass replace option true component replace component div placeholder custom content see", "d": "3/2014"}, {"body": "example remember vm sync layer put everything app approach wo nt cause problems timedata included one vm instance valid need structured hierarchical observable data directly bound dom used dombound components vue observables live within viewmodels trying stuff things put trying bend vue behave like ko even fiddle adds timedata viewmodel", "d": "3/2014"}, {"body": "pesho wo nt vue data object observed multiple vms example belong single viewmodel observed see example", "d": "3/2014"}, {"body": "pesho wo nt vue data object observed multiple vms example timedata belong single viewmodel observed nt know cool still understand posts external data consist plain objects arrays primitive values otherwise unexpected things happen goodies vue already provides would useful well like proper encapsulation computed properties methods would great could take advantage", "d": "3/2014"}, {"body": "hi newbie vuejs looking example vuejs folder structure could give modularization reusable blocks code read documentation word word slow use directives component anyone mind show basic example nutshell project group block code individual folder template css js reuse nest easily anywhere project ps look vuecomponentgulp example still puzzle nest component component reuse freely according example thank", "d": "3/2014"}, {"body": "hi seems vuejs handle recursive use components something useful necessary example", "d": "3/2014"}, {"body": "bobyrizov confusing thanks", "d": "3/2014"}, {"body": "bobyrizov completely rewritten latest dev branch tested latest commit fiddle working correctly wait release also dynamically resolve components eg actually necessary use like anymore", "d": "3/2014"}, {"body": "great thanks looking forward", "d": "3/2014"}, {"body": "way get event object pass event object along args need event object stop propagation nt seem work", "d": "3/2014"}, {"body": "dyu event propagation fixed better use default handler use data", "d": "3/2014"}, {"body": "data property set null later object every key used template set undefined newly created object example get following output issue jut test directive function intended behavior", "d": "3/2014"}, {"body": "bpierre intended behavior mainly dealing situations expressions computed properties depend properties nt exist yet example expression null throw error dependency parsing phase best practice relatively stable structure data", "d": "3/2014"}, {"body": "makes sense thanks", "d": "3/2014"}, {"body": "trying understand data access nested components tried access parent attributes line nt work access model nested component vue", "d": "3/2014"}, {"body": "remoe seems rawgithub link broken since nt use inherit data template bound top level vm log bottom level vm undefined", "d": "3/2014"}, {"body": "thanks update know refer dev jsfiddle yes nt use vwith need define vwith x need directive mapping attributes parent also need example component handle set searchtext another use filter", "d": "3/2014"}, {"body": "remoe prototypal inheritance data properties nested vms case defined root vm access using make available bottom level vm sync changes back top level vm", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "use jquery plugin faced problem data syncing example way tell directive update value get dom element maybe contain kind support jquery event model box", "d": "3/2014"}, {"body": "familiar plugin something like work real issue seems update original element changes bound element", "d": "3/2014"}, {"body": "seems change event caught add listeners jquery nt trigger native events think fixed part triggering events jquery listeners breaks native javascript interoperability", "d": "3/2014"}, {"body": "obsoleter yes made way looking something clear", "d": "3/2014"}, {"body": "see works manually dispatch real event within jquery listener", "d": "3/2014"}, {"body": "yes triggers jquery events problem jquery plugins works way solution native event seems little tricky maybe could little friendly jquery would simplify things lot", "d": "3/2014"}, {"body": "agree evan plugin trigger native events", "d": "3/2014"}, {"body": "sure make jquery friendly plugins fire jquery events caught jquery fyi located line triggers change event would make much sense fix", "d": "3/2014"}, {"body": "thelinuxlich unfortunately world perfect plugin one moreover think nearly impossible find jquery plugin triggers native events yes thinking agree nt support jquery events ability somehow tell synchronize data view would helpful could used like var vue el find select width resolve change function vue syncmodel options think", "d": "3/2014"}, {"body": "think manually dispatching real event cleanest way nt see useful scenarios note create event reuse every time need sync", "d": "3/2014"}, {"body": "another rather common scenario form reset case one dispatch native event every form control course done manually storing form initial state", "d": "3/2014"}, {"body": "displaying around records rich tabular format row expandedcollapsed information close properties displayed inside every row editable vuejs ok records started get slower slower angular hopeless simply hung vueom better still nowhere near manual templating course totally wrong compare simple templates wondering somehow get best worlds one simple suggestion showing say fields certainly nt want every one fields data bound data completely static never change time setting emittersobservers fields unnecessarily dragging things think one major reasons data binding frameworks suck handling large data assume everything needs bound possible introduce kind static binding eg stext sattr etc runs nt create emitters observers literal directives nt get data getting data binding make sense feasible", "d": "3/2014"}, {"body": "anyone know way", "d": "3/2014"}, {"body": "obsoleter overlooked added", "d": "3/2014"}, {"body": "rdsubhas sounds like pretty challenging use case wondering could optimization new basically render properties row expanded state starts false part managed wo nt even get compiled state becomes true think would help tremendously static compile thing something considered trying think syntax nt add unnecessary complexity implementation usage maybe directive marks whole block content interpolated static template", "d": "3/2014"}, {"body": "vonce", "d": "3/2014"}, {"body": "thanks suggestion yes challenging use case time nt control end customer wants us means succumbing bloated ui falling back using manual templating would awesome crack solution thanks great work", "d": "3/2014"}, {"body": "trying understand swap section would something like correct code working fine right wanted make sure running new vue cleans old instance trying figure basic patterns building robust apps", "d": "3/2014"}, {"body": "malkomalko instantiate node twice define components use see example current vm instantiate new one", "d": "3/2014"}, {"body": "followed example nothing happens appcurrentview mycomponent understand new vview key points property data string component name swap components template correct see dom ps using", "d": "3/2014"}, {"body": "marfalkov please always make fiddle detailed questions link build files via rawgithub", "d": "3/2014"}, {"body": "actually works problem using vue browserify race condition components ready route getting hit interesting problem think", "d": "3/2014"}, {"body": "malkomalko explicitly components main file initiate routers", "d": "3/2014"}, {"body": "hilarious upgraded moved things around one components file requires components forgot add new components vview pickup idiot", "d": "3/2014"}, {"body": "dynamically add data exported component ca nt figure var foo vuecomponent home foo data undefined", "d": "3/2014"}, {"body": "vuecomponent aaset registration method use vueextend option object create constructor register given id returns vue returns constructor actual instance", "d": "3/2014"}, {"body": "sorry asking many questions another one using new vview syntax awesome trying reason though let say wanted make type async request pull data testcomp component know use created option add stuff data compiling nt seem work async tasks lt created callback testcomp component non async works fine thoughts feel like would pattern want achieve dynamically load component go grab data", "d": "3/2014"}, {"body": "malkomalko give initial state settimeout longer points vm instance fixed", "d": "3/2014"}, {"body": "duh self mistake setting initial state helped thanks ton nt completely obvious guessing binding needs compile property gets updated binding refreshes totally makes sense", "d": "3/2014"}, {"body": "curious plan vue support recursive use components", "d": "3/2014"}, {"body": "jiyinyiyong would useful give example", "d": "3/2014"}, {"body": "common usage treeviews folders nested case project requires recursive rendering components since data want render tree nested elements", "d": "3/2014"}, {"body": "sure think ca nt use components recursively example", "d": "3/2014"}, {"body": "really impressive example love little code necessary implement tree view awesome", "d": "3/2014"}, {"body": "thread getting long nt want people get spammed whenever someone else posts since questions often directly related source code opened new repo general discussion question thread please post general questions", "d": "3/2014"}, {"body": "read composing viewmodels section nt got docs english intuitive code chinese people maybe familiar usage component demo nt work nested", "d": "3/2014"}, {"body": "extend vue class like something test vm giving vm template data behaviour would test something dom clicked proper method vm executed way test vms outside browser", "d": "5/2014"}, {"body": "adrianmiu find answers documentation guide api reference extend vue class like accountview vueextend something yes see guide composition api global methods test vm way test vms outside browser see guide building larger apps unit testing", "d": "5/2014"}, {"body": "use consolelog view debug data", "d": "7/2014"}, {"body": "use method vuedebug plugin remove cluttering vuerelated properties log", "d": "8/2014"}, {"body": "vue data method computed propeties nt namespace data method name refer directives", "d": "9/2014"}, {"body": "data methods name think properties object", "d": "9/2014"}, {"body": "appear vue flat method tree function nested inside json object wo nt accepted expecting nested tree way rivetjs data controller way organize data model amp controller similar structure avoid hassle setting separate component small projects", "d": "9/2014"}, {"body": "main reason flat structure guaranteed called owner vue instance context want nest functions called different contexts", "d": "9/2014"}, {"body": "component looks something like title component title null parent title ends getting displayed instead usually behavior want case component title null want leave blank good way referencing datatitle thanks", "d": "10/2014"}, {"body": "chrisdavies pretty sure wo nt happen still sounds weird define child component title late", "d": "10/2014"}, {"body": "fact child title never defined null json serializer server simply nt put title property json vue displayed component parent title instead anyway got around sanitizing data component create function ctitle undefined amp amp ctitle thanks", "d": "10/2014"}, {"body": "stumbled upon vuejs nt really grasp idea vuejs fits mvvm paradigm first sight little mere viewtoproperties binding engine expect mvvm implementation allow write custom code viewmodel eg combine data multiple form fields data available viewmodel properties update single property say inputs whenever edited like update property model achieved easily", "d": "11/2014"}, {"body": "codepainters", "d": "11/2014"}, {"body": "meant actually way around never mind usefulness silly example eg model view side assume declaring computed properties update single model property setters also perfectly valid scenario thanks", "d": "11/2014"}, {"body": "hello first thx beauty using vue project one little question object want set dynamic key like trigger view update know arrays use set explicitly call setters objects ca nt find anything docs clues thx", "d": "3/2015"}, {"body": "larafale objects", "d": "3/2015"}, {"body": "weird works predefine keys vue data object like go like nothing triggers concerning always return undefined set method without object keys defined datastats used set arrays worked good object problem using", "d": "3/2015"}, {"body": "guide talks little bit basically vue detect new property added unless using nt return anything expected trigger view changes", "d": "3/2015"}, {"body": "yep get function returns undefined set function undefined call get uncaught typeerror undefined function define stats array set undefined need stats object thx evan", "d": "3/2015"}, {"body": "ah sorry bad initial call set like normal properties", "d": "3/2015"}, {"body": "ok evan thanks rock solid much impressed work clean well designed deep frameworks like angular etc years vue masterclass react compete larger scale apps keep", "d": "3/2015"}, {"body": "think understand right updating data run asynchronously instance calling updates vm dataitems things asynchronously calling jquery check element right changing data might return one would expect dom nt updated yet take fiddle example question wait items propagate entirely running jquery realworld case faced loading select options calling call fits width select element prior dataitems loading select box stays really small another damn question see fiddle running jquery wait long enough fiddle nt case app guess app lot processing going dom nt updated tick", "d": "6/2015"}, {"body": "dutgriff see call right changed data dom updated callback", "d": "6/2015"}, {"body": "darn right mentioned previous comment tried nt work must something going app missing fiddle shows nexttick working example hmmm side note thank much dedication vuejs really killing man", "d": "6/2015"}, {"body": "deleted key object used dom reflect change html js vue data snippet data tenants id name john id name joe id name sarah id name mary somewhere code inside vm method delete vmtenants element kept unchanged although object modified", "d": "6/2015"}, {"body": "jbruni need use reason mentioned docs scroll red tip section", "d": "6/2015"}, {"body": "perfect thanks lot including amazing ultrafastspeed support", "d": "6/2015"}, {"body": "accroding also possible expose data prop passed value must object replace component default data raise error", "d": "6/2015"}, {"body": "kikyous believe bug please open separate issue reproduction", "d": "6/2015"}, {"body": "kikyous btw seems trying bind unobserved data prefixed wo nt work", "d": "6/2015"}, {"body": "recommended best practices section al properties model objects defined case huge object string array values set fields using direct assignment ajax success display view get console warnings saying error evaluating expressions code snippet view file line throws warning correct way need iterate response object set properties object one one using set", "d": "6/2015"}, {"body": "abhijitghogre actually safely ignore warning suppress expression evaluation warnings setting initialize data specifically although verbose benefits know shape ajax response looks like", "d": "6/2015"}, {"body": "thanks evan", "d": "6/2015"}, {"body": "evan used set image src change coverimagepath model image nt update workaround", "d": "6/2015"}, {"body": "work show code creates andor passes value sat jun abhijitghogre notifications githubcom wrote evan used set image src change coverimagepath model image nt update workaround reply email directly view github", "d": "6/2015"}, {"body": "coverimagepath get computed automatically college changes right college model changed ajax success declared data javascript data college", "d": "6/2015"}, {"body": "abhijitghogre looks like work open issue vuejsdiscussion make fiddle reproduction please", "d": "6/2015"}, {"body": "fiddle also created issue discussion repo", "d": "6/2015"}, {"body": "new vue attempting render json object returned php using jsonencode function simple way loading data list", "d": "7/2015"}, {"body": "participants closed people nt spam questions think best ask questions like vuejsdiscussion gitter channel repo question vuejsvueresource plugin ajax calls use fetch json server", "d": "7/2015"}, {"body": "thank", "d": "7/2015"}, {"body": "hi evan starters really loving vuejs great job question possible trigger jquerylike events posted question stackoverflow came across thread thought might help others come across situation", "d": "8/2015"}, {"body": "need event method carries useful information target element click coordinates say better create dedication method corresponding signature call method click handler common use case event nt need call method code nt event first place", "d": "8/2015"}, {"body": "hi according discussion jsfiddle work looks like native events nt trigger data sync vue", "d": "8/2015"}, {"body": "slcodenine vmodel listens event default listens lazy mode", "d": "8/2015"}, {"body": "run reason default nonlazy nt also listen", "d": "8/2015"}, {"body": "cool work thanks josephsilber probably getting triggered focus moved inputelement thanks listening see databinding asyoutype somewhat agree could default listen lazy mode makes sense one expect listen event least technical issues related", "d": "8/2015"}, {"body": "way change several variables without rendering intermediate stages makes ui slow times wrong", "d": "8/2015"}, {"body": "thecotne vue default behavior buffers rendering next event loop described never happen running problems create issue reproduction", "d": "8/2015"}, {"body": "never use prop underscore sure would convert hyphencase version could fri aug pm jason daly notifications githubcom wrote trouble understanding computed property observed child via props vs inherit given following parent view parent vue var parent vueextend data return orders tab current computed scopedorders return thistab completed return thisorders future return thisorders components child child following work using inherit child vue var child vueextend template require sometemplatepathmustache inherit true following using props child vue var child vueextend template require ordersindexmustache props scopedorders specifically template like child using props fetch computed scopedorders property get following error typeerror read property length undefined using inherit instead props child view observes changes scopedorders without problem worth mentioning orders parent updated via ajax response set data initially empty error occurs ajax time finish reply email directly view github", "d": "8/2015"}, {"body": "exact difference circumstances use", "d": "8/2015"}, {"body": "voyga see simply gettersetter proxy", "d": "8/2015"}, {"body": "really supported looks like input event nt work browser", "d": "1/2016"}, {"body": "dirty check using html string use vuerouter ca nt change hashurl", "d": "2/2016"}, {"body": "bpierre hi thanks vattr hint works attribute simple idea make work way make work thank", "d": "3/2016"}, {"body": "array data vue instance unix timestamps element looping data trying filter want people able specify range filter plain english trying x send plain english data server php parses sends back json x use json filter array sent method return filtered array view updates seems though possible bc return array part ajax call filtering works however return within request seems though vue stopped paying attention tried playing around bit avail work something instead", "d": "5/2016"}, {"body": "curtisblackwell ask question forums gitter chat longer used", "d": "5/2016"}, {"body": "posva closelock", "d": "5/2016"}, {"body": "locked please ask questions post information forums gitter chat issue longer use", "d": "5/2016"}, {"body": "recommended use inline default using instead set default value viewmodel option data considered source truth purpose reflect current state data", "d": "2/2014"}, {"body": "thanks reporting fixed", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "questions plugin interface usage param according mainjs example correct assume available use plugin choice returning function object containing keep design directives computed properties etc would like allow user configure plugin adding ideas idea configuration function issue solution disables usage shorthand idea add hook js myappjs var myplugin require myplugin would allow returns vueuse mypluginconfig foo bar configuration passed second param vueuse myplugin foo bar course directly called config vueuse myplugin vueuse myplugin global configuration mypluginconfig foo bar vueuse myplugin anothervueuse myplugin see last example still issue solution time called settings defined plugin object persist shared plugin instances solution could wrap magic javascript mypluginjs vueplugin ensures time config called new object created var vue require vue moduleexports vueplugin config function install function another problem could missing eg vue require detection code acceptable plugin interface really like second idea adds plugin concept think less concepts better also maybe missing super elegant solution already exists trying achieve sorry case think", "d": "2/2014"}, {"body": "thanks suggestions pierre original issue bit date require longer passed argument edited works expect exposes internal modules like etc allowing function convenience similar directive computed property apis configuration think need change implementation inside plugins plugins nt need options simply ignore options argument want plugins implemented without require vue easily mock vue test plugin", "d": "2/2014"}, {"body": "thanks answers", "d": "2/2014"}, {"body": "sure setup work example", "d": "2/2014"}, {"body": "figured source problem violates content security policy chrome app using exact error printed console refused evaluate string javascript unsafeeval allowed source script following content security policy directive defaultsrc self chromeextensionresource note scriptsrc explicitly set defaultsrc used fallback invalid expression metadata angularjs added ngcsp directive support apps extensions websites csp enabled believe default thoughts supporting something like", "d": "2/2014"}, {"body": "see think probably implemented optional plugin although sure time time soon could edit title csp specific keep open discussion thanks", "d": "2/2014"}, {"body": "able enable unsafeeval extension via manifestjson nt scriptsrc present defaults original secure settings granted enabling thing recommended get running solution cemented", "d": "2/2014"}, {"body": "chrome apps allowed relax csp google docs chrome extensions let relax default content security policy chrome apps", "d": "2/2014"}, {"body": "feross cripes thought extension good shout", "d": "2/2014"}, {"body": "one option seems avoid using anything simplest expressions parsed seems without use unfortunate", "d": "2/2014"}, {"body": "think csp support take quite time land meanwhile really want use vue chrome app could sandboxed architecture work ie running vue interface front communicate via message passing", "d": "2/2014"}, {"body": "sandbox approach could work keen adding additional complexity ie turning sync function calls property accesses async ones unfortunate chrome apps restrictive nt allow loosening csp meantime going use eventemitter hook events dom manually webtorrent nt think bad though csp support lands take another look using vuejs thanks", "d": "2/2014"}, {"body": "precompiling would another way approach see", "d": "2/2014"}, {"body": "good find feross", "d": "2/2014"}, {"body": "feross unfortunately essential vue current implementation data binding different handlebars uses also vue nt return static rendered string maintains live dom node really way precompile vue templates", "d": "2/2014"}, {"body": "closing implementing cspcompliant expression parser would significantly bloat code base marginal use case hindsight possible avoid using expressions together using computed properties", "d": "3/2014"}, {"body": "significant blocker us using vuejs privileged environment firefoxos apps sandbox workaround still really sucks personally love see cspcompliance implemented guessing blocker projects", "d": "9/2014"}, {"body": "usecase package vue manually javascript parser needed modifying couple places vue uses stringtofunction conversion prettiest implementation check", "d": "9/2014"}, {"body": "cecchi thanks awesome chance consider merging implementation using", "d": "9/2014"}, {"body": "likely separate build since csp compliant interpreter add bulky code needed situations yeah definitely roadmap waiting finish refactor first", "d": "10/2014"}, {"body": "", "d": "10/2014"}, {"body": "meet problem vue solved add page option manifestjson", "d": "9/2017"}, {"body": "thanks luxp way work popuphtml way dit work saving time thanks lot part manifestjson", "d": "10/2018"}, {"body": "fixed implementation really flexible enough leave userland", "d": "2/2014"}, {"body": "closing", "d": "2/2014"}, {"body": "change template component created default template recompiling", "d": "8/2015"}, {"body": "", "d": "2/2014"}, {"body": "resolved", "d": "2/2014"}, {"body": "yes thanks reporting caused build plugin fixed dev branch", "d": "2/2014"}, {"body": "seems fixed since", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "ah seems ie ignoring invalid inline css parsing html", "d": "2/2014"}, {"body": "ok see made tests looks like vstyle attribute tests results", "d": "2/2014"}, {"body": "exactly alas even still causing headache", "d": "2/2014"}, {"body": "reintroduced", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "awesome another vuerouter option tildeiorouterjs looks nice build things top", "d": "2/2014"}, {"body": "thanks suggestion feel tildeio implementation heavy size vue nt want enforce promises users", "d": "2/2014"}, {"body": "indeed sake completeness routerjs based lightweight", "d": "2/2014"}, {"body": "ah nice looks like valid choice", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "completely random would beneficial serverside compiler render relative vuejs view initial load first time speed seo etc sceanario vuejs would able read rendered markup establish state etc accompanied object rendered bootstrap something always wanted angular establish fully possible likes backbonehandlebars", "d": "2/2014"}, {"body": "something thinking currently react virtual dom probably mess jsdom see big effort would low priority unless someone wants work", "d": "2/2014"}, {"body": "would mind look future something like working degree would awesome", "d": "2/2014"}, {"body": "currently componentsdirectivesfilters registered global context accessible anyone local context accessible within scope current vue instance question bring expose reusable assets without cluttering global namespace example illustrate point fyi started reading vue mins ago shows great potential already possible happened miss done please disregard post thanks great work", "d": "2/2014"}, {"body": "bjornlll using vue module system eg component browserify assets simply module required needed general vue tries avoid imposing rules user organize hisher code somehow feel asset import functionality beyond scope vue", "d": "2/2014"}, {"body": "thanks replying good point much importing namespacing access particular component context would using vue together requirejs seen vue integrates commonjsamd loaders source assets require call points nt see avoid vue registering globally accessible context point import call would scope accessibility imported component within template scope said import call might solution example highlight point still wondering scope access registered component accessible within templates choosing read docs source", "d": "2/2014"}, {"body": "bjornlll", "d": "2/2014"}, {"body": "thanks could accomplish using function include privatedirectives requires patches modules privatedirectives var mycomponent vueextend directives include uivizgraph uilistablegrid filters components transitions partials", "d": "2/2014"}, {"body": "edited goals include preparations adopting future specs", "d": "2/2014"}, {"body": "typo please discuss plugin specific topics plguin repo address vue community", "d": "2/2014"}, {"body": "jiyinyiyong thanks fixed currently github community essentially also irc channel freenode vuejs although always active", "d": "2/2014"}, {"body": "another lightweight routing lib", "d": "2/2014"}, {"body": "using one vue", "d": "2/2014"}, {"body": "awesome work vuejs best intuitive compact nojquery perf consideration good mobile talking vuevalidate think validation rules better written model feel something strange write specific view idea syntax providing vuescope like", "d": "3/2014"}, {"body": "kaiinui cool like validation idea syntax intuitive validation still open suggestions looks like good option sure example though", "d": "3/2014"}, {"body": "currently want filter data code like defining methods hook somewhere intuitive way filter data normalized think vue provide normalized way filtering data enough basic great like scopes written somewhere syntax idea duality", "d": "3/2014"}, {"body": "kaiinui fact pipe repeated array filter want example js function foofilter thing function barfilter thing var currentfilter foofilter vm options filters thingfilter function things return thingsfilter currentfilter thing note change need force update new filter external filter tracked vue", "d": "3/2014"}, {"body": "continuing duckbox path statusplans isomorphic ie support rendering client server nodejs ractive example listed expressjs alternative template engine context progressive enhancement pjax seo friendlinessease twitter remake content first dust linkedin etc", "d": "3/2014"}, {"body": "erikandreas see nt think option moment fact vuejs uses dombased templating makes dom dependent similar angular knockout ractive react implementation simulated dom isomorphic heavier", "d": "3/2014"}, {"body": "hi plans support variable naming repeating eg itemdiscount shopping cart items cart individual items may might unfortunately silently falls back parent shows wrong discounts say inside repeat want absolutely sure nt fall back parent would nice intentionally avoid parent fallback also sometimes looks good repeaters namespace gets polluted quite lot use starting point contribute back vue syntax sounds fine", "d": "3/2014"}, {"body": "fiddle illustrating rdsubhas problem quick solution explicitly define discount list items", "d": "3/2014"}, {"body": "rdsubhas thanks suggestion like keep syntax directives consistent added html itemdiscount note basically wraps repeated data working repeated child vm need access bound data instead", "d": "3/2014"}, {"body": "looks perfect yes inside repeated child vm well accessing solves namespacing issues view amp model", "d": "3/2014"}, {"body": "great work really loving framework seeing kaiinui proposal validation rules wondering wheter clearer separation model data example feel like separate real model wrong approach maybe related vueresource", "d": "3/2014"}, {"body": "paglias option holds entire viewmodel state something similar angular something strictly model best nest", "d": "3/2014"}, {"body": "yeah find nesting model effective separate state helpers easier reading working templates also easier shipping model api endpoint reference dataperson instead data culling non model entities", "d": "3/2014"}, {"body": "speaking nesting vm methods would also benefit nestingnamespacing eg instead flat list methods like could currently field accepts flat list mix nested structure model", "d": "3/2014"}, {"body": "pesho nest methods sign might putting much responsibilty single viewmodel split logic smaller components appropriate", "d": "3/2014"}, {"body": "would different aspect already nested allows different kinds entities represented naturally saying one vm keep data single kind entity split everything else separate model yes sounds restrictive namespaced methods would surely useful case viewmodel know interconnected could split child viewmodels would complicate things significantly without benefit", "d": "3/2014"}, {"body": "pesho point method needs invoked context invoked using context clear context context would contradict javascript intuition context child vm data object something else much simpler conceptually anything invoke method always vm fact argue splitting app small components simplifies logic instead complicates good architecture comprised selfcontained easy understand modules discrete responsibilities", "d": "3/2014"}, {"body": "expect top level methods fwiw works correctly currently specify method inside instead course pretty see point may look javascript intuition really common practice overload special meaning many existing libraries say use child componentsviewmodels cases parent vm expected keep track children directive applicable create children dynamically js code instead markup stick references children vms parent vm data", "d": "3/2014"}, {"body": "pesho add options also stick parent vm data object hook vm instantitated", "d": "3/2014"}, {"body": "still one issue viewmodel instance designed bound dom element case need child vms store data use eg parent vm take advantage goodies vue provides like observables computed properties methods even nt bind detached dom node still created guess could live causes harm wasting memory", "d": "3/2014"}, {"body": "pesho want abstract object model happens methods think ok put functions simply skipped observing however methods invoked data object context vm methods manipulate state without aware vm", "d": "3/2014"}, {"body": "yup methods one thing also computed properties want children autocompute data currently means objects store must viewmodels vue allow nested computed properties adding computed properties dynamically existing viewmodel fwiw coming knockout far less opinionated viewmodel must structured could add anything vm dynamically plain data observables computed observables functions arbitrary nesting allowed quite complex logic implemented although admit could get messy trying fit complex logic vue model opinionated thus restrictive challenging", "d": "3/2014"}, {"body": "yes vue differs knockout encourages take topdown declarative design strategy instead imperatively build viewmodels ideal situation describe relationship data view beforehand render vue source data plain logicless objects ones directly throw post request viewmodel simply proxies access data vue vm instance always connects raw data corresponding dom element ko viewmodel essentially data line model viewmodel pretty blurry serialize copy vm need raw data", "d": "3/2014"}, {"body": "jbadeau sure mean combining imperative declarative constructor imperative usage allow users register constructor id choice declarative usage second suggestion prefer avoid mixing template syntax javascript code", "d": "3/2014"}, {"body": "another lightweight routing lib via", "d": "5/2014"}, {"body": "consider add support browsers ie possible adding plugin extension know sounds bad idea specific countries lot people still using ie avalon framework made chinese developer seems perfect support major browsers hesitated say including legacy ones seems use tricks vbscript polyfill specific features like ability use custom object getterssetters avalon framework well regarded china javascript developer community would prefer vuejs avalon term size filesize cleaness api global community support probably use intensively future projects however still big concern browser support could also add support legacy browsers definitely sure people using china much possibility implement legacy ie compatibility plugin", "d": "5/2014"}, {"body": "andyhu issue none projects need support legacy browsers working legacy browser support nontrivial task essentially gives zero benefits daytoday work given limited time invest vuejs development rather focus featuresfixes benefit existing projects happy accept prs anyone would like contribute plugin legacy browsers although probably easy job", "d": "5/2014"}, {"body": "thanks quick reply time look code see actually possible worthy", "d": "5/2014"}, {"body": "way please shed light part code need fixed order make fully functional older ie thing mind currently support objectdefineproperty would like know specific grammar used parts framework thanks", "d": "5/2014"}, {"body": "vueresource idea would nt better lower level vuehttp first already exist missing", "d": "5/2014"}, {"body": "framework angular really impresses nowadays easilydecoupled architechtural fast apps really easy vuejs would good create default app bootstrap folder structure thanks", "d": "5/2014"}, {"body": "andyhu features shimmed exception simulating vbscript way based know works quite differently seems everything must defined object created", "d": "5/2014"}, {"body": "jtremback already well written http modules used intention reinvent every wheel", "d": "5/2014"}, {"body": "hwclass really basic example although bit outdated reference rather boilerplate", "d": "5/2014"}, {"body": "actually selecting one right maybe sticking basic browser requests guess seems possible vueresource module would include something could called vue make module", "d": "5/2014"}, {"body": "customized current vuejs component example using bootstrap starter template", "d": "5/2014"}, {"body": "ideas implementing complex router like something would able support subviewsstates kind like angulars ui router following", "d": "5/2014"}, {"body": "mattaitchison aggree tried create vue objects component indexjs files fails example idea easily lacked knowledge componentjs stuck", "d": "5/2014"}, {"body": "preference external plugins structured released specific directive thinking open sourcing directive currently packaged larger app built browserify uses module format recommended docs toss project folder add release asis let people include vue project manually via bit file included project used via attribute", "d": "6/2014"}, {"body": "holic doc regarding convention plugins", "d": "6/2014"}, {"body": "ah fantastic sorry missed page", "d": "6/2014"}, {"body": "jtremback working vueresource", "d": "9/2014"}, {"body": "coming really love see officially comes updated website good stuff", "d": "10/2014"}, {"body": "triplekdev hopefully week working documentation", "d": "10/2014"}, {"body": "thanks updating site", "d": "11/2014"}, {"body": "something really liked polymer api name getterssetters filters might less pretty certainly explicit meaning always depends point view look dom model reason intuitively interpret point view dom remember meant way around point view model even getting used still causes doubt makes think doubts nt know still making changes api would great see adopted improved readability", "d": "11/2014"}, {"body": "tested several routers route bootstrap tabs change pathjs nt work director works fine course big minified without server code dispatch works fine bytes minified dispatchjs wins tested crossroadsjs bigger scaleapp seems good complete framework size director anyway", "d": "1/2015"}, {"body": "boussou great success one", "d": "1/2015"}, {"body": "looks good name router director", "d": "1/2015"}, {"body": "recently held vuejs meeup events japan want know future vuejs loadmap sorry poor english", "d": "1/2015"}, {"body": "heard emberjs building htmlbars started simpledom think jsdom pretty heavy weight slow ssr features necessary", "d": "2/2015"}, {"body": "kazupon thanks holding events glad see community growing japan moment plan adding major new features feel api feature set reached good state focus stabilizing mostly fixing bugs issue growth rate slows probably ca nt guarantee date though", "d": "2/2015"}, {"body": "thank comment busy time got", "d": "2/2015"}, {"body": "vue great really process replacing jquery buggy bulky things vue easy learn understand implement gets done one thing could really improve single place discuss learn ask vuejs questions place could pointed official website laravel laravelio foruns laracasts currently series vue thats place go want clarify something laravel specially laracasts forum vuejs could really use something like currently learning together guys vueslackslackcom documentation really good sometimes things dont click right away specially coming jquery implementations need place ask answer stupid questions really stupid edit read irc channel good bad irc easily searchable many times searched something ended old discussion forums ended solving issue old stackoverflow question best regards", "d": "5/2015"}, {"body": "dominiquedutra repo need invited slack group", "d": "5/2015"}, {"body": "dominiquedutra official gitter channel prefer slack gitter better code formatting support use github account", "d": "5/2015"}, {"body": "aristidesfl thanks repo thats first guess works fine forum slack group dunno filled info chatting minutes later evan didnt know gitter guess tell guys vueslack think dont know either since vue getting visibility laracasts think people kinda lost comunity think point gitter chat repodiscussion vuejs website session called comunity something thats always look thanks best regards", "d": "6/2015"}, {"body": "dominiquedutra actually guy created slack channel called users gitter channel gitter knows think knew making slack channel sure nt like gitter much users growing everyday gitter meant open source project hosted github even activity sidebar shows activity repo real time also look readme main repo see questions section telling use gitter month already laracasts maybe comment vuejs videos gitter channel already first lesson even vuejs videos", "d": "6/2015"}, {"body": "azamatsharapov thanks glad know place chat must admit really didnt even glance readme used cdn vuejs started coding still going trough docs", "d": "6/2015"}, {"body": "great looking project would consider ready production planning using large application framework evolve time need always maintain backward compatibility would consider api final release new versions would maintain backward compatibility deprecated features remove completely", "d": "6/2015"}, {"body": "fergaldoyle intended last point release yes think suitable production", "d": "6/2015"}, {"body": "saw angular docs thinks implementation model methods property interpolation quite pleasing laughed seeing angular dumping gibberishes become something simillar vue thoughts implementing syntax", "d": "7/2015"}, {"body": "pandahisham personally nt really like angular binding syntax nt struck intuitive sure provide meaningful advantage traditional directive syntax least enough warrant breaking change vue", "d": "7/2015"}, {"body": "thanks happy current syntax", "d": "7/2015"}, {"body": "vue merged vuejs organization hits little confusing", "d": "7/2015"}, {"body": "fweinb thinking bunch logistics sorted moving sounds like good plan", "d": "7/2015"}, {"body": "look forward serverside rendering", "d": "8/2015"}, {"body": "love serverside rendering", "d": "8/2015"}, {"body": "thumbs serverside rendering", "d": "8/2015"}, {"body": "moving wiki", "d": "8/2015"}, {"body": "", "d": "2/2014"}, {"body": "ohhh thanks good catch", "d": "2/2014"}, {"body": "fixed", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "hmm currently builtin way nt consider common use case also changing interpolation tags cause reusability issues components want use custom setup actually matter changing two regexps feel free fork adapt needs", "d": "2/2014"}, {"body": "sounds like good idea registered vuejs", "d": "2/2014"}, {"body": "active irc closing feel free nudge want moderate channel", "d": "2/2014"}, {"body": "thanks question overlook design update work returns list viewmodels associated array eg html", "d": "2/2014"}, {"body": "landed casper test coverage since nt checkin built files dev branches want try clone repo build otherwise probably merged master days", "d": "2/2014"}, {"body": "", "d": "2/2014"}, {"body": "nt really understand trying achieve could please provide full example format code markdown put jsfiddle data objects must jsonstringifyable functions ignored", "d": "2/2014"}, {"body": "fiddle", "d": "2/2014"}, {"body": "hi dan use computed properties repeated items need give viewmodel constructors using details see guide another tricky thing fiddle attribute use mustache binding always get string value long property present button disabled even value empty string proper way deal write simple directive sets element property fixed example found", "d": "2/2014"}, {"body": "thanks updated fiddle docs great overall nt think would tried vue without nt really understand component part example useful", "d": "2/2014"}, {"body": "glad helps", "d": "2/2014"}, {"body": "want select component used listitem considering one properties type stringproperty component name registered seems work possible types list would would ok think types like changed therfore translatedmapped computed valid componentnames", "d": "9/2014"}, {"body": "indus use filter eg however might work", "d": "9/2014"}, {"body": "hi newbiequestion related trying something similar troubles vcomponent element repeat like put registred subcomponent computed property sorry coffescript get error directive component nt resolve compiledirectives turns undefined vcomponent dirdef resolveasset options directives dirname vtext stuff inside works fine component optionsdirectives passed built stuff like text without underscore wrong thanks viktor", "d": "6/2015"}, {"body": "hi fiddle pointing quite old version vue vuejs version want using", "d": "6/2015"}, {"body": "nah code seems legit still", "d": "6/2015"}, {"body": "could come around current issue simply using filter compute property simple data object iterated think still need computed properties involved things future", "d": "6/2015"}, {"body": "hedefalk fiddle nt loading vue correctly also note using component treats content inside external content redistributed template need give component template options use attribute working", "d": "6/2015"}, {"body": "yes reworked using coffeescript", "d": "6/2015"}, {"body": "thanks guys exactly would wanted using inlinetemplate however real app still get vue warn failed resolve directive component trying put vcomponent element vrepeat guess something different nt understand guess need try isolate issue production code back", "d": "6/2015"}, {"body": "hedefalk using real app deprecated use custom element components", "d": "6/2015"}, {"body": "oh guess dependencies vue next", "d": "6/2015"}, {"body": "oh definitely sooo really nt want stay behind would achieve something like nt want break template mean use case simply iteration lot elements retrieved json backend use vrepeat everything fine done realize need one thing inner thing needs computed json data nt yet nt want rearrange templates would like able add computed attribute elements use inside vrepeat makes sense vcomponent removed need stuff around template vrepeated computed property needs actual element vrepeat case styleclass thanks patience", "d": "6/2015"}, {"body": "nt think understand problem fiddle using custom element component notice option component", "d": "6/2015"}, {"body": "thanks lot trying use approach production code nt seem work tried boil particular problem wild guess would something related use table custom elements nt know figured might jsfiddle first moved repeat table element giving template js problem remains even though used scripttag template custom element seems moved table thanks patience guess real wtf", "d": "6/2015"}, {"body": "hmm okay indeed due browsers allowing nontable elements inside tables use table elements something overlooked deprecating official release make still usable table elements", "d": "6/2015"}, {"body": "ah ok thanks investigating guess moving template script nt help since shadow dom thing going transformations applied template put dom browser already fixed template starting vuejs nt want get stuck old version rather follow development bleeding edge couple followups strongest reason choosing vuejs instance mithriljs react ones looked dumping angular fan kind templating coming background used liftscala done server side rendering using functional transforms pure correct documents mock data adding data attributes know times changing frontend people need js really liked way able work design person htmlcss git repo adding unobtrusive data attributes binding data guess bit interested rationale deprecating vcomponent expect future attributes attributes correct instance using vtext mustache bindings guess esthetic preference due background possible kind want sometimes large correct document mock data bind shit js without external templates thanks help", "d": "6/2015"}, {"body": "sorry bug much one last question need styleclass tr depends data repeated ca nt seem find way use vrepeat vcomponent vclass tr seems vclass evaluated outside vrepeatvcomponent scope", "d": "6/2015"}, {"body": "hedefalk", "d": "6/2015"}, {"body": "azamatsharapov sorry nt help looking way use element iterated set style class simply added text evaluating static value true thanks viktor", "d": "6/2015"}, {"body": "hedefalk quite forgiving terms custom tags attributes nt substantial downside using hand custom elements actually worked official spec going common future component props firstclass concept vue get dedicated syntax directives remain prefixed attributes scoping question see blog post", "d": "6/2015"}, {"body": "thanks read blog post ca nt seem understand use get want current example since inlinetemplate gives inner template subcomponent seems ca nt fix thing without resorting external templates correct thanks viktor", "d": "6/2015"}, {"body": "two options use component include root node component template recommended use block repeat", "d": "6/2015"}, {"body": "sorry thick brick makes original element replaced case adding loose altogether", "d": "6/2015"}, {"body": "avoid inline template case", "d": "6/2015"}, {"body": "yeah afraid actually trying really hard avoid find little better would rather able one template transform explained come idea superhappy thanks viktor", "d": "6/2015"}, {"body": "suppose calculate average link", "d": "2/2016"}, {"body": "hi use code", "d": "10/2016"}, {"body": "could take look", "d": "10/2016"}, {"body": "thanks reporting fixed see commit message detailed explanation casper test case passes changed three fields event loop view updated next tick using latest values change field alone test fail modified test case account included commit", "d": "2/2014"}, {"body": "browsers already work since shims anything clone repo include shim see unit tests pass unfortunately work way shim objectdefineproperty plain javascript objects", "d": "2/2014"}, {"body": "thanks quick response project thinking using needs support ie sadly", "d": "2/2014"}, {"body": "", "d": "11/2015"}, {"body": "objectdefineproperty shimmed", "d": "11/2015"}, {"body": "fixed thanks", "d": "2/2014"}, {"body": "also fyi website repo would preferred open website related issueprs", "d": "2/2014"}, {"body": "landed", "d": "2/2014"}, {"body": "hold wait nightwatchjs release saucelab friendly version", "d": "2/2014"}, {"body": "looks like decent option works sauce labs cleaner syntax wd", "d": "2/2014"}, {"body": "wondering went nightwatchjs tests currently looking alternatives main motivation around developmentspeed ca nt seem get anything done reasonable amount time things like repl missing hacks using development worth sharing", "d": "6/2017"}, {"body": "", "d": "1/2014"}, {"body": "use data attributes access", "d": "1/2014"}, {"body": "original", "d": "2/2014"}, {"body": "duckbox think actual app", "d": "2/2014"}, {"body": "take wait till breaking changes", "d": "3/2014"}, {"body": "kristoferjoseph yes please pretty big changes much appreciated", "d": "3/2014"}, {"body": "cool need help", "d": "3/2014"}, {"body": "kristoferjoseph thanks offering help closing almost ready feel free contribute future issues release", "d": "3/2014"}, {"body": "beers", "d": "3/2014"}, {"body": "", "d": "1/2014"}, {"body": "moved", "d": "2/2014"}, {"body": "", "d": "1/2014"}, {"body": "already haha", "d": "1/2014"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "hey followup pr element directive nt work well filters js fiddle work made directive applies attribute stuff modeled happy roll code base fix work filters worth solution largely incorporating solution presented stack overflow post", "d": "8/2014"}, {"body": "thanks yjkogan get directives part one directives need major refactoring would love take look directive incorporate fix", "d": "8/2014"}, {"body": "sounds good best way get send three relevant files directive helper utility tests utility whenever open pr need set aside part work day next week happy though", "d": "8/2014"}, {"body": "put gist pressure pr nt time", "d": "8/2014"}, {"body": "hard time making sure gist right amount context probably put time make pr early next week", "d": "8/2014"}, {"body": "hey opened halfbaked pr fork see mention trouble unit tests nt time yet dig figure going wrong also like add tests write casperjs integration tests use casper well write internally port", "d": "8/2014"}, {"body": "curious filters guys using contenteditables mostly input validation nt need modify contents use writeonly filters available feel nt put amount extra code vue core specific usecase contenteditable filters maybe separate plugin thanks working pr though", "d": "8/2014"}, {"body": "using filters moment wanted implementation correct felt weird directive close could nt use filter accept contenteditable wont work filters pretty much vmodel couple ux changes escape reset value enter definitely makes sense add much code something specific makes wish getting cursor easier contenteditable elements haha time look making plugin hope helpful", "d": "8/2014"}, {"body": "thought chime would easy fact working project right knockout uses mediumjs thoughts", "d": "8/2014"}, {"body": "robertleeplummerjr definitely want full control contenteditable simple wrap mediumjs custom directive", "d": "8/2014"}, {"body": "anyone working gist custom directive wrapping mediumjs please spent hours trying make work luck", "d": "12/2015"}, {"body": "request news", "d": "2/2016"}, {"body": "one let get source", "d": "2/2016"}, {"body": "", "d": "2/2016"}, {"body": "realized source editor uses codemirror let see put sample together", "d": "2/2016"}, {"body": "done", "d": "2/2016"}, {"body": "great thanks robertleeplummerjr", "d": "2/2016"}, {"body": "robertleeplummerjr built complete version need fixed mediumjs version available repository enable modes inline", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "franzskuffka mind adding ghpages branch us fall love", "d": "6/2016"}, {"body": "oh dumb use ghpages comprehensive guide", "d": "6/2016"}, {"body": "nice", "d": "6/2016"}, {"body": "done", "d": "6/2016"}, {"body": "tears beauty", "d": "6/2016"}, {"body": "hello still new vuejs method nt work vue", "d": "12/2016"}, {"body": "available mediumeditor compatible greenapple need plugin", "d": "12/2016"}, {"body": "nt seem necessary using transition functions gives control", "d": "12/2013"}, {"body": "becomes trivial", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "still need tests", "d": "12/2013"}, {"body": "tests", "d": "12/2013"}, {"body": "first pass todomvc benchmark improvement almost need rewrite tests accommodate async updates", "d": "12/2013"}, {"body": "landed", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "resolved", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "thinking users simply namespace stuff eg", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "migrated website repo", "d": "1/2014"}, {"body": "", "d": "11/2013"}, {"body": "", "d": "10/2013"}, {"body": "", "d": "9/2013"}, {"body": "see", "d": "10/2013"}]