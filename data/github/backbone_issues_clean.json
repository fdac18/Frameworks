[
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4203",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4203/comments",
    "title": "Error: \"Cannot read property 'idAttribute' of undefined\" in collection",
    "created_at": "2018-08-21T08:38:36Z",
    "updated_at": "2018-09-21T18:12:08Z",
    "body": "### Description\r\n\r\nIf I create new collection class, that extends Backbone.Collection, and define it's \"model\" property as a function which returns instantiated model - then on collection constructed error \"Cannot read property 'idAttribute' of undefined\" is thrown. That's because class methods has no property \"prototype\", which is used in Backbone.Collection.prototype.modelId method.\r\n\r\n### Expected behavior\r\n\r\nNo error thrown if collection has property \"model\" defined as class method.\r\n\r\n### Actual behavior\r\n\r\nError \"Cannot read property 'idAttribute' of undefined\" thrown.\r\nHere is an example: https://jsfiddle.net/e1ybjmw3/\r\n\r\n### Environment\r\n\r\n1. Backbone version: 1.3.3\r\n2. Additional build tools, etc: no build tools (that's important, because if babel used all works fine)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4201",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4201/comments",
    "title": "Use HTTPS for the website",
    "created_at": "2018-06-29T20:29:03Z",
    "updated_at": "2018-06-29T20:29:03Z",
    "body": "GitHub pages support HTTPS now!\r\nhttps://blog.github.com/2018-05-01-github-pages-custom-domains-https\r\n\r\n(text taken from here: https://github.com/jashkenas/coffeescript/issues/5051)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4200",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4200/comments",
    "title": "[Feature Request] Using non-delegatable events in the events hash",
    "created_at": "2018-06-29T07:04:23Z",
    "updated_at": "2018-06-29T07:04:23Z",
    "body": "It would be nice if we could specify bindings for non-delegatable events like `scroll` in the `events` hash. That way it would remove the burden from the developer to bind and unbind such events manually. To differentiate such events from delegated ones, we could prefix the event name with some character like `*`: \r\nExample: \r\n```\r\nevents: {\r\n        \"*scroll .my-list\": \"listScrolled\"\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4198",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4198/comments",
    "title": "Trailing Fragment Space(s)",
    "created_at": "2018-06-15T20:37:19Z",
    "updated_at": "2018-06-15T20:37:19Z",
    "body": "We have fragments that have a space at the end (outbound/22130600/po/powithspacetest%20).  When trying to navigate to this fragment Backbone is stripping the trailing space in getFragment().  \r\n\r\n```\r\n        var M = /^[#\\/]|\\s+$/g;\r\n\r\n        getFragment: function(t) {\r\n            if (t == null) {\r\n                if (this._usePushState || !this._wantsHashChange) {\r\n                    t = this.getPath()\r\n                } else {\r\n                    t = this.getHash()\r\n                }\r\n            }\r\n            return t.replace(M, \"\")\r\n        },\r\n```\r\n\r\nI can understand removing the bits at the start of the fragment, but can someone explain the motivation for removing the space(s) at the end?  This causes our app to fail to lookup the requested data because the part with the space is a param in the router.\r\n\r\n```\r\nroutes: {\r\n                \"\": \"home\",\r\n                \"outbound/:tieBack/po/:poNbr\": \"outboundDetail\"\r\n            },\r\n```\r\n\r\nAnd\r\n\r\n```\r\n            outboundDetail: function(tieBack, poNbr) {\r\n                app.switchOutboundDetail(tieBack, poNbr);\r\n            },\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4197",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4197/comments",
    "title": "on model set two change events are triggered one 'change:attributename' and the other 'change'",
    "created_at": "2018-06-01T05:42:24Z",
    "updated_at": "2018-06-01T06:58:51Z",
    "body": "I am trying to write unit test cases and i was spying on trigger method of a model with sinon.stub. \r\nWhen i checked the triggerspy called numbers it showed me 2 and the call args were 'change:percentComplete' and 'change' events. I am using backbonejs with coffeescript.\r\n\r\n```\r\nunit test case \r\n\t\tit 'should set percentComplete attribute to 100', ->\r\n\t\t\tVideoComponentMixin.model.set('isLocked',true)\r\n\t\t\t@setSpy = sinon.spy(VideoComponentMixin.model,\"set\")\r\n\t\t\t@triggerStub = sinon.stub(VideoComponentMixin.model,'trigger')\r\n\t\t\t@shouldMakeProgressCallStub = sinon.stub(VideoComponentMixin, 'shouldMakeProgressCall').returns(true)\r\n\t\t\tVideoComponentMixin.updateVideoComponentProgress()\r\n\t\t\texpect(VideoComponentMixin.model.get('percentComplete')).to.equal(100)\r\n\t\t\tsinon.assert.calledOnce(@triggerStub)\r\n\r\nupdateVideoComponentProgress the function i am testing\r\n\tupdateVideoComponentProgress: (quiz)->\r\n\t\tif @model.get('isLocked')\r\n\t\t\tif @shouldMakeProgressCall(quiz)\r\n\t\t\t\tif @model.get('percentComplete') isnt 100\r\n\t\t\t\t\t@model.set 'percentComplete', 100\r\n\t\t\t\telse\r\n\t\t\t\t\t@model.trigger 'change:percentComplete'\r\n\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4195",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4195/comments",
    "title": ".history document.referer",
    "created_at": "2018-05-10T08:31:25Z",
    "updated_at": "2018-05-10T12:25:39Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4194",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4194/comments",
    "title": "Backbone Model attributes type",
    "created_at": "2018-05-09T10:50:20Z",
    "updated_at": "2018-05-09T14:28:10Z",
    "body": "Hi All,\r\n \r\nBackbone model attributes can be string, objects, backbone collection etc. But is it possible that an attribute is an array of backbone model?\r\n\r\nEx: var Model - Backbone model Model.get('charts') - Simple array [chart], here chart is the backbone model\r\n\r\nHere my question is that ideally Backbone model attribute is if having array then it should be backbone collection or can be simple array of backbone Model?\r\n\r\nThanks \r\nMahaveer"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4192",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4192/comments",
    "title": "Passive or non-passive event listeners",
    "created_at": "2018-05-01T07:41:18Z",
    "updated_at": "2018-05-01T07:41:18Z",
    "body": "It would be nice if we could set the event handlers created to be passive or non-passive. That way we can also get rid of a warning in Chrome when working with events."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4191",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4191/comments",
    "title": "fetch should not execute if id is not set; otherwise it gets the whole collection",
    "created_at": "2018-04-12T15:31:21Z",
    "updated_at": "2018-04-12T17:19:41Z",
    "body": "Consider this case\r\n\r\nvar app.my_book = new Backbone.Model({ url_root: 'https://myserver/v1/books');\r\napp.my_book.fetch();  // I forgot to set the book's id before fetching\r\n\r\nNow app.my_book contains the list of all the books from REST server. This is because fetch was called without an id.\r\n\r\nSuggest: if id is not set, fetch should return null and does nothing.\r\n\r\nThanks."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4189",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4189/comments",
    "title": "Documentation of Collection#add/create missing to mention options passed down during Model creation",
    "created_at": "2018-04-07T09:09:11Z",
    "updated_at": "2018-04-09T18:26:29Z",
    "body": "In the Backbone 1.3.3 docs it is only mentioned in the section for the property [Collection#model](https://github.com/jashkenas/backbone/blob/master/index.html#L1807:L1810) that:\r\n\r\n> If defined, you can pass raw attributes objects (and arrays) to add, create, and reset, and the attributes will be converted into a model of the proper type. \r\n\r\nLeaving undocumented the fact that `options` can also be provided to be passed along to the creation of the model. As it's visible in:\r\n\r\n- https://github.com/jashkenas/backbone/blob/master/backbone.js#L889\r\n- https://github.com/jashkenas/backbone/blob/master/backbone.js#L1137 \r\n\r\nThe lack of this small comment makes it appear in first instance like a limiting factor when handling creation of models directly through collections."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4188",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4188/comments",
    "title": "Bug: Backbone anything that has URI encoded characters (spaces and quotation marks) in the fragment triggers loadUrl twice in the navigate function",
    "created_at": "2018-03-21T17:25:59Z",
    "updated_at": "2018-04-19T20:19:15Z",
    "body": "When I pass URI encoded characters such as spaces and quotation marks into the fragment navigate will decode the fragment and store that in this.fragment. When checkUrl is later on triggered it will detect that the fragment has changed even though it hasn't the encoded and decoded version of the fragment is compared and makes them not equal. This causes loadUrl to be triggered and load the encoded version of the fragment."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4187",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4187/comments",
    "title": "Should `stopListening` call `off` aswell?",
    "created_at": "2018-02-26T10:17:10Z",
    "updated_at": "2018-02-27T14:04:43Z",
    "body": "Just discovers, that `stopListening` actually clears only _child_ listeners.\r\n\r\nIf view listens some other objects (ie models/collections), it would be cleared.\r\n\r\nBut if i have some custom controller, that listens view, that listener would not be cleaned. Is it intended behaviour?\r\n\r\n```js\r\nfunction FooController(options) {\r\n  this.init(options);\r\n}\r\n\r\nFooController.prototype.init = function(options) {\r\n  this.listenTo(options.view, 'foo', 'do some stuff');\r\n};\r\n\r\nObject.assign(FooController.prototype, Backbone.Events);\r\n\r\nvar view = new Backbone.View();\r\nvar ctrl = new FooController({view: view});\r\n\r\nview.remove(); // At this point `ctrl` still have references to `view`\r\n```\r\n\r\nhttps://jsfiddle.net/ogonkov/08k3mecr/1/\r\n\r\nI should somehow call `FooController#stopListening` manually, when view get destroyed?\r\n\r\nI was sure that one of the advantages of using `listenTo` is automatic cleaning up of all listeners from object, when it gets removed. o_O"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4185",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4185/comments",
    "title": "Model 'change' event is not triggered after Exception.",
    "created_at": "2018-02-21T12:51:20Z",
    "updated_at": "2018-02-21T13:00:29Z",
    "body": "**Steps to Reproduce**\r\nAdd a 'change' event handler for a Backbone Model instance.\r\nMake a change to model attribute, change event handler is called and some exception occurs in the handler.\r\nAgain, make a change to model attribute. No 'change' event handlers are called.\r\n\r\nCode to demonstrate this.\r\n```javascript\r\nvar model = new Backbone.Model();\r\n\r\nvar changeHandler = function() {\r\n    console.log(\"name changed to: \" + model.get('name'));\r\n};\r\nBackbone.Events.listenTo(model, 'change', changeHandler);\r\n\r\nmodel.set('name', 'sachin');\r\n// prints \"name changed to: sachin\" on console\r\nmodel.set('name', 'virat');\r\n// prints \"name changed to: virat\" on console\r\n\r\nvar model2 = new Backbone.Model();\r\n\r\nvar changeHandler = function() {\r\n    console.log(\"name changed to: \" + model2.get('name'));\r\n    a.log(\"model changed\"); // will throw an exception. a is not defined.\r\n};\r\nBackbone.Events.listenTo(model2, 'change', changeHandler);\r\n\r\nmodel2.set('name', 'Sachin');\r\n// prints \"name changed to: Sachin\" on console. Also exception occurs inside change handler\r\n\r\nmodel2.set('name', 'Virat');\r\n// nothing is printed. model change handler is not called.\r\nmodel2.set('name', 'Rohit');\r\n// nothing is printed. model change handler is not called.\r\n```\r\n\r\n**Analysis:**\r\nInside Model set function, this.trigger is called and if Exception is thrown in handlers, this._changing is never set to false and on subsequent model changes, 'change' event will not be triggered. \r\n```javascript\r\nif (changing) return this;\r\n            if (!silent) {\r\n                while (this._pending) {\r\n                    this._pending = false;\r\n                    this.trigger('change', this, options);\r\n                }\r\n            }\r\n            this._pending = false;\r\n            this._changing = false;\r\n            return this;\r\n```\r\nA developer's code should never break behaviour of a framwork. Smilarly subsequent changes to model should trigger 'change' event on model. \r\n\r\n**Solution**\r\nShould wrap trigger logic around try/finally block ensuring this._changing and this._pending are set to false."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4184",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4184/comments",
    "title": "Cannot find module 'jquery'",
    "created_at": "2018-02-19T17:44:32Z",
    "updated_at": "2018-02-19T17:44:32Z",
    "body": "Following the discussion from https://github.com/Rich-Harris/packd/issues/42#issuecomment-366759727.\r\n\r\nIn https://github.com/jashkenas/backbone/blob/master/backbone.js#L26 jQuery is require'd in a TryCatch Statement which is probably fine on Node but fails to bundle.\r\n\r\nI would suggest to add `jquery` in the dependencies of Backbone, but I understand that's not what you want and I'm not sure why we should do. "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4183",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4183/comments",
    "title": "unexpected behavior (please doc or fix)",
    "created_at": "2018-02-09T11:18:42Z",
    "updated_at": "2018-02-09T16:52:07Z",
    "body": "\r\n    this.model.set(\"title\", this.$el.find('input').val()); // new value\r\n    this.model.set(\"text\", this.$el.find('textarea').val()); // value not changed\r\n\r\n    var changed = this.model.changedAttributes();\r\n    console.log(changed) // changed is false!\r\n\r\n\r\n  but if\r\n\r\n    this.model.set({\r\n      title: this.$el.find('input').val(), // new value\r\n      text: this.$el.find('textarea').val() // value not changed\r\n    })\r\n\r\n    var changed = this.model.changedAttributes();\r\n    console.log(changed) // changed is valid!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4181",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4181/comments",
    "title": "trigger sticky events",
    "created_at": "2018-01-29T12:58:52Z",
    "updated_at": "2018-01-31T13:16:26Z",
    "body": "I have an app that has a small component for filtering search results. When the search is triggered it triggers an event that some other component is listening to.\r\n\r\nNow, sometimes the listening component is not yet instantiated when the event occurs. I'd like to post \"sticky\" events that once posted stay somewhere and could be read using simple getter.\r\n\r\nPattern I'm looking after is similar to this: http://greenrobot.org/eventbus/documentation/configuration/sticky-events/\r\n\r\nSo we add a new method, _triggerSticky_, that would deliver the event like _trigger_ but one would need to consume it by calling _getStickyEvent_ or similar call. This would let developers not to worry about the instantiation order of the components as caller could ensure event is not lost even if there would be no listeners at the time event gets posted.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4178",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4178/comments",
    "title": "disable backbone validation on save() method",
    "created_at": "2017-12-23T07:33:43Z",
    "updated_at": "2017-12-25T17:24:23Z",
    "body": "hello,\r\nI run validation method manually and after that, my data will be encrypted.\r\nso because of encrypted data and re-validating by backbone (on `save` method) my js will throw an error,\r\nso I want to know is there any feature to disable/enable validating on `save` method?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4177",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4177/comments",
    "title": "base backbone class",
    "created_at": "2017-12-15T23:30:53Z",
    "updated_at": "2017-12-15T23:37:30Z",
    "body": "is there any chance that Model, Collection and View will be derived from one base backbone class in next release?\r\n```\r\nBackbone.Model.prototype instanceof BaseBackbone == true\r\nBackbone.Collection.prototype instanceof BaseBackbone == true\r\nBackbone.View.prototype instanceof BaseBackbone == true\r\n```\r\nthis will help in some cases to determine is a function is known backbone constructor or not\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4176",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4176/comments",
    "title": "Specifying cid before Model creation",
    "created_at": "2017-12-15T11:26:05Z",
    "updated_at": "2017-12-15T18:18:35Z",
    "body": "Hi,\r\n\r\nWe are currently working on a project using backbone. We have run into the issue where we need to synchronize models in real time across multiple users. We are not using a backend - backbone is only used as a utility to create Models and Collections. The problem is that at the moment a Model gets created at one users machine with a particular cid which we use to identify it later (in collections etc). Unfortunately when the model's JSON representation is sent over the network to another user and it is instantiated as a Model instance on his machine a new cid is generated by backbone which causes the two users enviroments to be desyncronized. Is there a way to tell backbone to use a particular cid when creating a model? I know that I can manually change it after model creation but that breaks our app's flow in terms of event listeners not being able to identify the model properly.\r\n\r\nThanks in advance for any help."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4173",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4173/comments",
    "title": "Wierd Backbone.View events behaviour",
    "created_at": "2017-12-07T21:59:34Z",
    "updated_at": "2017-12-07T22:10:44Z",
    "body": "Please run codepen\r\n\r\nhttps://codepen.io/anon/pen/JOQyWM\r\n\r\nExpected: link 2 should behave like link 1 (i.e. setting **disabled** prop to _true_ should not have any effect on clickability because **disabled** isn't supported on `<a/>` elements).\r\n\r\nReality: setting **disabled** to _true_ makes link 2 behave like there's no any events bound to it."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4172",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4172/comments",
    "title": "updating a model in a collection with Collection.create( ,merge: true) updates the backend with only the new attributes",
    "created_at": "2017-12-05T08:30:02Z",
    "updated_at": "2017-12-08T23:09:11Z",
    "body": "Consider a model m with id 0 and attributes { a: 10 } in a collection c\r\n\r\nnow do c.create({ id: 0, b: 20}, { merge: true })\r\n\r\nit's supposed to update the model and save it.\r\n\r\nthe resulting model indeed has attributes: { a: 10, b: 20}\r\nhowever, the RESTful PUT has only { b:20 }\r\nFollowing the definition of PUT, it will replace the content of the resource with the new content,\r\nwhich is { b: 20}\r\n\r\nFor PATCH this is Ok, but for UPDATE you need to put the merge attribute list.\r\n\r\nOne way to solve this, is to save the merged model (returned by add) iso the temporarily created model.\r\nHowever, this will be more complicated with the combination with options.wait\r\n\r\nA workaround is to use the patch option.\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4171",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4171/comments",
    "title": "model id is removed from _byId if the model id is not available in the unparsed model",
    "created_at": "2017-11-14T13:12:30Z",
    "updated_at": "2017-12-09T08:04:04Z",
    "body": "The following is what I believe is a bug.\r\n\r\nAssume my unparsed models do not have 'id' or the idAttribute as a (toplevel) attribute.\r\n\r\nIf a model is already in the collection, and is added again,\r\ncollection.set() will lookup the unparsed model with collection.get(unparsedModel)\r\nIt will not find it and add the model again, even it is already there.\r\nAfter this, the original model is removed and _byId[idAttribute || 'id'] also\r\n\r\nTherefore, the model will no longer be available by collection.get(model.id)\r\n\r\nThis problem does not exists if the unparsed model contain the id or idAttribute."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4170",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4170/comments",
    "title": "Magento Security Scan",
    "created_at": "2017-11-10T15:17:10Z",
    "updated_at": "2017-11-13T18:50:46Z",
    "body": "Hi there,\r\nI range a Magento Security scan on our website. The scanner is only available if you have a magento.com account at https://account.magento.com/scanner. The scan reported the following;\r\n\r\nYour site is compromised with injected JavaScript\r\nThe malicious code signature(s) has been found in resources:\r\n/js/mirasvit/core/backbone.js\r\n\r\nWe are using a Magento module by a company called Mirasvit (https://mirasvit.com) that uses backbone js. I reported the issue to them and they said;\r\n\r\nWe are using official version of backbone (0.9.2).\r\nOriginal version: https://raw.githubusercontent.com/jashkenas/backbone/0.9.2/backbone-min.js\r\n\r\nI have checked the file on my site and it exactly matches the above so I know the file hasn't been modified either from the developer or by someone gaining access to the server, so I thought I should make you aware and also seeking some support on what this means.\r\n\r\nThank you."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4169",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4169/comments",
    "title": "Broken link on cdnjs.com - \"what is a view\"",
    "created_at": "2017-11-06T14:05:34Z",
    "updated_at": "2017-11-06T15:13:46Z",
    "body": "This page:\r\nhttps://cdnjs.com/libraries/backbone.js/tutorials/what-is-a-router\r\n\r\n\"What is a view\" should point here:\r\nhttps://cdnjs.com/libraries/backbone.js/tutorials/what-is-a-view"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4168",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4168/comments",
    "title": "backbone noconflict in typescript not working",
    "created_at": "2017-11-01T07:05:48Z",
    "updated_at": "2017-11-02T15:23:32Z",
    "body": "I have a typescript file which directly used Backbone. But I want to change it use own version of Backbone. export var ownBackbone :typeof Backbone = Backbone.noConflict();\r\n\r\nexport class UserContainerView extends ownBackbone .View<UserContainerContainerModel> {\r\n    public currentView;\r\n    public hasChanges;\r\n    collection: ownBackbone.Collection<UserContainerContainerModel>;\r\n    constructor(options: any) {\r\n        super();\r\n        this.collection = options.collection;\r\n        this.$el = options.el; \r\n    }\r\n\r\n    initialize(options: any) {\r\n    }\r\n\r\n    close() {\r\n    }\r\n}\r\n\r\nit throwing error at Build cant find name ownBackbone"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4166",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4166/comments",
    "title": "fetching local files",
    "created_at": "2017-10-27T16:17:18Z",
    "updated_at": "2017-11-10T01:35:24Z",
    "body": "I'm developing a nw.js app. I have en existing slider built via backbone which renders a json file (**I'm not familiar with backbone at all**).\r\n\r\nI'm trying to \".fetch\" a file stored on the file system of a device - no servers involved. I can reach the file with node modules but don't know how to pass that data to .fetch function or fetch the file with ://file protocol.\r\n\r\nThere are no security issues as I can launch the app with the security disabled.\r\n\r\nPackage json for nw.js;\r\n\r\n`\"chromium-args\": \"--disable-web-security --allow-file-access-from-files --allow-file-access --user-data-dir --enable-local-file-accesses\",`\r\n\r\nCode;\r\n\r\n```\r\nloadpages: function(){\r\n  this.activeBook.fetch({\r\n    url: url, //file://.......\r\n    success: function(collection, response, options){\r\n      self.renderBook();\r\n      self.renderNav();\r\n    },\r\n    error: function(collection, response, options){\r\n      //alert(\"Error\");\r\n      return;\r\n    }\r\n  });\r\n}\r\n\r\nrenderBook: function(){\r\n  myapp.bookView = new myapp.BookView({\r\n    collection: this.activeBook,\r\n    instanceURL : url,\r\n  });\r\n},\r\n```\r\n\r\nThis doesn't work. Error callback is trigged. I can see the JSON in the response text but status is '0'.\r\n\r\nI'm not sure if this is an issue with backbone or the chromium args aren't working with nw.js but I could do the following and pass that JSON for backbone to render but don't know how.\r\n\r\n```\r\nvar fs = require('fs');\r\nfs.readFile(url, 'utf8', function (err, data) {\r\n  if (err) throw err;\r\n  var book = JSON.parse(data);\r\n  // render the json view backbone view\r\n});\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4165",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4165/comments",
    "title": "How about using backbone in mobile?",
    "created_at": "2017-10-13T03:36:54Z",
    "updated_at": "2017-10-15T19:15:08Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4164",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4164/comments",
    "title": "collections reset  id issue",
    "created_at": "2017-10-01T12:59:54Z",
    "updated_at": "2017-11-28T18:22:13Z",
    "body": "found that when the object contains id field, and use reset to reset collection, it will remove duplicates according to id, but actually i dont want it to remove duplication, any way to do this?\r\n _this.reset(res.data.list);"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4161",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4161/comments",
    "title": "Passing non-existant selector to Backbone.View",
    "created_at": "2017-09-27T11:35:22Z",
    "updated_at": "2017-12-05T19:07:15Z",
    "body": "This is more of a question really...\r\n\r\nGiven this fiddle: https://jsfiddle.net/oowrs2gh/ (copied below also)\r\n\r\n```\r\nvar MyView = Backbone.View.extend({\r\n});\r\n\r\nvar view = new MyView({\r\n\tel: '#foo-bar-bat'\r\n});\r\n\r\nconsole.log(view.el);\r\n```\r\n\r\nThe `el` is undefined. And I wonder if perhaps `_ensureElement` should fallback to creating an element if the selector fails?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4160",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4160/comments",
    "title": "Documentation of Model#validate can be misleading",
    "created_at": "2017-09-25T21:54:50Z",
    "updated_at": "2017-12-05T19:09:06Z",
    "body": "In the Backbone 1.3.3 docs it is only mentioned in the section for the method `Model#isValid` that it:\r\n\r\n>  Run validate to check the model state. \r\n\r\nhttps://github.com/jashkenas/backbone/blob/master/index.html#L1612\r\n\r\nHowever when inspecting the code it is clear that calling such a method can also trigger an \"invalid\" event and set the `Model#validationError` state (by means of its internal call to `_validate`).\r\n\r\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L737:L739\r\n\r\nSuch explanations can also be found in the annotated source https://github.com/jashkenas/backbone/blob/master/docs/backbone.html#L1854:L1890\r\n\r\nFollowing the docs to the section for the method `Model#validate` is states:\r\n\r\n> If validate returns an error, save will not continue, and the model attributes will not be modified on the server. Failed validations trigger an \"invalid\" event, and set the validationError property on the model with the value returned by this method.\r\n\r\nhttps://github.com/jashkenas/backbone/blob/0b2835f7fc479d7f2a6ebe4442d33aac5d38f86b/index.html#L1367:L1369\r\n\r\nIt is true it never mentions that it is the invocation of `Model#validate` what would cause the \"invalid\" event to be triggered, however the location in which the docs are placed and the order in which they are linked can lead to confusion. It at least happened to me and to some other colleagues when trying to explicitly test for the validity of a model.\r\n\r\nMy proposal would be to reorder some parts of the documentation between these two methods.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4159",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4159/comments",
    "title": "Collection does not purge internal `_byId` reference to a removed model",
    "created_at": "2017-09-22T09:59:59Z",
    "updated_at": "2017-09-22T14:56:53Z",
    "body": "Please find below about the tersest reproduction I could fathom of a sequence of steps in a Backbone application that leads to a `Collection` getting into a state of internal confusion. \r\n\r\nA working copy can be found in this [JSFiddle](https://jsfiddle.net/cueedee/ph9uo43w/) .\r\n\r\nWhat it demonstrates is a `collection` keeping an internal (`_byId`) reference to a `remove()`-ed `Model`.  That `Model` is no longer part of `collection.models`, however, it can still be retrieved through its (former) `id`. \r\n\r\n```js\r\nvar\r\n    MyView = Backbone.View.extend( {\r\n\r\n        initialize: function () {\r\n\r\n            this.model = new Backbone.Model( {\r\n\r\n                id:  'foo'\r\n            ,   foo: 'bar'\r\n            } );\r\n\r\n            this.collection = new Backbone.Collection( this.model );\r\n\r\n            this.listenTo( this.model, 'change:id', function ( model, id ) {\r\n\r\n                if ( id == null ) {\r\n                    this.collection.remove( model );\r\n                }\r\n\r\n            } );\r\n\r\n            this.model.unset( 'id' );\r\n\r\n            $('#models' ).val( JSON.stringify( this.collection.models      ));\r\n            $('#_byId'  ).val( JSON.stringify( this.collection._byId       ));\r\n            $('#get-foo').val( JSON.stringify( this.collection.get( 'foo' )));\r\n        }\r\n\r\n    })\r\n\r\n, foo = new MyView()\r\n;\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4158",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4158/comments",
    "title": "response without content",
    "created_at": "2017-09-15T14:58:06Z",
    "updated_at": "2017-12-05T19:10:05Z",
    "body": "hello,\r\nI think this must be repeated but I couldn't find any solution with search in google and StackOverflow,\r\n\r\nI just want to know how should face to APIs which just return status code,\r\n\r\nfor example, I have an API in my server which returns :\r\n\r\n`200` -> when inserting in db was successful\r\n`208` -> when the same record exist in db\r\n\r\nso when I want to save my model if I put `dataType: \"text\"` my `xhr` argument will be empty and if I don't set that, my js will be hanged (I searched and found out it's because backboneJS waiting for getting a json)\r\n\r\nand this is my sample function for sending that request:\r\n\r\n```\r\nfunction form1() {\r\n    require(['user_model'], function (User) {\r\n        \r\n        var user = new User({\r\n            user_id:$(\"#user_id\").val(),\r\n            user_name:$(\"#user_name\").val(),\r\n            user_age:$(\"#user_age\").val(),\r\n            user_phone:$(\"#user_phone\").val()\r\n        });\r\n        \r\n        if(!user.isValid()) {\r\n            alert(\"there is an error \\n\" + user.validationError.msg);\r\n            return;\r\n        }\r\n        \r\n        user.urlRoot = user.baseUrl()+\"api/users/info\";\r\n        \r\n        user.save({}, {\r\n            dataType: \"text\",\r\n            success: function(model, xhr) {\r\n                $(\"#result\").html(\"new model is: \" + JSON.stringify(user));\r\n            },\r\n            error: function(model, xhr) {\r\n                switch (xhr.status) {\r\n                    case 404:\r\n                        alert(\"not found\");\r\n                        break;\r\n                    case 400:\r\n                        alert(\"bad request\");\r\n                        break;\r\n                    case 500:\r\n                        alert(\"server error\");\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n```\r\nso how do I get just response code in this cases? (I mean the cases that response body is empty)"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4157",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4157/comments",
    "title": "I'd like to suggest www.7up.nl to be added in example",
    "created_at": "2017-09-12T09:17:36Z",
    "updated_at": "2017-12-05T19:10:33Z",
    "body": "I think it 7up.nl is a good example for using backbone js, please explain it with backbone js and add it in http://backbonejs.org/#examples, thanks"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4156",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4156/comments",
    "title": "what do you mean by this mistake?",
    "created_at": "2017-08-30T03:33:15Z",
    "updated_at": "2017-12-05T17:04:59Z",
    "body": "When I require `backbone.js`. It throw an error like this: `backbone.js:1410 Uncaught TypeError: this.$el.off is not a function`. So how can I solution it?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4155",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4155/comments",
    "title": "Collection#parse as a string",
    "created_at": "2017-08-29T22:17:15Z",
    "updated_at": "2017-12-05T19:11:26Z",
    "body": "I'd like to suggest Collection#parse be defined as a function _or_ a string. The latter solves for what is probably the most common use case (my apps have this boilerplate function in every Collection):\r\n```\r\nparse: function(response) {\r\n  return response.accounts;\r\n}\r\n```\r\nWish that could be:\r\n```\r\nparse: 'accounts'\r\n``` \r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4154",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4154/comments",
    "title": "Don't propagate the internal \"unset\" option to user code",
    "created_at": "2017-08-24T16:49:13Z",
    "updated_at": "2017-09-05T16:32:56Z",
    "body": "    let m = new Backbone.Model({a:1});\r\n    m.on(\"change\",(model,options)=>console.log(options))\r\n    m.unset(a)\r\n\r\nThis prints `{unset: true}`\r\n\r\nI my opinion the \"unset\" option is an implementation detail that should not be passed to my handler. \r\n\r\nWould it be possible to clear it before triggering the \"change\" event on the model \"set\" method?\r\n\r\n(Maybe I could fix it in my code by overriding the set method, and clearing it myself, but I think this is actually a bug).\r\n\r\nThanks\r\nMarco"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4153",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4153/comments",
    "title": "hope generate api pages on github.io",
    "created_at": "2017-08-10T01:14:55Z",
    "updated_at": "2017-12-05T19:11:58Z",
    "body": "it will easy to browser the api online .because of the official website can't be access in my company.\r\n\r\nThanks ."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4152",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4152/comments",
    "title": "model.omit('attr') returns POJO?",
    "created_at": "2017-08-08T20:21:16Z",
    "updated_at": "2017-08-08T21:21:03Z",
    "body": "I think #4024 is a working solution to this, but I'm not entirely sure.\r\n\r\nExample:\r\n```\r\nlet model = new Backbone.Model({ foo: 'bar', baz: 'qux' });\r\nmodel.omit('foo') // returns { baz: 'qux' }\r\n```\r\nAs a proxied underscore method, I can understand the default behavior. It seems like in the context of a backbone model though, it should somehow return the model with the omitted fields by default?\r\n\r\nOther than by overriding the method chain, possibly supering or calling another util/_ method to have the intended effect, or by instantiating a new model, I'm not sure what the most ideal solution to this would be and whether or not the entity context should be accounted for by default.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4151",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4151/comments",
    "title": "JST is not defined",
    "created_at": "2017-08-01T08:16:34Z",
    "updated_at": "2017-08-01T12:09:07Z",
    "body": "What should I do to use backbonejs templates without Rails or any other frameworks and backend langs?\r\nI just create index.html"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4149",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4149/comments",
    "title": "Docs for \"error\" event could be improved",
    "created_at": "2017-07-13T13:58:06Z",
    "updated_at": "2017-12-05T19:16:10Z",
    "body": "Hi guys,\r\n\r\nAccording to the docs, the **error** event would have a callback function with the following signature:\r\n`\"error\" (model_or_collection, response, options)`\r\nBut instead, the signature looks more like so:\r\n`\"error\" (model_or_collection, xhr, options)`\r\n\r\nAnd i think it's the same with the **sync** event also.\r\n\r\nIs it because of the jQuery version?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4145",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4145/comments",
    "title": "Lodash 5 Support",
    "created_at": "2017-06-21T15:30:47Z",
    "updated_at": "2017-12-05T19:22:02Z",
    "body": "Since Backbone 1.3.3 supports Lodash 4, I figure I ask if Lodash 5 will be supported. \r\nhttps://github.com/lodash/lodash/wiki/Roadmap points out functions that are getting removed in favor of native approaches. This is pre-emptive since the roadmap gradually updates but the changes aren't difficult to make in the code base."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4143",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4143/comments",
    "title": "What does `options` parameter in built-in events means? ",
    "created_at": "2017-06-06T13:19:43Z",
    "updated_at": "2017-06-15T18:33:58Z",
    "body": "Hi!\r\n\r\nhttp://backbonejs.org/#Events-catalog\r\n\r\nWhat does `options` last parameter in built-in events means? \r\n\r\nIs it the same value passed via method. I mean, if in some method like `set`, `add`, is passed the parameter options, then this parameter is passed as the las parameter of event handler?\r\n\r\nI think that is not specified well.\r\n\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4142",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4142/comments",
    "title": "Fast clicking between two links freeze VIEW and not render template",
    "created_at": "2017-06-01T08:37:22Z",
    "updated_at": "2017-06-01T13:43:59Z",
    "body": "I have a app with 3 links - MENU, PROFILE, INVOICE. Each of this link render own view and template. If I click very fast between those links at one moment link won't react on my clicking and will freeze render function. I have to refresh-hard my page to fix this problem. But it's not a good solution for UI. Is this a problem inside backbone structure?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4141",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4141/comments",
    "title": "Canvas with backbone",
    "created_at": "2017-05-27T00:05:43Z",
    "updated_at": "2017-06-15T18:04:37Z",
    "body": "I wish to integrate canvas tag with backbone.js\r\nI am stuck on the position of defining the view. Would appreciate if some one can direct me. How can we associate a view with the canvas.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4138",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4138/comments",
    "title": "Update version in npm",
    "created_at": "2017-05-16T12:16:29Z",
    "updated_at": "2017-05-16T18:27:45Z",
    "body": "Npm has an old version of the backbone. It would be cool to update."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4135",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4135/comments",
    "title": "Let .com variant domain expire?",
    "created_at": "2017-04-13T17:38:13Z",
    "updated_at": "2017-07-31T21:08:30Z",
    "body": "Hey all.\r\n\r\nI'm 99% sure what the consensus answer to this is going to be, but I'll ask anyway:\r\n\r\nOriginally, Backbone was just registered under the correct **backbonejs.org** domain name. At some point, a good samaritan registered **backbonejs.com** to prevent anyone from squatting on it, and then eventually transferred it over to me.\r\n\r\nAt this point, I'm not sure that I really want to keep `.com` variants for all open source projects sitting there as redirects to the `.orgs`. Sure, it's only 30-50 bucks a year, but still, the principle of the thing.\r\n\r\nHow terrible of an idea would it be to allow **backbonejs.com** to expire?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4132",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4132/comments",
    "title": "Unexpected page router navigate in Mozilla",
    "created_at": "2017-04-05T09:49:16Z",
    "updated_at": "2017-12-12T02:14:01Z",
    "body": " If there any German, Japanese etc. and any symbols like these in the url, getHash method returns incorrect result because of wrong encoding of this symbols in the Firefox browser, see window.location.href. And because of this ``navigate`` method is triggered. \r\n\r\nNavigate method is triggered because we have different urls in ``checkUrl`` function in the\r\n``var current = this.getFragment();`` and ``in  this.fragment`` values.\r\n\r\nExample in Mozilla:\r\n\r\nResult wich is returned by ``getFragment`` function:\r\nhttps://example.com/example?filterBy_city=%E5%A4%A7%E9%98%AA%2C%E5%AF%8C%E5%B1%B1%2C%E5%B2%A1%E5%B1%B1\r\n\r\n``this.fragment`` value:\r\nhttps://example.com/example?filterBy_city=\u5927\u962a%2C\u5bcc\u5c71%2C\u5ca1\u5c71\r\n\r\n\r\nExample in Chrome\r\n\r\nResult wich is returned by ``getFragment`` function:\r\nhttps://example.com/example?filterBy_city=\u5927\u962a%2C\u5bcc\u5c71%2C\u5ca1\u5c71\r\n\r\n``this.fragment`` value:\r\nhttps://example.com/example?filterBy_city=\u5927\u962a%2C\u5bcc\u5c71%2C\u5ca1\u5c71\r\n\r\nI find the solution for it using ``decodeFragment`` in the getHash method:\r\n![image](https://cloud.githubusercontent.com/assets/20538037/24699897/3c9d7c4e-19fe-11e7-98c4-347668646abc.png)\r\nWould it be safely to do it this way?\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4130",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4130/comments",
    "title": "Error Build APK {duplicate entry: com/google/android/gms/gcm/INetworkTaskCallback$Stub.class}",
    "created_at": "2017-03-25T13:00:16Z",
    "updated_at": "2017-03-26T11:32:17Z",
    "body": "Hi i am trying to build APK but i Fetching this problem in Android Studio.\r\n`Error:Execution failed for task ':app:transformClassesWithJarMergingForDebug'.\r\ncom.android.build.api.transform.TransformException: java.util.zip.ZipException: duplicate entry: com/google/android/gms/gcm/INetworkTaskCallback$Stub.class`\r\n\r\nGradle file :\r\n\r\n` apply plugin: 'com.android.application'\r\n\r\nandroid {\r\n    compileSdkVersion 25\r\n    buildToolsVersion \"25.0.2\"\r\n     defaultConfig {\r\n      applicationId \"com.example.mouad.fixmyphone\"\r\n      minSdkVersion 15\r\n      targetSdkVersion 25\r\n      versionCode 1\r\n      versionName \"1.0\"\r\n      testInstrumentationRunner    \"android.support.test.runner.AndroidJUnitRunner\"\r\n      // Enabling multidex support.\r\n      multiDexEnabled true\r\n   }\r\n   dexOptions {\r\n        javaMaxHeapSize \"4g\"\r\n  }\r\n   buildTypes {\r\n      release {\r\n           minifyEnabled false\r\n               proguardFiles getDefaultProguardFile('proguard-android.txt'),   'proguard-rules.pro'\r\n        }\r\n    }\r\n   useLibrary 'org.apache.http.legacy'\r\n\r\n }\r\n android {\r\n     packagingOptions {\r\n            exclude 'META-INF/DEPENDENCIES.txt'\r\n            exclude 'META-INF/LICENSE.txt'\r\n            exclude 'META-INF/NOTICE.txt'\r\n            exclude 'META-INF/NOTICE'\r\n            exclude 'META-INF/LICENSE'\r\n            exclude 'META-INF/DEPENDENCIES'\r\n            exclude 'META-INF/notice.txt'\r\n            exclude 'META-INF/license.txt'\r\n            exclude 'META-INF/dependencies.txt'\r\n            exclude 'META-INF/LGPL2.1'\r\n      }\r\n }\r\n\r\n dependencies {\r\n compile fileTree(include: ['*.jar'], dir: 'libs')\r\n androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2',          {\r\n    exclude group: 'com.android.support', module: 'support-annotations'\r\n   })\r\n   compile 'com.android.support:appcompat-v7:25.1.1'\r\n   compile 'com.android.support:design:25.1.1'\r\n   compile 'com.android.support:support-v4:25.1.1'\r\n   compile 'com.android.support:multidex:1.0.1'\r\n   compile 'com.miguelcatalan:materialsearchview:1.4.0'\r\n   compile 'com.google.firebase:firebase-core:10.2.1'\r\n   compile 'com.google.firebase:firebase-messaging:10.2.1'\r\n   compile 'com.firebase:firebase-client-android:2.5.2'\r\n   compile 'com.firebase:firebase-jobdispatcher:0.5.2'\r\n   compile 'com.firebase:firebase-jobdispatcher-with-gcm-dep:0.5.2'\r\n   testCompile 'junit:junit:4.12'\r\n   }\r\n    apply plugin: 'com.google.gms.google-services' `"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4129",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4129/comments",
    "title": "invalid pointer error while running script in batch ",
    "created_at": "2017-03-20T18:12:45Z",
    "updated_at": "2017-03-21T13:48:06Z",
    "body": "OS: Linux redhat \r\nSoftware version: Open R 3.2.2 \r\nError about: error while running job in batch mode using command \"R CMD BATCH test.R\"\r\n\r\nmy one of Teradaya pull R script running fine from rstudio but its giving below error when I try to run it from command like  (Linux - redhat) - am I missing any configuration or anything else? \r\n\r\n*** glibc detected *** /usr/lib64/microsoft-r/8.0/lib64/R/bin/exec/R: free(): invalid pointer: 0x00000000040b95d0 ***\r\n\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4127",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4127/comments",
    "title": "Collection `change` event not documented",
    "created_at": "2017-03-16T13:29:44Z",
    "updated_at": "2017-03-17T19:48:27Z",
    "body": "If im correct, a Backbone Collection can also trigger \"change\" events when one of its models has changed, but that is not documented in http://backbonejs.org/#Events-catalog .\r\n\r\nWhat are the details for this event?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4125",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4125/comments",
    "title": "Can model.fetch() pass options.headers? YES",
    "created_at": "2017-02-23T18:20:56Z",
    "updated_at": "2017-02-23T19:21:12Z",
    "body": "I'm on BackboneJS `1.1.2`, jQeury `1.11.2`.\r\n\r\nKinda not sure if it's Backbone-specific or CORS-related.\r\nHere, http://codepen.io/landike/pen/JWjJNZ simple example where we have Backbone.Model and `fetch()` call.\r\n\r\nI want to verify if I can do so:\r\n\r\n```\r\nappointments.fetch({\r\n  'headers': {\r\n    'x-marshaling-type': 'minimal'\r\n  }\r\n // or whatever options to xhr.ajax()\r\n});\r\n```\r\n\r\nIn that example, there is 404/CORS error (when custom options passed), which I think due to codepen server and iframe limitation. \r\nBut in my project, I also have similar issue, when we have lot of places where we would like to pass `options` to `fetch()` function, but Backbone doesn't pass it correctly (designed or bug - not sure yet). My current needs is custom need for headers (not all Model need that header).\r\n\r\nI searched issues and PRs here, but in lot of history missed by me, I couldn't find proper answer for my question.\r\n\r\nAnd official documentation doesn't mention using `options` in `fetch()` function, though options as an input parameter exists in backbone code.\r\n\r\nCould someone clarify this point for me?\r\n\r\nUPD:\r\n[Here](http://stackoverflow.com/a/21825699), I spotted on 2 simple examples, and tried with model.fetch() passing options, and GET request goes OK. \r\nI mean I did code like \r\n```\r\nthis.model.fetch({\r\n    headers: {'X-Token' : 'myToken'}\r\n});\r\n```\r\n\r\ncc/ @jashkenas @braddunbar "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4124",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4124/comments",
    "title": "DialogView set focus issue",
    "created_at": "2017-02-22T19:27:47Z",
    "updated_at": "2017-02-28T04:15:09Z",
    "body": "i have a class that extends a dialog view\r\n\r\n```\r\nclass Views.AddEntityDlg extends Views.DialogView\r\n  initialize: (options) ->\r\n    ...\r\n  onRender: ->\r\n    ...\r\n\r\n```\r\n\r\ncalled by \r\n` @addEntityDlg = new Views.AddEntityDlg (model: new Backbone.Model(mode: 'new'))`\r\n\r\nwhen this dialog pop up is opened in the UI, I was able to press the Tab key and tab though the background as well."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4122",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4122/comments",
    "title": "Fullscreen video is not working Bootstrap tour step",
    "created_at": "2017-02-02T09:31:10Z",
    "updated_at": "2017-02-05T01:30:21Z",
    "body": "here I have created simple html page with bootstrap tour . on second step i have used Video tag ..this video tag is working in minimised screen but when i expand video to fullscreen , fullscreen automatically getting exited\r\n\r\n`<!DOCTYPE html>\r\n<html>\r\n      <head>\r\n\t   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n        <title>My First Hopscotch Tour</title>\r\n        <link href=\"bootstrap-tour-standalone.min.css\" rel=\"stylesheet\">\r\n      </head>\r\n      <body>\r\n\t  <button id=\"startTourBtn\" onclick=\"startBootStrapTour();\" >Take a Tour</button>\r\n        <h1 id=\"swap1\">My First Hopscotch Tour</h1>\r\n        <div id=\"content\">\r\n          <p>Hi Swap.......Welcome to Hopscotch</p>\r\n        </div>\r\n\t\t <div id=\"swap2\" style=\"width:300px;\">\r\n          <p>Different services provided by ABC are </p>\r\n\t\t  \r\n        </div>\r\n\t\t <div id=\"swap3\">\r\n          <p>Different services provided by ABC are </p>\r\n\t\t  \r\n        </div>\r\n\t\t\r\n\t\t <div id=\"swap4\">\r\n          <p>Different services provided by ABC are </p>\r\n\t\t  \r\n        </div>\r\n\t\t\r\n        <!--<script src=\"js/hopscotch.min.js\"></script>-->\r\n\t\t<script src=\"jquery.js\"></script>\r\n\t    <script src=\"bootstrap-tour-standalone.min.js\"></script>\r\n\t\t<script>\r\n\t\tfunction startBootStrapTour(){\r\n\t\t\tvar tour = new Tour({\r\n\t\t\t\t  steps: [\r\n\t\t\t\t  {\r\n\t\t\t\t    element: \"#swap1\",\r\n\t\t\t\t    title: \"Start Tour\",\r\n\t\t\t\t    content: \"Explore the Databridge By clicking Next Button \"\r\n\t\t\t\t    \r\n\t\t\t\t  },\r\n\t\t\t\t  {\r\n\t\t\t\t    element: \"#swap2\",\r\n\t\t\t\t    title: \"Create Import\",\r\n\t\t\t\t    content:  '<video id=\"backgroundvid\" controls=\"control\" src=\"file:///C:/Users/bijweswa/Desktop/swap.MP4\" type=\"video/mp4\" width=\"300\" height=\"240\" > </video>'\r\n\t\t\t\t    \r\n\t\t\t\t  },\r\n\t\t\t\t  {\r\n\t\t\t\t    element: \"#swap3\",\r\n\t\t\t\t    title: \"Import Search\",\r\n\t\t\t\t    content: \"Here you can search for existing Import you have created.<p>you cab search on the basis of Import name, Catagary and Type</p>\"\r\n\t\t\t\t   },\r\n\t\t\t\t  {\r\n\t\t\t\t    element: \"#swap4\",\r\n\t\t\t\t    title: \"Delete Import Button\",\r\n\t\t\t\t    content: \"You can delete import by clicking  delete button after selecting import\"\r\n\t\t\t\t  }\r\n\t\t\t\t]\r\n\t\t\t\r\n\t\t\t});\r\n\t\t\r\n\t\t\t\t// Initialize the tour\r\n\t\t\t\ttour.init();\r\n\t\t\t\ttour.start();\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (tour.ended()) {\r\n\t\t\t\t\t  // decide what to do\r\n\t\t\t\t\t  tour.restart();\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t    //tour.restart();\r\n\t\t\t\r\n\t\t\t};\r\n\t\t</script>\r\n\t\t\r\n      </body>\r\n    </html>`"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4121",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4121/comments",
    "title": "Events trigger as often as there are events in the view.",
    "created_at": "2017-01-20T12:34:01Z",
    "updated_at": "2017-01-20T23:18:44Z",
    "body": "Hi,\r\n\r\nat the events block using custom events, they fire as often as there are events defined in the view.\r\n\r\nExample:\r\nWhen adding the jQuery Plugin tappy.js it provides x-device save click & tap behavior that can be bound to an element with $('.anchor').on('tap', callback);\r\nWhen using it for Backbone event bindings like this:\r\nevents: {\r\n    'tap .element-one': 'callbackOne',\r\n    'tap .element-two': 'callbackTwo',\r\n    'tap .element-three': 'callbackThree'\r\n}\r\n\r\nA click on any of the bound elements would trigger it's callback 3 times, as there are 3 events in the setup."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4120",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4120/comments",
    "title": "stopListening(null) removes all registered callbacks",
    "created_at": "2017-01-17T21:25:23Z",
    "updated_at": "2017-01-18T23:51:34Z",
    "body": "Currently, `object.stopListening(null)` removes all registered callbacks that `object` has. However, I think that `object.stopListening(null)` should be a no-op. It seems like it would be unintentional to pass `null`, since you can simply call `object.stopListening()` instead. \r\n\r\nHere is a test for the logic I'd expect (current behavior causes this to fail): \r\n```\r\n  QUnit.test('stopListening with null', function(assert) {\r\n    assert.expect(1);\r\n    var a = _.extend({}, Backbone.Events);\r\n    var b = _.extend({}, Backbone.Events);\r\n    var cb = function() { assert.ok(true); };\r\n    a.listenTo(b, 'event', cb);\r\n    a.stopListening(null);\r\n    b.trigger('event');\r\n  });\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4119",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4119/comments",
    "title": "routes without hash not working for page refresh",
    "created_at": "2017-01-16T09:45:06Z",
    "updated_at": "2017-01-18T02:43:27Z",
    "body": "I'm using Backbone.history.start({pushState: true}) to get rid of the '#' in the URL, and on top of that I created a global event for clicking on a[href] to force the router to navigate to those routes. The issue I have is when I'm refreshing the page. It goes to saying: '404 cannot get localhost:9000/myRoute' and after that I cannot use history anymore(going back and forth). I just want to know if there's a known solution or if it can be fixed somehow by a backbone developer."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4118",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4118/comments",
    "title": "Model is removed from collection even if DELETE command failed",
    "created_at": "2017-01-13T17:15:27Z",
    "updated_at": "2017-01-18T02:43:46Z",
    "body": "```javascript\r\nvar model = collection.at(0);\r\nmodel.destroy();\r\n```\r\n\r\nThis will issue an HTTP DELETE request. But if that request fails, the model is still removed from the collection.\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4117",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4117/comments",
    "title": "Protractor - how to select heavily nested dropdown element?",
    "created_at": "2017-01-09T11:34:36Z",
    "updated_at": "2017-01-10T10:55:29Z",
    "body": "`<li ng-show=\"vm.authenticated &amp;&amp; vm.admin\" ng-class=\"{ active: isActive('/users') || isActive('/suppliers') || isActive('/resources')}\" class=\"dropdown active\"><a class=\"dropdown-toggle ng-binding\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"> Administrative tools <span class=\"caret\"></span>\r\n                                </a>\r\n                                    <ul class=\"dropdown-menu\">\r\n                                        <li><a href=\"#users\" translate=\"\" class=\"ng-scope\">User Accounts</a></li>\r\n                                        <li><a href=\"#suppliers\" translate=\"\" class=\"ng-scope\">Suppliers</a></li>\r\n                                        <li><a href=\"#resources\" translate=\"\" class=\"ng-scope\">Resources</a></li>\r\n                                    </ul></li>`\r\n**How can I get protractor to click the links like \"User Accounts\" within the dropdown menu?**"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4116",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4116/comments",
    "title": "Cuckoo sandbox installing issue!!!",
    "created_at": "2017-01-07T14:34:45Z",
    "updated_at": "2017-01-09T22:49:55Z",
    "body": "Hi ,\r\ni am face some issue while installing cuckoo. could u plz any one tell suggestion ?\r\nissue: i was already download 300 sign from \"community.py -wafb\" .after i start cuckoo.py it is still show error.\r\ni was also try cuckoo.py --debug --test . again show same error msg. plz help me\r\nuse tool: python 2.7, vmware - winxp\r\n![cuckko_san](https://cloud.githubusercontent.com/assets/24975924/21742396/0acc5b60-d514-11e6-8df6-0912375635e3.JPG)\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4115",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4115/comments",
    "title": "how to select drop down menu ??",
    "created_at": "2017-01-04T14:10:39Z",
    "updated_at": "2017-01-09T22:50:24Z",
    "body": "``` \r\n\r\n<li ng-show=\"vm.authenticated &amp;&amp; vm.admin\" ng-class=\"{ active: isActive('/users') || \r\n\r\nisActive('/suppliers') || isActive('/resources')}\" class=\"dropdown active\"><a class=\"dropdown-toggle ng-binding\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"> \r\nAdministrative tools <span class=\"caret\"></span>\r\n</a>\r\n    <ul class=\"dropdown-menu\">\r\n<li><a href=\"#users\" translate=\"\" class=\"ng-scope\">User Accounts</a></li>\r\n <li><a href=\"#suppliers\" translate=\"\" class=\"ng-scope\">Suppliers</a></li>\r\n                                        <li><a href=\"#resources\" translate=\"\" class=\"ng-scope\">Resources</a></li>\r\n                                    </ul></li>\r\n```\r\ni tried this \r\n\r\nelement(by.model(''))\r\nelement(by.css('li.dropdown >a.dropdown-toggle')).click();\r\nelement(by.lintText('User Accounts')).click();\r\ncan anyone help me for that ?\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4113",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4113/comments",
    "title": "Saving changed attributes of model after multiply `set`",
    "created_at": "2017-01-03T10:17:06Z",
    "updated_at": "2017-01-09T22:50:58Z",
    "body": " I think it would be good if `save` method without attrs on first parameter save all changed attributes. For example:\r\n\r\nMy model is `{name: 'old', 'description: 'old', anotherField: 'old'}`\r\n\r\n```\r\nmodel.set({name: 'new'});\r\n...\r\nmodel.set({description: 'new'});\r\n...\r\nmodel.save({patch: true});\r\n```\r\n\r\nI expect to send to server `{name: 'new', description: 'new'}` only. Yes, I can call `model.save(attrs, {patch: true});`, but I can't get attrs in a simple way. I can't use model.toJSON() (unneeded fields) or model.changedAttributes() (only last set) to obtain attrs.\r\n\r\nWhat do you think about it?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4109",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4109/comments",
    "title": "docs: 'update' event confusing documentation",
    "created_at": "2016-12-07T13:43:35Z",
    "updated_at": "2017-02-13T21:43:07Z",
    "body": "The current docs for the update event state:\r\n\r\n> \"update\" (collection, options) \u2014 single event triggered after any number of models have been added or removed from a collection.\r\n\r\nI interpreted this as events should only be fired on add or remove (i.e. not merge), however the event is also triggered on merge from `Collection#set`:\r\n\r\nhttps://github.com/jashkenas/backbone/blob/7da4ed73e7402baf614a50a6551d47ace68b5239/backbone.js#L939\r\n\r\nI'm not sure if the docs are just incorrect here or the implementation is not as expected. Docs are probably a safer fix!"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4108",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4108/comments",
    "title": "Is the idea of a collection's modelId functionality valid?",
    "created_at": "2016-12-05T14:20:26Z",
    "updated_at": "2017-02-15T16:49:47Z",
    "body": "We are running quite old version of the Backbone in a production and it has served well, thank you guys. Now some other library requires a newer version of the Backbone and we have a small issue with the new version. We can fix the issue quite easily, but as I searched a reason for it, I begun to think that is this `modelId` functionality of the Collection valid idea at all? (A related commit can be found [here](https://github.com/jashkenas/backbone/commit/4e2d20918f091b2f989a0baf85a12813a414e2f0))\r\n\r\nSo the issue is that one cannot use the `get` function of Backbone.Collection if the `model` property of the collection is not set and models inside the collection have a `idAttribute` overridden.\r\n\r\nE.g. following code logs `undefined`, although I would expect it to log the model object (code \"works\" in the version 1.1.2)\r\n\r\n```javascript\r\nvar MyModel = Backbone.Model.extend({ \r\n\tidAttribute: 'myid'\r\n});\r\nvar m = new MyModel({myid:'xxx'});\r\nvar c = new Backbone.Collection([m]); \r\nvar byId = c.get(m.id); \r\nconsole.log(byId); // byId is undefined\r\n```\r\n\r\nIf I define the `model` property for a collection, it works as I expect, but I think that a collection should not _need_ to know about models it contains.\r\n\r\nI think that `modelId` functionality breaks quite a fundamental behavior (get by id) to solve an edge case issue. And if this functionality is valid, I think that a [API documentation](http://backbonejs.org/#Collection-get) should mention that the `model` of the Collection must be defined.\r\n\r\nWhat do you think?\r\n\r\nAnd **thank** you for your work, you have made the world better.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4105",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4105/comments",
    "title": "Call Model.parse on every page load, not just the first",
    "created_at": "2016-11-28T13:32:20Z",
    "updated_at": "2016-11-28T17:42:51Z",
    "body": "We overrode model.parse() to sanitise (escape) our HTML from the server before displaying it on the browser.\r\n\r\n**But why does Backbone call model.parse only the first time the page loads?**  I've looked at our code and nothing else is overriding our parse method, and nothing is caching the data.  What is happening?\r\n\r\nHere's the code:\r\n```javascript\r\n  Backbone.Model.prototype.parse = function(resp, options) {\r\n    return escapeStringsRecursively(resp);\r\n  }\r\n\r\n  function escapeStringsRecursively(o) { //https://github.com/wesleytodd/recursive-escape/blob/master/index.js\r\n    if (typeof o === 'undefined' || o === null)\r\n      return o;\r\n    if (o instanceof Array)\r\n      for (var i = 0; i < o.length; i++) {\r\n        o[i] = escapeStringsRecursively(o[i]); }\r\n    else if (typeof o === 'object')\r\n      for (var i in o) {\r\n        if (o.hasOwnProperty(i))\r\n          o[i] = escapeStringsRecursively(o[i]); }\r\n    else if (typeof o === 'string')\r\n      o = _.escape(o);\r\n    return o;\r\n  }\r\n```\r\n\r\nYou can see in the .gif below when I first load the page my parse method catches strings with `script` in them and escapes them to the screen with nice HTML. Then I navigate to another page and return. Now the method never fires, the page is broken, and the script tags have run console.errors\r\n\r\n![test](https://cloud.githubusercontent.com/assets/5468805/20670004/9f998c90-b57f-11e6-8522-577c8c0cc5a1.gif)\r\n\r\nI logged a SO question here too in case someone can help: http://stackoverflow.com/questions/40842209/how-to-html-escape-strings-from-the-server-in-backbone-js"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4103",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4103/comments",
    "title": "Seeking for model with `attributes` key in collection",
    "created_at": "2016-11-24T10:33:41Z",
    "updated_at": "2016-12-01T21:02:32Z",
    "body": "When I tried to add objects like ```{id: 'some_id', attributes{}}``` to a collection multiple times, I got many such objects in this collection. All created models were with similar ```id```.\r\nI discovered it happens because a bit inaccurate in ```Backbone.Collection.get``` method - it seeks for ```id``` in ```obj.attributes``` without checking ```obj``` is a Model instance.\r\nI think, such check should be added there."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4102",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4102/comments",
    "title": "Collection's byId lookup is used inconsistently",
    "created_at": "2016-11-22T07:03:13Z",
    "updated_at": "2016-11-28T18:43:31Z",
    "body": "The typical behavior for `byId` is to store a model by `id` as determined by the model's implementation of `modelId` and/or by `cid` (for Backbone's convenience) . In most places this is fine, except for here:\r\n\r\n> https://github.com/jashkenas/backbone/blob/master/backbone.js#L1000\r\n\r\nThe issue here is that by using `obj` to access `byId`, `obj` is effectively bypassing access with `id` which should have higher priority considering it is the documented methodology: http://backbonejs.org/#Collection-modelId.\r\n\r\n`id` and `cid` should have precedent over `toString`. Anyone who inadvertently implements `toString` to create collisions may have an interesting time determining how they suddenly have missing or merged models within their collections.\r\n\r\n**Tested here: https://jsfiddle.net/5kn7vqx0/5/**\r\n\r\nNow - I am willing to concede my scenario is peculiar but the change is both small and more accurate to the documentation. "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4100",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4100/comments",
    "title": "Not an issue but a question  on registrator/consul",
    "created_at": "2016-11-15T18:16:37Z",
    "updated_at": "2016-11-15T18:30:45Z",
    "body": "What makes the registrator skip the mesos-agent for consul entry?\r\n\r\nI get the following output (docker ps)\r\n{\"consul\":[],\"marathon\":[],\"mesos-master\":[], \"zookeeper-2181\":[],\"zookeeper-2888\":[],\"zookeeper-3888\":[]}\r\n\r\nAlso, there isn't any entry for weaveworks/scope task that is running? Isn't that app listening on any port?"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4099",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4099/comments",
    "title": "Broken links",
    "created_at": "2016-11-15T14:57:49Z",
    "updated_at": "2016-12-27T12:02:28Z",
    "body": "Main page http://backbonejs.org  \r\n\r\n-   [\tJasmine](http://pivotal.github.io/jasmine/)\r\n-  [\tjQuery templates](http://api.jquery.com/category/plugins/templates/)\r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4098",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4098/comments",
    "title": "model.fetch",
    "created_at": "2016-11-15T10:51:52Z",
    "updated_at": "2017-02-23T17:50:01Z",
    "body": "This is not new but I thought I would re-raise it.  There needs to be a way to use model.fetch to fetch only what is on the server.  The fact it merges with what the client already has (actually this isn't really true), is a big problem.  When I do a fetch, I expect the model returned to be the model fetched.\r\n\r\nIf anyone has a work around I'd like to hear it.  "
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4097",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4097/comments",
    "title": "Collection Docs: Missing note about parse option",
    "created_at": "2016-11-09T22:58:58Z",
    "updated_at": "2017-12-13T15:05:22Z",
    "body": "On the [Model docs](http://backbonejs.org/#Model), there is this note:\r\n\r\n> If `{parse: true}` is passed as an option, the attributes will first be converted by parse before being set on the model.\r\n\r\nThis appears to be true on [Collections](http://backbonejs.org/#Collection) as well, but is not documented."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4096",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4096/comments",
    "title": "Promise as argument of Collection add, remove, reset, set methods",
    "created_at": "2016-11-09T06:05:48Z",
    "updated_at": "2016-11-14T15:42:14Z",
    "body": "What would you say if add ability to pass to Collection methods not only plain objects, arrays and models, but also promise. Just add code like this to each method\r\n```javascript\r\nadd: function(models, options) {\r\n  //...\r\n  if (typeof models.then === 'function') {\r\n    var self = this;\r\n    return models.then(function (models) {\r\n      return self.set(models, options);\r\n    });\r\n  }\r\n  //..\r\n}\r\n```\r\nand so we can do\r\n```javascript\r\nusers.add($.get('/users'));\r\n```\r\nvery useful if you decided to change some of your methods from sync to async like\r\n```javascript\r\nUser = Model.extend({\r\n  getProducts: function () {\r\n    // was\r\n    return products.where({user_id: this.get('id')});\r\n    // become\r\n    return $.get('/products', {user_id: this.get('id')});\r\n  }\r\n});\r\n\r\n// but code same for sync and async\r\nbag.add(user.getProducts());\r\n```"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4095",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4095/comments",
    "title": "[Webpack][Babel] TypeError: _backbone2.default.LayoutView is undefined",
    "created_at": "2016-11-08T17:22:36Z",
    "updated_at": "2016-11-09T03:39:52Z",
    "body": "**App.js**\r\n\r\n```\r\nimport Marionette from 'backbone.marionette';\r\nexport default Marionette.Application.extend({\r\n  region: '#app',\r\n  initialize() {\r\n    var AppLayoutView = Marionette.LayoutView.extend({\r\n      template: \"#layout-view-template\",\r\n      el: \"#app-modals\",\r\n      regions: {\r\n        menu: \"#menu\",\r\n        content: \"#content\"\r\n      }\r\n    });\r\n    \r\n    var layoutView = new AppLayoutView();\r\n   \r\n    \r\n    this.on('start', () => {\r\n      console.log(\"OnStart\");\r\n       layoutView.render();\r\n    })\r\n  }\r\n});\r\n```\r\n**package.json**\r\n```\r\n{\r\n  \"name\": \"your-app\",\r\n  \"description\": \"Description\",\r\n  \"author\": \"Your Name\",\r\n  \"version\": \"0.0.1\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"webpack-dev-server\",\r\n    \"prebuild\": \"rm -rf ./public/\",\r\n    \"build\": \"npm run && webpack -p\",\r\n    \"lint\": \"eslint app\",\r\n    \"test\": \"echo test\"\r\n  },\r\n  \"dependencies\": {\r\n    \"backbone\": \"~1.3.3\",\r\n    \"backbone.marionette\": \"^3.1.0\",\r\n    \"bootstrap\": \"^3.3.7\",\r\n    \"file-loader\": \"^0.9.0\",\r\n    \"handlebars\": \"^4.0.5\",\r\n    \"handlebars-loader\": \"^1.4.0\",\r\n    \"i18next\": \"^3.5.1\",\r\n    \"jquery\": \"~1.12.2\",\r\n    \"underscore\": \"^1.8.3\",\r\n    \"url-loader\": \"^0.5.7\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"babel-core\": \"^6.18.2\",\r\n    \"babel-loader\": \"^6.2.7\",\r\n    \"babel-preset-es2015\": \"^6.18.0\",\r\n    \"copy-webpack-plugin\": \"^1.1.1\",\r\n    \"css-loader\": \"^0.23.1\",\r\n    \"eslint\": \"^2.11.1\",\r\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\r\n    \"style-loader\": \"^0.13.1\",\r\n    \"stylus\": \"^0.54.5\",\r\n    \"underscore-template-loader\": \"^0.7.2\",\r\n    \"webpack\": \"^1.12.15\",\r\n    \"webpack-dev-server\": \"^1.16.2\",\r\n    \"webpack-merge\": \"^0.15.0\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n**webpack.config.js**\r\n\r\n```\r\nmodule: {\r\n    loaders: [\r\n      {\r\n        test: /\\.js?$/,\r\n        exclude: /node_modules/,\r\n        loader: 'babel',\r\n        query: {\r\n        //presets: [\"es2015\"],\r\n\r\n          presets: [\r\n                [\r\n                \"es2015\",\r\n                  {\r\n                      \"module\": false\r\n                  }\r\n                ]\r\n          ],\r\n          \r\n          plugins: [\r\n                [\"transform-es2015-modules-commonjs\", {\r\n                  \"allowTopLevelThis\": false,\r\n                  \"strict\": false,\r\n                  \"loose\": true\r\n                }],\r\n                \"transform-es3-property-literals\",\r\n                \"transform-es3-member-expression-literals\"\r\n          ]\r\n         \r\n          /*\r\n          plugins: [\r\n            \"transform-es3-property-literals\",\r\n            \"transform-es3-member-expression-literals\"\r\n          ]\r\n          */\r\n        }\r\n      },\r\n```\r\nTried all the possible settings of Babel\r\n\r\n**Conslole**\r\n_TypeError: _backbone2.default.LayoutView is undefined\r\ninitialize()\r\nMarionetteObject()\r\nconstructor()\r\nextend/child()_\r\n\r\n**app.js**\r\n\r\n```\r\n/* 76 */\r\n/***/ function(module, exports, __webpack_require__) {\r\n\r\n\t'use strict';\r\n\t\r\n\texports.__esModule = true;\r\n\t\r\n\tvar _backbone = __webpack_require__(77);\r\n\t\r\n\tvar _backbone2 = _interopRequireDefault(_backbone);\r\n\t\r\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\r\n\t\r\n\texports['default'] = _backbone2['default'].Application.extend({\r\n\t    region: '#app',\r\n\t\r\n\t    initialize: function initialize() {\r\n\t        var AppLayoutView = _backbone2['default'].LayoutView.extend({\r\n```\r\n\r\nIf use a View - it works:\r\nApp.js :\r\n`var AppLayoutView = Marionette.View.extend({`\r\nConsole:\r\n_OnStart_"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4093",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4093/comments",
    "title": "Collection update issue",
    "created_at": "2016-10-28T21:29:58Z",
    "updated_at": "2016-10-30T20:32:44Z",
    "body": "Hello,\n\nI have come across an issue when fetching a collection. This appears in a certain scenario, as described below. I must say that I am not very experienced in JS, but I think I managed to track the location of the issue.\n\nScenario:\n1. I fetch 3 objects from the server - everything OK\n2. I fetch 0 objects from the server - everything OK\n3. I fetch again 3 objects from the server - everything OK\n4. I fetch 1 of the 3 objects from the server - here I discovered the bug\n\nAt this point in time the list contains 3 objects:\ncid: c16 - id: 57\ncid: c17 - id: AA\ncid: c18 - id: AD\nA new object is added:\ncid: 25 - id: 57\n\nIn the _byId object cache one entry for cid 25 is added (as the one by Id already exists).\n\nThen the collection attempts to remove the previous 3 objects from the list, so it should remove objects with keys: c16, c17, c18, AA, AD and 57 (this last one I am not sure, because the newly added object has the id 57).\n\nIn method _removeModels, when calling:\n`var model = this.get(models[i]);`\nmodels[i] is the object with cid c16, but the result of this get function is the object with cid 25 (the newly added object), so the c16 object remains in the list and the newly added object is removed.\n\nThe visible side-effect of this bug (how I stumbled on it) is that after such ghost entries remain, when I fetch an empty collection from the server, these ghost objects remain in the collection.\n\nHere's a printscreen of the debug session where I think that the issue lies.\n<img width=\"1016\" alt=\"screen shot 2016-10-28 at 23 57 10\" src=\"https://cloud.githubusercontent.com/assets/23128666/19822970/e1923d0a-9d6e-11e6-8171-6c8c6a5d65ac.png\">\n\nI don't really know how to solve this, but I guess a better mechanism in the \"get\" method would fix it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4090",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4090/comments",
    "title": "how to Replacing \"#\" Routes  Using Backbone.js",
    "created_at": "2016-10-24T11:08:22Z",
    "updated_at": "2016-10-25T16:12:01Z",
    "body": "E.g:\nin router.js\n`routes: {\n            \"\": \"home\",\n            \"first\": \"first\"\n        },\n.....`\n\nin page:\n\n`<a href=\"#\">home</a>\n<a href=\"#first\">link first page</a>`\n\nin brower URL:www.domain.com/#first;\nbut i want to get \nURL:www.domain.com/first;\n in brower  Address Bar.\nhow to replacing \"#\" in routes. \n\nthanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4087",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4087/comments",
    "title": "\"update\" event on collection reset",
    "created_at": "2016-10-12T10:39:49Z",
    "updated_at": "2016-10-12T19:44:24Z",
    "body": "From the docs\n\n`\n\"update\" (collection, options) \u2014 single event triggered after any number of models have been added or removed from a collection\n`\n\nI would expect the `update` event to be fired whenever a collection is reset (in addition to the `reset` specific event) since `update` event is independent of how models were added/removed from the collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4086",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4086/comments",
    "title": "If someone adds an Array.prototype.unset method, things break.",
    "created_at": "2016-10-06T19:45:34Z",
    "updated_at": "2016-10-06T19:52:46Z",
    "body": "We just spent some time tracking down a bug on a site where some of our third-party javascript wasn't working properly. Specifically, when creating a Backbone Model object and passing some attributes to inherit, the attributes never ended up on the object.\n\nAfter investigation, we found that the site owner was extending the `Array.prototype` with an `unset` function:\n\n[![https://gyazo.com/324f11d004d78c0f17f1c410776ff0a6](https://i.gyazo.com/324f11d004d78c0f17f1c410776ff0a6.png)](https://gyazo.com/324f11d004d78c0f17f1c410776ff0a6)\n\nThe `set` function takes [options](https://github.com/jashkenas/backbone/blob/master/backbone.js#L469) that can contain an `unset` [property](https://github.com/jashkenas/backbone/blob/master/backbone.js#L487). In our code, we happen to be passing an array of objects as the `options` parameter. Whether this is supported by Backbone or not, I'm unsure, but I think we have wrapped `Backbone.Model` in something that can consume those options downstream.\n\nAnd obviously the most immediate answer is \"stop extending built-ins\". But since us third-party-javascripters rarely have a say in the environment in which our code runs, I figured it was worth it to open an issue.\n\nAnyways, here's a [jsbin](https://jsbin.com/camuyijoza/1/edit?html,js,console) where you can see the problem.\n\nHopefully this helps somebody :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4085",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4085/comments",
    "title": "Backbone navigate - url encode in different language with diacritics",
    "created_at": "2016-10-06T08:17:06Z",
    "updated_at": "2016-11-27T22:15:40Z",
    "body": "I have a search form that redirects the user to `search/thetermusersearched` where `thetermusersearched` is the exact value he entered. All this with the navigate function provided by Backbone.\n\nThis is all fine when I use strings in English (masa de calcat), but when I add diacritics in the input (mas\u0103 de c\u0103lcat) I get the route function fired twice.\n\nThe problem I have is in Firefox and Safari (the later in Mac and iOS)\n\nI tried using `encodeURI` and `encodeURIComponent` when I use the `navigate`, but no success.\n\n---\n\nHTML\n\n```\n<div id=\"view-goes-here\">\n    <a href=\"#\" data-string=\"masa de calcat\">One alert</a>\n    <a href=\"#\" data-string=\"mas\u0103 de c\u0103lcat\">Two alerts</a>\n</div>\n```\n\n---\n\nJS\n\n```\n    var R = Backbone.Router.extend({\n        routes: {\n            'results/:query': 'results'\n        },\n        results: function(query) {\n            alert('Route triggered: ' + decodeURIComponent(query));\n        }\n    });\n    var myR = new R;\n    Backbone.history.start();\n\n    $(function(){\n      $('a').on('click', function(e){\n       e.preventDefault();\n       var href = $(this).data('string');\n       href = 'results/' + encodeURIComponent(href);\n       console.log(href);\n       myR.navigate(href, {trigger: true});\n      })\n    })\n```\n\n---\n\nSee fiddle here: http://jsfiddle.net/adyz/qcged76e/4/\n\nAny thoughts on this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4084",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4084/comments",
    "title": "static site output question",
    "created_at": "2016-10-06T01:37:05Z",
    "updated_at": "2016-10-06T19:58:07Z",
    "body": "is it possible to enable a static output of a backbone app? a common example would be for github pages.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4082",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4082/comments",
    "title": "JQuery not present as a dependency in package.json / bower.json",
    "created_at": "2016-10-03T16:28:46Z",
    "updated_at": "2016-10-04T09:56:01Z",
    "body": "Installing backbone as a dependency trough npm, doesn't raise any warning about the fact that requires a peer dependency or directly installing it.\nWould be nice to have jquery as a peerDependency or dependency in package.json / bower.json files.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4081",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4081/comments",
    "title": "Modularize Backbone",
    "created_at": "2016-09-29T18:44:00Z",
    "updated_at": "2016-09-29T19:30:42Z",
    "body": "Can we modularize backbone so that we can pick only 'model' and 'collection' leaving 'views', 'history' etc. out?\nFor example, if we want to use backbone.js base projects in react-native, it would make life much easier, to leave views and history and hence all subsequent dependencies such as jquery.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4080",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4080/comments",
    "title": "Neo4j Country , State , City modelling",
    "created_at": "2016-09-29T12:45:20Z",
    "updated_at": "2016-09-29T13:47:17Z",
    "body": "I'm a building a registration form for my website(it is using Neo4j) and need to populate the country, state and city field. All these fields are inter-linked i.e depending on country, state field will be set and depending on state city will be set. I'm trying to figure out what's the best approach to model this using Neo4j. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4079",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4079/comments",
    "title": "After using extend function, the child name is not appropriate ",
    "created_at": "2016-09-27T08:37:59Z",
    "updated_at": "2016-09-27T09:08:31Z",
    "body": "As in the definition of var extend = function(protoProps, staticProps) , \n`child = function(){ return parent.apply(this, arguments); };`\nthe return child function's name is set as 'child'.\n\nThus, any new object created by the child function, when you inspect them in Chrome, the name of constructor is displayed as 'child'. \n![image](https://cloud.githubusercontent.com/assets/5484463/18865690/da5e3704-849c-11e6-9aeb-39b941b75d0a.png)\n\nWould it be better to display the name of constructor using parent constructor's name ?\n\nFrom my point of view, it gives developers intuitive overview what the object essentially is. In previous case, \"Backbone.Collection\" should be displayed after todos.\n![image](https://cloud.githubusercontent.com/assets/5484463/18866868/00622fc8-84a2-11e6-8654-aa457ec9f6c0.png)\nBecause \n![image](https://cloud.githubusercontent.com/assets/5484463/18866853/f3c18c3c-84a1-11e6-8e22-9a5b728c2ac5.png)\n\nI was using the todo list example http://todomvc.com/examples/backbone/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4077",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4077/comments",
    "title": "How to disable futuredate in datepicker for Date field in odoo9?",
    "created_at": "2016-09-19T13:10:34Z",
    "updated_at": "2016-09-20T04:53:20Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4076",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4076/comments",
    "title": "when will the var changing be true at line527",
    "created_at": "2016-09-18T11:01:45Z",
    "updated_at": "2016-09-19T22:04:49Z",
    "body": "This could be a naive issue as I'm not quite good at JavaScript and backbone.\n\nI changed the the line527 as below, and play with it for a while, and never throw the exception.\n`if (changing) { throw \"the changing is changed, WOW . . . I thought this ex won't be trigerred anyway\"; return this; }\n`\n\nthe variable 'changing' won't be true at line527 unless we assign true to it. there is just one assignment in the set function at line 490:\n`var changing   = this._changing;\n      this._changing = true;`\n\nbut the this._changing is always false unless we assign true to it, i can see it's assigned to true at line 491, but it's assigned to false again at line536:\n`this._changing = false;`\n\nthere is one way to skip this asssignment, that's to return at line527:\n`if (changing) return this;`\n\nunforturnetly, the changing is always set to false at the beginning. \n\nthis looks like a evil loop. \n\nand I went through the whole file and only found another place where use the variable _changing at line566 function changedAttributes, but it's just an read operation so won't have an impact on its' value. \n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4074",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4074/comments",
    "title": "Could not start Selenium session: Failed to start new browser session: Error while launching browser",
    "created_at": "2016-09-13T10:55:41Z",
    "updated_at": "2016-09-13T14:08:13Z",
    "body": "java.lang.RuntimeException: Could not start Selenium session: Failed to start new browser session: Error while launching browser at \ncom.thoughtworks.selenium.DefaultSelenium.start(DefaultSelenium.java:109) at com.java.abs.Top.setUp(Top.java:18) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31) at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184) at org.junit.runners.ParentRunner.run(ParentRunner.java:236) at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197) Caused by: com.thoughtworks.selenium.SeleniumException: Failed to start new browser session: Error while launching browser at com.thoughtworks.selenium.HttpCommandProcessor.throwAssertionFailureExceptionOrError(HttpCommandProcessor.java:109) at com.thoughtworks.selenium.HttpCommandProcessor.doCommand(HttpCommandProcessor.java:103) at com.thoughtworks.selenium.HttpCommandProcessor.getString(HttpCommandProcessor.java:272) at com.thoughtworks.selenium.HttpCommandProcessor.start(HttpCommandProcessor.java:234) at com.thoughtworks.selenium.DefaultSelenium.start(DefaultSelenium.java:100) ... 25 more\n\n I used FF 42.0,\n selenium-java-2.43.0,\n selenium-server-standalone-2.21.0 . \nBut it gives this error \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4073",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4073/comments",
    "title": "Model id not indexed in _byId when Collection.model is a constructor",
    "created_at": "2016-09-09T12:40:22Z",
    "updated_at": "2016-09-09T16:47:05Z",
    "body": "The `model` attribute of a `Collection` can be either a model class or a constructor (function), as per http://backbonejs.org/#Collection-model.\n\nA collection obtains the identifier of a model using `modelId`, as below:\n\n`modelId: function(attrs) {\n    return attrs[this.model.prototype.idAttribute || 'id'];\n},`\n\nIf `model` is a function, then the above reference to `this.model.prototype.idAttribute` is invalid. The effect of defining a function for the `model` attribute is that `Collection.get()` no longer works as expected because model identifiers are not retrieved and stored in `Collection._byId`.\n\n(Including @Pleochism for updates on this issue.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4072",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4072/comments",
    "title": "Backbone not attached to global in node environment",
    "created_at": "2016-09-06T12:10:04Z",
    "updated_at": "2016-09-06T15:42:02Z",
    "body": "backbone.js:27 has:\n<code>factory(root, exports, _, $);</code>\n\nShould it be:\n<code>var root.Backbone = factory(root, exports, _, $);</code>\n\nCouldn't get it work otherwise.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4071",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4071/comments",
    "title": "Splunk Http search",
    "created_at": "2016-08-29T15:01:18Z",
    "updated_at": "2016-08-29T17:12:34Z",
    "body": "What does the code 1118 stand for next http 500 thank you\n\n![untitled](https://cloud.githubusercontent.com/assets/21313121/18055783/f0f78070-6e11-11e6-84f7-f980d16430a3.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4070",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4070/comments",
    "title": "Use short Backbone name",
    "created_at": "2016-08-29T10:38:49Z",
    "updated_at": "2016-08-29T12:11:19Z",
    "body": "What about using short Bb name like it used in marionette.js https://github.com/marionettejs/backbone.marionette/blob/master/lib/backbone.marionette.js#L14\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4069",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4069/comments",
    "title": "How to stop listening and resuming listening for event X when using different objects?",
    "created_at": "2016-08-22T10:51:09Z",
    "updated_at": "2016-08-24T01:13:18Z",
    "body": "That's a tricky questions I am stuck with in my app. Let me get straight to the example:\n\n``` js\n        objectA.listenTo(submitButtonField, 'click:field', function(e) {\n            // code here still gets executed but I don't want to\n        })        \n\n        objectB.listenTo(submitButtonField, 'click:field', function(e) {\n            objectB.stopListening(submitButtonField, 'click:field')\n        })        \n```\n\nYou see, I have two different objects (in my app in different controllers/namespaces) but both having the same reference to the same button field and both listening to the click event.\n\nObject B does stop listening and I want this to stop object A from listening to these click event as well. But no, object A still listens to them.\n\nAny trick how I can do this? To tell everyone to stop to listen? (also will need the capability to resume listening for all objects)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4068",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4068/comments",
    "title": "Adding a Responsive image (React Native)",
    "created_at": "2016-08-22T08:10:39Z",
    "updated_at": "2016-08-22T13:33:40Z",
    "body": "I did the the installation for a Responsive image for React Native:\n\nnpm install react-native-responsive-image --save\n\nWhen I try to run this file its not working. What am I doing wrong?\n\n<img width=\"884\" alt=\"screen shot 2016-08-22 at 2 13 30 am\" src=\"https://cloud.githubusercontent.com/assets/20943614/17847972/2937caf8-680e-11e6-81ac-ac6c61cfa7fa.png\">\n<img width=\"376\" alt=\"screen shot 2016-08-22 at 2 37 29 am\" src=\"https://cloud.githubusercontent.com/assets/20943614/17848566/6edb7d36-6811-11e6-9a85-bffdecb1e7e2.png\">\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4067",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4067/comments",
    "title": "Web Application slowness duting access through Juniper.",
    "created_at": "2016-08-18T09:51:16Z",
    "updated_at": "2016-08-19T20:43:31Z",
    "body": "Web Application slowness duting access through Juniper.\n\nOur application on MVC.Net with angular and on database level we are using Sql server 2012 also we are using Entity Framework 6 as ORM tool. We are using database first approach.\n\nWe have two dashbaord in which we are showing lots of data in widgets (count), grid binding and pie and bar charts as well. We did changes like bundling, minification, gzip compression, caching etc to improve the perfomance of application (dashboard pages). We are facing issues on dashboard page which are landing page as well.\n\nWhen we run our application on local as well as client intranet envriroment. Performance is quite well.\n\nWhen we try to open application from internet thorugh Juniper (as VPN) its takes atleast 1.5 to 2 minutes to load the dashboard. And on intranet client server and local server it takes 8-10 seconds only.\n\nWe also find it on juniper our js and some other resources not comes from cache but in local and client intranet its comes cache.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4066",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4066/comments",
    "title": "Implement own method to sort collection",
    "created_at": "2016-08-16T07:31:59Z",
    "updated_at": "2016-08-16T16:26:31Z",
    "body": "According to the codebase we sort collection using Array.prototype.sort which is not guaranteed to use stable sort algorithm. It leads to problems in Chrome while sorting table column with only empty values. \n\nCodebase:\n\n```\n   sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator); //unstable Array.prototype.sort\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n```\n\nExample test case:\n\n```\nArray(1000).fill(1).map(function(item, index) { return {id: index, n: ''} }).sort(function() { return 0 })\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4065",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4065/comments",
    "title": "How about automatic commit message style validation?",
    "created_at": "2016-08-15T13:04:39Z",
    "updated_at": "2016-09-07T19:13:25Z",
    "body": "If you look at commit history of projects like [agnuar.js](https://github.com/angular/angular.js/commits/master) or [jquery](https://github.com/jquery/jquery/commits/master), you will notice that they use a consistent commit message style. Would you perhaps like to do the same?\n\nOne way to support a single commit message style is to have git perform the check via a hook, like so:\n\n![record_ember](https://cloud.githubusercontent.com/assets/962850/17145358/ddf91c8e-536a-11e6-8087-03e36cb05811.gif)\n\nThe process shown above is done via an npm module `commitplease` ([npm](https://www.npmjs.com/package/commitplease), [github](https://github.com/jzaefferer/commitplease)). It checks your commit message and tells you if it is a poor one (long lines, bad first line and so on). Commitplease is used by  jQuery Core, jQuery UI, jQuery Mobile, Globalize, QUnit and others. It is as simple as\n\n`npm install commitplease --save-dev`\n\nIf you are interested, let me know what you think. Disclaimer: I help develop commitplease.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4064",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4064/comments",
    "title": "As of 1.3.0-1.3.3, you can no longer bind \"change\" events to be notified when any model in the collection has been modified.",
    "created_at": "2016-08-08T17:55:27Z",
    "updated_at": "2016-08-08T18:19:59Z",
    "body": "Here is a CodePen demonstrating the old behavior: http://codepen.io/andrewkfiedler/pen/ZOmXON?editors=0010\nHere is a CodePen demonstrating the new behavior: http://codepen.io/andrewkfiedler/pen/BzGwwV?editors=0010\n\n```\n(function() {\n  MyCodePen = {\n    data: {\n      books: [{\n        author: \"Barry Eisler\",\n        title: \"A Clean Kill in Tokyo\"\n      }]\n    }\n  };\n})();\nvar Book = Backbone.Model.extend({\n  defaults: {\n      author: \"\",\n      title: \"\"\n  }\n});\nvar Books = Backbone.Collection.extend({\n  model: Book,\n  initialize: function(){\n    this.listenTo(this, 'change:author', function(){\n      alert('author changed');\n    })\n  }\n});\nvar myBooks = new Books(MyCodePen.data.books);\nmyBooks.first().set('author', 'test');\n```\n\nIn previous versions of Backbone, an alert would pop up (as seen in the codepen).  However, updating to the latest Backbone (1.30 and above) causes no alert to pop up.\n\nBased on the documentation (http://backbonejs.org/#Collection), it appears to be a bug.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4063",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4063/comments",
    "title": "The ES6 `super` keyword is unintuitively limited (Backbone example)",
    "created_at": "2016-08-02T19:40:27Z",
    "updated_at": "2016-09-07T19:14:29Z",
    "body": "The following simply fails, even if the following `SomeBackboneClass` contains the `someMethod` method:\n\n``` js\nSomeBackboneClass.extend({\n  someMethod() {\n    super.someMethod() // will look for `super.someMethod` on Object.prototype, unintuitively!\n  }\n})\n```\n\nMore details at https://www.reddit.com/r/javascript/comments/4vuctx/why_the_es6_super_keyword_stinks/.\n\nI believe a dynamic `super` (like `this` is) would be [much better](https://esdiscuss.org/topic/the-super-keyword-doesnt-work-as-it-should).\n\nIt would be appreciated if anyone interested will post their replies and thoughts. :]\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4062",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4062/comments",
    "title": "collection.fetch().abort()?",
    "created_at": "2016-07-28T07:31:52Z",
    "updated_at": "2017-06-13T16:31:29Z",
    "body": "with jquery-1.8.x, collection.fetch() call $.ajax and return xhr object ,it has method abort,\nbut jquery-1.11.x , $.ajax return promise object , no abort method with this object,\nso what can i do to cancel this request\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4059",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4059/comments",
    "title": "why is %20 turned into a space when using Router.navigate?",
    "created_at": "2016-07-14T23:32:00Z",
    "updated_at": "2017-03-28T17:47:32Z",
    "body": "This issue has been here for a while, I couldn't find anything issues, so I went ahead and made a test repo. Was hoping you could provide some insight as to why %20s are being turned into spaces.\n\nhttps://github.com/davis/backbone-router-test\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4058",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4058/comments",
    "title": "Feature suggestion: Ability to transform model attributes before saving",
    "created_at": "2016-07-14T21:37:17Z",
    "updated_at": "2016-07-19T03:39:49Z",
    "body": "It would be nice to have an analogous method to `.parse()` that, when I call `.save()` is used to transforms a model's attributes into the form expected by my server.\n\nFor the case where I have an API response that represents data differently than I would like it represented in my model, I can implement a `.parse()` method to translate the API response into reasonable model attributes. However, when I want to persist that data back to the server, I don't currently see any reasonable way to translate it _back_ into the schema that the server expects.\n\nThe only options I currently see is to implement my own `.toJSON()` method. This would work, but `.toJSON()` is already used in marionette for passing model attributes to the template and the object I want to send to the server, is not the same as the object I would like in my template.\n\nA more involved solution would be to create my own `.sync()` method, but that feels like overkill for something that _seems_ to me like a common need.\n\nIs there some other way of achieving this goal? Is the fact that I need to transform my attributes in order to persist them unusual or an indicator of some other anti-pattern?\n\n`.parse()`:`.fetch()`::`.proposedMethod()`:`.save()`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4057",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4057/comments",
    "title": "Object returned by changedAttributes is missing object methods.",
    "created_at": "2016-07-06T18:48:04Z",
    "updated_at": "2016-07-10T18:03:59Z",
    "body": "When I call `model.changedAttributes()`, the object that is returned lacks typical object methods such as `hasOwnProperty`.\n\n`typeof` returns the type `object`, the inspector recognizes it as an object and parses it correctly.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4056",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4056/comments",
    "title": "ie10 & safari backbone's router not normal work, when i refresh page in browser",
    "created_at": "2016-06-27T02:02:53Z",
    "updated_at": "2016-06-29T18:31:45Z",
    "body": "first request page,router has work; i refresh page ,it router's routes has not work;\nex: \nhttp:/xxx/index.html#sc\nroutes:\"sc\" : 'simulationComb',\n## this is function (simulationComb) has not work;\n\nwhy not normal work?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4054",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4054/comments",
    "title": "How can I know this event is not triggered in Backbone events",
    "created_at": "2016-06-20T05:26:37Z",
    "updated_at": "2016-06-20T18:58:02Z",
    "body": "I am actually using Backbone events with React.js. I want to save something if a particular Backbone event triggered otherwise I want to save something else. How can I do it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4053",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4053/comments",
    "title": "Upgrade to QUnit 2.0.",
    "created_at": "2016-06-18T20:12:37Z",
    "updated_at": "2016-06-20T20:18:26Z",
    "body": "QUnit 2.0 is out \ud83d\ude4c .\n\nIt looks like there will have to be a handful of tweak to get it working with Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4052",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4052/comments",
    "title": "Collection#create returns model that was created, why not follow the convention that model#save returns?",
    "created_at": "2016-06-15T19:38:16Z",
    "updated_at": "2016-07-30T05:48:09Z",
    "body": "I have been recently learning Backbone and Marionette and I've thankfully getting the hang of it. Very nice implementation.\n\nAnyways, I was curious on why collection#create returns the model that was created where as model#save returns a jqXHR as per the docs. Is there something similar that does the same? I was hoping that the convention would be the same, but I understand that collection#create, as the docs state, \"Equivalent to instantiating a model with a hash of attributes, saving the model to the server, and adding the model to the set after being successfully created. Returns the new model. If client-side validation failed, the model will be unsaved, with validation errors.\" If the model was successfully created and added to the collection, why does it return the model created and not the jqXHR when a model was successfully saved? \n\nThis was brought to my attention when I was trying to handle some asynchronous responses on collection model creation. I was having issues waiting for the model to be created in the same fashion as I handle the jqXHR on model#save upon success by using $.when(call). Instead, I have to pass in a success and fail options params to the collection#create method in order to receieve a proper callback. I'm sure having two ways it not that big of the deal however I was hoping for some understanding on the difference. Otherwise, would it be possible to return the jqXHR of the model being returned? Or in another fashion perhaps?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4048",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4048/comments",
    "title": "setting root Backbone.History.Start not working with cordova?",
    "created_at": "2016-06-14T03:58:07Z",
    "updated_at": "2016-06-21T01:15:13Z",
    "body": "I recently upgraded from Backbone 1.1.2 to 1.3.3. I noticed that my cordova app stopped working. It couldn't start the router. I tracked it down to `Backbone.history.start({root: \"/app/\"})`. When I remove the `{root: \"/app/\"}` it starts the router just fine. Before the upgrade adding the root just magically worked even though my cordova app was just at index.html#. What changed? Is there a work around?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4044",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4044/comments",
    "title": "Repository has modified files immediately after cloning it",
    "created_at": "2016-06-13T17:21:25Z",
    "updated_at": "2016-06-13T18:22:25Z",
    "body": "It looks like someone submitted something that is confusing this repository. If you clone the repository, it will clone with modified files in it. You cannot checkout tags, or do anything with the repository. This is breaking continuous integration that is using this repository. \n\nThis commit is causing git to modify these files on clone. https://github.com/jashkenas/backbone/commit/1bb06dba0668fdfdfc11dfcfa21224075c23f7f0\n\nCan someone please fix this so that people can clone this repository correctly again? Or suggest how one might go about getting this to work with their system?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4039",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4039/comments",
    "title": "Add destroy/deconstructor for Backbone.Events",
    "created_at": "2016-06-03T15:37:36Z",
    "updated_at": "2016-06-06T15:44:34Z",
    "body": "Doesn't it make sense to have `Backbone.Events` objects automatically call `off` (with no arguments; to unregister all `once` and `on` handlers) when being destroyed?\n\nParticularly, this is useful for `Backbone.View` objects (or `Backbone.Model` objects, though I haven't run into a use case for this) that listen to themselves (mainly, when using Marionette's views/trigger methods).\n\nThis could be done by having the `Backbone.View`'s `destroy` call `off`, but the refactor to give `Backbone.Events` a deconstructor seems a better solution to me.\n\nFor now, I've been using `listenTo`/`listenToOnce` instead of using `on`/`once` and managing an `off` call.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4038",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4038/comments",
    "title": "Question about model#parse",
    "created_at": "2016-05-31T13:48:53Z",
    "updated_at": "2016-05-31T17:23:35Z",
    "body": "I stumble on a case where I did not understand why my `model.set` called with `{parse: true}` did not call the `parse` method. I was very surprise to discover that `parse` must be called manually before a `model.set` whereas an option `{parse: true}` is enough for Collection.\n\nWhy Collection automatically parse _inside_ the set when option `parse` is true, whereas Model does the parse _outside_ the set ? Model fetch/save/constructor do call the parse method with options.parse on true, `set` is really the only method with a _weird_ behaviour. Is there a good reason?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4035",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4035/comments",
    "title": "Problem when Model and Collection each have \"parse\" methods.",
    "created_at": "2016-05-27T18:01:18Z",
    "updated_at": "2018-01-07T17:14:59Z",
    "body": "SUBJECT: Problem when Model and Collection each have \"parse\" methods.\n\nBy Alexander Danel\n2016-May-27\n\nWhen both \"Collection\" and its underlying \"Model\" each have their own \"parse\" \nmethod defined, an attempt to do \"collection.fetch()\" causes a problem.\nThe retrieved data is processed first by \"collection.parse()\",\nand then a little bit later the processed data is passed to \n\"model.parse()\", but the second parse fails, because the data\nis cooked, not raw.\n\nThe reason to have a \"parse\" method on the Model is because I do sometimes\ninstantiate the Model as a singleton, not just as a member of the collection.\nIn other words, although the model gets instantiated automatically by the\ncollection in some parts of my program, I also want to sometimes manually\ninstantiate it.  (Automatic bulk instantiations versus manual singleton\ninstantiations.)\n\nThe workaround, for me, I suppose, is to define two different Model classes \nthat are otherwise identical except that one would have \"parse\" and the other \nwould not.  But, that's not elegant.  The intention is that they should both\nthe bulk and singleton instantiations should be of one class.\n\nPROPOSAL: It is my understanding that the \"options\" to an instantiation can \ninclude a value for \"parse\" that is true/false.   Therefore, I suggest that\nthis option be used when the Collection instantiates a Model, temporarily\nsetting \"parse:false\".\n\nI am on Mac OS, working in Chrome, using the following backbone version:\n\n`// Current version of the library. Keep in sync with package.json \n     Backbone.VERSION = 1.2.3;\n`\n\n(Note: I am attempting to use the \"insert code\" feature on this site, but when I switch to \"preview\", the results don't look like code.  Perhaps because I'm on a Mac, using Safari?  Therefore, I will also attempt to drop a text file into this message.)\n[a-danel-backbone-disfunction.txt](https://github.com/jashkenas/backbone/files/287126/a-danel-backbone-disfunction.txt)\n\nAt the time when the problem manifests, my stack-trace is this:\n\n`parseCtApiResponse      cti-models.js:  23\n    Backbone.Model          backbone.js:    398\n    child               backbone.js:    1850\n    _prepareModel           backbone.js:    1087\n    set             backbone.js:    868\n    options.success         backbone.js:    1024\n    fire                jquery-2.2.0.js:    3182\n    ...etc...\n`\n\n`//------------------------------------------------------------------------------\n// Stack trace with surrounding code.\n//------------------------------------------------------------------------------\n//  Backbone.Model          backbone.js:    398\n//\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\nHERE ==>\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n<== HERE\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n//------------------------------------------------------------------------------\n//  child               backbone.js:    850\n//\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n```\n// The constructor function for the new subclass is either defined by you\n// (the \"constructor\" property in your `extend` definition), or defaulted\n// by us to simply call the parent constructor.\nif (protoProps && _.has(protoProps, 'constructor')) {\n  child = protoProps.constructor;\n} else {\n```\n\nHERE ==>\n      child = function(){ return parent.apply(this, arguments); };\n<== HERE\n    }\n\n//------------------------------------------------------------------------------\n//  _prepareModel           backbone.js:    1087\n//\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\nHERE ==>\n      var model = new this.model(attrs, options);\n<== HERE\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n//------------------------------------------------------------------------------\n//  set             backbone.js:    868\n//\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\nHERE ==>\n          model = models[i] = this._prepareModel(model, options);\n<== HERE\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n\n//------------------------------------------------------------------------------\n//  options.success         backbone.js:    1024\n//\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\nHERE ==>\n        collection[method](resp, options);\n<== HERE\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n//------------------------------------------------------------------------------\n`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4034",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4034/comments",
    "title": "Feature Suggestion: Backbone.Model.prototype.update",
    "created_at": "2016-05-24T21:13:24Z",
    "updated_at": "2016-10-12T22:16:24Z",
    "body": "A fairly common pattern I find myself typing when working with Backbone models involves code like this:\n\n```\n//iterating\nmodel.set('totalCount', model.get('totalCount') + 1);\nmodel.set('team1Count', model.get('team1Count') + 1);\n\n//updating a max\nmodel.set('maximum', _.max([model.get('maximum'), newValue]));\n\n//updating according to an algorithm\n\nlet cost = model.get('cost');\nif (!_.isFinite(cost)) {\n  //if we haven't calculated the cost yet, do so now\n  cost = calculateCost(model);  \n} \nmodel.set('cost', applyCouponCode(cost, couponCode));\n```\n\nThere's nothing wrong with these examples, but I find myself writing these \"get-modify-set\" chunks of code a lot.  I think this experience could pretty easily be made nicer.  I'm picturing an `update` method on model that would make the above examples look like this.\n\n```\n//iterating\nmodel.update(['totalCount', \"team1Count\"], count => count + 1);\n\n//updating a max\nmodel.update('maximum', max => _.max([max, newValue]));\n\n//updating according to an algorithm\n\nmodel.update('cost', function (cost, key, _model) {\n  if (!_.isFinite(cost)) {\n    //if we haven't calculated the cost yet, do so now\n    cost = calculateCost(_model);  \n  } \n  return applyCouponCode(cost, couponCode)\n});\n```\n\nThe update function would likely take 3 options: `attrs`, `transform`, `options`. \n\n`attrs`\\- an attribute name or array of attribute names to apply the transform to\n`transform` - a function (defaults to _.identity) that will be passed 3 arguments `value`, `key`, `model` and will return the new value for each attribute it is run against\n`options` - these would be options that would be passed through to the underlying set call that would result from the update\n\nI'm opening this issue basically to gauge interest in having a function like this as part of Backbone core and to receive feedback.  If there is interest I'd be happy to open a PR to explore further.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4033",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4033/comments",
    "title": "Backbone doesn't suppress duplicate events",
    "created_at": "2016-05-20T18:52:38Z",
    "updated_at": "2017-06-15T21:05:06Z",
    "body": "Using Backbone.Event, if I bind the same handler to the same event with the same context N times, the handler will be run N times when I trigger the event one time.\n\nAt our company, this is never what we really want.  In fact, it's been the cause of many bugs.  If there's a universe in which that behavior is useful, I'd love to understand it.\n\nIn some of our codebase we solve that problem with this ugly pattern: \n\n```\ndispatcher.off(event, function, ctx); // remove any/all handlers\ndispatcher.on(event, function, ctx); // add one handler\n```\n\n... and in other parts of our codebase, I'm sure it remains un-solved.  Duplicate events creep in, silently.  At best we don't notice them, at worst they cause strange slowness & other behavior that's hard to debug.\n\nIn my dream world, Backbone.Event.on() would detect when I try to bind an event that is already bound to that function with that context, and silently do nothing.  \n\n(Perhaps there's a bit more complexity to that for the corner-case of interleaving on() and once().)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4032",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4032/comments",
    "title": "backbone.router  nomatch event",
    "created_at": "2016-05-20T10:48:04Z",
    "updated_at": "2016-05-24T14:09:10Z",
    "body": "why no event has been trigger, which is no matching route?\n\nI want to do something when there is no matching route.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4030",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4030/comments",
    "title": "Navigate silently",
    "created_at": "2016-05-13T16:16:53Z",
    "updated_at": "2016-05-13T17:35:54Z",
    "body": "I was wondering why there is not no option to `navigate()` **without** updating the url or history. Is there an historical reason for this, or would a PR be considered?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4029",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4029/comments",
    "title": "DOM Exception 18 on navigate() in Safari 9.1",
    "created_at": "2016-05-13T16:09:43Z",
    "updated_at": "2016-05-19T19:11:53Z",
    "body": "SecurityError: DOM Exception 18 is thrown by Safari (iOS and OSX) from the moment `pushState()` is called 100 times. \n\nhttps://forums.developer.apple.com/thread/36650\nfiddle: https://jsfiddle.net/n3uxkyhr/5/\n\n```\nvar TestRouter = Backbone.Router.extend( {\n    initialize: function() {\n        this.route(\"/test/:id\", function( id ) { console.log(\"test\" + id) });\n    }\n} );\nvar router = new TestRouter();\nBackbone.history.start({pushState: true});\n\ntry {\n  for(var i = 0; i < 200; i++ ) {\n      router.navigate(\"/test/\"+i);\n    }\n    alert(\"passed, i = \" + i);\n} catch( e ) {\n    var msg = \"failed on i \" + i + \" with error: \" + e + \"\\nStack: \" + e.stack;\n  console.error( e, msg );\n  alert(msg);\n}\n```\n\nfails with:\n\n```\nfailed on i 100 with error: Error: SecurityError: DOM Exception 18\nStack: pushState@[native code]\nnavigate@https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone.js:1823:69\nnavigate@https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone.js:1522:32\nglobal code@https://fiddle.jshell.net/n3uxkyhr/6/show/:63:22\"\nglobal code \u2014 show:68\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4028",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4028/comments",
    "title": "Prepare Backbone 1.4",
    "created_at": "2016-05-06T17:23:57Z",
    "updated_at": "2018-05-25T19:57:18Z",
    "body": "Some significant changes have occurred on master since 1.3. I'd like to get 1.4 out sooner than later. Below are a list of some of the more important activity highlights over the past couple months:\r\n- Added support for ES6 classes with a `preinitialize` hook for model creation (https://github.com/jashkenas/backbone/pull/3827). This one should require a good example of how to create an ES6 class extending from BB\r\n- iterator support https://github.com/jashkenas/backbone/commit/a2fc65b9798d1a5d0dcb43b5c50483640f5187c5\r\n\r\n- Fixed a bug with the hash generation from Router.navigate (#4025)\r\n- #4131\r\n\r\n/cc @akre54 @jridgewell \r\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4025",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4025/comments",
    "title": "Router.navigate generated location.hash regression in 1.2",
    "created_at": "2016-04-30T10:31:32Z",
    "updated_at": "2016-05-06T17:03:00Z",
    "body": "This change 5821bc03a31b06be3bb69d6344a2acb62024e231 decodes the fragment, and the decoded value goes into `location.hash`, which makes URL effectively malformed.\n\nQuick test to explain the problem:\n\n``` javascript\nBackbone.history.navigate('search/has%20space');\nstrictEqual(location.hash, '#search/has%20space');\n```\n\nResults:\nbefore 5821bc03a31b06be3bb69d6344a2acb62024e231:\n`#search/has%20space`\nafter:\n`#search/has space`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4023",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4023/comments",
    "title": "How to access ,play and download all video from Dailymotion in android.",
    "created_at": "2016-04-25T11:01:55Z",
    "updated_at": "2016-04-25T16:25:43Z",
    "body": "I want to show list all video from daily motion in android app, and also show download button where I can download specific video . \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4022",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4022/comments",
    "title": "How about the latest progress of Backbone?",
    "created_at": "2016-04-25T09:50:19Z",
    "updated_at": "2016-04-26T09:49:46Z",
    "body": "How about the latest progress of Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4021",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4021/comments",
    "title": "Reception over SPI using Processing Language on Raspberry-Pi",
    "created_at": "2016-04-22T11:48:37Z",
    "updated_at": "2016-04-27T09:20:58Z",
    "body": "I am trying to transmit and receive data through SPI using Processing language on Raspberry-Pi. I am able to transfer the messages but am not able to find the correct commands to execute the reception over it. I am also not able to find any documentation of example code available on the site. Please help with the issue.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4017",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4017/comments",
    "title": "ESLint stuck on version 1.10.x",
    "created_at": "2016-04-18T21:27:21Z",
    "updated_at": "2016-05-28T00:28:11Z",
    "body": "ESLint is still on version 1.10.x. Would you like to upgrade?\n\nAlso, if you'll forgive the self-promotion, I've written an ESLint plugin [platinumazure/eslint-plugin-qunit](https://github.com/platinumazure/eslint-plugin-qunit) which can help detect potentially bad patterns in QUnit tests. If you're interested, I can write a pull request showing how that could work. Obviously these are minor things when compared to end-user-facing bugfixes, enhancements, and features, but it's always useful to be able to enforce code quality automatically so that less time needs to be invested on quality per pull request.\n\nI'm happy to write PRs for one or both of those as needed. Let me know.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4016",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4016/comments",
    "title": "collection.prototype.chain() doesn't proxy requests to model.attributes",
    "created_at": "2016-04-17T05:56:00Z",
    "updated_at": "2016-04-18T22:37:14Z",
    "body": "As far as I can tell, it looks like most of the underscore methods attached to collections are proxied so that when you call them they act on the models' `.attributes` object. This is great because it lets us do things like:\n\n``` javascript\ncollection.where({ foo: 'bar' }); // Yay! Looks at model.attributes.foo\n```\n\nUnfortunately, it seems like all of this breaks when you call `.chain()`\n\n``` javascript\ncollection.chain().where({ foo: 'bar' }).value(); // Boo :( Looks at model.foo\n```\n\nObviously this example isn't very useful, but if you want to do more than one operation on the collection you can't use any of the shortcuts for things like `where`, `pluck`, etc and need to use iterator functions which is so much less clean.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4015",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4015/comments",
    "title": "colletcion.get(cid) is undefined",
    "created_at": "2016-04-16T09:39:20Z",
    "updated_at": "2016-04-19T18:42:13Z",
    "body": "``// Model class for each Muppet item\nvar MuppetModel = Backbone.Model.extend({\n  defaults: {\n    id: null,\n    name: null,\n    occupation: null\n  }\n});\n\n// Collection class for the Muppets list endpoint\nvar MuppetCollection = Backbone.Collection.extend({\n  model: MuppetModel,\n  url: '/muppets',\n\n  parse: function(data) {\n    return data.muppets;\n  }\n});\n\n// View class for displaying each muppet list item\nvar MuppetsListItemView = Backbone.View.extend({\n  tagName: 'li',\n  className: 'muppet',\n  template: _.template($('#muppet-item-tmpl').html()),\n\n  initialize: function() {\n    this.listenTo(this.model, 'destroy', this.remove)\n      this.listenTo(this.model, 'sync change', this.render);\n  },\n\n  render: function() {\n    var html = this.template(this.model.toJSON());\n    this.$el.html(html);\n    return this;\n  },\n\n  events: {\n    'click .remove': 'onRemove'\n  },\n\n  onRemove: function() {\n    this.model.destroy({success: function(model, response) {\n\n```\n    },wait: true});\n```\n\n  }\n});\n\n// View class for rendering the list of all muppets\nvar MuppetsListView = Backbone.View.extend({\n  el: '#muppets-app',\n  _tempcId:\"\",\n  initialize: function() {\n    this.listenTo(this.collection, 'sync', this.render);\n  },\n\n  render: function() {\n    var $list = this.$('ul.muppets-list').empty();\n\n```\nthis.collection.each(function(model) {\n  var item = new MuppetsListItemView({model: model});\n  $list.append(item.render().$el);\n}, this);\n\nreturn this;\n```\n\n  },\n\n  events: {\n    'click .create': 'onCreate'\n  },\n\n  onCreate: function() {\n    var $name = this.$('#muppet-name');\n    var $job = this.$('#muppet-job');\n    if ($name.val()) {\n            var  kermit = new MuppetModel();\n            kermit.set({\n        name: $name.val(),\n        occupation: $job.val()\n      });\n          this._tempcId=kermit.cid;\n      this.collection.create(kermit,{wait: true});\n\n*\\*          console.log(\"get cid model \"+this._tempcId);\n            console.log(this.collection);\n            _.each(this.collection.models,  function(o){  \n                    console.log(o.cid);  \n                }\n            );**\n\n```\n                   console.log(this.collection.get(this._tempcId));\n\n        this.collection.fetch();\n  $name.val('');\n  $job.val('');\n}\n```\n\n  }\n});\n\n// Create a new list collection, a list view, and then fetch list data:\nvar muppetsList = new MuppetCollection();\nvar muppetsView = new MuppetsListView({collection: muppetsList});\nmuppetsList.fetch();``\n# chomre debbuger out is:\n\n> get cid model c14\n> \n> > child{length:2,models:Array[2],_byId:Object,_listenId:\"l2\",_events:Object...}\n> >   modes:Array[3]\n> >     0:child\n> >         id:null\n> >         cid:\"c4\"\n> >         __proto_:Backbone.Model\n> >     1:child\n> >       cid:\"c8\"\n> >       id:null\n> >       __proto_:Backbone.Model\n> >     2:child \n> >   cid:\"c14\"\n> >         id:null\n> >         __proto_:Backbone.Model\n> \n> c4\n> c8\n\nin the code ,use _each print this.collection.models.but write c4 18.don't print c14.\n\n**_.each(this.collection.models,  function(o){  \n                console.log(o.cid);  \n            }\n        );**\n\nbeasuce up probelm ,**this.collection.get('c14')** is undefine.but this.collection.models alread find  cid:'c14'..why??\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4014",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4014/comments",
    "title": "Revert change of issue #2846 (regarding options of nested change events)",
    "created_at": "2016-04-11T12:01:14Z",
    "updated_at": "2016-04-11T12:46:26Z",
    "body": "We recently stumbled about a change that was introduced in version 1.1.1, caused by issue #2846:\n- Before that version:\n  - You could have nested changes with own options - without regarding other listeners to the \"change\" event. \n  - You could use these own options in concrete change:attribute callbacks.\n  - You didn't get these own options in callbacks to a \"change\" event (which causes the issue)\n- Now, since version 1.1.1:\n  - The options hash has side effects:\n  - The options hash of the final \"change\" event depends on the last call to the set method - which can be done by any listener/callback by any other model or view.\n  - You can never be sure, that the options hash of a \"change\" callback is replaced by one of a inner change\n\nNotice the problem?\nSure, both cases have their problem. But I really think that the second case causes much more new problems than it solves. Because really, what was implemented there is a side effect. \nYou can now accidentally \"destroy\" the options hash of another listener, which may be set by a very different module in your application. This hurts the principle of encapsulation and modularization...\n\nHere's an example for what happens currently:\n\n``` javascript\n\n// File A\nthis.listenTo(anyModel, \"change\", function(model, options) {\n  options = options || {};  // Hash is always empty\n\n  if(options.fooFlag) {  // Flag will never exist\n     doSomething();\n  }\n});\n\n// File B\nthis.listenTo(anyModel, \"change:anAttribute\", function(model, newVal) {\n  model.set(\"anotherAttribute\", 42);  // Passing no options -> Accidentally overwrites hash for change event\n});\n\n// File C:\nanyModel.set(\"anAttribute\", 23, {fooFlag: true});\n```\n\nSo what you want to do in file B, is just setting another attribute. But if you do not regard the listener in file A (as in this example), you break it. Therefor you _must_ check all other listeners: Are they using options? Or you always have to pass around the options hash by inner changes.\n\nBut even then you can only _add_ (or overwrite) flags to the final options hash of the \"change\" event. You cannot use options for a change:attribute event only.\nAs an example you may think of a kind of \"disabling flag\":\n\n``` javascript\n\n// File A\nthis.listenTo(anyModel, \"change\", function(model, options) {\n  options = options || {};  // Always contains disableSomething flag\n\n  if(!options.disableSomething) {  // Never true, but expected to be true for default options\n       doSomething();\n  }\n});\n\n// File B\nthis.listenTo(anyModel, \"change:anAttribute\", function(model, newVal) {\n  model.set(\"anotherAttribute\", 42, {disableSomething: true});  // We don't want to call doSomething() a second time (and cannot use silent flag)\n});\n\n// File C:\nanyModel.set(\"anAttribute\", 23);\n```\n## A kind of proposal\n\nIn my opinion the current behavior is not obvious - the default case should be the first/old one of version 1.1.0.\nIf you intentionally (for whatever reason) want to have the options hash of an inner change to the final \"change\" event, then there are two possibilities:\n- A kind of new flag for the set method to force using inner hash options\n- Using the reference nature of the options hash: If you set additional flags to the options hash from inside a change callback, they are simultaneously set to the original hash (because it's passed in by reference):\n\n``` javascript\n\n// File A\nthis.listenTo(anyModel, \"change\", function(model, options) {\n  options = options || {};  // Hash contains fooFlag and myOwnOption\n\n  if(options.fooFlag) {\n     doSomething();\n  }\n});\n\n// File B\nthis.listenTo(anyModel, \"change:anAttribute\", function(model, newVal, options) {\n  options = options || {};  // Hash contains fooFlag\n  options.myOwnOption = 123;\n\n  model.set(\"anotherAttribute\", 42, options);\n});\n\n// File C:\nanyModel.set(\"anAttribute\", 23, {fooFlag: true});\n```\n## Side note\n\nFinally I really want to stress out to explicitly mention such changes in the changelog ;-)\nIf you look into the changelog of version 1.1.1: There is only the point \"Performance fine-tuning for Backbone Events.\"\nThis can be anything, but surely not a change causing different behavior on backbone models!\nIn our team we did a search over hours to find the problem caused by this change - till we found out that backbone is doing something different here.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4013",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4013/comments",
    "title": "Backbone 1.3.3 have old underscore as dependency.",
    "created_at": "2016-04-11T07:25:57Z",
    "updated_at": "2016-04-11T07:31:28Z",
    "body": "When I am installing backbone 1.3.3 using npm it installs underscore 1.7.0 as dependency instead latest 1.8.3. In this reason I am getting error when trying to define view for example. (`_.create` is not a function)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4010",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4010/comments",
    "title": "How can i use [] or new Array() for model properties ?",
    "created_at": "2016-04-08T01:23:41Z",
    "updated_at": "2016-04-08T15:30:58Z",
    "body": "I want use [] or new Array() for model properties, but different model will get single array.\njust like:\n\n```\nDefaulted = Backbone.Model.extend({\n  defaults: {\n      array: []\n  }\n});\nmodel = new Defaulted();\nassert.equal(model.get('array').length, 0);\nmodel.get('array').push(\"obj1\");\nmodel = new Defaulted();\n// array length is 1, this array is single, but i want a new array\nassert.equal(model.get('array').length, 0);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4005",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4005/comments",
    "title": "Backbone Security",
    "created_at": "2016-04-04T08:07:24Z",
    "updated_at": "2016-04-04T14:37:58Z",
    "body": "Hi)\nI'm offering you to write new module(Security module), which will be based on Backbone framework, but will be separated from it. For beginning will be enough  to provide Oauth2 realization of security.\nMain features of this module will: easy to configure(just overwrite based class and include routers, models, collection, witch will be use this provider), provider will be created only once and manage token session(expired time of token), after succeed authorization this provider will be adding \"Authorization\" header with values witch it got after authorization, and of course provider have to provide \"logout\" function.\nWhat you think about my idea?  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4003",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4003/comments",
    "title": "Hash change causes page refreshes in some special cases in IE",
    "created_at": "2016-04-02T00:43:49Z",
    "updated_at": "2016-04-02T00:43:49Z",
    "body": "This is a bug that is caused by a bug in some IE versions. Since Backbone router supports most of the IE versions affected, i feel like this bug should be covered under the backbone library itself.\nSee https://groups.google.com/forum/#!topic/google-web-toolkit/sAWcorYhhWw\nand http://stackoverflow.com/questions/2602260/javascript-location-hash-refreshing-in-ie/3804661#3804661\n\nThe fix for this turns out to be very simple however, I haven't had the time to test its effects across all browsers.\n`window.location.hash = window.location.hash;`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4001",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4001/comments",
    "title": "Backbone Models and DTO",
    "created_at": "2016-03-29T19:47:31Z",
    "updated_at": "2016-03-29T20:38:04Z",
    "body": "Can you create a new structure(or model) which will be consists of other models.(Something like DTO(Data transfer object))?\nBecause, sometimes are situations, when you need to send or operate model with some additional data.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3999",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3999/comments",
    "title": "Why I can't name my event as 'constructor'?",
    "created_at": "2016-03-29T15:50:47Z",
    "updated_at": "2016-03-29T18:23:14Z",
    "body": "``` javascript\n_.extend({}, Backbone.Events).on('constructor', function () {});\n```\n\nThrows exception:\n\n``` text\nTypeError: handlers.push is not a function\n```\n\nIs it a bug?\nI can reproduce it in developer console on backbonejs.org site.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3996",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3996/comments",
    "title": "self (or global) may be null and self.self will throw a exception",
    "created_at": "2016-03-28T10:25:46Z",
    "updated_at": "2016-04-12T06:31:59Z",
    "body": "`var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);`\n\nso is it `typeof self == 'object' && self && self.self === self` right?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3995",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3995/comments",
    "title": "collections#parse is never called with backbone.js 1.3.2",
    "created_at": "2016-03-23T06:04:11Z",
    "updated_at": "2016-03-23T17:34:32Z",
    "body": "Hello everyone,\nI'm using latest backbone.js 1.3.2, and I can't manage to get parse() called when a collection.fetch() completes. Here's the code that reproduces the problem:\n\n```\n   var ABC =  Backbone.Model.extend({\n        defaults: {\n            avatartUrl: \"whatever.jpg\",\n            location:\"XYZ\",\n            phone:\"12345678\"\n        },\n        parse: function(data) {\n            console.log(\"ABC Model is parsed\");\n            return data;\n        }\n\n    });\n\n    var ABCCollection = Backbone.Collection.extend({\n\n        initialize: function(){\n            console.log(\"ABCCollection is initializing\");\n        },\n        model: ABC,\n        parse: function(data) {\n            console.log(\"ABCCollection is parsed\");\n            return data;\n        },\n        reset:function(){\n          console.log(\"complete \"+ this.models);\n        },\n        error:function(e){\n          console.log(e);\n        },\n        url: 'http://jsonplaceholder.typicode.com/users'\n    });\n\nvar myabc = new ABCCollection();\nmyabc.fetch({reset: true,parse:true}};\n```\n\nneither Collection.parse() nor Model.parse() are called.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3993",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3993/comments",
    "title": "v1.3.2 backbone.js and backbone-min.js are not the same",
    "created_at": "2016-03-22T15:02:51Z",
    "updated_at": "2016-04-05T17:45:00Z",
    "body": "The minified version of 1.3.2 does not appear to include \nhttps://github.com/jashkenas/backbone/commit/1db79ddd33f65e4ca93beb3174496cf148baebe5\nwhile the unminfied version does.\n\nUnminified\n\n``` javascript\nEvents.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n\u2002\u2002\u2002\u2002var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n\u2002\u2002\u2002\u2002if (typeof name === 'string' && context == null) callback = void 0;\n\u2002\u2002\u2002\u2002return this.on(events, callback, context);\n\u2002\u2002};\n```\n\nMinified\n\n``` javascript\nl.once=function(t,e,r){\n\u2002\u2002var n=f(p,{},t,e,i.bind(this.off,this));\n\u2002\u2002return this.on(n,e,r)\n}\n```\n\n@jridgewell @megawac \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3992",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3992/comments",
    "title": "Backbone.history.navigate removes hash",
    "created_at": "2016-03-22T13:19:27Z",
    "updated_at": "2018-07-24T14:52:01Z",
    "body": "I am using Backbone router and I'd like to load URLs without full page reload. I add handler that calls `Backbone.history.naviagate()` on links.\n\nThe issue here is that hash from url is stripped. I'd like to pass url with a hash as an anchor for some section on a page like it is done in [Backbone documentation](http://backbonejs.org/#Router-extend), but it doesn't work.\n\nHere is an example where you can see it: http://jsbin.com/wevigoxuqa/1/edit?html,js,output\nI expected that after click on link url will be as is: `my-page#anchor`, but I am getting `my-page`.\n\nRelated https://github.com/jashkenas/backbone/issues/2968\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3990",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3990/comments",
    "title": "Dead links to MDN docs",
    "created_at": "2016-03-16T20:34:55Z",
    "updated_at": "2016-04-18T13:05:57Z",
    "body": "There are at least 3 external links inside the `index.html` file that are dead.\n1. Collection.slice [Array#slice](https://github.com/jashkenas/backbone/blob/65952402687569aaf28abab305a14680f1f48f16/index.html#L2088)\n2. Collection.comparator [sort](https://github.com/jashkenas/backbone/blob/65952402687569aaf28abab305a14680f1f48f16/index.html#L2109) same at line [4860](https://github.com/jashkenas/backbone/blob/65952402687569aaf28abab305a14680f1f48f16/index.html#L4860)\n\nThe right link I guess would be:\n- Array slice : https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n- Array sort : https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3989",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3989/comments",
    "title": "Feature Request:  Make clones identifiable",
    "created_at": "2016-03-15T23:07:08Z",
    "updated_at": "2017-06-15T18:25:45Z",
    "body": "I'm overriding the clone function in my own codebase in order to identify clones.  I'm not sure if other people would find it useful to be able to identify clones.\n\n```\nvar clone = Backbone.Model.prototype.clone;\nBackbone.Model.prototype.clone = function(){\n        var cloneRef = clone.call(this);\n        cloneRef._cloneOf = this.id || this.cid;\n        return cloneRef;\n};\n```\n\nHonestly, this might only be useful for my specific use case.  I'm dealing with a ton of legacy code, some of which uses 2-way data binding and I don't want to update the actual model until the user clicks save.  Hence I use a dummy model (clone), and when the user clicks save I use the extra information within _cloneOf to drive what happens next.  Of course, ideally I would just rip out the 2-way data binding and use the actual model to drive the view.  \n\nAs such, I'm wondering if anyone else would find this useful?  I'm not sure what another use case might be, and my current use case feels too specific to my own situation (in other words, other people who want this should just monkey patch it as well).  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3986",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3986/comments",
    "title": "Backbone.Model.set support function as a parameter",
    "created_at": "2016-03-10T19:26:23Z",
    "updated_at": "2016-03-10T20:38:57Z",
    "body": "In a project I'm working I had the need for the Model.set function to support a function as a parameter.\nSomething like React does:\n\n``` javascript\nsetState(function(previousState, currentProps) {\n  return {myInteger: previousState.myInteger + 1};\n});\n```\n\nWould it be interesting to implement? If so, I would like to make a PR with that\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3985",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3985/comments",
    "title": "Version Number in backbone.js",
    "created_at": "2016-03-10T09:22:42Z",
    "updated_at": "2016-03-10T20:01:22Z",
    "body": "http://backbonejs.org/backbone.js\nThe version number in the js above is still 1.2.3\nPlease fix this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3984",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3984/comments",
    "title": "How to upload image in database and display it like avatar.",
    "created_at": "2016-03-09T13:09:33Z",
    "updated_at": "2016-03-09T15:53:20Z",
    "body": "I need only getting from database and displaying it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3983",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3983/comments",
    "title": "PHP $_SESSION error",
    "created_at": "2016-03-09T13:07:24Z",
    "updated_at": "2016-03-09T14:57:05Z",
    "body": "Notice: Undefined index: is-logged in D:\\xampp\\htdocs\\sait\\bg\\switch\\login\\index.php on line 2\nWhen the user is logged no problems,but when he is not logged in this error over, database and other are included.\n\n`<?php  \nif($_SESSION['is-logged'] != true) //is user logged checking\n{\n    ?>\n<form id=\"box\" method=\"post\" action=\"\">\n    <h2>\u0412\u0445\u043e\u0434</h2>\n    <br />\n    <input id=\"text-box\"  type=\"text\" name=\"username\" placeholder=\"\u041f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\" value=\"\" maxlength=\"50\"></input>\n    <br /><br />\n    <br />\n    <input id=\"text-box\" type=\"password\" name=\"password\" placeholder=\"\u041f\u0430\u0440\u043e\u043b\u0430\" value=\"\" maxlength=\"50\"></input>\n    <br />\n    <br />\n    <button id=\"button\" type=\"submit\" name=\"log-me-in\">\u0412\u0445\u043e\u0434</button>\n    <br />\n<?php\nif (isset($_POST['log-me-in'])) //member checking\n{\n    $username = trim(htmlspecialchars($_POST['username']));\n    $password = md5(trim(htmlspecialchars($_POST['password'])));\n    $check = mysql_query(\"SELECT * FROM`users`WHERE`username`='$username' AND`password`='$password'\");\n    $num = mysql_num_rows($check);\n    if($num == 1)\n    {\n        $r = mysql_fetch_array($check);\n        $_SESSION['user'] = $r;\n        $_SESSION['is-logged'] = true;\n        header(\"Location: index.php?p=index\");\n        exit;\n    }\n    else\n    {  \n        echo \"\u0413\u0440\u0435\u0448\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u0430 \u0438\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0441\u043a\u043e \u0438\u043c\u0435.\";\n    }\n}\n}\nelse{\n    header(\"Location: ./?p=userpanel\");\n}\n?>\n\n<h5>\u041d\u044f\u043c\u0430\u0442\u0435 \u043f\u0440\u043e\u0444\u0438\u043b? <a href=\"./?p=register\">\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0430\u0439\u0442\u0435</a> \u0441\u0435 \u0434\u043d\u0435\u0441! </h5>\n\n</form>`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3981",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3981/comments",
    "title": "Update Backbone version number in backbone.js comment to match package.json",
    "created_at": "2016-03-08T18:55:36Z",
    "updated_at": "2016-03-08T18:59:33Z",
    "body": "I've noticed that, when trying to download Backbone v1.3.1, the head comment block in this file refers to itself as Backbone.js v1.2.3. Obviously, this is misleading.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3979",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3979/comments",
    "title": "Event.once callback context change in Backbone 1.3.1",
    "created_at": "2016-03-07T16:27:38Z",
    "updated_at": "2016-03-11T15:48:00Z",
    "body": "Concerning this change:\n\nhttps://github.com/jashkenas/backbone/commit/00f5c39e2784602f89f4f036323ba3688ee45af4#commitcomment-16539120\n\nIf you look on line 144, Backbone relied on the 'void 0' value:\n\n```\nif (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n```\n\nThe fallout of this change is that in BB 1.3.1, the callback context (that is, the 'this' pointer of the callback) is now defaulting to the callback function itself. In Backbone 1.2.3, the this pointer defaulted to the original this pointer when where the callback was registered.\n\nI am not trying to imply that the change is wrong.  Backbone does not appear to document what the context will be if the third parameter to the Events.once call is left off.   I am simply pointing out that the default behavior has changed. \n\nOne fallout of this change is that Marionette.Backbone CollectionView no longer works with Backbone 1.3.1.   This is because of the following:\n\n```\nthis.once('render', this._initialEvents);\n```\n\nhttps://github.com/marionettejs/backbone.marionette/blob/master/src/collection-view.js#L25\n\nThe Marionette CollectionView is registering a callback, leaving off the third \"context\" parameter.   In Backbone 1.2.3, the callback context defaulted to the 'this' pointer.   In Backbone 1.3.1, the callback context defaults to the callback function itself.\n\nThe fix to Marionette is simple:\n\n```\nthis.once('render', this._initialEvents, this);\n```\n\nProblem solved.   However, I am simply opening this issue because it represents what might be considered by some to be a breaking change.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3976",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3976/comments",
    "title": "File Uplaod on Google Drive using iOS SDK in objective c",
    "created_at": "2016-03-04T10:08:18Z",
    "updated_at": "2016-03-04T16:23:59Z",
    "body": "Hi, I am iOS Developer. I am working on a project related to importing and exporting file to google drive. I have downloaded new SDK from \"https://developers.google.com/drive/ios/quickstart\" \n\nI am trying to upload file on google drive. Here is my code:\n\nGTLServiceDrive _driveService = self.service;\n NSString *title = @\"myContactList.csv\";\n  NSString *mimeType = @\"_/*\";\n    NSError *err;\n  NSDictionary *fileAttributes = [[NSFileManager defaultManager] attributesOfItemAtPath:fullFilePath error:&err];\n    NSNumber *fileSizeNumber = [fileAttributes objectForKey:NSFileSize];\n    GTLDriveFile *metadata = [GTLDriveFile object];\n    metadata.name = title;\n    metadata.mimeType = mimeType;\n    metadata.originalFilename = title;\n    metadata.size = fileSizeNumber;\n\n```\nNSFileHandle *file = [NSFileHandle fileHandleForReadingAtPath:fullFilePath];\nGTLUploadParameters *uploadParameters = [GTLUploadParameters uploadParametersWithFileHandle:file\n                                                                                   MIMEType:mimeType];\n\nGTLQueryDrive *query = [GTLQueryDrive queryForFilesCreateWithObject:metadata\n                                                   uploadParameters:uploadParameters];\n```\n\n   [_service executeQuery:query completionHandler:^(GTLServiceTicket *ticket,\n                                                         GTLDriveFile *updatedFile,\n                                                         NSError *error) {\n        if (error == nil) {\n            NSLog(@\"File %@\", updatedFile);\n        } else {\n            NSLog(@\"An error occurred: %@\", error);\n        }\n    }]\n\n But in this \"https://developers.google.com/drive/ios/devguide/files\", there is another method for query \"queryForFilesInsertWithObject\". Which is not available in new SDK. And I am also getting error using above code: \n\nError is +[GTMHTTPUploadFetcher uploadFetcherWithRequest:uploadMIMEType:chunkSize:fetcherService:]: unrecognized selector sent to class \n\nPlease help me how to resolve this issue.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3975",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3975/comments",
    "title": "Backbone 1.3.2",
    "created_at": "2016-03-04T03:16:54Z",
    "updated_at": "2016-03-13T23:27:53Z",
    "body": "I'm making a mess of this release process.\n\nChecklist for v1.3.2 (which is really v1.3.0):\n- Update `Backbone.VERSION`\n- Update version comment at the top of `backbone.js`\n- `npm run build`\n- Bump `package.json`\n- Create changelog entries telling everyone I screwed up and these versions are really the same\n- Update `gh-pages` branch\n- Push to npm after someone confirms I'm not an idiot.\n\nAnyone know of anything else I missed? @paulfalgout, @megawac, @akre54?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3972",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3972/comments",
    "title": "listenTo function call not triggering on page load",
    "created_at": "2016-02-23T18:33:33Z",
    "updated_at": "2016-02-23T20:14:34Z",
    "body": "Hi,\n\nMy html contains scripts in the following order\n\n```\n<script type=\"text/javascript\" src=\"js/views/main-app.js\"></script> \n<script type=\"text/javascript\" src=\"js/routers/router.js\"></script>\n<script type=\"text/javascript\" src=\"js/home-app.js\"></script>\n```\n\nFollowing are the code snippets from each file\n\nmain-app.js\n\n```\nvar app = app || {};\n\napp.mainView = Backbone.View.extend({\n    el : this.$(\"#main-app\"),\n    initialize : function(){        \n        this.listenTo(Backbone, 'list:all', this.showLists);        \n    },\n    showLists : function(){\n/*\nThis function should get executed.\nBackbone is successfully triggering the list:all event \n*/\n        var lists = new app.Lists();\n        var listsView = new app.ListsView({collection: lists});\n    }\n})\n\n```\n\nrouter.js\n\n```\nvar app = app || {};\n\nvar ListRouter = Backbone.Router.extend({\n    routes : {\n        '' : 'showLists'\n    },\n    showLists : function(){\n        console.log(\"Accessing Home\");//This is getting printed to the console\n        Backbone.trigger(\"list:all\");\n    }   \n});\n\napp.listRouter = new ListRouter();\nBackbone.history.start();\n```\n\nhome-app.js\n\n```\nvar app = app || {};\nnew app.mainView();\n```\n\nThere seems to be some issue with listenTo when the page is loaded, once the page is loaded everything works as expected.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3971",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3971/comments",
    "title": "Properly contributing to someone elses respository",
    "created_at": "2016-02-19T17:05:33Z",
    "updated_at": "2016-02-19T17:23:14Z",
    "body": "Hello all, I'm  using GitHub for the first time for a school project. I was under the impression I had it all figured out but I just realized that wasn't the case.\n\nThe problem: My partner created our group's repository. I made a fork of his repository and started adding commits and pushed it to github, but I'm getting this on my repository: \"This branch is 2 commits ahead of myPartnersName:master. \"\n\nI read some tutorial and I thought it said to fork their repository, but maybe it was a tutorial for something else. I want to use his repository. I check his repository and sure enough, it's missing the 2 commits that I made that appears on my fork.\n\nPretty simple I guess. I hope it's a simple fix and that someone can help! \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3970",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3970/comments",
    "title": "Brackets support for Backbone.Collection",
    "created_at": "2016-02-14T08:26:55Z",
    "updated_at": "2016-02-15T22:38:59Z",
    "body": "Backbone.Collection is actually a subset of Array however currently it doesn't allow to access its value using brackets and instead we need to use `at`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3969",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3969/comments",
    "title": "In the docs for collection.add(model, {at: <addIndex>})",
    "created_at": "2016-02-12T19:21:08Z",
    "updated_at": "2016-03-15T15:05:17Z",
    "body": "So I was doing a project for work recently that involved the following workflow\n1. Hit a web endpoint that returns a list of stanzas that is a comma separated string in the order they should be displayed in some UI\n   Ex: /endpoint/stanzas => \"stanza1,stanza2,stanza3,stanza4\"\n2. Split into list, and hit the endpoints for all those stanzas to get more detail about them for the display\n   Ex /endpoint/stanzas/stanza{1-4} => { some: data, etc: [1,2,3] }\n\nSo since all of them were getting asynchronously sent, I also wanted to add them to my collection in the order that the list in step 1 was ordered.  For this, I ran _.map() on the comma split list of that string, and stored the index as the point to insert at.  Ex: collection.add(fetchedModel, {at: storedIndex});  However, it turns out that the collection doesn't quite behave like a Javascript array and you cannot insert it at a non-existing index since the collection doesn't dynamically resize.  Being Javascript, I thought Backbone would intuitively do this, and I lost a lot of time debugging an error as a result.\n\nMy suggestion would be the following:\n1. Add in the docs for collection.add() at backbonejs.org that providing an index to the \"at\" option that is larger than the size of the collection will not dynamically resize the collection.\n2. I am happy to implement a branch and create a pull request that will actually provide this functionality if it is desired.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3965",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3965/comments",
    "title": "Collections' modelId method should be passed the Model as a second argument",
    "created_at": "2016-02-09T20:05:58Z",
    "updated_at": "2017-05-22T12:00:07Z",
    "body": "Right now `modelId(attrs)` is only passed a plain-object representation of the model's attributes. This makes it difficult for application developers to create n-degree polymorphic Collection subclasses.\n\nContrived Example:\n\n``` javascript\n// A collection of mixed entity types that maintains sort order based \n// on their joinDate property\n\nvar Entities = Collection.extend({\n  modelId(attrs){\n    // What ID attribute to use? Not determined at runtime.\n  },\n  comparator: 'joinDate'\n});\n\n\n// These are only two entity types with different idAttributes, but assume \n// There may be up to (n) different entity types, each with different idAttributes, \n// determined by the database backing this example application.\n\nvar Company = Model.extend({\n  idAttribute: 'companyId'\n});\n\nvar Customer = Model.extend({\n  idAttribute: 'customerId'\n});\n\n// Proceeding to add and remove Customers, Companies, etc, to the Entities\n// Collection will mess up the `_byId` cache because the Entities collection\n// is not aware of all the different possibilities for `idAttribute` at runtime and \n// a `modelId` method cannot be written to satisfy the needs of this app.\n\n```\n\nIf the modelId callback took the form `modelId(attrs, model)`, where the second argument is the model in question, Backbone can retain backwards compatibility but allow application developers to do something like this:\n\n``` javascript\n// Always give precedence to the provided model's idAttribute. \n// Fall back to the Collection's idAttribute, and then to the default value `id`.\n\nEntities.modelId = function modelId(attrs, model){\n  return attrs[model.idAttribute || this.model.prototype.idAttribute || 'id'];\n};\n```\n\nIt may even make sense to make the above `modelId` function the default implementation and support polymorphic Collections out of the box. It still maintains backwards compatibility: For any implementation that is not already polymorphic, Collections will still function normally \u2013\u00a0models will have their idAttribute set when added to the Collection by the Collection's model constructor. Those that are already polymorphic, or have some type of non-standard idAttributes, will already have this modelId method overwritten.\n\nHappy to throw up a PR if you think this is a good idea.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3961",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3961/comments",
    "title": "Collection#set - add events sends options.index that correspond to wrong index",
    "created_at": "2016-02-08T21:35:39Z",
    "updated_at": "2016-02-08T21:35:39Z",
    "body": "As pointed out by @akre54 in issue #3960, `options.index` was deprecated for `'add'` events in 0.9.9.\n\nHowever, under certain cases `'add'` events generated from a call to **Collection#set** passes a stale `options.index` that was assigned during the generation of `'remove'` events in **Collection# _removeModels**.  \n\nSince the options argument of event handlers are not well documented, you should be able to rely on anything passed, including options.index.\n\nThe intent was that `options.index` would only be sent if `at` was specified.  However `options.index` is not unset if `at` is unspecified.  If `_removeModels` has set `options.index`, and `at` is unset, then `'add'` events will get a stale `options.index` (from _removeModels).\n\nSince the same `options` object is reused across all events (add and remove),  `_removeModels` needs to cleanup after itself after all `'remove'` events are triggered.\n\n`delete options.index;` \n\n---\n\nBug Preconditions:\n-   options.remove = true \n-   options.at == null\n-   passed in attrs has elements to add and collection has elements to remove\n\nBug Manifestation:\n- _removeModels will set options.index when sending out its triggers.\n- If options.at == null, the set method does not clear out the options.index set by _removeModels before triggering the add events. In that case, the last options.index from the remove events is reused in the add events.\n\n`\n\n```\n    var array = _.map([1,2,3,4], function(val) {\n        return {property:val};\n    });\n\n    var collection = new Backbone.Collection(array);\n\n    collection.on('add', function(model, collection, options){\n        // BUG!!: options.index (0) != collection.indexOf(model) (3)\n        console.error(\n            'BUG!!: options.index ('\n            + options.index +\n            ') != collection.indexOf(model) ('\n            + collection.indexOf(model) +\n            ')'\n        );\n    });\n\n    array = collection.toArray();\n    array.shift();\n    array.push({property:5});\n    collection.set(array);\n```\n\n`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3960",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3960/comments",
    "title": "Backbone.Collection:set - add events may send wrong options.index",
    "created_at": "2016-02-08T17:22:02Z",
    "updated_at": "2016-02-08T23:20:22Z",
    "body": "Bug Preconditions:\n-   options.remove = true \n-   options.at == null\n-   passed in attrs has elements to add and collection has elements to remove\n\nBug Manifestation:\n- _removeModels will set options.index when sending out its triggers.\n- If options.at == null, the set method does not clear out the options.index set by _removeModels before triggering the add events. In that case, the last options.index from the remove events is reused in the add events.\n\n`\n\n```\n    var array = _.map([1,2,3,4], function(val) {\n        return {property:val};\n    });\n\n    var collection = new Backbone.Collection(array);\n\n    collection.on('add', function(model, collection, options){\n        // BUG!!: options.index (0) != collection.indexOf(model) (3)\n        console.error(\n            'BUG!!: options.index ('\n            + options.index +\n            ') != collection.indexOf(model) ('\n            + collection.indexOf(model) +\n            ')'\n        );\n    });\n\n    array = collection.toArray();\n    array.shift();\n    array.push({property:5});\n    collection.set(array);\n```\n\n`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3959",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3959/comments",
    "title": "Xiaomi Mi 4, version-5.0.5, LoliPop - Mobile not supported (not show ) custom emoji keybaord",
    "created_at": "2016-02-08T05:58:56Z",
    "updated_at": "2016-02-08T18:56:39Z",
    "body": "```\n        customD = new CustomDialog(SoftKeyboard.this,android.R.style.Theme_NoTitleBar);\n        customD.setContentView(R.layout.your_custom_layout);\n        customD.getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL,WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);\n        customD.getWindow().setFlags(WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH,WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH);\n        customD.getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n        customD.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);\n        customD.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n        customD.getWindow().setSoftInputMode( WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n        WindowManager.LayoutParams lp = customD.getWindow().getAttributes();\n        lp.width = WindowManager.LayoutParams.MATCH_PARENT;\n                lp.gravity = Gravity.BOTTOM | Gravity.LEFT;\n        lp.dimAmount = 0;\n\n        ViewPagerAdapter adapter;\n        final ArrayList<Integer> breedrank1 = new ArrayList<Integer>();\n        breedrank1.add(R.drawable.test_icon1);\n        breedrank1.add(R.drawable.test_icon2);\n        breedrank1.add(R.drawable.test_icon3);\n        breedrank1.add(R.drawable.test_icon4);\n        ArrayList<Integer> accesories_rank2 = new ArrayList<Integer>();\n        accesories_rank2.add(R.drawable.test_icon1);\n        accesories_rank2.add(R.drawable.test_icon2);\n        accesories_rank2.add(R.drawable.test_icon3);\n        ArrayList<Integer> activity_rank3 = new ArrayList<Integer>();\n        activity_rank3.add(R.drawable.test_icon1);\n        activity_rank3.add(R.drawable.test_icon2);\n        final ArrayList<ArrayList<Integer>> blurArray = new ArrayList<ArrayList<Integer>>();\n        blurArray.add(breedrank1);\n        blurArray.add(accesories_rank2);\n        blurArray.add(activity_rank3);\n        blurArray.add(stagesrank4);\n        blurArray.add(human_rank5);\n```\n\n![screenshot_2016-02-08-10-46-39](https://cloud.githubusercontent.com/assets/13363331/12879287/0fe90450-ce57-11e5-99b8-4d76302de1c8.png)\n![screenshot_2016-02-08-10-46-58](https://cloud.githubusercontent.com/assets/13363331/12879293/1a44f15c-ce57-11e5-95db-70d1d52813f3.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3954",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3954/comments",
    "title": "Collection for-of support ",
    "created_at": "2016-02-05T13:43:27Z",
    "updated_at": "2016-02-29T03:23:19Z",
    "body": "Would be nice if we could write \n\n`for (let model of collection) ...`\n\nMaybe all it would take is adding:\n\n```\nif (areSymbolsAndGeneratorsSupported) {\n  Collection.prototype[Symbol.iterator] = function* () {\n    for (let model of this.models) yield model\n  }\n}\n```\n\nBrowsers without symbols and generators (probably) don't have for-of anyway and if you transpile you have all of them. \n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3951",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3951/comments",
    "title": "options.index in add event sometimes exceeds the collection length",
    "created_at": "2016-02-04T15:57:48Z",
    "updated_at": "2016-02-04T20:25:47Z",
    "body": "When adding models to a collection `{at: }` an index that is greater than the collection length, the models are added at the end. As the test case below shows, the index provided in the corresponding `add` events reflects the requested indices, not the actual insertion indices.\n\nNot sure if this qualifies as a bug, but for tracking the exact changes to a collection, it would be great if the `options.index` provided in the `add` event would reliably reflect the _actual_ insertion index.\n\nSome background: we need this to back native CollectionViews in our [mobile framework](https://github.com/eclipsesource/tabris-js/) with Backbone Collections.\n\n``` js\ndescribe('Collection', function() {\n\n  var collection, events;\n\n  beforeEach(function() {\n    events = [];\n    collection = new Backbone.Collection();\n    collection.add([{name: 'A'}, {name: 'B'}]);\n    collection.on('add', function(model, collection, options) {\n      events.push('add ' + model.get('name') + ' @' + options.index);\n    });\n  });\n\n  it('set provides correct indices in add events', function() {\n    // before: A B\n    collection.add([{name: 'C'}, {name: 'D'}], {at: 5});\n    // after: A B C D\n    expect(names(collection)).toBe('A B C D');\n\n    // Backbone incorrectly returns indices 5 and 6 instead of the actual incices 2 and 3\n    expect(events).toEqual(['add C @2', 'add D @3']);\n  });\n\n  function names(collection) {\n    return collection.toArray().map(function(model) {\n      return model.get('name');\n    }).join(' ');\n  }\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3950",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3950/comments",
    "title": "Wrong options.index in add event",
    "created_at": "2016-02-04T11:28:14Z",
    "updated_at": "2016-02-04T22:27:49Z",
    "body": "When changing a collection using `set`, some `add` events contain wrong indices for the added models. This can be a problem when tracking changes to a collection. I add a test to demonstrate the problem:\n\n``` js\ndescribe('Collection', function() {\n\n  var collection, events;\n\n  beforeEach(function() {\n    events = [];\n    collection = new Backbone.Collection();\n    collection.add([{name: 'A'}, {name: 'B'}]);\n    collection.on('add', function(model, collection, options) {\n      events.push('add ' + model.get('name') + ' @' + options.index);\n    });\n    collection.on('remove', function(model, collection, options) {\n      events.push('remove ' + model.get('name') + ' @' + options.index);\n    });\n  });\n\n  it('set provides correct indices in add events', function() {\n    var a = collection.at(0);\n    // before: A B\n    collection.set([a, {name: 'C'}, {name: 'D'}]);\n    // after: A C D\n    expect(names(collection)).toBe('A C D');\n\n    // Backbone incorrectly returns index 1 for all added models\n    expect(events).toEqual(['remove B @1', 'add C @1', 'add D @2']);\n  });\n\n  function names(collection) {\n    return collection.toArray().map(function(model) {\n      return model.get('name');\n    }).join(' ');\n  }\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3944",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3944/comments",
    "title": "Collection factory-ing Models should set urlRoot.",
    "created_at": "2016-01-31T06:49:31Z",
    "updated_at": "2016-09-07T19:50:15Z",
    "body": "I propose Collection should set the `urlRoot` of Models it creates or that are explicitly added to it, if and only if the added Model does not already have a urlRoot set. \n\nWhy? Currently if an item Model instance is removed from a collection it can no longer talk to remote because it does not have a urlRoot, or a collection.url. But the remote object still exists, and the Model instance proxying it still exists. Being removed from the collection does not mean the Model instance is invalid in anyway, yet it gets broken by this. Consider this example: A Collection representing the first page of results on a server. If we do a Collection.fetch({reset: true}), a Model instance may be removed and its ability to talk to remote broken.\n\n(Side note: I also think Model.collection.url should override Model.urlRoot,or alternatively urlRoot should be set to the last collection it was added to. But the above can be considered standalone, so I'll argue that in another issue)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3942",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3942/comments",
    "title": "Changing size of text area in Finch",
    "created_at": "2016-01-29T17:25:40Z",
    "updated_at": "2016-01-29T17:33:41Z",
    "body": "Hy !\n\nI'd like to know if anyone has managed to change the size of text area in Finch? Thing is, I'd like to transform it and expand it to be able to press return key to skip lines, exactly as Centerim do.\n\nIn my work, I need to communicate a lot and I think that writing more text and sending it in all at once is much better than sending the text per line.\n\nDoes anyone have any idea?\n\nAny configuration in .gntrc or in .purple/prefs.xml?\n\nRegards,\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3941",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3941/comments",
    "title": "Router.navigate executes although trigger:false with encoded hash fragment in Firefox",
    "created_at": "2016-01-29T11:10:05Z",
    "updated_at": "2016-02-05T16:41:42Z",
    "body": "`Router.navigate()` will execute with `trigger:false` if the has fragment will contain url encoded characters in FireFox (tested with V39, V43).\n\ncorrect behaviour in Backbone 1.1.2: https://jsfiddle.net/g9zmwmdk/10/\nwrong behaviour in Backbone 1.2.3: https://jsfiddle.net/g9zmwmdk/9/\n\nI think the new behaviour was introduced in https://github.com/jashkenas/backbone/compare/1.1.2...1.2.0#diff-0d56d0d310de7ff18b3cef9c2f8f75dcR1764\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3937",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3937/comments",
    "title": "Integrating qdelaunay and qvoronoi function of qhull in c++",
    "created_at": "2016-01-25T00:11:59Z",
    "updated_at": "2016-01-25T01:46:36Z",
    "body": "Hi,\n\nI know basics of visual studio and c++, but I am not an advanced user or programmer. What I want to do is to perform delaunay triangulation and generate voronoi grids using qhull library (using visual studio c++ in windows). I have no problem with preparing necessary data for calculation. My questions are:\n\nWhat is the minimum necessary files to be included from qhull? (from what publicly free, the qhull is very powerful and contains a huge amount of files)\n\nHow can I easily perform the delaunay triangulation and generate voronoi grids? (like in delaunayn.m file of Matlab it calls \" t = qhullmx(x', 'd ', opt); \" then get the delaunay triangulation. )\n\nThank you so much for sharing your experience!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3931",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3931/comments",
    "title": "collection create",
    "created_at": "2016-01-19T11:52:35Z",
    "updated_at": "2016-01-19T14:46:12Z",
    "body": "my model.toJSON() return\n\n{\n   name: \"test\",\n   phone_numbers: [\n      {\n           id: 1,\n           number: \"111111111\"\n      }\n   ]\n}\n\nthen i try set value\n\nmodel.set({\n   name: \"test update\",\n   phone_numbers: [\n      {\n           id: 1,\n           number: \"2222222\"\n      }\n   ]\n})\n\nand after model.toJSON() return \n\n{\n   name: \"test update\",\n   phone_numbers: [\n      {\n           number: \"2222222\"\n      }\n   ]\n}\n\nWhy id removed and how i can update my nested model?\nfor now i do:\n\nmodel.set({ value })\ncollection.create({\n   model\n})\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3926",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3926/comments",
    "title": "nested views : binding events with proper ui",
    "created_at": "2016-01-13T02:10:03Z",
    "updated_at": "2016-01-13T16:08:27Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3925",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3925/comments",
    "title": "Lodash _.flatten function work differently from v3.0.0",
    "created_at": "2016-01-12T14:31:09Z",
    "updated_at": "2016-01-12T16:40:33Z",
    "body": "Hi, I wrote a small piece of code for test _.flatten. the code is as below\n\n```\nobjects = [{ 'a': [1] }, { 'a': [2, 3] }];\nconsole.log(_.flatten(objects, 'a')); \n```\n\nversion<=2.4.2  the result is [ 1, 2, 3 ]\nbut while I use version>=3.0.0  result is [ { a: [ 1 ] }, { a: [ 2, 3 ] } ]\n\nI got some confused here, is there any definition change for this function?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3924",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3924/comments",
    "title": "Route parameters and ES6 default parameters",
    "created_at": "2016-01-12T12:55:43Z",
    "updated_at": "2016-01-12T20:54:11Z",
    "body": "This is an rather small issue with route parameters and ES6 default parameters that I just ran into and thought I would just bring it up (semi-related to #3828 I guess):\n\nSay we have an Router that looks like this:\n\n```\nconst Router = Backbone.Router.extend({\n    routes: {\n        \"(:foo)(/)(:bar)\": \"biz\"       \n    }\n});\n\nlet router = new Router();\n\nrouter.on(\"route:init\", (foo, bar) => {\n  console(foo, bar);\n});\n```\n\nIn [backbone.js#L1532](https://github.com/jashkenas/backbone/blob/c20ca2e3f6dc28aba0ff019d269650406a140c73/backbone.js#L1532) the comment above the `_extractParameters` method states:\n\n>  // Given a route, and a URL fragment that it matches, return the array of\n>     // extracted decoded parameters. Empty or unmatched parameters will be\n>     // treated as `null` to normalize cross-browser behavior.\n\nWhen navigating to `foo.com`, we get the following output:\n\n```\nconsole.log(foo, bar) // null, null\n```\n\nThere's nothing wrong with this, but it gets a bit more trickier when [default parameters](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters) come in:\n\nSay we want to use some default parameters if none are supplied, in ES5 we would do something like this:\n\n```\nrouter.on(\"route:init\", (foo, bar) => {\n  foo ? foo : \"hamburger\";\n  bar ? bar : \"vegan\";\n  console(foo, bar);\n});\n```\n\nIn ES6, one could just use default parameters: \n\n```\nrouter.on(\"route:init\", (foo = \"hamburger\", bar = \"vegan\") => {\n   console(foo, bar); // expected: hamburger, vegan\n});\n```\n\nHowever, as MDN states: \n\n> Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed.\n\nThe output from that is still `null, null` because the passed in values are `null`, rendering default parameters useless.\n\n```\nrouter.on(\"route:init\", (foo = \"hamburger\", bar = \"vegan\") => {\n   console(foo, bar); // null, null\n});\n```\n\nSolution would be passing no value at all or undefined instead of null, but I am not sure which browsers the comment about cross-browser inconsistencies refers to. \nThe workarounds are rather trivial (and it might not be the best use-case in general either), so the issue is not that urgent by any means.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3923",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3923/comments",
    "title": "Remove triggering Destroy: triggers Remove. Bug causes second Remove to remove the wrong thing.",
    "created_at": "2016-01-11T17:55:51Z",
    "updated_at": "2016-04-26T23:18:03Z",
    "body": "See comment below, this bug can be recreated without using `{silent: true}` at all.\n\n[fiddle without `{silent: true}`](https://jsfiddle.net/9rsgxbb0/1/)\noriginal [fiddle with `{silent: true}`](https://jsfiddle.net/g4576ewz/)\n\nI recently upgraded from Backbone 1.1.2 to Backbone 1.2.3. With my project as it is, when I remove a single item from a collection, that item **and the last item** (erroneously) in the collection are removed. The reason for this has to do with two things:\n- In the relevant code, `remove` is typically mapped to `destroy`. The reasoning is that we don't want uncollected detritus floating about in case someone accidentally uses `remove` on the collection.\n- In the newer backbone version, `destroy` no longer behaves as it did before as regards the `silent: true` option.\n\nDestroy [triggers a remove event](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1156) that can no longer be silenced, which is conceptually fine as we have indeed already removed the model from the collection. However as occurs in #3847 , `collection.get(model)` succeeds where `collection.indexOf(model)` returns `-1`. The logic leading to the faulty removal occurs at [line 1103](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1103), and just below [line 1106](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1106) contains a splice that given `-1` as an index removes the last element in the collection. `this.get(model)`, which is tested to prevent attempts to remove already removed items, [delegates to `_byId`](https://github.com/jashkenas/backbone/blob/master/backbone.js#L973) which does not contain the model itself as a key, but does contain the model's id and cid when it shouldn't.\n\nAny one of the following changes will fix this bug:\n- `destroy` changed to not trigger a `'remove'` event when given the `{ silent: true }` option\n- `_removeModels` modified to not splice out the last list element when `indexOf(model) == -1`\n- removed model's cid and id removed from `_byId` before second remove call occurs\n\nPlease let me know if there is a simple fix for my code which maintains the functionality of destroying an object when a remove event occurs.\n\nThe following code will reproduce this bug (or just use [the fiddle](https://jsfiddle.net/g4576ewz/)):\n\n``` html\n<html>\n  <body>\n    <div id=\"collection\"></div>\n    <div id=\"buttons\"></div>\n  </body>\n</html>\n```\n\n``` javascript\ndefine([\n  'backbone'\n],\nfunction (Backbone) {\n  var Collection = Backbone.Collection.extend({\n    endsInDestruction: function (model, collection, options) {\n      // the silent option will apply to remove events, preventing an infinite loop here.\n      // You can remove it to observe the infinite loop.\n      model.destroy({ silent: true });\n    },\n    initialize: function (options) {\n      this.listenTo(this, 'remove', this.endsInDestruction);\n      this.listenTo(this, 'add change remove', this.render);\n    },\n\n    el: $('#collection'),\n    render: function () {\n      $(this.el).html('<ul></ul>');\n      var list = $('ul', this.el);\n      this.forEach(function(model) {\n        list.append('<li>' + model.get('name') + '</li>');\n      });\n    }\n  });\n  var collection = new Collection();\n  collection.render();\n\n  // add two models, keeping a reference to one of them.\n  collection.add({\n    name: 'foobardi'\n  });\n  var model = collection.add({\n    name: 'caesar'\n  });\n\n  // This erroneously removes two items from the collection\n  function removeIt () {\n    collection.remove(model);\n    console.log('done');\n  }\n\n  // binds a button to remove an item at your leisure.\n  $('#buttons').html('<button type=\"button\" id=\"main-button\">Remove One Model</button>');\n  $('#main-button').click(removeIt);\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3922",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3922/comments",
    "title": "Can I get method name from event handler?",
    "created_at": "2016-01-11T09:36:44Z",
    "updated_at": "2016-02-04T15:32:36Z",
    "body": "I have a simple model that intercepts error. How can I get name of method that has created an error?\n\n```\nexport class CommonModel extends Backbone.Model {\n  constructor(options) {\n    super(options);\n    this.on(\"error\", this.onError);\n  }\n\n  onError(model, response, options) {\n    let method = ???\n    console.log(method); // GET or POST or PUT or DELETE\n  }\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3914",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3914/comments",
    "title": "deeply set in model",
    "created_at": "2016-01-01T10:54:22Z",
    "updated_at": "2016-01-04T16:27:50Z",
    "body": "#### The problem\n\nsee below code:\n\n```\nvar model = new Backbone.Model(\n  { a: { b: { c:'some value' } } }\n)\n\n// deeply get is handy\nvar val = model.get('a').b.c\n\n// deeply set is not\nvar temp = _.clone( model.get('a') )\ntemp.b.c = 'another'\nmodel.set('a', temp)\n......\n```\n#### The proposal\n\nWhen `model.attributes` should not contain space, so maybe the below form can be better:\n\n```\n// deeply get\nmodel.get('a b c')\n\n// deeply set\nmodel.set('a b c', 'another')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3913",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3913/comments",
    "title": "doc error in Collection modelId",
    "created_at": "2016-01-01T05:38:20Z",
    "updated_at": "2016-01-05T16:13:26Z",
    "body": "below doc error found: \nhttp://backbonejs.org/#Collection-modelId\n**modelId** collection.modelId(attrs) \n\n```\nvar Library = Backbone.Collection.extend({\n  modelId: function(attrs) {\n    if (attrs.type === 'dvd') {\n      return 'dvd' + attrs.dvd_id;\n    } else {\n      return 'vhs' + attrs.vhs_id;\n    }\n  }\n});\n\nvar library = new Library([\n  {type: 'dvd', id: 1},\n  {type: 'vhs', id: 1}\n]);\n\nalert('dvd: ' + library.get('dvd1').id + ', vhs: ' + library.get('vhs1').id);\n```\n\n`attrs.dvd_id` and `attrs.vhs_id` both is `undefined`, should be `attrs.id` ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3912",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3912/comments",
    "title": "Bootstrap date and time picker version 5",
    "created_at": "2015-12-31T07:27:56Z",
    "updated_at": "2016-01-05T15:30:14Z",
    "body": "How do i add how do i add data-container=\"body\" for data picker?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3908",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3908/comments",
    "title": "Make backbone play nicer with NoSQL REST APIs",
    "created_at": "2015-12-25T13:25:17Z",
    "updated_at": "2015-12-31T18:18:37Z",
    "body": "Backbone currently doesn't play nicely with NoSQL REST APIs, like MongoDB, because it rely's substantially on a [specific format](http://backbonejs.org/#API-integration) for the API.\n\nThis can all be overridden, but it results in a lot of boilerplate code. For MongoDB, you would use `idAttribute` to set something like the book name to as the main identifier, so the API would look like:\n\n```\nGET  /books/ .... collection.fetch();\nPOST /books/ .... collection.create();\nGET  /books/:name ... model.fetch();\nPUT  /books/:name ... model.save();\nDEL  /books/:name ... model.destroy();\n```\n\nBut since MongoDB uses a document attribute as the unique key, backbone will erroneously assume that `isNew` is false when trying to create a new entry on [save](http://backbonejs.org/#Model-save):\n\n> If the model isNew, the save will be a \"create\" (HTTP POST), if the model already exists on the server, the save will be an \"update\" (HTTP PUT).\n\nOne solution is to pass in the request method (ie. `post`) manually on `.save` requests. But then the burden is on the coder to add extra boilerplate to figure out when to CREATE or UPDATE in any given view.\n\nThe easier solution to this is to override `isNew` under [Backbone.Model](http://backbonejs.org/docs/backbone.html#backbone-model) with something that plays nicer with MongoDB. The problem creating all of this boilerplate is written in the comments for `isNew`:\n\n> A model is new if it has never been saved to the server, and lacks an id.\n\nNoSQL databases like MongoDB don't rely on ids like RDMS solutions do. Thus it confuses a new document as an old one and issues a PUT request instead of POST, which requires either boilerplate on the `.save` calls, or overriding `isNew` somehow.\n\nBackbone already is pretty unopinionated, but this is something that just feels a little to hacky to be considered clean. It should be able to support NoSQL better for this particular scenario. \n\nMy suggestion is to update the `isNew` method to return `false` if the model has not been synchronized with the server. Implicitly this would mean that the model is new. Or if backwards compatibility is an issue, have an option, such as `emulateNoSQL`, that will properly set up the API and `isNew` to play nicely with NoSQL database APIs.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3905",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3905/comments",
    "title": "Model with id \"undefined\"",
    "created_at": "2015-12-21T16:55:59Z",
    "updated_at": "2016-02-05T14:53:05Z",
    "body": "If you put model with id \"undefined\" in collection first, .get method of collection will always return this model.\n\nhttps://jsfiddle.net/duskpoet/rg74hL4p/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3901",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3901/comments",
    "title": "how to create two way binding?",
    "created_at": "2015-12-20T03:50:17Z",
    "updated_at": "2015-12-21T16:14:15Z",
    "body": "Hi guys,\n\nI am new to BackboneJS, I have created bootstrap modal pop up view as a child view, which is calling from parent view.\nIn modal pop up, i want to add or hide elements based on dropdown box. but currently modal pop up disappears after rendering..\n\nBelow is  code\n\n```\n var RepeatModalView = Backbone.View.extend({\nel: '.repeatmodal_tem',\nelements: {\n    \"uRepeateverybyweek\": true,\n    \"uRepeateverybyday\": false,\n    \"uRepeaton\": true,\n    \"uRepeatby\": false,\n},\nevents: {\n    'change .select_rctype': 'select_rctype',\n    'hidden': 'close'\n},\ninitialize: function() {\n  //_.bindAll(this, 'show', 'teardown', 'render', 'select_rctype');\n  this.template = _.template($('.repeatmodal_template').html());\n  this.render();\n},\nshow: function() {\n  this.$el.find('#RepeatModal').modal('show');\n},\nclose: function() {\n  this.$el.data('modal', null);\n  this.remove();\n},\nrender: function() {\n  this.$el.html(this.template(this));\n  //this.$el.modal({show:true}); // dont show modal on instantiation\n},\nselect_rctype:function(event) {\n    this.rctype = $(\"#uRepeats option:selected\").val();\n    console.log('rctype', this)\n    if (this.rctype == \"d\"){n        this.elements.uRepeateverybyweek = false;\n        this.elements.uRepeateverybyday = true;\n        this.elements.uRepeaton = false;\n        this.elements.uRepeatby = false;\n    }\n    else if (this.rctype == \"m\"){n\n    }\n    else if (this.rctype == \"y\"){\n\n    }\n    else{\n\n    }\n    return this;\n}\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3890",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3890/comments",
    "title": "After extending Collection.prototype.fetch the collection comes malformed",
    "created_at": "2015-12-15T13:33:26Z",
    "updated_at": "2016-03-10T20:40:52Z",
    "body": "In a project at the place I work we have the need to have a global error handler for collection/model fetch errors and for models we are doing it with no problems. \nWhen we try to extend the fetch method in collection prototype the collection comes malformed and we cant \"toJSON()\" the collection anymore.\n\n```\n// Default error on fetch\n        var originalColFetch = Backbone.Collection.prototype.fetch;\n        Backbone.Collection.prototype.fetch = function(options){\n            if(options){\n                var originalError = options.error;\n                options.error = function(collection, error, request){\n                    if (originalError){ originalError(collection, error); }\n\n                    App.Helpers.fetchErrorHandler(error)\n\n                }\n            }\n            originalColFetch.apply(this, arguments);\n\n        };\n```\n\nThe code I have to extend the collection fetch is this, at the moment I am calling the fetch with no arguments. The code for the model is pretty similar and it works. Do you guys know what could it be?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3889",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3889/comments",
    "title": "How to run test cases in play framework 2.3",
    "created_at": "2015-12-14T05:18:43Z",
    "updated_at": "2015-12-14T13:05:22Z",
    "body": "I am new to play framework and JUnit.I migrated the play framework 2.2 to 2.3.I want to write test cases.I can see the result in console with play test/test-only testDemo command total test cases,how many got failed/passed but I am not able see the test result in browser(http://localhost:9000/@tests).@tests is not working for me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3888",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3888/comments",
    "title": "Cobertura for delta changes testing",
    "created_at": "2015-12-12T08:28:27Z",
    "updated_at": "2015-12-12T19:26:48Z",
    "body": "Hi,\n\nI already post about the cobertura issue in my last post, \nhttps://github.com/jashkenas/backbone/issues/3887\n\nI also need to do report generation for my delta changes\n\nThanks in advance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3887",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3887/comments",
    "title": "Cobertura for manual gui testing in maven",
    "created_at": "2015-12-12T08:26:07Z",
    "updated_at": "2015-12-12T19:47:42Z",
    "body": "Hi,\n\nI am trying to generate the reports for my gui manual testing using cobertura. I need to use without junit, \n\nI have done instrumenting the class using cobertura:instrument and generate the instrumented classes.\n\nBut while doing manual testing it shows no data to be stored in ser file even after server shutdown.\n\nHelp me to come out of this issue.\n\nThanks in advance\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3882",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3882/comments",
    "title": "Internal _byId index of Collections wrong during model change event",
    "created_at": "2015-12-09T14:58:51Z",
    "updated_at": "2015-12-09T16:40:54Z",
    "body": "During model change event, when `id` attribute changes, the internal `_byId` index of containing collection is invalid. Because of this, the model cannot be obtained with `collection.get(id)` method, even though it has ID attribute already set. This is non-intuitive as internal indexing of collections should be transparent to the end user, and when `collection.get(ID)` returns null, it should be be safe to assume that the model with such ID does not exist in collection. \n\nInternally, this issue is caused by delayed firing of collection's `_onModelEvent` method which maintains the `byId` index (https://github.com/jashkenas/backbone/blob/05fde9e201f7e2137796663081105cd6dad12a98/backbone.js#L1144). It is being bound to the `all` event on model level, and `all` handlers are invoked only after all other events are processed (https://github.com/jashkenas/backbone/blob/05fde9e201f7e2137796663081105cd6dad12a98/backbone.js#L357) making the collection update it's index only after change handlers are executed.\n\nPlease see the example below:\n\n```\nclass Entry extends Backbone.Model\n  initialize: =>\n    @on 'change', (e) =>\n      console.log('onChange Model ', e.id, window.collection.get(e.id), window.collection.get(e.cid), window.collection.get(e.cid).id)\n\nclass Collection extends Backbone.Collection\n  model: Entry\n  initialize: =>\n    @on 'change', (e) =>\n      console.log('onChange Collection', e.id, window.collection.get(e.id), window.collection.get(e.cid))\n\nwindow.collection = new Collection()\nentry = collection.add({'name':'unsaved'})\nentry.set({'name':'saved', 'id':10})\n```\n\nIt's console output is:\n\n```\nonChange Model 10 undefined Entry {cid: \"c1\", \u2026} 10\nonChange Collection 10 Entry {cid: \"c1\", \u2026} Entry {cid: \"c1\", \u2026}\n```\n\nPlease note that in the model change handler the collection is in invalid state, as `collection.get(10)` produced `undefined` while `collection.get('c1').id` returns 10, meaning that the object with ID 10 is actually in the collection.\n\nAlso, the second line shows inconsistency with the `change` event bound at the collection level, which behaves correctly.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3881",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3881/comments",
    "title": "ES6 Module Conventions with $, _ and Backbone libraries",
    "created_at": "2015-12-09T04:15:06Z",
    "updated_at": "2015-12-09T15:39:21Z",
    "body": "I am in the process of refactoring my code Backbone codebase to leverage new the ES6 features. One of the features I am most excited about is the Module system introduced in ES6. I am still playing around with different bundlers to be able to load it into current browsers that don't support ES6 yet.\n\n**Just curious to see how people are using Backbone in conjunction with ES6 Modules?**\n\nI have seen two approaches with regards to Underscore, jQuery, and Backbone libraries:\n\nAssuming the following html file:\n\n``` html\n<!-- index.html -->\n<script src=\"underscore.js\"></script>\n<script src=\"jquery.js\"></script>\n<script src=\"backbone.js\"></script>\n<script src=\"one.js\"></script>\n<script src=\"two.js\"></script>\n<script src=\"main.js\"></script>\n```\n\n**Load the libraries onto the global window object and access them via the window object.**\nThis seems like the traditional way of declaring library dependencies. It doesn't require adding boilerplate imports in all of your custom Backbone files/modules.\n\n``` javascript\n// File: one.js\n// access Backbone via the global object\nexport default OneView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: two.js\n// access Backbone via the global object\nexport default TwoView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: main.js\nimport OneView from './one.js';\nimport TwoView from './two.js';\n\n// access backbone via global\nvar m = new Backbone.Model();\nvar v1 = new OneView();\nvar v2 = new TwoView();\n```\n\n**Explicitly import the libraries for each new module you create**\nThis is very explicit but each individual file is very clear about what it is dependent on. If you unit test a file in isolation, all of it's dependencies are stated and should be more self-contained. It feels kind of bloated though to include all those imports in each custom Backbone file. This type of format will also play nicely with browserify/webpack and other bundlers. It also feels like how other languages module systems work.\n\n``` javascript\n// File: one.js\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nexport default OneView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: two.js\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nexport default TwoView = Backbone.View.extend({\n  el: '.one'\n});\n```\n\n``` javascript\n// File: main.js\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nimport OneView from './one.js';\nimport TwoView from './two.js';\n\n// access backbone via global\nvar m = new Backbone.Model();\nvar v1 = new OneView();\nvar v2 = new TwoView();\n```\n\nI could probably combine the jquery, underscore and backbone imports into one helper module that exports all three so that it would only be one export:\n`export {$, _, Backbone} from './BackboneHelper';`\n\nCurious to see if anyone else has found some useful conventions or wanted to discuss the tradeoffs they've experienced between the two methods.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3880",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3880/comments",
    "title": "H5 route bug",
    "created_at": "2015-12-09T01:36:01Z",
    "updated_at": "2015-12-09T15:14:44Z",
    "body": "``` javascript\nroutes:{\n        'home/*':                             'home',\n        'home/:id/*:                         'homeA',\n}\n```\n\nwhen user h5 pushstate history and  link to /home?a=111\nI hope route \u2018home\u2019\nbut In fact , it route 'homeA'\nplease check it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3878",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3878/comments",
    "title": "Route arguments not properly parsed",
    "created_at": "2015-12-07T13:26:22Z",
    "updated_at": "2015-12-07T16:08:44Z",
    "body": "Hi, based on the documentation, if i've the following route \n\n``` javascript\n'myself(/:opt(/:opt2))': 'displayMyself'\n```\n\nThe function that handles this route is defined as (yes this is es6)\n\n``` javascript\ndisplayMyself(tab, path){\n    console.info(tab,path);    \n}\n```\n\nHere are the arguments i receive based on the url hash i give\n\n| Url hash | tab | path |\n| --- | :-: | --: |\n| #myself | null | null |\n| #myself/titi | titi | null |\n| #myself/titi/tata | titi | /tata |\n\nWhy do i have a _/_ in front of _tata_? Based on the documentation shouldn't i get just _tata_ ?\n\nI think that there is a parsing issue here.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3877",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3877/comments",
    "title": "Routers: _bindRoutes() after initialize function call",
    "created_at": "2015-12-03T18:15:48Z",
    "updated_at": "2017-03-18T18:21:29Z",
    "body": "Wouldn't it be better to call _bindRoutes() after the initialization.\n\n``` javascript\nvar Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n```\n\nI try to use object-methods in the route object. The initialization of the objects is in the initialize method. The route-object looks like this:\n\n``` javascript\nroute: {\n    'path/to/:id': this.object.method\n  {\n```\n\nThis causes an Error because the Object doesn't exist at the time of the _bindRoutes() call. Currently I'm using a small Workaroud. I set route in the initialize method and then call _bindRoutes() manually. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3876",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3876/comments",
    "title": "in amd mode, backbone router error",
    "created_at": "2015-12-03T06:07:54Z",
    "updated_at": "2015-12-09T10:02:33Z",
    "body": "Backbone.Router.extend({\n    initialize:function(){\n            this.bind('route',function(){\n                console.log(1)\n            });\n        },\n        routes:{\n            \"\":\"home\"\n        },\n        home:function(){\n            console.log(2)\n        }\n});\nconsole log 2 -> 1 \nI want log 1 -> 2 \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3874",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3874/comments",
    "title": "Object.prototype collisions of model values in Collection._byId lookup",
    "created_at": "2015-11-30T18:54:47Z",
    "updated_at": "2015-12-01T16:48:03Z",
    "body": "This issue seems related to [#3842](https://github.com/jashkenas/backbone/issues/3842) but this also happens for values as well as keys.\n\nIn FireFox if you create a collection that uses the `idAttribute` field to do a id lookup. The lookup will return the wrong value if the value of a models idAttribute is also a value on Object.prototype. For example, `watch`.\n\nIn the referenced issue, people have mentioned not using prototype names as default properties, which I can understand, but attribute values should not have a limitation as we aren't always in control of what those values may be.\n\nHere is an example:\n\n``` javascript\nvar M = Backbone.Model.extend({\n    idAttribute: 'type',\n    defaults: {\n        'type': '',\n        'name': ''\n    }\n});\n\nvar model1 = new M({'type': 'watch', name: 'Watch'});\nvar model2 = new M({'type': 'other', name: 'Other'});\n\nvar C = Backbone.Collection.extend({\n    model: M\n});\n\nvar collection = new C();\n\n// add the models\ncollection.add(model1);\ncollection.add(model2);\n\n// try and get the model with type: 'watch'\nconsole.log(collection.get('watch'));\nconsole.log(collection.length);\n\n// LOG: function watch()\n// LOG: 1\n```\n\nThe above example only happens in firefox but in Chrome you can see the same behavior if you add the following:\n\n``` javascript\nvar model3 = new M({'type': 'constructor', name: 'Constructor'});\n\ncollection.add(model3);\nconsole.log(collection.get('constructor'));\n\n// LOG: function Object() { [native code] }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3873",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3873/comments",
    "title": "Backbone 1.2.x can no longer be used in Browserify environment without jQuery",
    "created_at": "2015-11-28T16:26:21Z",
    "updated_at": "2015-11-28T16:52:49Z",
    "body": "My project is using Backbone as a dependency, but doesn't use jQuery. Everything worked fine with Backbone 1.1.2, but when I tried to upgrade to Backbone 1.2.x my build became broken:\n\n```\nevents.js:141\n      throw er; // Unhandled 'error' event\n      ^\n\nError: Cannot find module 'jquery' from '/Users/dvs/Dropbox/Code/cub/node_modules/backbone'\n    at /Users/dvs/Dropbox/Code/cub/node_modules/resolve/lib/async.js:46:17\n    at process (/Users/dvs/Dropbox/Code/cub/node_modules/resolve/lib/async.js:173:43)\n    at ondir (/Users/dvs/Dropbox/Code/cub/node_modules/resolve/lib/async.js:188:17)\n    at load (/Users/dvs/Dropbox/Code/cub/node_modules/resolve/lib/async.js:69:43)\n    at onex (/Users/dvs/Dropbox/Code/cub/node_modules/resolve/lib/async.js:92:31)\n    at /Users/dvs/Dropbox/Code/cub/node_modules/resolve/lib/async.js:22:47\n    at FSReqWrap.oncomplete (fs.js:82:15)\n```\n\nI'm using latest versions of browserify (12.0.1) and nodejs (5.0.0).\nI tried all Backbone versions from 1.2.0 to 1.2.3, and all of them are not working with my build. Latest compatible version seems to be 1.1.2.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3872",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3872/comments",
    "title": "How to identify and set reverse normals programmatically using Arcobjects?",
    "created_at": "2015-11-28T06:11:19Z",
    "updated_at": "2015-11-29T03:57:55Z",
    "body": "I am working a 3D-Buildings project, where deliverables are \\* .dgn and Esri Multipath, after conversion of  *.dgn to multipath in ArcMap, noticed that few facades normals reversed ,results looks likes portions of the multipatch are missing. So, I have to fix those faces (inverted) programmatically. Please suggest how to fix these issues and also provide which interfaces can help to resolve these issues.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3871",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3871/comments",
    "title": "Collection.set behavior changed in 1.2.3",
    "created_at": "2015-11-27T11:25:15Z",
    "updated_at": "2015-12-01T15:25:23Z",
    "body": "This change https://github.com/jashkenas/backbone/commit/a082d2fdf9d0509ae7082296e41a0b7efe6878d2#diff-0d56d0d310de7ff18b3cef9c2f8f75dcR797\nchanges the behavior if collection's `parse` method return falsy value.\n\nBefore: empty collection\nAfter: collection with 1 \"blank\" model\n\nIs it and intended change? My personal consideration is that having 1 empty model in this case is unexpected and unwanted behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3869",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3869/comments",
    "title": "Unable to find elements inside a jqplot, canvas graph",
    "created_at": "2015-11-26T12:54:32Z",
    "updated_at": "2015-12-01T00:53:49Z",
    "body": "I want to write an automation script which loads the webpage (http://www.kathyw.org/jQPlot/LinkTest.html), moves the control to the graph, find the tooltip corresponding to the bar and then clicks on any bar so as to find the title of next page.\n\nPlease suggest me any tool which could perform all these tasks. The major problem (as per my findings) is with inspecting the graph elements. Hence, I am unable to use Protractor and Selenium. Plus, using Sikuli is also not an efficient approach as I have large number of graphs and capturing all the expected results would be a tedious task.\n\nPlease help me in this regard.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3868",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3868/comments",
    "title": "Collection.remove doesn't remove all given models",
    "created_at": "2015-11-25T15:36:02Z",
    "updated_at": "2015-11-25T18:14:31Z",
    "body": "For some ugly \"flexbox\" reason, I want to append fake models to the end of my collection, even after fetching more models. So on sync, I remove the previous fake models, then add new ones at the end.\n\nAnyways, here's my issue:\n\n```\nonSync: ->\n  modelsToRemove = @where({id: 0})\n  console.log modelsToRemove, modelsToRemove.length\n  // this prints:\n  // [child, child, child, child, child]  5\n  // which is expected\n  @remove(modelsToRemove)\n\n  modelsToRemove2 = @where({id: 0})\n  console.log modelsToRemove2, modelsToRemove2.length\n  // this should print\n  // [] 0\n  // right?\n  // but it prints:\n  // [child]  1\n  // and the cid of the child is actually present in the first list...\n\n  @add({}) for [1..@fakeCount]\n```\n\nIf someone could shed some light on this issue for me, I'd appreciate it!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3863",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3863/comments",
    "title": "upload file using backbone.js",
    "created_at": "2015-11-21T14:42:31Z",
    "updated_at": "2015-11-23T15:00:11Z",
    "body": "i have spring mvc, jpa and backbone.js application. i want to upload file using backbone.js. please tell how i want do.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3861",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3861/comments",
    "title": "Backbone.(Model/View/Collection).extend feature does not make deep copy.",
    "created_at": "2015-11-19T19:49:20Z",
    "updated_at": "2015-11-19T21:59:45Z",
    "body": "If I have to extend some common features, that I have declared in separate objects, extend does not merge but overwrite.\ne.g.\n\n``` javascript\nvar myCommonObject1 = {events: {'click .somediv': 'someaction'}};\nvar myCommonObject2 = {events: {'click .otherdiv': 'otheraction'}};\nvar MyView = Backbone.View.extend(myCommonObject1).extend(myCommonObject2);\nvar myView = new MyView();\n```\n\nthen,\nmyView.events gives you:\n\n``` javascript\n{'click .otherdiv': \"otheraction\"}\n```\n\nThis can be easily solved by having a merge method:\n\n``` javascript\n _.mixin({\n    merge: function(obj1, obj2) {\n      for (var p in obj2) {\n        try {\n          if(_.isObject(obj2[p])) {\n            obj1[p] = this.merge(obj1[p], obj2[p]);\n          } else {\n            obj1[p] = obj2[p];\n          }\n        } catch(e) {\n          obj1[p] = obj2[p];\n        }\n      }\n      return obj1;\n    }\n  });\n```\n\nAnd, having extend use merge for merging properties:\n\n``` javascript\nvar extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n    _.merge(child, parent, staticProps);\n    var Surrogate = function(){ this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate;\n    if (protoProps) _.merge(child.prototype, protoProps);\n    child.__super__ = parent.prototype;\n    return child;\n  };\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3860",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3860/comments",
    "title": "Specflow to be used on crossplatform applications",
    "created_at": "2015-11-19T09:53:28Z",
    "updated_at": "2015-11-19T15:32:19Z",
    "body": "Hi,\n\nI have couple of applications with different platforms Java, WPF and Java webservices. I need to do an end to end automation for all these application. \n\nI want to use Specflow for this. \n\nCould you please guide, if there is any way to use specflow on cross-platform applications.\n\nMany Thanks,\nNeha\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3858",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3858/comments",
    "title": "Subcollection memory leak (single model, multiple collections)",
    "created_at": "2015-11-16T10:03:24Z",
    "updated_at": "2015-11-17T15:46:01Z",
    "body": "When adding a single Backbone.Model to multiple Backbone.Collections, each collection adds its own event listener to the added model (in _addReference). This reference prevents any collection to be garbage collected until every single model is explicitly removed from this collection. \n\nOur application depends on creating many temporary collections (from grouping or filtering results) to re-use extended collection methods on these results, containing already existing models from base collections. \nWe'd like to see these temporary collections garbage collected, once their reference gets discarded (via delete or leaving the scope). Instead we're aggregating references to every single temporary collection within every model, preventing them from ever getting discarded as long as the model is alive. \n\nSolving this problem by calling .reset() on every temporary collection and thereby removing the event listeners would be a major inconvenience. Is there any BB concept enabling us to use temporary backbone collections without forcing us to cleanup by ourselves?\n\nHere is a jsFiddle demonstrating the issue: http://jsfiddle.net/yf2t8w98/1/\nWatching the debugger timeline while running the loop you'll see something like that: \n\n![bb1](https://cloud.githubusercontent.com/assets/15647922/11179088/451b0e5e-8c51-11e5-812f-6c25024560c8.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3857",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3857/comments",
    "title": "Hash is incorrect in safari,if pass path using unicode string to navigate method ",
    "created_at": "2015-11-13T10:10:16Z",
    "updated_at": "2016-05-06T19:02:44Z",
    "body": "In Safari , pass a path using unicode string to `navigate` method  like this\n\n``` js\nBackbone.history.navigate('/city/\u5317\u4eac',{trigger:true});\n```\n\nThe hash is incorrect. It output\n\n``` js\nlocation.hash\n//> #/city/%17%AC\n```\n\nI tracked the code, it caused by `_updateHash` method.\n\nThe call stack created by  `History.prototype.navigate` method like this\n- navigate\n  -  decodeFragment\n  - _updateHash\n\nThe fragment passed to `_updateHash`,  was decoded by `decodeFragment`, so the hash was incorrect\u3002\n\nI also searched the commit history, the `decodeFragment` added in \"1.2.0\"\n\nPS: My english is not good, although I am trying to improve\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3856",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3856/comments",
    "title": "Doverilog",
    "created_at": "2015-11-12T19:34:35Z",
    "updated_at": "2015-11-12T19:40:05Z",
    "body": "I've installed Doxverilog 2.7 and also, downloaded source directories of Doxygen 1.8.1 from this website\n\n```\nhttps://github.com/ewa/doxverilog\n```\n\nThe setup of doxygen is downloaded from:\n    http://sourceforge.net/projects/doxygen/files/\n\nI'm using cygwin along with the installation of bison,  flex, graphviz and qt5 packages on windows. I've also installed unxutills. I followed the general steps provided in the readme file of folder \"doxverilog 2.7\". When I run this command:\n\n```\npatch -F3 -p0 < linux.patch \n```\n\nthen cygwin (run as administrator) displays different messages. The messages are provided below. \n\n**Messages:** \n\n```\nuser@user-PC /cygdrive/c/doxverilog-master/doxygen-1.8.1\n$ patch -F3 -p0 < linux.patch\ncan't find file to patch at input line 5\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: util.cpp\n|===================================================================\n|--- util.cpp   (Revision 818)\n|+++ util.cpp   (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n3 out of 3 hunks ignored\ncan't find file to patch at input line 52\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: doxygen_css.h\n|===================================================================\n|--- doxygen_css.h      (Revision 818)\n|+++ doxygen_css.h      (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 67\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: navtree_js.h\n|===================================================================\n|--- navtree_js.h       (Revision 818)\n|+++ navtree_js.h       (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n3 out of 3 hunks ignored\ncan't find file to patch at input line 138\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: definition.cpp\n|===================================================================\n|--- definition.cpp     (Revision 818)\n|+++ definition.cpp     (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n2 out of 2 hunks ignored\ncan't find file to patch at input line 167\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: configoptions.cpp\n|===================================================================\n|--- configoptions.cpp  (Revision 818)\n|+++ configoptions.cpp  (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n3 out of 3 hunks ignored\ncan't find file to patch at input line 216\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: ftvhelp.cpp\n|===================================================================\n|--- ftvhelp.cpp        (Revision 818)\n|+++ ftvhelp.cpp        (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n8 out of 8 hunks ignored\ncan't find file to patch at input line 481\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: vhdldocgen.h\n|===================================================================\n|--- vhdldocgen.h       (Revision 818)\n|+++ vhdldocgen.h       (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 496\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: index.cpp \n|===================================================================\n|--- index.cpp  (Revision 818) \n|+++ index.cpp  (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n3 out of 3 hunks ignored\ncan't find file to patch at input line 537\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: memberdef.h\n|=================================================================== \n|--- memberdef.h        (Revision 818)\n|+++ memberdef.h        (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n2 out of 2 hunks ignored\ncan't find file to patch at input line 560\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: definition.h\n|===================================================================\n|--- definition.h       (Revision 818)\n|+++ definition.h       (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n3 out of 3 hunks ignored\ncan't find file to patch at input line 593\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: vhdlparser.y\n|===================================================================\n|--- vhdlparser.y       (Revision 818)\n|+++ vhdlparser.y       (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n2 out of 2 hunks ignored\ncan't find file to patch at input line 615\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: vhdldocgen.cpp\n|===================================================================\n|--- vhdldocgen.cpp     (Revision 818)\n|+++ vhdldocgen.cpp     (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 6945\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: filedef.cpp  \n|===================================================================\n|--- filedef.cpp        (Revision 818)\n|+++ filedef.cpp        (Arbeitskopie)\n--------------------------\nFile to patch:  \nSkip this patch? [y]\nSkipping patch.\n3 out of 3 hunks ignored\ncan't find file to patch at input line 6989\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: image.cpp\n|===================================================================\n|--- image.cpp  (Revision 818)\n|+++ image.cpp  (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n2 out of 2 hunks ignored\ncan't find file to patch at input line 7049\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: doxygen.cpp\n|===================================================================\n|--- doxygen.cpp        (Revision 818)\n|+++ doxygen.cpp        (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n7 out of 7 hunks ignored\ncan't find file to patch at input line 7124\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: config.l\n|===================================================================\n|--- config.l   (Revision 818)\n|+++ config.l   (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n4 out of 4 hunks ignored\ncan't find file to patch at input line 7179\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: util.h\n|===================================================================\n|--- util.h     (Revision 818)\n|+++ util.h     (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 7191\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: image.h\n|===================================================================\n|--- image.h    (Revision 818)\n|+++ image.h    (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 7204\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: classdef.cpp\n|===================================================================\n|--- classdef.cpp       (Revision 818)\n|+++ classdef.cpp       (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n10 out of 10 hunks ignored\ncan't find file to patch at input line 7329\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: htmlgen.cpp\n|===================================================================\n|--- htmlgen.cpp        (Revision 818)\n|+++ htmlgen.cpp        (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 7364\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: types.h\n|===================================================================\n|--- types.h    (Revision 818)\n|+++ types.h    (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 7378\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: memberdef.cpp\n|===================================================================\n|--- memberdef.cpp      (Revision 818)\n|+++ memberdef.cpp      (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n5 out of 5 hunks ignored\ncan't find file to patch at input line 7432\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: translator_en.h\n|===================================================================\n|--- translator_en.h    (Revision 818)\n|+++ translator_en.h    (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\ncan't find file to patch at input line 7447\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: vhdlscanner.l\n|===================================================================\n|--- vhdlscanner.l      (Revision 818)\n|+++ vhdlscanner.l      (Arbeitskopie)\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n5 out of 5 hunks ignored\ncan't find file to patch at input line 7585\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: libdoxygen.pro.in\n|===================================================================\n|--- libdoxygen.pro.in  2011-08-03 12:28:25.000000000 +0100\n|+++ libdoxygen.pro.in  2011-11-12 17:06:04.000000000 +0000\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n4 out of 4 hunks ignored\ncan't find file to patch at input line 7625\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: libdoxygen.pro.in \n|===================================================================\n|--- libdoxygen.t       2011-08-03 12:37:56.000000000 +0200\n|+++ libdoxygen.t       2011-11-12 17:06:04.000000000 +0100\n--------------------------\nFile to patch:\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\n```\n\nWhen I run the following command after these messages.\n\n```\nsh configure\n```\n\nThe following messages are displayed:\n\n**Messages:**   \n\n```\nAutodetected platform win32-g++...\nChecking for GNU make tool... using /cygdrive/c/UnxUtils/usr/local/wbin/make\nChecking for GNU install tool... using /usr/bin/install\nChecking for dot (part of GraphViz)... using /usr/bin/dot\nChecking for perl... using /usr/bin/perl\nChecking for flex... using /usr/bin/flex\nChecking for bison... using /usr/bin/bison\nCreating VERSION file.\nCreated doxygen.spec file, for rpm generation.\nCreated Makefile from Makefile.in...\nCreated qtools/Makefile from qtools/Makefile.in...\nCreated src/Makefile from src/Makefile.in...\nCreated examples/Makefile from examples/Makefile.in...\nCreated doc/Makefile from doc/Makefile.in...\nCreated addon/doxywizard/Makefile from addon/doxywizard/Makefile.in...\nCreated addon/doxmlparser/src/Makefile from\naddon/doxmlparser/src/Makefile.in...\nCreated addon/doxmlparser/test/Makefile from\naddon/doxmlparser/test/Makefile.in...\nCreated addon/doxmlparser/examples/metrics/Makefile from\naddon/doxmlparser/examples/metrics/Makefile.in...\nCreated libmd5/Makefile from libmd5/Makefile.in...\nCreated addon/doxyapp/Makefile from addon/doxyapp/Makefile.in...\nCreated qtools/qtools.pro from qtools/qtools.pro.in...\nCreated src/libdoxygen.pro from src/libdoxygen.pro.in...\nCreated src/libdoxycfg.pro from src/libdoxycfg.pro.in...\nCreated src/doxygen.pro from src/doxygen.pro.in...\nCreated addon/doxywizard/doxywizard.pro from\naddon/doxywizard/doxywizard.pro.in...\nCreated addon/doxmlparser/src/doxmlparser.pro from\naddon/doxmlparser/src/doxmlparser.pro.in...\nCreated addon/doxmlparser/test/xmlparse.pro from\naddon/doxmlparser/test/xmlparse.pro.in...\nCreated addon/doxmlparser/examples/metrics/metrics.pro from\naddon/doxmlparser/examples/metrics/metrics.pro.in...\nCreated libmd5/libmd5.pro from libmd5/libmd5.pro.in...\nCreated addon/doxyapp/doxyapp.pro from addon/doxyapp/doxyapp.pro.in...\nGenerating src/lang_cfg.h...\n```\n\nNow, when I run the following command \n\n```\nmake all \n```\n\nthe the following messages are dislayed:\n\n**Messages:**\n\n```\necho \"char versionString[]=\\\"1.8.1\\\";\" > src/version.cpp\n/cygdrive/c/UnxUtils/usr/local/wbin/make -C qtools\nprocess_begin: CreateProcess((null),\n/cygdrive/c/UnxUtils/usr/local/wbin/make -C qtools, ...) failed.\nmake (e=2): The system cannot find the file specified.\nC:\\UnxUtils\\usr\\local\\wbin\\make.exe: *** [all] Error 2\n```\n\nPlease help me in this problem.\n\nThank-you.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3854",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3854/comments",
    "title": "Backbone 1.2.3 - can get route name from execute() method",
    "created_at": "2015-11-11T19:21:55Z",
    "updated_at": "2015-11-11T20:01:13Z",
    "body": "``` javascript\nBackbone.Router.extend({\n        /**\n         * Routes\n         */\n        routes: {\n            filters: function() {\n                console.log(arguments);\n            }\n        },\n\n        execute: function(callback, args, name) {\n            console.log(arguments);\n            if (callback) callback.apply(this, args);\n        }\n});\n```\n\nThis is my basic router. When navigating to http://url#filters however, the output from the execute() method is this:\n\n``` javascript\n[function(), [null], \"\"]\n```\n\nI had thought that the name argument is the route name but as you can see it is an empty string. This does not match the documentation.\n\nedit: title should be CAN'T get the name ;)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3853",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3853/comments",
    "title": "More information for 'update' event on collection (DUPLICATE)",
    "created_at": "2015-11-09T00:11:10Z",
    "updated_at": "2015-11-09T00:17:33Z",
    "body": "EDIT: Disregard, duplicate of #3700. Apparently I don't know how to search for issues.\n\n~~In both instances where `update` is triggered on a collection (within `remove` method and within `set` method) the code has access to all of the following information:~~\n- ~~what models were added to the collection (none in `remove` method, the local variable `toAdd` in `set` method)~~\n- ~~what models were removed from the collection (the local variable `removed` in `remove` method, the local variable `toRemove` in `set` method)~~\n- ~~what models were changed in the collection (none in `remove` method, the local variable `set` minus those in `toAdd` in `set` method)~~\n\n~~Just as `previousModels` is included in the options for a `reset` event, would it be possible/sensible to have the above information included on an `update` to allow for some more optimised bulk operations rather than having to do them on `add`, `remove` and `change` respectively?~~\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3852",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3852/comments",
    "title": "delegateEvent documentation example is irrelevant",
    "created_at": "2015-11-08T09:06:36Z",
    "updated_at": "2015-11-09T14:56:01Z",
    "body": "Here's the [`delegateEvents` documentation](http://backbonejs.org/#View-delegateEvents) example code:\n\n``` javascript\nvar DocumentView = Backbone.View.extend({\n\n  events: {\n    \"dblclick\"                : \"open\",\n    \"click .icon.doc\"         : \"select\",\n    \"contextmenu .icon.doc\"   : \"showMenu\",\n    \"click .show_notes\"       : \"toggleNotes\",\n    \"click .title .lock\"      : \"editAccessLevel\",\n    \"mouseover .title .date\"  : \"showTooltip\"\n  },\n\n  render: function() {\n    this.$el.html(this.template(this.model.attributes));\n    return this;\n  },\n\n  open: function() {\n    window.open(this.model.get(\"viewer_url\"));\n  },\n\n  select: function() {\n    this.model.set({selected: true});\n  },\n\n  ...\n\n});\n```\n\nThis is the description of the example:\n\n> A view that displays a document in a search result might look something like this:\n\nI'm not sure how the code is related to the `delegateEvents` topic or the above description.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3849",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3849/comments",
    "title": "how to write sql queries inside yii2 Active Record",
    "created_at": "2015-11-04T11:52:08Z",
    "updated_at": "2015-11-04T14:20:11Z",
    "body": "I'm new to yii2 and i don't know how and where to write sql queries in Yii2.\nany help will be highly appreciated!!!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3848",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3848/comments",
    "title": "Backbone.js 1.2.0 when view.remove() ",
    "created_at": "2015-11-04T07:14:54Z",
    "updated_at": "2016-09-06T17:46:28Z",
    "body": "sorry for my poor english, my project use backbone.js 1.2.0;when I execute view.remove(), it throw a exception: obj is null. By debug i find it occur at 186 line in backbone.js . it is in Events.stopListening method : \"listening.obj.off(name, callback, this);\" the obj is null\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3847",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3847/comments",
    "title": "Collection.remove behavior in 1.2.X",
    "created_at": "2015-11-03T00:39:18Z",
    "updated_at": "2015-11-04T06:28:34Z",
    "body": "In previous versions, when model was removed from collection, you first cleaned up the index (`this._byId`), and only then you trigger `remove` event. Which was okay.\n\nIn 1.2, you first remove the model, trigger `remove`, and only then clean up the index in `_removeReference`. Thus, in the `remove` event handler model is still present in the index (while absent in collection), resulting in successful `get`. Which leads to weird things, like infinite loop when trying to remove the same model again in 'remove' event handler.\n\nIs there any specific reason you now triggering 'remove' while collection is in inconsistent state, or it's just a bug?\n\n``` javascript\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed.length ? removed : false;\n    },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3842",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3842/comments",
    "title": "Object.prototype properties conflict with `_.defaults`",
    "created_at": "2015-10-29T19:03:10Z",
    "updated_at": "2016-02-04T17:23:43Z",
    "body": "I run into an issue today, as Firefox added support for a new `watch` function to each Object.prototype, while I was unfortunate to use 'watch' as a name of an attribute of my Model.\nThe problem is caused by Model's constructor line:\n\n```\nattrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n```\n\nand the fact that lodash's _.defaults implementation sees that `typeof {}.watch` is not `'undefined` so it does not want to override it with the one found in `attrs`.\nNot sure if the issue is with Backbone, Lodash, or Firefox, but one thing is sure: while I can (and do) avoid today's magic properties (like `constructor`, `valueOf` etc.) I can not really anticipate what word will be forbiden in future, and don't like the idea of updating my app in future whenever one of my favorite words get's banned.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3839",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3839/comments",
    "title": "v1.2.4",
    "created_at": "2015-10-27T22:28:25Z",
    "updated_at": "2016-01-11T18:03:25Z",
    "body": "Features\n- [x] Use `_.create` in `.extend` https://github.com/jashkenas/backbone/pull/3553\n- [x] Add `#findIndex` and `#findLastIndex` to `Collection` https://github.com/jashkenas/backbone/pull/3811\n\nBug Fixes\n- [x] `#_removeModels` model still in collection regression https://github.com/jashkenas/backbone/pull/3803\n- [x] `#set` model id regression https://github.com/jashkenas/backbone/pull/3833\n- [x] `#remove` returning `false` regression https://github.com/jashkenas/backbone/pull/3837\n- [x] `#reduce` and friends regression https://github.com/jashkenas/backbone/pull/3820\n\nMaybe\n- [ ] ~~Deopt Underscore methods containing `arguments` https://github.com/jashkenas/backbone/pull/3840~~\n- [ ] Add `#preinitialize` https://github.com/jashkenas/backbone/pull/3827\n- [ ] Add `update` event feedback https://github.com/jashkenas/backbone/pull/3711\n- [ ] `Object.prototype` conflicts with `_.defaults` https://github.com/jashkenas/backbone/pull/3843\n\n/cc @paulfalgout. :smile: \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3838",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3838/comments",
    "title": "Backbone object is duplicated when imported",
    "created_at": "2015-10-27T04:02:28Z",
    "updated_at": "2015-10-27T16:39:21Z",
    "body": "When Backbone is imported into a file a new copy of `Backbone` is created each time.\n\nConsider these 2 files:\n\n**router.js:**\n\n``` javascript\nimport Backbone from 'backbone';\n\nwindow.BB1 = Backbone;\n\nexport default Backbone.Router.extend( /* stuff here */ );\n```\n\n**main.js:**\n\n``` javascript\nimport Backbone from 'backbone';\nimport Router from './router';\n\nwindow.BB2 = Backbone; // NOT THE SAME OBJECT AS window.BB1\n\nnew Router();\n\n// DOES NOT TRIGGER ROUTER\n// BECAUSE ROUTER IS USING A\n// DIFFERENT COPY OF BACKBONE\nBackbone.history.start();\n```\n\nWhen I make the same test with another library like jquery.\n\n``` javascript\nimport $ from 'jquery';\n```\n\nIt is always the same object (never duplicated.) I have looked at the source of both and I am not seeing what is causing backbone to get duplicated each time. I may try again later though, if I figure out the cause I'll make a PR (assuming that would be wanted -- I don't see why it would be intentionally duplicated.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3836",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3836/comments",
    "title": "Backbone partial view not rendering in some cases",
    "created_at": "2015-10-25T04:08:47Z",
    "updated_at": "2015-10-26T17:58:52Z",
    "body": "I am relatively new to Backbone and I am running into this problem.\n\nI am using Backbone with DustJS\n\nMy template looks something like this - `index.dust`\n\n```\n<div id=\"parentView\">\n  <div class=\"section\">\n    {>\"app/inc/responseMessage\" /}\n    <div class=\"userDetails\">\n      {! A button to get user details !}\n    </div>\n  </div>\n</div>\n```\n\nThis is my partial below - `responseMessage.dust`\n\n```\n<div id=\"responseMessage\">\n  {@eq key=\"{data.success}\" value=\"true\"}\n    <div class=\"alert alert-success success\" role=\"alert\">success</div>\n  {/eq}\n</div>\n```\n\nMy JS looks like this\n\n```\ninitialize: function() {\n    this.responseMessageView = this.responseMessageView ||\n        new ResponseMessageView({\n            model: new Backbone.Model()\n        }); // View is for the partial\n    this.model = this.model || new Backbone.Model(); //View for the whole page\n},\n```\n\nBelow function is called when an event occurs and it does a POST and returns successfully.\n\n```\nprimaryViewEventTrigger: function(event){\n  //Button click on `index.dust` triggers this event and does a POST event to the backend\n\n  this.listenToOnce(this.model, 'sync', this.primaryViewSuccess);//this will render the whole view. \n  this.listenToOnce(this.model, 'error', this.primaryViewError);\n  this.model.save({data: {x:'123'}});\n}\n\nresponseViewEventTrigger: function(event){\n  //Button click on `responseMessage.dust` triggers this event and does a POST event to the backend\n\n  this.listenToOnce(this.responseMessageView.model, 'sync', this.responseViewSuccess);//it should only render the partial view - responseMessage.dust\n  this.listenToOnce(this.responseMessageView.model, 'error', this.primaryViewError);\n  this.responseMessageView.model.save({data: {x:'123'}});\n}\nprimaryViewSuccess: function(model,response){\n    this.model.set('data', response.data);\n    this.render();\n}\nresponseViewSuccess: function(model,response){\n    this.responseMessageView.model.set('data', response.data);\n    console.log(this.responseMessageView.model);\n    this.responseMessageView.render(); // Does not work in some cases\n}\n```\n\nMy implementations of the callback function\n\n```\nexports.sendEmail = function sendEmail(req, res){\n  req.model.data.success = true;\n  responseRender.handleResponse(null, req, res);\n};\n```\n\n`this.model` belongs to the model of the whole page. Whereas `this.responseMessageView.model` is the model for the partial. \n\nQuestion: This works perfectly fine in most of the cases. There is one case where it does not render the partial with the latest model values. When I click on the button on `index.dust` and `primaryViewSuccess` is executed. After which I click on another button and trigger `responseViewEventTrigger`. It does the POST successfully and it comes to `responseViewSuccess` and stores it in the model too. But it does not show it on the frontend. `data.success` is still not true whereas `console.log(this.responseMessageView.model)` show that `attributes->data->success = true`\n\nBut the same behavior when I refresh the page it all works perfect. Its just that when `primaryViewSuccess` is called and then `responseViewSuccess` its not taking the latest model changes.\n\nI have spent days on it and don't understand what I am doing wrong :(  Thanks for your time!\n@jridgewell jashkenas\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3835",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3835/comments",
    "title": "Collection.remove() Requires Updated Documentation or Fix",
    "created_at": "2015-10-22T22:18:58Z",
    "updated_at": "2015-10-26T17:42:51Z",
    "body": "According to the documentation for `collection.remove()`:\n\n\"Remove a model (or an array of models) from the collection, and return them.\"\n\nIt seems the part about returning the removed models is not always the case in the latest stable release, 1.2.3 (as well as the Edge version). What I expected based on the documentation is to get back an array, always, even if the array empty. (This would allow me to do things such as `collection2.add(collection1.remove(someArrayOfModels))` without having to worry about the return type for `remove()`) The problem for me is that `remove()` is actually returning different value types depending on what I pass in as arguments, which you will see below how this can become an issue.\n\nOpen up a browser console with Backbone loaded and attempting the following:\n\n```\n// Start with this for each test case\nvar collection = new Backbone.Collection([new Backbone.Model(), new Backbone.Model()]);\nconsole.log(collection.length); //should be 2\n```\n\nNow trying the following operations (be sure to re-create the collection each time):\n\n```\ncollection.remove(collection.at(0)); //Returns a single model instance\n```\n\n```\ncollection.remove([ collection.at(0), collection.at(1)]) //Returns an array of two model instances\n```\n\n```\ncollection.remove() //Returns 'undefined'\n```\n\n```\ncollection.remove([]) //Returns 'false'\n```\n\nThe last one where I get `false` from `collection.remove([])` is where this really becomes an issue, since when I do `collection.add(false)` it adds a new item to the collection, even though I didn't want to add anything. (try it, and you'll see the collection's `length` property will increase by 1)\n\nSome recommendations I have to resolve this:\n- Update the documentation to clarify the various return types that `remove()` returns back\n- Update `collection.remove()` to always return an array, regardless of input arguments\n- Update `collection.add()` to not add anything if `false` is passed as the first argument\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3831",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3831/comments",
    "title": "\"all\" event documentation: add all arguments",
    "created_at": "2015-10-21T13:36:43Z",
    "updated_at": "2015-12-07T15:26:02Z",
    "body": "Documentation:\n\"Catalog of Events\"\n \"all\" \u2014 this special event fires for any triggered event, passing the event name as the first argument.\n\nIt would be great if something was added to specify that ALL arguments passed in by the trigger function are also passed to the \"all\" listener function\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3830",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3830/comments",
    "title": "History._updateHash with correctly encoded fragment breaks URI in Safari Browser",
    "created_at": "2015-10-21T12:39:51Z",
    "updated_at": "2015-10-27T19:57:03Z",
    "body": "## FYI\n\nWhen coding my first Backbone / Marionette Project I run into a strange URI encoding Problem. This means I am far from being a Backbone Professional and maybe I'm getting something wrong.\n## Problem Description\n\nI'm having the following route in my Marionette Router, that handles searches with GET style query parameters.\n\n```\nvar Router = Marionette.AppRouter.extend({\n    appRoutes: {\n        'search(?*query)' : 'search'\n    }\n});\n```\n\nWhen trying to persist my Application State, I need the URL Fragment to be able to handle special Characters like \u00f6,\u00e4,\u00fc correctly. Therefore I encode the Query (e.g. ?loc-city[]=Berlin&loc-cty[]=M\u00fcnchen) and call\n\n```\nrouter.navigate('search?loc-city%5B%5D=M%C3%BCnchen&loc-city%5B%5D=Berlin');\n```\n\nThis works perfectly in most Browsers. But when testing on Safari, I encountered, that in the navigation routine, the fragment will be decoded and then given to Backbone.History._updateHash, which updates the windows location. At this Point Safari (Desktop and Mobile Version) encodes the given fragment in ISO and the query then will be\n\n```\n?loc-city[]=Berlin&loc-city[]=M%FCnchen // notice the %FC which is the url encoded iso char\n```\n\nwhich cannot be consumed by Javascript/Backbone anymore, and break the Code with an URIError (when calling decodeUriComponent in Backbone.Router._extractParameters).\n\nBecause I find not much Information on the Web, I call for your help here, if there's an obvious bug anywhere, or if i got something wrong, please give me a hint. \nI already checked the encoding on all sides, the documents are utf-8, the server delivers the correct encoding as well and the headers also say so.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3829",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3829/comments",
    "title": "How to update a new user caldroid in android ",
    "created_at": "2015-10-21T09:01:32Z",
    "updated_at": "2015-10-21T13:55:01Z",
    "body": "In my application I have used caldroid library for get enter user details for purticular day in calander view, If the first user enter their details its save in database , I have used database called activeandroid ORM , My issue is if I try to enter details for another user , It will be showing an previous user enterd details aslo if I add many user means it will show only first enterd details only , I dont know how to fix this bug can any one help me from this issue.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3828",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3828/comments",
    "title": "dropping IE8 support",
    "created_at": "2015-10-20T20:31:00Z",
    "updated_at": "2016-04-06T22:13:26Z",
    "body": "On Jan 12, 2016 MS is [essentially dropping support for IE8](https://support.microsoft.com/en-us/gp/microsoft-internet-explorer). With that in mind jQuery and Lodash are dropping IE8 support in their 3.0 and 4.0 releases. So let's discuss dropping it in the next major bump of Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3826",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3826/comments",
    "title": "model id change and collection.get() event order",
    "created_at": "2015-10-18T13:59:58Z",
    "updated_at": "2015-10-18T18:29:52Z",
    "body": "\"change:_id\" is triggered before _onModelEvent has swapped the id from the collection so any call to collection.get(<newid>) fails.\n\n```\nvar m = new bb.Model()\nvar c = new bb.Collection({model : m })\n\nc.add(m)\n//this fails\nc.on('change:id',function(x){\n  console.log(c.get(x.attributes.id))\n})\n//this works\nc.on('change',function(x){\n  console.log(c.get(x.attributes.id))\n})\nm.set({id:23452345})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3825",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3825/comments",
    "title": "The model.get method returns Object.prototype methods",
    "created_at": "2015-10-17T23:34:23Z",
    "updated_at": "2015-10-18T16:24:51Z",
    "body": "``` javascript\nvar m = new Backbone.Model();\n\nm.get('toString'); //-> function toString() { [native code] }\n```\n\nI think it would be correct to receive the `undefined` in this case.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3824",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3824/comments",
    "title": "The entity type is not part of the model for the current context",
    "created_at": "2015-10-16T20:18:07Z",
    "updated_at": "2015-10-16T20:53:34Z",
    "body": "I am using UnitOfWork with Entity Framework 6 and MVC 5. I have created a service layer, Repository and a controller. I am getting \"The entity type is not part of the model for the current context\" Below are my step up:\nServices\n\n---\n\npublic interface IDocumentService : IService<Document>\n    {\n        int UploadDocuments(HttpPostedFileBase file, Document documents, int ContractID);\n    }\n\n```\npublic class DocumentService : Service<Document>, IDocumentService\n{\n\n    private readonly IRepository<Document> _UploadDoc;\n    public DocumentService(IRepository<Document> repository)\n    {\n        _UploadDoc = repository;\n    }\n\n    public int UploadDocuments(HttpPostedFileBase file, Document documents, int ContractID)\n    {\n\n\n        return _UploadDoc.UploadDocuments(file, documents, ContractID);\n    }\n}\n```\n\n}\n\nRepository:\n\n---\n\npublic static class DocumentsRepository\n    {\n\n```\n    private static IDataContextAsync test = new DataContext(\"MyModel\");\n\n    private static readonly IUnitOfWork UoWork = new UnitOfWork(test);\n    public static int UploadDocuments(this IRepository<Document> repository, HttpPostedFileBase file,\n        Document documents, int ContractID)\n    {\n\n\n            var contractdoc = new ContractDocument {ContractId = ContractID};\n\n            documents.DocumentContent = ConvertToBytes(file);\n\n            var DocumentContent = new Document\n            {\n                DocumentName = documents.DocumentName,\n                Description = documents.Description,\n                DocumentType = documents.DocumentType,\n                DocumentContent = documents.DocumentContent\n\n            };\n\n            contractdoc.DocumentId = DocumentContent.DocumentId;\n\n            UoWork.Repository<Document>().Insert(DocumentContent);\n\n            UoWork.Repository<ContractDocument>().Insert(contractdoc);\n\n            var i = UoWork.SaveChanges();\n            return i == 1 ? 1 : 0;\n        }\n\n\n    public static byte[] ConvertToBytes(HttpPostedFileBase doc)\n    {\n        var reader = new BinaryReader(doc.InputStream);\n        var docBytes = reader.ReadBytes(doc.ContentLength);\n        return docBytes;\n    }\n}\n```\n\n}\n\nGetting Error on this one below\n\n---\n\npublic virtual void Insert(TEntity entity)\n\n{\n\nentity.ObjectState = ObjectState.Added;\n\n_dbSet.Attach(entity);\n\n _context.SyncObjectState(entity);\n\n}\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3823",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3823/comments",
    "title": "Error in Opencv stitching project",
    "created_at": "2015-10-16T05:22:41Z",
    "updated_at": "2015-10-16T13:53:33Z",
    "body": "I'm building the Opencv stitching project by adding the available files by myself. The project gets build without any error but there is an error, when I run it without debugging. I'm using static libraries. The error is shown in this screenshot. When I debug this program then it throws the following message while going from line no. 97 to line no. 98.\n\nError when debugged:\n\"First-chance exception at 0x000007FEDB3CC7CB (opencv_world300.dll) in ConsoleApplication1.exe: 0xC0000005: Access violation reading location 0xFFFFFFFFFFFFFFFF.\n\nIf there is a handler for this exception, the program may be safely continued.\"\n\nPlease answer this question s soon as possible. Thank-you in advance.\n\n![untitled](https://cloud.githubusercontent.com/assets/14991120/10534291/ec8c3002-73ef-11e5-9b51-b07034cf4497.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3814",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3814/comments",
    "title": "Collection model attribute",
    "created_at": "2015-10-01T13:11:53Z",
    "updated_at": "2015-10-01T14:25:33Z",
    "body": "The `model` attribute of a collection expects a constructor, as opposed to the `models` attribute, which is an array of model instances. I personally find this syntax confusing, and would prefer one where the constructor attribute is uppercased (or if both formats are supported). I take it there may be a very good reason for this syntax, which I would find helpful to know. Any thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3813",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3813/comments",
    "title": "Unit tests are using QUnit 1.x syntax",
    "created_at": "2015-09-30T01:38:53Z",
    "updated_at": "2015-10-07T12:48:22Z",
    "body": "The unit tests are using QUnit 1.x syntax (i.e., `module` global instead of `QUnit.module`, not using the `assert` object, etc.). And why should they do otherwise when QUnit 2.0 isn't out yet? However, as you probably know, most or all of the QUnit 2.0 syntax is in fact available now (as of QUnit 1.16, and we're consuming 1.18+). So it's possible to migrate everything over now, in order to make an eventual consumption of QUnit 2.0 easier.\n\nUnless strong objections are raised in this discussion, I am happy to migrate the tests. I have a tool [platinumazure/qunit2-migrator](https://github.com/platinumazure/qunit2-migrator) which makes the job a lot easier. I can do so all at once or in batches-- it doesn't matter.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3812",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3812/comments",
    "title": "yii select2 extension, how to display the selected value in update view?",
    "created_at": "2015-09-29T21:23:03Z",
    "updated_at": "2015-09-29T21:25:01Z",
    "body": "This is not an issue, just a query which i have been trying to solve. \ni am stuck at a point, please solve this mystery, I am using select2 extension fortunately it is a searchable drop down, like when i start typing, it loads the stored data from my business table. Just a query how can i show my selected business in update view, I am currently in address view, where there are four fields, sector, city, business, street. I am getting business name using select2 extension, it is working but when i update an address, every stored field's data comes up, except the business. HERE is my code of address/views/_form\n<?php\n/\\* @var $this AddressController _/\n/_ @var $model Address _/\n/_ @var $form CActiveForm */\n?>\n\n<div class=\"form\">\n\n<?php $form=$this->beginWidget('bootstrap.widgets.BsActiveForm', array(\n    'id'=>'address-form',\n    // Please note: When you enable ajax validation, make sure the corresponding\n    // controller action is handling ajax validation correctly.\n    // There is a call to performAjaxValidation() commented in generated controller code.\n    // See class documentation of CActiveForm for details on this.\n    'enableAjaxValidation'=>false,\n)); ?>\n\n    <p class=\"note\">Fields with <span class=\"required\">*</span> are required.</p>\n\n    <?php echo $form->errorSummary($model); ?>\n\n    <div class=\"row\">\n\n        <?php echo $form->textFieldControlGroup($model,'street_number',array('size'=>45,'maxlength'=>45)); ?>\n        <?php echo $form->error($model,'street_number'); ?>\n    </div>\n\n\n```\n<div class=\"row\">\n    <?php echo $form->labelEx($model,'business_id'); ?>\n     <?php\n```\n\n  $this->widget('ext.select2.ESelect2',array(\n  'name'=>'Address[business_id]',\n  'data'=>CHtml::listData(Business::model()->findAll(), 'id', 'business_name'), //the whole available list\n  'htmlOptions'=>array(\n       'placeholder'=>' search business name?',\n    //'options'=>$options, //the selected values\n    //'multiple'=>'multiple',\n    'style'=>'width:530px',\n  ),\n  ));\n    ?>\n    </div>\n       </br>\n\n```\n<div class=\"row\">\n\n    <?php echo $form->textFieldControlGroup($model,'sector',array('size'=>45,'maxlength'=>45)); ?>\n    <?php echo $form->error($model,'sector'); ?>\n</div>\n\n<div class=\"row\">\n\n    <?php echo $form->textFieldControlGroup($model,'city',array('size'=>45,'maxlength'=>45)); ?>\n    <?php echo $form->error($model,'city'); ?>\n</div>\n\n<div class=\"row buttons\">\n    <?php echo BsHtml::submitButton($model->isNewRecord ? 'Create' : 'Save'); ?>\n</div>\n```\n\n<?php $this->endWidget(); ?>\n\n</div><!-- form -->\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3809",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3809/comments",
    "title": "Add underscore methods `_.findIndex, `_.findLastIndex` and  `_.sortedIndex`",
    "created_at": "2015-09-28T21:56:29Z",
    "updated_at": "2015-09-29T23:46:07Z",
    "body": "Finding myself writing:\n\n``` js\nvar index = collection.indexOf(collection.findWhere({foo: 'bar'}));\n```\n\nwhen this is so much better:\n\n``` js\nvar index = collection.findIndex({foo: 'bar'});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3808",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3808/comments",
    "title": "changedAttributes() behaving weird",
    "created_at": "2015-09-28T05:45:50Z",
    "updated_at": "2018-03-14T10:19:08Z",
    "body": "I am using `Model.changedAttributes()` to write a computed field helper, but there's an issue where `changedAttributes` returns false when not expected (at least not by me).\n\nReproduced in [this pen](http://codepen.io/anon/pen/PPbRpO?editors=001).\n\n``` javascript\nconsole.clear();\nlet Backbone = window.Backbone;\nvar m = new Backbone.Model();\n\nlet log = (txt, obj) => document.write(txt + ' ', JSON.stringify(obj)+ '<br/>');\n\nlet lastChange;\nm.on('change', () => {\n  log('Before', lastChange);\n  lastChange = m.changedAttributes(lastChange);\n  log('After', lastChange);\n});\n\nm.set('search', 'some text');\n// Why does this emit \"false\"? It was changed!\nm.set('search', '');\nm.set('search', 'some other text');\n\n```\n\nI need the `lastChange` because there are multiple instances of that code on a model instance. I use it to determine dependency changes (for computed fields).\n\nIs this expected behavior?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3807",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3807/comments",
    "title": "npm tarball for 1.2.3 is missing LICENSE",
    "created_at": "2015-09-27T08:10:43Z",
    "updated_at": "2015-10-05T14:26:19Z",
    "body": "The LICENSE file was present up until 1.2.2 but in the [1.2.3 tarball](http://registry.npmjs.org/backbone/-/backbone-1.2.3.tgz) it is missing. I guess due to #3765. Can you please add it back?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3805",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3805/comments",
    "title": "Multi inheritance",
    "created_at": "2015-09-25T01:43:21Z",
    "updated_at": "2015-09-25T15:04:36Z",
    "body": "Hi,\nFor a project I needed a multi inheritance capability for Backbone so I implemented it.\nhttps://github.com/vin100bk/backbone/tree/modules\n\nFeel free to give my any feedback (positive or negative) and if this feature could be useful for you.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3802",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3802/comments",
    "title": "Constructor delegateEvents regression bug",
    "created_at": "2015-09-23T15:19:02Z",
    "updated_at": "2015-09-23T15:28:29Z",
    "body": "Old Backbone.View\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n\nnew \n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\nWhy was delegateEvents removed?  Many patterns rely on collections or models being set in initialize.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3801",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3801/comments",
    "title": "Collection's _byId hash out of sync when removing models",
    "created_at": "2015-09-23T14:54:48Z",
    "updated_at": "2015-09-23T15:03:57Z",
    "body": "`Collection._removeModels` does the following:\n\n```\n_removeModels: function(models, options) {\n  var removed = [];\n  for (var i = 0; i < models.length; i++) {\n    var model = this.get(models[i]);     // [cb-0]\n    if (!model) continue;\n\n    var index = this.indexOf(model);     // [cb-1]\n    this.models.splice(index, 1);            // [1]\n    this.length--;\n\n    if (!options.silent) {\n      options.index = index;\n      model.trigger('remove', model, this, options);   // [2] \n    }\n\n    removed.push(model);\n    this._removeReference(model, options);  // [3]\n  }\n  return removed.length ? removed : false;\n},\n```\n\n[1] updates the collection.models, removing a model\n[2] the `remove` event is emitted\n[3] collection._byId mapping of \"model id\" to model is updated\n\nDuring [2], collection._byId is out of sync with collection.models. This is a problem if a `remove` listener tries to remove the same model currently being removed from the collection. In that case, this occurs:\n\n[cb-0] `this.get(models[i])` uses collection._byId and determines that the model is in fact in the collection\n[cb-1] `this.indexOf(model)` returns -1 so the following splice clobbers the model array.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3799",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3799/comments",
    "title": "Router - passing an object with route params into handler",
    "created_at": "2015-09-18T20:33:48Z",
    "updated_at": "2015-10-27T19:58:00Z",
    "body": "Currently, matched parameters are passed into the action as an `array`\n\n``` javascript\nroutes: {\n  \"folder/:name-:mode\": \"openFolder\"\n},\n\nopenFolder: function(name, mode, queryString) {\n  // do stuff\n}\n```\n\nI would like the actions to be given an object with `name`, `params`, `queryString` instead, resembling express routing solution.\n\n``` javascript\nroutes: {\n  \"folder/:name-:mode\": \"openFolder\"\n},\n\nopenFolder: function(routeData) {\n  /* routeData is now\n  {\n    name: \"openFolder\",\n    params: {\n      name: \"valueOfName\",\n      mode: \"valueOfMode\"\n    },\n    queryString: \"query=string&a=b\"\n  }\n  */\n}\n```\n\nIt could be an option that can be enabled on BB.Router.\nIs it a good idea to have this functionality in base BB.Router? Or it can be an external library?\n\nI have tried it out, and it seems to be working well, with a new set of tests cloned from current router test to make sure nothing breaks.\n\nhttps://github.com/ntgn81/backbone/commit/7b2c8b3dce5c19f5dc36ddd14c4f70d22108db45\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3798",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3798/comments",
    "title": "SyntaxError: Unexpected token P at Object.parse (native) at K.parseJSON",
    "created_at": "2015-09-18T09:34:42Z",
    "updated_at": "2015-09-18T14:15:27Z",
    "body": "Backbone tries to call Object.parse by default?\n\nObject {validate: false, parse: false, createUrl: \"https://something/v1/api/sku/download\", url: \"https://something/v1/api/sku/download\", contentType: \"application/json\"}\nbeforeSend: (t)\ncontentType: \"application/json\"\ncreateUrl: \"https://something/v1/api/sku/download\"\nemulateHTTP: false\nemulateJSON: false\nerror: (t,e,n)\nerrorThrown: SyntaxError: Unexpected token P at Object.parse (native) at K.parseJSON (http://localhost:8080/dist/js/bundle.js:10:9167) at j (http://localhost:8080/dist/js/bundle.js:8:10898) at n (http://localhost:8080/dist/js/bundle.js:10:10566) at XMLHttpRequest.K.ajaxTransport.Q.cors.t.crossDomain.send.e (http://localhost:8080/dist/js/bundle.js:10:16627)\nmessage: \"Unexpected token P\"\nstack: (...)\nget stack: ()\nset stack: ()\n**proto**: Error\nparse: false\nsuccess: (t)\ntextStatus: \"parsererror\"\nurl: \"https://something/v1/api/sku/download\"\nvalidate: false\nxhr: Object\n**proto**: Object\ntemp1\nObject {validate: false, parse: false, createUrl: \"https://something:4242/v1/api/sku/download\", url: \"https://something.com:4242/v1/api/sku/download\", contentType: \"application/json\"\u2026}\nbeforeSend: (t)\ncontentType: \"application/json\"\ncreateUrl: \"https://something:4242/v1/api/sku/download\"\nemulateHTTP: false\nemulateJSON: false\nerror: (t,e,n)\nerrorThrown: SyntaxError: Unexpected token P at Object.parse (native) at K.parseJSON (http://localhost:8080/dist/js/bundle.js:10:9167) at j (http://localhost:8080/dist/js/bundle.js:8:10898) at n (http://localhost:8080/dist/js/bundle.js:10:10566) at XMLHttpRequest.K.ajaxTransport.Q.cors.t.crossDomain.send.e (http://localhost:8080/dist/js/bundle.js:10:16627)\nmessage: \"Unexpected token P\"\nstack: (...)\nget stack: ()\nset stack: ()\n**proto**: Error\nparse: false\nsuccess: (t)\ntextStatus: \"parsererror\"\nurl: \"https://something:4242/v1/api/sku/download\"\nvalidate: false\nxhr: Object\n**proto**: Object\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3796",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3796/comments",
    "title": "Chainable Routes",
    "created_at": "2015-09-17T07:16:22Z",
    "updated_at": "2015-09-25T15:24:19Z",
    "body": "An alternative or interim step to [overhauling the Router](https://github.com/jashkenas/backbone/issues/3653), could be adding the ability to [chain routes](https://github.com/AndrewHenderson/backbone.chain-router).\n\nI have built several applications, all of which required executing routes with varying combinations of the same rendering, so [I wrote a lightweight plugin](https://github.com/AndrewHenderson/backbone.chain-router) to handle it more simply.\n\nI'm wondering if this is something that the community is open to including in the library rather than as a plugin before creating a pull request.\n\nBelow are some examples of the implementation. The full documentation can be [found here](https://github.com/AndrewHenderson/backbone.chain-router/blob/master/README.md).\n#### Example Usage\n\nUsing dot syntax within callback names, we'd be able to chain our callbacks, executing one after the other.\n\n``` js\nBackbone.Router.extend({\n  routes: {\n    'posts/new': 'posts.new'\n  },\n  posts: function () {\n    console.log('posts'); // called first\n  },\n  new: function () {\n    console.log('new'); // called second\n  }\n});\n```\n\nChained routes with parameters would be passed their parameters respectively.\n\n``` js\nroutes: {\n  'post/:post_id/comment/:comment_id': 'post.comment'\n},\npost: function (post_id) {\n  console.log(arguments); // [post_id, null]\n},\ncomment: function (comment_id) {\n  console.log(arguments); // [comment_id, null]\n}\n```\n\nIf we want to include an additional route in the middle of the chain which is not intended to be passed parameters, we bracket that callback.\n\n``` js\nroutes: {\n  'post/:post_id/comments/:comment_id': 'post.[comments].comment'\n},\npost: function (post_id) {\n  console.log(arguments); // [post_id, null]\n},\ncomments: function () {\n  console.log(arguments); // [null] was not passed comment_id\n},\ncomment: function (comment_id) {\n  console.log(arguments); // [comment_id, null]\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3795",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3795/comments",
    "title": "inconsistent events callback for 'all'",
    "created_at": "2015-09-15T22:32:11Z",
    "updated_at": "2015-09-19T04:20:32Z",
    "body": "As far as I can tell, this is a problem\n\n``` javascript\nappEvents.on(\"all\", function(eventName){\n    console.log(eventName + ' was triggered!'); //works as expected\n});\n\nappEvents.on(\"something-else\", function(eventName){\n    console.log(eventName + ' was triggered!'); //nope!! not gonna work, eventName is not automatically available in callback as first argument\n});\n```\n\nwhen you listen to all, the first arg is the event name\n\nbut when you listen to a specific event, the first arg is not the event name\n\nthis is bad\n\ncan it be fixed?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3793",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3793/comments",
    "title": "Incorrect behavior of collection 'at' method",
    "created_at": "2015-09-15T18:27:44Z",
    "updated_at": "2015-09-16T17:07:41Z",
    "body": "```\n// Get the model at the given index.\nat: function(index) {\n  if (index < 0) index += this.length;\n  return this.models[index];\n}\n```\n\nIf I'm retrieving model by unexisting index I expect undefined value.\nThis check  \"if (index < 0) index += this.length;\" does nothing if index is less than -this.length(for example index is -5 and collection length is 3).\n\nPlease remove this line \"if (index < 0) index += this.length;\" as a cause of bug. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3791",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3791/comments",
    "title": "Make some of the model's attribute do not to sync to server",
    "created_at": "2015-09-11T02:12:15Z",
    "updated_at": "2015-09-11T13:33:18Z",
    "body": "Hi,\n\nI have saw in some cases, we have to store some states of the view, like\nin a dropdown of countries, the data of country list is get from the server:\n\n``` javascript\n[\n    {\n      \"name\":'USA',\"id\":1\n    },{\n      \"name\":\"England\",\"id\":2\n    }\n...\n]\n```\n\nBut i want to add a \"selected\" attribute to country model so that i just need to change this \"selected\" value, my view get to rendered.\n\nBut this \"selected\" attribute is meanless to the server, i don't want to sent it to the server.\n\nSo i am about to have a \"local\" attribute on Backbone.Model, which you can use set,get to set to modify some attributes of this \"local\" attribute, it also fires events,but it will not to be sync to the server\n\nIs that a right way?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3790",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3790/comments",
    "title": "'update' event fails to fire at times",
    "created_at": "2015-09-08T15:59:16Z",
    "updated_at": "2015-10-13T22:08:29Z",
    "body": "I use Backbone - React - Flux to build an application. (uses ES6 - babel). \nSo I listen to add, remove, update and change events of a backbone collection from a react component.  The collection polls the server at times to fetch some models and adds it to the collection. It works fine. Just that a lot of add and remove gets fired in some cases where all of my models are replaced. \nTo avoid this, I removed add and remove, so that it will fire only one update to the component. Sometimes it work fine, sometimes it wont. I observed this in situation when all models returned are new and the whole collection is now changed. There is no problem with the network response, I verified it. It just never fires the update event. To confirm, I also did a \"this.bind('update',function().....} and tried logging.. but same problem there. It just does not fire.\n\nWhen i added add and remove statements back into the on() statement, it works fine. But as I said, I am not interested in each addition and this causes my react components to rerender too many times. \n\nCan you look into this issue? Happy to give any more details.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3789",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3789/comments",
    "title": "Undocumented Collection.at behavior",
    "created_at": "2015-09-08T13:04:09Z",
    "updated_at": "2015-10-06T04:52:44Z",
    "body": "The functionality introduced by https://github.com/jashkenas/backbone/commit/325a50f2bb556d185d77413cf8c6ede7555221d9 is not documented and may lead to surprising results.\n\nFor the record, it is mentioned in the changelog, but it didn't stop me from breaking my app's tests in some obscure cases.\n\nI would be happy to add a sentence about it to the method's doc if you agree.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3786",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3786/comments",
    "title": "On saving a model which is a part of a collection, a \"sync\" event is triggered on the collection",
    "created_at": "2015-09-05T13:15:37Z",
    "updated_at": "2015-09-08T15:58:56Z",
    "body": "I'm not able to find the same anywhere in the documentation, and am not sure why that happens.\n\nAny help would be appreciated, thanks in advance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3785",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3785/comments",
    "title": "is it possible to get code books from code words in the vector quantization?",
    "created_at": "2015-09-03T19:34:42Z",
    "updated_at": "2015-09-03T19:40:24Z",
    "body": "i was working in matlab for vector quatization as we know in vector Quantization, if we provide set of code words as an input we get code vectors so what i did , i used LPG and Loyed algorithms to do that by :-\n\n```\n      training set=randn(2,100) == code word \n         distortion=0.001\n     [code book]=Vector-Quantization (training set,distortion)\n```\n\nthe result was some locations of code word now , i want to be the locations of code book as a subset of locations of code vectors ? ali\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3783",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3783/comments",
    "title": "Hotel Booking Integration Using Catalook",
    "created_at": "2015-09-01T11:01:03Z",
    "updated_at": "2015-09-01T11:39:18Z",
    "body": "Hi,\n\nWe want to add hotel booking system in DNN site.\nThis concept is discussed as given below link\nhttp://www.dnnsoftware.com/forums/threadid/412756/scope/posts/module-for-hotel-online-reservation\nSo, we tried to hotel booking using catalook, but catalook store did not found all hotel related fields\nlike number of Bed rooms, Beds, bath rooms, Accommodates, Property type, ammenities, etc..\nWe are not clear how to add custom field in catalook product detail page for filtering things?\nWe are using latest catalook version 6.9.1 in DNN 7.4.1.\nSo, we need additional fields when adding product (hotel) management.\nAnd we are not sure about booking hotel system using catalook module.\nPlease can you assist me to move forward for configuring online reservation system using catalook module.\n\nUrgent please.\n\nThanks in advance.\n\nThanks & Regards\nJay\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3782",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3782/comments",
    "title": "Model.prototype.get() and .has() counts own properties",
    "created_at": "2015-09-01T10:16:48Z",
    "updated_at": "2015-09-02T18:49:01Z",
    "body": "Hi all! I stumbled on the following behaviour:\n\n``` javascript\nvar model = new Backbone.Model();\nconsole.log( model.get( 'constructor' ) );\n```\n\nreturns the constructor function of the `model.attributes` object.\n\nI was rather expecting the `get()` method to filter own properties and return `undefined`. The same should also hold true with `has()` (in line with Underscore's `_.has()`, which does filter own properties). Without this, a model's `attributes` object would not be a [true hash](http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/).\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3781",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3781/comments",
    "title": "1.2.2 Router reloading page hash changes in Chrome",
    "created_at": "2015-08-28T22:07:57Z",
    "updated_at": "2015-10-21T15:02:47Z",
    "body": "So I've created the most simple Router application here with `backbone@1.2.2`:\n\n```\nvar Backbone = require('backbone');\nvar Router = Backbone.Router.extend({\n    routes: {\n        \":codename(/*path)\": \"onRoute\"\n    },\n    onRoute: function () {\n        var p = document.createElement('p');\n        var args = Array.prototype.slice.call(arguments);\n        p.innerText = args.join(\", \");\n        document.body.appendChild(p);\n    }\n});\n\nnew Router();\n\nBackbone.history.start();\n```\n\nUsing `browserify` and `beefy` to run this on `localhost:1337`.\n\nTo duplicate in `Chrome Version 44.0.2403.157 (64-bit) (OSX Yosemite)`\n1.  Open the developer tools\n2. In address bar type some random fragment: `#foo` -- See `foo, ,`\n3. In address bar type some next random fragment: `#bar` -- See now `foo, , \\n bar, ,` \n4. Ok that seems normal.\n5.  Close the developer tools\n6.  Repeat steps 2 and 3 a couple of times:  Be sure to occasionally type fragments that you've used before.  The router is continually reloading the page when the fragment changes.\n\nExpected:\nShould not reload the page on fragment changes.\n\nIt seems like for some reason Backbone Router behaves correctly when the developer tools are open, and poorly when they are closed.  Safari also seems to suffer from this to some lesser degree.\n\nMaybe related to #3773 ?\n\n_Note that this seems apart from the known Webkit issue when loading the same url + fragment twice._\n\nhttps://bugs.webkit.org/show_bug.cgi?id=24578\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3778",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3778/comments",
    "title": "Potential regression when setting `id` directly from 1.2.1 to 1.2.2",
    "created_at": "2015-08-26T15:06:41Z",
    "updated_at": "2015-10-22T15:08:04Z",
    "body": "As part of upgrading from 1.2.1 to 1.2.2, we noticed an issue in our app where we were directly setting `id` on a model. I don't think this is the best way to set the id, but it is what it is.\n\n``` js\nmodel.id = SOME_ID\n```\n\nAfter setting additional properties via `set` later in our code, `model.id` started to return `undefined`.\n\nBelow is a minimal example. The expected behavior is that both `console.log`'s will output \"123\". In 1.2.2 calling `set` is wiping out `model.id` (appears to be from this commit: https://github.com/jashkenas/backbone/commit/be7fc959641a3ccaa362110023ea7d697bc3f93b)\n\nYou can run these fiddles and see the output in the console.\n\n1.2.1: https://jsfiddle.net/jktms1xx/2/\n\n``` sh\n> 123\n> 123\n```\n\n1.2.2: https://jsfiddle.net/g1am1otw/1/\n\n``` sh\n> 123\n> undefined\n```\n\n---\n\nWe've resolved this issue by changing our code to call `model.set('id', SOME_ID)` - but we were wondering if setting `model.id` directly should continue to work. Thanks!\n\ncc @jbrad\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3777",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3777/comments",
    "title": "Why events not work",
    "created_at": "2015-08-26T14:17:15Z",
    "updated_at": "2015-08-26T15:22:26Z",
    "body": "I recently write a city select component demo using backbone.js.  The window.CityModalView events (\"click span.confirm\": 'confirm') failed. But the window.CityView  events(\"click span.confirm2\": 'confirm') works. Can any one tell me what's wrong with my code and how to fix it? Thank you very much.\n\nThe code is in jsfiddle: http://jsfiddle.net/40phzeqd/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3776",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3776/comments",
    "title": "Why events not work",
    "created_at": "2015-08-26T14:16:25Z",
    "updated_at": "2015-08-26T14:18:32Z",
    "body": "I recently write a city select component demo using backbone.js.  The window.CityModalView events (\"click span.confirm\": 'confirm') failed. But the window.CityView  events(\"click span.confirm2\": 'confirm') works. Can any one tell me what's wrong with my code and how to fix it? Thank you very much.\n\nThe code is below:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>city component using Backbone.js</title>\n\n```\n<style>\n    body {\n        padding-top: 60px;\n    }\n    .city-block {\n        width: 60px;\n        height: 24px;\n        border-radius: 3px;\n        line-height: 24px;\n        display: inline-block;\n        text-align: center;\n        background-color: #09c;\n        color: #fff;\n        margin: 0 10px;\n    }\n\n    .clearIt {\n        color: #963;\n        margin-left: 5px;\n        text-decoration: none;\n    }\n\n    .clearIt:hover {\n        color: #fff;\n        text-decoration: none;\n    }\n\n    .add-city {\n        width: 70px;\n        height: 24px;\n        border-radius: 3px;\n        line-height: 24px;\n        display: inline-block;\n        text-align: center;\n        border: 1px solid #7ecef4;\n        margin: 0 10px;\n        cursor: pointer;\n        color: #7ecef4;\n    }\n\n    .hide {\n        display: none;\n    }\n\n    .modal-block .city-block {\n        background-color: transparent;\n        color: #666;\n    }\n\n    .modal-block .city-block:hover {\n        background-color: #7ecef4;\n    }\n\n    .operator {\n        text-align: center;\n    }\n\n    .operator span {\n        width: 100px;\n        height: 30px;\n        line-height: 30px;\n        display: inline-block;\n        border-radius: 5px;\n        background-color: darkred;\n        color: #fff;\n        font-size: 16px;\n        text-align: center;\n        cursor:pointer;\n        margin: 10px;\n    }\n    .operator span:hover {\n        background-color: red;\n    }\n\n</style>\n<link href=\"css/bootstrap.css\" rel=\"stylesheet\">\n<link href=\"css/styles.css\" rel=\"stylesheet\">\n```\n\n</head>\n\n<body>\n\n<div class=\"header\"></div>\n\n\n<div class=\"container\">\n    <div class=\"row\">\n        <div id=\"content\" class=\"span12\"></div>\n    </div>\n\n</div>\n\n\n<script src=\"lib/jquery-2.1.0.js\"></script>\n\n<script src=\"lib/underscore.js\"></script>\n\n<script src=\"lib/backbone-1.0.0.js\"></script>\n\n\n<script>\n    window.CityModalView = Backbone.View.extend({\n        tagName:\"table\",\n\n        initialize:function () {\n            var self = this;\n            _.bindAll(this, 'render', 'confirm', 'cancel');\n            this.render();\n\n        },\n\n        template: _.template('<div>City Modal</div><div class=\"modal-content\"></div><div class=\"operator\"><span class=\"confirm\">YES</span><span class=\"cancel\">NO</span></div>'),\n\n        events: {\n            \"click span.confirm\": 'confirm',\n            \"click span.cancel\": 'cancel'\n        },\n\n        render:function () {\n            this.$el.html(this.template());\n            return this;\n        },\n\n        confirm: function() {\n            console.log('YES');\n        },\n\n        cancel: function() {\n            console.log('NO');\n        }\n\n\n    });\n\n    window.CityView = Backbone.View.extend({\n        tagName:'div',\n\n        events: {\n            'click span.add-city': 'addCity',\n            \"click span.confirm2\": 'confirm',\n            \"click span.cancel2\": 'cancel'\n        },\n\n        initialize:function () {\n            var self = this\n            _.bindAll(this, 'render', 'appendItem', 'addCity','confirm', 'cancel');\n\n            this.cityModalView = new CityModalView();\n            this.render();\n        },\n\n        template: _.template('<div>City List</div><span class=\"city-selected\"></span><span class=\"add-city\">+SET CITY</span><div class=\"operator\"><span class=\"confirm2\">yes</span><span class=\"cancel2\">no</span></div><div class=\"city-modal-sec hide\"></div>'),\n\n        render:function () {\n            var self = this;\n            this.$el.html(this.template());\n            $('.city-modal-sec', this.el).append(this.cityModalView.render().el);\n            return this;\n        },\n\n        appendItem: function(item){\n            var itemView = new CityItemView({\n                model: item\n            });\n            $('.city-selected', this.el).append(itemView.render().el);\n        },\n\n        addCity: function(){\n            $('.city-modal-sec').removeClass('hide')\n        },\n\n        confirm: function() {\n            console.log('confirm');\n        },\n\n        cancel: function() {\n            console.log('cancel');\n        }\n\n    });\n\n    window.HomeView = Backbone.View.extend({\n        el: $('body'),\n\n        initialize:function () {\n            console.log('Initializing Home View');\n            this.cityView = new CityView();\n            this.render();\n        },\n\n        template: _.template('<div class=\"city-sec\"></div>'),\n\n        render:function () {\n            $(this.el).html(this.template());\n            $('.city-sec', this.el).append(this.cityView.render().el);\n            return this;\n        }\n\n    });\n\n    var homeView = new HomeView();\n\n\n</script>\n\n\n</body>\n</html>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3775",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3775/comments",
    "title": "Multiple modals opening in Backbone",
    "created_at": "2015-08-25T06:03:29Z",
    "updated_at": "2015-08-25T13:51:04Z",
    "body": "Could someone help me with this issue:\n\nhttp://stackoverflow.com/questions/32182787/multiple-modals-being-added-in-backbone\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3774",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3774/comments",
    "title": "passing options to url function from Backbone.sync function, in model, collection",
    "created_at": "2015-08-24T22:28:46Z",
    "updated_at": "2015-08-25T23:02:17Z",
    "body": "this seems like a no-brainer\n\nin order to construct a URL and add query params, or what not, we need to know what type/method the request will be and what options to take for the request\n\nin the source we have:\n\n``` javascript\n sync: function(method, model, options) {\n                    var type = methodMap[method];\n\n                    // Default options, unless specified.\n                    _.defaults(options || (options = {}), {\n                        emulateHTTP: Backbone.emulateHTTP,\n                        emulateJSON: Backbone.emulateJSON\n                    });\n\n                    // Default JSON-request options.\n                    var params = {type: type, dataType: 'json'};\n\n                    // Ensure that we have a URL.\n                    if (!options.url) {\n                        params.url = _.result(model, 'url') || urlError();   // <=== why this ?? No params passed to url function?\n                    }\n                ....\n```\n\nwhy isn't it this instead:\n\n``` javascript\n sync: function(method, model, options) {\n                    var type = methodMap[method];\n\n                    // Default options, unless specified.\n                    _.defaults(options || (options = {}), {\n                        emulateHTTP: Backbone.emulateHTTP,\n                        emulateJSON: Backbone.emulateJSON\n                    });\n\n                    // Default JSON-request options.\n                    var params = {type: type, dataType: 'json'};\n\n                    // Ensure that we have a URL.\n                    if (!options.url) {\n                        params.url = model.url(method,options);   // <===== why not pass method/options to url function?\n                    }\n                 ...\n```\n\nam I missing something? We may want to construct a url and add query params given certain options passed to Backbone.sync, right?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3773",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3773/comments",
    "title": "router.navigate stopped working in 1.2.2",
    "created_at": "2015-08-24T18:27:06Z",
    "updated_at": "2017-03-18T17:40:16Z",
    "body": "Hi\n\nI'm using backbone/marionette in a webpack project. Using webpack-dev-server as server.\nI had a problem though, that\n\n```\nrouter.navigate('/hello', {trigger: true});\n```\n\ndidn't work. Nothing happened. No error either.\n\nBut rolling back to 1.2.1 solved the problem, so something strange sneaked in to the router.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3772",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3772/comments",
    "title": "Rethink backbone templates V2",
    "created_at": "2015-08-24T05:50:38Z",
    "updated_at": "2015-09-08T18:41:45Z",
    "body": "I found a pretty awesome idea [here](https://github.com/Rapid-Application-Development-JS/itemplate).\nUsing incremental dom with underscore templates its tiny and extremely powerfull.\n\nIts faster that underscore templates and react too, in fact its using almost same idea like react, but this was developed by [google](http://google.github.io/incremental-dom/#passing-functions).\n\nPS: Or at can be good idea for marionette ?\n\nWhat do you think about this @jashkenas @megawac @jridgewell ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3769",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3769/comments",
    "title": "Is Backbone.history a part of the public API?",
    "created_at": "2015-08-20T23:06:13Z",
    "updated_at": "2015-08-24T23:53:42Z",
    "body": "Could we expect the Backbone.history object to exist as it is moving on?\nIf so, will it be added to the documentations?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3768",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3768/comments",
    "title": "How to add new 10 rows in existing page?",
    "created_at": "2015-08-20T08:21:06Z",
    "updated_at": "2015-08-20T13:47:04Z",
    "body": "![more](https://cloud.githubusercontent.com/assets/5512426/9378846/48da5616-4742-11e5-9b22-b4722d1c009b.JPG)\n\nPlease tell me how can i add more 10 rows below these rows after click on more.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3767",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3767/comments",
    "title": "Rethink Backbone.sync",
    "created_at": "2015-08-20T00:31:57Z",
    "updated_at": "2015-09-25T17:23:05Z",
    "body": "As we all know, there are numerous plugins in the wild which override `Backbone.sync` with specific domain logic. Things like storage proxies, web socket connections, etc. The way plugins add this functionality tends to be messy and conflict with one another.\n\nFor Backbone v2 I suggest we reimplement how a custom sync should be added to Backbone. I've long suggested these plugins export a `CustomCollection` and `CustomModel` with a custom `sync` function implemented there, as opposed to globally overriding BB.sync; however they both have some merit. I would suggest something like the following adding a custom sync\n\n``` js\nfunction predicate(model, options) {\n   return model.useProxy;\n}\n\nfunction syncFn(model, options) {\n   // sync function as normal\n}\n\n// Whether this sync method should stop other syncs from being checked.\n// This could be useful for storage syncs which wish to add data to an indexedDb\n// while also executing an http sync\nvar exclusiveSync = false;\n\nBackbone.addSyncMethod(predicate, syncfn, exclusiveSync);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3764",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3764/comments",
    "title": "Collection.create should return the xhr",
    "created_at": "2015-08-18T09:32:38Z",
    "updated_at": "2015-08-20T15:25:09Z",
    "body": "or an option to have the xhr returned instead of just the events triggered.\n\nThe events that are triggered don't let you interfere with the request, for example aborting it.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3763",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3763/comments",
    "title": "Remove the Android logger driver",
    "created_at": "2015-08-17T14:27:05Z",
    "updated_at": "2015-08-17T14:59:18Z",
    "body": "In android 4.4.2, logger driver (drivers/staging/android/logger.c) was used to read and write android logs to /dev/log/(main or system). In android lollipop, Logger driver logger.c is removed. Then how does logcat reads android logs? where is reading and writing of android logs handled at kernel?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3762",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3762/comments",
    "title": "No Error Fired on broken connections",
    "created_at": "2015-08-17T09:08:26Z",
    "updated_at": "2015-08-18T21:06:06Z",
    "body": "Why is there no error event firing when my app do not reach the server? e.g. on \"net::ERR_CONNECTION_RESET\"?? or on \"404\". My error: function(...) in my fetch method is not touched at all??\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3761",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3761/comments",
    "title": "Should the events hash be responding to jQuery's triggerHandler method?",
    "created_at": "2015-08-15T19:13:15Z",
    "updated_at": "2015-08-17T03:53:44Z",
    "body": "Hey,\n\nI'm working with some legacy code at the office and this plugin we use seems to use `triggerHandler` rather than `trigger` for firing events. I don't have a ton of XP with `triggerHandler`, so maybe this functionality makes sense, but I was really confused with unexpected results from the following:\n\n```\nvar TestView = Backbone.View.extend({\n  template: _.template('<div class=\"foo\"></div>'),\n  events: {\n    'custom.event .foo': function(){\n      console.log('custom.event ran');\n    }\n  },\n  render: function() {\n    this.$el.html(this.template());\n\n    this.$('.foo').on('custom.event', function(){\n        console.log('custom.event is in here');\n    });\n\n    return this;\n  }\n})\n\nvar testView = new TestView();\ntestView.render();\njQuery.event.trigger('custom.event', null, testView.$('.foo')[0], true);\n```\n\nIn this example only the the event handler bound in render fires, but I thought \"on\" and \"events\" were bound identically.\n\nThis appears to be because of how event delegation works inside of Backbone.View's events hash. Is this intended behavior, something that is a known issue but is just \"lived with,\" or ?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3760",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3760/comments",
    "title": "Collection#set doesn't intelligently merge unparsed models",
    "created_at": "2015-08-15T18:25:39Z",
    "updated_at": "2015-08-20T00:42:05Z",
    "body": "`Collection#set` takes an option `parse` that, if set to true, will [call the collection's `parse` method on the input array](https://github.com/jashkenas/backbone/blob/master/backbone.js#L812), as well as the [model's `parse` method on individual objects in the input array](https://github.com/jashkenas/backbone/blob/master/backbone.js#L837). This implies that it's ok for non-parsed data to be passed into `Collection#set`.\n\nHowever, if non-parsed data is passed to `Collection#set`, [line 833](https://github.com/jashkenas/backbone/blob/master/backbone.js#L833) may fail to correctly merge the new data with existing data in the collection (in particular, if the non-parsed data is wrapped in a way that obscures the idAttribute).\n\nBelow is a failing test case that illustrates this issue:\n\n```\n  test(\"collection should merge in duplicate raw objects with {merge: true}\", 1, function() {\n    var Model = Backbone.Model.extend({\n      parse: function(data) { return data.wrapper; }\n    });\n\n    var Col = Backbone.Collection.extend({model: Model});\n    var col = new Col;\n\n    col.set([{wrapper: {id: 1, name: 'Foo'}}], {parse: true, merge: true});\n    var firstModel = col.first();\n\n    col.set([{wrapper: {id: 1, name: 'Bar'}}], {parse: true, merge: true});\n    var secondModel = col.first();\n\n    strictEqual(firstModel, secondModel);\n  });\n```\n\n The `{merge: true}` option indicates that the updated model in the collection should be the same object reference, but instead it is a newly instantiated model. \n\nA potential fix might involve changing [line 833](https://github.com/jashkenas/backbone/blob/master/backbone.js#L833) from this:\n\n```\n        if (existing = this.get(attrs)) {\n```\n\nto this:\n\n```\n        existing = this.get(attrs);\n        if (!existing && !this._isModel(attrs) && options.parse) {\n          var tempModel = new this.model(attrs, options);\n          existing = this.get(tempModel.attributes);\n        }\n        if (existing) {\n```\n\nalthough there may be a more elegant solution. If people agree that this is a bug, I can open a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3757",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3757/comments",
    "title": "Parse model before validating on model.set(pojo, {parse:true})",
    "created_at": "2015-08-13T20:13:36Z",
    "updated_at": "2015-08-13T20:22:33Z",
    "body": "If I have a Backbone model that expects a wrapped object from the API e.g.\n{a: {a: 3}}\n\nBut I want to work with it as\n{a:3}\n\nIt is nice to use parse like\n\n``` js\nparse: function(data) {\n  return data.a;\n}\n```\n\nAnd validate like\n\n``` js\nvalidate: function(attrs) {\n  if(!_.has(attrs, 'a') || !_.isNumber(attrs.a)) {\n    return 'incorrect signature';\n  }\n}\n```\n\nAnd when I mock out the model in a test I do:\n\n``` js\nmodel.set({a: {a:3}}, {parse: true})\n```\n\nBut this fails because model.set calls validate before parsing my object. This doesn't make a whole lot of sense to me. If I say {parse: true} it should parse before validating. My workaround is\n\n``` js\nvar o = {a: {a:3}};\nmodel.set(model.parse(o));\n```\n\nBut I feel like it would be less confusing to have {parse: true} actually work as expected when you have a validate function.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3756",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3756/comments",
    "title": "Nutch 2.3 Tika parsing issue",
    "created_at": "2015-08-11T05:39:51Z",
    "updated_at": "2015-08-11T21:36:47Z",
    "body": "I am trying to crawl specific data as per requirement by using nutch 2.3. I have tried to make changes into parse-tika plugin, but it got impacted if i make small changes into the same while compiling as it's connectivity with different classes as storage, parse,crawl etc.\nSo please suggest on the same.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3755",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3755/comments",
    "title": "Nutch 2.3 Plugin writing ",
    "created_at": "2015-08-11T05:37:41Z",
    "updated_at": "2015-08-11T14:19:15Z",
    "body": "I am writing plugin for Nutch2.3. I am writing plugin to specific data crawling from website & store the same into MongoDB. Please guide me for that.\nGive suggestions to connect \"The connectivity of new plugin to parse data to the MongoDB\".\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3750",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3750/comments",
    "title": "Model#set docs don't explain the options argument",
    "created_at": "2015-08-10T08:45:23Z",
    "updated_at": "2015-08-10T14:15:33Z",
    "body": "I looked up the set() method of Backbone.Model today and was perplexed to see an `options` parameter in the method signature, but no mention of these options in the explanation itself. This seems to be a regression; I can vividly remember that at least the `silent` option was documented at this place.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3749",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3749/comments",
    "title": "Documentation for Collection#modelId is wrong",
    "created_at": "2015-08-10T08:41:41Z",
    "updated_at": "2016-03-03T16:58:20Z",
    "body": "The [modelId docs on backbonejs.org](http://backbonejs.org/#Collection-modelId) say that the method should return the _name of the ID attribute_ that Backbone should use. After a long and painful debugging session, I found out that the method should actually return _the ID itself_ instead of the attribute name. This should absolutely be fixed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3748",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3748/comments",
    "title": "Backbone Truck Factor",
    "created_at": "2015-08-07T12:54:24Z",
    "updated_at": "2015-08-18T21:13:53Z",
    "body": "As part of my PhD research on code authorship, we calculated the Truck Factor (TF) of some popular GitHub repositories.\n\nAs you probably know, the [Truck (or Bus) Factor](https://en.wikipedia.org/wiki/Bus_factor) designates the minimal number of developers that have to be hit by a truck (or quit) before a project is incapacitated. In our work, we consider that a system is in trouble if more than 50% of its files become orphan (i.e., without a main author).\n\nMore details on our work in this preprint: https://peerj.com/preprints/1233\n\nWe calculated the TF for **Backbone** and obtained a value of **2**.\n\nThe developers responsible for this TF are:\n\nJeremy Ashkenas - author of 60% of the files\nBrad Dunbar - author of 33% of the files\n\nTo validate our results, we would like to ask **Backbone** developers the following three brief questions:\n\n(a) Do you agree that the listed developers are the main developers of **Backbone**?\n\n(b) Do you agree that **Backbone** will be in trouble if the listed developers leave the project (e.g., if they win in the lottery, to be less morbid)?\n\n(c) Does **Backbone** have some characteristics that would attenuate the loss of the listed developers (e.g., detailed documentation)?\n\nThanks in advance for your collaboration,\n\nGuilherme Avelino\nPhD Student\nApplied Software Engineering Group (ASERG)\nUFMG, Brazil\nhttp://aserg.labsoft.dcc.ufmg.br/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3746",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3746/comments",
    "title": "OFFICIAL opinion needed [underscore vs. lodash]",
    "created_at": "2015-08-06T10:32:54Z",
    "updated_at": "2015-08-06T18:47:13Z",
    "body": "Can someone give me OFFICIAL opinion by Backbone.JS how stable is migration/usage of Lodash.\n\nI know these 3:\n- [Lodash](https://github.com/lodash/lodash)\n- [Lodash.Underscore](https://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.underscore.js)\n- [Lodash.Compat](https://github.com/lodash/lodash-compat)\n\nI've read [Lodash Migration notes](https://github.com/lodash/lodash/wiki/Migrating) but still I want backbone community opion also. I wanna make sure ALL of above lodash version will work correctly with ANY version of backbone starting from 1.1.x.\n\nUPD-1: Trying to digest: https://github.com/jashkenas/underscore/issues/2182\n\nUPD-2: In fact personally me, closer to use Underscore - as a first, original library for similar purposes. I think that John-David SHOULD NOT HAVE forked and create new whell, but instead he should have contributed with/to Underscore and help Jeremy with improving underscore. WHAT bad is in this collaboration? But I'm not so good in history of both libs, so I may be mistaken. So sorry in advance.\n\nUPD-3: Backbone tests. Special thanks to @RusAlex for triggering thinking in that way. So I took 2 versions of backbone and ran tests with different lodash versions.\n\n_Backbone 1.1.2 and_\n- lodash 3.10.1 - no failed tests\n- lodash.compat v3.10.0 - no failed tests\n- lodash from my prj. frozen v. 2.4.1 - no failed testes\n- lodash.underscore v2.4.1 - no failed tests:\n\n_Backbone 1.2.1 and_\n- lodash 3.10.1 - no failed tests\n- lodash.compat v3.10.0 - no failed tests\n- lodash from my prj. v.2.4.1 - **4 failed tests** (68, 69, 200, 202)\n- lodash.underscore v2.4.1 - **20 failed tests** (68, 69, 200, 202, 342-345, 355-363, 366, 368, 370)\n\nSo I assume, that using \"latest versions of libraries on the release moment\" of both of them is appropriate and not risky. And obviously - using different releases/versions is risky.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3744",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3744/comments",
    "title": "model returns undefined while iterating although it exists in Collection",
    "created_at": "2015-08-05T17:13:23Z",
    "updated_at": "2015-08-05T21:09:46Z",
    "body": "I have a weird issue bothering me atm.  \n\nI am on BB 1.2.1 and for some reason I see \"undefined\" as model value for one of my models while iterating through the models Collection. Please note that its always the model that was assigned values using 'defaults()' method.\n\nI have confirmed using toJSON() and .model property that the model does exist in Collection.\n\nDefaults method:\n\n```\n, defaults: function(){\n  return {id:1, iconName:'icon-pages', firstName:'Sido', unread: 2, lastName:'1'};\n} // eof defaults()\n```\n\nHere is how I am adding models to collection:\n\n```\ncollection.add( new Model({ id:2, firstName:'Sido', iconName:'icon-gear', unread:1, lastName:'595' }));\ncollection.add( new Model()); // should use default model values\ncollection.add( new Model({ id:3, firstName:'Sido', iconName:'icon-gear', unread:9,lastName:'696' }));\n```\n\nConfirmation of model values using toJSON():\n\n```\n[{\"id\":2,\"firstName\":\"Sido\",\"iconName\":\"icon-gear\",\"unread\":1,\"lastName\":\"595\"},{\"id\":1,\"iconName\":\"icon-pages\",\"firstName\":\"Sido\",\"unread\":2,\"lastName\":\"1\"},{\"id\":3,\"firstName\":\"Sido\",\"iconName\":\"icon-gear\",\"unread\":9,\"lastName\":\"696\"}]\n```\n\nAs you can see (from above) the default model does exist in collection. However, when I iterate over the collection to remove all models I get undefined for the default mode (id=1) only.\nHere is the code:\n\n```\nconsole.log( JSON.stringify(collection.toJSON())); // result above\ncollection.each( function( model ){\n  console.log( \"Removing model from collection to free up mem: \" + JSON.stringify( model ));\n  collection.remove( model );               \n}); //eof each\n```\n\nHere is the result of console.log inside each() above:\n\n```\nRemoving model from collection to free up mem: {\"id\":2,\"firstName\":\"Sido\",\"iconName\":\"icon-gear\",\"unread\":1,\"lastName\":\"595\"}\nRemoving model from collection to free up mem: {\"id\":3,\"firstName\":\"Sido\",\"iconName\":\"icon-gear\",\"unread\":9,\"lastName\":\"696\"}\nRemoving model from collection to free up mem: undefined\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3741",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3741/comments",
    "title": "Old docs still up at http://documentcloud.github.io/backbone/",
    "created_at": "2015-08-03T15:51:12Z",
    "updated_at": "2015-08-19T19:12:36Z",
    "body": "I recently got tripped up by the fact that http://documentcloud.github.io/backbone/ is hosting out-of-date downloads and documentation, and looks just like the new official site at backbonejs.org. I'm not sure how I first stumbled upon the old URL (probably DuckDuckGo search results). The same situation exists for Underscore: http://documentcloud.github.io/underscore/\n\nPerhaps it would be wise to set up a redirect from the old URL to the new one?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3739",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3739/comments",
    "title": "Backbone.ajax wrapError() eats jQuery's 'textStatus' and 'errorThrown' arguments",
    "created_at": "2015-07-31T21:33:20Z",
    "updated_at": "2016-06-16T05:17:03Z",
    "body": "Please see:\nhttps://github.com/jashkenas/backbone/blob/3e3a0554676970f7fbfb46bec7304c6eb945e04f/backbone.js#L1868\n\n``` js\n/* Line 1868 */\noptions.error = function(resp) {\n```\n\nThe normal function signature for jQuery's  ajax `error()` callback is the following:\n\n``` js\nfunction (jqXHR, textStatus, errorThrown)\n```\n\nBut the second 2 params are not utilized in Backbone's `option.error` callback, which can result in missing error details. This can create \"silent errors\" when responses enter the error callback due to invalid JSON responses but still returned a 200 and status \"OK\".\n\nSince Backbone's default implementation proxies this to jQuery, I think it's a good assumption to make that most users would have an interest in the `textStatus` and `errorThrown` arguments. Maybe it would be a good idea to pass these along with  `error(model, resp, options)`? They could even be tacked onto the response object. It's likely many devs have had issues debugging ajax failures like this and just created catch-alls as a workaround, but I think by allowing easy access to these other two arguments it could allow developers to perform more explicit error handling.\n\n(Somewhat) Relevant discussions:\nhttps://github.com/jashkenas/backbone/issues/2162\nhttps://github.com/jashkenas/backbone/issues/3520\nhttp://stackoverflow.com/questions/16476874/catching-backbone-sync-errors\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3738",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3738/comments",
    "title": "Collection triggers 'sync', when a model is fetched",
    "created_at": "2015-07-30T13:23:53Z",
    "updated_at": "2015-07-30T21:26:01Z",
    "body": "Im not sure if this is intended, but i got some issues in my app due to the collections 'sync' event. \n\nI expect the collection to trigger a 'sync' after calling the fetch method of the collection. BUT i don't expect a collection 'sync', when a model in the collection is fetched.\n\nThis problem is easier explained in code:\n\n``` javascript\nvar aCollection = Backbone.Collection.extend({...});\n\n// here is where i expect a 'sync' event from the Collection\naCollection.fetch();\n\nvar aModel = Backbone.Model.extend({...});\n\naCollection.add(aModel);\n\n// At this point a Model 'sync' is triggered, which perfectly fine\naModel.fetch();\n\n// but a Collection 'sync' is triggered too. :O\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3737",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3737/comments",
    "title": "collection.filter",
    "created_at": "2015-07-29T06:55:22Z",
    "updated_at": "2015-07-29T14:58:30Z",
    "body": "hi all !\n\nwhy does \n\n``` javascript\ncollection.filter\n```\n\n  return a plain array instead of a Backbone collection?\n\njust curious if there is a rationale behind that. I know all about how Backbone objects inherit Underscore properties, but I was surprised to learn that collection.filter was not tailored to return a collection in turn instead of returning a plain array as surely does this:\n\n``` javascript\n_.filter(array,fn)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3734",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3734/comments",
    "title": "Deferring updates until first save succeeds",
    "created_at": "2015-07-27T20:23:47Z",
    "updated_at": "2015-07-27T21:19:43Z",
    "body": "What is the generally accepted method of delaying additional updates until the first save succeeds (with a model)? \n\nI'm trying to avoid an issue where save ends up creating additional entries server side because the first few saves all end up getting treated as `create` (POST) requests, I guess because of latency with the first save. I'll see something like POST `{first_name: \"John\"}`, POST `{first_name: \"John\", last_name: \"Doe\"}`, instead of the second request being a PUT for `first_name` and `last_name`, and then end up with multiple DB rows that are near identical as fields are sequentially filled in.\n\nI tried the simple solution of deferring saves with deferred objects, but that just seems to lead to the hash sent back from the server's first save clobbering any local changes before the deferred save fires.\n\nThought I'd check before writing something complicated that queues/merges pending changes. Most of the related google results seem to be from several years ago (and haven't worked in tests).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3733",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3733/comments",
    "title": "Can someone tell me whats wrong with this code?",
    "created_at": "2015-07-27T19:56:26Z",
    "updated_at": "2015-07-27T19:59:25Z",
    "body": "# include <iostream>\n# include <cstring>\n\nusing namespace std;\n\ndouble gpay=0, tgpay=0;\n\nstruct employee\n{\n    string number;\n    string name;\n    double rate;\n    int hours;\n};\n\nint main() \n{\n    employee brain;\n    for (int i=0;i<=3;i++)\n    {\n        cout<<\"Enter \"<<i+1<<\" employee info.\";\n        cin>> employee[i].number>>employee[i].name;\n        cin>>employee[i].rate>>employee[i].hours;\n    }cout<<endl;\n    cout<<\"Payroll report with grosspay: \";\n    for (int i=0;i<4;i++)\n    {\n        cout<<employee[i].number<<employee[i].name;\n        gpay=employee[i].rate \\* employee[i].hours;\n        cout<<gpay; gpay+=tgpay;\n    }\n    cout<<endl;\n    cout<<\"Total gross pay= \"<<tgpay/4.0;\n\n```\nreturn 0;\n```\n\n}\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3731",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3731/comments",
    "title": "Collection set causes error with add:false option",
    "created_at": "2015-07-26T16:43:25Z",
    "updated_at": "2015-07-26T16:55:14Z",
    "body": "Working example:\n\n```\nvar books = new Backbone.Collection({id: 1, title: 'Book1'});\n\nbooks.set([{id: 1, title: 'updated title for first book'}, {id: 2, title: 'Book2'}], {add: false});\n```\n\nthe result will be collection with only one model with id: 1\n\nNot working example:\n\n```\nvar books = new Backbone.Collection({id: 1, title: 'Book1'});\n\nbooks.set([{id: 2, title: 'Book2'}, {id: 1, title: 'updated title for first book'}], {add: false});\n```\n\nP.S. The result of the second example is: \nUncaught TypeError: Cannot read property 'id' of undefined\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3730",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3730/comments",
    "title": "IE11 compatibility mode IE7 hashchange not work",
    "created_at": "2015-07-25T08:58:51Z",
    "updated_at": "2015-08-10T22:07:51Z",
    "body": "I guess IE8+ compatibility mode IE7 also does not work.\nThe reason is that IE11 running in IE7 compatibility mode reports true for <b>'onhashchange' in window</b>, even though the event isn't supported.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3728",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3728/comments",
    "title": "AJAX_Backbone",
    "created_at": "2015-07-24T05:20:06Z",
    "updated_at": "2015-07-24T14:41:59Z",
    "body": "I'm doing a project in PHP( Laravel 5) in which requires AJAX and recently started learning backbone JS due to its MVC structure but I'm unable to use AJAX via. Backbone JS in Lavavel, Can anyone help...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3727",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3727/comments",
    "title": "Hey can anyone help with this program ?",
    "created_at": "2015-07-23T21:46:55Z",
    "updated_at": "2015-07-23T22:03:01Z",
    "body": "Write a program that accepts a C-string input from the user and reverses the contents of the string. Your program should work by using two pointers. The \u201chead\u201d\npointer should be set to the address of the first character in the string, and the\n\u201ctail\u201d pointer should be set to the address of the last character in the string (i.e., the\ncharacter before the terminating null ). The program should swap the characters\nreferenced by these pointers, increment \u201chead\u201d to point to the next character, decrement \u201ctail\u201d to point to the second-to-last character, and so on, until all characters\nhave been swapped and the entire string reversed.\nThanks a lot.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3726",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3726/comments",
    "title": "im having a problem with this program can anyone help?",
    "created_at": "2015-07-23T00:15:37Z",
    "updated_at": "2015-07-23T04:32:53Z",
    "body": "Write a program that accepts a C-string input from the user and reverses the contents of the string. Your program should work by using two pointers. The \u201chead\u201d\npointer should be set to the address of the first character in the string, and the\n\u201ctail\u201d pointer should be set to the address of the last character in the string (i.e., the\ncharacter before the terminating null ). The program should swap the characters\nreferenced by these pointers, increment \u201chead\u201d to point to the next character, decrement \u201ctail\u201d to point to the second-to-last character, and so on, until all characters\nhave been swapped and the entire string reversed.\nThanks a lot.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3724",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3724/comments",
    "title": "peerDep warning for npm@3",
    "created_at": "2015-07-22T17:13:26Z",
    "updated_at": "2015-07-22T17:24:25Z",
    "body": "Just a heads up when `npm i` ing Backbone npm is giving the following warning:\n\n``` bash\nnpm WARN peerDependencies The peer dependency qunitjs@^1.14.0 included from karma-qunit will no\nnpm WARN peerDependencies longer be automatically installed to fulfill the peerDependency\nnpm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3723",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3723/comments",
    "title": "App is terminated due to memory pressure while taking multiple pictures in iOS",
    "created_at": "2015-07-22T06:19:25Z",
    "updated_at": "2015-07-22T12:38:57Z",
    "body": "I have tried a lot of solutions provided on other questions which were same as mine but nothing could help me much.\n\nLet me tell you what am I doing. I have a collection view. In that I will display some images which will be captured by camera. I am capturing multiple pictures at a time. All the pictures which I have taken, the address of those images will first save into database and then those images will be displayed in collection view.\nNow what happens, when I click 40-50 images at a time, the app is crashed and xcode displays a message something like \"app is terminating due to memory pressure\". Also I am getting too many memory warnings in logs but actually I was neglecting them.\n\nFirst I am writing code for taking multiple pictures-\n\n```\n- (void)imagePickerController:(UIImagePickerController *)picker \ndidFinishPickingMediaWithInfo:(NSDictionary *)info\n{\n  if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) {\n    //Get Image URL from Library\n    NSString *mediaType = [info objectForKey:UIImagePickerControllerMediaType];\n    NSURL *urlPath = [info valueForKey:UIImagePickerControllerReferenceURL];\n    if (segmentControl.selectedSegmentIndex != 1) {\n        [picker dismissViewControllerAnimated:YES completion:nil];\n    }\n    if (segmentControl.selectedSegmentIndex == 2) {\n        [self insertPicToDB:urlPath];\n    }else{\n        __block  NSURL *url;\n        if ([mediaType isEqualToString:(NSString *)kUTTypeImage]) {\n            UIImage *image = [info objectForKey:UIImagePickerControllerOriginalImage];\n            ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];\n            // Request to save the image to camera roll\n            [library writeImageToSavedPhotosAlbum:[image CGImage] orientation:(ALAssetOrientation)[image imageOrientation] completionBlock:^(NSURL *assetURL, NSError *error){\n                if (error) {\n\n                } else {\n                    url = assetURL;\n                    [self insertPicToDB:url];\n                    }\n                }];\n            }\n        }\n    }\n}\n```\n\nAfter while taking each picture, I am saving image url in db and then at the same time trying to reload the collection view as well.\n\n```\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{\nstatic NSString *identifier = @\"Cell\";\ncollectionCell = (CollectionCell *)[_collectionView dequeueReusableCellWithReuseIdentifier:identifier forIndexPath:indexPath];\ncollectionCell.imageView = (UIImageView*)[collectionCell viewWithTag:100];\ncollectionCell.imageView.image = [UIImage imageNamed:@\"placeholder.png\"];\n    NSString *fileURL = [[recipeImages[indexPath.section] objectAtIndex:indexPath.item] objectForKey:@\"FileUrl\"];\ncollectionCell.imagURL = fileURL;\n    if ([fileURL hasPrefix:@\"assets-library\"]) {\n        [self getImageFromURL:[NSURL URLWithString:fileURL] :indexPath];\n    }else{\n        fileURL = [NSString stringWithFormat:@\"%@/uploads/thumbnail/%@\",[[HttpClient sharedInstance]getBaseURLString],[[fileURL componentsSeparatedByString:@\"\\\\\"]lastObject]];\n        [collectionCell.imageView setImageWithURL:[NSURL URLWithString:fileURL] placeholderImage:[UIImage imageNamed:@\"placeholder.png\"]];\n    }\n    return collectionCell;\n}\n```\n\nSo the condition is, I will keep clicking the pictures and the pictures will be saving in background. \nAnd the definition of method \"getImageFromURL\" is-\n\n```\n-(void)getImageFromURL:(NSURL*)yourUrl :(NSIndexPath*)indexPath{\nALAssetsLibraryAssetForURLResultBlock resultblock = ^(ALAsset *myasset)\n{\n    ALAssetRepresentation *rep = [myasset defaultRepresentation];\n    @autoreleasepool {\n        CGImageRef iref = [rep fullScreenImage];\n        if (iref) {\n            UIImage *image = [UIImage imageWithCGImage:iref];\n            dispatch_async(dispatch_get_main_queue(), ^{\n                collectionCell = (CollectionCell*)[_collectionView cellForItemAtIndexPath:indexPath];\n                if (collectionCell) {\n                    NSData *imageData = UIImageJPEGRepresentation(image, 0.1);\n                    UIImage *compressedImage = [UIImage imageWithData:imageData];\n                    collectionCell.imageView.image = compressedImage;\n                }else{\n                    collectionCell.imageView.image = nil;\n                }\n                [collectionCell.imageView setNeedsDisplay];\n                [collectionCell setNeedsDisplay];\n            });\n            iref = nil;\n        }\n    }\n};\n\nALAssetsLibraryAccessFailureBlock failureblock  = ^(NSError *myerror)\n{\n    NSLog(@\"Can't get image - %@\",[myerror localizedDescription]);\n};\nALAssetsLibrary* assetslibrary = [[ALAssetsLibrary alloc] init];\n[assetslibrary assetForURL:yourUrl\n               resultBlock:resultblock\n              failureBlock:failureblock];\n}\n```\n\nI am also trying to compress the images while fetching in collection view. So I don't think that it is crashing because of collection view. What can be the reason? Is it because of I am using ALAssetsLibrary or something else?\n\nI was debugging it in iPhone 4S with iOS version 7.1.1.\n\nThanks in advance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3722",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3722/comments",
    "title": "Microsoft Edge compat",
    "created_at": "2015-07-20T20:28:22Z",
    "updated_at": "2015-07-21T17:51:11Z",
    "body": "Hey there Backbone devs,\n\nI am working on assessing, cataloging, and triaging library compat with Microsoft Edge. Do you know the version compat range for Backbone in Edge? Are all versions fully operable in Edge? Also, do you have any bugs that block features or compat I can help with or escalate?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3720",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3720/comments",
    "title": "Bump",
    "created_at": "2015-07-18T00:35:24Z",
    "updated_at": "2015-08-19T19:08:47Z",
    "body": "This is a placeholder issue for @megawac or @jridgewell to hijack with checklists for the next bump.\n\nI'm prepping for lodash v4 as part of the [Underdash proofing](https://github.com/underdash/underdash/issues/4#issuecomment-118974230) and will wait for the Backbone bump which removes `_.any` use in favor of `_.some`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3718",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3718/comments",
    "title": "annotated source docs",
    "created_at": "2015-07-17T19:36:29Z",
    "updated_at": "2015-07-19T13:21:16Z",
    "body": "Hi there\n\nI am having a lot of trouble figuring out what this call does in the Model constructor\n\n``` javascript\nthis.set(attrs, options);\n```\n\ncan the annotated source be updated to speak to what this accomplishes? the source is very confusing. the reason why I care is because I want my Views and Collections to have to have some of the same ability as Models to have default values, so I am trying to mimic the behavior of the Model constructor with my Views and Collections...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3717",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3717/comments",
    "title": "Manually triggering event on model that is part of collection causes error",
    "created_at": "2015-07-16T23:53:32Z",
    "updated_at": "2015-10-26T19:18:41Z",
    "body": "Hello -- we were upgrading backbone in our app and ran into an unexpected error.  Here is the simplest repro for it:\n\n```\nvar c = new Backbone.Collection();\nvar m = new Backbone.Model();\n\nc.add(m);\nm.trigger('change');  //  error thrown\n```\n\nWas there an intentional change in how events are handled?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3716",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3716/comments",
    "title": "Overriding Backbone model.parse()",
    "created_at": "2015-07-15T23:18:10Z",
    "updated_at": "2015-07-16T18:52:44Z",
    "body": "Hi all\n\nI overrode Backbone.Model instance.parse like so:\n\n``` javascript\n  parse: function (resp, options) {\n                    /*\n                     parse converts a response into the hash of attributes to be set on the model.\n                     The default implementation is just to pass the response along.\n                     */\n                    if(resp.success){\n                        return resp.success;\n                    }\n                    else{\n                        return {};\n                    }\n                }\n```\n\nBTW this is in my model \"class\", it is not passed in as an option, hope that's not a problem.\n\nIn my API, if everything is successful, I do this with Node\n\n``` javascript\nres.send({success:model};\n```\n\nif there is an error, I do:\n\n``` javascript\nres.send({error:model});\n```\n\nso as you can see, in the my overridden parse function it returns resp.success. I think this part is correct. _However_ when I return {}, then some problems seems to happen.\n\nBackbone seems to create whole new Backbone models if I return an empty object {} in the parse function.\n\nIn any case, what is the best way to handle different responses from the server in the parse method?\n\nFor example, ss this a good idea?\n\n``` javascript\n  parse: function (resp, options) {\n\n                    if(resp.success){\n                        return resp.success;\n                    }\n                    else{\n                        return this.attributes; /// is this a good idea?\n                    }\n                }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3715",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3715/comments",
    "title": "Documentation of options",
    "created_at": "2015-07-15T09:20:51Z",
    "updated_at": "2017-03-18T17:39:20Z",
    "body": "Hi.\n\nhttp://backbonejs.org/#Model-set\n\nThis (and many other methods of backbone classes) doesn't include documentation of all the arguments. I can not seem to find these options.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3714",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3714/comments",
    "title": "Error event not triggered when model destroy fails on ajax call",
    "created_at": "2015-07-14T13:41:40Z",
    "updated_at": "2015-07-14T16:26:16Z",
    "body": "Hi,\n\nI'm trying to figure out, what is the actual flow of events, when destroying model.\n\nI think I see at least two issue related to model destroy.\n1. error event is not triggered when ajax call fails (this is different from model save method, where error event is always triggered in case of ajax failure)\n2. model collection removal should be delayed after successful ajax call, meaning that model is only removed from collection when ajax DELETE was successful\n\nHere is the basic test:\nJsfiddle: http://jsfiddle.net/mauron85/115q8vsu/3/\n\n```\nvar MyCollection = Backbone.Collection.extend({\n  url: '/collection'\n});\n\n// 1. create instance of collection and model\nvar collection = new MyCollection;\nvar model = new Backbone.Model({\n    id: '1'\n});\n\n// 2. add model to collection\ncollection.add(model);\n\n// 3. this will be fired first after model.destroy() - EXPECTED\ncollection.on(\"request\", function (model) {\n  console.log('request');\n});\n\n// 4. this will be never fired as ajax call fails - EXPECTED\ncollection.on(\"sync\", function (model) {\n  console.log('sync');\n});\n\n// 5. this will be never fired, I was expecting this one to be triggered when ajax fails (same as for model save ...)\ncollection.on(\"error\", function (model) {\n  console.log('error');\n});\n\n// 6. this is fired last - at least confusing, as destroy ajax call failed\ncollection.on(\"destroy\", function (model) {\n  console.log('destroy');\n});\n\n// 7. this is fired right after 4. - at least confusing, as destroy ajax call failed\nmodel.on('destroy', function () {\n  console.log('model destroyed');\n});\n\n// 8. UNEXPECTED (removing model from collection,\n// IMHO should be delayed and done after sucessfull ajax call)\ncollection.on(\"remove\", function (model) {\n  console.log('model removed');\n});\n\nmodel.destroy().always(function () {\n  // Expecting collection length to be 1, as destroy was not succesfull, \n  // but it's 0 - model was removed from collection.\n  // Should I add model back on ajax failure?\n  console.log(collection.length);\n});\n```\n\nLet's compare it with model save. No issue here. Events are tiggered as expected according to docs.\n\n```\nvar MyCollection = Backbone.Collection.extend({\n  url: '/collection'\n});\n\n// 1. create instance of collection and model\nvar collection = new MyCollection;\nvar model = new Backbone.Model({\n    id: '1'\n});\n\n// 2. add model to collection\ncollection.add(model);\n\n// 3. this will be fired first - EXPECTED\ncollection.on(\"request\", function (model) {\n  console.log('request');\n});\n\n// 4. this will be never fired as ajax call fails - EXPECTED\ncollection.on(\"sync\", function (model) {\n  console.log('sync');\n});\n\n// 5. this will be fired - EXPECTED\ncollection.on(\"error\", function (model) {\n  console.log('error');\n});\n\nmodel.save().always(function () {\n  console.log(collection.length);\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3712",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3712/comments",
    "title": "Collection set: when one model's cid == another model's id",
    "created_at": "2015-07-14T02:17:06Z",
    "updated_at": "2015-07-14T02:44:02Z",
    "body": "Given the following code:\n\n``` javascript\nvar model1 = new Backbone.Model({\n  id: 'foo'\n});\nvar model2 = new Backbone.Model({\n  id: model1.cid\n});\n\nvar collection = new Backbone.Collection([model1]);\ncollection.set([model1, model2]);\n```\n\nThe result is that `collection` contains only `model1`. Also, oddly, `model1.id` is changed to its `cid`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3708",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3708/comments",
    "title": "Collection set method going into merge with same models/objects already present",
    "created_at": "2015-07-13T03:33:17Z",
    "updated_at": "2015-08-19T16:21:24Z",
    "body": "``` js\nvar collection = new Backbone.Collection([{id: 1}, {id: 2}]);\ncollection.set([{id: 1}, {id: 2}]);\n```\n\nThis code will enter the merging process of the 2 already existing models, im not sure if thats right, because no change of attributes will happen.\n\nInstantiating a new collection with an array of objects creates a model for every object, but the 'merge-check' in backbone is comparing against bare attributes if no models (but an array of objects is) added on the set-method.\nThough it says \"// Turn bare objects into model references, ...\", but i can't spot where the bare object is turned into a model reference (for comparing if there is a need to merge)\n\n``` js\nif (merge && attrs !== existing) {\n```\n\nfrom\n\n``` js\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      for (var i = 0; i < models.length; i++) {\n        attrs = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(attrs)) {\n          if (remove) modelMap[existing.cid] = true;\n          if (merge && attrs !== existing) {\n            attrs = this._isModel(attrs) ? attrs.attributes : attrs;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(attrs, options);\n          if (!model) continue;\n          toAdd.push(model);\n          this._addReference(model, options);\n        }\n```\n\nIf the existing piece of code is correct as is, could someone point out the reason why?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3707",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3707/comments",
    "title": "Model reference still exists in collection after remove",
    "created_at": "2015-07-10T15:45:16Z",
    "updated_at": "2015-07-10T15:47:19Z",
    "body": "Backbone version: v1.2.1\n\nDescription: when you remove model from collection, model is still in collection in model remove handler\n\nExpected: after remove model is not part of collection anymore\n\nActual: model is still in collection, because model remove event is triggered before model reference is removed\n\nI've located problem in _removeModels method of Collection\n\n```\n...\n _removeModels: function(models, options) {\n...\n        if (!options.silent) {\n          options.index = index;\n// PROBLEM: Model remove event triggered, before reference is removed\n          model.trigger('remove', model, this, options); \n        }\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed.length ? removed : false;\n    },\n```\n\nHow to reproduce:\n\n```\n\nvar collection = new Backbone.Collection;\nvar model = new Backbone.Model;\ncollection.add(model);\n\nmodel.on('remove', function (model, collection) {\n  if (collection.get(model)) {\n    alert('Model is still in collection'); // error thrown (unexpected)\n  }\n});\n\ncollection.remove(model);\n\nif (collection.get(model)) {\n  alert('Model is still in collection'); // error not thrown (as expected)\n}; \n```\n\nor jsfiddle: https://jsfiddle.net/mauron85/sLoygsk7/1/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3706",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3706/comments",
    "title": "this is just a question",
    "created_at": "2015-07-09T02:23:12Z",
    "updated_at": "2015-07-10T03:56:35Z",
    "body": "Dear Purveyors of Backbone:\n\nJust a question for y'all. Why don't Backbone Views have the same defaults/attributes/options relationships that Backbone Models have? And, after checking the source, Collections and Routers don't either, why don't all Backbone components follow the same pattern? I am aware that the functionality of automatically assigning this.options was taken out of a newer version of Backbone, but the question I am asking is about a decision that was made long before that one.\n\nJust curious, thanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3705",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3705/comments",
    "title": "Collection Won't Reset",
    "created_at": "2015-07-08T11:40:14Z",
    "updated_at": "2015-07-08T14:45:06Z",
    "body": "I'm trying to `.reset()` to clear my `collection` before calling `.fetch()` on it to retrieve new data for that page.\n\nBut for some reason my `collection` isn't being resetted and fetching the new data when I navigate to another page. It only resets the collection and gets the new data when I manually reload the page.\n\n```\nclass ProjectPostItemsView extends Backbone.View\n  template: JST['project_post_items.ejs']\n  posts_item_views: []\n\n  initialize: ->\n    super()\n    @listenTo( @collection, 'add', @displayPostItem )\n    @collection.reset().fetch(add: true)\n\n  displayPostItem: (project) ->\n    view = new ProjectPostItemView(model: project)\n    @posts_item_views.push( view.on('render', =>\n      @$('.post-items').append(view.$('>'))) )\n\n  render: (options) ->\n    super(options)\n```\n\nI've tried this too:\n\n```\n@collection.fetch(reset: true, add: true)\n```\n\nBut it still doesn't reset, and I get this error:\n\n```\nUncaught Error: Duplicate id: can't add the same model to a collection twice\n```\n\nI'm very new to Backbone so I'm not sure if I'm handling this correctly. What am I doing wrong?\n\nAny help is appreciated. Thanks in advance!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3704",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3704/comments",
    "title": "views: events getting called before initialize in  1.2.*?",
    "created_at": "2015-07-07T16:26:55Z",
    "updated_at": "2015-08-18T21:20:11Z",
    "body": "just updated backbone to  1.2.\\* from 1.1.2 and I'm running into an issue in my views where the `events` block is being called before the `initialize` block. Was this an intentional change? I didn't see this in the changelog.\n\nHad to lock into 1.1.2 since this change is breaking my app. (I conditionally extend the events hash depending on  options set within the initialize block.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3700",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3700/comments",
    "title": "Backbone update event on collection should return the newly added or removed model(s)",
    "created_at": "2015-07-02T15:20:20Z",
    "updated_at": "2016-02-01T16:40:02Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3698",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3698/comments",
    "title": "I have to click back button twice to go  back in a Backbone app.",
    "created_at": "2015-06-27T09:06:03Z",
    "updated_at": "2015-06-30T18:25:16Z",
    "body": "I am using `<a href=\"#goback\"></a>`. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3697",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3697/comments",
    "title": "Issue about Backbone Collections",
    "created_at": "2015-06-26T20:51:52Z",
    "updated_at": "2015-06-26T22:15:29Z",
    "body": "Hi everyone! \n\nI have likely found a bug concerning to backbone collections.\n\nFirst, I have run the next code:\n\n``` javascript\nvar Model = Backbone.Model.extend({idAttribute: '_id'});\nvar all = new Backbone.Collection();\n\nvar model = new Model({_id: 1});\nall.add(model);\n\nconsole.log(all.get(1) === model);\n```\n\nIf you execute the previous code using latest Backbone version, you will get false. Consecuently, if you are using custom idAttribute and you add it in a collection, you won't be able to get it back through its id by means of the get method. Otherwise, in case you are using Backbone v1.0.0, it truly works as expected.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3696",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3696/comments",
    "title": "Any plans to modularize backbone? ",
    "created_at": "2015-06-26T01:16:32Z",
    "updated_at": "2015-06-26T04:03:30Z",
    "body": "I would love to be able to do something like:\n\n``` js\nimport { events } from \"backbone\";\n\nObject.assign(myModule, events);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3694",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3694/comments",
    "title": "docs for view.remove()",
    "created_at": "2015-06-24T23:35:20Z",
    "updated_at": "2015-07-22T23:09:28Z",
    "body": "jeremy\n\nIMO\n\nhttp://backbonejs.org/#View-remove\n\nthis absolutely positively needs to read:\n\n```\nremove - view.remove()\nRemoves a view from the DOM, *removes/deletes the DOM element*, and calls stopListening to remove any bound events that the view has listenTo'd. \n```\n\nas it is now, it doesn't make it clear that the el goes missing after `remove()`\n\nthis call\n\nthis.$el.remove();\n\nis hiding inside remove() and it's dangerous\n\none thing you could do is pass a boolean to remove() and decide whether or not to delete the DOM element\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3693",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3693/comments",
    "title": "_removeModels regression bug",
    "created_at": "2015-06-24T16:37:33Z",
    "updated_at": "2015-09-25T14:48:48Z",
    "body": "It looks like in 1.2.1, _removeModels was simplified, but introduced a regression bug.\n\n```\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n        // CODE REMOVED HERE\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed.length ? removed : false;\n    },\n```\n\nRemoved the following lines after `if (!model) continue;`\n\n```\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n        delete this._byId[model.cid];\n```\n\nWhat this means is that if you are listening to a remove event and you check for removal, you will get into an infinite loop because the event is now called before the id is removed from `this._byId`:\n\n```\n    if (current_related_model = collection.get(id)) collection.remove(current_related_model)\n```\n\nI think the _byId code should be put back so when events are fired, they represent the most up-to-date state.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3691",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3691/comments",
    "title": "how can listenTo scroll events?",
    "created_at": "2015-06-24T09:33:47Z",
    "updated_at": "2015-06-24T14:00:46Z",
    "body": "how can listenTo scroll events?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3688",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3688/comments",
    "title": "Collection: get by id/_addReference is broken",
    "created_at": "2015-06-23T22:55:22Z",
    "updated_at": "2015-06-25T14:53:16Z",
    "body": "It looks like the `Collection._addReference` method is broken, around line [1108](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1108):\n\n```\n  var id = this.modelId(model.attributes);\n  if (id != null) this._byId[id] = model;\n```\n\nShouldn't this look more like:\n\n```\n  var idAttr = this.modelId(model.attributes);\n  if (idAttr != null) var id = model[idAttr];\n  if (id != null) this._byId[idAttr] = model;\n```\n\nThat is, it's trying to index the model by the value `\"id\"` rather than the value `model[\"id\"]`.\n\nThis, of course, breaks `get` as well, and probably other things.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3687",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3687/comments",
    "title": "$.Deferred is undefined after requiring Backbone >1.1.2",
    "created_at": "2015-06-18T21:21:19Z",
    "updated_at": "2015-06-19T21:37:25Z",
    "body": "Here's a [gist](https://gist.github.com/nucleartide/37caa96f15ceb0943385) of the problem. If you run install `npm install` with that package.json today, it'll install the latest Backbone which is version 1.2.1.\n\nStrangely, `$.Deferred` is _only_ undefined for versions of Backbone greater than 1.1.2. On Backbone 1.1.2, it works as expected and the console output is `[Function]`.\n\nAnyone know what's going on?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3683",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3683/comments",
    "title": "Using Backbone with Webpack and without jQuery throws errors",
    "created_at": "2015-06-14T21:47:03Z",
    "updated_at": "2015-06-15T15:56:07Z",
    "body": "Following the guide:\n\nhttps://github.com/jashkenas/backbone/wiki/Using-Backbone-without-jQuery\n\nI get the error: Uncaught Error: Cannot find module \"jquery\". It seems like Webpack is defaulting to AMD and is trying to load jQuery and will throw an error when it fails. I tried forcing Webpack to use CommonJS using the imports loader:\n\n```\n        loaders: [\n            {\n                test: /backbone.js/,\n                loader: 'imports?define=>false'\n            }\n        ]\n```\n\nBut the result is the following error message: Uncaught ReferenceError: Backbone is not defined (although Backbone is present in the JS file, not sure why I'm getting this error)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3677",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3677/comments",
    "title": "Replace `_.any` with `_.some`.",
    "created_at": "2015-06-10T02:46:51Z",
    "updated_at": "2015-06-10T03:35:20Z",
    "body": "I'm wanting to cut aliases in v4 of lodash and wondering if you all would be cool with dropping `_.any` use in favor of the more ES-friendly `_.some` flavor.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3672",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3672/comments",
    "title": "Drop `include` method use for `includes`",
    "created_at": "2015-06-09T03:23:48Z",
    "updated_at": "2015-06-09T21:13:09Z",
    "body": "The Underscore method `include` should be dropped in favor of `includes` in BB.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3671",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3671/comments",
    "title": "Ditch bindAll use.",
    "created_at": "2015-06-09T03:16:26Z",
    "updated_at": "2015-06-09T16:43:50Z",
    "body": "`bindAll` is used once in Backbone and it could be swapped out with `bind`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3669",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3669/comments",
    "title": "help......In the mobile terminal, the tap event doesn't work",
    "created_at": "2015-06-08T02:59:15Z",
    "updated_at": "2015-06-08T04:40:42Z",
    "body": "In the mobile terminal, the tap event doesn't work\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3668",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3668/comments",
    "title": "Collection.at() behavior change",
    "created_at": "2015-06-07T17:24:51Z",
    "updated_at": "2015-06-08T13:59:25Z",
    "body": "In release 1.1.2, the Collection.at() function was specified as follows:\n\n```\n// Get the model at the given index.\n    at: function(index) {\n      return this.models[index];\n    },\n```\n\nBeginning in 1.2.0, this function is specified as:\n\n```\n // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n```\n\nPrior to 1.2.0, providing an index < 0 would return undefined; it now may or may not return undefined, depending on the index supplied.  This being a behavior change, would be nice to have it mentioned in the release notes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3666",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3666/comments",
    "title": "Type Error with html 5 canvas ",
    "created_at": "2015-06-04T19:13:44Z",
    "updated_at": "2015-06-04T20:38:13Z",
    "body": "Hello, I get a type error with backbone 1.2 from the cdnjs when rendering a model from within a view...\n$(document).ready(function(){\nvar Box = Backbone.Model.extend({defaults: {x: 0,y: 0, w: 1,h: 1,}\n});\nvar BoxSet = Backbone.Collection.extend({model:Box });\nvar BoxView= Backbone.View.extend({\n    render : function() {var model=this.model, ctx=this.options.ctx;}\n});\nvar SetView= Backbone.View.extend({ \n    initialize: function() {this.collection.on(\"all\",this.render,this);},\n    render: function() {var canvas=this.$el.get(0) , ctx=canvas.getContext(\"2d\");}\n});  \nvar c=new BoxSet();\nc.add({x:10,y:10,w:100,h:100});  \nvar v=new SetView({el:$(\"canvas\"),collection :c});\nv.render();\n})\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3662",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3662/comments",
    "title": ".trigger('change')",
    "created_at": "2015-06-03T22:45:43Z",
    "updated_at": "2015-06-04T14:28:13Z",
    "body": "v1.2.0 line 1117 doesn't contain 'model &&'\nWhen setting value (using \"silent:true\") and then chaining & triggering a \"change\"  event, it throws an error\n\nmodel.set({'some':'data'}, {'silent':true}).trigger('change');\n\nI know it says \"not\" to use silent... \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3654",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3654/comments",
    "title": "Model destroy method not call its success callback method after server response 200 ",
    "created_at": "2015-06-01T14:49:01Z",
    "updated_at": "2015-06-01T16:04:52Z",
    "body": "my code as below \nvar model = collection.findWhere({id:id});\n                            model.destroy({\n                                success : function(){\n                                                       console.log(\"1111\");\n                                             }\n                            });\nseems the success callback method never executed. \n\njust check the source code as \n\n options.success = function(resp) { \n                if (options.wait || model.isNew()) destroy();\n                if (success) success(model, resp, options);\n                if (!model.isNew()) model.trigger('sync', model, resp, options);\n            };  \nbut options.success not be executed.\n\nPlease help me. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3653",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3653/comments",
    "title": "Router/History v2",
    "created_at": "2015-06-01T05:19:55Z",
    "updated_at": "2018-07-15T02:34:43Z",
    "body": "Backbone's router is inspired by Ye Olde Routers from several years ago, before single-page applications were a 'thing,' and when one usually reached for a handful of jQuery plugins to build a JavaScript app.\n\nThese routers are distinguished by three characteristics:\n1. Each route is independent from all other routes\n2. Each route is a callback that is triggered when the associated URL is matched\n3. The router is used to bootstrap the page, and is never used again\n\nIt's pretty clear that Backbone's router exhibits the first two characteristics. Over time, changes to the Router have made number 3 a li'l less obvious. The existence of the `trigger` option and the fact that it is `false` by default are evidence of that third characteristic. Numerous blog posts and books always warn _against_ setting `trigger: true`. Additionally, @jashkenas expressed to me that this is how he believed the router should be used when we chatted about it at BBConf a few months ago.\n\nEvery other popular JavaScript library/framework has moved away from this pattern. In its place, a style of routing pioneered by Ember has become the de facto way to structure single page apps. Ember's router went on to heavily influence the React router, Angular's UI Router, and Angular v2's router.\n\nWhile reaching feature parity with Ember's router might be a bit much for Backbone (it would prob. increase the size of the library by 2x lol), I think that looking there for inspiration and coming up with a minimal version of that sort of routing system would tremendously improve Backbone. And I think it could be done in a pretty small amount of code!\n\nFurther, by providing the right hooks, it would make it easier for third party developers to create an Ember-style router for Backbone as a third party library, which is quite the challenge right now (there's more on that at the end of this post).\n\nThese are what I've gathered to be a few of the important characteristics of those routers:\n1. Routes are **states**, and the router is a **state machine**.\n2. Transitions between states are **asynchronous**.\n3. **State** can optionally be encoded into a **URL** when they are transitioned into.\n4. States can have **children states** (this is where a large part of the complexity of Ember-style routing comes from)\n5. Routes, at the minimum, have **two callbacks** associated with them: an **asynchronous** callback and a **synchronous** callback.\n6. A route is activated **each and every time** the URL changes.\n7. **History** is a read/write interface to the browser history, and has no other roles\n# \n\nFAQ for some of those points:\n\n**Why two hooks?**\n\nThere are generally two things you want to do when the URL changes:\n1. Fetch data (maybe)\n2. Render a view (also maybe \u2013\u00a0but most of the time)\n\nGenerally, fetching data is asynchronous, and showing some HTML is synchronous. So, two hooks.\n\n[router.js](https://github.com/tildeio/router.js/) breaks up the async method into three async methods to cover a variety of use cases. This complexity covers important use cases for transitions, but, again, it might be out-of-scope for BB to cover all of those cases. The cool part is that a single hook could be split out into 3 hooks by the plugin authors.\n\n**Why nested routes?**\n\nNesting routes makes it easy to compose nested view states. It also aids with preserving view and data state.\n\nImagine a route called `books`. The URI for this route is also just `books`.\n\nThen imagine two child routes: `book` (with URI `:id`) and `authors` (with URI `authors`).\n\nIf a user is at `books/2`, then `books` and `book` are both active. If the user then navigates over to `books/author`, we wouldn't want to re-fetch all of the data for `books` again! We've already got it! We also probably would not need to render the `books` view again.\n\nThis is just one edge case that the router solves for. As noted above, nested states is most likely far too complicated for Backbone to include. A flat route structure would keep the code small, but the right hooks would allow someone to re-write how routes transition.\n\n**A state machine? Well how come?**\n\nBecause representing many applications as states that the router transitions between truly does simplify things so much. As an added bonus, the router can also be used to manage the state of apps that don't persist their state as a URL, like embedded widgets or whatevs, since encoding state into a URL is optional.\n\n**Why can't you create this this with the current router?**\n\nIt is very difficult right now. There are two main reasons why:\n1. The current router was developed with a different use case in mind, which makes the hooks it provides very bad for this purpose\n2. The roles of history and the router are conflated, I think (to put it another way, backbone's router does not have characteristic 7 of Ember-style routing above)\n\nRecent changes to the `execute` method have been an attempt at resolving the first problem, but they're sort of just band aid solutions over a more fundamental problem.\n\nExamples of roles that History should not do (I think) include:\n1. URL match algorithm [History#loadUrl](https://github.com/jashkenas/backbone/blob/6541698ff67eaf0a9baf9121cbd22d0f0e90e7b6/backbone.js#L1730-L1740)\n2. Route execution [History#loadUrl](https://github.com/jashkenas/backbone/blob/6541698ff67eaf0a9baf9121cbd22d0f0e90e7b6/backbone.js#L1730-L1740)\n\nI would argue that the router should manage both of these things, and they should be easily-overridable (and separate) hooks.\n\nI'd be willing to put together a PoC router if there's any interest in something like this in Backbone.\n\nthanx4reading\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3652",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3652/comments",
    "title": "lection id attribute",
    "created_at": "2015-06-01T03:53:07Z",
    "updated_at": "2015-06-01T12:46:36Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3650",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3650/comments",
    "title": "is there a way to Load collection by Open Session",
    "created_at": "2015-05-31T21:17:09Z",
    "updated_at": "2015-05-31T21:38:02Z",
    "body": "Backend Spring MVC and Spring-data,spring-security. Front end Angularjs. The database I am using is mysql.i\u2019d like to add an object to my class by using on-to-many relationship But, when I try to run my web appI have this error :\n\n```\norg.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: could not initialize proxy - no Session (through reference chain: vo.SitesListVO[\"sites\"]->java.util.UnmodifiableRandomAccessList[1]->model.Sites[\"siteesTypeSite\"]->model.TypeSites_$$_jvst21_3[\"typeSite\"]); nested exception is org.codehaus.jackson.map.JsonMappingException: could not initialize proxy - no Session (through reference chain: vo.SitesListVO[\"sites\"]->java.util.UnmodifiableRandomAccessList[1]->model.Sites[\"siteesTypeSite\"]->model.TypeSites_$$_jvst21_3[\"typeSite\"])\n    at org.springframework.http.converter.json.MappingJacksonHttpMessageConverter.writeInternal(MappingJacksonHttpMessageConverter.java:203)\nCaused by: org.codehaus.jackson.map.JsonMappingException: could not initialize proxy - no Session (through reference chain: inwi.gestionPatrimoine.vo.SitesListVO[\"sites\"]->java.util.UnmodifiableRandomAccessList[1]->model.Sites[\"siteesTypeSite\"]->model.TypeSites_$$_jvst21_3[\"typeSite\"])\n    at org.codehaus.jackson.map.JsonMappingException.wrapWithPath(JsonMappingException.java:218)\n    Caused by: org.hibernate.LazyInitializationException: could not initialize proxy - no Session\n    at org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:164)\n    at org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:285)\n```\n\nand this  error in browser :\n\n```\nGET http://localhost:8080/XXXX/protected/sites/?page=0 500 (Internal Server Error)$get.id @ angular.min.js:98l @ angular.min.js:94m @ angular.min.js:93$get.m.(anonymous function) @ angular.min.js:95$scope.getContactList @ sites.js:31sitesController @ sites.js:254d @ angular.min.js:27instantiate @ angular.min.js:28$get @ angular.min.js:51(anonymous function) @ angular.min.js:42n @ angular.min.js:6j @ angular.min.js:42e @ angular.min.js:38e @ angular.min.js:38e @ angular.min.js:38e @ angular.min.js:38(anonymous function) @ angular.min.js:38(anonymous function) @ angular.min.js:16$get.e.$eval @ angular.min.js:87$get.e.$apply @ angular.min.js:87(anonymous function) @ angular.min.js:16d @ angular.min.js:27qb @ angular.min.js:15jc @ angular.min.js:15(anonymous function) @ angular.min.js:161jQuery.Callbacks.fire @ jquery-1.10.2.js:3048jQuery.Callbacks.self.fireWith @ jquery-1.10.2.js:3160jQuery.extend.ready @ jquery-1.10.2.js:433completed @ jquery-1.10.2.js:104\n```\n\nFirstly i'll post my code before explain how i'm understand  this erros.\nMy model code is :\n\n```\n@Entity\n//@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"})\npublic class TypeSites implements java.io.Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private int         idTypeSite;\n    private String      typeSite;\n    @OneToMany(mappedBy = \"siteesTypeSite\", cascade = CascadeType.ALL,fetch = FetchType.LAZY)\n    //@JsonIgnore\n    //@JsonManagedReference\n    private Set<Sites> sitees= new HashSet<Sites>();\n    //geters and setters \n}\n@Entity\n//@NamedEntityGraph(name = \"sites.type\", attributeNodes = @javax.persistence.NamedAttributeNode(\"siteesTypeSite\"))\n//@JsonIgnoreProperties({\"hibernateLazyInitializer\", \"handler\"})\npublic class Sites implements java.io.Serializable {\n    @Id\n    @GeneratedValue\n    private int id;\n    @ManyToOne(fetch = FetchType.LAZY) \n    @JoinColumn(name =\"idTypeSite\")  \n    //@JsonIgnore\n    //@JsonBackReference\n    private TypeSites siteesTypeSite;\n    //geters and setters \n}\n```\n\ncode of value object design pattern\n\n```\npublic class TypeSitesListVO {\n    private int         pagesCount;\n    private long        totalTypeSite;\n    private String      actionMessage;\n    private String      searchMessage;\n    private List<TypeSites> typesites;\n    //setters/gtters}\npublic class SitesListVO {\n    private int pagesCount;\n    private long totalSites;\n    private String actionMessage;\n    private String searchMessage;\n    private List<Sites> sites = new ArrayList<Sites>();\n    //setters/gtters}\n```\n\nRepository :\n\n```\npublic interface SitesRepository extends PagingAndSortingRepository<Sites, Integer> {\n    //@Query(\"SELECT s FROM Sites s TypeSites ts JOIN FETCH s.siteesTypeSite WHERE s.id =ts.idTypeSite \")\n    //@EntityGraph(value = \"sites.type\", type = EntityGraphType.LOAD)\n    Page<Sites> findBycodeGSMLike(Pageable pageable, String codeGSM);\n    //Page<Sites> findBycodeGSMLike(Pageable pageable, List<String> codeGSM);\n}\n```\n\nServices class :\n\n```\n@Service\n@Transactional\npublic class SitesService {\n\n    @Autowired\n    private SitesRepository siteRepository;\n\n    @Transactional(readOnly = true)\n    public SitesListVO findAll(int page, int maxResults) {\n        Page<Sites> result = executeQueryFindAll(page, maxResults);\n\n        if(shouldExecuteSameQueryInLastPage(page, result)){\n            int lastPage = result.getTotalPages() - 1;\n//            for (Sites e: result){\n//                Hibernate.initialize(e.getSiteesTypeSite());\n//            }\n            result = executeQueryFindAll(lastPage, maxResults);\n        }\n        return buildResult(result);\n    }\n    public void save(Sites site) {\n        siteRepository.save(site);\n    }\n    @Transactional(readOnly = true)\n    public SitesListVO findBycodeGSMLike(int page, int maxResults, String codeGSM) {\n        Page<Sites> result = executeQueryFindByName(page, maxResults, codeGSM);\n\n        if(shouldExecuteSameQueryInLastPage(page, result)){\n            int lastPage = result.getTotalPages() - 1;\n//            for (Sites e: result){\n//                Hibernate.initialize(e.getSiteesTypeSite());\n//            }\n            result = executeQueryFindByName(lastPage, maxResults, codeGSM);\n        }\n        return buildResult(result);\n    }\n    private boolean shouldExecuteSameQueryInLastPage(int page, Page<Sites> result) {\n        return isUserAfterOrOnLastPage(page, result) && hasDataInDataBase(result);\n    }\n    private Page<Sites> executeQueryFindAll(int page, int maxResults) {\n        final PageRequest pageRequest = new PageRequest(page, maxResults, sortBycodeGSMASC());\n//        Page<Sites> SitesList = siteRepository.findAll(pageRequest); \n//        for (Sites e: SitesList){\n//            Hibernate.initialize(e.getSiteesTypeSite());\n//        }\n//        return SitesList; \n        return siteRepository.findAll(pageRequest);\n    }\n\n    private Sort sortBycodeGSMASC() {\n        return new Sort(Sort.Direction.ASC, \"codeGSM\");\n    }\n\n    private SitesListVO buildResult(Page<Sites> result) {\n\n        return new SitesListVO(result.getTotalPages(), result.getTotalElements(), result.getContent());\n    }\n\n    private Page<Sites> executeQueryFindByName(int page, int maxResults, String codeGSM) {\n        final PageRequest pageRequest = new PageRequest(page, maxResults, sortBycodeGSMASC());\n\n//      Page<Sites> SitesList = siteRepository.findBycodeGSMLike(pageRequest, codeGSM); \n//      for (Sites e: SitesList){\n//          Hibernate.initialize(e.getSiteesTypeSite());\n//      }\n//      return SitesList; \n      return siteRepository.findBycodeGSMLike(pageRequest, codeGSM); \n    }\n    private boolean isUserAfterOrOnLastPage(int page, Page<Sites> result) {\n        return page >= result.getTotalPages() - 1;\n    }\n\n    private boolean hasDataInDataBase(Page<Sites> result) {\n        return result.getTotalElements() > 0;\n    }\n}\n```\n\ncontroller class :\n\n```\n@Controller\n@RequestMapping(value = \"/protected/sites\")\npublic class SitesController {\n\n    private static final String DEFAULT_PAGE_DISPLAYED_TO_USER = \"0\";\n\n    @Autowired\n    private SitesService siteService;\n\n    @Autowired\n    private MessageSource messageSource;\n\n    @Value(\"5\")\n    private int maxResults;\n\n    @RequestMapping(method = RequestMethod.GET)\n    public ModelAndView welcome() {\n        return new ModelAndView(\"sitesList\");\n    }\n    @RequestMapping(method = RequestMethod.GET, produces = \"application/json\")\n    public ResponseEntity<?> listAll(@RequestParam int page, Locale locale) {\n\n        return createListAllResponse(page, locale);\n    }\n\n    @RequestMapping(method = RequestMethod.POST, produces = \"application/json\")\n    public ResponseEntity<?> create(@ModelAttribute(\"site\") Sites site,\n                                    @RequestParam(required = false) String searchFor,\n                                    @RequestParam(required = false, \n                                    defaultValue = DEFAULT_PAGE_DISPLAYED_TO_USER) int page,\n                                    Locale locale) {\n        siteService.save(site);\n\n        if (isSearchActivated(searchFor)) {\n            return search(searchFor, page, locale, \"message.create.success\");\n        }\n\n        return createListAllResponse(page, locale, \"message.create.success\");\n    }\n\n\n    private SitesListVO listAll(int page) {\n        return siteService.findAll(page, maxResults);\n    }\n    private ResponseEntity<SitesListVO> returnListToUser(SitesListVO siteList) {\n        return new ResponseEntity<SitesListVO>(siteList, HttpStatus.OK);\n    }\n    private ResponseEntity<?> createListAllResponse(int page, Locale locale) {\n        SitesListVO siteListVO = listAll(page);\n        return createListAllResponse(page, locale, null);\n    }\n\n    private ResponseEntity<?> createListAllResponse(int page, Locale locale, String messageKey) {\n        SitesListVO siteListVO = listAll(page);\n        addActionMessageToVO(siteListVO, locale, messageKey, null);\n        return returnListToUser(siteListVO);\n    }\n    private SitesListVO addActionMessageToVO(SitesListVO siteListVO, Locale locale, String actionMessageKey, Object[] args) {\n        if (StringUtils.isEmpty(actionMessageKey)) {\n            return siteListVO;\n        }\n        siteListVO.setActionMessage(messageSource.getMessage(actionMessageKey, args, null, locale));\n        return siteListVO;\n    }\n    private SitesListVO addSearchMessageToVO(SitesListVO siteListVO, Locale locale, String actionMessageKey, Object[] args) {\n        if (StringUtils.isEmpty(actionMessageKey)) {\n            return siteListVO;\n        }\n        siteListVO.setSearchMessage(messageSource.getMessage(actionMessageKey, args, null, locale));\n        return siteListVO;\n    }\n    private boolean isSearchActivated(String searchFor) {\n        //return !CollectionUtils.isEmpty(searchFor);\n        return !StringUtils.isEmpty(searchFor);\n    }\n}\n```\n\nAngularJs code :\n\n```\n$scope.getContactList = function () {\n        var url = $scope.url;\n        $scope.lastAction = 'list';\n\n        $scope.startDialogAjaxRequest();\n\n        var config = {params: {page: $scope.pageToGet}};\n\n        $http.get(url, config)\n\n            .success(function (data) {\n//              console.log(data);\n                console.debug(data);\n                $scope.finishAjaxCallOnSuccess(data, null, false);\n            })\n            .error(function () {\n                $scope.state = 'error';\n                $scope.displayCreateContactButton = false;\n            });\n    }\n$scope.populateTable = function (data) {\n            if (data.pagesCount > 0) {\n                $scope.state = 'list';\n\n                $scope.page = {source: data.sites, currentPage: $scope.pageToGet, pagesCount: data.pagesCount, totalContacts : data.totalContacts};\n\n                if($scope.page.pagesCount <= $scope.page.currentPage){\n                    $scope.pageToGet = $scope.page.pagesCount - 1;\n                    $scope.page.currentPage = $scope.page.pagesCount - 1;\n                }\n\n                $scope.displayCreateContactButton = true;\n                $scope.displaySearchButton = true;\n            } else {\n                $scope.state = 'noresult';\n                $scope.displayCreateContactButton = true;\n\n                if(!$scope.searchFor){\n                    $scope.displaySearchButton = false;\n                }\n            }\n            if (data.actionMessage || data.searchMessage) {\n                $scope.displayMessageToUser = $scope.lastAction != 'search';\n\n                $scope.page.actionMessage = data.actionMessage;\n                $scope.page.searchMessage = data.searchMessage;\n            } else {\n                $scope.displayMessageToUser = false;\n            }\n    }\n```\n\npart displaying data  JSP :\n\n```\n<thead>\n            <tr>\n                <th><spring:message code=\"A\"/></th>\n                <th><spring:message code=\"B\"/></th>\n                <th><spring:message code=\"C\"/></th>\n                <th><spring:message code=\"typeSite\"/></th>\n                <th>Action</th>\n            </tr>\n            </thead>\n <tbody>\n        <tr ng-repeat=\"sites in page.source\">\n                <td>{{sites.a}}</td><td>{{sites.b}}</td>\n                <td>{{sites.c}}</td><td>{{sites.(typesite.idTypeSite)}}</td>\n```\n\nIn spring mvc XML i have : \n\n```\n<bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n        <property name=\"messageConverters\">\n            <list>\n                <bean class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"/>\n                <bean class=\"org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter\"/>\n            </list>\n        </property>\n    </bean>\n```\n\nWeb XML  i have this filter :\n\n```\n<filter>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>springSecurityFilterChain</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n\nI'm using spring 3.1 ;Jackson 1.8 ; JPa 2.1 ;\n\nSo to understand better this error let us see how the JPA/Hibernate handles the relationship.\nEvery time we do a query in the database the JPA will bring to all information of that class. The exception to this rule is when we talk about list (collection). Image that we have an announcement object with a list of 70,000 of emails that will receive this announcement. If you want just to display the announcement name to the user in the screen, imagine the work that the JPA would have if the 70,000 emails were loaded with the name.\n\nThe JPA created a technology named Lazy Loading to the classes attributes. We could define Lazy Loading by: \u201cthe desired information will be loaded (from database) only when it is needed\u201d.\n\nNotice in the above code, that the database query will return a Sitesobject. When i access the site collection, the container will notice that the  site collection is a lazy attribute and it will \u201cask\u201d the JPA to load this collection from the database.\n\nIn the moment of the query (that will bring the site collection) execution, an exception will happen. When the JPA/Hibernate tries to access the database to get this lazy information, the JPA will notice that there is no opened collection. That is why the exception happens, the lack of an opened database connection.\n\nHere i try many solution but i can't fix this error.\n0/i'm trying to change my filter by the filter bellow but my app don't run:\n\n```\n<filter>\n        <filter-name>Spring OpenEntityManagerInViewFilter</filter-name>\n        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>Spring OpenEntityManagerInViewFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n\n1/The easier way to bring a lazy list when the object is loaded is by annotation `@OneToMany(fetch = FetchType.EAGER)`. But this will not be the best approach always\n2.i am traying to use this annotation @JsonIgnore :solve the lazy error but like the first solution don't work because in the jsp can't displaying value of this list `<td>{{sites.(typesite.idTypeSite)}}</td>`\n\nis there a way to Load collection by Open Session ?\nthank you in advance for you replay\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3642",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3642/comments",
    "title": "Nested attributes in model.save()",
    "created_at": "2015-05-28T11:07:14Z",
    "updated_at": "2015-05-28T17:55:03Z",
    "body": "I have a model that contains a sub-object. When attempting to save the model, with an explicit indication to re-save the sub-object, I run into issues.\n\n``` json\nvar diff = {\n   \"metadata\": {\n     \"a\": 1,\n     \"b\": 2\n  }\n}\n```\n\n``` javascript\nmodel.save(diff, {wait: true});\n```\n\nThe nested object is being picked up by the eventsApi method as a map, and is being deconstructed into \"change:a\" and \"change:b\" calls that are not correct.\n\nAdding \"silent: true\" solves this, but I do in fact want to be notified of changes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3641",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3641/comments",
    "title": "Collection#invoke not working properly in 1.2.0",
    "created_at": "2015-05-28T01:32:12Z",
    "updated_at": "2015-05-28T01:41:10Z",
    "body": "Calling `invoke` on a collection in previous versions would properly call all models in the collection as specified. This no longer seems to work in 1.2.0. This caused an issue when upgrading one of my applications.\n\nI have reduced this to a sample case on JSFiddle. Switching between Backbone 1.1.2 and 1.2.0 produces different results.\n\nBackbone 1.1.2: https://jsfiddle.net/s3fx4ebL/\nBackbone 1.2.0: https://jsfiddle.net/vup2fp4s/\n\nFull Test Code:\n\n``` javascript\nvar Model = Backbone.Model.extend({\n    defaults: {\n        'a': 1,\n        'b': 2\n    }\n});\nvar Collection = Backbone.Collection.extend({\n    model: Model,\n    updateAll: function(data) {\n        return this.invoke('set', data);\n    }\n});\n\nvar mylist = new Collection();\n\nvar model1 = new Model();\nvar model2 = new Model();\nmylist.add(model1);\nmylist.add(model2);\n\nmylist.updateAll({ 'b': 4 });\n\n// All models should show b: 4\nconsole.log(mylist.toJSON());\n```\n\nIt's possible this issue also affects other Underscore methods within Collections, but I was not able to reproduce that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3638",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3638/comments",
    "title": "Collection#fetch wrongly populates the _byId property in subsequent fetches",
    "created_at": "2015-05-27T09:55:05Z",
    "updated_at": "2015-05-28T09:11:44Z",
    "body": "I found this issue while investigating why my Collection#get didn't work half of the time.\nI'm fetching the collection from iTunes and I need to use parse both the collection and each model. First fetch (empty collection) works fine, those are keys of the Collection._byId object:\n\n```\n[\"392612116\", \"395544690\", \"429223235\", \"434215319\", \"493267725\", \"704239726\", \"763690325\", \"887944575\", \"982732058\", \"994873600\", \"c1\", \"c2\", \"c3\", \"c4\", \"c5\", \"c6\", \"c7\", \"c8\", \"c9\", \"c10\"]\n```\n\nAs you can see the models are referenced by both the `id` and the `cid` property. It also indicates that  Model#parse was called before the Collection#_addReference, which is the expected behaviour.\n\nAfter fetching the collection second time (no options passed) the Collection._byId is:\n\n```\n[\"c1\", \"c2\", \"c3\", \"c4\", \"c5\", \"c6\", \"c7\", \"c8\", \"c9\", \"c10\"]\n```\n\nSo basically just `cid`s and no `id`.\n\nAfter some investigation I'm assuming that the problem is in the Collection#set method that marks models as duplicate/nonexistent based on the presence of `id` attribute in `attrs` variable:\n\n```\nif (attrs instanceof Model) {\n          id = model = attrs;\n        } else {\n          id = attrs[targetModel.prototype.idAttribute || 'id'];\n        }\n```\n\nThe thing is that attrs have not been parsed by the Model#parse method so the `id` might not exist yet (in my case it doesn't).\n\nThe models are later considered nonexistent because of that and removed:\n\n```\n// Remove nonexistent models if appropriate.\n      if (remove) {\n        for (i = 0, l = this.length; i < l; ++i) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this.remove(toRemove, options);\n      }\n```\n\nPossible fixes might include instantinating the `targetModel` class (or calling it's parse) with `attrs` (for which I'll include pull request later) or mentioning in documentation that the Model#parse method should not touch the `id`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3634",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3634/comments",
    "title": "`router.navigate` doesn't update history after an async request (Opera 12)",
    "created_at": "2015-05-26T16:46:29Z",
    "updated_at": "2015-05-27T21:24:55Z",
    "body": "This is a singular question, but please bear with me. I faced a strange issue when executing a Backbone app on a rather ancient browser (Opera 9.8) some of the routes were not being registered in the browser history. With a little research saw that this would only happen in the following scenario:\n- user interaction\n- ajax request\n- ajax callback handler that executes a `router.navigate`\n\nIn this cases **the url did change**, the app **could navigate to that route** but it **doesn't update the browser history**, hence the user can't navigate back.\n\nThis had the smell of a browser bug, created an small demo and bingo, this happens with just updating `document.location.hash` on a ajax request handler, here is [the SO question](http://stackoverflow.com/questions/30457126/change-history-after-async-ajax-request-on-opera-9-8) with that situation.\n\nLooking for a fix for this I found that if I use `document.href` instead of `document.location.hash` on the [Backbone.history._updateHash](https://github.com/jashkenas/backbone/blob/61d18408addb54f4af4d3e14b0d47111ef94de99/backbone.js#L1796-L1804) method it works:\n\n``` javascript\nBackbone.history._updateHash = function(location, fragment, replace) {\n  var href = location.href.replace(/(javascript:|#).*$/, '');\n  var url = href + \"#\" + fragment;\n  if (replace) {\n    location.replace(url); \n  } else {\n    location.href = url;\n  }\n};\n```\n\nApp testing are green and looks like my problem it's solved, but I've some question:\n1. Is this a new issue? Although I couldn't find anything regarding this it's strange that no one experience this before\n2. Is it safe to override a Backbone method the way I did? I see that preceding `_` on the method name so I assume that this wasn't designed to override.\n3. Should this be fixed in Backbone instead? If that is the case I could do a PR.\n4. Is there any alternative workaround that you can think of?\n\nThank you\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3624",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3624/comments",
    "title": "Prevent a new prototyped method to appear in for loop for keys in object",
    "created_at": "2015-05-22T11:22:07Z",
    "updated_at": "2015-05-22T14:53:19Z",
    "body": "I have a function which I want to make it available to all objects. Its the mergeObject(object) function as defined below :\n\nObject.prototype.mergeObjects = function(object){\n    if (typeof object != \"object\") return;\n    for(var key in object){\n        if (object.hasOwnProperty(key))\n            this[key] = object[key];\n    }\n    return this;\n}\n\nThis is my events json:\n\nevents : {\n    \"click #retryBtn\":\"onRetryBtnClick\",\n    \"click #cancelBtn\":\"onCancelBtnClick\",\n    \"click .dialogButton\":\"onDialogBtnClick\"\n}\n\nIn Backbone View's  DelegateEvents() \n\ndelegateEvents: function(events) {\n      if (!(events || (events = _.result(this, 'events')))) return this;\n      this.undelegateEvents();\n      for (var key in events) {                          <---------------------loops through the inherited properties\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[events[key]];\n        if (!method) continue;\n\n```\n    var match = key.match(delegateEventSplitter);\n    var eventName = match[1], selector = match[2];\n    method = _.bind(method, this);\n    eventName += '.delegateEvents' + this.cid;\n    if (selector === '') {\n      this.$el.on(eventName, method);\n    } else {\n      this.$el.on(eventName, selector, method);\n    }\n  }\n  return this;\n},\n```\n\nHere the for loop for events iterates through the inherited properties and gives error when \"mergeObjects\" function is encountered. \nShouldnt the for loop check for  hasOwnProperty for its own events and then iterate through its parent View but stop before iterating through the base Object's prototype ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3623",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3623/comments",
    "title": "Why remove the root's trailing slash when wantPustState on IE8?",
    "created_at": "2015-05-22T11:07:26Z",
    "updated_at": "2017-03-18T17:25:28Z",
    "body": "Example:\n\n``` javascript\nBackbone.history.start({ pushState: true, root: '/root/' })\n```\n1. The browser is IE8 (no pushState)\n2. Our server will force a trailing slash, a request of `/root` will receive a redirection to `/root/`\n3. Visit `/root/aa/bb`\n\nDue to this commit d550b8b , an replaced url will be `/root#aa/bb`, then the server returns a redirection to `/root/`, which lead to an additional request, and at the same time the hash will be lost. The `/root/aa/bb` can't be reached.\n\nI've read the #2656 and #3443. I'm thinking that should the tailing slash here also be optional ? Which means:\n\n``` javascript\nBackbone.history.start({ pushState: true, root: '/root/' }) // /root/#aa/bb\nBackbone.history.start({ pushState: true, root: '/root' }) // /root#aa/bb\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3622",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3622/comments",
    "title": "Documentation: #delegate and #undelegate",
    "created_at": "2015-05-21T15:04:47Z",
    "updated_at": "2015-08-24T04:07:15Z",
    "body": "Can't get to it right now, just needed something so we remember to document them later.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3621",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3621/comments",
    "title": "API of 'on' function does have not backward compatible changes",
    "created_at": "2015-05-21T13:04:47Z",
    "updated_at": "2015-05-21T14:17:46Z",
    "body": "Previously this way of defining events as map and passing context worked fine:\n\n``` javascript\nsomeview.on({\n  one: one,\n  two: two\n}, this);\n```\n\nAfter upgrading to 1.2.0 we need to set second argument to undefined and define context as third:\n\n``` javascript\nsomeview.on({\n  one: one,\n  two: two\n}, void 0, this);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3620",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3620/comments",
    "title": "View Events Property Problem",
    "created_at": "2015-05-21T07:42:00Z",
    "updated_at": "2015-05-29T15:30:37Z",
    "body": "I've updated our project and noticed a different behaviour. With the update from 1.1.2 to 1.2.0 I can't set the events property of a view in the \"initialize\" function anymore - or at least the callbacks don't get triggered. Do I set the events directly as the view property in the extend context it still works. But I need to create the selectors for the events dynamically, therefore I build the events property in \"initialize\".\n\nAny ideas?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3619",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3619/comments",
    "title": "Default (complex) attributes are by reference for multiple instances of a model.",
    "created_at": "2015-05-20T19:09:15Z",
    "updated_at": "2015-05-21T15:20:07Z",
    "body": "If you have an object specified as a 'default' attribute in your model, all instances of this model will share a reference to that object. Is there a reason we don't do a deep clone on the defaults object when creating a new Model instance?\n\nAs it is currently, if you make changes to a deep attribute of that object, you will be updating all model instances. Is this by design?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3618",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3618/comments",
    "title": "Documentation for underscore",
    "created_at": "2015-05-20T17:35:11Z",
    "updated_at": "2015-05-20T17:52:14Z",
    "body": "_.matches is now _.matcher\n\nBB documentation & link to underscore's site needs to be updated.\n\n_.matches is now deprecated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3617",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3617/comments",
    "title": "'add' events raised in unexpected order for Collection.set",
    "created_at": "2015-05-19T15:28:36Z",
    "updated_at": "2015-06-01T12:05:13Z",
    "body": "I stumbled upon a feature of `Collection.set` which surprised me slightly. On reflection I don't think it's a bug but I wanted to let you know about it so you can decide if you want to do anything about it.\n1. I have a Collection that defines a comparator.\n2. I add an 'add' event handler to the collection that will create a new view for the new model, render it and add it to the DOM.\n3. I populate the collection with multiple models either by calling `Collection.set([model1, model2], {sort: true})` or by calling `Collection.fetch({sort: true})`.\n4. The collection is populated and sorted correctly BUT\n5. The 'add' events are raised in the original order that the models are passed to the collection, not the sorted order.\n\nIn my own code I have worked around this by calling `Collection.reset` instead of `Collection.set` (or when fetching, doing `Collection.fetch({reset: true, sort: true})` instead).\n\nI have created a JS Bin that demonstrates this: http://jsbin.com/voquvicoli/1/edit?html,js,output \n\nHope you don't mind but I also created a blog post describing the behaviour so that if anyone else encountered it they would know to use 'reset' instead of 'set': http://can-we-code-it.blogspot.co.uk/2015/06/add-and-reset-events-from-backbone.html\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3611",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3611/comments",
    "title": "listenTo change in behavior, 1.2.0?",
    "created_at": "2015-05-15T23:39:04Z",
    "updated_at": "2015-10-27T19:59:39Z",
    "body": "Using the 1.1.2 release, listenTo() was able to listen for events from objects that provide the typical on() interface; in our case, an Ace editor session, which emits 'change' events, e.g., EditSession.on('change', function (e)).  Under 1.1.2, we've used listenTo() to listen for these events from the editor session.\n\nUsing the 1.2.0 release, listenTo() does not appear to be able to listen for these events; they're emitted, and the editor session is present in the View's _listeningTo, but the callback is no longer fired.\n\nWe were using listenTo() for automatic cleanup of the listener function.  Curious if this was never supposed to work in this manner, or if it's a bug.  The changes to listening in 1.2.0 are quite extensive, so it's a bit difficult to see what might be the key difference for one unfamiliar with them.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3610",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3610/comments",
    "title": "Regression: collection.invoke not calling expected methods",
    "created_at": "2015-05-15T23:35:30Z",
    "updated_at": "2015-05-18T20:47:13Z",
    "body": "In my app, I noticed collection.invoke stopped forwarding arguments to individual method calls when I upgraded from Backbone 1.1.2 to 1.2.0.\n\nI created a reduced example, and I'm not seeing `sampleMethod` log anything at all using 1.2.0. This example works properly with 1.1.2:\n\n(Save as HTML to run)\n\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore.js\"></script>\n\n<!-- This test fails with 1.2.0: -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.2.0/backbone.js\"/>\n\n<!-- This test passes with 1.1.2: -->\n<!-- <script src=\"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone.js\"></script> -->\n\n<script>\n    var SampleModel = Backbone.Model.extend({\n        sampleMethod: function (arg) {\n            console.log(arg);\n        }\n    });\n\n    var SampleCollection = Backbone.Collection.extend({\n        model: SampleModel\n    });\n\n    var sampleCollection = new SampleCollection();\n    sampleCollection.add(new SampleModel());\n    sampleCollection.invoke(\"sampleMethod\", \"sampleArg\");\n</script>\n<p>If the test succeeds, you should see \"sampleArg\" printed in the console.</p>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3608",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3608/comments",
    "title": "modelId getter doesn't work with polymorphic Model getter",
    "created_at": "2015-05-15T14:38:03Z",
    "updated_at": "2015-05-15T15:31:45Z",
    "body": "I think i found a bug inside the 1.2.0 version. My Collection contains different Models, so i've used a getter to solve this.\n\n```\nnew Collection(\n   model: function(attrs){\n      if (attrs.foo) {\n          return new FooModel(attrs);\n      }\n      else {\n         return new BarModel(attrs);\n      }\n   }\n)\n```\n\nafter upgrading i had some trobles with my app because the collection couldnt find already exsiting models inside of it `collection.get(1) # => undefined`. So I've digged into the source and found this \"bug\".\n`this.model` isn't always a Model it can be function sometimes. \n\n```\n    modelId: function (attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n```\n\nSo I think everybody who is using a function in `this.model` and has a custom idAttribute defined, backbone won't find already existing models.\n\n```\n  modelId: function (attrs, options) {\n    return this.model(attrs, options).id;\n  },\n```\n\nThis is the overridden function i'm using inside my collection now, and it works for me.\nSo maybe the `modelId` function needs something like this:\n\n```\n  if (_.isFunction(this.model)) { \n    return this.model(attrs, options).id;\n  } \n  else {\n    return attrs[this.model.prototype.idAttribute || 'id'];\n  }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3607",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3607/comments",
    "title": "Missing package.json",
    "created_at": "2015-05-15T14:09:05Z",
    "updated_at": "2015-05-15T15:11:48Z",
    "body": "Dropping the `package.json` https://github.com/jashkenas/backbone/commit/c42b38dc3083c514a94229f8e903222c7aec7cf9  stops backbone working with webpack out of the box.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3601",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3601/comments",
    "title": "Advice: add a function in Router to give users a chance to populate callbacks for routes",
    "created_at": "2015-05-13T01:30:09Z",
    "updated_at": "2015-05-13T23:20:46Z",
    "body": "## Suggested change in Router\n\nAdd a new function 'callback' or whatever name you like in Router that users can override to populate callbacks according to the name that users specified in \"routes\". This change won't affect any existing projects that are using Backbone.\n\n```\n route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this.callback(name);   /* changed from \"this[name]\" */\n     ...\n      return this;\n    },\n\n/* \nUsers can override this function to populate callback functions according to the name. \n*/\ncallback: function(name) {\n    return this[name];\n}\n```\n## A simple example\n### Modules\n\n```\nvar modules = {\n    Index : {\n        home: function() {\n        }\n    },\n    Account: {\n        login: function() {\n        }\n    }\n};\n```\n### Router module\n\n```\nvar Router = Backbone.Router.extend({\n    routes: {\n        '': 'Index.home',\n        'login': 'Account.login',\n    },\n    callback: function(name) {\n        return function(args) {\n            var names = name.split('.');      \n            modules[names[0]][names[1]](args);\n        };\n    }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3599",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3599/comments",
    "title": "Event handlers executed after stopListening is called",
    "created_at": "2015-05-05T21:46:56Z",
    "updated_at": "2015-05-05T22:57:30Z",
    "body": "The issue i ran into might be more of an _unhandled case_ than an actual bug. Consider the following setup:\n- There are 3 views, A, B & C\n- Both B & C listen to the same event triggered by A\n- In _some_ cases B destroys (remove / stop listening) C when the event is triggered\n- The event handler in C is still executed even if C was already destroyed by B\n\n[Here is a jsfiddle](https://jsfiddle.net/jtk19x4n/2/)\n\nI'm aware that it might not be ideal architecturally to have B destroy C, and rather have C destroy itself, but in my use case that is unavoidable.\nAlso, I can not guarantee in which order B and C are bound to A in my use case.\n\nThe point is that the expected behaviour of `stopListening` is that after calling it, event handlers will not be executed anymore.\n\nI am assuming backbone does some internal caching of the callback functions, and once the event fires, does not check anymore if the callbacks have been unbound in the interim...\n\nIs this a bug, intended behavior or how am I supposed to handle this case?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3597",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3597/comments",
    "title": "Annotated source version number is misleading",
    "created_at": "2015-05-05T15:31:54Z",
    "updated_at": "2015-05-05T23:13:16Z",
    "body": "The published annotated source gives the impression that it is the annotated source of version 1.1.2\n\n![screenshot 2015-05-05 16 12 27](https://cloud.githubusercontent.com/assets/58871/7475778/9150c5a6-f341-11e4-8eaa-af94fedb28ce.png)\nhttp://backbonejs.org/docs/backbone.html\n\nwhich is misleading, as it's really whatever the state of master was at last `redoc`. I lost a bunch of time thinking I'd gone mad as a consequence. That hasn't been ruled out.\n\nWould you consider:\n1. bumping the version number to `1.1.3-rc` in `backbone.js` on master, so that the generated docs are less surprising.\n2. ...or generating the docs from the `1.1.2` tag, so the contents match the the release.\n3. ...or publishing both stable & master docs, labelled as such.\n\nI'm happy to make a PR, but wanted to see which route is preferred.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3596",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3596/comments",
    "title": "is it possibble to create tabs with Navigation drawer?",
    "created_at": "2015-05-03T22:27:02Z",
    "updated_at": "2015-05-04T13:05:33Z",
    "body": "Since 4 days I am researching this topic \"is it possible to create tabs with Navigation drawer in android studio ?\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3595",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3595/comments",
    "title": "method get: return value by default",
    "created_at": "2015-05-02T08:57:28Z",
    "updated_at": "2015-05-07T19:48:24Z",
    "body": "if we have a method to get the value of the object can be added to it a couple of useful arguments?\ne.g.\n\n```\nuser.get(\"age\"); // undefined\nuser.get(\"age\", _.isNumber); // undefined\nuser.get(\"age\", _.isNumber, \"N/A\"); // \"N/A\"\n```\n\nif user age is not a Number, then return \"N/A\". Thus, if the age of the user will be overwritten on the null or undefined, the interface will look good.\n\nBesides, you can define your function checks the data type\n\n```\n_.mixin({\n  isMoment: function(source){ return moment.isMoment(source); }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3592",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3592/comments",
    "title": "Catching errors thrown in change event callbacks leaves the `_changing` true and won't trigger any change events after",
    "created_at": "2015-04-30T12:31:11Z",
    "updated_at": "2015-05-04T13:03:24Z",
    "body": "``` javascript\nvar theModel = new Backbone.Model();\n\ntheModel.on('change:name', function(model, val) {\n    if(val === 'Jesus') {\n        throw new Error('The name is taken');\n    }\n});\n\ntheModel.on('change', function(model, val) {\n    console.log('change', arguments);\n});\n\ntheModel.set('name', 'Default Name'); //Triggers a change event\n\ntry {\n    theModel.set( 'name', 'Jesus' );\n} catch (e) {\n    console.error(e);\n    theModel.set( 'name', 'New Name'); // Won't trigger a `change` event. Only a `change:name` event.\n}\n```\n\nThe problem I'm experiencing requires me to manually set `theModel._changing = false;` `theModel._pending = false;`. Otherwise no `change` event will be triggered after.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3591",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3591/comments",
    "title": "Add support for silent model destroy",
    "created_at": "2015-04-30T09:17:03Z",
    "updated_at": "2015-04-30T20:22:07Z",
    "body": "Sometimes it is necessary to model the ability to recover, while if it is in the collection, then when you call destroy it should stay in it. Now when deleting the model is always called:\n\nvar destroy = function() {\n    model.trigger('destroy', model, model.collection, options);\n};\n\nbecause of what the model will always be removed from the collection. My suggestion is that, when transmitted to the options parameter silent:true don't made event call.\n\nWhat you say?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3587",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3587/comments",
    "title": "Could backbone provide `Backbone.Class` ?",
    "created_at": "2015-04-29T03:48:47Z",
    "updated_at": "2015-04-29T12:40:24Z",
    "body": "Sometimes, the `Model`  can not satisfy the case.  Could backbone provide `Backbone.Class`, like the following ?\n\n``` javascript\n    function Class(options) {\n        var that = this;\n        that.options = _.extend({}, options);\n        that.initialize.apply(that, arguments);\n    }\n\n    Class.prototype.initialize = function () {};\n\n    Class.extend = Backbone.extend;\n```\n\nSo, the subclass will be \n\n``` javascript\nvar Sub = Class.extend({\n// instance methods or properties\n}, {\n// class methods or properties\n});\n```\n\nI think sometimes the `Backbone.Class` will be helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3581",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3581/comments",
    "title": "Why removed require('jquery');?",
    "created_at": "2015-04-28T13:48:08Z",
    "updated_at": "2015-04-28T16:43:21Z",
    "body": "**It is required!**\n\n``` javascript\n// Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n    var $ = require('jquery');\n    factory(root, exports, _, $);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3578",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3578/comments",
    "title": "\u9519\u522b\u5b57",
    "created_at": "2015-04-27T05:30:04Z",
    "updated_at": "2015-04-28T01:21:57Z",
    "body": "onobject.on(event, callback, [context])\u522b\u540d: bind \n\u5728 object \u4e0a\u7ed1\u5b9a\u4e00\u4e2acallback\u56de\u8c03\u51fd\u6570\u3002 \u53ea\u8981event\u89e6\u53d1\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u5c31\u4f1a\u8c03\u7528\u3002\u5982\u679c\u4f60\u7684\u4e00\u4e2a\u9875\u9762\u542b\u6709\u5927\u91cf\u7684\u4e0d\u540c**\u65f6\u95f4**\uff0c\u6211\u4eec\u7ea6\u5b9a\u4f7f\u7528\u5192\u53f7\u6765\u4e3a\u4e8b\u4ef6\u6dfb\u52a0 \u547d\u540d\u7a7a\u95f4 \u4fd7\u6210\u5730\u4f7f\u7528\u5192\u53f7\u6765\u547d\u540d\n\n\u65f6\u95f4\u5e94\u8be5\u662f\u4e8b\u4ef6\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3575",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3575/comments",
    "title": "Backbone View copies references of objects",
    "created_at": "2015-04-22T02:00:22Z",
    "updated_at": "2015-04-22T02:57:20Z",
    "body": "```\nvar car_view = Backbone.View.extend({\n    data: {\n       rego: {}\n    },\n\n    initialize: function(options) {\n        this.data.rego = options.rego;\n    }\n});\n\nvar car_a = new car_view({rego: {year: 2014}});\nvar car_b = new car_view({rego: {year: 2015}});\n\nconsole.log(car_a.data.rego.year); => 2015\nconsole.log(car_b.data.rego.year); => 2015\n```\n\nShouldn't `car_a.data.rego.year` be 2014?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3574",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3574/comments",
    "title": "difficulties calling a header file",
    "created_at": "2015-04-20T04:19:44Z",
    "updated_at": "2015-04-20T13:30:06Z",
    "body": "i am calling back a header file that was created. I am sure their is nothing wrong with the program or the header file but my compiler (cygwin) keeps giving me this error message\n/usr/lib/gcc/x86_64-pc-cygwin/4.9.2/../../../../lib/libcygwin.a(libcmain.o): In function `main':\n/usr/src/debug/cygwin-1.7.35-1/winsup/cygwin/lib/libcmain.c:39: undefined reference to`WinMain'\n/usr/src/debug/cygwin-1.7.35-1/winsup/cygwin/lib/libcmain.c:39:(.text.startup+0x7e): relocation truncated to fit: R_X86_64_PC32 against undefined symbol `WinMain'\ncollect2: error: ld returned 1 exit status\n\nPlease someone help me, i have no idea what i am doing \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3573",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3573/comments",
    "title": "Site: typo in Backbone.$ section",
    "created_at": "2015-04-18T13:41:38Z",
    "updated_at": "2015-04-18T15:43:50Z",
    "body": "![](http://i.imgur.com/rIwmVf1.png)\nSurely the `var` here is a mistake?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3572",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3572/comments",
    "title": "backbonejs.org sidebar scrolling issues",
    "created_at": "2015-04-16T19:16:19Z",
    "updated_at": "2015-04-16T19:21:48Z",
    "body": "I have issues with Safari 8 regarding finger-scrolling left sidebar on the backbonejs.org website. It just won't work most of the times. It makes it really kinda hard to read docs. I haven't found a solution right now. All i can say is that http://api.rubyonrails.org works fine on safari, but it uses frameset with two iframes. Anybody else having that?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3569",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3569/comments",
    "title": "Uncaught Router crashes at decodeURIComponent",
    "created_at": "2015-04-16T15:16:10Z",
    "updated_at": "2015-12-01T20:57:53Z",
    "body": "Router crashes with URIError: URI malformed on users copy-pasted input like this \n\n```\n\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u0440\u0438\u0432\u0435\u0434\u0450\u043d\u043d\u044b\u0439 \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 2, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043c\u0430\u043c\u0430 \u043f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u043a\u043e\u0433\u0434\u0430: \u0430) \u0432 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a%D0%\n```\n\nOften found at the search routes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3567",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3567/comments",
    "title": "Swift create a view with shape cropped in it",
    "created_at": "2015-04-15T10:10:37Z",
    "updated_at": "2015-04-15T10:23:34Z",
    "body": "![screen shot 2015-04-15 at 11 55 37](https://cloud.githubusercontent.com/assets/11959276/7156379/748fb7d2-e366-11e4-9bac-53b3ce017fed.png)\n\nHello! I'm trying to achieve the result shown in the image using swift 1.2 and xcode 6. Basically I want to create a view with a shape cut in it to be able to see the the view below to make a tutorial for my app. I know how to create a circular shape but i don't know how to cut it out in a view.\nThanks in advance\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3566",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3566/comments",
    "title": "Use Function(\"return this\") to get global?",
    "created_at": "2015-04-14T10:34:51Z",
    "updated_at": "2015-05-13T20:25:51Z",
    "body": "Backbone currently breaks in `'strict'` mode while trying to access properties on the global object. The global object is being set using the `(function(root) { ... })(this)` pattern. However, in this case, `root` remains `undefined` and hence the issue.\n\nUsing the `Function(\"return this\")()` pattern instead alleviates the issue, though arguably ugly. Thoughts?\n\n**Steps to reproduce**: Import backbone in a `babel-jest` test harness. (uses strict mode)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3565",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3565/comments",
    "title": "CORS issue (Yet again)",
    "created_at": "2015-04-12T09:06:58Z",
    "updated_at": "2015-04-14T18:06:35Z",
    "body": "My apologies if this is a newbie question: Inside my Backbone View I'm able to Make regular Ajax HTTP calls just fine, I'm calling a CORS enabled server. However, when I use any of Backbone's .save or .create methods I can't access my API.\n\nHow can one enable CORS support in backbone once and for all?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3564",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3564/comments",
    "title": "Routing case sensitivity",
    "created_at": "2015-04-12T08:00:29Z",
    "updated_at": "2015-12-07T16:36:10Z",
    "body": "There should be an option to set the routs to be case sensitive or not\n\nSomthing like this\n\n```\nvar Router = Backbone.Router.extend({\n    routes: {\n        \"/\": \"home\"\n    },\n    ignoreCase:true\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3561",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3561/comments",
    "title": "route parameter passing order problem",
    "created_at": "2015-04-08T11:44:54Z",
    "updated_at": "2015-04-08T12:17:28Z",
    "body": "###### HTML Links\n\nI dont know if this a issue or not ! As you can see i have a optional paramter `:endCity`. Search1 passed the arguments correct, also second parameter is null. That is what expect but the Search2 is not what i expect. See below my code example and logs.\n\n``` html\n<a href=\"search/sfo/18.05.2015/06.06.2015/2\">Search 1</a>\n<a href=\"search/sfo/18.05.2015/06.06.2015/2/1\">Search 2</a>\n<a href=\"search/sfo/mfb/18.05.2015/06.06.2015/2\">Search 3</a>\n<a href=\"search/sfo/mfb/18.05.2015/06.06.2015/2/2\">Search 4</a>\n```\n###### Router-Config\n\n``` json\n{\n    \"search/:startCity(/:endCity)/:startDate/:endDate/:adults(/:children)\": \"search\",\n}\n```\n###### Log\n\n```\nSearch1 = sfo null 18.05.2015 06.06.2015 2 null null // correct\n\nSearch2 = sfo 18.05.2015 06.06.2015 2 1 null null // wrong, second parameter must be null\nSearch2 = sfo null 18.05.2015 06.06.2015 2 1 null // that is what i expect\n\nSearch3 = sfo mfb 18.05.2015 06.06.2015 2 null null // correct\nSearch5 = sfo mfb 18.05.2015 06.06.2015 2 2 null // correct\n```\n\nI hope you can help me\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3560",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3560/comments",
    "title": "Backbone and ES6 Classes",
    "created_at": "2015-04-07T14:59:42Z",
    "updated_at": "2018-09-13T20:16:59Z",
    "body": "With the final changes to the ES6 class spec (details [here](http://www.2ality.com/2015/02/es6-classes-final.html)), it's no longer possible to use ES6 classes with Backbone without making significant compromises in terms of syntax.  I've written a full description of the situation [here](http://benmccormick.org/2015/04/07/es6-classes-and-backbone-js/) (make sure to click through to the comments at the bottom for an additional mitigating option), but essentially there is no way to add properties to an instance of a subclass prior to the subclasses parents constructor being run.\n\nSo this:\n\n``` javascript\nclass DocumentRow extends Backbone.View {\n\n    constructor() {\n        this.tagName =  \"li\";\n        this.className = \"document-row\";\n        this.events = {\n            \"click .icon\":          \"open\",\n            \"click .button.edit\":   \"openEditDialog\",\n            \"click .button.delete\": \"destroy\"\n        };\n        super();\n    }\n\n    initialize() {\n        this.listenTo(this.model, \"change\", this.render);\n    }\n\n    render() {\n        //...\n    }\n}\n```\n\nis no longer valid in the final ES6 spec.  Instead you effectively have 3 (not very appealing) options if you want to try to make this work:\n\n<h2 id=\"methods\">Attach all properties as functions</h2>\n\n\nBackbone allows this, but it feels dumb to write something like this: \n\n``` javascript\nclass DocumentRow extends Backbone.View {\n\n    tagName() { return \"li\"; }\n\n    className() { return \"document-row\";}\n\n    events() {\n        return {\n            \"click .icon\":          \"open\",\n            \"click .button.edit\":   \"openEditDialog\",\n            \"click .button.delete\": \"destroy\"\n        };\n    }\n\n    initialize() {\n        this.listenTo(this.model, \"change\", this.render);\n    }\n\n    render() {\n        //...\n    }\n}\n```\n\ncompared to the current extends syntax\n## Run the constructor twice\n\nI don't view this as a real option due to the issues it would cause running initialize a second time with different cids, etc.\n\n<h2 id=\"default-options\">Pass all properties as default options to the superclass constructor</h2>\n\n\nThis was suggested by a commenter on my blog and is probably the most practical current option.  It looks something like this:\n\n``` javascript\nclass MyView extends Backbone.View {\n  constructor(options) {\n    _.defaults(options, {\n      // These options are assigned to the instance by Backbone\n      tagName: 'li',\n      className: 'document-row',\n      events: {\n        \"click .icon\": \"open\",\n        \"click .button.edit\": \"openEditDialog\",\n        \"click .button.delete\": \"destroy\"\n      },\n      // This option I'll have to assign to the instance myself\n      foo: 'bar'\n    });\n\n\n    super(options);\n\n\n    this.foo = options.foo;\n  }\n}\n```\n\nSince all of these current options involve clear compromises relative to the current Backbone extends syntax, it would be wonderful if a better solution could be developed.  I'm not totally sure what this should look like, but one idea that came to mind while I did the writeup for my blog was the addition of a \"properties\" function that would output a hash of properties. The constructor could then run that function and add them to the instance prior to the other processing done by the constructor.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3559",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3559/comments",
    "title": "Backbone Sync with Safari Fails to send option headers",
    "created_at": "2015-04-06T21:34:58Z",
    "updated_at": "2015-04-07T20:40:01Z",
    "body": "You can see a FULL explanation of my issue in my Stack Overflow question, however I have tracked this down as far as I can.\n\nhttp://stackoverflow.com/questions/29472065/backbone-sync-issue-with-safari\n\nCurrently when I click a tab in my UI in safari it loads the next route but then fails to attach the authorization token to the request made by sync to populate the collection.  Without this authorization header the API will return a 401 which makes the backbone app continue to log the user out of the system.\n\nThe problem starts when i click a tab which triggers a route #guestlist or #ticketlist are the offending routes.  No other routes/actions etc in the system are failing in safari.\n\nIn my sync method I am setting the header if the user is logged into the system and this shows that it is happening.  Here is the output from my logging:\n\n```\nsync :  isAuthenticated = true (backbone.sync.js, line 12)    \nsync: url = http://jcrawford.heytix.com/guestlist/checkin/api/events/13044/guestlist/ (backbone.sync.js, line 13)    \nUser is Authenticated (backbone.sync.js, line 15)    \noptions: {\"parse\":true,\"headers\":{\"Authorization\":\"Token 951ba59c833a80e4ddaf72ee6b3d9143\"}} (backbone.sync.js, line 24)\n```\n\nAny thoughts on why this might be happening solely with Safari?  I have confirmed on the server side (apache log and debugging) that the Authorization header is being sent by Chrome/FireFox but NOT for Safari.  Many more details can be found on the Stack Overflow Question.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3558",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3558/comments",
    "title": "Release new version ",
    "created_at": "2015-04-05T01:24:56Z",
    "updated_at": "2015-04-06T13:06:14Z",
    "body": "Backbone with commonjs-supported jQuery would be great in npm\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3557",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3557/comments",
    "title": "Router.execute doesn't return anything",
    "created_at": "2015-04-04T17:49:38Z",
    "updated_at": "2015-04-05T17:04:04Z",
    "body": "If the route callback returns false, a route event is not supposed to be fired. i.e.\n`if (router.execute(callback, args, name) !== false) {//trigger 'route' event...}`\n\nHowever, execute() doesn't actually return the callback functions return value:\n`if (callback) callback.apply(this, args);`\n\nShouldn't this be:\n`if (callback) return callback.apply(this, args);`\n\nIs this by design, or am I missing something?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3556",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3556/comments",
    "title": "Makefile in Qt",
    "created_at": "2015-04-04T05:08:27Z",
    "updated_at": "2015-04-08T16:53:59Z",
    "body": "How to write a Makefile in Qt without using qmake ?\n\nThanks in advance\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3555",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3555/comments",
    "title": "stopListening should only unbind its own listeners from the other object",
    "created_at": "2015-04-02T18:41:56Z",
    "updated_at": "2015-04-02T18:58:07Z",
    "body": "Currently `listenTo` does not track the event name nor callback in the `_listeningTo` hash.  It only tracks the **other** object.\n\nI would expect the behavior of `stopListening` to only remove the event names + associated callbacks that one object has listened to on another.  But that's not what happens, all callbacks are removed from all objects.\n\nExample:\n\n``` coffeescript\n## Host Model\nhost = new Backbone.Model\n\n## Remote Model 1\n## this object listens to the host model\nremote1 = new Backbone.Model\nremote1.listenTo host, \"setup\", someCallback\n\n## Remove Model 2\n## this object also listens to the host model\nremote2 = new Backbone.Model\nremote2.listenTo host, \"setup\", aDifferentCallback\n```\n\nWhat we've done so far is have 2 remote models listening to the same host model.  They're listening for the same event, but have 2 different callbacks.\n\nNow let's see what happens when `remote1` stops listening to the host model.\n\n``` coffeescript\nremote1.stopListening(host)\n```\n\nOr more specifically, even to the event namespace.\n\n``` coffeescript\nremote1.stopListening(host, \"setup\")\n```\n\nThe same thing happens...\n\n**All listeners** are removed from `host`.  Including the listeners from `remote2` which match the event namespace, or in the case where its omitted, it will remove all listeners.\n\nNow of course you could manually track all of the events and callbacks, and do this\n\n``` coffeescript\nremote1.stopListening(host, \"setup\", someCallback)\n```\n\nBut the defeats the purpose of `listenTo` and `stopListening` to begin with.  These methods automatically track event relationships BETWEEN separate object.  It only makes sense that internally they additionally track the event namespace and the callbacks.  Therefore when `stopListening` occurs, they should only remove **their** associated event listeners from other objects.  \n\nAs it stands, they remove **everything** which matches the host object, and/or the event name.  This obliterates listeners from other objects.\n\nIn my example above, I would expect the listeners for `remote1` to be removed, but the listeners for `remote2` to remain intact.\n\nIf I wanted to remove **all** listeners from the `host` model, I would simply write: \n\n```\nhost.off()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3554",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3554/comments",
    "title": "Empty collection fetch with {add: false} breaks ",
    "created_at": "2015-04-02T18:34:34Z",
    "updated_at": "2015-04-02T22:51:11Z",
    "body": "Attempting to fetch an empty collection with the option {add: false} causes backbone to break on line 728, \"modelMap[model.id] = true;\".\n\nTypeError: Cannot read property 'id' of undefined at _.extend.set \n\nI'm attempting to take a collection with a set array of [{id: \"IDHERE\"}] and sync that list with the server (which returns a longer list with items i don't want). Sometimes the client-side array is empty.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3552",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3552/comments",
    "title": "Unpredictable ordering after a model is added to a collection",
    "created_at": "2015-04-02T08:28:10Z",
    "updated_at": "2015-04-06T03:14:21Z",
    "body": "With a \"sort\" comparator function always returning 0, the order of the models in the collection becomes unpredictable after the 11th model is added. Expected result is that the order of the models should be the same as the order they are added.\n\n_The bug was found with Backbone 1.1.0. The jsfiddle examples are based on Backbone 1.1.2 and Underscore 1.6.0._\n\nBug example jsfiddle\nhttp://jsfiddle.net/ptbmaqv6/4/\n\nIt behaves correctly using a \"sortBy\" comparator function (see the jsfiddle below).\nhttp://jsfiddle.net/8rLak1Lo/2/\n\n**Update**\nAll tests made in Chrome (Version 41.0.2272.104 (64-bit)) and Mac OS 10.9.5.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3550",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3550/comments",
    "title": "Set doesn't recognizing existing models when using polymorphic model",
    "created_at": "2015-03-28T04:34:27Z",
    "updated_at": "2015-03-28T04:38:43Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3547",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3547/comments",
    "title": "Backbone.Model.save not passing url property to Backbone.sync?",
    "created_at": "2015-03-26T08:08:59Z",
    "updated_at": "2015-03-26T08:18:21Z",
    "body": "I have a base model class which all my models extend, like this:\n\n``` coffeescript\nclass BaseModel extends Backbone.Model\n\n    url: () ->\n        url = @urlRoot.replace /\\/+$/, ''\n        if @has 'id' then url += '/' + @get 'id'\n```\n\nMy user model:\n\n``` coffeescript\nUserModel = GentleFox.Model.extend\n    urlRoot: GentleFox.URL + \"/api/users\"\n```\n\nThere is more stuff in the model, but I removed it for this post, shouldn't matter.\n\nBasically, it seems to me that when I do this:\n\n``` coffeescript\nmodel = new UserModel\nmodel.firstname = 'Peter'\nmodel.save(model.attributes, success: (model, response, options) ->)\n```\n\n`Backbone.sync` complains about no \"url\" property or function is defined.\n\nWhat's going on here?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3546",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3546/comments",
    "title": "Array value slice appears to be broken in Chrome",
    "created_at": "2015-03-25T20:23:35Z",
    "updated_at": "2015-03-25T22:46:54Z",
    "body": "Full example that demonstrates the failure in Chrome 41 (not Firefox, not Safari; didn't test IE).  I suspect it's a Chrome bug (and will report it there, as well), but in case anyone else has been tortured by this recently . . .\n\nUsing the slice() method on an array stored as an attribute results in the array values being added to the model, I think as they are being removed:\n\n``` javascript\nvar MyModel = Backbone.Model.extend();\nvar myModel = new MyModel({foo: []});\n\nvar foo1 = myModel.get('foo').slice(0);\nfoo1.push('bar');\nmyModel.set('foo', foo1);\n\nvar foo2 = myModel.get('foo').slice(0);\nfoo2.push('baz');\nmyModel.set('foo', foo2);\n\nvar foo3 = myModel.get('foo').slice(0);\nfoo3.splice(0, 1);\nmyModel.set('foo', foo3);\n\nconsole.log('Fails:', Object.keys(myModel.toJSON()));\n// Prints: Fails: [\"foo\", \"\", \"bar\", \"bar,baz\"]\n```\n\nUsing Array.prototype.slice directly works:\n\n``` javascript\nvar MyModel = Backbone.Model.extend();\nvar myModel = new MyModel({foo: []});\n\nvar foo1 = Array.prototype.slice.call(myModel.get('foo'));\nfoo1.push('bar');\nmyModel.set('foo', foo1);\n\nvar foo2 = Array.prototype.slice.call(myModel.get('foo'));\nfoo2.push('baz');\nmyModel.set('foo', foo2);\n\nvar foo3 = Array.prototype.slice.call(myModel.get('foo'));\nfoo3.splice(0, 1);\nmyModel.set('foo', foo3);\n\nconsole.log('Works:', Object.keys(myModel.toJSON()));\n// Prints: Works: [\"foo\"]\n```\n\nFull example:\n\n``` html\n<html>\n<head>\n  <title>Broken array values</title>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.js\" type=\"application/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.2/underscore.js\"\n          type=\"application/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone.js\"\n          type=\"application/javascript\"></script>\n  <script type=\"application/javascript\">\n    (function() {\n      var MyModel = Backbone.Model.extend();\n      var myModel = new MyModel({foo: []});\n\n      var foo1 = myModel.get('foo').slice(0);\n      foo1.push('bar');\n      myModel.set('foo', foo1);\n\n      var foo2 = myModel.get('foo').slice(0);\n      foo2.push('baz');\n      myModel.set('foo', foo2);\n\n      var foo3 = myModel.get('foo').slice(0);\n      foo3.splice(0, 1);\n      myModel.set('foo', foo3);\n\n      console.log('Fails:', Object.keys(myModel.toJSON()));\n      // Prints: Fails: [\"foo\", \"\", \"bar\", \"bar,baz\"]\n    })();\n  </script>\n  <script type=\"application/javascript\">\n    (function() {\n      var MyModel = Backbone.Model.extend();\n      var myModel = new MyModel({foo: []});\n\n      var foo1 = Array.prototype.slice.call(myModel.get('foo'));\n      foo1.push('bar');\n      myModel.set('foo', foo1);\n\n      var foo2 = Array.prototype.slice.call(myModel.get('foo'));\n      foo2.push('baz');\n      myModel.set('foo', foo2);\n\n      var foo3 = Array.prototype.slice.call(myModel.get('foo'));\n      foo3.splice(0, 1);\n      myModel.set('foo', foo3);\n\n      console.log('Works:', Object.keys(myModel.toJSON()));\n      // Prints: Works: [\"foo\"]\n    })();\n  </script>\n</head>\n<body>\n</body>\n</html>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3545",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3545/comments",
    "title": "Backbone Localstorage link broken in TODO app",
    "created_at": "2015-03-23T09:30:11Z",
    "updated_at": "2015-03-23T14:42:58Z",
    "body": "The link referenced for `BACKBONE.LOCALSTORAGE.JS` in the Backbone TODO app is broken.\n\n![backbone-todo](https://cloud.githubusercontent.com/assets/1220255/6777167/e22200ea-d16c-11e4-9be5-f6d188cd83ea.png)\n\n![backbone-localstorage](https://cloud.githubusercontent.com/assets/1220255/6777200/43ac8466-d16d-11e4-9b0c-b62aa219c02f.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3544",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3544/comments",
    "title": "osTicketv-1.9.6",
    "created_at": "2015-03-23T01:19:27Z",
    "updated_at": "2015-03-23T01:24:43Z",
    "body": "Excuse me... \nI have trouble when i'm using osticketv-1.9.6. When i test it with open a new ticket, admin and departmen do not receive notification of new ticket on their email account. and also the user. the user is not get notification of ticket number. but the problem is show in osticket website.\ncould you help me with this problem, please???\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3541",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3541/comments",
    "title": "When there will be the next release?",
    "created_at": "2015-03-20T07:19:47Z",
    "updated_at": "2015-03-20T15:32:04Z",
    "body": "When there will be the next release?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3540",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3540/comments",
    "title": "Telling whether or not an event has been bound",
    "created_at": "2015-03-17T03:25:01Z",
    "updated_at": "2015-03-20T05:51:37Z",
    "body": "It'd be great if there was an accessor to Backbone.Events such that we could tell if an event was bound. Just publicly expose a bit of functionality so we can rely on an API and not internal `._events`.\n\nInspired by real life, and [this question on StackOverflow](http://stackoverflow.com/a/29090779/124486)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3538",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3538/comments",
    "title": "model.toJSON() null values are formatted into strings ''",
    "created_at": "2015-03-16T19:30:09Z",
    "updated_at": "2015-03-26T14:56:33Z",
    "body": "null is a valid json property but calling model.toJSON() null properties are formatted to an empty string.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3536",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3536/comments",
    "title": "scrolling effect",
    "created_at": "2015-03-13T15:08:15Z",
    "updated_at": "2015-03-13T18:37:00Z",
    "body": "I want to achieve this scrolling effect(found in many single page apps)....http://alvarotrigo.com/fullPage/\nI am just presenting this plugin as an example.\nIs it possible that with backbone alone(without a plugin) I can achieve the above effect?\nMy logic for example is that I am going ti have(for example) \"2 pages\"(I am putting is it quotation marks to indicate that actually  is one HTML page), and each page is associated with a backbone view...the second page/view will be made visible to the user upon clicking a link or scrolling.\n\nI hope you understand what I mean.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3535",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3535/comments",
    "title": "Special characters in routing string, FF",
    "created_at": "2015-03-13T06:24:39Z",
    "updated_at": "2015-05-13T20:28:42Z",
    "body": "I use square brackets in routing string and it does not work in FF (v.35, Ubuntu).\nThis work: router.route(encodeURI('special characters'), ...), but only in FF.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3534",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3534/comments",
    "title": "model.destroy() breaks collection.each",
    "created_at": "2015-03-12T22:42:37Z",
    "updated_at": "2017-02-22T18:43:56Z",
    "body": "``` JS\n\n  test(\"destroy models in each loop\", 4, function() {\n    var collection = new Backbone.Collection([{id: 1}, {id: 2}, {id: 3}, {id: 4}]);\n    collection.each(function(model) {\n      notStrictEqual(model, undefined);\n      if (model !== undefined) {\n        model.destroy({url: function() {}});\n      }\n    });\n  });\n```\n\nThat test breaks because `model.destroy` fires `destroy` which causes the collection to call `this.remove(model)` which then splices out the array and causes the `each` to break. This technically could be considered a bug in lodash/underscore (@jdalton ?) but released versions of those cause this so we might want to fix it in backbone.\n\nDeferring the `coll.remove` seems like a bad idea so maybe we should just slice the models into a new array when calling `_.each` and `_.forEach`. We could also make `model.destroy` just do all the destroying in a defer?\n\nLet me know what you guys think.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3533",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3533/comments",
    "title": "1.0 -> 1.1: Adding a duplicate model with an overridden id is incorrectly added to a Backbone.Collection",
    "created_at": "2015-03-12T21:05:01Z",
    "updated_at": "2015-03-13T18:36:33Z",
    "body": "The core issue is that we no longer call new Model to construct an id or override other attributes before checking if the model is already in the collection. Thus if there is not an explicit id attribute on the model, a duplicate is added and the override in initialize is ignored.\n\nConsider the following test:\n\n``` javascript\n    var MockModel = Backbone.Model.extend({\n        initialize: function(options){\n                        //make a custom id\n            this.id = options.firstName + '_' + options.lastName;\n        }\n    });\n\n    var MockCollection = Backbone.Collection.extend({\n        model: MockModel\n    });\n\n    describe('Backbone 1.1 breaking changes', function() {\n\n        it('no-ops adding a model that already exists', function() {\n            var mockCollection = new MockCollection([\n                {\n                    'firstName': 'test',\n                    'lastName': 'user'\n                }\n            ]);\n\n            expect(mockCollection.size()).toEqual(1);\n\n            mockCollection.add({\n                'firstName': 'test',\n                'lastName': 'user'\n            });\n\n            expect(mockCollection.size()).toEqual(1);\n       });\n});\n```\n\nLooking at the source code from 1.0 for adding a duplicate model we have the following at line ~160:\n\n``` javascript\n if (!(model = this._prepareModel(models[i], options))) continue;\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(model)) {\n```\n\nThe latest 1.1.2 release has the following:\n\n``` javascript\n// Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      for (i = 0, l = models.length; i < l; i++) {\n        attrs = models[i] || {};\n        if (attrs instanceof Model) {\n          id = model = attrs;\n        } else {\n          id = attrs[targetModel.prototype.idAttribute || 'id'];\n        }\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(id)) {\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3532",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3532/comments",
    "title": "Event \"change\" doesn't work when define el:[object jquery]",
    "created_at": "2015-03-12T20:47:16Z",
    "updated_at": "2015-03-12T21:32:52Z",
    "body": "when set \" el \" with selector like el:\"#page\" the \"change\" event of View works , but is set to object jquery does not work, like el:$(\"#page\"), the page html is load. I am creating a View.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3531",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3531/comments",
    "title": "add event triggered prior to response",
    "created_at": "2015-03-11T07:13:35Z",
    "updated_at": "2015-03-13T14:58:08Z",
    "body": "My problem has to with collection.create...I have passed wait:true and a success callback to get the response from the server.\nThe thing that annoys me is the fact that an add event is triggered before the response from the server.\nThere is a case in my code where depending on the server response I do not want an add event to be triggered.\nWhat can I do?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3527",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3527/comments",
    "title": "Url function context undefined",
    "created_at": "2015-03-07T06:00:49Z",
    "updated_at": "2015-03-07T06:07:52Z",
    "body": "I dont know backbone core too depth but i noticed that `url` function call with `_.result`.\nAnd my tests says that _.result dont save context, so we get undefined if we want access to `options`\nSimple demo like :\n\n``` javascript\nvar context, options;\nvar mock_options = {\n    test: true\n}\nvar Model = Backbone.Model.extend({\n    defaults: {\n        book: \"\",\n        year: 0\n    }\n});\nvar Collection = Backbone.Collection.extend({\n    model: Model,\n    url: function(){\n       context = this; \n       options = this.options;\n       return \"http://url-to-books.com/books\";\n    }\n});\nvar Books = new Collection([],mock_options);\n\nBooks.fetch({\n    wait: true,\n    success: function(){\n        alert(_.isEqual(options,mock_options));\n    }\n});\n```\n\n`_.result` code is:\n\n``` javascript\n _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n```\n\nI dont know why its don't save context.\n `_.result` uses `call` and in `Backbone.url` call is someting like `_.result(this,'url')`\n\nWhat i am doing wrong ? Or i missed someting ?.\n\n_PS_: I dont ask/report this on stackoverflow, because it seems like all working normally.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3526",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3526/comments",
    "title": "is a nested self-model possible?",
    "created_at": "2015-03-06T16:12:50Z",
    "updated_at": "2015-03-06T16:22:14Z",
    "body": "Am I able to do the following, without receiving : 'Uncaught RangeError: Maximum call stack size exceeded'\n\ndata.Schema = Backbone.Model.extend({\n\n```\nidAttribute: 'InstanceId',\n\nurlRoot: 'api/',\n\nconstructor: function (attrs, options) {\n    Backbone.Model.call(this, attrs, options);       \n    this.parent = new data.Schema();\n}    \n```\n\n});\n\nI completely understand why I'm receiving the above error. I'm just curious what would be the correct way to accomplish having a nested model (parent) within a model?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3525",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3525/comments",
    "title": "Model.parse context is wrong when called from collection.reset()",
    "created_at": "2015-03-03T23:55:45Z",
    "updated_at": "2015-03-04T00:01:35Z",
    "body": "...or maybe this is expected behavior.\n\n```\nCollection.reset([models], {parse: true});\n```\n\nThe model parse() function is called with `this` pointing to the collection instead of the model.\n\nIs this intended?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3520",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3520/comments",
    "title": "Inelegant fail if empty 200 response from PUT or POST",
    "created_at": "2015-02-27T10:40:09Z",
    "updated_at": "2015-02-27T16:24:44Z",
    "body": "I was returning an empty response from my API to a successful POST or PUT after model.save().  In my console, I was getting \"Uncaught SyntaxError: Unexpected end of input\".  If I change it to return something (anything), the error goes away.\n\nI understand the correct form of an empty response is an empty JSON object (i.e. {}), as opposed to absolutely nothing as I was doing (although I don't think an empty response should be invalid - why must I return something when I mean to return nothing?)\n\nHowever, I suggest Backbone should treat an empty response in the same way as {}, or throw a meaningful error.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3519",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3519/comments",
    "title": "Iterate object's array attributes passed in View template",
    "created_at": "2015-02-25T20:33:58Z",
    "updated_at": "2016-06-25T08:33:36Z",
    "body": "Someone may help my problem . I try to present an object's array attributes (in this example, location_code). I could successfully present the model's parent (like model.record_num & model.title) and child attributes (model.recmetadata.creation_date_gmt). But I could not present the object's array attribute (location_code under biblocation property). \n\nI process the template with underscore, while using jade template to output a html through index.jade (Express).\n\n I have two questions:\n1) Is it possible to display an object's array attributes passed in underscore template in Jade? Please teach me a right syntax. it is confusing in mixing both template systems. If it is not recommended or wrong to mix both templates, please direct me to a right way.\n\n2) I use  {model: this.model.toJSON()} when passing a model in View template. How is it different than using this.model.attributes? I want to confirm if this is an appropriate way to pass all the model's properties, which can be iterated.\n\nAnd I will also appreciate any fresh feedback to accomplish my task. \n\n---\n\nMy View\nvar Bib = Backbone.View.extend({\n    tagName: 'li',\n    className: 'bib',\n    render: function() {\n        var template = $('#bibtemplate').html();\n        var compiled = _.template(template);\n        // var html = compiled(this.model.attributes);\n        var html = compiled({model: this.model.toJSON()});\n        this.$el.html(html);\n        return this;\n    }\n});\n\n---\n\nJSON Object passed  in template\n{\nid: \"7917533\",\nrecord_num: 1122525,\ntitle: \"A historical guide to the U.S. government\",\nbiblocation: [\n{\nbib_record_id: \"7917533\",\nlocation_code: \"cllrf\"\n},\n{\nbib_record_id: \"7917500\",\nlocation_code: \"llrft\"\n}\n],\nrecmetadata: {\nid: \"7917533\",\ncreation_date_gmt: \"1998-09-15T20:16:32.000Z\",\n}\n}\n\n---\n\nIterating the object in Jade file\nscript(id='bibtemplate', type='text/x-underscore')\n    <a href=\"#\" class=\"record_num\"> <%= model.record_num %></a> - <%= model.title %> - <%= model.recmetadata.creation_date_gmt %>\n    each i in <%= model %>\n      each j in i.biblocation\n        j.location_code\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3518",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3518/comments",
    "title": "fat arrow go back to original scope",
    "created_at": "2015-02-25T18:10:08Z",
    "updated_at": "2015-02-25T19:08:47Z",
    "body": "hey,\n\ni would like to know if there is a way to go back to the original scope (single arrow) inside of a function which uses the fat arrow, the @@ i want to be the @ as if i would have chosen a single arrow.\n\n```\n        view.$el.find('[reference-source=\"' + @name + '\"]').select2\n          data: @data\n        .on 'change', =>\n          obj = @temp[$(@@).val()]\n          @vent.trigger('references:change:' + @name, obj)\n```\n\ni need the this of the on change but i also need the this of the parent functions scope\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3517",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3517/comments",
    "title": "collection.create should update the model with it's ID after it's returned from the server",
    "created_at": "2015-02-25T17:40:17Z",
    "updated_at": "2015-03-02T22:19:00Z",
    "body": "I find this to be slightly unexpected behavior. My expectation is that using Collection.create to create a new model would add the model to the collection immediately, persist the model to the server, and then update the model with properties from the server on the \"sync\" event. However, the current behavior does nothing when the model is returned from the server, thus, the collection is left with an incomplete model instance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3514",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3514/comments",
    "title": "Add an extra trigger that would complement the current 'request' event",
    "created_at": "2015-02-23T16:27:11Z",
    "updated_at": "2015-02-23T16:48:04Z",
    "body": "Currently a very generic `request` event is triggered on the model, which doesn't allow for easy binding to specific HTTP request types.\n\nWe could possibly add another trigger here that would work similarly to the current change events.\n\n`model.trigger('request:' + params.type.toLowerCase(), model, xhr, options);`\n\nAdding this change would allow for explicit event binding. The newly available events would be as follows: \n\n```\nrequest:post\nrequest:put\nrequest:patch\nrequest:delete\nrequest:get\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3509",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3509/comments",
    "title": "Collection.set() will fails if model is not present with add:false and remove:false",
    "created_at": "2015-02-20T19:33:39Z",
    "updated_at": "2015-05-11T12:03:01Z",
    "body": "Trying to set a model in a collection IFF it exists already. Current 1.1.2 version fails in set():715 where it expects to have a model in the collection.\n\nCall I'm using:\n\n```\ncollection.set([model], {\n  add: false,\n  remove: false,\n  merge: true\n}\n```\n\nI think it's fair to have this working since the parameters are pretty descriptive. Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3503",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3503/comments",
    "title": "Document `extend()` `properties` args as optional",
    "created_at": "2015-02-18T21:03:03Z",
    "updated_at": "2015-03-04T16:18:13Z",
    "body": "For all of the `extend()` method documentation (e.g. on Model, View, Collection) can the `properties` argument please be documented as optional, since it actually is. If I just want to setup the prototype chain and access the prototype, like:\n\n``` js\nvar Klass = Backbone.Model.extend();\nKlass.prototype.whatever = whatever;\n// ...\n```\n\nThere's no point in having to do `Backbone.Model.extend({})` just because these params aren't documented as optional.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3502",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3502/comments",
    "title": "`collection.reset()` unexpected parameter passed",
    "created_at": "2015-02-18T14:05:39Z",
    "updated_at": "2015-02-18T17:14:55Z",
    "body": "I'm experiencing this very, very strange bug:\n\nI have a object returned from a HTTP request with a structure like this (just an example):\n\n``` json\n{\n  \"a\": [1, 2, 3, 4],\n  \"b\": true\n}\n```\n\nWhen from the collection, I run:\n\n``` js\nthis.reset(results.a)\n```\n\nThe model associated with the collection also gets initialised with the value of `b`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3496",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3496/comments",
    "title": "Document Collection push() / unshift() args / return values / events",
    "created_at": "2015-02-16T20:26:19Z",
    "updated_at": "2015-02-17T19:11:50Z",
    "body": "1. `Backbone.Collection` `push()` and `unshift()` are documented as only accepting a single model, but under the hood they each pass their `model` arg to `add()`, which accepts a model or array as its `models` arg. Are they intended to be restricted to accepting a single model, or can they be documented as accepting an array (that is, accepting the same values that can be passed to `add()` as `models`)?\n2. There's no return value documented for those same methods, but they both return the return value from `add()`.\n3. Edit: it's undocumented that these trigger an `add` event.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3494",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3494/comments",
    "title": "Acceptable values for `models` arg of collection.remove()",
    "created_at": "2015-02-13T22:06:26Z",
    "updated_at": "2015-02-18T15:53:57Z",
    "body": "The current documentation implies that only model objects are acceptable, but under the hood it uses `collection.get()`, which will take a model object, `id`, or `cid`. Is it supposed to be restricted to just model objects or can it be documented as accepting the same values as `get()`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3483",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3483/comments",
    "title": "Add getter/setter support to extend method",
    "created_at": "2015-02-09T20:04:11Z",
    "updated_at": "2016-03-11T08:37:55Z",
    "body": "Since [getters/setters are supported IE9+](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and will be much more prevalent with ES6 it'd be nice if Backbone's extend method supported them.\n\n``` js\nvar Person = Backbone.Model.extend({\n  get fullName() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n  }\n});\n\nvar elonMusk = new Person({\n  firstName: 'Elon', \n  lastName: 'Musk'\n});\n\nconsole.log(person.fullName); // >> Elon Musk\n```\n\nRight now this would result in `undefined is not a function` because using `_.extend` is calling the getter.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3481",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3481/comments",
    "title": "[BUG] Memory leak, unable to remove object",
    "created_at": "2015-02-08T10:35:10Z",
    "updated_at": "2015-02-09T00:04:58Z",
    "body": "window.web.form_view = new FormView({ el: $(\"#form\"), });\nwindow.web.form_view.remove()\n\nwindow.web.form_view = new FormView({ el: $(\"#form\"), });\n\nIt keeps all events of first instance & never remove it from memory.\n\nBig memory leakage issue. Do not advice to move on IRC, instead fix it, let us know what exact todo, I will write code to manage this issue.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3479",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3479/comments",
    "title": "Unable to remove view & related events",
    "created_at": "2015-02-07T14:45:59Z",
    "updated_at": "2015-02-08T10:32:50Z",
    "body": "window.web.form_view = new FormView({ el: $(\"#form\"),  });\nwindow.web.form_view.remove()\n\nor other any of tried code not working to remove.\n\nHow can we do this ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3478",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3478/comments",
    "title": "Collection#create doesn't properly pass final options to success callback",
    "created_at": "2015-02-06T20:51:50Z",
    "updated_at": "2015-02-18T00:55:19Z",
    "body": "In https://github.com/jashkenas/backbone/blob/master/backbone.js#L986 `Collection#create` wraps the `success` callback (in order to handle `wait: true`). But the wrapper does not take the third argument, `options` -- when it calls the wrapped callback it instead just sends it the options `Collection#create` received. This breaks any custom sync code that might be modifying the options further downstream (for instance, it breaks https://github.com/nilbus/Backbone.dualStorage, which adds `dirty: true` to the options if the sync to server failed but succeeded to localStorage instead).\n\nI don't know if this type of signaling via `options` is supported, but I can't see why it would hurt for the wrapper callback here to actually take the options the callback was called with and pass those along, instead of short-circuiting with the original options. Would a PR for this change be acceptable?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3477",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3477/comments",
    "title": "Model.fetch docs",
    "created_at": "2015-02-05T23:23:09Z",
    "updated_at": "2015-02-09T17:00:24Z",
    "body": "The docs for Model.fetch are misleading.  They say that fetch() should reset a model's attributes from the server request, but if attribute X exists on the model, and is not sent by the server, the model retains X.  This is not a reset.  It's a set.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3473",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3473/comments",
    "title": "Undefined id on collection.get(id) function",
    "created_at": "2015-02-04T15:48:05Z",
    "updated_at": "2015-02-04T16:11:53Z",
    "body": "```\nclass Persons.Routers.Specialities extends Backbone.Router\n\ninitialize: ->\n    @collection = new Persons.Collections.Specialities()\n    @collection.fetch({reset: true})\n\nroutes:\n    \"new\"      : \"newSpeciality\"\n    \"index\"    : \"index\"\n    \":id/edit\" : \"edit\"\n    \":id\"      : \"show\"\n    \".*\"       : \"index\"\n\nindex: ->\n    view = new Persons.Views.SpecialitiesIndex(collection: @collection)\n    $('#unseen').html(view.render().el)\n\nshow: (id) ->\n    alert \"Entry #{id}\"\n\nnewSpeciality: ->\n    #alert \"new spec\"\n    view = new Persons.Views.SpecialitiesNew(collection: @collection)\n    $('#unseen').html(view.render().el)\n\nedit: (id) ->\n    speciality = @collection.get(id)\n    alert speciality   //alert with undefined\n    view = new Persons.Views.SpecialitiesEdit(model: speciality)\n    $('#unseen').html(view.render().el)\n```\n\nWhy am I getting undefined speciality?\nIs it a bug in backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3472",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3472/comments",
    "title": "model.parse() called incorrectly in certain cases of collection.set()",
    "created_at": "2015-02-04T03:51:48Z",
    "updated_at": "2015-03-04T16:34:33Z",
    "body": "It seems that if you call collection.set() with an array of mixed models and attributes, and options `{parse: true}`, Backbone will call parse on the model's attributes.  Perhaps that is the desired behavior, but I definitely didn't expect it.  A quick example:\n\n```\nvar TestModel = Backbone.Model.extend({\n    parse: function(r, options) {\n        if (r.other_value != null) {\n            r.translated_value = r.other_value + ' MB';\n            delete r.other_value;\n        } else {\n            r.translated_value = 'Not set';\n        }\n        return r;\n    }\n});\n\nvar m = new TestModel({other_value: 64}, {parse: true});\nvar c = new Backbone.Collection([m]);\nc.set([m, {other_value: 128}], {parse: true});\nif (m.get('translated_value') !== '64 MB') {\n    alert('what!!');\n}\n```\n\nI created a jsfiddle of it as well: http://jsfiddle.net/qL49q5vb/2/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3471",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3471/comments",
    "title": "Inconsistency in the attribute name of model when the response from a server returns some key in object in snake case",
    "created_at": "2015-02-04T03:33:42Z",
    "updated_at": "2015-02-04T16:16:10Z",
    "body": "By using the backbone to get data from several APIs, I noticed on almost every attributes which has compound words comes in the snake_case, being thus the attribute of model is created in snake case as well.\nI think that the ideal it is to have an normalizing for such attributes, can be something optional and which defaults to turned off.\n\nNow we have something similar to this, eg.\n\n``` js\n// bad\n\nthis.model.attributes //=> { foo_bar: 'whatever' }\n```\n\nTo me it would be ideal in camel case, eg.\n\n``` js\n// good\n\nthis.model.attributes //=> { fooBar: 'whatever' }\n```\n\nI wanna know the opnion of you?\nIf everyone agrees and if there is nothing in progress about that, I'm willing to contribute a pull request.\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3470",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3470/comments",
    "title": "Model#save parse option",
    "created_at": "2015-02-02T19:28:27Z",
    "updated_at": "2015-03-04T16:16:40Z",
    "body": "Reading [the src](https://github.com/jashkenas/backbone/blob/master/backbone.js#L565) suggests that passing `parse:false` when saving a model would prevent a parse, but it doesn't seem to matter what you pass for the option \u2013\u00a0[it always gets parsed](https://github.com/jashkenas/backbone/blob/master/backbone.js#L524). Am I missing something obvious here? :open_mouth: \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3466",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3466/comments",
    "title": "During event execution, stopListening call on another object does not prevent handler from executing",
    "created_at": "2015-01-28T16:01:23Z",
    "updated_at": "2015-03-04T16:34:50Z",
    "body": "If there are two related objects listening to the same event, it appears that during event execution one object can not call stopListening on another object and prevent the handler callback during the same execution. Looks like the events get cached somewhere in the trigger and stopListening does not change that.\n\nLet me illustrate with an example:\n\n```\nvar parent = new Backbone.Model();\nvar child = new Backbone.Model();\nvar vent = new Backbone.Model();\n\nparent.listenTo(vent, \"alert\", function(){\n    alert(\"parent\");\n    child.stopListening();\n});\n\nchild.listenTo(vent, \"alert\", function(){\n    alert(\"child\");\n});\n\nvent.trigger(\"alert\");\n```\n\nMy expectation is that if parent handler is called first, the child alert should not come up. However both alerts are issued.\n\nhttp://jsfiddle.net/8y4b1ruv/1/\n\nBackbone.js 1.1.2\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3464",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3464/comments",
    "title": "Router confusion",
    "created_at": "2015-01-25T14:40:15Z",
    "updated_at": "2015-01-25T22:22:02Z",
    "body": "I have just spent hours trying to debug my first Backbone app, as none of the URLs are being handled by the router.\n\nI set up the router like so\n\n``` js\nvar AppRouter = Backbone.Router.extend({\n    routes: {\n        '': 'index',\n        'contact': 'contact',\n        'newsletter': 'newsletter',\n        'jobs': 'jobs'\n    },\n\n    index: function () {\n        console.log('matches index');\n    },\n\n    contact: function () {\n        console.log('matches contact');\n    },\n\n    newsletter: function () {\n        console.log('matches newsletter');\n    },\n\n    jobs: function () {\n        console.log('matches jobs');\n    }\n});\n```\n\nand ran the app like so\n\n``` js\nvar App = {}\n\nApp.Router = new AppRouter();\n\nApp.Router.on('route', function (route, params) {\n    console.log(route, params);\n});\n\n$(function () {\n    'use strict';\n\n    Backbone.history.start({\n        pushState: true,\n        root: '/'\n    });\n});\n```\n\nWhen I click a link in my webpage, the browser refreshes the request. What? But isn't the router and History API supposed to jump in and catch all links and use the App to route them?\n\nNowhere in the documentation does it allude to the fact that I have to manually hijack all links in my page and run them through the router. Nowhere.\n\nFrom the way the docs are worded, I was expecting to not have to, as I've set the `root`, and told it to use `pushState`.\n\nVery confusing. Should this not be explained somewhere?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3462",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3462/comments",
    "title": "Issue when requiring Bower installed Backbone with Browserify ",
    "created_at": "2015-01-24T07:07:53Z",
    "updated_at": "2015-01-30T17:51:44Z",
    "body": "Please see [issue](https://github.com/substack/node-browserify/issues/1089) opened in Browserify's repository for details. Sounds to me like the `package.json` file should be omitted when Backbone is installed with Bower. It's not like Bower will install node dependencies anyways. Let me know what you think.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3460",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3460/comments",
    "title": "Trigger with object",
    "created_at": "2015-01-23T18:10:25Z",
    "updated_at": "2015-02-17T22:18:21Z",
    "body": "Currently, calling `#trigger` with an object will prepend the prop's value to the arguments that get triggered. Is this the desired functionality? I can't find any tests for this behavior.\n\n``` javascript\nobj.on('event', function() { console.log(arguments); });\n\nobj.trigger({ event: 'first arg' }, 1, 2, 3);\n// Logs ['first arg', 1, 2, 3]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3458",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3458/comments",
    "title": "Can anyone please let me know how can we get the text from UI (Similar to gettext() method in selenium)",
    "created_at": "2015-01-23T11:28:26Z",
    "updated_at": "2015-01-23T14:37:52Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3457",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3457/comments",
    "title": "Suggestion for Backbone.Model.clone",
    "created_at": "2015-01-22T23:38:41Z",
    "updated_at": "2015-01-23T18:41:18Z",
    "body": "So currently,\n\n``` JavaScript\nBackbone.Model.clone = function() {\n    return new this.constructor(this.attributes);\n}\n```\n\nBut an issue could arise if any attribute value is of type \"object\" because the newly cloned model's attribute refers to the same object as the original model.  I propose something like:\n\n``` JavaScript\nBackbone.Model.clone = function() {\n    // create new attributes hash with new object references\n    var attrsCopy = {};\n    _.each(this.attributes, function(val, key) {\n        attrsCopy[key] = _.clone(val);\n        return new this.constructor(attrsCopy);\n    });\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3454",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3454/comments",
    "title": "Confusing docs for View.el",
    "created_at": "2015-01-22T20:53:09Z",
    "updated_at": "2015-01-30T17:48:24Z",
    "body": "The docs for View.el say:\n\n> this.el is created from the view's tagName, className, id and attributes properties, if specified. If not, el is an empty div.\n\nWhich is contradicted by the example:\n\n``` javascript\nvar BodyView = Backbone.View.extend({\n  el: 'body'\n});\n```\n\nsince here, `el` is assigned a string, which seems to make it equivalent to `tagName`.  It's unclear why you would use `el` in this case instead of `tagName`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3453",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3453/comments",
    "title": "Memory leak in stopListening?",
    "created_at": "2015-01-22T12:58:11Z",
    "updated_at": "2015-02-03T19:16:16Z",
    "body": "Hi,\n\nthis issue is some what related to ticket #3226 but it's not the same. If you think they are feel free to close and reference that.\n\nAfter the fix of #3226 there's still a leak. But this doesn't just apply to the listenToOnce. Take a look at the following [example](http://requirebin.com/?gist=8a50edb1123e063fe875). (The example runs Backbone v1.1.2 but the master works the same way).\n\nThe problem is that if the `model` I'm listening to has a listener as well. Then the `view.listeningTo` will not be cleaned up correctly. \n\nIt is because of this [line](https://github.com/jashkenas/backbone/blob/master/backbone.js#L213):\n\n``` javascript\n    if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];\n```\n\n`obj._events` isn't empty and therefore the `view` will keep its reference to the `model`. Is this correct? In our project this causes problems since the object that is listened to will always have its own listeners and where using `listenToOnce` so the references to the old objects will be kept \"forever\". But we might have to rethink our solution to workaround this issue?\n\n/Albin\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3451",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3451/comments",
    "title": "Give collection.set a parse option this is an undocumented feature",
    "created_at": "2015-01-21T05:05:13Z",
    "updated_at": "2015-01-24T17:57:45Z",
    "body": "Please, add description in docs. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3450",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3450/comments",
    "title": "how to create modules for Login with Facebook or Google popup for home page in magento 1.8.1?",
    "created_at": "2015-01-20T08:05:08Z",
    "updated_at": "2015-01-20T15:39:45Z",
    "body": "how to create modules for Login with Facebook or Google popup for home page in magento 1.8.1?\ngive me any idea like this type popup\n![popup](https://cloud.githubusercontent.com/assets/10610676/5814572/023bab64-a0b3-11e4-8d47-7000d380858f.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3448",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3448/comments",
    "title": "listenToOnce space-separated events only attaching callback once",
    "created_at": "2015-01-19T04:32:50Z",
    "updated_at": "2015-01-20T06:34:15Z",
    "body": "http://jsbin.com/wuriku/1/edit?js,console\n\n``` js\nevents.once('foo bar', callback);\nevents.trigger('foo');\nevents.trigger('foo');\nevents.trigger('bar');\nevents.trigger('bar');\n\nconsole.log(count === 2); // >> true\n```\n\n``` js\nevents.listenToOnce(target, 'foo bar', callback);\ntarget.trigger('foo');\ntarget.trigger('foo');\ntarget.trigger('bar');\ntarget.trigger('bar');\n\nconsole.log(count === 2); // >> false\n```\n\nRemoving the (seemingly overkill) `_.once` would fix this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3447",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3447/comments",
    "title": "URL inconsistencies",
    "created_at": "2015-01-18T23:26:54Z",
    "updated_at": "2015-01-19T21:03:40Z",
    "body": "Hello.\n\nI've spotted a couple of inconsistencies with URL formats used in Backbone. Just wondering what thoughts are on resolving them.\n\nIn the Router, we are told to use urls with the pattern `url-path`, yet in Models, they have the pattern `/url-path`. Personally, my experience leans towards patterns with a preceding slash.\n\nIs there any way that the differing patterns can be resolved?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3446",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3446/comments",
    "title": "validate on set",
    "created_at": "2015-01-17T21:36:58Z",
    "updated_at": "2015-05-30T06:30:45Z",
    "body": "Reading an old tutorial, I see that a Model used to validate on set as well as save. I can understand why it would have been reduced to just save, but I've definitely found a case where it breaks a Model, not having it on set.\n- I have a model with a defined validate function.\n- I set an invalid value for a field.\n- I set another invalid value for another field.\n- I then validate on save.\n- I now have two invalid values, and no fallback for the first set invalid value.\n\nI like the way that the previous values are saved for fallbacks, and replaced on invalid validation, but as discovered above, it's not quite fool-proof as a system. Having validation on set is definitely fool-proof, as invalid values can't get passed over and inadvertently remain on a model.\n\nWhat are your thoughts on this @jashkenas, I'd love to hear the reasoning why it was reduced to just set. As I'm learning, I've just added the following into my Model.\n\n``` js\n    set: function (key, val, options) {\n        // Handle both `\"key\", value` and `{key: value}` -style arguments.\n        if (typeof key === 'object') {\n            attrs = key;\n            options = val;\n        } else {\n            (attrs = {})[key] = val;\n        }\n\n        options = _.extend({}, options, {\n            validate: true\n        });\n\n        Backbone.Model.prototype.set.call(this, attrs, options);\n    },\n```\n\nThis overrides the behaviour, but to have to do this in every Model will get tiresome.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3445",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3445/comments",
    "title": "Documentation is unclear",
    "created_at": "2015-01-17T17:46:13Z",
    "updated_at": "2015-02-17T22:00:22Z",
    "body": "Hi. Firstly, I love Backbone (I'm very new to it, but enjoying it so far), but I'm finding the documentation very difficult to understand, without having to resort to searching online for tutorials. I know it's quite free as a framework, to not lock people in too much, but figuring the little bits out is hard.\n\nAs an example, Looking at the `Model.validate` explanation:\n\n> By default validate is called before `save`, but can also be called before `set` if `{validate:true}` is passed.\n\nWhere am I supposed to pass the option? My case is that I'm trying to extend `Model`, and want all my attributes to be validated on `set`. I am obviously passing `validate` as a function, so where am I supposed to pass `{validate:true}` if it's being defined as a function?\n\nIn general, even though I love this stuff, I feel that the documentation could really benefit from lists of available options for each function (like `Model`) and method (like `set`), that way, a noob could easily ascertain what they can do by default.\n\nHowever, thanks for a great tool.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3440",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3440/comments",
    "title": "Invalid parameters",
    "created_at": "2015-01-07T17:16:09Z",
    "updated_at": "2015-01-09T19:30:38Z",
    "body": "Backbone route parameters are decoded via `decodeURIComponent`. If the parameter is malformed (e.g. `%foo`) then a `URIError` is thrown. Since the user is in control of the url, this can happen even if all caution is taken to encode parameters. Is this truly an exceptional case in which things are so broken that execution should stop? If not, what should we return as a parameter?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3439",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3439/comments",
    "title": "Change event bound to model.fetch doesn't work.",
    "created_at": "2015-01-07T14:16:46Z",
    "updated_at": "2015-01-07T15:43:24Z",
    "body": "I tried the following binding in a model today: <code>this.on('change:q', this.fetch);</code>\nLong story short, the model is sent to jQuery.ajax as option. jQuery then tries to make sense of the url() method and appends the function-body to the url.\n\nThis seems really counterintuitive to me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3438",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3438/comments",
    "title": "There's any chance to \"unattach\" the view layer of Backbone?",
    "created_at": "2015-01-06T12:28:10Z",
    "updated_at": "2015-01-06T19:24:12Z",
    "body": "Hey guys!\n\nBackbone is a very lightweight library which enables us to have a solid foundation to create our web apps, period. For a long time I'm not using its View layer and although it is lightweight as well, I want to know if there's any chance to remove it from Backbone core.\n### Why?\n\nTwo years ago I started to use Backbone. Since then, the way I think about modularization have changed. This is because it is very decoupled and due to its extension possibilities, facilities to create plug-ins on its top comes out \u2014 it is really easy to get into.\n\nHence, just a few times I used its built-in View layer to design something \u2014 it is barely unnecessary for me and I think it is the weakest point on Backbone. However, it is there: making the library slightly heavier. In other words, in every project I make using Backbone \u2014 almost all \u2014, the Views' layer it's there, dead, waiting an opportunity to be excluded; totally unusable, with dust on its surface.\n\nThen I thought: there is some plan to make it as a \"plug-in\"? I was discussing this with a few guys on React's IRC. But see: something really easy to attach, but independent.\n\n_DISCLAIMER: This is a question followed by an opinion \u2014 it isn't by far the absolute truth. Maybe there's something related that I don't know._\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3433",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3433/comments",
    "title": "Backbone view updated unexpected",
    "created_at": "2015-01-04T08:05:20Z",
    "updated_at": "2015-01-05T00:09:33Z",
    "body": "I am newbi in Backbone, and try to write some simple applications to learn backbone.\n\nThe application contains a list of items, and user can add/delete/ items, when user hover one of the item view, the item should changed its color to red,othewise, its color should be black.\n\nhttp://jsfiddle.net/jzjzy84w/\n\nThis is the full codes of the app. \n\nHowever, it works while I move the mouse over the items one by one slowly, once I move quickly, I found that there may be more than one items are colored with red, which is not expected.\n\n![image](https://cloud.githubusercontent.com/assets/4485890/5605247/6e0aaea6-942b-11e4-98aa-b124a257fb86.png)\n\nWhat's going on?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3429",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3429/comments",
    "title": "Collection Issue",
    "created_at": "2014-12-26T03:25:15Z",
    "updated_at": "2015-01-11T16:14:49Z",
    "body": "I have a Backbone App with 3 model which have nested collections:\n\n**Models Structure:**\n\n``` javascript\nLayout extends Backbone.Model\n-> sections: new Sections extends Backbone.Collection\n\nSection extends Backbone.Model\n-> rows: new Rows extends Backbone.Collection\n```\n\nNow if I have two section model in layout and I go and add row model to one of the Section.rows collection, it is adding it to both sections.\n\nBTW, I am adding it from a view on an event.\n\n**Thanks in Advance.**\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3428",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3428/comments",
    "title": "Backbone route 'permission denied' in IE7",
    "created_at": "2014-12-26T03:22:39Z",
    "updated_at": "2015-05-13T20:52:43Z",
    "body": "my project  was having 'permission denied' exceptions in IE7,\nif i did my code like this,there is no problems,\n\n``` javascript\nvar AppRouter = Backbone.Router.extend({\n         initialize:function (){\n            this.route(/^help(.*)$/,\"help\");\n           },\n         help: function() {\n             alert(\"help\");\n          }\n    });\n```\n\nbut,when i put the function in another router ,the project was having 'permission denied' exceptions in IE7.\neg:\n\n``` javascript\n//index-router.js\ndefine(['_', '$', 'Backbone', 'routers/base-router'],\n    function(_, $, Backbone, BaseRouter) {\n        return BaseRouter.extend({\n            initialize: function(options) {\n                BaseRouter.prototype.initialize.call(this, options);\n               //loadPageView in base-router.js\n                this.route(/^administrator(.*)$/, \"loadPageView\");\n            }\n        });\n});\n//base-router.js\ndefine(['_', '$', 'Backbone'],\n    function(_, $, Backbone) {\n        return Backbone.Router.extend( {\n             loadPageView:function (){\n                   alert('hello');\n             }\n          });\n });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3426",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3426/comments",
    "title": "URIError parsing url Params encoded with encodeURIComponent",
    "created_at": "2014-12-24T21:24:46Z",
    "updated_at": "2015-02-23T16:48:55Z",
    "body": "It appears that decodeURI is called on urls before _extractParameters calls decodeURIComponent on params extracted from the url. This can cause a URIError when the param has already been partially decoded to contain a character that wouldn't be legal in a URI.\n\nExample url: 'http://foo.com/bar/'+encodeURIComponent('foo%/bar')\n\nHere's a fix that works for us, though I'm not confident I've tested with router and backbone history options we're not using:\nhttps://github.com/jashkenas/backbone/pull/3425\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3422",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3422/comments",
    "title": "Address bar shows in mobile Safari when calling router.navigate()",
    "created_at": "2014-12-22T13:05:36Z",
    "updated_at": "2014-12-22T16:59:06Z",
    "body": "Not sure if this is a bug...\n\nIt seems that always when the router updates the URL, Safari shows the address bar. Is it possible to somehow disable it with Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3418",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3418/comments",
    "title": "Having View attributes re-calculate on each render",
    "created_at": "2014-12-18T22:21:20Z",
    "updated_at": "2014-12-22T17:22:54Z",
    "body": "Hi\n\nDon't know if this is a bug or on purpose. But it doesn't seem like attributes are re-calculated when Views are being rendered. \nA simple use case is having a list of views and handling selection base on the model of the childviews. I want to set an aria-selected attribute on the view element based on a model property. But this seems only to be doable in a callback on render.\n\nWould be great if I could just specify attributes as a function (which I can) but have these re-calculated every time a view renders.\n\nMakes sense? =)\n\nIt seems so obvious I wonder what I've overlooked that makes this a stupid thing? =)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3417",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3417/comments",
    "title": "Error in folder creation in cdh3 vm",
    "created_at": "2014-12-17T09:09:38Z",
    "updated_at": "2014-12-17T14:43:28Z",
    "body": "I am getting an error in cloudera cdh3 vm. Error: \n![erro](https://cloud.githubusercontent.com/assets/2566248/5468866/7b6933a4-85fa-11e4-9fa1-a6cc589a7e80.PNG)\nPlease help me. Thanks in advance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3416",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3416/comments",
    "title": "Left scrollbar is not working in Safari 8 on OS X Yosemite",
    "created_at": "2014-12-16T19:37:32Z",
    "updated_at": "2015-02-17T22:14:17Z",
    "body": "When debugging the issue for https://github.com/AmpersandJS/ampersandjs.com/issues/119, I also checked backbonejs.org to see if other sites were having the same issue. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3414",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3414/comments",
    "title": "How to create (register) a new user in ejabberd from any ejabberd client like xmpppy, sleekxmpp using an API call?",
    "created_at": "2014-12-16T06:05:54Z",
    "updated_at": "2014-12-16T16:26:47Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3413",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3413/comments",
    "title": "Collection.set iteration i+1 tests variable 'model' of iteration i",
    "created_at": "2014-12-12T16:18:01Z",
    "updated_at": "2015-02-17T22:01:50Z",
    "body": "Hello and thanks for your work.\n\nsee Version 1.1.2\nsee Collection.set\nsee loop \"for (i = 0, l = models.length; i < l; i++)\"\n- iteration i; \n  line 686: suppose 'attrs' is not an instance of 'Model' => variable 'model' is not set.\n  ...\n  line 706, 713: variable 'model' is set.\n- iteration i+1\n  line 686: suppose 'attrs' is not an instance of 'Model' => variable 'model' is not changed.\n  ...\n  line 697: test \"attrs = attrs === model ? model.attributes : attrs;\"\n  => 'attrs' of iteration i+1 is test against 'model' of iteration i.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3412",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3412/comments",
    "title": "Collections wiped after 304 responses / Models parsed",
    "created_at": "2014-12-12T02:48:03Z",
    "updated_at": "2015-05-13T21:10:01Z",
    "body": "**Type**: Bug\n\n**Description**: Backbone wipes Collections when 304 responses are returned from the server by calling `set` and/or `reset` on the Collection. Models are parsed, which may be harmless in certain situations, but not all.\n\n**Expected behavior**: Backbone does not empty the collection, and Backbone shouldn't call parse on the model, but still triggers the `sync` event in both situations.\n# \n\n**Wat is this 304 response?**\n\nServers can be configured to return a 304, or \"Not modified,\" response. This response means that the version of the resource that the server has is the same one that you have on the client. This behavior is distinct from client-side caching (which typically means not making an AJAX request at all) and server-side caching (which typically means not hitting the database; sometimes even the application interfacing with the database). Rather, it is more like a handshake between the client and server. For the feature to work according to the specification, both the server and client must be configured appropriately.\n\nThe server must store one of two things for each resource: the time that it was last modified, or an ETag. An ETag is a unique identity for a resource at a given URL. Note again that these are completely independent from arbitrary caching times configured on the server. These modified dates and ETags must reference _specific_ versions of resources.\n\nWhen a request is made by a client, the API will always return the full resource unless one of two headers is passed in: the `If-Last-Modified` header or the `If-None-Matched` header. These headers correspond to the computed last modified timestamp and the ETag value on the server, respectively. The server can use these values to determine whether or not the client has an outdated version of the resource or not.\n\nIf the server determines that the resource has not changed, it returns the 304 response.\n\nSo, who cares, right? Well, the final piece of the 304 response is that it contains an empty body, which is where the problems with Backbone stem from. In this situation the client is supposed to keep the current version of the resource that it has. For more on why this whole process is convenient, [this blog post](http://blogs.telerik.com/fiddler/posts/12-11-05/understanding-http-304-responses) may do a better job at explaining the details.\n# \n\n**So where does Backbone go wrong?**\n\nBackbone goes wrong because it **always** sets the data on a successful callback. Even 304 responses, which return no data. Because of this, collections get wiped due to the behavior of `set`, and Models get `parse` called on them, which is not only inefficient but could reasonably throw errors if you aren't checking for empty responses. Within `parse`, there isn't enough information to determine whether it was a 304 or an actually empty response, so that method should never be relied upon to make the distinction.\n# \n\n**Are there any hooks to prevent this?**\n\nNo, but you can make it work. Backbone [wraps the success callback](https://github.com/jashkenas/backbone/blob/master/backbone.js#L459-L464) you pass in with its own success callback, which is what erases your data. The only way to get around this is to wrap _Backbone's_ wrapped method by overriding `Backbone.$.ajax`, as in [this example](https://github.com/jmeas/gistbook/blob/master/client.src/core/services/resource-cache.js#L16-L32).\n\nThe way that it works is that it updates the empty response with the value that you have cached. It then sets that as the response, so that by the time Backbone's code accesses it, it doesn't even realize that the response was actually empty.\n\nThis is fine from the standpoint of functionality, but it still causes unnecessary code to be executed, such as `set` and `parse`. Ideally nothing happens other than Backbone saying 'ok ur good' and firing the success callbacks.\n# \n\n**Can we see an example?**\n\nIn the following example, we use jQuery's `ifModified` option to configure jQuery to automatically manage our caching for us. This means that jQuery will automatically send the appropriate `If-` headers along with every request. In other words, it handles the client's side of things for us.\n\nWe also use Github's API, which [is configured](https://developer.github.com/v3/#conditional-requests) to manage the server's role in this feature.\n\nWe can see that Backbone wipes the collection after the second fetch, wherein the server informs us that our resource is up-to-date.\n\n``` js\n// Configure jQuery\nBackbone.$.ajaxSetup({ ifModified: true });\n\n// Define and instantiate a collection\nvar Gists = Backbone.Collection.extend({ url: 'https://api.github.com/users/jmeas/gists' });\nvar gists = new Gists();\n\n// Fetch it twice and log the length after each fetch\ngists.fetch().then(function() {\n  // This logs 28\n  console.log('First fetch:', gists.length);\n  gists.fetch().then(function() {\n    // This logs 0\n    console.log('Second fetch:', gists.length);\n  });\n});\n```\n\nBy switching things up a bit, we can create a Model that has parse called (unnecessarily). In this situation, there is no problem; the data remains. But if your parse function isn't checking for 304 responses (I don't think that it should), then you might calculate some incorrect data.\n\n``` js\n// Configure jQuery\nBackbone.$.ajaxSetup({ ifModified: true });\n\n// Define and instantiate our model w. parse\nvar Model = Backbone.Model.extend({\n  url: 'https://api.github.com/gists/026b3b6b90b498d8bb09',\n  parse: function(data) {\n    console.log('parse has been called');\n    return data;\n  }\n});\nvar model = new Model();\n\n// Fetch it twice and log the attributes after each fetch\nmodel.fetch().then(function() {\n  console.log('First fetch:', model.attributes);\n  model.fetch().then(function() {\n    console.log('Second fetch:', model.attributes);\n  });\n});\n```\n# \n\n**How can we fix this?**\n\nOne idea is to revert d04b0f793b95ea which reverted ea24e0a2 which was PRed in #3410\n\nIn that PR, @braddunbar gives a counter-example where he shows Backbone appearing to be functioning correctly. The issue with that example is twofold:\n1. The server is not following any specification. It should only return a 304 if the resource hasn't changed based on the `If-X` headers, not arbitrary caching times. The correct response in that situation is a 200 response + the data, as if the caching layer didn't exist.\n2. Even so, had the server returned a correct 304 response, it should have been empty. It's not unreasonable to conceive of situations where this could cause a `parse` method to error out or otherwise calculate an incorrect value.\n\n**Other concerns with that PR**\n\nThat PR requires a specific convention with using models, which is that once a model is created it cannot be destroyed.\n\nThe reason for this is that the PR does not provide any new hooks to fetch data from a cache. Rather, it assumes that the current version of the model still has the data from the last fetch. Because jQuery fetches by URI, if I get rid of my Model instance, or otherwise make a new one, I will be unable to get new data for that model unless I reference the original model (or some external cache).\n\nThis is fine for my apps, as this is how I use Backbone, but maybe there are folks out there who are destroying and instantiating models that all point to the same URI.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3411",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3411/comments",
    "title": "Collection.get when model id is e.g. \"constructor\"",
    "created_at": "2014-12-12T00:15:50Z",
    "updated_at": "2014-12-12T03:08:48Z",
    "body": "I ran into an issue today where I had a collection of terms generated from a body of text that contained the model `{ id: \"constructor\" }`. Because `Collection.get` interfaces with the `_byId` object, when I call `collection.get(\"constructor\")`, I get back the constructor of the `_byId` object!\n\nI could certainly work around this issue by doing something like `{ id: \"___constructor\", term: \"constructor\" }`, but I wanted to ask first to see if this behavior is expected. It might be convenient to add a safeguard.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3409",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3409/comments",
    "title": "Unsaved attributes available from model via overridden methods during save with wait: true.",
    "created_at": "2014-12-09T22:35:20Z",
    "updated_at": "2014-12-11T22:05:06Z",
    "body": "Looking at the changes that occurred to fix saving when wait: true from 0.9.0 to 0.9.1 (https://github.com/jashkenas/backbone/commit/ec61503c874ebbb147595e5ded86601164b54002) I understand that the expected behavior is not working, however I am unsure that the correct fix was implemented.\n\nI would assume the expected behavior is that in saving a model with `wait: true`, the attributes should not be touched in any way until after the backend responds. The current behavior temporarily sets the attributes property of the model with the new attributes, sets up the asynchronous call and then resets the attributes. \n\nThis all looks fine and good, and when looking at the progression of code, the initial fix was solidified and given a home, but I believe some interesting inconsistencies were introduced. Namely, since the `isNew()` and `sync()` methods are available via the model prototype and can be overridden I technically can have access to model attributes that are invalid/not yet saved.\n\nUse Case:\nI use the \"name\" attribute, as well as the ID attribute, to determine if the model `isNew`:\n\n```\nreturn !this.get( 'name' ) && Backbone.Model.prototype.isNew.call( this );\n```\n\nIf I save in this fashion:\n\n```\nthis.save( { name: 'foo' }, { wait: true } );\n```\n\nMy `isNew` method will evaluate to `false` since name will have been temporarily saved to the changing value to synchronize, thus calling an update and not a post to occur. I realize this examples relies on stretching the intent of `isNew()` but I believe it best exemplifies the issue.\n\nI think that if `wait: true` is used cloning, via extend, the model's attributes with the passed in attributes and sending those to the `sync` call via `options` would be preferred:\n\n```\nif ( attrs && options.wait ) {\n   options.attrs = _.extend( {}, this.toJSON( options ), attrs );\n}\n```\n\nI realize that there are probably some theoretical and fundamental reasons (ie: you shouldn't be using save with attributes on new models) why this is not how the implementation was made. I would love to better understand them. However, I do not think it is appropriate that I have prototype methods that can be overridden that can see attributes on the model which I told via `wait: true` to not be set until after I heard back from the backend.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3408",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3408/comments",
    "title": "model method without prototype on Backbone.Collection causes crash",
    "created_at": "2014-12-09T01:30:09Z",
    "updated_at": "2014-12-17T15:37:10Z",
    "body": "This was discussed previously in https://github.com/jashkenas/backbone/issues/2080; however it was discussed in the context of `_.bindAll(this)` and I think that confused the discussion, because the issue is not about `_.bindAll(this)` at all. It actually happens whenever the `model` function lacks a `prototype` property. For example: \n\n```\nvar myCollection = Backbone.Collection.extend({ \n    initialize: function() { \n        this.model.prototype = null;\n    }, \n\n    model: function(attrs, options) { \n        return new Backbone.Model(attrs, options); \n    }\n});\n\nnew myCollection([{ a: 1 }]); \n```\n\nBackbone errors on this line https://github.com/jashkenas/backbone/blob/master/backbone.js#L939 because `prototype` doesn't exist. \n\nObviously, few people would write `this.model.prototype = null`, but a lot of people might write `this.model = _.bind(this.model)`, which also removes the prototype. Backbone should be able to handle this case.\n\nIt seems like it'd be pretty straightforward to have line 939 also check for the existence of `prototype`. What do you think? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3405",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3405/comments",
    "title": "2.0 plans and roadmap",
    "created_at": "2014-12-04T14:07:44Z",
    "updated_at": "2014-12-31T15:51:18Z",
    "body": "Just wondering about plans for v2.0, roadmap, schedule.\nMaybe there some list of future features?\n\nMany thanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3404",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3404/comments",
    "title": "Backbone's support for blob data-type",
    "created_at": "2014-12-03T06:05:46Z",
    "updated_at": "2014-12-03T15:19:22Z",
    "body": "The lack of support for blob data type like images, pdf, etc is a very inconvenient and  unpleasant experience. Support for this would be an awesome thing in the kitty and it is indeed a much need thingy, IMHO.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3403",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3403/comments",
    "title": "Release schedule",
    "created_at": "2014-12-02T19:41:59Z",
    "updated_at": "2015-02-05T21:18:15Z",
    "body": "I was wondering if there is a release schedule or plans for the next release of Backbone. The reason I'm asking is the current release (`1.1.2` as of this writing) has a bug with Models with custom `idAttribute` s. There is a fix for it on master where you can specify `modelId` on a collection but without a new release, dependency tools like Bower won't get it unless you point it to master which isn't what you want to be doing.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3402",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3402/comments",
    "title": "What is the Best Way to Show the  Data from Database to Leaflet POP UP.",
    "created_at": "2014-12-01T03:37:38Z",
    "updated_at": "2014-12-01T16:45:57Z",
    "body": "Good Day too all! I just wanna ask a little question. Ahmm how do you show data from database to leaflet pop up?\n\nHere is my code in php select command\n\n<?php \n$db = new PDO('mysql:host=localhost;dbname=poi', 'root', ''); \n$sql = \"SELECT name,user_date,user_time,address,lat,lng,icon_name FROM tblmarker\"; \n\n$rs = $db->query($sql); \nif (!$rs) { \n    echo \"An SQL error occured.\\n\"; \n    exit; \n} \n\n$rows = array(); \nwhile($r = $rs->fetch(PDO::FETCH_ASSOC)) { \n    $rows[] = $r; \n    $name[] = $r['name'];\n    $user_date[] = $r['user_date'];\n    $user_time[] = $r['user_time'];\n    $address[] = $r['address'];\n    $icon_name[] = $r['icon_name'];\n} \nprint json_encode($rows); \n$db = NULL; \n?> \nand here is my code in showing the marker in the map from database\n\nfunction getInfo() { \n        $.getJSON(\"get_info.php\", function (data) { \n          for (var i = 0; i < data.length; i++) { \n            var location = new L.LatLng(data[i].lat, data[i].lng); \n            var marker = new L.Marker(location,{icon:Icon1}); \n            var ll = marker.getLatLng();\nmarker.bindPopup(\"$name<br>$user_date<br>$user_time<br>$address<br>$icon_name\").addTo(map); \n             } \n        }); \n      } \nI thought it works because when i refresh it the marker from my database shows in the map but when i click the marker for the pop up the pop up shows only is like this.\n\n$name\n$user_date\n...\nWhats wrong with my code? Am I missing something? TYFH and IA\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3400",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3400/comments",
    "title": "multiple calls to Model#set with same key deletes changed entry",
    "created_at": "2014-11-29T02:06:53Z",
    "updated_at": "2014-12-01T06:10:50Z",
    "body": "1. Call `model = new Backbone.Model()`\n2. Call `model.set('a','apple')`\n3. Call `model.set({a: 'apple', b: 'bananna'})`\n\nExpected outcome:\n\n```\nmodel.changed\n-> {a: 'apple', b: 'bananna'})\n```\n\nActual outcome:\n\n```\nmodel.changed\n-> { b: 'bananna' }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3399",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3399/comments",
    "title": "navigate() with a space in the url triggers route even when {trigger:false} in Firefox",
    "created_at": "2014-11-27T19:29:31Z",
    "updated_at": "2018-07-16T07:12:53Z",
    "body": "Consider this example:\n\n``` javascript\n$(function(){\nvar AppRouter = Backbone.Router.extend({\n\n    routes: {\n        '(count/:count)': 'home',\n    },\n\n    home: function(currCount) {\n        var counter = 0;\n        var thisObj = this;\n\n        $(\"body\").html($(\"<p>Click me</p>\").on('click', function() {\n            console.log(\"clicked \"+counter);\n            counter++;\n            thisObj.navigate('count/'+counter, {trigger:false, replace: true});\n        }));\n\n        console.log('home route: '+currCount);    \n    },\n});\n\nwindow.app = new AppRouter();\nBackbone.history.start();\n});\n```\n\nThis should log \"home route: null\" and then proceed to log \"click #\" for every click on \"Click me\".\n\nNow, make one small modification. Add a space to the url in navigate():\n\n``` javascript\nthisObj.navigate('count/ '+counter, {trigger:false, replace: true});\n```\n\nTry again and you will find that that \"home route: #\" will also start being logged, and the counter will reset _two out of every three clicks_.\n\nThis is in the 1.1.2 release and I am testing on the latest Firefox 33.1. I am not having this issue in Chrome - it could be because Chrome maybe does something to encode spaces in the URL. I'm not sure though.\n\nI realize that the space character should not be in a URL in the first place, but this behavior is odd and should at the very least be documented. (i.e. \"The navigate() may not behave as expected with URLs containing spaces (or other unsafe characters??).\") \n\nI am not sure if there is an easy fix for this, but I hope that at least by documenting this bug I save other developers time in trying to hunt it down.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3398",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3398/comments",
    "title": "Backbone Router - 'route' and 'route:' events are not heard on page render.",
    "created_at": "2014-11-26T22:18:54Z",
    "updated_at": "2014-11-26T22:53:03Z",
    "body": "Scenario:\nA user hits the a URL with a Backbone Route like `#home` or something\nThe home route function is called immediately during construction of the Router,\nand the `route` / `route:NAME` also get fired immediately during construction of the Router.\n\nThe problem with that is no object can properly subscribe to those two events on page render.\nIf the user first went to the root url like `/#` and then went to `/#home` then the hashChange is fired and the route events are fired as well but all the objects in the system had the ability to subscribe to them.\n\nHere's a little code sample that exposes what I am mentioning:\nhttps://gist.github.com/seanstrom/5fd09067c5c6aef8ea88\n\nIf this doesn't make sense I can try to explain it better.\nBut the gist of it is that Backbone should wait to fire the events, preferably at the next event loop cycle.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3393",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3393/comments",
    "title": "Adding jscs",
    "created_at": "2014-11-21T01:52:03Z",
    "updated_at": "2014-11-24T17:19:16Z",
    "body": "Is there any interest in adding [jscs](https://github.com/jscs-dev/node-jscs/) to help check with any inconsistencies from backbone's style?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3392",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3392/comments",
    "title": "Backbone.View submit events firing click events instead",
    "created_at": "2014-11-21T00:40:17Z",
    "updated_at": "2014-11-22T19:23:24Z",
    "body": "``` js\nBackbone.View.extend\n...\nevents: {\n  'submit': 'submit',\n  // causes submit events to be thrown as clicks \u2013 removing this line causes submit events to return to normal\n  'click [type=\"submit\"]': 'click',\n  'click [type=\"button\"]': 'click'\n}\n```\n\nhttp://jsbin.com/pozuwideva/3/edit\n\nBased on my very limited knowledge of backbone... It seems that you are unable to add click events to submit buttons in which you also have a submit event?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3391",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3391/comments",
    "title": "Backbone.history.navigate( '/' ) strips slash",
    "created_at": "2014-11-20T20:57:01Z",
    "updated_at": "2016-04-08T02:27:03Z",
    "body": "If my root is set to `/path/to/root/`, `Backbone.history.navigate( '/' )` should not navigate to `/path/to/root`.\n\nSee #2656 and especially 151bd73d26ab92de3c224ded656e535a06d7e85b.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3390",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3390/comments",
    "title": "Collection#set uses un-parsed attribute id to determine uniqueness",
    "created_at": "2014-11-20T08:28:31Z",
    "updated_at": "2014-11-20T16:01:12Z",
    "body": "Due to limitations in a backend API I am working with, I have a model class whose id attribute is generated by its `parse` method (it's simply moving a nested attribute up to the top level). I am fetching a collection which may contain models with already exist in the collection. Under normal circumstances, when `merge: true` is set, I would expect models with the same id to be merged together. However, this will not work when the id attribute is not present in the un-parsed json data, as you can see from the following code in **Collection#set**:\n\n```\nfor (i = 0, l = models.length; i < l; i++) {\n  attrs = models[i] || {};\n  if (attrs instanceof Model) {\n    id = model = attrs;\n  } else {\n    id = attrs[targetModel.prototype.idAttribute || 'id'];\n  }\n\n  // If a duplicate is found, prevent it from being added and\n  // optionally merge it into the existing model.\n  if (existing = this.get(id)) {\n```\n\nThe workaround I have in mind is to override `parse` in my collection class, and although this will work just fine, it feels a bit unclean and requires some code duplication. Would you consider moving the parsing stage to before the id check? All branches of execution eventually parse the model.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3389",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3389/comments",
    "title": "Nickpjason.GitHub.io tab opening up everytime I open firefox",
    "created_at": "2014-11-20T05:01:09Z",
    "updated_at": "2014-11-20T13:15:09Z",
    "body": "Hello, today when I got home from university I opened up my Firefox browser and then as it loaded my homepage then another tab opened up with the web address http://nickpjason.github.io/html5loop/ and it keeps asking me to download and install this youtube video downloader extension which I do not want to do.\n\nIt opens up everytime I open a new window of firefox, is there anyway I can get rid of this? I thought I would ask GitHub here if there was a way to get rid of it then asking the FireFox help forums\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3387",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3387/comments",
    "title": "Unmatched filesystem after mksquashfs",
    "created_at": "2014-11-18T13:28:59Z",
    "updated_at": "2014-11-18T16:48:35Z",
    "body": "I have a filesystem that is : \u201cSquashfs filesystem, big endian, version 3.0\u201d . In Debian, after using unsquashfs of firmware-mod-kit 0.99  and then using mksquashfs to regenerate filesyatem I find it completely different. What should I do to have the same filesystem after unsqushfs and mksquashfs?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3385",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3385/comments",
    "title": "Backbone.Model.save() problem on Large JSON",
    "created_at": "2014-11-18T12:31:24Z",
    "updated_at": "2014-11-18T17:25:38Z",
    "body": "the model I'm trying to save  have one nested array object of some 700+ objects, _schedule will have 1000+ children_\n\n``` javascript\nvar TaskSchema = new Schema({\n    kiosk_id    : Number,\n    task_id     : Number,\n    title       : String,\n    app_id      : Number,\n    app_type    : String,\n    start       : Date,\n    end         : Date,\n    content_slot: [{\n        slot_guid        : String,\n        schedule         : [ {\n            media_guid   : String,\n            duration     : Number,\n            start        : Date,\n            name         : String\n        } ]\n    }]\n});\n```\n\nanything beyond 700 object in that array makes problem,\nmy express server take few seconds to realize what happened and don't get the model data at all.\n\nbelow 700 nested children in that array all works fine,\n\nany suggestion? do I have to break my json to parts? \nstream it from browser? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3382",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3382/comments",
    "title": "wrapError function overrides emptiness of the error callback",
    "created_at": "2014-11-12T17:37:39Z",
    "updated_at": "2014-11-12T17:53:42Z",
    "body": "In my $.ajaxPrefilter function I watch for the global ajax errors and show those to the user.\nHow can I catch the error from request globally if I can't know whether it was custom-set or not?\n\nI can't event match with the source function by toString because I can't get to the native wrapError function.\nSo how am I gonna get the global error warning going? Like \"unexpected error\" or some standart errors that I know can occur?\n\nWhat I want to do :\nDo the .save() action\nget some standart error(like 400 - bad request)\nshow modal dialog to the user of what to do\n\nWhat I don't want to do :\nset callback for each .save or .fetch error\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3379",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3379/comments",
    "title": "Doc page displayed incorrectly",
    "created_at": "2014-11-11T22:35:00Z",
    "updated_at": "2014-11-12T19:13:53Z",
    "body": "http://backbonejs.org/docs/backbone.localstorage.html\nis not displayed correctly due to an unescaped `script` tag:\n\n```\nAssume underscore and backbone are loaded in <script> tags</p>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3377",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3377/comments",
    "title": "How to communicate model/collection/view/etc. type to browser dev tools?",
    "created_at": "2014-11-11T07:38:08Z",
    "updated_at": "2014-11-12T17:50:10Z",
    "body": "What I see in debugger/console is \"child\". That doesn't exactly help debugging. :-(\n\nHow robust is something like http://stackoverflow.com/questions/14866014/debugging-javascript-backbone-and-marionette#answer-15034014, what other possibilities there are and could some of them possibly be part of Backbone core some day?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3372",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3372/comments",
    "title": "documentFragment instead of creareElement",
    "created_at": "2014-11-06T20:12:58Z",
    "updated_at": "2014-11-12T21:56:11Z",
    "body": "why you do not create documentFragment instead of default 'div' element if property 'el' is not set? I think it would be very usefull for views that uses templates\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3371",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3371/comments",
    "title": "Using Backbone without jQuery",
    "created_at": "2014-11-06T10:14:04Z",
    "updated_at": "2014-11-06T16:32:39Z",
    "body": "Hello,\n\nI wanted to see what I would need to do to use Backbone AND not use jQuery?\n\nI want to use Famo.us for the views and so trying to decouple jQuery from Backbone.  I will mostly be using just the Backbone Models and Collections - though may use the framework for a View and insert 'Famo.us' code.  But if I just wanted to use the Models and Collections of Backbone, what would I need to do in order for it to run successfully without jQuery?\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3370",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3370/comments",
    "title": "Incoherence: different sort behaviour when setting models and collections",
    "created_at": "2014-11-05T13:11:43Z",
    "updated_at": "2015-01-26T07:47:59Z",
    "body": "Let's assume a collection is sorted by an attribute called `name`. In other words, its `comparator` is `'name'`. \n\n_Model behaviour_: If we take one of the collection's models and `set` the `name` attribute, the collection will not be re-sorted and no `sort` event will be triggered. This is well explained in the documentation.\n\n_Collection behaviour_: Now, if we take the collection as a whole and call `set` on it, passing it the existing model but with a modified `name`, it will indeed re-sort the collection and trigger a `sort` event; refer to the following line:\n\n``` javascript\nif (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n```\n\nIs this intended? IMHO, it would be better if either both of them caused a re-sort, or none of them.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3369",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3369/comments",
    "title": "false triggering in Router.navigate",
    "created_at": "2014-11-04T13:08:45Z",
    "updated_at": "2014-11-17T16:33:46Z",
    "body": "browser: FF 33,\nhashChange: true\n\nexample: router.navigate('route' + JSONString, {trigger: false}) will fire callback because of getHash function.\n\nIt return URI encoded (JSON) value from document.location.href which does not equals with original fragment. Other browsers does not encodes location.href.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3365",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3365/comments",
    "title": "history navigate with replace:true is not working",
    "created_at": "2014-11-03T11:11:19Z",
    "updated_at": "2014-11-03T19:27:58Z",
    "body": "When I call `Backbone.history.navigate(\"someRoute\", {trigger: true, replace: true})` the route is called just fine but it is inserted in browser history. When I go to some other route and click the browser back button the `someRoute` is called again! The `replace:true` option should prevent this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3364",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3364/comments",
    "title": "Implementation of isNew() and save() breaks saving new models with an assigned id",
    "created_at": "2014-10-31T15:09:55Z",
    "updated_at": "2015-02-04T21:22:25Z",
    "body": "Either using the default id (`_id`) or using `idAttribute` to define the id field, when calling `model.save()` on a Backbone model it fails to create a new object on the backend if the id field has already been set.\n\nAt the end of `save()` the function calls `isNew()` to determine the method to use for the sync method. `isNew()` just checks if the id field has been set and sets the sync method accordingly. As the id field has been set, `isNew()` determines that the action is update, calling to PUT instead of POST on the backend and failing to save the model in the backend as it doesn't exist.\n\nIn previous versions, one downloaded in March at least, it was possible to save models using `idAttribute` with a preassigned id.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3358",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3358/comments",
    "title": "History.start URL conversion broken on oldIE if wantsHashChange and wantsPushState",
    "created_at": "2014-10-24T12:20:24Z",
    "updated_at": "2015-02-17T22:12:29Z",
    "body": "Say my window.location is `/root?foo=bar` and my browser is IE7.\n\nI call `Backbone.history.start({root: '/root', pushState: true});`\n\nThat turns the location to `/root#`, but it should turn the location to `/root#?foo=bar`.\n\nThis happens because `this.getFragment()` initially computes the fragment as '' (empty string) because `this._hasPushState` is `false` and `this._wantsHashChange` is `true`, so `History#getFragment` just return `this.getHash()`.\n\nThen since we are on oldIE, `History#start` calls `this.navigate(fragment)`. But this fragment is empty.\n\nI currently work around this problem in my specific case with this hack:\n\n```\n    var root = '/candidate/list',\n        isExplorer = /msie [\\w.]+/,\n        docMode = document.documentMode,\n        oldIE = (\n            isExplorer.exec(navigator.userAgent.toLowerCase()) &&\n            (!docMode || docMode <= 7)),\n        location = window.location;\n    if (location.search && !location.hash && oldIE) {\n        location.replace(root + '#' + location.search);\n        return;\n    }\n    Backbone.history.start({pushState: true, root: root});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3355",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3355/comments",
    "title": "Why does Collection.create call save after adding a non-unique model?",
    "created_at": "2014-10-22T18:46:01Z",
    "updated_at": "2014-10-22T19:17:39Z",
    "body": "```\nvar MyModel = Backbone.Model.extend({\n    defaults: {\n        id: null\n    }\n});\n\nvar MyCollection = Backbone.Collection.extend({\n    url: '/foo',\n    model: MyModel\n});\n\nvar myCollection = new MyCollection();\nmyCollection.create({ id: 1 });\nmyCollection.create({ id: 1 });\n```\n\nIn the above example, two PUT requests are sent to the given URL. This seems odd to me because the second 'add' is a no-op and I did not pass 'wait: true'.\n\nIs this intended?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3352",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3352/comments",
    "title": "Using pushState and hashes together",
    "created_at": "2014-10-21T21:34:06Z",
    "updated_at": "2014-10-21T21:47:44Z",
    "body": "According current implementation we can use or pushState or hashes for routing. But what if we need to have direct routes and hashes routes?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3350",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3350/comments",
    "title": "Second parameter in initialize is replaced with Object",
    "created_at": "2014-10-21T15:37:41Z",
    "updated_at": "2014-10-21T15:53:52Z",
    "body": "Having a strange issue with object initialization. Only when second argument was 0 or null etc.\n\n``` javascript\n      var A = Backbone.Model.extend({\n        initialize: function(arg1, arg2){\n          var el = document.getElementById('output');\n          el.innerHTML += arg1 + ', ' + arg2 + \"\\n\";\n        }\n      });\n      var a1 = new A(3, 7);\n      var a2 = new A(1, 0);\n```\n\nLive preview here:\nhttp://plnkr.co/edit/01BaaZL2wNn6ebF2ChHO?p=preview\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3348",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3348/comments",
    "title": "Collection length not updated when models are removing during fetch",
    "created_at": "2014-10-18T13:25:43Z",
    "updated_at": "2014-10-18T13:49:16Z",
    "body": "On line 719 of backbone.js there is code:\n\n```\nif (remove) {\n  for (i = 0, l = this.length; i < l; ++i) {\n    if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n  }\n  if (toRemove.length) this.remove(toRemove, options);\n}\n```\n\nVariable `i` isn't updated when models are removed, so it causes sometimes error:\n\n```\nUncaught TypeError: Cannot read property 'cid' of undefined\n```\n\nI think there is also a problem with \"cid\". It should be \"id\", because modelMap object's keys are model's ID's, not CID's.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3346",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3346/comments",
    "title": "Move wrapError functionality into Backbone.sync",
    "created_at": "2014-10-17T20:54:23Z",
    "updated_at": "2014-10-21T02:09:01Z",
    "body": "Currently wrapError is always called before Backbone.sync. If wrapError is removed and its functionality is moved within Backbone.sync, it will provide these added benefits:\n1. When users override Backbone.sync themselves, they can check to see if an error parameter was explicitly defined in their code\n2. No unnecessary pre-emptive checks to see if options.error is specified on every ajax call\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3345",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3345/comments",
    "title": "Custom comparators?",
    "created_at": "2014-10-17T14:40:58Z",
    "updated_at": "2015-03-13T16:13:55Z",
    "body": "Backbone 'set' relies on the underscore isEqual method to determine whether attributes have changed, however this becomes an issue when an attribute contains another model or collection.  I'd really like for there to be a way to specify a custom comparator on an attribute that could be consulted instead of _.isEqual if present. Overriding 'set' gets to be a pain. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3344",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3344/comments",
    "title": "Collection.create throws \"missing URL\" exception when given a Model and `wait: true`",
    "created_at": "2014-10-16T21:49:27Z",
    "updated_at": "2015-03-09T22:15:52Z",
    "body": "...but succeeds if you don't pass `wait: true`.  Specifically this happens when passing a Model to `Collection.create`:\nhttp://jsfiddle.net/colllin/nufbo3sx/\n\nIs this expected?  I was surprised by it.  I want it to use the collection's URL... hence using `Collection.create` instead of `Model.save`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3343",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3343/comments",
    "title": "Adding a Model to a Collection fails",
    "created_at": "2014-10-15T16:42:19Z",
    "updated_at": "2014-10-20T15:38:30Z",
    "body": "I'm trying to add a Model to a collection `collection.add(model)`\n\nHowever, I get a `Uncaught TypeError: Cannot convert object to primitive value`\n\nLooking at the code it makes sense:\n\nBackbone passes the Model instance to Collection.get():\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L707\n\n.get() just looks it up by the model:\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L824\n\nAm I not supposed to add instantiated models to a collection?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3342",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3342/comments",
    "title": "server side for backbone.js application( serve index.html by rest api server)",
    "created_at": "2014-10-15T07:40:04Z",
    "updated_at": "2014-10-15T11:40:33Z",
    "body": "Good day, guys.\nI'm not sure if it's a right place for this question. But I asked on stack overflow and in google groups and had no answer...\n\nTrying to figure out how to make a rest api server for backbone js application. The question is not how to keep track of requests and methods (post, get and others). Question is how to give to client the index.html page?\n\nI found an example where the entry point to site is the root('/'). It gives the index page. The problem with this solution is that, if I'll go to url '/users' without going to '/' first - I'll get json list of users(without my entire site). I understand that it is the way how rest api works...\n\nBut I would like my site to give to clients the index page always when they connect first time. So I need on the server to keep track of whether it is the first connection and give index.html along with the data on request, if it is the first. Or one server sends the index.html, and the other server is rest api.\n\nLooks like I'm a little confused, I hope for your help)\n\nSory for my bad english\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3339",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3339/comments",
    "title": "Ajax error on destroying model",
    "created_at": "2014-10-11T14:07:02Z",
    "updated_at": "2014-10-15T19:24:12Z",
    "body": "An error occurs if the server returns an empty `DELETE` response. jQuery trying to parse an empty response, because `dataType` forced to `json` by default. I suggest to add one more condition to check the type of request\n\n``` javascript\n// Default JSON-request options.\nvar params = {type: type};\n\nif (type !== 'DELETE') {\n  params.dataType = 'json';\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3335",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3335/comments",
    "title": "ios-webkit-debug-proxy installation error \"aclocal: file '/usr/local/share/aclocal/pkg.m4' does not exist\"",
    "created_at": "2014-10-09T16:26:17Z",
    "updated_at": "2015-06-02T14:23:27Z",
    "body": "When i tried to install  ios-webkit-debug-proxy, its throwing teh below error. \nI have update the brew. \n\nCould you please guide me to resolve it.. \nError : aclocal: error: aclocal: file '/usr/local/share/aclocal/pkg.m4' does not exist\n\n---\n\nEbiz-Tests-MacBook-Pro:~ ebiztest$ brew update\nUpdated Homebrew from f41464c1 to e494a840.\n==> Updated Formulae\nawscli gnupg2\nopam qwt\nvarnish\nchromedriver libssh\npianobar solr\nvte3\ndaemon mksh\npython3 sound-touch\nwireshark\ngeoserver mongodb\n## qt5 unixodbc\n\nEbiz-Tests-MacBook-Pro:~ ebiztest$ brew install ios-webkit-debug-proxy\n==> Downloading https://github.com/google/ios-webkit-debug-proxy/archive/1.4.tar\nAlready downloaded: /Library/Caches/Homebrew/ios-webkit-debug-proxy-1.4.tar.gz\n==> ./autogen.sh\n\n./autogen.sh\n\naclocal\naclocal: error: aclocal: file '/usr/local/share/aclocal/pkg.m4' does not exist\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3333",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3333/comments",
    "title": "Allow listenTo callback to be a method name? (string)",
    "created_at": "2014-10-07T14:12:43Z",
    "updated_at": "2015-04-16T20:59:02Z",
    "body": "Since \"The **callback** will always be called with **object** as context\", perhaps we could optionally give the string name of a method on **object**? This would more closely mirror the functionality of the events hash.\nIt does open the doors for an error when that method doesn't exist on **object**, but people can already pass undefined so it's an issue that really already exists.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3332",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3332/comments",
    "title": "Create \"valid\" (or equivalent) event for successful validation?",
    "created_at": "2014-10-03T21:07:16Z",
    "updated_at": "2014-10-06T14:38:53Z",
    "body": "Any chance we could have a new standard event for when validation is run and no errors are found? It would be really useful to have that happen as a complement to the \"invalid\" event when validation is run.\n\nFor example, if I have a Backbone view and model which shows some error messaging on invalid events:\n\n```\nvar Model = Backbone.Model.extend({\n    validate: function () {\n        if (this.get(\"foo\") === \"bar\") {\n            return \"Foo cannot be bar\";\n        }\n    }\n});\n\nvar View = Backbone.View.extend({\n    events: {\n        \"click\": \"onClick\"\n    },\n\n    initialize: function () {\n        this.model.on(\"invalid\", this.displayErrorMessages, this);\n        // Request: Have the below work\n        // this.model.on(\"valid\", this.clearErrorMessages, this);\n    },\n\n    onClick: function () {\n        this.model.set(\"foo\", \"bar\", { validate: true });\n        // Triggers invalid event\n    },\n\n    displayErrorMessages: function () {\n        // display error messages\n    },\n\n    clearErrorMessages: function () {\n        // clear error messages\n    }\n});\n```\n\nIf this sounds like a reasonable feature request, let me know and I can work on a patch.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3328",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3328/comments",
    "title": "Backbone.Collection will not trigger \"invalid\" event",
    "created_at": "2014-10-01T06:33:47Z",
    "updated_at": "2015-05-13T21:17:33Z",
    "body": "If a collection create a new model that has a `validate` property and invalid attributes, the collection don't trigger `invalid` event.\n\n`_prepareModel` method always return a new model and not return `false`, because a new model's `validationError` attribute is `null` by default.\n\nuse `.isValid()` method, instead of `validationError` property.\n\n```\n$ diff -u backbone.js.org backbone.js\n--- backbone.js.org  2014-10-01 15:07:00.925991648 +0900\n+++ backbone.js 2014-10-01 15:07:53.708991655 +0900\n@@ -943,7 +943,7 @@\n       options = options ? _.clone(options) : {};\n       options.collection = this;\n       var model = new this.model(attrs, options);\n-      if (!model.validationError) return model;\n+      if (model.isValid()) return model;\n       this.trigger('invalid', this, model.validationError, options);\n       return false;\n     },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3323",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3323/comments",
    "title": "Asynchronous Validation",
    "created_at": "2014-09-26T08:26:51Z",
    "updated_at": "2014-09-26T14:33:04Z",
    "body": "It would be usefull to be able to validate Models asynchronously. When a Model needs some server-side validation, or do some other asynchronous validations during its own validation, you can't use the backbone's validate method anymore. It would be useful to have an asynchronous validation for that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3322",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3322/comments",
    "title": "Bump bower minor version",
    "created_at": "2014-09-26T04:41:53Z",
    "updated_at": "2014-09-26T15:26:44Z",
    "body": "Backbone's bower version hasn't been bumped in 8 months and is missing some rather important code contributions like this one: https://github.com/jashkenas/backbone/pull/3003\n\nJust wasted two hours working creating work arounds for what I now realize is old backbone code.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3321",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3321/comments",
    "title": "Is this project still alive?",
    "created_at": "2014-09-25T09:32:42Z",
    "updated_at": "2014-09-25T12:27:18Z",
    "body": "Many issues are getting ignored. Nothing new seems to be getting done recently. Is this project still alive?\n\nI invested a lot of time in learning this framework, and it seems to me it's not receiving much attention from its developers lately.\n\nMaybe just considering some PRs with a little less cynicism could bring some life in here.\n\nCheers.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3320",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3320/comments",
    "title": "Collection sync",
    "created_at": "2014-09-25T00:43:14Z",
    "updated_at": "2014-09-25T16:18:41Z",
    "body": "I am having trouble understanding the utility of Collection#sync. Firstly you have to give it params or else it throws red-herring errors like \"you need to specify URL\". If you do give it params, the first is \"method\" which doesn't make sense if you want to save the collection, because method needs to be \"create\" or \"update\" depending on if the model is new or not. Yet the documentation states \"Uses Backbone.sync to persist the state of a collection to the server.\"\n\nAlso, it would be nice if Model#save's documentation stated that it will not work unless the server responds with the updated record. A 200 response will appear to be enough but won't be.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3317",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3317/comments",
    "title": "incorrect documentation for Collection.remove",
    "created_at": "2014-09-18T15:46:58Z",
    "updated_at": "2014-09-18T22:12:41Z",
    "body": "The documentation for the Collection remove() method says _\"Remove a model (or an array of models) from the collection, and returns them\"_, implying that the removed models themselves are returned. The actual code returns a reference to the collection itself, not the removed models.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3315",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3315/comments",
    "title": "Backbone prototype inheritance",
    "created_at": "2014-09-17T11:16:33Z",
    "updated_at": "2014-09-23T18:30:10Z",
    "body": "What is the correct way to do the inheritance?\nI want to have single template method for all of the views if they haven't defined other way.\nI know that default extend just makes copy of the object and there would be no ancestor to have the method from, so even if I would add new method to ancestor after I extend it - there would be no such method in child.\n\nRight now I just re-writting before all the Backbone.View with my method and just after that extended it.\n\nYeah I knew I can write it by myself to the lib or just inherit from custom View with my method, but why backbone doesen't suport prototype inheritance? Isn't that is just a wastage of memory for every single copy? Or I actually haven't got it yet?\ncode example :\n\n``` javascript\nvar test = Backbone.View.extend({\n  test : function(){\n    console.log(this.test2());\n  }\n});\nBackbone.View = Backbone.View.extend({\n  test2 : function(){\n    return 'prototype inheritance works';\n  }\n});\nvar temp = new test;\ntemp.test(); //test2 is not a function\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3314",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3314/comments",
    "title": "Enable Sourcegraph",
    "created_at": "2014-09-17T03:16:27Z",
    "updated_at": "2014-09-25T16:15:36Z",
    "body": "I want to use [Sourcegraph code search and code review](https://sourcegraph.com) with backbone. A project maintainer needs to enable it to set up a webhook so the code is up-to-date there.\n\nCould you please enable backbone on @Sourcegraph by going to https://sourcegraph.com/github.com/jashkenas/backbone and clicking on Settings? (It should only take 15 seconds.)\n\nThank you!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3313",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3313/comments",
    "title": "Parse on collection reset()",
    "created_at": "2014-09-16T15:16:11Z",
    "updated_at": "2014-09-16T17:11:12Z",
    "body": "Hello, all\n\nI have a parse method in my model. When I create collection of this model and fetch it from the server, the collection internaly invokes this method and all works fine. But when I use .reset() or pass bootstrapped collection models on collection create .parse() is not called. \n\nIs it a bug or I missed something?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3312",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3312/comments",
    "title": "Suggestion:  Collection 'adds' event",
    "created_at": "2014-09-15T14:23:34Z",
    "updated_at": "2014-09-15T14:41:08Z",
    "body": "Near the end of `Collection.set()` after sending the `'add'` events, and before sending the `'sort'` event:\n\n```\nif (toAdd.length) this.trigger('adds', toAdd, this, options);\n```\n\nThis allows a listener to receive a single bulk event, with the full array of models that were added to the collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3311",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3311/comments",
    "title": "Selendroid : Unable to proceed after login to Application ",
    "created_at": "2014-09-15T08:28:20Z",
    "updated_at": "2014-09-15T13:21:55Z",
    "body": "I am using selendroid for mobile android automation.I am able to login to App.After click on sign in it is going out of application.\nServer Status : \n{\"status\":0,\"value\":{\"supportedApps\":[{\"appId\":\"io.selendroid.androiddriver:0.11.0\",\"mainActivity\":\"io.selendroid.androiddriver.WebViewActivity\",\"basePackage\":\"io.selendroid.androiddriver\"},{\"appId\":\"com.cropex.apps.livealerts:2.0\",\"mainActivity\":\"com.cropex.apps.livealerts.activities.SigninActivity\",\"basePackage\":\"com.cropex.apps.livealerts\"}],\"os\":{\"arch\":\"amd64\",\"name\":\"Windows 8\",\"version\":\"6.2\"},\"build\":{\"browserName\":\"selendroid\",\"version\":\"0.11.0\"},\"supportedDevices\":[{\"screenSize\":\"800x480\",\"platformVersion\":\"16\",\"model\":\"GT-S7392\",\"emulator\":false}\n\nHere is my code\n @Test\n    public  void selendroidTest() throws Exception {\n\n```\n   SelendroidCapabilities capa = new SelendroidCapabilities(\"com.cropex.apps.livealerts:2.0\");\n   capa.setPlatformVersion(DeviceTargetPlatform.ANDROID16);\n   capa.setEmulator(false);\n   driver = new SelendroidDriver(capa);\n\n   Thread.sleep(15000);\n\n   wait = new WebDriverWait(driver, 50);\n\n   driver.findElement(By.id(\"username\")).sendKeys(\"shivaram\");\n   Thread.sleep(2000);\n   new Actions(driver).sendKeys(SelendroidKeys.BACK).perform();\n\n   driver.findElement(By.id(\"password\")).sendKeys(\"shiv123\");\n   Thread.sleep(2000);\n   new Actions(driver).sendKeys(SelendroidKeys.BACK).perform();\n   driver.findElement(By.id(\"signin\")).click();\n\n   Thread.sleep(10000);\n   driver.findElement(By.id(\"logout\")).click();\n\n   driver.quit();\n```\n\n   }\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3310",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3310/comments",
    "title": "PushState not working with parameters",
    "created_at": "2014-09-12T22:43:14Z",
    "updated_at": "2014-09-23T19:14:48Z",
    "body": "I have a problem with pushState enabled.\nWhen I go to a **url/view/1** nothing works and I just get a load of errors in the console.\nif I just use the URL with hashtag i.e. **url/#view/1** all is fine \n\nAm I forgetting something?\n\n``` javascript\nroutes: {\n    '': 'index',\n    'index': 'index',\n    'view/:id': 'view',\n},\n```\n\nIn my console I just get 20 or so errors saying:\n_Uncaught SyntaxError: Unexpected token <_\non line one.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3309",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3309/comments",
    "title": "Add version to minified script",
    "created_at": "2014-09-12T15:18:07Z",
    "updated_at": "2014-09-23T21:15:19Z",
    "body": "This makes it easier to take inventory of minified, local scripts.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3308",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3308/comments",
    "title": "No Arguments in View Events?",
    "created_at": "2014-09-11T19:23:23Z",
    "updated_at": "2014-10-12T23:35:21Z",
    "body": "Is there is any reason a view's events hash doesn't allow passing of arguments?\n\nRecently I was working on code and found myself creating several callbacks for events that were very similar. Googling how to dry that up, I found others with the same problem, and the common response was to make one event and a callback with a large switch statement checking e.target and handling the response appropriately.\n\nThat seems a very clumsy solution. It would be much easier if there was a way to pass arguments to callbacks when defining the events hash. Then it would be possible to define one function, and have different events call it with different arguments.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3306",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3306/comments",
    "title": "Collection.reset modifies/corrupts the input options",
    "created_at": "2014-09-11T16:14:32Z",
    "updated_at": "2014-10-09T19:57:16Z",
    "body": "The collection reset is doing:\noptions = options || {};\n\nSince it is going to modify the options object (not just inspect it) It should do:\noptions = options ? _.clone(options) : {};\n\nCurrently the options object can become corrupted if there are other handlers also responding to a \"reset\" event - or if other handlers are also passing the options to another Collection.reset() call.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3305",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3305/comments",
    "title": "event parameters",
    "created_at": "2014-09-11T14:20:36Z",
    "updated_at": "2014-09-14T07:21:57Z",
    "body": "Hello.\n\nI am trying to write my own Backbone - React mixin. I am a bit eccentric and want full control of the whole life-cycle in order to be able to implement [shouldComponentUpdate](http://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate) in a proper way.\n\nThe problem I am having is that Backbone sends a reference of the collection when the 'add' event is triggered (just one example, there might be other events with similar problems) but since all references are \"byRef\" and the event is not synchronous I do not get a valid representation of the collection. Instead; I get the collection when all items have been added (given that the time to add goes faster than triggering the events).\nI.e. when I fetch a list of 10 items I get the following back on my listener:\n\n```\n[\n    <model: the item that was added>,\n    <collection: all 10 items, even on the first one>,\n    <options: saying that the index of the added item is 0, on every event>\n]\n```\n\nWould I be breaking any principles by asking for a copy of the collection instead of a reference to it?\n\n```\nvar before = _.deepClone(this);   \n...   \ntrigger('add', before, options);\n```\n\nKind regards,\nMartin\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3304",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3304/comments",
    "title": "Swift Interface?",
    "created_at": "2014-09-11T13:42:48Z",
    "updated_at": "2014-09-11T14:14:48Z",
    "body": "Hi everybody, I am new here meaning I have no idea if this belongs here! Please tell me if something is wrong with it!\n\nOk, now to the question: How to program an Interface in Swift? I mean I know that I can just drag buttons and stuff into the interface but how do I connect this button with the code I wrote? I mean let's say I put one of those \"slide-buttons\" in the interface, how can I connect this button with the boolean variable? \n\nHope someone can answer me! \nBy the way, if it is way to complicated to post it here, could you post your email so I can chat with you and you explain it? Or at least something like that? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3303",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3303/comments",
    "title": "Listento doesn't work (includes fix)",
    "created_at": "2014-09-11T04:33:45Z",
    "updated_at": "2014-09-11T04:49:31Z",
    "body": "When doing listenTo I get an undefined error from jQuery.\n\nWhen looking at the listenTo line (line 225):\nobj[implementation](name, callback, this)\n\nHowever according to the jQuery documentation, there is only 2 overriden methods for on, none matching this call (reference http://api.jquery.com/on/):\n.on( events [, selector ] [, data ], handler )\n.on( events [, selector ] [, data ] )\n\nI believe the correct way of calling this method is as follows:\nobj[implementation](name, null, this, callback)\n\nAfter doing this listenTo began working.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3302",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3302/comments",
    "title": "is backbone not more maintained?",
    "created_at": "2014-09-10T05:42:46Z",
    "updated_at": "2014-09-25T09:45:25Z",
    "body": "is backbone not more \"really\" maintained? are the core developers worked on 2.0? where is the future of backbone? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3300",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3300/comments",
    "title": "jquery as deps",
    "created_at": "2014-09-08T14:19:58Z",
    "updated_at": "2014-09-08T16:17:42Z",
    "body": "Hey, is jQuery hard deps for BB?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3299",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3299/comments",
    "title": "Uncaught TypeError: Cannot read property 'match' of undefined ",
    "created_at": "2014-09-06T20:18:44Z",
    "updated_at": "2014-10-01T17:36:05Z",
    "body": "Hey guys, getting this a lot of these errors as soon as the page loads:\nUncaught TypeError: Cannot read property 'match' of undefined \n\nline 1364  `var match = (window || this).location.href.match(/#(.*)$/);`   inside the `getHash` method\nBackbone 1.1.2\nunderscore 1.6.0 \nMarionette 2.1.0\njquery  2.1.1\nGoogle Chrome   37.0.2062.94 \nMac \n\n(also using browserify if that's any help...)\n\nany ideas? incompatible versions? let me know what other information i should provide.  \n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3298",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3298/comments",
    "title": "I'm new , Help me , where to ask about a repository that I downloaded it ?",
    "created_at": "2014-09-06T09:13:40Z",
    "updated_at": "2014-09-06T13:50:39Z",
    "body": "Hi there\nPlease for give me because of my bad English and if this question is in the bad shape ?\nI'm new \nI downloaded the this repository from this link  \" https://github.com/mehrmagazin/Bootstrap-Admin-Template/find/master \"\nnow I have some question about it \nwhere can I ask my question about this repo\nI fork it but there isn't any form under it to ask question or leave comment ?\nHelp me please\nGreat thanks\nBest Regards :+1: \nRaha \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3296",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3296/comments",
    "title": "Nested set in change event triggers last event with incorrect value for other listener",
    "created_at": "2014-09-05T13:07:15Z",
    "updated_at": "2014-10-02T06:40:35Z",
    "body": "Situation: you have two listeners to a backbone model property and the first listener changes the listened to property when it is triggered. I would expect the final event triggered to all callbacks to have the latest value of the model as an argument. The second listener has its final callback triggered with the original value though.\n\nExample fiddle here: http://jsfiddle.net/rxbqkzzL/\n\nIf you look at the logs the final callback for the second listener it triggers with 1 for the value of a as the callback's argument, but the actual final value of a 2.\n\nThis problem seems like it may be related to this issue with options not being passed correctly to nested change events: https://github.com/jashkenas/backbone/issues/2846 \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3295",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3295/comments",
    "title": "Collection Fetch with data query option is not passing to actual request call",
    "created_at": "2014-09-05T06:30:56Z",
    "updated_at": "2014-09-05T14:42:44Z",
    "body": "This is My code pretty simple, a collection and fetching that collection with date as argument.\n\n``` javascript\ncollec = Backbone.Collection.extend({\n    url: \"mapping\",\n    db: {\n        view: \"slosByAssessmentId\"\n      }\n    });\nc = new collec();\nc.fetch({data : { date: \"2010\" }});\n```\n\nThis code works if i run it on backbone.js console, and the result is as \n\n```\nhttp://backbonejs.org/mapping?date=2010\n```\n\nBut on my app it won't allow to pass date as an argument it does not give any warning or error too here is the result\n\n```\nhttp://m.teletaaleem.com/tangerine/_design/tangerine/_view/slosByAssessmentId\n```\n\nno query attached i upgraded Underscore to 1.7 Backbone 1.1.2 on my local environment and here is the result \n\n```\nhttp://localhost:5984/tangerine/_design/tangerine/_view/slosByAssessmentId?cacheBuster=58\n```\n\nSo what is blocking the fetch method of collection to pass query parameters, i tried $.ajax() method and its working with data options. My Url is different as i am using couchdb-backbone connector\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3294",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3294/comments",
    "title": "Adding of \"at\" option on removing model from collection.",
    "created_at": "2014-09-04T20:17:07Z",
    "updated_at": "2014-10-01T17:39:11Z",
    "body": "This is the feature request to add `at` option to be possible remove model by specified index. I think it could be looks like the following:\n\n```\nvar indexOfModel = 5;\ncollection.remove(null, {at: indexOfModel});\n```\n\nSo basically if the first argument if null and there is at options we want to remove model by specified index.\n\nYour thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3293",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3293/comments",
    "title": "Are backbone events \"synchronous\" or \"asynchronous\"?",
    "created_at": "2014-09-04T17:49:37Z",
    "updated_at": "2014-09-04T18:17:16Z",
    "body": "I realize that in the browser, Javascript runs in a single thread and that's that.\n\nNevertheless, I have to ask:\n\n```\nvar m = new Backbone.Model();\n\nm.on(\"change\", function() {\n    console.log('callback #1');\n});\n\nm.on(\"change\", function() {\n    console.log('callback #2');\n});\n\nm.on(\"change\", function() {\n    console.log('callback #3');\n});\n\nm.set('foo','bar');\n```\n\nIs the order of those callbacks garaunteed? Is that something I can rely on? Looking at triggerEvents(), I believe that this is the case but I'd like some confirmation. Thank you.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3292",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3292/comments",
    "title": "Model#parse needs to know when is called from the collection",
    "created_at": "2014-09-02T15:19:05Z",
    "updated_at": "2014-09-11T15:18:06Z",
    "body": "Hi.\n\nI've tried some time to find a related issue, without much luck. This relates a\nbit to #1451, #1912, #1843, and specially #2842, where @akre54 said:\n\n> Another good option is passing a flag, or testing for the existence of some\n> property to determine the context (collection or model) in your model's parse\n> method.\n\nI agree with that, the problem is that, unless I'm mistaken, is not there by\ndefault, and there is no reason why It should not be. The documentation of\nModel#parse says:\n\n> **parse** is called whenever a model's data is returned by the server, in\n> fetch, and save. The function is passed the raw response object, (...)\n\nWell, that's not correct. :-)\n\nMy server has the real content inside the \"data\" key of the response body, so I\nneed to override parse. If in the model I set parse() to `return response.data`\nthat works for the model getting its own data from the server, but\nwhen the collection hands the parsed data to the model, I need to check\nsomething in `options` to know whether I'm reading the data handed out from the\nserver (Model#fetch) or handed out from the collection (Collection#fetch),\nbecause the parsing is different.\n\nAt first glance, I thought you got it covered because I saw options has a\nreference to the collection. The problem is that a second call to fetch (without\nreset) has not such a reference. I fixed it by adding such a flag myself on a\nsync() reimplementation, or peeking on the URL to tell them apart.\n\nI think at least the documentation should be adjusted to explain what one can\nexpect in the options. Ideally, a flag would be better to avoid having to\noverride yet another function.\n\nThank you!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3291",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3291/comments",
    "title": "Tying Backbone, Marionette and jQuery with Browserify",
    "created_at": "2014-09-02T14:14:22Z",
    "updated_at": "2014-11-04T19:44:34Z",
    "body": "I am trying to get Backbone, Marionette and jQuery working with Browserify. I know this is a [really](https://github.com/jashkenas/backbone/issues/2774) [hot](https://github.com/jashkenas/backbone/issues/2997) [topic](https://github.com/jashkenas/backbone/pull/1561) about jQuery's dependency.\n\nI saw @samccone's [shim example](https://github.com/samccone/marionette-browserify/blob/master/marionette_shim.js).\n\n``` js\n$           = require('jquery');\nBackbone    = require('backbone');\nBackbone.$  = $\n_           = require('underscore');\nrequire('backbone.marionette');\n```\n\nBut I keep hitting `Cannot read property 'Deferred' of undefined` on this code on Marionette, even if I define `Backbone.$ = $` : \n\n``` js\n  // Get the Deferred creator for later use\n  Marionette.Deferred = Backbone.$.Deferred;\n```\n\nNow, you tell me I should go on Marionnette's repo, like this [issue](https://github.com/marionettejs/backbone.marionette/issues/1719). However, I think the issue is on Backbone since the `Backbone.$` is undefined.\n\nI went back up to see where Backbone is coming from on the Marionette side :\n\n``` js\nif (typeof define === 'function' && define.amd) {\n    define(['backbone', 'underscore', 'backbone.wreqr', 'backbone.babysitter'], function(Backbone, _) {\n      return (root.Marionette = factory(root, Backbone, _));\n    });\n  } else if (typeof exports !== 'undefined') {\n    var Backbone = require('backbone'); // Backbone is defined here!\n    var _ = require('underscore');\n    var Wreqr = require('backbone.wreqr');\n    var BabySitter = require('backbone.babysitter');\n    module.exports = factory(root, Backbone, _);\n  } else {\n    root.Marionette = factory(root, root.Backbone, root._);\n  }\n```\n\nIt looks like it's grabing a new instance of Backbone and not the one I added earlier with the $ defined.\n\nKnowing this, I dive into Backbone.js to find this :\n\n``` js\nfunction(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  [...]\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n```\n\nand the `$` is ~~defined~~ undefined here :\n\n``` js\n// Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n    factory(root, exports, _);\n```\n\nIf I add `$` like so\n\n``` js\n// Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n    factory(root, exports, _, $); // Added $ here!\n```\n\nWith jQuery being pre-required before Backbone on global scope.\n\nIt **will** work since it will be defined on the second init of Backbone and if jQuery is not defined on other projects, it will stay `undefined`.\n\nWhich is similar to #3031!\n\nAm I getting something wrong, sorry I bring up the subject again, but I am not sure how to handle this properly. \n\nThanks :bowtie: \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3290",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3290/comments",
    "title": "Feature request: mergeOptions",
    "created_at": "2014-09-01T05:39:35Z",
    "updated_at": "2014-09-03T15:21:17Z",
    "body": "Removing `this.option` was a move for the better, I think, but removing it made it more evident that there's really no concise way to specify additional properties to merge directly on a Class \u2013\u00a0which I find to be a pretty basic feature of extending a Class, and almost certainly an action that I do whenever I make a new Class.\n\nLet's consider the case that I make a new View, say, `EditorView`, which accepts a number of additional options on top of what Backbone.View accepts. Let's look at my options for getting those additional options onto the prototype.\n\nIn the most verbose form, I manually attach each additional option to my view.\n\n``` js\nvar EditorView = Backbone.View.extend({\n  constructor: function(options) {\n    this.style = options.style || this.style;\n    this.color = options.color || this.color;\n    this.readOnly = options.readOnly || this.readOnly;\n    this.menu = options.menu || this.menu;\n    this.preview = options.preview || this.preview;\n    Backbone.View.constructor.apply(this, arguments);\n  },\n\n  // set my defaults...\n  this.style = 'tall';\n});\n```\n\nThe primary problem with this approach is how verbose it is...nobody would ever want to write a new line of code for each additional option they pass. So let's take a look at how we can improve this, drawing some inspiration from the Backbone source itself:\n\n``` js\nvar editorOptions = ['style', 'color', 'readOnly', 'menu', 'preview'];\n\nvar EditorView = Backbone.View.extend({\n  constructor: function(options) {\n    _.extend(this, _.pick(options, editorOptions));\n    Backbone.View.constructor.apply(this, arguments);\n  }\n});\n```\n\nThis is a big improvement, I think, because we now only need to add new values to the `editorOptions` array and they'll be merged, so things are substantially more DRY.\n\nBut I'd still like something _even more_ DRY. As my app grows, the number of Classes I extend grows, too. Eventually, I might find myself with tens or hundreds of Classes, and in each one I must write  `_.extend(this, _.pick(options, myCustomOptions));` within the constructor.\n\nIt's far from the worst line of code ever, but it seems a bit much to need to include this in every Class. I'd consider these additional properties to be a fundamental part of extending an object. And common enough to warrant some additional convenience.\n\nWhat if that array was on the prototype chain, and what if it would automatically be concatenated with the parent's array within the extend method? That would provide us with the following API:\n\n``` js\nvar EditorView = Backbone.View.extend({\n  mergeOptions: ['style', 'color', 'readOnly', 'menu', 'preview']\n});\n\nvar SuperEditorView = EditorView.extend({\n  mergeOptions: ['superProperty']\n});\n```\n\nThis allows one to declaratively specify additional properties to be merged directly on the instance, which would really clean up some code.\n\nSupporting this would involve adding something to the effect of\n\n``` js\nchild.prototype.mergeOptions = _.union(this.prototype.mergeOptions, child.prototype.mergeOptions);\n```\n\nto the extend method.\n\nI can see this being a pretty controversial change, but I figured I'd propose it over here before I go and overwrite extend in my own projects.\n\n(p.s. Yes, I understand that there aren't actually classes in Javascript, but it's tough to argue against the utility in describing Backbone Objects with that word.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3288",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3288/comments",
    "title": "Feature request: Return options passed to `navigate` back to the Router",
    "created_at": "2014-09-01T02:31:02Z",
    "updated_at": "2014-10-01T17:55:07Z",
    "body": "Right now, calling `router.navigate('/my-url', myOptions);` doesn't allow one to access `myOptions` later on from within the Router. This is because they're sent away to Backbone.history and are never seen again.\n\nConsequently, if you'd like to add more options, then you must modify not just the Router, but also Backbone.History, which seems like a lot.\n\nWith a small, backwards-compatible change, users can more easily expand the navigation options without touching the Backbone.history object.\n#### Why?\n\nWhat I'm trying to do is make a more powerful Router. One of the features is the ability for a developer to declaratively specify data objects for a specific 'route' \u2013\u00a0which is basically just a matched URL. The data is fetched the first time you navigate to that route, then gets cached for subsequent visits. To reset the cache I'd like to support a new option to `navigate`...maybe something like\n\n``` js\nmyRouter.navigate('/books', {resetCache:true});\n```\n\nThere might be other options I add later, too, that further modify the behavior of what happens when a route is matched.\n#### What's doing this like now?\n\nI have to copy + paste two methods from Backbone.History in addition to the internal regular expressions, which are used by one of the methods. First, I have to modify `History#navigate` to [pass the options to the `loadUrl` method on L1625](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1625). Then I need to override [`loadUrl` to do the same](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1576). It's roughly 50 lines of code, in total, just to add two additional arguments to the callbacks.\n\nIn addition to those changes to Backbone.History, I need to override the [`Router#route` method](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1316) \u2013\u00a0which is really all that I want to do \u2013\u00a0to do something with those options that I get back.\n#### What's the change look like?\n\nPassing `options` as a second parameter to the aforementioned methods of Backbone.History.\n\nLine 1576\n\n``` diff\n- handler.callback(fragment);\n+ handler.callback(fragment, options);\n```\n\nLine 1625\n\n``` diff\n- if (options.trigger) return this.loadUrl(fragment);\n+ if (options.trigger) return this.loadUrl(fragment, options);\n```\n\nBy doing this, I only need to modify `Router.route` to process the additional option, which makes things less fragile. A possible counter-argument is that I shouldn't be using the `navigate` options to expand the functionality of routing to callbacks. If that's the case, how might I go about this instead without getting into the History object?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3287",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3287/comments",
    "title": "bone assembler",
    "created_at": "2014-08-31T17:24:01Z",
    "updated_at": "2014-08-31T22:24:36Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3286",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3286/comments",
    "title": "Using Backbone Models on the Server-side",
    "created_at": "2014-08-31T13:56:23Z",
    "updated_at": "2014-09-02T17:00:06Z",
    "body": "Hi :)\n\nI wanted to ask if anyone has explored using Backbone Models on the Server-side?  I am interested in exploring this but as I understand it Backbone uses jQuery.  Are there any Backbone versions I can use on the server side?  I won't be using jQuery for anything, so can happily remove it - but I can't see any examples of server-side Backbone Models & Collections - Only Views - Which I won't be using either.\n\nAny help would be greatly appreciated as all I have found so far is for the Client side - Which is not what I am looking for.\n\nThanks again for your help :)\n\nMark\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3284",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3284/comments",
    "title": "url error while create new record",
    "created_at": "2014-08-29T09:25:38Z",
    "updated_at": "2014-08-30T14:29:01Z",
    "body": "occur version: 1.1.1\nthe 'A \"url\" property or function must be specified' error occurred while create new record with code shown blow:\n\n```\nvar newModel = {...};\nthis.collection.create(newModel,{...});\n```\n\nI examined the Collection._prepareModel: function(attrs, options) method.\nit changed from:\n    if (attrs instanceof Model) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n     }\nto:\n    if (attrs instanceof Model) return attrs;\n\nI think it's a bug. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3283",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3283/comments",
    "title": "Support for opts.context in AJAX callbacks",
    "created_at": "2014-08-29T00:56:16Z",
    "updated_at": "2015-02-02T18:48:49Z",
    "body": "The [jQuery AJAX docs](http://api.jquery.com/jQuery.ajax/) state that a `context` attribute can be specified on `opts` to specify what `this` should refer to in all AJAX-related callbacks.\n\nFor many of the model server calls (such as `save` or `fetch`), the `success` and `error` callbacks are wrapped in such a way that any provided methods already on `opts` will be invoked with the default context, rather than the provided context. See examples of this in the [success](https://github.com/jashkenas/backbone/blob/master/backbone.js#L453) and  [error](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1696) callbacks of `fetch` in the source.\n\nThis was somewhat mentioned in [#2192](https://github.com/jashkenas/backbone/issues/2192), but was closed and points to other issues which are only tangentially related to use of a context. I understand there are workarounds for this, but is there a reason why these callbacks don't use `call` or `apply` or even respect `opts.context`?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3280",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3280/comments",
    "title": "timeout issue",
    "created_at": "2014-08-27T05:17:42Z",
    "updated_at": "2014-08-27T05:21:35Z",
    "body": "I had written frontend using Angularjs ,database Mongodb(used mongoose also) with server as Nodejs.\nI had developed in Intelj Idea and when i pushed to cloud it works fine for sometime but everything stops after few minutes.Can anyone say what may be the problem.My project code is in one server and database in another server. Is using multiple servers causes this issue.????? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3278",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3278/comments",
    "title": "Backbone sends GET request instead of PATCH when {patch:true} is set",
    "created_at": "2014-08-24T17:56:58Z",
    "updated_at": "2014-08-25T21:34:00Z",
    "body": "Hi. I'm trying to save changed attributes of model with this code:\n\n``` coffeescript\nth.model.save(\n        {\n            note:\"newvalue\"\n        }\n        {\n            patch     : true,\n            success : success,\n            error      : error\n        }\n)\n```\n\nAnd if patch:true is given in options hash, browser will send GET request.\nIf patch:true is not used, everything is ok, and it sends PUT request.\n\nSo, to override this behavior, I have to make something like this:\n\n``` javascript\n(function(){\n  var originalSync = Backbone.sync;\n  Backbone.sync = function(method, model, options) {\n      console.log(\"METHOD => \",method); //for debugging\n      if (method === 'patch') options.type = 'PATCH';\n      return originalSync(method, model, options);\n  };\n})();\n```\n\nRegards.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3277",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3277/comments",
    "title": "Backbone.history.start issue? root param produce no effect",
    "created_at": "2014-08-24T14:52:03Z",
    "updated_at": "2014-08-25T21:22:53Z",
    "body": "I'm trying to change default root through backbone.history.start\n\nSo, i'm starting with:\nrouter.js\n\n```\nrouter = Backbone.Router.extend({\n  routes: {\n  '' : 'home'\n  },\n  home:function(){\n       console.log(\"home\");\n  }\n});\n```\n\napp.js\n\n```\nvar app = Backbone.View.extend({\n    initialize: function(options) \n    {\n      var AppRouter = new router();\n      Backbone.history.start({pushState: true,root: \"/home\"});\n    }\n});\n```\n\nSo, after this example, if i trigger\n\n```\nmydomain.com/ \n```\n\nwill fire up \"home\"\n\nMy main page is entirely served by server side. ie:\n\n```\nmydomain.com/\n```\n\nafter successful login, user is redirected to mydomain.com/home which should be prepared and render by client side.\n\nSo, i just want set my root to mydomain/home and not mydomain/ which is default to backbone.history.start\n\nam i missing something?\n\n```\nBackbone.history.start({pushState: true,root: \"/home\"})\n```\n\nfired up always in this two cases\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3276",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3276/comments",
    "title": "Adding index() method to Backbone.Model",
    "created_at": "2014-08-23T20:56:19Z",
    "updated_at": "2014-08-25T18:27:54Z",
    "body": "Often, it's necessary to get index of specific model. To resolve this case we all use the following approach:\n\n```\nvar index = model.collection.indexOf(model);\n```\n\nit looks ugly and could be better if you add something like `index()` method to be possible to get index of specific model like the following:\n\n```\nvar index = model.index();\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3274",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3274/comments",
    "title": "Reducing fetch-based promise boilerplate",
    "created_at": "2014-08-21T18:21:00Z",
    "updated_at": "2014-10-20T15:42:33Z",
    "body": "It pains me that the `fetch` method resolves to the data returned from the server. The data returned from the server is largely irrelevant outside of a model, as it is really temporary data that should not really be exposed 'publicly'.\n\nI find myself often wanting to pass a promise for a model to a view, as this makes the job of rendering progress indicators really simple:\n\n```\nrender: function () {\n  if (this.model.then) {\n    this.model.then(function(model) {\n      this.model = model;\n      this.render();\n    }.bind(this));\n    // render a spinner\n  } else {\n    // we have a model and can render it here\n  }\n}\n```\n\nTo make this really simple, it would be nice to do this:\n\n```\nvar view = new MyView({\n  model: someModel.fetch()\n});\n```\n\nThe only problem is, the promise from `fetch` resolves to the plain data from the server, so you have to do this:\n\n```\nvar view = new MyView({\n  model: someModel.fetch(function (model) {\n    return someModel;\n  })\n});\n```\n\nObviously just changing the resolution of the fetch promise is going to break all sorts of things. So, I propose either an option the `fetch` call that changes what is resolved, or another method:\n\n```\nfetchModel: function () {\n  return this.fetch().then(function () {\n    return this;\n  }.bind(this));\n}\n```\n\nIt would probably need an appropriate way of handling failures, and also the name isn't great. But the general principle stands: `fetch` currently resolves to a pretty pointless value.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3273",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3273/comments",
    "title": "Production Version .js file doesn't have a version",
    "created_at": "2014-08-21T17:26:46Z",
    "updated_at": "2014-08-21T18:01:03Z",
    "body": "It doesn't have a version at the top of the file.\n\nThe devel and edge versions do and so does the UnderscoreJS file (devel, production, edge) so I'm assuming BackboneJS production should have it too but it's missing.\n\nThe version number is pretty important for devs when determining if they need to upgrade or not and/or what the costs are for upgrading once viewing changesets.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3271",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3271/comments",
    "title": "backbone prototype events",
    "created_at": "2014-08-21T06:05:12Z",
    "updated_at": "2014-08-21T18:30:59Z",
    "body": "var GUI = Backbone.View.extend({\n    events:{\n          'click': clickHandler\n    }\n});\n\nvar GUI =  GUI.extend({\n    events:{\n        'click': deleteHandler\n    }\n });\nI want to use prototype to inheritance of the incident, how to use the prototype in Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3270",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3270/comments",
    "title": "backbone prototype events",
    "created_at": "2014-08-21T06:01:43Z",
    "updated_at": "2014-08-21T18:17:54Z",
    "body": "var GUI = Backbone.View.extend({\n    events:{\n          'click': clickHandler\n    }\n});\n\nvar GUI =  GUI.extend({\n\n });\nI want to \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3269",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3269/comments",
    "title": "Backbone.js in IE compatibility view",
    "created_at": "2014-08-20T10:28:52Z",
    "updated_at": "2014-08-20T16:26:43Z",
    "body": "Will the backbone api works under IE compatibility view ? Is there list of browsers that are supported by backbone.js ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3268",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3268/comments",
    "title": "Validation: validate only currently set attributes",
    "created_at": "2014-08-19T14:40:17Z",
    "updated_at": "2015-05-13T21:06:50Z",
    "body": "Why need to always pass [all model attributes](https://github.com/jashkenas/backbone/blob/master/backbone.js#L585) to `validate` method? Due to this inside `validate` we never know what exactly need to be validated. And so, for example, if I create a new model with two required attributes, empty by default, and then trying to set one of them with `{ validate: true }` - I will have an error, because **both** of them will be validated, and second one will be invalid.\n\nSuch approach is logical for `save` method - as entire model should be valid to be saved. But definitely not for `set`.\n\nSo why not to remove [this line](https://github.com/jashkenas/backbone/blob/master/backbone.js#L585) and, for example, add something like `attrs = _.extend({}, attributes, attrs)` before [this one](https://github.com/jashkenas/backbone/blob/master/backbone.js#L479)?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3267",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3267/comments",
    "title": "fix the  unrecognizable characters bug for safari",
    "created_at": "2014-08-18T12:15:54Z",
    "updated_at": "2015-01-30T17:46:37Z",
    "body": "It will cause unrecognizable characters in safari when call \n\n```\n   location.hash = '#' + fragment; //line 1634 in backbone.js\n```\n\nespecially when the page's data is get by router according to the url, it leads the page's data show abnormally.\n\ncall the function of `encodeURI` can be better\n\n```\n    location.hash = encodeURI('#' + fragment);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3264",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3264/comments",
    "title": "Input validation needed",
    "created_at": "2014-08-12T19:34:38Z",
    "updated_at": "2014-09-12T13:03:33Z",
    "body": "At line 1629 of backbone.js, preface\n location.hash = '#' + fragment;\nwith\n fragment = fragment.replace(/(javascript:|#).*$/, '');\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3263",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3263/comments",
    "title": "Add default value support for optional routes",
    "created_at": "2014-08-10T15:56:33Z",
    "updated_at": "2014-08-11T22:53:13Z",
    "body": "Let say I have the following route:\n\n``` javascript\nroutes: {  \n  '/category(/:catname)'  : 'category',\n}\n```\n\nNow, the \"catname\" parameter is optional. It would be great if I could set a default value to it.\nA lot of PHP frameworks support this functionallity (such as ZF2).\nI know I can just check if its defined in the mapped function, but I think it makes more logic to define a default value in the route itself.\n\nI can think of  some implementations\n\n``` javascript\nroutes: {  \n  '/category(/:catname=home)'  : 'category',\n}\n```\n\nOr perhaps, more similar to ZF2 and more customizable\n\n``` javascript\n\"routes\": {\n    \"/category(/:catname)\": {\n        \"function\": \"category\",\n        \"defaults\": {\n            \"type\": \"home\"\n        }\n    }\n},\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3262",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3262/comments",
    "title": "Flat Ui in Andorid",
    "created_at": "2014-08-07T21:51:41Z",
    "updated_at": "2014-08-08T13:55:22Z",
    "body": "I am using Flat Ui in my Android Application using Android Studio but i am unable to find AutoCompleteTextView inside Flat Ui and I have to use AutoCompleteTextview in my application so anyone suggest me the way to use that?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3261",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3261/comments",
    "title": "If an object passed to listenTo does not extend from Backbone.Events throw a descriptive error.",
    "created_at": "2014-08-07T17:22:35Z",
    "updated_at": "2014-08-12T20:19:41Z",
    "body": "Currently the message is a bit confusing to people who are not familiar with the implementation of listenTo.\n\n---\n\nIf you are open to this I am more than happy to PR it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3260",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3260/comments",
    "title": "Virtual Attributes Feature",
    "created_at": "2014-08-07T02:02:00Z",
    "updated_at": "2014-08-08T14:36:44Z",
    "body": "Recently I have needed to compute virtual attributes for models when being used in marionette templates. I had to use the `serializeData` method which wasn't the nicest and was cluttering up the views.\n\nI added the ability to my apps `Base` model(which all other models extend) to allow the definition of virtual attributes when declaring a model.\n\n``` coffeescript\n  class Entities.Model extends Backbone.Model\n    toJSON: ->\n      _.extend super, @getVirtualAttributes()\n\n    getVirtualAttributes: ->\n      attrs = {}\n      for key of @virtualAttributes\n        attrs[key] = @virtualAttributes[key].call(@)\n      attrs\n```\n\nThis allows for a object containing helpers which construct attributes on the fly and extend the `toJSON` attributes returned.\n\n``` coffeescript\nclass App.Player extends App.Entities.Model\n  virtualAttributes:\n    has_email: ->\n      return true if @get(\"email\")?.length\n```\n\nNow I am not proposing this is included into BackboneJS itself as Im not sure what impact this would have on all other users of Backbone. But I have found it useful and wanted to at least share it as a proposed feature. So therefore would this be something the BackboneJS community would want?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3257",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3257/comments",
    "title": "How to fire an error when overriding the \"parse\" method",
    "created_at": "2014-08-05T21:11:06Z",
    "updated_at": "2014-08-13T21:58:28Z",
    "body": "I am trying to throw on error when the server response I receive within the `parse()` method is not valid.\n\nI tried setting the `error` key in the options parameter to `false` or call the `options.xhr.error(this, resp, options);` method within my overidden `parse()` method of my model, but none of them causing the `error` callback of the `fetch()` method to trigger.\n\nAny clue?\n\nHere the actual example:\n\n``` javascript\nBackbone.Model.extend({\n\n  parse: function parse(resp, options){\n\n    if(resp && resp.meta.success){\n      return resp.response;\n    }else{\n      //Throw an error which cause the \"error\" callback of the fetch method to get triggered\n    }\n  }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3256",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3256/comments",
    "title": "delegateEvents is called before initialize in View's constructor",
    "created_at": "2014-08-02T05:48:29Z",
    "updated_at": "2015-07-07T18:35:19Z",
    "body": "Hi, it seems in latest unpublished version the call to `delegateEvents` has been moved to before `initialize`, into `setElement`. See ab802ba4a0ab94b8f5fad2cc7f1d8659350295d8.\n\nThis is making a break change from 1.1.2. Previously we can modify event listeners in `initialize`, mostly [debounce](http://underscorejs.org/#debounce) a function so that it won't be triggered too frequently. Now the events are delegated before `initialize` so it doesn't work any more.\n\nAny reason for this change? \n\nI also found #1804 which seems to indicate the original behavior is the expected behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3255",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3255/comments",
    "title": "dynamic view attributes on re-rendering",
    "created_at": "2014-08-01T08:47:41Z",
    "updated_at": "2014-08-01T23:22:07Z",
    "body": "I really would welcome the ability to update the view's dynamic attributes when it gets re-rendered. Take for instance: I have a view that can be in two states i.e selected|unselected and i can only differentiate it by adding a \"selected\" class to the view's el.\n\n``` javascript\nvar model = new Backbone.Model({selected: true});\n\nvar view = Backbone.View.extend({\n    className: function(){\n        return this.model.get('selected') ? 'selected' : '';\n    }\n});\n```\n\non the initial render it works well however on re-rendering the view when the model changes, the view's class attribute doesn't get updated. Since the attributes are only capture on instatiation of the view any changes to them would not be reflected on future re-renders of view. the same goes for the tagName property its static per view instance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3253",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3253/comments",
    "title": "Add a \"reset\" method to Backbone.Model",
    "created_at": "2014-07-31T21:43:57Z",
    "updated_at": "2018-02-04T02:29:01Z",
    "body": "I needed to update some of a Model's data that came in from the server.  Currently, there are two options: call `Model.set`, or set `Model.attributes` directly.  I didn't want changes to be recorded, but I also couldn't use `silent` because I needed the respective views to update.  So, I wrote a monkey patch:\n\n``` coffeescript\nBackbone.Model.prototype.reset = (attributes, options) ->\n    attrs = attributes || {};\n    if options.parse\n      attrs = this.parse(attrs, options) || {}\n\n    @set(attrs, options);\n    @changed = {};\n```\n\nWondered why `Backbone.Model` doesn't have a reset method like `Backbone.Collection`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3252",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3252/comments",
    "title": "Add option that allow change default PUT method to PATCH",
    "created_at": "2014-07-31T21:11:50Z",
    "updated_at": "2014-08-01T10:49:26Z",
    "body": "I am using save function which sends put requests but I need patch request.\nThe simlest way to solve this is like `this.save(this.toJSON(), {patch: true})`\nIt makes me crazy to use this everywhere when I need simple patch request.\nI think adding smth like global setting `Backbone.usePatchOnUpdate = true` would be great,\nThanks in advance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3248",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3248/comments",
    "title": "Backbone.Collection constructor wrong optional params",
    "created_at": "2014-07-29T20:47:05Z",
    "updated_at": "2014-09-11T15:18:56Z",
    "body": "Checking current and former http://backbonejs.org/#Collection-constructor documentation it shows `new Backbone.Collection([models], [options])` where `models` and/or `options` are optional.\nI would say that it needs to read `new Backbone.Collection([models[, options]])` where `options` is optional, only if `models` is passed in. Either no param is passed in, `models` is passed in, or `models` and `options` are passed in.\nIf you pass an object as `options` without passing `models`, then, after instantiation takes place, your object ends up at `Backbone.Collection.models[0]`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3247",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3247/comments",
    "title": "Collection.add partial models merge with default",
    "created_at": "2014-07-29T13:09:29Z",
    "updated_at": "2014-08-25T17:35:13Z",
    "body": "Hi, I'm using Backbone 1.1.2.\n\nI'd like to set the collection by passing JSON representing partial models. Resulting models should have as attributes : arguments and Model's defaults. \n\nWhen creating a model directly for testing, it works, the model object has both arguments and defaults as attributes :\n\n<pre><code>var test = new siteModel({id: '3', label:\"mod3\"});\nconsole.log(test);\nObject {id: 3, isSelected: false, label: \"mod3\"}</pre></code>\n\nBut with collection.set, it doesn't work.\n\n<h4>In my Model : </h4>\n\n<pre><code>defaults: {\n            id: 'id',\n            label: 'label',\n            isSelected: false,\n        },\n</pre></code>\n\n<h4>In my collection :</h4>\n\n<pre><code>this.set([{id:1, label:\"mod1\"},{id:2, label:\"mod2\"}]);\n</pre></code>\n\n<h4>Console </h4>\n\n<pre><code>console.log(this.get(1).attributes);</pre></code>\nCurrent result for model 1 :\n<pre><code>Object {id: 1, label: \"mod1\"} </pre></code>\n\nExpected result :\n<pre><code>Object {id: 1, isSelected: false, label: \"mod1\"} </pre></code>\n\nIs this a bug ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3245",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3245/comments",
    "title": "Add option to validate a single property on model.set",
    "created_at": "2014-07-28T12:52:27Z",
    "updated_at": "2014-07-28T14:34:14Z",
    "body": "Suggestion to add an option \"single\" (or any other name) to validate only property that was set and not the whole model. Backbone.model._validate can look similar to this:\n\n``` javascript\n_validate: function(attrs, options) {\n  if (!options.validate || !this.validate) return true;\n  if (options.single === undefined || !options.single) { attrs = _.extend({}, this.attributes, attrs); }\n  var error = this.validationError = this.validate(attrs, options) || null;\n  if (!error) return true;\n  this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n  return false;\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3244",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3244/comments",
    "title": "Unable to use global jQuery.ajaxSetup:beforeSend on delete request",
    "created_at": "2014-07-26T09:43:51Z",
    "updated_at": "2014-10-01T17:20:08Z",
    "body": "I need to add CSRF token to all my requests to my backend. I use the following approach:\n\n```\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        xhr.setRequestHeader(\"X-CSRF-TOKEN\", \"my-CSRF-token\");\n     }\n   });\n```\n\nBut unfortunately it does not executed in the following case:\n\n```\nvar options = {\n     wait: true,\n     emulateHTTP: true,\n     processData: true,\n     url: '/delete',\n     data: {id: 1}\n };\n\n Backbone.sync('delete', model, options);\n```\n\nI don't understand why X-CSRF-TOKEN header is not added to the request? Is it Backbone bug?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3242",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3242/comments",
    "title": "Poor \"add\" performance on sorted collections",
    "created_at": "2014-07-24T23:37:41Z",
    "updated_at": "2015-05-14T04:32:06Z",
    "body": "I am having significant performance problems when adding items separately to a sorted collection.  This appears to be because a whole-list sort happens every time an item is added.  In my case, I cannot roll all of the additions into a single addition operation (which would trigger only one sort).\n\nPerformance could be improved by using binary search to find the insertion point (unfortunately not with underscore's sortedIndex, as this does not take a comparator), and inserting the record at the appropriate location instantly.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3241",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3241/comments",
    "title": "Optimize Code of Setting temporary attributes",
    "created_at": "2014-07-24T21:58:14Z",
    "updated_at": "2014-10-20T15:19:14Z",
    "body": "We can remove the flower brackets at the setting temporary attributes code which is a one statement inside condition, In this way, we follow similar to `restore attributes`\n\n// Set temporary attributes if `{wait: true}`.\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L486-488\n\n// Restore attributes.\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L513\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3238",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3238/comments",
    "title": "Documentation for patch is missing from Backbone.sync",
    "created_at": "2014-07-24T17:38:20Z",
    "updated_at": "2014-07-24T18:18:50Z",
    "body": "`Backbone.sync` lists four CRUD methods, but not patch, even though it is possible that `Backbone.sync` gets `patch` as an argument: https://github.com/jashkenas/backbone/blob/4e02c9ad090f1006f3c42bed2b71e02dd27a8b1e/backbone.js#L508-L510\n\nIs this a hidden feature, or an oversight in documentation?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3235",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3235/comments",
    "title": "Model.hasChanged not getting set to empty object after use",
    "created_at": "2014-07-23T02:14:41Z",
    "updated_at": "2014-07-23T18:58:22Z",
    "body": "CodePen: http://codepen.io/opnsrce/details/hclaH/\n\nIf you click on each menu item, they're supposed to get highlighted individually. Instead, they all get highlighted. I've run this code in 0.9.2 and it works fine. \n\nI'm still looking into the root cause  (I assume it's in Model.set). I figured I'd open up the issue here incase one of you solved it before I did.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3233",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3233/comments",
    "title": "toJSON and the option argument",
    "created_at": "2014-07-22T15:13:28Z",
    "updated_at": "2014-07-22T15:40:16Z",
    "body": "`toJSON` takes an `options` argument in both models and collections.  However, it doesn't do anything with the argument; the function simply clones the model's arguments.  Is a vestige of old code?  Would it break anything if that argument was removed, because its never used?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3232",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3232/comments",
    "title": "PATCH support + Transforming keys between server and client",
    "created_at": "2014-07-22T14:28:44Z",
    "updated_at": "2014-07-23T15:42:46Z",
    "body": "I've got a server which accepts keys in snake case. But on the client, everything is camel cased.\n\nTo get around this, I've been converting them back and forth inside of `parse` and `save` like so:\n\n```\nparse: function(resp, options) {\n    resp = _.deepCamelizeKeys(resp);\n    return Backbone.Model.prototype.parse.call(this, resp, options);\n},\nsave: function(key, val, options) {\n    var attrs;\n    if (key == null || typeof key === \"object\") {\n        attrs = key;\n        options = val;\n    } else {\n        (attrs = {})[key] = val;\n    }\n    if (attrs) attrs = _.deepSnakeizeKeys(attrs);\n    return Backbone.Model.prototype.save.call(this, attrs, options);\n}\n```\n\nThis has been working great. Especially for the `PATCH` scenario, where I only want to send certain attributes over to the server, and I don't have to override `toJSON` - as that should be left for the case of sending a complete representation to the server (which  my app also does).\n\nHowever, I ran into a problem. Because of this line: https://github.com/jashkenas/backbone/blob/master/backbone.js#L499 it appears that any `attrs` you pass to `save()` are going to get `set()` on the model. So in this instance, `attrs` are snake_cased, but `serverAttrs` (which have just been run through `parse()`) are camelCased.\n\nI'm not sure if this is something backbone should support, but it feels fairly common to need to transform keys between the client and the server, and I don't think `toJSON` is always the place, because that completely takes away true `PATCH` support (where you want to send a partial version of the model).\n\nAn easy fix would be to simply run `parse()` on the new extended object, rather than just on `serverAttrs` - but I suppose that could have a few potential problems with it too, such as re-modifying an existing value, or something. I don't know....\n\nAny ideas/comments?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3231",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3231/comments",
    "title": "Object.observe() integration",
    "created_at": "2014-07-22T01:27:09Z",
    "updated_at": "2015-11-03T14:23:53Z",
    "body": "Since **`backbone.js`** is largely built on listening to views, models, collections and other objects (in its own way), the utilization of `Object.observe()` (thanks to Chrome's 36 stable release) can now be reasonably implemented as a much more manageable and performant _(which I'm being told isn't a word)_ alternative to the underlying `.get()` / `.set()` methods we've all come to know and love.  \n\nI'm not proposing to completely do away with anything.  Simply, given the presence of an `Object.observe()`-capable browser, utilize **it** instead for listening to (and updating/deleting) objects.\n\nI've looked everywhere for discussion on this topic and it doesn't seem to be on anyone's public posts or pages.  I even found a couple of **`backbone.js`** add-ons but they're well over 2-3 years old and inactive.  However, if I have overlooked something (even something in the master branch here), please point me in the right direction and this issue can be closed.\n\nThanks.\n\nPS - I would love to take this on with a pull if it isn't already being worked on but I don't want to duplicate anyone's current work if I can avoid it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3230",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3230/comments",
    "title": "events selector by name or complex id names",
    "created_at": "2014-07-21T10:36:07Z",
    "updated_at": "2014-07-21T12:03:15Z",
    "body": "I have an input with this complex name:\n\n``` html\n<input ... name=\"bic_voucher_entitybundle_company[name]\" id=\"bic_voucher_entitybundle_company[name]\" >\n```\n\nThe problem comes when I want to assign this name or id to an event:\n\n``` js\n        events: {\n            'click #bic_voucher_entitybundle_company[name]': 'limitLength',\n            'click [name=\"bic_voucher_entitybundle_company[name]\"]': 'limitLength',\n```\n\nBoth do not work.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3229",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3229/comments",
    "title": "Should the success callback be executed on a 304?",
    "created_at": "2014-07-19T08:39:47Z",
    "updated_at": "2014-07-20T00:33:03Z",
    "body": "In the context of Backbone.Collection.fetch, would the option.success function map directly to the ajax success callback?\n\nThat does not seem to be the case.  When looking at [the difference between success and complete](http://stackoverflow.com/questions/5240876/difference-between-success-and-complete), success should only be called on 200 level returns and not in the case of 304s.  I am seeing success being called when the server returns 304 and ''.\n\nI am naively playing with Backbone with ETag and If-None-Match to try to get some conditional requests working and having a bit of a tough time.\n\nWhat is the best way of skipping the call to options.success on a 304?\n\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L451\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3226",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3226/comments",
    "title": "listenToOnce creates unexpected memory leak in _listeningTo object",
    "created_at": "2014-07-18T16:17:50Z",
    "updated_at": "2014-10-20T17:20:08Z",
    "body": "When using `listenToOnce`, I\u2019d expect that post-trigger, I\u2019d be free of associations between my listener and my object, much like when calling `once`. However, even though the event listener cleans up, the object reference is still maintained through the `_listeningTo` object. This has potential to create unexpected memory leaks.\n#### An Example\n\nA parent view creates a child view that acts as a modal. I have the parent view `listenToOnce` for a close event on the children views. This is the only event the parent is listening for on the child. That close event fires once and the parent view callback is satisfied. The child view has `.remove()` performed and everything is thought to be cleaned up. The child view is not able to be gc\u2019d though because the parent still has a reference in `_listeningTo`. In a case of a long living parent view, this can become  a incremental leak as I perform more view creations.\n\nAs a normal backbone user, I have no idea that a reference is maintained to the object being listened to. This would be my expectation when there are no more events being watched. I don't know that I need to perform `stopListening` manually.\n#### Proposal\n\nDifferentiate `listenToOnce` from `listenTo`. Let `listenToOnce` perform a `stopListening(childView, event)` when the callback is executed\u2026 thereby removing the association if it was the only event being watched.\n\nMy very inelegant solution which strikes at the crux of the problem:\n\n``` javascript\n  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\n\n  // Inversion-of-control versions of `on` and `once`. Tell *this* object to\n  // listen to an event in another object ... keeping track of what it's\n  // listening to.\n  _.each(listenMethods, function(implementation, method) {\n    Events[method] = function(obj, name, callback) {\n      var listeningTo = this._listeningTo || (this._listeningTo = {});\n      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n      listeningTo[id] = obj;\n      if (!callback && typeof name === 'object') callback = this;\n\n      // solution begins here\n      if (implementation === 'once') {\n        cachedCallback = callback;\n        callback = function () {\n          this.stopListening(obj, name);\n          return cachedCallback.apply(this, arguments);\n        }\n      }\n\n      obj[implementation](name, callback, this);\n      return this;\n    };\n  });\n```\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3225",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3225/comments",
    "title": "How is the order of routes in a router guaranteed?",
    "created_at": "2014-07-18T01:40:52Z",
    "updated_at": "2014-09-11T20:45:53Z",
    "body": "Since the iteration order of an object is not guaranteed (described as [arbitrary order](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in)), is defining routes in an object safe? \n\nI've never run into any problems, but just wondering if this is behavior that is browser implementation dependent?\n\nThe reason I'm asking is that I have had issues in object iterators returning things in different orders in other contexts - in node with mongo and in a specialized browser used on Samsung Smart TVs called Maple.\n\nWould making routes an array be safer?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3224",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3224/comments",
    "title": "Cool library for Backbone.js",
    "created_at": "2014-07-17T09:35:54Z",
    "updated_at": "2014-07-17T14:57:43Z",
    "body": "I am working on Neck library for Backbone.js from some time (over a year :)). Library takes what is best in Backbone (in my opinion great model and collection modules) and adds number of trendy features like data-binding between controller and view, tiny modules for view logic and model management, dependency injection and more. \n\nI am looking for other developers whom like to contribute to library and test in on own projects. For now I have draft API docs and I am writing test to get more coverage.\n\nWe use this library in my work production projects, so it is fully usable.\n\nTell me what do you think about it. Here is a link to [Neck](https://github.com/smalluban/neck). \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3223",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3223/comments",
    "title": "DAT2MAT",
    "created_at": "2014-07-15T15:35:32Z",
    "updated_at": "2014-07-15T15:37:15Z",
    "body": "I'm trying to use the scripts written to import .DTA files directly into matlab but having some trouble. There are two things I am trying.\n1. using the import_dta command I cannot get the import_dta_private to work properly.\n2. using import_multiple_dta my computer is having trouble with 'codistributed'. i believe this is because I don't have the Parallel Computing Toolbox. I was wondering if there is a way around this without buying the software.\n\nIf anyone could help it would be much appreciated. Thanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3221",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3221/comments",
    "title": "model.destroy() requiring set of noted idAttribute to send DELETE",
    "created_at": "2014-07-14T18:44:13Z",
    "updated_at": "2014-07-15T19:11:05Z",
    "body": "-== Summary:\n\nWhen using mongodb and setting idAttribute to '_id' in Model, requires that you set the variable instance's '_id' field in order for model.destroy({...}) to actually send a DELETE request to server...\n\n-==Using:\n\njquery 2.1.1\nunderscore.js 1.6.0\nbackbone.js 1.1.2\n\n-== Example:\n\nvar Foo = Backbone.Model.extend( {\n            urlRoot: '/foo',\n            idAttribute: '_id'\n        });\n\nvar EditFoo = Backbone.View.extend({\n            el: '.page',\n            events: {\n                'click .delete': 'deleteFoo'\n            },\n                        <<<snip>>>\n            deleteFoo: function (ev) {\n                //set _id field, destroy for some reason is expecting _id vs. id\n                // even though in model decl we set idAttribute: _id  \n                this.foo.set({_id: this.foo.get('id')});\n                this.foo.destroy({\n                           success: function (foo) {\n                    router.navigate('', {trigger:true});\n                  }\n                });\n                return false;\n            }\n        });\n\n-== Notes:  \n\n Without  this.foo.set({ _id: this.foo.get('id')});  the call to this.foo.destroy({ ... }); runs with success, but a DELETE request is NOT sent to the server, since it is expecting '_id' vs. 'id'.  model.destroy should expect 'id'  not '_id'\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3219",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3219/comments",
    "title": "router.navigate function is called before hashChange event function gets call",
    "created_at": "2014-07-14T07:11:11Z",
    "updated_at": "2014-12-11T23:17:12Z",
    "body": "my code : \n\nvar initialize = function () {  \n  $(window).on('hashChange',reset);\n}\n\nvar reset = function(){\n   alert(\"Hello Reset\");\n}\n\ntheRouterFunction: function(){\n   Router.navigate('',{trigger:true,replace:true});\n}\n\nemptyFunction: function(){\n   alert(\"Hello EmptyFunction\");\n}\n\n//Router.navigate('',{trigger:true,replace:true}); will call emptyFunction , this is defined in routes.\n//theRouterFunction gets called on clicking on a button A.\n\nNow, when i click on button A, from some webpage of my site theRouterFunction gets called and since hash is changed, hashChange event will took place and will call the reset function. Now In the theRouterFunction when it navigates (by calling Router.navigate('',{trigger:true,replace:true});) to emptyFunction. Again it should first call reset and then emptyFunction , but the order is different , it first calls emptyFunction completes it's execution and then call reset function.\n\nCan someone please help me out , why this is happening ? It shouldn't be like that ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3218",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3218/comments",
    "title": "Router silent:true : Initialize the view without calling render",
    "created_at": "2014-07-09T21:41:21Z",
    "updated_at": "2014-07-09T23:13:55Z",
    "body": "I have a slider in HomeView which is initialized by a method runSlider(). When the HomeView is loaded, I need this method runSlider() to be called so I call runSlider() in HomeView:render().\nIt works when I navigate to Home.\nBut at the first load: How do I automatically initialize the slider (and some others events) without replacing the DOM by calling render (with silent:true set on the router)? I could use the Backbone.View:initialize() method but the view is not even initialized.\n\nHere is the code: https://gist.github.com/mathieug/d50c861e63dd647f1c2b\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3216",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3216/comments",
    "title": "Maintain a lodash branch for backbone",
    "created_at": "2014-07-07T05:37:51Z",
    "updated_at": "2014-07-07T15:52:49Z",
    "body": "Is it possible for backbone to support a lodash branch so it can be pulled directly by a [component build](https://github.com/strongview/backbone/tree/lodash)? I realize that this could potentially mean releasing two tags per release (one for underscore and another for lodash), but it'd be very helpful and remove the need for teams to maintain versions of backbone with their own lodash customizations.\n\nAlternatively, is there a way to dynamically inject the `Backbone._` value? The same way `Backbone.$` is injected?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3213",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3213/comments",
    "title": "[Question] Collection attributes and their events",
    "created_at": "2014-07-06T06:47:26Z",
    "updated_at": "2014-07-06T15:41:34Z",
    "body": "Assume I have a `Playlist` collection that holds a set of `Song` models.\n\nI have the following attributes in Playlist\n\n```\ncurrentSong: null,\nnextSong: null,\nprevSong: null,\ngenre: null,\n```\n\nI have `currentSong` attribute to show what song is playing whenever it changes. Right now, since I cannot listen to a collection's attributes' events, I just manually set currentSong and call `updateSongInfo()`. Now that I've learned the basics of Backbone more clearly, I want to do this more naturally from `PlaylistView` by listening to events. One alternative that I thought of was moving the attributes to a different model (e.g. MusicPlayer) and setting `Playlist` collection as the model's attribute like `MusicPlayer.Playlist = new ()..`.\n\nExtra info: I built a chrome extension [Instant Music](https://chrome.google.com/webstore/detail/instant-music/ehebnoicojclpjjblbacdjmpjpkocmml) to learn Backbone for the first time and now I am in the middle of refactoring it to make the code less awful.\n\nThis [issue](https://github.com/jashkenas/backbone/issues/1442) from the past might be related.\n\nUpdate: I just ran across [FAQ-nested](http://documentcloud.github.io/backbone/#FAQ-nested). Do you think it'd be a good solution to rename `Playlist` collection to `Songs` collection, and make another model `Playlist` that will contain `Songs`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3212",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3212/comments",
    "title": "Need trigger event of adding multiple models",
    "created_at": "2014-07-05T20:18:53Z",
    "updated_at": "2014-07-07T16:05:57Z",
    "body": "At now if I add 50 models into collection at once I get 50 triggered `add` events:\n\n```\nthis.listenTo(collection, 'add', function () {console.log('add event')}).\ncollection.add([50 models]);\n```\n\nIt's performance issue if we will do DOM operations on every adding of models (also on removing ones). It's better if you add something like \n\n```\ntrigger('batchAdd', models) \n```\n\nin https://github.com/jashkenas/backbone/blob/master/backbone.js#L686 \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3211",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3211/comments",
    "title": "does it hardly depends on jquery since version 1.1.1",
    "created_at": "2014-07-03T02:30:33Z",
    "updated_at": "2014-07-03T15:26:52Z",
    "body": "if (typeof define === 'function' && define.amd) {\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3210",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3210/comments",
    "title": "History should accept a route matching behavior",
    "created_at": "2014-07-02T19:43:41Z",
    "updated_at": "2014-07-02T21:51:31Z",
    "body": "By default, the Backbone.History resolves a route by its first match. I think it should be possible to also use another strategies, like match all matching routes or match the most specific route.\n\ni.e:\nIf I have multiple routers, distributed in many modules and one module defines `:category/:slug` and another module defines `user/:id`, the most specific route strategy would avoid conflicts and wouldn't trigger the `:category/:slug`'s callback for a route starting with `user/`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3209",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3209/comments",
    "title": "URLs on Collection",
    "created_at": "2014-07-02T00:49:43Z",
    "updated_at": "2014-07-02T01:17:19Z",
    "body": "Documentation for Collection.url() at http://backbonejs.org/#Collection-url states: \"Models within the collection will use url to construct URLs of their own.\"  Is this documentation correct?  I don't see this actually happening.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3205",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3205/comments",
    "title": "Better Documentation for Backbone.Router, Backbone.History",
    "created_at": "2014-06-25T15:01:30Z",
    "updated_at": "2014-07-30T15:40:55Z",
    "body": "After working with these two \"classes\" for a little while, I'm finding that they aren't documented as well as the other Backbone types. For instance, I keep having to go back to the source code to remind myself what event gets fired when navigation actually occurs and what the arguments are. Furthermore, both types have public functions (like Backbone.History.getFragment) that aren't documented at all. (For some functions, this might be intentional, but I'm not sure.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3203",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3203/comments",
    "title": "question about events trigger process",
    "created_at": "2014-06-24T22:42:28Z",
    "updated_at": "2014-08-19T17:03:26Z",
    "body": "there is a test in test/events.js:277 called \"callback list is not altered during trigger\". this behaviour seems weird to me: because when i have one event listener, which removes another event listener, and first one happens before second one - i will be wondered why did this event was still fired. maybe there is some explanation for preference of this kind of behaviour?\n\nthank you\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3202",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3202/comments",
    "title": "Add a TLDR License Summary!",
    "created_at": "2014-06-24T17:05:08Z",
    "updated_at": "2014-06-24T18:12:52Z",
    "body": "Somewhere in the README this would be nice:\nhttps://tldrlegal.com/license/mit-license\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3201",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3201/comments",
    "title": "Collection.add() not working as intended with {mege:true}",
    "created_at": "2014-06-23T10:05:18Z",
    "updated_at": "2014-06-23T15:38:55Z",
    "body": "I have the following code\n\n<pre><code>\nvar MyModel = Backbone.Model.extend({\n    initialize: function(options) {\n        this.set('id', options.name);\n    },\n    defaults: {\n        name: null,\n        value: null\n    }\n});\n\nvar MyCollection = Backbone.Collection.extend({\n    model: MyModel\n});\n\nvar myCollection = new MyCollection([]);\n\n\nvar vars1 = [\n    {\n      name: \"myVar1\",\n      value: 1\n    },\n    {\n      name: \"myVar2\",\n      value: 2\n    },\n    {\n      name: \"myVar3\",\n      value: 3\n    },\n    {\n      name: \"myVar4\",\n      value: 4\n    }\n];\n\nmyCollection.add(vars1);\n\nconsole.log(myCollection.pluck(\"id\")); // [\"myVar1\", \"myVar2\", \"myVar3\", \"myVar4\"]\nconsole.log(myCollection.pluck(\"value\")); // [1, 2, 3, 4]\n\nvar vars2 = [\n    {\n      name: \"myVar2\",\n      value: 22\n    },\n    {\n      name: \"myVar4\",\n      value: 44\n    }\n];\n\nmyCollection.add(vars2, {merge:true});\nconsole.log(myCollection.pluck(\"id\")); // [\"myVar1\", \"myVar2\", \"myVar3\", \"myVar4\", \"myVar2\", \"myVar4\"]\nconsole.log(myCollection.pluck(\"value\")); // [1, 2, 3, 4, 22, 44]\n</code></pre>\n\n\nHere is a link to [JSbin](http://jsbin.com/hewokitu/1/edit?js,console)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3200",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3200/comments",
    "title": "Why use _.once in once, it is need?",
    "created_at": "2014-06-23T09:38:58Z",
    "updated_at": "2014-06-23T18:35:31Z",
    "body": "@jashkenas I have a doubt with `once`.\n\n``` javscript\nonce: function(name, callback, context) {\n      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\n      var self = this;\n      var once = _.once(function() { \n        self.off(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n      return this.on(name, once, context);\n    },\n```\n\nin `once`  the once  = _.once(callback), but in my mind, the callback only invoked once, then off the event. the _.once proper for the situation that we just need execute the funcion once no matter how often you call it . at this, we just need call it one, then, it's gone. so I think it's not need  use _.once, just like jQuery's `one`. \n\nMy english is really bad, did I described distinct?\n\nthank you.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3199",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3199/comments",
    "title": "`sort` triggered on collection.fetch even though no changes occur",
    "created_at": "2014-06-22T18:58:38Z",
    "updated_at": "2014-11-13T16:51:29Z",
    "body": "I have a view with its `comparable` property set. Every 10 seconds, the view calls `.fetch`. Each time `fetch` is called, a `sort` event is triggered even though none of the models change. \n\nI took a look in the source and this seems to be the offending line in the collection object ...\n\n```\nif (existing = this.get(id)) {\n  if (remove) modelMap[existing.cid] = true;\n  ...\n```\n\nfollowed by:\n\n```\nif (order && (model.isNew() || !modelMap[model.id])) order.push(model);\n```\n\nIn this case, if a model already exists, it's `cid` is set in `modelMap`. `order` seems to be used to determine whether the collection should be sort. \n\nIf I fetch a set of models that already exist in the collection, their `cid`'s are set during this process but not their `id`s, causing modelMap[model.id] to return undefined and causing a sort to occur.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3198",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3198/comments",
    "title": "Model.fetch options setting custom parse",
    "created_at": "2014-06-20T14:58:50Z",
    "updated_at": "2014-06-20T15:24:39Z",
    "body": "If we can set url of the model temporary just for one fetch request, why we can't change the way it is parsed?\nI'm suggesting to have way to set custom parse for every fetch.\n\n``` javascript\n    // Fetch the model from the server. If the server's representation of the\n    // model differs from its current attributes, they will be overridden,\n    // triggering a `\"change\"` event.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var parse = model.parse;\n      var success = options.success;\n      if (options.parse === void 0) options.parse = true;\n      else if(typeof options.parse === 'function') parse = options.parse;\n      options.success = function(resp) {\n        if (!model.set(parse(resp, options), options)) return false;\n        if (success) success(model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3197",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3197/comments",
    "title": "MVC is good",
    "created_at": "2014-06-20T13:52:22Z",
    "updated_at": "2014-06-20T13:55:29Z",
    "body": "A good front MVC frame\u3002\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3196",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3196/comments",
    "title": "Unsetting attributes via set method should assume void value",
    "created_at": "2014-06-19T18:09:07Z",
    "updated_at": "2015-04-16T20:57:14Z",
    "body": "The following will not fire a change event:\n\n``` javascript\nvar model = new Backbone.Model({foo: 1});\nmodel.set({foo: 1}, {unset: true});\n```\n\nThis is because the comparison of `attrs` and `current` does not take in account the `unset` flag: https://github.com/jashkenas/backbone/blob/master/backbone.js#L360-L361\n\nIf an attribute is being unset, the value in attributes should be ignored. Line 360 should be changed to:\n\n``` javascript\nval = unset ? void 0 : attrs[key];\n```\n\nThis assumption also matches line 367 of deleting the entry from `current`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3195",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3195/comments",
    "title": "No documentation on complete callback",
    "created_at": "2014-06-17T12:47:31Z",
    "updated_at": "2014-06-17T14:33:51Z",
    "body": "`model.save()` and `model.destroy()` honors `complete` callback but the same is not mentioned in the documentation.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3192",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3192/comments",
    "title": "Router backwards incompatible change",
    "created_at": "2014-06-13T20:30:16Z",
    "updated_at": "2014-06-16T22:16:16Z",
    "body": "Please add a note in the changelog detailing how location.search is now included in the Router fragment and must be matched against by regexp route declarations.\n\nMight also be a good idea to include a note in the http://backbonejs.org/#Router-route part too.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3191",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3191/comments",
    "title": "PushState issue in tests for ie9?",
    "created_at": "2014-06-12T14:29:30Z",
    "updated_at": "2014-06-12T14:55:47Z",
    "body": "In the environment.js setup for tests, we do [this](https://github.com/jashkenas/backbone/blob/master/test/environment.js#L14-L15):\n\n```\n    // We never want to actually call these during tests.\n    history.pushState = history.replaceState = function(){};\n```\n\nThe trouble is, the history start method checks the existence of pushState for _hasPushState [here](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1452)\n\n```\n      this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);\n```\n\nand since we've set it to a function where it didn't exist prior in IE9, this means that under test, IE9 will now report as having pushState, which means some tests pass which shouldn't.\n\nIf we fix environment.js to:\n\n```\n    if (!!history.pushState) history.pushState = function () {};\n    if (!!history.replaceState) history.replaceState = function(){};\n```\n\nthen some of the tests fail under IE9:\n\n![ie9 - win7 running 2014-06-12 15-27-58 2014-06-12 15-29-00](https://cloud.githubusercontent.com/assets/78225/3258866/e64e3332-f23d-11e3-8d91-04ee176ea90a.png)\n\nAm I missing something here? Is this intentional?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3188",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3188/comments",
    "title": "(bower req) add backbone.min.js",
    "created_at": "2014-06-10T07:22:57Z",
    "updated_at": "2014-06-10T14:10:38Z",
    "body": "Hi, it'd be useful to add backbone.min.js to the Bower installation to make life a bit easier :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3187",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3187/comments",
    "title": "this.options undefined",
    "created_at": "2014-06-10T05:22:48Z",
    "updated_at": "2014-06-10T06:23:52Z",
    "body": "The following code has worked as expected in older version of Backbone:\n\n```\nrequire(['views/delete-confirm-view'], function(ConfirmView) {\n    new ConfirmView({dealName: dealName}).render();\n});\n```\n\nafter upgrading to Backbone 1.1.2 the ConfirmView has no options property anymore when the above code is invoked.\n\nCan't figure out what is wrong.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3184",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3184/comments",
    "title": "where to put $.ajaxPrefilter",
    "created_at": "2014-06-06T18:20:20Z",
    "updated_at": "2014-06-09T11:01:32Z",
    "body": "I have a Backbone app that is modularized using require. This first time a browser opens the app, the app doesn't load, because models are trying to load using a URL that has not yet been set by $.ajaxPrefilter. I am calling $.ajaxPrefilter like this\n\n```\n           $.ajaxPrefilter(function(options, originalOptions, jqXHR) {\n                options.url = '<server base URL' + options.url;\n            });\n```\n\nbefore calling router.initialize() and so before Backbone.history.start(), so I am not sure how to proceed. Someone suggested that I wrap Backbone.sync, but the options array is not what I expected and has no url attribute. \n\nI wouldn't use this forum but it seems to me to be a very general problem.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3183",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3183/comments",
    "title": "Backbone.history / Router.navigate {replace:true} not working (related to issue #3182)",
    "created_at": "2014-06-06T16:58:52Z",
    "updated_at": "2016-01-22T14:40:52Z",
    "body": "Following the same setup on issue #3182, we noticed that the {replace:true} flag is not working as expected; the Backbone documentation states that using this flag will prevent a navigate request to insert a history record in the browser. In our case, we see `module1/dummy` when we hit the browser's back button, after successfully navigating to `module1/home`.\n\nFlow:\n\n```\n/ --> module1/home --> back button --> module1/dummy\n```\n\nDesired Flow:\n\n```\n/ --> module1/home --> back button --> /\n```\n\nOne colleague suggested adding {replace:true} to the master router that is doing the handoff to the modular router as well, which worked well, but we're not sure why is it that we need to add this flag in two places, since the `module1/dummy` navigate command is being executed after the fact.\n\nObviously, having a permanent fix to #3182 will null this issue, but it the workaround is unavoidable, we need to find a solution to this unnecessary history addition.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3182",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3182/comments",
    "title": "Modular routing dummy route workaround fix requested",
    "created_at": "2014-06-06T16:47:26Z",
    "updated_at": "2014-06-17T20:57:32Z",
    "body": "In my current project we're building a large-scale modular web app, and we've setup a modularized routing structure. We encountered that the handoff between our app-level (master) controller and our modular controller was not working properly, and in reviewing several solutions online, we found that calling a dummy route from the modular router solved the issue. However, why is this dummy route call required? Is there a permanent fix to this workaround?\n\nFlow:\napp/main.js --> app/master-router.js --> module1/main.js --> module1/module1-router.js\n\n```\n/**\n* Module1 main: /modules/module1/main.js\n**/\ndefine([\n    'modules/module1/routes/module1-router',\n],function (DashboardRouter, DashboardController) {\n    'use strict';\n\n    var router = new ModuleRouter ();\n\n    //dummy route call is a known workaround to get modular routers to work in Backbone\n    router.navigate('module1/dummy', {replace: true});  //Had to include replace:true to avoid it getting into the history, but it does anyway, will open separate issue for that\n});\n\n/**\n* Module1 router: /modules/module1/routes/module1-router.js\n**/\nBackbone.Router.Extend({\n   routes:{\n       'module/home' : 'home'\n   },\n   home: function(){\n      //Some action here\n   }\n});\n\n/**\n* Master router: /app/scripts/routes/master-router.js\n**/\nBackbone.Router.Extend({\n   routes:{\n       'module/:fragment' : 'module'\n   },\n   module: function(fragment){\n      //We've setup a path on requireJS that points 'modules' to its appropriate folder, \n      //so we don't have to specify the full path here\n      require(['modules/module1/main'], function () {\n          Backbone.history.navigate(fragment, true);\n      });\n   }\n);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3180",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3180/comments",
    "title": "Any detail tutorial about the Router?",
    "created_at": "2014-06-05T10:16:58Z",
    "updated_at": "2014-06-06T04:13:00Z",
    "body": "```\nI found that I become stupid when it comes to the router. I'm not familiar with that how to manipulate the router and the view in a spa. Are there some examples talking in depth about the router and the view to realise a spa? I didn't find any articles about this. Thanks~\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3179",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3179/comments",
    "title": "How could I manage all the template files?",
    "created_at": "2014-06-05T09:04:29Z",
    "updated_at": "2014-06-06T01:16:26Z",
    "body": "```\nCould I put the templates in different folders for maintainance and is there any build tool like grunt which can compress all the template files into one? If I put all the template script tags in index.html, it'll be a mess! Thank you~ :)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3178",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3178/comments",
    "title": "jQuery xhr success, error, and complete are deprecated",
    "created_at": "2014-06-05T08:12:58Z",
    "updated_at": "2014-06-05T16:49:44Z",
    "body": "In the [jQuery xhr documentation](http://api.jquery.com/jquery.ajax/#jqXHR), it mentions the following message:\n\n```\nDeprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are deprecated as of jQuery 1.8. To prepare your code for their eventual removal, use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead.\n```\n\nBackbone uses `xhr.success` and `xhr.error` in nearly all of its calls to `Backbone.ajax` via the `options` parameter.  It should probably be updated to use `done` an `fail`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3175",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3175/comments",
    "title": "router._extractParameters decode caused the issue",
    "created_at": "2014-06-04T21:44:31Z",
    "updated_at": "2014-06-05T04:26:44Z",
    "body": "Here is original test url fragment:\n# login?a=value&backUrl=https%3A%2F%2Fwww.msn.com%2Fidp%2Fidpdemo%3Fspid%3Dspdemo%26target%3Db\n\nAfter backbone router execution, I got below querystring:\na=value&backUrl=https://www.msn.com/idp/idpdemo?spid=spdemo&target=b\n\nwhich is hard to parse the querystring into correct parameters.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3171",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3171/comments",
    "title": ".toJSON([options]) ",
    "created_at": "2014-06-02T12:58:33Z",
    "updated_at": "2014-06-02T15:58:01Z",
    "body": "Regarding to documentation, [Model](https://github.com/jashkenas/backbone/blob/master/backbone.js#L296) and [Collection](https://github.com/jashkenas/backbone/blob/master/backbone.js#L645) an take optional `options` arguments, but as per code argument has never been used. \nThere can be 2 way:\n1) Remove argument from documentation and code\n2) update code with some functionality like:\n\n``` javascript\n...\n    toJSON: function(options) {\n      return _.omit(this.attributes, options);\n    },\n...\n```\n-  I guess this is most predictable usage for `options` argument.\n- `options` - can be an Array of keys, String or Function.\n- [_.omit](https://github.com/jashkenas/underscore/blob/master/underscore.js#L894-L923) - return new object, so don't need to do `_.clone`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3169",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3169/comments",
    "title": "Binary Search for Sorted Collections",
    "created_at": "2014-06-01T18:02:07Z",
    "updated_at": "2015-05-13T21:21:31Z",
    "body": "I am considering writing a small binary search function method for sorted collections. I would also modify the current `where` and `findWhere` methods in order to take advantage of this feature whenever possible (user search has only one field, which is the same as the comparator). This would offer a very significant reduction for searching already sorted collection to O(lg n). Furthermore, this speedup could be achieved by users without having to modify their code at all.\n\nIt may also be worth considering modifying the `Collection.set` method to offer O(n) insertion into sorted collections, as opposed to O(n lg n) currently achieved by re-sorting the entire collection. The main downside to this idea is that it may be slower if inserting many Models, not just one, because the collection is only re-sorted once in that case - so I think I will put this off in the meantime.\n\nIf I were to submit a pull request, would this be considered a desirable feature?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3168",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3168/comments",
    "title": "Get a error,  network problems?",
    "created_at": "2014-05-30T07:18:05Z",
    "updated_at": "2014-05-30T07:30:50Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3167",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3167/comments",
    "title": "Should internal variables be static properties of built-in classes?",
    "created_at": "2014-05-29T15:07:16Z",
    "updated_at": "2014-10-04T23:29:35Z",
    "body": "ie.\n\n``` js\nvar methods = [...];\nCollection.methods = [...];\n\nvar viewOptions = [...];\nView.viewOptions = [...];\n\nvar optionalParam = /\\((.*?)\\)/g;\nRouter.optionalParam = /\\((.*?)\\)/g;\n```\n\nAn example use case of this would be for the new Application class we're creating in Marionette where we need copies of `viewOptions` and some routing params. Right now, all that can be done is copying and pasting directly from the Backbone source.\n\nThis wouldn't change existing behavior, but a potential argument against this is that it would allow for monkey-patching. Although if someone is going to monkey patch a piece of backbone at least they can use clones of these values instead of copy and pasting them from the source.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3166",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3166/comments",
    "title": "Backbone's View constructor is adding a call to this.delegateEvents in the min version and the dev version is not",
    "created_at": "2014-05-28T03:34:11Z",
    "updated_at": "2014-05-28T17:14:28Z",
    "body": "```\nvar View = Backbone.View = function(options) {\n        this.cid = _.uniqueId('view');\n        options || (options = {});\n        _.extend(this, _.pick(options, viewOptions));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n};\n\nvar w = e.View = function (t) {\n        this.cid = i.uniqueId(\"view\");\n        t || (t = {});\n        i.extend(this, i.pick(t, E));\n        this._ensureElement();\n        this.initialize.apply(this, arguments);\n        this.delegateEvents()\n};\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3164",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3164/comments",
    "title": "model.cid can't loaded from JSON",
    "created_at": "2014-05-27T18:25:44Z",
    "updated_at": "2014-05-27T18:34:52Z",
    "body": "loaded = JSON.parse(loadedSubjects);\nsubjects = new Subjects(loaded); // put 2 models to Collection\nsubjects.models[0].cid; // c1\nsubjects = new Subjects(loaded);\nsubjects.models[0].cid; // c3 --> WAT???\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3163",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3163/comments",
    "title": "emulateHTTP overrides jQuery beforeSend",
    "created_at": "2014-05-27T15:30:11Z",
    "updated_at": "2014-08-08T08:54:13Z",
    "body": "Hi,\n\nIt seems that the current implementation of emulateHTTP overrides jQuery.ajaxSetup beforeSend.\n\nThis seems a bit destructive especially since parts of our app aren't using Backbone atm and relay on that trigger to add various properties we need to send to the server.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3162",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3162/comments",
    "title": "Unable to clear the earlier rendered View even after replacing the element",
    "created_at": "2014-05-26T19:32:16Z",
    "updated_at": "2014-09-11T15:29:00Z",
    "body": "I have been rendering a table data using Jquery tableData plugin within a common container. However after rendering the table in the container, the id for the table changes for the next time rendering. On each and every load, the container will be replaced with the newly built table.\n\nWe have been using the same view in some other cases but with different data.\n\nWhen i try to access the table from the container using $el, am  receiving the earlier table data. When i try to fetch it using Jquery or Javascript it's working fine.\n\nCould you please let me know what to do.\n\nThanks for your suggestion in Advance :) \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3161",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3161/comments",
    "title": "Model.prototype.chain",
    "created_at": "2014-05-26T10:26:04Z",
    "updated_at": "2014-05-27T18:53:06Z",
    "body": "Why there is still no `chain` method in Model's prototype, like it is done for Collection? \n\nIt is supposed that it will take model's attributes, like collection takes it's models. Like this:\n\n``` Javascript\nModel = Backbone.Model.extend({\n  defaults: function() {\n    return { a: 0, b: 1, c: 2 };\n  }\n});\n\nmodel = new Model;\nmodel.chain().pick(\"a\", \"b\", \"c\").values().compact().value() // [1, 2]\n```\n\nCould it be implemented?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3159",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3159/comments",
    "title": "Need help to parse the responce.",
    "created_at": "2014-05-22T17:55:22Z",
    "updated_at": "2014-05-23T12:04:43Z",
    "body": "Can anyone help me how write a parse method for the below response.? i tried for 2 days but not able to do it. FYI. The below response is a sharepoint 2013 response.\n\nResponse of a Model\n\n```\n{\"d\":{\"__metadata\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)\",\"etag\":\"W/\\\"1\\\"\",\"type\":\"Microsoft.SharePoint.DataService.FolderItem\"},\"Id\":2,\"ContentTypeID\":null,\"ContentType\":null,\"FolderName\":\"ABC\",\"Modified\":\"/Date(1400754050000)/\",\"Created\":\"/Date(1400754050000)/\",\"CreatedBy\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/CreatedBy\"}},\"CreatedById\":12,\"ModifiedBy\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/ModifiedBy\"}},\"ModifiedById\":12,\"Owshiddenversion\":1,\"Version\":\"1.0\",\"Attachments\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/Attachments\"}},\"Path\":\"/CapacityManagement/Lists/Folder\",\"FolderType\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/FolderType\"}},\"FolderTypeValue\":\"Team\",\"ParentFolderID\":0,\"Active\":true}}  \n```\n\nResponse of Collection:\n\n```\n{\"d\":{\"results\":\n[\n{\"__metadata\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(1)\",\"etag\":\"W/\\\"1\\\"\",\"type\":\"Microsoft.SharePoint.DataService.FolderItem\"},\"Id\":1,\"ContentTypeID\":\"0x010073700C0A28704498A168AA88DF5C2F6100C6F3E62244288B4984A6827C1CE19AD7\",\"ContentType\":\"ListFieldsContentType\",\"FolderName\":\"ABC\",\"Modified\":\"/Date(1400754031000)/\",\"Created\":\"/Date(1400754031000)/\",\"CreatedBy\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(1)/CreatedBy\"}},\"CreatedById\":12,\"ModifiedBy\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(1)/ModifiedBy\"}},\"ModifiedById\":12,\"Owshiddenversion\":1,\"Version\":\"1.0\",\"Attachments\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(1)/Attachments\"}},\"Path\":\"/CapacityManagement/Lists/Folder\",\"FolderType\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(1)/FolderType\"}},\"FolderTypeValue\":\"Team\",\"ParentFolderID\":0,\"Active\":true},\n{\"__metadata\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)\",\"etag\":\"W/\\\"1\\\"\",\"type\":\"Microsoft.SharePoint.DataService.FolderItem\"},\"Id\":2,\"ContentTypeID\":\"0x010073700C0A28704498A168AA88DF5C2F6100C6F3E62244288B4984A6827C1CE19AD7\",\"ContentType\":\"ListFieldsContentType\",\"FolderName\":\"ABC\",\"Modified\":\"/Date(1400754050000)/\",\"Created\":\"/Date(1400754050000)/\",\"CreatedBy\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/CreatedBy\"}},\"CreatedById\":12,\"ModifiedBy\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/ModifiedBy\"}},\"ModifiedById\":12,\"Owshiddenversion\":1,\"Version\":\"1.0\",\"Attachments\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/Attachments\"}},\"Path\":\"/CapacityManagement/Lists/Folder\",\"FolderType\":{\"__deferred\":{\"uri\":\"https://tcs857-4083bf1ee2fc09.sharepoint.com/CapacityManagement/_vti_bin/ListData.svc/Folder(2)/FolderType\"}},\"FolderTypeValue\":\"Team\",\"ParentFolderID\":0,\"Active\":true}\n]\n}}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3158",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3158/comments",
    "title": "Collection.sort always trigger event",
    "created_at": "2014-05-22T17:52:37Z",
    "updated_at": "2014-06-22T19:21:31Z",
    "body": "When I call `myCollection.sort()` (after a model change in my collection for example), `myCollection` will emit a `sort` event, even if the order didn't change.\n\nI don't think this event should be trigger if the order didn't change. \nBut before sending a PR, I would like to understand why it could be use full to keep this event or if it could be an improvement.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3157",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3157/comments",
    "title": "Collection.set() takes a long amount of time for high number of models",
    "created_at": "2014-05-21T12:06:37Z",
    "updated_at": "2014-05-21T15:11:35Z",
    "body": "I'm working on a Cordova based mobile app, utilising Backbone (employers choice, not personal). We have a collection that could contain up to 50k+ models. We stored these in WebSQL using a Backbone.sync adapter, and when we load the attributes from WebSQL the `collection.set` function takes a long amount of time to process on older mobile devices.\n\nIf there anyway to improve this function, or simply quickly add the models to the collection?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3156",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3156/comments",
    "title": "Backbone.$ cannot be initialized in Firefox addons",
    "created_at": "2014-05-20T01:53:50Z",
    "updated_at": "2014-05-21T23:46:09Z",
    "body": "When Backbone is require()'d in the \"main.js\" file of a Firefox addon, the jQuery property cannot be set because it is not writeable.\n\nThe Firefox Addon SDK defines a `require()` method, which is similar to `require()` in CJS environments, except that [objects that are required are frozen and cannot be written to](https://bugzilla.mozilla.org/show_bug.cgi?id=672199), so the workaround suggested in #2997 does not work, because setting `Backbone.$` is not permitted.\n\n```\n// main.js\nvar Backbone = require('backbone');\nBackbone.$ = require('jquery');\n```\n\nMoreover, writing to the global object is not permitted, so `root.jQuery` can not be set for use in:\n\n```\nroot.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n```\n\nChanging BBJS's UMD section to explicitly require jQuery would resolve this issue, though I understand that creating a hard dependency on jQuery would not be desirable:\n\n```\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n    factory(root, exports, _, require('jquery'));\n```\n\nUnfortunately, using this workaround solely for my project is not feasible, because Mozilla's [AMO review process](http://blog.mozilla.org/addons/2011/02/04/overview-amo-review-process/) discourages packaging modified versions of libraries.\n\nI'm not sure how this issue can be resolved, but I'd be happy to discuss some options.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3154",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3154/comments",
    "title": "Add a `shallowUrl` property to Model for shallow rails routes",
    "created_at": "2014-05-19T21:34:39Z",
    "updated_at": "2014-08-20T15:38:37Z",
    "body": "Currently the `url` method on Model uses a few rules to pick which property to use as the base. In this order:\n1.  Model::urlRoot\n2.  Collection::url\n\nFor the very common _rails_ case that a \"shallow\" api for maybe trello would look like this:\n\n/boards (member and collection routes)\n/boards/2\n/boards/1/lists (index and create actions are nested under a board member)\n/lists/2  (member routes are top level)\n/lists/2/cards (index and create actions are nested under list member)\n/cards/2\n\nThis is nice because given the id of any card we don't need or care about the id of its list or its lists board. Long urls like /boards/1/lists/2/cards/2 are ugly.\n\nRails even has some syntactic sugar for this `:shallow => true`\nhttp://edgeguides.rubyonrails.org/routing.html#nested-resources\n\nI propose a new check at the top of Model::url that will check the shallowApi property, then use the shallowUrl method to calculate the url and return. This method would require putting `url` in collection and `urlRoot` in the model and would provide for easily interacting with shallow apis.\n\nso if rails routes look like this\n\n``` rb\nresources :boards do\n  resources :lists, shallow: true\nend\nresources :lists, only: [] do\n  resources :cards, shallow: true\nend\n```\n\nI'll send a pull request showing how I might add this feature. :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3151",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3151/comments",
    "title": "AMD support breaks non AMD applications using global window.Backbone",
    "created_at": "2014-05-16T09:10:53Z",
    "updated_at": "2015-08-18T21:21:47Z",
    "body": "I tried updating to the latest Backbone version 1.1.2 today, sadly this seems to break our legacy code that is not using AMD (at least not in every part of the application).\nThe global reference to window.Backbone seems to be missing:\n\n> Uncaught ReferenceError: Backbone is not defined\n\nI think this is due to the fact, that Backbone will be attached to the window in the AMD factory/callback:\n\n```\ndefine(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n```\n\nThis one will only be executed on the first (at least with using almond.js or similar)\n\n```\nrequire('backbone', ...)\n```\n\nWhich, from my perspective, makes sense, since you don't want to execute a factory unless the module is really required.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3150",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3150/comments",
    "title": "for use in version 1.1.2 throw a error ",
    "created_at": "2014-05-15T01:40:57Z",
    "updated_at": "2014-05-15T04:53:39Z",
    "body": "TypeError: invalid 'instanceof' operand Backbone.$\nhttp://assets.spmjs.org/gallery/backbone/1.1.2/backbone-debug.js\nLine 944\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3149",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3149/comments",
    "title": "How to access a huge JSON coming (from a spring RESTful Service) in a spring MVC app using RestTemplate",
    "created_at": "2014-05-14T20:11:38Z",
    "updated_at": "2014-05-14T20:35:14Z",
    "body": "My Spring RESTful web service is returning a JSON form of- [{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"},{\"key4\":\"value4\",\"key5\":\"value5\",\"key6\":\"value6\"}] Now when my spring MVC app, try to access it, to show in a JSP then Exception occurs saying-no suitable HttpMessageConverter found Please help me where I going wrong.Here is my code-\n\nInside @Controller class of my spring MVC app calling the RESTful service\n\n//**com.songs.controllers.FrontSongController.java**\n\n@RequestMapping(value=\"/alls\",method=RequestMethod.POST)\npublic String getAllSongs(ModelMap md)\n{ \n    HttpHeaders headers = new HttpHeaders();\n    headers.setContentType(MediaType.APPLICATION_JSON);\n    headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));\n    HttpEntity<String> entity = new HttpEntity<String>(headers);\n    String url=\"http://localhost:7001/SongAppWS/songappWS/allsongsWS\";\n    RestTemplate rt=new RestTemplate();\n\n```\n//SongResource.class is for representation on incoming JSON see below for its code\n//This is the line no 48 that you will see in below browser logs\n\nResponseEntity<SongResource> listofallsongs=rt.exchange(url,HttpMethod.GET,entity,  SongResource.class);\n```\n\nmd.addAttribute(\"listname\", \"Songs available in the repository:\");\nSystem.out.println(\"Response Entity object= \"+listofallsongs);\n    System.out.println(\"Response Entity body= \"+listofallsongs.getBody().toString());\nreturn \"Sucess\";  \n}\nInside config-servlet.xml of my spring MVC app calling the RESTful service\n\n<context:component-scan base-package=\"com.songs.controllers\" />\n<mvc:annotation-driven />\ncontext:annotation-config/ \n<bean class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\"></bean>\n<bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"></bean>\n<bean  class=\"org.springframework.web.client.RestTemplate\">\n    <property name=\"messageConverters\">\n        <list>\n            <bean class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"/>\n        </list>\n    </property>\n</bean>\n<bean id=\"viewResolver\" class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\">\n<property name=\"viewClass\" value=\"org.springframework.web.servlet.view.JstlView\" />\n<property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\n<property name=\"suffix\" value=\".jsp\" />\n</bean>\nInside SongResource.java of my spring MVC app, which I am trying to use for converting the coming JSON to my SongResource.class object, that my spring MVC app can use in a jsp\n\n//**com.songs.service.resource.SongResource.java**\n\npublic class SongResource \n{\n    private String name;\n    private String film;\n    private String singer;\n    public SongResource(String name,String film,String singer)\n    {\n    this.name=name;\n    this.film=film;\n    this.singer=singer; \n    }\n    //setter & getters of all above\n}\nOn calling the spring REST service from my spring MVC app the browser is saying as below-\n\nError 500--Internal Server Error\norg.springframework.web.client.RestClientException: Could not extract response: no suitable     HttpMessageConverter found for response type [com.songs.service.resource.SongResource] and content type  [application/json]\nat   org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java  :77)\n    at org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(RestTemplate.java:619)\nat org.springframework.web.client.RestTemplate$ResponseEntityResponseExtractor.extractData(RestTemplate.java:1)\nat org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:446)\nat org.springframework.web.client.RestTemplate.execute(RestTemplate.java:401)\nat org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:377)\nat com.songs.controllers.FrontSongController.getAllSongs(FrontSongController.java:48)\n//and so on\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3147",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3147/comments",
    "title": "using idAttribute with nested id object",
    "created_at": "2014-05-12T08:45:59Z",
    "updated_at": "2014-05-14T18:37:18Z",
    "body": "I'm not sure that it is a common usecase.\nsome of the rest services i'm working with, return id as a literal json object:\n\n``` javascript\n{\n  id: {\n    unique: 'ePFRUfYBkeQ2ncpP9OLHKB0fDw4/p5CO_WJSn0qjUskObwvhC2wyHW0',\n    tag: 'music'\n  },\n  title: 'Punk Floyd Live'\n}\n```\n\nShould there be support for allowing nested id value to be extracted in favor of the id attribute?\n\n``` javascript\nvar Video = Backbone.Model.extend({\n  idAttribute: 'id.uniquw'\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3145",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3145/comments",
    "title": "Collection#set cannot handle deduplicating models if the idAttribute is nested",
    "created_at": "2014-05-07T01:18:55Z",
    "updated_at": "2015-05-13T21:22:17Z",
    "body": "Maybe this should call idAttribute if it is a function?\n\nMy use case is objects nested under a key for the model type, basically what rails does by default.\nI have this little patch which helps wrap/unwrap in most places: https://gist.github.com/trydionel/719080\n\nMy model for the collection is:\n\n``` javascript\n  model: function(attrs, options) {\n    if (attrs && attrs['folder']) {\n      return new Doppio.Models.Folder(attrs, options);\n    } else {\n      return new Doppio.Models.File(attrs, options);\n    }\n  }\n```\n\nI can change it to a more advanced function:\n\n``` javascript\n  model: Backbone.Model.extend({\n    constructor: function(attrs, options) {\n      if (attrs && attrs['folder']) {\n        return new Doppio.Models.Folder(attrs, options);\n      } else {\n        return new Doppio.Models.File(attrs, options);\n      }\n    },\n\n    idAttribute: 'id'\n  })\n```\n\nBut I am still limited here because Backbone is going to use string notation on the attributes object (https://github.com/jashkenas/backbone/blob/master/backbone.js#L705):\n\n``` javascript\nid = attrs[this.model.prototype.idAttribute || 'id'];\n```\n\nIn my case the object looks like:\n\n``` javascript\n{file: \n  {\n    id: '4'\n  }\n}\n```\n\nThere is no way using that notation to get to the id, `attrs['file.id']` or something doesn't work.\n\nPerhaps it should be a function that receives attrs?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3143",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3143/comments",
    "title": "Why do router callback params have a trailing null?",
    "created_at": "2014-05-06T20:49:33Z",
    "updated_at": "2014-05-06T22:37:23Z",
    "body": "I was writing some Jasmine tests for my router as such:\n\n```\nroutes : { \"foo(/:bar)\" : \"fooRoute\"}\n\nfooRoute: function(bar) { //... }\n```\n\nWith the test:\n\n```\n    it(\"takes an argument\", function() {\n      var routeSpy = spyOn(this.router, \"fooRoute\");\n      var bar = \"testing123\";\n\n      this.router.bind(\"route:fooRoute\", routeSpy, this);\n\n      this.router.navigate(\"foo/\" + bar, {trigger: true});\n\n      expect(routeSpy).toHaveBeenCalledWith(bar);\n    });\n```\n\nBut this fails with the following error:\n\n```\nExpected spy fooRoute to have been called with [ 'testing123' ] but actual calls were [ 'testing123', null ].\n```\n\nThis seems odd to me. So I check it out. I do this in the browser (outside of Jasmine):\n\n```\nfooRoute: function(bar) { console.log(arguments); }\n```\n\nWhen I visit the route at #foo/testing123, this outputs:\n\n```\n[\"testing123\", null]\n```\n\nSo I'm curious, why is there a trailing null appended to the arguments being passed to the route callback? I realize its not really harming anyone, but it means I have to write some janky garbage in my tests now.\n\n```\nexpect(routeSpy).toHaveBeenCalledWith(bar, null);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3142",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3142/comments",
    "title": "Backbone Collection get returns undefined even if the model exists",
    "created_at": "2014-05-06T13:56:04Z",
    "updated_at": "2017-01-12T22:32:55Z",
    "body": "hi."
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3141",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3141/comments",
    "title": "minified 1.1.2 doesn't correspond to source",
    "created_at": "2014-05-05T15:11:11Z",
    "updated_at": "2014-05-05T15:21:37Z",
    "body": "Hello!\n\nI found that `Router.route` method in [minified](https://github.com/jashkenas/backbone/blob/master/backbone-min.js) version:\n\n``` javascript\nroute:function(t,r,s){if(!i.isRegExp(t))t=this._routeToRegExp(t);if(i.isFunction(r)){s=r;r=\"\"}if(!s)s=this[r];var n=this;e.history.route(t,function(i){var a=n._extractParameters(t,i);n.execute(s,a);n.trigger.apply(n,[\"route:\"+r].concat(a));n.trigger(\"route\",r,a);e.history.trigger(\"route\",n,r,a)});return this}\n```\n\nexactly this code (at pos 15214):\n\n``` javascript\nn.execute(s,a);n.trigger.apply(n,[\"route:\"+r].concat(a));n.trigger(\"route\",r,a);e.history.trigger(\"route\",n,r,a)});return this}\n```\n\n doesn't correspond to [full](https://github.com/jashkenas/backbone/blob/master/backbone.js) source version:\n\n``` javascript\n// lineno: 1312\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n```\n\nin this case, `execute` called with three arguments, and also check for return value is present:\n\n``` javascript\nif (router.execute(callback, args, name) !== false)\n```\n\nso, when I override `execute` method using minified version I have undefined `name` argument.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3139",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3139/comments",
    "title": "Collection's model field to optionally be a function",
    "created_at": "2014-05-02T19:14:37Z",
    "updated_at": "2014-05-04T13:52:45Z",
    "body": "Is there a reason why model isn't obtained via _.result in Collection's _prepareModel?\n\nMy goal is to have a collection of models of the same base class but different specializations. \n\nExample:\n\n``` coffeescript\nclass Book extends Backbone.Model\n\nclass EBook extends Book\n\nclass Books extends Backbone.Collection\n    model: (attrs) ->\n        BooksFactory.getClass attrs\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3138",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3138/comments",
    "title": "Which browser versions are supported?",
    "created_at": "2014-04-24T22:51:58Z",
    "updated_at": "2014-05-01T15:21:34Z",
    "body": "Hello,\nI did not find information about supported browsers, so I am asking here:\n- Which browser versions are currently supported by Backbone.js?\n- Is it planned to abandon older versions in a near future?\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3137",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3137/comments",
    "title": "className function call order",
    "created_at": "2014-04-24T21:33:14Z",
    "updated_at": "2014-04-24T21:44:21Z",
    "body": "I would like to give my `Backbone.View` subclass a `className` that is set at runtime.  I planned on doing this by passing a parameter to `className` via the `options` parameter in the `initialize` method.  Something like this:\n\n```\nclass MyView extends Backbone.View\n  className: ->\n    \"#{@pluralName}-layout\"\n\n  initialize: (options) ->\n    @pluralName = options.pluralName\n    super options\n```\n\nUnfortunately, `className` is called prior to `initialize`.  If I instead assign `@pluralName` in the constructor like this:\n\n```\n  constructor: (options) ->\n    @pluralName = options.pluralName\n    super options\n```\n\nAll is well.  Is this a bug or a feature?  Why isn't `className` called after `initialize`?  If this is a feature, how can I tell what is and what is not called after `initialize`?\n\nErroneously asked first here: https://github.com/marionettejs/backbone.marionette/issues/1226.\n\nLike Marionette, thanks for the awesome tool as well!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3134",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3134/comments",
    "title": "Collection.model not called with collection as context",
    "created_at": "2014-04-24T15:45:52Z",
    "updated_at": "2014-05-05T13:46:08Z",
    "body": "The issue can be demonstrated with the following code:\n\n```\nvar modelContext;\n\nvar C = Backbone.Collection.extend({\n    model: function() {\n        modelContext = this;\n        return new Backbone.Model();\n    }\n});\n\nvar c = new C();\n\nc.add({foo:\"bar\"});\n\nconsole.log(\"The model function is not called in the collection context\", c===modelContext);\n```\n\nThe console.log will be false because the function is not called with the collection object as context.\n\nSeems to be a problem with Collection._prepareModel, it always calls `new this.model()`\n\nI was beating my head on this for a while today when I wanted to access a collection attribute in the model function. Seems like `_prepareModel` should somehow check if the model is a constructor vs a regular fn (not sure if that is possible) or the docs should be updated to be clear about what context this function gets called in. Note, you can still access the collection in the `model` function, just as `options.collection` rather than `this`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3130",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3130/comments",
    "title": "save() example bug on main backbonejs.org page",
    "created_at": "2014-04-23T14:32:43Z",
    "updated_at": "2014-04-23T15:19:12Z",
    "body": "In the main documentation of Backbonejs.org (the homepage) navigate to the \"save\" function reference. In the book example, press the \"Play\" button. According to the documentation, Backbone.sync should receive a \"create\" request the first time and an \"update\" request the second time. However, a \"create\" request is sent both times. \n\nI'm not sure if the example code is incorrect or the documentation is incorrect. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3128",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3128/comments",
    "title": "Android web browser  turns Backbone.history.history into null pointer sometimes",
    "created_at": "2014-04-23T00:17:19Z",
    "updated_at": "2014-09-25T16:24:56Z",
    "body": "Yes. an actual real, weird null pointer that is not \"javascript\" null, or undefined, or any javascript value at all. The JS process simply dies when javascript attempts to do anything at all with it. Or, you can trap it with try/catch, and it looks a little like Backbone.history.history is an \"<<error>>\".\n\n Using a Galaxy SII tablet. with an 4x os (not sure of the point releases)\n\nThe WHEN this happens, is when you're in a backbone 1 page app , with the html5 history API enabled in backbone- and you click a normal link and actually leave that one page. Then if you press the back button to return to the Backbone app, Android browser makes its attempt to reconstruct the in-memory image of the page. But it does this silly thing where it constructs a new window.history object and apparently garbage collects the one that Backbone grabbed when it first initialised! Didn't count that reference did it.\n\nTo work around this, I either have to patch backbone, or manually do this:\nBackbone.history.history = window.history\nbefore any code that might cause Backbone to touch Backbone.history.history.\n\nMight want to replace that local pointer more often. Or don't use a local pointer at all. Just reference window.history directly.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3124",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3124/comments",
    "title": "Get a value from calling trigger()",
    "created_at": "2014-04-17T16:25:49Z",
    "updated_at": "2014-04-17T17:04:23Z",
    "body": "Get a false value from calling trigger() if event handler returns false,\nit's useful maybe. so that I can decide to do(or do not) a default action.\nI have implemented it but the chainable test is failed.\n\n```\nif(this.trigger(\"form:submit\") !== false){\n    // do something\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3123",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3123/comments",
    "title": "Fragment matching on popstate checkUrl()",
    "created_at": "2014-04-17T15:53:11Z",
    "updated_at": "2014-04-17T17:27:04Z",
    "body": "There is a strange behavior in our application where under certain conditions; the history is incorrectly changed during popstate.\n\nThe scenario is the following:\n\nFirst, History's navigate() is called with an encoded fragment. Per the documentation:\n\n```\n//  You are responsible for properly URL-encoding the fragment in advance.\nnavigate: function(fragment, options) {}\n```\n\nWe can then see that the fragment is stored on the history object:\n\n```\nthis.fragment = fragment;\n```\n\n... so we understand this.fragment holds an encoded path string.\n\nIn the case of pushState, a listener is added to the popstate event which fires checkUrl():\n\n```\naddEventListener('popstate', this.checkUrl, false);\n```\n\nWhen fired, the listener (checkUrl) responds:\n\n```\n// Checks the current URL to see if it has changed, and if it has, calls `loadUrl`\ncheckUrl: function(e) {\n      var current = this.getFragment();\n      .\n      .\n      if (current === this.fragment) return false;\n}\n```\n\nAs you can see, backbone does a check to make sure the url has not changed, so loadUrl should not get called. \n\nHowever, the getFragment() function always returns a DECODED string, because decodeURI() is called on the location. i.e.:\n\n```\nif ('shop/search?keyword=short dress' === 'shop/search?keyword=short%20dress') {\n  // will never execute\n}\n```\n\nTherefore, this boolean if (current === this.fragment) does not evaluate to TRUE, and loadUrl() is incorrectly called - causing errors in our application (e.g. items removed from pushState history when they should not be).\n\nIf I call navigate() without encoding the uri, this condition will correctly execute, but there is the potential of an invalid url if special characters exist in the fragment.\n\nI see this issue exists in stable 1.1.2 (which is what we are using), as well as the current master. There is a slight difference in getFragment(), but even in the latest code, decodeURI() is called before checking against the encoded fragment stored in the context of navigate().\n\nI see that checkUrl() and getFragment() are called everywhere, and I'm certain that decodeURI() is happening for a reason. But it seems this case was not considered.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3122",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3122/comments",
    "title": "Model Silent Save",
    "created_at": "2014-04-16T22:57:39Z",
    "updated_at": "2014-04-17T13:35:29Z",
    "body": "Sorry to bring this back up from #679 but was trying the same situation and not sure if this is working as expected. If I try:\n\n`model.save({}, {silent:true})`\n\nThis will still fire \"sync\" event even though silent:true was passed.\n\nI see https://github.com/jashkenas/backbone/blob/master/backbone.js#L511 and looks like the trigger for sync event is always being fired on success callback on model save?\n\nIf i look at options object prior to trigger, silent is a defined property with value of true but the trigger is not inside an `if(!options.silent)` or `if(!silent)` block like https://github.com/jashkenas/backbone/blob/master/backbone.js#L378 or\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L388\n\nNot sure if this was done on purpose and I could be missing something.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3121",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3121/comments",
    "title": "NuGet Package Dependancy Problem",
    "created_at": "2014-04-15T00:59:49Z",
    "updated_at": "2014-04-15T16:00:22Z",
    "body": "Hi Jeremy,\n\nThe [Backbone.js v1.1.0](www.nuget.org/packages/Backbone.js/1.1.0) [nuget.org] package still depends on underscore.js > 1.3.1. Could you please update this for people using NuGet.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3119",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3119/comments",
    "title": "Complement for parse",
    "created_at": "2014-04-11T08:26:56Z",
    "updated_at": "2014-04-11T13:51:37Z",
    "body": "Hello,\n\nSome of my models have timestamp fields that the server sends/receives as UTC. In my app though I like to work with Moment.js objects.\n\nWhen I receive a response from the server, I use `parse` to transform the UTC string to an object. However, when I send data there's no complementing (`export`?) function I can use.\n\nWould it make sense to add such a function that, similar to `parse`, would be a no-op, but otherwise will let you process the attributes before they're sent to the server...?\n\n(if not, could anyone point me in a better direction? :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3118",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3118/comments",
    "title": "After a successful collection.create(), can't do a collection.get( id ). ",
    "created_at": "2014-04-10T19:44:41Z",
    "updated_at": "2014-04-10T19:51:01Z",
    "body": "Hey, so I think there's a bug in in the collection.create method.  After a successful Collection.create([ new model ], {waits: true}), the Posted new model returns with the model with a newly generated ID.  It would be nice that since \"wait\" is set to true, when the model is added to the collection, the ID gets assigned to that model in the collection.  Basically the model is added to the collection with the new ID, but the \"_byId\" doesn't get updated with reference to the \"ID\". I'll work on a pull request and show you what I was expecting.  Let me know how you guys feel about that. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3113",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3113/comments",
    "title": "Single Model in multiple collections?",
    "created_at": "2014-04-08T08:05:42Z",
    "updated_at": "2016-01-31T06:44:05Z",
    "body": "Example detailing the issue:\nhttp://stackoverflow.com/questions/22838095/can-a-single-backbone-model-instance-be-in-two-collections-at-once\n\nWhile it's clear from that answer that models can be placed in multiple without any problems, but I've noticed that at least one plugin relies on detecting that a model is part of a particular extension by querying the model.collection property. Since this property only allow one collection, this often throws errors.  Would it be possible, or advisable, to make this property into an array of all the collections of which the model is a member?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3112",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3112/comments",
    "title": "History API is disable in Chrome Packaged app, any solution to make it work?",
    "created_at": "2014-04-08T03:03:04Z",
    "updated_at": "2014-04-08T14:01:49Z",
    "body": "As in the list of APIs disabled in packaged apps, history API is not available.\nhttp://developer.chrome.com/apps/app_deprecated.html\nPackage app is still a good type of project that people use Backbone in it. As I found that the router( that works in a normal webpage) failed to work as a packaged app. Every time I trigger a navigate event, it gives an error:\n\n```\nCan't open same-window link to \"chrome-extension://bbjicdnmdhkfnlhfohopadnsdfsf/#\"; try target=\"_blank\".\n```\n\nIs there any solution for that I can make it work instead of by replacing the router?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3110",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3110/comments",
    "title": "`options.at` value unhelpful during bulk `collection.add` operations",
    "created_at": "2014-04-07T16:51:28Z",
    "updated_at": "2014-04-07T20:43:06Z",
    "body": "Consider the following scenario:\n\n```\n// Let's create a collection\nvar MyCollection = new Backbone.Collection();\n\n// Let's subscribe to all 'add' events for the collection\nMyCollection.on('add', function (model, collection, options) {\n    // We'll just print the model and options given to us\n    console.log(model, options)\n});\n\n// Let's add 3 items to the collection in a single .add() operation at the first index\nMyCollection.add([{id: 1}, {id: 2}, {id: 3}], {at: 0});\n```\n\nI'm expecting to see the following printed out:\n-> Backbone.Model(id:1), {at: 0}\n-> Backbone.Model(id:2), {at: 1}\n-> Backbone.Model(id:3), {at: 2}\n\nHowever, instead, I get this:\n-> Backbone.Model(id:1), {at: 0}\n-> Backbone.Model(id:2), {at: 0}\n-> Backbone.Model(id:3), {at: 0}\n\nThe 'at' value is always 0 even though that specific model was not inserted at index 0.\n\nIs this intended behavior? It seems undesirable to me. I would expect the 'at' value to correctly display the index of each individual model during a bulk operation such as this one.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3108",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3108/comments",
    "title": "Allow proxying of options to 'url(...)' via 'fetch(...)'.",
    "created_at": "2014-04-07T00:53:10Z",
    "updated_at": "2014-04-08T03:07:48Z",
    "body": "This has been discussed before here:\n\nhttps://github.com/jashkenas/backbone/pull/506\n\nit would be very useful to proxy arguments to the 'url(...)' methods in collections and models via the 'fetch(...)' methods, in fact I recently tweaked the backbone and underscore I'm using in the project I'm working on to accomplish that.\n\nThe 'url(...)' method should be able to translate various options passed by the logic calling 'fetch(...)' into a proper URL, and the only proper way to accomplish that is to allow proxying an options object via 'fetch(...)'.  Translating the options into a URL in logic outside of the 'url(...)' method would violate the Principle of the Separation of Concerns.\n\nThe use case for which this is required is when a user action or an event requires fetching multiple URLs in parallel. There is currently no way to have the 'url()' methods generate different URLs when the application state does not change between calls to 'fetch(...)'.\n\nI'm planning to send some pull requests that will work with the latest code.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3105",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3105/comments",
    "title": "Backbone.Model.save not calling success/error functions",
    "created_at": "2014-04-02T20:37:50Z",
    "updated_at": "2014-04-02T20:56:56Z",
    "body": "Looks like `(_.isObject(serverAttrs) && !model.set(serverAttrs, options))` is true because our backend is not passing the object back and this causes the success AND error method to never execute.  \n\n```\n  var success = options.success;\n  options.success = function(resp) {\n    // Ensure attributes are restored during synchronous saves.\n    model.attributes = attributes;\n    var serverAttrs = model.parse(resp, options);\n    if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n    if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\n      return false;\n    }\n    if (success) success(model, resp, options);\n    model.trigger('sync', model, resp, options);\n  };\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3104",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3104/comments",
    "title": "Router parsing of fragment hash causes information to be lost or misinterpreted",
    "created_at": "2014-04-02T07:58:25Z",
    "updated_at": "2016-04-15T12:11:23Z",
    "body": "The general code setup:\n\nBackbone.Router.extend({\n    routes: {\n        '*query': 'onQueryRoute'\n    },\n    initialize: function() {\n        Backbone.history.start();\n    },\n    onQueryRoute: function(query) {\n        // \"query\" is impossible to reliably parse as a query string\n        // due to full-string url-decode on line 1306 of backbone.js\n        // inside of _extractParameters().\n    }\n});\n\nHere's the scenario. Imagine I have a single query parameter with an arbitrary value that happens to contain \"1&bar=2\".\nSo I construct my fragment string like so:\n\nvar value = encodeURIComponent(\"1&bar=2\");\nrouter.navigate(\"foo=\" + value);\n\nWhen I refresh the page and my onQueryRoute event handler gets called, I will receive this string: \"foo=1&bar=2\", which is obviously impossible to parse now because it can be interpreted as two\nquery parameters when it should actually only be one. This is happening because on line 1306 inside of _extractParamters(), you are url-decoding the _whole_ fragment hash without splitting it first.\n\nIn my particular use-case, the query parameters are not fixed; there can be an arbitrary number of them so I can't easily set a route regex that automatically parses the individual values. The structure of my URL is like this: key1[0]=value1&key2[0]=value2&key1[1]=...&foo=bar&baz=blah\n\nThe execute() preprocessor method is useless here because it gets called _after_ _extractParameters() has mangled the hash string by url-decoding it whole without splitting it first by default. My current workaround is to override the method with this:\n        _extractParameters: function(route, fragment) {\n            return Backbone.Router.prototype._extractParameters\n                   .call(this, route, encodeURIComponent(fragment));\n        }\n\nI basically url-encode it again before passing it back to the original implementation so that when I get it in my callback, I get the original version that I can proceed to parse normally. This is not very efficient and I'd like to see this fixed properly in the source.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3103",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3103/comments",
    "title": "Can I delegate an event to a element outside a view element from the same view?",
    "created_at": "2014-04-01T22:03:12Z",
    "updated_at": "2014-04-01T22:06:39Z",
    "body": "For example I have a set of many Backbone.View elements, every one of them with its click event that calls a function which add a css border (as a selected element) to the view. Well that's not my problem. What I need to do is to delegate an event when I click outside of those view elements and calls a function that deselects the views.\n\nI don't want to do something like:\n\n```\ndocument.body.addEventListener(\"click\", deselectAll);\n```\n\nbecause I would be mixing the logic of the views + the logic of the body element, and that's not a good practice, and is not so modular.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3102",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3102/comments",
    "title": "requireJS and jquery",
    "created_at": "2014-04-01T14:27:42Z",
    "updated_at": "2014-04-01T22:48:43Z",
    "body": "I'm loading jquery without requireJS and Backbone and Underscore with it. RequireJS throws an error because 'jquery' can not be found - of course I'm not specifying the path of 'jquery' in require.config. So it is not possible to set Backbone.$ = $;\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3101",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3101/comments",
    "title": "No way to execute route without mutating history first",
    "created_at": "2014-04-01T02:31:19Z",
    "updated_at": "2014-06-10T21:15:58Z",
    "body": "I'm working on an extension that allows programatic execution of a route where the callback is fired first, and if the callback succeeds, then the hash and history are mutated. One issue with such an approach is that, just as it was [discussed in a previous issue](https://github.com/jashkenas/backbone/pull/3016#issuecomment-35826941), the only way to retrieve the hash in the Router `execute()` function is by accessing `Backbone.history`. If `Backbone.history` has not yet been updated, **I don't see any way to access the hash** in order to push it onto the history stack.\n\nAs far as I can tell, the simplest workaround is to add a `fragment` parameter to execute, right after the `name` parameter. Another option would be to roll the `name` and `fragment` into an `options` object. With the later solution, we could additionally add an `options` parameter to `loadUrl()` that could be mixed in to the `options` object passed to `execute()`. This could potentially add greater flexibility for extending how routes are handled. If either of these solutions sound reasonable, I can submit a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3100",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3100/comments",
    "title": "Model.hasChanged returns true after change event ends",
    "created_at": "2014-03-31T18:18:53Z",
    "updated_at": "2014-04-01T02:08:39Z",
    "body": "Docs have this note:\n\n> hasChanged\n> Note that this method, and the following change-related ones, are only useful during the course of a \"change\" event.\n\nBut hasChanged continues to return `true` after the \"change\" event has ended.  Are the docs wrong, or can we change this behavior to match the docs?\n\n---\n\nMy specific use case is that I have two model attributes that are kept in-sync.  Maybe my design is flawed to begin with, but here's an analogy:\n\nLocation = Backbone.Model.extend({\n    initialize: function() {\n        this.on('change:city', this._updateState, this);\n        this.on('change:state', this._updateCity, this);\n    },\n\n```\n_updateState: function() {\n    // Avoid causing recursion.\n    if (this.hasChanged('state')) return;\n\n    this.set('state', stateForCity(this.get('city')));\n},\n\n_updateCity: function() {\n    // Avoid causing recursion.\n    if (this.hasChanged('city')) return;\n\n    this.set('city', citiesForState(this.get('state'))[0]);\n}\n```\n\n});\n\nThis allows:\n\n1 - listeners who only care about one or the other to listen directly to that attribute's \"change\" event\n2 - avoid computing values more than once\n3 - the user can change either one and the other will get updated appropriately\n\nIs there a better design pattern for something like this?  I could store a `'cityState'` property as `{city: 'Houston', state: 'TX'}`, but then I would have to do my own change detection... `model.previous('cityState').state == model.get('cityState').state`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3099",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3099/comments",
    "title": "Router fails to load optional query param",
    "created_at": "2014-03-31T13:39:12Z",
    "updated_at": "2014-03-31T14:56:59Z",
    "body": "I tried with an url like this-\npath/:pathParam1?queryParam1=:q1&queryParam2=:q2(&queryParam3=:q3)\n\nIt appends the the last param (q3), if supplied with q2.\n\nmodifying it like -\npath/:pathParam1?queryParam1=:q1&queryParam2=:q2&(queryParam3=:q3)\nsolves this issue but when the optional parameter is absent, the url has to be like \npath/p1?queryParam1=qp1&queryParam2=qp2&\n\n(You have to supply the dangling '&', which is not quite desirable.)\n\nIs there any particular reason for which you have not considered to add '&' as another delimiter in the regular expression('([^/?]+)') replacing  'namedParam'?\n\nLet me know if I'm missing something.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3097",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3097/comments",
    "title": "Any reason to ignore the minified files in bower.json?",
    "created_at": "2014-03-28T23:18:42Z",
    "updated_at": "2015-08-24T10:21:29Z",
    "body": "According to the bower.json spec, recommends to not include the minified version in the \"main\" attribute.  But I'm wondering if there is any reason to ignore it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3095",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3095/comments",
    "title": "CRUD to HTTP method default mapping",
    "created_at": "2014-03-28T15:09:59Z",
    "updated_at": "2014-03-28T16:36:14Z",
    "body": "Hi!\nI attended a very interesting talk about REST APIs design (here are the slides: http://goo.gl/kju5Bi), the speaker had a very thorough knowledge of the subject and in a sequence of slides, the recommendation was to use HTTP POST method to update resources (ideally PATCH indeed) and HTTP PUT to create resources, since PUT is idempotent while POST may or not be idempotent. Using PUT, the whole representation of the resource is sent, no partial update allowed. The resource is overwritten in the database.\n\nSo why in the default CRUD to HTTP method mapping of Backbone, a CREATE operation is mapped to the HTTP POST method and an UPDATE operation to a HTTP POST method ? I am not an expert of REST, but shouldn't it be the opposite ? Are there any other considerations that led to this mapping ?\n\nThanks for your feedback !\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3093",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3093/comments",
    "title": "Problems with collections included in a template",
    "created_at": "2014-03-27T23:03:04Z",
    "updated_at": "2014-04-02T15:01:51Z",
    "body": "Hi - I have a template linked with a view of a model. The object modeled is associated with two collections that I have, so in the view's 'render' function, I have this:\n\nvar phones = PhoneCollection.phones();\nphones.fetch({renew: true});\nvar addresses = AddressCollection.addresses();\naddresses.fetch({renew: true});\n\nand then in the model's 'fetch', when I declare the 'success' function, I pass in phones.models and addresses.models.\n\nThe problem is that sometimes the collections appear and sometimes they don't. I have had occasions on which I have accessed the view for the first time and the collections didn't show up, but refreshing the page revealed them, and other occasions that required me to renavigate to the home page of the application.\n\nAm I doing something wrong?\n\nThanks for any help;\n\nGarey Mills\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3086",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3086/comments",
    "title": "Insertion sort on add method that should sort.",
    "created_at": "2014-03-21T10:32:51Z",
    "updated_at": "2014-03-25T18:14:11Z",
    "body": "Wouldn't it be better if `add` method was implemented using a [insertion sort](http://pt.wikipedia.org/wiki/Insertion_sort) instead of sorting all collection again?  https://github.com/jashkenas/backbone/blob/master/backbone.js#L771\n\nIt gets even worst when we take a look on how many times the set is traversed by _.sortBy (one for pluck, another for native code .sort()). Knowing that collection is so far sorted give us the ability to iterate a minimum of times.\n\nThe fastest sorting method for a set not sorted is the [quick sort](http://pt.wikipedia.org/wiki/Quick_sort), but its worst case is when is already sorted. The only one to know whether is sorted or not, isn't the native code, but we instead.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3081",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3081/comments",
    "title": "backbone local storage",
    "created_at": "2014-03-20T13:02:54Z",
    "updated_at": "2014-03-20T15:10:06Z",
    "body": "hello, As presently i'm working on backbonejs, i want to know is there any method to save data locally or temporarily, i mean, no need to send data to server,..but i dont wanna use backbone.localstorage.js as it completely removes the option to store data into the server,..i want to use both of them i.e storing locally and sending it to server,..as per my need,..how can i do this,...please help me,..\n\n```\n                            Thanks in advance\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3080",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3080/comments",
    "title": "Questions about generateId",
    "created_at": "2014-03-19T21:52:54Z",
    "updated_at": "2014-04-23T18:11:17Z",
    "body": "Alright, so I was admittedly in favor of `generateId` mainly because it could be used for things like composite keys, and allow for different models to be grouped together into one collection even if they had conflicting `idAttribute`'s.\n\nBut now that I'm playing around with it in practice, it feels like half the solution... since it actually sets the `model.id` attribute and isn't just used for collection purposes, it breaks the \"url\" construction magic, unless you want your \"generated\" id to act as your restful endpoint identifier. And if it is intended to be used as the restful endpoint identifier, you'd presumably be sending that as the id from the server in the first place.\n\n@caseywebdev just wanted to get your opinions on this, is this something you've run into in the situations you've used it in? Alternatively, would it make sense for this to be defined as a method on the collection rather than the model?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3079",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3079/comments",
    "title": "A \"url\" property or function must be specified for collection error",
    "created_at": "2014-03-19T18:09:08Z",
    "updated_at": "2014-03-23T21:49:25Z",
    "body": "Unable to do the following:\n\nvar collection = new Collection([], {\n    url: 'http://.....'\n});\n\nI get the following error with latest version:\n\nUncaught Error: A \"url\" property or function must be specified.\n\nVersion 1.0.0 works fine.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3078",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3078/comments",
    "title": "Proposal: Backbone.Router.execute add action name to arguments",
    "created_at": "2014-03-19T15:27:22Z",
    "updated_at": "2016-01-20T19:39:13Z",
    "body": "Hey, I usually override execute for judging where callback is come from.\nlike this\n\n``` javascript\n// Backbone.Router.extend({\nexecute: function(callback, args) {\n    var actionName = this.getActionName(callback);\n    // super\n    Backbone.Router.prototype.execute.apply(this, arguments);\n},\ngetActionName: function(callback) {\n    if (!this.routes) {\n        return;\n    }\n\n    var actionName;\n    var matched;\n    for (var routePattern in this.routes) {\n        actionName = this.routes[routePattern];\n        if (callback === this[actionName]) {\n            matched = actionName;\n            break;\n        }\n    }\n    return matched;\n}\n```\n\nI don't know if anyone else did this, so I show the code, someone who like this can reuse it.\n\nIf this is a common requirement, I suggest to add this argument.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3076",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3076/comments",
    "title": "https://github.com/nagynet200/secret-octo-wight.wiki.git",
    "created_at": "2014-03-19T13:27:15Z",
    "updated_at": "2017-03-18T17:19:53Z",
    "body": "https://github.com/nagynet200/secret-octo-wight.wiki.git\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3074",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3074/comments",
    "title": "AMD boilerplate still defines jQuery as a dependency",
    "created_at": "2014-03-19T01:11:59Z",
    "updated_at": "2014-03-20T16:31:33Z",
    "body": "@akre54 I'm trying to get [NativeView](https://github.com/akre54/Backbone.NativeView) to play nicely with [Handlebones](https://github.com/FormidableLabs/handlebones/compare/native-view?expand=1). Non AMD tests are all passing. Hoorah!\n\nThe current AMD setup in backbone.js still defines jQuery as a hard dependency:\n\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L12\n\nWhich will cause my AMD build to blow up when I try to test it. Any suggestions as to how this can be handled by Backbone? I'm sure there was much strife over the AMD boilerplate and getting it in, but boy I wish it wasn't there at all. There was nothing wrong with shimming it IMHO.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3072",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3072/comments",
    "title": "Link to documentation tool for backbonejs.org?",
    "created_at": "2014-03-18T20:55:27Z",
    "updated_at": "2017-04-08T12:46:41Z",
    "body": "The documentation style used at www.backbonejs.com (and www.underscorejs.com) is really great; it definitely seems like a step up from what JSDoc produces.  However, I couldn't find any information on what tool is used to generate it.\n\nWould it be possible to include a link to the tool, possibly in fine print at the bottom of the page, so that others could benefit from it?  Or perhaps somewhere in the wiki?  Or, failing that, could you possibly include a link to the tool in this ticket?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3071",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3071/comments",
    "title": "Does model.save() work when in context of server side node.js?",
    "created_at": "2014-03-18T18:53:26Z",
    "updated_at": "2014-03-18T21:43:17Z",
    "body": "I tried this a while back and there was things missing in JQuery for this to work properly. My Google-fu is failing me and I can't seem to find any other discussion on this so I'm starting one here. Am I missing something obvious? I'm so lost :-P, thanks for any help.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3070",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3070/comments",
    "title": "Proposal: Backbone.Model::matches",
    "created_at": "2014-03-17T21:52:03Z",
    "updated_at": "2014-10-01T17:18:14Z",
    "body": "Hey, before I create a PR w/ tests I just wanted to test the waters for interest in a `matches` method for `Backbone.Model`. It essentially is a predicate that would take an object of conditions a la `Backbone.Collection::where`:\n\n``` coffee\n# model = new Backbone.Model({...})\n#\n# conditions =\n#   key: 'value'\n#   lol: 'wat'\n#\n# model.matches(conditions)\n\nBackbone.Model::matches = (conditions) ->\n  _.every conditions, (value, key) =>\n    @get(key) == value\n```\n\nIs this something worthy of inclusion?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3069",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3069/comments",
    "title": "Chrome extension--local storage",
    "created_at": "2014-03-15T10:35:01Z",
    "updated_at": "2014-03-15T17:53:05Z",
    "body": "```\nCan anyone plz tell me what's wrong here ----I am unable to store my data using   \nchrome.storage.sync \nhtml-----------I have a div with id=\"list\" and a text type input where the user enters                  \nsomething and clicks on the add button.On doing add this text appears in the body and   \nshould also get stored which is not happening.\n\n<div id=\"list\">    \n\n</div>\n\n<div>   \n\n  <form>\n       <input type=\"text\" id=\"myText\"  value=\"\"><br>\n  </form>\n       <input type=\"button\" id=\"butt\" value=\"Add\" />\n\n</div>\n```\n\njs file---\n    chrome.storage.sync.get('value',function(items)\n    {  \n         // text that is saved in entered should be retrived and added to the  \n         //html body \n         //How to achieve that\n    });  \n\n```\n$(\"body\").on(\"click\", \"p\", function() \n{\n  $(this).hide();\n  // the user can add any text which then appears in the body.If he wishes to remove it \n  //he can click on it to hide it.\n});\n\n$(\"#butt\").click(function()\n{\n     var entered = document.getElementById(\"myText\").value;\n     document.getElementById(\"myText\").value=\"\";\n\n     if(entered!=\"\")\n     {\n         var temp='<p>' + entered + '</p>'\n             $('#list').prepend(temp);  \n             // the text the user enters is added to the body here.\n             //this text should also be saved into my local storage so that when \n             //the user opens the extension again it can be dispalyed but I am unable to            \n             //do that\n\n            chrome.storage.sync.set({'value': entered}, function() {\n         // no value gets stored    \n                       });                      \n  }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3068",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3068/comments",
    "title": "In IE <= 8, redefined \"document.domain\" will block;",
    "created_at": "2014-03-15T03:12:55Z",
    "updated_at": "2015-02-17T23:03:22Z",
    "body": "We have some project using `iframe` for load webapps, and redefined `document.domain`, all right in other browser, but under IE 7/8 backbone doesn't work any more.\n\nI very averse to use iframe, but that is requirement from customer, you knew that: customer is god.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3066",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3066/comments",
    "title": "_previousAttributes isn't cleared after change events.",
    "created_at": "2014-03-14T20:35:10Z",
    "updated_at": "2014-03-15T17:57:16Z",
    "body": "`_previousAttributes` is used in the following places:\n- `Model.prototype.set`\n- `Model.prototype.changedAttributes` (guarded by `this.changing_ ?:`, which means this is only usable in change listeners)\n- `Model.prototype.previous`\n- `Model.prototype.previousAttributes`\n\nFrom the documentation, and I think from just reasoning, all accesses of `_previousAttributes` should only ever be permitted within a change handler. As it is now, if you were to unset an attribute, Backbone will hold a reference to the old attribute value. This can have memory implications and security implications (consider someone setting a sensitive piece of information that is unset later, then it may still easily be accessible to an attacker that has found an XSS). There is also no way to clear `_previousAttributes`, so you could, at best, overwrite it by silently setting an attribute.\n\nWhat do you guys think about clearing `_previousAttributes` after all change event listeners have been called?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3065",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3065/comments",
    "title": "Documentation suggestion",
    "created_at": "2014-03-14T15:37:25Z",
    "updated_at": "2015-02-17T22:07:56Z",
    "body": "I recently spent about 3 days trying to figure out why, despite the fact that a save was creating a new instance of my model on the server, the passed in error function was always getting called. Turns out that it was the server that was at fault. Instead of returning the entire object that had been created on the server, it was only returning the synthetic key. \n\nThe backbone docs were not clear enough on this point to stop a bonehead like me from a world of frustration, and as a matter of fact, I don't really know where to look to find a cheat sheet on the proper comportment of a RESTful server. Perhaps I only need to be pointed in the right direction.\n\nThanks for listening;\n\nGarey Mills \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3064",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3064/comments",
    "title": "model attribute aliases (feature request) in views",
    "created_at": "2014-03-14T14:55:36Z",
    "updated_at": "2014-03-14T17:01:11Z",
    "body": "Hi there ;)\n\nSay I have these two different models :\n\n``` javascript\nvar Product, skate;\n\n// definition of the Product model :\nProductRef = Backbone.Model.extend({\n    idAttribute: 'name'\n});\n\nskate = new ProductRef({\n    name: 'PRD-008952',\n    title: 'PLMSkate',\n    desc: 'a nice skateboard',\n    revision: '--A',\n    previewUrl: 'http://goo.gl/kN3Q3L'\n});\n```\n\n``` javascript\nvar Person, paulBismuth;\n\n// definition of the Person model :\nPerson = Backbone.Model.extend({\n    idAttribute: 'email'\n});\n\n// a totally anonymous instance of Person :\npaulBismuth = new Person({\n    email: 'ex.president@elysee.fr',\n    firstname: 'Paul',\n    lastname: 'Bismuth',\n    about: 'Paul Bismuth is the father of Pierre Antimoine',\n    avatar: 'http://goo.gl/MtWiIG'\n});\n```\n\nNow say that i am coding an IDCardView meant to display the `displayName`, `shortDesc` and `previewThumbnail` image of any model which data could somehow fit in these \"fields\".\n\nThe two models above are candidate to be displayed by such a view, with the following attributes mapping :\n\nFor an instance of `Person` :\n- `displayName` would be mapped to (as an \"attribute alias\") to the concatenation of `firstname` + `lastname`\n- `shortDesc` would be mapped to (as an \"attribute alias\") to the attribute `about`\n- `previewThumbnail` would be mapped to (as an \"attribute alias\") to the attribute `avatar`\n\nFor an instance of `Product` :\n- `displayName` would be mapped to (as an \"attribute alias\") to the attribute `title`\n- `shortDesc` would be mapped to (as an \"attribute alias\") to the attribute `desc`\n- `previewThumbnail` would be mapped to (as an \"attribute alias\") to the attribute `previewUrl`\n\nIn other words, **In my view I need attribute aliases for my observed/pointed model _without modifying the original models definitions!_** (because of the golden rule \"Models must not know anything about Views\", i don't want to \"polute\" the Model code with this view-related mapping).\n\nSo i thought of a `Mediator`/`Proxy` object that roughly:\n1. is given a mapping of original attribute names to expected attribute names\n2. listen to the original attributes events emitted by the proxified Model and re-emit events with expected attribute names\n3. re-implement `get` and `set` so that expected attribute names are changed to original attribute names before calls are made on the proxified\n4. delegate the execution of any other method to the proxified Model. The prototype chain of Javascript seems to a built-in way to implement this.\n\nThis `Mediator`/`Proxy` object would be somehow instanciated in my overriden impl of my View ctor and replace the original `this.model`, the view being given in its options hash the mapping defined above, as a hash object, which values would be attribute names or even maybe functions to deal with logic like concatenation of firstName + lastName. _In the rest of the code of my view, i only have to deal with `this.model` just as it were a Model with \"native\" `displayName`, `shortDesc` and `previewThumbnail` attributes_.\n\nThis is roughly the idea i have at the moment... Some outlines but not a clear idea of the whole thing... I'd also like this to work with collections.\n\nHow would you implement that (attribute aliases for my observed/pointed model without modifying the original models definitions) ? Are there plugins you know that provide such a feature? Would the ES6 Proxy object be helful in the future or has it nothing to do with my request ?\n\nThanks in advance for your feedback and ideas !\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3061",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3061/comments",
    "title": "Array attribute still doesn't trigger change event when is changed",
    "created_at": "2014-03-13T09:04:32Z",
    "updated_at": "2014-04-14T20:00:35Z",
    "body": "#3058\n\nhttp://jsfiddle.net/xEL3M/1/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3059",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3059/comments",
    "title": "listenTo",
    "created_at": "2014-03-13T03:20:54Z",
    "updated_at": "2014-03-13T04:58:16Z",
    "body": "Could listenTo be applied to window.location.pathname?\n\nI know it can be applied to a model and other objects.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3058",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3058/comments",
    "title": "Array model attribute doesnt have onchange trigger",
    "created_at": "2014-03-12T12:21:29Z",
    "updated_at": "2014-03-13T09:04:32Z",
    "body": "Hi,\n\nWe use an array as part of a model. Also we bound change events of that model. But when we changed array attribute we wont receive the event.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3057",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3057/comments",
    "title": "using polymorphic models breaks backbone's ability to ignore existing models when adding an array of objects to an existing collection",
    "created_at": "2014-03-11T19:55:38Z",
    "updated_at": "2014-03-12T18:28:56Z",
    "body": "Using polymorphic models breaks backbone's ability to ignore existing models when adding an array of objects to an existing collection.\n\n\"A collection can also contain polymorphic models by overriding this property with a constructor that returns a model.\"\nhttp://backbonejs.org/#Collection-model\n\nSince the function passed for collection.model does not have a prototype, the following line in the collection's set method does not work:\n`id = attrs[targetModel.prototype.idAttribute];`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3055",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3055/comments",
    "title": "Why is amd-style define definition anonymous?",
    "created_at": "2014-03-10T22:57:37Z",
    "updated_at": "2014-07-31T20:59:14Z",
    "body": "For underscore.js, the define call includes the name of the library, however for backbone it does not.\n\nThis leads to some interesting error messages when things are rolled up into a single file which includes require.js at the top.\n\nFor example, underscore.js does this:\n\n``` javascript\n    define('underscore', [], function() {\n```\n\nWhere as backbone.js does this:\n\n``` javascript\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n```\n\nIt would be nice if backbone.js did this instead:\n\n``` javascript\n    define('Backbone', ['underscore', 'jquery', 'exports'], function(_, $, exports) {\n```\n\nHowever I'm not sure of the implications of that with no-conflict mode...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3051",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3051/comments",
    "title": "Would be great if `instanceof` checks within collection were done against `collection.model` rather than `Backbone.Model`",
    "created_at": "2014-03-07T21:55:33Z",
    "updated_at": "2014-03-24T16:36:53Z",
    "body": "This would allow people to use their own custom models (for example: https://github.com/henrikjoreteg/human-model#human-model) with Backbone.Collections.\n\nI can do a PR for this, just wanted to float the idea for approval first.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3050",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3050/comments",
    "title": "Control over PUT vs POST for models with supplied IDs",
    "created_at": "2014-03-07T14:51:55Z",
    "updated_at": "2014-03-07T16:55:52Z",
    "body": "``` javascript\n\nvar UserModel = Backbone.Model.extend({\n    idAttribute: \"username\",\n    urlRoot: \"/userapi\"\n});\n\nvar newUser = new UserModel();\nnewUser.set('username','v0idnull');\nnewUser.save();\n```\n\nI can not create a new user with this code.\n\nBackbone makes the assumption that whatever API you are calling, the unique identifier for resource you're manipulating is generated on creation. But this is not always the case. In this above example, the unique identifier is the username, and so the ID is provided.\n\nBut that code will always try to do a PUT request on /userapi/v0idnull and it will always fail with a 404.\n\nI think there are many different ways of solving this, from providing create() and update() methods on the model (that save() can use), to changing\n\n``` javascript\nmethod = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n```\n\nto exposing the method through the options hash of the save() method:\n\n``` javascript\nmethod = options.method ? options.method : (this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n```\n\nWith a change like this, I can do one of two things:\n\nMy application is aware of when I'm creating a user and when I'm updating a user and call the appropriate method / set the appropriate option\n\nOR\n\nI call save normally which tries a PUT, gets a 404, and an error handler tries save again, forcing a POST.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3047",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3047/comments",
    "title": "Router#navigate to the same URL doesn't trigger",
    "created_at": "2014-03-06T16:29:55Z",
    "updated_at": "2014-03-06T21:04:17Z",
    "body": "The use case is simple and I know there are plenty of alternatives to achieve the same behaviour. Imagine the application is sitting on a route 'myroute/1' and somehow I want to retrigger the route code by doing navigate('myroute/1', {trigger: true}). Since both routes are the same the trigger never happens. Is this intended or is it a bug? If it's a bug I can try to work on a PR.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3046",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3046/comments",
    "title": "Possible memory leak",
    "created_at": "2014-03-06T13:40:34Z",
    "updated_at": "2014-04-07T21:04:13Z",
    "body": "Hi\n\nIve been profiling my app and have noticed some stray DOM nodes floating around after removing my views. I know this can be for many reasons, however the nodes seem to clear up after themselves if I use:\n\n```\ndelete view.$el;\n```\n\nafter removing it, is there a reason Backbone.View doesnt do this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3045",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3045/comments",
    "title": "Backbone is appending \"?\" in url",
    "created_at": "2014-03-06T12:11:00Z",
    "updated_at": "2014-03-06T14:01:30Z",
    "body": "Hello\n\nI am using latest version of backbone. My code works perfectly in firefox, but in google chrome/safari it appends unknown \"?\" in URL. \n\nExpected URL:             `http://localhost:3000/#signin-error`\nURL in Chrome/Safari: `http://localhost:3000/?#signin-error`\n\nI don't know from where \"?\" is coming. This is also happening in Safari.\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3044",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3044/comments",
    "title": "Polymorphic collections not working in 1.1.2",
    "created_at": "2014-03-05T17:19:36Z",
    "updated_at": "2014-05-07T01:20:24Z",
    "body": "After update to 1.1.2 polymorphic collections stopped working. Chrome throws an exception like this:\n\n```\n Uncaught TypeError: Object [object Object] has no method 'generateId'\n```\n\n---\n\n**Callstack**\n\n```\nUncaught TypeError: Object [object Object] has no method 'generateId' backbone.js:714\n_.extend.set backbone.js:714\n_.extend.fetch.options.success backbone.js:891\njQuery.Callbacks.fire jquery.js:1046\njQuery.Callbacks.self.fireWith jquery.js:1164\ndone jquery.js:7399\njQuery.ajaxTransport.send.callback jquery.js:8180\n```\n\n---\n\n```\n model = function(attrs, options){\n    if(attrs.publications){\n      console.log('Model1');\n      return new app.models.Model1(attrs, options);\n    }else{\n      console.log('Model2');\n      return new app.models.Model2(attrs, options);\n    }\n  }\n```\n\nThe reason we have this issue is the fact that the `set` method trying to access `model.prototype.generateId()` but in this case `model` is a method returning the instance of a model.\n\n**In our case the workaround for this issue looks like this:**\n\n```\nmodel: (function() {\n  var model = function(attrs, options){\n    if(attrs.publications){\n      console.log('Model1');\n      return new app.models.Model1(attrs, options);\n    }else{\n      console.log('Model2');\n      return new app.models.Model2(attrs, options);\n    }\n  };\n  model.prototype.generateId = Backbone.Model.prototype.generateId;\n  return model;\n})()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3043",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3043/comments",
    "title": "Invalid `this` in Collection.model function",
    "created_at": "2014-03-05T12:36:57Z",
    "updated_at": "2014-03-05T14:11:12Z",
    "body": "If Collection.model is a function, as shown in example [here](http://backbonejs.org/#Collection-model), then this function has invalid `this` value. `this` should be collection instance but it doesn't.\n\nExample:\nhttp://jsfiddle.net/devoto13/DF2et/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3033",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3033/comments",
    "title": "Accessing view options during `el` construction",
    "created_at": "2014-03-03T14:07:02Z",
    "updated_at": "2014-03-21T14:07:36Z",
    "body": "Hi,\n\n`View#options` has been removed since Backbone 1.1.0, and the usual recommandation is to set it ourselves if we need to inside the initialize constructor. That's what we're doing currently.\n\nHowever, we have a few views with this kind of pattern :\n\n``` js\nPopupView.extend( {\n\n    el : function ( ) {\n        return Templates.get( 'popups/upload/settings', {\n            filename : this.options.filename\n        } );\n    }\n\n} );\n```\n\nAs you can see, the root element constructor is currently requiring the options to be functional. Since the initialize constructor is only called after creating the node, it fails.\n\nFor what it worth, this error can be somewhat fixed by overloading the entire `View` constructor :\n\n``` js\nvar View = ( function ( ) {\n\n    var View = function ( options ) {\n        this.options = options;\n        Backbone.View.apply( this, arguments );\n    };\n\n    var F = function ( ) { };\n    F.prototype = Backbone.View.prototype;\n    View.prototype = new F( );\n\n    return View;\n\n} ( ) );\n```\n\nBut I think we agree to say that it's not the best code snippet ever :)\n\nWhat do you think of this issue ? Should it be solved ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3031",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3031/comments",
    "title": "Backbone no longer works w/ Ender (Backbone.$ not set when exports is defined)",
    "created_at": "2014-02-28T22:31:33Z",
    "updated_at": "2014-11-04T19:49:53Z",
    "body": "I use Backbone as a module in some of my Ender-built libraries. As of Backbone 1.1.1, the `Backbone.$` reference is now undefined instead of pointing at the global `$`. I assume there's a valid reason to omit `$` in some situations, but in this case it prevents Backbone from working as an Ender module.\n\nBecause `exports` always exists when modules are part of an Ender library, `$` doesn't get passed to `factory`:\n\n```\n// Next for Node.js or CommonJS. jQuery may not be needed as a module.\n} else if (typeof exports !== 'undefined') {\n  var _ = require('underscore');\n  factory(root, exports, _);\n```\n\nThis is where we really need to end up, but it's now unreachable in the context of an Ender library:\n\n```\n// Finally, as a browser global.\n} else {\n  root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3028",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3028/comments",
    "title": "Backbone Collection create does not work with an existing model and wait set to true",
    "created_at": "2014-02-27T13:00:18Z",
    "updated_at": "2015-08-11T13:18:24Z",
    "body": "Please checkout this jsfiddle http://jsfiddle.net/GSs8H/1/\n\nAn error `Uncaught Error: A \"url\" property or function must be specified` is thrown because `_prepareModel` no longer sets the the model's `collection` which is problematic because `add` is only called after the server response.\n\nThis problem was introduced between 1.1 and 1.1.1.\n\nI can try to make a PR with a fix, if this is indeed a bug.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3027",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3027/comments",
    "title": "Feature: Do not remove item if 202",
    "created_at": "2014-02-26T23:27:25Z",
    "updated_at": "2014-02-27T18:10:53Z",
    "body": "When calling model.destroy, the model should not be removed from the collection if the server returns status code 202 (Accepted).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3022",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3022/comments",
    "title": "Bower install issue",
    "created_at": "2014-02-26T00:08:39Z",
    "updated_at": "2014-03-04T22:46:14Z",
    "body": "I'm not sure if it's related to Backbone or Bower but whenever I'm trying to upgrade to 1.1.2, I'm getting the following error:\n\n```\nbower ENOTFOUND     Package jashkenas/backbone=jashkenas/backbone not found\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3021",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3021/comments",
    "title": "Success method not triggered on Collection fetch with params",
    "created_at": "2014-02-25T11:20:28Z",
    "updated_at": "2014-02-25T15:17:15Z",
    "body": "Hello \n\nI am new to backbone, i am having a very strange problem. Issue is that when i pass params to collection fetch, it never triggers the success call back method, but without params it triggers.\n\nhere is my code, with this it never goes in success call back but if i remove data params, then it goes to success call back and give alert message.\n\nP.S, i know there is another way of doing with with `reset` attribute but i can't use it.\n\n``` coffee\n  showPhotoList: (projectId) =>\n    @photoLists.fetch data: $.param(project_id: projectId),\n      success: @renderPhotoList,\n\n      error: =>\n        alert \"Error occured while fetching the project\"\n\n\n  renderPhotoList: =>\n    alert \"hellow render\"   \n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3019",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3019/comments",
    "title": "BB 1.1.2 + lodash + requirejs",
    "created_at": "2014-02-24T06:09:27Z",
    "updated_at": "2014-02-24T07:31:16Z",
    "body": "Hi.\nHow to implement lodash with new version of BB 1.1.1 or 1.1.2, which has AMD wrapper?\nAnd how to exports Backbone into global scope,  with requirejs?\n\n1.1.0 - without amd wrapper, works good.\nThnk's.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3018",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3018/comments",
    "title": "Button in view is clicked \"automatically\" by backbonejs",
    "created_at": "2014-02-23T03:31:41Z",
    "updated_at": "2014-02-23T15:11:29Z",
    "body": "I have a view that has a button associated with a \"tap\" event. Sounds normal, except that on this view, once in a while when a user is directed into the view, the button seem to get a tap event even though the user did not touch the button.\n\nI have animation associated with the button, the animation does not start until after the view opens.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3017",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3017/comments",
    "title": "Collection#create doesn't trigger request, sync and error events",
    "created_at": "2014-02-23T02:43:11Z",
    "updated_at": "2014-03-20T16:28:30Z",
    "body": "When creating a model model through Collection#create it doesn't bubble up the request, sync and error events. This falls on the same category of #2998 \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3015",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3015/comments",
    "title": "In oldIE, iframes are never removed during History::stop",
    "created_at": "2014-02-21T15:50:48Z",
    "updated_at": "2014-03-04T16:40:20Z",
    "body": "A new `iframe` is created on every `History::start` call, but never removed in `History::stop`, likely causing memory leaks on oldIE. (see [#3006](https://github.com/jashkenas/backbone/pull/3006#discussion_r9948789))\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3014",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3014/comments",
    "title": "Adding a model to a collection sets the model's collection property, how to set not to do it?",
    "created_at": "2014-02-21T15:15:06Z",
    "updated_at": "2014-02-21T15:34:31Z",
    "body": "I checked the source, setting the collection is added to the options in the _prepareModel method of Collection. Is it possible to tell not set the collection of the model?\n\nI want to create a selection of an existing collection, the collections created should have the same models, but want to keep the reference to the original collection. All the collections are immutable.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3013",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3013/comments",
    "title": "Collection.clone() should use options",
    "created_at": "2014-02-21T10:47:02Z",
    "updated_at": "2014-03-03T13:23:55Z",
    "body": "Clone an empty collection wouldn't work because options of new collection is undefined\n...\nclone: function() {\n      return new this.constructor(this.models);\n    }\n...\nthere is should be second parameter - this.options (need store in constructor)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3009",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3009/comments",
    "title": "Backbone is unable to find the dynamic div created by template",
    "created_at": "2014-02-20T08:04:58Z",
    "updated_at": "2014-02-20T10:28:00Z",
    "body": "I am sorry guys i am new to backbonejs. Everything is working fine but when it goes in `addOne` method of `MyApp.Views.Projects.IndexView` view `$(\".row-fluid\")` div doesnot founded, ( i have verified it in firebug ) but when everything run's and i checked the DOM 'row-fluid' div exist. I have been looking into this issue from 5 6 hours. Looking forward a help from you guys. \n\n``` coffee\nclass MyApp.Routers.ProjectsRouter extends Backbone.Router\n\n  initialize: ->\n    @projects = new MyApp.Collections.ProjectsCollection()\n\n  routes:\n    \"projects\" : \"projects\"\n\n  projects: ->\n    @projects.fetch().done =>\n      @view = new MyApp.Views.Projects.IndexView(collection: @projects)\n      $(\"#projects\").html(@view.render().el)\n\nclass MyApp.Views.Projects.IndexView extends Backbone.View\n\n  addAll: =>\n    @collection.each(@addOne)\n\n  addOne: (project) =>\n    view = new MyApp.Views.Projects.ProjectView({ model: project })\n    **$(\".row-fluid\").append(view.render().el)**\n\n  render: =>\n    @$el.html(\"<div class=\"row-fluid\"></div>\")\n    @addAll()\n    this\n\nclass MyApp.Views.Projects.ProjectView extends Backbone.View\n  template: JST[\"backbone/templates/projects/project\"]\n\n  render: ->\n    @$el.append(@template())\n    this\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3007",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3007/comments",
    "title": "v1.1.1 breaks routing with encoded newlines in query strings",
    "created_at": "2014-02-19T23:41:21Z",
    "updated_at": "2016-07-05T17:09:40Z",
    "body": "The v1.1.1 release [introduced URI decoding of path and query params](https://github.com/jashkenas/backbone/commit/1f5340b36ac88a142ec45b9029a36b1424c9a358), meaning encoded newlines in query strings (`?param=foo%0Abar`) prevent matching against ANY route since the regular expression dot (`.*`) doesn't match newlines. This broke things pretty badly for us, which is frustrating for a point-release.\n\nNot sure what the best fix is, but I'm thinking `Router#_routeToRegExp` should probably be updated to match against newlines as well. That or there should at least be documentation explaining that query params cannot contain encoded newline characters. Thoughts? I'd be happy to attach a PR to this if there's consensus on how this should be resolved.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3005",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3005/comments",
    "title": "Backbone model attributes error",
    "created_at": "2014-02-19T11:38:01Z",
    "updated_at": "2014-02-19T15:53:08Z",
    "body": "Hello every one i have been baning my head from last 5 6 hours but still unable to figure the solutions. Looking forward a help from guys\n\n``` coffee\nclass MyApp.Models.Project extends Backbone.Model\n  urlRoot: 'project'\n  idAttribute: 'object'\n```\n\n``` coffee\nclass MyApp.Collections.ProjectsCollection extends Backbone.Collection\n  model: MyApp.Models.Project\n  url: '/projects'\n```\n\nI am simply calling it as follow\n\n``` coffee\nprojects = new MyApp.Collections.ProjectsCollection\nprojects.fetch({ reset: true })\n```\n\nError\n![google chrome_003](https://f.cloud.github.com/assets/6640021/2206027/0deac8b6-995a-11e3-97c9-af19570ff1a5.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3004",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3004/comments",
    "title": "`clearInterval` use and Titanium.",
    "created_at": "2014-02-19T08:08:30Z",
    "updated_at": "2014-02-20T21:24:44Z",
    "body": "I noticed `clearInterval(this._checkUrlInterval);` use.\nThis [underscore issue](https://github.com/jashkenas/underscore/issues/1122) mentions problems with Titanium and `undefined` values being used for `clearTimeout` and `clearInterval`. I'm not sure if Backbone can even be used in Titanium but thought I'd pass it along.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3002",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3002/comments",
    "title": "what it the cause of a LoadError when typing >require 'money' IRB",
    "created_at": "2014-02-17T19:57:12Z",
    "updated_at": "2014-02-17T20:03:05Z",
    "body": "I am following an online tutorial and we are now manipulating currency in irb. I downloaded the files using `gem install money`:\n\n`Successfully installed money-6.0.1\n1 gem installed\nInstalling ri documentation for money-6.0.1...\nInstalling RDoc documentation for money-6.0.1...`\n\nafter the installation is completed i switched to ird and ran`require \"money\"`which should of returned `true` but instead returned:\n\n`LoadError: no such file to load -- money\nfrom (irb):1:in `require'\nfrom (irb):1`\n\ncould someone help me solve this problem?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3001",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3001/comments",
    "title": "1.1.1 breaks browserify in the minified file",
    "created_at": "2014-02-17T12:23:04Z",
    "updated_at": "2014-02-20T21:21:57Z",
    "body": "<a href=\"https://github.com/jashkenas/backbone/issues/2997\">This bug</a> was fixed in backbone.js file but not in the <a href=\"https://github.com/jashkenas/backbone/blob/master/backbone-min.js\">minified file</a>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2999",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2999/comments",
    "title": "No need to use the `shim` config in the test-amd.html.",
    "created_at": "2014-02-15T22:37:47Z",
    "updated_at": "2014-02-17T17:04:43Z",
    "body": "There's no need to use the `shim` config in the test-amd.html since Underscore now has AMD support.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2998",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2998/comments",
    "title": "no sync event when destroying model",
    "created_at": "2014-02-15T21:43:16Z",
    "updated_at": "2014-03-25T18:57:20Z",
    "body": "It seems that the model is destroyed before the event was sent.\n\nThe coffeescript line :\n\n@listenTo @model, 'sync', ->alert 'sync'\n\nnever alerts 'sync' when a model is destroyed.\n\nAs a result, the model's collection does get a request event at the beginning of the process, but not the matching sync at the end..\n\nNot a catastrophe as I manually trigger the events when the server answers. But when this is fixed, I'll need to revisit my code to eliminate the double triggering.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2997",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2997/comments",
    "title": "1.1.1 breaks browserify",
    "created_at": "2014-02-14T09:34:13Z",
    "updated_at": "2015-03-25T19:17:57Z",
    "body": "Hello,\n\nVersion 1.1.1 breaks the browserify build of backbone. It's trying to require jQuery although backbone itself doesn't have a dependency on it.\n\nI know there is a try, catch around it but this doesn't work with browserify it will just try to resolve the require which fails and causes the build to fail.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2996",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2996/comments",
    "title": "1.1.1 release breaking changes",
    "created_at": "2014-02-14T04:21:32Z",
    "updated_at": "2014-04-22T16:46:55Z",
    "body": "I'm using BackboneJS in a requirejs application.\nRelease 1.1.1 works fine until I use the r.js optimizer to reduce my project to a single javascript file. After that point, my application stops working, I get the message \"Backbone is not defined\".\n\nThis message originates from Marionette, which explicitly depends on Backbone, but my requirejs config explicity declares backbone as a dependency of Marionette.\n\nI've confirmed that this doesn't happen with 1.1.0.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2994",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2994/comments",
    "title": "Removing callbacks not working as expected?",
    "created_at": "2014-02-13T11:28:23Z",
    "updated_at": "2014-02-13T13:09:40Z",
    "body": "From the docs under [Events-off](http://backbonejs.org/#Events-off):\n\n```\n If no callback is specified, all callbacks for the event will be removed.\n```\n\nMy sample code is here:\n\n```\nvar chai = require('chai'),\n  expect = chai.expect,\n  sinon = require('sinon'),\n  sinonChai = require('sinon-chai');\n\nvar Backbone = require('backbone');\nvar _ = require('lodash/dist/lodash.underscore');\n\nchai.use(sinonChai);\n\ndescribe('Backbone.Events', function() {\n  var myObj;\n\n  beforeEach(function() {\n    myObj = {};\n      _.extend(myObj, Backbone.Events);\n  });\n\n  it('can remove custom events from objects', function() {\n    var spy1 = sinon.spy();\n    var spy2 = sinon.spy();\n    var spy3 = sinon.spy();\n\n    myObj.on('foo', spy1);\n    myObj.on('bar', spy1);\n    myObj.on('foo', spy2);\n    myObj.on('foo', spy3);\n\n    // unbind a single callback for the event\n    myObj.off('foo', spy1);\n    myObj.trigger('foo');\n    expect(spy1).to.have.callCount(0);\n    expect(spy2).to.have.callCount(1);\n    expect(spy3).to.have.callCount(1);\n\n    // remove all 'foo' callbacks\n    myObj.off('foo');\n    myObj.trigger('foo');\n    expect(spy2).to.have.callCount(0); // spy called once, why??\n    expect(spy3).to.have.callCount(0); // spy called once, why??\n  });\n});\n```\n\nMy expectation is that the callbacks `spy2` and `spy3` should already be removed from the event `foo` by the time I trigger. Why is `spy2` and `spy3` each called once even after unbinding them from the event `foo` thereby failing to pass the test?\n\n```\nAssertionError: expected spy to have been called exactly 0 times, but it was called once\nspy()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2992",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2992/comments",
    "title": "Error on the file Backbone.js",
    "created_at": "2014-02-12T00:12:03Z",
    "updated_at": "2014-02-12T00:27:52Z",
    "body": "There is an error on line 217 of file backbone.js.\n\nHere is : Uncaught TypeError: Cannot call method 'each' of undefined \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2989",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2989/comments",
    "title": "bower issues",
    "created_at": "2014-02-07T10:22:06Z",
    "updated_at": "2014-02-08T10:32:05Z",
    "body": "When I try to add Backbone to my package using Bower I have two issues:\n- whole repository is included (ignores are not respected)\n- backbone dependencies are not included (underscore)\n\nWhen I issue command bower install tar.gz repository is downloaded\n`bower backbone#*              download https://github.com/jashkenas/backbone/archive/1.1.0.tar.gz`\n\nThe issue is, I think, that inside this file there no bower.json or component.json files (which are present in main repository).\n\n![image](https://f.cloud.github.com/assets/119451/2108592/a5dcbb3e-8fe1-11e3-8b68-b73da159042e.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2988",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2988/comments",
    "title": "Route exception in IE7",
    "created_at": "2014-02-06T15:58:31Z",
    "updated_at": "2014-12-26T03:21:13Z",
    "body": "Routes throw exceptions in IE7 due to use of iframes...  I am just gonna bring up the old issue that started the iframe approach to refresh our memory https://github.com/jashkenas/backbone/issues/228.\n\nEven if we get find a fix for this issue, it would be really nice for Backbone to at least provide a flag to completely disable the use of iframes, at the cost of losing history support of course.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2987",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2987/comments",
    "title": "Remove item from the list of tutorials",
    "created_at": "2014-02-04T22:41:22Z",
    "updated_at": "2014-02-12T00:28:41Z",
    "body": "This link is not a tutorial (and even says its not on the page): Story of the demo (not a tutorial): http://jgn.heroku.com/2010/10/25/creating-localtodoscom----a-short-story/\n\nRemove it please.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2982",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2982/comments",
    "title": "Generate url from routes",
    "created_at": "2014-02-02T08:41:01Z",
    "updated_at": "2014-02-03T14:51:27Z",
    "body": "Please, can u realize such function? I realy need this.\nFor example\n\n``` js\nvar Router=Backbone.Router.extend({\nroutes:{\n'post/:id':'showPost'\n}\n})\nvar router=new Router;\nvar url=router.generate('showPost',{id:15}) //returns /post/15\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2981",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2981/comments",
    "title": "[docs] Move Examples section to separate page",
    "created_at": "2014-02-01T04:08:37Z",
    "updated_at": "2014-02-04T20:24:40Z",
    "body": "The documentation page for Backbone is already fairly large, between the API docs, changelog and FAQ, it totals around 74,904px. Of those ~75k pixels, 40.4% (30k) is spent on the Examples section.\n\nWhile it is great to show real world uses of Backbone, I think this is the wrong place for this information. Navigating the docs on a machine with no scroll wheel / 2 finger scroll is also a nightmare, since the scroll bar is almost half the height of what it could be.\n\nI propose we move or remove the Examples section as a whole.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2980",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2980/comments",
    "title": "model.destroy({wait:false}) with a synchronous model.sync does not send events in the expected convenient order",
    "created_at": "2014-01-30T16:11:58Z",
    "updated_at": "2014-01-30T16:18:10Z",
    "body": "Hi there :)\nWhen destroying a model belonging to a Collection with a call to `model.destroy({wait:false})` for an optimistic reactive UI,\n- with an **asynchronous** implementation of `model.sync` (typically launching xhr or simulated with `setTimeouts`), these events will be sent in this given order :\n  1. first the destroyed model will **emit a 'destroy' event**,\n  2. this event is caught by its collection, that will itself\n     1. stop listening to the model events\n     2. remove this model from the collection\n     3. **emit itself an event 'remove'**\n  3. then eventually the destroyed model **emits an 'error' or 'sync' event** depending on the success or failure of the operation in the backend.\n- though now with a **synchronous** implementation of `model.sync` (that directly calls the success and error callbacks passed in the options), the events will be sent in this given order :\n  1. **first the destroyed model will emit an 'sync' or 'error' event** depending on the success or failure of the operations done in the synchronous impl of `model.sync`,\n  2. then the destroyed model will **emit a 'destroy' event**,\n  3. eventually this 'destroy' event is caught by its collection, that will itself\n     1. stop listening to the model events\n     2. remove this model from the collection\n     3. **emit itself an event 'remove'**\n\nI think that :\n- either the order of the sent events should not depend on the nature of the model.sync impl (synchronous or asynchronous)\n- either backbone doc should explicitly state that model.sync impl must be asynchronous.\n\n**If the order of the sent events should not depend on the nature of the model.sync impl (synchronous or asynchronous) (which is my opinion), the expected convenient order of the events is the first one described above (async `model.sync`)**. Why is this one more convenient imho ? Because it allows the collection to listenToOnce(removeModel, 'sync error', ...) when one of its model is removed from the collection, a convenient way to deal with issues such as https://github.com/jashkenas/backbone/issues/935 and https://github.com/jashkenas/backbone/issues/2692, in other words : keep watching for success or failure of DELETE operation in the backend of the removed model from the Collection, no matter if you're simulating a backend with a synchronous impl of sync or working with the real backend and its latency.\n\nIf i am right and if you agree with me, the end of the impl of model.destroy should be fixed.\n\nWhat is your opinion ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2979",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2979/comments",
    "title": "Configurable list of view options to be merged as properties",
    "created_at": "2014-01-30T12:18:45Z",
    "updated_at": "2014-09-01T12:32:19Z",
    "body": "Convenience feature to allow for the list of view options to be merged as properties to be customized. \n\nJust like model and collection are magically available as instance variables, it would be nice to be able to specify other options to be merged as properties.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2978",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2978/comments",
    "title": "View `scroll` events do not delegate",
    "created_at": "2014-01-29T22:15:46Z",
    "updated_at": "2014-09-05T17:57:06Z",
    "body": "The following code does not run the event handler:\n\n```\nevents: {\n  'scroll .selector' : 'scrollHandler'\n}\n```\n\nThe problem is that scroll events do not bubble. Backbone tries to bind the scroll event using the delegated syntax, like this:\n\n```\nthis.$el.on('scroll', '.selector', this['scrollHandler'], this)\n```\n\nHowever, this fails since the event never bubbles to this.$el. Would it be appropriate to patch backbone events to treat scroll bindings differently, like:\n\n```\nif (!selector) {\n  this.$el.on(event, handler)\n} else if (isScrollEvent) {\n  this.$(selector).on(event, handler)\n} else {\n  this.$el.on(event, selector, handler)\n}\n```\n\nThe limitation of this is elements would need to be children of this.$el already, but at least it would work in some cases.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2977",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2977/comments",
    "title": "Nested optional parts of route route string are captured",
    "created_at": "2014-01-29T18:47:48Z",
    "updated_at": "2014-02-14T20:13:21Z",
    "body": "`Backbone.Router.prototype._routeToRegExp('foo(/:bar(/:baz))')`\n\nyields\n\n`/^foo(?:/([^/]+)(/([^/]+))?)$/` - captures three params, and params are mandatory\n\nBut it should be\n\n`/^foo(?:/([^/]+)(?:/([^/]+))?)?$/` - captures two params\n\nFor example, matching against the route `/foo/a/b`, the parameters passed to the handler are `('a', '/b', 'b')`, when it should be `('a', 'b')`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2976",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2976/comments",
    "title": "Collection length does not match models length, when fetching and parsing data with duplicate ids",
    "created_at": "2014-01-29T17:42:55Z",
    "updated_at": "2014-04-23T18:04:53Z",
    "body": "### Duplication Steps\n- Create a model, which parses it's `id` from an arbitrary response object attribute\n- Call fetch on a collection for the model\n  - API returns multiple models with the same id\n- Call fetch a second time\n  - API returns multiple models with the same id\n- Backbone throws error at 719:46 `TypeError: Cannot read property 'cid' of undefined`\n\n``` javascript\nset: function(models, options) {\n      // ....\n\n      // Remove nonexistent models if appropriate.\n      if (remove) {\n        for (i = 0, l = this.length; i < l; ++i) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n          // TypeError; this.models.length !== this.length\n        }\n        if (toRemove.length) this.remove(toRemove, options);\n      }\n\n      // ...\n}\n```\n\nSee [Spec (failing) for mismatched collection length](https://github.com/eschwartz/backbone/commit/5f3f73f6d49cd90e209f3db774ba3e676c93c3e8) for a failing spec, duplicating this issue.\n### Expected Behavior\n\nThe root issue is clearly that the API is returning duplicate objects. However, I'm wondering if there might be a better way for Backbone to handle this situation, which would make the problem easier to trace. \n\nWhat is the default behavior when adding a model to a collection with the same id as an existing model in the collection? I would expect an error to be thrown.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2975",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2975/comments",
    "title": "Split components to separate modules",
    "created_at": "2014-01-29T13:33:24Z",
    "updated_at": "2014-02-09T21:57:56Z",
    "body": "This is bit like #436 but I still chose to open a new issue.\n\nAt times I'd like to use just a subset of backbone in my application, in this particular case only the Router part of backbone.\n\nLooking at the source-code it seems it would be easy to use commonjs module declarations to separate the different components to their own projects.\n\nUsing in example browserify, you could have the main backbone-project looking something like\n\n``` javascript\nwindow.Backbone = module.exports = {\n  Model: require('backbone-model'),\n  Collection: require('backbone-collection'),\n  Router: require('backbone-router')\n};\n```\n\nso this should not break any backwards compatibility either. \n\nBut it would then allow to use these handy modules by themselves without having to load code not needed by an application.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2974",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2974/comments",
    "title": "Would a Refactored-Out \"setMerge\" Method Be Possible?",
    "created_at": "2014-01-29T00:03:07Z",
    "updated_at": "2014-01-30T22:01:10Z",
    "body": "Currently if you do:\n\n```\nsomeCollection.add(models, {merge: true});\n```\n\nBackbone will gleefully update all of the attributes on any existing models with attributes from the newly-passed models.  That's great, but what if you don't want Backbone to update all of the attributes, ie. what if you want to do a more complicated merge?\n\nFor example, what if you have two forms of a model, which I'll call \"Record\" and \"RecordSummary\".  A Record holds a full model's worth of data, while a RecordSummary just has the name and ID of the Record (eg. for use in search results).\n\nA Record's JSON might look like:\n\n```\n{type: 'Record', id: 55, name: 'Foo', field1: 'bar', field2: 'baz', ...}\n```\n\nAnd a RecordSummary's might look like:\n\n```\n{type: 'Summary', id: 55, name: 'Foo''}\n```\n\nNow both of these models represent the same server-side data, so if I have a Record and I get a RecordSummary from the server, I want to update the Record with its summary's data.  However, I don't want to change the type of the to \"RecordSummary\", because I still have a full Record.\n\nIf I use Collection.add, with merge:true, Backbone will overwrite the type of my Record to \"RecordSummary\", and there's (currently) no good way to change that behavior.\n\nHowever, if this line (which comes right after \"if (options.merge)\" in Collection.set):\n\n```\nexisting.set(model.attributes, options);\n```\n\nwas refactored in to a method:\n\n```\nthis.setMerge(existing, model.attributes, options);\n\n...\n\nsetMerge: function(existing, attributes, options) {\n    existing.set(attributes, options);\n}\n```\n\nThen users could override setMerge to add any special merge behavior they like, such as:\n\n```\nsetMerge: function(existing, attributes, options) {\n    existing.set(_(attributes).exclude('type'), options);\n}\n```\n\nOf course, the utility of this refactoring would not be limited to this case; it could be used for any sort of merge-specific behavior override.\n\nGiven that, and given that the refactoring itself is trivial, is there any chance something like this might make it in to Backbone (or is there any other way to solve this sort of problem that already exists)?\n\nP.S. If this change is desired I'd be happy to submit a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2973",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2973/comments",
    "title": "Collection.get returns Object.prototype methods",
    "created_at": "2014-01-28T22:53:49Z",
    "updated_at": "2014-01-29T15:42:26Z",
    "body": "Currently Backbone.Collection is using an object to keep track of models that exist within that collection.  It should probably be using 'hasOwnProperty' instead to avoid returning methods from Object.prototype.\n\nThe issue originally occurred for me in Firefox when I had a model id of 'watch' and backbone refused to add it to a new collection. This was using 0.9.9 but it appears the issue exists within the latest version as well.\n\nI have a jsbin to demonstrate the issue with 'valueOf'.\n\nhttp://jsbin.com/OmeBAW/3/edit\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2972",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2972/comments",
    "title": "Enhancement: access to subproperties with getter and setter",
    "created_at": "2014-01-23T15:28:23Z",
    "updated_at": "2014-01-23T15:31:34Z",
    "body": "Hi,\n\nI would to know if this possible to add functionnalities to access to subproperties into the model ?\n\nFor examples: \nthis.model.get('something.title') \nthis.model.set('something.title', 'a new title');\n\nI try to implement the needed changes:\n\n``` javascript\nfunction _searchProperty(attr, attrs, raiseError) {\n    if (attr && attr.indexOf('.') >= 0) {\n        var properties = attr.split('.'),\n            currentAttributes = attrs,\n            i;\n\n        for (i = 0; i < properties.length - 1; ++i) {\n            if (currentAttributes) {\n                currentAttributes = currentAttributes[properties[i]];\n\n            } else {\n                if (raiseError !=== false) {\n                    throw properties[i] + ' is not a referenced property';\n                }\n            }\n        }\n\n        return currentAttributes[properties[properties.length - 1]];\n\n    } else {\n        return attrs[attr];\n    }\n}\n\nfunction _deleteProperty(attr, attrs) {\n    if (attr && attr.indexOf('.') >= 0) {\n        var \n            lastIndex = attr.lastIndexOf('.'),\n            parent = _searchProperty(attr.substring(0, lastIndex), attrs, false);\n\n        if (parent) {\n            delete parent[attr];\n        }\n\n    } else {\n        delete attrs[attr.substring(lastIndex + 1)];\n    }\n}\n\nfunction _setProperty(attr, attrs, value) {\n    if (attr && attr.indexOf('.') >= 0) {\n        var \n            lastIndex = attr.lastIndexOf('.'),\n            parent = _searchProperty(attr.substring(0, lastIndex), attrs, false);\n\n        if (parent) {\n            parent[attr.substring(lastIndex + 1)] = value;\n        }\n\n    } else {\n        delete attrs[attr];\n    }\n}\n\n// On the Model:\n_.extend(Model.prototype, Events, {\n// ...\nget: function(attr) {\n    return _searchProperty(attr, this.attributes);\n},\n\nset: function(key, val, options) {\n      var attr, attrs, unset, changes, silent, changing, prev, current;\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      unset           = options.unset;\n      silent          = options.silent;\n      changes         = [];\n      changing        = this._changing;\n      this._changing  = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n      current = this.attributes, prev = this._previousAttributes;\n\n      // Check for changes of `id`.\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n      // For each `set` attribute, update or delete the current value.\n      for (attr in attrs) {\n        val = _searchProperty(attr, attrs);\n        if (!_.isEqual(_searchProperty(attr, current), val)) changes.push(attr);\n        if (!_.isEqual(_searchProperty(attr, prev), val)) {\n          _setProperty(attr, this.changed, val);\n        } else {\n          _deleteProperty(attr, this.changed);\n        }\n\n        if (unset) {\n            _deleteProperty(attr, current);\n        } else {\n            _setProperty(attr, current, val);\n        }\n      }\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = true;\n        for (var i = 0, l = changes.length; i < l; i++) {\n          this.trigger('change:' + changes[i], this, _searchProperty(changes[i], current), options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    }\n//...\n});\n```\n\nWhat do you thing about this ?\n\nThank you for your feedback\n\nCheers\n\nJulien Roche\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2971",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2971/comments",
    "title": "Model.fetch options.success vs. options.error callback signature mismatch?",
    "created_at": "2014-01-23T14:24:40Z",
    "updated_at": "2016-06-16T04:14:24Z",
    "body": "In the docs it says:\n\n> [Backbone.Model.fetch] ... Accepts success and error callbacks in the options hash, which are both passed (model, response, options) as arguments.\n\nBut as far as I can tell the success callback has a signature like this:\n\n```\nfunction success (model,responseJSON,options) { }\n```\n\nAnd the error callback looks more like:\n\n```\nfunction error (model,jqXHR,options) { }\n```\n\nWhat's going on? It seems like they are passed different sorts of parameters compared to what the docs claim?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2970",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2970/comments",
    "title": "Backbone should also try to require lodash",
    "created_at": "2014-01-23T14:14:05Z",
    "updated_at": "2014-07-07T05:38:29Z",
    "body": "Currently backbone tries to `require underscore`. I think it should either do the same as with jquery and try to load it from an global context.\n\nSorry if this is a duplication but using backbonejs with browserify it always wants to require underscore. But that would be a duplication of a lot of code in my case because I use lodash normally.\n\nIs this something possible or a way to achieve this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2968",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2968/comments",
    "title": "Query parameters in hash fragment are removed in calls to Backbone.history.navigate()",
    "created_at": "2014-01-22T11:52:46Z",
    "updated_at": "2014-01-22T12:58:36Z",
    "body": "Consider the following routes:\n\n``` javascript\n'list?:query': 'filteredList',\n'list': 'list'\n```\n\nWhen the url changes to `#list?status=new`, then the `filteredList` route will be invoked, which is the expected behaviour.\n\nHowever, when the route is invoked programmatically with `Backbone.history.navigate('list?status=new')`, then the `list` route will be invoked instead, which is clearly wrong.\n\nThe cause of this is f0572b0e511d25d982c4c022d1824adb37bbee7e\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2967",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2967/comments",
    "title": "backbone validation for date field using bootstrap month and year only datepicker, even if the input filed has value still i get error message. this is my code.",
    "created_at": "2014-01-21T12:21:38Z",
    "updated_at": "2014-01-21T12:30:01Z",
    "body": "model.js\n\n  initialize: function () {\n this.validators = {};\nthis.validators.date = function (value) {\n            return value.length >0 ? {  \n                         isValid: true\n            } : {\n                isValid: false, \n                message: \"You must enter a date\"\n            };\n        };\n},\ndefaults: {\n              date:\"\"\n    }\n\nhtml\n <div class=\" control-group date\" id=\"datepicker\" data-date=\"01-2014\"  data-date-format=\"mm-yyyy\">\n                <label class=\"control-label input-append\">Date </label>\n                <input  type=\"text\"  name=\"date\" id=\"date\">  \n                <span class=\"add-on\"><i class=\"icon-th\"></i></span>  \n                <span class=\"help-inline\"></span>\n            </div>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2966",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2966/comments",
    "title": "Doc inconsistency in Collection constructor",
    "created_at": "2014-01-21T12:19:18Z",
    "updated_at": "2014-01-21T15:03:20Z",
    "body": "The docs (http://backbonejs.org/#Collection-constructor) indicate that the models array is an optional parameter for the Backbone.Collection constructor method:\n\n```\nnew Backbone.Collection([models], [options])\n```\n\nIn fact, it can only be omitted when no options are passed in. Sketch for a simple test case, demonstrating the deviation from the docs:\n\n```\ntest(\"new empty collection with options\", function() {\n    var col = new Backbone.Collection({model: Backbone.Model});\n    equal(col.length, 0);\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2964",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2964/comments",
    "title": "Multiple Backbone.Routers and the default route \u2014 order of matching routes/loading routers",
    "created_at": "2014-01-17T14:11:49Z",
    "updated_at": "2014-01-17T15:06:26Z",
    "body": "Application that i'm coding is getting bigger and bigger and so far i've been using just one router for everything. I wanted to split it into two separate routers (for starters, more coming of course) like this:\n\n```\nclass window.UFO.Routers.App extends Backbone.Router\n  routes:\n    #root\n    ''                         : 'root'\n    #not found\n    '*notFound'                : 'notFound'\n\nclass window.UFO.Routers.Companies extends Backbone.Router\n  routes:\n    'companies/new/:angellist' : 'companiesNew'\n    'companies/new'            : 'companiesNew'\n    'companies/:id/edit'       : 'companiesEdit'\n    'companies/:id/edit/people': 'companiesPeople'\n    'companies/:id/edit/people/:preselect': 'companiesPeople'\n```\n\nThere is an issue though: notFound route is triggered every time i try to access one of companies routes. I'm guessing it's because App router is loaded and initailized first (i'm using rails asset pipeline).\n\nDo you know any workaround for this problem? Maybe a way to force Backbone to check all available routers before matching to *notFound route?\n\nbtw. we are using Backbone.Marionette, so solutions may use tools and code from it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2963",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2963/comments",
    "title": ".once and .listenToOnce against multiple events fire once for each event instead of absolutely once",
    "created_at": "2014-01-16T19:55:39Z",
    "updated_at": "2014-01-16T22:06:56Z",
    "body": "Noticed this behavior that I think is unintuitive w.r.t. the .once() and .listenToOnce() API:\n\n``` javascript\nmyView = new Backbone.View();\nmyView.once('eventA eventB', function() { console.log('a or b fired'); });\nmyView.trigger('eventA'); \n  // --> console: 'a or b fired'\nmyView.trigger('eventA'); // nothing, great!\nmyView.trigger('eventB'); \n  // --> console: 'a or b fired'  again -- hmmm... not what I meant by once\nmyView.trigger('eventB'); // nothing\n```\n\nI would expect the semantics of .once() against multiple events to fire once for _any_ event, not once for _each_ event.\n\nWith the proposed any-event semantics, you can still reproduce the each-event behavior easily and unambiguously if thats what you intend:\n\n``` javascript\nmyView.once('eventA', onceCallbackMultipleTimes);\nmyView.once('eventB', onceCallbackMultipleTimes);\n```\n\nBut with the current each-event semantics, you need to do a double-once, which feels kludgy:\n\n``` javascript\nmyView.once('eventA eventB', _.once(realOnceCallback));\n```\n\nIf keeping the current each-event semantics, the documentation should be updated to make that explicit.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2962",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2962/comments",
    "title": "Model.isNew() is true but PUT is still issued rather than POST",
    "created_at": "2014-01-16T16:31:05Z",
    "updated_at": "2014-01-16T17:11:38Z",
    "body": "Not sure if this is expected behaviour but the docs say that if isNew() is true then a POST is sent on save() but if I include the id attribute in the data from the form, a PUT is sent even when isNew() is true:\n\nmodel.isNew() : true\nview.on(\"form:submit\", function(data){\n  delete data.id; // need to do this to get POST otherwise it's a PUT\nmodel.save(data); // of course, useless as id is now null\n}\n\nin this case, model id is set by the user not the server. So the POST/PUT is determined by data and not model.isNew().\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2961",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2961/comments",
    "title": "collection.create should return the request object",
    "created_at": "2014-01-16T14:55:58Z",
    "updated_at": "2014-01-16T16:17:48Z",
    "body": "Right now the current `create` call returns the model that was created, but that is inconsistent with the way `save`, `destroy` and `fetch` work. Those all return the xhr  object, allowing the use of deferreds in a consistent fashion. Since `create` is also a networked operation, it should return the xhr object as well.\n\nIs there a reason why `create` returns the model itself? I realize that you can provide a json object at which point you'd need to capture the model instance in the callback, but you could also pass a model directly to `create` (thus already having the model). At present, I believe `create` is the only api call that requires use of the `success` callback if you want to capture the result of the operation. \n\nHappy to make a pull req if this is a desired change.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2956",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2956/comments",
    "title": "Collection.create adds a model even if it's not valid",
    "created_at": "2014-01-14T19:56:32Z",
    "updated_at": "2014-03-27T03:44:11Z",
    "body": "Adding an invalid model with `collection.create({..})` triggers an `add` and modifies the collection. Is this normal?\n\nThe documentation says the contrary: \u00ab Equivalent to instantiating a model with a hash of attributes, saving the model to the server, and adding the model to the set after being successfully created. \u00bb\n\nThis seems to be the way: `Collection.extend({ this.on('error invalid', this.remove) })`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2955",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2955/comments",
    "title": "Double validation on save",
    "created_at": "2014-01-14T18:10:37Z",
    "updated_at": "2015-02-17T22:08:55Z",
    "body": "`this.collection.create({key: value})` runs two validations. One before `save`, one after a successful server response. Validating the server data seems useless to me.\n\nThe problem seems related to this code `if (_.isObject(serverAttrs) && !model.set(serverAttrs, options))` where options.validate = true. Backbone version 1.1.0.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2954",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2954/comments",
    "title": "Router.navigate never trigger the route function defined in router.js like this case.",
    "created_at": "2014-01-13T19:42:56Z",
    "updated_at": "2014-01-13T19:49:16Z",
    "body": "if I defined router.js like this\n\n```\nBackbone.Router.extend({\n    routes: { '':'routing' },\n\n    routing: function(params) { \n         // invoke function by eval('this.' + params.page + '()') if it is not undefined\n         // if it is undefined, invoke this.navigate('?page=main')\n    },\n\n    navigate: function(route) {\n         Backbone.Router.prototype.navigate.call(this, route, { trigger: true, replace: true });\n    },\n\n    main: function() { ... // loading page ... }\n})\n```\n\nAs you can see if I try to access like http://localhost/TestApp/\nIt should be like this\nnavigate() -> routing() -> navigate('?page=main') -> routing({ page: 'main' }) -> eval(main()) which is success in backbone 1.0.0.\n\nIn backbone 1.1.0. I investigate what have been change\n\nI see that\n\n```\n...\nfragment = fragment.replace(pathStripper, '');\n\n     if (this.fragment === fragment)  // from above this is always true  'empty string' === 'empty string'\n          return;\n...\n\n// also\nif (options.trigger)\n     return this.loadUrl(fragment); // this will loadUrl('') with empty string instead of '?page=main'\n```\n\nfrom that this.loadUrl will never loadUrl with '?page=main' to trigger the function\n\nP.S. I use backbone.queryparams plugin to help get url parameter (https://github.com/jhudson8/backbone-query-parameters)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2953",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2953/comments",
    "title": "could `Model.prototype.extend` add a parameter as `extendSelf`?",
    "created_at": "2014-01-13T02:12:11Z",
    "updated_at": "2014-01-13T02:16:28Z",
    "body": "I'm a newbie in backbone\nwhen i use bookshelf, i found problem with `module.export`\n\n```\nvar User = module.exports = Base.Model.extend();\n\nvar Issue = require('./issue');\n\nUser.extend({\n    tableName: 'users',\n\n    issue: function () {\n        return this.hasOne(Issue, 'userid');\n    }\n}, {\n\n}, true);\n```\n\nso can i add such a third parameter as `var extend = function(protoProps, staticProps, extendSelf) {` in backbone, or there is entirely no need?\nThank you!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2951",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2951/comments",
    "title": "Backbonejs model to save mulitpart formdata",
    "created_at": "2014-01-10T14:57:11Z",
    "updated_at": "2014-01-16T15:28:39Z",
    "body": "how to include the file data in the model as attributes. \n\nI found this link http://stackoverflow.com/questions/17535469/forcing-backbone-to-save-an-attribute-as-a-file but I find it difficult to convert to my form data.\n\nform include both file and input fields\nFORM\n\n<form enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"ImageData\">\n  <input type=\"text\" name=\"UserName\">\n</form>\n\n\nI am saving the form in the model as attributes\n\n```\nUser = Backbone.Model.extend({\n  readAvatar : function (file, callback) {\n    var reader = new FileReader(); // File API object for reading a file locally\n    reader.onload = (function (theFile, self) {\n      return function (e) {\n        // Set the file data correctly on the Backbone model\n        self.set({avatar_file_name : theFile.name, avatar_data : fileEvent.target.result});\n        // Handle anything else you want to do after parsing the file and setting up the model.\n        callback();\n     };\n    })(file, this);\n    reader.readAsDataURL(file); // Reads file into memory Base64 encoded\n  }\n    attribute : function(attr) {\n      return Object.defineProperty(this.prototype, attr, {\n        get: function() {\n          return this.get(attr);\n        },\n        set: function(value) {\n          var attrs;\n\n          attrs = {};\n          attrs[attr] = value;\n          return this.set(attrs);\n        }\n      });\n    };\n});\n```\n\nIn the view\n\n```\nvar form_data = form.serializeArray();\nthis.model.data =  form_data;\nvar profiledata;        \nif (window.FormData) {  \n        profiledata = new FormData(); \n        console.log(profiledata);   \n}\n\nif (profiledata) {  \n    jQuery.each($('#ImageData')[0].files, function(i, file) {\n        //reader.readAsDataURL(file);  \n        profiledata.append(\"ImageData[]\", file);\n\n    });     \n}   \n    this.model.ImageData = profiledata;\n\n//and save the data\nthis.model.save\n```\n\nHelp me to solve this problem\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2950",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2950/comments",
    "title": "Server interaction callback \"always\" (jQuery inspired)",
    "created_at": "2014-01-10T14:50:57Z",
    "updated_at": "2014-01-13T20:36:06Z",
    "body": "In many cases more useful to use always callback for avoiding excess code.\n\n```\nsome_model.fetch\n  success: ->\n    # code\n  error: ->\n    # similar code\n```\n\nBetter:\n\n```\nsome_model.fetch\n  always: ->\n    # laconic code\n```\n\nAnd built-in events too:\n\n```\nsome_model.once \"sync\", ->\n  # I must clear error event\nsome_model.once \"error\", ->\n  # I must clear sync event\n```\n\nMaybe:\n\n```\nsome_model.once \"always\", ->\n  # I forgot about clear events\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2947",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2947/comments",
    "title": "Add provision for `before` and `after` hooks in a router",
    "created_at": "2014-01-08T10:14:44Z",
    "updated_at": "2014-01-09T12:16:03Z",
    "body": "I wanted to execute a specific function before/after every route of a specific controller is matched, and I got here.\n\nhttp://danialk.github.io/blog/2013/06/08/backbone-tips-after-and-before-methods-for-router/\n\n```\nvar Router = Backbone.Router.extend({\n    routes: {\n        '': function(){\n            console.log('INDEX ROUTE');\n        }\n    },\n    before: function () {\n        console.log('before');\n    },\n    after: function () {\n        console.log('after');\n    }\n});\n```\n\nThe API looks clean and it does it by monkey patching 2 route callbacks. I think its worth to have this as a core feature. Comments? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2945",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2945/comments",
    "title": "Undocumented BC break in Backbone 1.1",
    "created_at": "2014-01-07T14:23:54Z",
    "updated_at": "2014-01-08T06:54:24Z",
    "body": "#2426 removed the possibility to pass the url as an option in the constructor of the collection, but the upgrading guide does not mention it\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2944",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2944/comments",
    "title": "In newer versions of Backbone, cannot get query from Backbone.history",
    "created_at": "2014-01-06T16:33:55Z",
    "updated_at": "2014-01-06T22:18:36Z",
    "body": "I am writing a plugin for route management for Backbone.js.\n\nI have noticed that a recent change in commit f0572b0e511d25d982c4c022d1824adb37bbee7e for issue #2765 makes it so that `Backbone.history.fragment` no longer returns the query. Getting the full fragment with query is very useful. I know It can be manually parsed from the URL but then you have to worry about if **pushState** is on and whatever other options effect how Backbone.history works. So I find it would be best to get it directly from `Backbone.history`.\n\nThe fix could be as simple as keeping a reference called something like **Backbone.history.queryfragment** (or whatever name makes most sense) and storing a reference just before replacing with `pathStripper`\n\nI would be interested doing a PR for this. Please let me know.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2943",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2943/comments",
    "title": "Add an event for Collection#create so the request is not lost when using { wait: true }",
    "created_at": "2014-01-06T14:36:58Z",
    "updated_at": "2014-01-14T19:30:26Z",
    "body": "We listen to `sync`/`request` events and hook into the promise nature of the `xhr` to show loading status, disable buttons etc. For example, when adding a new comment, we use `{ wait: true}` and freeze the textarea and button. \n\n``` javascript\n// This could be in a view that is different than the code that does the request.\nthis.listentTo(model, 'request', function(model, xhr) {\n  this.freezeAddComment();\n  xhr.always(this.thawAddComment)\n  .done(this.resetComment)\n  .fail(this.showCommentError);\n});\n```\n\nWhen using `Collection#create()` with `{ wait: true }`, the request to save the new model is lost.\n\nTherefore, I suggest we add something like a `create` event that occurs on the collection after the request is made. Currently, we have a custom `sync` that does this:\n\n``` javascript\nsync: function(method, model, options) {\n\n  var xhr = Model.prototype.sync.apply(this, arguments);\n\n  var collection = model.collection;\n  if (method === 'create' && collection) {\n    collection.trigger('create', model, collection, xhr, options);\n  }\n\n  return xhr;\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2941",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2941/comments",
    "title": "Introducing Model.getRaw()",
    "created_at": "2014-01-04T19:16:56Z",
    "updated_at": "2014-01-05T16:38:21Z",
    "body": "I found [this gist](https://gist.github.com/adriano-di-giovanni/8259369) very useful. Maybe it can become a Backbone feature.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2940",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2940/comments",
    "title": "Adding two identical callbacks",
    "created_at": "2014-01-03T22:34:09Z",
    "updated_at": "2014-01-06T15:58:22Z",
    "body": "So when you add two identical events to an Event dispatcher like so:\n\n``` js\nobject.on( \"name\", this.onName, this );\nobject.on( \"name\", this.onName, this );\n```\n\nAnd later trigger `object.trigger( \"name\" )` it actually executes `this.onName` twice. I don't think that is the expected behavior. And Identical listener should _replace_ the previous.\n\nAny other opinions?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2939",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2939/comments",
    "title": "problem with my c code to find nth smallest element.I think its in the recursion",
    "created_at": "2014-01-01T01:53:49Z",
    "updated_at": "2014-01-01T02:43:59Z",
    "body": "```\n#include<stdio.h>\n\nint order(int a[],int start,int end,int rank)\n          // order function\n        {\n            int mark,try;\n            int i,j,k,temp,pivot,x;     \n            j=k=0;   // two markers j and k initialised to 0\n            pivot=a[start];\n\n            // making partition based on pivot\n\n            for(i=0;i<end;i++)  // index\n                {\n                    if(a[i]<=pivot)  // comparing each element with pivot\n                    {\n                        temp=a[k];\n                        a[k]=a[j];\n                                    a[j]=temp;\n                        j++;\n                                    k++;\n                    }\n                    else\n                    {\n                        j++;\n                    }\n                }    \n                                    // in the end to exchange with the pivot\n                        temp=a[start];\n                        a[start]=a[k-1];\n                        a[k-1]=temp;\n                        mark=k-1;\n                // Condition for recursion or final answer  \n\n            if(rank-1==mark)\n                {\n                    return a[rank-1];\n                }\n\n            else\n                {\n        if(rank-1<mark)\n            order(a,start,mark-1,rank-mark-1); // problem is here i think\n        else\n            order(a,mark+1,end,rank-mark-1);   // and here  \n                }\n\n        }\n        main()\n        {\n            int a[10]={\n                1,2,3,4,5,6,7,8,9,0\n            };\n            int x,y;\n            printf(\"enter the rank\\n\");\n            scanf(\"%d\",&y);\n            x=order(a,0,10,y);\n            printf(\"answer is %d\",x);\n        }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2937",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2937/comments",
    "title": "Backbone events still fired the old event",
    "created_at": "2013-12-26T09:10:16Z",
    "updated_at": "2013-12-28T01:15:05Z",
    "body": "hello there,\nim new in backbone.. and i have a question about backbone events,\nthis is the scenario,\ni have a button(save) inside my edit view, at the first edit when i click the save it fires only one event.. but when i reroute and go to another item( new edit view with other model )..  and click save.. it looks like the click event of save in the first view is still binded..\n\nis there a way to unbind the first event ?\nsorry for my grammar, thank you\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2932",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2932/comments",
    "title": "URL conflict between collections and models",
    "created_at": "2013-12-19T16:16:27Z",
    "updated_at": "2013-12-19T16:34:29Z",
    "body": "The default constructor of Collections allows to define the collection url through the options parameter.\n\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.url) this.url = options.url;\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\nNext, the models defined in the first argument are built with the same options as their collection (through the call to method 'reset')\nAs a result, the default url computation of Models is replaced by a constant url so much so the models and the collection share the same URL!\n\nThis conflicts with the computation which consist to concatenate the collection url and the model id.\n\n```\nurl: function() {\n  var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();\n  if (this.isNew()) return base;\n  return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);\n},\n```\n\nThe url should not disappear from the models options?\n    if (models) this.reset(models, _.extend({silent: true}, _.omit(options, 'url')));\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2929",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2929/comments",
    "title": "Model retains 'collection' property in 'remove' event handler",
    "created_at": "2013-12-18T16:46:29Z",
    "updated_at": "2015-02-17T22:10:29Z",
    "body": "When a model is removed from a collection, its reference to the collection is deleted. However, at the time that a `remove` event is called on a model, the model still has its reference to the collection from which it was removed. One would expect that the state of a model in a `remove` event handler would be the same as when the remove action is completed.\n\n``` javascript\nvar model = new Backbone.Model();\nvar collection = new Backbone.Collection([model]);\n\nmodel.on('remove', function() {\n  model.hasOwnProperty('collection')   // expected false, actual is true\n});\n\ncollection.remove(model);\n```\n\nSee [jsFiddle here](http://jsfiddle.net/j85Xe/4/).\n\nMy use case is something like this:\n\n``` javascript\nvar TargetModel = Backbone.Model.extend({\n  isPartOfCollection: function() {\n    return !!this.collection;\n  }\n});\n\nvar ObjectBoundToModel = function() {\n  var model = new TargetModel();\n  model.on('remove', function() {\n    if (model.isPartOfCollection()) {\n      this.actInOneWay();\n    }\n    else {\n      this.actInAnotherWay();\n    }\n  });\n}\n```\n\nAs it stands, I would have to do something semantically goofy, like this:\n\n``` javascript\nTargetModel = Backbone.Model.extend({\n  isPartOfCollection: function() {\n    return this.collection && this.collection.contains(this);\n  }\n});\n```\n\nSo, not a huge deal to workaround, but still not expected behavior, IMO.\n\nLooking at the Backbone.Model#remove method -- is there any reason that the `removeReference_` call cannot be made _before_ the `remove` event is triggered?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2927",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2927/comments",
    "title": "Ajax options on errors triggers",
    "created_at": "2013-12-18T11:52:15Z",
    "updated_at": "2013-12-18T16:05:24Z",
    "body": "I have a problem in save, when I do a save the server is returning a error which I can capture with error and treat it. But in our case the server is returning an error code which we use to show a pop-up asking for confirmation with a server message and if the user confirm then we have to send again the request but adding some request parameters which are given from the server. This parameters tell the server that this request come from a confirm. \n\nI noted than in the error handlers we don't have the ajax options. If I listen \".ajaxError\" I have it and I can resend it but If I listen \"error\" from backbone, then I cant. I fork the project and I add a change which allow to have this options in error and to use it. \n\nWith this change the api of error will be: \n\n(model, xhr, options, ajaxOptions)\n\nWhat do you think about? \n\nHere  is my commit: e0aa9e93dc2eac2041c498fd8d933f6f798a2744\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2926",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2926/comments",
    "title": "TypeError: targetModel is undefined with Collection.fetch",
    "created_at": "2013-12-17T12:03:14Z",
    "updated_at": "2013-12-18T18:45:27Z",
    "body": "Hi there,\n\nI am busy with a script and suddenly (even with rolling back) I get this error in firebug when doing a collection.fetch():\n\n```\nTypeError: targetModel is undefined                  backbone.js line 683\n```\n\nWhen I look in the code I can see this:\n\n```\nif (attrs instanceof Model) {\n    id = model = attrs;\n} else {\n    id = attrs[targetModel.prototype.idAttribute];\n}\n```\n\nand hovering above the attr will show the JSON data I received with the fetch.\nWhen hovering above the targetModel I see undefined. \n\nI am trying to figure out what is going on here, but can't find it.\n\nHere is my model:\n\n```\nvar OF = OF || {};\n\nOF.UsersMdl = Backbone.Model.extend({\n\n    defaults: {\n        username: \"\",\n        homefoldersize: \"\",\n        revision: \"\",\n        lastsyncdate: \"\",\n        LDAP: \"\",\n        PwPolicy: \"\",\n        mailinglist: \"\",\n        email: \"\"\n    }\n\n});\n```\n\nAnd my collection:\n    var OF = OF || {};\n\n```\nOF.UsersCollection = Backbone.Collection.extend({\n\n    model: OF.UsersMdl,\n\n    url: 'php/api/users/',\n\n    parse: function(data) {\n        return data['all-users'];\n    }\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2925",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2925/comments",
    "title": "Problem on `Backbone.sync` using new version of zepto.js",
    "created_at": "2013-12-17T07:00:39Z",
    "updated_at": "2013-12-18T01:48:43Z",
    "body": "This problem cause of zepto.js 1.1.1's `ajaxBeforeSend()` is called before `xhr.open()`.\n\nhttps://github.com/madrobby/zepto/issues/878\n\nI posted [gist](https://gist.github.com/Layzie/8000427) for fix this problem.\nDoes anyone have any nice idea?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2924",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2924/comments",
    "title": "e params",
    "created_at": "2013-12-17T00:16:56Z",
    "updated_at": "2013-12-17T00:17:06Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2922",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2922/comments",
    "title": "Model with id \"undefined\" returned by collection.get(obj)",
    "created_at": "2013-12-16T16:58:13Z",
    "updated_at": "2015-02-04T15:43:05Z",
    "body": "@caseywebdev The `Collection::get` method defined by 01d9f0f9b1e85cb21a2940902bc8ba4280c8bca9 has this odd behavior when the collection contains a model with the id `\"undefined\"`: `collection.get(obj)` will return that model whenever `obj.id` is `undefined`. An odd edge case, I know, but believe it or not I ran into this in a production application... among other things, it means that\n\n```\nnew Backbone.Collection([{id: 'undefined'}, {id: 'foo'}, {id: 'bar'}])\n```\n\nwill create a collection with length `1`.\n\nWhat was wrong with the [Backbone 1.0.0 definition](https://github.com/jashkenas/backbone/blob/1.0.0/backbone.js#L786) of `get`, which explicitly checked for this case?\n\n```\nreturn this._byId[obj.id != null ? obj.id : obj.cid || obj];\n```\n\nRelated to #2847.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2921",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2921/comments",
    "title": "How to listen to the view.el events inside view?",
    "created_at": "2013-12-15T19:05:16Z",
    "updated_at": "2013-12-16T16:55:31Z",
    "body": "This does not work:\n\n``` javascript\nevents:{\n  \"click .thisview\": \"onClickEvent\"\n }\n\nevents:{\n  \"click\": \"onClickEvent\"\n }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2920",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2920/comments",
    "title": "Collisions between id and cid within collection cause mayhem",
    "created_at": "2013-12-13T16:51:25Z",
    "updated_at": "2014-10-22T21:22:26Z",
    "body": "Because both `id` and `cid` are used as the keys of `_byId`, there's an implicit assumption that no model's `id` will equal the `cid` of any other model in the same collection. Breaking this assumption causes very strange behavior:\n\n```\nvar model1 = new Backbone.Model()  // model1.cid = 'c1'\nvar model2 = new Backbone.Model({id: 'c1'})\nvar collection1 = new Backbone.Collection([model1, model2])\nvar collection2 = new Backbone.Collection([model2, model1])\n```\n\nIn this case, `collection1` will only contain `model1`, and `collection2` will only contain `model2`.\n\nThis doesn't seem like an unrealistic edge case to me. I think the `_byId` hash should be broken up into separate `_byId` and `_byCid` hashes, with the `Collection::get` behavior made explicit to favor ids over cids:\n\n```\nreturn this._byId[obj] || this._byCid[obj] || this._byId[obj.id] || this._byCid[obj.cid];\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2919",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2919/comments",
    "title": "Non 200 status code not catching error handler on saving model",
    "created_at": "2013-12-13T16:40:59Z",
    "updated_at": "2014-01-14T19:20:24Z",
    "body": "Regarding the document: http://backbonejs.org/#Model-save. I sent a 201 (or 202, 203) status respond code from server, however, error handler didn't get fired.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2917",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2917/comments",
    "title": "Problem with idAttribute",
    "created_at": "2013-12-13T09:54:53Z",
    "updated_at": "2014-01-14T19:22:05Z",
    "body": "Hello, \n\nwe are having problems with the new backbone version concerning the new policy of to use \"idAttribute\". Before we use always \"this.id\" in \"parse\" and it was working correctly but now it is not working, so we are changing all our models to \"idAttribute\" but we found some strange behaviours. E.G. : \n\nWe have a model with three attributes {code=\"\",label=\"\",text=\"\"} where \"idAttribute=code\". To create new elements we have a form where the user add this three attributes, but when we try to save it, Backbone realizes a PUT instead of a POST, because when I set the \"code\" Backbone also set the \"this.id\" so the model never is new and it cant be POST. How can we use \"idAttribute\" in models that the \"id\" is not generated by the server but it is added from the user in a form?\n\nOther problem with \"idAttribute\" is when we need to have a composed id. After we set the \"this.id\" in the parse and this don't affect the attributes, but now this don't work. So we have to set the \"response.id\" in parse in order to Backbone treat it, but then we have \"id\" in the attributes and we don't want it, because the rest don't accept this attribute because the \"id\" is only used in the url.\n\nWhat can we do in this case?\n\nI think this last update about \"idAttribute\" have more limitations than benefits.   \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2915",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2915/comments",
    "title": "View in 1.* alters arguments[0] before calling initialize()",
    "created_at": "2013-12-12T15:02:35Z",
    "updated_at": "2013-12-12T20:20:02Z",
    "body": "In 1.\\* View will change arguments[0] from null to an empty object, so the initialize() will be called with {} instead of null (which breaks some implementations that check for null):\nvar View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});      // <------ options(arguments[0]) is set to {} if it was null\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);  // <----- initialize is called with the new value\n    this.delegateEvents();\n  };\n\n0.9 had a correct implementation (i.e. not changing the arguments):\nvar View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    this._configure(options || {});  // <-- options is NOT changed here\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2914",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2914/comments",
    "title": "Pausing for some time in the backbone.js",
    "created_at": "2013-12-12T07:43:37Z",
    "updated_at": "2013-12-12T14:39:18Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2911",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2911/comments",
    "title": "Security Issue",
    "created_at": "2013-12-10T22:39:47Z",
    "updated_at": "2013-12-10T22:43:30Z",
    "body": "_updateHash function (line 1518)  sends unverified data to a web browser\n, which can result in the browser executing malicious code/XSS attack.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2910",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2910/comments",
    "title": "tailing slashes causing 301 redirects on some servers",
    "created_at": "2013-12-10T22:24:06Z",
    "updated_at": "2013-12-10T22:50:31Z",
    "body": "I recently raised an [issue](https://github.com/TryGhost/Ghost/pull/1648) in the ghost project.\n\n`url: function() {\n      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();\n      if (this.isNew()) return base;\n      return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);\n    },`\n\nIt all around this function in backbone. As nodejs express server is using a plugin to add a tailing slash to all GET requests. This is to give consistency to all the urls.\n\nThis then becomes an issue as backbonejs when creating the url for the model doesn't place a tailing `/` to the url. Therefore the server will respond with a 301 redirect then the client needs to follow the redirect. This adds latency to the system.\n\nI am sure other projects do the same thing as Ghost. I suggest adding a setting in backbone where you can set to add a tailing `/` to all api urls.\n\nI suggest that the url function return is passed through another function to add or remove a tailing slash if needed.\n\nDo you want me do fork this and create a working proof of concept?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2909",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2909/comments",
    "title": "Navigate no longer preserves url parameters",
    "created_at": "2013-12-10T22:21:43Z",
    "updated_at": "2013-12-11T13:02:18Z",
    "body": "It looks like you added the line:\n\nfragment = fragment.replace(pathStripper, '');\n\nto the navigate method. \n\nMy code base relies on being able to pass url parameters to navigate for reasons unrelated to best coding practices. \n\nCan there be a switch that turns this new \"feature\" off?\n\nI cannot upgrade to newer versions of backbone until this is resolved. \n\nI saw a post about Backbone.qs needing to be defined before backbone parses url params, but doing that does not fix the broken navigate method...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2908",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2908/comments",
    "title": "how to break backbone collection such that each of the child collection also listen to the events that will be registered by parent collection",
    "created_at": "2013-12-10T11:49:54Z",
    "updated_at": "2013-12-10T14:25:54Z",
    "body": "i want to break up a backbone collection such that each of the child collection also listen to the events that will be registered by parent collection.\n\nfor example i have collection\n\n```\nparent = {\nmodels : [model1, model2, model3, model4, model5 ]\n//other properties of collections\n}\n```\n\nto break in children grouped by a specific attribute (say 'a')\n\n```\nchild1 = {\nmodels : [model1, model2, model4],\n//other properties of collection\n}\n\nchild2 = {\nmodels : [model3, model5],\n//other properties of collection\n}\n```\n\nPS: number of child collections is not specific. these are to be dynamic created.\n\nNow i want whenever any event (custom or predefined) occurs on parent collection.\nAll child collection should listen to those.\n\nIs there any suitable approach for the same?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2907",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2907/comments",
    "title": "How to update backbone from 0.9.2 to 1.1.0",
    "created_at": "2013-12-06T07:16:37Z",
    "updated_at": "2013-12-10T09:53:59Z",
    "body": "my app make with 0.9.2, now i want to update to 1.1.0 ,but app cannot run ,and have not error in console. can you help me or suggest me focus where part of backone  make it ?, thank you very much!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2904",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2904/comments",
    "title": "Several lines contain too many characters",
    "created_at": "2013-12-03T08:32:17Z",
    "updated_at": "2013-12-07T15:59:00Z",
    "body": "that on annotated source page and Github repo there are annoying scrollbars.\nI'm not sure if that's really necessary, but limiting the max length of lines makes code better for reading.\n\n```\n  var noXhrPatch = typeof window !== 'undefined' && !!window.ActiveXObject && !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);\n```\n\nhttps://github.com/jashkenas/backbone/blob/79b4b4f68e77ca4e8172a4fa8be6f17eb6284a6e/backbone.js#L1188\n\n```\n        this.iframe = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n```\n\nhttps://github.com/jashkenas/backbone/blob/79b4b4f68e77ca4e8172a4fa8be6f17eb6284a6e/backbone.js#L1384\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2902",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2902/comments",
    "title": "Router problems",
    "created_at": "2013-12-02T21:54:17Z",
    "updated_at": "2013-12-29T14:43:40Z",
    "body": "Backbone is a great library, but Router is the weak point of this.\n\n1)  Why if i change query string parameters, Router thinks that nothing changed?\n\n2) Why if Router thinks that nothing changed, it do not do pushState? Why do it decides this instead of me? \nFor now i need reload current url without reloading page, but i cant do it.\nPlease help me, what can i do with it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2901",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2901/comments",
    "title": "Merge option for Collection.set is not working in a specific case",
    "created_at": "2013-12-02T19:22:52Z",
    "updated_at": "2013-12-02T21:57:10Z",
    "body": "When adding models to a collection, duplicates are not merged when Collection.model is defined as a method that instantiates an appropriate model (for polymorphic collections). This happens when the models being added are still defined as objects, not instantiated models.\n\nA minimum example: http://jsfiddle.net/tkriplean/xLQHf/3/\n\nThe issue occurs in Collection.set on line 683 (for v1.1.0):\n\n```\n id = attrs[targetModel.prototype.idAttribute];\n```\n\nIn the case described, targetModel will be a method, not a model class, and therefore targetModel.prototype.idAttribute is always undefined. Which subsequently means that the already existing model is never found.  \n\nAn ugly workaround is to instantiate the list of models first and then add them to the target collection. \n\nAnyway, just wanted to report this issue :-)\n\nThanks for Backbone, it is great!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2899",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2899/comments",
    "title": "add field for using cookies in addition to urls",
    "created_at": "2013-11-28T03:01:36Z",
    "updated_at": "2013-12-02T15:59:16Z",
    "body": "Just an idea that I think will be very complementary to Backbone would be cookie io\n\nBasically, there is a `cookie` attribute that is equivalent to `url` in which `fetch()` would look for the url attribute and then fallback to the cookie one, and then try and parse data from `document.cookie` instead of doing an HTTP request to a server. Also, the save method for models and collections would then encode the data into `document.cookie`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2898",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2898/comments",
    "title": "Collection.create expects HTTP 200 response instead of HTTP 201",
    "created_at": "2013-11-27T20:40:37Z",
    "updated_at": "2013-11-28T00:13:07Z",
    "body": "When receiving an \"HTTP 201 Created\" response from Collection.get the add event does not get triggered and the model does not get added to the collection.  It would be good to support both response codes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2896",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2896/comments",
    "title": "do not send custom headers to worse than legacy servers",
    "created_at": "2013-11-27T12:37:48Z",
    "updated_at": "2013-11-27T21:37:22Z",
    "body": "I was very glad to see the legacy server support in sync, but some hostings do not accept the OPTIONS method, and when Backbone sends the X-Override-Method header the browser sends an OPTIONS request, and CORS does not work, because the browser forbids it.\n\nI would add another option: Backbone.allowCustomHeaders, which could be true by default, and if set to false would prevent any custom headers to be sent. \n\nDo I need to create a pull request for that?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2894",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2894/comments",
    "title": "The examples list should be moved at the end of the documentation",
    "created_at": "2013-11-26T20:51:19Z",
    "updated_at": "2013-11-27T21:37:02Z",
    "body": "The examples list in it's current form shadow the FAQ section, several time I've been mistaken into beliving that the examples is the end of the documentation. \n\nThe FAQ as very important info in it, but it's difficult to actually see that there is a FAQ section, because one has to scroll throught the long list, and I assume, ever increasing list of examples. It could actually be the last item in the documentation, after the changelog.\n\nThe examples are nice, but not useful when developing, while the FAQ is, so it should then come before. This is particularly true since this a flowing documentation, and it's meant to be read by scrolling.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2893",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2893/comments",
    "title": "[Regression] location.search is ignored for routing via .history.start",
    "created_at": "2013-11-26T15:53:06Z",
    "updated_at": "2013-11-26T16:45:39Z",
    "body": "If you use Backbone.history.start({pushState: true}) on $(document).ready in modern browser (i.e. Firefox 25) -- then routes are processed badly. The ones that contain GET parameters (/me?x=1) are not working.\n\nThough the same routes are working when you try to use router.navigate.\n\nThis issue was introduced in 0.9.3 -- in https://raw.github.com/jashkenas/backbone/0.9.2/backbone.js code is working.\n\nI have dived into this issue and found out that location.search part is dropped from URL when routes are checked.\n\nExecution plan:\n1. Backbone.history.start does checks and finally call `return this.loadUrl()` -- last line of the function\n2. Backbone.history.loadUrl get fragment using Backbone.history.getFragment()\n3. Backbone.history.getFragment() only uses location.pathname and hash to calculate fragment, location.search is ignored\n4. Incomplete fragment is used to iterate over routes in Backbone.history.loadUrl \n5. Wrong route is used\n\nWe need a fix for this so that we could use routes that works with query params.\n\nI proposed a fix for this -- https://github.com/tonnzor/backbone/commit/c70443903f716d84eeb5ed755d97cad45ddd9e1e but probably we need a better solution\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2892",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2892/comments",
    "title": "Brew Doctor ",
    "created_at": "2013-11-26T03:37:44Z",
    "updated_at": "2013-11-26T17:28:17Z",
    "body": "Hello, I have just begun exploring the world of development, and of course I already have an issue following the installation phase for a RoR tutorial on lynda.com. It appears to be basic, but it is not something I can comprehend. Below is the message I receive after inputing \"brew doctor\". If anyone can help it would be tremendously appreciated!\n\nmichaeldang$ brew doctor\nWarning: Some directories in /usr/local/share/man aren't writable.\nThis can happen if you \"sudo make install\" software that isn't managed\nby Homebrew. If a brew tries to add locale information to one of these\ndirectories, then the install will fail during the link step.\nYou should probably `chown` them:\n\n```\n/usr/local/share/man/mann\n```\n\nWarning: Unbrewed dylibs were found in /usr/local/lib.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\n\nUnexpected dylibs:\n    /usr/local/lib/libtcl8.6.dylib\n    /usr/local/lib/libtk8.6.dylib\n\nWarning: Unbrewed .pc files were found in /usr/local/lib/pkgconfig.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\n\nUnexpected .pc files:\n    /usr/local/lib/pkgconfig/tcl.pc\n    /usr/local/lib/pkgconfig/tk.pc\n\nWarning: Unbrewed static libraries were found in /usr/local/lib.\nIf you didn't put them there on purpose they could cause problems when\nbuilding Homebrew formulae, and may need to be deleted.\n\nUnexpected static libraries:\n    /usr/local/lib/libtclstub8.6.a\n    /usr/local/lib/libtkstub8.6.a\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2891",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2891/comments",
    "title": "Backbone AMD module doesn't return factory.",
    "created_at": "2013-11-25T23:31:18Z",
    "updated_at": "2013-11-28T21:59:59Z",
    "body": "With the recent AMD support added in https://github.com/jashkenas/backbone/commit/ab5d2eb4c657ed81e80ac815f687e94a2cb55fef, the define-statement doesn't return the factory. This means if you do a require-call to Backbone, you don't get the factory returned.\n\nIsn't the intention to expose backbone in the global object **AND** still return the factory?\n\nTo follow the [UMD convention](https://github.com/umdjs/umd/blob/master/returnExportsGlobal.js#L21) I would make the following change:\n\n```\ndefine(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      return (root.Backbone = factory(root, exports, _, $));\n});\n```\n\nInstead of:\n\n```\ndefine(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2888",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2888/comments",
    "title": "Follow SemVer",
    "created_at": "2013-11-22T10:32:48Z",
    "updated_at": "2014-08-27T18:57:56Z",
    "body": "Backbone.JS is a project with a large following, but regular \"minor versions\" (e.g 1.1.0) break compatibility with existing Backbone codebases.\n\nTo make it easier for developers to determine if a new version of Backbone includes backwards-compatible features vs backwards-incompatible api changes, Backbone's versioning scheme should follow [semantic versioning (SemVer)](http://semver.org)\n\nThe gist of semver is as follows: \n\n> Given a version number MAJOR.MINOR.PATCH, increment the:\n> \n> MAJOR version when you make incompatible API changes,\n> MINOR version when you add functionality in a backwards-compatible manner, and\n> PATCH version when you make backwards-compatible bug fixes.\n> Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.\n\nThis would make the existing version (1.1.0) a 2.0.0 version (as most of the changes broke existing API) which would clearly indicate to developers that the API is different, and allow developers to utilise npm's wildcard versions (e.g \"1.x\", \"~1\")\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2884",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2884/comments",
    "title": "Infinite loop on change event",
    "created_at": "2013-11-19T18:28:07Z",
    "updated_at": "2013-11-20T06:08:02Z",
    "body": "The following code will produce an infinite loop in backbone 1.10 (probably older versions as well). As I understand the code, the problem lies with the use of _changing and _pending, which should be counting semaphores, not booleans,\nplus the actual logic of when to fire events. IMHO, recursive calls to set should only\nfire event(s) at the end, the code is not exactly doing this, as it fires change:attribute events, but not change events on a recusrion case, and it cannot handle the same attribute changing twice.\n\nAre you aware of the issue, and is anybody working on it ? if not, I can try to fix it.\nplease let me know.\n\ncode:\n\n```\n      var m=new Backbone.Model();\n      m.on('change',function(m){\n        console.log('change');\n        m.set('b',2);\n        m.set('b',3);\n      });\n      m.set('a',1);\n      console.log(m.attributes);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2883",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2883/comments",
    "title": "Add favicon to backbonejs.org",
    "created_at": "2013-11-19T17:38:26Z",
    "updated_at": "2014-01-28T15:36:53Z",
    "body": "I use Chrome's \"pin tab\" feature, which makes things look like this:\n\n![Screenshot](http://i.imgur.com/npb5XsG.png)\n\nOne of the tabs in there is http://backbonejs.org/docs/backbone.html, but I can't tell which unless I remember. \n\nIs there a favicon we can use for http://backbonejs.org/docs/backbone.html?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2882",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2882/comments",
    "title": "How can I set the default sort arrow to a column when the grid is loaded. ?",
    "created_at": "2013-11-19T13:05:41Z",
    "updated_at": "2013-11-19T13:14:11Z",
    "body": "Hi , I want to set the arrow (up or down)  icon for a column, when  the grid is reloaded or loaded at first to show the gird is sorted by that column and in that order ! is it possible?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2881",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2881/comments",
    "title": "fragment = fragment.replace(pathStripper, ''); querystring support",
    "created_at": "2013-11-19T08:31:03Z",
    "updated_at": "2013-11-19T22:11:39Z",
    "body": "hello,\nfirst i want to say thanks for this greet library!!! awesome work!\n\nin line 1484: in the navigate function:\nfragment = fragment.replace(pathStripper, ''); querystring support\n\nnow when you are striping the fragment with pathStripper.\n\nif the current fragment is for example: test\nand i want to navigate to navigate('test?p=1',{triger:true})\nit will not work! because line 1486:\n if (this.fragment === fragment) return;\n\ni want to be able to navigate if i just changing the querystring\nthanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2880",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2880/comments",
    "title": "How to convert the below synchronous ajax call to asynchronous?",
    "created_at": "2013-11-16T17:02:36Z",
    "updated_at": "2013-11-16T17:04:18Z",
    "body": "Hello Experts,\n\nI am validating the availability of user using jquery in user form.\n\nI am using JQuery ValidationEngine.\n\n---\n\n_checkUserAvailability: function (field, rules, i, options) {\n            var result = \"noError\";\n            $.ajax({\n                type: \"POST\",\n                url: \"RegistrationForm.aspx/checkUserAvailability\",\n                data: JSON.stringify({ userID: field.attr('value') }),\n                contentType: \"application/json; charset=utf-8\",\n                dataType: \"json\",\n                async: false,\n                success: function (data, status) {\n                    callError(data.d);\n                },\n                failure: function (data, status) {\n\n```\n            },\n            error: function (data, status) {\n\n            }\n        });\n\n        function callError(data) {\n            if (data == false) {\n                result = \"Error\";\n            }\n        }\n\n        if (result == \"Error\") {\n            return options.allrules.checkUserAvailability.alertText;\n        }\n    }\n```\n\n---\n\nHow to convert the above synchronous ajax call to asynchronous?\n\nWhen I make \"async: true\" the code is no more working.\n\nI want to make the code asynchronous at the same time I return \"options.allrules.checkUserAvailability.alertText;\" to \"_checkUserAvailability\" function.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2879",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2879/comments",
    "title": "Model reset",
    "created_at": "2013-11-15T06:35:23Z",
    "updated_at": "2014-07-04T03:12:03Z",
    "body": "It would be convenient to have a method for mode.reset(), so the model can reset itself the default values defined in model.defaults.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2877",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2877/comments",
    "title": "unable to populate Collection from raw data",
    "created_at": "2013-11-14T04:57:44Z",
    "updated_at": "2013-11-14T05:23:28Z",
    "body": "``` javascript\n$(document).ready(function () {\n  people = Backbone.Collection([\n    {name: \"Tim\", age: 5},\n    {name: \"Ida\", age: 26},\n    {name: \"Rob\", age: 55}\n  ]);\n  alert(JSON.stringify(people));\n});\n```\n\ncauses\n\n```\nUncaught exception: TypeError: 'this._reset' is not a function\nError thrown at line 23465, column 4 in <anonymous function: Backbone.Collection>(models, options) in http://127.0.0.1:8000/webapp/app.js:\n    this._reset();\ncalled from line 481, column 2 in <anonymous function>() in http://127.0.0.1:8000/:\n    people = Backbone.Collection([\n```\n\nBackbone 1.1.0, Underscore 1.5.2 (the same with lodash).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2874",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2874/comments",
    "title": "Clarify underscore (>1.5.0 vs >=1.4.3) for 1.1.0",
    "created_at": "2013-11-13T21:48:46Z",
    "updated_at": "2013-11-14T04:16:42Z",
    "body": "There is currently a discrepancy between the backbonejs.org website and the package.json for what is required for Backbone 1.1.0\n- package.json - >=1.4.3\n- website -- \"Backbone's only hard dependency is Underscore.js ( >= 1.5.0)\"\n\nPlease clarify\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2873",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2873/comments",
    "title": "Model attribute named constructor is lost (starting in v1.1.0)",
    "created_at": "2013-11-13T19:50:05Z",
    "updated_at": "2013-11-13T23:22:21Z",
    "body": "The code:\n\n``` js\nmodel = new Backbone.Model({constructor: 'test'});\nmodel.get('constructor');\n```\n\noutputs \"test\" in v1.0.0, but in v1.1.0 outputs the model constructor function. I could not find any documentation explaining this change nor could I find the diff causing this change.\n\nNote that\n\n``` js\nmodel.set('constructor', 'test');\nmodel.get('constructor');\n```\n\noutputs \"test\" in both versions.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2872",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2872/comments",
    "title": "router.navigate(trigger:false) still triggers routes when used in hashChange mode",
    "created_at": "2013-11-12T18:04:43Z",
    "updated_at": "2014-06-24T07:16:15Z",
    "body": "Hi,\n\nI apologize if this has been covered. I did search the issues, but nothing seemed to address this.\n\nOur app has been developed using Backbone.router in hashChange mode (that is, without pushState:true), in order to support older browsers.  The Backbone doc seems to say that pushState-mode and hashChange-mode will work the same way, but they do not.  \n\nIn particular, we can't seem to avoid triggering a route every time we call router.navigate(). Adding {trigger:false} is ineffective in this case, and anyway 'false' is meant to be the default.  I find nothing in the doc that warns about this; there are only a bunch of reassurances that pushState and hashChange modes work exactly the same.  \n\nIt took us a while to understand what was happening.  There is, by definition, no way to avoid triggering the hashchange event when changing the hash part of the URL.  Our local solution would be to wrap Backbone.navigate() and Backbone.checkUrl(), to first set and then clear some kind of ignore-one-hashchange-event flag, so that the hashchange event triggered by navigate() is silently ignored.  This approach could be added direct to Backbone; i'd gladly contribute the code if it's a good idea.\n\nOn the other hand, I can't believe we're the only ones with this problem, and I wonder if we're just doing something wrong.\n\nAny advice appreciated.  But in particular: shouldn't we be able to call navigate() without triggering a route?  Or is that somehow incorrect or undesirable?\n\nThanks,\n-mykle-\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2871",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2871/comments",
    "title": "Trailing slash for default route",
    "created_at": "2013-11-12T06:07:08Z",
    "updated_at": "2013-11-21T15:27:03Z",
    "body": "Backbone keeps adding slash at the end of default route. Here is the explanation.\n\nI have backbone routes like \n\n```\n    {\n        '': 'defaultRoute',\n        'test': 'test',\n        'testing': 'testing'\n    }\n```\n\nAssuming my root url is '/routes'\n\nNow when I say 'router.navigate('test', {trigger: true});' url changes to /routes/test.\n\nSimilar way when I call 'router.navigate('testing', {trigger: true});' url changes to /routes/testing.\n\nBut when I call 'router.navigate('', {trigger: true});' url changes to /routes/.\n\nYou know i didn't expect that / at the end. I never passed that. It should have been back to root url i.e. '/routes'.\n\nAdding / at the end makes lot of difference/meaning. Checkout 'http://googlewebmastercentral.blogspot.in/2010/04/to-slash-or-not-to-slash.html'\n\nAny fix for that (i.e. not having / at the end for default route)?\n\nSource:- http://stackoverflow.com/questions/19557934/avoid-traliing-slash-for-default-routes-in-backbone-js/19566400\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2866",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2866/comments",
    "title": "Inconsistent docs regarding arguments of error callbacks",
    "created_at": "2013-11-08T19:41:00Z",
    "updated_at": "2013-11-09T17:24:12Z",
    "body": "According to the documentation, for `model.save` and `model.destroy`\n\n> accepts success and error callbacks in the options hash, which are passed (model, response, options) and (model, xhr, options) as arguments, respectively.\n\nwhile for `model.fetch` and `collection.fetch`\n\n> accepts success and error callbacks in the options hash, which are both passed (model, response, options) as arguments.\n\nAs far as I could tell by looking at the code, error callbacks are basically treated in the same way, for all those cases, and what they receive as a second argument ultimately depends on the 'transport'. Naming issues aside (`response` vs `xhr`), the current documentation seems to imply (unintentionally) some difference in how error callbacks for fetch vs save/destroy behave where there is none. Shouldn't the docs be unified in this respect to avoid confusion?\n\nPlease correct me if I'm wrong in this.\n\n(I've also come across #2415 which attempts to fix this - but looks like it was never merged for reasons of maintaining generic naming as opposed to going with jQuery specific xhr. (which, on the other hand, is not done in the docs (or the source even)))\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2863",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2863/comments",
    "title": "targetModel.prototype returns undefined",
    "created_at": "2013-11-07T14:59:43Z",
    "updated_at": "2013-12-18T13:46:56Z",
    "body": "I'm having trouble fetching a collection (array of model attributes) from server.\n\nbackbone.js, line: 680:\n\n```\nif (attrs instanceof Model) {\n    id = model = attrs;\n} else {\n    id = attrs[targetModel.prototype.idAttribute];\n}\n```\n\n```\ntargetModel.prototype.idAttribute  \n```\n\nreturns Uncaught TypeError: Cannot read property 'idAttribute' of undefined \n\nBut, in Chrome:\n\n```\ntargetModel.__proto__.idAttribute\n```\n\nreturns \"id\".\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2861",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2861/comments",
    "title": "Global events delegation",
    "created_at": "2013-11-07T14:52:10Z",
    "updated_at": "2014-01-17T23:36:34Z",
    "body": "Hi,\n\nIn some use case, the developer wants to bind an event on a specific element unrelated to the view. For example, when implementing a custom select box, the developer will want to close the select area when a click happens anywhere else.\n\nIt is currently possible by overloading the `delegateEvents` and `undelegateEvents` methods to manually attach and detach these events; however, this approach is a bit complex and more error-prone than standard `events` mapping.\n\nMy proposal would be to allow a special tag which would basically say that we don't want to stay in the scope of the view. If we take the select box example, we could have this kind of event definition :\n\n``` js\nBackbone.View.extend( {\n    events : {\n        'click .toggle' : 'toggleEvent',\n        'click @global body' : 'closeEvent'\n    }\n} );\n```\n\nSuch thing would have multiple benefits :\n- It would allow an **easy global event handling** (which is the whole point ;)\n- It would **not break backward compatibility**, neither mess with jQuery / Sizzle\n- It would be **self-documented**, a reader would immediately know that the selector is not view-limited\n\nIt would have those inconvenients :\n- **A bit more code** to check if the selector starts by this keyword, but I don't think that performances would be very affected by an `indexOf` call (especially with Harmony's `String#startsWith`)\n- Some developers could be **encouraged to use global event instead of view-limited ones** without good reason. However, the same thing can be sayed for almost everything, and using a keyword such as `@global` allows to be sure that the developer is aware of the implications.\n\nI can write a draft implementation if you wish.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2859",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2859/comments",
    "title": "Interested in dropping dependencies on underscore and jQuery?",
    "created_at": "2013-11-07T13:57:43Z",
    "updated_at": "2014-02-21T09:05:34Z",
    "body": "Zepto is shit. It doesn't even work in IE10 which is pretty modern and used in WP8 smartphones. It also has many strange bugs.\n\nSo, only jQuery is a reasonable library to use with Backbone currently. But it is very big. This increases latency on mobile devices. Totally not cool.\n\nIn [Backbone's fork Exoskeleton](http://exosjs.com) we (w @akre54) decided to try dropping all dependencies and it worked out very well. Instead of including 40K of gzipped JavaScript, you just need to include 8K \u2014 that's **five times less**! Very noticeable on shitty 2-2.5-3G networks\n\nBut the most important part of dropping jQuery and relying on native methods is the performance. Apps I develop are usually complex and interacting with DOM natively allows to increase speed from **5 to 12 times** on Chrome. _Proofs are on the website_.\n\n**DOM is a total bottleneck** and it is unfortunate that jQuery slows it down by several magnitudes. On mobile devices this is even a bigger deal since they are slow.\n\nWould you be interested in dropping these dependencies? Maybe just jQuery?\n\nTo all folks who may defend the status quo: it's cool. But some users want more freedom.\n\nHow this can look like then:\n- [Todos example with native methods](https://github.com/tastejs/todomvc/tree/gh-pages/labs/architecture-examples/exoskeleton)\n- [Commit that removes deps in a random web app](https://github.com/paulmillr/ostio/commit/514ba86d32ae174d144871c25f58825ea093de33)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2855",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2855/comments",
    "title": "Problem with change event in Firefox",
    "created_at": "2013-11-06T15:33:42Z",
    "updated_at": "2013-11-06T18:25:30Z",
    "body": "For some reason this only happens in Firefox (tested in FF ver 5.0):\n\nvar V = Backbone.View.extend({\n    el: 'body'\n    , events: {\n        \"change #CardSelector\": \"selectCard\" \n    }\n    , selectCard:function(e){\n        this.$el.append('<div>' + this.$('#CardSelector').val() + '</div>');\n    }\n});\n\nThis event on the Backbone view will not call selectCard when the select box changes.\n\nIs there something I'm missing? Its working in Chrome.\n\nHere is a jsFiddle that I tried in FF 5 on Windows: http://jsfiddle.net/phoenecke/VE5wm/\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2850",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2850/comments",
    "title": "Tests are failing in IE6-7",
    "created_at": "2013-11-04T17:15:17Z",
    "updated_at": "2013-11-05T07:09:24Z",
    "body": "Did BB dropped the support?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2848",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2848/comments",
    "title": "key of a changed attribute",
    "created_at": "2013-11-04T11:35:38Z",
    "updated_at": "2014-09-30T16:36:51Z",
    "body": "hello,\n\nWhen listening : \n\n```\nmodel.on(\"change:attr\" , function(model , value , options ){ }) \n```\n\nHow to find the attr wich trigger the event ?\nwhy don't pass an object insteadof a value \n\n```\n=> { key : value } or { key : attr , value : value } ?\n```\n\nwith this enhancement it will be possible to do things like that :+1: \n\n```\nmodel.on(\"change:attr\" , function(model , changed , options ){\n\nconsole.log(\"event fired for : \" + changed.key + \" with value => \" + changed.value);\n\n })\n```\n\nFor the moment i don't know how to do that without a big mess !\n\nmodification :\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L355\n\n```\n - this.trigger('change:' + changes[i], this, current[changes[i]], options);\n + this.trigger('change:' + changes[i], this, { key : changes[i] , value : current[changes[i]] }, options);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2847",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2847/comments",
    "title": "If collection has an item with \"undefined\" as id, method get() returns this item, regardless its param",
    "created_at": "2013-11-04T10:39:12Z",
    "updated_at": "2013-12-16T16:58:14Z",
    "body": "``` javascript\nvar Person = Backbone.Model.extend({\n    talk: function(){\n        console.log(\"My name is \" + this.get('name') + \" and my id is \" + this.id);\n    }\n});\n\nvar Persons = Backbone.Collection.extend({\n    model : Person\n});\n\nvar Gang = new Persons([\n    {name: \"Alice\", id: \"hello\"}, \n    {name: \"Bob\", id: \"undefined\"}\n]);\n\nGang.findWhere({id : \"hello\"}).talk();\nGang.get(\"hello\").talk();\n```\n\nreturns:\n\n``` javascript\nMy name is Alice and my id is hello\nMy name is Bob and my id is undefined\n```\n\nTested in 1.1.0. I know it should not be usual to have \"undefined\" as an id, but...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2846",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2846/comments",
    "title": "'Nested' change events are fired with the incorrect options.",
    "created_at": "2013-11-03T18:59:18Z",
    "updated_at": "2014-09-05T13:07:15Z",
    "body": "If you 'set' a model inside of a model change callback, the options passed to that 'set' call are discarded in favor of the original options that trigged the model change event. \n\nIE, if I \n\n```\nmodel.set(a1, o1) //first set\nmodel.on('change', function(m, options) {\n  model.set(a2, o2); //second set\n});\n```\n\nThen the _second_ change event that is fired (by the a2 change) will get o1 vs. o2. \n\nExpected behavior is that model set events always trigger change events with the options passed to the set. IE, second change event should get o2. \n\nThe reason this happens is that the second set call resets _pending to true which causes us to we stay in the loop and fire the second change event with the options closure from the first set call.\n\nNo idea what the fix would look like for this. Setting silent is not an option (and the docs advise against it) since I want _some_ callbacks to be fired as a result of this change (I pass a flag in o2 that should prevent the function from getting called again, but since the wrong options are being passed it doesn't help me). \n\nSorry for not writing a test for this (will do that later, once I look into how backbone is testing), but here is a jsfiddle that demonstrates the behavior I'm seeing:\n\n http://jsfiddle.net/ragaskar/X3q6D/1/ \n\nExpected behavior there would be for the result output to be \"originalOption\", followed by \"skipChange\". Actual output is originalOption twice. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2845",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2845/comments",
    "title": "register events on initial page with slient:true passed to backbone history start",
    "created_at": "2013-11-02T08:37:15Z",
    "updated_at": "2013-11-03T04:08:22Z",
    "body": "I am building an app which does both client side and server side rendering. Initial page is rendered by the server and rest by backbone on the client. I do this by passing silent:true on the client history start method.\n\n I dont want the route to be executed on the initial page but i want to register events on that initial page.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2844",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2844/comments",
    "title": "Firefox 3.5/3.6 bug",
    "created_at": "2013-11-01T07:03:47Z",
    "updated_at": "2013-11-05T13:34:47Z",
    "body": "My app cracked when useing firefox 3.6\nI find out that is firefox's spider monkey did not set a variable's prototype until it's prototype has been used.\n\nIt is like this:\n\n  child = function(){ parent.apply(this, arguments); };\n  function Surrogate(){ this.constructor = child; this.cname = 'NaN' };\n  Surrogate.prototype = parent.prototype;\n  // childObj.propertyIsEnumerable('prototype');  // if call this enumerable will be false\n  child.prototype = new Surrogate;\n\n  var enumerable = childObj.propertyIsEnumerable('prototype'); // true;\n\nWill you fix this problem?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2843",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2843/comments",
    "title": "Enhancement to 'Model.Set' Mechanism",
    "created_at": "2013-11-01T05:52:51Z",
    "updated_at": "2013-11-06T18:36:17Z",
    "body": "Currently  the model.set would cause  'attributes[key] = value`  in the simplest explanation.\nHowever it would be worthwhile to extend this mechanism to query if  'attributes[key]'   has a 'set' method available. If it does then it should use that method to delegate the attribute update. This can allow having nested attributes without going through hoops.\n\nIf the idea sounds interesting, I can work out more details about this.\n\nSimilar can be done for Model.get mechanism as well.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2842",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2842/comments",
    "title": "Collection `parse` semantics is ambiguous",
    "created_at": "2013-11-01T03:52:04Z",
    "updated_at": "2014-09-02T15:19:05Z",
    "body": "The parse semantics for model and collection is somewhat confusing.\n\nSuppose one provides a custom parse for  collection and model to deal with the raw response.  e.g. response from server is always in the form  {'success': true/false,  data: {..}/\"error_msg\"}\n\nNow model.fetch would work fine as the parse method will be able to parse correctly.\nHowever the `collection.fetch` would fail, in this case the first `collection.parse` will be able to parse the response correctly and return a list of model attributes. But  the `collection.set` method will fail as it will call  `parse` on the model repeatedly.\n\nOne can deal with this error by modify the custom parse for collection to wrap each attribute in the format  model.parse expects but it is CLUMSY.\n\nIn my opinion,  the COLLECTION.FETCH should be responsible for complete valid parsing and should return a valid attributes list for each model so that  subsequent `parse` on each of the model attribute is not necessary.   This keeps the semantic clean.  However this requires a patch in the COLLECTION.FETCH   to not set the options.parse to 'true'  and call `parse` on the `response` before passing it to COLLECTION.SET.\n\nI can make the changes if desired.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2841",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2841/comments",
    "title": "Uncaught TypeError: Object #<Object> has no method 'replace' backbone.js:1357",
    "created_at": "2013-10-30T11:05:26Z",
    "updated_at": "2013-10-31T13:39:49Z",
    "body": "Hi guys,\n\nSometimes my site gets an error:\n\n```\nUncaught TypeError: Object #<Object> has no method 'replace' backbone.js:1355\n_.extend.getFragment backbone.js:1355\n_.extend.navigate backbone.js:1473\n_.extend.navigate backbone.js:1252\n(anonymous function) app.js:58\n(anonymous function) jquery-1.10.2.min.js:4\nc jquery-1.10.2.min.js:4\np.fireWith jquery-1.10.2.min.js:4\n(anonymous function) jquery-1.10.2.min.js:4\nc jquery-1.10.2.min.js:4\np.fireWith jquery-1.10.2.min.js:4\nk jquery-1.10.2.min.js:6\nr jquery-1.10.2.min.js:6\n```\n\nMy browser: Chrome/30.0.1599.101\nMy OS: Mac OS X 10.7.5\nBackbonejs version: 1.1.0\nThe url: http://localhost:9020/#signin\n\nThis error began to appear yesterday.\nCould you please help with it?\nI really can't get this error manually.\n\nThank you \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2840",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2840/comments",
    "title": "Logical Operators in route hash.",
    "created_at": "2013-10-30T04:56:27Z",
    "updated_at": "2013-10-30T06:16:21Z",
    "body": "In route hash, for E.g.(as below) optional params `(:name)` works great. Thus i don't have to add new route like `folder/:name`.\n\n```\nroutes: {\n  \"help/:page\":         \"help\",\n  \"download/*path\":     \"download\",\n  \"folder/(:name)\":       \"openFolder\"\n}\n```\n\nSimilarly, Is there any way to do something like below\n\n```\nroutes: {\n  \"\" | \"login\":     \"login\"\n}\n```\n\ninstead of below\n\n```\nroutes: {\n  \"\":     \"login\",\n  \"login\":       \"login\"\n}\n```\n\nmeans, Need some way to make use of Logical Operators in 'key' part of object. Thus i don't have to repeat my line; Is there any possibility of using logical OR or logical AND.\n\nThis will not work because of key:value won't accept logical operator.\nIs there any simple & short possible way to set route key before route hash.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2839",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2839/comments",
    "title": "Model ``invalid`` event is triggered before model is initialized.",
    "created_at": "2013-10-30T03:56:13Z",
    "updated_at": "2015-05-11T07:52:50Z",
    "body": "I'm not sure this is actually a bug, but I found a change in behavior from v1.0.0 to v1.1.0 that I think should be noted in the changelog.\n\nWhen creating a new model (either via `new my_model()` or by calling `add()` or `create()` on a collection) with `{validate: true}`, the `invalid` event (assuming validation fails) is triggered on the new model _before_ the model's `initialize` fn is executed. For instantiating a new model, this is not a change from v1.0.0. But this does change the behavior of collection `create()` and `add()` methods, which used to validate again _after_ initializing the new model. For instance, in my code I'm attaching an event handler to the model as follows:\n\n``` js\nvar model = Backbone.Model.extend({\n    initialize: function () {\n        this.on('invalid', function (model, error) {\n            console.log(error);\n        });\n    }\n});\n```\n\nBecause the `invalid` event is triggered before this `initialize` code runs, however, doing `my_collection.add(my_invalid_data, {validate: true});` no longer triggers the `console.log(error)` code.\n\nHere is the relevant diff from v1.0.0 to v.1.1.0 (see https://github.com/jashkenas/backbone/compare/1.0.0...1.1.0#diff-0d56d0d310de7ff18b3cef9c2f8f75dcL909):\n\n``` js\n       var model = new this.model(attrs, options);\n-      if (!model._validate(attrs, options)) {\n-        this.trigger('invalid', this, attrs, options);\n-        return false;\n-      }\n-      return model;\n+      if (!model.validationError) return model;\n+      this.trigger('invalid', this, model.validationError, options);\n+      return false;\n```\n\nIn v1.0.0, the `invalid` event was being triggered again by the `model._validate` fn on line 909, after the model was created on line 908. In v1.1.0, the event is only triggered once upon model creation on what is now line 913. This change causes any `invalid` event handlers attached in the model `initialize` fn to not fire. At the very least, I think this change should be noted in the public changelog.\n\nI can think of two ways to \"fix\" my code to work with v1.1.0, but I would appreciate any feedback on which is recommended:\n\n1) Attach `invalid` event handlers using the model's `constructor` fn instead of `initialize`:\n\n``` js\nvar model = Backbone.Model.extend({\n    constructor: function () {\n        this.on('invalid', function (model, error) {\n            console.log(error);\n        });\n        // call the original Backbone.Model constructor\n        Backbone.Model.apply(this, arguments);\n    }\n});\n```\n\n2) Attach `invalid` event handlers to the _collection_ instead of the model, again using the `initialize` fn:\n\n``` js\nvar collection = Backbone.Collection.extend({\n    initialize: function () {\n        this.on('invalid', function (model, error) {\n            console.log(error);\n        });\n    }\n});\n```\n\nSince models can exist without collections, it seems to me like option (1) is preferred if wanting to validate a model (with handlers listening to the `invalid` event) when it is created, though it's not ideal to have to remember to call the original Backbone.Model constructor when overriding the `constructor` fn.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2835",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2835/comments",
    "title": "query string issue with pushState:true in Backbone History",
    "created_at": "2013-10-29T10:27:12Z",
    "updated_at": "2013-11-22T00:30:27Z",
    "body": "We are using this.navigate(options.fragment,options.trigger);  with pushState:true\nbut due to following line in Backbone.js : \n\n// Strip the fragment of the query and hash for matching\n fragment = fragment.replace(pathStripper, '');\n\nIts not changing the url based on the query string.\n\nis there a fix for this or is it failing only in latest version 1.1.o\n\nThanks,\nAbhijeet\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2834",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2834/comments",
    "title": "Remove method removes the element from the DOM",
    "created_at": "2013-10-29T06:34:32Z",
    "updated_at": "2013-10-30T19:34:48Z",
    "body": "Remove method removes the container element ($el) from the DOM. \n\nThis behaviour is wrong since it does not allow for reuse of the same DOM element (as in creating a view, removing it and creating another view - all in the same DOM element). \n\nI suppose that using jquery's empty method would do a better work albeit, when trying it, I still could not get rid of the events of the removed views (so when I triggered an event on the current view the event was triggered on the removed views - which were of the same view type).  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2832",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2832/comments",
    "title": "`options` isn't being set on line 444 in Chrome",
    "created_at": "2013-10-28T03:59:03Z",
    "updated_at": "2013-10-28T04:27:36Z",
    "body": "Chrome literally skips over line 449 of Backbone and doesn't set the `options` variable. What the actual frick?!\n\nReplay here: http://www.youtube.com/watch?v=TqZ8V-ic080\n\nReproduction: Download backbone/underscore. Create an empty file with the following: \n\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <title>Backbone options bug</title>\n    <script src=\"underscore.js\"></script>\n    <script src=\"backbone.js\"></script>\n</head>\n<body>\n    <script>\n        Page = Backbone.Model.extend({});\n        var p = new Page();\n\n        console.log(p);\n    </script>\n</body>\n```\n\nOpen in Chrome (i'm using V30.0.1599.101), then, set a breakpoint on line 444 in Chrome's inspector.\n\nPaste this into your console:\n\n```\np.save({name: \"test\"}, {success: function() {}, error: function(){}})\n```\n\nStep over until line 449. See that options isn't set, even though the line says `options = val`.\n\nBang about on your keyboard for a while, then get a bit depressed when things don't work out. Question your sanity.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2831",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2831/comments",
    "title": "Save with patch method won't call toJSON (and therefore no custom method for creating json)",
    "created_at": "2013-10-25T14:54:42Z",
    "updated_at": "2016-04-19T05:29:53Z",
    "body": "Consider this :\n\n``` javascript\nModel.prototype.toJSON = function(options){\n     return {upd: Backbone.Model.prototype.toJSON.apply(this,arguments)};\n}\n\nmodel.save({attr1: 'awd'}); // <-- This work fine\n\nmodel.save({attr1: 'awd'},{patch: true}); // <-- this will ignore my toJSON method and make server error\n```\n\nWhat I can do :\n\noverride `Backbone.sync` method and `toJSON` method : \n\n``` javascript\nBackbone.sync = function(method, model, options) {\n....\n// params.data = JSON.stringify(options.attrs || model.toJSON(options));\nparams.data = JSON.stringify(model.toJSON(options));\n....\n}\n\nBackbone.Model.prototype.toJSON = function(options){\n     if(options.attrs){\n         return options.attrs;\n     }\n     return _.clone(this.attributes);\n}\n```\n\nI cant see problem with that but maybe it make problems with other parts of backbone.\n\nI'm using Backbone v1.0.\n\nOverrided `Model.prototype.toJSON` method in this issue is just an example.\n\nPlease ignore typo problems with my example (if any).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2828",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2828/comments",
    "title": "destroy \u65b9\u6cd5\u903b\u8f91\u9519\u8bef",
    "created_at": "2013-10-25T06:10:36Z",
    "updated_at": "2013-10-25T11:19:37Z",
    "body": "\u6ce8\u91ca\u4e2d\u5199\u9053\uff1aIf `wait: true` is passed, waits for the server to respond before removal.\n\u4f46\u662f\uff0c\u8bbe\u7f6e\u4e86 options.wait = true\uff0c\u4ecd\u7136\u4f1a\u5728\u670d\u52a1\u5668\u8fd4\u56de\u7ed3\u679c\u4e4b\u524d\u9500\u6bc1 model\u3002\u8fd9\u4e2a\u548c\u6ce8\u91ca\u4e0d\u7b26\u3002\n\u95ee\u9898\u4ee3\u7801\uff1a\n      options.success = function(resp) {\n        if (options.wait || model.isNew()) destroy();\n        if (success) success(model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2826",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2826/comments",
    "title": "Deep-Model missing",
    "created_at": "2013-10-24T05:05:05Z",
    "updated_at": "2015-10-06T17:46:19Z",
    "body": "By using backbone-deep-model Backbone's plugin we can do the following very well,\nImproved support for models with nested attributes,\nAllows you to get and set nested attributes with path syntax, e.g. user.type,\nTriggers change events for changes on nested attributes.\n\nI think; this must be build-in in backbone core library itself rather then using any third party library.\n\nHope this get updated in upcoming Backbone versions.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2824",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2824/comments",
    "title": "Collection.create() with wait: true triggers Collection.parse()",
    "created_at": "2013-10-22T07:06:04Z",
    "updated_at": "2014-03-20T07:21:45Z",
    "body": "Since version 1.1, calling\n\n``` javascript\nmyCollection.create( {} , { wait: true } );\n```\n\ntriggers a call to `myCollection.parse()` once the server's response is returned. According to the documentation, it looks like parse should only be called in reaction to `fetch()`.\n\nAdditionally, the parameters to this `parse()` call seem to be different: When calling `parse()` via `fetch()`, the first parameter contains the raw data of the response, i.e. an array of JS objects. When `parse()` is triggered from `create()`, the first parameter contains the newly created model.\n\nAs a workaround, it's possible to set `parse: false` when calling `create()`, this will prevent the call to `parse()`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2822",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2822/comments",
    "title": "Removal of `this.options`.",
    "created_at": "2013-10-20T06:27:17Z",
    "updated_at": "2014-07-08T00:15:42Z",
    "body": "Hi.\n\nI am puzzled a bit at this. Removing `this.options` (attachment of `options` to the instance automatically) I mean.\n\nDid you guys consider the sheer volume of code it would break?\n\nI must say that I am simply speechless. \n\nAdd to that the return values from the Collection and I wonder, who will _ever_ be able to adopt 1.1.0.\n\nAm I missing something or is this a major BC break in a minor version?\n\nThank you.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2821",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2821/comments",
    "title": "Discuss router URLs format",
    "created_at": "2013-10-18T10:05:36Z",
    "updated_at": "2013-10-18T10:24:28Z",
    "body": "Is the Backbone URL (using :id) format relying on any standard ? \nIt looks like http://tools.ietf.org/html/rfc6570 is becoming the de-facto standard for this kind of stuff. \nI'm pretty sure we can achieve something pretty similar using the `Backbone.Router` `namedParam` but maybe using the standard by default would be better. What do you think ? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2820",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2820/comments",
    "title": "Removing Backbone Models from a collection using the Collections.forEach method can cause models to be missed",
    "created_at": "2013-10-17T15:46:31Z",
    "updated_at": "2013-10-17T18:50:33Z",
    "body": "When removing models from a collection like:\n\n```\nmycollection.forEach(mymodel) {\n    // doing stuff before possibly removing the model\n    mycollection.remove(mymodel);\n    // doing stuff after possibly removing the model\n}\n```\n\n...all models may not be removed from the collection.  The underlying _.each method prematurely considers mycollection.models to be fully iterated.\n\nA workaround for this is:\n\n```\n_.each(_.extend({}, mycollection.models), function(mymodel) {\n    // doing stuff before possibly removing the model\n    mycollection.remove(mymodel);\n    // doing stuff after possibly removing the model\n}\n```\n\nShould the .forEach method be using the code in the workaround above?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2819",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2819/comments",
    "title": "[Q] Get notified about id changed ",
    "created_at": "2013-10-17T08:54:32Z",
    "updated_at": "2013-10-23T09:58:06Z",
    "body": "http://jsfiddle.net/dKfAx/9\n\ndoes it any way to  not write ugly code like: \n\n```\nuser.on (\"change:\" + user.idAttribute,  function(){\n\n    $(\".id\").addClass(\"highlight\");\n} )\n```\n\nmore one i have now direct access to model.idAttribute,  for example when i subscribe on collection change\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2815",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2815/comments",
    "title": "Prevent parse in save method",
    "created_at": "2013-10-16T08:53:31Z",
    "updated_at": "2013-10-16T13:38:14Z",
    "body": "Why not changing the parse method of a model to:\n\nBackbone.Model.prototype.parse = function(resp, options) {\n        if(options.parse)\n            return resp;\n    };\n\nThis way, you can prevent the ajax response to override your model's attributes by doing MyModel.save({}, { parse: false});\n\nCheck http://stackoverflow.com/questions/18363397/backbone-save-without-set-on-callback for why one would use that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2814",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2814/comments",
    "title": "Inconsistent fragment usage leads to incorrect navigation behavior",
    "created_at": "2013-10-15T19:37:26Z",
    "updated_at": "2013-10-31T21:08:13Z",
    "body": "The code in question is here: https://github.com/jashkenas/backbone/blob/master/backbone.js#L1348.\n\nThis grabs the current pathname only, ignoring both the search and hash. In this same function, if there is a fragment provided (say from calling `navigate`), `routeStripper` is used to trim off any hash at the end, but a search portion would be left intact, which is inconsistent with the initial fragment stripping the search portion. To better demonstrate the issue, consider I start the router with a URL of `/resource/id`. If I were to call `navigate` with a URL like:\n\n```\n/resource/id/?option=value\n```\n\nthis would become the new fragment. For context, I might be doing some kind of filtering based on this search term. If I then were to call `navigate` with a URL like:\n\n```\n/resource/id/\n```\n\n`navigate` would correctly push the state and update the URL. If, however, the user reloaded the page with a URL of `/resource/id/?option=value`, then called `navigate` with this base fragment, the following conditional would be `true` and this is, in my opinion, incorrect for this case: https://github.com/jashkenas/backbone/blob/master/backbone.js#L1478.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2812",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2812/comments",
    "title": "Model.url() doc not up to date w.r.t. to url and urlRoot.",
    "created_at": "2013-10-15T10:45:21Z",
    "updated_at": "2013-10-15T11:41:45Z",
    "body": "Correct me if i am wrong, but it looks that doc of Model.url() is not up to date w.r.t. the fact that it is not possible anymore to pas url and urlRoot props in options hash of Model constructor ...\n\nSee this piece of code :\n\n```\nconsole.log(Backbone.VERSION); // outputs \"1.1.0\"\nvar m = new Backbone.Model(null,{url:'/foo'});\nm.url();\n// this throws Error: A \"url\" property or function must be specified\n```\n\nThough, in the doc, i can read :\n\n```\nYou can also pass in the model's <tt>url</tt> as an option when instantiating it.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2809",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2809/comments",
    "title": "collection's 'create' method seems to need 'index' option.",
    "created_at": "2013-10-15T05:16:22Z",
    "updated_at": "2013-10-16T05:38:56Z",
    "body": "While collection's 'add' method supports 'index' option,\nbut 'create' method doesn't seem to support it. \nIs there any way to set the index position when creating a model in collection?\nIf no, it seems to need 'index' option.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2808",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2808/comments",
    "title": "Passing parameters into a view",
    "created_at": "2013-10-14T23:42:58Z",
    "updated_at": "2013-10-14T23:55:40Z",
    "body": "I was developing my app using v1.0.0 and between beginning work and now there has been an update to v1.1.0. So where I used to be able to do,\n\n``` javascript\nvar myView = new MyView({hash: 'something'});\n```\n\nAnd access `hash` inside the view using,\n\n``` javascript\nthis.options.hash\n```\n\nThis no longer works. I now get the following error:\n\n> Uncaught TypeError: Cannot read property 'hash' of undefined\n\nSo what's the new way of doing this? I would very much like to be able to pass properties into my view.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2807",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2807/comments",
    "title": "git push error",
    "created_at": "2013-10-13T09:09:47Z",
    "updated_at": "2013-10-13T13:02:42Z",
    "body": "error: Failed connect to github.com:8080; Connection refused while accessing https://github.com/dilipptt/first_app.git/info/refs?service=git-receive-pack\nfatal: HTTP request failed\n![screenshot from 2013-10-13 14 37 53](https://f.cloud.github.com/assets/3939635/1321720/20985a56-33e7-11e3-8404-8bb37beb0a61.png)\n\nhow can i overcome the  error. Please Help me\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2801",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2801/comments",
    "title": "Can't force route evaluation on querystring changes",
    "created_at": "2013-10-11T04:24:50Z",
    "updated_at": "2013-11-27T02:59:20Z",
    "body": "In Backbone 1.0.0, although routes didn't support query strings by default, they could still be handled manually in an application (see: #891).\n\nHowever, in Backbone 1.1.0, even manually triggering a route change `router.navigate(route, {trigger: true})` will not cause the route to be evaluated if only the query string changes.\n\nThe problem seems to be the pathStripper on line [1476](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1476) combined with the conditional on line [1478](https://github.com/jashkenas/backbone/blob/master/backbone.js#L1478).\n\nIn Backbone 1.0.0, the query string was not stripped before evaluating whether or not the fragment was the same or not.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2800",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2800/comments",
    "title": "No longer able to set url of a collection in collection constructor function",
    "created_at": "2013-10-11T03:42:53Z",
    "updated_at": "2013-10-11T10:34:55Z",
    "body": "is there a particular reason why the url can no longer be set in the collection constructor?\n\nin particular, it seems to have been removed in commit 3bfbcd4123a19f9ec31c5d64d3d4322140adc2fa\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2799",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2799/comments",
    "title": "Passing {wait: true} to save (sync) the model changes the model's attributes before options.success is called",
    "created_at": "2013-10-10T16:45:20Z",
    "updated_at": "2013-11-01T10:04:26Z",
    "body": "Please have a look at this jsfiddle: http://jsfiddle.net/udqFj/12/\n\nI believe the \"save model\" button has the expected behaviour: the model's attributes are changed immediately.\n\nWhereas the \"save model with wait: true\" button, does not wait until the options.success method is called. It behaves like the \"save model\" button.\n\nI believe this is an issue in the model save method of backbone 1.0.0 line 469: if we wait, we change the model's attributes.\n\nCan you confirm this?\n\nRegards\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2797",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2797/comments",
    "title": "fetch with a specified url overrides model's url",
    "created_at": "2013-10-09T18:12:02Z",
    "updated_at": "2013-10-11T03:54:06Z",
    "body": "I can see how this makes sense when you fetch a single model, but when you fetch on a collection, the model's URLs are all overwritten with the fetched URL of the collection because the `options.url` in the Model constructor is passed from the fetch blindly.\n\nIt makes for very strange and hard to track down errors.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2796",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2796/comments",
    "title": "IE8- PATCH request error",
    "created_at": "2013-10-09T13:36:21Z",
    "updated_at": "2013-10-10T12:53:37Z",
    "body": "IE8- thows exception when trying to make PATCH request. Line 1178 of dev version 1.0:\nif (params.type === 'PATCH' && window.ActiveXObject &&\n          !(window.external && window.external.msActiveXFilteringEnabled)) {\n      params.xhr = function() {\n        return new ActiveXObject(\"Microsoft.XMLHTTP\");\n      };\n    }\n\nwindow.external.msActiveXFilteringEnabled crashes with SCRIPT438: Object doesn't support this property pr method.\n\nWorks fine when replace\nwindow.external.msActiveXFilteringEnabled \nwith \nwindow.external.msActiveXFilteringEnabled()\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2793",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2793/comments",
    "title": "Model instance level error handlers overwrites any global jQuery error handling",
    "created_at": "2013-10-07T17:21:13Z",
    "updated_at": "2013-10-07T17:52:39Z",
    "body": "I have a global jQuery.ajax error handler (amongst other things) setup like this:\n\n```\n$(document).ajaxError(function (event,jqxhr,settings,exception) {\n    ...\n});\n```\n\nThis works fine for the all the requests in my app until I set a specific error handler on a model instance-level request, like this:\n\n```\nmodel.save({},{\n    error: function () {\n        ...\n    }\n});\n```\n\nIn which case, if there is actually an error, then the models error callback invokes, but none of my jQuery.ajax global setup runs. It looks like the model instance-level success/error overwrite the global jQuery ajax setup stuff?\n\nIs this expected/desirable?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2792",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2792/comments",
    "title": "problems by calling _.bindAll(...)",
    "created_at": "2013-10-06T15:16:56Z",
    "updated_at": "2013-11-01T11:53:12Z",
    "body": "backbone is using underscore by calling \"_.bindAll(...)\". \n\nWhen backbone is calling \"_.bindAll(this, 'checkUrl');\" from line 1307 in version 1.0.0 \"this\" is empty.\n\nBut underscore \"Removed the ability to call _.bindAll with no method name arguments. It's pretty much always wiser to white-list the names of the methods you'd like to bind.\" in version 1.5.0\n\nCalling this function underscore executes\n\n   var funcs = slice.call(arguments, 1);\n   if (funcs.length === 0) ... --> error!\n\nBecause underscore is not looking for \"is there an argument\" , but for \"length(argument[0]) === 0\", it throws an error - an stops. But this is wrong.\n\nSo there may be two ways to clear this (but I'm not sure!):\n\n--> backbone by calling:  _.bindAll('checkUrl', this);\n\n--> underscore by changing the question \"length(argument[0]) === 0\" to \"any argument !== 0\"\n\nI think, something must be changed ...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2790",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2790/comments",
    "title": "Improvements of Collection.push and Collection.unshift",
    "created_at": "2013-10-04T16:07:14Z",
    "updated_at": "2013-10-10T20:31:51Z",
    "body": "Hi !\n\nI have a few remarks about the APIs `Collection.push` and `Collection.unshift` :\n\n1) That'd be fine if `Collection.push` and `Collection.unshift` could take arrays of models or raw attributes as input. (Actually `Collection.push` and `Collection.unshift` can already take arrays as input since they call `Collection.add`internally). Though the doc says they take a model as input.\n=> Proposal : The doc to be fixed.\n\n2) If point 1) is accepted, the returned value of `Collection.push` and `Collection.unshift` should be changed. As of today, `Collection.push` and `Collection.unshift` return the pushed/unshifted model. Should push and unshift return this collection instead of the passed model param ? That'd be coherent with `Collection.add`.\n\n3) Furthermore, in the code, i can see `_.extend({at: xxx}, options);` in the impl of `Collection.push` and `Collection.unshift`. Shouldn't it rather be `_.defaults({at: xxx}, options);`, otherwise one could do `col.push(model,{at:0})` which produces an unexpected result with regards to what you read (push), don't you think ?\n\nYour feedbacks are welcome !\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2789",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2789/comments",
    "title": "person not defined",
    "created_at": "2013-10-01T21:48:36Z",
    "updated_at": "2013-10-01T22:26:51Z",
    "body": "It's my first time with backbone so maybe I'm doing something wrong. \n\nI get a reference error and type error for person being undefined. \n\nThis error only occurs with the development version downloaded from the backbone site. When I use the minified I get no errors.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2788",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2788/comments",
    "title": "Collection.set() with {merge: true} and defaults in model",
    "created_at": "2013-10-01T11:32:56Z",
    "updated_at": "2013-10-01T15:30:55Z",
    "body": "See the example:\n\n```\nvar Model = Backbone.Model.extend({\n    defaults: {\n        key: \"value\"\n    }\n});\n\nvar Collection = Backbone.Collection.extend({\n    model: Model\n});\n\nvar col = new Collection()\ncol.set([{\n    id: 1,\n    param: \"parvalue\",\n    key: \"otherValue\"\n}], {\n    remove: false,\n    add: true,\n    merge: true\n});\n\nconsole.log(col.toJSON()[0].key);\n\ncol.set([{\n    id: 1,\n    param: \"newparvalue\",\n}], {\n    remove: false,\n    add: true,\n    merge: true\n});\n\nconsole.log(col.toJSON()[0].key);\n\n```\n\nWhat i want to see:\n\n```\notherValue\notherValue\n```\n\nIf I merge, I don't want to change values in my models on default values, I want to set new values and don't change already existed values. But now I have this result: \n\n```\notherValue\nvalue\n```\n\nI don't know why, but if I don't pass 'key' parameter in second set() method, key value became default value. If I delete defaults value from model, I have right result. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2787",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2787/comments",
    "title": "Backbone.View super",
    "created_at": "2013-09-30T21:13:08Z",
    "updated_at": "2013-09-30T21:18:34Z",
    "body": "I've seen a lot of other users with this complaint, and I'm wondering if there is a good reason not to implement it.\n\n```\nsuper:function(method){\n BaseView.View.prototype[method].apply(this, _.rest(arguments));\n},\ninitialize:function(){\n this.super(\"initialize\", arg1, arg2, etc);\n}\n```\n\nThis solution seems more elegant, though. \nhttps://github.com/lukasolson/backbone-super\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2786",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2786/comments",
    "title": "Fetch success response vs destroy success response",
    "created_at": "2013-09-30T18:19:26Z",
    "updated_at": "2013-10-01T14:22:01Z",
    "body": "I believe when using a success callback for the fetch() function the response is an Object so you can directly access the properties of the response.  Looks like the response is JSON parsed before it is sent to the callback.\n\nOn the other hand when defining a success handler for the destroy method the response is not parsed and string object is returned.  To access the properties of the response you must JSON.parse it.\n\nIs this behavior inconsistent?  Shouldn't the responses be consistent across success callbacks?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2782",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2782/comments",
    "title": "collection.fetch( { add: true } ) still removes original models",
    "created_at": "2013-09-25T13:39:46Z",
    "updated_at": "2018-02-10T11:41:04Z",
    "body": "I am trying all options of { add: true, reset: false, update: true, remove: false } together or in various combinations.\n\nIn all cases, fetch will remove all original models from collections and replace with new ones.\n\nI am trying to append new models to existing models in collection.\n\nThe following is my simple code.\n\ncollection.fetch({\n        data: { offset: 25 },\n        add: true,\n        reset: false,\n        update: true,\n        remove: false,\n        success: function(){\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2781",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2781/comments",
    "title": "Wrong repo fail...",
    "created_at": "2013-09-24T21:14:09Z",
    "updated_at": "2013-09-24T21:52:48Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2779",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2779/comments",
    "title": "Allow passing of a custom merge function to Collection set()",
    "created_at": "2013-09-24T15:28:29Z",
    "updated_at": "2013-09-24T22:50:52Z",
    "body": "The merge routine in Collection set() makes the assumption that if Model/Models are passed in, then merging using their model.attributes is sufficient. This is not always the case. You might have other important instance members on the model that are not in the model.attributes.\n\nAn optional merge function to Collection set() would allow total control on what should be merged from one model to the other. Or, the merge routine should be broken out of set() so it can be safely overridden without having to completely override set().\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2777",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2777/comments",
    "title": "Collections do not care about order items are insert",
    "created_at": "2013-09-24T14:28:26Z",
    "updated_at": "2013-09-24T16:02:29Z",
    "body": "I have a collection, with no comparator etc.\nI have an array of json objects.\nif I for loop over the array of objects calling collection.add(object) the resulting collection is not in the original order\nif I just do collection.set(arrayOfObjects) I get yet another ordering of the objects (those close to reality)\n\nWhat gives?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2776",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2776/comments",
    "title": "Calling set on Collection with merge: false data ignored when matching model found",
    "created_at": "2013-09-23T22:39:22Z",
    "updated_at": "2013-09-24T18:46:46Z",
    "body": "When calling set on a collection with an already existing model (same id) using merge false the new model values are ignored. I would expect the new values are respected trumping the old.\n\nExample:\n\n<pre>\nvar c = new Backbone.Collection([{id: \"foo\", value: \"old\"}]);\nvar m = carlCollection.get(\"foo\");\nc.set([{id: \"foo\", value: \"new\"}], {merge: false});\nm = c.get(\"foo\");\nconsole.log(m.get(\"value\")==\"new\"); //is fals\n</pre>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2775",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2775/comments",
    "title": "_byId is getting lost when Collection#model is a function",
    "created_at": "2013-09-23T20:39:57Z",
    "updated_at": "2013-12-02T21:40:38Z",
    "body": "I just found a bug with the edge version after I was working with collections and extending the `model` function. The problem here is that the `set` method is forgetting to check the existence after passing _non model objects_ AND _you have overridden the model function_. There are possibilities that it may return a model instance that already have been added to the collection.\n\nThis bug can be achieved with other use cases also, but here is an example that fails:\n\n``` javascript\nvar cache = {}\nvar model = new Backbone.Model({id: 123})\nvar collection = new Backbone.Collection([model])\ncache[123] = model;\n\nBackbone.Collection.prototype.model = function(attrs, options) {\n   return cache[attrs.id] || new Backbone.Model(attrs, options);\n}\n\nconsole.log(collection.models, collection._byId) // _byId == {123: ...}\ncollection.set([{id: 123}])\nconsole.log(collection.models, collection._byId) // _byId == {}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2774",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2774/comments",
    "title": "Backbone.$ is unavailable when using lmd, common-js and jquery 1.10.2",
    "created_at": "2013-09-23T17:12:51Z",
    "updated_at": "2014-09-02T14:14:22Z",
    "body": "Hello\n\nI'm using LMD. My files have CommonJS style. I've update jQuery to 1.10.2. After that Backbone can't see jQuery.\nAs i understand the reason is this part of jQuery\n\n``` javascript\nif ( typeof module === \"object\" && module && typeof module.exports === \"object\" ) {\n    // Expose jQuery as module.exports in loaders that implement the Node\n    // module pattern (including browserify). Do not create the global, since\n    // the user will be storing it themselves locally, and globals are frowned\n    // upon in the Node module world.\n    module.exports = jQuery;\n} else {\n```\n\nSo for CommonJS-like environments there is no global object. Thus:\n\n``` javascript\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = root.jQuery || root.Zepto || root.ender || root.$;\n```\n\nwill not find jQuery object.\n\n`require('jquery')` can solve this problem.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2773",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2773/comments",
    "title": "Fix the way Model.defaults are merged with passed in attributes.",
    "created_at": "2013-09-23T01:52:44Z",
    "updated_at": "2013-11-14T02:11:38Z",
    "body": "There's a regression between 0.9.2 \u2192 1.0.0 regarding how attributes passed to Model are merged with the defaults.\n\n```\nvar Person = Backbone.Model.extend({\n  defaults: {\n    name: undefined\n  }\n});\nnew Person({name: null}).get(\"name\") \u2192 undefined // 1.0.0\nnew Person({name: null}).get(\"name\") \u2192 null // 0.9.2\n```\n\nIt was introduced in https://github.com/jashkenas/backbone/commit/bd31613cd73837012d76a9b774de34da216b4980\n\nMy use-case is that I document model attributes by declaring _all_ attributes in `Model.defaults` (e.g. Person _only_ has `name`). Then when I instantiate my model I pass in the values I actually want to use. With the new behaviour in 1.0.0 it's impossible pass in attributes that with a `null` value and have them override defaults.\n\nIt doesn't seem like the change was intentional.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2772",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2772/comments",
    "title": "Is it good idea to use Backbone with Reactive.js?",
    "created_at": "2013-09-23T00:17:05Z",
    "updated_at": "2013-09-24T12:30:51Z",
    "body": "Our app uses Backbone with Handlebars, but after a while there are so many elements to maintain in some views, and there are tightly coupled with each other that makes it hard to seperate them into subviews.\nI was tired of manipulating DOM elements and refactoring legacy code. I found that [Reactive.js](http://www.ractivejs.org/) is invented to solve there problems, which is like Angular but not that crazy. I suppose Angular breaks most solutions use use in developing apps, might be great but hard to learn for some people like me..\nSo my question: is reaplcing templates with Reactive.js possible in Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2767",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2767/comments",
    "title": "\"RangeError: Maximum call stack size exceeded\" in Collection.set with V8",
    "created_at": "2013-09-19T18:48:23Z",
    "updated_at": "2013-09-19T20:43:33Z",
    "body": "Chrome and nodejs fire exception if I try to call Collection.set with many entities (something about 150k)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2765",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2765/comments",
    "title": "Ignore hash-part in `loadUrl` when `hashChange = false`",
    "created_at": "2013-09-18T16:29:14Z",
    "updated_at": "2014-02-13T15:00:57Z",
    "body": "I'm working on an app where we rely solely on `pushState`. For browsers who don't support it, we simply fall back to regular page loads.\n\nWhy I opened an issue, is really because the way Backbone handles routes declared in the `Router.routes` hash. As it is now, Backbone will intelligently treat hash URLs equivalent to non-hash URLs, even when `pushState` is `true`. On `Backbone.history.start()` a possible hash containing URL is replaced with a non-hash version. All well and good.\n\nBut the default behaviour of `loadUrl` is to treat the URL as a complete unit, which becomes a problem if you also want to support URLs with hashes in them. In this case a route will not match, unless you declared it as a `RegExp` in `Router.initialize`. \n\nTo tackle this, I currently override the default `loadUrl` with a version that strips the hash before calling the original `loadUrl`.\n\nPersonally, I would be interested in seeing either a new configuration setting that would enabled this behaviour in Backbone core, or finding a combination of current configuration that would have this behaviour.\n\nI would definitely be interested in contributing a PR for this, should this be deemed a worthy idea. Otherwise, I suppose I'll just keep monkey patching...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2763",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2763/comments",
    "title": "I have problem with append my collection.",
    "created_at": "2013-09-18T12:55:44Z",
    "updated_at": "2013-09-18T14:56:01Z",
    "body": "all working me when I add into console this :\n\n`$('body').append(tablesView.render().el);`\n\nI see all my names in li from json file. After that I can with :\n\n`tablesCollection.create({ name:'Next Table Name' });`\n\nadd next object which is immediately rendered.\n\nMy code :\n\n```\nwindow.App = {\n    Models: {},\n    Views: {},\n    Collections: {}\n};\n\nwindow.template = function (id) {\n\n    return _.template($('id' + id).html());\n};\n\nApp.Models.Table = Backbone.Model.extend({\n\n    defaults: {\n            name: 'Table Name',\n        },\n});\n\nApp.Collections.Tables = Backbone.Collection.extend({\n\n    model: App.Models.Table,\n\n    url: 'tables.json'\n});\n\nApp.Views.Tables = Backbone.View.extend({\n\n    tagName: 'ul',\n\n\n    initialize: function() {\n        this.collection.fetch({reset:true});\n        this.collection.on('reset', this.render);\n        this.collection.on('add', this.addOne, this );\n\n    },\n\n    render: function () {\n\n        this.collection.each(this.addOne, this);\n\n        return this;\n\n        },\n\n    addOne: function(table) {\n\n        var table = new App.Views.Table({ model: table });\n\n        this.$el.append( table.render().el );\n\n        table.render();\n\n        }\n\n});\n\nApp.Views.Table = Backbone.View.extend({\n\n    tagName: 'li',\n\n    initialize: function() {\n\n      this.model.on('destroy', this.remove, this)  \n\n    },\n\n    render: function () {\n\n        this.$el.html( this.model.get('name') );\n\n        return this;\n\n    },\n});\nvar tablesCollection = new App.Collections.Tables();\nvar tablesView = new App.Views.Tables({ collection: tablesCollection });\n```\n\nThanks for answers !!!!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2762",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2762/comments",
    "title": "'before:' and 'after:' for every event.",
    "created_at": "2013-09-18T06:56:19Z",
    "updated_at": "2013-09-22T15:59:05Z",
    "body": "I propose to make `Backbone.Events` fire additional `before:` and `after:` events for every regular event.\n\nI came up to this idea after thinking on problem of consistency of transitions between web-app states in cases of 'inner' transitions and transitions by from 'outer world'. By inner transitions I mean changes made by using app itself (for example - by click on UI element), and by transitions from 'outer world' I mean case when user launches web-app in certain state by visiting URL.\nWhole issue is in developing technique to universally handle both 'inner' and 'outer' cases for app state.\nI write it implying that web-app is built with event-driven architecture. \n\nUse case:\nLets say we have a blogging web-app, and it have the list of blog posts and area with selected blog post content. When element from list is clicked - its highlighted and blog post content must appear. \n\n'Inner' case: user clicked on list. Here all is clear - after click, list-view triggers the event, passes info about which post is selected to the app, highlights the element corresponding to the post, and content-area view reacts to the event, and shows blog post content. Somewhere in this process current url is changes to something like `/posts/123`\n\n'Outer' case: user visits `/posts/123` by clicking on bookmark in his browser. In that case I don't want to write initialization of web-app for that particular url - `/posts/<id>`, I just want to fire `post:selected` event when this route is visited and have a function that universally serves both `inner` and `outer` cases for that event. But there is two problems appears:\n- Problem #1: How to avoid unnecessary re-renders of views? \n  If function must be universal - so it must be fully responsible for whole apps tate consistency. So it must render all views. But if user just goes from one blog post to another it will re-render blog post list, which is unnecessary. \n- Solution: Well, solution is just to check if something is already rendered and not render it again :) For example if list-view already initialized and rendered, and consistency-function sees that app already has a view of that class instantiated and rendered in certain area of document, then it not re-renders it.\n- Problem #2: How to bring views to proper state after instantiation?\n  Assume that consistency-function found that view is not instantiated and rendered - how it can make list-view highlight its element after instantiation? I can store somewhere state of an app - an information about which post is selected, and list-view can use this information, but I don't like it, I want that list view just listen for `post:selected` event and highlight a post that was passed as additional data with the event. But in this case `post:selected` is already fired and caused invocation of consistency-function, which checks for list-view existance and in this case - creates it. So I want somehow to let list-view know about `post:selected` was fired and let it highlight its element.\n- Solution:\n  This is the situation where `before:` event is useful. It makes possible to do all checks and initialization before actual event, and then release an actual event into application that was shaped to consistent state. So it will be no difference for an app before cases when `post:selected` was fired by click on UI or by visit by URL.\n\nBy `before:post:selected` consistency-function will check is all views instantiated, is document in proper state, is all needed data was requested, it will instantiate and render views if needed, and query server for data. And then app will serve regular `post:selected` event.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2760",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2760/comments",
    "title": "Collection.set() peformance issues with large data sets",
    "created_at": "2013-09-14T00:16:24Z",
    "updated_at": "2014-05-21T12:38:39Z",
    "body": "I was working with some large datasets today and discovered some very unfortunate performance issues with Backbone.Collection.set. The following code will hang my browser for a good 10-15 seconds.\n\n```\nvar data = [];\nfor (var i = 0; i < 100000; i++) {\n    data.push({id: \"Test \"+i})\n}\nnew Backbone.Collection(data);\n```\n\nRunning a profile on it, I can see that 95% of the time is spent processing the set() function. And more specifically about 80% on _prepareModel, 10% for Events.on(), and 5% .get().\n\nThe speed is also affected exponentially once I start adding more attributes to my data object.\n\nCan anything be done to improve this performance at all? I don't think what I'm doing here is unreasonable.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2758",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2758/comments",
    "title": "Callback before element created",
    "created_at": "2013-09-12T17:08:06Z",
    "updated_at": "2013-09-12T17:14:15Z",
    "body": "There is no callback before element will be created.\n\nSometimes needed to pass some attribues into constructor and extend default view attributes with attributes from constructor and apply to element.\n\nView.js\n\n<pre>\nvar View = Backbone.View.extend({\n    attributes: {\n        \"data-role\": \"view\"\n    },\n    beforeCreateElement: function () {\n        //apply all attribues\n        this.attributes = _.extend(this.attributes, this.options.attrs);\n    }\n});\n</pre>\n\napp.js\n\n<pre>\nvar view = new View({\n     attrs: {\n          \"class\": \"hello\",\n          \"data-type\": \"world\"\n     }\n});\n</pre>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2757",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2757/comments",
    "title": "Attributes doesn't applied to el passed into constructor",
    "created_at": "2013-09-12T17:04:12Z",
    "updated_at": "2013-09-12T17:07:47Z",
    "body": "It's logically if attributes from view will be applied to element from constructor\n\nHTML:\n\n<pre>\n&lt;div class=\"target\"&gt;&lt;/div&gt;\n</pre>\n\nView.js\n\n<pre>\nvar View = Backbone.View.extend({\n    attributes: {\n        \"data-role\": \"view\"\n    }\n});\n</pre>\n\nApp.js\n\n<pre>\nvar view = new View({\n    el: $(\".target\")\n});\n</pre>\n\n\nIn this case, attribue data-role wouldn't be applied to el $('.target')\n\nI guess Backbone.View should add all attributes, and, if necessary will replace it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2756",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2756/comments",
    "title": "Name conversion of methods/properties about initialize/attributes/changedAttributes",
    "created_at": "2013-09-12T03:58:56Z",
    "updated_at": "2013-09-12T09:26:38Z",
    "body": "There are some good naming conversions in jquery world, like \"$\", \"init\". Is that possible to have following changes:  \"initialize -> init, attributes -> attrs, changedAttributes -> changedAttrs\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2754",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2754/comments",
    "title": "collection.on(\"myevent\") original model?",
    "created_at": "2013-09-10T15:21:14Z",
    "updated_at": "2013-09-10T15:47:18Z",
    "body": "Hi guys,\n\nIs there any way I can get the original model who trigger an event inside a collection without having to passing it ?\n\n``` javascript\nvar collection = new Backbone.Collection();\nvar myModel = new Backbone.Model({});\ncollection.add(myModel);\nmyModel.trigger(\"foo\", 42);\n// ...\ncollection.on(\"foo\", function (number) {\n  // how can I get the original model object here?\n});\n```\n\nThis is a limitation I experiment on different projects, Is there an existing way to get that model without having to pass it at the trigger time?\n\nThe workaround of this I found is quite boring:\nsomething like:\n\n``` javascript\nfunction bindModel (model) {\n  model.on(\"foo\", function (number) {\n    // model in the scope\n  });\n}\nfunction unbindModel (model) {} // erf need to keep somewhere the original reference of the bound function...\ncollection.each(bindModel);\ncollection.on(\"add\", bindModel);\ncollection.on(\"remove\", unbindModel);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2753",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2753/comments",
    "title": "Model set does not update the hasChanged property correctly",
    "created_at": "2013-09-10T14:52:06Z",
    "updated_at": "2013-09-10T15:36:04Z",
    "body": "Consider the following code:\n\n```\n// my_model  = { 'foo': 'bar', 'id': 1}\nmy_model.set({'foo': 'baz'}); // changed\nconsole.log(my_model.hasChanged()); // -> true\n\nmy_model.set({'id': 1}); // unchanged\nconsole.log(my_model.hasChanged()); // -> false ?!\n\n// then I did\n// my_model  = { 'foo': 'bar', 'id': 1}\nmy_model.set({'foo': 'baz', 'id': 1}); // changed\nconsole.log(my_model.hasChanged()); // -> true :)\n```\n\nIs it by design that when I set the hashes separately, the hasChanged property only reflects the last `set` call?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2752",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2752/comments",
    "title": "why clone the options in Model#fetch,Model#destroy,Collection#fetch...?",
    "created_at": "2013-09-10T10:05:07Z",
    "updated_at": "2013-09-10T12:07:29Z",
    "body": "hello\n\n```\noptions = options ? _.clone(options) : {};\n```\n\nin\n\n```\nModel#fetch\nModel#destroy\nCollection#fetch\nCollection#create\n```\n\nwhy clone the options in these functions?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2750",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2750/comments",
    "title": "Changes to a collection's models doesn't change toJSON()",
    "created_at": "2013-09-10T01:53:31Z",
    "updated_at": "2013-09-10T04:08:00Z",
    "body": "While it's possible remove attributes from a collection's models, it doesn't translate into the view (via `toJSON()`).\n\n**Steps to reproduce:**\n\n``` javascript\n  a         = new Backbone.Model({id: 3, label: 'a'});\n  b         = new Backbone.Model({id: 2, label: 'b'});\n  c         = new Backbone.Model({id: 1, label: 'c'});\n  d         = new Backbone.Model({id: 0, label: 'd'});\n  e         = null;\n  col       = new Backbone.Collection([a,b,c,d]);\n  otherCol  = new Backbone.Collection();\nvar expected = [{ id :3 },{ id:2 },{ id:1 },{ id:0 }];\nvar newCol = col.map(function(model) {\n  return model.omit('label');\n});    \ncol.set(newCol);\ndeepEqual(col.toJSON(), expected); // toJSON still fetches the old attributes, so this fails\nok(!col.at(0).label); // label is removed from the collection's models, so this is true\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2743",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2743/comments",
    "title": "app.sync stringifying my object. [object Object]",
    "created_at": "2013-09-06T15:37:07Z",
    "updated_at": "2013-09-06T16:58:39Z",
    "body": "In my Network panel, I'm can see the call is working almost exactly as I want, except that is turning my object into [object Object].\n\n```\nvar data = {\n     username: fubar,\n     password: 123456\n }\n\nthis.sync('create', this, {\n  contentType: 'application/x-www-form-urlencoded;',\n  data: data,\n  success: function( res, status ){\n        _this.set( res )\n        _this._loginHandle(null, res);\n  },\n  error : function(model, res, spec){\n        _this._loginHandle(\"can not login at this time\", res);\n },\n silent : true\n});\n```\n\n![screen shot 2013-09-06 at 8 34 53 am](https://f.cloud.github.com/assets/1885253/1097035/f09759c8-1709-11e3-9d2a-a7bbf6338e8e.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2741",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2741/comments",
    "title": "Deprecation of jqXHR.success(), jqXHR.error(), and jqXHR.complete()",
    "created_at": "2013-09-03T15:03:31Z",
    "updated_at": "2013-09-03T16:50:44Z",
    "body": "From http://api.jquery.com/jQuery.ajax :\n\nThe jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are deprecated as of jQuery 1.8. To prepare your code for their eventual removal, use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2739",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2739/comments",
    "title": "Problem with parse and create",
    "created_at": "2013-08-30T06:24:22Z",
    "updated_at": "2013-09-11T18:03:37Z",
    "body": "I want to add a model to a collection and immediately trigger the 'add' event so that a view is instantly rendered.\n\nHowever, I also want it to be persisted and saved as well.\n\nI do not want to wait for save to return before add is triggered.\n\nAll of this should be fine, except that I have data in the model that needs to be created on parse.  An example is a url to a map whose value is dependent on the client's browser type.\n\nIf I call `collection.create(model)`, the model will be added to the collection, parsed, then saved.\n\nThe problem is that I want that parsing to be done, but I don't want that parsed data to be saved to the server.\n\nI can fix this by doing `collection.create(model, {wait: true})`, but then there is a delay from when the model is created until the view is rendered.\n\nAny ideas on this?  Essentially I want the data created in `parse` in the model to never be persisted to the server, just accessed locally.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2738",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2738/comments",
    "title": "Router stops listening, trying to isolate cause",
    "created_at": "2013-08-29T17:25:57Z",
    "updated_at": "2013-08-29T22:39:41Z",
    "body": "I'm trying to debug an issue where the router stops listening. A page refresh makes the route work again.\n\nIs there something I can inspect on the instance of the router that shows whether and to what it is listening so that I can provide a better report of the issue?\n\nI was suspecting `router.navigate('myRoute', {trigger:true})` but on isolating it that wasn't the issue.\n\nDoes someone know what property I can observe so I can tell when backbone starts and stops listening to window hash changes?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2737",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2737/comments",
    "title": "Fetching a single model of a collection",
    "created_at": "2013-08-27T20:26:32Z",
    "updated_at": "2013-08-27T21:54:53Z",
    "body": "Hello, I'm trying with no success to fetch a single model given its id out of the collection.\n\nI've tried several options, I'm expecting when it works to have http://myurl/services/[id] but with all examples I never have the id:\n\n``` javascript\nvar services = ServicesCollection({id:1234});\nservices.fetch(...)\n\nvar services = ServicesCollection();\nservices.fetch({data: {id: 1234}},...)\n\nvar services = ServicesCollection([new ServiceModel({id: 1234}]);\nservices.fetch(...)\n```\n\nI've set urlRoot in the model as well.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2736",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2736/comments",
    "title": "Framework abstraction adapters?",
    "created_at": "2013-08-26T22:17:27Z",
    "updated_at": "2013-11-11T20:02:41Z",
    "body": "I know that Backbone supports jQuery, Zepto, etc, through the Backbone.$ variable. This works for some frameworks, but not all, especially MooTools. I use MooTools in all my projects and would love to use Backbone without needing other framework dependencies, especially for my Titon project: https://github.com/titon/toolkit/tree/master/src/js\n\nI've seen this type of question asked many years ago, but looks like nothing came of it?\nhttps://github.com/jashkenas/backbone/issues/238\nhttps://github.com/jashkenas/backbone/pull/920\n\nThis doesn't work for MooTools since the functions are different: `find`, `on`, `off`, etc. So why do we not have an actual abstraction adapter system, something like so?\n\n```\nBackbone.adapter = Backbone.Adapter.Jquery;\n// Or even just\nBackbone.$ = Backbone.Adapter.Jquery;\n```\n\nAnd then the adapter itself is simply a wrapper for basic functions. I added all the functions that seemed like they would need to be adapted, it's pretty basic.\n\n```\nBackbone.Adapter.Jquery = {\n    create: function() {\n        // create element\n    },\n    find: function(selector) {\n        return Backbone.View.$el.find(selector);\n    },\n    remove: function() {\n        return Backbone.View.$el.remove();\n    },\n    // on event\n    // off event\n    // ajax call\n};\n```\n\nRight now it seems like too much of it is hard-coded to jQuery syntax. Looking forward to your thoughts on this either way. If it seems like a good idea I could fork the project and submit a prototype.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2735",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2735/comments",
    "title": "_listeners misnomer?",
    "created_at": "2013-08-26T15:46:29Z",
    "updated_at": "2013-09-11T17:16:37Z",
    "body": "I'm curious about the name of the _listeners object that is used to track bindings in the listenTo implementation. Shouldn't it be called _listenees? Correct me if I'm wrong, but the objects in _listeners are not listening, they're being listened to.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2734",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2734/comments",
    "title": "Rewrite model.get() to access nested level data",
    "created_at": "2013-08-25T08:13:42Z",
    "updated_at": "2013-08-26T02:10:36Z",
    "body": "Hi,\n\nI rewrite `Backbone.Model.prototype.get` something like below for my internal project.\n\n```\nBackbone.Model.prototype.get = function (query) {\n        var attrValue = this;\n\n        try {\n            query.split(\".\").forEach(function (attr, index) {\n                if (index === 0 && attrValue.attributes.hasOwnProperty(attr)) {\n                    attrValue = attrValue.attributes;\n                }\n                if (attrValue.hasOwnProperty(attr)) {\n                    attrValue = attrValue[attr];\n                }\n                if (attrValue.attributes) {\n                    attrValue = attrValue.attributes;\n                }\n            });\n        } catch (err) {\n            attrValue = \"\";\n        }\n\n    return attrValue;\n};\n```\n\nsee this [jsFiddle](http://jsfiddle.net/cFdKj/1/) to know it's usage.\n\nHow do you see this? Would you accept this if i give pull request for this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2733",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2733/comments",
    "title": "race condition where polling or server push removes new models",
    "created_at": "2013-08-24T04:13:26Z",
    "updated_at": "2013-09-11T16:38:06Z",
    "body": "I'm using backbone in an app that allows users to share resources, and sometimes the server will have updates to a collection that require removal, adding, or merging of models in the client-side collection.  The default behavior of collection.set works great most of the time.\nI run into an issue when the user creates a new model right before the server sends an updated version of the collection to the client.\nThe problem comes from the fact that the newly created model doesn't exist in the response from the server, hence its removed from the collection.\n\nI can think of a few ways to fix this:\n1. I could pass {wait: true} into the create method, but this slows down the user-perceived \"snappyness\" of the app\n2.  I could build some kind of queue for syncing with the server\n3.  Thirdly I thought that maybe a solution could be added to Backbone core that    would let someone pass an option to collection.set that told it to keep models that    haven't been saved to the server yet?\n\nI have a commit [here](https://github.com/JoeWagner/backbone/commit/6b2e3cb6a15a3c5a17dcaa70246edb603ab9f875) that demonstrates what I'm suggesting above in \"3\"\n\nFor my use option 3 would be preferred, but I understand that maybe this doesn't belong in Backbone core, or maybe my implementation is lacking?  Does anybody have any thoughts, comments, or recommendations?\n\nThanks in advance,\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2731",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2731/comments",
    "title": "Wishing on how to improve Collection",
    "created_at": "2013-08-22T14:35:16Z",
    "updated_at": "2013-09-03T15:20:41Z",
    "body": "Hello all.\nI have one question :). Why Backbone.Collection is ordinary object. Why not extended native Array object. \nIf this is done, we can walk collection like array in native loop ( now need get collection.models property ), and have many array methods which can be overrided if needed.\n\nAny technical difficulty? Can you tell us. Very interesting to know why :) ?\n\nThanks! :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2730",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2730/comments",
    "title": "Backbone.Model.save doesn't propagate options up to sync for signature \".save(options)\"",
    "created_at": "2013-08-21T12:20:51Z",
    "updated_at": "2013-09-19T22:00:01Z",
    "body": "I am calling save on a model like this:\n\n```\nthis.model.save({ action: 'create.avatar', wait:true, success: this.uploadAvatarSuccess, error: this.uploadAvatarError });\n```\n\nThis call will work, success and error will be called and anything Backbone-related will be interpreted from the options hash.\nBut Backbone.sync is not seeing the additional options that are not related to Backbone like for example 'method' or 'action'.\n\nTruly it does work if you set the first parameter to null like this:\n\n```\nthis.model.save(null, { action: 'create.avatar', wait:true, success: this.uploadAvatarSuccess, error: this.uploadAvatarError });\n```\n\nDocumentation states:\n### model.save([attributes], [options])\n\nFirst thing I thought was I can completely omit using attributes param here. I think it'd be worth either making save fail when no first param is passed or fixing save so it can propagate consistently.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2729",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2729/comments",
    "title": "sign in with Twitter in jquery mobile app using cordova",
    "created_at": "2013-08-21T07:04:14Z",
    "updated_at": "2013-08-21T07:42:54Z",
    "body": "I am developing a mobile applicaton. In it client side is cordova-2.4.0 and jquery mobile are used,serverside is asp.net mvc.I want my users login with twitter in my application. i followed this link https://rnd.feide.no/2012/08/01/oauth-2-0-with-phonegap-childbrowser-using-the-jso-library/\n\nsuccessfully installed childbrowser,and created an app in twitter,got consumer key and consumer secret in application index page\n\n```\n     jso_configure({\n       \"your app\": {\n        Consumer key: \"xxxxxxxxx\",\n        Consumer secret: \"xxxxxxxxxxxxx\",\n        authorization: \"https://api.twitter.com/oauth/authorize\",\n\n    }\n}, {\"debug\": debug});    \n```\n\n$.oajax({\n   url: \"https://api.twitter.com/1.1/statuses/home_timeline.json\",\n   jso_provider: \"your_app\",\n   jso_scopes: [\"public\", \"write\"],\n   jso_allowia: true,\n   dataType: 'json',\nsuccess: function(data) {\n    console.log(\"Response (your_app):\");\n    console.log(data);\n}\n});\n\nI didn't get expected result.Am i doing something wrong here??i am not sure my ajax url ie;https://api.twitter.com/1.1/statuses/home_timeline.json\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2726",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2726/comments",
    "title": "fails to load jquery under newer versions of browserify/insert-module-globals",
    "created_at": "2013-08-21T00:55:28Z",
    "updated_at": "2013-09-11T17:17:16Z",
    "body": "I've discovered that the way the backbone.js code is wrapped in (this) scope prevents backbone from finding jquery loaded at window scope. This is the result of a recent change in insert-module-globals, a dependency of browserify.\n\nThe change in question is here:\n\nhttps://github.com/substack/insert-module-globals/commit/5b4212f88de68bd4a0a5377c6b583ee44f5481c8\n\nChanging \n\n}).call(this); \n\nto \n\n}).call();\n\nresolves the problem, but not sure if it creates others.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2725",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2725/comments",
    "title": "Changing indexOf behaviour for Collection class.",
    "created_at": "2013-08-19T20:47:06Z",
    "updated_at": "2013-08-19T21:02:50Z",
    "body": "Just raising a question to find out, whether somebody else had to search for model position at collection without any order (so, sortedIndex isn't helping us out) by Id only?\nMy proposal is to modify indexOf so that it searches by id/cid attribute, something similar to this\nhttps://gist.github.com/sudodoki/6273936\nOr do you consider this to cause significant drawback in perfomance? Maybe, Backbone's Collection should have another seekPosition method, that takes different arguments? Will be glad to hear out your opinion.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2722",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2722/comments",
    "title": "couldn't pass string as an argument to Backbone View",
    "created_at": "2013-08-14T13:47:09Z",
    "updated_at": "2013-08-14T14:00:17Z",
    "body": "e.g. new MyView(\"Hello\");\nTypeError: invalid 'in' operand n\nBackbone version: 1.0.0\n\nThrows the above javascript error from Underscore.js, on passing string as an argument to backbone view. Accepts only object. Worked for Version 0.9.2, but not 1.0.0.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2721",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2721/comments",
    "title": "Router: Better Catch-All (/.*/) Route",
    "created_at": "2013-08-12T22:17:09Z",
    "updated_at": "2015-03-13T10:18:40Z",
    "body": "The inclusion of a \"*notFound\" route was a real improvement for Backbone ... but it's not quite perfect.  One major issue is that it has to be the last route defined, which isn't always so simple (eg. if you have multiple routers or routes being manually registered in Required files).  This is enough of a problem in fact that someone went and made a whole plug-in just to deal with it (https://github.com/STRML/backbone.routeNotFound).  Hopefully if you look at that plug-in's source you'll agree that it shouldn't need to exist.\n\nSo rather than making the 404 (or \"page not found\") route something implicit that people have to struggle to get in to the right position, could you please consider adding an explicit `Backbone.History.pageNotFound` (or something similar) method?\n\nIn other words, inside of `Backbone.History.loadUrl` instead of its current return line:\n\n```\nreturn matched;\n```\n\nif it did:\n\n```\nreturn matched || this.pageNotFound();\n```\n\nthat would be really great, and super easy.  It'd be a little dirty though, because what's supposed to get returned there is a matching route, not the output of a route, so maybe a slightly cleaner way of doing it would be to have a `Backbone.History.registerPageNotFound` method and then do:\n\n```\nreturn matched || this.getRegisteredPageNotFoundRoute();\n```\n\nOr I could see at least a couple other variations; the important thing is just that it would be really awesome if I could say \"Backbone do this when there's no route defined\" instead of \"Backbone, do this if there's no route defined ... but god help me if I say that before all my routes are registered\" ;-)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2719",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2719/comments",
    "title": "Collection#set treats Object.prototypes as existing Models",
    "created_at": "2013-08-12T13:27:05Z",
    "updated_at": "2014-01-29T15:32:35Z",
    "body": "Ran into this as a bug in Firefox only due to my data which errors as:\n\n```\nTypeError: existing.set is not a function\n```\n\nthis is because one of my `model.id` is 'watch' (for a wrist watch) however Backbone is checking this id in the `Collections._byId` cache and matching the`Object.watch()` method.\n\nA reduced example is here: http://jsbin.com/akaluh/1/edit\n\nThe console output for Firefox is `[native code]` whereas Chrome and Safari it is `undefined`.\n\nThis is similar to other bugs/issues such as: #964, #1495, #2296.\n\nI've introduced a check that the return from `Collection.get` is actually an `Object` - I can't think why it would ever need to be something else? Pull request coming shortly.\n\nI also investigated using `this._byId.hasOwnProperty()` however it broke my app. I think that because Collections can be extended the `_byId` object may not be on 'this' collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2715",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2715/comments",
    "title": "unset/clear with { validate: true }",
    "created_at": "2013-08-08T15:53:30Z",
    "updated_at": "2013-08-08T16:13:25Z",
    "body": "Given this piece of code:\n\n``` javascript\nMyModel = Backbone.Model.extend({\n  validate: function(attrs, options) {\n    console.dir(attrs);\n    if (attrs.attr !== 'val') return 'WhatTheFok?';\n  }\n});\nm = new MyModel({attr:'val'}, {validate: true}); // this passes OK\nm.unset('attr', {validate:true}); // this returns false.\nm.unset('attr2'); // this returns m, unchanged since attr2 does not exists.\n```\n\nI think that no option other than `{silent: true }` should be passed to `unset` (the same for `clear`).\nThat is to say, `{validate: true}`passed to `unset` or `clear` should not call `validate` function.\nOtherwise, `validate` function gets called with `{attr: undefined}` and consequently fails.\nWhen one implements the `validate` function, one implements the validation of attributes when they're set, not unset.\n\nDo you think my point is valid ?\n( I know it's weird to pass `{validate: true}` to the `unset` or `clear` API )\n\nIf yes, one fix would be to force `validate` option to `false` in the impl of `set` when the option `unset`is passed as `true`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2714",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2714/comments",
    "title": "Using Model's collection option does not behave intuitively",
    "created_at": "2013-08-07T15:38:51Z",
    "updated_at": "2013-09-11T17:37:39Z",
    "body": "When a Model is created and added to a collection then saved, the model is added to the collection's model properties and the model's events are propagated to the collection.\n\n``` javascript\nvar c = new Collection({ model: Model });\nvar m = new Model({});\nc.add(m);\nm.save();\n```\n\nHowever, when a model is created using the `collection` option and saved, it is not added to the collection nor are the events propagated to the model and related collection events triggered.\n\n``` javascript\nvar c = new Collection({ model: Model });\nvar m = new Model({}, { collection: c });\nm.save();\n```\n\nIMHO, this behavior is less than intuitive. I assumed that the collection option would ultimately bind the model to the collection once saved, but it doesn't. If the only purpose is to pass along the collection's url, why not just pass it literally? (As recommended in the docs.)\n\n> If you pass a {collection: ...} as the options, the model gains a collection property that will be used to indicate which collection the model belongs to, and is used to help compute the model's url. The model.collection property is otherwise added automatically when you first add a model to a collection.\n> \n> {url: \"...\"} and/or {urlRoot: \"...\"} options may be passed when creating a new model that needs to have a custom one-off URL endpoint.\n\n``` javascript\nvar m = new Model({}, { url: c.url });\n```\n\nIn my use case, I have a view updating on the collection's `add` event. I have another view to create the model. I do not want the collection view to update until the model is saved. Therefore, I cannot add the model to the collection until it is saved. The collection options seemed like a clean way to pass collection into the view with the model.\n\nFeel free to close if I misunderstood the intent of this option. If not, I'll be happy to submit an update.\n\nCheers.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2713",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2713/comments",
    "title": "Collection#create saves the model even when adding it failed",
    "created_at": "2013-08-07T15:05:02Z",
    "updated_at": "2013-10-03T15:34:26Z",
    "body": "When you try to Collection#create a new model with already existing ID the add method fails (nothing is added, the original model remains the same). However, the new model is still saved. It should imo replace (merge with) the existing model and save it or - when the add method fails - not save it at all.\n\nPossible both according to the \"merge\" option.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2712",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2712/comments",
    "title": "Model::destroy() triggers 'request' event on collection but doesn't trigger 'sync'",
    "created_at": "2013-08-07T12:25:50Z",
    "updated_at": "2014-02-18T01:24:20Z",
    "body": "When destroying a model which has been added to a collection the model's 'request' event is relayed to collection, thus collection listeners got it. But upon successful XHR model fires event 'destroy' first, and then fires 'sync'. Collection, in it's turn, listens for 'destroy' and removes the model from itself, thus when model fires 'sync' it's already removed from the collection and the event is never relayed.\n\nSo a listener listening to 'request' / 'sync' events on a collection will get 'request' but will never get 'sync' for Model::destroy() action. Thus if listener's logic depends on the fact that for each 'request' there should be either 'sync' or 'error' then it's logic will be broken.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2708",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2708/comments",
    "title": "Backbone.js save model don't cause ajax PUT request on android 2.x",
    "created_at": "2013-08-05T12:51:16Z",
    "updated_at": "2013-08-05T12:54:53Z",
    "body": "http://stackoverflow.com/questions/18058326/backbone-js-save-model-dont-cause-ajax-put-request-on-android-2-x\n\nBackbone.js 1.0.0\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2704",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2704/comments",
    "title": "Model.save calls error callback function on successful update",
    "created_at": "2013-07-31T21:12:42Z",
    "updated_at": "2013-08-01T13:13:44Z",
    "body": "I am using Backbone 1.0 with Rails 3.2. The save method is calling create function on Rails, which returns 201 status code to the browser. This should normally be successful, but instead it triggers the error callback. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2703",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2703/comments",
    "title": "The \"request\" event is fired after \"sync\" when model is fetching with \"async\": \"false\" options",
    "created_at": "2013-07-31T13:04:52Z",
    "updated_at": "2013-07-31T17:56:33Z",
    "body": "$.extend(Backbone.Model.prototype, {\n        initialize: function() {\n            this.on('request', this.start, this);\n            this.on('sync', this.stop, this);\n            this.on('error', this.stop, this);\n        },\n\n```\n    start: function() {\n        console.log('show');\n    },\n\n    stop: function() {\n        console.log('hide');\n    }\n```\n\n}\n\n```\n        var User = new UserModel();\n        User.fetch({\n            async: false,\n            success: function (model, response) {\n                console.log('User.fetch success');\n            }\n            complete: function() {\n                console.log('User.fetch complete');\n            }\n        });\n```\n\nExpected result:\nshow\nUser.fetch success\nhide\nUser.fetch complete \n\nReal result:\nUser.fetch success \nhide\nUser.fetch complete\nshow \n\nWith the best regards!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2701",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2701/comments",
    "title": "Suddenly my BackboneJS collections don't work in Chrome when the code is minified",
    "created_at": "2013-07-30T06:44:59Z",
    "updated_at": "2013-07-31T10:27:20Z",
    "body": "Suddenly my BackboneJS collections don't work in Chrome when the code is minified.\nI have been searching for a bug in our code. But after fix some bugs, the application continue breaking when I use collections. If I change the collection for an array, the application works, but the next collection in the execution will cut again the execution.\n\nI have to say that my application is really big. I have a model with lots of information and it has nested collections and models.\n\nAn example of a model with a collection, is usually the ones that fails.\n\n```\n    var MyCollection = Backbone.Collection.extend({ model: VinculacionesGrafo });\n\n    var MyParentModel= Backbone.Model.extend({\n        defaults: function () {\n            return {\n                mycollec: new MyCollection,\n                finDeCarga: false\n            };\n        },\n\n        initialize: function () {\n            _.bindAll(this);\n        },\n        ....\n        loadData: function () {\n                var that = this;\n                sendRequest({\n                    type: \"post\",\n                    url: ..,\n                    dataType: \"xml\",\n                    data: { ... },\n                    success: this.success\n                });\n        },\n        success: function(data) {\n            model = new ChildModel;\n            that.get(\"mycollec\").add(model);\n        }\n```\n\nIt works allways in Firefox, Internet Explorer... But sometimes it fails in Chrome when the code is ready for production. I mean when the code is minified. At the beggining we thought it was a syncronoussly problem, but after change all collections by arrays it continues to fail in other collections that do not depends on loadding data. Allways the line with the error is something like:   that.get(\"mycollec\").add(model); And the stack is the next:\n\n```\n TypeError: Cannot read property 'operaciones' of null\n     at h.extend.get \n     at h.extend.set \n     at h.extend.add\n     at g.Model.extend.addItem \n     at f.extend.cargarNodosIniciales\n```\n\nAnd addItem method is the next (not related with the text error): \n\n```\naddItem: function (item) {\n     this.get(\"nodos\").add(item);\n},\n```\n\nAllways the error is related with some data that it is null, but the stack is not related with the error text. When the code is obfuscate and we detected it the first time, the error was something like that:\n\n```\nUncaught TypeError: Cannot read property '1' of null \n    h.extend.get \n    h.extend.set \n    h.extend.add\n    (anonymous function)\n    t.each.t.forEach\n    g.Model.extend.loadDataMercantiles \n    g.Model.extend.loadData \n    g.Model.extend.loadDataSuccess\n    $.ajax.$.extend.success \n    m\n    p.fireWith\n    c\n    (anonymous function)\n```\n\nThe really strange thing is that when I change collections for arrays (in that code it will be mycollec: [] and push instead of add.) The bug does not appear anymore and the execution go on until it comes to another similar collection instruction.\n\nI am really afraid. It is like backbone collections are broken. They works well sometimes and in the rest of the application they never fail. But It sames that section (that load lot of data and add lot of html) breaks backbone, or maybe is there a memory leak?? \n\nI am really lost. I am so sorry because the lack of the information the first time I wrote the question.\n\nThanks a lot in advance... I really need help\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2699",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2699/comments",
    "title": "How to manage multi dialogs?",
    "created_at": "2013-07-28T14:06:36Z",
    "updated_at": "2013-07-28T14:08:14Z",
    "body": "Hi,guys, i'm newbie.I have a question that howto manage multi dialogs.For example,if i have multi views where every view contain a button to trigger the dialog to show.Should i  \ncreate multi view to hold each dialog which should render in the multi veiws's event?\nThanks for help.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2698",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2698/comments",
    "title": "Validation won't stop set",
    "created_at": "2013-07-25T18:48:36Z",
    "updated_at": "2013-07-25T19:11:10Z",
    "body": "backbone validate does not stop set from setting the attribute, what should I do to make it do so? isValid shows the correct result( which is false)...\n\nvar Person = Backbone.Model.extend({\n    defaults: {\n        name: 'John Doe',\n        age: 30,\n        occupation: 'worker' \n    },\n\n```\nvalidate: function(attrs) {\n    if ( attrs.age < 0 ) {  \n        return 'Age Must Be POSITIVE';\n    }\n},\n\nwork: function () {\n    return this.get('name') + ' is working.';\n}\n```\n\n});\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2697",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2697/comments",
    "title": "Know when a model exists but attributes aren't changed during fetch merge",
    "created_at": "2013-07-25T14:06:26Z",
    "updated_at": "2013-07-25T23:42:08Z",
    "body": "Does anyone have any suggestions around knowing if a model exists when a fetch happens but no attributes are changed during a merge? I originally thought `change` might have fired for it matching, but it doesn't.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2696",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2696/comments",
    "title": "Catching JSON parse errors",
    "created_at": "2013-07-25T10:59:16Z",
    "updated_at": "2013-07-25T12:18:59Z",
    "body": "Due to a flakey web service our requests for JSON data sometimes return incomplete/malformed JSON, and Chrome throws the following error:\n\n`Uncaught SyntaxError: Unexpected end of input`\n\nAny pointers on how to catch/handle this exception from Backbone sync? I've looked through the Backbone source and can't even work out where the actual server response parsing is happening ... any help appreciated!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2695",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2695/comments",
    "title": "Models added to collection after initialize is called.",
    "created_at": "2013-07-25T09:55:58Z",
    "updated_at": "2013-07-25T12:28:52Z",
    "body": "Is there a reason that, in Backbone.Collection, the initialize method is called after initial reset is called?\n\nCould line 603-604:\n\n```\nthis.initialize.apply(this, arguments);\nif (models) this.reset(models, _.extend({silent: true}, options));\n```\n\nread:\n\n```\nif (models) this.reset(models, _.extend({silent: true}, options));\nthis.initialize.apply(this, arguments);\n```\n\n?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2694",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2694/comments",
    "title": "Events.when() for events that may or may not have fired already",
    "created_at": "2013-07-25T07:35:12Z",
    "updated_at": "2013-07-26T02:11:44Z",
    "body": "The idea for this is that often times you want to execute a task when something happens or if it has happened already, e.g. after a view has loaded it's image assets.\n\nAn example of such event handling is jQuery's `$(document).ready()`. It offloads the burden of figuring out whether the event has fired already from the client code to the event emitter.\n\nEssentially the semantics would be that if the event has fired earlier, schedule the handler to fire asynchronously (e.g. `setImmediate()`/`setTimeout()`). If not, it would call `once()` with the arguments it was passed.\n\nShould arguments passed to the event be preserved? I think not, due to the high probability of significant memory leaks caused by this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2693",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2693/comments",
    "title": "Sync Events confusion?",
    "created_at": "2013-07-25T07:28:31Z",
    "updated_at": "2014-01-02T23:38:02Z",
    "body": "Hello\n1. I found that there is no way to identify when Backbone.sync finished request in one centralized place. There is \"request\" event that applies to any request made but there is no \"response\" or \"requestEnd\" event that you can bind to know when request is finished. I know that there are \"sync\" and \"error\" events but they are maped to \"success\" and \"error\" callbacks and because of that duplication of code needs to be done to get desired effect. I think it would be much more natural to have some event mapped to \"complete\" callback. A good example would be if I wanted to show loading indicator when model starts doing request and hide it when it finishes. Now what I need to do is bind on \"request\" event to show indicator and bind to both \"error\" and \"sync\" events to hide it but I don't really care what's the status of request that came back and some sort of \"requestEnd\" would fit perfectly.\n2. When binding to \"request\" event on collection it is triggered both when collection or model starts doing request (I know it's part of events delegation mechanism). Is there any other way to distinguish which object (collection or model) initialized the request without doing \"instanceof\" check inside callback handler? Wouldn't it also feel more natural to bind events on correct objects and don't mix them up?\n\nIt's really easy to solve first issue and I would more than happy to do a pull request if it is accepted. Though the second one needs to be discussed I think.\n\nedit:\n3. Also there is only one event that identifies CRUD operations - \"sync\" but there is no way to tell apart which operation was completed. I.E. if I bind to \"sync\" event it will be fired both times when I fetch and when I save model. It would be much more better to have additional \"saved\", \"updated\" and \"fetched\" events rather than single one \"sync\".\n\nWould it be accepted as pull request to add additional events?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2692",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2692/comments",
    "title": "Model#destroy of persisted model does not trigger 'sync' on collection",
    "created_at": "2013-07-24T16:01:19Z",
    "updated_at": "2014-02-18T01:24:20Z",
    "body": "I have a piece of code along the lines of:\n\n``` js\nvar model = collection.get(id);\n\nmodel.destroy();\n```\n\nI'll just note that the model _is_ persisted and has an ID.\n\nFollowing the Backbone code, it's apparent that it does trigger `request` and `destroy` on the collection, it does not, however, trigger `sync`.\n\nWhen reaching the following line under `Events#trigger` (line 145 in the debug build):\n\n``` js\nvar allEvents = this._events.all;\n```\n\n`allEvents` returned is `undefined` and so nothing is triggered on the collection.\nThis is relevant to Backbone 1.0.0.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2691",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2691/comments",
    "title": "Views no longer have an options property?",
    "created_at": "2013-07-24T15:43:35Z",
    "updated_at": "2013-07-24T16:06:31Z",
    "body": "The annotated source at http://backbonejs.org/docs/backbone.html shows how Views call `this._configure(options || {});` in their constructor which in turn sets an options property of the view.\n\nThe version in this repository no longer does this (line 992):\n\n``` javascript\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    options || (options = {});\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n```\n\nAnd so instances of Views no longer have an options property.\n\nBit confused as both claim to be version 1.0.0\n\nI'm sure someone more knowledgeable than me can shed some light on the issue.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2690",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2690/comments",
    "title": "Documentation: Add Digg Reader to the Examples Section",
    "created_at": "2013-07-23T16:04:34Z",
    "updated_at": "2013-07-25T23:42:26Z",
    "body": "Looks like Digg Reader is using backbone: http://www.fastcolabs.com/3014663/open-company/inside-the-tech-stack-digg-used-to-replace-google-reader\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2689",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2689/comments",
    "title": "missed line in uncompressed backbone.js",
    "created_at": "2013-07-23T11:02:45Z",
    "updated_at": "2013-07-23T20:23:28Z",
    "body": "Hello, guys. I found some interesting 'bug'. In uncompressed backbone.js is missed one line (see this patch: https://gist.github.com/evilguc/6061548). In min version all is fine. In used on documentation site (http://backbonejs.org/) version also looks good.\n\nProblem shows when you're trying to pass url parameter for collection during its creation, for example:\n\nvar tabs = new TabSet([tab1, tab2, tab3]);\nvar spaces = new Backbone.Collection([], {\n  model: Space,\n  url: '/spaces'\n});\n\n(It's an example from documentation)\nUrl for collection will never be set this way.\n\n0.9.10 and 1.0.0 are both include this bug (maybe other too).\nCan you fix it in future versions? :) Because it is very annoying, when you try to figure it out.\nBest wishes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2688",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2688/comments",
    "title": "Undesired proxying events from collection models",
    "created_at": "2013-07-23T00:31:47Z",
    "updated_at": "2013-07-23T06:48:18Z",
    "body": "I know that Backbone.Collection listens to their models events through _onModelEvent for updating internals. However, I just got an undesired event propagation after knowing that it was proxying those events to collection.\n\n``` javascript\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'destroy') this.remove(model, options);\n      if (model && event === 'change:' + model.idAttribute) {\n        delete this._byId[model.previous(model.idAttribute)];\n        if (model.id != null) this._byId[model.id] = model;\n      }\n      this.trigger.apply(this, arguments); // remove this line of code\n    },\n```\n\nThat's not good for developers who wants to extend Backbone functionalities.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2685",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2685/comments",
    "title": "Discussion: Breaking backwards compatibility",
    "created_at": "2013-07-20T16:17:46Z",
    "updated_at": "2013-07-23T19:55:29Z",
    "body": "Is there a reason that upgrading version of Backbone.js requires one to change their code to keep things working the way they are/were in a previous version? If you add a new feature or new functionality, it makes sense (to me) that I would need to change my code to get this new benefit. However we almost always see the reverse of that situation here. \n\nTwo instances of these breaking changes are `options.reset` and `options.wait`. In both cases we wanted some of the fixes, but in order to upgrade and maintain the current functionality, all our code had to be updated to account for these new options. In both cases, it seems the default settings were set to break existing users instead of allow people to opt-in to the new hotness.\n\nDo you intend to continually break backwards compatibility even after 1.0?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2680",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2680/comments",
    "title": "Addition to the documentation",
    "created_at": "2013-07-18T10:23:31Z",
    "updated_at": "2013-08-01T13:09:25Z",
    "body": "Right now, http://backbonejs.org/#Collection-Underscore-Methods shows some examples. Maybe it should be mentioned that those underscore methods return Arrays, not Collections. A way to use those proxies on the actual collection would be:\n\ncol.reset(col.filter(item) {...}); // thanks to Lasseee from #documentcloud\n\nIt would be nice if this addition could be made to the underscore proxy documentation.\nUnfortunately the documentation doesn't seem to be a Wiki, so i cannot add it myself. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2679",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2679/comments",
    "title": "attributes of model's constructor misleading",
    "created_at": "2013-07-17T14:58:09Z",
    "updated_at": "2013-07-17T15:15:34Z",
    "body": "Not sure whether it is a bug or a feature but I found this really misleading:\n\n```\nvar Model = Backbone.Model.extend({\n  initialize: function(attr, opts){\n    console.log('?unexpected: ' + attr.name);\n    console.log('as expected: ' + this.get('name'));\n  },\n  parse: function(res){\n    return {\n      name: res.crazyNamedName\n    };\n  }\n});\nvar Collection = Backbone.Collection.extend({\n  model: Model\n});\n\nvar model1 = new Model({name: 'neo'}); // works as expected\nvar model1 = new Model({crazyNamedName: 'neo'}, {parse: true}); // not entirely\n```\n\nNow I know that I should've used only `this.get('name')` but I still feel like if I use `parse=true` then attr should be already parsed.\n\nIn fact you can assume that from reading the docs:\n\n```\nWhen creating an instance of a model, you can pass in the initial values of the attributes, which will be set on the model.\n```\n\nIn the above case the attributes won't be set on the model.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2678",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2678/comments",
    "title": "Deferred event triggering",
    "created_at": "2013-07-16T14:50:05Z",
    "updated_at": "2013-07-16T16:23:07Z",
    "body": "Is there a reason that Events.trigger() calls handlers inline rather than deferring them? I ran into some performance issues because of that, and I was wondering what the reasoning was there.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2677",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2677/comments",
    "title": "When merging partial models by Collection.set, attributes with default value are reseted back to its default value",
    "created_at": "2013-07-16T12:59:15Z",
    "updated_at": "2013-07-16T13:05:15Z",
    "body": "When I have some default values in model:\n`Backbone.Model.extend({ defaults: { active: false } })`\nand then I want to update collection by calling Collection.set with array of partial model objects like this:\n`collection.set([{ id: 3, name: \"newname3\" }, { id: 5, name: \"newname5\" }], { remove: false })`\nexisting models are merged, that's ok, but attributes with default value are reseted (overwritten) back to default value.\n\nhttps://github.com/jashkenas/backbone/blob/master/backbone.js#L680-L690\nmay be related to #2421 \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2675",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2675/comments",
    "title": "Inherit events from setElement($jqueryobj)",
    "created_at": "2013-07-15T23:01:37Z",
    "updated_at": "2013-07-17T12:25:53Z",
    "body": "I'm mixing bootstrap and backbone, one of things I use from bootstrap is the modal dialogue which has events. I wrap the content of this modal with backbone and want to be able to listen to the events that it emits. So the following should work:\n\n``` javascript\n\nvar MyView = Backbone.View.extend({\n    events : {\n        'show hidden' : 'clear'\n    },\n    initialize : function() {\n        this.setElement($('#mymodal')); // this should inherit the events if I pass the jquery object\n    },\n    clear : function() { this.$(':input').val(''); }\n}\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2673",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2673/comments",
    "title": "Version bump",
    "created_at": "2013-07-14T15:57:44Z",
    "updated_at": "2013-10-11T01:01:43Z",
    "body": "The desirability of a patch level version bump was first mentioned about 3 months ago (#2416), and this particular issue has tripped me (and apparently others) up a couple times. \n\nI haven't been following the issues and PRs religiously, but I don't recall anything making it into master that would necessitate minor version bump.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2670",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2670/comments",
    "title": "Incorrect callback parameters listed in \"route\" event docs",
    "created_at": "2013-07-12T14:35:44Z",
    "updated_at": "2013-07-12T15:21:05Z",
    "body": "In the \"Catalog of Built-in Events\"\n\n> \"route\" (router, route, params) \u2014 Fired by history (or router) when any route has been matched.\n\nShould be:\n\n> \"route\" (route, params) \u2014 Fired by history (or router) when any route has been matched.\n\nThe `router` itself is not passed https://github.com/jashkenas/backbone/blob/master/backbone.js#L1250\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2667",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2667/comments",
    "title": "Default model parameters enforced in collection.fetch()",
    "created_at": "2013-07-11T09:27:33Z",
    "updated_at": "2013-07-11T13:59:43Z",
    "body": "After upgrading to 1.0, fetching collection from server enforces default properties that are not in response. This would be expected the first time model is initialized, but not the second, when property was set and changed. This worked in 0.9.10.\n\nExamples are identical, except different backbone versions:\nWorking (0.9.10): http://jsfiddle.net/FH4Nj/\nNot working (1.0): http://jsfiddle.net/Pg2aU/422/\n\nI have also asked about that in stackoverflow but now I am convinced it is a bug. http://stackoverflow.com/questions/17580502/backbonejs-collection-fetch-enforce-default-model-parameters\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2666",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2666/comments",
    "title": "utf8 in route expression",
    "created_at": "2013-07-10T14:08:08Z",
    "updated_at": "2013-10-10T13:20:42Z",
    "body": "Greetings.\n\nAs specified here: \n\nhttp://stackoverflow.com/questions/17552472/backbone\n\n...calling router.route with an utf8 expression causes different behaviour between browsers, depending on if the browser encodes the current URL it is passing to backbone.js.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2664",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2664/comments",
    "title": "How to bind events conditionally in Back bone?",
    "created_at": "2013-07-10T08:35:35Z",
    "updated_at": "2013-10-01T15:59:31Z",
    "body": "I am having one issue in backbone events. I want to add one event (say 'change') on certain condition. I tried different ways. I tried like below\nhttp://stackoverflow.com/questions/11538725/binding-events-conditionally-in-backbone-mobile-or-desktop\nBut delegateEvents unbinds all already bound events. check this issue\nhttps://github.com/NYTimes/backbone.stickit/issues/57\nSo finally i added one class dynamically based on my condition and attaching events to that class. So do you have any better way to handle this situation?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2663",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2663/comments",
    "title": "How to work on focus events",
    "created_at": "2013-07-10T08:31:29Z",
    "updated_at": "2013-07-25T23:47:10Z",
    "body": "I have a some html controls like input etc. I would like to update some status based on the focus made to the control\n\nfor example:\n\nI would like to find a input id who gets the focus.\n\nI tries some thing like the below but it keeps calling the method.\n\nevents :{\n                'focus #input'     : \"updateCurrentCell\"\n        },\n\n```\n    updateCurrentCell: function(event) {\n        alert('updateCurrentCell called');\n        // Update the current cell.\n    } \n```\n\nwhat is the wrong here i am doing?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2662",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2662/comments",
    "title": "router.route() method does not update routes hash",
    "created_at": "2013-07-09T19:15:17Z",
    "updated_at": "2013-07-10T04:35:49Z",
    "body": "Is there a reason that the the routerInstance.route() method will not create or update the routes hash that is set when passing routes as an object to the extend() method or as a parameter to the instantiation of a router object (i.e. extendedRouter({routes:{}}) )?\n\nhere is some code to further explain my question: http://jsfiddle.net/codylindley/fGnUC/\n\nIs there a reason that the help route is not being updated on the myRouter.routes object?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2661",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2661/comments",
    "title": "Change event registration order not honoured",
    "created_at": "2013-07-09T10:17:05Z",
    "updated_at": "2013-07-09T12:00:31Z",
    "body": "Backbone `change` events are not being triggered in the order they are registered as `change:<attribute>` events are triggered first which can have negative side affects. For example\n\n``` javascript\nvar MyModel = Backbone.Model.extend({\n\n  initialize: function() {\n    this.setup();\n    this.on('change', this.setup);\n  },\n\n  setup: function() {\n    var attr = this.get('attr');\n\n    this.isFoo = attr === 'foo';\n    this.isBar = attr === 'bar';\n  }\n\n});\n\nvar MyView = Backbone.View.extend({\n\n  initialize: function() {\n    this.listenTo(this.model, 'change:attr', this.render);\n  },\n\n  render: function() {\n    var className = 'hide';\n    if (this.model.isFoo) {\n      className = 'foo';\n    } else if (this.model.isBar) {\n      className = 'bar';\n    }\n\n    this.$el.removeClass('foo bar hide').addClass(className);\n  }\n\n});\n```\n\nWhen the `attr` attribute is changed the view is re-rendered before the `isFoo` and `isBar` have been re-evaluated by the model.\n\nObviously this could be fixed by ensuring both events match (e.g. the model and view listen for either `change` or `change:attr` - never both) but this is a simplified scenario of the problem and I'm currently working with code using this pattern that is deriving _transient_ properties from many different attributes of the model.\n\nDeclaring each of these attributes explicitly in the event type string within the model doesn't seem right:\n\n``` javascript\nthis.on('change:attr change:attr2 change:attr3 change:attr4 change:attr5', this.setup);\n// could easily become unmanageable...\n```\n\nBut, at the same time, having my views that are dependant on the properties derived from only a subset of attributes re-render no matter what attribute has changed doesn't feel like a good solution either:\n\n``` javascript\nthis.listenTo(this.model, 'change', this.render);\n// would re-render even though I only need values derived from one attribute...\n```\n\nIdeally, I would want `change:<attribute>` to fire at the same time as `change` (i.e. after all attributes have been changed) and honouring the order in which the events were registered.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2660",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2660/comments",
    "title": "Make ajax a local method to Models/Collections",
    "created_at": "2013-07-06T00:03:12Z",
    "updated_at": "2013-07-08T19:26:27Z",
    "body": "Currently it looks like Models use Backbone.ajax when syncing: which can be overridden and is global, but, for me, it would be great if I could manipulate the ajax request on a model-by-model basis. For example: If I have one model that connects to an API which requires a CSRF token, but another model requests to a different API that chokes on unnecessary parameters \u2014\u00a0I can't use $.ajaxOptions to set the CSRF everywhere, and am currently forced to review the request string in beforeSend.\n\nWould feel cleaner/more OO to me to be able to override an ajax method on Models. Please let me know if I'm making sense (I can drum up other examples where this would have been nice), or if I'm overlooking a better way to do this currently-\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2657",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2657/comments",
    "title": "Model Fetch does not clean \"non-model\" attributes",
    "created_at": "2013-07-04T17:49:36Z",
    "updated_at": "2013-07-06T14:08:50Z",
    "body": "I have a model with a field that does not exists in database, it is used as a flag to gem carrierwave knows when to remove an image. \nIn Rails, I've added an attr_accessible :remove_image in model\nIn backbone, when I want to remove the image, I call model.set('remove_image',1) and call model.save()\nBut after call model.fetch(), the attibute 'remove_image' is not cleared from the attributes hash. \nMy server is not responding this atrribute in json response.\n\nI think it would be better if backbone model fetch() cleared all the attributes before setting the values returned from the server, but I don't know if it is a good idea\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2656",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2656/comments",
    "title": "Optional trailing slash",
    "created_at": "2013-07-04T17:44:45Z",
    "updated_at": "2014-06-13T20:55:01Z",
    "body": "When defining a root route, then pushing history onto the stack, then removing it, there is a trailing slash left over. This is not very desirable and would be great as an optional flag when starting history.\n\nThe origin of this appears to [reside in the code here](http://backbonejs.org/docs/backbone.html#section-171).\n## \n\nAs an example:\n\n``` javascript\nBackbone.history.start({\n    pushState: true,\n    root: \"/myroot\"\n});\n```\n\nOpening a page and pushing it onto the history stack works.\n\n``` javascript\nvar url = \"/Page-name\";\nRouter.navigate( url, { trigger: true });\n```\n\nResult: **example.com/myroot/Page-name** (this is the desired result)\n\nThen, when closing the page, passing a blank value to remove the page url creates a trailing slash:\n\n``` javascript\nvar url = \"\";\nRouter.navigate( url, { trigger: true });\n```\n\nResult: **example.com/myroot/**\n\nDesired result: **example.com/myroot** (no trailing slash)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2654",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2654/comments",
    "title": "Doesn't load the underscore or backbone libraries",
    "created_at": "2013-07-03T21:59:30Z",
    "updated_at": "2013-07-03T23:26:57Z",
    "body": "I have:\n\n---\n\nsites/all/libraries/underscore/underscore.js\nsites/all/libraries/backbone/backbone.js\n\n---\n\nWhat am I doing wrong here? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2653",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2653/comments",
    "title": "Backbone.history.start does not find route ",
    "created_at": "2013-07-03T21:48:15Z",
    "updated_at": "2013-07-04T12:30:00Z",
    "body": "Suppose I have a web page called `test.html` and I want my `Backbone.Router` to be capable of handling routes like `test.html?new` and also `new`. I've written sth like:\n\n```\nroutes: {\n  'new': function(){alert('new');},\n  'test.html?new': function(){alert('test.html?new');}\n}\n```\n\nBut if I visit `test.html?new` nothing happens. In particular \n\n```\nconsole.log(Backbone.history.start({pushState:true})); // returns false\n```\n\nHowever both:\n\n```\nBackbone.history.navigate('test.html?new', {trigger:true})\nBackbone.history.navigate('new', {trigger:true})\n```\n\ntriggers the route.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2651",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2651/comments",
    "title": "How does both to shuffle and pluck a collection?",
    "created_at": "2013-07-03T09:28:56Z",
    "updated_at": "2013-07-03T15:17:13Z",
    "body": "Hey guys,\n\nWhen I am running code like following:\n\n<pre>\nconsole.log(someCollection.shuffle().pluck(\"description\"));\n</pre>\n\n\nI have an error\n\n<pre>\n[12:23:36.572] TypeError: someCollection.shuffle(...).pluck is not a function \n</pre>\n\n\nWhen I am tring to use chaning:\n\n<pre>\nconsole.log(someCollection.chain().shuffle().pluck(\"description\"));\n</pre>\n\n\nI have some weird result:\n\n<pre>\n[12:26:37.811] ({_wrapped:[(void 0), (void 0), (void 0), (void 0)], _chain:true})\n</pre>\n\n\nAny ideas how to use Shuffle + Pluck methods?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2649",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2649/comments",
    "title": "Model.save() success is called before 'sync', other events",
    "created_at": "2013-07-03T03:49:31Z",
    "updated_at": "2013-07-03T20:13:22Z",
    "body": "If the behavior described in the topic line is desired, I suggest adding a 'complete' callback that is fired after 'change', 'sync', etc.\n\nIn particular, if a Model has sub collections that are rebuilt on 'sync' but success is fired before 'sync', data state inconsistency problems arise.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2645",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2645/comments",
    "title": "ne layoutmanage",
    "created_at": "2013-07-01T09:57:49Z",
    "updated_at": "2013-07-01T09:58:24Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2643",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2643/comments",
    "title": "TypeError: this._bindRoutes is not a function",
    "created_at": "2013-06-30T08:26:09Z",
    "updated_at": "2013-06-30T08:39:38Z",
    "body": "I tried to use `Backbone.Router` in my application, but Firefox kept telling me this: \n\n`TypeError: this._bindRoutes is not a function @ backbone_1_0_0_dev.js:1213`\n\nMy `Backbone.Router` test app:\n\n``` html\n<!DOCTYPE html>\n<html lang=\"de-at\">\n    <head>\n        <title>Test</title>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n\n        <script src=\"/homepage/js/jquery_2_0_2.js\"></script>\n        <script src=\"/homepage/js/underscore_1_4_4.js\"></script>\n        <script src=\"/homepage/js/backbone_1_0_0_dev.js\"></script>\n\n    </head>\n    <body>\n        <script>\n            var MyRouter = Backbone.Router.extend();\n            var test = MyRouter();  // error ???\n        </script>\n    </body>\n</html>\n```\n\nSince this seems to work on all websites but mine, what did I do wrong? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2642",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2642/comments",
    "title": "collection.clone() supports options deep",
    "created_at": "2013-06-27T23:07:56Z",
    "updated_at": "2013-06-29T07:33:17Z",
    "body": "It would be handy if collection.clone()  supported the option to perform a deep clone over shallow (collection only)\n\n<code>\ncollection.clone({deep: true}) -> collection and model(s) are new (toJSON())\ncollection.clone() -> collection is new and models are shared references\n<code>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2641",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2641/comments",
    "title": "Reconsider AMD support",
    "created_at": "2013-06-27T20:48:19Z",
    "updated_at": "2014-03-05T22:24:19Z",
    "body": "Since AMD support was rejected back in late 2011 (and more times since then), I think it is time to reconsider adding support for AMD in backbone and underscore. It was hoped that backbone would be on the [\"right side of javascript history\"](https://github.com/documentcloud/backbone/pull/710#issuecomment-3452894), but if you've been to any javascript conferences recently or if you have been paying attention to the javascript community at all, you will have noticed that AMD will continue to play a large role, especially given that native modules are not part of any spec that has reached recommendation status; it's pretty clear that ES proposals will continue to be revised for a long while before we see anything in browsers. The [reasoning provided by Jeremy](https://github.com/documentcloud/underscore/pull/431#issuecomment-3452856) has since proved mostly invalid (jQuery has confirmed that concerns regarding backwards-compatibility and wide support can be addressed by exporting the global along with AMD). It's not about arguing whether AMD is viable anymore. We've seen AMD supported across the web and win out in more and more popular javascript libraries. Probably the most notable and unfortunate exceptions today are backbone and underscore.\n\nAs [Addy said in 2011](http://addyosmani.com/writing-modular-js/), \"your best bets until we have both spec finalization and coverage are AMD (for in-browser modules) and CJS (for those on the server).\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2640",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2640/comments",
    "title": "Optionally update source objects when Model or Collection changes",
    "created_at": "2013-06-27T20:27:41Z",
    "updated_at": "2013-07-06T14:44:36Z",
    "body": "### Background\n\nI'd like to expose a Backbone collection as some source data's API.  It'd be a nice and handy 'data layer' in my 'tiered' node stack.\n\nHowever, any changes made to the collection are not reflected in the source data without binding to events and manually updating the data.\n\nWhile not that big of a deal, things get more complicated when I want to expose an object's nested array as a backbone collection as well.  This would have to be solved for by more event bindings or nesting the collection into the original source data itself.  Kind of hairy, and a common problem.\n### Idea\n\nIf the backbone collection and models updated the source data upon changes, it'd make life easier.  You could simply construct the appropriate collection type when it's requested on the fly--the complexity of exposing \"nested\" Backbone objects becomes substantially diminished, a complaint I've heard before in regards to backbone.\n\nHere's a scenario to try and illustrate this mess of an idea:\n\n```\nvar data = [{ id: 1, foo: 'bar' }];\nvar dataAPI = new Backbone.Collection(data, { updateSource: true });\n\n// Consumer:\ndataAPI.get(1).set('foo', 'new value');\nvar myNewModel = { bar: 'baz' };\ndataAPI.add(myNewModel);\ndataAPI.last().set('happy', true);\nmyNewModel.sad = false;\n\n// data ==> [{ id: 1, foo: 'new value' }, { bar: 'baz', happy: true, sad: false }]\n```\n\nThis is probably riddled with problems, but I'd love to discuss.\n### Caveat\n\nOne issue I already thought of: while updating the source objects will be reflected in the case of models, updating the source array will not add/remove anything from the collection.  This seems okay to me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2638",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2638/comments",
    "title": "Make Model methods like prototype to Collection that owns this model.",
    "created_at": "2013-06-26T22:55:39Z",
    "updated_at": "2013-06-26T23:16:03Z",
    "body": "I miss this so much. When i want to do something like \n\n``` javascript\nvar Category=Backbone.Model.extend({\naddProduct:function(id){\nthis.get('products').push(id);\n}\n})\n\nvar Categories=Backbone.Collection.extend({\nmodel:Category,\naddProduct:function(id){\nthis.forEach(function(cat){\ncat.addProduct(id)\n})\n}\n})\n```\n\nit makes me cry sometimes, when i need a lot of such functions.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2635",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2635/comments",
    "title": "The documentation for Model.get incorrectly says it returns a value",
    "created_at": "2013-06-25T16:13:19Z",
    "updated_at": "2013-06-25T16:27:02Z",
    "body": "The [intended](https://github.com/documentcloud/backbone/issues/2528#issuecomment-18002393) [behavior](https://github.com/documentcloud/backbone/pull/1601#issuecomment-8169668) of `Model.get` is to return a reference.\n\nThe [documentation](http://backbonejs.org/#Model-get) for that function states otherwise:\n\n> Get the current value of an attribute from the model.\n\nIt seems worthwhile to clarify here that modifying the result of a `get` will modify the underlying attribute.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2634",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2634/comments",
    "title": "No way to access \"raw\" view options in Backbone Master",
    "created_at": "2013-06-24T20:57:18Z",
    "updated_at": "2013-08-23T19:41:39Z",
    "body": "Previously `view.options` was set to the default options merged with the passed in options, while the `options` parameter passed to the `initialize` function was the \"raw options\" (only the options passed in to the constructor).\n\nThe change in a22cbc7f36f0f7bd2b1d6f62e353e95deb4eda3a changed this so that `view.options` is not set at all, and the `options` parameter is the object that used to be set at `view.options`. This means that the now no way at all to access just the \"raw options\" passed into the constructor.\n\nIs there any reason behind this? I was using the previous behaviour to save the \"raw options\" and pass them as-is to sub-views, without having to worry about the options object being polluted (e.g. by LayoutManager)...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2633",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2633/comments",
    "title": "Model constructor will override url even if same function is already in model prototype",
    "created_at": "2013-06-24T16:35:46Z",
    "updated_at": "2013-06-24T17:07:29Z",
    "body": "``` javascript\n var Model = Backbone.Model = function(attributes, options) {\n    var defaults;\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId('c');\n    this.attributes = {};\n    _.extend(this, _.pick(options, modelOptions));\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    if (defaults = _.result(this, 'defaults')) {\n      attrs = _.defaults({}, attrs, defaults);\n    }\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // A list of options to be attached directly to the model, if provided.\n  var modelOptions = ['url', 'urlRoot', 'collection'];\n```\n\noptions can have url property from some point of customization,  for example \n\n`javascript parent.fetch({ url: \"http://api.com/special_parents\" });`\nor sync method override\n\nThis will override url in my model even i have function  url in it.\n\ndetailed description:\nhttps://github.com/PaulUithol/Backbone-relational/issues/356#issuecomment-19918308\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2630",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2630/comments",
    "title": "Collection#model executed with blank object scope",
    "created_at": "2013-06-24T12:38:13Z",
    "updated_at": "2013-06-24T16:33:28Z",
    "body": "Here's an example:\n\n```\nFooCollection = Backbone.Collection.extend({\n  model: function() {\n     var m = new FooModel();\n     m.doSomethingUsing(this.foo());\n     return m;\n  },\n  foo: function() { return \"whatever\"; }\n}\n```\n\nEven though `model()` is an instance method of my `FooCollection`, Backbone executes it with a blank object as `this` and as such Collection's `model()` method is forced to be state-independent of the collection in question. I expected an instance method on a class to run with the same `this` as every other instance method.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2629",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2629/comments",
    "title": "Collection.indexOf() problems with isSorted == true",
    "created_at": "2013-06-23T03:26:20Z",
    "updated_at": "2014-02-03T14:34:16Z",
    "body": "Using `indexOf()` with `isSorted` set to true on a collection with a 2 argument comparator does not work as I would expect.\n\nUltimately, I think the issue lies with `_.sortedIndex()` not being designed for a 2 argument comparator. Related - I don't think `Collection.sortedIndex()` works if the collection has a 2 argument comparator. I think that's the root of the problem.\n\nOther thought:\nI think it would be great if `isSorted` defaulted to true if a collection defined a comparator.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2628",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2628/comments",
    "title": "Validation on object construction",
    "created_at": "2013-06-22T20:28:19Z",
    "updated_at": "2013-06-23T10:37:02Z",
    "body": "Giving a validating Model, I would have expected that validation also happens with on demand validation on object construction. \n\n``` javascript\nvar Todo = Backbone.Model.extend({\n  defaults: {\n    completed: false\n  },\n\n  validate: function(attribs){\n    if(attribs.title === undefined){\n        return \"Remember to set a title for your todo.\";\n    }\n  },\n\n  initialize: function(){\n    console.log('This model has been initialized.');\n    this.on(\"invalid\", function(model, error){\n        console.log(error);\n    });\n  }\n});\n```\n\nOn\n\n``` javascript\nvar emptyTodo = new Todo(null, {validate: true});\n```\n\nBackbone creates a new Todo object, though with an embedded error, and\n\n``` javascript\nconsole.log(emptyTodo.validationError);\n```\n\nlogs \"Remember to set a title for your todo,\" but the callback is never invoked, due to the fact that the constructor function first invokes set and then initialize.\n\nPerhaps there should be a preinitialize, so that one could refactor\n\n``` javascript\nTodo.initialize = function() { console.log('This model has been initialized.'); };\nTodo.preinitialize = function() {\n    this.on(\"invalid\", function(model, error){\n        console.log(error);\n    })};\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2627",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2627/comments",
    "title": "Give model.set a parse option",
    "created_at": "2013-06-20T22:44:08Z",
    "updated_at": "2014-08-06T08:57:23Z",
    "body": "The collection counterpart of set allows you to provide a \"parse\" option to run the parser function before processing the collection object. This is handy when you have bootstrap data that you want to build a collection from, as it wont go through the fetch function.\n\nIs there a reason the model object doesn't provide the same option to parallel collection? It seems inconsistent to me that it is omitted.\n\nEdit: Upon further inspection, reset does still respects the parse option.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2626",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2626/comments",
    "title": "accept: application/json",
    "created_at": "2013-06-20T17:12:40Z",
    "updated_at": "2013-06-21T23:13:47Z",
    "body": "I think backbone should send an \"accept: application/json\" header when fetching models to inform server about which type of content to send.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2624",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2624/comments",
    "title": "Merging Models recursively",
    "created_at": "2013-06-19T14:50:29Z",
    "updated_at": "2013-06-19T15:42:17Z",
    "body": "I have encountered an issue trying to update Model in a Collection with partial data, when my Model had a collection in one of its attributes. I've been using `Collection#add` method with `{merge: true}` options hoping to have my nested collection merged too. Instead, it was completely replaced by the new value. The problem is that current `Model#set` method:\n\n```\nunset ? delete current[attr] : current[attr] = val;\n```\n\nis simply replacing the attribute value not considering possible merge when current[attr] is an instance of `Backbone.Collection`, which I feel would be desired behavior.\n\nI have slightly changed it, only to check whether this \"recursive\" merging is desired and possible:\n\n```\nunset ?\n    delete current[attr] : \n        merge && recursive && current[attr] instanceof Backbone.Collection && val instanceof Backbone.Collection ?\n            current[attr].add(val.models, { merge: true }) : current[attr] = val;\n```\n\nwhere `merge` and `recursive` are passed as `Model#set` options:\n\n```\nmerge           = options.merge;\nrecursive       = options.recursive;\n```\n\nThe reason I've included additional `recursive` option to `Model#set` is because I didn't want to break existing functionality which replaces nested collection instead of merging it.\n\nSimilar request was reported already (#2316) but in my opinion the proposed solution wasn't generic enough to be merged with Backbone itself.\n\nI have already created a patch and wrote the tests and it looks like it's working really well. I will push it to my fork in a minute and issue a pull request for you to consider.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2623",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2623/comments",
    "title": "Inconsistency in `invalid` event parameters",
    "created_at": "2013-06-19T13:40:31Z",
    "updated_at": "2013-09-11T20:45:11Z",
    "body": "Depending on whether you call `model.save()` or `collection.create()`, different arguments are passed for the `invalid` event.\n\nSince this behavior is not specified in the documentation, it appears to be unintended?\n\nWhen used via `model.save()`, the second parameter (`error`) seems redundant as it's also available via `options.validationError`. Maybe the `error` parameter should be replaced with something in the likes of `model.attributes`?\n\nThis way both `invalid` event triggers would behave in a similar fashion.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2621",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2621/comments",
    "title": "Surrogate interferes with Collection.set accepting arrays of Model subtypes",
    "created_at": "2013-06-19T06:24:53Z",
    "updated_at": "2013-06-20T12:09:44Z",
    "body": "extend injects a Surrogate into the prototype chain, in place of an instance of the super-class. As a result, `subtype instanceof Model` always returns false.\n\nThis becomes a problem when Collection.set is attempting to determine in `_prepareModel`, if it has been passed a hash or a model.\n\nThe resulting behaviour is highly undesirable.\n\njsFiddle demonstrating issue: http://jsfiddle.net/recurse/rpbHj/1/\n\nIn my code I have replaced the instanceof check for an attribute check for `cid`, as I know no hash will contain that attribute, but of course that is not a general solution.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2619",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2619/comments",
    "title": "Memory leak in _listeners with #stopListening implementation",
    "created_at": "2013-06-18T00:44:09Z",
    "updated_at": "2013-09-24T13:20:14Z",
    "body": "I was profiling some code and its memory usage, and was surprised to come upon what looks like a memory leak in Backbone's `listenTo` / `stopListening` implementation.  I looked through the issues and this appears to have been there since @jashkenas' original implementation (https://github.com/documentcloud/backbone/pull/1461#ref-commit-1191640), but I might be missing something here since it doesn't seem others have come across this yet.\n\nHere's a new test case:\n\n```\n  test(\"listenTo and stopListening cleaning up references\", 1, function() {\n    var a = _.extend({}, Backbone.Events);\n    var b = _.extend({}, Backbone.Events);\n    a.listenTo(b, 'all', function(){ ok(true); });\n    b.trigger('anything');\n    a.listenTo(b, 'other', function(){ ok(false); });\n    a.stopListening(b, 'other');\n    a.stopListening(b, 'all');\n    equal(_.keys(a._listeners).length, 0);\n  });\n```\n\nAnd a [snippet](http://jsbin.com/igilum/8/edit), showing the behavior in the console output.\n\nThis isn't caught in the current test case since calling `stopListening()` without any arguments does correctly clear `_listeners` for all of that object's `_listenerId`.\n\nSo in order to clean this up correctly, we'd also have to store the event name and callback in _listeners, just like we do for _events now.  I was going to submit a patch with this change, but is there some other consideration here that I'm missing?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2618",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2618/comments",
    "title": "How can I pass the results of Collection.where to my view?",
    "created_at": "2013-06-17T17:46:36Z",
    "updated_at": "2013-06-17T19:28:31Z",
    "body": "Hi,\n\nI would like to pass the result of a Collection.where as a key of a model being passed to a view. The problem is that the result of Collection.where is an array of Models, whereas I would need some kind of toJSON call to convert the Model objects into something my View code can handle.\n\nMany thanks, Dan.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2617",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2617/comments",
    "title": "Enhancement in Collection.add regarding 'add' events sent when adding an array of models ...",
    "created_at": "2013-06-17T10:30:47Z",
    "updated_at": "2014-01-20T19:42:21Z",
    "body": "When calling `Collection.add` with an array of models, the event `'add'` is triggered as many times as there are models in the array.\n\nAs an enhancement, could it be possible to also trigger 2 extra events (in `Collection.set` implementation) :\n- `'addStarted'` event, triggered before the loop of `'add'` events sent, with an index\n- `'addEnded'` event, triggered after the loop of `'add'` events sent\n\nThis way, Views for example can create the fragment of DOM when they receive the addStarted event, add sub-fragment of DOM each time they receive an 'add' event and eventually inject this whole fragment in the document when they receive the 'addEnded' event !\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2616",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2616/comments",
    "title": "Cannot call method 'each' of undefined",
    "created_at": "2013-06-15T06:04:24Z",
    "updated_at": "2014-03-19T03:45:22Z",
    "body": "Uncaught TypeError: Cannot call method 'each' of undefined \n\ngetting this error in the console\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2615",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2615/comments",
    "title": "Backbone model fires \u201cchange\u201d event twice",
    "created_at": "2013-06-14T16:59:34Z",
    "updated_at": "2013-06-16T23:13:40Z",
    "body": "I just started working on backgridjs about a week ago and i discovered that my model is being saved twice on listening to calling \"change\" event from my view .\n\nBasically what i have is a table which user can edit, whenever the user updates the cell value i want to push it to server , for which i have defined a \"change\" method and i am calling it every time a cell is updated.\n\nThe problem i am facing is that id model is saved twice on calling \"change\" event. \n\nIf i pass wait:true for model.save, change event is fired thrice\n\nAM i doing something wrong ,or am is missing something obviuos? Any help would be greatly appreciated\n\nBelow is my code\n\n```\nvar Territory = Backbone.Model.extend({initialize: function () {\nBackbone.Model.prototype.initialize.apply(this, arguments);\nthis.on(\"change\", function (model, options) {\n  if (options && options.save === false) return;\n  model.save();\n});\n}});\n\nvar Territories = Backbone.Collection.extend({\nmodel: Territory,\nurl: \"js/bookings.json\"\n});\nvar territories = new Territories();\n\nvar columns = [{\n  name: \"bookingId\", \n  label: \"ID\", \n  editable: false, \n  cell: Backgrid.IntegerCell.extend({\norderSeparator: ''\n  })\n}, {\nname: \"bookingTime\",\nlabel: \"Time\",\ncell: \"string\" \n}, {\nname: \"bookingUser\",\nlabel: \"Name\",\ncell: \"string\" \n},{\nname: \"reserveDate\",\nlabel: \"Date\",\ncell: \"string\" \n},{\nname: \"bookingEmail\",\nlabel: \"Email\",\ncell: \"string\" \n}];\n\nvar grid = new Backgrid.Grid({\ncolumns: columns,\ncollection: territories\n\n});\n\ngrid.listenTo(territories, \"change\", function(){alert(territories.pluck('bookingId'))});\n```\n\nAny help would be greatly appreciated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2614",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2614/comments",
    "title": "Triggering same event, different callback function, fails when using object parameter and on()",
    "created_at": "2013-06-13T17:55:43Z",
    "updated_at": "2013-06-13T18:16:44Z",
    "body": "Triggering same event, different callback functions, fails when events and callbacks are added with object parameter\n\nTest: http://jsfiddle.net/codylindley/UdutX/\n\n//extend the A object with Backbone.Events methods\nvar A = _.extend({name:'A'}, Backbone.Events);\n\nvar foo = function () {\n    console.log('foo');\n};\nvar bar = function () {\n    console.log('bar');\n};\n\nA.on({\n    'log': foo,\n    'log': bar\n});\n\n/\\* This works.\nA.on('log',foo);\nA.on('log',bar);\n*/\n\nA.trigger('log'); //logs only bar, shouldn't it lock foo too?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2612",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2612/comments",
    "title": "Issue with collection.set going more than one nested level down on parse",
    "created_at": "2013-06-12T20:19:55Z",
    "updated_at": "2013-09-12T00:26:19Z",
    "body": "This is a real world issue that I just came across.\n\nLet's say you have a top level model `Job`, with an `Items` collection, which has a `SubItems` collection:\n\n``` coffee\nclass Job extends Backbone.Model\n   constructor: ->\n      @items = new Items()\n      super\n   parse: (attrs) ->\n      @items.set(attrs.items, {parse: true})\n      _.omit(attrs, 'items')\n\nclass Item extends Backbone.Model\n   constructor: ->\n     @subItems = new SubItems()\n     super\n   parse: (attrs) ->\n      @subItems.set(attrs.sub_items, {parse: true})\n      _.omit attrs, 'sub_items'\n\nclass Items extends Backbone.Collection\n   model: Item\n\nclass SubItem extends Backbone.Model\n\nclass SubItems extends Backbone.Collection\n   model: SubItem\n```\n\nIf you try doing a `job.fetch({parse: true})` with the correct data structure in place, when it runs the `parse` for the item to do the `idAttribute` identity check thing, the fact that you don't have the correct model you're setting the values on becomes an issue, because the `parse` depends that you're on the model that will ultimately be used... I feel like this is a fairly consistent (and advocated) pattern for dealing with nested models/collections... and another case where the temporary model creation causes issues.\n\nMy preferred solution would be to say that anything coming into the parse should already be in a general model format (not allowing `[{model: {id:1...}, model: {id: 2...}}]`, only `[{id:1}..., {id: 2...}]`) and going back to being able to assume that the model can be identity checked based on `idAttribute`, and if you need otherwise - doing it on `Backbone.ajax`:\n\n``` js\nBackbone.ajax = function(options) {\n  if (options.badApi) {\n    if (options.type === 'GET') {\n      var success = options.success;\n      options.success = function(resp) {\n        return success(_.pluck(resp, 'model'));\n      };\n    }\n  }\n  return Backbone.$.ajax.apply(Backbone.$, options);\n};\n```\n\n@caseywebdev - off the top of your head, do you know roughly what revision I should look at to get the `set` I'd need to get this case working in the short term... was it done this way on 0.9.9?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2610",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2610/comments",
    "title": "Is Backbone.Model.prototype.url no longer a function (1.0.0) ?",
    "created_at": "2013-06-12T19:18:38Z",
    "updated_at": "2013-06-13T12:11:54Z",
    "body": "Hi there, \n\nI just tried upgrading to 1.0.0 from 0.9.10 and didn't see anything about this in the changelog. \n\nI'm certain I hadn't overwritten the `url` property for my `Backbone.Model` instance.\n\n```\nvar m = new Backbone.Model({id: 34});\nconsole.log( m.url ); // outputs the collection url\nconsole.log( m.url() ); // Throws error - m.url is not a function\n```\n\nHas the behavior of `Backbone.Model`'s `url` property changed? My understanding is that it has always been a function.\n\nThanks :).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2608",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2608/comments",
    "title": "A new Collection.refresh method to alias fetch({ reset: true })",
    "created_at": "2013-06-11T10:18:16Z",
    "updated_at": "2013-06-11T15:26:23Z",
    "body": "I was wondering is there's a general interest in a Collection.refresh() method to function as an alias (or replacement) of Collection.fetch({ reset: true })?\n\nPassing an options object to `fetch` seems a pretty inelegant solution.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2606",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2606/comments",
    "title": "Collection.create success handler no longer receives the raw ajax response",
    "created_at": "2013-06-11T07:31:30Z",
    "updated_at": "2013-06-11T20:28:19Z",
    "body": "Prior to Backbone 1.0, when calling collection.create with a new model, you would receive three arguments in your success callback: The model, the raw response, and the options. After 1.0 I only get the model.\nSeems to be due to this change in the create method:\n\nBackbone 1.0\n          options.success = function(resp) {\n                if (options.wait)\n                    collection.add(model, options);\n                if (success)\n                    success(model, resp, options);\n            };\n\nBackbone 0.9.9:\n            options.success = function (model, resp, options) {\n                if (options.wait) collection.add(model, options);\n                if (success) success(model, resp, options);\n            };\n\nAs you can see options.success now only defines \"resp\" as an in parameter, hence it ends up sending the model as the first two arguments to the collection.create success handler.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2605",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2605/comments",
    "title": "View Initialize in master version doesn't set \"this.options\" as it used to",
    "created_at": "2013-06-10T23:45:35Z",
    "updated_at": "2013-06-11T07:27:45Z",
    "body": "The call to _configure has been removed after v1.0.0 was released. This func had the exciting task of pushing user options into this.options.\n\nThis is a breaking change and the only related comment in the master is unhelpful in that it makes not mention that \"this.options\" no longer exists\n\n// Options with special meaning _(e.g. model, collection, id, className)_ are\n// attached directly to the view.  See `viewOptions` for an exhaustive\n// list.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2601",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2601/comments",
    "title": "expose a Backbone.Object or Backbone.BaseObject to use as a base for our own object",
    "created_at": "2013-06-10T13:09:17Z",
    "updated_at": "2013-06-11T01:15:19Z",
    "body": "I think that the initalize and extend methods are pretty useful for our own object\n\nSo I usually have a BaseObject like this in my projects:\n\n``` javascript\nvar BaseObject = function(options) {\n  this.initialize.apply(this, arguments);\n};\n_.extend(BaseObject.prototype, Backbone.Events, {\n  initialize: function(options) {},\n});\n\n// The self-propagating extend function that Backbone classes use.\nBaseObject.extend = Backbone.Model.extend;\n```\n\n(I also added Events, as you can see)\n\nI know it's just a couple of trivial lines, but having it ready for using, and adding it to the documentation, would allow more people to be aware of this useful tip\n\nIf you think it's a good idea and accept pull-requests I'd be glad to help...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2599",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2599/comments",
    "title": "provide consistent X-CSRF-Token support for better Backbone security",
    "created_at": "2013-06-10T00:22:21Z",
    "updated_at": "2014-05-24T18:34:36Z",
    "body": "so there's been a bit of a hiccough with the drupal services module where they suddenly decided the RESTful services they were creating were vulnerable to X-CSRF\n\nsee conversation [here](https://drupal.org/node/2013781#new) - the security fix in drupal `services` will require modification of RESTful clients to (1) grab a token then (2) add token to the headers. Step 2 is the fiddly one as it means multiple code changes.\n\nassuming it is \"good practice\" to always include this token, should backbone encourage (and possibly facilitate) setting the headers?\n\nthe solution for me was to include this in all my backbone calls that wrap jquery.ajax:\n\n```\nbeforeSend: function (request) {                         \n  request.setRequestHeader(\"X-CSRF-Token\", xcrsftoken);  \n},                                                       \n```\n\nit would be lovely if I could simply do something like this on start-up then think no more about it, and leave it to backbone to include the header in all ajax calls:\n\n```\nbackbone.csrfToken = xcrsftoken;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2597",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2597/comments",
    "title": "missing documentation on promises",
    "created_at": "2013-06-09T12:39:39Z",
    "updated_at": "2013-09-03T16:50:44Z",
    "body": "hey :) noting this https://github.com/documentcloud/backbone/pull/2221\n\nand this deprecation notice ([here](http://api.jquery.com/jQuery.ajax/))\n\n> Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are deprecated as of jQuery 1.8. To prepare your code for their eventual removal, use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead.\n\njust wondering what the plan is?\n\nno mention of promises here: http://backbonejs.org/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2596",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2596/comments",
    "title": "Destroying a Backbone Model in a Collection",
    "created_at": "2013-06-08T19:37:34Z",
    "updated_at": "2013-06-08T19:41:34Z",
    "body": "hi everyone i got a problem in my app recently .\n\nwen i wana destroy a model i get amessage that : Cannot call method 'destroy' of undefined \n\nafter i used the methode fetch to get my informatio into my collection \nknowing that it worked wen i used a table \n\n //delete an RDV\n    deleteEntity: function (e) {\n        console.log(\"deleteEntity starts\");\n\n```\n    var that    = this;\n    var item    = $(e.currentTarget);\n    var id      = item.data(\"id\");\n\n    console.log(id);\n\n    var model   = that.collection.get(id);\n\n    console.log(model);\n\n    //destroy model\n    model.destroy();\n\n    // remove model from collection\n    that.collection.remove(model);\n\n    // search row\n    var row = that.findRow(item);\n\n    // remove row from data table\n    that.oTable.fnDeleteRow(that.oTable.fnGetPosition(row));\n\n    console.log(\"deleteEntity end\");\n},\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2594",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2594/comments",
    "title": "problem of Router#namedParam",
    "created_at": "2013-06-08T08:32:06Z",
    "updated_at": "2013-06-08T11:18:55Z",
    "body": "https://github.com/documentcloud/backbone/blob/master/backbone.js#L1221\n\n```\n var namedParam    = /(\\(\\?)?:\\w+/g;\n```\n\n'(?' has been replaced to '(\\?' by [escapeRegExp](https://github.com/documentcloud/backbone/blob/master/backbone.js#L1223),So I think this line can change to\n\n```\n var namedParam    = /:\\w+/g;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2593",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2593/comments",
    "title": "Event memory leaking",
    "created_at": "2013-06-08T00:37:39Z",
    "updated_at": "2013-06-08T14:18:23Z",
    "body": "It seems that the `_events` array is leaking, every change to my collection is adding more and more to the `_events` array, with the same model, over and over. \n\nI'm using Backbone along with AngularJS, I populate the collection using AJAX once, and most I do is to change the  'selected' attribute of some models, according to the UI state (like a toggle) and their ids. \n\nI'm also using jQuery 1.10.1 on the page. I have tried to see how (and when) the events are pushed to the array, but the `on` method on `Backbone.Events` is being called only once... \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2592",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2592/comments",
    "title": "fetching model from api - id is not definded",
    "created_at": "2013-06-06T11:16:22Z",
    "updated_at": "2013-06-06T14:18:11Z",
    "body": "When I save the model using `task.save();` a post request is sent to the api, as expected. The api returns the following json: `{\"title\":\"My title\",\"completed\":0,\"user_id\":\"1\",\"tasks_list_id\":\"1\",\"updated_at\":\"2013-06-06 11:15:02\",\"created_at\":\"2013-06-06 11:15:02\",\"id\":34}`\nBut the console shows an error: id is not defined. As you can see the id is in the json, but at the very end.\n\nIt should still work.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2588",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2588/comments",
    "title": "history.navigate() breaks anchors (inner links) in Opera",
    "created_at": "2013-06-05T06:35:49Z",
    "updated_at": "2013-07-29T05:18:02Z",
    "body": "after navigating anchors link to the wrong page.\nexample site: http://szelga.bitbucket.org/ , source: https://bitbucket.org/szelga/szelga.bitbucket.org . to repeat the bug, click on \"Page 2\" link and then back to \"Main page\".\nall the logic is in js/script.js file, backbone history starts with\n\n``` js\nBackbone.history.start({pushState: true, hashChange: false});\n```\n\nBackbone.js v 1.0.0, Underscore.js v 1.4.4 (downloaded from official sites).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2586",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2586/comments",
    "title": "Missing request method by sync events",
    "created_at": "2013-06-04T23:38:23Z",
    "updated_at": "2013-10-21T15:14:18Z",
    "body": "By sync events: request, sync, error we cannot identify which method is currently called, or what was sent to the server. I think the method (create, update, patch, read, delete) can be an important thing. For example if you want to generate error messages automatically you can create a SyncStatusLabel which listens to these events and displays the current status of the request: pending, error / success... To display the proper status message this label should know what is the method of the message...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2584",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2584/comments",
    "title": "Add sync error event to model",
    "created_at": "2013-06-04T15:48:46Z",
    "updated_at": "2013-06-04T16:38:30Z",
    "body": "I think in many cases it could be useful to have such an event by default... For example if I want to display error messages is something went wrong by saving the data on the server...\n\nNow I only have request event to set pending message and sync event to set success message. For the error messages I have to do a workaround...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2582",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2582/comments",
    "title": "No events section by classes in the documentation",
    "created_at": "2013-06-02T15:19:17Z",
    "updated_at": "2013-06-02T15:22:29Z",
    "body": "I suggest to add an \"events\" section to the documentation by every class, so you won't have to collect from the code or the documentation where an event is triggered...\n\nFor example:\n\n```\nModel\n    events\n        change\n        change:attr\n        request\n        sync\n        destroy\n        invalid\n        ...\nCollection\n    events\n        change\n        change:attr\n        add\n        remove\n        reset\n        sort\n        request\n        sync\n        ...\n...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2580",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2580/comments",
    "title": "Options no longer accessible in Views",
    "created_at": "2013-05-31T14:50:09Z",
    "updated_at": "2013-05-31T15:21:32Z",
    "body": "I recently upgraded from 0.9.9 to 1.0. \n\nIt seems that in version 1.0, the options object on a view is no longer existing.\n\nAny code within a view that tries to access this.options.property always fails and this.options is always undefined.\n\nI am using Underscore 1.4.3 and also tried 1.4.4 with no difference. Rolling back to Backbone 0.9.9 makes everything work again.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2578",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2578/comments",
    "title": "Collection.fetch : url option is inconsistent in 0.9.2 and 1.0 ?",
    "created_at": "2013-05-31T08:42:34Z",
    "updated_at": "2013-10-11T03:54:06Z",
    "body": "Hello,\n\nI have done an upgrade of my application from 0.9.2 to 1.0.\nBefore this upgrade i could use collection.fetch({url : anUrl}) to change the url of the collection  only for this request.\n\nNow, in 1.0,  the url of the request is always good but i have a side effect : url attribute of the models, which are created by this request, is equals to the option url of the fetch.\nSo all the future requests with these models are false (even if urlRoot is defined in the model).\n\nThis comportment is normal ? \n\nHow to customize the url only for 1 request ? \n\nThanks in advance\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2577",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2577/comments",
    "title": "while in Model.set method",
    "created_at": "2013-05-31T02:02:31Z",
    "updated_at": "2015-01-04T01:45:01Z",
    "body": "http://backbonejs.org/docs/backbone.html#section-48\n\n```\nChanges can be recursively nested within \"change\" events.\n```\n\ni don't know how it be recursively nested\nCan you give me an example of it .\nlooking forward your help.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2575",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2575/comments",
    "title": "Backbonejs fetches values only when we pass asyc:false as the parameter for fetch() method",
    "created_at": "2013-05-30T16:25:11Z",
    "updated_at": "2013-06-13T08:33:31Z",
    "body": "userNames is populated only when i use users.fetch({async: false}); if i use users.fetch() i get an empty array;\n\n$(document).ready(function(){\n    var booking_model = Backbone.Model.extend({});\n\n```\nvar UserList = Backbone.Collection.extend({ \nmodel: booking_model,\nurl: 'js/bookings.json',\nparse: function(response) {return response};\n```\n\n});\n\n```\nvar users = new UserList(); //Line 26\nusers.fetch({async: false});\nvar userNames = users.pluck(\"bookingId\");\nconsole.log(userNames)\n```\n\n});\n\nMy JSON\n\n[\n        {\n            \"bookingId\": 260,\n            \"bookingSourceId\": \"Online\",\n            \"bookingTime\": \"Jan1391312: 00: 00AM\",\n            \"noOfPeople\": \"10\",\n            \"reserveDate\": \"ThuJan0200: 00: 00IST3913\",\n            \"restId\": 200,\n            \"timing_id\": 200\n        },\n        {\n            \"bookingId\": 280,\n            \"bookingTime\": \"Dec25 20121: 43: 49AM\",\n            \"noOfPeople\": \"6\",\n            \"reserveDate\": \"ThuJan2600: 00: 00IST2012\",\n            \"restId\": 220,\n            \"timing_id\": 205\n        },\n        {\n            \"bookingId\": 300,\n            \"bookingTime\": \"Dec26 20122: 12: 00AM\",\n            \"noOfPeople\": \"4\",\n            \"reserveDate\": \"FriJan2700: 00: 00IST2012\",\n            \"restId\": 260,\n            \"timing_id\": 220\n        },\n        {\n            \"bookingId\": 320,\n            \"bookingTime\": \"Dec27 20122: 14: 54AM\",\n            \"noOfPeople\": \"10\",\n            \"reserveDate\": \"SunJan2900: 00: 00IST2012\",\n            \"restId\": 260,\n            \"timing_id\": 201\n        },\n        {\n            \"bookingId\": 340,\n            \"bookingTime\": \"Dec25 20122: 35: 19AM\",\n            \"noOfPeople\": \"8\",\n            \"reserveDate\": \"TueJan2400: 00: 00IST2012\",\n            \"restId\": 220,\n            \"timing_id\": 205\n        },\n        {\n            \"bookingId\": 360,\n            \"bookingSourceId\": \"Online\",\n            \"bookingTime\": \"May30 391312: 00: 00AM\",\n            \"noOfPeople\": \"10\",\n            \"reserveDate\": \"FriMay3000: 00: 00IST3913\",\n            \"restId\": 200,\n            \"timing_id\": 200,\n            \"bookingUser\": \"hareesh\",\n            \"bookingPhoneNo\": \"9052228181\",\n            \"bookingEmail\": \"makamhareesh@gmail.com\"\n        }\n\n```\n]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2574",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2574/comments",
    "title": "My fault or not ?",
    "created_at": "2013-05-30T01:56:15Z",
    "updated_at": "2013-05-30T13:13:35Z",
    "body": "See my question here:\n\nhttp://stackoverflow.com/questions/16826719/the-other-additional-variable-in-the-view-of-backbone\n\nNeed your help !!!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2571",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2571/comments",
    "title": "Add 'valid' event (triggered when form goes from invalid to valid state)",
    "created_at": "2013-05-29T13:43:19Z",
    "updated_at": "2014-03-10T23:34:12Z",
    "body": "Currently there's a 'invalid' event, would be nice to have also 'valid' event triggered when forms goes into 'valid' state from 'invalid'.\n\nWithout such event it's not easy to be notified that models entered a valid state.\n\n**Use case**: when building form it's handy to listen on 'invalid' event to show errors and on 'valid' to clear it. \n\nChanges required (see unshifted line of code).\n\n``` JavaScript\n  Backbone.Model.prototype._validate = function(attrs, options) {\n    if (!options.validate || !this.validate) return true;\n    attrs = _.extend({}, this.attributes, attrs);\n    var error = this.validationError = this.validate(attrs, options) || null;\nif (!error) this.trigger('valid', this, options);    \n    if (!error) return true;\n    this.trigger('invalid', this, error, _.extend(options || {}, {validationError: error}));\n    return false;\n  }\n```\n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2570",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2570/comments",
    "title": "IE form elements under the same name as the variable name",
    "created_at": "2013-05-29T06:52:25Z",
    "updated_at": "2013-05-29T07:39:31Z",
    "body": "In the template, IE form element's name under the same name with a variable, the variable will affect the normal.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2569",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2569/comments",
    "title": "Add repository field to package.json",
    "created_at": "2013-05-29T01:48:34Z",
    "updated_at": "2013-05-29T02:53:18Z",
    "body": "NPM complains that the repository field is not set in the package.json:\n\n```\nnpm WARN package.json backbone@1.0.0 No repository field.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2568",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2568/comments",
    "title": "can not add a new model with an id equals to an existing cid in the collection",
    "created_at": "2013-05-28T17:05:31Z",
    "updated_at": "2013-12-13T19:12:58Z",
    "body": "``` javascript\n//create a collection\nvar col =  new Backbone.Collection(); \n//I create the first model of my application\ncol.add({\n    id: 'a1',\n    x: 1\n});\nconsole.log( col );\n//this is the first model created in my application so the new model's cid is \"c1\".\n\n//now I'm trying to add a new model in the same collection with \"c1\" as id\ncol.add({\n    id: 'c1',\n    x: 2\n}); \n\nconsole.log( col );\n//fail: first model updated instead of add a new one\n```\n\ncol.add( ... ) updates the first model instead of create a new one because the new model's ID is the same than the first model's CID in the same collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2566",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2566/comments",
    "title": "Inconsistent fragment coding  across browsers",
    "created_at": "2013-05-28T14:14:56Z",
    "updated_at": "2013-10-10T20:47:16Z",
    "body": "Using: Backbone 1.0.0\nFirefox: Latest stable version (and plenty before)\nRelated Issues: https://github.com/documentcloud/backbone/pull/967\nhttps://github.com/documentcloud/backbone/pull/1426\n\nIn the related issues it was decided that Backbone should handle fragment coding inconstantly causing fundamentally different code execution across browsers and I cannot fathom why.\n\nFor example in my app when a search term is typed in Chrome, Opera, iOS etc:\n\n`search/searching for something`\n\nThe search path `search/*` is executed once and does not re-execute.\n\nIn Firefox however:\n\n`search/searching for something`\n\nOnce the first spacebar has been pressed every single character afterwards causes a re-execution of the route. Causing in my app the entire layout to be re-rendered each time and the search looses focus on each keystroke.\n\nWhy it was decided to encode only in Firefox, and decode in every other browser I cannot understand?\n\nThe same code execution across browsers can be achieved by adding back `decodeURIComponent` to `match[1]` in this odd function (it was removed).\n\n``` javascript\n// Gets the true hash value. Cannot use location.hash directly due to bug\n// in Firefox where location.hash will always be decoded.\ngetHash: function(window) {\n  var match = (window || this).location.href.match(/#(.*)$/);\n  return match ? match[1] : '';\n},\n```\n\nAlso the comment explains the exact opposite of the issue on firefox - in firefox the space character IS encoded and thus needs to be decoded to create consistency with other browsers.\n\nIs someone able to explain why this was done?\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2564",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2564/comments",
    "title": "Allow events object to bind to elements outside of views root element",
    "created_at": "2013-05-28T10:27:44Z",
    "updated_at": "2013-05-29T09:35:22Z",
    "body": "Hi,\n\nI often find myself in situations, where an event that occurs outside an elements boundaries, has relevance for a backbone view, especially when doing complex operations with a mouse. \n\nLet me give an example, I want a toolbar to appear when I shake the mouse, but it should appear if I shake the mouse anywhere in the document, to get this to work properly now i need to make my own bindings in the initialize function to the correct DOM object, I would love the ability  to bind events in the event object that occur on elements outside the views 'el'.\n\nI suggest using some keyword as DOCUMENT, and allowing to use css selectors after that to be more specific.\n\n``` javascript\nevents {\n//this would fire every time the mousemove event fires on the document\n \"mousemove DOCUMENT\" : \"show\",\n//this would fire every time the mousemove event fires on any .body element in the DOCUMENT\n \"mousemove DOCUMENT .body\" : \"show\"\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2563",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2563/comments",
    "title": "\" this.$el.height() \" always return 0. why ? ",
    "created_at": "2013-05-27T14:33:03Z",
    "updated_at": "2013-05-29T12:44:44Z",
    "body": "Hi,\nI have a Backbone view and I try to retrieve the height of the el element after applying the view template like this \n\n``` javascript\nrender: function () {\n  this.$el.html(this.template);\n  console.log(this.$el.height());\n  // It always returns 0 \n}\n```\n\nWhy the result is always 0 ? \n\nThanks in advance\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2562",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2562/comments",
    "title": "Error as a result of object.listenTo on a null/undefined 'other' is difficult to debug.",
    "created_at": "2013-05-27T06:13:24Z",
    "updated_at": "2013-06-02T03:54:43Z",
    "body": "When you accidentally pass in a null/undefined reference to the Events.listenTo method you'll get a `Cannot read property '_listenerId' of null` error at some point in the future, unfortunately this gives you very little to work with when tracking down the actual cause. \n\nIt would be great if this could be improved a little. For example, either throw an error or ignore any calls to listenTo with a null/undefined 'other'. Alternatively throw out a little more info when the error state is detected... thoughts? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2561",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2561/comments",
    "title": "add use of __super__ to documentation",
    "created_at": "2013-05-26T22:10:32Z",
    "updated_at": "2013-05-27T05:52:22Z",
    "body": "In this article I found out about **super**\n\nhttp://pivotallabs.com/a-convenient-super-method-for-backbone-js/\n\nbut on he documentation it doesn' t say anything about it\n\n> Brief aside on super: JavaScript does not provide a simple way to call super \u2014 the \n> function of the same name defined higher on the prototype chain. If you override a \n> core function like set, or save, and you want to invoke the parent object's \n> implementation, you'll have to explicitly call it, along these lines: \n\nA mention should be added in the docs.\n\nMore over it would be nice if there could be some object._super method built in in backbone, like the one in the article I cited above\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2558",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2558/comments",
    "title": "Listening to custom events by `namespace` does not work",
    "created_at": "2013-05-23T17:00:25Z",
    "updated_at": "2013-05-23T18:56:56Z",
    "body": "I thought that this used to work, but it doesn't seem to any more.\nIf I set up a custom event like `session:login_success`, I thought it would trigger listeners bound either to `session:login_success` or to `session` (the \"namespace\"). This is not the case. Is this a bug?\n\nCode example:\n\n```\n  @listenTo @app, 'session', -> console.log \".listenTo `session` triggered\"\n  @listenTo @app, 'session:login_success', -> console.log \".listenTo `session:login_success` triggered\"\n  @app.on 'session', -> console.log \".on `session` triggered\"\n  @app.on 'session:login_success', -> console.log \".on `session:login_success` triggered\"\n```\n\nIf I trigger 'session:login_success' on the `@app`, only the two specific events fire, not the namespace one.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2556",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2556/comments",
    "title": "How to contribute to docs?",
    "created_at": "2013-05-22T22:19:50Z",
    "updated_at": "2013-05-23T16:01:03Z",
    "body": "I'd like to add some things to the docs that have brought me trouble: lack of examples and details on some method's parameters, specifically.\n\nFor example, I just found out that Collection.remove can work like\n\n`col.remove([id1, id2, id3, id4])` or like `col.remove(new Model(col.at(2).toJSON()))`, but not like `col.remove(col.at(2).toJSON())` (that is, it can take ids, or Models, but not attribute hashes).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2555",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2555/comments",
    "title": "Backbone mess up location.hash even if it's asked not to",
    "created_at": "2013-05-22T11:15:32Z",
    "updated_at": "2013-05-28T12:32:27Z",
    "body": "I want to stop backbone from automatically redirecting me from http://localhost:3000/#awesomestuff to http://localhost:3000/awesomestuff\n\nI'm using pushState: true\nI want to use hashes for my own unrelated to backbone purposes.\n\nThat's all. Is there a way to do that?\n\n{pushState: true, hashChange: false} didn't work.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2554",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2554/comments",
    "title": "order of routes",
    "created_at": "2013-05-22T05:06:55Z",
    "updated_at": "2013-05-29T20:55:21Z",
    "body": "I've found that there's a very important difference when you define the routes using the routes hash or manually adding them using the route method.\n\nusing the hash the routes seem to be checked in the order entered in the hash (even though as far as I know javascript makes no assumption about the order of the properties of a hash)\n\nbut if you add them using the route method, they seem to be checked in iverse order (last entered routes are checked first.\n\nto be clear, this is the code using the hash:\n\n``` javascript\n    routes: {\n      'hello/*rest' : 'helloRoute',\n      '*any'        : 'catchAll'\n    },\n```\n\nand this is the equivalent calling route.route method (note the order, of course)\n\n``` javascript\n      this.route('*any',        'catchAll');\n      this.route('hello/*rest', 'helloRoute');\n```\n\nI wonder if this is a design decision, an anomally or a bug, and which would be the correct way to handle the route method (I'm very tempted to create an addRoute method, with a temporary hash, and then reverse and add them from a addAllRoutes method...)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2553",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2553/comments",
    "title": "strange issue replacing object.on with object.listenTo",
    "created_at": "2013-05-22T05:00:29Z",
    "updated_at": "2013-05-25T19:54:38Z",
    "body": "I'm trying to replace every call to object.on with object.listenTo and I faced a strange issue in which the event is not being listened at all..\n\nI detailed the issue at stackoverflow, but so far nobody could give me a hint:\n\nhttp://stackoverflow.com/questions/16662277/backbone-listento-not-working\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2552",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2552/comments",
    "title": "sync event not being triggered on collection.sync",
    "created_at": "2013-05-21T21:08:58Z",
    "updated_at": "2013-05-22T15:45:12Z",
    "body": "I created a method on my collection that looks like this:\n\n``` javascript\nsaveChanges: function() {\n    var options = {\n        contentType: \"application/json\",\n        data: JSON.stringify({ /* my data */ })\n    };\n    return this.sync(\"update\", this, options);\n}\n```\n\nI get a `request` event when it starts, but I don't get the `sync` event when it's finished (nor an `error` event).\n\nPer the `Backbone.sync` documentation, I should be getting that.\n\n``` text\nWhenever a model or collection begins a sync with the server, a \"request\" event is emitted. If the request completes successfully you'll get a \"sync\" event, and an \"error\" event if not.\n```\n\nI looked through the source and the only places I see sync being triggered is on a model fetch/save/destroy and a collection fetch.\n\nIs the documentation on this incorrect, or could I be doing something wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2549",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2549/comments",
    "title": "validationAttr",
    "created_at": "2013-05-21T09:21:14Z",
    "updated_at": "2013-05-22T03:27:09Z",
    "body": "Can we have a `validationAttr` like the `validationError` cause we may want to know the Attr that occurs the error.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2548",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2548/comments",
    "title": "Allow more than one route to be declared through Router.route",
    "created_at": "2013-05-20T20:01:59Z",
    "updated_at": "2013-06-08T19:46:31Z",
    "body": "Hi, i find myself having to fetch the available routes from DB, i think it would be great if the Router.route method could handle a dictionary (exactly the same as the constructor for the router does for the route parameter), and it would route every route in that dictionary.\n\nCode:\n\n``` javascript\ndictWithRoutes = {\n\"route1\": \"methodRoute1\"\n, \"route2\": \"methodRoute2\"\n, \"route3\": \"methodRoute3\"\n}; \n\nRouter.route(dictWithRoutes); \n```\n\nWhat do you think about this enhancement?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2546",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2546/comments",
    "title": "Views listen to the same model, both use contenteditable elements",
    "created_at": "2013-05-20T08:28:06Z",
    "updated_at": "2013-07-26T06:38:38Z",
    "body": "In my case, there are two views both listening and editing the data in the model.\nI'm not sure if this the right way to use Backbone here, if not please close this :(\nSo both views is listening to `change:data` for changes and will update it self.\n\nIn each view there's a `.data` element which is `contenteditable`.\nWell, if a view respose to a change made by itself, then there would be a dead loop.\nI tried using `document.activeElement` to find out where I'm editing, but saw limitations.\nThen here's one I tried later. I passed the name of the view I'm editing to `model.set`,\nand verify it at the `render` method to see if that's produce by it self.\nFake code like:\n\n``` coffee\n\nclass ViewA\n  events:\n    \"blur .data\": \"update\"\n\n  render: (model, value, options) ->\n    if (not options?) or (options.triggerBy isnt 'A')\n      @$('.data').val @.model.get('data')\n\n  update: (event) ->\n    data = \"something got from a contenteditable of view\"\n    @model.set \"title\", data, triggerBy: 'A'\n\nclass ViewB\n  events:\n    \"blur .data\": \"update\"\n\n  render: (model, value, options) ->\n    if (not options?) or (options.triggerBy isnt 'B')\n      @$('.data').val @.model.get('data')\n\n  update: (event) ->\n    data = \"something got from a contenteditable of view\"\n    @model.set \"title\", data, triggerBy: 'B'\n```\n\nAnd comes another problem, there are events triggered without a `triggerBy` attribute.\nFor example, events triggered by Ajax, and will not be recognized.\nAnd I even have no idea about adding `silent: yes` to mute that event.\nSo this is not an available solution either.\n\nTo such a case, what's the solution in a Backbone way?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2545",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2545/comments",
    "title": "Backbone.js adding result into the model ",
    "created_at": "2013-05-19T13:35:35Z",
    "updated_at": "2013-05-19T15:37:34Z",
    "body": "I have a model, which has some JSON data say :\n\n{ \"userData\":{\n    \"name\": \"myName\",\n    \"userId\": \"newUserName\",\n    \"address\" : \"newAddress\" \n  }\n}\n\nIf I perform model.save to a webservice call and it is supposed to return a success in the following form :\n\n{ \"result\" : {\n    \"operation\" : \"success\"\n  }\n}\n\nit just adds this response to the original JSON model. So the JSON data in model becomes \n\n{ \"userData\":{\n    \"name\": \"myName\",\n    \"userId\": \"newUserName\",\n    \"address\" : \"newAddress\" \n  },\n  \"result\" : {\n    \"operation\" : \"success\"\n  }\n}\n\nwhich I think shouldn't be the case. Right?\n\nAny Solutions ??\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2544",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2544/comments",
    "title": "Backbone restful events with http method details",
    "created_at": "2013-05-18T09:25:08Z",
    "updated_at": "2013-06-12T13:51:10Z",
    "body": "Something seems strange to me in Backbone restful events: `model.delete` will result in a `destroy` + `sync` event. Why this is not the same for every http method? \n\nCould `model.save` results in `create` or `update` + `sync` and `model.fetch` in `read` + `sync`?\n\nI've been forced to override Backbone `fetch` and `save` method to emulate this sort of thing in the past.\n\nThanks a lot.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2543",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2543/comments",
    "title": "Backbone.js BasicAuth for IE 9",
    "created_at": "2013-05-17T12:49:40Z",
    "updated_at": "2013-05-17T13:14:55Z",
    "body": "I am doing BasicAuth with Backbone.js. I have added this js file backbone.basicauth.js in order to be able to use the BasicAuth.\n\nIn Chrome, Firefox and Safari the call works fine, first Backbone is sending OPTIONS request method and then GET request method and I am getting the response that I need.\n\nIn IE 9 there is no OPTIONS request method and in the GET request method in the Request Heders there is no 'Authorization: Basic YUBtay5tazoxMjM='\n\nI am using js libraries xdr.js and base64.js that should make it work in IE but with no result.\n\nI know that there is not CORS support in IE 9 that is causing the problem.\n\nThe web application works fine in IE 10.\n\nThe API server is in php.\n\nHad anyone had this kind of problem with IE?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2542",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2542/comments",
    "title": "CORS sync sends OPTIONS request instead of POST",
    "created_at": "2013-05-17T00:59:58Z",
    "updated_at": "2016-01-31T23:00:33Z",
    "body": "I'm trying to use the model.save() with a rest service on another subdomain. I got the following request headers which are far from my expectations:\n\n```\nOPTIONS /user HTTP/1.1\nHost: not.public\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:20.0) Gecko/20100101 Firefox/20.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nOrigin: http://not.public\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: content-type\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n```\n\nHow to fix this?\n\nOfc. my REST server responds 404 not found for an OPTIONS call...\n\nTo avoid unwanted questions: the server is ok, it handles REST calls and CORS calls well, tested with $.ajax and a REST interface tester application too.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2541",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2541/comments",
    "title": "IE7 checkUrl race condition with url conversion",
    "created_at": "2013-05-16T14:26:25Z",
    "updated_at": "2013-10-10T13:26:45Z",
    "body": "Conditions: Win XP, IE7. Reproduced often.\nIn router we have\n\n```\nroutes:\n  \"\": \"index\"\n  \"list/items/:id\": \"items\"\n```\n\nUser enters url http://something.com/list/items/5 and **index** action called before **items**.\n\nBehaviour:\nUser enters url http://something.com/list/items/5. Url replaced to http://something.com/list/items/5#, and then **index** action executed. \nThen url converts to http://something.com/#list/items/5 and **items** action executed.\n\nAfter investigation I found that **checkUrl** method of History called before url conversion from pushState-enabled format to hash based. Look at History.start method. First if oldIE insert iframe and navigate to current fragment.\n\n```\n if (oldIE && this._wantsHashChange) {\n    this.iframe = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n    this.navigate(fragment);\n  }\n```\n\nWhich causes url transform to http://something.com/list/items/5#. Then because oldIE and need hash change we starting **checkUrl** timer with 50ms interval.\n\n```\n  // Depending on whether we're using pushState or hashes, and whether\n  // 'onhashchange' is supported, determine how we check the URL state.\n  if (this._hasPushState) {\n    Backbone.$(window).on('popstate', this.checkUrl);\n  } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n    Backbone.$(window).on('hashchange', this.checkUrl);\n  } else if (this._wantsHashChange) {\n    this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n  }\n```\n\nAnd only after that converting of 'pushState'-enabled format to hash based. \n\n```\n  // Determine if we need to change the base url, for a pushState link\n  // opened by a non-pushState browser.\n  this.fragment = fragment;\n  var loc = this.location;\n  var atRoot = loc.pathname.replace(/[^\\/]$/, '$&/') === this.root;\n\n  // If we've started off with a route from a `pushState`-enabled browser,\n  // but we're currently in a browser that doesn't support it...\n  if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {\n    this.fragment = this.getFragment(null, true);\n    this.location.replace(this.root + this.location.search + '#' + this.fragment);\n    // Return immediately as browser will do redirect to new url\n    return true;\n\n  // Or if we've started out with a hash-based route, but we're currently\n  // in a browser where it could be `pushState`-based instead...\n  }\n```\n\nSo **checkUrl** sometimes executed before url convertion. May be possible fix is convert url to hash based format before starting **checkUrl** timer.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2540",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2540/comments",
    "title": "Lost input focus after view re-render",
    "created_at": "2013-05-15T20:16:55Z",
    "updated_at": "2013-05-17T13:18:28Z",
    "body": "I have a form with several input fields. When changing values in inputs, view with form is re-rendering. Here is some piece of Backbone.View code:\n\n``` coffee\ninitialize: ->\n      @model.on('change', @render, @)\n\nevents:\n      'change input': 'change'\n\nchange: (event) ->\n      ctrl  = @$(event.currentTarget)\n      @model.set(ctrl.data('name'), ctrl.val())\n\nrender: ->\n      @$el.html(@template(@model.toJSON()))\n```\n\nBut re-rendering occurs also when I press tab key to set focus in next input and focus is lost. Is it possible to solve this problem with a little portion of code?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2537",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2537/comments",
    "title": "Suggestion about extend function",
    "created_at": "2013-05-15T03:46:38Z",
    "updated_at": "2013-05-21T08:26:50Z",
    "body": "I think many people want to use the extend function of backbone classes on their own classes, because it's a great work. Therefore I suggest that you should add the extend function to the public interface of Backbone, or add a class which can anybody extend. For example:\n\n```\nBackbone.Class = function () {\n};\nBackbone.Class.extend = Backbone.Model.extend;\nvar My = Backbone.Class.extend(instanceProps, staticProps);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2535",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2535/comments",
    "title": "Model.set attrs is instance of model",
    "created_at": "2013-05-14T16:34:17Z",
    "updated_at": "2013-06-05T15:42:48Z",
    "body": "Hello,\n\nI am in the process of upgrading the project I am working on from 0.9.2 to 1.0.0. I noticed a difference between 0.9.2 and 0.9.9 that was not documented:\n\n0.9.2:\n\n```\nset: function (key, value, options) {\n    ...\n    // Extract attributes and options.\n    options || (options = {});\n    if (!attrs) return this;\n    if (attrs instanceof Model) attrs = attrs.attributes;\n    if (options.unset) for (attr in attrs) attrs[attr] = void 0;\n    ...\n}\n```\n\nSpecifically:\n\n```\nif (attrs instanceof Model) attrs = attrs.attributes; \n```\n\nThis conditional behavior does not appear to be present in 0.9.9 and later.\nJust to be sure, was the removal of this line (and thus the removal of the ability to pass a model into the set method) intended? If so, can you please update the change log to reflect this?\n\nI could not find any issues or documentation about this, so I apologize if this had already been addressed.\n\nThanks for the help.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2534",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2534/comments",
    "title": "multiple fetch generating inconsistant behavior",
    "created_at": "2013-05-14T15:08:39Z",
    "updated_at": "2013-05-15T18:00:29Z",
    "body": "Hello,\n\nI'm trying to fetch some static collections at the initial loading of my page (bootstrap data).  Those static data are coming from a remote REST api server.\n\nWhen i refresh multiple time my browser i've noticed that the content of the collections are messed up.  For example the content of `documentTemplates` is placed in the `contactTypes`...\n\nHow can i fix this issue?\n\nHere is my loading step \n\n``` javascript\n$.when(\n    App.StaticCollections.contactTypes.fetch({\n        async: false\n    }),\n    App.StaticCollections.documentTemplates.fetch({\n        async: false\n    }),\n    App.StaticCollections.invoiceStatuses.fetch({\n        async: false\n    }),\n    App.StaticCollections.estimateStatuses.fetch({\n        async: false\n    }),\n    App.StaticCollections.currencies.fetch({\n        async: false\n    })\n).done(function() {\n    App.Router = new MainRouter();\n    Backbone.history.start({\n        pushState: false,\n        root: App.Root\n    });\n});\n```\n\nI have tried with and without the async flag and always get the same behaviour.\n\nHere is an example of one of the model and it's collection\n\n\"ContactType\" Model\n\n``` javascript\ndefine([\n\n    'backbone'],\n\n    function (Backbone) {\n\n    var ContactType = Backbone.Model.extend({\n\n        idAttribute: \"_id\",\n\n        initialize: function() {\n            var that = this;\n            // Hook into jquery\n            // Use withCredentials to send the server cookies\n            // The server must allow this through response headers\n            $.ajaxPrefilter( function( options, originalOptions, jqXHR ) {\n                options.crossDomain ={\n                    crossDomain: true\n                };\n                options.xhrFields = {\n                    withCredentials: true\n                };\n            });\n        },\n        parse: function (response) {\n            if (response.data) {\n                console.log('array');\n                return response.data;\n            }\n            return response;\n        }\n    });\n\n    return ContactType;\n});\n```\n\n\"ContactTypes\" collection\n\n``` javascript\ndefine([\n\n    'backbone',\n    'models/ContactType'],\n\n    function (Backbone, ContactTypeModel) {\n\n    var ContactTypes = Backbone.Collection.extend({\n\n        url: \"http://localhost:3001/api/contacttypes\",\n\n        model: ContactTypeModel,\n\n        initialize: function(models, args) {\n            var that = this;\n            // Hook into jquery\n            // Use withCredentials to send the server cookies\n            // The server must allow this through response headers\n            $.ajaxPrefilter( function( options, originalOptions, jqXHR ) {\n                options.crossDomain ={\n                    crossDomain: true\n                };\n                options.xhrFields = {\n                    withCredentials: true\n                };\n            });\n        },\n\n        parse: function (response) {\n            return response;\n        }\n\n    });\n    return ContactTypes;\n});\n```\n\nThe other models and collections are following the same pattern.\n\nThanks in advance for your help.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2533",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2533/comments",
    "title": "`Collection#fetch` url option overrides `Model#url`",
    "created_at": "2013-05-14T15:02:30Z",
    "updated_at": "2014-02-11T18:03:38Z",
    "body": "Calling `Collection#fetch` with a url option passed in passes that option to the Model and overrides my extension of Model#url with the string value I pass into fetch.\n\nMy situation is as follows:\n\n```\nclass Coll extends Backbone.Collection\n    fetch: (opts) ->\n        unless opts.option\n            opts = _.clone(opts)\n            opts.url = @url + 'some url'\n        super\n\nclass Mod extends Backbone.Model\n    url: () =>\n        #An specific way to calculate the URL\n```\n\nUnfortunately, if I fetch the parent collection it override's my Model's url method because in the model constructor it does the following (a good thing in other cases, except I didn't want the fetch options to be passed to the model, it doesn't make sense):\n\n```\n  _.extend(this, _.pick(options, modelOptions));\n```\n\nThe easy fix for me is to add a constructor for `Mod` that just calls `super(attrs, _.omit(opts, 'url')`, but that's a change that I'll have to document for users of the library I'm writing.\n\nI'm not really sure if this is a bug, but it certainly feels like one.  Perhaps omitting `url` from `options` in Collection#fetch's success method `collection[method](resp, options);` would fix the problem. I really am not sure what the most universal solution would be, but I was surprised by the behavior.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2532",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2532/comments",
    "title": "Router: Query Parameters are being ignored when using pushState but not when using hashChange.",
    "created_at": "2013-05-14T14:06:06Z",
    "updated_at": "2014-08-13T18:56:21Z",
    "body": "Since Backbone 1.0.0 the router ignores all the query parameters sent as ?something=something when using the pushState mode, but when using the hashChange mode (on pushState incompatible browsers, such as IE 9) the query strings are not ignored and when they are sent, they won't match any route.\n\neg.\nroute: 'books/backbone'\n\nurl: '#books/backbone?utm_source=twitter'\n\nThe url does not match the route because it has query strings in it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2531",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2531/comments",
    "title": "Different behaviour hasChanged between .9 and 1.0 version",
    "created_at": "2013-05-14T12:20:17Z",
    "updated_at": "2013-10-10T13:32:17Z",
    "body": "Hi, i'm using Backbone.js 1.0.0, \nwhen i set an attribute, a change event listener is fired on a collection, no problem till now.\nWhen i call the method hasChanged([attribute]) on all the element of the collection ( inside the event handler) multiple time, hasChanged return true also for elements already \"fired\".\nBasically, it not forget the changed state.\n\nFor example if you view this example:\nhttp://jsfiddle.net/Kf3SS/\nwith the 0.9 version there aren't problem, but if you change to the latest 1.0.0 it not work.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2530",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2530/comments",
    "title": "Models instantiated during Collection creation have faulty .url properties",
    "created_at": "2013-05-13T23:41:11Z",
    "updated_at": "2013-05-14T17:40:38Z",
    "body": "It seems that collection constructors, when receiving both an array of models and a `url` property in the options, overwrite the models' `url` property with the string from the options:\n\n``` javascript\nvar c = new Backbone.Collection([{ id: \"foo\" }], { url: '/models/foobar' });\nc.at(0).url; // \"/models/foobar\" - note: string not method\n```\n\nBy contrast, initializing the collection with an empty model array and the `url` option, then adding models, seems to work as expected:\n\n``` javascript\nvar c = new Backbone.Collection([], { url: '/models/foobar' });\nc.add({ id: \"foo\" });\nc.at(0).url(); // \"/models/foobar/foo\"\n```\n\nPassing in `urlRoot` instead of `url` seems to work correctly, as it's set directly on the model, but this is undocumented behavior:\n\n``` javascript\nvar c = new Backbone.Collection([{ id: \"foo\" }], { urlRoot: '/models/foobar' });\nc.at(0).url(); // \"/models/foobar/foo\" - note: method\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2529",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2529/comments",
    "title": "fetch/save error event",
    "created_at": "2013-05-13T15:57:27Z",
    "updated_at": "2013-05-13T16:16:58Z",
    "body": "Hi guys,\n\nWe already have `sync` event.\nHow about implementing `error` event on `collection`/`model` `fetch`/`save`?\n\nBecause for catching the request errors I need all time create some `deferred` links to the request object or put the callbacks. The event would be the best solution in this case. I hope not only for me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2528",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2528/comments",
    "title": "Model.get returns by reference",
    "created_at": "2013-05-10T16:23:26Z",
    "updated_at": "2013-06-25T16:13:19Z",
    "body": "## Problem\n\nWhen using `Model.get()` on a property which is an object, a direct reference is returned. This means changing the properties of the object also changes the data in the Model. Of course, this is how Javascript works.\n\nHowever, this means Model values can be changed without calling `Model.set()`, which doesn't seem like the behaviour that would be expected when dealing with public methods to access private data.\n\n``` javascript\nvar myModel = new Backbone.Model({\n    myObject: {\n        valueOne: 'one',\n        valueTwo: 'two'\n    }\n});\n\nvar byReference = myModel.get('myObject');\nalert(byReference);\n// Object {valueOne: \"one\", valueTwo: \"two\"}\n\nbyReference['valueOne'] = 'zero';\nbyReference['valueTwo'] = 'zero';\nalert(byReference);\n// Object {valueOne: \"zero\", valueTwo: \"zero\"}\nalert(myModel.get('myObject'));\n// Object {valueOne: \"zero\", valueTwo: \"zero\"}\n```\n## Question\n\nShould `Model.get()` return by value instead? Underscore's `_.clone()` could be used, but I understand this could affect speed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2527",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2527/comments",
    "title": "add link to super class",
    "created_at": "2013-05-10T08:27:21Z",
    "updated_at": "2014-08-01T00:08:38Z",
    "body": "Add some special link for method of super class\nfor example \"this._super\" and if you need call super class method your just simply do\n\nvar Note = Backbone.Model.extend({\n  set: function(attributes, options) {\n    this._super.apply(this, arguments);\n    ...\n  }\n});\n\ninstead of \nBackbone.Model.prototype.set.apply(this, arguments);\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2526",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2526/comments",
    "title": "Provide \"State\" Mixin",
    "created_at": "2013-05-09T15:31:48Z",
    "updated_at": "2013-08-12T16:03:00Z",
    "body": "I often find myself wanting the basic functionality of Model (setting and getting attributes on an object and being notified of those changes via events) without having a server component. This functionality is useful for any part of an app that stores state\u2014not just the things that need to be persisted beyond the life of the page. So I think it would be useful to expose this as a separate util (like Events). Here's an example of usage:\n\n``` coffeescript\nclass TinyWidget extends Backbone.View\n    _.extend @prototype, Backbone.Properties\n\nwidget = new TinyWidget\nwidget.on 'change:something', -> alert 'changed!'\nwidget.set prop: 'value'\n```\n\nI picked \"Properties\" to mirror \"Events,\" but I don't really care what it's named (:\n\nIf this is something that has support, I'd be willing to contribute a patch.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2524",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2524/comments",
    "title": "Can't bind listener to multiple event in event hash",
    "created_at": "2013-05-09T07:29:37Z",
    "updated_at": "2013-05-13T05:11:26Z",
    "body": "I want to bind a listener to multiple event via the events hash in a view, but doesn't work.\n\n``` javascript\nevents: {\n  \"click change .button\": \"change\"\n}\n```\n\nIt looks like backbone treat the second event type as a part of the selector, which lead the binding failed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2523",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2523/comments",
    "title": "When hash has a single quote, Firefox always sees current fragment and new fragment as different",
    "created_at": "2013-05-08T18:48:51Z",
    "updated_at": "2018-09-19T01:03:26Z",
    "body": "When the hash contains a single quote character, Firefox (version 20.0 on Ubuntu) will encode it as **%27** in the string **window.location.href**.  This variable provides the value of **current** when the function **checkUrl()** is run.  However the value of **this.fragment**  to which it is compared is got from whatever is passed to **Backbone.router.navigate()**.  If we encode the hash that is passed to this function with **encodeURIComponent()** (or even **encodeURI()**), even Firefox will not encode the single quote to **%27**.  So the variables **this.fragment** and **current** will always be different. \n\nSolution: Backbone should decode the URI components before comparing them because\n\n``` javascript\ndecodeURIComponent(\"%27\") = \"'\";\nencodeURIComponent(\"'\") = \"'\"; \n```\n\nI propose:\n\n```\n1439c1439,1441\n<       if (current === this.fragment && this.iframe) {\n\n---\n>       var decodedCurrent = decodeURIComponent(current);\n>       var decodedFragment = decodeURIComponent(this.fragment);\n>       if (decodedCurrent === decodedFragment && this.iframe) {\n1442c1444\n<       if (current === this.fragment) return false;\n\n---\n>       if (decodedCurrent === decodedFragment) return false;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2522",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2522/comments",
    "title": "Performance problem with off and stopListening. ",
    "created_at": "2013-05-08T12:13:42Z",
    "updated_at": "2013-05-09T06:28:26Z",
    "body": "I have a very big performance problem. I have a big table created with thousands views. I have a cell view because it has complex behaviour and I need that this object be a view. Each of this cell have some listenTo  to listen the events. \nSo I have a very big array _event with all events more or less 42.000 events and some of them have 42.000 callbacks. As I know that some events are only listened by the cells I off it directly by the model because is easier and quicker. \n`model.off(\"change:view\")`\nBut when a view do a stopListening(), the method off try to find the event that has this view, but this event don't exist because it was deleted by the before off. The performance problem is that the method off have to loop through 42.000 events and in some events through 42.000 context to find itself and delete it. Then we have a 42.000^42.000 loop to find nothing because this event is already deleted.\n\nShould have a way to loop the events by event, other to loop by callback and other to loop by context to do this loops efficiently. Because in this case it only loop by context and as the context don't exist the off do nothing and finish. \n\nOther problem with off is that the callback or context aren't being deleted unless this event only have one context or one callback. See the off code:\n\n``` javascript\nif (callback || context) {\n    for (j = 0, k = events.length; j < k; j++) {\n         ev = events[j];\n         if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\n                  (context && context !== ev.context)) {\n                retain.push(ev);\n         }\n    }\n}\nif (!retain.length) delete this._events[name];\n```\n\nThis loop search if an event have a callback or a context different than me, and if this don't happen then it delete the event. BUT if there are a context or callback then don't delete anything, when as I think, it must delete the context or the callback if it find it, and delete the event if the event is empty after. \n\nI want to do a fork to improve all this things, but before I would like to know your opinion. What do you think about this issue?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2520",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2520/comments",
    "title": "RangeError exception throw when many models are added to a collection",
    "created_at": "2013-05-07T15:48:39Z",
    "updated_at": "2013-09-19T20:42:45Z",
    "body": "see\n\nhttp://jsfiddle.net/gcolin/emPB7/1/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2519",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2519/comments",
    "title": "Event.stopListening() should delete obj._listenerId ",
    "created_at": "2013-05-07T10:27:59Z",
    "updated_at": "2013-05-08T04:38:33Z",
    "body": "Since we are removing listener from the `obj`, should we delete corresponding listener Id attached to `obj` at the same time ? seems no reason to let it hang around.\n\n``` javascript\nstopListening: function(obj, name, callback) {\n      //ommitted\n        if (deleteListener){\n             delete obj._listenerId;   // add this.\n             delete this._listeners[id];\n          }\n      }\n      return this;\n    }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2518",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2518/comments",
    "title": "Automatically call view.remove() when view.el is removed from DOM",
    "created_at": "2013-05-05T10:28:15Z",
    "updated_at": "2013-05-06T15:21:20Z",
    "body": "I was guessing that `view.remove()` was called on `view.el` removal from the DOM but it doesn't seem to be the case. Every view has to be disposed manually? \n\nIf it's so, when do we are supposed to call `view.remove()`? Does that mean that every view has to keep a reference to their children and remove them on cascade? \n\nIsn't there a simpler way to do this?\nThanks a lot.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2517",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2517/comments",
    "title": "Backbone is killing Zurb Foundation",
    "created_at": "2013-05-04T12:25:42Z",
    "updated_at": "2013-05-06T08:54:32Z",
    "body": "Hi,\n\nBackbone Router kills the Foundation plugins (including mobile navbar menu icon) when activated.\nIf I remove Backbone, it works fine.\n\nI have no javascript errors in the console.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2515",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2515/comments",
    "title": "Reaching a Backbone view from server side",
    "created_at": "2013-05-03T08:42:24Z",
    "updated_at": "2013-05-03T08:47:47Z",
    "body": "How to reach the backbone view from external third party website or how to handle real time payment process in a website using Backbone.js ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2513",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2513/comments",
    "title": "fetch(): first add event fired after collection has been fully populated",
    "created_at": "2013-05-02T09:42:28Z",
    "updated_at": "2013-10-10T13:33:13Z",
    "body": "My application depends on a sequential order of add events being fired as I call fetch on an empty collection. Unfortunately the collection seems to be fully populated before the first add event is fired. Is this expected behavior?\n\n```\ncollection.bind \"add\", ->\n  console.log collection.length\ncollection.reset()\ncollection.fetch()\n```\n\nFirst output: 26\nExpected: 1\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2512",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2512/comments",
    "title": "Discuss PATCH",
    "created_at": "2013-05-02T01:50:27Z",
    "updated_at": "2013-05-06T06:07:46Z",
    "body": "We originally do PATCH by sending a partial representation of the data to the server (a subset of the attributes) ... but this may not be ideal, because (for example), there's no way to mark an attribute for deletion, apart from setting it to null. Discuss. (@steveklabnik @mnot)\n\nResources:\n\nhttp://tools.ietf.org/html/rfc5789\n\nhttp://tools.ietf.org/html/draft-ietf-appsawg-json-patch-05\n\nhttp://www.mnot.net/blog/2012/09/05/patch\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2511",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2511/comments",
    "title": "Collection#set (and other methods) is not implementing non-UI-blocking iteration",
    "created_at": "2013-05-01T20:23:37Z",
    "updated_at": "2013-05-02T04:29:28Z",
    "body": "Given a collection fetch of a decent amount of items in the returning list, the processing done for each item in the list to be a model can be quite extensive. This can cause the browser to \"freeze\" and throw warnings to the user. The set method (as well as other methods) should use non-ui-blocking iteration in order to prevent this wherever possible.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2510",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2510/comments",
    "title": "Model.save() with options and no key/val",
    "created_at": "2013-05-01T19:49:21Z",
    "updated_at": "2013-05-01T20:09:22Z",
    "body": "Using backbone 1.0.0.\n\nI have not been able to figure out how to call Model.save and pass options (success, error) and have it skip the key/val logic.\n\nWhat I've done for now is override Model.save changing the following line (50) in from:\n      if (key == null || typeof key === 'object') {\nTo:\n      if (key === null || typeof key === 'object') {\n\nThis allows me to call save as Model.save(undefined, undefined, {succes: mySuccess, error: myError}); and not have the options wiped out in the parameter logic of save.\n\nMaybe there is another way around this but I was unable to find it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2508",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2508/comments",
    "title": "Documentation - success and error callbacks arguments need to be updated",
    "created_at": "2013-04-30T09:29:08Z",
    "updated_at": "2013-05-01T20:17:56Z",
    "body": "Changes introduced in 6e646f1ba71dd889226a8f99f4d3e7e4ed2b706e (merged in 1.0) are not reflected in docs at http://backbonejs.org at all.\n\nThere are couple of places mentioning success and error callbacks arguments.\n\nAlso it would be nice to add another point about it to \"Upgrading to 1.0\" section.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2507",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2507/comments",
    "title": "Underscore as a parameter",
    "created_at": "2013-04-29T08:15:32Z",
    "updated_at": "2013-04-29T13:31:07Z",
    "body": "Hello. I faced with problem. I've global variables like _ (underscore), in my project. And I can't use Backbone in my project, because, it use such var _ as underscore. Can you fixed this problem? I use requirejs, and want to get opportunities, path underscore name in noConflict function of Backbone, or something like this.\nMy hot fix like this: var _ = root.underscore || root._;\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2506",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2506/comments",
    "title": "Merge attributes.class and className",
    "created_at": "2013-04-26T19:07:01Z",
    "updated_at": "2013-04-26T23:22:03Z",
    "body": "I looked through the issues, but couldn't find anything, so here we go.\n\nFor my views to be reusable, I often want one class on the view.$el that is always there, but with the ability to add extra classes via the attributes property. Right now, `className` overrides any `attributes.class` that you pass in to the view.\n\nThis is a failing test\n\n``` javascript\ntest(\"merge attributes class with className\", 2, function() {\n    var View = Backbone.View.extend({\n      className : \"one\",\n      attributes: {\n        id: 'id',\n        'class': 'two'\n      }\n    });\n\n    ok(new View().$el.hasClass(\"one\"));\n    ok(new View().$el.hasClass(\"two\")); // THIS FAILS\n  });\n```\n\nLet me know if you're interested in changing this behavior, and I can fix it right away.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2505",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2505/comments",
    "title": "Response of collection.fetch is inconsistent in 0.9.10 and 1.0.0",
    "created_at": "2013-04-26T05:41:13Z",
    "updated_at": "2013-10-10T13:34:07Z",
    "body": "I happened to write some dirty code needing to use `collection.fetch` to grab some values and set nested models. So I tapped into it with a function for `options.success`. However, the values of `success(collection, response, options)` passed by `collection.fetch` means different things in two versions.\n\nIn 0.9.10, collection means the collection that is being called for (which should be the same as the the `collection` we called `fetch` on) and response is the json values parsed by jQuery or whatever adapter given for the restful call. options are the rest of  options passed to `fetch`.\n\nHowever in 1.0.0, collection means 0.9.10's response, and then response here means the return value of the underlying adapter which, for jQuery would be 'success' if the ajax call is successfully executed, while options holds the same thing.\n\nSince I saw that there is quite a difference in terms of how sync functions triggers different events and callbacks, would it be better to mark these kind of changes to change log (or the migration guide) so that people would know that the API are changed enough to break existing code, even the documentation has no changes (and actually didn't indicate what the values are)\n\nThank you.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2504",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2504/comments",
    "title": "Need Help ! backbone custom ajax call  can't show the loading message",
    "created_at": "2013-04-25T11:13:04Z",
    "updated_at": "2013-04-25T11:37:12Z",
    "body": "I can't resolve this problem for more than a week\n\nview code:\n\n```\nevents: {\n\n      'change #updatestats' : 'updateStats',\n    },\n\nupdateStats:function(e){\n\n      var field = $(e.currentTarget);\n       var value = $(\"option:selected\", field).val();\n     //before call ajax request \n       this.$('#loading').show();\n\n      //this is a model ajax call i set async: false and set data to model (this.set(data['data']);)\n       this.model.getStats(value);\n     //data for render\n      var data=this.model.toJSON();\n      $(this.el).html(this.template(data));\n      $(\"#updatestats option\").filter(function() {\n        return $(this).val() == value;\n      }).attr('selected', true);\n\n  // after ajax call and render\n      this.$('#loading').hide();\n\n   }\n```\n\nwhen i  run updateStats the loading dom element can't show on browser ,but if set debugger or alert some text before ajax the loading can show. Is there any way to fix this problem?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2502",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2502/comments",
    "title": "Collection firing 'change' event on added model",
    "created_at": "2013-04-24T15:07:35Z",
    "updated_at": "2013-04-24T23:05:41Z",
    "body": "I am using `listenTo` to listen for 'add' and 'change' events on a collection. When a model is added to this collection it fires both 'add' and 'change', I get that adding 'changes' the collection in a sense, is this intended behaviour and if so is there an event for when a model in a collection changes. Or if this is not intended, is it a bug?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2501",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2501/comments",
    "title": "[ANNOUNCEMENT] - Hippo Meetup event about JavaScript frameworks and libraries",
    "created_at": "2013-04-24T10:01:19Z",
    "updated_at": "2013-04-24T15:19:09Z",
    "body": "Hi\n\n   1st of all I am sorry if this is not the proper communication channel for such announcements/discussions\n\nI am a Support Software Developer originally from Egypt but I am working and living in The Netherlands. Hippo [1] is my employer and besides the normal support and development work I love to build communities around different interests (more specifically open source software) and out of that interest the idea of Hippo Meetup [2] events was born\n\nAs you can see in [2] JavaScript is at the core of Hippo's interests, and after our first pretty successful event at the beginning of this year we would like to do a new one, this time it is about different JavaScript frameworks and libraries\n\nBackbone is getting pretty much popular and we (Hippo) would like someone of the Backbone community to give a talk about it in our coming event\n\nThe event is for English speakers so the speaker doesn't have to speak Dutch. For time and transportation efficiency it is preferable if the speaker lives in The Netherlands or in a country close by, but if there is a serious speaker who lives far from The Netherlands I can bring this up with the company and see what we can do about that\n\nBesides in the interest in technologies and technical ideas, the event is a good opportunity for socialization and meeting smart people and make more connections which will help to spread the word more about Backbone. There will be drinks and food served and the attendees will have lots of fun\n\nHope to have one (or more) of you to come and show us the great features of Backbone\n\nLooking forward to your reply\n\n[1] http://www.onehippo.com/en/\n[2] http://www.meetup.com/Hippo-Meetup/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2500",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2500/comments",
    "title": "module.save() overwrites model data with passed options data",
    "created_at": "2013-04-24T06:41:55Z",
    "updated_at": "2013-04-25T09:06:18Z",
    "body": "Hi,\n\nIf you have \n\n<pre><code>Backbone.emulateHTTP = true\nBackbone.emulateJSON = true;</code></pre>\n\nAnd pass additional data to the ajax request on save like this:\n\n<pre><code>model.save({title: _title},{\n                    data: {\n                        action: 'dosomething' \n                    }\n                });</code></pre>\n\nIt will overwrite the module's data. So i think that before doing this inside Backbone.sync: \n\n<pre><code>var xhr = options.xhr = Backbone.ajax(_.extend(params, options));</code></pre>\n\nIt should first copy the data attributes:\n\n<pre><code>_.extend(options.data, params.data);</code></pre>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2496",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2496/comments",
    "title": "Unable to hold attributes in Views",
    "created_at": "2013-04-22T19:36:36Z",
    "updated_at": "2013-06-21T23:24:37Z",
    "body": "Since I updated to version 1.0, I am no longer able to store any options in Views. Creating an inner model for every view that needs attributes is very impractical for my uses, or at least it appears so.\n\nOne major model is used to store all business data. Originally i stored a path in my smaller views that would be rendered on that model through underscore to get the value desired (usually a string for line items in this case), but now i cant store paths in the views.\n\nIs it impractical to have a model for each view on screen, even small views? I am generating many self-updating lists on screen. The number of items in the list can change after initial render, and the data in each row can change after initial render. These are being run on a mobile platform, so with the limited resources i don't want to re-render the entire list on change, just the element that changed. Having a model for each one just seems really impractical.\n\nWhat should i do?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2495",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2495/comments",
    "title": "Add a \"beforeroute\" events on Backbone.Router",
    "created_at": "2013-04-22T12:33:38Z",
    "updated_at": "2013-04-22T23:25:22Z",
    "body": "Hello,\n\nA \"beforeroute\" event would be useful to be able to catch some properties before the controller execution.\n\n```\nBackbone.Router.prototype.route = function(route, name, callback) {\n  if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n  if (_.isFunction(name)) {\n    callback = name;\n    name = '';\n  }\n  if (!callback) callback = this[name];\n  var router = this;\n  Backbone.history.route(route, function(fragment) {\n    var args = router._extractParameters(route, fragment);\n+    router.trigger('beforeroute', name, args);\n    callback && callback.apply(router, args);\n    router.trigger.apply(router, ['route:' + name].concat(args));\n    router.trigger('route', name, args);\n    Backbone.history.trigger('route', router, name, args);\n  });\n  return this;\n};\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2493",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2493/comments",
    "title": "Don't replace a \"new\" model with the persisted model when calling Collection#set",
    "created_at": "2013-04-19T04:39:57Z",
    "updated_at": "2013-10-11T11:59:02Z",
    "body": "I'm building nested models/collections, and upon the `sync` event on my top model, I call `#set` on my nested collection, because at the `POST /api/events/` endpoint the server responds back the persisted Child models. Following is some sample code of the models/collections.\n\n``` coffee\nclass ParentModel extends Backbone.Model\n  urlRoot: '/api/parents/'\n\n  initialize: ->\n    @_setupNestedModels()\n    @on 'sync', @_setupNestedModels\n\n   _setupNestedModels: ->\n     @childCollection ?= new ChildCollection\n     @childCollection.set(@attributes.child_collection) # this is from a rails backend\n     @unset('child_collection')\n\nclass Child extends Backbone.model\n\nclass ChildCollection extends Backbone.Collection\n  model: Child\n```\n\nLet's say I create a new `Child` like so, render a view that's dependent on the child, and hit save:\n\n``` coffee\nnewChild = new Child(some: 'attribute')\n(new View model: newChild, el: $someEl).render()\n@parent.childCollection.add newChild\n@parent.save()\n```\n\nWhat happens is that the original model `ChildCollection#set` in my `#_setupNestedModels` gets removed from the collection, and in it's place is a new `Child` model that is no different other than having an `id` set. This, to me, seems a bit clunky, as I had assumed that `#set` will automatically do this merge for me since there's a `merge` option. I understand that sometimes order can't be guaranteed in a response, but I'd rather do a single `#set` (maybe even passing in an explicit options to not remove/add models) rather than manually loop through the response's attributes and update each model individually. This way, by maintaining the same model object, I won't have to re-render that view.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2492",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2492/comments",
    "title": "Improve documentation",
    "created_at": "2013-04-17T22:47:31Z",
    "updated_at": "2013-04-18T12:29:00Z",
    "body": "Hey guys, Backbone has a really great documentation but there's some stuff that were forgotten! Like the [model set](http://backbonejs.org/#Model-set) method, there's nowhere saying which options I can pass, that sucks!\n\nAnother thing is the events, I never know what events a model or collection can fire unless I browse every single method that it has. It'd be good to have a table describing which situations each event is fired.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2490",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2490/comments",
    "title": "Providing a bare bones convention for nested views",
    "created_at": "2013-04-17T15:17:50Z",
    "updated_at": "2014-04-23T19:33:17Z",
    "body": "The biggest source of questions/complaints/issues I've encountered with Backbone deals with handling the issue of nested views. Any sufficiently complex application (see: real world applications) has a need for managing views within views, and cleaning up after them properly. The (well received) addition of `listenTo` helps with this to a degree, but I think Backbone could do a bit more.\n\nThis is something I add to pretty much whatever I'm working with, and it does the job without much overhead or complexity:\n\n``` js\nvar View = Backbone.View;\nBackbone.View = Backbone.View.extend({\n\n  constructor: function() {\n    this.subviews = [];\n    View.apply(this, arguments);\n  },\n\n  addSubview: function(view) {\n    if (!(view instanceof Backbone.View)) {\n      throw new Error(\"Subviews must be a Backbone.View\");  \n    }\n    this.subviews.push(view);\n    return view;\n  },\n\n  removeSubviews: function() {\n    var children = this.subviews;\n    for (var i = 0, l = children.length; i<l; i++) {\n      children[i].remove();\n    }\n    this.subviews = [];\n    return this;\n  },\n\n  remove: function() {\n    this.removeSubviews();\n    View.prototype.remove.apply(this, arguments);\n  }\n});\n```\n\nI completely understand and agree with Backbone's position to keep things simple and not implement applications specific components; at the same time I think providing a very, very basic starting point for this problem would be a great help to many.\n\nThis starting point could then be extended upon with more opinionated libraries or frameworks like layoutmanager, thorax, marionette, etc.\n\n/cc @tbranyen\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2488",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2488/comments",
    "title": "Introduce allChangedAttributes to retrieve all changes since model initialisation",
    "created_at": "2013-04-16T14:28:13Z",
    "updated_at": "2013-04-17T22:28:03Z",
    "body": "Similar to changedAttributes introduce a new function which returns all changed attributes since initialisation of a model. This would allow setting attributes on a model multiple times and saving it only once using HTTP PATCH.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2487",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2487/comments",
    "title": "Change event triggered by another change event listener has both events' changed attributes",
    "created_at": "2013-04-15T23:37:24Z",
    "updated_at": "2013-10-10T19:56:02Z",
    "body": "Is it expected behaviour that, upon triggering a new change event in a listener of another change event, a second change event is fired, containing the `changedAttributes` of both the first action and the second?\n\nTake this code for example. I want to update an attribute whenever either of two other attributes change. I also only want this to happen once if both attributes are changed in a single action.\n\nThe solution I came up with was to listen for the general `change` event, and check if it was caused by an attribute I am interested in being changed.\n\nThe issue is that the model's `changedAttributes`, at the point of the subsequent change event (triggered in the listener) being fired, also contains the previously changed attributes, so that it seems as if those attributes are changed twice.\n\n``` javascript\nvar Model = Backbone.Model.extend();\nvar model = new Model({\n  a: 1,\n  b: 2,\n  unrelated: 'foo',\n  computed: 3\n});\n\nmodel.on('change', function () {\n  console.log('model changed:', model.changedAttributes());\n  if (_.has(model.changed, 'a') ||\n      _.has(model.changed, 'b')) {\n    console.log('a or b changed, recomputing');\n    model.set('computed', model.get('a') + model.get('b'));\n  }\n});\n\nconsole.log('--- modifying unrelated ---');\nmodel.set('unrelated', 'bar'); // no recalculation\n\nconsole.log('--- modifying a ---');\nmodel.set(a, 2); // should result in a single recalculation\n\nconsole.log('--- modifying a + b ---');\nmodel.set({a: 5, b: 5}); // should also result in a single recalculation\n```\n\nhttp://jsbin.com/ofoqim/2/edit?javascript,console\n\nThe last two `set`s each cause the recalculation to happen twice.\n\nOne solution would be to silence the second change event, but I don't want to do that, as I have other listeners that should be triggered.\n\nIf this is intended events behaviour, how does one achieve the above?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2486",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2486/comments",
    "title": "Route fragments that are numbers",
    "created_at": "2013-04-15T23:24:31Z",
    "updated_at": "2013-04-18T06:08:07Z",
    "body": "My URL scheme just changed and some of the URLs/fragments on my site are numbers. For example: http://example.com/username has become http://example.com/12345678.\n\nThe change to a fragment that is not a string causes this error from Backbone: Uncaught TypeError: Object 12345678 has no method 'replace' on [line 1355](https://github.com/documentcloud/backbone/blob/master/backbone.js#L1355)\n\nI added this check into the **getFragment** method before line 1355 which fixed it.\n\n``` javascript\nif(!_.isString(fragment)) {\n  fragment = fragment.toString();\n}\n```\n\nAm I doing something wrong or is this a legitimate bug? I recently upgraded to 1.0.0 but never had numeric fragments previously.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2485",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2485/comments",
    "title": "Issue with Collection.remove()",
    "created_at": "2013-04-15T15:14:25Z",
    "updated_at": "2013-04-16T14:55:21Z",
    "body": "This is an issue that occurs from version 0.9.10:\n\nWhen I manually set a model's id, then I try to remove that model from a collection, it doesn't get removed.\n\nHere is how to reproduce the issue. In that example, the 'pasta' model doesn't get removed.\n\n``` javascript\nvar Meal = Backbone.Model.extend({\n  defaults: {\n    \"appetizer\":  \"caesar salad\",\n    \"entree\":     \"ravioli\",\n    \"dessert\":    \"cheesecake\"\n  }\n});\n\nvar MealCollection = Backbone.Collection.extend({\n  model: Meal\n});\n\nvar meals = new MealCollection();\n\nmeals.add({maindish: \"salmon\", id: 1});\nmeals.add({maindish: \"steak\", id: 2});\nmeals.add({maindish: \"pasta\"});\n\nmeals.findWhere({maindish: \"pasta\"}).set({id: 3}, {silent: true});\n\nvar steak = meals.where({maindish: \"steak\"});\nvar pasta = meals.where({maindish: \"pasta\"});\n\nmeals.remove(steak);\nmeals.remove(pasta);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2483",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2483/comments",
    "title": "this.root undefined in line 1351",
    "created_at": "2013-04-14T11:19:38Z",
    "updated_at": "2013-04-14T12:19:55Z",
    "body": "I shim Backbone with Require.js\n\n```\nrequire.config\ndeps: ['main']\n\npaths:\n    components: '../components',\n    jquery: '../components/jquery/jquery.min',\n    bootstrap: 'vendor/bootstrap'\n    backbone: '../components/backbone/backbone'\n    underscore: '../components/underscore/underscore'\n    text: '../components/requirejs-text/text'\n    handlebars: '../components/handlebars/handlebars'\n\nshim:\n    bootstrap: \n        deps: ['jquery'],\n        exports: 'jquery'\n    underscore:\n        exports: '_'\n    backbone: \n        deps: ['jquery', 'underscore']\n        exports: 'Backbone'\n```\n\nWhen upgrading to Backbone v, 1.0 I get an error on line 1351\n\n```\nvar root = this.root.replace(trailingSlash, '');\n```\n\nThis it she content of 1347 - 1358\n\n```\ngetFragment: function(fragment, forcePushState) {\n  if (fragment == null) {\n    if (this._hasPushState || !this._wantsHashChange || forcePushState) {\n      fragment = this.location.pathname;\n      var root = this.root.replace(trailingSlash, '');\n      if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);\n    } else {\n      fragment = this.getHash();\n    }\n  }\n  return fragment.replace(routeStripper, '');\n},\n```\n\nI don't understand why the root object is undefined on Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2476",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2476/comments",
    "title": "IE and patch support",
    "created_at": "2013-04-12T15:51:34Z",
    "updated_at": "2013-05-21T14:46:03Z",
    "body": "Just putting in a reminder to take a [look back over the comments here](https://github.com/documentcloud/backbone/commit/699fe3271262043bb137bae97bd0003d6d193f27#commitcomment-2846332) regarding `ActiveXObject`and IE9/10 and make sure that everything should be alright before cutting the next release.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2475",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2475/comments",
    "title": "How is doc (index.html) created?",
    "created_at": "2013-04-12T13:33:33Z",
    "updated_at": "2013-04-12T13:44:06Z",
    "body": "How is this file generated? :-) Can someone help?\nhttps://github.com/documentcloud/backbone/blob/master/index.html\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2474",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2474/comments",
    "title": "Pass all $.ajax options for fetch, save, and destroy",
    "created_at": "2013-04-11T19:24:28Z",
    "updated_at": "2013-04-11T19:57:01Z",
    "body": "It seems like success and error callbacks are the only options passed to $.ajax. What is the benefit of this? I'm finding it very hard to add a custom header to a single API call because the only thing that has worked so far is $.ajaxSetup, but then the custom header is added to every subsequent API call. Is there an easier way to add a custom header for a single ajax call?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2472",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2472/comments",
    "title": "pushstate navigation problem in same url?",
    "created_at": "2013-04-11T10:10:05Z",
    "updated_at": "2013-04-12T15:35:25Z",
    "body": "I have two routes. The first is the global routes and second is settings routes. I use pushstate in  my case\n\n```\nnew Demo.Routers.Root()\nBackbone.history.start({pushState: true, silent: false})\n```\n\n```\nclass Demo.Routers.Root extends Backbone.Router\n\n  initialize: (options) ->\n    this.route(/settings\\/*/, 'settings');\n\n  settings: () ->\n    if !@routeSettings\n      @routeSettings = new Demo.Routers.Settings()\n```\n\nand in my setting routes\n\n```\nclass Demo.Routers.Settings extends Backbone.Router\n\n  initialize: () ->\n    this.route(/settings\\/show/, 'show');\n    @navigate('settings/show', {trigger: true, replace: false});\n\n  show: () ->\n    console.log 12\n```\n\nwhen i press /settings/show, it doesn't fire show function?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2471",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2471/comments",
    "title": "Defaults are used when merging attributes during a Collection.set",
    "created_at": "2013-04-10T21:32:22Z",
    "updated_at": "2013-07-16T13:04:24Z",
    "body": "Currently when you pass an attribute hash to `Collection.set`, and a model with the same id already exists in the collection resulting in a merge, the Model's default values are applied before the merge takes place.\n\nThis means that if you give `.set` a selection of attributes that you want to be merged into the model, any attributes that you don't give it, that have defaults defined, will override existing non-default values.\n\nTo me this seems very unexpected. `Collection.set` seems like the perfect way to apply partial updates to models, but with the current functionality this isn't possible.\n\nExample:\n\n``` javascript\nvar Model = Backbone.Model.extend({\n  defaults: {\n    key: 'value'\n  }\n});\nvar m = new Model({id: 1, key: 'nondefault'});\nvar col = new Backbone.Collection([m], {model: Model});\n\ncol.set({id: 1, otherkey: 'other'}, {merge: true});\n\nconsole.log(col.first().attributes);\n// result:   {id: 1, key: \"value\", otherkey: \"other\"}\n// expected: {id: 1, key: \"nondefault\", otherkey: \"other\"}\n```\n\nThe confusing thing is that setting the attributes on the model directly behaves differently (the way I would have expected `Collection.set` to behave):\n\n``` javascript\nvar Model = Backbone.Model.extend({\n  defaults: {\n    key: 'value'\n  }\n});\nvar m = new Model({id: 1, key: 'nondefault'});\nm.set({id: 1, otherkey: 'other'})\nconsole.log(m.attributes);\n// result: {id: 1, key: \"nondefault\", otherkey: \"other\"}\n```\n\n**Edit:**\n\nActually, testing with 0.9.10, this seems to be a regression:\n\n``` javascript\n// Version 0.9.10\n\nvar Model = Backbone.Model.extend({\n  defaults: {\n    key: 'value'\n  }\n});\nvar m = new Model({id: 1, key: 'nondefault'});\nvar col = new Backbone.Collection([m], {model: Model});\n\ncol.update({id: 1, otherkey: 'other'}, {merge: true});\n\nconsole.log(col.first().attributes);\n// result: {id: 1, key: \"nondefault\", otherkey: \"other\"}\n```\n\n**Edit:**\n\nThis commit seems to be the source of the change: https://github.com/documentcloud/backbone/commit/a920fed91b0108e3f722ad002e228c6046c1e3b6\n\nWas it really intended?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2470",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2470/comments",
    "title": "_prepareModel method mutates options object",
    "created_at": "2013-04-10T17:31:09Z",
    "updated_at": "2013-10-10T13:03:24Z",
    "body": "I don't know if it is intended to work like that but _prepareModel accidentally injects the collection in the \"options\" object\n\n```\n_prepareModel: function(attrs, options) {\n  options || (options = {});\n  options.collection = this;\n  ....\n```\n\nThe \"create\" method use _prepareModel to obtain the correct object and then calls \"save\" with the same \"options\" object:\n\n```\ncreate: function(model, options) {\n  ...\n  if (!(model = this._prepareModel(model, options))) return false;\n  ...\n  model.save(null, options);\n```\n\nUsing backbone.io I got an error in the save method because it tries to convert to JSON the whole options object (and the collection can't be serialized doing like that).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2468",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2468/comments",
    "title": "Support for a MongoDB Extended JSON",
    "created_at": "2013-04-10T11:10:26Z",
    "updated_at": "2013-06-12T11:33:51Z",
    "body": "MongoLab is a cloud version of MongoDB, which provides nice REST API. However model id looks like this:\n\n<pre>\n\"_id\": {\n  \"$oid\": \"50f9a0f5e4b007f27f766cf3\"\n},\n</pre>\n\n\nThe solution I have found on Stack overflow (http://stackoverflow.com/questions/14410440/backbone-model-and-idattribute-when-updating-record) is a bit rough:\n\n<pre>\nvar sync = Backbone.sync;\nBackbone.sync = function (method, model, options) {\n  options || (options = {});\n  // if options.attrs is present, Backbone will use it over dumping toJSON\n  if (!options.attrs) options.attrs = _.omit(model.attributes, '_id');\n  return sync.call(Backbone, method, model, options);\n};\n\nBackbone.Model.prototype.toJSON = function (options) {\n  var attrs = _.clone(this.attributes);\n  // In this case you'd have to pass `includeId: true` to `toJSON` when you\n  // actually *want* the _id in the output.\n  return options && options.includeId ? attrs : _.omit(attrs, '_id');\n};\n</pre>\n\n\nIs there any better way to do this? Can we create a patch for the Backbone that will support such ids?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2467",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2467/comments",
    "title": "Cross Site Script Vulnerability",
    "created_at": "2013-04-10T09:42:16Z",
    "updated_at": "2013-12-10T22:43:30Z",
    "body": "During our recent security scan (using a tool called Fortify) we found a Cross Site Scripting (XSS) vulnerability.\n\nThe code in question is in the _updateHash() function. This code is called from the navigate function(). This if you use the navigate function in such a way you can perform a cross site script attack:\n- app.navigate(\"help/!javascript:alert('xss')\", {trigger: true});\n  This would result in the the following URL being called http://currentURL.com/help/!javascript:alert('xss'). This would result in an alert box being displayed with the text \"xss\".\n- app.navigate(\"page#<img src=invalid onerror=alert('xss')\", {trigger: true});\n  This would result in the the following URL being called http://currentURL.com/page#<img src=invalid onerror=alert('xss'). This would result in an alert box being displayed with the text \"xss\".\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2466",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2466/comments",
    "title": "fetch options.success callback arguments changed in 1.0",
    "created_at": "2013-04-09T20:31:11Z",
    "updated_at": "2013-04-13T13:32:22Z",
    "body": "I didn't see this in the changelog or issues, but forgive me if it's a duplicate:\n\nThe fetch options.success callback now takes 2 arguments (collection, resp) where it used to take 3: model, resp, options.\n\nThis change broke our custom override.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2465",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2465/comments",
    "title": "function execution order in model constructor",
    "created_at": "2013-04-09T19:52:03Z",
    "updated_at": "2013-04-09T20:07:23Z",
    "body": "Should `this.initialize` be called before `this.set` in `Backbone.Model.constructor`?\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L258\n\nIf I have code that preforms some set up that is used by `parse` then I have to override the model's constructor in order ensure that set up occurs before parse is called.\n\nIf the answer is yes then the same should hold true for `Backbone.Collection.constructor`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2464",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2464/comments",
    "title": "what does this.view.delegateEvents() in backbone",
    "created_at": "2013-04-09T16:53:01Z",
    "updated_at": "2013-04-09T17:14:02Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2463",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2463/comments",
    "title": "what does the model.off() or this.model.off() ",
    "created_at": "2013-04-09T16:50:39Z",
    "updated_at": "2013-04-09T17:12:51Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2459",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2459/comments",
    "title": "how to define a default option for all request-method",
    "created_at": "2013-04-07T03:25:47Z",
    "updated_at": "2013-04-07T03:41:22Z",
    "body": "I need define a default option like {wait:true} for all request-method,how to do?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2458",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2458/comments",
    "title": "saving model and collection options",
    "created_at": "2013-04-04T01:29:36Z",
    "updated_at": "2016-07-07T16:31:37Z",
    "body": "Is there a reason why model and collection do not save off a copy of the options hash to the instance like a view? I see key properties getting plucked in the source and added to the instance, but then the options argument is not assigned to <instance>.options.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2457",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2457/comments",
    "title": "Parse is not longer called on Collection.reset",
    "created_at": "2013-04-02T22:15:31Z",
    "updated_at": "2013-04-02T22:48:00Z",
    "body": "https://github.com/documentcloud/backbone/commit/e83d1ee78474356cf983807101b2c7a37a8f6b29#L0L805 looks to be a mistake.  \n\nWe need to parse the models when populating with reset\n\nLet me know if this is by design.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2453",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2453/comments",
    "title": "Collection url not set on instantiation",
    "created_at": "2013-04-01T19:20:57Z",
    "updated_at": "2013-04-01T19:52:46Z",
    "body": "The docs state that passing a `url` option to the Collection constructor will set the Collection's url property: \n\n> There are several options that, if provided, are attached to the collection directly: url, model and comparator.\n> \n> ```\n> var tabs = new TabSet([tab1, tab2, tab3]);\n> var spaces = new Backbone.Collection([], {\n>  model: Space,\n>  url: '/spaces'\n> });\n> ```\n\nLooking at the implementation of `Backbone.Collection`, I see that the source code does not reflect this (it sets `model` and `comparator`, but not `url`).\n\nIs this legacy functionality, or am I misreading the docs?\n\n(Related(?): https://github.com/documentcloud/backbone/issues/669)\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2452",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2452/comments",
    "title": "Re-add Lo-Dash to the docs.",
    "created_at": "2013-04-01T17:40:42Z",
    "updated_at": "2013-09-19T22:54:00Z",
    "body": "With Backbone's bump to v1.0.0 Lo-Dash was [removed from the docs](https://github.com/documentcloud/backbone/commit/699fe3271262043bb137bae97bd0003d6d193f27#commitcomment-2921550).\n\nI'm not sure why it was removed since, unlike jQuery and Zepto, Lo-Dash ships with, and tests against, Backbone's unit tests. It also maintains compat builds, even in cdnjs, specifically for compat with Underscore/Backbone.\n\n This also seems to come [as a surprise](https://github.com/documentcloud/backbone/issues/2431#issuecomment-15552110) to other Backbone contributors.\n\n![`lodash underscore` build](https://f.cloud.github.com/assets/4303/325177/57ad165a-9b01-11e2-9822-bba990c7a0a8.png)\n\n![`lodash backbone` build](https://f.cloud.github.com/assets/4303/325178/5d077cf8-9b01-11e2-989c-bfdd0502ff88.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2451",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2451/comments",
    "title": "Collection mirrors ALL model events under the same name",
    "created_at": "2013-03-31T23:35:08Z",
    "updated_at": "2013-04-01T15:19:53Z",
    "body": "``` coffeescript\nevent = 'dispose'\ncollection = new Collection [{a: 1}, {a: 2}]\ncollection.on event, console.log.bind console\ncollection.at(0).trigger event\n# => Logs 'dispose'\n```\n\nWhy does backbone pass all events UNCHANGED from models to collections? This [ruins Chaplin](https://github.com/chaplinjs/chaplin/issues/518), which uses \u201cdispose\u201d event for memory management everywhere.\n\nI suggest at least adding namespace, just like with \u201cchange:\u201d.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2446",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2446/comments",
    "title": "Validation Not Working.. It's still setting the invalid value to the Model Attribute",
    "created_at": "2013-03-29T17:10:21Z",
    "updated_at": "2013-03-30T21:04:47Z",
    "body": "Hi,\n\nI am using backbone.js v1.0 and as per the documentation `save` method is supposed to call validation automatically. Which it does, but it still sets the invalid value to the attribute.\n\nWhen the Model validation doesn't succeed it shouldn't set the invalid value to the Model attribute, right?\n\nPlease check what is wrong with the following code?\n\n``` javascript\n(function(){\n\n    window.App = {\n        Models: {},\n        Collections: {},\n        Views: {}\n    };\n\n    window.template = function(id) {\n        return _.template($('#' + id).html());\n    };\n\n    App.Models.Task = Backbone.Model.extend({\n        defaults:{\n            title: '',\n            priority: 0\n        },\n\n        validate: function(attrs, options){\n            if (attrs.priority < 0){\n                return 'Priority cannot be negative.';\n            }\n        }\n    });\n})();\n\nvar task = new App.Models.Task ({ title: 'Sample Task', priority: 5 });\ntask.on('invalid', function(model, error) { console.log(error); })\n\ntask.save({ priority: -9 }); // Should not pass validation\nconsole.log(task.toJSON()); // Model is updated with -9\n```\n\nOutput:\n\n> Priority cannot be negative. app.js:28\n> Object {title: \"Sample Task\", priority: -9} \n\nAs you can see from the output the `invalid` event is fired because the `save` method didn't pass the validation, but still the object's `priority` attribute value is set to `-9`.\n\nIs this supposed to happen? How can this be avoided?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2444",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2444/comments",
    "title": "Missing Comma in Documentation",
    "created_at": "2013-03-28T17:28:52Z",
    "updated_at": "2013-03-29T03:46:38Z",
    "body": "In index.html, line 2491 (https://github.com/documentcloud/backbone/blob/master/index.html#L2491), there should be a comma following the initialize method. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2443",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2443/comments",
    "title": "Collection#set isn\u2019t maintaining the input order",
    "created_at": "2013-03-28T14:54:25Z",
    "updated_at": "2016-06-20T09:16:17Z",
    "body": "[Chaplin](https://github.com/chaplinjs/chaplin) has had `Collection#update` right from the beginning, later [we removed it](https://github.com/chaplinjs/chaplin/pull/329/files) when Backbone provided it out of the box. Now I realized that Backbone\u2019s version doesn\u2019t maintain the order when updating:\n\n```\ncollection = new Backbone.Collection([{id:0}, {id:2}, {id:4}]);\ncollection.set([{id:0}, {id:1}, {id:2}, {id:3}, {id:4}])\ncollection.pluck('id')\nActual: [0, 2, 4, 1, 3]\nExpected: [0, 1, 2, 3, 4]\n```\n\nThat is, the new models aren\u2019t inserted at the right position. Is this behavior on purpose?\n\nCollection#set is generally more useful than Collection#reset. It doesn\u2019t throw away all models and creates them from scratch. With `add`, `remove` and `change` events, it\u2019s easier to build list views that is optimized for performance. We have been using it for Chaplin\u2019s optimized [CollectionView](https://github.com/chaplinjs/chaplin/blob/master/src/chaplin/views/collection_view.coffee).\n\nIf I fetch a list as a JSON array from the server, I expect the collection to reflect the input order. If the server returns `[{\"id\":0}, {\"id\":1}, {\"id\":2}, {\"id\":3}, {\"id\":4}]`, the collection order should be the same. I know that I can `.fetch({ reset: true })` to maintain the order, but then I\u2019m losing all the benefits of Collection#set\u2019s smart updating.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2442",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2442/comments",
    "title": "Model save callback for error",
    "created_at": "2013-03-28T10:10:27Z",
    "updated_at": "2013-11-29T16:24:58Z",
    "body": "Using backbone 1.0, I have this bit of code here:\n\n``` javascript\nmodel.save(model.attributes, {\n     success: function(model, response) {\n       console.log(model, response);\n     },\n     error: function(model, xhr, options) {\n       return console.log(model, xhr, options);\n     }\n   });\n```\n\nIs something wrong with the code above? because i get the same model object on the first two parameters, and not the actual response in the second param (this doesn't happen on backbone 0.9)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2441",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2441/comments",
    "title": "Inheritance Performance improvements",
    "created_at": "2013-03-28T08:52:36Z",
    "updated_at": "2013-03-28T23:06:26Z",
    "body": "I know that Backbone is doing a lot at the end of the day, but looking at it from `simple inheritance perspective` seems to perform somehow the worst between some common used inheritance projects.\n\nPlease have a look at this https://github.com/dotnetwise/Javascript-FastClass and respectively the performance tests on http://jsperf.com/js-inheritance-performance/25\n\nI guess you can improve backbonejs inheritance core by adopting one or the other from the technologies tested and make it even better on the long run.\n\nAny feedback is also appreciated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2440",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2440/comments",
    "title": "History.getFragment window.location.search Option",
    "created_at": "2013-03-28T01:24:43Z",
    "updated_at": "2013-09-17T14:54:32Z",
    "body": "0.9.9 \"For semantic and cross browser reasons, routes will now ignore search parameters. Routes like search?query=\u2026&page=3 should become search/\u2026/3.\"\n\nCan you provide a 'respectSearch'  <Boolean> option to the History.start method in order to respect query string paramaters within the History.getFragment method. This is useful for applications that use GET paramaters for state.\n\n```\nfragment = this.location.pathname;\nif (this.options.respectSearch) {\n  var search = window.location.search;\n  if (search) fragment += search;\n}\nvar root = this.root.replace(trailingSlash, '');\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2438",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2438/comments",
    "title": "Confusing documentation for .toJSON()",
    "created_at": "2013-03-27T19:05:51Z",
    "updated_at": "2013-03-29T13:34:25Z",
    "body": "Documentation on .toJSON() method in\nhttp://documentcloud.github.com/backbone/#Model-toJSON\nis confusing:\n\nInstead of saying ''it returns the copy of the model's attributes'',\nI would say more precisely: ''it returns the object formed from the model's attributes and their values''.\nOr maybe even more precisely: ''it returns the object whose key-value pairs are the pairs of model's attributes and their values''.\n\nThe 'copy of attributes' could mean many other things, including e.g. the array of all attributes without the values.\n\nAlso the example given is confusing:\nIt does not use Backbone's 'toJSON' method explicitly but uses 'JSON.stringify' method instead, which has nothing to do with Backbone.\nI know the latter refers to the former, as one can learn from the documentation via the link provided.\nIt is however not the easiest route for the reader to understand what the actual method 'toJSON' does.\n\nAn easier example would be e.g.:\n\nalert( artist.toJSON().firstName + ' ' +  artist.toJSON().lastName )\n\nThat does not use anything else than the method itself, \nso it focuses reader's attention on learning Backbone without being distracted.\n\nJust a thought, hope it could help to improve the Documentation.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2437",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2437/comments",
    "title": "\"reset\" or \"sync\" Collection event ?",
    "created_at": "2013-03-27T15:50:39Z",
    "updated_at": "2013-03-27T21:21:57Z",
    "body": "I've upgraded my app with BB 1.0.\n\nI was using the \"reset\" event , like in most of BB app examples (todos mvc...) i've studied, to trigger a function after initial fetch of my Collection and this doesn't work anymore.\n\nI've changed with \"sync\" event and it works but is il normal ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2434",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2434/comments",
    "title": "Help figure out inheritance",
    "created_at": "2013-03-26T22:27:40Z",
    "updated_at": "2013-03-26T23:20:03Z",
    "body": "Hello,\n\nCan you help me please figure out how inheritance works here. Lets suppose we have such code:\n\n```\nBackbone.Container = Backbone.Collection.extend({\n    modelsDefinition: {},\n\n    model: function (attrs, options) {\n      attrs = attrs || {};\n      attrs.type = attrs.type || '';\n\n      console.log(this.modelsDefinition);\n      console.log(attrs.type);\n\n      if (typeof this.modelsDefinition[attrs.type] !== 'undefined') {\n        return new this.modelsDefinition[attrs.type](attrs, options);\n      } else {\n        console.log(\"Model type not specified: \", attrs.type);\n      }\n    }\n  });\n```\n\n```\nvar Reports = Backbone.Container.extend({\n  url: '/api/reports/get',\n\n  modelsDefinition: {\n    'one': 'Model.One',\n    'two': 'Model.Two',\n    'three': 'Model.Three'\n  }\n});\n```\n\n```\nvar container = new Reports();\ncontainer.fetch();\n```\n\nAfter `.fetch` method executes, we receive array of objects from server that are later translated into Models based on `modelsDefinition`. \n\nQuestion is: why `console.log(this.modelsDefinition);` is empty after second extend?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2431",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2431/comments",
    "title": "Drop Zepto from the docs",
    "created_at": "2013-03-26T17:14:16Z",
    "updated_at": "2013-04-04T07:07:26Z",
    "body": "Now that the test suite isn't running against Zepto, perhaps we should drop the reference to it as an alternative DOM library from the docs (and note it in the changelog for 1.0).\n\nIf for whatever reason we'd like to keep it in the docs, there are a few ways to proceed as I see it:\n1.  Fix the breaking tests and keep it in the docs (that would need to be included in a minor release and noted in the changelog.) There are currently 4 failing tests: 3 have to do with `delegateEvents` and 1 can be fixed directly in the test suite (it's relying on a `:has` pseudo-selector, which Zepto chokes on.)\n2. Open an issue with Zepto and ask them to imitate jQuery more faithfully, but I doubt that Fuchs would bite on that.\n3. The nuclear option: remove official support from the docs.\n\nSo far, there are 3 projects in the examples section that use it: LinkedIn Mobile, Gilt Groupe, and Tzigla. Based on the relatively high profile of the first 2 names on that list, and the fact that it's still called out as a valid option in the docs, I think that _something_ needs to be done.\n\n(FWIW, I totally agree with the decision to drop support for it, I just don't want it to trip people up when it doesn't actually work.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2430",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2430/comments",
    "title": "Passing 'url' parameter to a collection's fetch method overrides the fetched models' url",
    "created_at": "2013-03-26T17:07:53Z",
    "updated_at": "2013-10-11T03:54:06Z",
    "body": "When we want to specify a custom url for a collection's fetch like so:    \n\n```\n # comments is a Backbone Collection\n@comments.fetch\n     url: @comments + \"?custom_query=query\"\n```\n\nthen the resulting models that are fetched will all have their url attributes be overridden to \n\n> @comments + \"?custom_query=query\"\n\neven though that custom url was only for the collection's fetch call. This doesn't seem like expected behavior. I fixed it by overriding the collection's parse:\n\n```\ncomments = Backbone.Collection.extend\n....\nparse: (result, options) ->\n    del options.url\n```\n\nBut it seems this was not obvious, nor is it a great fix. I'm pretty sure this was introduced by backbone 1.0's new feature for being able to pass in url as an option in model initialization. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2428",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2428/comments",
    "title": "Push and unshift are broken if the model already exists in the collection",
    "created_at": "2013-03-25T21:10:15Z",
    "updated_at": "2013-10-10T20:14:26Z",
    "body": "Related to #2421 and #2392 - the model created by `push` or `unshift` could pass `_prepareModel` but may not, in fact, be the model added to the collection if there is a duplicate.\n\n``` js\nvar c = new Backbone.Collection();\nc.push({id:1})\n// Backbone.Model {cid: \"c1\", attributes: Object, collection: Backbone.Collection, _changing: false, _previousAttributes: Object\u2026}\nc.push({id:1})\n// Backbone.Model {cid: \"c2\", attributes: Object, collection: Backbone.Collection, _changing: false, _previousAttributes: Object\u2026}\nc.get('c2')\n// undefined\n```\n\nI believe the same issue will happen with `collection.create` as well.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2427",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2427/comments",
    "title": "Router.navigate doesn't update URL hash on Chrome for Android.",
    "created_at": "2013-03-25T20:51:30Z",
    "updated_at": "2013-03-27T22:16:05Z",
    "body": "Bacbone 0.9.10 and 1.0.0.\n\nMaybe I'm doing something stupid but it works as expected on chrome, firefox, and ie for windows and on dolphin browser and the built in browser on android 4.1.2 (a motorola xoom and a samsung galaxy s3) but NOT on chrome or chrome beta on android.\n\nTest case here: http://sttest.azurewebsites.net/home/test.\n\nNote that it does seem to remember the history (the back button works). Note also that this is a simplified test case to try to understand the problem. But in the actual app I am using twitter bootstrap and if I open a bootstrap dialog or expand the collapsible navbar, the url hash is then updated to what it should be. I know, I wouldn't believe me either, but I'm quite certain that's the case.\n\nPS: Backbone is awesome!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2425",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2425/comments",
    "title": "How get response headers after ajax request??",
    "created_at": "2013-03-25T19:51:44Z",
    "updated_at": "2013-03-25T19:54:14Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2422",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2422/comments",
    "title": "Possible bug when setting an attribute of a model",
    "created_at": "2013-03-25T14:35:14Z",
    "updated_at": "2013-03-25T16:30:36Z",
    "body": "Not sure if this is expected.\nIf I set a changed attribute of a model with the set method this change is reflected in the changed object of the model.\nAs soon as I set an attribute though that hasn't changed it reinitializes the changed attribute.\n\nI should be able to work around this by passing an object to the set method.\n\nI just wasn't sure if this is a bug :)\n\n``` javascript\n> var M = Backbone.Model.extend({});\n\n> var m = new M({a: 1, b: 2});\n\n> m.set('a', 3);\n> console.log(m.changed);\nObject {a: 3}\n> m.set('b', 2);\n> console.log(m.changed);\nObject {} \n```\n\nThank you all for your work\n\nEDIT:\n\nI've tried it with passing an object to the set function.\n\n``` javascript\n> var n = new M({a: 1, b: 2});\n> n.set({a: 3, b: 2})\n> console.log(n.changed);\nObject {a: 3}\n```\n\nYou can try it here:\nhttp://codepen.io/anon/pen/bDgmt\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2421",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2421/comments",
    "title": "During merging, the new Collection.set creates entire new Models before checking for existence",
    "created_at": "2013-03-23T18:21:44Z",
    "updated_at": "2013-09-12T00:50:46Z",
    "body": "In `Collection.set`'s logic `_prepareModel` currently gets called before an existing model is sought for. Backbone constructs a whole new object for each incoming set of attributes before calling `existing.set` to merge the attributes.  That means my `initialize` methods are being called on this ghost object, where I may do one or several event bindings.\n\nWhen a Model is created, I expect it to be used.  This is causing me memory leaks and it makes debugging difficult with so many event listeners that shouldn't be there.\n\nWhy doesn't `get` get called first, followed by `existing.set(options.parse ? existing.parse(model) : model)`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2419",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2419/comments",
    "title": "CORS domain issue since 1.0",
    "created_at": "2013-03-22T16:44:39Z",
    "updated_at": "2014-11-13T01:43:09Z",
    "body": "Hello,\n\nsince I upgrade to 1.0, i'm getting CORS errors when I try to fetch my collection from a different domain.\nMy server is a node/express instance where I have this check in place\n\n``` javascript\nif(allowedHost[req.headers.origin]) {\n    res.header('Access-Control-Allow-Credentials', true);\n    res.header('Access-Control-Allow-Origin', req.headers.origin);\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS,PATCH');\n    res.header('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');\n    res.header('Access-Control-Max-Age', 60 * 60 * 24); // 1 day\n    res.header('Cache-Control', 'max-age:120');   // cache for 2m (in varnish and client)\n    if ('OPTIONS' == req.method) {\n        res.send(200);\n    }\n    else {\n        next();\n    }\n}\n```\n\nAs I understood, backbone is now supporting the PATCH http method, which is included in the 'access-control-allow-methods'.  Why i'm getting error then ?  Did I miss something ?\n\nWhen i switch back to backbone 0.9.10 it works properly.\nThanks for your help.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2418",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2418/comments",
    "title": "Upgrade to Backbone 1.0",
    "created_at": "2013-03-22T13:58:39Z",
    "updated_at": "2013-04-01T21:09:11Z",
    "body": "Just upgraded Backbone to 1.0 version and found, that View.make() was removed from it. Is it bug of it was decided to do?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2417",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2417/comments",
    "title": "slice doesn't work correctly in Firefox 3.6",
    "created_at": "2013-03-22T09:40:51Z",
    "updated_at": "2013-05-23T06:47:40Z",
    "body": "In one of our products, we embed XulRunner 1.9.2 (FF 3.6). This version does not correctly handle the way Collection#slice is currently implemented. When end is omitted, it will always return an empty array (somehow somewhere undefined gets converted to 0 I think).\n\nThis is fixed by implementing slice as follows:\n\n``` javascript\nslice: function(begin, end) {\n    return this.models.slice.apply(this.models, arguments);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2416",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2416/comments",
    "title": "0.9.2 -> 1.0.0 Upgrade Issue: `url` passed to collection.fetch shadows `urlRoot` on child models",
    "created_at": "2013-03-21T21:29:56Z",
    "updated_at": "2014-09-11T14:36:38Z",
    "body": "We recently upgraded to Backbone 1.0 (from 0.9.2) and ran into an issue with the fact that some options (specifically `url`) passed to `collection.fetch` now get applied to the model's constructor.\n\nWe have a collection that dynamically generates its fetch url using a function, that function relies on the options passed in to fetch (an example is to get paging and sorting information).  Previously we overrode fetch and before invoking the original method, set the `options.url` property to be `collection.url(options)`.  The models in the collection don't use or want this info in their URL - they instead rely on an implementation of urlRoot to get their base url.\n\nIn 1.0, that url we passed to collection.fetch gets passed to the model constructor in the options hash and copied in as a property - so the default `url` function on the Model gets overridden, the `urlRoot` function never gets called, and `sync` calls end up talking to the wrong endpoint.\n\nTo workaround, we quit passing in a url in the options hash to fetch and instead modified Backbone.sync to pass options as an argument to the url function (this felt appropriate given that the options were already being passed to the model's `toJSON`):\n\nOriginal\n\n```\nif (!options.url) {\n  params.url = _.result(model, 'url') || urlError();\n}\n```\n\nNew:\n\n```\nif (!options.url) {\n  params.url = ( _.isFunction(model.url) ? model.url.call(model, options) : model.url ) || urlError();\n}\n```\n\nAny ideas on a better way to handle this, and if not, would a pull request be welcome?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2414",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2414/comments",
    "title": "Status Code and Error Callbacks",
    "created_at": "2013-03-21T13:25:37Z",
    "updated_at": "2013-03-21T17:52:35Z",
    "body": "Seems the error callback API changed between 0.9.10 and 1.0.0, the XHR doesn't seem to get passed to the error callback. Is there no longer a way to check the status code for errors now?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2409",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2409/comments",
    "title": "Backbone.Model.validate via callback",
    "created_at": "2013-03-20T21:38:07Z",
    "updated_at": "2013-03-21T01:48:08Z",
    "body": "There are certain cases when I want to validate my Backbone.Model values against something via AJAX. Unfortunately, Backbone's default model validation is currently done synchronously. Is it possible to convert it to a callback system instead (or offer a callback option), so that asynchronous validation is possible without having to overwrite Model save()?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2407",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2407/comments",
    "title": "Collection.fetch docs need to be updated",
    "created_at": "2013-03-20T20:12:10Z",
    "updated_at": "2013-03-20T21:09:38Z",
    "body": "The documentation on Collection.fetch needs to be updated to reflect the new default set/update behavior. \n\nThese couple lines conflict:\n\"Fetch the default set of models for this collection from the server, **resetting the collection when they arrive.**\"\n\n\"When the model data returns from the server, **the collection will be (efficiently) reset, unless you pass {set: true}**...\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2405",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2405/comments",
    "title": "className function not being called",
    "created_at": "2013-03-20T19:00:47Z",
    "updated_at": "2013-03-20T20:19:14Z",
    "body": "Backbone 0.9.10\n\nI have a className function in a view, but it's not being called.  Instead, the function's string representation is being dumped into the class attribute in the element.\n\nDid support for className get removed?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2401",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2401/comments",
    "title": "Incorporate Design Goal of Backbone.js on home page",
    "created_at": "2013-03-20T14:18:49Z",
    "updated_at": "2013-10-10T20:23:10Z",
    "body": "First off congrats everyone on the 1.0 release! Very exciting to see!\n\nAfter reading @jashkenas' post [announcing the release of Backbone.js](http://ashkenas.com/backbonejs-1.0/) I was struck by the explanation given under the \"What's the on roadmap for Backbone.js beyond 1.0?\" headline:\n\n> The essential premise at the heart of Backbone has always been to try and discover the minimal set of data-structuring (Models and Collections) and user interface (Views and URLs) primitives that are useful when building web applications with JavaScript. We're going to keep hunting for that specific type of feature, and if you think that you've found one, please send it on in. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be restructured to suit their look, feel, and default behavior \u2014 Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application.\n\nI found this to be a very clear explanation of the goals of the Backbone.js project, one that isn't mentioned anywhere in the documentation.  Currently the documentation explains what Backbone.js _is_, but not what it wants to _be_.\n\nI think adding this paragraph (or one similar) would help guide and focus the development of Backbone.js for all current and new contributors. \n\nOn the other hand...it may be un-necessary and superfluous to what is currently there, but I'd argue on the contrary. :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2396",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2396/comments",
    "title": "Docs: new method Collection.set() example \"typo\" ",
    "created_at": "2013-03-20T12:57:58Z",
    "updated_at": "2013-03-20T13:21:50Z",
    "body": "```\nvanHalen.update([eddie, alex, stone, hagar]);\n```\n\nshould be be changed to (?):\n\n```\nvanHalen.set([eddie, alex, stone, hagar]);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2394",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2394/comments",
    "title": "Router seems to call the wrong function when using the browser back/forward buttons",
    "created_at": "2013-03-20T09:27:32Z",
    "updated_at": "2013-03-20T09:33:06Z",
    "body": "Example: http://jsbin.com/etofey/3\nCode: http://jsbin.com/etofey/3/edit\n\nSteps to reproduce: \n\n1) Open the example, open the console and you should see \"defaultRoute\" logged to the console. \n2) Click on the \"Contentfactory\" link and the URL should change and it should print out \"contentfactory type id\". \n3) Now click the back button to be presented with \"defaultRoute\" again.\n4) Clicking the browser forward button the URL will change to the right one, but we'll see another \"defaultRoute\" logged to the console (the right function is not called)\n\nWorkaround:\n\nChanging the contentfactory URL/route from ContentFactory/type?id=id to ContentFactory/type/id and everything works as expected \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2392",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2392/comments",
    "title": "stopListening() did't work as expect",
    "created_at": "2013-03-20T04:39:53Z",
    "updated_at": "2013-09-25T20:35:28Z",
    "body": "```\nvar a = new Backbone.Model();\nvar b = new Backbone.Model();\n\na.listenTo(b, 'change', function () {});\na.stopListening();\n```\n\nAt this time, `a._listenerId` is empty but `b.listeners` still hold the reference to the callback function, this would lead to memory leak.\n\nI find the following commit but it seems it's still can't working correctly in the edge version.\nhttps://github.com/documentcloud/backbone/commit/86451644f03933021f63829a9d6976549e18f185\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2390",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2390/comments",
    "title": "Collection url should be dominant for collection.create()",
    "created_at": "2013-03-19T18:49:38Z",
    "updated_at": "2013-03-19T20:36:42Z",
    "body": "In many cases i want to keep my APIs as short as possible and removed unnecessary dependencies such as:\n\n```\nPOST: /api/trees/1 (returns an apple with ID 5)\nGET: /api/apples/5 (dependency to tree not needed in this API)\n```\n\nIn the upper example a \"tree\" would be the collection and an \"apple\" would be the created model. So to keep the API as simple as possible I like to give the model the urlRoot: \"/api/apples\" and the collection the url: \"/api/trees/1\".\n\nFor now always the urlRoot of the model is used if set.\nIn my opinion the url of the collection should be used when calling: myCollection.create(). \n\nI hope my example was sufficient.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2387",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2387/comments",
    "title": "Backbone.history is very difficult to write tests for",
    "created_at": "2013-03-19T14:34:19Z",
    "updated_at": "2013-03-19T17:27:37Z",
    "body": "There are two issues with Backbone.history that make it very difficult to test:\n1.  Backbone.history object does not exist until you have defined at least one route.  This makes wrapping start with a spy difficult to cleanly do a in a test\n2.  Backbone.history.start() throws an error if you call it more than once.  This is difficult if you have a situation where you want to start history management once a model (or series of models) have been loaded.  If you have tests for those models, they may trigger the event that causes history.start() to be called.\n\nThere are a couple of potential solutions:\n1.  If Backbone.history were always present, you could use a spy on start() and prevent the actual method from firing\n2.  There could be a history.stop() method that corresponds to history.start() that would allow you use an afterEach() for every test that may call history.start() that would put history management back in a state that allows for start() to be called again.\n\nIf you guys agree that these are issues that should be addressed and agree that these solutions (or others) make sense, I would be happy to make the changes and submit a pull request\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2385",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2385/comments",
    "title": "the \"request\" event is after .ajax",
    "created_at": "2013-03-18T03:36:18Z",
    "updated_at": "2013-03-18T03:52:19Z",
    "body": "```\n// Make the request, allowing the user to override any Ajax options.\nvar xhr = options.xhr = Backbone.ajax(_.extend(params, options));\nmodel.trigger('request', model, xhr, options);\nreturn xhr;\n```\n\nif the \"request\"after the .ajax method,override the Ajax options for what?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2384",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2384/comments",
    "title": "Add Backbone.Events getCallbacksCount() or hasCallbacks()",
    "created_at": "2013-03-18T00:45:44Z",
    "updated_at": "2013-03-20T14:04:12Z",
    "body": "We use Backbone.Events extensively in our application. Sometimes we would like to destroy Events object if there are no bindings left. Problem is there is no easy way to check that, as _events/_callbacks variable is \"private\" and also has been changed lately with no notice.\n\nWe would like to avoid using priv variable and have at least public method to get bindCount or just a check if there is any left. \n\nPlease let me know which one if any is ok with you guys, I can make pull-request then.\nThanks,\nTomasz\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2382",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2382/comments",
    "title": "validate not work",
    "created_at": "2013-03-16T17:46:33Z",
    "updated_at": "2013-03-18T09:19:12Z",
    "body": "hello every body,\nI use the  validate function in my script but she isn't worked !!!\n\n``` js\nvar Person =  Backbone.Model.extend ({\n  defaults: {\n    name: 'Mustapha',\n    age : 25,\n    occupation: 'web dev'\n  },\n\n  validate: function(attrs) {\n    if ( attrs.age < 0 ) {\n      return \"waw is not waw\";\n    }\n  }\n});\n```\n\nversion ==> backbone.0.9.10\nthanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2379",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2379/comments",
    "title": "Something to note about Backbone.history.navigate",
    "created_at": "2013-03-15T19:55:19Z",
    "updated_at": "2013-03-17T10:08:45Z",
    "body": "I am utilizing history with pushstates, and in the URL it requests items from our API via a middleware.  Some of those items have plus symbols (which I know is unfortunate because + is the same as a space for urlencoding).  Anytime I run a query against that item... I would return zero results (since it is asking for a space instead of a plus).\n\nI had to modify backbone very slightly to get it working\n\n``` javascript\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: options};\n      fragment = this.getFragment(fragment || '');\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n      var url = this.root + fragment.replace(\"+\", \"%2B\");\n```\n\njust added the `.replace(\"+\", \"%2B\");`\n\nTotally not a bug, but a strange edgecase you may need to be aware of.\n\nThanks for this amazing framework.  Been my goto for the last couple of years.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2377",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2377/comments",
    "title": "Don't trigger the request event if the request is cancelled?",
    "created_at": "2013-03-15T16:20:42Z",
    "updated_at": "2013-03-15T22:35:48Z",
    "body": "Is there an argument to be made for triggering the `request` event (ec97a1c) only if the request is actually made, i.e. not cancelled by a `beforeSend` returning `false` for example?\n\nPresumably backward compatibility would actually dictate adding another event which fires only if the return value of all `beforeSend` are truthy, but in general does an event indicating the actual execution of a request sound reasonable?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2376",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2376/comments",
    "title": "changedAttributes can unexpectedly return false",
    "created_at": "2013-03-15T16:13:31Z",
    "updated_at": "2013-03-17T10:15:47Z",
    "body": "Per the documentation:\n\n> changedAttributes model.changedAttributes([attributes])\n> Retrieve a hash of only the model's attributes that have changed. Optionally, an external attributes hash can be passed in, returning the attributes in that hash which differ from the model. This can be used to figure out which portions of a view should be updated, or what calls need to be made to sync the changes to the server.\n\nI was expecting to call `_.isEmpty` on the outcome of this for flow control.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2374",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2374/comments",
    "title": "model.changed and model.changedAttributes do not work as advertised.",
    "created_at": "2013-03-15T13:08:10Z",
    "updated_at": "2013-03-15T15:39:47Z",
    "body": "I see there's been a lot of back-and-forth over some recent changes to how model changes are tracked and published.  I recently upgraded and was bitten in several places in our code where we were using set() with the silent flag to build up a change set and then calling change() once to fire a single event to update views.  In my opinion, that was a very nice feature that is now gone and it would be awesome if it came back (though I realize you guys have some opinions as to why you don't want people to use silent sets, and I'm not going to argue with you on that).  However, the docs clearly state the following:\n\nhttp://backbonejs.org/#Model-set\n\n> If any of the attributes change the model's state, a \"change\" event will be triggered, unless {silent: true} is passed as an option.\n\nhttp://backbonejs.org/#Model-changed\n\n> The changed property is the internal hash containing all the attributes that have changed **since the last \"change\" event was triggered**. Please do not update changed directly since its state is internally maintained by set. A copy of changed can be acquired from changedAttributes.\n\nPer the docs, the 'changed' attributes should not be reset until a change event is triggered.  I would expect the following, then:\n\n``` javascript\nvar model = new Backbone.Model();\nmodel.set('foo', 'bar', {silent : true});\nmodel.set('bar', 'baz', {silent : true});\nmodel.set('baz', 'bing', {silent : true});\n\n/**\n * The result of this call should be\n * {\n *    foo: 'bar',\n *    bar: 'baz',\n *    baz: 'bing'\n * }\n */\nmodel.changedAttributes();\n```\n\nInstead, the result is just `{baz : 'bing'}`.  Rather than simply update the documentation to match the behavior, how difficult would it be to make the behavior match the documentation?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2373",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2373/comments",
    "title": "nested attributes don't get cloned correctly with Model.toJSON",
    "created_at": "2013-03-14T03:49:44Z",
    "updated_at": "2013-03-14T09:20:00Z",
    "body": "json = model.toJSON()\nconsole.log json.observation.read_at\n\"2013-03-13T23:30:00Z\"\n\n/\\* setting this persists it on the model itself and not the cloned object. */\njson.observation.read_at = 'FOOBAR!!'\njson = model.toJSON()\nconsole.log json.observation.read_at\n\"FOOBAR!!\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2372",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2372/comments",
    "title": "Trouble Upgrading from 0.9.2 to 0.9.10",
    "created_at": "2013-03-13T19:43:26Z",
    "updated_at": "2013-03-14T14:27:03Z",
    "body": "Hey guys,\n\nI have two questions?  The first one is sort of philosophical, but it seems like you are disregarding the [semver](http://semver.org/) conventions.  Simple example would be `setDomLibrary` is simply removed instead of deprecating it on a minor version change.  If you guys aren't using \"semver\" could you maybe elaborate on what your versioning numbers  mean or maybe why you dislike semver.\n\nThe other question is that I am using socket.io to override `Backbone.sync`, here is my method:\n\n``` js\nBackbone.sync = function(method, model, options) {\n    var event = model.route + ':' + method;\n    io.emit(event, model.toJSON(), function(data) {\n        options.success(data);\n    });\n});\n```\n\nIt seems like the signature for `options.success` has changed dramatically, and a few quick fixes did not really help.  For instance it seems to expect an `options` object, and it expects either a `Collection` or `Model`, for the `data` parameter I am inserting there.\n\nAny insight would be much appreciated.  Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2370",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2370/comments",
    "title": "Backbone model save force object refresh with server response",
    "created_at": "2013-03-13T16:32:45Z",
    "updated_at": "2013-03-14T19:50:32Z",
    "body": "Hi,\n\nI'm facing a problem using the save method from model objects. The save happens correctly and my server method \"update\" (RESTful API) returns a JSON version of my model object.\nBut my client object is not populated with the server JSON object return by the server.\nI need this because some attributes values are computed by server only.\n\nFor example i'm updating a \"userId\" attribute and the server give the username (for display) in the \"username\" attribute of my model. So when i'm saving i don't modify \"username\" but i want it to be updated with the server response\n\nAny idea ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2369",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2369/comments",
    "title": "Make ._bindRoutes a public method that takes a routes map as an attribute.",
    "created_at": "2013-03-12T23:52:07Z",
    "updated_at": "2013-03-15T05:07:30Z",
    "body": "Sometimes developers want to bind different routes mappings for different reasons. Maybe the user isn't logged in yet, or maybe the user is an admin.\n[I created a mixin](https://gist.github.com/erichiggins/5140675) that provides the same functionality of `._bindRoutes` to support this, but I believe it makes more sense to simply move that functionality into Backbone itself.\n\nSupporting this would be as simple as renaming `._bindRoutes` to `.bindRoutes`, passing it a `routeMap` parameter instead of using `this.routes`, and sending it `this.routes` [in the constructor](https://github.com/documentcloud/backbone/blob/master/backbone.js#L947).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2367",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2367/comments",
    "title": ".save changes model attributes before validate.",
    "created_at": "2013-03-12T18:26:50Z",
    "updated_at": "2013-03-20T14:07:33Z",
    "body": "Hi,\nI hope someone could enlighten me regarding the model save/validate workflow on Backbone.js. The thing is, according to the docs:\n\n> By default validate is called before save (...)\n> If validate returns an error, set and save will not continue, and the model attributes will not be modified.(...)\n\nHowever, I realise that when I call `.save` with an attributes hash it seems that the attributes are set **before** `.validate` is executed, and this should not happen according to the previous statements. But if I pass a `{ validate: true }` option all works as described, which seems to be contrary to what is described on the change log for version 0.9.10 which states:\n\n> Model validation is now only enforced by default in Model#save (...)\n\nI'm relatively new to this and I've seen this behaviour in two of my apps, and one of them is really simple. Maybe I'm missing something or I didn't understood the docs properly, so a bit of help would be much appreciated!\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2365",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2365/comments",
    "title": "There is no 'change' event on 'collections'",
    "created_at": "2013-03-12T09:06:06Z",
    "updated_at": "2014-09-15T14:40:30Z",
    "body": "I have this case, where I think there should be some sort of 'change' event on 'collections' as well.\n\nI presently have a collection of photos which are shown on a page. When the user navigate to other page, this collection is cached. Now if the user comes back to previous page, it is rendered from cached collection, In addition to that a fetch request fired to check if any new image is uploaded during this period. \n\nNow here, its really difficult to figure out if there is any changes (addition/deletion) occurred in collection. I can somehow work by putting checks in 'add' / 'remove' listener, but it'll be complex. Depending upon the data, there would be multiple 'add'/'remove' function calls, and it won't be very effective to check 'collection change' in these functions. \n\nI think there should be a simpler way to achieve this. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2364",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2364/comments",
    "title": "Bad link in index.html",
    "created_at": "2013-03-12T04:41:21Z",
    "updated_at": "2013-03-12T13:40:14Z",
    "body": "index.html line 651: \n\n<pre>\nBackbone events now support <a href=\"#Events-once\"</a>once</a>.\n</pre>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2363",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2363/comments",
    "title": "model object in save callback isn't a model?",
    "created_at": "2013-03-12T02:28:20Z",
    "updated_at": "2013-05-17T02:23:16Z",
    "body": "I'm not sure if this is a bug, or if something stranger is going on, but here's the situation:\n\nIn version 0.9.10, [line 459](https://github.com/documentcloud/backbone/blob/0.9.10/backbone.js#L459), the `model` object that jQuery passes to the callback is just a plain old javascript object (looking at the call stack), so the `parse` method obviously does not exist.  Backbone, for some reason, isn't converting the response into a model...?\n\nI've searched google and the issues pages and haven't come up with this precise issue, though there have been some similar things--which all got solved in a way I don't think I can do here, since they were mostly third-party libraries that had a different success callback arity.\n\nHow does Backbone make that model variable into an actual backbone model object, and why isn't it doing it now?\n\njQuery version is 1.9.1.\n\nBacktrace:\n\n```\nUncaught TypeError: Object #<Object> has no method 'parse' backbone.js:459\n_.extend.save.options.success backbone.js:459\njQuery.Callbacks.fire jquery.js:1038\njQuery.Callbacks.self.fireWith jquery.js:1149\ndone jquery.js:8075\njQuery.ajaxTransport.send.callback jquery.js:8599\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2359",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2359/comments",
    "title": "Model.save and patch attributes",
    "created_at": "2013-03-11T19:51:23Z",
    "updated_at": "2013-03-19T02:15:46Z",
    "body": "See example here: http://jsfiddle.net/CDu4R/1/\n\nI can't think of a use case for sending an empty bodied patch, so I think passing {} as the attrs to save with patch:true in the options should automatically send the changed attributes.\n\nEssentially, I feel that `myModel.save({}, {patch: true})` should behave the same as `myModel.save(undefined, {patch: true})`\n\nAny thoughts on this? Should I be doing `myModel.save(myModel.changedAttributes(), {patch: true})` instead?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2358",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2358/comments",
    "title": "Add the ability to remove attributes on models when syncing",
    "created_at": "2013-03-11T19:06:46Z",
    "updated_at": "2013-03-12T16:32:41Z",
    "body": "Our API omits keys with `null` values so it becomes a problem when you sync a model that have had an attribute removed on the server.\n\nHere's an example of the problem:\n\n``` javascript\nBackbone.sync = function(method, model, options) {\n  options.success(model, {id: 3, bar: 'foo'});\n}\n\nvar model = new Backbone.Model({id: 3, foo: 'bar'});\nconsole.log(model.toJSON()); // => {id: 3, foo: 'bar'}\nmodel.fetch();\nconsole.log(model.toJSON()); // => {id: 3, foo: 'bar', bar: 'foo'}\n```\n\nI would like the last line to print `{id: 3, bar: 'foo'}`. Perhaps there could be an option that is `replace: true` which would remove attributes missing from the server?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2357",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2357/comments",
    "title": "Narrative regarding Backbone.history does not appear to be accurate",
    "created_at": "2013-03-11T15:26:02Z",
    "updated_at": "2013-03-11T18:51:46Z",
    "body": "\"You shouldn't ever have to create one of these yourself \u2014 **you should use the reference to `Backbone.history` that will be created for you automatically if you make use of Routers with routes.**\"\n\nThe thing is, `Backbone.history` is created by\n\n```\n// Create the default Backbone.history.\nBackbone.history = new History;\n```\n\njust after the `._extend(History.prototype, Events, {...` block. Doesn't appear to have anything to do with use of a Router or a custom Router extension. If you include backbone.js, `Backbone.history = new History;` happens.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2355",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2355/comments",
    "title": "validation fails",
    "created_at": "2013-03-10T16:55:41Z",
    "updated_at": "2013-03-10T17:57:37Z",
    "body": "<code>\nvar Person = Backbone.Model.extend({\n    defaults: {\n        name: 'John Doe',\n        age: 30,\n        occupation: 'worker'\n    },\n\n```\nvalidate: function(attrs) {\n    if ( attrs.age < 0 ) {\n        return 'Age must be positive, stupid.';\n    }\n},\n\nwork: function() {\n    return this.get('name') + ' is working.';\n}\n```\n\n});\n</code>\nrun this code in the console:\n<code>\nvar person = new Person({name: 'ally Doe, age: 28});\n</code>\n<code>\nperson.set('age', -28);\n<code>\nno pass de validation, return the image below\n![Captura de pantalla de 2013-03-10 10:53:55](https://f.cloud.github.com/assets/1731975/241311/294d9150-89a3-11e2-8575-861eac25dadd.png)\n\nIn previews version of backbone like Backbone.js 0.9.2 the validation works and retunr false\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2353",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2353/comments",
    "title": "Don't trigger validate in 0.9.10",
    "created_at": "2013-03-09T03:46:59Z",
    "updated_at": "2013-03-13T07:27:15Z",
    "body": " Man = Backbone.Model.extend({\n                initialize: function () {\n                    alert('Hey, you create me!');\n\n```\n                this.bind(\"change:name\", function () {\n                    var name = this.get('name');\n                    alert(\"you change name\uff1a\" + name);\n                });\n\n                this.bind(\"invalid\", function (model, error) {\n                    alert(error);\n                });\n            },\n            defaults: {\n                name: 'zhagnsan',\n                age: '38'\n            },\n            validate: function (attrs, options) {\n                if (attrs.name == \"\") {\n                    return \"name cant null\";\n                }\n            }\n        });\n\n        var man = new Man();\n        man.set({ name: \"\" });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2352",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2352/comments",
    "title": "Can't save Sublime Text 2. Keep Getting Error 2? Help!?",
    "created_at": "2013-03-09T03:13:27Z",
    "updated_at": "2013-03-09T15:03:03Z",
    "body": "I have no idea what is happening but earlier today i could save just fine but now I get the following Error:\n\n[Error 2] The system cannot find the file specified\n[cmd:  [u'node', u'C:\\Users\\Weber\\Desktop\\The Real Sublime Text\\Data\\Packages/JSLint/linter.js', u'--sloppy', u'--indent', u'2', u'--node', u'--nomen', u'--vars', u'--plusplus', u'--stupid', u'--todo', u'C:\\Users\\Weber\\Desktop\\HTML,JAVA Projects\\Browser Layout.html']]\n[dir:  C:\\Users\\Weber\\Desktop\\HTML,JAVA Projects]\n[path: C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\AMD APP\\bin\\x86_64;C:\\Program Files (x86)\\AMD APP\\bin\\x86;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\Program Files (x86)\\Panda Security\\WaAgent\\Common;C:\\Program Files\\Java\\jdk1.7.0_11\\bin]\n[Finished]\n\nI don't know what is happening i am a beginner. please help.\nI am on 64 bit operating system. \nthanks for even reading this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2351",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2351/comments",
    "title": "Delete request does not send when passing the 'data' option to ajaxSetup",
    "created_at": "2013-03-09T01:53:28Z",
    "updated_at": "2013-05-29T00:09:48Z",
    "body": "When passing a `data` field into an `ajaxSetup` call like so,\n\n```\n$.ajaxSetup({\n    data: {\n        some: data\n    }\n});\n```\n\ncalling `myModel.destroy()` does not trigger a request.\n\nSeems like this fellow was having the same problem: \nhttp://stackoverflow.com/questions/10744579/backbone-js-delete-request-not-firing\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2349",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2349/comments",
    "title": "delegating events on inherited views",
    "created_at": "2013-03-08T14:40:31Z",
    "updated_at": "2013-03-09T13:29:10Z",
    "body": "I have a BaseView which defines some events delegation specifying an events hash.\n\nThen I have a CustomView (extending BaseView) that also defines their own events, by also specifying an event hash.\n\nIf I'm not wrong, BaseView's event hash is overwritten, so theirs events are not processed by delegateEvent.\n\nThe documentation says to use an events function instead of a hash to handle this case.\n\nI solved it with something like this:\n\non the parent's render method I mix the parent's events with those from the child\n\n``` javascript\n    this.delegateEvents(_.merge(this.events, {\n      'show .accordion': 'collapsePanelGroup',\n      'hide .accordion': 'collapsePanelGroup'\n    }));\n```\n\nI guess this could be a pretty common scenario, so I was wondering if it's worth the effort to add something like this to delegateEvents:\n\n``` javascript\ndelegateEvents: function(events, preserve) {\n```\n\nPassing a preserve = true, would just add this.events to events and then process, or maybe define some addEvent method\n\nWhat would be the most appropriate to hadle this scenario?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2348",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2348/comments",
    "title": "Update api",
    "created_at": "2013-03-08T13:26:01Z",
    "updated_at": "2013-03-19T14:30:25Z",
    "body": "Opening a ticket to discuss the new `update` api, which has now spilled over a decent amount into `add` internally.\n\nIn the original pull request it was implemented as a [standalone function](https://github.com/documentcloud/backbone/pull/1873/files), but with recent refactors has now been reduced to a four line function, offloading much of the work to `add`.\n\nThis puts a bit more overhead and complexity into `add`, which is a pretty hot code path when you're resetting a collection with a large number of models... I wanted to see if there were any thoughts on how this could be cleaned up a bit to keep the two separate, and if not, whether it would make sense to split out the update `update` into something of a drop-in plugin, similar to [what was done](https://github.com/documentcloud/backbone/pull/2113#issuecomment-14246396) with `{silent: true}`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2346",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2346/comments",
    "title": "Create a 1.0 milestone",
    "created_at": "2013-03-08T06:04:39Z",
    "updated_at": "2013-03-12T18:12:22Z",
    "body": "Hello, fellow contributors and watchers!\n\nI would like to propose that a 1.0 milestone be created in GitHub as another way to categorize and track open issues and pull requests. Milestones have seldom been used in the project before, but I think that they could be helpful for determining any new features or issues that are related to the eventual plans to cut a 1.0 release (or 0.10, whatever folks can agree on.)\n\nI know some areas of the library still have room to improve, but getting consistent releases out is extremely important when it comes to tracking and addressing bugs and features. The amount of time between 0.9.2 and 0.9.9 led to some headaches and oversights documenting everything that changed in those 9 commit-filled months.\n\nSo, let's create a milestone for the next release and figure out where the finish line is, so-to-speak.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2345",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2345/comments",
    "title": ".save() should return a rejected promise object for an invalid model",
    "created_at": "2013-03-08T05:44:10Z",
    "updated_at": "2013-07-16T22:52:44Z",
    "body": "Currently `Model#save` returns `false` if it fails validation.\n\n``` javascript\nvar model = new MyModel({invalid: 'attribute'});\nmodel.save().done(function() {...});\n//=> Uncaught TypeError: Object #<error> has no method 'done' \n```\n\nIt should return a rejected promise object instead of `false` if it is available. (FYI: Zepto does not provide promise object by default)\n\nIn addition, the way to notice whether a fail callback is called because of invalid or error is needed.\n\n``` javascript\nmodel.save()\n  .done(function () {\n    // success\n  })\n  .fail(function (model, resp, options) {\n    if (options.isInvalid) {\n      // invalid\n    }\n  })\n  .fail(function (model, resp, options) {\n    if (!options.isInvalid) {\n      // error\n    }\n  });\n```\n\nIf this proposal makes sense, I will send a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2343",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2343/comments",
    "title": "Collection.create saves model even if Collection.add fails",
    "created_at": "2013-03-07T20:50:23Z",
    "updated_at": "2013-03-07T22:29:15Z",
    "body": "I have many collections where I have overridden the add function so that the collection cannot contain duplicates (duplicate defined by some properties of the model, not by id). My implementation of the add function returns false to indicate that the model was not added to the collection. \n\nI would still like to be able to use Collection.create, but create ignores the return value of my add function and saves the model regardless.\n\nIs there any reason not to change\n`if (!options.wait) this.add(model, options);`\nto\n`if (!options.wait && !this.add(model, options)) return false;`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2341",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2341/comments",
    "title": "Why didn't call `model.stopListenting()` in `Collection._removeReference` when remove a model?",
    "created_at": "2013-03-07T05:09:37Z",
    "updated_at": "2013-08-16T19:08:12Z",
    "body": "This may lead to memory leak.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2339",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2339/comments",
    "title": "clean view for a collection",
    "created_at": "2013-03-06T05:52:09Z",
    "updated_at": "2013-03-06T07:55:40Z",
    "body": "###### \n\nclass Book extends Backbone.Model\nclass BookView extends Backbone.View\n    initialize: (options)->\n       @listenTo(@model, 'change', @changeCallback)\n    events: { 'click #delete-book': 'deleteBook'}\n    render: ->\nclass Books extends Backbone.Collection\n    model: Book\nclass BooksView extends Backbone.View\n    initialize: (options)->\n       @listenTo(@collection, 'add', @addCallback)\n    events: { 'click #create-book': 'createBook'}\n    render: ->\ncollection = new Books()\ncollectionView = new BooksView(collection: collection)\n###### \n\ncollectionView.off()\ncollectionView.remove()\n\nThe above two cleaning methods unbind createBook, addCallback, and remove the collection view, but do they unbind deleteBook, changeCallback on subview? If not , i have to overide BooksView remove method like this to clean view, right? Thank you, :) . Code format is lost, sorry.\n\nremove: ->\n    super\n    subviews.each (subview)->\n        subview.off() \n         subview.remove()\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2338",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2338/comments",
    "title": "Proposal to Improve Collection.model Documentation",
    "created_at": "2013-03-05T21:24:56Z",
    "updated_at": "2013-03-09T00:46:07Z",
    "body": "In a different Backbone ticket I recently learned that Backbone.model doesn't have to literally be a Model class, it can also be a factory function.  I also noticed that the current Collection.model documentation implies that you need to specify this property in order to have the collection create new models (which isn't true; if you don't specify it, plain Backbone.Models will get created).\n\nTherefore, I propose the following alternative documentation:\n\nOverride this property to specify the model class that the collection contains. You can pass raw attributes objects (and arrays) to add, create, and reset, and the attributes will be converted into a Backbone model.  If this property is set, the newly created models will be of the specified type.\n\nThis property can also be set to a factory function, which can then be used to generate different classes of models as appropriate.  This function will be passed the same parameters as the Model constructor, and should return a Model.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2337",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2337/comments",
    "title": "addAndReturn method for Collection",
    "created_at": "2013-03-05T18:13:24Z",
    "updated_at": "2013-03-05T21:24:43Z",
    "body": "Currently when you add a \"raw\" (JS literal) object to a Collection, it converts that object in to a Model and then adds it.  That's great, unless you want to do something with that model that got added.  In that case, you can't just use the return value of `add`, because 'add' just returns `this`  (as an aside, who chains off a `collection.add` call anyway?) .  Instead, you have to:\n\nA) set-up an \"add\" event handler on the collection, wait for it to get triggered, then do whatever it was you wanted to do with the added object (from a totally different place in the code than where the model got added).  And if you added multiple objects, you'll of course have multiple events to deal with\n\nB) use the `_.last` built-in to Collection to get your model back ... with the assumption being that you only added one model, and that it got added to the end of the collection\n\nBoth those solutions are potentially problematic, so I was wondering: why not add a `addAndReturn` or `addValue` or some similar method which works identically to add, only instead of returning this it would return the `add` variable inside the function.\n\nAlternatively, if you could just break backward compatibility and make `add` work as I just described, I really think that would be the best solution (but I understand that there might be _someone_ out there chaining off of `collection.add`).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2336",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2336/comments",
    "title": "Set model property in context. Fire event in context.",
    "created_at": "2013-03-05T14:29:50Z",
    "updated_at": "2013-03-05T15:10:44Z",
    "body": "Hi, let's say we have code\n\n``` javascript\nvar Model = Backbone.Model.extend({});\nvar Context = Backbone.Model.extend({});\n\nvar m = new Model({attr: \"a\"});\nvar c1 = new Context({name: \"c1\"});\nvar c2 = new Context({name: \"c2\"});\n\nm.on(\"change:attr\", function () {\n    console.log(this.get(\"name\"));\n}, c1);\n\nm.on(\"change:attr\", function () {\n    console.log(this.get(\"name\"));\n}, c2);\n\n// set attr => c1, c2 will be printed\nm.set(\"attr\", \"b\");\n// trigger event => c1, c2 will be printed\nm.trigger(\"change:attr\");\n```\n\nWould it be possible to add such feature that one can set property or trigger event in context?\n\n``` javascript\n// print only c1\nm.set(\"attr\", \"b\", {context: c1});\n// print only c2\nm.trigger(\"change:attr\", c2);\n```\n\nThanks, Radek\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2335",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2335/comments",
    "title": "Comment has outdated text",
    "created_at": "2013-03-05T13:32:47Z",
    "updated_at": "2013-03-05T14:21:27Z",
    "body": "Above `_configure` that's defined in `_.extend(View.prototype, Events, {...`:\n\n```\n// Performs the initial configuration of a View with a set of options.\n// Keys with special meaning *(model, collection, id, className)*, are\n// attached directly to the view.\n```\n\nHowever, there are other options that are directly attached. They are:\n\n```\nvar viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n```\n\nIt would make sense to either refer the reader to `viewOptions`, or to update the list in this comment.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2334",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2334/comments",
    "title": "Unmatched routes firing even there's matched route when backbone first load",
    "created_at": "2013-03-05T09:05:11Z",
    "updated_at": "2013-03-06T06:10:36Z",
    "body": "I have issue with backbone firing 'catch all' routes when the page first load, even there's match route supplied. \n\nBelow is my backbone configuration:\n\nindex.html\n\n```\n<html>\n<head>\n    <title>Routing</title>\n    <script data-main=\"js/init.js\" src=\"js/require.js\"></script>\n</head>\n<body>\n    <h1 id='title'>halo world</h1>\n    <a href=\"#/home\">Click</a>\n</body>\n</html>\n```\n\ninit.js\n\n```\nrequire.config({    \n    paths: {\n        jquery: 'jquery-1.8.2.min',\n        underscore: 'underscore', \n        backbone: 'backbone-0.9.10-min', \n        router: 'router',\n    },\n    shim: {\n        underscore: {\n            exports: \"_\"\n        },      \n        backbone: {\n            deps: [\"underscore\", \"jquery\"],\n            exports: \"Backbone\"\n        }\n    },   \n    urlArgs: \"bust=\" +  (new Date()).getTime()\n});\n\n\nrequire(['backbone','router'],function(Backbone,Router){\n    var $title = $('#title');\n    var SystemRouter = Router.extend({\n        routes:{            \n            \"test\":\"test\",\n            \"\":\"home\",\n            \"*notFound\":\"unmatched\",            \n        },\n        home:function(){\n            console.log('<home>');\n            $title.html('home');\n        },\n        test:function(){\n            $title.html('test');\n        },\n        unmatched:function(){\n            console.log('<unmatched>');\n        }\n    });\n\n    var sysRouter = new SystemRouter();         \n    Backbone.history.start({pushState: true,root:'index.html#/'});\n});\n```\n\nWhen the page load, the console log will have following:\n\n```\n<home> \n<unmached>\n```\n\nI am not sure is this a bug, or my msiconfiguration.\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2333",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2333/comments",
    "title": "Problem with Collection add where merge:true",
    "created_at": "2013-03-04T16:56:41Z",
    "updated_at": "2013-03-05T16:04:23Z",
    "body": "I understand there have been some existing issues to do with creating models in the as part of the update process in order to validate and parse against and I'm not sure if this is related.\n\nHow can the line:\nexisting.set(attrs === model ? model.attributes : attrs, options);\n\never do anything other than set attrs?\n\nIf you were expecting a parse to have reshaped the attrs then it is simply thrown away.\n\nEither attrs === model in which case nothing needs doing as the two objects are the same object reference.\n\nor I should be setting model.attributes over existing?\n\nFeel like I'm missing something here.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2332",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2332/comments",
    "title": "Handling nested models and collections",
    "created_at": "2013-03-04T15:34:21Z",
    "updated_at": "2014-01-03T19:53:15Z",
    "body": "I've been using this pattern when working with nested models and collections:\n\n``` javascript\nvar Child =  Backbone.Model.extend({});\n\nvar Parent = Backbone.Model.extend({\n    initialize: function() {\n        this.child = new Child();\n    },\n\n    parse: function(resp) {\n        console.log('in parse', this.child);\n\n        this.child.set(resp.child);\n        delete resp.child;\n\n        return resp;\n    }\n});\n```\n\nI've seen this pattern recommended several times, and it's quite close to the [example in the documentation](http://backbonejs.org/#FAQ-nested). I've also seen it mentioned several times in the issues, e.g. by @caseywebdev in https://github.com/documentcloud/backbone/issues/1929#issuecomment-11446973. This pattern has worked great for me so far.\n\nHowever, let's now say that I need to do something like this:\n\n``` javascript\nnew Parent({ child: { name: 'Kim' } }, { parse: true });\n```\n\nThis results in:\n\n![parse](https://f.cloud.github.com/assets/5259/216856/46fce87a-84d7-11e2-832a-36b147e306d2.png)\n\nThe problem is that [`parse` is called before `initialize`](https://github.com/documentcloud/backbone/blob/000f4bcd97f012da513116030cf994e17202eb67/backbone.js#L248).\n\nIs this intended? Too me it seems strange that attributes are set on the model before initialize is called. I would expect the constructor to be called first, before anything else happens.\n\nHow would you solve the example above?\n\nSome of the things I've thought about:\n- Create the child in `parse`. However, sometimes I need to bind events to it before data is fetched (or rather, I don't want the app to need to think about whether data is fetched or not)\n- Never use `{ parse: true }` in `initialize`. But then, how would I solve the parsing when I need to create the model?\n- Create a helper function, e.g. `ensureChildExists()` which creates and sets `this.child` if it does not exist already. Ugly solution.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2331",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2331/comments",
    "title": "collection.omit (or similar)",
    "created_at": "2013-03-04T12:49:19Z",
    "updated_at": "2013-03-04T15:34:07Z",
    "body": "Hello,\n\nI'm using Backbone as a collections-models manager, and aftes months using it, I've found somethig that i think is very common to use but is not implemented.\n\nWhen I populate a collection with models by a rest request, I can apply a local where but only returns models than pass the where validation, but what I need is exactly the opposite, I need that backbone return me all models except the ones than apply the conditions.\n\nI see you implement .omit function in underscore, I need somethng similar tobackbone collections.\n\nThnaks! (and sorry fot my bad english)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2329",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2329/comments",
    "title": "Backbone: Subviews, Default \u201cdiv\u201d wrapper, and Delegated Events",
    "created_at": "2013-03-03T16:06:52Z",
    "updated_at": "2013-03-08T12:43:18Z",
    "body": "Hi!!\n\nWe are trying a solution with Backbone and subviews, and after several days we are blocked in the same point. Is the next:\n\nFor example, we have two Backbone Views: A parent view (PersonView) and its subview (LocationView). Their templates, in Mustache notation, are the next (see the image):\n\n![templates code](https://f.cloud.github.com/assets/3717778/214397/4186991a-841c-11e2-8646-455cb7d13376.jpg)\n\nNOTE that these templates does NOT have a parent element; so, Backbone will asignate them the \"div\" element by default in the \"el\" property.\n\nIn PersonView's \"render\" method, How can we add the LocationView's rendered HTML into \"PersonView.el\" WITHOUT loossing LocationView's events and WITHOUT ADDING the deafult wrapping \"div\" element of \"LocationView.el\"?\n\nWe have tried many ways, and if we remove de subview's \"el\" property, we always loose the events (in the subviews), but if we keep that \"el\", then we have problems if we want to associate it with jQuery events :-(\n\nAnybody has any solution about this? Thanks in advance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2328",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2328/comments",
    "title": "Model Change Events",
    "created_at": "2013-03-03T11:32:15Z",
    "updated_at": "2013-03-06T20:51:41Z",
    "body": "It would actually be great, if events the 'change,change:[attribute]' events contained information about what exactly changed, that is something like:\n\nchange:\n{\n  old: [\n    {field1: 'hello'},\n    {field2: 'world'}\n  ],\n  new: [\n    {field1: 'world'},\n    {field2: 'hello'}\n  ]\n}\n\nI would also be good, if the change event would fire on add/delete as well.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2327",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2327/comments",
    "title": "Decoupling Backbone.Router and Backbone.history",
    "created_at": "2013-03-01T20:53:32Z",
    "updated_at": "2013-09-24T20:48:44Z",
    "body": "As a developer I'd like to use different Backbone.Router instances with custom Backbone.History objects.\n\nWhat do think about decoupling Backbone.Router and Backbone.history:\n\n``` js\n  var Router = Backbone.Router = function(options) {\n    ...\n    this.history = (options.history || Backbone.history);\n    ...\n  };\n\n   // in Backbone.Router.navigate and Backbone.Router.route\n    navigate: function(fragment, options) {\n      this.history.navigate(fragment, options);\n    },\n```\n\nDoes it make sense for anybody?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2326",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2326/comments",
    "title": "Original state of a model",
    "created_at": "2013-03-01T04:02:45Z",
    "updated_at": "2013-03-19T07:05:07Z",
    "body": "as backbone decided to remove `{silent}` potion from model::set #2113 . the model now is only maintenance its previous state. every change of an attribute has to sync to remote database. that is not good for performance.\n\nIn a common form, use edit fields and then submit to database. he may change his `user name` from 'foo' to 'halo' (previous: foo, current: halo), and then he change his mind to use 'foobar' (previous: halo, current: foobar). we do only need to take care the original state (previous: foo, current: foobar). but the original 'foo' lost.\n\nhow to solve this kind of user case\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2325",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2325/comments",
    "title": "Simple spelling mistake \"overriden\"",
    "created_at": "2013-02-28T23:54:37Z",
    "updated_at": "2013-03-01T01:29:12Z",
    "body": "\"overriden\" => \"overridden\"\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L418\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2324",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2324/comments",
    "title": "Changelog in master since 0.9.10",
    "created_at": "2013-02-28T09:28:31Z",
    "updated_at": "2013-03-19T03:29:00Z",
    "body": "Once again (see #2086) I'm doing some debugging and have discrepancies in behavior between the latest release (0.9.10) and `master` (around when `parse` gets called). I haven't been following along closely so I was hoping to see a changelog to know what intentional changes have been made.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2322",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2322/comments",
    "title": "attribute \"id\" set in JSON response but not always set in collection's models",
    "created_at": "2013-02-28T09:08:54Z",
    "updated_at": "2013-03-19T07:10:06Z",
    "body": "I'm using a collection of models.\nMy JSON returns an array of models, each on has an \"id\" attribute set.\nI'm listening the \"reset\" event and in the callback method \"addTasks\" i'm logging the collection. When i'm watching the result of the console.log some models of my collection have id \"undefined\".\n\n```\n        // Listeners for tasks collections\n        app.Tasks.bind('add', this.addTask, this);\n        app.Tasks.bind('reset', this.addTasks, this);\n        app.Tasks.bind('all', this.render, this);\n```\n\n...\n\n```\n    addTasks: function() {\n        console.log(app.Tasks); \n    },\n```\n\nI've tried to customize the idAttribute of my model class with \"idBis\" and when it's customized it works !! weird...\n\nAny ideas ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2321",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2321/comments",
    "title": "backbone don't work ASCII chrome 25.0.1364.99",
    "created_at": "2013-02-28T07:26:39Z",
    "updated_at": "2013-03-20T02:51:52Z",
    "body": "![backbone1](https://f.cloud.github.com/assets/897840/204428/1f831880-8178-11e2-9b02-3d685c57cd2b.png)\n![backbone2](https://f.cloud.github.com/assets/897840/204429/2526969a-8178-11e2-9493-4a1d3f9e3182.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2316",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2316/comments",
    "title": "A possibility to override attribute assignment in Model#set",
    "created_at": "2013-02-26T20:34:28Z",
    "updated_at": "2013-06-19T14:50:29Z",
    "body": "The attribute assignment in `Model#set` is now just this simple:\n\n``` javascript\nunset ? delete current[attr] : current[attr] = val;\n```\n\nThere are cases when it would be convenient to override the assignment.\nFor example, when `Model#set` is called from `Collection#update` (merge), and the object structure is like this (it would be in CoffeeScript to be brief):\n\n``` coffeescript\n\nclass A extends Model\n    // attributes: attr1, attr2\n\ncollA = new Collection([{ id: \"a1\", attr1: 1 }], {model: A})\n\nclass B extends Model\n    // attribute: collA\n\ncollB =  new Collection([{ id: \"b1\", collA: collA }], {model: B})\n```\n\nSuppose, we have some new data for `collB` (some attributes of `A` instance in `collA` collection had been changed somewhere):\n\n``` javascript\nstate = [{ \n   id: \"b1\",\n   collA: [ { id: \"a1\", attr2: 2 }]\n}]\n```\n\nWe want to _update_ the state of `A` instances in `collA`\n\n``` coffeescript\ncollB.update(state, {add: false, remove: false})\n```\n\nThis will _overwrite_ `collA` attribute in `B` instance. The intention was to _update_ the collection instead. It would be possible if the assignment in `Model#set` is abstracted, something like:\n\n``` javascript\nunset ? delete current[attr] : this.update(attr, val, options);\n.....\n\nupdate: function (attr, val, options) {\n     this.attributes[attr] = val;\n}\n```\n\nSo it would be possible to override it in `B`:\n\n``` coffeescript\nclass B extends Model\n    update: (attr, val, options) ->\n        if attr == \"collA\"\n            collA = @get \"collA\"\n            if collA\n                collA.update(val, options)\n                return\n        super\n```\n\nWhat do you think? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2315",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2315/comments",
    "title": "Complex model fields are returned by reference by `toJSON`",
    "created_at": "2013-02-26T17:26:53Z",
    "updated_at": "2015-03-30T23:29:21Z",
    "body": "If your model contains some complex data in some of its fields (say some nested simple objects) then the object returned by `toJSON` will refer to these by reference. So if you mess around with the values in your `toJSON` object then you are inadvertently silently poisoning your model data directly.\n\nHere's an example:\n\n``` javascript\n// Init model with data object\nvar model = new Backbone.Model({\n    simpleValue: \"foo\",\n    objectValue: {\n        subObject: {\n            nestedValue: \"bar\"\n        }\n    }\n});\n\n// Create a toJSON representation\nvar modelJSON = model.toJSON();\n\n// Change some values in your toJSON object\nmodelJSON.simpleValue = \"baz\";\nmodelJSON.objectValue.subObject.nestedValue = \"baz\";\n\nconsole.log(model.get(\"simpleValue\")); // returns \"foo\", as expected\nconsole.log(model.get(\"objectValue\").subObject.nestedValue); // returns \"baz\", lolwut?\n```\n\nSo it seems like `toJSON` is returning references to complex objects in the model, not clones. Is that desired behaviour? It just took me ages to track down this issue. I was doing some post-processing and calculations on some to `toJSON` results before sending back to the server expecting it to be free of repercussions ...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2314",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2314/comments",
    "title": "A hook to provide names for child items (useful for debugging)",
    "created_at": "2013-02-26T17:00:53Z",
    "updated_at": "2013-02-27T16:54:26Z",
    "body": "Pardon if I'm not going about this right as I'm new to joining in on community projects. :)\n\nI posted a question over on stack overflow about changing the name chrome uses to label children in it's dev tools.  By default, they're all called 'child' in backbone as a result of the extend function.   \n\nI received some great responses and even a monkey patch for allowing a developer to insert their own name using a__name__ property.   I wonder if this type of functionality might be a candidate for inclusion by default.\n\nReferred to post: http://stackoverflow.com/questions/14866014/debugging-javascript-backbone-and-marionette/\n\nThanks for the input\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2313",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2313/comments",
    "title": "model.change removed from 0.9.10?",
    "created_at": "2013-02-26T16:42:12Z",
    "updated_at": "2013-03-19T07:13:41Z",
    "body": "Why was model.change removed from 0.9.10?  We're building a python based big data visualization library, where we push models down over websockets from python, and render a graph of models into a variety of plots.\n\nWe have infrastructure for interdependent computed properties which facilitate interactions on the plots.\n\nwhen we push models down from the server, we instantiate them all, set all the attributes silently, and call change on all of them.  This allows us to ensure that all the interdependent models are ready before the change events fire.\n\nWe can easily add change into our superclass, is there something wrong though with using the approach to model.change that will break in the future?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2312",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2312/comments",
    "title": "Consistent returns from all branches of the eventsApi method",
    "created_at": "2013-02-26T08:12:14Z",
    "updated_at": "2013-02-27T06:58:26Z",
    "body": "Hi all,\n\nRight now some branches of `eventsApi` return `undefined` because those branches do not have explicit return statements, while a couple of other branches return `true`. Not a deal-breaker, but unless there's a good reason why not to, adding explicit return statements will make the code more readable and less surprising/confusion:\n\n``` javascript\nvar eventsApi = function(obj, action, name, rest) {\n    if (!name) return true;\n    if (typeof name === 'object') {\n      for (var key in name) {\n        obj[action].apply(obj, [key, name[key]].concat(rest));\n      }\n      return false; // <-- here\n    } else if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return false; // <-- here\n    } else {\n      return true;\n    }\n  };\n```\n\nCheers,\nBehrang\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2310",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2310/comments",
    "title": "What does the sign <%- %> mean?",
    "created_at": "2013-02-25T03:15:09Z",
    "updated_at": "2013-02-25T03:26:07Z",
    "body": "In the example Todos,what does <%-title%> mean,does is equal to <%=title%>?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2309",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2309/comments",
    "title": "How to send data to JAVA actions in Backbone",
    "created_at": "2013-02-25T01:59:06Z",
    "updated_at": "2013-02-25T02:42:49Z",
    "body": "For example,I can get data from JAVA action by fetch method,but how can I save a model to JAVA action?How to use the save method?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2306",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2306/comments",
    "title": "Collection.destroy() with a range",
    "created_at": "2013-02-22T13:58:15Z",
    "updated_at": "2013-02-24T05:11:44Z",
    "body": "Right now deleting models within a collection seems to require separate `DELETE` requests, would it be better if `Collection` had a `destroy` method that takes an array of models, get their IDs, put them in an `If-Match` header and send just one `DELETE` request to the server for mass delete?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2305",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2305/comments",
    "title": "Maybe a bug in model.get(), model.set() - maybe intention",
    "created_at": "2013-02-22T10:20:09Z",
    "updated_at": "2013-02-26T18:47:33Z",
    "body": "Hey,\nI am not sure if this is happening by design or a bug.\n\nI want to retrieve a value from a model, modify it and then set it back to the model, for example like so:\n\n```\nvar members = mymodel.get('members');\nmembers.push('somebody');\nmymodel.set('members', members);\n```\n\nThe problem is: since the value is returned by reference, my `members.push()` directly affects the content of `mymodel.attributes.members`.\nWhen I call the `mymodel.set()`, it won't trigger a change event, since it assumes that the model has already been changed.\n\nI would assume that .get() returns a clone of the model value to avoid unintended changes of the model. If this is the desired behavior, I would suggest to add a little notice in the docs of the `model.get()` function.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2303",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2303/comments",
    "title": "_.bindAll in BackboneCollection causes error: Uncaught TypeError: Cannot read property 'idAttribute' of undefined",
    "created_at": "2013-02-21T16:56:44Z",
    "updated_at": "2013-02-21T18:26:11Z",
    "body": "This worked in previous versions, so I don't know if this is a bug, or if I shouldn't be doing this.\n\n``` javascript\nvar Model = Backbone.Model.extend({});\n\nvar Collection = Backbone.Collection.extend({\n    model: Model,\n\n    initialize: function(){\n        _.bindAll(this);\n    }\n});\n\nvar collection = new Collection();\nvar model = new Model();\ncollection.add(model);\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2302",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2302/comments",
    "title": "Error at previous attributes when you do some sets in the same model. ",
    "created_at": "2013-02-21T12:30:18Z",
    "updated_at": "2013-02-25T23:59:03Z",
    "body": "Related with #2301, \nIf we have this model { code : 2, text : \"hi\", value : 20 }\nand we do some sets on a model as:\n\nmodel.set(\"text\",\"good bye\");\nmodel.set(\"code\",1);\nmodel.set(\"text\",\"hello again\");\nmodel.seet(\"value\",25);\n\nand then we ask to\n\nmodel.previousAttributes()\n\nthen this returns \n\n{ code : 1, text : \"hello again\", value : 20 }  but this must be {code: 2, text : \"good bye\", value: 20}\n\nThe method set is overriding the previous attributes in each call without checking if each attribute is changed or not. The previous attributes must contains the previous value of each property independently of the other property changes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2301",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2301/comments",
    "title": "Error at model.changedAttibutes, because is cleaning change in each set. ",
    "created_at": "2013-02-21T12:18:15Z",
    "updated_at": "2014-11-07T11:27:08Z",
    "body": "If we do some sets on a model as: \n\nmodel.set(\"code\",1);\nmodel.set(\"text\",\"hello\");\nmodel.seet(\"value\",25);\n\nand then we ask to \n\nmodel.changedAttributes(); \n\nthis returns { \"value\":25 }\n\nwhen it must be \n\n{\"code\" : 1,\"text\":\"hello\",\"value\":25}\n\nthis is because the actual behavior of the method set is clear \"changed\" property without check if changed already has something and then changed only has the last changed. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2300",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2300/comments",
    "title": "Bind _ (underscore.js lib) to Backbone so it can be set/parsed like $",
    "created_at": "2013-02-20T17:46:21Z",
    "updated_at": "2013-02-26T00:05:23Z",
    "body": "I'm happy to do a pull request for this if there is a consensus...\n\nExplanation of proposition:\n\nI'm using Backbone and therefore it's dependencies embedded on external websites (JS Widget). All code is encapsulated and noConflict used where possible, however using Underscore's noConflict prevents Backbone from finding it, and without binding to the Backbone object it's not trivial to help Backbone find it.\n\nYour thoughts,\n\nKind regards,\n\nGareth\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2297",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2297/comments",
    "title": "Allowing model.get to return multiple attributes",
    "created_at": "2013-02-20T14:16:02Z",
    "updated_at": "2013-02-20T15:23:45Z",
    "body": "I've written an improved version of `model.get` to return a hash of attributes when passed an array.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2296",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2296/comments",
    "title": "Error at collection.get with a model with id = 0.",
    "created_at": "2013-02-20T13:55:34Z",
    "updated_at": "2013-08-12T13:27:05Z",
    "body": "If I have a model with id = 0, and I try to find in its collection the method get don't find it. \nIf my model is {id=0, cid=\"c15\", value=\"text\"} and I do\ncollection.get(model);\nReturns undefined.\nBecause in the collection there are a this model {id=0, cid=\"c23\", value=\"text\"} and at method get in this line:\n\nreturn this._byId[obj.id || obj.cid || obj[this._idAttr] || obj];\n\nJavascript takes obj.id like a false and take the value of obj.cid but this id isn't in the collection. \nIn our application is a recurrent problem and we need to patch all models. \n\nThere are a close issue #103 that talks about the same problem. But it's 2 years old and maybe the error is happen again.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2295",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2295/comments",
    "title": "model.save({ ... }, { wait: true }) doesn't work with jQuery 1.9.1",
    "created_at": "2013-02-20T12:04:31Z",
    "updated_at": "2013-02-20T13:02:42Z",
    "body": "```\nmodel.save({ ... }, { wait: true })\n```\n\ndoes <b>NOT</b> work with jQuery 1.9.1. While\n\n```\n model.save({ ... })\n```\n\n<b>WORKS</b>.\n\nDetails: model.save({ foo: \"bar\" }, { wait: true }) method sends data to server for saving (including pair foo: \"bar\"), server saves it, but when he responds, nothing happens. <b>No \"change\" event is triggered</b>. Model still has { foo: \"something old\" } in attributes.\n\nmodel.save({ foo: \"bar\" }) works as expected, triggering \"change\" event immediately. \n\nIt happened while migrating from jQuery 1.7.1 to 1.9.1. With jQuery 1.7.1 everything worked as expected.\n\nThere is some \"jQuery Migrate plugin\" made for these purposes:\n\n<i>\"Use the uncompressed development version to diagnose compatiblity issues, it will generate warnings on the console that you can use to identify and fix problems.\"</i>\n\nSo I used it, when saved it generated warning:\n\n<i>JQMIGRATE: Logging is active jquery-migrate-1.1.1.js:21\nJQMIGRATE: jQuery.parseJSON requires a valid JSON string jquery-migrate-1.1.1.js:40\nconsole.trace() jquery-migrate-1.1.1.js:42\nmigrateWarn jquery-migrate-1.1.1.js:42\njQuery.parseJSON jquery-migrate-1.1.1.js:222\najaxConvert jquery-1.9.1.js:8246\ndone jquery-1.9.1.js:8050\njQuery.ajaxTransport.send.callback jquery-1.9.1.js:8598</i>\n\nHave to say, with jQuery Migrate plugin model.save({...}, { wait: true }) works, because it provides backwards compatibility, but that`s not the point.\n\nVersions of libraries I used:\n\njquery 1.9.1\njson2 from 2012-10-08\nunderscore 1.4.4\nbackbone 0.9.10.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2293",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2293/comments",
    "title": "\"off(null, null, context)\" doesn't work as expected (fix proposed)",
    "created_at": "2013-02-19T19:13:34Z",
    "updated_at": "2013-02-19T22:43:37Z",
    "body": "Default \"off\" behavior removes all context if \"callback\" is null. There is no way to filter out by CONTEXT.\nHere is proposed solution (as a separate function) that works for me\n\n```\noffByContext: function (context) {\n    var calls, node;\n    var calls = this._callbacks;\n    for (var eventName in calls) {\n        var node = calls[eventName];\n        delete calls[eventName];\n        // Create a new list, omitting the indicated event/context pairs.\n        while ((node = node.next) && node.next) {\n            if (node.context === context) continue;\n            this.on(eventName, node.callback, node.context);\n        }\n    }\n    return this;\n},\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2292",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2292/comments",
    "title": ".extend() only works once",
    "created_at": "2013-02-19T16:46:42Z",
    "updated_at": "2013-02-19T17:51:28Z",
    "body": "```\nvar View_Type = Backbone.View.extend({});\nvar Sub_Type = View_Type.extend({});\n```\n\nThis will fail, since the returned function ( `function(){ return parent.apply(this, arguments); }` ) does not itself have the extend method bound to its prototype.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2291",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2291/comments",
    "title": "A puzzle of listenTo method",
    "created_at": "2013-02-19T14:28:59Z",
    "updated_at": "2013-02-19T15:23:07Z",
    "body": "When I was writing a web app using backbone.js, I found a very strange problem of listenTo method.\nWhen call listenTo method one by one like:\n\n``` javascript\nthis.listenTo(this.models[0], 'test', function(msg) {\n  console.log('model: ',this.models[0].get('name'), msg);\n});\nthis.listenTo(this.models[1], 'test', function(msg) {\n  console.log('model: ',this.models[1].get('name'), msg);\n});\n```\n\nNo problem happen.\n\nBuf if I wrote it like this:\n\n``` javascript\nfor(var i=0;i<this.models.length;++i) {\n  var m = this.models[i];\n  this.listenTo(m, 'test', function(msg) {\n    console.log('model: ',m.get('name'), msg);\n  });\n}\n```\n\nThe some problem happen:\nNo matter which model in this.models occur a 'test' event, the event-handler will be called with the object m as the last one in this.models, not this.models[i]\n\nMy demo code is bellow:\n\n``` javascript\nvar ModelA = Backbone.Model.extend({\n    initialize: function() {\n\n    }\n});\nvar ModelB = Backbone.Model.extend({\n    initialize: function() {\n        this.models = []\n    },\n    startListen: function() {\n        // if call this.f1, the console will output:\n        // model: ma2haha, model: ma2heihei\n        // Bug if call this.f2, the console will output:\n        // model: ma1haha, model: ma2heihei\n        this.f1();\n    },\n    f1: function() {\n        for(var i=0;i<this.models.length;++i) {\n            var m = this.models[i];\n            this.listenTo(m, 'test', function(msg) {\n                console.log('model: ',m.get('name'), msg);\n            });\n        }\n    },\n    f2: function() {\n        this.listenTo(this.models[0], 'test', function(msg) {\n            console.log('model: ',this.models[0].get('name'), msg);\n        });\n        this.listenTo(this.models[1], 'test', function(msg) {\n            console.log('model: ',this.models[1].get('name'), msg);\n        });\n    },\n    addModel: function(model) {\n        this.models.push(model);\n    }\n});\nvar a1 = new ModelA({\n    name: \"ma1\"\n});\nvar a2 = new ModelA({\n    name: \"ma2\"\n});\nvar b = new ModelB();\nb.addModel(a1);\nb.addModel(a2);\nb.startListen();\na1.trigger('test', 'heihei');\na2.trigger('test', 'heihei');\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2290",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2290/comments",
    "title": "Character encoding on hash for Firefox",
    "created_at": "2013-02-19T13:49:43Z",
    "updated_at": "2013-02-19T14:11:23Z",
    "body": "As per diff files @ v0.9.2:\nhttps://github.com/documentcloud/backbone/commit/07604deac0b6e00492d62b9523c19f74e5bd7542\nhttps://github.com/documentcloud/backbone/commit/402508d80f7f0cac8ec57ae727ed8bb0428728a2\n\n![Untitled-1](https://f.cloud.github.com/assets/364033/171457/fc0f9988-7a9b-11e2-9819-5d7ce53dee18.png)\n\nThis causes a bug, because href is \"encoded\" in a different charset, it's the common utf-8 versus iso-8859-1 problem with the point we cannot fix it from there.\n1. `location.href` (which is used to get the hash in FF) is encoded wrongly. After unescaping value it gets `espa\u00c3\u00b1ol`\n2. `location.hash` is encoded right (value is `espa\u00f1ol`) but not used due to previously mentioned commits. Escaping \u00f1 letter corresponds to %F1, different than #1.\n\nIt might be a Firefox bug, but either way, it could be nice to support all UTF-8 characters, including the ones on Spanish, French, Italian and other languages.\n\nI was debugging but couldn't find a solution. As soon as everyone finds one stable and backwards compatible, let's do a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2289",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2289/comments",
    "title": "The passed options.error is not triggered if the model is invalid",
    "created_at": "2013-02-19T13:04:31Z",
    "updated_at": "2013-03-04T16:14:24Z",
    "body": "I am not sure that is a bug or a feature. I upgraded from 0.9.2 to 0.9.10 and if my model can't be saved, my options.error event is not trigger. \n\ni.g.\n\nsave({...},{error:function()..., success:function()...)\n\nThe \"problem\" is in _validate(). The comment is:\n\n```\n// Run validation against the next complete set of model attributes,\n// returning `true` if all is well. If a specific `error` callback has\n// been passed, call that instead of firing the general `\"error\"` event.\n```\n\nBut in the current version, the event isn't triggered anymore. The code is changed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2288",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2288/comments",
    "title": "Standard Web Application ",
    "created_at": "2013-02-19T10:32:16Z",
    "updated_at": "2013-02-19T13:12:32Z",
    "body": "give me correct structure of a web application that is built in struts2 and hibernate .i mean to say........................tmw i will say\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2287",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2287/comments",
    "title": "add event fired multiple times on collection",
    "created_at": "2013-02-19T08:36:51Z",
    "updated_at": "2017-10-03T15:14:32Z",
    "body": "when listening to a collection's add event, the callback is triggered not once per `collection.add([model1, model2, model3])` but once for every model added individually.\n\nin my use case I want to add a bunch of models to a collection and then re-render my view once all models have been added. Backbone simply proxies through model events though so if you add 50 models to a collection, the add event is called 50 times and thus the whole view is rendered 50 times. This is unexpected behaviour since the collection method only takes arrays of models:\n\n``` javascript\ncollection.add([model1, model2, model3])\n```\n\nrather than passing them in individual:\n\n``` javascript\ncollection.add(model1);\ncollection.add(model1);\ncollection.add(model2);\n```\n\nI expect the same to be reflected in the event callback since I'm not listening to the model but the collection as a whole. \n\nIs there currently a clean way of adapting a collection to support this behaviour or is this something that could be added into the core? I know this is expected behaviour at the moment so I'm not raising it as a bug but I'm not sure how useful it currently is. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2277",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2277/comments",
    "title": "Shouldn't .get() return a copy of the attributes data?",
    "created_at": "2013-02-15T14:34:29Z",
    "updated_at": "2013-02-15T14:38:18Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2276",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2276/comments",
    "title": "Using listenTo() and _.bindAll() causes memory leaks",
    "created_at": "2013-02-15T12:57:53Z",
    "updated_at": "2013-02-15T15:24:56Z",
    "body": "Hello!\n\nToday I ran into another GC related issue. \nApparently, Backbone.View does not get garbage collected if I do something like this in `initialize()` method:\n\n```\n_.bindAll( this, \"someMethod\" );\nthis.listenTo( this.collection, \"reset\", this.render );\n```\n\nIf I remove one of these lines, the view gets GC'ed.\nHere's [jsfiddle](http://jsfiddle.net/artur_charcenko/mNTsL/4/) that replicates the problem. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2275",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2275/comments",
    "title": "Detect full page load vs navigation/route event",
    "created_at": "2013-02-14T23:05:27Z",
    "updated_at": "2015-07-31T07:58:57Z",
    "body": "I wanted the ability to determine if the code is being run on a full page load vs a route event.   My use case is so I can load a full page of content that would normally be loaded by fetching the model and updating the view.\n\nI still want the route to fire so I can pre-fetch some other content, so passing silent:true to the history.start function won't work.  I came up with a solution that modifies the Backbone.history object's navigate method to set a flag. I also added a function to return the variable.  Before doing a pull request I wanted to see if there was an alternative.\n\nvar first_load = true;\nBackbone.history.isFirstLoad = function() {\n    return first_load;\n}\n\nvar origNavigate = Backbone.history.navigate;\nBackbone.history.navigate = function(fragment, options) {\n    first_load = false;\n    origNavigate.call(this, fragment, options);\n}\n\nLater to use it I have something like this:\n\npRouter.on('route:showProjects', function() {\n    Projects = new projectsList({ el: $(\"#content\")});\n    if(!Backbone.history.isFirstLoad()) {\n        //attach the reset event if this is a navigate call, so the view will be rendered\n        Projects.attachReset();\n    }\n    //get the data anyway\n    Projects.fetch();\n});\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2273",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2273/comments",
    "title": " parameter 'invalid' in options when using collection.create",
    "created_at": "2013-02-14T13:48:25Z",
    "updated_at": "2013-03-19T05:14:13Z",
    "body": "if Model validation fails then the 'invalid' event is fired from the model...but if we are using collection.create, we do not have a reference to model yet:\n\ncreate: function(model, options) {\n   ...\n   model.save(null, options);\n   return model;\n}\n\nwe currently have success and error parameters for the options object...can we add an invalid parameter to handle this case?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2272",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2272/comments",
    "title": "collection.create not passing model attributes to validate correctly",
    "created_at": "2013-02-14T13:06:42Z",
    "updated_at": "2013-02-14T13:21:28Z",
    "body": "I am trying to create a model like this:\n\nstore.create(values,{\n   wait: true,\n   success: function (model, data, options)\n   {}\n});\n\nI see in Collection.create that the model is being created and the attributes are being assigned.\n\nHowever, the call to save is made like this:\nmodel.save(null, options);\n\nand therefore, when validate is called here:\nif (!this._validate(attrs, options)) return false;\n\nthen 'attrs' is null, and my validate fn is not receiving them.\n\nAm I doing something wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2269",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2269/comments",
    "title": "Collection does not get garbage collected",
    "created_at": "2013-02-14T07:20:32Z",
    "updated_at": "2013-05-14T17:48:10Z",
    "body": "I have this code:\n\n```\nrequire([\n        \"jquery\",\n        \"backbone\",\n        \"underscore\"\n], function( $, Backbone,  _ ) {\n    var MainView, SubView, Collection, Model, main;\n\n    MainView = Backbone.View.extend({\n        events: {\n            \"click [data-role=add]\": \"addSubview\",\n            \"click [data-role=remove]\": \"removeSubview\"\n        },\n        addSubview: function() {\n            if ( this.subview instanceof Backbone.View ) {\n                this.removeSubview();\n            }\n            this.subview = new SubView({ collection: new Collection() });\n            this.subview.$el.appendTo( this.$(\".subview\") );\n            this.subview.render();\n        },\n        removeSubview: function() {\n            if ( this.subview instanceof Backbone.View ) {\n                this.subview.remove();\n                this.subview = null;\n            }\n        }\n    });\n\n    Model = Backbone.Model.extend();\n\n    Collection = Backbone.Collection.extend({\n        model: Model,\n        url: \"/models.json\"\n    });\n\n    SubView = Backbone.View.extend({\n        initialize: function() {\n            this.collection.fetch();\n        },\n        render: function() {\n            this.$el.html(\"<div></div>\");\n        }\n    });\n\n    main = new MainView({ el: \"#main-view\" });\n\n});\n```\n\nWhen I add and remove SubView, it is removed from the memory. But it's collection and models stay. If I remove `this.collection.fetch();` from initialize(), collection gets garbage collected.\n\n![Screen Shot 2013-02-13 at 9 51 37 PM](https://f.cloud.github.com/assets/1040378/155900/78080cf2-7676-11e2-9487-cc475ff34f5c.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2268",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2268/comments",
    "title": "Collection.update leads to a large number of `add` and `remove` events",
    "created_at": "2013-02-14T02:57:31Z",
    "updated_at": "2014-09-15T14:40:30Z",
    "body": "Here is the thing:\nvar collection = new Backbone.Collection({...});\n\ncollection.on('add', function() {\n    // Operate DOMs\n});\n\ncollection.on('remove', function() {\n    // Operate DOMs\n});\n\ncollection.update({...});\n\nWhen the `update` function trigger a large number of events will lead to a performance problem. Is there any way too solve this? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2265",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2265/comments",
    "title": "added array in the add event callback for collection",
    "created_at": "2013-02-13T04:51:19Z",
    "updated_at": "2015-02-20T19:50:36Z",
    "body": "When adding multiple items to a collection it would be helpful have the array of models that were added in the `add` callback. Maybe in options? The following is how it might work\n\n``` javascript\nsomeRandomCollection.on(\"add\",callback);\n\nfunction  callback(model, collect, options) {\n        //last model added do something\n       if(model === _.last(options.added)){\n           dosomething()\n       }\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2263",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2263/comments",
    "title": "Model.clone() overwrites null attributes if default attribute value exists",
    "created_at": "2013-02-12T15:48:01Z",
    "updated_at": "2013-02-12T15:50:33Z",
    "body": "The following seems like unexpected behavior and is causing some issues for us:\n\n``` js\nvar Model = Backbone.Model.extend({'a': 1});\nvar model = new Model();\nmodel.set('a', null); // model.attributes is now { 'a': null }\nvar clone = model.clone(); // clone.attributes is now { 'a': 1 }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2260",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2260/comments",
    "title": "Question on REST server, cURL, and Backbne.js",
    "created_at": "2013-02-11T16:59:26Z",
    "updated_at": "2013-02-12T12:21:12Z",
    "body": "I am currently developing an application receives the data via a cURL  call.\nHowever, the URL does not change from the return URL that was used for the data request from the remote server.\nExample: http://SERVER/index.php/API/controller/method/.\n\nI receive the data with no problem, but now I am stuck trying to get the Backbone routing to work.\nHere is my routes:\n    routes:{\n        \"\": \"getData\",\n        \"init/\": \"initData\",\n        \"start/\": \"start\"\n    },\n\nHere is my CONTROLLER/METHOD from my REST controller class:\n        $data['id'] = $this->get('id');\n        $data['src'] = $this->get('src'); // URL of the account that started the application\n        $data['md5'] = md5($this->get('id').$sharedID); // MD5 for validation on remote server\n        $data['url'] = The URL that is used for the data request is created here.\n\n```\n    if(isset($_REQUEST['value']))\n    {\n        $datas = $_REQUEST['value'];\n    }\n\n    // add the created URL as a cookie to use in the CONTROLLER/start\n    $this->session->set_userdata('dataurl', $data['url']);\n    // Redirect to the start_get method.\n    redirect('http://icma.imapp.com/index.php/api/cma/start/');\n```\n\nSo here is the problem, I can get either the hash requests or absolute URL request to work, but not both. Any ideas on what I am missing?\n\nPlease let me know if you have any questions.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2259",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2259/comments",
    "title": "Collection::Parse not supported when initializing a collection",
    "created_at": "2013-02-11T15:32:41Z",
    "updated_at": "2013-02-11T16:08:26Z",
    "body": "It appears that parsing behavior is inconsistent when initializing models vs. collections.  If I pass {parse:true} when initializing a collection, I would expect the _collections_ parse method to me called if implemented (similar to the way it's called when resetting a collection).  I would then expect each models initializer (and parse method) to be called.  Am I misunderstanding the use case?  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2258",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2258/comments",
    "title": "options.parse is missing in the documentation",
    "created_at": "2013-02-11T13:29:48Z",
    "updated_at": "2013-03-19T10:48:55Z",
    "body": "Should be mentioned there, especially in the section Model -> constructor / initialize, because it simplifies things very much when dealing with (deeply) nested models.\n\nJust found it in the annotated source code (which I like very much) and later on in several discussions over here, but its missing in the official documentation...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2257",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2257/comments",
    "title": "Breaking codebase into smaller modules ?",
    "created_at": "2013-02-11T09:25:20Z",
    "updated_at": "2013-02-11T22:12:46Z",
    "body": "Hello,\n\nI often have the need only to use Events, Models and Collections on my projects,  without using Views, Router, History or Sync.   Are there any plans on breaking the Backbone code-base into these kind of modules so developers can pick the parts to use ? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2256",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2256/comments",
    "title": "No option for parsing data when initializing a model",
    "created_at": "2013-02-10T14:14:51Z",
    "updated_at": "2013-02-10T14:23:36Z",
    "body": "There's an option to parse data {parse:true} when initializing a collection, but there's no similar option when initializing a model.  \n\nIn my application I have to support:\n- Creating either a simple model or a collection, then subsequently fetching data from the server\n- Creating either a model or a collection inline by providing a JSON object to the initialize method\n\nIn both cases, the JSON requires some massaging.  Parsing works as I'd expect for the first case; it's called after fetch so I can cleanup the response.\n\nHowever, for the second case the behavior feels inconsistent.  When initializing a collection I can specify {parse:true}. When initializing an individual model {parse:true} is not an option.\n\nWould it make sense to add {parse:true} as an option when initializing a model? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2255",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2255/comments",
    "title": "Extend Router.routes rather than overwriting",
    "created_at": "2013-02-10T00:37:47Z",
    "updated_at": "2013-11-05T20:08:18Z",
    "body": "Let's say I extend the `Router` class and define some generic routes that I'll always want:\n\n``` javascript\nvar CustomRouter = Backbone.Router.extend({\n    routes: {\n        \"help\":                 \"help\",    // #help\n        \"search/:query\":        \"search\",  // #search/kiwis\n        \"search/:query/p:page\": \"search\"   // #search/kiwis/p7\n    }\n});\n```\n\nAnd then I create an instance of my `CustomRouter` class, but pass a few page-specific routes to the constructor:\n\n``` javascript\nvar router = new CustomRouter({\n    routes: {\n        \"tab:tabNumber\":                 \"loadTab\",   // #tab2\n        \"sort/:sortBy\":                  \"sortTable\"  // #sort/firstName\n    }\n});\n```\n\nThe problem is that the `Router` constructor completely overwrites the default `routes` property with the new `routes` that were passed to the constructor.  I think the two lists of routes should be merged instead.  This would require changing the following line of code in the `Router` constructor:\n\n``` javascript\nif (options.routes) this.routes = options.routes;\n```\n\n...to this instead:\n\n``` javascript\nif (options.routes) this.routes = _extend(this.routes || {}, options.routes);\n```\n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2253",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2253/comments",
    "title": "stopListening(null, name, ..) leaks event listeners",
    "created_at": "2013-02-08T23:52:30Z",
    "updated_at": "2013-02-09T07:19:10Z",
    "body": "Please see my comment: https://github.com/documentcloud/backbone/commit/179887e11683a7efeea5614c50ed8bea3659af2b#commitcomment-2590636\n\nRepeated for this bug report:\n`this._listeners = {}` will cause \"leaked\" event listeners.\nExample: `me.listenTo(you, 'change'); me.listenTo(you, 'sleep'); me.stopListening(null, 'sleep');` causes `me._listeners = {}` but `me` is still listening to `you:change`\n\n```\nvar Person = Backbone.Model.extend(),\n    you = new Person(),\n    me = new Person()\n\nme.listenTo(you, 'change', function() {\n    console.log('you changed!')\n})\nme.listenTo(you, 'sleep', function() {\n    console.log('wake up!')\n})\nconsole.log('listening',me._listeners) // Expect a non-empty hash, correct.\n\nyou.set({name:'Bob'}) // Expect 'you changed!', correct.\nyou.trigger('sleep')  // Expect 'wake up!', correct.\n\nme.stopListening(null, 'sleep')\nyou.trigger('sleep') // Expect silence, correct.\n\nconsole.warn('no more?', me._listeners) // Expect a non-empty hash (still listening for you:change), INCORRECT (notice an empty hash).\nyou.set({name:'Charly'}) // Expect 'you changed!', correct.\n\nme.stopListening();\nconsole.warn('Need absolute silence', me._listeners)\nyou.set({name:'Gloria'}) // Expect silence, INCORRECT.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2252",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2252/comments",
    "title": "Does Model.save(.., options) assume {validate:false}?",
    "created_at": "2013-02-08T02:24:15Z",
    "updated_at": "2013-02-08T02:51:25Z",
    "body": "I noticed that Model.save fowards the `options` argument into Model._validate(.., options /\\* same object _/).\nBut before that, if attrs and !options.wait, it does `Model.set(.., options /_same object*/)` (https://github.com/documentcloud/backbone/blob/e4c046cd4d4f22010a201197f7780408ac6ba119/backbone.js#L449).\n\nIf `options.validate = true`, the call to Model.set would've caused Model.validate() to be called twice.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2250",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2250/comments",
    "title": "check for alternative English spelling of \"initialise\"",
    "created_at": "2013-02-08T00:43:26Z",
    "updated_at": "2013-02-08T00:53:30Z",
    "body": "You would not believe the trouble I have remembering to spell \"initialise\" the US way: \"initialize\". :P\n\nI realise that US English is basically the standard language of computer science, and I'm not asking everyone to start spelling colour with a U, etc.\n\nStill, I thought I'd ask the question, at the very least to see your opinions on this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2249",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2249/comments",
    "title": "New model created unnecessarily before merging attrs into existing model",
    "created_at": "2013-02-07T23:45:07Z",
    "updated_at": "2013-02-14T02:45:57Z",
    "body": "It seems that when `.add()` is called with partial attributes corresponding to an existing model in a collection, even though the existing model just needs to be updated, [a new model is constructed](https://github.com/documentcloud/backbone/blob/master/backbone.js#L612) by `collection._prepareModel()`. (For example in the situation covered by this test: https://github.com/documentcloud/backbone/blob/master/test/collection.js#L921)\n\nAm I right in thinking that `collection._prepareModel()` should only really be called if a new model is going to be added to the collection? It seems strange to have a new model initialized and have the cid counter incremented, when no new model is needed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2248",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2248/comments",
    "title": "Model.save 202 status code = error?",
    "created_at": "2013-02-07T15:53:36Z",
    "updated_at": "2017-02-28T17:57:30Z",
    "body": "Hi - I have an API which returns a status code of 202 when creating a new user that still needs information before it is usable (e.g. email verification).  When I save my model in Backbone, it comes up in the error handler (rather than in \"success\").\n\nShouldn't all 2xx level status codes come up as success?\n\nThanks for your input.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2246",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2246/comments",
    "title": "Make $(e.currentTarget) default ?",
    "created_at": "2013-02-06T22:41:41Z",
    "updated_at": "2013-02-06T22:51:46Z",
    "body": "Hi Guys,\n\nI am wondering whether it is possible - for events - to include \n\n```\nvar ele = $(e.currentTarget);\n```\n\nas a default within handler attached to an event ? It would save instead of having to define it every time and its a pretty standard definition ? So essentially it becomes.\n\n```\nevents: {\n   'click .my-div':'clickHandler'\n},\nclickHandler: function(e) {\n   ele.find('.123').val();\n   //..... etc\n}\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2244",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2244/comments",
    "title": "Can I add a link to Japanese Google Group to index.html?",
    "created_at": "2013-02-06T15:51:32Z",
    "updated_at": "2013-02-28T02:42:55Z",
    "body": "I created a [Japanese BackboneJS](https://groups.google.com/forum/?fromgroups=#!forum/backbonejs-ja) Google Group. Though it is not an official group, can I write it to the document?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2243",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2243/comments",
    "title": "Route with backslashes not working",
    "created_at": "2013-02-06T12:12:42Z",
    "updated_at": "2013-02-06T12:52:16Z",
    "body": "When router is created with pattern that contains backslashes something very unusual is happening e.g.\n\n``` javascript\nvar Router = Backbone.Router.extend({\n  routes: {\n    \"\": \"goIndex\",\n    \"home\": \"goHome\",\n    \"item/:id\": \"goItem\",\n    \"*notFound\": \"notFound\"\n  },\n  goIndex: function(){alert(\"index\");},\n  goHome: function(){alert(\"home\");},\n  goItem: function(id){alert(\"item:\"+id);},\n  notFound: function(){alert(\"route not found\");}\n});\nnew Router();\nBackbone.history.start();\n```\n\nWhen you open page with this router and append \"#home\" e.g. \"/localhost/#home\" you got alert \"home\", but then if you append \"#item/1\" e.g \"/localhost/#item/1\" the url is changed to \"/localhost/item/1\" and alert is shown with \"index\", than if you enter again \"/localhost/#item/1\" page is reloaded and alert is shown with \"item:1\".\n\nWhen you open page with router and you enter \"/localhost/#item/1\" the right route is matched and alert is shown with \"item:1\". \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2242",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2242/comments",
    "title": "comparator not respected in safari 6",
    "created_at": "2013-02-05T21:26:53Z",
    "updated_at": "2013-02-05T21:54:10Z",
    "body": "Open this up in chrome/firefox and then safari. It should sort the collection 3, 2, 1. In Safari, it just sorts on the order the models were added.\n\nhttp://jsbin.com/uvuyun/3/edit\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2241",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2241/comments",
    "title": "model.save(null, {success: callback_function} not working properly, calling error instead",
    "created_at": "2013-02-05T02:59:32Z",
    "updated_at": "2013-02-05T05:38:12Z",
    "body": "Hello,\n\nI've been looking at the existing issues and I can't find anything reported. \n\nI am using:\n- jQuery (1.7.2)\n- Backbone (master)\n\nWithin my Model I am calling this:\n\n```\nthis.save(null, {success: function(model, response, opts) { alert('OK!'); },\n                      error: function(model, response, opts) { \n                    alert('Error!'); \n                  } \n                });\n```\n\nI've debugged it and I see that the success function is getting set properly. \n\nI also see that my backend is responding correctly, `PUT \"/orders/R658224318\"` returns `head :ok` (from Rails)\n\nAnd I see that the error function has this status:\n\n```\n    response.status\n    => 200\n```\n\nWhat could be wrong? \n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2237",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2237/comments",
    "title": "Collections should maintain order when a model changes.",
    "created_at": "2013-02-03T16:15:24Z",
    "updated_at": "2013-02-04T15:03:10Z",
    "body": "Let's say that a collection is sorted on some attribute and one of the models in that collection changes that attribute. Suddenly the collection is no longer in order.\n\nI would be happy to submit a pull request with this change if the community wants it. Right now I have something like the following in `_onModelEvent`:\n\n```\nif (this.sortOnChange) {\n  var sortOnString = typeof this.comparator === 'string' && event.substring(7) === this.comparator;\n  if (sortOnString || typeof this.comparator === 'function') {\n    this.sort();\n  }\n}\n```\n\nThis first assumes that there is a new property which can be set in collections called `sortOnChange`. We then determine if the comparator is a string and if the changed property is equal to the comparator -- if the comparator is a string but the property doesn't match then there is no sense in sorting. If that test fails then we will sort anyway if the comparator is a function.\n\nAn alternate way to express `sortOnString` would be the following:\n\n```\nvar sortOnString = typeof this.comparator === 'string' && event === 'change:' + this.comparator;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2234",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2234/comments",
    "title": "Allow to add to collection models with custom constructor",
    "created_at": "2013-02-02T13:52:13Z",
    "updated_at": "2013-02-02T14:07:18Z",
    "body": "I'm using custom model constructors for application base classes.\nIt handles some localisation and validation extension.\nThis is example from Addy Osamani book for view class - http://bit.ly/14G9lPM\n\nProblems starts when i'm adding instance of model:\nCollection,_prepareModel method reinstantiate model in it is already instantiated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2233",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2233/comments",
    "title": "Add a listen hash analogous to events ",
    "created_at": "2013-02-02T07:51:55Z",
    "updated_at": "2013-02-08T00:38:48Z",
    "body": "As it is my first time posting an issue here; let me say, \"Great job on backbone.js, wonderful stuff here!\".\n\nWhat does everyone think about something like the following for declarative binding of Backbone events (analogous to DOM events through the `events` hash)?\n\n``` javascript\nlisten: {\n  // this.on('event', this['handler']);\n  'event': 'handler',\n\n  // this.listenTo(this['model'], 'event', this['handler']);\n  'event model': 'handler',\n\n  // this.listenTo(this['property'], 'event', this['handler']);\n  'event property': 'handler'\n}\n```\n\nI could submit a PR if @jashkenas et all like the idea. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2230",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2230/comments",
    "title": "Different meanings for 'model' property in view and collection",
    "created_at": "2013-02-01T05:38:25Z",
    "updated_at": "2013-02-01T06:40:24Z",
    "body": "In `Backbone.View`, the `model` specifies the model **instance** that the view is connected to.\n\nOn the other hand, in `Backbone.Collection`, `model` specifies the model **class**.\n\nI think we should have `modelClass` instead of `model` in `Backbone.Collection`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2229",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2229/comments",
    "title": "sync event firing",
    "created_at": "2013-01-31T21:33:18Z",
    "updated_at": "2013-02-01T17:14:27Z",
    "body": "I want an event like 'sync' to be triggered before the success function so that I can bind the event in the success function without it being executed right away\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2228",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2228/comments",
    "title": "findWhere() method not available on Collections",
    "created_at": "2013-01-31T20:48:47Z",
    "updated_at": "2013-06-20T00:54:34Z",
    "body": "Not sure if Collections are proxying all the collection methods, but I noticed that findWhere() is not available.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2227",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2227/comments",
    "title": "Is set supposed clear changed?",
    "created_at": "2013-01-31T18:20:30Z",
    "updated_at": "2013-01-31T18:29:41Z",
    "body": "Is this supposed to be happening?\n\n``` javascript\nmodel = new Backbone.Model;\nmodel.set('one', 1, {silent:true});\nmodel.changed  // returns {one: 1}\nmodel._previousAttributes // returns {}\n\nmodel.set('two', 2, {silent:true});\nmodel.changed // returns {two: 2}\nmodel._previousAttributes // returns {one: 1}\n```\n\nThis is with backbone 0.9.10\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2225",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2225/comments",
    "title": "'Fetch' can't be bound to a 'change' event",
    "created_at": "2013-01-31T10:38:01Z",
    "updated_at": "2013-01-31T13:35:31Z",
    "body": "Hi,\n\nI have a collection that listens to changes in a model to then update itself, like this:\n\n```\nthis.listenTo(this.user, \"change:addresses\", this.fetch);\n```\n\nAnd it was getting back the user's own data, instead of the expected. After some probing I figured that `change` events pass `(model, value, options)` to the callbacks, which in this case meant `sync` was eventually getting the user model as it's `option` param.\n\nThe user model has its own url, and 8478567 means it is then overriding the collection's url for the request.\n\nI understand this is an edge case, and can be easily circumvented by using `function(){ this.fetch(); }` instead, but maybe it deserves some looking into. Specially since I believe this also means `fetch` can't be bound to any event.\n\nRight now I can't think of a good way to solve it that won't break 8478567, though. Maybe needing to explicitly state you want to override the request settings in `sync`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2224",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2224/comments",
    "title": "Backbone.Model clear use default attributes",
    "created_at": "2013-01-31T09:23:25Z",
    "updated_at": "2014-07-04T03:12:03Z",
    "body": "Hello,\n\nI have currently following problem:\n\nI want to reset a model to the defaults I defined in the prototype (see: https://github.com/bodokaiser/hangman/blob/master/public/javascripts/model/statistic.js)\nUnfortunately only the Backbone.Collection has such a reset method. The Backbone.Model only has a clear() which does not use the defaults.\n\nMy suggestion would now be that I either:\n- extend Backbone.Model.prototype.clear to use this.defaults if available\n- add another reset method to Backbone.Model.prototype\n\nI would prefer to modify the clear method. Are there any contras which speek against such feature? If not I would make a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2223",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2223/comments",
    "title": "Model: any altered default values are reverted when model.fetch() is called",
    "created_at": "2013-01-31T07:25:59Z",
    "updated_at": "2013-01-31T07:52:35Z",
    "body": "Can anyone else reproduce this behavior?  It seems very strange to me...not sure if it's intended to work this way or not.  Just thought I would report it...\n\nCurrently using Backbone 0.9.2 and Underscore 1.4.4 (project in production that hasnt been upgraded yet).\n\n``` javascript\nvar dummyModel = Backbone.Model.extend({\n    urlRoot: '/someUrl/to/get/model/data',\n    defaults: {\n        theName: \"Dummy Model\"\n    }\n});\n\nvar dm = new dummyModel(  { theName:\"Smart Model\" } );\nconsole.log( dm.toJSON() ); // this will show the name as \"Smart Model\"\n\n//now, we'll fetch the model data...\ndm.fetch({ \n    success: function(model){\n        console.log( model.toJSON() ); // this will show as \"Dummy Model\"\n    }\n});\n```\n\nIf anyone has any insight into this...much appreciated.  If it's a bug, then im glad i could find it! :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2222",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2222/comments",
    "title": "A View's default options are not merged into the options passed to the initialize method.",
    "created_at": "2013-01-31T02:47:50Z",
    "updated_at": "2016-06-20T13:26:05Z",
    "body": "When you define a View with default options:\n\n```\nvar MyView = Backbone.View.extend({\n  tagName: \"div\",\n  className: \"my-view\",\n\n  options: {\n    foo: \"foo\"\n  },\n\n  initialize: function(options) {\n    alert(\"this.options.foo = \" + this.options.foo);\n    alert(\"this.options.bar = \" + this.options.bar);\n\n    alert(\"options.foo = \" + options.foo);\n    alert(\"options.bar = \" + options.bar);\n  }\n});\n```\n\nThese options get extended by any options passed to the constructor:\n\n```\nmyView = new MyView({bar: \"bar\"});\n```\n\nThe result of the extension gets set as `this.options`. I had expected that the result of the extension would also get passed into the initialize function. Instead, the options passed to the initialize method are the same options passed to the constructor (i.e. they don't include the defaults).\n\nThe above example alerts `options.foo` as `undefined` even though `this.options.foo` has the value `\"foo\"` properly set from the default options.\n\nIs this expected behavior? I was under the impression that the `options` argument and `this.options` were equivalent objects. If this is expected behavior, perhaps the docs could be updated to clarify that the options passed in are strictly the options passed to the constructor.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2218",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2218/comments",
    "title": "Model#destroy success callback fails on jquery-1.9.0",
    "created_at": "2013-01-30T09:58:04Z",
    "updated_at": "2014-08-21T21:41:45Z",
    "body": "With JQuery-1.9.0, Model#destroy seems to always call the error() callback even when the server returns \"200 OK\". \n\nSeems to be only an issue with the \"delete\" method. Create/Read/Update works just fine.\n\nReverting to JQuery-1.8.2 fixes the issue with \"delete\".\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2217",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2217/comments",
    "title": "garbage collector will collection Backbone.history.location in android , when go anthor page and use browser's back\u3002",
    "created_at": "2013-01-30T06:58:04Z",
    "updated_at": "2014-05-19T16:07:11Z",
    "body": "garbage collector will collection Backbone.history.location in android , when go to anthor page and use browser's back\u3002\nand then the function getHash() and route.navigate() will throw error.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2214",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2214/comments",
    "title": "Can't stop Backbone event",
    "created_at": "2013-01-29T17:24:17Z",
    "updated_at": "2013-01-30T01:49:06Z",
    "body": "See this code:\n\nBackbone.on('test', function() {alert('hi'); return false;}).on('test', function() {alert('hello');}).trigger('test')\n\nreturn false on the first handler should stop the event, but the event is not stopped.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2213",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2213/comments",
    "title": "Configurable index attribute inside Collections for polymorphic models",
    "created_at": "2013-01-29T16:06:08Z",
    "updated_at": "2013-12-16T19:52:22Z",
    "body": "So guys, after a lot of backbone.js development one of the features that I most missed from this library is a way to define which attribute should I index my models inside a collection, instead of getting the \"idAttribute\" default. This is useful for polymorphic collections.\n\n``` coffeescript\nclass FTB.Collections.Resources extends FTB.Collection\n    model: (attributes, options) ->\n        new FTB.Models[attributes.type](attributes, options)\n```\n\nHere is my example, I have 4 different kinds of model that are populated inside my polymorphic collection, but their \"id\" attribute could repeat since it is only unique for each table.. so one of my solutions was to change the \"idAttribute\" to something like \"uuid\" and solve my problem.\n\n``` coffeescript\nclass FTB.Models.Document extends FTB.Model\n    urlRoot: \"/documents\"\n    idAttribute: \"uuid\"\n\n    url: ->\n        if @get('id') then \"#{@urlRoot}/#{@get('id')}\" else @urlRoot\n```\n\nBut now all my model URLs will use the \"uuid\" attribute for fetch, save and other stuffs.. something that was not what I wanted.. my workaround was to overrite the \"url\" method for accomplish that, but it seems that backbone.js could handle my problem really well with a configuration inside collection similar to the \"idAttribute\" inside models.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2212",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2212/comments",
    "title": "Uncaught TypeError: Object [object Window] has no method '_configure' ",
    "created_at": "2013-01-29T09:26:39Z",
    "updated_at": "2013-01-29T09:36:59Z",
    "body": " <script type=\"text/javascript\" src=\"jquery-1.9.0.js\"></script>\n        <script type=\"text/javascript\" src=\"json2.js\"></script>\n        <script type=\"text/javascript\" src=\"underscore.js\"></script>\n        <script type=\"text/javascript\" src=\"backbone.js\"></script>  \n        <script type=\"text/javascript\">\n            var Widget =  Backbone.View.extend({\n\n```\n              tagName: \"li\",\n\n              className: \"document-row\",\n\n              events: {\n\n              },\n\n              initialize: function() {\n\n              },\n\n              render: function() {\n\n              }\n\n            });\n\n\n       var input = Widget();\n    </script>\n```\n\nI am getting : Uncaught TypeError: Object [object Window] has no method '_configure' \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2211",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2211/comments",
    "title": "Backbone Rendering",
    "created_at": "2013-01-29T07:18:14Z",
    "updated_at": "2013-01-29T12:43:26Z",
    "body": "Not sure if this is what you meant by opening a ticket, but:\n\n[This](http://koglerjs.com/example/chitin/) is about half of what I had planned to put at the end of the Angular write-up.  \n\nThe thing became monstrous and I realized needed its own article.  So right now it doesn't have a Router or anything, all it really does is demonstrate my two new libraries.  \n\n[Chitin.js is the more interesting one.](http://koglerjs.com/js/chitin.js)\n\n[Imago](http://koglerjs.com/js/imago.js) is just a vague idea of a template store.  \n\nI've got to pack so I can't really go into any more detail.  Let me know if this isn't a sensible place to put this.  \n\n-J\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2210",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2210/comments",
    "title": "0.9.9+ no longer passes in options.index to an 'add' event handler for a collection",
    "created_at": "2013-01-28T19:52:49Z",
    "updated_at": "2013-01-28T22:05:35Z",
    "body": "Before Backbone 0.9.9, anytime something was added to a collection, the event handler for the 'add' event handler would receive the 'index' value in the options. This is no longer the case for Backbone 0.9.9+ and is causing JavaScript errors.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2209",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2209/comments",
    "title": "removing last event callback (with off) leaves key in _events",
    "created_at": "2013-01-28T19:46:18Z",
    "updated_at": "2013-01-28T21:51:37Z",
    "body": "See example here:\nhttp://jsfiddle.net/wfLXE/\n\n``` javascript\nvar animal = {\n    spoke: 0\n};\n\n_.extend(animal, Backbone.Events);\n\nvar onSpeak = function () {\n    console.log(\"speaking\");\n};\n\nanimal.on(\"speak\", onSpeak);\n\nanimal.trigger(\"speak\");\n\nanimal.off(\"speak\");\n\n// we now have a dangling empty array of \"speak\" events.\nconsole.log(\"speak is still existing on animan._events? \", animal._events.speak.length === 0);\nconsole.log(animal._events); \n// Object\n// speak: Array[0]\n//   length: 0\n```\n\nIs this intentional? I know you might be optimizing for reuse of event here, but it is kind of a leaky situation...\n\n/cc @tbranyen, @knowtheory since we chatted about it on IM/IRC\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2208",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2208/comments",
    "title": "Model - Add ._savedAttributes property and revert() function to rollback model to last-synced version",
    "created_at": "2013-01-28T18:15:55Z",
    "updated_at": "2018-06-07T08:46:01Z",
    "body": "I recently found myself with this problem: A user could make a variety of changes to models in a collection, and then choose to either save those changes or 'cancel', trashing all changes made.\n\nAs `.previousAttributes` represents the state of a model at the time of the last `change` event, I would propose a similar `.savedAttributes` which represents the state of the model at the time of the last `sync` event. In addition, there would be a `.revert()` function that would allow a model to rollback to a state that matches what is persisted (localStorage, database, etc) without the need for a `.fetch()` call.\n\nI feel this could be done with code similar to what follows (I haven't attempted this solution, I've only coded my own solutions on a per-model basis).\n\n``` javascript\n// Add _savedAttributes property and revert function to Backbone.Model\nvar Model = Backbone.Model = function(attributes, options) {\n  ...\n  this._savedAttributes = this._previousAttributes = _.clone(this.attributes);\n  ...\n  _.extend(Model.prototype, Events, {\n    ...\n    revert: function() {\n        this.attributes = this._savedAttributes;\n    },\n    ...\n  });\n}\n\n// Clone .attributes to ._savedAttributes on sync success\nBackbone.sync = function(method, model, options) {\n  ...\n  options.success = function(resp, status, xhr) {\n    if (success) {\n      model._savedAttributes = _.clone(model.attributes);\n      success(resp, status, xhr);\n    }\n    model.trigger('sync', model, resp, options);\n  };\n  ...\n}\n\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2207",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2207/comments",
    "title": "Add a View \"remove\" event",
    "created_at": "2013-01-28T16:55:52Z",
    "updated_at": "2013-01-28T17:28:24Z",
    "body": "I'd find it quite beneficial to have the view fire a \"remove\" event before it gets removed so that if I other views that are dependent on another view (like a modal is open or some such), I can more easily just handle it through events\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2206",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2206/comments",
    "title": "Docs state models trigger 'invalid' event when validation fails, but 'error' event is triggered",
    "created_at": "2013-01-28T10:55:09Z",
    "updated_at": "2013-02-05T22:26:54Z",
    "body": "Maybe I'm just not reading this right, but this seems like a mixup to me:\n\nThe docs state that \"Failed validations trigger an \"invalid\" event, and set the validationError property on the model with the value returned by this method.\"\n\nAnd: \"\"error\" (model, xhr, options) \u2014 when a model's save call fails on the server.\"\n\nBased on this, I have designed standard functions to handle validation errors on the 'invalid' event with the second argument as an array of error strings, as per my custom validate method. Another error handler is set to handle the server errors, expecting the second argument to be the xhr object.\n\nObviously, when the model triggers an 'error' event for validation errors and passes the validation error array as the second argument to a function that expects this to be an xhr, stuff doesn't work.\n\nIs the 'invalid' event even in use?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2205",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2205/comments",
    "title": "0.9.10 save validation failure not calling error callback",
    "created_at": "2013-01-28T02:25:09Z",
    "updated_at": "2013-01-29T14:07:30Z",
    "body": "The save() documentation states \"The error callback will also be invoked if the model has a validate method, and validation fails.\"  However, when validation fails, the error callback is not getting called.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2203",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2203/comments",
    "title": "JSDoc support for better code completion in IDEs (especially, in PHPStorm)",
    "created_at": "2013-01-27T15:33:05Z",
    "updated_at": "2013-01-28T14:47:24Z",
    "body": "Is it ok to add \n\n```\n/** @lends Backbone.Model */ \n```\n\nand other JSDoc comments to make better code completion for methods in IDE. I can write pull request by myself, but do you want such request in your code?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2199",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2199/comments",
    "title": "Add support for async event handlers ",
    "created_at": "2013-01-26T19:47:40Z",
    "updated_at": "2013-02-01T13:33:53Z",
    "body": "When child views are being handled by parent views, I find my self often needing to fire 'before*' events which may be handled asynchronously. It would nice if backbone supported async handlers(deferreds) to remove other custom events('ok-to-remove', 'not-ok-to-remove',  required to solve this problem. End result would be something like:\n\n``` javascript\nvar View = Backbone.View.extend({\n    remove: function() {\n         var me = this;\n         this.trigger('beforeremove').then(function() {\n             me.remove();\n         })\n    }\n});\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2198",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2198/comments",
    "title": "trigger calls unbinded event handlers",
    "created_at": "2013-01-26T18:26:53Z",
    "updated_at": "2013-01-28T14:15:58Z",
    "body": "I don't know if this is the way it should work, but I think that if I remove event handler during the trigger, the removed event handler will not be called.\nApparently Backbone caches event handlers, so even they are removed, they are still triggered that last time. \n\nSolution to this is to check in the triggering loop, if the handler is still active (use underscore `contains`)\n\nsee this [jsfiddle](http://jsfiddle.net/A9VxH/)\n\nThe same does not apply to adding event handlers during the trigger, as trigger has already been sent (they should be run on the next trigger).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2197",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2197/comments",
    "title": "0.9.10 model.set('img', new Image()) crashes",
    "created_at": "2013-01-26T17:44:09Z",
    "updated_at": "2013-01-26T18:45:25Z",
    "body": "Hi, Im working with Backbone.js 0.9.10,\nand when I try to set a new Image() in a model like this:\n\n> var Image = Backbone.Model.extend( {\n> idAttribute: \"_id\",\n> defaults:{ 'img': null },\n> initialize: function(){\n> this.set('img', new Image());\n> }\n> });\n\nbrowser  crashes and the console give me this error:\n\n> <error>\n> b.defaults\n> g.Model\n> r.extend.s.extend.y.extend.A.extend.m.extend.d\n> Backbone.Model.extend.initialize\n> g.Model\n> ...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2195",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2195/comments",
    "title": "Comparator and fat arrow",
    "created_at": "2013-01-26T14:35:16Z",
    "updated_at": "2013-09-07T14:21:53Z",
    "body": "When defining comparator function with fat arrow in coffeescript, I got the collection sorted in reverse order.\n\nHowever using single arrow, the collection is sorted correctly.\n\nIs it wrong to use fat arrow to define comparator?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2194",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2194/comments",
    "title": "If Model.parse method return false then no model created!",
    "created_at": "2013-01-26T11:30:41Z",
    "updated_at": "2013-01-29T12:44:32Z",
    "body": "It would be nice if parse method can avoid some data:\n\n<pre>Backbone.Model.extend({\n    parse: function(responce){            \n        if(responce.disabled)\n            return false;\n    }\n});</pre>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2193",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2193/comments",
    "title": "Collection.fetch({update: true}) not working and bypassing parse?",
    "created_at": "2013-01-26T00:54:10Z",
    "updated_at": "2013-01-26T02:23:50Z",
    "body": "Right now I have a collection that receives a JSON object like this:\n\n{\n    contents: [\n        {model}, \n        {model}, \n        {model}\n    ]\n}\n\nPretty standard, right? I have a parse function to pull the array out of the contents property and this all works fine with a standard fetch() call.\n\nIf I change that to a fetch({update: true}) I get a single model with it's sole attribute being the contents property as it appears to skip the parse object completely.\n\nThis seems rather broken behavior and a pretty major bug. Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2192",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2192/comments",
    "title": "Support for callback contexts",
    "created_at": "2013-01-25T16:39:44Z",
    "updated_at": "2014-08-29T00:56:16Z",
    "body": "I would suggest the following changes to support context in callbacks the way jquery ajax does:\n\nline 356 change to: \nif (success) { success.call(this,model, resp, options); }\n\nline 400 change to: \nif (success) { success.call(this,model, resp, options); }\n\nline 1465 change to:\nif (success) { success.call(this,resp, status, xhr); }\n\nline 1465 change to:\nif (error) { error.call(this,model, xhr, options); }\n\nDoes that sound reasonable?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2188",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2188/comments",
    "title": "Model#validate example in documentation does not work as written",
    "created_at": "2013-01-24T20:15:27Z",
    "updated_at": "2013-01-25T01:27:30Z",
    "body": "var Chapter = Backbone.Model.extend({\n  validate: function(attrs, options) {\n    if (attrs.end < attrs.start) {\n      return \"can't end before it starts\";\n    }\n  }\n});\n\nvar one = new Chapter({\n  title : \"Chapter One: The Beginning\"\n});\n\none.on(\"error\", function(model, error) {\n  alert(model.get(\"title\") + \" \" + error);\n});\n\none.set({\n  start: 15,\n  end:   10\n});\n\nI've run this in both Chrome and Firefox - nothing gets alerted. In addition the invalid attributes are allowed to be set.\n\nRunning  one.save does not trigger any alerts either.\n\nAny idea what's up or am I missing something here?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2185",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2185/comments",
    "title": "Collection and Model fetching/saving etc status",
    "created_at": "2013-01-24T00:39:56Z",
    "updated_at": "2013-01-24T20:16:36Z",
    "body": "To be able to know if the collection was populated, or is beeing populated, there might be something like\n\n``` javascript\n\ncollection.fetch();\ncollection.isFetching()===true; // display loading \n\n(collection.isFetching()===false; && collection.length) // display no records found\n```\n\nReal usecase (simplification, the objects are passed deep in the system):\n\n``` javascript()\n// somewhere in the code\ncollection = new MyCollection();\n// somewhere else in the code\nview  = new MyView({collection:collection});\n// and somewhere else in the code\ncollection.fetch();\n```\n\nthe view listens for collection signals, and displays either loading/no records/records list\n\nfor model, there could be even save/delete/update thing\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2182",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2182/comments",
    "title": "Add remote events for views",
    "created_at": "2013-01-23T04:13:56Z",
    "updated_at": "2013-01-23T13:03:32Z",
    "body": "View methods could be triggered by events outside it's $el scope. Example of this would be using a view class for a button gui but can't encapsulate the button since the view has already it's $el set for a another elements.\n\n`remote : { \"click button.showpane\" : \"showMe\"}`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2179",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2179/comments",
    "title": "options.context not being passed to success function in Backbone.sync ",
    "created_at": "2013-01-22T19:22:41Z",
    "updated_at": "2013-03-19T11:17:32Z",
    "body": "I just upgraded from 0.9.2.  I am doing something like this:\n                xhrOptions = {};\n                xhrOptions.url = validationUrl;\n                xhrOptions.context = myContext;\n                xhrOptions.success = function (resp, status, xhr) {\n                    this.validationSuccess(resp, attrs, options);\n                };\n                xhrOptions.data = JSON.stringify(_.extend(this.toJSON(), attrs));\n                xhrOptions.contentType = 'application/json';\n                Backbone.sync(\"create\", this, xhrOptions);\n\nPreviously, the success function would have this set to myContext from the options, so it would call myContext.validationSuccess. It no longer has the context set from the options.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2175",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2175/comments",
    "title": "Backbone 0.9.10 View incorrectly inherits variable data when passed into initialize function",
    "created_at": "2013-01-22T00:03:47Z",
    "updated_at": "2013-01-22T00:21:34Z",
    "body": "I recently upgraded my app from Backbone 0.9.2 to 0.9.10 and a bunch of my Views broke. I narrowed down the issue to the following.\n\nI have several Backbone.View() objects which pass themselves in to other Backbone.View() objects. In 0.9.10 this causes the child View to inherit all the parent View's options/events, etc... This is obviously incorrect. Example:\n\n``` javascript\nvar parentView = Backbone.View.extend({\n    events: {\n        \"click .something\": \"clickSomething\"\n    },\n    initialize: function() {\n        this.setElement($(\"#Parent\"))\n    },\n    render: function() {\n        var childView = Backbone.View.extend({\n            events: {\n\n            },  \n            initialize: function(parent) {\n                // !!!!!\n                // App fails here with error: \"clickSomething method does not exist\"\n                // !!!!!\n\n                console.log(this)\n\n                // Doing a print of the child view, I can see that childView seems to\n                // have inherited all events from the parent -- even though the child\n                // has explicitly no events defined in its View.\n\n                this.setElement($(\"#Child\"))\n            },\n            render: function() {\n                // Render the child\n            }\n        })\n\n        var MyChildView = new childView(this) // Passing in the parent to the child\n        MyChildView.render()\n    },\n    clickSomething: function() {\n        // Does something\n    }\n})\n\nvar MyParentView = new parentView()\nMyParentView.render()\n```\n\nIs this new behavior that has been introduced since 0.9.2, or is this a bug in the Backbone code?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2174",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2174/comments",
    "title": "Cannot generally enable validation",
    "created_at": "2013-01-21T23:36:52Z",
    "updated_at": "2013-01-22T17:23:28Z",
    "body": "As of I assume 0.9.10+, current behavior requires options param {validation: true} to be passed in to .set() even if the validate function is on the model. This makes it impossible to generally enable validation without redefining .set() itself. \n\nSee also: https://github.com/documentcloud/backbone/issues/247 .. which is closed, but the behavior seems to have changed since 2 years ago. `if (!options.validate || !this.validate) return true;` currently cancels out validation defined on the model.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2170",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2170/comments",
    "title": "Router tests fail with zepto",
    "created_at": "2013-01-21T05:07:55Z",
    "updated_at": "2013-03-19T11:20:52Z",
    "body": "Running the tests with Zepto instead of jQuery currently results in 40+ failures, mostly related to Backbone.Router.\n\nFrom glancing at the router code, it looks like the main use of Backbone.$ is around line 1098:\n\n```\n      if (this._hasPushState) {\n        Backbone.$(window).on('popstate', this.checkUrl);\n      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n        Backbone.$(window).on('hashchange', this.checkUrl);\n```\n\nSo if that's not where zepto is falling down it might be somewhere in the tests themselves.\n\n![Screen shot 2013-01-20 at 9 03 01 PM](https://f.cloud.github.com/assets/25241/82091/e0689f98-6387-11e2-981d-57fe826ab1aa.png)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2169",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2169/comments",
    "title": "window.location.replace not working in android browsers",
    "created_at": "2013-01-20T18:43:18Z",
    "updated_at": "2013-04-12T10:03:55Z",
    "body": "I seems like location.replace is not working on android stock browser (not chrome).\n\nThis means that Router.navigate() fails when passing {replace: true} as options. \n\nI created a jsfiddle for testing. http://jsfiddle.net/jorgenfb/mtTwj/1/show/light/ (No backbone, just javascript)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2168",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2168/comments",
    "title": "Remove method probably should reset el and $el elements in the view",
    "created_at": "2013-01-20T15:11:34Z",
    "updated_at": "2013-10-29T09:50:07Z",
    "body": "Please consider following case:\n\n``` javascript\n<ParentView>\n    <ListView>\n        <ListItemView /> x5000\n    </ListView>\n</ParentView>\n```\n\nAnd we are telling ParentView to `remove` ListView. As ListItems do not `listenTo` anything we can remove list itself and will be fine. But actually ListView retains links to the DOM tree through `el` and `$el` and we get memory link.\nThis of course could be fixed inside user code by setting ListView to the null. \nOr maybe it is actual issue which could be fixed on Backbone level. Backbone could reset both el and $el to new element of `tagName` (not clear what to do if instead element was specified).\n\nI've made sample to illustrate this problem: http://pastie.org/private/hsveceecozn3xaelnksia\n1. Click Render button\n2. Click Clear button\nNow in e.g. Chrome you can check heap size (Dev tools -> Profiles -> Take heap snapshot).\nThen uncomment specified line of code and try again. `Detached DOM tree` entry is gone from the heap.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2165",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2165/comments",
    "title": "Support for suppressing the X-HTTP-Method-Override",
    "created_at": "2013-01-19T16:02:20Z",
    "updated_at": "2013-03-19T11:23:59Z",
    "body": "This is not a bug, but a suggestion. If it's something you'd like to add, I'd be happy to create the tests for it, but this link is broken right now: http://backbonejs.org/test/test.html\n\nAnyway, I modified some code to allow the options hash to contain an override for setting the X-HTTP-Method-Override. If that gets set to 'false', then it doesn't do it at all. Otherwise, if it's not present, or is 'true', it still does it. If it's set to a function, it calls the function.\n\n``` javascript\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      function setRequestHeader(xhr, header, value) {\n        xhr.setRequestHeader(header, value);\n      }      \n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        if (_.isFunction(options.setXHttpMethodOverride)) {\n          setRequestHeader = options.setXHttpMethodOverride;\n        }\n        if (options.setXHttpMethodOverride !== false) {\n          setRequestHeader(xhr, 'X-HTTP-Method-Override', type);\n        }\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n```\n\nI needed this because my web server requires setting special support even for sending the header, access control settings. So, because our API uses POST, this just made it easier to avoid that additional web-server configuration step.\n\nI have a working example here:\n\nhttp://jsfiddle.net/v7cBn/4/\n\nLine 50 is where you can play around with the setXHttpMethodOverride parameter.\n\nAnyway, if you'd like me to add a pull request for it, I'll be happy to write tests for it, if that link starts working again, or if you point me to a working link.\n\nThank you,\nJosh\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2164",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2164/comments",
    "title": "rethink event api change of 0.9.9 (listenTo)",
    "created_at": "2013-01-19T15:09:56Z",
    "updated_at": "2013-04-03T10:13:21Z",
    "body": "Hello,\n\nI have some criticism about the listenTo and stopListeningTo methods.\n\nAs I understood so far the new event methods listenTo and stopListeningTo were implemented to avoid \"zombie events\" which can happen when a view is deleted but still bound to an event of another object. Generally I would say it is a good idea to fix such a behavior.\n\nWith the current fix we nearly have a duplication of subscriber methods which break the great, standard setting api we had before and I have the feel this workaround does not stand in good relation to the actual problem.\n\nI would like to switch back to the old events api which only provided (on, off and trigger) and move the fix of the \"zombie events\" issue somewhere internal.\n\nI would be happy to know if there are other people who feel similar to me and if a change would be generally accepted by the project?\n\nYours sincerely,\nBodo Kaiser\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2163",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2163/comments",
    "title": "Collections and Models should call onEventName function",
    "created_at": "2013-01-19T09:48:00Z",
    "updated_at": "2013-01-22T21:50:46Z",
    "body": "It seems that when extending Collection if I want to run my code when a model is added/deleted/etc... I need to listen to the appropriate event. It might be a good idea to have onEventName functions that, if defined by the extending collection, will be called before the various events. This will also cover the case when silent is passed but the extending collection wants to perform the operation anyway.\n\nIf you think this is a good feature I will create a pull request.\n\nP.S.\nThis is implemented in Backbone.Marionette by @derickbailey:\nhttps://github.com/marionettejs/backbone.marionette/blob/master/src/marionette.triggermethod.js\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2162",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2162/comments",
    "title": "Success callback should be called for all 200 series http codes",
    "created_at": "2013-01-18T22:11:27Z",
    "updated_at": "2013-08-06T16:32:37Z",
    "body": "Right now if I do any of the following neither the success OR error callbacks are called - though the model is updated:\n- save a mode, but PUT returns 201\n- delete a model but DELETE is no content with 200 sent\n\nThese are success, but in backbone you'd never know. Especially odd in the second case because there is no reason for DELETE to return anything (yes, perhaps it _should_ return 204 No Content, but it doesn't _have_ to).\n\nAnything in the 2XX series of codes should be considered a success, and the response parsed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2161",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2161/comments",
    "title": "Regression from changing success callback parameters.",
    "created_at": "2013-01-18T20:14:43Z",
    "updated_at": "2013-02-07T15:05:28Z",
    "body": "In 6d589bad7802b7b9a36bad701880a797cf3904da, success callback parameters were altered to include `options` as the third argument. Unfortunately, this shadows any `options` argument in the scope above. I ran into this when upgrading to 0.9.10 and noticed an exception thrown on a fetch call with no arguments. \"Uncaught TypeError: Cannot read property 'update' of undefined \"  See [line 814](https://github.com/documentcloud/backbone/blob/master/backbone.js#L814) for an example.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2160",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2160/comments",
    "title": "Weird behavior when model.save if option.validate is not set",
    "created_at": "2013-01-18T19:45:06Z",
    "updated_at": "2013-01-18T20:34:59Z",
    "body": "When validate is not set when calling model.save, it will call 'model.set' in 'model.save' with option passed in, so no validation. Later, option will be extended with {validate : true}, which makes 'model.save' fail. However, since the 'model.set' is done, the data presented wrongly in the view.\n\nI think the behaviors should be consistent, maybe. If no validate: true in option, it doesn't extend the option and check when save.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2159",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2159/comments",
    "title": "previousAttributes retains the previous value outside the change handler - behavior change in v0.9.10",
    "created_at": "2013-01-18T11:48:33Z",
    "updated_at": "2014-04-11T15:42:35Z",
    "body": "With backbone v0.9.10, the behavior of previousAttributes has changed. It preserves the value outside the change handlers. See this [fiddle](http://jsfiddle.net/dhruvaray/pyHFb/3/)\n\nThis was not the behavior in v0.9.9. See this [fiddle](http://jsfiddle.net/dhruvaray/6NYbd/3/)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2157",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2157/comments",
    "title": "Update recommendation on bootstrapping to follow OWASP guidelines for preventing XSS attacks on web applications.",
    "created_at": "2013-01-18T08:45:54Z",
    "updated_at": "2013-01-18T08:51:28Z",
    "body": "Preventing Cross Site Scripting attacks on Backbone applications was partially addressed in #1084 last year. \n\nHowever, the technique suggested in current documentation is still vulnerable to injections. \n\nRecently the Open Web Application Security Project (OWASP) updated its guidelines for bootstrapping application data in JSON, and I recommend that backbone.js' documentation follow suit. \n\nI'm attaching a pull request for updated documentation to this issue. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2156",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2156/comments",
    "title": "error in _validate",
    "created_at": "2013-01-17T20:51:47Z",
    "updated_at": "2013-01-18T11:43:04Z",
    "body": "Please forgive me if I'm getting out of line :P\n\nI found a possible error in the `_validate` function:\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L539\n\nthe line reads:\n\n``` javascript\nif (!options.validate || !this.validate) return true;\n```\n\nshouldn't it be:\n\n``` javascript\n// Exit with positive result if we have no validates!\nif (!options.validate && !this.validate) return true;\n```\n\n?\n\nWith the original line, the function will exit if I'm missing at least one callback.\n... and by the way, `options.validate` is never used (or is it supposed to be used by the user-defined `validate`?)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2155",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2155/comments",
    "title": "callback for space delimited events triggering multiple times",
    "created_at": "2013-01-17T15:10:25Z",
    "updated_at": "2013-01-17T15:56:20Z",
    "body": "Space delimited events like:\n\n``` javascript\nmodel.on(\"change:a change:b\",callback)\nmodel.set({a:'a',b:'b'})\n```\n\ncause the callback to be called twice. Is this behaviour expected?\nIf so the docs should probably mention this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2154",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2154/comments",
    "title": "0.9.10 does not call 'error' callback in Model#save on validation error",
    "created_at": "2013-01-17T14:12:26Z",
    "updated_at": "2013-01-17T15:04:53Z",
    "body": "From my understanding of Model#save() documentation, when save() is started, either 'success' or 'error' callback should be called.\n\nThis is true in Backbone 0.9.9:\nhttp://jsfiddle.net/derbeth/vs3Zb/4/\n\nbut not in Backbone 0.9.10:\nhttp://jsfiddle.net/derbeth/tGASS/3/\n\nI know you have changed when validation is fired, but the Model#save() documentation still says:\n\n```\n   The error callback will also be invoked if the model has a validate method, and validation fails.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2153",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2153/comments",
    "title": "Failed validation does not trigger error callback",
    "created_at": "2013-01-17T13:40:33Z",
    "updated_at": "2013-04-26T09:28:55Z",
    "body": "Version 0.9.10 does not trigger the error callback when validation fails on a save. This used to work until 0.9.9. The following line was removed in 0.9.10:\n\n```\nif (options && options.error) options.error(this, error, options);\n```\n\nThe comment above the method reads\n\n```\n// Run validation against the next complete set of model attributes,\n// returning `true` if all is well. Otherwise, fire an\n// `\"invalid\"` event and call the invalid callback, if specified.\n```\n\nAn \"invalid\" event is triggered, but no callback is called. Furthermore, the documentation doesn't mention an \"invalid\" event or callback, it's still called \"error\" there:\n\n> \"error\" events are useful for providing coarse-grained error messages at the model or collection level. An error callback can can also be specified in the options, to be called alongside the error event:\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2152",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2152/comments",
    "title": "HTTP PATCH method not supported in IE8",
    "created_at": "2013-01-17T02:55:57Z",
    "updated_at": "2015-03-12T14:16:18Z",
    "body": "After reading the update notes I was really excited to implement the new patch functionality.  I got it working perfectly, and then switched over to IE8 just to be sure it worked.  Turns out IE8 does not recognize \"PATCH\" as a valid HTTP method, below is a list of supported methods:\n\nThe object permits only the following HTTP methods: \"GET\", \"POST\", \"HEAD\", \"PUT\", \"DELETE\", \"MOVE\", \"PROPFIND\", \"PROPPATCH\", \"MKCOL\", \"COPY\", \"LOCK\", \"UNLOCK\", \"OPTIONS\".\n\nIs there a possible workaround to this?\n\nEDIT: After doing a little more research, turns out this is certainly on jQuery's end.  The ActiveXObject for XMLHTTP requests does support PATCH, but the native XMLHttpRequest in IE8 does not.  jQuery ends up using the native version, since it's available to the browser.  This is all in IE9, but using IE8 compatibility mode, I wonder if this issue would persist if the user was using native IE8.  I'll try to test a little more and respond, but for now I'll try to submit a bug report to the jQuery team, since the problem is on their end.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2151",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2151/comments",
    "title": "why use this code style `this.initialize.apply(this, arguments);` instead `this.initialize(arguments);` ",
    "created_at": "2013-01-17T01:52:33Z",
    "updated_at": "2013-01-17T02:23:21Z",
    "body": "why use this code style `this.initialize.apply(this, arguments);` instead `this.initialize(arguments);` \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2150",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2150/comments",
    "title": "Optional route (/:route) makes entire route fail",
    "created_at": "2013-01-17T00:53:26Z",
    "updated_at": "2013-01-18T21:31:38Z",
    "body": "Per Backbone's documentation [here](http://backbonejs.org/#Router-routes):\n\n> A route of \"docs/:section(/:subsection)\" will match #docs/faq and #docs/faq/installing, passing \"faq\" to the action in the first case, and passing \"faq\" and \"installing\" to the action in the second.\n\nI should be able to add an optional route segment into the router like so\n\n```\n\"test(/:edit)\" : \"test\"\n```\n\nIn doing so on 0.9.10, I should be able to match the 'test' route as well as 'test/param' and both should map to the same callback.\n\nCurrently, this will force the entire route to fail and not fire the callback. Am I misunderstanding how this works or is this a legit bug?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2149",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2149/comments",
    "title": "Why you remove change method from 0.9.10?",
    "created_at": "2013-01-16T22:37:20Z",
    "updated_at": "2013-01-22T19:40:32Z",
    "body": "Hi, all\n\nFirstly, we really appreciate your hard work to build this fantastic library, which is heavily used everywhere in our core product.\n\nWhy did you guys remove the \"model.change\" method since 0.9.10? You say the delay attributes changes will be no longer available, but our core product is using this \"model.change\" method thousands of times everywhere.\n\nIs there any way or possibility to add this back?  We will appreciate for any kind of help regarding this to avoid manually fixing this in our core product from millions of js lines.\n\nCheers\n\nCaesar \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2145",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2145/comments",
    "title": "Pass errorType to error callback.",
    "created_at": "2013-01-16T11:41:21Z",
    "updated_at": "2013-01-16T15:13:40Z",
    "body": "The error callback for saving a model takes in the xhr object from the zepto/ jquery ajax error wrapper. The errorType (Zepto)/ statusText(Jquery) parameter is dropped and I recommend that this be passed to the error callback to allow for more custom error handling.\n\nFor example, if we want a model save to handle timeout errors differently (a common case for mobile development where there can be connectivity issues) it would be easier to handle this case if the errorType was provided to the error callback . . .\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2143",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2143/comments",
    "title": "Include source maps for backbone",
    "created_at": "2013-01-16T08:17:01Z",
    "updated_at": "2013-03-19T11:45:12Z",
    "body": "Source maps can be incredibly useful to debug code in production.\n\nFor example jQuery just started including source maps with their distribution: http://blog.jquery.com/2013/01/09/jquery-1-9-rc1-and-migrate-rc1-released/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2141",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2141/comments",
    "title": "Model remains changed after fetch from server",
    "created_at": "2013-01-15T23:46:13Z",
    "updated_at": "2013-03-19T11:47:12Z",
    "body": "The main problem I have is I have model \"todo\", and on regular fetch ( todos.fetch({update:true}) ) when todo changed on server side it updates in backbone's collection - that's fine, but why it still remains as changed ?\nIs there any way to avoid it?\n\nAs in my logic when I will change model on client-side it should call method \"save\" on model.\nEventually I have fetching from the server and then saving changed model and sending put request on server.\n\n``` javascript\ntodos.fetch({update: true})\ntodos.changed() # custom collection method which returns list of changed models\n#=> [Todo]\ntodos.changed()[0].changedAttributes()\n#=> {order: 101}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2140",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2140/comments",
    "title": "getting Uncaught TypeError: Object #<Object> has no method 'reset' ",
    "created_at": "2013-01-15T23:40:19Z",
    "updated_at": "2013-02-13T15:57:07Z",
    "body": "suddenly have this error :\n\nchrome (latest) : getting Uncaught TypeError: Object #<Object> has no method 'reset' \n\nversion : http://documentcloud.github.com/backbone/backbone-min.js\n\ndont have this error with Backbone.js 0.9.9\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2139",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2139/comments",
    "title": "0.9.9 model events are not propagated to all collections listening for them ",
    "created_at": "2013-01-15T21:47:34Z",
    "updated_at": "2013-01-15T22:54:05Z",
    "body": "We make heavy use of backbone collections for wunderlist and rely on events triggering on all subscribers.  We attempted to upgrade from 0.9.2 to 0.9.9 last week and had to revert when we found the event propagation in 0.9.9 to be very broken.\n\nI have created two jsfiddles; one in 0.9.2 and the other in 0.9.9.  Both are the same code, just different backbone versions.\n\n0.9.2: http://jsfiddle.net/octatone/HjVbN/\n0.9.9: http://jsfiddle.net/octatone/unvJG/\n\nAs you can see, not all events make it to collection1 in 0.9.9, where in 0.9.2 all events trigger on collection1 as expected.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2134",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2134/comments",
    "title": "The many uses of Model#toJSON()",
    "created_at": "2013-01-15T14:54:51Z",
    "updated_at": "2014-09-22T17:22:36Z",
    "body": "Currently in the docs and in the community, it seems `toJSON` has two uses:\n1. Turn a model's attributes into an object to be stringified before being sent to the server in `sync`. Overriding `toJSON` on a model gives the user the ability to construct a custom representation of a resource to be sent to the server. There is no other way to do this, accept for overriding sync?\n2. To clone a model's attributes into a plain object to be used in template rendering.\n\nOnce a model has overridden `toJSON` to get the functionality described in the first use case, the second use case is broken.  For example, let's say that I have a `TodoItem` model, and my server expects there be a root `todo` property in the JSON representation of this model, I could override `toJSON` like so:\n\n```\nvar TodoItem = Backbone.Model.extend({\n  toJSON: function(){\n    return { \"todo\": _.clone(this.attributes) };\n  }\n});\n```\n\nNow in my View, it no longer makes sense to use `toJSON` when rendering a template, so instead I search the documentation and see that the documentation for [render](http://backbonejs.org/#View-render) uses `toJSON`, so then, starting to feel a little crazy, I head back over to the [toJSON](http://backbonejs.org/#Model-toJSON) docs and find this:\n\n```\nReturn a copy of the model's attributes for JSON stringification. This can be used for persistence, serialization, or for augmentation before being handed off to a view\n```\n\nI think it makes sense to use `toJSON` for stringification (since that's what is in the JSON.stringify spec) but it makes less sense to overload the it with \"augmentation before being handed off to a view\".\n\nMy suggestion would be either to alter the docs to clarify a single purpose for `toJSON`, or maybe even introduce a new function for the \"augmentation before being handed off to a view\" functionality.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2131",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2131/comments",
    "title": "Recursive change event",
    "created_at": "2013-01-15T09:44:18Z",
    "updated_at": "2013-01-18T10:29:59Z",
    "body": "We have this code:\n\n``` javascript\nmodel = new Backbone.Model\nmodel.on('change', function(){ this.set('test5', 55); })\nmodel.on('change', function(){ console.log(this.changedAttributes()) })\nmodel.set('test', 1)\n```\n\nin version 0.9.2 we have result:\n\n``` javascript\n{test: 1, test5: 55}\nfalse\n```\n\nalso I can catch \"test\" attribute change with model#hasChanged, but in version 0.9.9 we have this result:\n\n``` javascript\n{test5: 55}\nfalse\n```\n\nWhy in new version I can't see custom attribute change without usage \"change:attributeName\" event?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2130",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2130/comments",
    "title": "View has options prop but model and collection don't",
    "created_at": "2013-01-15T05:50:46Z",
    "updated_at": "2013-01-15T06:13:39Z",
    "body": "View instance has an `options` property which points to the object passed to the constructor.\n\n``` js\nvar view = new Backbone.View({foo: 'bar'})\nview.options.foo;  //=> 'bar'\n```\n\nOn the other hand, model and collection don't have a such thing.\n\n``` js\nvar model = new Backbone.Model({}, {foo: 'bar'});\nmodel.options;  //=> undefined\n```\n\nThis inconsistency sometimes makes me confused. I think model and collection should also have `options` property.\n\nFYI, `view.options` is explained by the [official document](http://backbonejs.org/#View-constructor).\n\nHow do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2129",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2129/comments",
    "title": "Small issue in _computeChanges model method",
    "created_at": "2013-01-15T05:24:18Z",
    "updated_at": "2013-01-15T06:22:58Z",
    "body": "Somehow I can't find this method in master branch, seems like I don't understand the way you working on the project, if you can please tell me how I can get latest version.\n\nSo the issue in this method:\n\n``` javascript\n_computeChanges: function(loud) {\n  this.changed = {};\n  var already = {};\n  var triggers = [];\n  var current = this._currentAttributes;\n  var changes = this._changes;\n\n  // Loop through the current queue of potential model changes.\n  for (var i = changes.length - 2; i >= 0; i -= 2) {\n    var key = changes[i], val = changes[i + 1];\n    if (already[key]) continue;\n    already[key] = true;\n\n    // Check if the attribute has been modified since the last change,\n    // and update `this.changed` accordingly. If we're inside of a `change`\n    // call, also add a trigger to the list.\n    if (current[key] !== val) {\n      this.changed[key] = val;\n      if (!loud) continue;\n      triggers.push(key, val);\n      current[key] = val;\n    }\n  }\n  if (loud) this._changes = [];\n\n  // Signals `this.changed` is current to prevent duplicate calls from `this.hasChanged`.\n  this._hasComputed = true;\n  return triggers;\n},\n```\n\nin line \n\n``` javascript\nif (current[key] !== val) {\n```\n\nas we can have object as value we need to check two values if they are equals with help from underscore library:\n\n``` javascript\nif (!_.isEqual(current[key], val)) {\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2125",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2125/comments",
    "title": "Router does not set this.options",
    "created_at": "2013-01-14T15:47:30Z",
    "updated_at": "2013-03-19T11:49:44Z",
    "body": "In version  0.9.9, it seems strange that `Router` and `View` do not work the same for `this.options`\n\n``` javascript\nBackbone.Router.extend({\n    initialize: function (options) {\n        // this.options === undefined !== options\n    }\n});\n\nBackbone.View.extend({\n    initialize: function (options) {\n        // this.options === options\n    }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2124",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2124/comments",
    "title": "Validation during save doesn't provide access to the returned errors.",
    "created_at": "2013-01-14T10:45:36Z",
    "updated_at": "2013-01-14T10:54:25Z",
    "body": "In save, if the model fails validation, false is returned. There's no neat way to access the values returned from validate. Could those values be returned rather than false, or made available in the error callback?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2123",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2123/comments",
    "title": "errorneous message ",
    "created_at": "2013-01-14T01:42:41Z",
    "updated_at": "2013-01-14T03:21:36Z",
    "body": "never mind this, I was very mistaken \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2120",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2120/comments",
    "title": "The logic of model \"change\" events has been changed in 0.9.9?",
    "created_at": "2013-01-13T12:52:26Z",
    "updated_at": "2013-01-13T22:06:29Z",
    "body": "After updated from 0.9.2 to 0.9.9 I've got an issue with model `change` events.\n\nThis worked for me in 0.9.2. The `@autoSaveIfNeeded` was called with `startTime` in `model.changed`:\n\n``` coffeescript\n  initialize: ->\n    # Bind to model events.\n    @on 'change:startTime', @updateStartTimeString\n    @on 'change', @autoSaveIfNeeded\n```\n\nIn 0.9.9 `@autoSaveIfNeeded` is calling with `startTimeString` in `model.changed` but it should with `startTime` too.\n\nThe workaround that I applied to 0.9.9 is:\n\n``` coffeescript\n  initialize: ->\n    # Bind to model events.\n    @on 'change:startTime', @autoSaveIfNeeded\n    @on 'change:startTime', @updateStartTimeString\n```\n\nBy the way, this DOES NOT work:\n\n``` coffeescript\n  initialize: ->\n    # Bind to model events.\n    @on 'change:startTime', @updateStartTimeString\n    @on 'change:startTime', @autoSaveIfNeeded\n```\n\nIdeas?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2119",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2119/comments",
    "title": "Model change event doesn't provide options attribute",
    "created_at": "2013-01-13T10:44:39Z",
    "updated_at": "2013-01-14T12:55:13Z",
    "body": "Before 0.9.9 release, in my models in initialize method this worked fine:\n`@on 'change', @autoSaveIfNeeded` and `@autoSaveIfNeeded(model, options)` was receiving model and options arguments as it should according to http://backbonejs.org/#Events-catalog\n\nAfter update to 0.9.9 `@autoSaveIfNeeded` receives only `model`, but no `options` attribute. Is there any changes on model binding in Backbone since 0.9.2?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2118",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2118/comments",
    "title": "Collection._byId is not updated after success of create(m, {silent:true})",
    "created_at": "2013-01-13T07:03:02Z",
    "updated_at": "2013-02-28T18:21:54Z",
    "body": "In Backbone.js 0.9.9, when a collection object's create() method is called with {silent:true} option, after the server returns {\"id\": id}, Collection._byId still remain unchanged, and Collection.get(id) will be undefined, only Collection.get(cid) will work.\n\nThe bug is in line 918, method Collection_onModelEvent(), backbone.js: in the current code, Collection._byId is only updated in \"change\" event, which will be suppressed by {silent:true} option. A quick fix is to directly handles \"sync\" event in method _onModelEvent().\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2115",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2115/comments",
    "title": "No AMD support?",
    "created_at": "2013-01-12T15:35:39Z",
    "updated_at": "2015-07-09T05:47:06Z",
    "body": "I hope this is not due to some theoretical considerations because in practice the lack of AMD support creates an inconvenience for developers.\n\nI know you can use an AMD compliant fork or a shim config in RequireJS, but sill ii would be prerable if AMD support was available in Backbone.\n\nI hope you can add this feature in release 1.0.\n\nSee this article for more info:\n\nhttp://bardevblog.wordpress.com/2013/01/05/re-learning-backbone-js-require-js-and-amd/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2110",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2110/comments",
    "title": "Bumping the release",
    "created_at": "2013-01-11T22:19:13Z",
    "updated_at": "2013-01-15T20:45:22Z",
    "body": "@jashkenas - since there've been some pretty major changes since **0.9.9**:\n- simple branch\n- reversal of validation semantics \n- fix on `_.isEqual` vs. `!==` change calculation\n\nI think it would be beneficial to have at least a minor version bump (0.9.10) as soon as possible - a number of issues are closed lately with \"check out the latest master\", and it would be good to have people working off a version that is closer to the release candidate for 1.0 than the current 0.9.9.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2105",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2105/comments",
    "title": "Suggestion: in Model.set and/or Model.save - call Model.parse() or something equivalent?",
    "created_at": "2013-01-10T19:57:09Z",
    "updated_at": "2013-03-19T11:53:45Z",
    "body": "I am finding situations where I would like the Model to \"intercept\" the attribute being set (or saved to it) and calculate other \"attributes\" which I'd like to add to the set of attributes currently being set/saved.  \n\nSeems it would be more efficient to have this ability cooked into the Model definition (just like parse), rather than having the Model or Collection \"listen\" for the change in question and react to it.  I get concerned about registering so many \"listeners\" on the _events stacks.\n\nOverloading \"parse\" with this is probably not a good idea, since parsing the attribute data being sent/returned from server may likely need different \"intercept / transform\" logic than what I am proposing above.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2103",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2103/comments",
    "title": "model.set('a','b') twice makes changedAttributes() false",
    "created_at": "2013-01-10T18:22:28Z",
    "updated_at": "2013-01-13T13:00:08Z",
    "body": "(coffeescript)\n\n```\nmodel.set(time,'newval')\nmodel.set(time,'newval')\nmodel.save() if model.changedAttributes() #not saving\n```\n\nand\n\n```\nmodel.set(time,'newval')\nmodel.set(time,'oldval')\nmodel.save() if model.changedAttributes() #saves, but shouldn't :(\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2101",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2101/comments",
    "title": "More explicit listing of `options`",
    "created_at": "2013-01-10T14:52:15Z",
    "updated_at": "2013-03-19T11:56:06Z",
    "body": "[This discussion](https://groups.google.com/forum/?fromgroups=#!topic/backbonejs/w-cWk-0fS0c) on the mailing list made me realize you need to read a paragraph or two of text to figure out what the `options` param to Backbone methods take - would be nice to have an explicit listing in the documentation under those methods.  I might go so far as to suggest [JSDuck](https://github.com/senchalabs/jsduck) documentation to generate it, with return signatures and the like.\n\nIn any case, I was thinking something like the following:\n\n---\n## fetch collection.fetch([options])\n\nFetch the default set of models for this collection from the server, resetting the collection when they arrive. Delegates to Backbone.sync under the covers for custom persistence strategies and returns a jqXHR. The server handler for fetch requests should return a JSON array of models.\n\n``` javascript\n// code sample\n```\n### Options\n- `success`: Callback for a successful request, passed `(collection, response, options)`\n- `error`: Callback for a failed request, passed `(collection, xhr, options)`\n- `update`: If `true`, will use `update` to (intelligently) merge the fetched models when the model data returns from the server.  If `false`, the collection will be (efficiently) reset.\n\n---\n\nJust wanted to gauge interest - happy to do the legwork.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2100",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2100/comments",
    "title": "Explicit message on listenTo callback lack",
    "created_at": "2013-01-10T14:11:43Z",
    "updated_at": "2013-01-15T14:26:03Z",
    "body": "With version 0.9.9, a view using an unexisting callback with `listenTo` will break at runtime with an `Uncaught TypeError: Object [object Object] has no method 'call'` at line 100. \n\nThis error could be improved with the already existing `'Method ... does not exist'`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2099",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2099/comments",
    "title": "Collection.sortedIndex should wrap the iterator arg if it is a single String",
    "created_at": "2013-01-10T10:37:39Z",
    "updated_at": "2013-01-10T19:47:41Z",
    "body": "While proxying the call to _.sortedIndex(list, value, [iterator] )\n\nJust like you do for groupBy, sortBy, countBy,\n\nIf iterator arg is not a function, wrap the argument in a function that does model.get(n);\n\nNote, the iterator is arg3, whereas it is arg2 for groupBy, sortBy, countBy.\n\nThis then allows you to pass a string to the sortedIndex function, which is better than using collection.indexOf() for large sorted collections.\n\nWith the current code, you have to wrap the string in a model.get(n) function.\nAlso when calling sortedIndex(), the developer may want to just pass coll.comparator, knowing that it is a string OR single arg function.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2097",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2097/comments",
    "title": "Add Underscore aliases for collection methods",
    "created_at": "2013-01-09T22:35:27Z",
    "updated_at": "2013-01-09T22:38:00Z",
    "body": "I was bitten today trying to use `forEach` on a collection. It looks like #1560 was going along those lines, but didn't get very far.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2095",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2095/comments",
    "title": "Fetch uses 'parse' on both collection & model, when using {update: true}, it doesn't use parse at the right time",
    "created_at": "2013-01-09T00:36:22Z",
    "updated_at": "2013-02-08T17:14:50Z",
    "body": "If I have models that a rooted such as [{model: {id: 1, ...},{model: {id: 2, ...}}] and I use update: true on a fetch, it will never find the models properly since the update method (line 796 in 0.9.9) uses a non-parsed version of the model to determine its ID.\n\nHowever the fix to this may not be as easy as running the models parse since parse requires an instance.\n\nAlso passing in the option of parse defeats the purpose of even including the parse method on the model since it does it directly on the full results, versus each individual, which could cause a duplication of code or an ugly closure using the models parse, but still requires me to pass that parse in each time I want to use update.\n\nMaybe I'm the only one, but my parse methods don't even reference the instance, so maybe it might be a good idea to make it a class method instead and have the 2nd parameter in the parse be the instance, if someone really needs to get to it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2094",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2094/comments",
    "title": "Uncaught TypeError: Cannot read property 'update' of undefined ",
    "created_at": "2013-01-09T00:01:25Z",
    "updated_at": "2013-03-04T07:41:28Z",
    "body": "Open todos/index.html in chrome (current version), you will get this error.  It prevents you from being able to add items to the list.\n\nbackbone.js line 812\n\n```\n// Fetch the default set of models for this collection, resetting the\n// collection when they arrive. If `update: true` is passed, the response\n// data will be passed through the `update` method instead of `reset`.\nfetch: function(options) {\n  options = options ? _.clone(options) : {};\n  if (options.parse === void 0) options.parse = true;\n  var success = options.success;\n  options.success = function(collection, resp, options) {\n    var method = options.update ? 'update' : 'reset';\n```\n\nUncaught TypeError: Cannot read property 'update' of undefined\n        collection[method](resp, options);\n        if (success) success(collection, resp, options);\n      };\n      return this.sync('read', this, options);\n    },\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2093",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2093/comments",
    "title": "should _computeChanges use !_.isEqual() instead of simply !== for array/object?",
    "created_at": "2013-01-08T23:47:18Z",
    "updated_at": "2013-01-08T23:56:43Z",
    "body": "I'm thinking of overriding _computeChanges to use !_.isEqual() instead of !== for array/object.  Do you think it's a good idea?\n\nI have having this problem:  http://stackoverflow.com/questions/14223630/backbone-model-with-an-array-object-property-infinite-change-event-triggered\n\nMy model has a property of type array and the same array returned from the server fails the !== test because !== only compare reference.\n\nPlease advice.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2091",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2091/comments",
    "title": "Bug: Collection.get throws error",
    "created_at": "2013-01-08T15:49:45Z",
    "updated_at": "2013-01-29T15:49:43Z",
    "body": "Line 709: Uncaught TypeError: Cannot read property 'prototype' of undefined\n\nFrom what I can see 'this' doesn't have the model in it. I changed line 709 from:\n\nthis._idAttr || (this._idAttr = this.model.prototype.idAttribute);\n\nto:\n\nthis._idAttr || (this._idAttr = Collection.prototype.model.prototype.idAttribute);\n\nand everything seems to work.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2090",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2090/comments",
    "title": "collection.update problem with merging models",
    "created_at": "2013-01-08T12:38:42Z",
    "updated_at": "2013-02-15T15:45:13Z",
    "body": "I have a collection of models which I am updating within an interval of 5-10 seconds. My problem is, that when calling collection.update(), the data is not being merged into existing models, but instead a new model is created.\n\nI expected the following behavior:\nBefore update:\nc1\nc2\nc3\n\nAfter update I expected this:\nc1 (merged data)\nc2 (merged data)\nc3 (merged data)\n\nAfter update I got this:\nc4\nc5\nc6\n\nThis means that the initialize function on my Model is also executed on each update. This is not the behavior that I would expect. I would expect the collection to update the attributes and fire a change event.\n\nAm I doing something completely wrong or is this a bug?\n\nI am using 0.9.9\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2089",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2089/comments",
    "title": "Model id no longer settable via attributes hash",
    "created_at": "2013-01-08T11:52:28Z",
    "updated_at": "2013-01-08T14:26:38Z",
    "body": "I have a model which I create using:\nvar model =  new MyModel({ id: 42 });\n\nIn Backbone 0.9.2 this worked fine, however in Backbone 0.9.9 this no longer works and I must:\nvar model = new MyModel();\nmodel.id = 42;\n\nThe same issue is exhibited when performing:\nmodel.set({'id': 42});\n\nThe backbone documentation states that the id may be set via the attributes hash, but this appears not to be true for 0.9.9. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2087",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2087/comments",
    "title": "`route` event now fired by router and history",
    "created_at": "2013-01-08T02:38:54Z",
    "updated_at": "2013-01-08T13:18:54Z",
    "body": "Since PR #2062 got merged into master there are now two places that `route` is triggered:\n1.  On the router \n2.  On BB.History\n\nIt seems odd to me that there is an identical event name being triggered in two different locations.\n\nIs there a particular reason why this behavior is desired?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2086",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2086/comments",
    "title": "Changelog in master since 0.9.9",
    "created_at": "2013-01-08T02:33:15Z",
    "updated_at": "2013-03-19T18:36:26Z",
    "body": "I know historically documentation changes and changelog additions weren't made until a release was cut, but can I suggest that a better process would be to update the docs and add to a changelog as API-changing pull requests get accepted in master? It would probably result in much less of a scramble to fix mistakes in the docs _after_ a release is made (as was the case in 0.9.9).\n\nFor example, I'd like to know what intentional changes have been made since 0.9.9 because I've got several bugs in my application when using `master`, that don't exist when on `0.9.9`. Additionally, it was very simple to upgrade [Backbone-Relational](https://github.com/PaulUithol/Backbone-relational) from 0.9.2 to 0.9.9 but the project (and its tests) is broken on the current master.\n\nI believe these problems are related to when the \"simple\" branch was merged in, but I'm unclear exactly what API changes were made intentionally vs. unintentionally, so it's hard to contribute a meaningful patch or test case.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2084",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2084/comments",
    "title": "Partial update",
    "created_at": "2013-01-07T03:08:55Z",
    "updated_at": "2013-01-07T21:22:20Z",
    "body": "Since partial patch is available in the upstream direction, it would make sense for it to work the other way, but this seems somewhat prevented by defaults.\n\nThis scenario:\n\n``` javascript\nvar MyModel = Backbone.Model.extend({\n    defaults: {\n      a: 1,\n      b: 2\n    }\n});\n\ncollection.add(new MyModel({id: 'x', a:3, b:4}));\n\ncollection.update();\n\n\nUpdate returns model {id: 'x', b:5} ('a' attribute missing).\n```\n\nSince the merge is done with the \"attributes\" property the merged result will be {id: 'x', a:1, b:5}, while a partial update would expect {id:'x', a:3, b:5}.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2080",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2080/comments",
    "title": "_.bindAll(this) ruins Collection.model?",
    "created_at": "2013-01-06T19:02:10Z",
    "updated_at": "2013-12-18T17:26:58Z",
    "body": "Just recently updated to 0.9.9, and stuff broke. \n\nLooks like when using _.bindAll(this) in initialize the class model attribute is corrupt.\n\n``` javascript\nvar Users = Backbone.Collection.extend({\n\n    model: User,\n\n    initialize: function(models, options) {\n      _.bindAll(this);\n      ... stuff\n    }\n\n   ... stuff\n});\n\nvar users = new Users();\n```\n\nusers.model is not User.\n\nRemove _.bindAll and this problem goes away.\n\nAny thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2078",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2078/comments",
    "title": "Collection fetch does not render on \"add\" event",
    "created_at": "2013-01-06T14:43:46Z",
    "updated_at": "2013-01-12T18:24:12Z",
    "body": "I've set up this AppView that triggers the overall Backbone's application!\nI want to fetch my collection and dynamically add items when the \"add\" event is thrown!\n\n```\nvar AppView = Backbone.View.extend({\n    el: $('#pics'),\n\n    initialize: function () {\n\n        // Fetch contents\n        this.collection = new PLibrary;\n        this.collection.on(\"add\", this.renderMessage, this);\n\n        $.ajaxSetup({async: false});\n        this.collection.fetch({update: true});  // fires an \"add\" event for every new model\n        $.ajaxSetup({async: true});\n\n        _.bindAll(this, 'render');\n    },\n\n    renderMessage: function(p){\n        var mV = new PRow({model: p});\n        this.$el.append(mV.render().el);\n    }\n\n});\n```\n\nThe code above sends the Ajax request to the server, but nothing gets displayed.\nInstead... If I make use of render() like this... the application works.\n\n```\nvar AppView = Backbone.View.extend({\n    el: $('#pics'),\n\n    initialize: function () {\n\n        // Fetch contents\n        this.collection = new PLibrary;\n        this.collection.on(\"add\", this.renderMessage, this);\n\n        $.ajaxSetup({async: false});\n        this.collection.fetch();\n        $.ajaxSetup({async: true});\n\n        _.bindAll(this, 'render');\n        this.render();\n    },\n\n    renderMessage: function(p){\n        var mV = new PRow({model: p});\n        this.$el.append(mV.render().el);\n    },\n\n    render: function() {\n        var self = this;\n        _.each(this.collection.models, function (item) {\n            self.renderMessage(item);\n        }, this);\n    }\n\n});\n```\n\nIt seems that the \"add\" event doesn't get thrown!\nHelp me please\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2077",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2077/comments",
    "title": "Okay to use the styling/layout of Backbone's docs for Backbone-relational?",
    "created_at": "2013-01-06T14:38:21Z",
    "updated_at": "2013-01-16T16:11:14Z",
    "body": "Just wanted to ask this explicitly. A contributor on backbone-relational created a nice set of docs using the same layout and styling as Backbone/Underscore; see https://github.com/PaulUithol/Backbone-relational/pull/236 and http://jayd3e.github.com/Backbone-relational/ .\n\nIs this okay with you guys? I don't want to give of the impression we're in any way official (or have something to do with Documentcloud), but it's nice to have a consistent set of documentation.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2075",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2075/comments",
    "title": "Backbone history possible bug on a page with querystring",
    "created_at": "2013-01-05T00:08:32Z",
    "updated_at": "2013-09-25T20:03:21Z",
    "body": "If you go to a page with any querystring, lets say:\n`http://domain.com/pathname/?qs=5`\n\nAnd you try to navigate using `router.navigate` or `Backbone.history.navigate` to the same page without  querystring it won't do that. In this case trying to navigate to `/pathname/` won't do anything.\n\nWhat happens is that on https://github.com/documentcloud/backbone/blob/master/backbone.js#L1173\n`this.fragment` is equal to `fragment` so `this.fragment` is getting an incorrect value on `history.start` https://github.com/documentcloud/backbone/blob/master/backbone.js#L1099\n\nI've created an example here:\nhttp://dl.dropbox.com/u/63643122/backbone.html?qs=5\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2074",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2074/comments",
    "title": "\"change\" event will not trigger when an earlier handler calls set on an attribute attempting to set it to its existing value",
    "created_at": "2013-01-04T21:39:34Z",
    "updated_at": "2013-01-04T22:12:25Z",
    "body": "Its a little hard to explain, but here is a short code example. \n\n``` javascript```\nvar m = new Backbone.Model({foo:\"a\", bar:\"b\"});\nm.on(\"change:foo\", function(m){ \n    console.log(\"change:foo triggered\");\n    //No-op set will break the \"change\" event\n    m.set(\"bar\", \"b\");\n}).on(\"change:bar\", function(){\n    console.log(\"change:bar triggered\");\n}).on(\"change\", function(){\n    console.log(\"change triggered\")\n});\n\nconsole.log('\"change:foo\" will trigger, but not \"change\"');\nm.set(\"foo\", \"z\");\nconsole.log('Both \"change:bar\" and \"change\" will trigger');\nm.set(\"bar\", \"z\");\nconsole.log('\"change:foo\", \"change:bar\", and \"change\" will all now trigger');\nm.set(\"foo\", \"z2\");\n```\n\nThe issue is the `this._pending` variable on line 480. Once set is called without making a change, it will set `this._pending` to `false` even for the change events further up in the call stack. \n\nI'm not 100% sure why `this._pending` is not just a local variable, but I'm not familiar enough with the code to suggest a patch. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2072",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2072/comments",
    "title": "Stack overflow in iOS 6 relating to linked lists callbacks 0.9.2",
    "created_at": "2013-01-04T18:47:22Z",
    "updated_at": "2013-01-04T18:58:40Z",
    "body": "Hello,\n\nWhile working on a fairly large code base I noticed that when backbone triggers events (lines 159-175)  the linked list traversal crashes in iOS 6 and only iOS 6.  More than likely Apple changed the browser behavior relating to callbacks.\n\n```\n      while (event = events.shift()) {\n        if (node = calls[event]) {\n          tail = node.tail;\n          while ((node = node.next) !== tail) {\n            node.callback.apply(node.context || this, rest);\n          }\n        }\n        if (node = all) {\n          tail = node.tail;\n          args = [event].concat(rest);\n          while ((node = node.next) !== tail) {\n            node.callback.apply(node.context || this, args);\n          }\n        }\n      }\n\n      return this;\n    }\n```\n\nUpgrading to .9.9 isn't feasible at this time and I was wondering if converting it to a dynamic array could perhaps help.  Not sure if this could break something somewhere else so I have not attempted to modify the underpinnings yet.  Any help or guidance would be most appreciated.  Thanks. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2071",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2071/comments",
    "title": "Potential security thing for hashes",
    "created_at": "2013-01-04T18:44:41Z",
    "updated_at": "2015-09-24T14:40:06Z",
    "body": "in the code for routes, a raw string is passed to _updateHash on line 1242, which can cause security issues according to certain automated scanners. Here's a potential solution that I am using, which quiets down these scanners:\n\n```\n// Update the hash location, either replacing the current entry, or adding\n// a new one to the browser history.\n_updateHash: function(location, fragment, replace) {\n  if (replace) {\n    var href = location.href.replace(/(javascript:|#).*$/, '');\n    location.replace(href + '#' + fragment);\n  } else {\n    // Some browsers require that `hash` contains a leading #.\n    location.hash = '#' + encodeURIComponent(fragment);\n  }\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2070",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2070/comments",
    "title": "When upgrade to 0.99, the console report an error: \"_.pick is not a function\"  ",
    "created_at": "2013-01-04T16:18:36Z",
    "updated_at": "2013-01-04T18:00:36Z",
    "body": "Hello.\nWhen upgrade to 0.99, the console report an error: \"_.pick is not a function\"  . Why?\nPrevious version: 0.9.1\n\nRegards\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2069",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2069/comments",
    "title": "Some options values are automatically copied over to a object",
    "created_at": "2013-01-04T08:58:01Z",
    "updated_at": "2013-01-04T19:33:09Z",
    "body": "Currently some options are by convention copied over to a View / Collection / Model  if they're passed in as options. The following 3 lines illustrate the behaviour:\n\nhttps://github.com/documentcloud/backbone/blob/a93ed0443f2a2a1d5d7af8c0f8672285c54275ca/backbone.js#L233\nhttps://github.com/documentcloud/backbone/blob/a93ed0443f2a2a1d5d7af8c0f8672285c54275ca/backbone.js#L1234\nhttps://github.com/documentcloud/backbone/blob/a93ed0443f2a2a1d5d7af8c0f8672285c54275ca/backbone.js#L553\n\nAnd to me, this seems wrong. It just seems like magic, some values are being copied over while others aren't. And I have no way to change that behaviour. \n\nWhat would make sense was if all the values present in the prototype are copied over to from the options.  So for example:\n\n``` javascript\nvar collection = Backbone.Collection.extend({\n    query: \"\",\n});\nnew collection({ query: \"kate upton\" });\n```\n\nWould result in the collections query value being populated. Or am I not seeing something that makes this a bad practice?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2068",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2068/comments",
    "title": "Why don't update position of Model in collection when using collection.update?",
    "created_at": "2013-01-04T08:02:24Z",
    "updated_at": "2014-07-19T05:19:07Z",
    "body": "Ex:\nold collection:\ncollection.models: [{id:2},{id:4}, {id:5}]\n\ncollection.update([{id:1}, {id:2}, {id: 3}, {id: 5}]);\n\nnew collection:\ncollection.models: [{id:2}, {id:5},{id:1}, {id: 3}]\n\ni want : \ncollection.models: [{id:1}, {id:2}, {id: 3}, {id: 5}]\nwhy not do it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2067",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2067/comments",
    "title": "Reset called on empty collection throws error.",
    "created_at": "2013-01-04T01:56:34Z",
    "updated_at": "2013-01-04T02:29:55Z",
    "body": "the problem is here:\n\n(line 822) for (var i = 0, l = this.models.length; i < l; i++) {\n\nthis.models.length throws \n\nUncaught TypeError: Cannot read property 'length' of undefined \n\nif models is not populated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2066",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2066/comments",
    "title": "Problem with nested external templates",
    "created_at": "2013-01-03T20:37:35Z",
    "updated_at": "2013-01-03T21:01:23Z",
    "body": "So I have 2 main templates, one for if user is logged in and one if logged out. I have these working fine.  \nI want the logged in template to have multiple nested templates that are rendered at different times as if different pages. \nLike if your logged in you can go to home page or go to bio page or etc.\nBut doing this causes the whole page to break, any way around this or fix or??\n\n```\n        <script id=\"logged_in\" type=\"text/template\">\n                   <div class=\"nav\">    //Navigation for page 1 and page 2    </div>\n\n                   <script id=\"page_1\" type=\"text/template\">\n                   //Page 1 - home\n                   </script>\n\n                   <script id=\"page_2\" type=\"text/template\">\n                   //Page 2 - bio\n                   </script>\n\n        </script>\n        <script id=\"logged_out\" type=\"text/template\">\n        //Form to login\n        </script>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2064",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2064/comments",
    "title": "triggering invalid event instead of an error event (validation)",
    "created_at": "2013-01-03T09:37:38Z",
    "updated_at": "2013-01-24T17:59:08Z",
    "body": "Hello,\n\nI recognized that someone changed the event name when the validation fails. Because the documentation doesn't changed yet I would like to ask if this will be the new behavior or not? (Sorry for that question, but I didn't find an issue for that change..)\n\nhttps://github.com/documentcloud/backbone/blob/a93ed0443f2a2a1d5d7af8c0f8672285c54275ca/backbone.js#L541 \n\n``` javascript\nthis.trigger('invalid', this, error, options || {});\n```\n\nThx!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2061",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2061/comments",
    "title": "Trigger Events#update on collection.update",
    "created_at": "2013-01-02T10:04:09Z",
    "updated_at": "2013-01-03T00:45:49Z",
    "body": "Updating a collection matters to views, so collection.trigger('update') should be automatic, no?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2055",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2055/comments",
    "title": "Documentation for Model#save is misleading as it comes to error handler",
    "created_at": "2012-12-31T13:38:42Z",
    "updated_at": "2013-01-24T21:48:52Z",
    "body": "http://backbonejs.org/#Model-save says that 'error' callback of Model#save takes arguments: (model, xhr, options). This is no longer true for Backbone 0.9.9: probably as result of removing wrapError(), 'error' callback receives the same arguments as 'error' callback for jQuery: (jqXHR, textStatus, errorThrown).\n\nAdditionally, removing wrapError() can completely break applications using Backbone < 0.9.9 - but neither change log for 0.9.9 nor the section 'Upgrading to 0.9.9'  contain any warning.\n\nPlease correct both the documentation and change log or close the issue if you regain backward compatibility when fixing #2031 .\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2052",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2052/comments",
    "title": "Make view options (or arguments) available to all methods called by _ensureElement()",
    "created_at": "2012-12-29T22:35:18Z",
    "updated_at": "2012-12-30T00:14:24Z",
    "body": "I just noticed that `model.attrs`, `model.id`, etc can all be functions... but what good is that if they can't use datat that gets passed to initialize? I would like to be able to do something like:\n\n```\nvar Foo = Backbone.View.extend({\n  id: function(options){ return \"Foo\" + options.model.id + \"View\" }\n})\n```\n\nBut right now, the function just get called with `_.result()` which doesn't provide any context at all.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2046",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2046/comments",
    "title": "0.99 caching updated js files",
    "created_at": "2012-12-29T00:37:06Z",
    "updated_at": "2012-12-29T00:55:32Z",
    "body": "I had problems prior to 0.92 when updating a js file and uploading to the server. The app would fail to initialise on the next page refresh due to JS errors which seemed to be related to caching.  A few page refreshes would clear this, even though cache is disabled in Chrome console\n\n0.92 fixed this and was very stable. All file updates were immediately reflected in the next page refresh\n\n0.99 is buggy again, references to $ in view and model files fail for a few page refreshes. I have gone back to 0.92 which is fine\n\nThis is my main.js. When the app fails, it does not reach the console.log(\"app ready\")\n\n<code>\nrequire.config({\n    paths: {\n        jQuery:     'libs/jquery/jquery-1.8.2.min',\n        Underscore: 'libs/underscore/underscore',\n        Backbone:   'libs/backbone/backbone',\n        text: 'libs/require/text',\n        json2:  'libs/json/json2',\n        templates: '../js/template',\n        plugins: 'libs/plugins.js',\n        jqueryui: 'libs/jquery/jquery-ui-1.8.24.custom.min',\n        bootstrap: \"libs/bootstrap\"\n    },\n\n```\nshim: {\n    'Underscore': {\n        exports: 'Underscore'\n    },\n\n    'jQuery': {\n        exports: 'jQuery'\n    },\n\n    'bootstrap': {\n        exports: 'bootstrap',\n        deps: ['jQuery']\n    },\n\n    'jqueryui': {\n        exports: 'jqueryui',\n        deps: ['jQuery']\n    },\n\n    'plugins':{\n        deps: ['jQuery']\n    },\n\n    'Backbone': {\n        deps: ['Underscore'],\n        exports: 'Backbone'\n    }\n\n}\n```\n\n});\n\nconsole.log(\"start up\")\ndefine(function (require) {\n    'use strict';\n    console.log(\"app ready\")\n    var RootView = require('app');\n    new RootView();\n});\n</code>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2045",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2045/comments",
    "title": "Make remove() auto-cleanup more events?",
    "created_at": "2012-12-29T00:13:34Z",
    "updated_at": "2013-03-19T12:17:19Z",
    "body": "My understanding is that events aren't auto cleaned up in `View#remove` if they were created like:\n- `this.model.once('change', this.render, this)` if the change event is never fired\n- `this.model.on('change', this.render, this)`\n\nThe second scenario is fixed when people use `this.listenTo(model, 'change', this.render)` instead, but seems like there's no easy way to have `once` events currently cleaned up.\n\nPossible proposals:\n- add a `listenToOnce` method\n- add `this.model.off(null, null, this); this.collection.off(null, null, this);` into `View#remove`? (like the original dispose implementation of #1461), to take care of cases like this automatically? It would auto-cleanup both for usages of once and just other places where people use on instead of listenTo.\n- make `this.model.on(..., ..., view)` automatically get added to the events that get removed when view.stopListening is called?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2044",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2044/comments",
    "title": "Events.once don't properly remove themselves",
    "created_at": "2012-12-28T22:27:36Z",
    "updated_at": "2012-12-29T00:14:10Z",
    "body": "You can see below that once calls off, and passes in the event and the anonymous function.  But it attaches the original callback to _callback.\n\nBelow that you can see inside the off function where it decides which events to keep.  Because it does `ev.callback._callback || ev.callback`, it always returns the _callback in this case, so passing in the anonymous function causes it not to be removed.\n\nIt should probably be checking both _callback and callback separately.\n\nFrom line 134\n\n``` javascript\nvar once = _.once(function() {\n  self.off(name, once);\n  callback.apply(this, arguments);\n});\nonce._callback = callback;\n```\n\nFrom line 163\n\n``` javascript\nif ((callback && callback !== (ev.callback._callback || ev.callback)) || \n  (context && context !== ev.context)) {\n  events.push(ev);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2043",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2043/comments",
    "title": "Backbone polymorphism does not support two models with same ID",
    "created_at": "2012-12-28T22:11:42Z",
    "updated_at": "2013-01-07T21:58:58Z",
    "body": "Following the polymorphic collection instructions in #793, there seems to be an issue if you have two different models types (saving to two different URLs, and ultimately two different database tables) with the same `id` \n\n``` js\ncollection = new App.Collections.PaymentsCollection(\n  {\"id\":6,\"amount\":\"2000.0\",\"class_name\":\"CreditCard\"},\n  {\"id\":6,\"amount\":\"1000.0\",\"class_name\":\"ECheck\"}\n)\ncollection.models.length\n>>> 1\ncollection.models\n>>> [CreditCard]\n```\n\nI can understand why a collection would want to remove duplicate models of identical objects, but I think it's a reasonable use case to have a polymorphic collection that may have models of different classes but with the same id.\n\nThe main sticking point seems to be in [`collection.get`](https://github.com/documentcloud/backbone/blob/master/backbone.js#L709), which [`collection.add`](https://github.com/documentcloud/backbone/blob/master/backbone.js#L605) uses in its duplication check.\n\nDo you have any opinions on the best way to handle this polymorphism use case? Up until this one issue, the solution from #793 has felt easy and elegant to me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2042",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2042/comments",
    "title": "Adding where() filter with toJSON() causes error",
    "created_at": "2012-12-28T20:59:49Z",
    "updated_at": "2012-12-28T21:02:46Z",
    "body": "The demo is at http://jsfiddle.net/XkTaH/.  The where() returns a _has no method 'toJSON'_ error.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2036",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2036/comments",
    "title": "Properly setting object properties and array elements on models",
    "created_at": "2012-12-27T19:59:57Z",
    "updated_at": "2012-12-27T22:36:31Z",
    "body": "Let's say we have a model like this:\n\n<pre>\n    var Book = Backbone.Model.extend({\n        defaults: function() {\n            return {\n                'title': '',\n                'authors': [],\n                'publish_info': {\n                    'publisher': '',\n                    'isbn': '',\n                    'year': 0,\n                    'month': 0\n                }\n            };\n        },\n        initialize: function() {\n            this.on('change', function(model, options) {\n                console.log('change');\n            });\n        }\n    });\n</pre>\n\n\nNow in the above model, I literally have NO way to change the properties inside the `publisher_info` object which will also fire the `change` event.\n\nI can do something like this:\n\n```\nb.get('publish_info')['year'] = 2012;\n```\n\nBut this defeats the purpose of using models -- no change event is fired.\n\nSimilarly, I have no way to change elements inside the `authors` array.\n\n```\nvar b = new Book();\n\n// works fine\nb.set('title', 'test');\n```\n\nBut:\n\n```\n// replaces the entire 'publish_info' object instead of \"updating\" it\nb.set('publish_info', {'year':2012});\n\nb.set('authors', ['mike']);\n\n// this replaces the entire array, and the author 'mike' is vanished\nb.set('authors', ['jane']);\n```\n\nHence,  we need a way to set object properties and array elements.\n\nWhat we can do is something like this:\n\n`set` should `_.extend` the object instead of replacing it. Pass `{'replace':true}` as an option to replace, which is `false` by default\n\n```\n// extend\nb.set('publish_info', {'year':2012});\n\n// replace\nb.set('publish_info', {'year':2012}, {'replace':true});\n```\n\nSimilarly, for arrays\n\n```\n// appends\nb.set('authors', ['jane']);\n\n// prepends\nb.set('authors', ['jane'], {'at': 0});\n\n// replaces\nb.set('authors', ['jane'], {'replace': true});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2034",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2034/comments",
    "title": "Number of Change events fired possibly inconsistent",
    "created_at": "2012-12-27T16:26:42Z",
    "updated_at": "2012-12-28T15:41:17Z",
    "body": "The following made up tests show an inconsistency in the number of times the change event fires. I believe there are existing tests that contradict each other too.\n\n``` javascript\ntest(\"one change is fired for two sets\", 1, function () {\n    var model = new Backbone.Model();\n    model.on('change:property', function() {\n      model.set('property', 'bar');\n    });\n    model.on('change', function() {\n      ok(true);\n    });\n    model.set('property', 'foo');\n  });\n\n  test(\"two change events are fired, the second is for the SILENT set, event though it happens after the second non silent set\", 2, function () {\n    var model = new Backbone.Model();\n    model.on('change:property', function() {\n      model.set('property', 'bar');\n    });\n    model.on('change', function() {\n      model.set({another: 'cat'}, {silent: true});\n      ok(true);\n    });\n    model.set('property', 'foo');\n  });\n\n\n  test(\"fires an EXTRA change event\", 2, function() {\n    var count = 0;\n    var model = new Backbone.Model();\n    model.on('change:y', function() { ok(false); });\n    model.on('change', function() {\n      switch(count++) {\n        case 0:\n          model.set({y: true}, {silent: true});\n          ok(true);\n          break;\n        default:\n          ok(true);\n      }\n    });\n    model.set({x: true});\n  });\n```\n\nExisting tests that I think have conflicting expectations:\n\n``` javascript\n//expects on 'change' event for each of the sets\nnested `'change'` with silent \n\n//on the other hand this will only run once\n#1964 - final `change` event is always fired, regardless of interim changes\n```\n\nAnd lastly it is this test that made me think something is wrong:\n`nested `set` during `'change:attr'`. I think the writer of this test thinks the two 'change' events that are recorded were fired by the first two non silent sets, when it is actually `model.set({z: true}, {silent:true});` that triggers the second  'change' (before the last set fires). You'll have to step through this last test to see what happens.\n\nMy understanding of current functionality is that each `set`, regardless of whether or not the set happens inside some kind of change event should fire one `change` event, and that silent sets never fire their own `change` event. So if you have a bunch of silent sets, then a non silent set, there will still only be one change event.\n\nNote that this was the state of affairs before pull request #2022. I'm not sure what's wrong here, or if something is wrong, but I thought I'd bring it to your attention. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2032",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2032/comments",
    "title": "backbone.js facebook api direction required",
    "created_at": "2012-12-27T04:54:22Z",
    "updated_at": "2012-12-27T05:14:39Z",
    "body": "hi guyz\ni've an app in facebook developed in codeignitor at the backend and on the front end simple ajax calls are used to update the page. All my page html is created dynamically in code ignitor and now the app has grown so much that i needed to shift my code to some client side framework. for this, i found out backbone.js as good client side framework.but i've few problems in choosing how to shift/ translate my code or what changes do i need to make at my current client side and php code to use backbone.js.\n\nAlso i've a confusion that currently my page's html is built dynamically from codeignitor and passed on through ajax call and then displayed. As for backbone, how can i work with this dynamically created html?\nAs far as i have learnt, backbone.js can work with templates ( underscore or any other ) but how can i my dynamic html to some template?\nI also studied require.js which is a javascript module loader to load the template or js files. If i can get any direction on how can i move from my current design to something client side framework and how?\nFor me, this is necessary and i can't leave out this option. I have to now use backbonejs to make things simple and RESTful.\nPlz help guyz\nThnx\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2031",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2031/comments",
    "title": "Unable to override sync error behavior in 0.9.9",
    "created_at": "2012-12-27T01:54:02Z",
    "updated_at": "2013-03-19T02:40:54Z",
    "body": "From 0.9.2 -> 0.9.9 it's no longer possible to override the behavior of the the error handler, only augment it. As a consequence it's not possible to prevent error responses from triggering on the model (yes in the ideal world you would probably want this to happen but not all services tiers are created equal :) )\n\nWorse the error handler signature changed between the two versions making this a breaking change for any code that used Backbone.sync directly and provided an error handler.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2030",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2030/comments",
    "title": "Validate method doesn't raise events when invalid value is set back to original value.",
    "created_at": "2012-12-26T23:53:52Z",
    "updated_at": "2012-12-27T15:38:11Z",
    "body": "1. setup a model with a property called Name (for this example)\n2. setup a validate method on the model that returns invalid if value is greater than 10 characters\n\n<pre>\n    window.Task = Backbone.Model.extend({\n      console.log('validating');\n      validate: function(attrs) {\n        if(attrs.Name.length > 10) {\n          return \"too long\";\n        }\n      }\n    });\n</pre>\n\n1. wire up a view (textbox in this case) that sets the Name on this object and bind a method to catch all events on this object\n2. set Name to: 0123456789\n3. the change event gets raised as expected, 'validating' is logged to the console\n4. set Name to: 01234567891\n5. the error event gets raised as expected, 'validating' is logged to the console\n6. set Name back to : 0123456789\n7. **_no event is raised, but 'validating' is logged to the console**_\n8. set name to : 012345678\n9. change event gets raised, 'validating' is logged to the console\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2025",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2025/comments",
    "title": "Using backbone view in node",
    "created_at": "2012-12-26T08:28:44Z",
    "updated_at": "2012-12-26T14:27:45Z",
    "body": "I wonder if I can use backbone view and render them in node?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2023",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2023/comments",
    "title": "Routing with query string stopped to work in v0.9.9",
    "created_at": "2012-12-26T06:55:37Z",
    "updated_at": "2013-11-23T17:47:58Z",
    "body": "I have routing table with routes like:\n\"\" - root page\n\"?create\" - new item page\netc.\nIn previous version (0.9.2) when user navigates to page \"rootUrl?create\" (by opening new link) backbone triggers second route and shows new item page.\nIn v0.9.9 second route not triggered and I see root page.\nIf you need some test case, I'll try to provide it a bit later\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2020",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2020/comments",
    "title": "Case insensitive Id?",
    "created_at": "2012-12-25T02:53:56Z",
    "updated_at": "2012-12-25T03:23:47Z",
    "body": "The json payload returned from the server I'm working with returns a payload where the Id property is capitalized.  Hydrating a model with that specific json payload doesn't set the Model state correctly (isNew() returns true).  Would it be a good idea to treat properties coming back from the server as case insensitive?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2017",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2017/comments",
    "title": "HTTP Status code 204 no content",
    "created_at": "2012-12-24T16:52:34Z",
    "updated_at": "2015-01-08T17:33:02Z",
    "body": "I recognized that currently backbone.js tries to update the model also in case of no content (http status code 204). So the validation and all update functions will be called but without data it finally returns an error.\n\nIs this behavior desired or should backbone recognize the special status code?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2015",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2015/comments",
    "title": "Issue with listenTo/stopListening and context",
    "created_at": "2012-12-24T00:34:27Z",
    "updated_at": "2014-01-03T17:01:02Z",
    "body": "@kpdecker brought up this issue on [#1954](https://github.com/documentcloud/backbone/pull/1954#commitcomment-2347743) - `stopListening` won't work with more than one context. Since the context isn't stored alongside the `_listenerId`, listening to the same object with two contexts makes it impossible to call `stopListening` and have all of the listeners properly removed.\n\n``` js\ntest(\"bulk stopListening with context\", 4, function() {\n      var a = _.extend({}, Backbone.Events);\n      var b = _.extend({}, Backbone.Events);\n      var ctx = {};\n      var calledWithContext = false;\n      var calledWithoutContext = false;\n\n      a.listenTo(b, 'foo', function(){ calledWithContext = true; }, ctx);\n      a.listenTo(b, 'foo', function(){ calledWithoutContext = true; });\n\n      a.stopListening(null, null, null, ctx);\n\n      b.trigger('foo');\n\n      equal(calledWithContext, false);\n      equal(calledWithoutContext, true);\n\n      calledWithContext = false;\n      calledWithoutContext = false;\n      a.stopListening();\n\n      b.trigger('foo');\n\n      equal(calledWithContext, false);\n      equal(calledWithoutContext, false);\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2013",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2013/comments",
    "title": "Ability to use `Model.parse()` during all data-setting operations?",
    "created_at": "2012-12-22T22:14:43Z",
    "updated_at": "2013-11-21T02:31:03Z",
    "body": "**Current functionality?**\nIf I understand correctly, one of the purposes of `Model.parse()` is to parse certain data to other types of data. For example parse latitude/longitude number pairs to a `google.maps.LatLng` object, or converting UNIX timestamps to `Date` objects.\n\n**Question**\nWhy not implement this behavior in `Model.set()`? The way I see it, this functionality should be accessible outside the 'Backbone ecosystem' of adding data to the Model.\n\n**Personal example**\nIn my application, I need to load large amounts of geographical information into view at once.  I do this via a custom XHR request which receives compressed data from the server. On the client side, the data is expanded/parsed, set in Model instances and manually added to collection. I can't use `Model.parse()` this way unfortunately.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2011",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2011/comments",
    "title": "Charset problem with Safari und Chrome",
    "created_at": "2012-12-22T16:21:09Z",
    "updated_at": "2013-06-27T05:35:21Z",
    "body": "Hi\n\nIn the sync function i have found a problem with charsets. Firefox and IE will send automaticly the charset, but safari and chrome not. So i have a site with utf-8 and i send new data from model to my api. an then the data will come with iso-8859-1 and that is very bad.\n\nso now i have change following and it works for me.\n\nfrom\nparams.contentType = 'application/json';\nto\nparams.contentType = 'application/json charset=UTF-8';\n\ni think this is correct!?\n\n-Thierry\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2008",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2008/comments",
    "title": "fetch add calls require additional parameters under 0.9.9",
    "created_at": "2012-12-22T00:41:29Z",
    "updated_at": "2013-01-06T00:10:33Z",
    "body": "Under 0.9.2 this call worked as a ajax+append data:\n\n```\nthis.fetch({\n  add: true,\n  success: callback\n});\n```\n\nAfter upgrading to 0.9.9 this started failing, causing the entire collection's contents to be replaced with the secondary fetch's contents.\n\nThere is a workaround\n\n```\nthis.fetch({\n  add: true,\n  update: true,\n  remove: false,\n  success: callback\n});\n```\n\nBut the comments still lead one to believe that add is the only field required to append data to the collection. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2007",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2007/comments",
    "title": "new View(string) returns error after upgraded to 0.9.9 from 0.9.2",
    "created_at": "2012-12-21T21:49:14Z",
    "updated_at": "2012-12-21T21:52:42Z",
    "body": "If initialize parameter is string instead of json object, I got the following error\n\nUncaught TypeError: Cannot use 'in' operator to search for 'model' in B06jRlQrPbU7eAs53KlINk1 underscore.js:779\n_.pick underscore.js:779\n_.each._.forEach underscore.js:78\n_.pick underscore.js:778\n_.extend._configure backbone.js:1369\nBackbone.View backbone.js:1258\nchild backbone.js:1502\nchild\n\nLooked at the changes in _configure() found it is now using _.pick(), but it doesn't check if the passed parameter is object or string, so got the error.\n\nI can consider to change all new View calls from (string) to json object, but from usage viewpoint, it is a regression issue. My quick fix is to add check in _.pick() \nif (typeof(obj) !== 'object') return {};\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2003",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2003/comments",
    "title": "Backbone.sync: inconsistent arguments to `options.success` and `options.error`",
    "created_at": "2012-12-21T16:47:47Z",
    "updated_at": "2013-01-03T15:57:00Z",
    "body": "Having some issues with this in our app, related to 1f3f45252f .\n\nIt seems inconsistent to me to call `options.success` with the original arguments passed to it by jQuery (`resp, status, xhr` -> `success(resp, status, xhr)`), and to change the signature for the error callback (`xhr, status, thrown` -> `error(model, xhr, options)`?\n\n``` javascript\n    var success = options.success;\n    options.success = function(resp, status, xhr) {\n      if (success) success(resp, status, xhr);\n      model.trigger('sync', model, resp, options);\n    };\n\n    var error = options.error;\n    options.error = function(xhr, status, thrown) {\n      if (error) error(model, xhr, options);\n      model.trigger('error', model, xhr, options);\n    };\n```\n\nShouldn't one of these styles be chosen? Either preserve the jQuery call signature, or convert it to the same style as the model events?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2000",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2000/comments",
    "title": "validate never runs during set method of model",
    "created_at": "2012-12-21T06:35:36Z",
    "updated_at": "2012-12-21T17:20:15Z",
    "body": "if you use set method without options:\n\n``` javascript\nif (!options || !options.validate || !this.validate) return true;\noptions || (options = {});\n```\n\nsecond line will never be executed and validate method, of course, too.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1999",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1999/comments",
    "title": "Shouldn't `listenTo` also `bind` the listener to the context?",
    "created_at": "2012-12-20T23:18:00Z",
    "updated_at": "2013-06-05T04:35:19Z",
    "body": "As you can see, this is more of a question than an issue.\n\nShouldn't listenTo also bind the listener to the context?\n\nI see myself (probably others are doing the same) doing this kind of thing inside my views:\n\n```\n...\n        initialize: function() {\n            _.bindAll(this, 'onReset', 'onAdd');\n\n            this.listenTo(this.collection, 'add', this.onAdd);\n            this.listenTo(this.collection, 'reset', this.onReset);\n        },\n...\n```\n\nIf we bind the listener to the instance, we could save the `_.bindAll` and write just:\n\n```\n...\n        initialize: function() {\n            this.listenTo(this.collection, 'add', this.onAdd);\n            this.listenTo(this.collection, 'reset', this.onReset);\n        },\n...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1992",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1992/comments",
    "title": "save firing \"sync\" in View when \"silent : true\"",
    "created_at": "2012-12-20T14:40:32Z",
    "updated_at": "2012-12-20T16:21:50Z",
    "body": "Hi,\ni wrote down the \"issue\" (or feature) in this fiddle:\nhttp://jsfiddle.net/X3WXf/2/\n\nin my opinion the sync must also be muted when i set silent to true.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1989",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1989/comments",
    "title": "Changelog is not correct",
    "created_at": "2012-12-20T10:41:03Z",
    "updated_at": "2012-12-20T15:31:56Z",
    "body": "There is no information in changelog about changes in set method of model: it now triggers change:attribute events even there were no changes. For example:\n\n``` javascript\nvar model = new Backbone.Model();\nmodel.set({a: 1});//triggers change:a\nmodel.set({a: 1});//triggers change:a again\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1988",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1988/comments",
    "title": "Optimized Backbone.View methods: delegateEvents and undelegateEvents",
    "created_at": "2012-12-20T08:49:01Z",
    "updated_at": "2012-12-22T20:44:26Z",
    "body": "Can you use the \"on / off\" instead of \"bind / unbind / delegate\" because it does exactly the same and 33% faster. Havent tested with Zepto but I think this will work it as well.\n\nI have attached a code sample how to implement for backward compatibility.\nhttp://jsfiddle.net/AeC2h/1/\n\nBest regards\nEloB\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1987",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1987/comments",
    "title": "options could be undefined in Collection.add",
    "created_at": "2012-12-20T06:31:49Z",
    "updated_at": "2012-12-20T15:22:21Z",
    "body": "In 0.9.9, if you don't pass an object as `options` to `Collection.add`, triggered handlers will receive an `undefined` options.\n\nEven if you pass an empty object `{}`, `options.index` will not be set, too.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1985",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1985/comments",
    "title": "Setting models attributes is not checking if new and current value differ correctly",
    "created_at": "2012-12-20T02:11:04Z",
    "updated_at": "2012-12-20T08:39:12Z",
    "body": "The `set` method for models used to call `_.isEqual` to check if the new and current value differ, which was useful if the models value was an array or object and if so it would check their difference.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1984",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1984/comments",
    "title": "New Model with attributes loses it's attributes upon saving (0.9.9)",
    "created_at": "2012-12-20T01:47:08Z",
    "updated_at": "2012-12-20T19:58:40Z",
    "body": "When I create a new Model:\n\n``` javascript\nvar model = new Burrito({\n  \"meat\" : true\n});\n```\n\nAnd then do:\n\n``` javascript\nmodel.save({\n  \"name\" : \"Classic\"\n});\n```\n\nOnce the callback from the server is received, the \"meat\" attribute is no longer there.\n\nThis worked fine in version 0.9.2 and I didn't see any changes in the documentation regarding the save overwriting existing attributes.\n\n---\n\nDo note that this doesn't happen if I do the following instead:\n\n``` javascript\nvar model = new Burrito();\n\nmodel.set(\"meat\",true);\n\nmodel.save({\n  \"name\" : \"Classic\"\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1982",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1982/comments",
    "title": "hasChanged() returns true after change() is called.",
    "created_at": "2012-12-20T01:31:55Z",
    "updated_at": "2012-12-24T18:10:44Z",
    "body": "After changing a value silently, hasChanged() will return true. This behavior is expected. After calling change() on the model, hasChanged() still returns true. I would expect hasChange() to return false after change() is called.\n\n``` javascript\nvar model = new Backbone.Model({name : \"Tim\", age : 10});\nmodel.hasChanged(); // Returns false\n\n// Set value silently\nmodel.set({name: 'Rob'}, {silent: true});\nmodel.hasChanged(); // Returns true\n\nmodel.change();\nmodel.hasChanged(); // Returns true, I would expect it to return false\n\n// Set the value again to the same thing, this time not silently\nmodel.set({name: 'Rob'});\nmodel.hasChanged(); // Returns false\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1981",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1981/comments",
    "title": "Save with attributes",
    "created_at": "2012-12-20T00:17:43Z",
    "updated_at": "2012-12-21T04:31:16Z",
    "body": "Now that the validate only happens before the actual save call, `save(attr, opts)` should probably be treated as `set(attr).save(null, opts)` - currently the validation is running before the set is taking place. \n\nIt will also be necessary to determine how this fits in with `wait:true` - does that mean it validates to the \"pre-save\" state?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1980",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1980/comments",
    "title": "Route syntax for optional parts too fragile",
    "created_at": "2012-12-19T23:13:58Z",
    "updated_at": "2012-12-21T19:10:04Z",
    "body": "Adding the route \n\n`some/(optional/):thing`\n\nproduces something along the lines of\n\n```\nSyntaxError: Invalid regular expression: /^some/(?([^/]+)/)?([^/]+)$/: Invalid group\n```\n\nThis checks out, as with the current set of route-to-regexp transformations,\n\n```\nsome/(optional/):thing    [optionalParam]->\nsome/(?:optional/)?:thing [namedParam]->\nsome/(?([^/]+)/)?([^/]+)  (invalid)\n```\n\nLooking at the docs / tests / [pull request](https://github.com/documentcloud/backbone/pull/1509) / [original issue](https://github.com/documentcloud/backbone/issues/1508) it remains rather unclear to me whether this is a bug or a known limitation - perhaps parentheses in route syntax are primarily intended as a method of optional-izing named params?\n\nHowever the given example seems to me as too-simple-to-fail - would a fix for this be desirable?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1979",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1979/comments",
    "title": "Inconsistencies persist in documentation in backbone.js",
    "created_at": "2012-12-19T19:33:49Z",
    "updated_at": "2013-03-15T23:24:08Z",
    "body": "I see this was reported a year ago in [Issue 634](https://github.com/documentcloud/backbone/issues/634), but there are still inconsistencies in the inline documentation in backbone.js regarding the `_method` parameter and `emulateHTTP` and `emulateJSON`, which is what we were looking at (specifically in the Initial Setup section).\n\nI corrected the documentation in a forked branch but haven't issued a pull request (I assume you will want to correct the documentation yourself)\n\nhttps://github.com/biegel/backbone/commit/1d65edc64435d161074603584bcec2ca1bb4a26a\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1978",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1978/comments",
    "title": "Confusing documentation for url and urlRoot",
    "created_at": "2012-12-19T19:13:18Z",
    "updated_at": "2012-12-20T15:19:57Z",
    "body": "[Documentation](http://backbonejs.org/#Model-urlRoot) mentions `/[collection.url]/[id]` and `/[urlRoot]/id`, but the starting slash should not be there. If it\u2019s there I should set `urlRoot` to `books`, while it actually should be `/books`. Remove that starting slash in the docs to match it with the code.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1977",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1977/comments",
    "title": "Collection.add() When merging, and this.model has defaults, current values are overwritten",
    "created_at": "2012-12-19T15:49:40Z",
    "updated_at": "2012-12-19T17:21:20Z",
    "body": "When trying to merge incomplete/additional data into an existing model, the missing values are filled in by the defaults, effectively overwriting the previously set values.\n\nConsider this example: http://codepen.io/tjoekbezoer/pen/vkyLK\n\nA basic idea for changing this behavior: eeb480effbeb3dc691001984b6b8c8a9be87929f\n\nThis commit breaks some test, probably because of the _.clone(attributes)...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1976",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1976/comments",
    "title": "this.collection.on('fetch', methodName, this); is no longer working",
    "created_at": "2012-12-19T12:05:23Z",
    "updated_at": "2012-12-19T13:41:06Z",
    "body": "this.collection.fetch();\nthis.collection.on('fetch', this.renderLoading, this);\n\nSince updating to 0.9.9 renderLoading no longer gets called.\n\nIs this a bug or is this intentional?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1974",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1974/comments",
    "title": "Code Coverage Suggestion",
    "created_at": "2012-12-19T04:41:11Z",
    "updated_at": "2012-12-19T15:46:29Z",
    "body": "Just a suggestion - I couldn't see a coverage tool in your source - have you tried [JSCover](http://tntim96.github.com/JSCover/)?\n\nIf you're interested, just run something like:\n\n`java -jar target\\dist\\JSCover-all.jar -ws --branch --document-root=c:/js/backbone --no-instrument=test --report-dir=target`\n\nThen point your browser at [http://localhost:8080/jscoverage.html?test/index.html](http://localhost:8080/jscoverage.html?test/index.html). I get 97% line coverage, 84% branch.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1973",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1973/comments",
    "title": "Give events on global Backbone object for tracking saving/deleting",
    "created_at": "2012-12-19T01:21:38Z",
    "updated_at": "2012-12-19T15:43:08Z",
    "body": "It would be really nice now that there is a global events object if we can utilize it to notify when an object has started saving/stopped saving, or started deleting and stopped deleting, which is different than ajaxSync because it would only be when modifying objects, not when loading/fetching them.\n\nThis would be used to provide a \"saving\" dialog somewhere on the page so that you can register onunload handler and everything while the site is in a saving state.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1967",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1967/comments",
    "title": "listenTo with events hash?",
    "created_at": "2012-12-18T12:01:15Z",
    "updated_at": "2012-12-18T14:56:20Z",
    "body": "Could (or does) `listenTo` accept a hash of events?\n\n```\nview.listenTo(model, { \n  \"change:title\": titleView.update,\n  \"change:author\": authorPane.update,\n  \"destroy\": bookView.remove\n});\n```\n\nIf not the docs need updating: \n\n> All Backbone event methods also support an event map syntax, as an alternative to positional arguments.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1966",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1966/comments",
    "title": "0.9.9 changelog does not indicate removal of wrapError function",
    "created_at": "2012-12-18T09:38:53Z",
    "updated_at": "2012-12-18T22:08:17Z",
    "body": "In commit 1f3f45252f21b2c9bb00e436333376a05ff32e6d (last August, but between 0.9.2 and the current 0.9.9) , the wrapError function (referenced in #826 where it was made part of the public API) was removed. Because it wasn't mentioned in the changelog, we had to do some searching and figuring out why our error handling wasn't working anymore.\n\nIt would be nice if that could (retroactively?) be added to the changelog, so people may have less headaches when they upgrade.\n\nFor our project I simply did an override / wrap of Backbone.sync:\n\n``` javascript\nvar sync = Backbone.sync;\nBackbone.sync = function(method, model, options) {\n  if (!options.error) {\n    options.error = function(method, model, options) {\n      // custom error handling here (involves showing an error page, in our case)\n    }\n  }\n};\nsync(method, model, options);\n```\n\n https://gist.github.com/4326617.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1964",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1964/comments",
    "title": "model change events swallowed with self-referential change handlers",
    "created_at": "2012-12-18T02:02:02Z",
    "updated_at": "2012-12-27T00:33:19Z",
    "body": "Minimal case: http://jsfiddle.net/M7bnA/4/\n\nWhen I make a change handler that updates the model to which it listens, the general change event for that model is suppressed.  In 0.9.2, the second change event wasn't fired (avoiding a loop), but I'd still get the model's change event.\n\nThis seems like a weird edge case, but it breaks the associations code in @rdy's backbone_extensions library, specifically with regard to its interaction with ModelBinder.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1961",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1961/comments",
    "title": "Model instantiation fails silently when invalid attributes are passed to the constructor (0.9.9.)",
    "created_at": "2012-12-17T22:59:35Z",
    "updated_at": "2012-12-19T00:08:38Z",
    "body": "I'm not clear how I'm supposed to catch validation errors when initializing a model with attributes, as in:\n\n```\nvar model = new Model({foo:'bar'});\n```\n\nI've studied the v0.9.9. source code, and I cannot figure out how to catch the validation error in these cases. The instantiation fails silently. See [jsFiddle](http://jsfiddle.net/SpSMe/2/) for an example of the problem.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1960",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1960/comments",
    "title": "new patch option behavior doesn't match previous save() behaviors",
    "created_at": "2012-12-17T21:02:04Z",
    "updated_at": "2012-12-17T21:09:34Z",
    "body": "It seems like using the {patch: true} option in save() in 0.9.9 requires an attrs object to be passed in and that attrs object is simply passed through to the server.\n\nI think what should happen is {patch: true} will apply the attrs to the model and then sync() should simply send the attributes that have changed since the last sync (since sync events are triggered on both read/write request) event to the server.\n\nThis would allow me do call Model.save(null, {patch: true}) to do a patch without first figuring out which attributes have changed.\n\nOf course one could also do Model.save(Model.changed, {patch: true}), but this would result in 2 separate behaviors since we can currently do Model.save(null), which results in the entire representation being sent to the server.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1959",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1959/comments",
    "title": "Partial set method for Model",
    "created_at": "2012-12-17T19:34:37Z",
    "updated_at": "2012-12-17T19:41:26Z",
    "body": "I have a model with `validate()` method inside. Assuming that model is empty and about to be filled in some form.\n\n If some of my fields are changed from a view, I'm listening to the `change` event and propagate to model.\n\n```\nonFieldChanged: function () {\n   var value = this.$('.field).val();\n   this.model.set({field: value});\n}\n```\n\nThen the set is called, it will ask validation method to not only validate the `field` but the state of whole model, which might be not completed yet (assume that I need to fill more fields to make it valid before save) - so, the change would not propagate to model.\n\nTo override that, I need to do something like:\n\n```\nonFieldChanged: function () {\n   var value = this.$('.field).val();\n   this.model.set({field: value}, {silent: true});\n   this.model.trigger('change:field', this.model, value);\n}\n```\n\nI commonly see that pattern in the code I write. Does it make any sense to have a special option for set method, that would allow to something like `partial set`, namely set only one field without requesting the model to be completely valid at the moment?\n\nSomething like,\n\n```\n   this.model.set({field: 'field'}, {partial: true});\n\n   // or\n\n   this.model.setPartial({field: 'field'});\n```\n\n should silently set the field, call validation for that field, if the value is valid raise 'change' event for it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1953",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1953/comments",
    "title": "Event \"request\" is missing",
    "created_at": "2012-12-17T08:38:00Z",
    "updated_at": "2012-12-17T15:19:20Z",
    "body": "The \"Catalog of Events\" says there's a \"request\" event for Models, but that's not true.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1952",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1952/comments",
    "title": "getByCid no longer available",
    "created_at": "2012-12-16T18:23:12Z",
    "updated_at": "2012-12-16T18:51:33Z",
    "body": "the function \"getByCid\" is no longer available with version 0.9.9. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1948",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1948/comments",
    "title": "Collection 'add' event handlers no longer receive options.index",
    "created_at": "2012-12-15T00:54:49Z",
    "updated_at": "2012-12-17T19:17:32Z",
    "body": "Great release guys, thanks all of the improvements to Backbone!\n\nI noticed that options.index is still provided to handlers of the 'remove' event, but not the 'add' event. Any chance that I could get an explanation of why this change was made?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1946",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1946/comments",
    "title": "    listenTo - can't specify context for the callback",
    "created_at": "2012-12-14T21:39:15Z",
    "updated_at": "2012-12-16T13:22:23Z",
    "body": "Would you say context param should be added?\n\nlistenTo: function(object, events, callback) {\n...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1943",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1943/comments",
    "title": "Calculating changed attributes is very backwards incompatible!",
    "created_at": "2012-12-14T19:26:32Z",
    "updated_at": "2012-12-14T21:25:12Z",
    "body": "I just tried upgrading a rather large Backbone application to the latest release, and to my immense sadness I discovered that a fairly fundamental line of code has changed...\n\nNamely, Backbone 0.9.9 uses !== to determine equality, whereas older versions of Backbone used _.isEqual which performed deep equality.  The issue of course is that our code slowly grew to depend on this seemingly minor \"feature\", and is now acting differently and breaking in many difficult to track down ways.\n\nI feel like this at least warrants a mention in the Changelog, and perhaps a consideration that it might be time to bump to v0.10.0.  I realize that Semvar has special cases before v1, but seriously, you guys have a pretty large user-base to consider.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1942",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1942/comments",
    "title": "Backbone.View and rendering tree",
    "created_at": "2012-12-14T19:20:23Z",
    "updated_at": "2012-12-14T21:36:53Z",
    "body": "Hi\nIn http://stackoverflow.com/questions/6026752/backbone-collections-representing-tree-data I found how to represent a tree in a Collection-Models, which are added recursively.\nBut how to render it in Backkbone.View with underscore function \"template\"?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1939",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1939/comments",
    "title": "parse() no longer passes XHR object",
    "created_at": "2012-12-14T18:25:34Z",
    "updated_at": "2013-01-15T10:34:11Z",
    "body": "First off, congrats and thanks for the bounty of great changes in 0.9.9.\n\nOne issue I'm encountering with a project previously based on 0.9.2 is that `parse` no longer passes the XHR object with the models.\n\nThe use case here is that the client side is fetching a paginated collection and the remote API returns the total length of the collection in the XHR's headers. The app can then display the total count to the user and lazily fetch extra pages.\n\nIs there a better way to implement this behavior from the client side without relying on the XHR passed to `parse()`?\n\nI wanted to clarify before reverting the behavior in Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1937",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1937/comments",
    "title": "Annotated source issues on Chrome",
    "created_at": "2012-12-14T15:29:55Z",
    "updated_at": "2012-12-14T15:32:19Z",
    "body": "The following two inline comments do not render properly in Chrome (too big)\n\n1653 - Ensure that History can be used outside of the browser.\n\n1649 - Some browsers require that hash contains a leading #.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1935",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1935/comments",
    "title": "listenTo on jQuery objects?",
    "created_at": "2012-12-14T14:48:35Z",
    "updated_at": "2014-02-11T23:08:51Z",
    "body": "I just started doing my upgrade for event listening, listenTo is a great addition to Backbone! \n\nI had a question about usage though. I listen for click events on DOM objects in some cases and attempted to translate the listeners from:\n\n$('#div').on(event, callback) \n\nto \n\nview.listenTo($('#div'), event, callback)\n\nand it doesn't seem to work.\n\nUsing jQuery 1.8.3, I'm getting the following error:\n\n``` javascript\n((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply is not a function\n    at dispatch(Object) (/iBEnergyCore/js/libs/jquery/jquery-1.8.3.js:3058)\n    at eventHandle(MouseEvent) (/iBEnergyCore/js/libs/jquery/jquery-1.8.3.js:2676)\n```\n\nIf the listenTo function will not work with jQuery objects that's fine. Just wasn't sure if I uncovered a bug.\n\nThanks again for the update!!\n\n-Tim\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1934",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1934/comments",
    "title": "Different event firing behavior after silent model changes",
    "created_at": "2012-12-14T14:33:12Z",
    "updated_at": "2012-12-14T15:50:16Z",
    "body": "So I have a problem with Backbone 0.9.9 in my existing application not firing certain events that previously got fired:\n\n``` javascript\nvar\n  model = new Backbone.Model({ selected: false }),\n  calls = 0;\n\nmodel.on('change:selected', function () {\n  calls++;\n});\n\nmodel.set('selected', true, {silent: true});\nmodel.set('selected', false);\n// calls is 0 in Backbone 0.9.9\n// calls is 1 in Backbone 0.9.2\n```\n\nModel._computeChanges in 0.9.9 is responsible for this behavior and it's obviously a performance optimization for not firing events that don't need to be fired. But I wonder if this is really the right behavior.\n\nImagine a Backbone view with subviews and many models with a selected state. Now the user can select multiple items by clicking on each of the items to select multiple single items. No problem here. But now I have a functionality \"select all / deselect all items\" which sets the selected value of each model silently, so it won't trigger a rerender for each subview in the loop, which would make sense because the Backbone documentation itself states this as a way to do it:\n\n> Passing {silent: true} as an option will defer both the validation and the event. This is useful when you want to change attributes provisionally or rapidly, without propagating the change through the rest of the system. That said, silent doesn't mean that the change (and event) won't happen, it's merely silenced until the next change.\n\n\"until the next change\" is what's different from 0.9.2 to 0.9.9. Previously a \"change\" was just a change of the model value (what's correct IMHO). Now in 0.9.9 a \"change\" is a change of the model value **from its previous non-silent change**. That's a huge difference and will affect code that expected the previous behavior.\n\nIn my \"select all / deselect all\" example my problem is that the user can't change single items anymore after doing \"select all / deselect all\" because the bulk changes got executed silently and after that I execute a custom event to rerender my whole view instead of each subview for performance reasons -  now if the user tries to change an single item the change will be made in the model but the events won't get fired anymore and the subview won't get rerendered.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1932",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1932/comments",
    "title": "Model constructor now triggers validation before initialize is called",
    "created_at": "2012-12-14T11:01:58Z",
    "updated_at": "2012-12-17T10:46:17Z",
    "body": "Model constructor calls `this.set(attributes, {silent: true})`.\n\nAs of 0.99 { silent: true } always triggers validation, so `validate()` gets called on our models before `initialize()` - which means our custom validation falls over as we're relying on certain things to have been set up by `initialize()`.\n\nI like the idea of validation always running, to prevent bad defaults, but I think it would make more sense to be triggered once after initialize() completes... but this wouldn't be compatible with silent triggering validation.\n\nCould the workflow instead be something like:\n- model constructor runs, setting attributes (but not triggering validation) and binds a one-off event to 'initialize' which will call validate passing in the attrs\n- initialize gets called, and triggers 'initialize'\n- validate then gets called\n\nOr is this too specific-a-case / hacky?\n\nFor now I'll put an 'initialized' flag in initialize() for now and silently return from validate if it's not yet set, or try and mess around with overriding the Backbone.Model constructor.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1931",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1931/comments",
    "title": "Document Backbone now mixes in Events",
    "created_at": "2012-12-14T10:32:57Z",
    "updated_at": "2012-12-14T16:01:43Z",
    "body": "This new pub/sub facilities is only found in the change log and not mentioned the document. An extra pointer to let folks know it's here now would be nice. https://github.com/documentcloud/backbone/commit/a3da45efd53d66eaf7b7c236df9160944c6dd4a0\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1930",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1930/comments",
    "title": "Silent mode does not work any more for Model.set validation",
    "created_at": "2012-12-14T09:57:03Z",
    "updated_at": "2012-12-14T15:16:27Z",
    "body": "https://github.com/documentcloud/backbone/blob/master/backbone.js#L573\n\nHere is no more check for `silent: true`. \n\nSo if i want to disable validation with `model.set(data, {silent: true});` i can not do this any more\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1929",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1929/comments",
    "title": "In the 0.9.9 changelog, what does \"The parse function is now always run if defined\" mean",
    "created_at": "2012-12-14T09:41:43Z",
    "updated_at": "2012-12-17T15:52:20Z",
    "body": "When is it being run exactly? What changed here from the previous version? \"Always run\" isn't very clear.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1928",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1928/comments",
    "title": "`request` event not documented",
    "created_at": "2012-12-14T08:31:28Z",
    "updated_at": "2012-12-14T15:27:47Z",
    "body": "The `request` event introduced in ec97a1c is neither documented in the [catalog of built-in events](http://backbonejs.org/#Events-catalog) nor in the [sync](http://backbonejs.org/#Sync) documentation.\n\nIt should probably also be mentioned in the change log.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1927",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1927/comments",
    "title": "Backbone.sync now requires an actual model to be sent",
    "created_at": "2012-12-14T08:17:57Z",
    "updated_at": "2013-04-20T18:35:23Z",
    "body": "Previously there was no real dependency in `Backbone.sync` for the second argument to be a real model \u2014\u00a0if it sounded like a duck etc \u2014\u00a0but with the changes from ec97a1c a `request` event is triggered on the model, piling on this dependency for at least something extend Backbone.Events.\n\nWe've used the sync method extensively to duck type requests to pass through the same overriden sync handler that allows us to elegantly filter requests for common errors like a user being logged out while making the request.\n\nI think this kind of behaviour should still be supported.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1925",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1925/comments",
    "title": "Document options.sort in Collection#add",
    "created_at": "2012-12-14T05:23:09Z",
    "updated_at": "2012-12-17T19:21:15Z",
    "body": "The document and change log seems to have left out change b9d0f8de44bfb308ca87795c700f5df0af891c53.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1924",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1924/comments",
    "title": "document `Collection#fetch({update:true})`",
    "created_at": "2012-12-14T01:36:33Z",
    "updated_at": "2012-12-14T18:39:23Z",
    "body": "I don't think the Collection#fetch `update` option is in the docs, fyi\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1923",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1923/comments",
    "title": "listenTo, stopListening discussion",
    "created_at": "2012-12-14T01:30:40Z",
    "updated_at": "2012-12-17T22:13:15Z",
    "body": "With the inclusion of these new methods, I can't see myself using `on` and `off` for much -- almost all my event binds are done inside views. Because I use them so frequently, I'd like to see shorter names. What do you think of using a shorter alias for these methods?\n\n`listen` alias of `listenTo`\n`deafen` alias of `stopListening`\n\nAlternatively, following the jQuery pattern of reverse application (append, appendTo):\n\n`bindTo` alias of `listenTo`\n`unbindFrom` alias of `stopListening`\n\nFwiw I (like others) had this pattern implemented myself. I chose to hook into the `on` and `off` methods:\n`user.on('change', view.render, view)`\nwould track the event not only in `_events` on `user` but `_events` on `view` if the third context argument was passed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1922",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1922/comments",
    "title": "v0.9.9's removal of `getByCid` is a b/c break that was not documented in changelog or documentation",
    "created_at": "2012-12-14T01:18:33Z",
    "updated_at": "2012-12-14T03:45:10Z",
    "body": "Still in docs [here](http://backbonejs.org/#Collection-getByCid) and changelog needs updating. Also [would have been nice](http://semver.org/) if this caused a version bump to v0.10 as it is b/c break for a few of our projects.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1919",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1919/comments",
    "title": "Model with defaults, overriding defaults at Model construction broken.",
    "created_at": "2012-12-13T20:36:38Z",
    "updated_at": "2012-12-13T20:45:57Z",
    "body": "```\n var TestModel = Backbone.Model.extend({\n\n    initialize: function() {\n    },\n    defaults: {\n      text: ''      \n    }\n  });\n\n  var X = Backbone.View.extend({\n    initialize: function(options) {\n      console.log('text', options.model.get('text'));\n    },\n    render: function() {\n      return this;\n    }\n  });\n\n\n  var x = new X({model: new TestModel({'text': 'abcdef'})});\n\n```\n\nIn the code above you'd expect to see 'abcdef' on the console, right?  You don't, instead you see empty string.  If you remove 'text' from the model defaults, then everything works fine.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1918",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1918/comments",
    "title": "Pretty photo and drop down menu will not run together???",
    "created_at": "2012-12-13T20:01:30Z",
    "updated_at": "2012-12-14T04:30:02Z",
    "body": "This is driving me crazy. Can it be done? I want to use my navbar-inverse that will collapse and has a Drop down with my pretty photo gallery. \n\nI can't get the 2 to run together. Is there a way? \n\nwhen I addd this code to the bottom of the body\n <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\n   <script src=\"js/bootstrap.min.js\"></script> \n\n When its there the nav bar works like it should. BUT the pretty photo will not run it brings the photos up in a different window.  \n\nI am new to this. I am not sure how to explain it here.  I think I am missing something when trying to call the jQuery.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1915",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1915/comments",
    "title": "parse change from #1912 introduces flow bug, not parsing response beforehand",
    "created_at": "2012-12-13T19:17:49Z",
    "updated_at": "2012-12-13T20:58:31Z",
    "body": "The fix for change #1912 introduced a flow bug for the `update` method when using fetch\n\nwhereas before parse was called in the fetch method, now that's not the case and introduces this flow bug:\n\n``` javascript\n    update: function(models, options) {\n      ...\n      // Allow a single model (or no argument) to be passed.\n      if (!_.isArray(models)) models = models ? [models] : [];\n      if (options.parse) models = this.parse(models);\n      ...\n    }\n```\n\nshould probably now be\n\n``` javascript\n    update: function(models, options) {\n      ...\n      if (options.parse) models = this.parse(models);\n\n      // Allow a single model (or no argument) to be passed.\n      if (!_.isArray(models)) models = models ? [models] : [];\n      ...\n    }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1914",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1914/comments",
    "title": "Recent change to escaped attributes is causing downstream errors.",
    "created_at": "2012-12-13T19:08:49Z",
    "updated_at": "2012-12-13T19:29:40Z",
    "body": "What is the motivation for this change, was the previous behavior breaking something?\n\nhttps://github.com/documentcloud/backbone/commit/a5299f8058b71b9f770d82b8e120709df2822289\n\nWe use backbone deep model, https://github.com/powmedia/backbone-deep-model   And this change is causing problems for backbone deep model:\n\n```\n     // Get the HTML-escaped value of an attribute.\n\n     escape: function(attr) {\n-      var val = this.get(attr);\n-      return _.escape('' + (val == null ? '' : val));\n+      return _.escape(this.get(attr));\n     }, \n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1913",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1913/comments",
    "title": "Assigning model defaults uses _.extend instead of _.defaults",
    "created_at": "2012-12-13T15:28:47Z",
    "updated_at": "2012-12-13T18:35:39Z",
    "body": "Scenario:\n\nI get a JSON object that has a couple attributes set as null:\n\n```\nclass Font extends Backbone.Model\n  defaults: {\n    font_color: \"red\"\n  }\n\n\nattrs = {\n  font_color: null,\n  font_size: 14\n}\n\nfont = new Font(attrs)\nfont.get('font_color') # returns null\n\n```\n\nI believe it is due to this line using _.extend when it should use _.defaults instead.\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L228\n\nLet me know if I am missing something.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1912",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1912/comments",
    "title": "collection fetch parses twice",
    "created_at": "2012-12-13T14:08:10Z",
    "updated_at": "2014-09-02T15:19:05Z",
    "body": "This issue manifests itself using the bleeding edge version\n\nwith the new parse option being true by default, when calling fetch, \n\n```\nfetch: function(options) {\n  ...\n  if (options.parse === void 0) options.parse = true;\n  ...\n    var method = options.update ? 'update' : 'reset';\n    collection[method](collection.parse(resp, xhr), options);\n  ...\n},\n```\n\nthe success callback will call either the reset or the update method, passing the options which contains parse: true, which in turn again parses the models. \n\n```\nreset: function(models, options) {\n  if (options.parse) models = this.parse(models);\n  ...\n},\n```\n\nThis means the argument passed to the parse method can hold different representations, consider the following example\n\n``` javascript\n{\n    \"data\": [{\n        \"clientId\": \"xxxxxxx\",\n        \"id\": \"facebook\"\n    }, {\n        \"clientId\": \"xxxxxxx\",\n        \"id\": \"twitter\"\n    }, {\n        \"clientId\": \"xxxxxxx\",\n        \"id\": \"google\"\n    }],\n    \"ok\": true\n}\n```\n\nwith a collection\n\n``` javascript\nvar ConfigCollection = Backbone.Collection.extend({\n    name: 'ConfigCollection',\n    url: '/api/v1/config',\n    model: ConfigModel,\n    parse: function (response)\n    {\n        return response.data ? response.data : [];\n    }\n});\n```\n\nthe second parse pass will not be the response, but it will be an array of the already processed models. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1908",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1908/comments",
    "title": "Expose methodMap (use PUT for PATCH requests)",
    "created_at": "2012-12-12T23:50:40Z",
    "updated_at": "2012-12-18T19:43:13Z",
    "body": "Could we make `methodMap` publicly accessible? I'd like to change `PATCH` to `PUT` (for `{ patch: true }`) and it's lame I have to override all of `Backbone.sync` when it'd be nice to just say:\n\n`Backbone.methodMap.patch = 'PUT';` \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1906",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1906/comments",
    "title": "The site backbone.js version is missing validation in save()",
    "created_at": "2012-12-12T22:06:29Z",
    "updated_at": "2012-12-12T22:26:55Z",
    "body": "Hi guys,\nI've been breaking my head for a while, why invalid models are persisted to server, and today looked at github version of backbone.js. What I've noticed is that in the site (http://backbonejs.org/backbone.js) version the following lines in save method:\n\n```\n  // Do not persist invalid models.\n  if (!attrs && !this.isValid()) return false;\n```\n\nare missing!!!\nIt doesn't seem OK to me, isn't it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1904",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1904/comments",
    "title": "Strange behavior of Collection.add() / remove()",
    "created_at": "2012-12-12T14:57:14Z",
    "updated_at": "2012-12-12T15:27:49Z",
    "body": "Say I have one collection with 2 models (\"one\", \"two\"):\n\n``` javascript\ncollection.remove(one);\n\ncollection.models.length // == 1\n```\n\nBut the collection._byId still holds the model \"one\", and I can get it by collection.get(\"id_of_one\").\n\nI have an undo function in my app, then below will be executed and fail:\n\n``` javascript\ncollection.add(one); // add it back from somewhere\n\ncollection.models.length // still == 1\n```\n\nBecause collection._byId has model one, so the collection regards model one as duplicate record.\n\nBackbone version == 0.9.2\n\nAny suggestion? Thanks in advance.\n\n==UPDATE==\nFollowing code lines will give me correct results:\n\n``` javascript\ncollection.remove(one, {silent: true});\n\ncollection.add(one, {silent: true});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1902",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1902/comments",
    "title": "jquery is being shadowed",
    "created_at": "2012-12-11T21:22:19Z",
    "updated_at": "2012-12-11T23:33:03Z",
    "body": "This backbone code makes an assumption that `this` is equal to `window` (or some other scope containing jquery).  I have a use-case with kanso where this isn't true and the code is breaking ...\n\n```\nvar root = this;\n<snip>\nvar $ = root.jQuery || root.Zepto || root.ender;\n```\n\nSo $ is left undefined even though it is defined globally.  Why is it setting `root` to `this` instead of directly to `window`?  That would fix my problem.  \n\nOr is there a better fix?  Maybe `$ ||=  root.jQuery || root.Zepto || root.ender;` ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1894",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1894/comments",
    "title": "Performance problems with Collection#sort automatically",
    "created_at": "2012-12-11T11:04:06Z",
    "updated_at": "2013-06-05T14:25:50Z",
    "body": "Months late to the #1667 party, so filing a new ticket here.\n\nI have a number of concerts regarding that PR and the fact that `sort()` is called automatically instead of manually.\n\n<del> 1. `options.index` is a well-documented feature and incredibly useful for syncing additions across collections by mutually listening on each other's 'add' events. At it stands now, the removal of it breaks a number of existing code on my end. Returning `options.index` itself only adds a constant time, the problem is with `splice`, which #1667 fails to address. `options.index` should be added back so the API is preserved. </del>\n1. `sort()` is called automatically all over the place, which immediately adds an O(n log n) running time on a number of operations. Sparse arrays and `splice` aren't exactly performant either... If performance is a concern, and breaking the API is OK, then why not...\n2. Remove `comparator` and automatically calling `sort()` on all the methods in the next **major** version <del> and put `options.index` back in for 0.9.9? It only adds a constant time to `add`.</del> I don't think it's unreasonable to expect users to call `sort(comparator)` themselves in a future version after each addition and removal. It's implied that any element insertion and removal might break an ordering unless you happen to do it at the right place, which the user should know about.\n\nThoughts? @jashkenas @caseywebdev @braddunbar @philfreo\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1888",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1888/comments",
    "title": "Mixin Events to the Backbone module",
    "created_at": "2012-12-10T15:44:14Z",
    "updated_at": "2012-12-10T15:49:03Z",
    "body": "https://github.com/documentcloud/backbone/commit/7dbfecc6c12f962455ad34ed87b8af954d05db82#commitcomment-2282198\n\nIf this becomes the officially blessed way of doing PubSub in Backbone, it would alleviate a major pain point for many Backbone apps' need on deciding on a PubSub strategy, also would reduce the need for relying on jQuery/DOM events to locally broadcast events to DOM subtrees/Views.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1887",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1887/comments",
    "title": "Investigate just using jQuery events.",
    "created_at": "2012-12-10T14:50:50Z",
    "updated_at": "2012-12-11T05:00:18Z",
    "body": "... suggested here: https://github.com/documentcloud/backbone/commit/7dbfecc6c12f962455ad34ed87b8af954d05db82\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1885",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1885/comments",
    "title": "Change Log for upcoming release",
    "created_at": "2012-12-10T07:51:26Z",
    "updated_at": "2012-12-14T00:01:20Z",
    "body": "In response to the question [\"What's been updated in master?\"](https://github.com/documentcloud/backbone/issues/891#issuecomment-11183425), I started a rough draft of a changelog for > 0.9.2. This is only after one pass through the commit history (since March!), so it's bound to be missing stuff. I ignored documentation changes and relegated minor commits/fixes to be referenced by issue # as best as possible. Instead of making a bunch of pull request noise, I thought it would be good to hash out as an issue especially given the numbers of features, bug fixes, etc.\n\nWithout further ado:\n## Change Log > 0.9.2\n- Model#Save accepts { patch: true } option\n- Collection#sort triggers `sort` event instead of `reset`\n- Added Backbone.Collection#update\n- Backbone now extends Events object\n- added optional groups to route syntax\n- Add 'once' to Backbone events\n- Backbone.Events supports jQuery-style event maps in 'on' and 'off'\n- Reset events include previous list of models, for added convenience\n- Validation always happens, even when silent: true\n- `events` can be passed in options hash to Backbone.View\n- Bump to require Underscore 1.3.3\n- Add `extend` to Backbone.History\n- `History` can be used outside of the browser\n- Backbone.sync accepts `emulateHTTP` and `emulateJSON` as options.\n- Backbone.Router#navigate is chainable\n- Backbone.Collection aliases underscore proxies (collect, foldl, inject, foldr, head, take, tail)\n- Backbone.Model#parse is run on initialization\n- Normalizing trailing and leading slash behavior in routes\n- Added Backbone.View#dispose\n- Backbone.View#remove now calls #dispose for event cleanup\n- Falsy values for collection#comparator will override default value\n- Null and undefined are invalid model id's\n- { merge: true } option for collection#add\n- Backbone.Collection#clone()\n- Backbone.View#options, Backbone.View#el and Backbone.View#tagName can be provided as functions\n- Added Backbone.ajax for over-riding default ajax implementation\n- `on` and `off` are now prefered over `bind` and `unbind`\n- Backbone.Model#destroy() returns false if the model.isNew()\n- Backbone.View#make accpets falsy values for the `content` argument\n- Remove Ender support\n- Collection#reset() will now call the collection's parse function as well as the model's if {parse:true}\n## Bugfixes\n#1030, #1092, #1144, #1151, #1206, #1252, #1366, #1327, #1371, #1387, #1412, #1403, #1447,\n#1455, #1545, #1684, #1477, #1478, #1664, #1695, #1751, #1756, #1838, #1717,  #1854\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1884",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1884/comments",
    "title": "Backbone.View's setElement is not updating the id and className",
    "created_at": "2012-12-09T13:53:50Z",
    "updated_at": "2013-04-09T03:23:13Z",
    "body": "The `setElement` method sets the view's root element to a DOM element.\n\n```\nMyView = Backbone.View.extend({\n    // ...\n});\n\nv = new MyView();\nv.setElement( $('#someElem').get(0) );\n\n\nconsole.log(v.el)\n<div id=\"someElem\">\n\nconsole.log(v.$el)\n[div#someElem]\n\nconsole.log(v.tagName)\ndiv\n\nconsole.log(v.id)\nundefined\n\nconsole.log(v.className)\nundefined\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1883",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1883/comments",
    "title": "Problem with IE8 and sorted models in collection detected in Version 0.9.2",
    "created_at": "2012-12-09T12:43:03Z",
    "updated_at": "2012-12-09T18:49:54Z",
    "body": "IE8 displays: error on page\n\nNumber expected\nbackbone.js  Line: 724 (it's the \"sort\" function)\nCode: 0   Char: 9\nif I use a sorted collection with:\n\n```\ncomparator: function() {\n    return this.get('pageNo');\n},\n```\n## \n\npageNo is an integer in the model\n\nthis error doesn't occur in IE9 or Firefox but every time in IE8\nmy workaround was to throw out the comparator function and use the where clauses to find the correct model\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1882",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1882/comments",
    "title": "Appropriate form for calling submethods on a model",
    "created_at": "2012-12-09T02:58:10Z",
    "updated_at": "2012-12-12T20:14:17Z",
    "body": "On most REST API's there's the ability to call methods from the context of a model... here's the example use-case.\n#### Model\n\n`GET /donations/12`\n#### Execute action on model.\n\nFrom our own API...\n`POST /donations/{DONATION_ID}/refund`\n(or, an example from Stripe)...\n`POST https://api.stripe.com/v1/charges/{CHARGE_ID}/refund`\n### How I'm doing it now...\n\nI've created a method that extends the default Backbone model:\n\n``` javascript\nvar defaultModel = Backbone.Model.extend({\n    // Execute a sub method on the model\n    __executeMethod: function(method, callback, data) {\n        var __model = this;\n        var __callback = callback;\n        var __method = method;\n        var __success = function(resp) {\n            __callback.apply(__model, arguments);\n            __model.trigger('method:'+__method, __model, resp, {})\n        }\n        Backbone.$.post(this.url() + '/' + method, data, __success);\n    }\n});\n```\n\nThen later on the model instance, I use it like this:\n\n``` javascript\nvar donationModel = defaultModel.extend({\n    refund: function() {\n        this.__executeMethod('refund', function(response, status, xhr){\n            console.log(this, response)\n        })\n        return this;\n    }\n});\n```\n### The question...\n\nI've searched through the backbone.js documentation and I can't seem to find a similar method. Am I missing it, or is it just not part of core? If it's not part of core... what are your thoughts on adding this? If there's an interest in having this part of core, let me know... I'll add it to core and write the proper tests and create a pull request for it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1877",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1877/comments",
    "title": "Can't access newly added models to Collection when using fetch({add: true})",
    "created_at": "2012-12-07T23:00:56Z",
    "updated_at": "2013-10-18T23:40:19Z",
    "body": "When I saw this issue https://github.com/documentcloud/backbone/pull/1340 I thought it would make sense to bring up this issue as well.\n\nWhen calling `collection.fetch({add: true})` there is no immediate way to acces just the newly added models on the collection.\n\nAmong other things, this is very useful when doing infinite paging on a page.  \n\nRather than binding to a collection's 'add' event and rendering one item at a time I would be able to render all new models at once and only modify the DOM once.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1875",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1875/comments",
    "title": "'application/json' vs 'application/json; charset=utf-8'",
    "created_at": "2012-12-07T09:04:21Z",
    "updated_at": "2013-11-04T00:16:57Z",
    "body": "Model.sync resets my encoding set by `$.ajaxSetup({contentType: 'application/json; charset=utf-8'})`\n\nWorkaround for now: pass option `contentType` on every call.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1874",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1874/comments",
    "title": "how to push search to history",
    "created_at": "2012-12-05T21:06:58Z",
    "updated_at": "2012-12-05T21:29:13Z",
    "body": "I'm developing my first backbone project and I have requirement that I'm not sure how to meet.\n\nMy router only has one route (maybe this is a problem)?\n\n``` javascript\nApp.Router = Backbone.Router.extend({\n        initialize: function(options) {\n            this.el = options.el;\n        },\n        routes: {\n            '': 'search',\n            'search': 'search'\n        },\nsearch: function() {\n            var search = new App.SearchView();\n            search.render();\n        }\n}\n    });\n```\n\nI have three views:\n\n```\n// Defines the View for the Search Form\nApp.SearchView = Backbone.View.extend({\n\n    initialize: function() {\n        console.log('Initializing Search View');\n\n        _.bindAll(this, 'render');\n        this.render();\n    },\n\n    template: _.template($('#search-form').html()),\n    el: $('#search-app'),\n    events: {\n        'click .n-button' : 'showResults'\n    },\n\n    showResults: function() {\n        console.log('Some searching going on...');\n        this.input = $('#search');\n        var search = new App.ResultsSearchView();\n        var view = new App.GridView({ query: this.input.val() });\n        search.render();\n        view.render();\n    },\n\n    render: function() {\n        $(this.el).html(this.template());\n        return this;\n    },\n    name: function() { return this.model.name(); }\n\n}); // App.SearchView\n\n//Defines the View for the Search Form when showing results\nApp.ResultsSearchView = Backbone.View.extend({\n\n    initialize: function() {\n        _.bindAll(this, 'render');\n        this.render();\n    },  \n    template: _.template($('#results-search-form').html()),\n    el: $('#search-input'), \n    render: function() {\n        $(this.el).html(this.template());\n        return this;\n    },\n    events: {\n        'click .n-button' : 'showResults'\n    },\n    showResults: function() {\n        this.input = $('#search');\n        var view = new App.GridView({ query: this.input.val() });\n        view.render();\n    },\n    name: function() { return this.model.name(); }\n\n}); // App.ResultsSearchView\n\n\n// Defines the View for the Query Results\nApp.GridView = Backbone.View.extend({\n    initialize: function(options) {\n        var resultsData = new App.Results();\n        resultsData.on(\"reset\", function(collection) {\n\n        });\n\n        resultsData.fetch({\n            data: JSON.stringify({\"query\":this.options.query, \"scope\": null}),\n            type: 'POST',\n            contentType: 'application/json',\n            success: function(collection, response) {\n                $('#grid').kendoGrid({\n                    dataSource: {\n                        data: response.results,\n                        pageSize: 5\n                    },\n                    columns: response.columns,\n                    pageable: true,\n                    resizable: true,\n                    sortable: {\n                        mode: \"single\",\n                        allowUnsort: false\n                    },\n                    dataBinding: function(e) {\n\n                    },\n                    dataBound: function(){\n\n                    }\n                });\n\n            },\n            error: function(collection, response) {\n                console.log(\"Error: \" + response.responseText);\n            }\n\n\n        });\n        _.bindAll(this, 'render');\n        this.render();\n    },\n    el: $('#search-app'),\n    template: _.template($('#results-grid').html()),\n    render: function() {\n        $(this.el).html(this.template());\n        return this;\n    }\n}); // App.GridView\n```\n\nThe issue I am having is that we want our users to be able to use the back button to navigate back to the initial search and also from there, be able to move forward again to their search results. I just have no idea how to do this. Any assistance would be a huge help.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1872",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1872/comments",
    "title": "Need to be able to define if we want updates from the server on .save()",
    "created_at": "2012-12-05T16:28:11Z",
    "updated_at": "2012-12-05T16:31:52Z",
    "body": "I rarely want updates from the server when I saving, usually its for specific fields like primary key, date modified, etc.   But there are plenty of times where re-setting my model on a save screws things up.  Especially if there is a slow response.\n\nI like to be very responsive and show my views right away, so I don't wait for the server to finish saving, but if I don't want and make changes, those changes get reset when the response from the server comes back.\n\nI currently hack this when I don't want any attributes updated by calling .copy() and then .save() but once in awihle I do want _some_ attributes to come back.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1868",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1868/comments",
    "title": "\"Cannot read property 'tagName' of null\" on Android 4.0.4",
    "created_at": "2012-12-04T16:44:32Z",
    "updated_at": "2012-12-04T16:55:11Z",
    "body": "Hey,\n\nI've got a bug with `'Mozilla/5.0 (Linux; U; Android 4.0.4; fr-fr; GT-P3110 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30'` (in other words, it's _Android 4.0.4_ with _Android Browser_).\n\nIndeed, my Sentry system often reports me this bug: `Uncaught TypeError: Cannot read property 'tagName' of null`.\n\nDo you have any idea?\n\nI have unfortunately no other information. Plus, I don't have personnaly Android 4.0.4. Sorry. :/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1864",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1864/comments",
    "title": "Feature request: analogue of Model.isNew for collections",
    "created_at": "2012-12-03T10:22:59Z",
    "updated_at": "2012-12-03T16:16:58Z",
    "body": "I find myself quite frequently checking if a collection is empty or not in order to invoke certain functionality, and it would be convenient in most cases to establish if a collection is empty because it hasn't been `fetch`ed yet, or if it has been `fetch`ed and returned empty. Similar to how Model.isNew can be used to determine if a model has been synced with the server.\n\nI'm happy to write this myself, but wanted to get some ideas/feedback on how to approach before embarking on it. My immediate thought is to do something like set a flag on a collection which is set to true on a successful fetch. Something like:\n\n```\nthis.on('sync', function () { _synced = true; }, this);\n```\n\nand then:\n\n```\nCollection.prototype.isNew = function () {\n    return !!_synced;\n}\n```\n\nBut I'm sure others may have a better way.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1863",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1863/comments",
    "title": "Router.navigate won't trigger if the url is the same as the current one even when overridden",
    "created_at": "2012-12-03T08:23:47Z",
    "updated_at": "2012-12-03T11:26:43Z",
    "body": "`Router.navigate \"someurl\", {trigger: true}` \n\nwon't trigger if the url is the same as the current URL. I'd like backbone to ignore caching if I explicitly tell it to trigger a route.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1862",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1862/comments",
    "title": "elements / ui hash for backbone?",
    "created_at": "2012-12-01T22:13:45Z",
    "updated_at": "2012-12-03T23:09:16Z",
    "body": "Apologies in advance if there is already a ticket related to this question. I did not find one in my searching.\n\nWhat is the reasoning behind not including an \"elements\" (Spine), or \"ui\" (Backbone Marionette) hash in backbone proper, that fetches and saves references to elements within this.$el based on selectors? For example, the way it works in Marionette is:\n\n```\nMyView = Backbone.View.extend( {\n    events : {\n        \"keydown [name='value']\" : \"_valueFld_onKeyDown\"\n    }\n\n    ui {\n        \"valueFld\" : \"[name='value']\"\n    }\n\n    ...\n} )\n```\n\nNow after the view is rendered you can find this.$el( \"[name='value']\" ) in this.ui.valueFld. See the [Marionette docs](https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.itemview.md#organizing-ui-elements) for a discussion.\n\nI would make some small changes to this implementation but it seems that the basic concept would be very useful to close to 100% of people using backbone. Has this been ruled out for some compelling reason? Also there are some other useful features that could be explored if this were to be implemented, which I'm happy to elaborate on if if this direction is not dead in the water.\n\nThanks very much.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1861",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1861/comments",
    "title": "Backbone.Events should really be part of Underscore",
    "created_at": "2012-12-01T17:37:46Z",
    "updated_at": "2012-12-03T16:03:20Z",
    "body": "Backbone.Events is a generic event aggregator and is not particularly related to Browser DOM in anyway. Many times people use jQuery and Underscore and they want just a minimal pub/sub.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1860",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1860/comments",
    "title": "Backbone fragment in pushState behavior straight",
    "created_at": "2012-12-01T13:44:22Z",
    "updated_at": "2012-12-03T16:57:10Z",
    "body": "I am a newbie in backbone.js, i try to write demo to understand about backbone.js but i have problem in Backbone fragment when i set pushState true in Backbone history . Here is my case\n\n``` javascript\nvar Workspace = Backbone.Router.extend({\n\n    initialize: function() {\n        this.route(/^users\\/friends$/i, \"hellobackbone\")\n    }\n    hellobackbone: function() {\n         alert(Backbone.history.fragment)\n    }\n});\n```\n\nWhen I am in address: localhost/users/friends. I press in < a href=\"#hello\" > hello < /a>\n\nIt alert two twice with users/friends and users/friends#hello. I just only want call with routes users/friends(see my regular expression). I don't know why this happen. I find around backbone.js and some site from googles but no help:((\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1859",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1859/comments",
    "title": "An utility to filter collection on the fly according to different search keywords",
    "created_at": "2012-12-01T08:46:51Z",
    "updated_at": "2012-12-01T12:50:40Z",
    "body": "https://gist.github.com/4181074\n\nI wrote this quick utility to implement search-as-you-type kind of feature in an application that I'm working on, wondering is this something worth integrating back into the main branch ?\n\nJeremy.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1858",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1858/comments",
    "title": "backbonejs.org license ",
    "created_at": "2012-12-01T03:54:07Z",
    "updated_at": "2012-12-01T10:34:19Z",
    "body": "Hi. I would like to translate backbonejs.org to Polish language and publish it on gh-pages, but I can't find any information about the license. I know that Backbone itself is under MIT, but what about the website / documentation?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1849",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1849/comments",
    "title": "Add a `.npmignore` file to prevent useless stuff from getting in the npm distro",
    "created_at": "2012-11-28T12:02:00Z",
    "updated_at": "2012-11-28T18:54:06Z",
    "body": "Things like the tests, docs, examples, etc are not required for the npm distribution, and thus only add to the weight of the module without any use. It would be nice if these were included in a .npmignore file - see https://npmjs.org/doc/developers.html#Keeping-files-out-of-your-package\n\nIn fact, for backbone the only useful files are the license, readme, package.json and backbone.js - all the rest can be added to the .npmignore file.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1848",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1848/comments",
    "title": "Declaring variables in template replaces Model properties with the same name",
    "created_at": "2012-11-28T08:47:51Z",
    "updated_at": "2012-11-29T16:23:17Z",
    "body": "Hello all,\n\nI've searched the docs, google and the issues list here on github but couldn't find anything about it...\n\nUsing Backbone 0.9.1 and Underscore templating...\nIf, inside a template, a say something like\n\n<% var url = 'http://www.google..com\" %>\n\nThe \"url\" property of the model will be overwritten. So I cannot fetch it again anymore.\n\nI know that all properties from the model are available to the template scope, but should the other way around be true as well?\n\nAt least, if we running into a technical limitation here, we should document this better, as I didn't find anywhere something related to this. We should put something like \"Don't use reserved words like \"url\", \" fetch\", \"parse\", etc as variables names in your template...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1847",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1847/comments",
    "title": "Please please up the version number. ",
    "created_at": "2012-11-28T01:23:41Z",
    "updated_at": "2012-11-28T06:15:03Z",
    "body": "Instead of my usual quick look to see if Backbone had been updated which until now has meant \"nope, still 0.92, I downloaded the latest and ran a compare.\n\nThis gave me a sea of red.\n\n1.0 anyone ?   At least 0.93 JIT for the festive coding season ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1845",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1845/comments",
    "title": "Collection create doesn't trigger error if {wait: true}",
    "created_at": "2012-11-27T15:47:11Z",
    "updated_at": "2015-06-30T20:25:59Z",
    "body": "Hello guys, thank you for this awesome library!\n\nHave a question: when i do `collection.create({name: 'Name'}, {wait: true})`, if server returns a 400 response error won't be triggered on collection level. I understand that it happens because you attach `_onModelEvent` on success. Is it by design? Is there some workaround except passing error option in create?\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1844",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1844/comments",
    "title": "Script errors if collection changes during add",
    "created_at": "2012-11-27T15:46:33Z",
    "updated_at": "2012-11-27T16:49:16Z",
    "body": "Backbone source, collection.add:\n\n``` javascript\nfor (i = 0, length = this.models.length; i < length; i++) {\n    if (!cids[(model = this.models[i]).cid]) continue;\n    options.index = i;\n    model.trigger('add', model, this, options);\n} \n```\n\nIf something is listening to the collection's add event, and that listener eventually causes a model to be removed from the collection, this for loop will cause an error because this.models array will have changed.\n\nUse case:\n\nSuppose there is a table represented by a collection.  When you add a row, the row enters edit state.  New rows are not saved to the server until you explicitly save it, and only one row can be edited at once.\n\nAdd one row (A).  Add a second row (B).  User would be asked whether they want to save or discard row (A).  If it will be discarded, then it's removed from the collection and the error above gets hit.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1843",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1843/comments",
    "title": "Inconsistent Parsing on Model.fetch and Collection.fetch",
    "created_at": "2012-11-27T15:03:06Z",
    "updated_at": "2014-09-02T15:19:05Z",
    "body": "The Collection's fetch method correctly sets a default value for options.parse=true which allows for the collection's models to be parsed.\n\n``` javascript\n\n// From Backbone.Collection\n\n// Fetch the default set of models for this collection, resetting the\n// collection when they arrive. If `add: true` is passed, appends the\n// models to the collection instead of resetting.\nfetch: function(options) {\n  options = options ? _.clone(options) : {};\n  if (options.parse === void 0) options.parse = true;\n  var collection = this;\n  var success = options.success;\n  options.success = function(resp, status, xhr) {\n    collection[options.add ? 'add' : 'reset'](collection.parse(resp, xhr), options);\n    if (success) success(collection, resp, options);\n  };\n  return this.sync('read', this, options);\n},\n```\n\nThe Model's fetch method doesn't set the default value for options.parse=true which prohibits the default parsing of nested models and collections.\n\n``` javascript\n\n// From Backbone.Model\n\n// Fetch the model from the server. If the server's representation of the\n// model differs from its current attributes, they will be overriden,\n// triggering a `\"change\"` event.\nfetch: function(options) {\n  options = options ? _.clone(options) : {};\n  var model = this;\n  var success = options.success;\n  options.success = function(resp, status, xhr) {\n    if (!model.set(model.parse(resp, xhr), options)) return false;\n    if (success) success(model, resp, options);\n  };\n  return this.sync('read', this, options);\n},\n```\n\nCan we bring the behavior of these two methods into sync by adding the following line:\n\n``` javascript\nif (options.parse === void 0) options.parse = true;\n```\n\nto the model's fetch method as follows:\n\n``` javascript\n// Fetch the model from the server. If the server's representation of the\n// model differs from its current attributes, they will be overriden,\n// triggering a `\"change\"` event.\nfetch: function(options) {\n  options = options ? _.clone(options) : {};\n  if (options.parse === void 0) options.parse = true;\n  var model = this;\n  var success = options.success;\n  options.success = function(resp, status, xhr) {\n    if (!model.set(model.parse(resp, xhr), options)) return false;\n    if (success) success(model, resp, options);\n  };\n  return this.sync('read', this, options);\n},\n```\n\nThis will enable consistent parsing behavior and facilitate the ability to parse nested models and collections.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1841",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1841/comments",
    "title": "Proposal: Consistent instances of the same model object",
    "created_at": "2012-11-23T23:53:04Z",
    "updated_at": "2012-11-24T09:46:59Z",
    "body": "Proposal:\n\n``` javascript\n  a = new Model({id:1});\n  b = new Model({id:1});\n  a.set('name','value');\n  b.get('name') == 'value' // true, currently false\n```\n\nWhy is this useful ?\n1.  Multiple parts of application don't have to share same objects to be consistent\n\nCurrently the way around this is:\n1. Use change event & have model instances listen to it. This may cause memory leaks.\n2. Have models share attributes object.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1839",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1839/comments",
    "title": "iOS 6 caching issue",
    "created_at": "2012-11-22T10:48:52Z",
    "updated_at": "2012-11-22T20:26:06Z",
    "body": "When I fetch updated content from the server using AJAX, it shows the older content. The problem is solved only by clearing the cache. I face this problem only on iOS 6. Works upto iOS 5.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1833",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1833/comments",
    "title": "Map route parameters to correct function parameter names",
    "created_at": "2012-11-19T20:35:58Z",
    "updated_at": "2012-11-19T20:42:31Z",
    "body": "I think it would be useful to have route parameter names mapped to their correct function parameters names. The current implementation appears to apply the arguments from the route directly to the function from left to right. An example is as follows:\n\n``` javascript\nroutes: {\n     \"page:p\":        \"index\",\n     \"sort:s\":        \"index\",\n     \"page:p/sort:s\": \"index\"\n},\n\nfunction: index(page, sort) {\n}\n```\n\nIf you navigate to the route /sortasc the variable page will store asc instead of sort.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1832",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1832/comments",
    "title": "Docs: Fix images being stretched on mobile.",
    "created_at": "2012-11-19T19:24:30Z",
    "updated_at": "2012-11-19T20:00:43Z",
    "body": "![like this](http://f.cl.ly/items/430M1v2u060c3x0a0H00/photo.PNG)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1831",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1831/comments",
    "title": "api for forwarding events",
    "created_at": "2012-11-19T14:19:23Z",
    "updated_at": "2012-11-19T18:19:13Z",
    "body": "Hi,\n\nI want to bring up the idea of forwarding event calls between different backbone objects (e.g. for bubbling up event calls).\n\nCurrently you will have to do something similar to this to forward events:\n\n```\nvar ListView = Backbone.View.extend({\n\n    tagName: \"ul\",\n\n    className: \"list\",\n\n    initialize: function() {\n        this.view = new ItemView();\n        this.view.on('show', this.showItem, this);\n    },\n\n    showItem: function(model) {\n        this.trigger('show:item', model);\n    }\n\n});\n\n```\n\nThe downside of this implementation is that you have to define lots of function which actually do not have any real logic inside.\nThe other way to use an anonymous function is not that readable:\n\n```\nvar ListView = Backbone.View.extend({\n\n    tagName: \"ul\",\n\n    className: \"list\",\n\n    initialize: function() {\n        this.view = new ItemView();\n        this.view.on('show', function(model) {\n            this.trigger('show:item', model);\n        }, this);\n    }\n\n});\n\n```\n\nMy wish would be some api change for the on method which would allow something like this:\n\n```\nvar ListView = Backbone.View.extend({\n\n    tagName: \"ul\",\n\n    className: \"list\",\n\n    initialize: function() {\n        this.view = new ItemView();\n        this.view.on('show', 'show:item', this);\n        // or alternative:\n        this.view.forward('show', 'show:item', this);\n    }\n\n});\n\n```\n\nThe downside would now be that the event system would be somehow coupled to another context where there is no guarantee if the new context supports the event api. However it would really improve code which has to bubble up lots of different event chains....\n\nRegards, \nbodo\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1830",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1830/comments",
    "title": "Wondering if underscore should be included in package.json",
    "created_at": "2012-11-19T10:18:30Z",
    "updated_at": "2013-03-24T01:33:03Z",
    "body": "Indeed, as I use lodash, it shoudn't download underscore when I \"bower install backbone\".\n\nI know, there's a huge dependency between backbone and underscore but it downloads a package which I don't need.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1829",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1829/comments",
    "title": "Save success callback does not receieve options.",
    "created_at": "2012-11-17T18:32:23Z",
    "updated_at": "2012-11-17T18:55:22Z",
    "body": "A custom success callback does not receive options variable.\n\nThe error callback does, the 'sync' event does and the documentation also says it should:\n\n> save accepts success and error callbacks in the options hash, \n> which are passed (model, response, options) and (model, xhr, options) as arguments, \n\nFrom the Model.save method\n\n``` javascript\n      options.success = function(resp, status, xhr) {\n        var serverAttrs = model.parse(resp, xhr);\n        if (options.wait) {\n          delete options.wait;\n          serverAttrs = _.extend(attrs || {}, serverAttrs);\n        }\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) {\n          success(model, resp);\n        } else {\n          model.trigger('sync', model, resp, options);\n        }\n      };\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1828",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1828/comments",
    "title": "Array of ids to collection",
    "created_at": "2012-11-17T17:13:58Z",
    "updated_at": "2012-11-19T18:39:21Z",
    "body": "HI,\nMy model have relation has many. It have value with array of models ids. How can I change this array to collection?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1825",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1825/comments",
    "title": "Collection.add does nothing if a duplicate exists, and it's undocumented.",
    "created_at": "2012-11-15T23:38:58Z",
    "updated_at": "2012-11-16T23:43:50Z",
    "body": "I struggled with this one for a couple hours, unable to determine why my collection was not updating.\n\nI checked both the Docs page, the FAQ,  and the Annotated source page, and there does not appear to be any mention of this behavior. Preferably, it would appear under Collection.add.\n\nMaybe I missed it, but I tried searching the entire page for \"add\"  and \"exist\", in addition to reading each of the method docs multiple times.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1823",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1823/comments",
    "title": "super access for javascript programmers",
    "created_at": "2012-11-15T16:49:44Z",
    "updated_at": "2012-11-15T19:24:16Z",
    "body": "Dear Backbone developers,\n\nI have noticed after browsing your issues and pull requests that there is little love for actual javascript developers, in comparison to the coffeescript variety.\n\nI have been trying to deal with multiple inheritance between objects for some time now and although the recommended method for accessing the super class works, it's not what I would call convenient.\n\nI added a single line after the coffeescript convenience property to tend to this. This solution should not affect the coffeescript convenience and simply make actual javascript development easier.\n\nHere is an example usage: http://jsfiddle.net/yARDp/37/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1821",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1821/comments",
    "title": "Question about instantiating Backbone View",
    "created_at": "2012-11-15T09:48:45Z",
    "updated_at": "2012-11-15T12:15:12Z",
    "body": "Hi, just a quick query someone can hopefully clarify for me:\n\nWhy is it that I can instantiate a Backbone View using the following code...\n\n``` js\nvar Test = Backbone.View.extend({\n    initialize: function(){\n        alert(123);\n    },\n\n    el: $('#js-some-element'),\n\n    events: {\n        'click': 'do_something'\n    },\n\n    do_something: function(){}\n});\n\nnew Test();\n```\n\n...but I can't with...\n\n``` js\nnew Backbone.View.extend({\n    initialize: function(){\n        alert(123);\n    },\n\n    el: $('#js-some-element'),\n\n    events: {\n        'click': 'do_something'\n    },\n\n    do_something: function(){}\n});\n```\n\n...is it something to do with how the function is referenced by the variable `Test`? Just trying to better understand the underlying code set-up that prevents me from creating a new instance until assigning result to a variable? What is the `extend` method doing that would prevent that?\n\nSorry if this is off topic, but it seemed to be the best place to ask considering they'll likely be lots of Backbone experts around here.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1819",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1819/comments",
    "title": "Multiple var declarations per function (method)",
    "created_at": "2012-11-14T21:23:04Z",
    "updated_at": "2012-11-14T21:26:32Z",
    "body": "The compressed code (after prettifying) contains multiple var declarations per method. \n\nSince var declarations are 'hoisted' in JavaScript, please ensure that there is only one var declaration per function or method.\n\nThis would reduce compressed code size and eliminate any possible issues related to var hoisting.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1818",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1818/comments",
    "title": "IE7 (and IE7 compatibility mode) Permission denied issue",
    "created_at": "2012-11-14T16:05:33Z",
    "updated_at": "2012-11-29T09:09:25Z",
    "body": "We are seeing a problem in IE7 (and in compatibility mode) where we see a Permission Denied response when the following code is executed:\n\n``` javascript\ncheckUrl: function(e) {\n       var current = this.getFragment();\n       if (current == this.fragment && this.iframe) current = this.getFragment(this.getHash(this.iframe));\n       if (current == this.fragment) return false;\n       if (this.iframe) this.navigate(current);\n       this.loadUrl() || this.loadUrl(this.getHash());\n     },\n```\n\nWhen the this.getHash(this.iframe) is called, the getHash method throws the error at line \n\n``` javascript\nvar match = loc.href.match(/#(.*)$/);\n```\n\nWe found the following code in Backbone:\n\n``` javascript\nif (oldIE) {\n  this.iframe = $('<iframe src=\"javascript:0\" tabindex=\"-1\" />).hide().appendTo('body')[0].contentWindow;\n  this.navigate(fragment);\n}\n```\n\nIf we make the var oldIE always false, then this error goes away. Is it possible to get a bit of background on this part of the Backbone code - what is its purpose in IE7 (and older versions of IE)?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1817",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1817/comments",
    "title": "Set function not behaving as per documentation",
    "created_at": "2012-11-14T04:22:39Z",
    "updated_at": "2012-11-14T05:31:29Z",
    "body": "The documentation here: http://backbonejs.org/#Model-set says that it's valid to call the set function like so:\n\n```\nbook.set(\"title\", \"A Scandal in Bohemia\");\n```\n\n(where the first parameter is the property name as a string).  However, this results in the following error:\n\nUncaught TypeError: Cannot use 'in' operator to search for 'id' in title\n\nI'm basically trying to create properties dynamically from an XML element, I so don't know their names at \"compile\" time.  I've found an alternate way to achieve this using the following code:\n\n```\nvar bookProperty = {};\nbookProperty[\"title\"] = \"A Scandal in Bohemia\";\nbool.set(bookProperty);\n```\n\nHowever, either the code or the documentation appears to need updating to conform to one another.\n\nThanks\n\nChris Anderson\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1815",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1815/comments",
    "title": "Backbone.js routes not always being saved to history",
    "created_at": "2012-11-12T21:30:37Z",
    "updated_at": "2012-11-16T21:49:05Z",
    "body": "We have a full app using Backbone.js and sometimes when navigating through a directory structure, it doesn't seem to save to the history.  Meaning, when we use the back button, it will skip over some pages.\n\nAny ideas what could be causing this? We get it most frequently on Chrome in windows.\n\nThank you\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1814",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1814/comments",
    "title": "parse() don't work",
    "created_at": "2012-11-11T09:29:43Z",
    "updated_at": "2012-11-11T11:21:30Z",
    "body": "Method parse() don't work either in collections or in model. I did something like this\n\n```\nvar my_collection = Backbone.Collection.extend({\n    model: my_model,\n    url: '/collection/url',\n\n    parse: function(response) {\n        console.log('show me something!!!');\n        console.log(response);\n        return response;\n    }\n});\n```\n\nbut it doesn't work. Nothing happens!\nI make changes in original backbone's parse() method - it doesn't work too.\nI tried different versions of jquery(1.7.1/1.7.2/1.8.0) and underscore(1.3.1/1.4.2), but it didn't help me.\nWhat am I doing wrong? (Backbone.js 0.9.2)\n\nUPD: It was mistake on the server - response wosn't a JSON\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1813",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1813/comments",
    "title": "Undertanding Model - first backbone/mvc project question",
    "created_at": "2012-11-08T21:30:33Z",
    "updated_at": "2012-11-08T22:22:42Z",
    "body": "I'm working on a project that is going to use highcharts (http://www.highcharts.com). I'm thinking about how to structure my project and this is my first attempt at MVC and first time using backbone.js\n\nFor highcharts we provide some data to the api. The data is made up of a collection of points (x,y) or a series. I'm trying to decide if when I design this app to make each whole set of data (series) the Model or each data point the model and then have a collection of data points for each chart (view). \n\nLike this:\n\nvar DataPoint = Backbone.Model.extend({\n  defaults: {\n    x: 0,\n    y: 0\n  },\n  initialize: function() {\n    console.log(x + ', ' + y);\n  }\n});\n\nvar DataSeries = Backbone.Collections.extend({\n  model: DataPoint\n})\n\nor more like:\n\nvar Data = Backbone.Model.extend({\n  defaults: null\n});\n\nMy concern with this is that it seems like a lot of overhead to make each datapoint an object, but it does seem to fit the MVC model to do it that way (or am I over thinking this)?\n\nThanks for any guidance.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1812",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1812/comments",
    "title": "Option to update duplicates in Collection.add [Feature]",
    "created_at": "2012-11-08T18:52:32Z",
    "updated_at": "2012-11-08T19:13:58Z",
    "body": "During a batch add of models from the server, I wanted a way to force Backbone to update an existing model in the collection if it exists for that ID with the model attributes that the server was attempting to add. The default behaviour is to ignore duplicates.\n\nI'm aware that Backbone was designed with the fetch function in mind for updating collections, but I'm using a websocket sync setup and a \"server push\" event is best handled by `Collection.add`.\n\nI made the following adjustment to that method (around line 600):\n\n```\n    if (cids[cid] || this._byCid[cid] || ((id != null) && (ids[id] || this._byId[id]))) {\n      if(options.updateDupes && id && this._byId[id]) {\n        this._byId[id].set(model.attributes);\n        console.log('Updating dupe',id,i+1);\n      }\n      else\n        dups.push(i);\n      continue;\n    }\n```\n\nWhich allows me to do the following:\n\n```\n   Collection.add(modelAttributes, {updateDupes:true});\n```\n\nWhich avoids adding new models when conflicts occur and simply sets the new attributes for the existing model.\n\nI haven't really dug into the source as much as I should, just looking for suggestions on optimal ways to achieve this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1811",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1811/comments",
    "title": "Backbone.history.start: root param not working with pushState: true",
    "created_at": "2012-11-08T17:13:57Z",
    "updated_at": "2012-11-09T11:50:51Z",
    "body": "Here is my sample test:\n\n``` javascript\n(function() {\n\n    var router = Backbone.Router.extend({\n        routes: {\n            '': 'index',\n            '*path': 'default'\n        },\n\n        index: function() {\n            console.log('index');\n        },\n\n        default: function(path) {\n            console.log('default: ' + path);\n        }\n\n    });\n\n    router = new router();\n\n    Backbone.history.start({pushState: true, root: 'root'});\n\n}).call(this);\n```\n\nentering url: `http://127.0.0.1/root/?p=42`\ngive me this output: `default: root/?p=42`\n\nhowever changing code to \n\n``` javascript\nBackbone.history.start({pushState: false, root: 'root'});\n```\n\nsame url gives me this output: `index`\n\nquestion:\nthis seams to be a rather strange behavior. Am I missing something ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1810",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1810/comments",
    "title": "allow Collection.reset with a Collection",
    "created_at": "2012-11-08T11:13:32Z",
    "updated_at": "2012-11-08T12:27:07Z",
    "body": "Hi there,\n\nit would be great to be able to `reset` a `Backbone.Collection` passing in another `Backbone.Collection`.\nThis may be extended to have `add` and `remove` work with a collection, too.\n\nThis allows to re-sync collections, which are changed in separate ways.\n\n``` javascript\nProductCollection = Backbone.Collection.extend({});\n\nProductSelectionView = Backbone.View.extend({\n    initialize: function() {\n        _.bindAll(this);\n\n        // after selecting a product, it will be removed from this collection\n        // a selected product may be de-selected again, adding it to this collection again\n        this.selectableProducts = new ProductCollection();\n        this.selectableProducts.on('all', this.render);\n\n        // when changing the scope (e.g. a category of products), this collection will be reset\n        this.availableProducts = new ProductCollection();\n\n        // setup URL and stuff, to have fetch work\n        // wire collection with scope etc.\n\n//////////////////////////\n        // This is currently not possible.\n        this.availableProducts.on('reset', this.selectableProducts.reset);\n\n        // currently available version\n        this.availableProducts.on('reset', function(collection) {\n            this.selectableProducts.reset(collection.toArray());\n        }, this);\n//////////////////////////\n\n        this.availableProducts.fetch();\n    },\n\n    render: function() {\n        // render the view \n\n        return this;\n    }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1809",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1809/comments",
    "title": "\"self = this\" and internet explorer",
    "created_at": "2012-11-08T08:46:19Z",
    "updated_at": "2012-11-12T14:59:57Z",
    "body": "I couldn't find anything related to this issue so i posted a new one.\n\nWhen setting var self = this and then using self it is not working properly.\n\nWhen i change self to something else like var selfish = this i now can use it!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1805",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1805/comments",
    "title": "Best practice to skip model validation on fetch",
    "created_at": "2012-11-07T09:27:53Z",
    "updated_at": "2012-11-19T19:11:02Z",
    "body": "When I do fetch the model from the server the model performs validation.\nHow can I relax model validation on fetch and at the same time to have all the regular events (change, reset, etc) being triggered?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1804",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1804/comments",
    "title": "Call delegateEvents() first on View",
    "created_at": "2012-11-06T17:57:51Z",
    "updated_at": "2014-08-02T05:48:29Z",
    "body": "When instantiate a view, function initiliaze is called first of delegateEvents. \n\nIf I want disable or unbind event in specific situation, the better place for this would initialize? But with call delegateEvents after initialize, I can't.\n\nWhy not call delegateEvents first, and after initialize?\n\n``` javascript\n\nvar View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    this._configure(options || {});\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n    this.delegateEvents();\n  };\n\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1801",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1801/comments",
    "title": "Routers, PushState, and Server-side content",
    "created_at": "2012-11-05T08:23:25Z",
    "updated_at": "2013-05-14T17:39:16Z",
    "body": "Here is my predicament:\n\nWe have a number of frontend-only and backend-only routes (that is, content is generated via frontend Backbone views or backend server-rendered content).\n\nFor those backend routes, we still want Backbone to initialize because we use it for various page activities and handle navigation between frontend pages. The only thing special about our backend routes is the server pre-renders some HTML content into the body (think legacy apps, SEO, etc). Backbone works great out-of-the-box for PushState-enabled browsers in the above environment.\n\nThe problem is non-PushState browsers. Backbone intelligently swaps out URL fragments when Backbone history is started in the presence of a non-PushState browser:\n`https://zapier.com/app/support` `->` `https://zapier.com/app/#support`\n\nThis causes a full-page refresh in non-PushState browsers. Because of the hash `#`, the server is not sent the fragment. The server only sees `https://zapier.com/app/` and cannot know which backend content may need to be loaded on the second round trip.\n\nWe are working around this by using two routers, re-starting history between the router initialization, and faking some browser environment variables for Backbone:\n\n```\n# light routing starts here, light routing is for backend-only routes\n# fake pushState existence so Backbone won't auto-redirect\nif not window.history.pushState?\n   window.history.pushState = (() -> return)\nlightRouter = new LightRouter()\nlightRouteFound = Backbone.history.start {pushState: false, root: '/'}\n\n# normal backbone routing starts here\n# restart history so it picks up on a second set of new non-light routes\nBackbone.history.stop()\nrouter = new Router()\nrouteFound = Backbone.history.start {pushState: true, root: '/'}\n\n# load 404 page if no initial route matched the URL in the address bar\nrouter.notfound() if not routeFound and not lightRouteFound\n```\n\nI am curious what other solutions exist and if Backbone should be handling this scenario.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1798",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1798/comments",
    "title": "Document problem with fetch",
    "created_at": "2012-11-04T09:58:25Z",
    "updated_at": "2012-11-05T13:48:55Z",
    "body": "About Model.prototype.fetch, the document says:\n\n> Accepts `success` and `error` callbacks in the options hash, which are passed `(model, response)` as arguments.\n\nBut this is not true for `error` callback. Relevant code is as follows:\n\n```\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      options.success = function(resp, status, xhr) {\n        if (!model.set(model.parse(resp, xhr), options)) return false;\n        if (success) success(model, resp, options);\n      };\n      return this.sync('read', this, options);\n    },\n\n    ...\n\n  Backbone.sync = function(method, model, options) {\n    ...\n    var success = options.success;\n    options.success = function(resp, status, xhr) {\n      if (success) success(resp, status, xhr);\n      model.trigger('sync', model, resp, options);\n    };\n\n    var error = options.error;\n    options.error = function(xhr, status, thrown) {\n      if (error) error(model, xhr, options);\n      model.trigger('error', model, xhr, options);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    return Backbone.ajax(_.extend(params, options));\n  };\n```\n\n`option.success` goes through two manipulations (or decorations) and should be of the form `function(model, resp, options)`, but `option.error` doesn't go through the first manipulation, thus should be of the form `function(model, xhr, options)`, as called in `if (error) error(model, xhr, options);` --  `xhr` is not the same as `resp`, I think this should be made clear in document.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1793",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1793/comments",
    "title": "Trailing spaces in search query cause route to be fired twice",
    "created_at": "2012-11-02T04:29:37Z",
    "updated_at": "2012-11-02T04:57:48Z",
    "body": "Using Backbone.history with pushState disabled, navigating to a search route with one or more trailing spaces, the route is incorrectly triggered twice. \n\nFor example:\n\n``` javascript\nBackbone.history.navigate('search/space ', {trigger: true});\n```\n\nLooking into it further, when the fragment is added to window.location, the trailing spaces are trimmed and thus when Backbone.history.checkUrl() is called, it detects that the hash fragment has changed and triggers the route again. \n\nTo illustrate the problem, I added a gist showing two tests: https://gist.github.com/3998698 \n\nThe first test uses the 'mock' Backbone.history.location from the test setup which passes. When Backbone.history.location is replaced with window.location (as it would be in actual use), the same test fails because the route is triggered twice.\n\nI'll submit a Pull Request in a moment with a potential fix for the issue (along with the above tests).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1791",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1791/comments",
    "title": "Error when accessing model attributes in parse",
    "created_at": "2012-11-01T21:23:49Z",
    "updated_at": "2012-11-02T00:47:03Z",
    "body": "In constructing models with `{ parse: true }`, there's an error thrown if your parse function tries to access any attributes via `this.get()` or `this.has()`. I understand that `this.attributes` isn't set until _after_ parse is called in this constructor case, but still seems like it shouldn't throw a JS error. Accessing attributes in `parse` (outside of using this new model option) was never a problem before.\n\nhttp://jsfiddle.net/philfreo/B85yY/1/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1789",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1789/comments",
    "title": "Can't import _ or $ from global scope when root === exports",
    "created_at": "2012-11-01T18:46:36Z",
    "updated_at": "2012-11-05T17:50:36Z",
    "body": "When `root === exports` (or anything other than the actual global object), the following imports always fail:\n\n```\n// Require Underscore, if we're on the server, and it's not already present.\nvar _ = root._;\n\n// For Backbone's purposes, jQuery, Zepto, or Ender owns the `$` variable.\nBackbone.$ = root.jQuery || root.Zepto || root.ender;\n```\n\nThis is less of a problem for `_` because the fallback is to `require('underscore')`. However, in the case of `$`, the failure is permanent, because we never reevaluate `Backbone.$`.\n\nI have a pull request ready to go that should fix this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1785",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1785/comments",
    "title": "collection.reset() documentation is wrong",
    "created_at": "2012-10-30T21:52:45Z",
    "updated_at": "2012-10-31T04:51:48Z",
    "body": "Header says:\n\n```\n   reset collection.reset(models, [options]) \n```\n\nImplying models is required.\n\nlater it says: \"Calling collection.reset() without passing any models as arguments will empty the entire collection.\"\n\nYou can't have your cake and eat it too.  the header should say collection.reset([models],[options]) or something similar.\n\nThis incorrect text may explain why the typescript description file for backbone is wrong as well\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1783",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1783/comments",
    "title": "Model.get/Model.has behaviour with certain (JavaScript implementation defined) attribute names.",
    "created_at": "2012-10-30T15:53:48Z",
    "updated_at": "2014-07-30T20:41:48Z",
    "body": "Simple example:\n\n``` javascript\n(new Backbone.Model).get('constructor')\n```\n\nExpected result: null/undefined\nActual result: some function.\n\nReturns constructor property of Model.attributes object, not value of model attribute (because it is not set).\nHas method also has this problem.\n\nThis is typical mistake when using objects as hash table/dictionary, please use hasOwnProperty here.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1781",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1781/comments",
    "title": "Binding view states and routes",
    "created_at": "2012-10-30T08:57:16Z",
    "updated_at": "2012-11-16T22:08:20Z",
    "body": "This is a general question ticket about Backbone best practices.\n\nI'm thinking about the optimal way to structure my Backbone application. The problem is that I have various complex states, each made by some views showing while all the others are hidden.\n\nWhat is the canonical way to handle this in Backbone? Two things that I've thought are either controlling the state by the router (calling views hide / show methods) or making the views listen for route event.\n\nThe problem with the first method is that the router must be aware of all the views existing in the application.\n\nThe problem with this second solution is that I have to make all the views listen to all the events and hide for any of them but a couple that make them show.\n\nThanks for pointing me to a lean solution.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1780",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1780/comments",
    "title": "Rename viewOptions.collection",
    "created_at": "2012-10-29T09:45:25Z",
    "updated_at": "2012-10-29T13:32:51Z",
    "body": "There is little words talking about `viewOptions.collection` in the document.\n\nif `view.collection` is the collection of its model, that is meaningless. as we can access it by `view.model.collection`.\n\nif `view.collection` is models collection have nothing to do with the view's model, that is confusing and is bad practice.\n\nso `view.collection` should be the view's parent view (or DOM node). however, the `collection` name confuses me as it's the same as model.collection.\n\nrename it to `container`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1779",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1779/comments",
    "title": "infinite redirect loop in old browsers",
    "created_at": "2012-10-28T19:10:07Z",
    "updated_at": "2012-10-31T13:11:49Z",
    "body": "It's not a bug, backbone is supposed to work this way, but I'm not sure what to do with it.\n\nWhen Backbone identifies that Browser doesn't support push state it tries to fall back into hash-url (and use `/#some-url` instead of `/some-url`). Sometimes it causes infinite redirect loop, consider following case:\n1. User enter `http://my-site.com`.\n2. Server identifies path as `/` and redirect Browser to `/home-page`.\n3. Backbone identify that Browser doesn't support push state and redirect Browser to `/#home-page`.\n4. Server ignores hash part of path and identifies path as `/` and redirect Browser to `/home-page`.\n5. Infinite loop ...\n\nHow such cases can be handled?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1778",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1778/comments",
    "title": "Trigger event on attaching view to DOM",
    "created_at": "2012-10-28T19:01:03Z",
    "updated_at": "2012-10-28T19:03:32Z",
    "body": "It often is required to tweak a view's _el_ only after it has been attached to the DOM (example: [Chosen](http://harvesthq.github.com/chosen/). \n\nWith the current Backbone implementation, it is always hard to know if a view is already attached to the DOM and to attach your code to any event that is only fired then. It would be great if you could just add an event that is triggered whenever a view's _el_ is attached to the DOM.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1777",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1777/comments",
    "title": "Optionally namespace data in Backbone.sync",
    "created_at": "2012-10-26T18:07:04Z",
    "updated_at": "2012-10-29T04:25:12Z",
    "body": "Apologies if this has already been discussed.\n\nIt would be nice if you could optionally namespace the data being sent to the server in order to support the following pattern -\n\n```\n@comment = Comment.create!(params[:comment])\n```\n\nIt could be used in a pretty simple way:\n\n```\nvar Comment = Backbone.Model.extend({\n  namespace: 'comment'\n});\n```\n\nIt could be implemented by checking for a namespace in Backbone.Sync\n\n```\nif (!options.data && model && (method === 'create' || method === 'update')) {\n  params.contentType = 'application/json';\n  params.data = JSON.stringify(model);\n  if (this.namespace) params[this.namespace] = params.data;\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1774",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1774/comments",
    "title": "Provide Backbone Model/Collection as first parameter to jQuery Deferred callbacks",
    "created_at": "2012-10-26T03:55:53Z",
    "updated_at": "2013-06-09T23:51:26Z",
    "body": "Hi all,\n\nWe've been leveraging the Deferred objects returned from Backbone.sync calls extensively in our application, and have found those to be very convenient, particularly when views depend on multiple models.  \n\nOne case we've struggled with is when we have nested Backbone views, we're forced to provide both the collection instance and deferred object to the child view constructor:\n\n```\nvar View1 = Backbone.View.extend({\n    render:function () {\n        var collection = new Backbone.Collection();\n        collection.url = '/path/to/resources';\n\n        var deferred = collection.fetch();\n        var subview1 = new Subview1({collection:collection, deferred:deferred}).render();\n        this.$el.append(subview1.el);\n\n        deferred.done(this.onCollectionFetched);\n\n        return this;\n    },\n\n    onCollectionFetched:function (collection) {\n        // do stuff with collection\n    }\n});\n\nvar Subview1 = Backbone.View.extend({\n    initialize:function () {\n       this.collection = this.options.collection;\n       this.deferred = this.options.deferred;\n    },\n\n    render:function () {\n        this.deferred.done(this.onCollectionFetched);\n        return this;\n    },\n\n    onCollectionFetched:function (collection) {\n        // do stuff with collection\n    }\n});\n```\n\nThe example above is fairly trivial, but quickly becomes complex has the hierarchy grows (particularly if certain views in the hierarchy should not be blocked from rendering based on data not being ready).  It would be nice if the deferred would be modified slightly such that the collection (or model) was provided as the first argument to the callbacks:\n\n```\nvar View1 = Backbone.View.extend({\n    render:function () {\n        var collection = new Backbone.Collection();\n        collection.url = '/path/to/resources';\n\n        var deferred = collection.fetch();\n        var subview1 = new Subview1({deferred:deferred});\n\n        deferred.done(this.onCollectionFetched);\n\n        return this;\n    },\n\n    onCollectionFetched:function (collection) {\n        // do stuff with collection\n    }\n});\n\nvar Subview1 = Backbone.View.extend({\n    initialize:function () {\n       this.collection = this.options.collection;\n       this.deferred = this.options.deferred;\n    },\n\n    render:function () {\n        this.deferred.done(this.onCollectionFetched);\n        return this;\n    },\n\n    onCollectionFetched:function (collection) {\n        // do stuff with collection\n    }\n});\n\n```\n\nI've attached a pull request to this issue illustrating a potential fix, but am certainly open to suggestions and other approaches to take.\n\nThanks,\nPhil\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1771",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1771/comments",
    "title": "Minimalistic validation framework",
    "created_at": "2012-10-23T20:29:09Z",
    "updated_at": "2012-10-26T04:40:59Z",
    "body": "**Use case:** provide simple way to define frequently used validations. It's optional - You don't have to use it, it's backward compatible and don't get into Your way if You don't need it.\n\n**How it looks**\n\nDefine attribute validations:\n\n``` CoffeeScript\nclass app.Application extends app.Model\n  validations:\n    name  : (v) -> \"can't be blank\" if _(v).isBlank()\n    login : (v) -> \"invalid format\" if /^[a-z]$/.test v\n```\n\nThe `validate` method works exactly the same as usual, if You call it it will return `null` or error messages in form of\n\n``` JavaScript\n{\n  name  : [\"can't be blank\"],\n  login : [\"invalid format\"]\n}\n```\n\n**Implementation**\n\n``` CoffeeScript\nclass app.Model extends Backbone.Model\n  # Making validate by default run validations.\n  validate: (attrs = {}) -> @_runValidations attrs\n\n  # Runs validations defined in `validations` attribute of model.\n  _runValidations: (attrs) ->\n    return null unless @validations\n    errors = {}\n    for k, v of attrs\n      msg = @validations[k]?(v)\n      (errors[k] ?= []).push msg if msg\n    if _(errors).size() > 0 then errors else null\n```\n\nIt's still backward compatible, if You don't provide `validations` attribute it will work as usual, You also can override `validate` as it's supposed to be used in current version of Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1770",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1770/comments",
    "title": "Extension points for attribute setter",
    "created_at": "2012-10-23T20:16:59Z",
    "updated_at": "2012-10-26T19:59:26Z",
    "body": "Sometimes it would be nice to have ability to extend attribute setters. \n\nIt can be done by changing current version:\n\n``` JavaScript\noptions.unset ? delete now[attr] : now[attr] = val;\n```\n\nto:\n\n``` JavaScript\nif (options.unset) \n  this.deleteAttribute(now, attr)\nelse \n  this.setAttribute(now, attr, val)\n```\n\nI believe with V8 optimizations speed should be the same.\n\n**Use case.**\n\nOne of possible use cases is to make attributes available directly on the model with 100% backward compatibility. I.e. acces it with both ways - direct`model.attr` and usual `model.get('attr')`.\n\nWith extendable setter it can be done as simple as:\n\n``` JavaScript\ndeleteAttribute: function(now, attr){\n  delete now[attr]\n  delete this[attr]  \n} \n\nsetAttribute: function(now, attr, value){\n  now[attr] = value\n  this[attr] = value\n}\n```\n\nWhat do You think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1765",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1765/comments",
    "title": "Naming convention (collections model)",
    "created_at": "2012-10-22T22:38:57Z",
    "updated_at": "2013-01-15T23:05:15Z",
    "body": "I'm suggesting to rename \"model\" property to \"Model\", because it is a constructor and it is a good convention to start constructors with an uppercase letter.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1764",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1764/comments",
    "title": "initialize() / constructor() documentation",
    "created_at": "2012-10-22T19:42:15Z",
    "updated_at": "2013-03-14T10:30:31Z",
    "body": "I learned a significant amount about Backbone initialize() and constructor() functions this last week and some better documentation would have helped a lot.\n\nExample:\n\n```\nvar myModel = new MyModel(myCustomParameter);\n```\n\nMyModel and myCustomParameter DO NOT have the same object structure.  This is a problem because the myCustomParameter properties get copied into myModel.attributes.  I don't want this to happen.  I temporarily decided to override the constructor() function to handle my custom object.  This adds complexity because my overridden constructor still has to call the super-class's constructor.  This is doable but ugly in my opinion.\n\nMy final solution is to explicitly state the parameters that Backbone uses by default and add my custom parameter afterward.\n\nExample:\n\n```\n/**\n* The Model's initialize method.\n* @param attributes Attributes are added to Backbone.Model.attributes.\n* @param options Options are added to Backbone.Model.options.\n* @param myCustomParameter A custom parameter that I don't want copied to the attributes or options.\n*/\ninitialize: function(attributes, options, myCustomParameter) {\n}\n```\n\nTo create this model you would call it like this:\n\n```\nvar myModel = new MyModel(null, null, myCustomParameter);\n```\n\nThis keeps all of Backbone's functionality and allows me to properly extend it.\n\nI ran into a similar problem with views and my solution is similar where I explicitly state Backbone's default parameters:\n\n```\n/**\n* The View's initialize method.\n* @param options Options are added to Backbone.View.options.\n* @param myViewModel A custom parameter that I don't want copied to the options.\n*/\ninitialize: function(options, myViewModel) {\n}\n```\n\nCollections work similarly with \"models\" and \"options\" parameters.\n\nIt would be great if the documentation talked more about the initialize method and stressed a standardized way of using it.  I feel like the initialize method should always be called with the parameters that Backbone uses by default and then you should add your own parameters afterward.  This is clean and keeps all of Backbone's functionality while allowing you to extend it at will.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1763",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1763/comments",
    "title": "Model \"Has-A\" Collection as attribute",
    "created_at": "2012-10-22T13:13:11Z",
    "updated_at": "2012-10-22T14:41:59Z",
    "body": "I am developing an interface that is presented in table format data with pagination, filtering, etc. I would like it to be presented as one Backbone.View.  Backbone.Model has the array of data, filters, etc as parameters, but I would like to have this array as Backbone.Collection. But I am having some problems with Collection in Model, maybe I'm doing something wrong, help me please. Before rendering template I \u0441onvert Collection to Array via _.toArray Underscore.\n\n```\nvar ProductItem  = Backbone.Model.extend();\n\nvar ProductListCollection = Backbone.Collection.extend({\n    model: ProductItem\n});\n\nvar ProductList = Backbone.Model.extend({\n    defaults: {\n        limit: 10,\n        ItemsList: new ProductListCollection()\n    },\n\n    initialize: function() {\n        this.loadItemsFromServer( this.get('limit') );\n\n    },\n\n    loadItemsFromServer: function(limit) {\n\n        var that = this;\n\n        $.ajax({\n            url: 'http://localhost/setup/modules/getgoods.php',\n            dataType : \"json\", type: \"POST\", data: {limit: limit},\n            success: function (data, textStatus) {\n                var ItemsListCollection = that.get(\"ItemsList\");\n\n                 _.map(_.range( limit ), function(i) {\n                    var prodbox = new ProductItem({\n                        id: data.aaData[i].id,\n                        name: data.aaData[i].name,\n                        price: data.aaData[i].price\n                    });\n                    ItemsListCollection.push( prodbox );\n\n                });\n\n                that.set({ ItemsList: ItemsListCollection });\n                that.trigger(\"change\");\n\n\n            }\n        });\n\n    }\n});\n\nvar ProductListView = Backbone.View.extend({\n\n    template: _.template($('#items-template').html()),\n    initialize: function() {\n        //this.model.bind('change', _.bind(this.render, this));\n        _.bindAll(this,\"render\");\n\n        var that = this;\n        $('#catalog').html(this.render().el);\n        this.model.bind(\"change\", function() {\n            $('#catalog').html(that.render().el);\n\n        });\n    },\n    render: function() {\n\n        var ItemsListCollection = this.model.get(\"ItemsList\");\n\n        var _array = new Object();\n        ItemsListCollection = _.toArray(ItemsListCollection);            \n\n        this.$el.html(this.template({ItemsList: ItemsListCollection, limit: 10}));\n        //this.$el.html(this.template(this.model.attributes));\n\n        return this;\n    }\n});\n\n\nvar catalog = new ProductList();\nvar prodview = new ProductListView({\n    model: catalog\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1760",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1760/comments",
    "title": "Question: Backbone & testing & Angular",
    "created_at": "2012-10-20T10:08:10Z",
    "updated_at": "2012-10-20T13:18:49Z",
    "body": "I talked with someone. He said \"angularjs is a framework. backbonejs is just a library\". is this stmt correct? As far as I know BB is also a type of Framework.\n\nWhat testing tool u'r using to test BB? Qunit?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1755",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1755/comments",
    "title": "Make the root object \"global\" instead of \"module.exports\" when running as a Node module",
    "created_at": "2012-10-19T18:06:06Z",
    "updated_at": "2012-10-19T18:54:26Z",
    "body": "Currently when Backbone is run as a Node module on the server, the root object is equal to \"module.exports\". See this issue for more background\nhttps://github.com/documentcloud/backbone/issues/1751#issuecomment-9603574\n\nIt would be handy if the root object was set to \"global\" instead. Module.exports is private to the module, so you can never inject anything into Backbone's root namespace currently. \n\nThis came for me because I was experimenting with rendering backbone views on the server, and needed to inject stubs for document.createElement. Currently there is no way to do this, since the global scope is effectively completely private.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1753",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1753/comments",
    "title": "Question - Routing + URL rewrite in IE",
    "created_at": "2012-10-19T11:43:09Z",
    "updated_at": "2012-10-22T07:54:53Z",
    "body": "I've encountered a peculiar issue when dealing with Backbone routing.\n\nOur app is being hosted in `example.com/photo/index.php`, and we'd like to hook an event on it which when triggered, appear in the address bar as `example.com/photo/<ID>`. Below is how we set up our rewrite rule androuter settings:\n\n```\nRewriteRule ^/photo/([0-9]+)?$ /photo/index.php/photo/$1 [L]\n```\n\n**Inside Backbone.Router.extend:**\n\n```\nroutes: {\n    'photo/:ID': 'viewPhoto'\n},\n```\n\n**After router has been instantiated:**\n\n```\n$(function() {\n    Backbone.history.start({\n        pushState: 'pushState' in window.history,\n        root: '/'\n    });\n});\n```\n\nThis works great in Firefox/Chrome/Safari, but in IE9 you have to access the event hook with `example.com/photo/#photo/<ID>`, which is not very cool.\n\nSo we tried toggling the pushState option on (`pushState: true`) and hope it could help, but now whenever accessing `example.com/photo/<ID>` in IE9, page will be redirected to `example.com/#photo/<ID>` instead, and actually displaying the content of `example.com/index.php`.\n\nI suppose (?) this can be a non-issue if we change the event hooking URL to something like `example.com/photo/view/<ID>`, however we can't touch that part.\n\nIs there anyway to make either `example.com/photo/<ID>`, `example.com/#photo/<ID>`, or `example.com/photo/#<ID>` working as expected under IE9, with or without pushState?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1751",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1751/comments",
    "title": "Incorrect comment about global scope under Node",
    "created_at": "2012-10-17T23:13:43Z",
    "updated_at": "2013-07-19T14:10:55Z",
    "body": "At the beginning of the code (line 13 in the current master) there's a comment that says \"Save a reference to the global object (`window` in the browser, `global' on the server).\"\n\nAs far as I can tell this is incorrect for the server case, under Node. In that case the root object is the module, not 'global'. Although in fact it would be quite nice if the root object were 'global' under Node, if that isn't going to be the case then at least the comment should be fixed to be accurate. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1749",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1749/comments",
    "title": "Documentation should explain that View constructor extends this.options with the options argument",
    "created_at": "2012-10-17T19:36:14Z",
    "updated_at": "2012-11-19T21:48:29Z",
    "body": "Unless this functionality is subject to change,  I think the docs should explain that the constructor (really `_configure`) extends `this.options` rather than replacing it.  This behavior seems to provide a pattern for providing default options for a view that can be overridden by the options passed to the constructor.  However, this wasn't clear to me from the docs.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1748",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1748/comments",
    "title": "Collection.get problem with custom idAttribute",
    "created_at": "2012-10-17T19:01:06Z",
    "updated_at": "2012-10-17T19:04:13Z",
    "body": "On the latest master, this (new) test fails;\n\n```\n  test(\"get works with models that have a custom idAttibute\", function() {\n    var M = Backbone.Model.extend({ idAttribute: 'key' }),\n        C = Backbone.Collection.extend({ model: M }),\n        m1 = new M({ key: 'foo', value: 'bar' }),\n        c = new C([m1]);\n    equal(c.get('foo'), 'bar');\n  });\n```\n\nAm I expecting something that shouldn't be true?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1747",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1747/comments",
    "title": "assynchronous backbone routing, problem",
    "created_at": "2012-10-17T11:29:30Z",
    "updated_at": "2012-10-18T13:23:15Z",
    "body": "We have a big backbone application that loads new backbone apps assynchronous. Also the routes are loaded in at that point. We do this so the apps can be loaded differently from user to user.\nRight now I'll use history.stop add new route and history.start to add the new routing. \n\nThis comes with a big drawback, because If I'll do this 5 times every time I'll do a app.navigate('x'), it executes that routing 5 times and so the view renderings, ...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1745",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1745/comments",
    "title": "Chaning model's value inside callback for its own 'change' event",
    "created_at": "2012-10-17T09:31:09Z",
    "updated_at": "2012-11-19T22:14:20Z",
    "body": "Hi!\n\nThis is not real use case. I only did some tests and I'm not sure what is desired behaviour:\n\n```\nvar Foo = Backbone.Model.extend({});\n\nvar foo = new Foo({property: 0});\n\nfoo.on('change:property', function(model) {\n  console.info('change:property', model.get('property'), model.previous('property'));\n});\n\nvar flag = true;\n\nfoo.on('change', function(model) {\n  console.info('change', model.get('property'), model.previous('property'));\n\n  if (flag) {\n    flag = false;\n    foo.set({property: 1});\n  }\n});\n\nfoo.set({property: 1});\n```\n\nOutputs:\n\nchange:property 1 0\nchange 1 0\nchange 1 1\n\nWhat bothers me here is this second 'change' event. Intuition tell me that if value hasn't been changed then event shouldn't be fired but I'm new when it comes to backbone. Thanks in advance\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1740",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1740/comments",
    "title": "Question - retrieving model by attribute",
    "created_at": "2012-10-16T07:07:26Z",
    "updated_at": "2012-10-16T11:27:11Z",
    "body": "Is there a way to retrieve a model inside collection by the model's attribute?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1738",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1738/comments",
    "title": "Can't fetch a model from a collection when idAttribute is set",
    "created_at": "2012-10-15T13:55:22Z",
    "updated_at": "2012-10-15T13:58:45Z",
    "body": "I'm using a MongoDB backend, so I'm setting an `idAttribute` of __id_ within my models, however Backbone can't reference these id's when the models are placed in collections.\n\nExample:\n\n``` javascript\n\n// Define my Model with a custom idAttribute\nvar Meal = Backbone.Model.extend({\n  idAttribute: \"_id\"\n});\n\n// Define a collection\nvar Meals = Backbone.Collection.extend();\n\n\n// Create a model\nvar m = new Meal({ _id: 1, name: \"Cake\" });\n\n// Create a collection and insert the model I just created\nc = new Meals({model: m})\n\n// Find model where id is 1 within my collection (this doesn't seem to match idAttribute for some reason)\nc.get(1)\n```\n\nreturns `undefined` when I expect the Cake model.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1737",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1737/comments",
    "title": "BUG: Incorrect values in _previousAttributes when setting silently",
    "created_at": "2012-10-15T11:09:49Z",
    "updated_at": "2013-02-25T20:44:04Z",
    "body": "we have following collection\n\n```\n[{name:\"foo\", state:0}, {name:\"bar\", state:0}];\n```\n\nonly one model may have state = 1.\ntherefor\n\n```\nfunction activate(model) {\n    this.collection.each(function(other) {\n        if (other.get(\"name\") !== model.get(\"name\")) \n            other.set(\"state\", 0, {silent:true}); // does not update _previousAttributes\n    });\n    model.set(\"state\", 1); //should always trigger, if changed\n});\n```\n\nnow we have the following actions\n1. `activate(\"foo\");`\n   - model triggers change event\n2. `activate(\"bar\");`\n   - \"foo\".state = 0,BUT NOT in _previousAttributes\n   - model \"bar\" triggers change event\n3. `activate(\"foo\");`\n   - \"bar\".state = 0\n   - model \"foo\" DOESN'T trigger change event, as _previousAttributes were not set because of `{silent:true}`\n\nNow I would like to add, that `silent` is something that helps us to not trigger any event, but internally the values should be set correctly. I'm using Backbones API correctly everywhere, it's not like I'm setting `model.attributes.state` directly.... \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1735",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1735/comments",
    "title": "BUG in Models",
    "created_at": "2012-10-14T17:32:10Z",
    "updated_at": "2012-10-15T18:59:24Z",
    "body": "In the constructor you have this\n\n```\nif (options && options.parse) attributes = this.parse(attributes);\n```\n\nbut before you did \n\n```\nvar attrs = attributes || {};\n```\n\ntherefor you never use \"attributes\" again, so parse is getting ignored...\n\nSolution:\n\n```\nif (options && options.parse) attrs = this.parse(attributes);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1729",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1729/comments",
    "title": "Collection.get assumes that idAttribute is 'id'",
    "created_at": "2012-10-12T12:43:17Z",
    "updated_at": "2012-10-12T13:08:36Z",
    "body": "I'm talking about this code, starting from line 688:\n\n``` javascript\nget: function(id) {\n  if (id == null) return void 0;\n  return this._byId[id.id != null ? id.id : id];\n},\n```\n\nShouldn't we have something like that instead ?\n\n``` javascript\n  return this._byId[id[this.model.idAttribute] != null ? id[this.model.idAttribute] : id];\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1728",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1728/comments",
    "title": "Question - Assign index to models on instantiation",
    "created_at": "2012-10-12T09:39:41Z",
    "updated_at": "2012-10-12T09:50:55Z",
    "body": "Is there anyway to let the newly instantiated model know of its 0-based index inside its collection, and assign it? Something like:\n\n``` javascript\n    var m = Backbone.Model.extend({\n        initialize: function() {\n            this.set('index', '// 0-based index inside the parent collection//');\n        }\n    });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1727",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1727/comments",
    "title": "Model.fetch() does not remove attributes no longer found in model",
    "created_at": "2012-10-11T20:42:09Z",
    "updated_at": "2013-07-06T14:08:50Z",
    "body": "If a model has pre-existing attributes (either from a previous load or a manual set() operation), they are not removed during a fetch() if they are not contained in the server response.\n\n```\nmodel = new Backbone.Model\nmodel.url = \"/api/model\"\nmodel.set(\"bogus\", \"the quick brown fox\")\nmodel.fetch()\n\nmodel.get(\"bogus\") --> \"the quick brown fox\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1724",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1724/comments",
    "title": "IE8 native empty input fields send null to server",
    "created_at": "2012-10-10T20:21:08Z",
    "updated_at": "2012-10-11T14:48:32Z",
    "body": "In the Backbone.sync function, where the following code is called:\n\n`params.data = JSON.stringify(model.toJSON());`\n\nJSON.stringify will convert what seem like empty strings (\"\") to nulls. \n\nHere is the bug information: http://blogs.msdn.com/b/jscript/archive/2009/06/23/serializing-the-value-of-empty-dom-elements-using-native-json-in-ie8.aspx\n\nIt's not really Backbone's issue, I know. But if you do something like the following, I believe this issue will go away and be IE8 friendly.\n\n`JSON.stringify(foo, function(k, v) { return v === \"\" ? \"\" : v });`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1722",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1722/comments",
    "title": "Dependencies?",
    "created_at": "2012-10-10T11:31:29Z",
    "updated_at": "2012-10-10T16:04:43Z",
    "body": "Hi,\n\nCan you confirm what Underscore and jQuery methods are needed for Backbone to work? \n\nI want to implement my own code rather than using those libraries. \n\nThanks. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1721",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1721/comments",
    "title": ".fetch({add: true}) attaching phantom object into collection",
    "created_at": "2012-10-10T11:11:14Z",
    "updated_at": "2012-10-11T02:23:45Z",
    "body": "`collection.fetch({add: true})` currently adds an empty object `{}` into the original collection even if the fetched response is `undefined` or `null`:\n\n``` javascript\n[..., {\"id\" : 39, attr: \"whatever\"}, {}]\n```\n\nThis can lead to unexpected errors when processing the collection data. Is this intended?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1720",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1720/comments",
    "title": "Docs page links to 404 on to-do example",
    "created_at": "2012-10-10T09:08:16Z",
    "updated_at": "2012-11-19T22:36:15Z",
    "body": "Affected page: http://backbonejs.org/docs/todos.html\n\nThe second link on the page returns a 404. Presumably the correct link reference should be to https://github.com/jeromegn/Backbone.localStorage.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1719",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1719/comments",
    "title": "Question: Raw response from server",
    "created_at": "2012-10-09T08:19:31Z",
    "updated_at": "2012-10-10T14:06:39Z",
    "body": "How to get the raw response from server when using `collection.create()`, `model.destroy()` etc. whose raw responses won't be passed through `collection.parse()`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1718",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1718/comments",
    "title": "Issues with models.py",
    "created_at": "2012-10-08T11:13:17Z",
    "updated_at": "2012-10-08T12:00:17Z",
    "body": "Related to Python and Django\n\nI have one model 'A'  which inherit data from table 'B' there are too many fields in 'A' , Now i wants to create another table 'C' which consists of just three fields  A's id B's id and one more field from 'A'.\nso how i can do that so that when i insert the values from admin panel the third table 'C'  takes the value automatically means one row is inserted in it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1715",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1715/comments",
    "title": "By reference inheritance",
    "created_at": "2012-10-05T23:05:36Z",
    "updated_at": "2012-10-06T00:00:22Z",
    "body": "Have a question, potentially a bug - hopefully just a question.\n\nTrying to create a slightly enhanced view, and then create instances of that view as below.\n\n// enhanced view\nvar Enhanced = Backbone.View.extend({\nfoo: [],\ntest: function () {\nthis.foo.push(Math.random());\n}\n});\n\n// couple of new objects\nvar Foo = Enhanced.extend({});\nvar Bar = Enhanced.extend({});\n\n// instantiating\nvar foo = new Foo();\nvar bar = new Bar();\n\n// trying to push a random number into foo\nfoo.test();\nbar.test();\n\n// expecting to see something like [0.11767047128388153][0.8575983647365905]\nconsole.log(foo.foo, bar.foo);\n\nOne would expect to see 2 different values for the output above, however one gets the same array of length 2 with identical values in both instances.\n\nLooking @ the code around line 1400, one can see the following:\n\nctor.prototype = parent.prototype;\n\nIn order to create a truly new instance wouldn't:\n\nctor.prototype = $.extend(true,{},parent.prototype);\n\nbe suited better?\n\nThat would solve the problem I described above. As is, array foo feels like a static, not instance variables.\n\nI know that the prescribed version is to use \"initialize\" for instance variables, but why would the above suggested \"fix\" be wrong?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1711",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1711/comments",
    "title": "No Way to Modify Collection Arguments",
    "created_at": "2012-10-04T23:58:11Z",
    "updated_at": "2012-10-09T19:06:44Z",
    "body": "When a new Collection is instantiated, the following happens:\n\n```\nthis.initialize.apply(this, arguments);\nif (models) this.reset(models, {silent: true, parse: options.parse});\n```\n\nUnfortunately, this doesn't give initialize any way to tweak models (for instance, if someone wanted to make a collection that took an object instead of an array).  It would be great if:\n\nA) Backbone passed models directly to initialize so that it can be edited from within initialize (rather than via arguments, as it currently is; JS won't let you modify \"arguments\")\n\nB) Set `this.preModels = models` before initialize, then pass `this.preModels` to `this.reset`; this way initialize can modify `this.preModels` in between\n\nC) If initialize returns anything, pass that to reset instead of models\n\nD) Add an \"initialParse\" option (or something to that effect) to reset, and pass `{initialParse: true, ...` to reset; in this way the user can override reset, but only do something to its arguments if `(options.initialParse)`\n\nE) Provide any other way of modifying the collection inputs before they get reset in to models\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1710",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1710/comments",
    "title": "Change event not triggering properly when model attribute is changed within an event handler",
    "created_at": "2012-10-04T18:50:40Z",
    "updated_at": "2012-10-05T01:35:58Z",
    "body": "Hello,\nHere is a very basic test case and I'm not sure whether it is a bug or working as expected - though the behavior feels wrong.  \nBasically, if I change a model attribute from within a change handler (in this case, I unset the 'color' attribute while processing a change:name event), the 'change' event that gets fired from the model does not appear to work correctly:  1) it is only fired once and 2) the 'changes' hash returned by the change event only lists the 'name'.  \nIs this how it is supposed to work?  I would have expected 'change' to fire twice, once for each of the attribute changes since they occurred independently of one another, or I would have expected a single change event to fire that listed both name & color in the changes hash.\n\n``` javascript\n    it(\"should trigger change twice when color is unset inside name change handler\", function() {\n      var model = new Backbone.Model({ \"name\": \"shirt\", \"color\": \"blue\", \"size\": \"small\" });\n      var changeNameSpy = sinon.spy(function() {\n        model.unset(\"color\");\n      });\n      var changeColorSpy = sinon.spy();\n      var changeSpy = sinon.spy();\n      model.on(\"change:name\", changeNameSpy);\n      model.on(\"change:color\", changeColorSpy);\n      model.on(\"change\", changeSpy);\n      model.set(\"name\", \"pants\");\n      expect(changeNameSpy).toHaveBeenCalledOnce();\n      expect(changeColorSpy).toHaveBeenCalledOnce();\n      expect(changeSpy).toHaveBeenCalledTwice();\n    });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1707",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1707/comments",
    "title": "Provide archived documentation",
    "created_at": "2012-10-04T14:44:13Z",
    "updated_at": "2012-10-04T15:12:22Z",
    "body": "For people who started building their application upon a now-outdated release, it's not always feasible to stay on the edge (or even latest stable) version of Backbone. For these people, the documentation is incorrect, which can be quite dangerous.\n\nCould there be links provided to snapshots of the documentation which apply to older versions?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1706",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1706/comments",
    "title": "Model#get() as alias of toJSON()",
    "created_at": "2012-10-04T10:51:01Z",
    "updated_at": "2012-10-04T22:05:16Z",
    "body": "I'm using coffeescript, and write code that looks like:\n\n``` coffeescript\n{foo, bar} = model.toJSON()\n```\n\n`toJSON` seems out of place here, as well as in the example for view rendering.\n\nedit: allowing multiple arguments to `get` would also work\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1705",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1705/comments",
    "title": "Set a collection's URL on instantiation",
    "created_at": "2012-10-04T07:26:29Z",
    "updated_at": "2013-10-11T03:54:33Z",
    "body": "Currently it's impossible to do this:\n\n``` javascript\nvar Collection = Backbone.Collection.extend({\n    ....\n});\n\nvar c = new Collection({\n    url: '/path/to/api'\n});\n```\n\nSo a constructor wrapper is required to achieve it:\n\n``` javascript\nvar Wrapper = function(options) {\n    var Collection = Backbone.Collection.extend({\n        ....\n        url: options.url,\n        ....\n    });\n\n    return new Collection();\n};\n\nvar c = new Wrapper({\n    url: '/path/to/api'\n});\n```\n\nWhile this workaround is not overly complex, why not enable the ability to set a few attributes (eg. URL) of the collection on instantiation? This would be very handy in situations where the API URLs have to be dynamically generated, but you don't want to redefine the collection over and over.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1703",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1703/comments",
    "title": "Can't Pass \"data-\" attributes within View's Attributes method",
    "created_at": "2012-10-03T21:07:26Z",
    "updated_at": "2012-10-03T22:01:12Z",
    "body": "I am a fan of setting attributes within a view as such...\n\n<pre>Backbone.View.extend({\n    attributes: {\n        data-attr: 'mydata'\n    }\n});\n</pre>\n\n\n... however, this throws an error due to the hyphen in the key \"data-attr\".\n\n<pre>Uncaught SyntaxError: Unexpected token -</pre>\n\n\nI realize this is an illegal token in a JavaScript key-value object, however I was hoping Backbone offered some work around for this, given the fact that passing data attributes is one of the most likely scenarios.\n\nI have been working around it by setting the attribute within the render function using jQuery:\n\n<pre>render: function () {\n    this.$el.attr( 'data-attr', 'mydata\"');\n}\n</pre>\n\n\nThis works, but I thought to ask if there is another option.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1702",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1702/comments",
    "title": "Alternative to events: { \"trigger select\" : \"functor\" }?",
    "created_at": "2012-10-03T18:31:37Z",
    "updated_at": "2012-10-03T19:13:24Z",
    "body": "Hi,\n\nI was wondering if there was an alternative to the standard Backbone.View.extend({ events: { \"trigger selector\" : \"functor\", ...} ... }).\n\nIs there a special alternative function that gets called that lets you bind events for that specific view without having to mix the trigger and CSS selector into a string, and without having to pass the callback as a string rather than as a reference?\n\nThe latter's less important than the former: if there's a way to at least do even binding in a way that keeps the trigger and the view selector separate, that would be awesome. Is there such an alternative?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1701",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1701/comments",
    "title": "Improve documentation of \"off\"",
    "created_at": "2012-10-03T14:38:14Z",
    "updated_at": "2012-10-03T18:48:13Z",
    "body": ".off() disables propagation of model change events to collections. Most users can't be expected to know that, yet the documentation makes no mention of this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1700",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1700/comments",
    "title": "Unbind from topic when processing this topic",
    "created_at": "2012-10-03T14:00:28Z",
    "updated_at": "2012-10-03T18:50:14Z",
    "body": "I have 2 callbacks (named \"1\" and \"2\") binded to event \"A\".\nWhen event \"A\" happens, callback \"1\" is processed.\nWhile processing callback \"1\", this callback \"1\" unbind from event \"A\" and also event \"A\" happens again.\nInmediatly callback \"2\" is processed because of the second event \"A\" and during this process callback \"2\" unbind from event \"A\".\nThen, first event \"A\" continues and callback \"2\", which is now unbinded from event \"A\" \u00a1is called again!.\n\u00bfIs it the expected behaviour?. \nI suppose it is but ,\u00bfis goint to be an option to setup an \"asynchronous\" behaviour?.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1699",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1699/comments",
    "title": "Backbone.sync - overriding partially?",
    "created_at": "2012-10-03T12:26:04Z",
    "updated_at": "2012-10-03T14:02:05Z",
    "body": "Is there any way to override Backbone.sync partially, say, only `create`, and leave the rest untouched, using native Backbone.sync? If no then perhaps there can be a way to do so, because this is what I need right now due to restrictions imposed by existing APIs.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1698",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1698/comments",
    "title": "\"off\" stops propagation of events from model to collection",
    "created_at": "2012-10-03T07:44:35Z",
    "updated_at": "2012-10-03T13:55:41Z",
    "body": "After I call .off() (without any parameters), events on the model stop getting propagated to the collection the model belongs to. This can be worked around by removing and re-adding the model to the collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1697",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1697/comments",
    "title": "Have the documentation hide the left bar rather than over text over text",
    "created_at": "2012-10-02T14:14:32Z",
    "updated_at": "2012-10-03T19:00:43Z",
    "body": "On Firefox, if the window starts really narrow, the text of the navigation and the text of the page overlap. This does not seem to happen on Chrome, but Firefox is what matters for me. Besides this bug, it would be a nice \"responsive\" design to have the nav area hide if the window is narrow (or starts narrow).\n\nWhen I link context sensitive help for Backbone objects, there is very little room inside Firebug, and at the moment, it is useless. I'd rather link to the real documentation than host a copy of my own.\n\nThanks!\n\nSee sample: http://yfrog.com/h6rzzwp\n\nPS: 5720e54 doesn't work. Likely because my description of this issue starts with \"On Firefox...\" and a lot of stuff in there, particularly 5720e54 are webkit only.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1695",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1695/comments",
    "title": "Backbone.history.start's atRoot var is incorrectly set to false if there is a location.search present",
    "created_at": "2012-10-02T06:28:41Z",
    "updated_at": "2012-10-02T14:57:29Z",
    "body": "In my experience window.history.start's pushState option should be called something like autoUpdateDeepLink as pushState is a loaded word specific to compatible browsers and the Backbone behavior seems to not only enforce html5 push state if this option is passed but also convert push state urls into hash urls for browsers that don't support push state. I've seen examples online where people hook up this flag to Modernizr.history so it gets set to false for IE which makes sense with the current variable name but not the behavior I am seeing.\n\nIn that context of setting pushState to true for IE to get the hash url to auto update I am finding everything works great except if you pass querystring variables along with you hash URL Ex:\n\nhttp://test.url.net/#portfolio/PyUP6R9 works fine\nhttp://local.pathbrite.net/?asdf=sdfsdf#portfolio/PyUP6R9 redirects to http://local.pathbrite.net/?asdf=sdfsdf#. \n\nI tracked this strange behavior to:\nvar atRoot  = (loc.pathname == this.options.root) && !loc.search;\nin the Backbone.history.start method. Its set to always expect the web app is not at site root if there is a querystring present which does not make any sense to me. In my context a querystring for analytics is present which should not effect Backbone's atRoot logic. My solution was to comment out the && !loc.search. \n\nTLDR: It seems Backbone.history.start only considers you at web app root if you don't have a querystring present. This is causing my IE urls with querystring+hash to lose the hash value.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1694",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1694/comments",
    "title": "silent set in a change:attr handler is commited by a parallel one",
    "created_at": "2012-10-01T22:49:49Z",
    "updated_at": "2012-10-04T15:50:50Z",
    "body": "``` javascript\nvar m = new Backbone.Model({x:\"\", y:\"\", x1:\"\", y1:\"\"});\n\nm.on(\"change:x1 change:y1\", function(md, v){console.log(v)});\n\nm.on(\"change:x\", function(md, v){\n  m.set(\"x1\", \"x1-loud\"); \n  m.set(\"x1\", \"x1-silent\", {silent:true});\n});\nm.on(\"change:y\", function(md, v){\n  m.set(\"y1\", \"y1-loud\"); \n  m.set(\"y1\", \"y1-silent\", {silent:true});\n});\n\nm.set({x:\"foo\", y:\"bar\"});\n// x1-loud\n// x1-silent <-- Is this expected?\n// y1-loud\n\nm.change()\n// y1-silent <-- Isn t here where both silents should be placed?\n```\n\n[Here](https://github.com/stegrams/backbone/blob/75f6817e8c5bd08e0af89b2d527bc758ff18c30b/test/model.js#L862) is a more extensive test case of what I think as a more proper behavior. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1690",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1690/comments",
    "title": "Concerned about Model security?",
    "created_at": "2012-10-01T13:52:44Z",
    "updated_at": "2012-10-01T14:34:53Z",
    "body": "Hi,\n\nI have a simple Backbone Model/View combo that is validating a login field and then calling `.save` so the data is sent to the server to process. \n\nThe problem I've just realised is that when inspecting the Model after calling `.save` I can see the password is being stored in the Model as plain text so all a developer has to do is dynamically change the JavaScript via the standard built-in browser developer tools to see the user's password.\n\nHow can I implement a username/password login securely with Backbone?\n\nMy current Model/View code is as follows...\n## Model:\n\n``` js\ndefine(['Backbone'], function(){\n\n    return Backbone.Model.extend({\n        url: '/login/',\n\n        validate: function (attributes) {\n            var errors = [];\n\n            if (attributes.account.indexOf('@') === -1) {\n                errors.push({\n                    field: 'account',\n                    value: attributes.account\n                });\n            }\n\n            if (attributes.password === '') {\n                errors.push({\n                    field: 'password',\n                    value: attributes.password\n                });\n            }\n\n            if (errors.length) {\n                return errors\n            }\n        }\n    });\n\n});\n```\n## View:\n\n``` js\ndefine(['../Models/CustomerLogin', 'Backbone'], function (CustomerLogin) {\n\n    return Backbone.View.extend({\n        initialize: function(){\n            // Store the form element and hide it\n            this.form = this.$el.find('form');\n\n            // Store the Model object for easy reference\n            this.model = new CustomerLogin();\n\n            // Store reference to error message box\n            this.error_message = $('#js-loginerror')\n        },\n\n        // The containing element\n        el: $('#js-customerlogin'),\n\n        // Selectors are scoped to the parent element\n        events: {\n            'click #js-loginbtn': 'toggle_display',\n            'submit form': 'store_user_details'\n        },\n\n        toggle_display: function(){\n            this.form.slideToggle();\n        },\n\n        store_user_details: function (e) {\n            // I stored this hash in a variable as it looked cleaner passing it to `save` method below\n            var fields = {\n                account: this.form[0].elements[0].value,\n                password: this.form[0].elements[1].value\n            };\n\n            // Scope of `this` is lost within the error callback below\n            var self = this;\n\n            // When we call `save` it automatically validates all data\n            // So if there are any errors with what we're trying to save then it'll fail\n            this.model.save(fields, {\n                error: function(){\n                    self.error_message.addClass('is-error');\n                },\n                success: function(data){\n                    self.error_message.removeClass('is-error');\n                    alert('LOG USER IN - WARNING!!! Backbone.Model has plain text storage of password!!!');\n                    console.log(self.model.attributes, 'ALL DEVELOPER HAS TO DO IS CHANGE JS DYNAMICALLY AND HE HAS PASSWORD!');\n                }\n            });\n\n            e.preventDefault();\n        }\n    });\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1689",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1689/comments",
    "title": "Issues with Django  facebook connect",
    "created_at": "2012-10-01T07:29:50Z",
    "updated_at": "2012-10-02T07:05:48Z",
    "body": " I want to use facebook connect with my app. My requirements are, user can login through his facebook account and can see there friends(I want to import facebook friend list).\n\nI have tried it a lot and I am able to login through facebook.But I am still unable to import user friend list.\n\nAnd also I am confused to where to place these facebook connect files.\n\nLet say I have project 'P' and app 'A' now as there are many django facebook connect setup are available at 'github' and which are having so many files setting, urls, managers, models , Templates files etc........... Now I am confused as my app already have these files , so where  I have to place these files. OR i have to place entire folder in my app \"A\" OR it can be done without placing these files.\n\nSo please suggest me any good facebook connect which fulfils my requirements and also how can I use this in my app.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1687",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1687/comments",
    "title": "Any way to bind to a collection that is a nested property?",
    "created_at": "2012-09-29T16:19:59Z",
    "updated_at": "2012-09-29T18:09:51Z",
    "body": "An app I'm working on returns the following payload for a collection (in this example I'll use todos):\n\n```\nhttp://someapp.com/todos [HTTP Get]\n\nreturns the following payload\n\n{\n    Items: [ { content: \"item 1\", done: false }, { content: \"item 2\", done: true } ],\n    New: \"/todos/new\"\n}\n```\n\nHow can I use fetch() and have it bind to the Items property?\n\n```\nwindow.TodoList = Backbone.Collection.extend({\n    // Reference to this collection's model.\n    model: Todo,\n\n    // Save all of the todo items under the `\"todos\"` namespace.\n    //localStorage: new Store(\"todos\"),\n    url: 'todos',\n...\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1684",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1684/comments",
    "title": "View.initialize() Not Called in Mobile Safari for iOS 4",
    "created_at": "2012-09-28T21:22:29Z",
    "updated_at": "2012-10-01T17:23:48Z",
    "body": "In mobile Safari for iOS4, the `initialize()` method is never called when instantiating subclasses of `Backbone.View`.  This has been happening since at least dc960f793375fff2a483748f4979aa9aa70336bd, but doesn't happen in the latest release.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1680",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1680/comments",
    "title": "Multiple Backbone file",
    "created_at": "2012-09-25T20:09:04Z",
    "updated_at": "2012-09-28T16:59:06Z",
    "body": "Maybe this question maybe silly but on million pages views site there is any possibility to create backbone hub to backbone childs ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1679",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1679/comments",
    "title": "$.bind and $.delegate are deprecated in Zepto",
    "created_at": "2012-09-25T17:18:07Z",
    "updated_at": "2012-09-25T22:33:40Z",
    "body": "I've noticed that if I attach events to views via the events hash, Safari 6 on OS X triggers a warning:\n\n> event.layerX and event.layerY are broken and deprecated in WebKit. They will be removed from the engine in the near future.\n\nDebugging the issue I noticed that internally `Backbone.View` uses `$el.bind` and `$el.delegate` dependent on the selector.\n\nChanging `delegateEvents` lines 1235 through 1239 to the following solves the issue and also removes the deprecated function calls.\n\n```\n    if (selector === '') {\n      this.$el.on(eventName, method);\n    } else {\n      this.$el.on(eventName, selector, method);\n    }\n```\n\nAlso on line 1247 in `undelegateEvents` I changed the `unbind` call to this:\n\n```\n    this.$el.off('.delegateEvents' + this.cid);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1678",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1678/comments",
    "title": "Router interface relies on JavaScript implementation defined behaviour",
    "created_at": "2012-09-25T16:22:51Z",
    "updated_at": "2012-09-26T15:58:25Z",
    "body": "Router takes JavaScript object containing mappings of route patterns to handler function names and uses that mapping to select handler for given path. Unfortunetely it promises to always use first matching entry in that mapping, order of which is undefined by JavaScript specification.\n\nCode depending on route precedence is quite common:\n- [Backbone tutorial](http://backbonetutorials.com/what-is-a-router/) - default route\n- Many stackoverflow answers (just search \"backbone default route\")\n\nPromise (from comments on Router._bindRoutes):\n\n> Bind all defined routes to Backbone.history. We have to reverse the order of the routes here to support behavior where the most general routes can be defined at the bottom of the route map.\n\nRelevant v8 bug report (keeping insertion order in object):\nhttp://code.google.com/p/v8/issues/detail?id=164\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1677",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1677/comments",
    "title": "XSS in Todos example",
    "created_at": "2012-09-25T16:16:11Z",
    "updated_at": "2012-09-25T16:25:14Z",
    "body": "In the Todos example by J\u00e9r\u00f4me Gravel-Niquet, the data is not escaped. It is therefore possible to execute Javascript code by entering the following text (can be reproduced with the online version):\n\n```\n\"><script>alert('xss');</script>\n```\n\nIt would be nice if the example showed how to handle this correctly. I personally don't know yet the best way to deal with it and opened a Stackoverflow question:\n\nhttp://stackoverflow.com/questions/12586899/backbone-js-and-xss-html-escaping\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1676",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1676/comments",
    "title": "How to cache event hash selectors",
    "created_at": "2012-09-25T15:28:26Z",
    "updated_at": "2012-09-25T16:16:28Z",
    "body": "Hi,\n\nIs there any way to cache a selector within the events hash?\n\nSo for example I currently have the following events hash...\n\n``` js\nevents: {\n    'focus #js-pickdate': 'validate_amount',\n    'click #js-calendarclose': 'close_popup',\n    'click #js-applynow': 'validate_amount'\n}\n```\n\n...but the selector #js-pickdate I have already further up in my code `var elem = $('#js-pickdate');` so can I some how pass in elem to the events hash instead?\n\nMy worry is that jQuery is now doing two element/selector lookups when one should only be required if we're able to cache that lookup.\n\nThanks for any help you can give me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1672",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1672/comments",
    "title": "Inconsistent handling of query strings in push state",
    "created_at": "2012-09-24T16:38:22Z",
    "updated_at": "2012-09-28T17:02:08Z",
    "body": "I've run into a problem where backbone isn't consistent in handling query string in routes. Seems depending on whether you are a push state browser, or a hash enabled browser, and depending on whether you call navigate() vs checkUrl(), you'll get different routes when presented with urls with query strings. The solution is quite simple, getFragment() needs to tack on the query string (this.location.search) when picking up the current url. I'm attaching a pull request with tests\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1671",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1671/comments",
    "title": "The docs are ambiguous about the \"add\" event.",
    "created_at": "2012-09-24T14:55:02Z",
    "updated_at": "2012-09-24T17:48:50Z",
    "body": "According to the docs (Catalog of Events), the add event should be triggered in both the collection and in the model when it is added to a collection:\n\n> \"add\" (model, collection) \u2014 when a model is added to a collection.\n\nBut the Collection.create() docs says only the collections add evetn will be fired:\n\n> Creating a model will cause an immediate \"add\" event to be triggered on the collection (...)\n\nIt seems the latter is true. I set up a demo to test it: http://jsfiddle.net/eRQzc/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1670",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1670/comments",
    "title": "Calling this.change() does nothing",
    "created_at": "2012-09-24T09:56:32Z",
    "updated_at": "2012-09-24T15:34:05Z",
    "body": "Hello,\n\nI have set-up a reduced test case to demonstrate the issue I'm having: http://jsfiddle.net/pa4yE/\n\nI have an `<input>` that I'm validating but I need to manually trigger an event (using `this.change()`) when the validation succeeds and it's that manual trigger which isn't working.\n\nWhen you look at the reduced test case, follow the instructions on how to reproduce the issue. \n\nIf you do you'll notice the 'amount_changed' method is called when you first enter a valid amount such as `50`, but it doesn't get called when `50` is entered again after an invalid amount is entered (which makes sense because technically nothing has changed - the error meant the value wasn't set, so the Model still has `50` as the value), but when you enter another valid amount such as `100` then the 'amount_changed' method is correctly again called.\n\nSo I need the 'amount_changed' method to be triggered when the user does:\n1. valid amount\n2. invalid amount\n3. same valid amount as step 1\n\n...but calling `this.change()` doesn't work, so how else can I do this? Also I couldn't find much info on `this.change()` (I was just told by something to try using it). Does the `change` method accept a string like the Model's initialize method does (e.g. `this.on('change:amount')`) - so I could only trigger the change event for a specific attribute?\n\nThanks for any help you can give me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1666",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1666/comments",
    "title": "Model only triggers change event for unique values?",
    "created_at": "2012-09-21T14:34:17Z",
    "updated_at": "2012-09-21T15:27:42Z",
    "body": "Hi,\n\nNote: below is my Model and View code. \n\nIf I set a value for an 'amount' attribute to `123` then the change event on the model fires and the relevant change method is called. \n\nIf I then re-set the attribute value to `234` then again the `change` event on the model fires and the relevant method is called.\n\nBut if I then change the 'amount' attribute _back_ to `123` then nothing happens. The change event is not triggered. \n\nThis happens for any value I've already set the attribute to?\n\nIs this _expected_ behaviour? If not, any ideas?\n\nThanks!\n## Model\n\n``` js\ndefine(['Backbone'], function(){\n\n    var min = 50;\n    var max = 400;\n\n    return Backbone.Model.extend({\n        defaults: {\n            amount: 0,\n            code: null,\n            date: (new Date())\n        },\n\n        initialize: function(){\n            this.on('error', this.handle_errors);\n            this.on('change:amount', this.amount_change);\n        },\n\n        validate: function (attributes) {\n            var errors = [];\n            var amount = parseInt(attributes.amount, 10);\n\n            /*\nWe first parse the amount (as it comes through as a String)\nOnce it's converted to a number we check that the value is NaN.\nWe also check if the amount entered fits within the allowed range.\n*/\n            if (_.isNaN(amount) || amount < min || amount > max) {\n                errors.push({\n                    field: 'amount',\n                    error: 'The amount was invalid'\n                });\n            }\n\n            if (errors.length) {\n                return errors\n            }\n        },\n\n        handle_errors: function (model, error) {\n            // Context of 'this' gets lost within _.each()\n            var self = this;\n\n            _.each(error, function (item, iterator) {\n                self.trigger('item:invalid', item);\n            });\n        },\n\n        amount_change: function(){\n            this.trigger('amount:changed');\n        }\n    });\n\n});\n```\n## View\n\n``` js\ndefine(['../Utils/Templating/hogan', '../Utils/Datepicker/kalendae', '../Models/LoanApplication', '../Utils/DOM/getEl', 'Backbone'], function (hogan, Kalendae, LoanApplication, getElement) {\n\n    // ES3, ES5 non strict\n    var global = (function(){return this})();\n\n    return Backbone.View.extend({\n        initialize: function(){\n            // Store other elements that will be interacted with.\n            // Any element that will potentially utilise jQuery we pre-wrap in a single jQuery instance.\n            this.promocode = getElement('js-promocode');\n            this.amount = getElement('js-amount');\n            this.error_amount = $('#js-amounterror');\n            this.error_amount_popup = $('#js-amounterror-popup');\n            this.popup = $('#js-loanpopup');\n            this.popup_amount = getElement('js-popupamount');\n\n            // We use this to tell whether the calendar widget has already been rendered,\n            // as there is no point re-rendering it every time the popup is closed then opened again.\n            this.is_calendar_rendered = false;\n\n            // Store the Model object for easy reference\n            this.model = new LoanApplication();\n\n            // The Model triggers custom events when certain actions happen which the View should ideally handle\n            this.model.on('item:invalid', this.process_errors, this);\n            this.model.on('amount:changed', this.remove_error, this);\n        },\n\n        // The containing element\n        el: getElement('js-loanapplication'),\n\n        // Selectors are scoped to the parent element\n        events: {\n            'focus #js-pickdate': 'validate_amount',\n            'click #js-calendarclose': 'close_popup',\n            'click #js-applynow': 'validate_amount'\n        },\n\n        validate_amount: function(){\n            // We validate a different field depending on whether the popup is open (the popup has its own copy of the application fields)\n            // Note: Model's \"set\" method calls Backbone validation by default (see Model for validation rules)\n\n            // If the popup is NOT visible\n            if (this.popup.hasClass('hide')) {\n                this.model.set({\n                    amount: this.amount.value\n                });\n            } else {\n                this.model.set({\n                    amount: this.popup_amount.value\n                });\n            }\n        },\n\n        process_errors: function (item) {\n            // Check what field was invalid and display corresponding error message\n            switch (item.field) {\n                case 'amount':\n                    // We display the error message in a different place depending on whether the popup is open\n\n                    // If the popup is NOT visible\n                    if (this.popup.hasClass('hide')) {\n                        this.error_amount.removeClass('invisible');\n                    } else {\n                        this.error_amount_popup.removeClass('invisible');\n                    }\n\n                    break;\n            }\n        },\n\n        remove_error: function(){\n            // We remove the error message from different places depending on whether the popup is open\n\n            // If the popup is NOT visible\n            if (this.popup.hasClass('hide')) {\n                this.error_amount.addClass('invisible');\n                this.display_calendar();\n            } else {\n                this.error_amount_popup.addClass('invisible');\n\n                alert('NOW PROCESS THE APPLICATION!');\n            }\n        },\n\n        display_calendar: function(){\n            // We only load the calendar on screens large enough to display it\n            // And we make sure to only render it once by check \"is_calendar_rendered\" is false\n            if (document.documentElement.clientWidth >= 585 && !this.is_calendar_rendered) {\n                this.render_calendar();\n            }\n\n            this.popup_amount.value = this.amount.value; // pass through the value into this new popup view\n            this.popup.removeClass('hide');\n        },\n\n        render_calendar: function(){\n            this.is_calendar_rendered = true;\n\n            // the following variables are used for calculating the difference between \n            // today's date and the selected date to pay back the loan\n            var calendar_container = getElement('js-calendar');\n            var curent_date = new Date();\n            var current_day = curent_date.getDate();\n            var current_month = curent_date.getMonth();\n            var current_year = curent_date.getFullYear();\n            var today, calendar;\n\n            // we correct current_month to include a zero prefix if the number is less than 10\n            current_month = (current_month < 10) ? ('0' + current_month) : current_month;\n\n            // construct a date for today which is used for calculating diff\n            today = new Date(current_year, current_month, current_day);\n\n            calendar = new Kalendae({\n                // element to attach the calendar to\n                attachTo: calendar_container,\n\n                // blackout days after 45 days from current date\n                blackout: function (date) {\n                    return Kalendae.moment().yearDay() + 45 < date.yearDay(); // yearDay() is an extension Kalendae adds to moment.js to calculate the total number of days since epoch.\n                },\n\n                // how many characters from the week day name to display (e.g. we've gone with 3 = Mon, Tue, Wed, Thu, Fri, Sat, Sun)\n                columnHeaderLength: 3,\n\n                // restricts date selectability to past or future ('future' blacks out all days previous to current date)\n                direction: 'future',\n\n                // only allows selection of one day\n                mode: 'single',\n\n                // determines the number of months to display\n                months: 2,\n\n                // determines when the week should start (Sunday = 0 [default] or Monday = 1 etc)\n                weekStart: 1,\n\n                // causes the <input> to update to the selected date\n                subscribe: {\n                    'change': function(){\n                        var selected_date = this.getSelected();\n                        var temp_integer_month;\n                        var one_day;\n                        var payback_date;\n\n                        days_to_pay = selected_date.split('-');\n\n                        // the date is returned as non-zero index format, so put it back to be zero-indexed\n                        temp_integer_month = parseInt(days_to_pay[1], 10);\n                        days_to_pay[1] = '0' + --temp_integer_month;\n\n                        one_day = 24*60*60*1000; // hours * minutes * seconds * milliseconds\n                        payback_date = new Date(days_to_pay[0], days_to_pay[1], days_to_pay[2]);\n                        days_to_pay = Math.abs((today.getTime() - payback_date.getTime()) / (one_day));\n\n                        // update the <input> #js-choosepaydate (currently sitting behind the popup) to display the date selected by the user\n                        //paydate.value = selected_date;\n\n                        // call function which will pull in the relevant template and populate with relevant costs\n                        //calculate();\n                        console.log(selected_date, days_to_pay);\n                    }\n                }\n            });\n        },\n\n        close_popup: function(){\n            this.popup.addClass('hide');\n            this.amount.value = ''; // we reset the value so the Model's \"change\" event can be fired (which is what we rely upon to trigger the popup)\n        }\n\n    });\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1665",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1665/comments",
    "title": "Model default attribute changed when set",
    "created_at": "2012-09-20T07:40:55Z",
    "updated_at": "2012-09-20T18:15:03Z",
    "body": "Is this expected behaviour? \n\nI would assume that if I create a new object from the Model class I'd get the exact same default attributes always.(?) Or am I doing something very wrong here?\n\n(This example was run using nodejs)\n\n``` javascript\n\nvar Backbone = require(\"backbone\");\n\nvar MyModel = Backbone.Model.extend({\n    defaults:{\n        attr1:\"original\",\n        data:{\n            var1:\"original\"\n        }\n    }\n});\n\nvar m1 = new MyModel();\nm1.set(\"attr2\",\"changed\");\nm1.get(\"data\").var1 = \"changed\";\n\nvar m2 = new MyModel();\nconsole.log(\"m2.get('attr1') : \",m2.get(\"attr1\")); // original // OK\nconsole.log(\"m2.get('data').var1 : \",m2.get(\"data\").var1); // changed // NOT OK\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1664",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1664/comments",
    "title": "change:attribute on unchanged attribute [philosophic]",
    "created_at": "2012-09-20T03:29:36Z",
    "updated_at": "2012-09-20T13:14:37Z",
    "body": "``` javascript\nvar m = new Backbone.Model({mod: 7});\n\nm.on(\"change:mod\", function(model, mod){\n      console.log(\"mod changed from \" + m.previous(\"mod\") + \" to \" + mod);\n });\n\nm.set(\"mod\", 8, {silent:true});\nm.set(\"mod\", 7);\n// mod changed from 7 to 7\n```\n\nIs this an expected behaviour?\nWouldn 't be better if no event was triggered for unchanged resulting attributes?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1662",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1662/comments",
    "title": "Update Model.validate documentation",
    "created_at": "2012-09-19T18:00:21Z",
    "updated_at": "2012-09-19T18:03:37Z",
    "body": "The current documentation is confusing, especially for people just learning Backbone and doing so in CoffeeScript.  The docs say:\n\n```\nIf the attributes are valid, don't return anything from validate; if they are invalid,\nreturn an error of your choosing. It can be as simple as a string error\nmessage to be displayed, or a complete error object that describes the error\nprogrammatically. If validate returns an error, set and save will not continue,\nand the model attributes will not be modified.\n```\n\nSince all coffeescript methods return a value this is confusing.  An update that explicitly indicates what types of values indicate success would have been helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1661",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1661/comments",
    "title": "Problems understanding/using Model.save()",
    "created_at": "2012-09-19T09:43:38Z",
    "updated_at": "2012-09-20T15:48:12Z",
    "body": "Hi,\n\nI've just started using Backbone and so I thought I would take it for a test spin on a basic login form.\n\nThe login form consists of a username and a password. \n\nI'm using Backbone to hijax the form's submit event, validate the fields and then send the data over to a PHP script (which currently does nothing but check whether the HTTP request was a `GET`, `HEAD`, `POST`, `PUT` and then just `echo`'s out a message relevant to the request type and then I was hoping to get that message back to my JavaScript (much like I would do with a standard AJAX request) and then act upon the response.\n\nSo my PHP code looks like the following (currently)...\n\n``` php\n<?php\n    switch ($_SERVER['REQUEST_METHOD']) {\n        case 'GET':\n            echo(\"The GET request\");\n            break;\n\n        case 'HEAD':\n            echo(\"The HEAD request\");\n            break;\n\n        case 'POST':\n            echo(\"The POST request\");\n            break;\n\n        case 'PUT':\n            echo(\"The PUT request\");\n            break;\n\n        default:\n            echo(\"None of the known requests\");\n            break;\n    }\n?>\n```\n\n...and my JavaScript is using RequireJS and so is split into separate modules like so...\n\nView File\n\n``` js\ndefine(['../Models/CustomerLogin', 'Backbone'], function (CustomerLogin) {\n\n    return Backbone.View.extend({\n        initialize: function(){\n            // Store the form element and hide it\n            this.form = this.$el.find('form');\n            this.form.hide();\n\n            // Store the Model object for easy reference\n            this.model = new CustomerLogin();\n        },\n\n        // The containing element\n        el: $('.customer-login'),\n\n        // Selectors are scoped to the parent element\n        events: {\n            'click .login-btn': 'toggle_display',\n            'submit form': 'store_user_details'\n        },\n\n        toggle_display: function(){\n            this.form.slideToggle();\n        },\n\n        store_user_details: function (e) {\n            // Calling 'set' triggers the Model's built-in 'validate' method (see: Models/CustomerLogin)\n            var has_passed = this.model.set({\n                account: this.form[0].elements[0].value,\n                password: this.form[0].elements[1].value\n            });\n\n            // If there are any errors in validation then the Model will return false\n            // If there are no errors then the Model itself is returned\n            // We can use this to tell if we should call the built-in 'save' method which sends data to the server\n            // NOTE: calling 'save' method actually validates as well!\n            if (!!has_passed) {\n                this.model.save({\n                    error: function(){\n                        console.log('error');\n                    },\n                    success: function(){\n                        console.log('success');\n                    }\n                });\n            }\n\n            e.preventDefault();\n        }\n    });\n\n});\n```\n\nModel File\n\n``` js\ndefine(['Backbone'], function(){\n\n    return Backbone.Model.extend({\n        url: '/login/',\n\n        initialize: function(){\n            this.on('error', this.handle_errors);\n        },  \n\n        validate: function (attributes) {\n            var errors = [];\n\n            if (attributes.account.indexOf('@') === -1) {\n                errors.push({\n                    field: 'account',\n                    value: attributes.account\n                });\n            }\n\n            if (attributes.password === '') {\n                errors.push({\n                    field: 'password',\n                    value: attributes.password\n                });\n            }\n\n            if (errors.length) {\n                return errors\n            }\n        },\n\n        handle_errors: function (model, error) {\n            _.each(error, function (list, iterator) {\n                console.log(list, iterator);\n            });\n        }\n    });\n\n});\n```\n\nNow what is happening for me is the validation is working fine, but when the validation passes and i call the `save` method my Firebug console is showing...\n\n```\nPOST http://192.168.0.40//login/ 200 OK 45ms jquery.js (line 4)\n\n4 readyState                                       CustomerLogin.js (line 34)\nfunction() setRequestHeader             CustomerLogin.js (line 34)\nfunction() getAllResponseHeaders    CustomerLogin.js (line 34)\nfunction() getResponseHeader          CustomerLogin.js (line 34)\nfunction() overrideMimeType             CustomerLogin.js (line 34)\nfunction() abort                                  CustomerLogin.js (line 34)\nfunction() done                                   CustomerLogin.js (line 34)\nfunction() fail                                      CustomerLogin.js (line 34)\nfunction() progress                             CustomerLogin.js (line 34)\nfunction() state                                   CustomerLogin.js (line 34)\nfunction() isResolved                         CustomerLogin.js (line 34)\nfunction() isRejected                          CustomerLogin.js (line 34)\nfunction() then                                    CustomerLogin.js (line 34)\nfunction() always                                CustomerLogin.js (line 34)\nfunction() pipe                                    CustomerLogin.js (line 34)\nfunction() promise                              CustomerLogin.js (line 34)\nfunction() success                              CustomerLogin.js (line 34)\nfunction() error                                    CustomerLogin.js (line 34)\nfunction() complete                             CustomerLogin.js (line 34)\nfunction() statusCode                         CustomerLogin.js (line 34)\nThe POST request responseText       CustomerLogin.js (line 34)\n200 status                                           CustomerLogin.js (line 34)\nOK statusText                                     CustomerLogin.js (line 34)\n```\n\n...looking at this it seems the POST is being successful (e.g. the `200 OK` response), but all the `line 34` functions being displayed I'm not sure why that's happening? Line 34 is the `console.log` from my Model's error handler `handle_errors`?\n\nIf you look at my View file you'll see...\n\n``` js\nthis.model.save({\n    error: function(){\n        console.log('error');\n    },\n    success: function(){\n        console.log('success');\n    }\n});\n```\n\n...this itself is confusing because reading through the documentation it isn't 100% clear on how `save` should work and whether arguments are optional + I've seen `save` used in multiple different ways...\n\n``` js\n// From Addy Osmani Backbone book\nthis.save({done: !this.get(\"done\")});\n\n// Also from Addy Osmani Backbone book\ntodo.save(function(err) {\n    if (!err) {\n        return console.log(\"created\");\n    }\n});\n\n// Backbone documentation\nbook.save();\n\n// Backbone documentation\nbook.save({author: \"Teddy\"});\n\n// Backbone documentation\nbook.save(\"author\", \"F.D.R.\", {error: function(){ ... }});\n```\n\n...in the last Backbone documentation example you have the same object with `error` and `success` properties (as seen in my own version), but you have passed through the attribute and associated value where as I've left that blank - would that be a problem or does `save` allow that?\n\nIn Addy Osmani's versions he calls `save` and passes in the data to be changed, and in his second example he has a different syntax for calling `save` with no attributes but handling errors?\n\nSo which is the right way?\n\nThis has me very confused.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1660",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1660/comments",
    "title": "REST, POST and Location Header",
    "created_at": "2012-09-18T13:14:11Z",
    "updated_at": "2014-01-28T13:39:00Z",
    "body": "When creating a new item via REST, Backbone.js expects a body containing the new model data.\nMost API utilize a different approach, by sending an empty body accompanied by a Location Header containing the Path to the newly created resource. Backbone.js should take into account this possibility, too.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1659",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1659/comments",
    "title": "Model with children collections of itself",
    "created_at": "2012-09-18T03:23:05Z",
    "updated_at": "2012-09-21T19:04:56Z",
    "body": "Suppose this:\n\n```\nModel Foo:\n    -> id\n    -> name\n    -> description\n    -> children[]\n```\n\nWhere children is a collection of `Foo`s. Every `Foo` can have zero or more children, all having the same basic structure as their parent.\n\nWhat would be the proper way to do the view/template for this in Backbone.js? I am building on top of a Rails app if that makes any difference.\n\nI think this requires a recursive template but am not sure.\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1657",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1657/comments",
    "title": "Discussion: Bindings for Backbone",
    "created_at": "2012-09-17T14:24:43Z",
    "updated_at": "2014-01-11T09:37:21Z",
    "body": "I just extracted and opened up a project, Stickit, which is a highly configurable model binding plugin for Backbone. My goal for Stickit was/is to conform to Backbone's style and to fit naturally within Backbone's core functionality. You can read more at the following github:\n\nhttp://nytimes.github.com/backbone.stickit/\n\nI respect the Backbone community's (and jeremy's) worldview which prizes minimalism and uniformity: if a high threshold of users won't use a feature or if a feature feels out of place, then they won't consider it. Model binding is a popular feature, but it has been hard to envision where it would fit in with Backbone's hands-off approach to rendering. Where other libraries/frameworks and plugins have failed by moving model binding configuration into the DOM/presentation layer, Stickit was designed to keep configuration in the place that it should be - in the JavaScript and in the context of the view controller which encapsulates the element and model.\n\nI was thinking about drawing up a pull for Backbone which included a model binding implementation like Stickit, but I would like to get opinions and ideas from the community first.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1655",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1655/comments",
    "title": "Underscore functions on collections with string attribute parameters not working",
    "created_at": "2012-09-17T09:17:52Z",
    "updated_at": "2012-09-18T07:20:10Z",
    "body": "Hi,\n\nWhen I call something like:\n\n```\nacollection.groupBy('attributeName');\n```\n\nI get an object returned with all the models in it, rather than an object with the models grouped by attributeName. Looking at the code it's because Underscore's groupBy method will be calling\n\n```\nmodel['attributeName']\n```\n\nand not\n\n```\nmodel.get('attributeName')\n```\n\nI thought you could access model attributes using square brackets, but it doesn't appear to work, and I've seen that you can't overload operators in Javascript, so it's unlikely to work!\n\nI've seen a few examples suggesting that calling methods like groupBy or pluck with a string should work like in another issue:\n\n```\n_.groupBy(this.models,'author')\n```\n\nbut that doesn't work for me either.\n\nYou can of course get round this by passing in a function that retrieves the attribute e.g.\n\n```\nacollection.groupBy(function(m){return m.get('attributeName');});\n```\n\nso it's not a major issue, it would just be great to be able to use the shortcut string version.\n\nIs this a bug or am I doing something wrong?\n\nThanks,\n\nPaul.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1654",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1654/comments",
    "title": "Method chainability is not very obvious",
    "created_at": "2012-09-17T00:02:10Z",
    "updated_at": "2012-09-17T07:54:58Z",
    "body": "Trying to chain the following methods with no avail:\n\n``` javascript\nthis.collection.map().sort();\n```\n\nThe online documentation doesn't explicitly state what each method returns as well as whether it's chainable or not.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1653",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1653/comments",
    "title": "Fallback root.location and root.history to window",
    "created_at": "2012-09-16T18:00:51Z",
    "updated_at": "2012-09-18T20:44:09Z",
    "body": "If Backbone is called from a different `this` context than `window`, `root.location` and `root.history` will fail.\n\nThis is an issue that I encounter when trying to use Backbone with [Browserify](https://github.com/substack/node-browserify).\n\nI fixed this for my own purposes in c798d7226d071a0cb99a82321334fe250fe9e7e9 but that caused some failing tests due to `window is not defined`.\n\nWould it be ok with something like `var win = typeof window !== 'undefined' ? window : {};` next to the `root` definition?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1652",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1652/comments",
    "title": "Modifying a Collection while iterating over it : need a little explanation please",
    "created_at": "2012-09-16T06:16:39Z",
    "updated_at": "2012-09-16T11:52:35Z",
    "body": "Hello\n\nForemost, i've read :\n[https://github.com/documentcloud/backbone/issues/303](https://github.com/documentcloud/backbone/issues/303)\nand [https://github.com/documentcloud/backbone/issues/139](https://github.com/documentcloud/backbone/issues/139) and i'm totally agree with @jashkenas arguments [https://github.com/documentcloud/backbone/issues/139#issuecomment-619378](https://github.com/documentcloud/backbone/issues/139#issuecomment-619378)\n\nBut it's very strange (for me) (in fact i don't understand why) \ni've 5 models in my collection and iterate on it :\n\n```\n            this.collection.each(function(model) {\n                model.destroy({success:function(){ console.log(\"destroy\");}});\n            });\n```\n\nonly 3 models are deleted\nthen i iterate again, 1 model is deleted\nthen again : last model is deleted\n\nif i change destroy() by save(), all :\n\n```\n            this.collection.each(function(model) {\n                model.save({},{success:function(){ console.log(\"save\");}});\n            }); \n```\n\n5 models are saved (it runs with fetch too)\n\nI can understand that we can't delete **all** models, but i can't undersand why only **some** models\n\nplease, can you tell me where it is in the code and how it works\n\nthank you\n\nFiddle here : [http://jsfiddle.net/C8Y5X/](http://jsfiddle.net/C8Y5X/)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1651",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1651/comments",
    "title": "Hashtag URLs on non-pushstate browsers should only be generated if a route exists",
    "created_at": "2012-09-14T20:59:42Z",
    "updated_at": "2012-09-28T17:26:33Z",
    "body": "Using IE8/9 etc. works fine on pages which are served by Backbone. However, for pages which are server-rendered, the hashtag URL causes the page to break.\n\nIn other words, if a route does not exist for a page (say www.fun.com/monkeys), then just skip the hashtag and load the page normally.\n\nIn summary, the push state fallback to hashtags works fine for single page apps, but mixing backbone with server rendered pages and supporting IE is currently not possible.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1649",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1649/comments",
    "title": "HIstory._updateHash not cross-browser friendly",
    "created_at": "2012-09-14T10:34:15Z",
    "updated_at": "2012-09-17T15:26:36Z",
    "body": "The following code is called to modify window.location.hash.\n\n```\n// Update the hash location, either replacing the current entry, or adding\n// a new one to the browser history.\n_updateHash: function(location, fragment, replace) {\nif (replace) {\n    location.replace(location.href.replace(/(javascript:|#).*$/, '') + '#' + fragment);\n} else {\n    location.hash = fragment;\n}\n}\n```\n\nBackbone passes the stripped down fragment without the leading hash and relies on the browser to add it. In other words, it expects the browser behaviour of\n\n```\nwindow.location.hash = \"connections\";\n```\n\nto add the leading hash so that the hash property stores \"#connections\" and not \"connections\". \nThere are two problems with this as far as I can tell: this behaviour is not a standard as far as I can tell (I checked the W3.org Window object working draft which is the latest doc I could find on it) and not all browsers implement this behaviour. In particular the Blackberry OS 5.0(which admittedly is not great) browser does not add the leading hash and this breaks things - Router.Navigate does not work as expected for instance,\n\nShould the code perhaps be changed to something along the lines of \"location.hash = \"#\" + fragment\" which should work cross browser or alternatively should the fragment that is passed to the update function NOT be stripped of its '#' character?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1648",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1648/comments",
    "title": "is possible extend from extended view?",
    "created_at": "2012-09-14T09:00:33Z",
    "updated_at": "2012-09-14T13:09:43Z",
    "body": "I have common view and want extend from it. here is code\n\n``` javascript\nvar fb = Backbone.View.extend({\n        id: 'fb-root',\n       setup:function(id){\n           ...\n       }\n});\n\nvar wp = fb.extend({\n      initialize: function (ops){\n        this.setup(ops.id);\n      }\n})\n```\n\nhow can do something like this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1646",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1646/comments",
    "title": "Event triggered on model also fired on collection",
    "created_at": "2012-09-13T19:27:36Z",
    "updated_at": "2012-09-14T17:41:04Z",
    "body": "Hallo,\n\nreproduce with this:\n\n``` js\n\n      var c = new (Backbone.Collection.extend({url: '/foo'})),\n          m = c.create();\n\n      c.on('omg', function() {\n        console.log('arbeitstherapie?');\n      });\n\n      m.trigger('omg');\n```\n\nIs this a bug or a feature?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1643",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1643/comments",
    "title": "annotated source code has typo",
    "created_at": "2012-09-13T02:32:56Z",
    "updated_at": "2012-09-13T11:19:16Z",
    "body": "The second paragraph under Backbone.Events includes the word `trigger`-ing, but the leading apostrophe is missing such that it reads trigger`-ing. (If this is the wrong place to be posting this issue, please forward to wherever it should be - thanks!)\n\n![trigger](https://img.skitch.com/20120913-pb1n4212b427xa47cfcxmtm4fe.jpg)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1640",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1640/comments",
    "title": "_byId is not updated when saving with silent: true",
    "created_at": "2012-09-12T12:39:01Z",
    "updated_at": "2012-10-13T18:52:29Z",
    "body": "Using 0.9.2\n\ncollection.create( model, { silent: true })\n\nThe collection relies on \"change:\" + idAttribute event to update its _byId. This doesn't get triggered when silent: true.\nPresumably, the collection should use an internal event which gets triggered irrespective of the silent flag.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1639",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1639/comments",
    "title": "Should setElement replace the element in the dom with the new element?",
    "created_at": "2012-09-10T23:41:08Z",
    "updated_at": "2012-09-11T15:13:21Z",
    "body": "There seems to be a lot of confusion about DOM rendering related to templates as backbone is expecting an element on creation. For example this question on SO: \nhttp://stackoverflow.com/questions/11594961/backbone-not-this-el-wrapping\n\nAnd these two previous issues:\nhttps://github.com/documentcloud/backbone/issues/546\nhttps://github.com/documentcloud/backbone/issues/1180\n\nCurrently calling setElement doesn't change the DOM at all, only the $el associated with the backbone view.\n\n``` javascript\nsetElement: function(element, delegate) {\n      if (this.$el) this.undelegateEvents();\n      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n      this.el = this.$el[0];\n      if (delegate !== false) this.delegateEvents();\n      return this;\n}\n```\n\nInstead it could call jquery's replaceWith on the element which would also cause the DOM to update correctly:\n\n``` javascript\nsetElement: function(element, delegate) {\n      if (this.$el) {        \n        this.undelegateEvents();\n        this.$el.replaceWith(element);  // <----- added this line ----->\n      }\n      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\n      this.el = this.$el[0];\n      if (delegate !== false) this.delegateEvents();\n      return this;\n}\n```\n\nThis works very well if you want meta-data on your top level template items such as:\n\n``` html\n<li data-id=\"{id}\" class=\"well\" style=\"list-style:none\">\n    Campus: {id} {name}\n</li>\n```\n\nWith this change one can call: setElement(renderedTemplate); \nBefore this change it is necessary to call:\n\n``` javascript\nvar old = this.$el;\nthis.setElement(renderedTemplate);\nold.replaceWith(this.$el);\n```\n\nNot a big deal, but it does highly confuse some new users. I'd be happy to issue a pull request with the one-line addition to setElement, but wasn't sure if this automatic functionality would be desired by everyone. I can't think of a downside but perhaps there are ones other than performance.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1638",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1638/comments",
    "title": "Resorting collection on add event causes duplicate add events to be fired",
    "created_at": "2012-09-10T21:11:12Z",
    "updated_at": "2012-09-28T17:27:06Z",
    "body": "I'm doing some changes in the collection's `add` event that change the sort order and use `this.sort({silent: true})` to resort everything. Unfortunately that causes duplicate add events to be fired, as can be understood from the loop in Backbone.Collection's add's source:\n\n``` javascript\nfor (i = 0, length = this.models.length; i < length; i++) {\n  if (!cids[(model = this.models[i]).cid]) continue;\n  options.index = i;\n  model.trigger('add', model, this, options);\n}\n```\n\nIf the array's order changes after one of those triggers, it ends up triggering some items twice.\n\nOne solution would be to make a copy of the id list prior to triggering to allow resorting in a callback. Option 2 would be to iterate over the saved id hash and find the index for each inserted model at trigger time \u2014 that would send correct indexes after a resort.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1633",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1633/comments",
    "title": "Allow a fallback on model.get() ",
    "created_at": "2012-09-07T22:36:35Z",
    "updated_at": "2012-09-07T22:42:07Z",
    "body": "Allow a fallback on model.get(). This would happen when the attribute is undefined or null\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1632",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1632/comments",
    "title": "Unroute method",
    "created_at": "2012-09-07T14:59:57Z",
    "updated_at": "2012-09-07T16:04:48Z",
    "body": "Would be great if I would have the possibility to define a \"unroute\" method to clean up resources when exiting from a route.\nI think it would be great if I could return a callback function on my route event, that would be called when another route is activated. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1631",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1631/comments",
    "title": "View.unbind() ?",
    "created_at": "2012-09-07T03:27:39Z",
    "updated_at": "2012-09-07T03:31:23Z",
    "body": "I'm keep reading reference to this method which is said to be able to remove all events tied to a View across various sources, but can't find anything about it on the official site. Is it a documenting oversight?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1625",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1625/comments",
    "title": "The history root option is not respected.",
    "created_at": "2012-09-05T12:08:09Z",
    "updated_at": "2012-09-06T19:12:33Z",
    "body": "Backbone code:\n\n``` coffeescript\nclass Router extends Backbone.Router\n   routes:\n      'entries/:id': 'showEntry'\n\n   showEntry: (id)-> alert(\"showing entry #{id}\")\n\nnew Router()\nBackbone.history.start(root: '/rich-application', pushState: true)\n```\n\nNow we have two links on the page. One is `/rich-application/entry/10` and another is just `/entry/10`. I want Backbone router to catch the first one and do nothing on second, since its href is not in the history root. But currently Backbone catches both of them and behaves the same way.\n\nIs that an intended behavior?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1624",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1624/comments",
    "title": "Router: Query string gets ignored with pushstate.",
    "created_at": "2012-09-04T21:34:14Z",
    "updated_at": "2013-12-17T20:25:48Z",
    "body": "In commit  f878b7cfc28fb4dba12d3a97c9d790e615078272 appending location.search to the fragment was removed from Backbone.History.getFragment() and only gets appended when pushstate is disabled.\n\nWhen using pushstate, routes with a query string get ignored because the query string is not in the url fragment. \n\nI don't see why appending location.search to the fragment in Backbone.History.getFragment() was removed and should be added back.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1622",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1622/comments",
    "title": "Documentation for `model.url()` is inaccurate",
    "created_at": "2012-09-04T20:24:13Z",
    "updated_at": "2012-09-04T20:38:51Z",
    "body": "The documentation for `model.url()` explains:\n\n> Generates URLs of the form: \"/[collection.url]/[id]\", falling back to \"/[urlRoot]/id\" if the model is not part of a collection.\n\nThe code, however, does the opposite, falling back to `collection.url` if `urlRoot` is not defined:\n\n``` js\nvar base = getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();\n```\n\nThe documentation should be amended to be consistent with the code.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1619",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1619/comments",
    "title": "\"pushState/replaceState takes a relative url\" patch broke navigation when root is empty",
    "created_at": "2012-09-04T18:27:19Z",
    "updated_at": "2012-09-04T20:33:20Z",
    "body": "steps to reproduce:\n1. start Backbone history with empty root  // Backbone.history.start({root: ''});\n2. navigate to any route // Backbone.history.navigate('/anyroute');\n\nexpected result:\nthe location bar change to '/anyroute'\n\nactual result:\nthe location bar doesn't change\n\nanalysis:\nwhen started with an empty root, the patch normalize the root to '//' so the fragment '/anyroute' never matches\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1615",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1615/comments",
    "title": "#create + backbone-localstorage",
    "created_at": "2012-09-04T06:53:09Z",
    "updated_at": "2012-09-04T22:21:13Z",
    "body": "if I use backbone-localstorage, call `Collection#create`, and pass `{wait: true}`, the model's attributes hash gets polluted with the model's top-level hash. If I don't `wait`, it works fine.\n\nhttp://jsfiddle.net/dwrbq/\n\nedit: reworded\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1613",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1613/comments",
    "title": "[docs] alphabetize",
    "created_at": "2012-09-03T22:38:24Z",
    "updated_at": "2012-09-03T23:38:03Z",
    "body": "I find it hard to navigate the docs because the sidebar is not alphabetized. Even when I know the method name, I have to scan through the entire list of methods listed under a particular heading. Perhaps a few methods could be exempted, such as extend, constructor / initialize, but for the most part everything else should be alphabetized IMO.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1609",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1609/comments",
    "title": "API Concern",
    "created_at": "2012-09-01T18:41:08Z",
    "updated_at": "2012-09-22T13:56:18Z",
    "body": "From an API standpoint I think special/base values like urlRoot, and id could use special setters. It's strange that they are passed in like any normal instance variable. It doesn't draw the distinction that they are a special part of the Backbone framework.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1606",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1606/comments",
    "title": "A way to make Collection persistent",
    "created_at": "2012-08-31T15:50:06Z",
    "updated_at": "2012-09-03T10:50:21Z",
    "body": "I'm using Backbone with RequireJS, and my View needs to switch between like, say, 20 collections corresponding to respective RESTful APIs.\n\nThe \"normal\" way handles things fine, except that for each API a new Collection needs to be defined, resulting in a hugely bloated codebase:\n\n**Collection (x 20 times)**\n\n``` javascript\ndefine(function(require) {\n    var Backbone = require('backbone');\n\n    var c = Backbone.Collection.extend({\n        url: '/path/to/api-1'\n    });\n\n    return new c();\n});\n```\n\n**View**\n\n``` javascript\ndefine(function(require) {\n    var Backbone = require('backbone'),\n           c1 = require('./collections/collection-1'),\n           ...\n           c20 = require('./collections/collection-20');\n\n    var v = Backbone.View.extend({\n        /* Some methods to toggle between Collections here */\n    });\n\n    return v;\n});\n\n```\n\nBy only doing `return c;` inside the Collection, and calling `new c({url: /path/to/api-1});` inside the View, I was able to cut down the highly duplicated Collection defines; but now on each `new c();` calls, the APIs will always be poked to retrieve a new copy of data, which is a waste to resources and something I do not want.\n\nIs there any way to make Collections persistent in this case? That is, for each API's corresponding Collection, only one `new` is performed, and can be shared/accessed across different Views defined using RequireJS? Furthermore, the definition of the Collection can be reused by all APIs, and that the global namespace is not polluted at all?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1604",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1604/comments",
    "title": "Error caused by collection.add when collection is changing",
    "created_at": "2012-08-31T11:59:08Z",
    "updated_at": "2013-07-27T01:05:02Z",
    "body": "Is what I'm trying to do unreasonable? It doesn't seem to be. Broken on 0.9.2 and master.\n\nhttp://jsfiddle.net/philfreo/PzQt2/1/\n\n```\n// create a collection with some decent length\nvar collection = new Backbone.Collection([\n    new Backbone.Model(),\n    new Backbone.Model()\n]);\n\n// in some cases when we add a new model we may want to remove\n// some existing one\ncollection.on('add', function() {\n    collection.at(0).destroy();\n});\n\n// adding a new model at a certain position breaks things!\ncollection.add(new Backbone.Model(), { at: 0 });\n```\n\nUncaught TypeError: Cannot read property 'cid' of undefined, backbone.js:637\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1600",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1600/comments",
    "title": "Custom Indexes on A Collection",
    "created_at": "2012-08-29T22:30:07Z",
    "updated_at": "2013-12-16T19:52:22Z",
    "body": "It would be nice if you could specify custom indexes so that gets on a collection would be faster. I am not sure on what is the best way of declaring these but maybe just having and array on the collection like this.\n\n``` json\n{ \"indexes\" : [\"title\",\"author\"] }\n```\n\nIn cases where there are large amounts data looping through all of the models is not efficient. If that could be stored when the item is added to the collection this could be much faster.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1598",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1598/comments",
    "title": "Backbone Custom Builds",
    "created_at": "2012-08-29T14:34:57Z",
    "updated_at": "2017-03-03T13:23:25Z",
    "body": "I thought a great upgrade for a Backbone 1.0 release would be to split all Backbone Modules (Events, Model, View, Collection, Router, Sync) into separate files and provide users with the ability to make custom builds with a build tool such as Grunt and/or DownloadBuilder.js.  What do you think?  If you are interested, I would do some work and issue a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1594",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1594/comments",
    "title": "Time for a new version? 0.10?",
    "created_at": "2012-08-28T16:44:59Z",
    "updated_at": "2012-12-11T22:18:20Z",
    "body": "The last stable release was in March. Since then, there have been plenty of commits, some which are backwards incompatible.\n\nAny plans to round up the current pull requests and issue a new version? Seems like things are still enough in flux to avoid calling it 1.0, but that it'd be good to start getting real world use of the newer changes, so maybe 0.10?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1589",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1589/comments",
    "title": "Have the documentation hide the left bar rather than over text over text",
    "created_at": "2012-08-26T18:43:45Z",
    "updated_at": "2012-09-28T21:45:18Z",
    "body": "On Firefox, if the window _starts_ really narrow, the text of the navigation and the text of the page overlap. This does not seem to happen on Chrome, but Firefox is what matters for me. Besides this bug, it would be a nice \"responsive\" design to have the nav area hide if the window is narrow (or starts narrow).\n\nWhen I link context sensitive help for Backbone objects, there is very little room inside Firebug, and at the moment, it is useless. I'd rather link to the real documentation than host a copy of my own.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1588",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1588/comments",
    "title": "how can I reference callbacks?",
    "created_at": "2012-08-26T16:59:48Z",
    "updated_at": "2012-09-24T14:40:00Z",
    "body": "Hi,\n\nI am working on some sort of CollectionRepository which should handle different collections.\nYou can imagine this best as some interactive list which renders:\n1. A collection of contacts ( known users)\n2. A collection of search results (unkown users)\n\nThe switching between these two collections is done by the CollectionRepository. Now I would like to inform the views when an item gets added, removed or reset => bind the internal backbone events to the view.\n\nThis part is a bit tricky because the collections change whereas the view listener is the same. That is the reason why I wanted to extend the event functionality in my CollectionRepository also to handle the collection events. The benefit would be that the view only has to listen on the collectionrepository totally independent from how much collections are active. \nThe concrete implementation would just be a reference of this._callbacks to the callback list of the collections.\n\nHere is the example:\n\n```\n    var ContactsRepository = Core.Repository.extend({\n\n        initialize: function() {\n            // add the users-search-collection and the contacts-collection\n            // to our repositories hash\n            this.repositories.users = new Users();\n            this.repositories.contacts = new Contacts();\n\n            // reference each collection to the same object\n            // this is the part what fails...\n            this.each(function(repository) {\n                repository._callbacks = this._callbacks = {};\n            });\n\n            // set the user collection to the current one\n            this.switch('users');\n\n            // some other global event system handling the search field\n            events.on('contacts:search:query', this.searchQuery, this);\n            events.on('contacts:search:cancel', this.searchCancel, this);\n\n            console.log(this);\n        },\n\n        searchQuery: function(query) {\n            if (query === '') return;\n\n            this.repositories.users.query = query;\n            this.repositories.users.fetch({ success: function() {\n                this.switch('users');\n            }.bind(this) });\n        },\n\n        searchCancel: function(event) {\n            this.switch('contacts');\n        }\n\n    });\n\n    return ContactsRepository;\n```\n\nWhen I parse manually the log of the whole repository object I find that the this._callbacks contains callbacks whereas the collections don't...\n\nHi, I hope this isn' to unimportant to get an answer on github it is just that I already failed with getting an answer where else :(\n\nRegards,\nBodo\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1586",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1586/comments",
    "title": "_.bindAll(this, 'render'), etc.",
    "created_at": "2012-08-26T14:35:59Z",
    "updated_at": "2012-08-26T14:44:51Z",
    "body": "Just a simple question: Is it still necessary to use `_.bindAll(this, 'render');` when initializing new views?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1584",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1584/comments",
    "title": "[request] better error message for history.start",
    "created_at": "2012-08-26T11:06:10Z",
    "updated_at": "2012-08-28T17:18:16Z",
    "body": "Calling `Backbone.history.start` when no routes have been defined throws `Uncaught TypeError: Cannot call method 'start' of undefined`, which is not very helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1581",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1581/comments",
    "title": "Validation Occurs For All Attributes on set({singleAttr:'newVal'})",
    "created_at": "2012-08-25T01:52:25Z",
    "updated_at": "2013-06-10T12:12:15Z",
    "body": "A similar issue was brought up here: https://github.com/documentcloud/backbone/issues/914\n\nWhen you set a single attribute, validate is called, but all attributes of the model are passed, instead of just the one(s) which were updated.\n\nYou can see the issue in action here:\nhttp://jsfiddle.net/jasonmcaffee/TWpjM/6/\n\nThe problem lies in the Backbone _validate function, which is passed only the attribute(s) which was modified, but all the attributes are merged together before calling validate. \n\nThis change was added with this commit: https://github.com/documentcloud/backbone/commit/ab164c450da4d5c883d5b2b2817fa6a416a4b55a\n\n``` javascript\n_validate: function(attrs, options) {\n      if (options.silent || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);  //<-- why is this done? It prevents the ability to validate a single attribute.\n      var error = this.validate(attrs, options);\n  ...\n```\n\nWhy does updating 1 attribute justify validating the entire model?\n\nThere are several cases where it is beneficial to set and validate a single property. \nFor instance, validating an input on a form when input blur occurs, so you can provide immediate feedback to the user indicating that the field is invalid.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1578",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1578/comments",
    "title": "Views With Multiple Models/Collections",
    "created_at": "2012-08-24T06:35:44Z",
    "updated_at": "2013-03-06T16:14:05Z",
    "body": "Often views can rely on multiple models and/or collections. The standard convention for model/collection passing into the view constructor via the special model/collection key is very useful and elegant. \n\nFor situations where multiple models or collections are passed into views it is equally elegant to pass them in as nested objects to the view constructor (ie., {model: {a: a, b: b}}).\n\nIt would be helpful if the methods like the new dispose were multi model/collection aware.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1577",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1577/comments",
    "title": "reusing an options object to subsequent calls of collection.fetch({add:true}) results in erroneous options.success callbacks",
    "created_at": "2012-08-23T16:11:43Z",
    "updated_at": "2012-08-28T21:00:22Z",
    "body": "The options.success field is checked and then overwritten in the fetch routine as follows:\n\n``` javascript\n var success = options.success;\n      options.success = function(resp, status, xhr) {\n        collection[options.add ? 'add' : 'reset'](collection.parse(resp, xhr), options);\n        if (success) success(collection, resp);\n```\n\nPresuming success is not set by the user the first time around, and the user reuses the options object for another fetch call (think about the append case for paginated collections), this implementation requires the user to either clean up the options.success field after a fetch is issued, or else the second time around, success is going to get called with the entire collection as a parameter. \n\nThis isn't necessarily a bug, but it tripped me up. A note in the documentation about the options object being mutable by the library would be helpful. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1576",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1576/comments",
    "title": "Binding model.save() to the 'change' event causes the change event to be raised twice",
    "created_at": "2012-08-22T22:17:10Z",
    "updated_at": "2012-09-28T20:04:07Z",
    "body": "This is related to issue #1081.\n\nWhen calling save() within a change event the change event is fired again (just once more). This is using backbone 0.9.2 and a custom sync method but I imagine it would occur with the default sync implementation.\n\n```\ninitialize: function() {\n    this.on('change', function(model) { model.save(); }, this);\n}\n```\n\nThe call stack goes something like this:\n1. set('myAttr', 2) adds myAttr to _pending (line 300) then calls change()\n2. change() (line 476) raises the change event, with _previousAttributes.myAttr = 1, and attributes.myAttr = 2\n3. my change event handler calls save() which in turn calls sync\n4. The save success handler calls (line 381) !model.set(serverAttrs, options). I'm guessing this is to validate the result\n5. The set() method compares attributes to _previousAttributes, and sees they are different so it adds myAttr to _pending again\n6. Execution returns to the change() event\n7. change() (line 482) updates _previousAttributes = attributes\n8. change() sees there are more _pending items (cause it got re-added at 5.) and so raises another change event, this time with _previousAttributes.myAttr = 2, and attributes.myAttr = 2\n9. Execution now continues as it should, when the sync success handler calls set() again, _previousAttributes and attributes are equal so it doesn't add anything to _pending.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1575",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1575/comments",
    "title": "Needs documentation: model/collection event callback arguments",
    "created_at": "2012-08-22T18:59:51Z",
    "updated_at": "2013-04-07T11:09:00Z",
    "body": "For example, if I say: `this.collection.on('add', this.add, this);` the documentation doesn't let me know what arguments I should expect to receive in `this.add`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1572",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1572/comments",
    "title": "[FEATURE] Make Collection#filterCollection return a Collection instance",
    "created_at": "2012-08-21T21:46:55Z",
    "updated_at": "2012-08-22T14:25:39Z",
    "body": "For example:\n\nfiltered = this.collection.filter(function(model) {\n     return model.get('category') == actions;\n});\n\nreturns an array which does not have a toJSON method. \n\nCHANGE TO: \n\nfiltered = this.collection.filterCollection(function(model) {\n     return model.get('category') == actions;\n});\n\nreturns a collection which has a toJSON method. \n\nREFERENCE:\nhttps://github.com/michaelBenin/backbone/commit/8f9cdf376cd638a77550fe2a131c796cac167c54\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1566",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1566/comments",
    "title": "Collection within a model not updating changes after save",
    "created_at": "2012-08-20T22:03:59Z",
    "updated_at": "2012-08-22T05:57:45Z",
    "body": "This was a non issue. Error on my part.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1565",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1565/comments",
    "title": "change:column is not handled well after a clear()",
    "created_at": "2012-08-20T16:26:42Z",
    "updated_at": "2012-10-01T20:46:19Z",
    "body": "I expect the following code to trigger change:col1 callback three times in the following code but it triggers it twice\n\n```\n@model.on \"change:dummy\", ->\n  console.log('dummy change occurred')\n\n@model.set(dummy:true)\n@model.clear()\n@model.set(dummy:true)\n@model.set(dummy:false)\n```\n\nwhereas if I change the code to the following, it does trigger it three times\n\n```\n@model.on \"change:dummy\", ->\n  console.log('dummy change occurred')\n\n@model.set(dummy:true)\n@model.clear()\n@model.set(dummy:false)\n@model.set(dummy:true)\n```\n\nMy gut feeling is, the dummy value is cached due to the change callback registration and when clear() is executed, this cached value is not reset. Thus, when you set it to the same value twice, interleaved with a clear() call, it doesn't trigger the change:dummy callback\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1564",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1564/comments",
    "title": "Feature request: Collections.refresh()",
    "created_at": "2012-08-20T12:15:12Z",
    "updated_at": "2012-08-20T13:33:36Z",
    "body": "I've been using backbone.js for my nodejs apps. I have this setup in my Backbonejs code where a model has a property that is not being save in the database. It will have a default value of say 'checked' when added. Now, I used Collections.reset() to bootstrap my Collections every page reload. When I set some models to 'unchecked' status, it's get the default of  'checked' back when redirecting/reloading the page. What I want is a method on the collection that during bootstrapping, it only adds models that are not in the Collections. Is this feature already in backbone.js?\n\nFor the meantime, I wrote my own bootstrap method for my Collections. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1563",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1563/comments",
    "title": "Collection.fetch returns empty collection with sync() override",
    "created_at": "2012-08-20T09:41:02Z",
    "updated_at": "2012-08-20T13:40:40Z",
    "body": "I'm overriding collection.sync and model.sync to prevent the same fetch twice. The model.fetch returns (model, response) correctly, but collection.fetch(collection, response) returns the collection as empty and the response as the correct collection.\n\n``` coffeescript\nclass myModel\n    sync: (method, model, options) ->\n        tmpModel = @modelManager.models[@id]\n        if method is 'read' and tmpModel?\n            options.success(tmpModel) # tmpModel is the correct model\n        else\n            Backbone.sync(method, model, options)\n\nclass myCollection\n    sync: (method, collection, options) ->\n\n        tmpCollection = @collectionManager.collections[@url]\n        if method is 'read' and tmpCollection?\n            options.success(tmpCollection) # tmpCollection is the correct collection\n        else\n            Backbone.sync(method, collection, options)\n\n@model.fetch\n    success: (model, response) =>\n        console.log model # returns the correct model\n        console.log response # returns the correct model\n\n@collection.fetch\n    success: (collection, response) =>\n        console.log model # returns an empty collection\n        console.log response # returns the correct collection\n```\n\nIs this anticipated behaviour? I can get the collection from the 'response', but I think I should be able to get it from 'collection'?\n\n[EDIT]\nThis is anticipated behaviour. Options.success returns the response, not the model or collection.\n[/EDIT]\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1554",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1554/comments",
    "title": "Docs state UnderscoreJS is not XSS sanitized",
    "created_at": "2012-08-16T08:51:19Z",
    "updated_at": "2013-09-04T19:12:07Z",
    "body": "\"Backbone is agnostic with respect to your preferred method of HTML templating. Your render function could even munge together an HTML string, or use document.createElement to generate a DOM tree. However, we suggest choosing a nice JavaScript templating library. Mustache.js, Haml-js, and Eco are all fine alternatives. **Because Underscore.js is already on the page, _.template is available, and is an excellent choice if you've already XSS-sanitized your interpolated data.**\"\n\nUnderscore already supports sanitation with `escape: /<%-([\\s\\S]+?)%>/g`. (which imho should be the default).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1552",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1552/comments",
    "title": "Delegate event in View does not return original event",
    "created_at": "2012-08-15T10:48:20Z",
    "updated_at": "2012-08-15T12:27:22Z",
    "body": "To process some attributes i need access to $(this) in event callback, but receive only event object. This event object contain target (child html element) but does not contain the original event.\n\nFor example\n\n```\n<div class=\"test\"><div class=\"sub\">TEXT</div></div>\n\nevents: {\n    \"click .test\": \"func\"\n}\n```\n\nThis backbone uses \n\n```\nvar eventName = match[1], selector = match[2];\nmethod = _.bind(method, this);\n```\n\nyes, it is okay. But maybe the original \"this\" should returned too as 2d argument?\n\nit can be dome for example as $.delegate eventData\n\nps of course i can get access to parent by jquery parents() but it adds some complexity\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1548",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1548/comments",
    "title": "Proxy events",
    "created_at": "2012-08-14T10:57:13Z",
    "updated_at": "2012-08-14T12:49:30Z",
    "body": "Very often i use re-throw events from child object\nview2:\n\n```\nview.on('reindex', function() {this.trigger('reindex')}, this);\n```\n\nMaybe it will be helpful to create some simple proxy in Backbone?\n\n```\nview.on('reindex', Backbone.proxy, this)\n```\n\nYes i can use some global Events object but it is not cool.\n\nWhat do you think? Or how do you avoid this problem?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1547",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1547/comments",
    "title": "Combine hash routing with pushstate",
    "created_at": "2012-08-14T10:40:50Z",
    "updated_at": "2016-10-29T20:37:31Z",
    "body": "Sometimes we need support both types of routing in one application. This is not possible yet\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1546",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1546/comments",
    "title": ".destroy() on a model does not trigger \"destroy\" event on a collection.",
    "created_at": "2012-08-13T23:49:41Z",
    "updated_at": "2012-08-15T13:49:41Z",
    "body": "Not sure if this is intentional, but _onModelEvent checks if the event is \"destroy\" and if so, calls `this.remove` before `this.trigger`. `this.remove` breaks the `all` event that allows models to propagate events to their collections.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1544",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1544/comments",
    "title": ".toJSON doesn't traverse the entire tree AND Collection in a Model can't be accessed properly",
    "created_at": "2012-08-12T13:24:17Z",
    "updated_at": "2012-08-13T02:56:48Z",
    "body": "I have a structure that looks like this:  \n- Collection1  \n  - Model1  \n    - Collection2  \n      - Model2  \n\nIf I call \"Collection1.toJSON()\" it seems to work for Collection1, Model1 and Collection2 but NOT Model2.  \nThen on top of that, Collection2 is ALWAYS empty when I try to access it.  \nIf I do \"console.log(Collection1)\" I see the entire structure correctly.  Collection2 will have objects in it that are populated.  If at ANY point I try to directly access Collection2, it is empty.  \nWhether I do:  \n- Model1.toJSON().Collection2  \n- Model1[\"Collection2\"]  \n- Model1.get(\"Collection2\")  \n\nIn all of them Collection2 has 0 items inside of it even though the console.log(Collection1) showed that it was populated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1543",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1543/comments",
    "title": "Request module seems to affect Backbone (and Underscore) behavior in v0.8",
    "created_at": "2012-08-11T18:50:01Z",
    "updated_at": "2012-08-15T20:29:09Z",
    "body": "The usage of the `request` module in a node.js v0.8 environment seems to affect Backbone (and Underscore). When the request module is included Backbone refuses to set model values, resulting in an error:\n\n```\nvar Backbone = require('backbone');\nvar request = require('request');\n\nvar model = new Backbone.Model();\nmodel.set({ foo: 'bar' }); // works\nmodel.set('foo', 'bar');   // fails\n\n// Results in a TypeError\n/.../node_modules/backbone/backbone.js:282\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n                              ^\nTypeError: Cannot use 'in' operator to search for 'id' in bar\n    at _.extend.set (/.../node_modules/backbone/backbone.js:282:31)\n    at Object.<anonymous> (/.../test1.js:36:11)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.runMain (module.js:492:10)\n    at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n\n```\n\nLooking at the code in the set function it seems that the `key` passes as an object, resulting in the error.  This indicates that the Underscore module is affected as well. After moving the require statement passed the model creation the error no longer appears.\n\nI created three simple setups to investigate the error. The setups can be found at https://gist.github.com/3326180 and can be run in node.\n`test1.js` is the failing setup, `test2.js` is without the request module and `test3.js` is with the require statement moved.\n\nWhen run with node v0.8.6 test1 fails and the others pass. But when run with node v0.6.20 all setups pass. Module version used:\n- Backbone 0.9.2 (and master)\n- Underscore 1.3.3\n- Request 2.10.0\n\nThe error is generated by Backbone but I'm not sure if this is the right project to report it. The root cause (and fix) might be in the node, request or underscore projects and maybe the issue should be reported there.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1542",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1542/comments",
    "title": "Can not set model sub attributes",
    "created_at": "2012-08-11T09:12:14Z",
    "updated_at": "2012-08-13T11:54:41Z",
    "body": "For example i have model\n\n```\nBackbone.Model.extend({\n    defaults: {\n        name: {first: '', last: ''}\n    }\n});\n```\n\nand i can not set:\n    model.set('name.first', 'Artyom')\n\nMaybe it will be helpful to allow do this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1540",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1540/comments",
    "title": "Persistent DOM XSS found",
    "created_at": "2012-08-10T11:08:08Z",
    "updated_at": "2013-06-27T12:52:54Z",
    "body": "Hello folks- example at http://backbonejs.org/examples/todos/index.html is vulnerable to DOM XSS.\n\nSince it uses localStorage this can turn more grave by mimicking a persistent XSS by chaining Clickjacking, Drag & Drop or in a shared environment.\n\nPoC exploit code: enter following in the input box and hit enter \"<img src=0 onerror=alert(0)>\" &lt;img src=0 onerror=alert(0)&gt;\n\nBish\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1538",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1538/comments",
    "title": "command+click or ctrl+click to open a new tab",
    "created_at": "2012-08-09T21:44:52Z",
    "updated_at": "2012-08-10T15:27:27Z",
    "body": "In Backbone.History.navigate functionality to be added to open new tab on ctrl+click or cmd+click, unable to extend the history function as well, the following piece of code could be added for the functionality\n\nif(event.preventDefault() || event.metaKey || event.ctrlKey) {\n  window.open(location.origin + fragment, '_blank');\n}\n\nThank you\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1536",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1536/comments",
    "title": "Why is there no \"create\" event to differentiate between a sync create and a sync update",
    "created_at": "2012-08-09T18:19:54Z",
    "updated_at": "2013-11-06T05:28:59Z",
    "body": "I currently listen to the \"sync\" event of a Backbone model and manually detect the 201 status code for a newly created resources. There are many times when various listening views need to know whether or not an object was created for the first time or simply updated.\n\nIf there is no good reason why not, then could an \"create\" event be added and triggered in the save method of Models?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1533",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1533/comments",
    "title": "model.save(model,{wait:true}) fails to merge serverAttrs correctly",
    "created_at": "2012-08-08T06:43:05Z",
    "updated_at": "2012-08-08T06:47:28Z",
    "body": "I've run into an issue where, when saving a model object with {wait:true}, attributes from the server are not correctly merged with the existing client-side model attributes. The root issue seems to be that Model.save()'s success function uses _.extend( attrs || {}, serverAttrs), not paying attention to the possibility that 'attrs' may not be a simple hash, but may instead be a Model object. If it is a Model object, then the serverAttrs are merged as top-level properties instead of into the model's 'attributes' hash, where they belong:\n\n``` javascript\noptions.success = function(resp, status, xhr) {\n        done = true;\n        var serverAttrs = model.parse(resp, xhr);\n        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\n        if (!model.set(serverAttrs, options)) return false;\n    ...\n```\n\nIn the Model.set() function the code then does this:\n\n``` javascript\nif (attrs instanceof Model) attrs = attrs.attributes;\n```\n\nwhich results in the loss of the top-level attributes we just merged from the 'serverAttrs' hash.\n\nI propose that save()'s success function be changed to detect whether attrs is a Model object and extract the attributes this way:\n\n``` javascript\nif (options.wait) serverAttrs = _.extend((attrs instanceof Model) ? attrs.attributes : attrs, serverAttrs);\n```\n\nPlease advise if I'm missing something here. I suspect that the server modifying attributes in this manner is just not a common scenario, though it does seem valid.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1531",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1531/comments",
    "title": "Empty Backbone.Model object returned ",
    "created_at": "2012-08-07T20:49:47Z",
    "updated_at": "2012-08-07T21:09:58Z",
    "body": "var FooModel = Backbone.Model.extend();\n\nvar foo = new FooModel();\nvar status = new FooModel();\nvar status_1 = new FooModel();\n\nconsole.log(foo); // outputs Backbone.Model: child\nconsole.log(status); // outputs empty object: [object Object]\nconsole.log(status_1); // outputs Backbone.Model: child\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1530",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1530/comments",
    "title": "Backbone Custom Interactions",
    "created_at": "2012-08-07T17:52:39Z",
    "updated_at": "2012-08-07T18:18:34Z",
    "body": "If I have a textbox \"email\" and also had textboxes \"city\" and \"state\", how would I make \"email\" required only if either \"city\" or \"state\" are filled in? Without alot of custom js to write, is there something built in to allow this kind of flexibility?\n\nThanks much,\n\nDavid\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1529",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1529/comments",
    "title": "tagName for Definition List?",
    "created_at": "2012-08-07T15:21:44Z",
    "updated_at": "2012-08-07T16:02:04Z",
    "body": "I have a definition list with each item mapped to a view using a template something like this:\n\n``` html\n<dt><%= title %></dt>\n<dd>\n  <%= content %>\n</dd>\n```\n\nI am creating views dynamically, so my problem is that if I set `tagName: 'div'` I end up with markup like `<dl><div><dt></dt><dd></dd></div></dl>` - I need a way to not wrap each element in a tag, removing `tagName` altogether stops things from working.\n\nIs there a solution for this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1527",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1527/comments",
    "title": "Exceptions thrown by event listeners stops successive events from being triggered",
    "created_at": "2012-08-07T14:02:56Z",
    "updated_at": "2014-01-24T15:22:16Z",
    "body": "I'm running into a problem where I'm working on a large project with a lot of moving pieces and we're using a centralized event system to avoid coupling and code bloat and we're having a problem where if one event listener breaks, it causes any listeners after it to stop being called, and worse, it bubbles the exception up to the code that triggered the event. While I could put a try catch block around the trigger call, it would be much better to put try/catch blocks around each call. \n\nPull request forthcoming.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1526",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1526/comments",
    "title": "IE8, Events .off is broken if using named function",
    "created_at": "2012-08-07T09:13:46Z",
    "updated_at": "2012-08-07T11:50:57Z",
    "body": "I changed a little bit the existing test to reproduce the issue. The only difference - I am using the function name to unbind the event. This will not unbind it in IE8. I haven't tested older browsers. Really crazy one.\n\n```\ntest(\"Events: unbind a callback in the midst of it firing\", 1, function() {\n  var obj = {counter: 0};\n  _.extend(obj, Backbone.Events);\n  var callback = function fn() {\n    obj.counter += 1;\n    obj.off('event', fn);\n  };\n  obj.on('event', callback);\n  obj.trigger('event');\n  obj.trigger('event');\n  obj.trigger('event');\n  equal(obj.counter, 1, 'the callback should have been unbound.');\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1522",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1522/comments",
    "title": "shouldn't Collection#add always reference collection on the model?",
    "created_at": "2012-08-02T12:52:11Z",
    "updated_at": "2012-08-02T13:24:48Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1521",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1521/comments",
    "title": "Why are models ignorant of a collections reset event?",
    "created_at": "2012-08-02T10:35:18Z",
    "updated_at": "2012-08-08T11:57:52Z",
    "body": "I asked a question here about backbone reset event of the collection class: http://stackoverflow.com/questions/11774738/backbone-why-doesnt-a-collection-reset-trigger-a-model-event \n\nI got an excellent answer which solves my problem by extending the collection class. But I'd also really like to know if models are intentionally ignorant to their collections reset event and if so why?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1517",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1517/comments",
    "title": "[Enhancement] Improved Backbone inheritance",
    "created_at": "2012-07-30T12:24:05Z",
    "updated_at": "2012-07-30T14:58:56Z",
    "body": "Currently, inheriting from Backbone objects, such as `Backbone.View` requires the following boilerplate:\n\n``` js\nvar myView = function(options){\n  /* Custom stuff */\n  Backbone.View.call(this, options);\n}\n\n_.extend(myView.prototype, Backbone.View.prototype, {\n  /* Custom methods n' stuff */\n  cookies: function(){\n    console.log(\"cookies\");\n  }\n});\n\nmyView.extend = Backbone.View.extend;\n```\n\nAn alternative method, which I personally find more intuitive and aesthetically appealing would be to add an `inherits` method to the global Backbone object, (identical to the one found in `node.js`):\n\n``` js\nBackbone.inherits = function(child, parent) {                                                                    \n  child.super_ = parent;                                                \n  child.prototype = Object.create(parent.prototype, {                   \n        constructor: {                                                  \n        value: child,                                                    \n        enumerable: false,                                              \n        writable: true,                                                 \n        configurable: true                                              \n      }                                                                   \n   });                                                                     \n };      \n```\n\nWhich would allow for inheritance like this:\n\n``` js\nvar myView = function(options){\n  /* Custom stuff */\n  Backbone.View.call(this, options);\n}\n\nBackbone.inherits(myView, Backbone.View);\n\n/* Custom methods n' stuff */\n\nmyView.prototype.cookies = function(){\n  console.log(\"cookies\");\n}\n\nmyView.extend = Backbone.View.extend;\n```\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1516",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1516/comments",
    "title": "model.on(\"change:key\", ...) never fires.",
    "created_at": "2012-07-28T17:49:49Z",
    "updated_at": "2012-07-28T18:42:21Z",
    "body": "Hi,\n\nI have had this issues months ago, figured it was a bug but didn't really need it back then. Today I tried it again with the recent Backbone.js version and as far as I can see it still doesn't work.\n\n``` coffee\n@model.on \"change:task\", -> console.log \"never fires\"\n@model.on \"change\", -> console.log \"always fires\"\n\n@model.set \"task\", \"Figure out why it won't fire.\"\n# => \"always fires\"\n```\n\nAccording to the Backbone.js documentation, this should invoke both the `change` and `change:task` bindings, not just the `change` binding. Any idea why `change:task` it won't fire?\n\nAny info greatly appreciated.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1515",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1515/comments",
    "title": "Store model array-attributes in a Backbone.Collection",
    "created_at": "2012-07-28T15:22:13Z",
    "updated_at": "2012-07-29T08:35:37Z",
    "body": "Hi,\n\nI think it is a bad idea to store raw arrays in Backbone.Model.attributes because we are missing a lot of \"tools\" this way (add, remove, has, etc.) I am now working on a hack which converts raw arrays from the server to a Backbone.Collection and vice versa.\n\nThis would allow handling references or embedded documents much easier.\n\nIs there a chance that the official \"backbone-project\" would accept this or should I do this seperated?\n\nRegards\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1514",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1514/comments",
    "title": "model.change() does not call validate",
    "created_at": "2012-07-27T15:24:53Z",
    "updated_at": "2012-07-27T17:48:03Z",
    "body": "All methods that change attributes call validate (set, create), but change doesn't. Is this a feature?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1513",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1513/comments",
    "title": "I got a complicated issue...",
    "created_at": "2012-07-27T14:12:20Z",
    "updated_at": "2012-07-31T22:57:26Z",
    "body": "My issue is that this backbonejs beat is sick...\nhttp://khu.sh/autorap_5012a11d0ffea&v2\n\n```\nwindow.location='http://khu.sh/autorap_5012a11d0ffea&v2'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1508",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1508/comments",
    "title": "optional parameters and splats in routes",
    "created_at": "2012-07-26T23:50:11Z",
    "updated_at": "2012-10-01T19:28:13Z",
    "body": "i couldn't find this when searching issues, but i assume its just github search being poor because it must have been suggested before. it would be really nice if Backbone's Router supported optional parameters in routes (and potentially optional splats, although I don't care either way here).\n\nthe way crossroads.js supports it seems nice: http://millermedeiros.github.com/crossroads.js/#crossroads-add_route\n\npotential syntaxes:\n\n```\n ':mandatoryParameter/:optionalParameter:` // crossroads.js style\n ':mandatoryParameter/:optionalParameter?` // does this work with querystrings though? probably not?\n ':mandatoryParameter/(:optionalParameter)\n ':mandatoryParameter/[:optionalParameter]\n```\n\nare there reasons not to? this is one of my biggest problems with using the Router, and it doesn't seem like an edge-case.\n\n---\n\ni know we can use regex's, but writing them all over the place gets tedious and really hard to maintain. instead of:\n\n```\n':project/[:section]/[:tab]/[:item]'\n```\n\ni have to write:\n\n```\n([^\\/]+)(?:\\/([^\\/]+))?(?:\\/([^\\/]+))?(?:\\/([^\\/]+))?/\n```\n\nwhich no one can reread again.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1507",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1507/comments",
    "title": "Easier attaching of model events in a view",
    "created_at": "2012-07-26T20:33:06Z",
    "updated_at": "2013-01-15T23:00:21Z",
    "body": "Currently Backbone views have a very simple way of binding events both to themselves and to their el (and its children):\n\n```\nBackbone.View.extend({\n    events: {\n        'click': 'handleClick', // el event hookup\n        'click .child': 'handleChildClick', // el's child event hookup\n        'customEvent' : 'handleCustomEvent' // view's event hookup\n    }\n```\n\nThat's all awesome, but it leaves out a very common scenario: a view binding events to its model.  Currently this has to be done manually, inside init or somewhere similar:\n\n```\nBackbone.View.extend({\n    init: function() {\n        this.model.on('change', this.handleModelChange);\n    }\n```\n\nWhy not apply the same mechanism for models (and collections)?  It would work very naturally:\n\n```\nBackbone.View.extend({\n    events: {\n        'model change: 'handleModelChange', // style #1\n        'this.model change: 'handleModelChange', // style #2\n        '{model} change: 'handleModelChange', // style #3\n                                                                        // etc.\n```\n\nIn a similar ticket, the following arguments were made against this idea, but I'd like to dispute them:\n- \"You often have a view listening to events on one, two or three models, or two or three collections.\"\n  You don't see Backbone ditching support for options.model and options.collection just because a view _could_ use multiple models/collections, right?  Making things better for most of your users/use cases doesn't hurt the rest of them in any way.\n- \"You usually don't have very many distinct events to be listened for in a single view. Often, it's just change.\"\n  It's VERY common to have that change hookup, and providing a more convenient way of doing it would make the library better.  Plus, there are plenty of cases where people bind multiple model events (eg. change:foo, change:bar, and change:baz).\n- \"Most importantly, unlike Views and the DOM, Views aren't the only type of objects that listen for model events. Other models also listen, as do controller objects and so on.\"\n  Right, and jQuery provides a way to bind events, so Backbone should just stay out of the event business, right?  Of course not.  Views _do_ listen to model events a ton, so why make that particular binding harder just because some other possible way of binding events exists?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1506",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1506/comments",
    "title": "Backbone.js to regulated for its own good?",
    "created_at": "2012-07-26T19:39:03Z",
    "updated_at": "2012-07-26T21:49:04Z",
    "body": "Many developers are confused because 90% of their pull requests fails..\n\n![Regulate](http://3.bp.blogspot.com/-xZmgz1G6guI/Tbh3TnJqsEI/AAAAAAAAGkM/iYjzHT0hIpY/s1600/92864153.gif)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1504",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1504/comments",
    "title": "make the 'eventSplitter' public",
    "created_at": "2012-07-25T18:37:29Z",
    "updated_at": "2013-10-23T13:14:36Z",
    "body": "I require an event splitter that doesn't split on spaces (spaces have meaning in my events).\nI propose this change in the API.\n\nfrom\n\n```\nvar eventSplitter =  /\\s+/;\n```\n\nto\n\n```\nBackbone.eventSplitter = /\\s+/;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1502",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1502/comments",
    "title": "What browsers are you supporting?",
    "created_at": "2012-07-24T10:26:24Z",
    "updated_at": "2012-07-24T13:32:16Z",
    "body": "Hi,\nFirst of all apologies if this is the wrong place to ask this but I was unable to find a definitive answer anywhere.\n\nFor reference our browser stats for July 2012, for active users are:\n\nIE7 63%\nIE8 18%\nIE9 8%\nFirefox 6%\nIE6 5%\n\nSo as you can see old versions of IE are still on the radar for us due to the audience that we serve. This is not an intranet site either, we work with large enterprise and health care entities.\n\nI've just come across backbone and it looks to be something that we might use for some upcoming work. \n\nI tried the test suite and it failed on two tests for IE6, and I've seen a few forum comments about IE 6 support. So where are you drawing the line...? What's in, what's out? \n\nThanks for everything. We do really appreciate all your efforts...\n\nSteve\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1501",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1501/comments",
    "title": "[Enhancement] History.navigate support for stateObj",
    "created_at": "2012-07-24T01:12:34Z",
    "updated_at": "2012-07-24T13:50:28Z",
    "body": "It would be nice if Backbone supported passing in statObj to window.history.pushstate via Backbone.navigate in its options. Right now if we use Backbone.navigate, the window.onpopstate callback always emits a PopStateEvent.state that is null. There is no way to distinguish between Chrome/Safari firing that event on a page load vs the user actually pressing back/forward.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1500",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1500/comments",
    "title": "Can't call .each on collections",
    "created_at": "2012-07-23T16:36:16Z",
    "updated_at": "2012-07-23T18:51:26Z",
    "body": "Hi,\n\nI can't call .each on my Backbone.Collection (I can call it but nothing happens...).\n\nUserModel:\n\n```\ndefine(['jquery', 'underscore', 'backbone'], function($, _, Backbone){\n\n    var UserModel;\n\n    UserModel = Backbone.Model.extend({\n        initialize: function() {},\n        idAttribute: '_id',\n        urlRoot: '/users'\n    });\n\n    return UserModel;\n});\n```\n\nUserCollection\n\n```\ndefine(['jquery', 'underscore', 'backbone', 'models/user'], function($, _, Backbone, UserModel) {\n\n    var UserCollection;\n\n    UserCollection = Backbone.Collection.extend({\n        initialize: function() {\n\n        },\n        url: '/users',\n        model: UserModel\n    });\n\n    return UserCollection;\n\n});\n```\n\nCall in view:\n\n```\nsearch: function(e) {\n            $('ul.contact-list li').remove();\n\n            var contacts = new UserCollection();\n            contacts.url = '/users?username=' + $(e.target).val();\n            contacts.fetch({ add: true, remove: true });\n\n            console.log(contacts); // works\n\n            _.each(contacts.models, function(contact) {\n                console.log(contact.get('username')); // no console log\n                $('ul.contact-list').append('<li>' + contact.get('username') + '</li>'); // no effect\n            });\n        }\n```\n\nI assume this is a bug?\n\nI also tried using\n\n```\n_.each(contacts.models, function(contact) {\n    console.log(contact.get('username')); // no console log\n    $('ul.contact-list').append('<li>' + contact.get('username') + '</li>'); // no effect\n});\n```\n\nwithout success\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1499",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1499/comments",
    "title": "Saving unchanged Model does not call the Success callback",
    "created_at": "2012-07-21T15:35:42Z",
    "updated_at": "2012-07-22T17:21:50Z",
    "body": "this.model.save({\n    success: function() {\n        console.log('saved');\n    }\n});\n\nWith the above code, if I don't make any changes to the model between model.save() calls, then the success handler is not called. This seems like a bug to me. The save still goes through with the request to the server and such, so it's not like there's no AJAX call to check for success on. If I use the below code:\n\nvar save = this.model.save({\n    success: function() {\n        console.log('saved');\n    }\n});\n\nsave.success(function() {\n    console.log('saved');\n});\n\nThen the success handler attached to the jqXHR still works.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1496",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1496/comments",
    "title": "create and add have inconsistent return values",
    "created_at": "2012-07-18T23:31:34Z",
    "updated_at": "2012-07-21T00:37:36Z",
    "body": "It's really annoying that add doesn't return the fully hydrated model that has been added to the collection. It means a bunch of hoops need to be jump through to get this after an add. Yet create returns the model... Inconsistant and rather annoying.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1495",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1495/comments",
    "title": "Bug: attributes inherited from Object.prototype",
    "created_at": "2012-07-18T20:43:27Z",
    "updated_at": "2015-10-18T20:00:33Z",
    "body": "``` coffeescript\njohn = new Backbone.Model()\n\nbuilding1 = new Backbone.Model()\nbuilding1.set {constructor: john}\nbuilding1.has 'constructor'  # => true\n\nbuilding2 = new Backbone.Model()\nbuilding2.has 'constructor'  # => true. WTF?\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1494",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1494/comments",
    "title": "Bug/documentation issue with Event#off",
    "created_at": "2012-07-18T20:17:25Z",
    "updated_at": "2012-07-19T18:16:18Z",
    "body": "There is either a bug in the intended functionality or a documentation issue with Event#off.  The docs state:\n\n``` javascript\n// Removes the `onChange` callback for all events.\nobject.off(null, onChange);\n\n// Removes all callbacks for `context` for all events.\nobject.off(null, null, context);\n\n// Removes all callbacks on `object`.\nobject.off();\n```\n\nThe problem is that if you ever pass null as the first argument, you will actually remove ALL event listeners (collection-related event listeners as well on models).  The way it works and the way it is described above that code snippet states:\n    If no event is specified, all event callbacks on the object will be removed.\n\nI personally like the possibility of removing all event handlers for a given context but understand the requirements that imposes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1491",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1491/comments",
    "title": "view.remove() causes an Uncaught RangeError: Maximum call stack size exceeded error",
    "created_at": "2012-07-18T01:06:10Z",
    "updated_at": "2013-07-14T05:00:12Z",
    "body": "using view.remove() to remove a view from the DOM causes a Uncaught RangeError: Maximum call stack size exceeded error. using $(this.el).remove() seems to work though.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1489",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1489/comments",
    "title": "Attributes that are prefixed with _ should be synced with localStorage instead of being sent to the server",
    "created_at": "2012-07-17T22:20:54Z",
    "updated_at": "2012-07-18T14:26:11Z",
    "body": "I like to have all my client specific variables named _attribute - it would be nice to automatically sync this with localStorage on CRUD commands instead of sending them to the server.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1487",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1487/comments",
    "title": "\"off\" doesn't always return \"this\"",
    "created_at": "2012-07-16T22:44:01Z",
    "updated_at": "2012-07-17T16:36:36Z",
    "body": "If you want to avoid hooking-up redundant handlers it's very handy to be able to do:\n\n`foo.off('someEvent').on('someEvent', someHandler)`\n\nHowever, in the latest version of Backbone, `if (!(calls = this._callbacks))` `off` simply returns undefined, rather than returning `this`.  This breaks any attempt to \"chain\" off of an `off` call (like in the code above).\n\nSince it would be trivial to change:\n\n`if (!(calls = this._callbacks)) return;`\n\nto:\n\n`if (!(calls = this._callbacks)) return this;`\n\ncan you please?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1485",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1485/comments",
    "title": "extend issue in Chrome 22.0.1201.0 dev-m",
    "created_at": "2012-07-16T07:25:33Z",
    "updated_at": "2012-07-16T12:44:32Z",
    "body": "I just find a issue caused by:\n\n``` javascript\n    // Set up inheritance for the model, collection, and view.\n  Backbone.Model.extend = Backbone.Collection.extend = extend;\n    Backbone.Router.extend = Backbone.View.extend = extend;\n```\n\nAfter this code executed,there will be an error:\n\n``` javascript\nUncaught TypeError: Object function (a,b){var c;a||(a={}),b&&b.parse&&(a=this.parse(a));if(c=u(this,\"defaults\"))a=f.extend({},c,a);b&&b.collection&&(this.collection=b.collection),this.attributes={},this._escapedAttributes={},this.cid=f.uniqueId(\"c\");if(!this.set(a,{silent:!0}))throw new Error(\"Can't create an invalid model\");delete this._changed,this._previousAttributes=f.clone(this.attributes),this.initialize.apply(this,arguments)} has no method '_bindRoutes'\n```\n\nI think this issue may be caused by latest  chrome  is not stable,but if u can use just the simple api to assign a value may be more secure.\nLike:\n\n``` javascript\n  Backbone.Model.extend = extend;\n  Backbone.Collection.extend = extend;\n  Backbone.Router.extend = extend;\n  Backbone.View.extend = extend;\n```\n\nthanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1482",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1482/comments",
    "title": "Why do parse happens before initialize ?",
    "created_at": "2012-07-12T11:54:38Z",
    "updated_at": "2012-07-12T11:59:56Z",
    "body": "when I do in collection \nthis.add(data, {parse: true});\n\nstart calling parse than initialize ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1481",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1481/comments",
    "title": "Documentation Overhaul",
    "created_at": "2012-07-11T20:59:48Z",
    "updated_at": "2012-10-01T21:12:43Z",
    "body": "There are some intermittent holes in the Backbone.js docs. @pamelafox pointed out one in collection.sort([options]) (http://backbonejs.org/#Collection-sort): https://twitter.com/pamelafox/status/223095345599623168\n\nIt is unclear from the docs that `collection.sort` respects only one option, `silent`. It is also not mentioned at all that the options object is passed to the reset event when silent is false.\n\nWhile I expect this behaviour and understand the documentation as a backbone user, I think the docs are unclear to new users who maybe be looking at a backbone method doc for the first time.\n\nOne problem here is incomplete documentation. A second problem here is that it is hard parse option object properties in the middle of a sentence.\n\nI'd like to propose a once over of the backbone docs where:\n- methods that accept options objects have the options delineated in a table, outside of prose content.\n- each method is scrutinized for documentation coverage \n\nIf I can get some +1s here, I'll get started this week.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1480",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1480/comments",
    "title": "Extended classes reference the same object from the extended class.",
    "created_at": "2012-07-11T14:13:01Z",
    "updated_at": "2012-07-11T19:34:50Z",
    "body": "In the following example \"this.ajax\"  in the Search collection references the same object for both PhotoSearch and VideoSearch.  \n\nIs this normal behaviour? I am creating a new instance of PhotoSearch and VideoSearch, I do not see why they share the same reference to ajax.\n\n``` javascript\nvar Search = Backbone.Collection.extend({\n\n    ajax : $.ajax(),\n\n    search : function(options) {\n\n        if(!this.ajax.isResolved())\n            this.ajax.abort();\n\n        this.reset();\n        this.loadmore(options);\n\n    }\n\n});\n\nvar VideoSearch = Search.extend({\n\n    loadmore : function(options) {\n        this.ajax = $.get(\"/video\");\n    }\n\n});\nvar PhotoSearch = Search.extend({\n\n    loadmore : function(options) {\n        this.ajax = $.get(\"/photo\");\n    }\n\n});\n\nvar videoSearch = new VideoSearch();\nvar photoSearch = new PhotoSearch();\n\nconsole.log(videoSearch.ajax === photoSearch.ajax); // true\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1479",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1479/comments",
    "title": "no method '_bindRoutes' in Chrome 22.0.1201.0 dev",
    "created_at": "2012-07-11T06:05:58Z",
    "updated_at": "2013-11-09T00:32:22Z",
    "body": "In the lastest chrome dev 22.0.1201.0, Backbone test suite have a global failure.\n\nBackbone.Events: global failure (1, 0, 1) Rerun\n\n```\nUncaught TypeError: Object function (attributes, options) {\n    var defaults;\n    attributes || (attributes = {});\n    if (options && options.parse) attributes = this.parse(attributes);\n    if (defaults = getValue(this, 'defaults')) {\n      attributes = _.extend({}, defaults, attributes);\n    }\n    if (options && options.collection) this.collection = options.collection;\n    this.attributes = {};\n    this._escapedAttributes = {};\n    this.cid = _.uniqueId('c');\n    this.changed = {};\n    this._silent = {};\n    this._pending = {};\n    this.set(attributes, {silent: true});\n    // Reset change tracking.\n    this.changed = {};\n    this._silent = {};\n    this._pending = {};\n    this._previousAttributes = _.clone(this.attributes);\n    this.initialize.apply(this, arguments);\n  } has no method '_bindRoutes', http://documentcloud.github.com/backbone/backbone.js:871\n```\n\nIs it a bug of Chrome?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1478",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1478/comments",
    "title": "Unexpected change events when save with {wait:true}",
    "created_at": "2012-07-11T02:53:19Z",
    "updated_at": "2012-11-23T20:32:15Z",
    "body": "I think it should be no different with or without wait:true, but\n\n``` javascript\nBackbone.sync = function(method, model, options) {\n  var data = model.toJSON()\n  setTimeout(function() {\n    options.success(_.extend({ 'id': 1, 'b': 2, 'c': true }, data), {})\n  }, 10)\n};\n\nvar A = Backbone.Model.extend({})\n  , a = new A()\n\na.fetch({\n  success: function() {\n    a.on('change', function(model, evt) { console.log(_.keys(evt.changes)) })\n    a.on('change:id', function(model, data) { console.log('change:id: ' + data) })\n  }\n})\n\nsetTimeout(function() {\n  console.log('no wait')\n  a.save({ 'b': 6 })\n}, 100)\n\nsetTimeout(function() {\n  console.log('wait: true')\n  a.save({ 'b': 8 }, { wait: true })\n}, 200)\n```\n\nand the result \n\n```\nno wait\nchanged:  [\"b\"]\nwait: true\nchange:id: 1 // this is unexpected\nchanged:  [\"b\"]\n```\n\nDo I use it in wrong way, or a bug?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1477",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1477/comments",
    "title": "Collection.Reset will never run validate()",
    "created_at": "2012-07-10T21:53:01Z",
    "updated_at": "2012-12-06T21:48:30Z",
    "body": "This code was added.\nhttps://github.com/documentcloud/backbone/commit/8a427f30180eab5eeda0decd4478f8eafbb1f349\ncausing a return immediately upon a silent:true being passed. This was, from what I can tell, added but never tested in regards to reset( ).\n\nThis bug mentions the forcing of it; but no other discussion as to why. I have a feeling it has to do with fetch/save always triggering validate causing slowness?\nhttps://github.com/documentcloud/backbone/issues/1059\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1476",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1476/comments",
    "title": "fetch() should allow optional URL parameters to be passed",
    "created_at": "2012-07-09T14:43:21Z",
    "updated_at": "2012-07-09T15:19:38Z",
    "body": "I find in my Backbone code that I need to pass URL parameters in with the fetch() method on Collections - some example use cases are a Pinterest-like autoloading feature, where you grab some additional items from the entire list (and I would need to pass in some parameters letting the server know which models are already loaded on the client), or a setup with 2 comboboxes, with the first one being the state, and the 2nd one auto-loading cities based on the state chosen (and I would need to pass in the state name to the cities controller to get back only the appropriate cities from the server).\n\nI've created a Mixin to do this and use it in my code, but I think it would be beneficial (and relatively easy) to add to the Backbone source code itself.\n\n```\nBackbone.ParamFetchCollection = Backbone.Collection.extend({\n\n    fetchWithParams : function(options, params) {\n        options = options ? _.clone(options) : {};\n        var url = options.url || this.url;\n        // loop through additional parameters here, appending them to url\n        if (params) {\n            url += \"?\";\n            _.each(_.keys(params), function(key){\n                url += key + \"=\" + params[key] + \"&\";\n            });\n        }\n        options.url = url;\n        return this.fetch(options);\n    }\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1475",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1475/comments",
    "title": "Uncaught TypeError in Google Chrome 22.0.1201.0 canary",
    "created_at": "2012-07-09T14:43:20Z",
    "updated_at": "2013-01-30T01:16:27Z",
    "body": "In the latest couple of Google Chrome Canary builds, `Backbone.Model.extend({})` throws an error:\n\n``` javascript\nUncaught TypeError: Object function (a,b){var c;a||(a={});b&&b.parse&&(a=this.parse(a));if(c=n(this,\"defaults\"))a=f.extend({},c,a);b&&b.collection&&(this.collection=b.collection);this.attributes={};this._escapedAttributes={};this.cid=f.uniqueId(\"c\");this.changed={};this._silent=\n{};this._pending={};this.set(a,{silent:!0});this.changed={};this._silent={};this._pending={};this._previousAttributes=f.clone(this.attributes);this.initialize.apply(this,arguments)} has no method '_bindRoutes' \n```\n\nThis might be a Chrome issue, but it might be worth further investigation to avoid it ending up in one of the stable builds of Chrome, if this be a breaking change in Chrome.\n## Repro\n1. Go to http://backbonejs.org/\n2. Open the Chrome DevTools console.\n3. Type `Backbone.Model.extend({})` and hit return.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1470",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1470/comments",
    "title": "collection.fetch() fires 'reset' rather then 'fetch' (docs issue)",
    "created_at": "2012-07-04T10:20:47Z",
    "updated_at": "2012-10-15T21:05:09Z",
    "body": "http://backbonejs.org/#Collection-fetch states :\n\n> Resets the model's state from the server by delegating to Backbone.sync. Returns a jqXHR. Useful if the model \n> has never been populated with data, or if you'd like to ensure that you have the latest server state. \n> **\"change\" event will be triggered** if the server's state differs from the current attributes. \n\nI tried this out, and i'm not seeing a 'change' event when first issuing a fetch. I am seeing a **\"reset\" event** though.\nso who's wrong - me, the code or the docs?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1469",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1469/comments",
    "title": "An attribute(\"doms\") for Backbone.View",
    "created_at": "2012-07-04T09:31:13Z",
    "updated_at": "2012-07-06T14:31:41Z",
    "body": "http://backbonejs.org/examples/todos/todos.js\n\n``` javascript\nvar AppView = Backbone.View.extend({\n    initialize: function() {\n      this.input = this.$(\"#new-todo\");\n      this.main = $('#main');\n   }\n);\n```\n\n==>\n\n``` javascript\nvar AppView = Backbone.View.extend({\n    doms:{\n          \"#new-todo\",\"input\",\n          \"#main\" ,\"main\"\n    },\n\n    initialize: function() {\n\n   }\n);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1467",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1467/comments",
    "title": "Use custom `isEqual` on models.",
    "created_at": "2012-06-28T16:46:12Z",
    "updated_at": "2012-12-05T10:17:34Z",
    "body": "I believe models should be checked for equality based purely on its attributes. For example, if You have complex nested models - current implementation of `isEqual` will fire change event even if the data hasn't been really changed.\n\nThis can be fixed with overriding `isEqual` for models like this:\n\n```\nBackbone.Model.prototype.isEqual = function(other){_(this.attributes)}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1466",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1466/comments",
    "title": "documentation question",
    "created_at": "2012-06-28T13:35:11Z",
    "updated_at": "2012-06-28T14:28:23Z",
    "body": "Hi,\n\nare there some reasons why backbone has it's html documentation instead of e.g. javadoc style?\n\nI'm creating an \"in-house library\" and use backbone as the basic framework, e.g. tableviews extends Backbone.View.\nTo create the documentation i want to use jsduck because methods, properties, ... are clearly represented.\n\nThe framework is documented but of course no inherited objects are.  Is it the preferred way to copy the documentation into an own docs/backbone.javadoc.js file or is there a way to generate it from?\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1464",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1464/comments",
    "title": "Router: support adding a catch-all '*' route",
    "created_at": "2012-06-28T00:45:56Z",
    "updated_at": "2013-03-03T17:03:54Z",
    "body": "This would be useful for handling all non-matched URLs. \n\n```\nroutes: {\n  'users/:id': 'loadUser',\n  'foo': 'bar',\n\n  '*': 'notFound'\n}\n```\n\nDoing this currently throws the error `Uncaught SyntaxError: Invalid regular expression: /^*$/: Nothing to repeat`.\n\nThe way around this would be to define it as a regular expression:\n\n```\nthis.route(/.*/, 'notFound', this.notFound);\n```\n\nHowever, due to #1463, you would need to define all of your routes via this.route(), in reverse order.  Also it would be nice to have the '*' shorthand for the routes hash.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1463",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1463/comments",
    "title": "router.route() adds routes in the wrong order",
    "created_at": "2012-06-28T00:37:08Z",
    "updated_at": "2015-05-29T13:54:44Z",
    "body": "The route definition below works as expected:\n\n```\nroutes: {\n  'comments/search': 'comments.search',\n  'comments/:id': 'comments.detail'\n}\n```\n\n_Note that although this works for the use case I'm describing here, it matches both routes rather than just comments/search. Maybe this should be a separate issue_.\n\nThe problem I'm describing here is with defining routes via the route() method. The below does _not_ work; the statements have to be reversed to work as above:\n\n```\ninitialize: function() {\n    this.route('comments/search', 'comments.search', this['comments.search']);\n    this.route('comments/:id', 'comments.detail', this['comments.detail']);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1462",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1462/comments",
    "title": "An argument for `_configure`",
    "created_at": "2012-06-27T22:59:50Z",
    "updated_at": "2012-12-04T23:22:27Z",
    "body": "I don't think I was communicating this well, so I tried to write up my thoughts on it and hopefully it is convincing. Would love to know what you guys think.\n\n---\n\nFor the most part, you can augment Backbone however you want easily and everything is peachy. But changing the initial Backbone configuration logic is not one of those cases. \n\nIt's common practice to make \"base\" classes when using Backbone so that your customatizations apply to all of your app's classes. Instead of extending from `Backbone.Model`, you always extend from `BaseModel`.\n\nThat works amazingly for customization on a per-class level. What I mean by that is that if you have an `AuthorModel`, `BookModel`, and `PageModel`, they will all need different initialization logic. All you need to do is extend from `BaseModel` and then write a custom `initialize` function in each of those models.\n\nIt also works well for customization on a class-wide level for anything post-configuration. By that I mean that despite `AuthorModel` and `BookModel` being significantly different, they might both make use of a `cleanAttributes` method you've defined in `BaseModel`.\n\nWhere the whole thing breaks down is when you want to do customize the configuration on class-wide level. There's nothing to hook into to augment the configuration logic of anything that extends from `BaseModel` before `initialize` is called. Say I want to change the way `BaseModel` works a bit by copying the options that get passed in onto `this.options` to match how Views treat options. Or maybe I want to add a way for `BaseModel` to store extra UI state in a `this.state` property instead of inside `attributes`. Or maybe I want to have my models inherit `defaults` all the way up the chain by `_.default`ing them.\n\nAnother way to think about it is that there are four main places you might want to hook into to add custom logic in to a Backbone class. The first two are handled fine as is, but there isn't a nice way to handle the third:\n\n**Before anything is configured:** Here you could provide your own augmented `constructor`. (But this could be done by augmenting `_configure` instead, which I also think is preferable.)\n\n**After it is initialized:** This is completely up to you, and most of what you're writing as a Backbone user fits in this category.\n\n**After things are configured, but before initialize:** Backbone doesn't give you a nice way to do this! There are only two annoying ways and one incomplete way I could think to do it:\n#### Augment the constructor. (incomplete)\n\n```\nconstructor : function (attributes, options) {\n    this._configureOptions();\n    Backbone.Model.prototype.constructor.apply(this, arguments);\n}\n```\n\nThat does work, but only if your added logic doesn't rely on anything else Backbone does in its `constructor`. For example, if you need to access `this.attributes` which have been parsed and attached directly to the instance, you're out of luck. Or if need to reference the `cid`? tough.\n#### Re-call your logic in every single initialize method. (annoying)\n\n```\nvar AuthorModel = BaseModel.extend({\n\n    initialize : function (attributes, options) {\n        this._configureOptions();\n        // Real initialization logic.\n    }\n});\n\nvar BookModel = BaseModel.extend({\n\n    initialize : function (attributes, options) {\n        this._configureOptions();\n        // Real initialization logic.\n    }\n});\n\nvar PageModel = BaseModel.extend({\n\n    initialize : function (attributes, options) {\n        this._configureOptions();\n        // Real initialization logic.\n    }\n});\n```\n\nYeah I _could_ do that. But I shouldn't need to keep copying and pasting that code around all over my codebase when I know upfront that I want everything that extends `BaseModel` to be configured that way.\n#### Give up initialize and create a new initialize. (annoying)\n\n```\ninitialize : function (attributes, options) {\n    this._configureOptions();\n    this.start.apply(this, arguments);\n}\n\nstart : function (attributes, options) {\n    // Real initialization logic.\n}\n```\n\nThat's also not great. Everyone who reads my code needs to be informed that what they have always known as `initialize` is now `start`. Any time I'm talking/reading about Backbone I have to mentally convert `initialize` to `start` and back. And if you accidentally override `initialize` instead, you might not even realize it until things get weird because the instance wasn't configurated properly.\n\n---\n\nSo how should it be done? My suggestion is to make all the Backbone classes have a `_configure` method that does the configuration that happens before `initialize` in the `constructor`. With a `_configure` method the problem is easily solved and you end up with this:\n\n```\n_configure : function (attributes, options) {\n    Backbone.Model.prototype._configure.apply(this, arguments);\n    // Add custom logic here.\n}\n```\n\nYou just augment `_configure` in your `BaseModel` and then you don't ever need to touch it again! All of your other extended Models will get the augmented configuration options. Class-wide configuration solved!\n\nLook familiar? That's because `Backbone.View` already has a `_configure` method that makes this kind of augmentation incredibly easy. But the other Backbone classes should get `_configure` too.\n\nAnd the `_configure` solution doesn't have any effects on the rest of Backbone source.\n### Bonus: it's great for mixins too!\n\nThe best way I've found to add functionality to an existing Backbone class without extending a completely new class is the mixin pattern. It's like the jQuery plugins of Backbone. Having a `_configure` would make it extremely easy for mixins to be grafted onto existing classes (regardless of whether it's a View, Model, Collection or Router!).\n\n```\n// Augmented `_configure` to call `_inherit`\nvar _configure = this.prototype._configure;\nthis.prototype._configure = function () {\n  this._inherit(this.inherits || []);\n  _configure.apply(this, arguments);\n};\n```\n\nSince the classes all have the `_configure` method, you can attach your custom logic to each of them the same way in your mixin. And then when you package your mixin for others, they can add inheritance to any class they want with the same syntax:\n\n```\ninheritMixin.call(BaseView);\ninheritMixin.call(DropdownModel);\ninheritMixin.call(AppRouter);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1460",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1460/comments",
    "title": "*default route takes precedence over routes defined before it ",
    "created_at": "2012-06-27T09:06:12Z",
    "updated_at": "2012-06-27T10:23:56Z",
    "body": "``` js\nvar router_one = Backbone.Router.extend({\n\n    routes: {\n\n        \"one\": \"one\",\n\n    },\n\n    \"one\": function() {\n        console.log(\"one\");\n    }\n\n});\n\nvar router_two = Backbone.Router.extend({\n\n    routes: {\n\n        \"two\": \"two\",\n        \"*default\": \"default\"\n\n    },\n\n    \"two\": function() {\n        console.log(\"two\");\n    },\n\n    \"default\" : function() {\n\n        console.log(\"default\");\n    }\n\n});\n\nnew router_one();\nnew router_two();\n\nBackbone.history.start();\n\nwindow.location.hash = \"one\";\n```\n\nThe following code produces 2 lines in the console:\n\n```\ndefault\ndefault\n```\n\nBasically the route #one is overwritten by the *default route, even though router_two (that holds the default route) is initialized after router_one. Is this normal behaviour? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1455",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1455/comments",
    "title": "Wrong change events for space-containing field names",
    "created_at": "2012-06-26T11:49:27Z",
    "updated_at": "2012-08-24T13:55:56Z",
    "body": "When I set the following field to a model `{\"a b\" : 1}`, two events are triggered: `change:a` and `b`, which, I believe, is neither expected nor correct behaviour.\n\n``` javascript\nvar model = new Backbone.Model();\nmodel.bind(\"change:a\", function() {console.log(\"change:a\")});\nmodel.bind(\"b\", function() {console.log(\"b\")});\nmodel.set(\"a b\", 5);\n```\n\nI know that:\n- real programmers don't use spaces\n- shit in shit out\n\nbut throw exceptions or document this at least.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1453",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1453/comments",
    "title": "require js config works with nodejs but not with Rhino",
    "created_at": "2012-06-25T18:49:08Z",
    "updated_at": "2012-06-25T19:39:11Z",
    "body": "I have been trying to use the optimizer in RequireJS. The build profile I set up works well with nodejs. However the same configuration doesn't work with Rhino. I keep getting Stackoverflow exception. Not sure what I am missing. Here is my build profile file build.js\n\n``` javascript\n({\n    appDir : \"../dist\",\n    mainConfigFile: \"../dist/js/main.js\",\n    modules: [\n        { name: \"main\"}\n    ]\n})\n\n```\n\n<project name=\"Desktop1\" basedir=\"..\">\n    <property name=\"src\" location=\"src\" />\n    <property name=\"webroot\" location=\"${src}/main/webapp\" />\n    <property name=\"build\" location=\"build\" />\n    <property name=\"dist\"  location=\"dist\" />\n    <property name=\"rhinojs\" location=\"${build}/js-1.7R2.jar\" />\n\n```\n<target name=\"clean\">\n    <delete dir=\"${dist}\" />\n</target>\n\n<target name=\"prepare\">\n    <mkdir dir=\"${dist}\" />\n    <copy todir=\"${dist}\">\n        <fileset dir=\"${webroot}\" />\n    </copy>\n</target>\n\n<target name=\"optimize\">\n    <java classname=\"org.mozilla.javascript.tools.shell.Main\" fork=\"true\">\n        <classpath>\n            <pathelement path=\"${rhinojs}\" />\n        </classpath>\n        <arg line=\"build/r.js -o build/build.js\"/>\n    </java>\n</target>\n\n<target name=\"all\" depends=\"optimize\">\n</target>\n```\n\n</project>\n\nHere is the exception I get\n\nBuildfile: build.xml\n\nclean:\n   [delete] Deleting directory c:\\dev\\desktop\\trunk\\Desktop\\dist\n\nprepare:\n    [mkdir] Created dir: c:\\dev\\desktop\\trunk\\Desktop\\dist\n     [copy] Copying 45 files to c:\\dev\\desktop\\trunk\\Desktop\\dist\n\noptimize:\n     [java] Optimizing (standard.keepLines) CSS file: C:/dev/desktop/trunk/Desktop/build/build/css/bootstrap.css\n     [java] Optimizing (standard.keepLines) CSS file: C:/dev/desktop/trunk/Desktop/build/build/css/Desktop.css\n     [java] Optimizing (standard.keepLines) CSS file: C:/dev/desktop/trunk/Desktop/build/build/css/esp.jquery-adjustments.css\n     [java] Optimizing (standard.keepLines) CSS file: C:/dev/desktop/trunk/Desktop/build/build/js/test/qunit/qunit.css\n     [java] \n     [java] Tracing dependencies for: main\n     [java] Uglifying file: C:/dev/desktop/trunk/Desktop/build/build/js/app.js\n     [java] Uglifying file: C:/dev/desktop/trunk/Desktop/build/build/js/collections/navItems.js\n     [java] Uglifying file: C:/dev/desktop/trunk/Desktop/build/build/js/collections/urlPatterns.js\n     [java] java.lang.StackOverflowError\n     [java]     at org.mozilla.javascript.ScriptRuntime.nameOrFunction(ScriptRuntime.java:1733)\n     [java]     at org.mozilla.javascript.ScriptRuntime.name(ScriptRuntime.java:1697)\n     [java]     at org.mozilla.javascript.gen.c1._c222(Unknown Source)\n     [java]     at org.mozilla.javascript.gen.c1.call(Unknown Source)\n     [java]     at org.mozilla.javascript.optimizer.OptRuntime.callName0(OptRuntime.java:108).......\n\nI am unable to figure out the root cause. I greatly appreciate any input or help on this issue. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1452",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1452/comments",
    "title": "Models initialized with .create() are made before server attributes are set",
    "created_at": "2012-06-25T15:43:06Z",
    "updated_at": "2012-06-25T16:21:58Z",
    "body": "Presently models made with `.create()` are initialized before they receive attributes back from the server, even if `wait:true`. I know this is probably the intended behavior, but it's less than ideal when creating models that depend on attributes provided by the server (such as an id). Ideally, I think when `wait:true`, models should wait until the server attributes are returned to be initialized. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1451",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1451/comments",
    "title": "Question: Why is parse called on model instances after a collection has fetched data from the server?",
    "created_at": "2012-06-25T13:51:28Z",
    "updated_at": "2014-09-02T15:19:05Z",
    "body": "Hello,\n\nmy problem/question is the following:\n\nI use a Backbone.Collection to fetch xml from the server. Therefore I adjusted the Collection.parse-Method. Everything is fine so far. \nI also use a Backbone.Model to fetch the data from the server in case I am not retreiving multiple items from the server but rather a single item with a specifiy ID. Again I had to adjust the \"parse\"-Method (this time in the Model itself), to digest the xml-response.\n\nAfter I did that, the Model.parse-Method would throw errors when the Collection.-fetch was called. As it is stated in the backbone-documentation the parse-Method of the individual models is called after the collection has parsed the server-response. This behavior can be suppressed by setting options.parse=false.\n\nMy question would be, nevertheless, why is the individual parse method of the models being called from the collection, even in case the collection already parsed the xml-response?\n\nThanks :-)\nTobias\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1450",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1450/comments",
    "title": "route & page reload on IE",
    "created_at": "2012-06-25T10:35:14Z",
    "updated_at": "2012-06-25T16:45:53Z",
    "body": "Hi guys \nI have the following issue I am not sure if this is how backbone is supposed to behave\n\nI start Backbone history on my auth path \n\n``` javascript\nBackbone.history.start({pushState: true, root: '/auth/'});\n```\n\nwhen IE users hit /auth/join backbone switch the url to #auth/join as the browser does not support the history api. But this \nalso reload the page. Can't this be done without reloading the page ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1447",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1447/comments",
    "title": ".create() never adds new model to collection when wait:true",
    "created_at": "2012-06-25T07:31:14Z",
    "updated_at": "2012-06-25T14:37:28Z",
    "body": "In current master (not the 0.9.2 available on backbonejs.org) there seems to be something preventing `.create()` from adding the model to the collection when `wait:true`. I couldn't spot the difference between 0.9.2 and master, but moving (or eliminating) the deletion of `options.wait` in the `.save()` method seems to fix the problem, but I'm not sure what other repercussions that has.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1443",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1443/comments",
    "title": "more consistent collection options",
    "created_at": "2012-06-23T07:51:51Z",
    "updated_at": "2012-06-23T14:38:09Z",
    "body": "In views you can pass custom options via the `options` object: And then within the view, you can access the options as `this.options` everywhere:\n\n``` javascript\nvar MyView = Backbone.View.extend({\n    initialize: function() {\n        var value = this.options.value;\n    },\n\n    somethingElse: function() {\n        doSomething(this.options.value);\n    }\n});\n```\n\nThis proves to be very useful for passing all kinds of options to configure the views.\n\nNow, in collections, there is a similar functionality available (per docs)\n\n`new Collection([models], [options])`\n\nBut strangely, you can not access those options via `this.options`. In order to access these options, you need to accept an `options` argument in your `initialize` function:\n\n``` JavaScript\nvar MyColl = Backbone.Collection.extend({\n    initialize: function(models, options) {\n        var value = options.value;\n    }\n});\n```\n\nYou can do something like this:\n\n``` JavaScript\nvar MyColl = Backbone.Collection.extend({\n    initialize: function(models, options) {\n        this.options = options;\n    }\n});\n```\n\nBut I think if it behaved like views so that we don't have to manually set the `options` object on `this` -- it would feel more consistent.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1442",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1442/comments",
    "title": "Adding attributes to Collections?",
    "created_at": "2012-06-22T16:08:17Z",
    "updated_at": "2014-07-06T06:51:14Z",
    "body": "I've looked through the closed 'enhancements' flagged for Backbone, and couldn't find anything on this specific subject, but am wondering whether attributes for Collections is something that's been investigated?\n\nPersonally, I could see plenty of utility in being able to provide a small selection of meta data to a collection.\n\nFor example, say we have an `Album` collection of `song` models:\n\n```\nvar Album = Backbone.Collection.extend({\n    model: song,\n    properties: {\n        name: \"Greatest Hits\",\n        publisher: \"Sony\"\n    }\n});\n```\n\nthe properties attribute could allow something like this:\n\n```\nAlbum.prop(\"name\"); // \"Greatest Hits\"\nAlbum.prop(\"publisher\"); // \"Sony\"\n\nAlbum.pluck(\"title\"); // \"Song1,Song2,Song3...\"\n```\n\nOtherwise, at the moment we would have something like this, which relies on that collection being populated:\n\n```\nAlbum.first().get(\"albumName\"); // \"Greatest Hits\"\n```\n\nI discovered a similar (old) topic on [Stack Overflow: Setting attributes on a collection - backbone js](http://stackoverflow.com/questions/5930656/setting-attributes-on-a-collection-backbone-js).\n\nWhere I can't rely on data being available in a collection, I'm actually having to wrap the collection in a model (model -> collection -> model) to be able to support these meta data attributes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1441",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1441/comments",
    "title": "Question: Change event on nested models",
    "created_at": "2012-06-22T16:05:06Z",
    "updated_at": "2012-06-25T18:03:40Z",
    "body": "From the docs, the change event is triggered \"when a model's attributes have changed\". If a model contains a nested model or collection, would it make sense to trigger the \"change\" event on the parent model, as the state of the parent model is indeed \"changing\"?\n\n``` coffee\n# Container Model\ncontainer = new Backbone.Model\n   name : \"Test\"\n   description : \"Demo of Functionality\"\n\n# Nested collection\ncontainer.set('tags', new Collection([{\n   tagName : \"new\"\n,\n   tagName : \"featured\"\n]))\n\n# Changing an attribute on the nested collection,\n# at which point the \"container\" Model has \"changed\"\n# in the sense that _.isEqual between the current and\n# previous state would return false\ncontainer.get('tags').at(1).set('tagName', 'closed')\n```\n\nJust wanted to see if this functionality would make sense, or if there could be a separate event that indicated a proxied change event was occurring on a child\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1438",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1438/comments",
    "title": "Model.validate failing to stop Model.save() from saving to server",
    "created_at": "2012-06-22T07:16:40Z",
    "updated_at": "2012-12-04T23:26:25Z",
    "body": "I know that a similar issues to this have occurred in the past and have been fixed, but I am having a problem in that Model.save() is still saving the Model to the server event though validation (via Model.validate) is failing.  At first I assumed that it was a bug in my code, but I am suspicious that this could be an issue with Backbone.js.  In each case Model.validate() will return a value, and trigger an error event, however, the model is still saved and the success callback defined in Model.save() is run (instead of the error callback function). I wrote a simple sample which when run reproduces the behavior mentioned in this issue.\n\nThe method defaultPage is a route callback in Router.\n\n``` javascript\n  defaultPage: function(path) {\n      var contact = new Contact({\n        surname: 'Franklin',\n        given_name: 'Johnathon',\n        org: '',\n        phone: new Array(),\n        email: new Array(),\n        address: new Array({\n          street: '',\n          district: '',\n          city: '',\n          country: '',\n          postcode: ''\n        }),\n        validationDisabled: true\n      });\n      var defaultView = new DefaultView({ model: contact });\n      this.pageManager.showView(defaultView);\n```\n\nThe View performing the Model set and save operations is a follows:\n\n``` javascript\n  var DefaultView = Backbone.View.extend({\n    initialize: function() {\n      _.bindAll(this, 'render', 'saveContact', 'validationError');\n      this.model = this.options.model;\n      this.model.on('error', this.validationError);\n      this.render();\n    },\n    events: {\n      'click button': 'saveContact'\n    },\n    render: function() {\n      this.$el.html('<h3>Save, Set callback</h3><textarea id=\"callback\" rows=\"5\" cols=\"60\"></textarea>');\n      this.$el.append('<h3>Validation error</h3><textarea id=\"error\" rows=\"5\" cols=\"60\"></textarea>');\n      this.$el.append('<button>Save</button>');\n      return this;\n    },\n    saveContact: function() {\n      this.model.set(\n        'email', \n        [\n          { value: 'tim@tim.com' }, \n          { value: '11111111' }\n        ], \n        function(model, error) {\n          this.$('#callback').val('Set error: ' + JSON.stringify(response));\n        }\n      );\n      this.model.unset('validationDisabled');\n      this.model.save(this.model.attributes, {\n        success: function(model, response) {\n          this.$('#callback').val('Save Success: ' + JSON.stringify(response));\n        },\n        error: function(model, response) {\n          this.$('#callback').val('Save Error: ' + JSON.stringify(response));\n        }\n      });\n    },\n    validationError: function(model, error) {\n      this.$('#error').val(JSON.stringify(error));\n    }\n  });\n```\n\nModel definition\n\n``` javascript\nvar Contact = Backbone.Model.extend({\n    urlRoot: '/contacts.json',\n    idAttribute: '_id',\n    defaults: function() {\n      return {\n        surname: '',\n        given_name: '',\n        org: '',\n        phone: new Array(),\n        email: new Array(),\n        address: new Array({\n          street: '',\n          district: '',\n          city: '',\n          country: '',\n          postcode: ''\n        })\n      };\n    },\n    validate: function(attributes) {\n      if (typeof attributes.validationDisabled === 'undefined') {\n        console.log(attributes);\n        var errors = new Array();\n        // Validate surname.\n        if (_.isEmpty(attributes.surname) === true) {\n          errors.push({\n            type: 'form',\n            attribute: 'surname',\n            message: 'Please enter a surname.'\n          });\n        }\n        // Validate emails.\n        if (_.isEmpty(attributes.email) === false) {\n          var emailRegex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,6}$/i;\n          // Stores indexes of email values which fail validation.\n          var emailIndex = new Array();\n          _.each(attributes.email, function(email, index) {\n            if (emailRegex.test(email.value) === false) {\n              emailIndex.push(index);\n            }\n          });\n          // Create error message.\n          if (emailIndex.length > 0) {\n            errors.push({\n              type: 'form',\n              attribute: 'email',\n              index: emailIndex,\n              message: 'Please enter valid email address.'\n            });\n          }\n        }\n\n        if (errors.length > 0) {\n          return errors;\n        }\n      }\n    }\n  });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1436",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1436/comments",
    "title": "extends overrides super class prototype attributes",
    "created_at": "2012-06-21T16:59:43Z",
    "updated_at": "2012-06-21T18:20:18Z",
    "body": "If you create a Class that extends from Backbone.View and gives that class an attributes property but no id and than you make an other class that extends from the first Class and you give the second Class an property id. Than the first class also gets this id from the child class.\nThe constructor puts the id property in his attributes property, but if his own class doesn't have an attributes property it puts the id in the attributes of his parent because of the prototype chain. I hope it is understandable:\n\nhere a jsfiddle for better understanding what i mean: http://jsfiddle.net/UUnUS/4/\n\nIn the fiddle the View v1 has the id from the View v2\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1433",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1433/comments",
    "title": "Why Model.save() doesn't validate by default?",
    "created_at": "2012-06-21T05:57:28Z",
    "updated_at": "2012-06-22T14:31:44Z",
    "body": "Hi,\n\nWhy **Model.save()** doesn't validate by default?\n\nBecause of this part in the save method:\n\n``` javascript\n      // If we're \"wait\"-ing to set changed attributes, validate early.\n      if (options.wait) {\n        if (!this._validate(attrs, options)) return false;\n        current = _.clone(this.attributes);\n      }\n```\n\nTo workaround this I tried **Model.isValid()** but this method doesn't trigger the \"error\" event :-/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1430",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1430/comments",
    "title": "Sort operation done before merge",
    "created_at": "2012-06-20T08:57:40Z",
    "updated_at": "2012-06-21T16:21:28Z",
    "body": "When adding models to a collection the sort is done before the merge.\nThis result in unsorted collection when the add operation is done.\n( Of course the merge can update the sort criteria )\n\n```\n if (this.comparator && options.at == null) this.sort({silent: true});\n  // Merge in duplicate models. \n  if (options.merge) { \n        for (i = 0, length = dups.length; i < length; i++) {\n          if (model = this._byId[dups[i].id]) {\n           added model.clear({silent:true}); *\n            model.set(dups[i], options);\n          }\n        }\n      }\n```\n- Also I think the model should be reset before set \n  ( Server api may not send empty properties which will result in client model being in an inconsistant state )\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1428",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1428/comments",
    "title": "It could be amazing to integrate BB with sql.js",
    "created_at": "2012-06-19T18:54:04Z",
    "updated_at": "2012-06-19T19:22:59Z",
    "body": "https://github.com/kripken/sql.js\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1427",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1427/comments",
    "title": "public inherits helper",
    "created_at": "2012-06-19T09:40:26Z",
    "updated_at": "2012-06-19T12:43:20Z",
    "body": "It would be great if inherits helper function was somehow publicly reachable outside backbone. It's a neat implementation and I'm usually copypasting it to use it as I please.\n\nIs there a reason it's private?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1424",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1424/comments",
    "title": "Issue with Model.url(), the documentation doesn't corresponds to source code.",
    "created_at": "2012-06-18T15:22:54Z",
    "updated_at": "2012-06-21T02:01:35Z",
    "body": "Hi,\n\nI'm struggling to get my app working properly with restful routes due the fact that the Model's `url` function works differently than it's documented.\n\nIn the documentations says: \n`Generates URLs of the form: \"/[collection.url]/[id]\", \nfalling back to \"/[urlRoot]/id\" if the model is not part of a collection.`\n\nsee: http://backbonejs.org/#Model-url\n\nAnd in the code is exactly inverse, so it looks first for `[urlRoot]/id` and falling back to `[collection.url]/[id]`\nReference code:\n`var base = getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();`\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L425\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1420",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1420/comments",
    "title": "Unnecessary images on the documentation page",
    "created_at": "2012-06-17T09:43:17Z",
    "updated_at": "2012-06-21T14:42:35Z",
    "body": "The documentation page http://documentcloud.github.com/backbone/, is loading a total of 42 images. Of them, 40 are the screen shots of the applications that are using backbone.\n\nNow if I just want to see a piece of documentation during development, I will need to quickly load the page. And at that time, I don't need to load all those images. But every time I load up the page, it eats my bandwidth unnecessarily.\n\nMake the loading of examples optional.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1419",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1419/comments",
    "title": "Can I specify HTTP method when calling save?",
    "created_at": "2012-06-16T20:09:11Z",
    "updated_at": "2012-06-16T20:14:31Z",
    "body": "For save method, as per document,  \u201cIf the model isNew, the save will be a \"create\" (HTTP POST), if the model already exists on the server, the save will be an \"update\" (HTTP PUT).\u201d\nThe flow that we\u2019ve is: \n1) From a GET, there is a bunch of object-IDs received\n2) Fill in an object (a new backbone model) with the object-id from the GET and additional known fields\n3) Update these objects with a HTTP PUT\n\nWhat is the easy way to get around the \u201cisNew-> POST otherwise, PUT\u201d default  without overly complicated logic.  Would also be possible to over-ride the default behavior by passing the specific method \u201cPOST/PUT\u201d to the save method?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1417",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1417/comments",
    "title": "Model changes are not fired when updated via collection reset",
    "created_at": "2012-06-16T09:08:09Z",
    "updated_at": "2012-06-16T20:11:50Z",
    "body": "When you call collection.fetch() and a list of models are returned from server, which differ from the models in the browser, the model attributes get updated but unfortunately no `change` event is filed because `fetch` defaults to using `reset` to update the collection, which by default uses the `silent` option. This behavior is not logically expected. The default behavior when using `fetch` should fire `change` on models if changes in attributes are detected. The relevant source code from backbone.js is included below\n\n``` javascript\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any `add` or `remove` events. Fires `reset` when finished.\n    reset: function(models, options) {\n      models  || (models = []);\n      options || (options = {});\n      for (var i = 0, l = this.models.length; i < l; i++) {\n        this._removeReference(this.models[i]);\n      }\n      this._reset();\n      this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return this;\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `add: true` is passed, appends the\n    // models to the collection instead of resetting.\n    fetch: function(options) {\n      options = options ? _.clone(options) : {};\n      if (options.parse === undefined) options.parse = true;\n      var collection = this;\n      var success = options.success;\n      options.success = function(resp, status, xhr) {\n        collection[options.add ? 'add' : 'reset'](collection.parse(resp, xhr), options);\n        if (success) success(collection, resp);\n      };\n      options.error = Backbone.wrapError(options.error, collection, options);\n      return (this.sync || Backbone.sync).call(this, 'read', this, options);\n    },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1415",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1415/comments",
    "title": "Backbone.Model, commonjs and module.exports",
    "created_at": "2012-06-15T13:41:31Z",
    "updated_at": "2012-06-15T16:00:58Z",
    "body": "This is something I noticed while working with Backbone.Model and commonjs.\n\nTake the below code example\n\nmodel.js\n\n```\nvar Backbone = require('backbone');\n\nmodule.exports = Backbone.Model.extend({\n\n  urlRoot: 'some-url'\n\n});\n```\n\nview.js\n\n```\nvar MyModel = require('model');\n\nvar m = new MyModel();\nm.isNew(); // Returns false, not true as expected\n```\n\nThe reason for this is that in commonjs each module imported is automatically given an id attribute containing the path to the module that the object was imported from. Backbone.Model uses the id attribute internally to contain the unique identifier of the object contained in the model. However when using with module.exports and commonjs, there is a conflict because commonjs also uses the id attribute. This makes things like model.isNew() not work as expected. This can be worked around using exports.Model instead of module.exports.\n\nIt could perhaps be useful to change the Backbone.Model.id attribute to _id or similar to avoid conflicts with commonjs.\n\nI hope this has helped anyone else who was confused by this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1413",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1413/comments",
    "title": "Opera 12 fails on \" Router: routes via navigate with {replace: true} \"",
    "created_at": "2012-06-15T02:09:45Z",
    "updated_at": "2012-06-21T03:19:08Z",
    "body": "1. failed\n   Expected:   \"#search/manhattan/start_here\"\n   Result:     \"#search/manhattan/then_here\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1412",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1412/comments",
    "title": "Trigger \"sync\" event for fetch also",
    "created_at": "2012-06-14T22:36:04Z",
    "updated_at": "2012-06-15T15:32:21Z",
    "body": "I dont know if the name \"sync\" is really what it should be called, but when I have a model/collection with an \"id\" and I try to fetch it from server to get all the information I would like to be triggered to notify all my observers. I implemented my own way, just like save/destroy method.. but would be better if backbone.js had it already \n\n``` coffeescript\nfetch: (...) ->\n   options.success = (resp, status, xhr) =>\n       success resp, status, xhr  if success\n       @trigger \"sync\", model, resp, options\n\n   ...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1410",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1410/comments",
    "title": "toJSON function's parameter misleading",
    "created_at": "2012-06-14T11:27:16Z",
    "updated_at": "2012-06-14T14:18:56Z",
    "body": "Lines 224-226:\n\n```\ntoJSON: function(options) {\n  return _.clone(this.attributes);\n},\n```\n\n`options` parameter never used - why is it there? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1407",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1407/comments",
    "title": "Collection.parse should be called in .add if options.parse is true",
    "created_at": "2012-06-13T18:50:36Z",
    "updated_at": "2012-12-07T22:02:02Z",
    "body": "In the constructor of Collection (currently line 554 - https://github.com/documentcloud/backbone/blob/master/backbone.js#L554), the below line indicates that the `reset` method, or `add` method called by `reset`, should check `options.parse`, and if if true, call `parse` on the models passed in.\n\n```\nif (models) this.reset(models, {silent: true, parse: options.parse});\n```\n\nHowever, there is no such logic in the `add` or `reset` methods of Collection. Seems to be an oversight.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1406",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1406/comments",
    "title": "options and deep cloning",
    "created_at": "2012-06-13T14:12:49Z",
    "updated_at": "2012-09-06T12:52:48Z",
    "body": "Sorry if this topic becomes annoying.\n\nI have 2 issues with backbones options.\n1. It is not deep-cloned. You will say - it is too hard. Ok, then provide please a consistent support for function which can return options object. I think this should be also better documented, because the result of this  is a very incomprehensible behaviour of non singletons. Instances  start to communicate on a magic way - no one will understand this.\n   \n   ```\n   Backbone.View.extend({\n       options: function() { \n           return {test: 123};\n       }\n   });\n   ```\n2. Inconsistent options support. Views, Models and Collections initialize method accept options object, but only view will attach options to the instance. Is there any real reason to make this exception? I use options in all 3 cases,  but have to set this.options in case of Models and Collections. There are good usecases to have options in models and collections.\n\nBest,\nOleg \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1403",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1403/comments",
    "title": "Document behavior of sync event when success or error callback is specified",
    "created_at": "2012-06-13T02:03:40Z",
    "updated_at": "2012-06-16T14:49:54Z",
    "body": "Bugs #1229 and #997 mention that the 'sync' event doesn't get triggered when the user specifies a success or error callback in the options for save or destroy. Those bugs were closed with the response that the success or error callbacks should trigger the event on their own. That is perfectly reasonable, but as far as I can see this is not documented in the documentation on backbonejs.org.\n\nMy recommendation is to add a note about this behavior in the documentation of the save and destroy methods.\n\nThis will make the behavior clear and headaches for people that are puzzled why the sync event is never called.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1402",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1402/comments",
    "title": "Very minor re-order of lines in Model constructor",
    "created_at": "2012-06-12T21:54:14Z",
    "updated_at": "2012-06-13T05:31:40Z",
    "body": "Currently `this.collection` is set on a model after `parse` is called:\n\n```\nvar Model = Backbone.Model = function(attributes, options) {\n  var defaults;\n  attributes || (attributes = {});\n  if (options && options.parse) attributes = this.parse(attributes);\n  if (defaults = getValue(this, 'defaults')) {\n    attributes = _.extend({}, defaults, attributes);\n  }\n  if (options && options.collection) this.collection = options.collection;\n```\n\nBecause `parse` is such a good place to extend backbone, for example to implement nested collections, and `this.collection` can be extremely helpful in doing such extending, could you please modify the code order to:\n\n```\nvar Model = Backbone.Model = function(attributes, options) {\n  var defaults;\n  if (options && options.collection) this.collection = options.collection;\n  attributes || (attributes = {});\n  if (options && options.parse) attributes = this.parse(attributes);\n  if (defaults = getValue(this, 'defaults')) {\n    attributes = _.extend({}, defaults, attributes);\n  }\n```\n\nSimple change, shouldn't affect anything else, and gives `parse` one extra piece of information to work with.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1401",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1401/comments",
    "title": "Todo example: \"Uncaught TypeError: Cannot read property 'localStorage' of undefined\" when deleting a note by deleting contents",
    "created_at": "2012-06-12T19:24:21Z",
    "updated_at": "2012-10-12T22:19:13Z",
    "body": "In the todo example, when you delete a note by clearing the contents and hitting enter or clicking outside, you get the error. It appears that to fix this the \n\nthis.model.save({title: value});\n\nstatement should be wrapped in an else so it's not called if !value.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1399",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1399/comments",
    "title": "Permission denied issue in backbone.js on IE7 in version Backbone.js 0.9.2",
    "created_at": "2012-06-12T15:41:20Z",
    "updated_at": "2013-01-04T00:48:41Z",
    "body": "I am using backbone.js version 0.9.2 and I get the following error when I access my application in IE7. I see the failure at the following line in backbone.js\n\nSCRIPT70: Permission denied \nbackbone.js, line 982 character 7\n\nI set breakpoints in backbone.js and see the error occurs on the following line in the Backbone.History - navigate() method. \n\nif (this.iframe && (frag != this.getFragment(this.getHash(this.iframe)))) {\n          // Opening and closing the iframe tricks IE7 and earlier to push a history entry on hash-tag change.\n          // When replace is true, we don't want this.\n          if(!options.replace) this.iframe.document.open().close();\n          this._updateHash(this.iframe.location, frag, options.replace);\n        }\n\nWhen the above code is executed this.getHash(this.iframe) is called and the getHash method thorws the error at line \nvar match = loc.href.match(/#(.*)$/); \n\nany attempt to access this.iframe.location or this.iframe.document causes a Access denies or Permission denied error. Can someone help me fix this issue. \n\neverything works fine in IE9 and IE 8 mode. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1397",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1397/comments",
    "title": " navigate same url",
    "created_at": "2012-06-12T10:10:36Z",
    "updated_at": "2012-06-12T14:16:38Z",
    "body": "current backbone does not allow navigating to a same url.\n\nso, i modified the navigate function\nnavigate: function(fragment, options) {\n... if (this.fragment == frag)  return; ...\n}\n\nto \nif (this.fragment == frag) {\n    // custom hack to allow same/duplicate fragment\n    if (!(options && options.duplicate)) {\n        return;  \n    } \n}\n\ne.g. usage - \nappRouter.navigate(aSameUrl, {\n    trigger : true,\n    replace : true,\n    duplicate : true\n});\n\nappreciated if this feature added to backbone next time.\n\nthanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1395",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1395/comments",
    "title": "Docs/Todo example: Collection instances should not be named uppercase",
    "created_at": "2012-06-11T20:33:59Z",
    "updated_at": "2012-12-07T20:17:35Z",
    "body": "This is nitpicking about the docs, so be warned. ;)\n\nFor some reason people name their Backbone collections with an uppercase letter at the beginning. This is so widespread across several Backbone projects nowadays that it\u2019s almost a convention.\n\nExcept that this is against all JavaScript naming conventions I\u2019ve seen in last decade. Every style guide I know recommends this naming for constructors or namespaces only (correct me if I missed something).\n\nIn the documentation examples the naming of collections is inconsistent. Most of the times they are lowercase, but in some method examples they suddenly turn uppercase:\n\nhttp://documentcloud.github.com/backbone/#Collection-fetch\nhttp://documentcloud.github.com/backbone/#Collection-create\nhttp://documentcloud.github.com/backbone/#Collection-reset\n\n`Accounts.fetch()` might make sense at first glance, but it does not at the second glance. This may remind people of Rails\u2019 `ActiveRecord`, but it\u2019s not like that. In Rails, it would be `Account.all()`. This makes sense since it\u2019s a class with a static method which just returns a list synchronously without changing the (overall) state of `Account`. However, `Accounts.fetch()` doesn\u2019t make sense: It does not return a list, but an Ajax promise. `fetch` is not a pure function, it fills `Accounts` itself asynchronously.\n\nThe Todo example spreads this unconventional naming:\nhttps://github.com/documentcloud/backbone/blob/master/examples/todos/todos.js#L80\n\nEven as a pro JavaScripter, I find this naming confusing:\n- `Todo`\n- `Todos`\n- `TodoList`\n\nCould you guess the difference between `TodoList` and `Todos`? Could you guess that one is a class and one an instance of this very class? So which is which?\n\nYou could say that `Todos` is somehow a singleton since it\u2019s a global, central storage. Fine, but I don\u2019t know a language or framework which names singleton _instances_ like that. I could understand this notion if a \u201cmaster\u201d collection was purely used for querying (`get`, `where`, `find`, `map`, `reduce` etc.), rather then manipulating it as a list. But Backbone collections are more than that, and they are manipulated almost always in practice.\n\nThe identifier `Todos` is used mostly in the `AppView`. The `AppView` is actually a list view (for the most part). So it should have the todos collection as `this.collection`. This removes the need to have so many `Todos.something` identifiers.\n\nBtw, I\u2019d love to see a complete overhaul of the Todo example like someone did it here:\n\nhttp://wekeroad.com/2011/08/11/the-backbonejs-todo-list-sample-refactored-part-1\nhttp://wekeroad.com/2011/08/12/the-backbone-js-todo-list-refactored-part-2\n\nSee also #642 - please go on where the contributor started, this is so important that the maintainers should take over IMHO.\n\nI cannot stress how important good example code in the docs and a good example project are for Backbone beginners to get pointed into the right direction.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1393",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1393/comments",
    "title": "TypeError: 'undefined' is not a function (evaluating 'this.el.html( template )')",
    "created_at": "2012-06-10T23:09:48Z",
    "updated_at": "2012-06-11T02:41:47Z",
    "body": "I am new to github & backbone.js. Sorry for the format.\n\nI am using \njquery 1.7.2\nunderscore 1.3.3\nbackbone 0.92 all from cloudflare can\n\n SearchView = Backbone.View.extend \n\n```\nrender: function(){\n    // Compile the template using underscore\n    var template = _.template( $(\"#search_template\").html(), {} );\n    // Load the compiled HTML into the Backbone \"el\"\n    this.el.html( template );\n```\n\n $(document).ready(function() {   var search_view = new SearchView ( { el: $ ( \"#search_container\" ) });    });\n\nIs this issue with $. When I do console log for this.el it doesn't give me html() function, but I can see innerHtml \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1392",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1392/comments",
    "title": "@set will throw \"Uncaught TypeError: Cannot use 'in' operator to search for 'id' in ...\"",
    "created_at": "2012-06-08T22:49:31Z",
    "updated_at": "2012-11-01T05:06:15Z",
    "body": "This will happen in a Model when I try to set some a variable\n\n@set('albums', [])\n\nto use later when i parse through some object, make API calls and wait for them to come back with data which then i format and then push into that. Most of the time it works fine but then every once and a while it just throws that error, and everytime from then on it will throw that error when I try to do @set anywhere in the project. Kind of weird.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1391",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1391/comments",
    "title": "Misleading documentation re overriding Model.set",
    "created_at": "2012-06-08T21:40:04Z",
    "updated_at": "2013-06-03T20:29:17Z",
    "body": "[The documentation](http://backbonejs.org/) defines `Model.set`'s function arguments like this:\n\n`model.set(attributes, [options])`\n\nAnd down further states that one could override `set` like this:\n\n```\nvar Note = Backbone.Model.extend({\n    set: function(attributes, options) {\n        Backbone.Model.prototype.set.call(this, attributes, options);\n        ...\n    }\n});\n```\n\nBut this will result in buggy code because the _real_ function arguments from the actual code are:\n\n`set: function(key, value, options) {`\n\nSo in order to properly override `set`, one would need specify the true arguments, _and_ juggle those arguments around to determine whether `value` is really a value, or whether `value` is actually `options`, and so forth. It might also be a good idea to mention that `unset` calls `set`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1389",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1389/comments",
    "title": "Backbone.Collection.remove() blows up if called with own backing store",
    "created_at": "2012-06-08T19:49:53Z",
    "updated_at": "2012-06-09T11:25:52Z",
    "body": "If you call remove like this:\n\n collection = new Backbone.Collection([{},{},{},{},{}])\n collection.remove(collection.models)\n\nThe collection will only have every other model removed, as the remove method does not protect itself against this case.\n\nI think that it should either throw if this is the case, or iterate the given array in a way that is safe against it being removed from.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1388",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1388/comments",
    "title": "Inconsistent Use of Root in 0.9.2",
    "created_at": "2012-06-08T16:51:32Z",
    "updated_at": "2012-11-01T04:59:00Z",
    "body": "I ran into a problem in which navigating to the root would cause an incorrect URL.  Example: root is '/root/', navigating to '/root' causes the URL '/root/root' to be populated in the browser.  I believe I have traced this to the inconsistent stripping of root:\n\nIn `getFragment`, Backbone checks if the URL starts with the root (if so, removes the root) then runs the routeStripper regex:\nhttps://github.com/documentcloud/backbone/blob/0.9.2/backbone.js#L989\n\nIn `navigate`, Backbone runs the routeStripper regex _then_ checks if the URL starts with the root:\nhttps://github.com/documentcloud/backbone/blob/0.9.2/backbone.js#L1098\n\nThis means that for the url '/root/', `getFragment` returns '' but `navigate` tries to navigate to 'root/' (because '/root/' is stripped to 'root/' which then does not contain '/root/').\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1387",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1387/comments",
    "title": "Backbone.history.start not firing default route with root param",
    "created_at": "2012-06-07T23:35:30Z",
    "updated_at": "2012-06-18T13:49:16Z",
    "body": "I have an app where the url is in the format:\n\n``` javascript\n    http://my.app.com/root\n```\n\nMy routes look like this:\n\n``` javascript\n      routes: {\n          '': 'index'\n      },\n```\n\nHowever when I call Backbone history start:\n\n``` javascript\n     Backbone.history.start({pushState: true, root: '/root/'});\n```\n\nand the user navigates to  http://my.app.com/root,  it does not fire the '' route:\n\nIt does fire the '' route if the user adds a slash to the end of the url:\n\n``` javascript\n   http://my.app.com/root/\n```\n\nI noticed that in the start function for history, it calls this.loadUrl() without params.  This ends up getting translated as a fragment of 'root' on your side and tries to get matched to my list of routes.  Since I don't have a route called 'root', it doesn't match.\n\nMy question is, shouldn't you infer in loadUrl that root should point to the empty route and hit the index function like above?  Otherwise I need to add 'root' as a route and point to the index function in addition to the empty route.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1386",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1386/comments",
    "title": "Sorting a Backbone Collection in an Add event handler re-fires the Add event",
    "created_at": "2012-06-07T18:49:21Z",
    "updated_at": "2012-06-08T16:49:03Z",
    "body": "Please see fiddle: http://jsfiddle.net/DD23n/9/\n\nCan I not call sort within the add event handler? It re-fires the add event and I end up getting duplicate content in the DOM etc... Is this a bug?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1384",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1384/comments",
    "title": "Parse methods provide no events to attach callbacks",
    "created_at": "2012-06-06T16:39:43Z",
    "updated_at": "2012-06-07T17:25:30Z",
    "body": "It's difficult to tell when a parse() method on a collection or model returns. I feel there should be a way for a user of Backbone to easily implement a callback that fires when a collection/model has finished parse()ing. As it stands, adding a custom event requires that one overwrite the default parse() method.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1383",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1383/comments",
    "title": "View constructor doesn't set custom properties",
    "created_at": "2012-06-06T15:46:06Z",
    "updated_at": "2012-06-06T17:12:21Z",
    "body": "I'm used to the model constructor, where all the properties passed to the constructor inside the JSON object are automatically assigned. So it came as a surprise when I had to assign custom properties like this\n\n``` javascript\nMyView = Backbone.View.extend({\n    initialize: function(){\n        //this is not necessary in Model classes\n        this.myProperty = this.options.myProperty;\n    }\n}\n$(function(){\n    //className becomes one of the attributes, myProperty doesn't even became a class property\n    var myView = new MyView({className: \"myView\", myProperty : \"mine!\"});\n});\n```\n\nI want myProperty to be part of the class, but not be attached to the generated \"el\" like \"className\" is. Instead, it just sits in \"this.options\", unless I set it by hand.\nIs this intended, am I doing something wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1379",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1379/comments",
    "title": "Making Collection.add more easy to tweak",
    "created_at": "2012-06-06T09:49:36Z",
    "updated_at": "2012-06-06T12:05:59Z",
    "body": "I've met a bunch of cases where I couldn't tweak `Collection.add` the way I wanted to.\n\n1) tweaking `Collection.add` so that it would behave like `addOrUpdate` (see also #137).\n\n2) maintaining a store with one unique instance for each model, all collections sharing the same instances from this store. Example :\n\n``` javascript\nvar store = new Backbone.Collection();\n\nvar MyModel = Backbone.Model.extend({});\nvar MyCollection = Backbone.Collection.extend({\n\n    model: MyModel,\n\n    // What I'd like to be able to do - not possible right now\n    // since you can pass raw attributes or list of models\n    add: function(model) {\n        var existing = store.get(model.id);\n        if (existing) model = existing;        // if model exist in store, add the instance from store instead\n        else store.add(model);                 // else, maintains the store up-to-date and proceed with adding\n        MyCollection.prototype.add.call(this, model);\n    }\n\n});\n```\n\nThere is actually a rather simple solution (unless I've missed something) which would allow those tweaks ... putting the _actual_ `add` or `insert` part in a separate method, that you could override, and always get a single vivified model as argument.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1378",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1378/comments",
    "title": "IE8: Backbone.View.make creates HTML5 elements with `:` prefix",
    "created_at": "2012-06-05T20:10:00Z",
    "updated_at": "2012-06-06T20:23:03Z",
    "body": "The behavior seen here is almost identical with a defect in the [HTML5Shiv](https://github.com/aFarkas/html5shiv/issues/54).\n\nFor example (execute in IE8):\n\n``` javascript\nvar view = new Backbone.View();\nvar el = view.make(\"nav\");\nconsole.log(el.outerHTML);\n// \"<:nav></:nav>\"\n```\n\nIt _should_ render a proper nav element (`<nav></nav>`). The end result is that there is now a node in the document that cannot be styled (since a `:` prefix indicates a pseudo-class).\n\nI noticed this while defining the `nav` element as the tagName of a view object:\n\n``` javascript\nvar myView = Backbone.View.extend({\n  tagName : 'nav',\n\n  initialize : function(){}\n\n  // ...\n});\n```\n\nMy specific case is using Backbone 0.5.3, but I checked in 0.9.2 and the issue is still present.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1377",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1377/comments",
    "title": "Calling model.save() skips before sync validation",
    "created_at": "2012-06-05T14:43:27Z",
    "updated_at": "2012-10-01T21:06:27Z",
    "body": "I'm using Backbone.js 0.9.2 and Underscore.js 1.3.3  and when I call `this.model.save()` on my view the validation before the sync is getting skipped, but the after sync validation gets executed. This issue disappears when calling `this.model.save({})` . Is this the intended behavior or is this a bug?\n\nI found that if I remove replace the condition in line https://github.com/documentcloud/backbone/blob/master/backbone.js#L343\nwith `if (_.isObject(key)) {` it works fine.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1376",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1376/comments",
    "title": "general collection event",
    "created_at": "2012-06-04T07:29:19Z",
    "updated_at": "2012-06-04T11:54:34Z",
    "body": "Hello!\nFor my HTML/JavaScript table I have my own slider. Everytime the number of entries in the Backbone Collection changes, I have to adjust the size of this slider. So I have to \"listen\" to 3 Events (reset, add and remove) in the slider widget. If there would be a general \"lengthchange\"?! event, I would only have to listen to this one event.\nMaybe some other developers would also benefit from this change?\nThanks a lot\nWolfgang\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1375",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1375/comments",
    "title": "Backbone.Collection constructor function call order",
    "created_at": "2012-06-04T02:24:19Z",
    "updated_at": "2012-12-07T22:03:37Z",
    "body": "Been trying to extend the Backbone.Collection and ran into this little annoyance.\n\nWhen creating a collection via the constructor and passing in models, there is no way to recognise that the models have been applied unless a further function call is made.\n\nIf you extend the Collection's initialize method, the state is still not complete (no models will exist), therefore you can't simply manipulate the Collection.\n\n**The Fix**\nReorder the stack so that the initialize method is called last (just as it is in the Model):\n\n``` javascript\n var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator) this.comparator = options.comparator;\n    this._reset();\n    // The Swap\n    if (models) this.reset(models, {silent: true, parse: options.parse});\n    // Make this the last call\n    this.initialize.apply(this, arguments);\n };\n```\n\nThere is also the path of letting the Collection take the **silent** flag from the options passed rather than being a fixed flag.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1370",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1370/comments",
    "title": "Backbone.View -- this._ensureElement();",
    "created_at": "2012-06-02T06:52:08Z",
    "updated_at": "2013-07-07T17:46:43Z",
    "body": "I consider \u2018this._ensureElement();\u2019  this processing operations into 'this.initialize.apply(this, arguments);' more reasonable to facilitate the flexible configuration of the el.\nThank you.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1368",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1368/comments",
    "title": "Backbone.emulateHTTP should be override-able via a param",
    "created_at": "2012-06-01T17:22:48Z",
    "updated_at": "2012-06-03T04:55:47Z",
    "body": "Currently, the only way to control `emulateHTTP` setting is to set it at the global level. Our problem is that we have some models that need to use `emulateHTTP`, and others that don't. Backbone allows you to _redefine_ `Backbone.sync` in a model or collection, but this is not ideal, because then we have to re-implement _all_ of the behavior of `Backbone.sync` in that method, when all we _really_ want to do is alter this one setting. Essentially, what we want to do is this:\n\n``` coffeescript\nclass MyModel extends Backbone.Model\n  sync: ->\n    super emulateHTTP: false\n```\n\nAn even better solution, actually might be the ability to over-ride this behavior in the model as a property:\n\n``` coffeescript\nclass MyModel extends Backbone.Model\n  emulateHTTP: false\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1367",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1367/comments",
    "title": "Initializing a collection with models, initialize function is called before models are added",
    "created_at": "2012-06-01T12:26:49Z",
    "updated_at": "2012-06-02T15:57:24Z",
    "body": "``` javascript\nvar video = Backbone.Model.extend({\n    defaults : {\n        \"title\" : \"\",\n        \"description\" : \"\"\n    }\n});        \n\nvar collection = Backbone.Collection.extend({\n\n    model: video,\n\n    initialize : function(videos) {\n\n        console.log(videos); // Array of videos passed in, not models yet\n        console.log(this.length); //Even though I initialized the collection with 2 models, the length is 0 \n        console.log(this.models); // and the models array is empty\n\n    }\n\n});\n\nvar videos = new collection([{ title : \"new video\" }, { title : \"new video\" }]); \nconsole.log(videos.models[0]);//video model\n\u200b\n```\n\nThis issue appeared when I updated from 0.5 to 0.9. \nI have a collection that flags models it was initialized with, and that code stopped working. Is this expected behaviour? Is there a workaround? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1366",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1366/comments",
    "title": "Routes incorrectly fired on same URL",
    "created_at": "2012-06-01T02:04:11Z",
    "updated_at": "2012-06-18T13:50:17Z",
    "body": "Go to http://backbonejs.org/\n\nPaste into the console:\n\n```\n$(window).on('popstate', function () {\n  console.debug('popstate', Backbone.history.fragment, '>', Backbone.history.getFragment());\n});\nBackbone.history = new Backbone.History();\nBackbone.history.start({pushState: true});\nBackbone.history.route(/^foo$/, function () {\n  console.debug('route fired');\n});\nBackbone.history.navigate('foo');\nBackbone.history.navigate('foo'); // Intentionally doubled\n```\n\nURL changes to `http://backbonejs.org/foo`.\n\nNow press the browser\u2019s back button _once_.\n\nURL is still `http://backbonejs.org/foo`. The browser went one history step back so `popstate` is fired.\n\nConsole output:\n\n```\npopstate /foo > foo\nroute fired\n```\n\nExpected: Route should not be triggered since the actual URL did not change.\n\nThe problem here is:\n- `History#navigate` always _appends_ the `root` before calling `pushState`. So `/foo` is actually used and saved to `History#fragment`.\n- On `popstate`, `History#checkUrl` is called. It calls `History#getFragment`. This method always _removes_ the `root` and returns `foo`.\n- `History#checkUrl` compares `/foo` with `foo`. Since they differ, it assumes the URL was changed. Therefore the URL is routed using `History#loadUrl`.\n\nThis issue might seem contrived (why push the same URL twice?), but it actually caused a problem in our application. The background is: For some reason, latest Chrome triggers a `popstate` event without user input right after some `navigate`/`pushState` calls. I don\u2019t know why and need to investigate further, I cannot reproduce this behavior with simple code like the one above.\n\nAnyway, it should not be a problem for our app since the accidentally popped path is always the same as the current. But Backbone thinks it\u2019s different, so the application module is loaded twice because of a `navigate` call.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1365",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1365/comments",
    "title": "Success/Error callbacks not called on Model.destroy() if model isNew().",
    "created_at": "2012-05-31T22:44:16Z",
    "updated_at": "2012-06-16T15:34:27Z",
    "body": "Should they?\n\nI ran into a situation where I had a collection (think of it as a garbage can of models to destroy) of mixed new (not persisted to server) and not-new (persisted to server) models.\n\nI wanted to destroy them, and was using async.parallel (https://github.com/caolan/async/ ):\n\n``` coffeescript\n  jobset = []\n  myCollection.each  (pd) ->\n    jobset.push (cb) ->\n      pd.destroy\n        success: (model,response) ->\n           cb null, model\n        error: (model, response) ->\n           cb response, model\n  async.parallel jobset, (err, results) ->\n    cb err, results\n```\n\nand my jobset was not completing as the new models never called the success callback.\n\nI was able to easily work around it, but I'm still mostly thinking that the destroy() method on a new model should still execute the success callback for consistency's sake.\n\nOn the other hand, I recognize that the success/error callbacks are mostly ajax-related...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1361",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1361/comments",
    "title": "Documentation and rationale for `change` event callback signatures.",
    "created_at": "2012-05-30T20:44:16Z",
    "updated_at": "2012-07-20T01:10:15Z",
    "body": "I was wondering what the rationale is for a couple of elements of Backbone's design:\n1. For `change` events, callback method signature is `( model, options )`, whereas for `change:[attribute]` it's `( model, value, options )`.  I'm thinking that if there were a situation where it's desirable to use the same callback for both types of change events, it would be helpful if `options` was always passed in the same position.\n2. For `change:attr`, why pass the new value and not the attr name?  The model is passed anyway, so if you have the attr name and you want the new value, it's trivial to call `model.get( attr )`.  But with the current setup, there's no straighforward way to get the attr name, is there?  It seems to me that if the callback received the attr name instead of value, that would open up more dynamic possibilities for using the same callbacks for multiple attributes. \n\nIn any case, I don't think the documentation does a good job of explaining this.  I eventually went through it more thoroughly and found that the information about the 2 different callback signatures is there, but I think it should be mentioned in the `Model.set()` section (either inline or via link).  I just submitted a [pull request](https://github.com/documentcloud/backbone/pull/1360) that links to F.A.Q > Catalog of Events from the `Model.set()` section.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1358",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1358/comments",
    "title": "trigger change event bug",
    "created_at": "2012-05-30T05:39:45Z",
    "updated_at": "2012-07-13T20:11:07Z",
    "body": "Code\n\n```\nvar model=Backbone.Model.extend({\n    initialize:function(){\n        this.bind('change:name',this.message);        \n    },\n    message:function(){\n        console.log('name has changed');     \n    }\n});\nvar testModel=new model();\ntestModel.set({name:'zzw'},{silent:true});\ntestModel.set({selected:'true'});\n```\n\nExpect\n\n```\n# Nothing!\n```\n\nBut\n\n```\n> name has changed\n```\n\nDescription\n\n`change:name` event shouldn't triggle when set name with `silent`. But it triggle after set other attribute without `silent`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1356",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1356/comments",
    "title": "Model.fetch() calls URL that returns 404 with an empty array, and yet 1 empty model is created.",
    "created_at": "2012-05-29T14:19:58Z",
    "updated_at": "2012-06-08T12:14:10Z",
    "body": "Hi.\n## Description\n\nWe have a very simple backbone model/collection thing going on in our application. We initialize it like below.\n\n``` javascript\nvar models = {}; // Will contains all Backbone models, sort of a global dictionnay\n\n$(document).ready(function() {\n  models.imagesCollection = new ImagesCollection(\"${ownerId}\"); // this is in the context of a jsp page, so that's an el expression\n  models.imagesCollection.fetch();\n}\n```\n\n``` javascript\nvar Img = Backbone.Model.extend({});\n\nvar ImagesCollection = Backbone.Collection.extend({  \n    model : Img,\n    url: '/dam/imageViewList/',\n    initialize: function(annonceurId) {\n        this.url += annonceurId;\n    }\n});\n```\n\nSo the .fetch() on the collection calls this url : `/dam/imageViewList/<a variable>`. This URL may return two things, depending on the value of the variable :\n- HTTP status 200 with an array of JSON object, with the mime type application/json\n- HTTP status 404, because the ressource identified by the variable value does not exists. The body of this request is an empty array (like so [ ] ) with a content-type of application/json.\n## The error\n\nFor this last case (404 + empty array), the weirdest thing happen : **backbone creates one model in the collection. This model has no attributes**. This results in a page showing only one item, and one item with empty attributes is not pretty. We use html templates to populate the view with the models. So again, there is one model in this case, even if there is an empty array.\n\nI guess this is a backbone bug somewhere because, well, the server returns an empty array. Why creating one model if there is an empty array ?\n## A workaround\n\nUsing error callbacks of the collection, but ... that's hacking the framework :(\n## To reproducce\n\nThe hardest part to reproduce is that you will need a server that can serve 2 urls :\n- /reproduce/blabla => returns http 200, with the json mime type and a non empty array of json objects (the array must be of size strictly superior to one)\n- /reproduce/404 => returns http 404, with the json mime type and an empty array [  ]\n\nThen, use this html page (change the scripts includes of course) and switch at line 19 the value of \"changeMe!!!\" to \"blabla\" then \"404\". You will see that with the value \"404\", your console outputs : \"1, this should never be equals to 1\"\n\n``` html\n<html>\n    <head>\n        <script charset=\"utf-8\" src=\"/resources/javascript/libs/underscore/underscore-min.js\"></script>\n        <script charset=\"utf-8\" src=\"/resources/javascript/libs/backbone/backbone-min.js\" ></script >\n        <script>\n            var models = {}; // Will contains all Backbone models, sort of a global dictionnay\n\n            var Img = Backbone.Model.extend({});\n\n            var ImagesCollection = Backbone.Collection.extend({  \n                model : Img,\n                url: '/reproduce/',\n                initialize: function(annonceurId) {\n                    this.url += annonceurId;\n                }\n            });\n\n            $(document).ready(function() {\n                models.imagesCollection = new ImagesCollection(\"changeMe!!!!\");\n                models.imagesCollection.fetch();\n                console.log(models.imagesCollection.length, \"this should never be equals to one\");\n            });\n        </script>\n        </head>\n    <body>\n            dude, dafuq\n    </body>\n</html>\n```\n\nNow I'll try and see why this happens.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1354",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1354/comments",
    "title": "Unable to bind an event to a view, where the event is using the (\"parent > child\") selector",
    "created_at": "2012-05-29T06:51:14Z",
    "updated_at": "2016-09-02T10:58:48Z",
    "body": "So I love Backbone.js, but I'm a little shocked that there currently isn't a way to bind a View method to an event that happens on one of View.el's immediate children.  Let me explain:\n\n```\n// How we usually define events in a view\nView = Backbone.View({\n\n    el: $(\".elements.main\"),\n\n    events: {\n        \"click .element\": \"do_something\"\n    },\n\n   do_something: function() {}\n\n});\n```\n\nThis works fine until you encounter a situation where you only want the immediate children of \".elements.main\" to have the click event.  A good example of this is when you have a tree of data, like so:\n\n```\n.elements.main\n    --.element\n        --.elements\n            --.element\n            --.element\n                --.elements\n                    -.element\n            --.element\n    --.element\n```\n\nSee how every \".element\" could potentially have an \".elements\" child that holds more elements?  So using the View declaration from above, by binding the click event to \".element\", we would be binding that click event to every \".element\" tag in the entire tree.  And when each .element is represented by an actual element in the DOM this can cause a number of problems, because you will undoubtedly have methods that use the current view's DOM object(View.el), and it's possible that a trigger of an event could change the wrong object.  So the next logical step is to declare something like this:\n\n```\n// How we usually define events in a view\nView = Backbone.View({\n\n    el: $(\".elements.main\"),\n\n    events: {\n        \"click > .element\": \"do_something\"\n    },\n\n   do_something: function() {}\n\n});\n```\n\nNotice the greater than sign.  I used the jQuery (\"parent > child\") selector in order to try to only pinpoint the immediate children.  But it doesn't work..... Why?  JQuery's delegate function(used by View.delegateEvents() to call the bound methods with the correct context) does not play nicely with the (\"parent > child\") selector.  There were a lot of really terrible work-arounds that broke things for me like calling e.stopImmediatePropagation().  My eventual solution was putting this in the initialize method of my view:\n\n```\nmethod = _.bind(this.do_something, this);\nthis.$el.children(\".element\").delegate('.add_reply', 'click', method);\n```\n\nAnyway, this seems like a pretty basic feature to ask for, is there anyway this can get fixed?  I'm not experienced enough I feel to attempt to tackle it, but I was just mainly wondering if this issue has been looked at before?  Also are there any other potential fixes?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1352",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1352/comments",
    "title": "Is there a way to get defaults via function?",
    "created_at": "2012-05-28T16:58:00Z",
    "updated_at": "2012-05-28T18:20:57Z",
    "body": "We\u2019ve a custom ID field and it is part of the object sending back to the server.\nIt needs be different for each model. Is there an easy way to just specify that field to get its initial value using  function that generates the ID. I\u2019ve tried this but it does not seem to work..\n\n``` javasript\ndefaults : {\nmyID : function () {return genID();}\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1351",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1351/comments",
    "title": "CoffeeScript: Strange Backbone.Router instance behavior.",
    "created_at": "2012-05-28T10:58:31Z",
    "updated_at": "2012-05-28T12:11:26Z",
    "body": "Check this out. Is it normal?\n\nCODE:\n\nclass Router extends Backbone.Router\n\n```\nproperties: {}\n\ninitialize: (options) =>\n    window.bug = @properties\n    @properties.someAttribute = options.attribute\n```\n\nrouter1 = new Router( attribute: 'foo' )\nrouter2 = new Router( attribute: 'bar' )\nrouter3 = new Router( attribute: 'foobar' )\n\nrouter1.properties.someAttribute # 'foobar', but should be 'foo'\nrouter2.properties.someAttribute # 'foobar', but should be 'bar'\nrouter3.properties.someAttribute # 'foobar' is ok\nconsole.log(window.bug) # 'foobar'\n\nwindow.bug = 'trololo'\n\nrouter1.properties.someAttribute # 'trololo', but should be 'foo'\nrouter2.properties.someAttribute # 'trololo', but should be 'bar'\nrouter3.properties.someAttribute # 'trololo', but should be 'foobar'\nconsole.log(window.bug) # 'trololo'\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1350",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1350/comments",
    "title": "Collection.where() fails on string/numeric integer comparison",
    "created_at": "2012-05-27T01:05:16Z",
    "updated_at": "2016-08-08T06:37:22Z",
    "body": "There's some awkward behavior in backbone's Collection.where() method.  Unlike Collection.get(), the where() operation operates on an identity comparison.  This is particularly problematic when dealing with integer ids - if you do a get operation, things will work fine either way, but if you do a where() operation it fails and you get stuck wondering what went wrong.\n\nThe most glaring example of this problem would be a router which grabs an ID out of the URL.  The id is therefore a string instead of a proper integer, and unless you take care to parseInt each route, it will cause failures down the line when it meets well formed integers in the model data.\n\nShould Collection.where() have its behavior loosened to accept string/number comparison?  Sanitizing all that data gets a bit onerous, considering all the possible ways this can accidentally be triggered.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1347",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1347/comments",
    "title": "optimistic model.destroy()",
    "created_at": "2012-05-25T15:03:49Z",
    "updated_at": "2012-05-25T15:37:33Z",
    "body": "Hi\n\nthere's a way (without rewrite the model.destroy() method) to prevent the destroy event bubbles up to collection that contains the model istance?\n\nI want to check the server response(the json content not the HTTP code) on HTTP DELETE response and in some case (for example when the server's response contains 'error_messege' inside the json) do not remove the model from collection. \n\nI know there's success callback inside the model.destroy(), but when it's call, the destroy event was already triggered and bubbles up to collection\n\nthanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1346",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1346/comments",
    "title": "tailoring search in non-hash fragments",
    "created_at": "2012-05-25T13:35:57Z",
    "updated_at": "2012-12-07T21:22:47Z",
    "body": "Currently, when using pushstate,  window.location.search is unconditionally included in the fragment backbone uses for routing.\n\nHowever, this does not always make sense.  Some query string parameters are irrelevant (a cache defeat parameter is a classic example of this).  Some web servers, by design, neglect query string parameters (django is a plausible example of this).\n\nYou could of course incorporate into all of your routes some kind of specification which lets you ignore irrelevant query string parameters.  But that's unnecessarily repetitive, quirky and difficult to maintain.\n\nI currently think that my near future needs in this situation demands four kinds of options:\n\nuse search (backwards compatible with current implementation, so default behavior)\n\nignore search\n\nrespect only certain enumerated query string parameters (using standard http query string structure)\n\nI am planning on implementing like the above right now, but I wanted to see if anyone else had any thoughts or suggestions relevant to this issue.  (Have I overlooked some important feature of backbone here?)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1345",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1345/comments",
    "title": "Add success callback for create method",
    "created_at": "2012-05-24T22:58:45Z",
    "updated_at": "2012-05-24T23:23:50Z",
    "body": "I'm working on a project where I have three collections mapped to different APIs.\n\nI need to fire a 'fetch' to a different collection after I 'create' a new instance of a model.  \n\nThe problem: The 'fetch' requires an id passed, which is returned from the 'create' (POST) method.  I need to wait for a success callback before firing the 'fetch' so I can pass the ID parameter which is returned from the 'create'.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1343",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1343/comments",
    "title": "Slice on Collections",
    "created_at": "2012-05-23T16:09:08Z",
    "updated_at": "2012-05-23T21:14:41Z",
    "body": "Perhaps there could be a collection.slice() method that would work pretty much exactly like the array.slice() method.\n\nYou can already slice on collection.models.slice() but this is probably not the most efficient way to do it. \n\nEven with underscore, a slice(3,5) would be as simple as `collection.chain().rest(3).first(2).value()` so it's not a huge deal. Just might make things a touch more readable. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1339",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1339/comments",
    "title": "Providing a convention for completely destroying a view",
    "created_at": "2012-05-21T17:28:05Z",
    "updated_at": "2012-06-03T21:44:10Z",
    "body": "I was just wondering why backbone doesn't provide a default convention for fully removing a view, along with all bound model/collection events for the view, with a single method (e.g.`View.destroy()`). I've seen it recommended in several places to track and remove external model/collection listeners for proper garbage collection, not having zombie views, etc. and I was wondering if this feature is left out of `Backbone.View` for a specific reason.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1338",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1338/comments",
    "title": "Backbone.History.loadUrl appears to fire twice",
    "created_at": "2012-05-21T14:15:16Z",
    "updated_at": "2012-05-21T15:30:54Z",
    "body": "Overriding the loadUrl method on the History prototype, place an alert or console in there whilst calling the super results in two alerts/console per hashtag change.\n\nDuring the first call fragmentOverride is always undefined.\n\nExample code:\n\nvar Authentication = new Backbone.View();\n\nvar old = Backbone.History.prototype.loadUrl;\n\n```\nBackbone.History.prototype.loadUrl = function(fragmentOverride) {\n    alert('loadURL called');\n    if(!old.apply(this, [fragmentOverride])) {\n        alert('404 Page Not Found');\n    }else{\n        //Trigger the fact that the URL has changed\n        Authentication.trigger('urlchanged', fragmentOverride);\n    }\n}\n\nAuthentication.on('urlchanged', function(fragmentOverride) {\n\n    console.log('Changed to: ' + fragmentOverride);\n\n});\n```\n\nSorry - I haven't investigated a fix yet if I do I'll make a pull request if you agree this is a bug.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1337",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1337/comments",
    "title": "destory the model to the collection",
    "created_at": "2012-05-21T13:24:27Z",
    "updated_at": "2012-05-21T13:26:22Z",
    "body": "Hi,\n\n  i am trying to delete the model to the collection as well as from the database but in my case it is deleting from the database but not from the list and i want to know also after deleting the model from the database how to refresh the list or how to iterate the list once again after the deletion for getting the updated list.\n\nmy code is like this :-\n\nwindow.App = {};\n\nApp.ProductCategory = Backbone.Model.extend({\n    // urlRoot:\"rest/products\",\n\n```\nurl : function() {\n    var base = 'rest/admin/prodCat';\n    if (this.isNew()) {\n\n        return base;\n    }\n    // alert(\"value \"+this.isNew());\n    return base + (base.charAt(base.length - 1) == '/' ? '' : '/')\n            + this.id;\n},\n\ndefaults : {\n    \"id\" : null,\n    \"productCategory\" : \"\",\n    \"description\" : \"\",\n    \"parentProductCategoryName\" : \"\"\n\n},\n```\n\n});\n\nApp.ProductCategoryCollection = Backbone.Collection.extend({\n    initialize : function() {\n        // alert(\"ProductCategoryCollection intialization\");\n    },\n    model : App.ProductCategory,\n    url : \"rest/admin/prodCat\",\n\n});\n\nApp.ProductCategoryView = Backbone.View.extend({\n\n```\ninitialize : function() {\n    // this.collection.bind(\"reset\", this.render, this);\n    // this.collection.bind(\"change\", this.render, this);\n    // this.model.bind(\"remove\", this.render, this);\n},\n\nrender : function(eventName) {\n    // alert(\"ProductCategoryView render\");\n\n    _.each(this.model.models, function(productcategory) {\n\n        $(this.el).append(new App.ProductCategoryListView({\n            model : productcategory\n        }).render().el);\n\n    }, this);\n    // alert(\"ProductCategoryView render after\");\n    return this;\n},\n```\n\n});\n\nApp.ProductCategoryListView = Backbone.View.extend({\n    tagName : 'li',\n    initialize : function() {\n\n```\n    this.template = _.template(tpl.get('CategoryListView'));\n    this.model.bind(\"remove\", this.render, this);\n    this.model.bind(\"change\", this.render, this);\n},\n\nrender : function(eventName) {\n    // alert(\"this render is in the ProductCategoryItemView \");\n    $(this.el).html(this.template(this.model.toJSON()));\n    // alert(\"this render 2222222222 is in the ProductCategoryItemView \");\n    return this;\n},\n```\n\n});\n\nApp.ProductCategoryDetailView = Backbone.View.extend({\n\n```\ntagName : 'div',\n// this.template = _.template(tpl.get('ProductCategoryDetailView'));\n\ninitialize : function() {\n\n    this.template = _.template(tpl.get('ProductCategoryDetailView'));\n    _.bindAll(this, \"render\", \"change\", \"saveProductCategory\",\n            \"deleteProductCategory\");\n\n    // alert(\"intialze will called\");\n    // alert(\"this is in the ProductCategoryDetailView \"+this.model);\n    this.model.bind(\"change\", this.render, this);\n    this.model.bind(\"reset\", this.render, this);\n    this.model.bind(\"remove\", this.deleteProductCategory, this);\n    this.render();\n},\n\nrender : function() {\n    // alert (\"the model is \" + this.model.id);\n    // alert(\"the changed el\"+ this.el);\n\n    $(this.el).html(this.template(this.model.toJSON()));\n\n    // alert(\"after the destory\"+ this.model.get(\"product_Name\"));\n    return this;\n},\n\nevents : {\n    \"change input\" : \"change\",\n    \"click #save\" : \"saveProductCategory\",\n    \"click #delete\" : \"deleteProductCategory\",\n},\n\nchange : function(event) {\n    this.model = new App.ProductCategory();\n    var target = event.target;\n    console.log('changing ' + target.id + ' from: ' + target.defaultValue\n            + ' to: ' + target.value);\n    // You could change your model on the spot, like this:\n    var change = {};\n    change[target.name] = target.value;\n    this.model.set(change);\n},\n\nsaveProductCategory : function(event) {\n\n    this.model.set({\n        // id:$('#product_Name').val(),\n        productCategory : $('#productCategory').val(),\n        description : $('#description').val(),\n        parentProductCategoryName : $('#parentProductCategoryName').val(),\n    });\n\n    var ids = $('#id').val();\n    if (ids != null)\n        this.model.id = ids;\n    if (ids == \"\")\n        this.model.id = null;\n    /*\n     * this.model.save({ success: function() { alert('save successfully');\n     * window.history.back(); }});\n     */\n    var method = this.model.isNew() ? 'create' : 'update';\n    // alert(\"the method is\" + this.model.product_Name);\n    this.productList = new App.ProductCategoryCollection({\n        model : this.model\n    });\n    var xhr = (this.sync || Backbone.sync).call(this, method, this.model);\n    alert(\"this is model\" + this.model);\n    router.navigate(\"\", true);\n    return xhr;\n\n    // }\n\n},\n\ndeleteProductCategory : function(event) {\n    // alert(\"inside the delete\");\n    // this.model.destroy();\n    // alert(\"the model to be deleted\"+ this.model.get(\"product_Name\"));\n    // var v=this.model.get(\"product_Name\");\n    // this.model.product_Name=v;\n    var iid = $('#id').val();\n    this.model.id = $('#id').val();\n    this.model.destroy({\n        success : function() {\n            // alert('deleted successfully');\n            // window.history.back();\n        }\n\n    });\n    this.remove();\n    $('#header').html(new App.HeaderView().render().el);\n    // $('#sidebar').html(new\n    // App.ProductCategoryView({model:router.productList}).render().el);\n    // alert(\"after the destory\"+ this.model.get(\"product_Name\"));\n    // $('#header').html( new App.HeaderView().render().el );\n\n    // alert(\"the deleted item in the collection\" + p.productCategory);\n    router.navigate(\"\", true);\n    // alert(\"the model value from the collection \" +\n    // App.ProductCategoryCollection.get(iid) );\n}\n```\n\n});\n\nApp.HeaderView = Backbone.View.extend({\n    tagName : 'div',\n    initialize : function() {\n        this.template = _.template(tpl.get('Header'));\n\n```\n},\n\nrender : function(eventName) {\n    $(this.el).html(this.template());\n    return this;\n},\n\nevents : {\n    \"click .new\" : \"newProduct\"\n},\n\nnewProduct : function(event) {\n    router.navigate(\"products/new\", true);\n    return false;\n}\n```\n\n});\n\nApp.Router = Backbone.Router.extend({\n\n```\nroutes : {\n    \"\" : \"list\",\n    \"products/new\" : \"newProduct\",\n    \"products/:productCategory\" : \"productdetails\",\n},\n\nlist : function(callback) {\n\n    $('#header').html(new App.HeaderView().render().el);\n    this.productList = new App.ProductCategoryCollection();\n    this.productList.fetch({\n        success : function() {\n\n            $('#sidebar').html(new App.ProductCategoryView({\n                model : router.productList\n            }).render().el);\n        }\n\n    });\n\n},\nproductdetails : function(productCategory) // product_Name\n{\n    var pname = \"\" + productCategory;\n    // alert(\"the product name is \" + pname);\n    var productcategorymodel = router.productList.where({\n        productCategory : unescape(pname)\n    });\n    if (productcategorymodel != null) {\n        // alert(\"the size \" +productcategorymodel.length);\n        // alert(\"the value in the array\"\n        // +productcategorymodel[0].get(\"product_Name\"));\n        app = productcategorymodel[0].toJSON();\n        this.model = new App.ProductCategory();\n        this.model.set(app);\n        router.showView('#content', new App.ProductCategoryDetailView({\n            model : this.model\n        }));\n    }\n},\n\nnewProduct : function() {\n\n    router.showView('#content', new App.ProductCategoryDetailView({\n        model : new App.ProductCategory()\n    }));\n\n},\n\nshowView : function(selector, view) {\n    // alert(\"show view\") ;\n    // if (this.currentView)\n    // this.currentView.close();\n    $(selector).html(view.render().el);\n    this.currentView = view;\n    return view;\n}\n```\n\n});\n\ntpl.loadTemplates(\n        [ 'Header', 'CategoryListView', 'ProductCategoryDetailView' ],\n        function() {\n            router = new App.Router();\n            Backbone.history.start();\n            // Backbone.emulateJSON=true;\n            // Backbone.emulateHTTP = true;\n            // Backbone.emulateHTTP = true;\n        });\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1336",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1336/comments",
    "title": "Model defaults are shallow-copied, object attributes will be altered in the defaults object",
    "created_at": "2012-05-21T13:06:37Z",
    "updated_at": "2012-05-21T13:13:08Z",
    "body": "In the Backbone.Model constructor, the following code is used to use in the `defaults` property as, well, default values for data of the newly created Model:\n\n``` javascript\n    if (defaults = getValue(this, 'defaults')) {\n      attributes = _.extend({}, defaults, attributes);\n    }\n```\n\nWhen some properties of `defaults` are of type Object, and if they are not overridden by one in `attributes`, the new Model's attributes will contain a _reference_ to the attribute in the `defaults` object. That means that if the attribute is updated in the model, the value in the defaults will be altered too! This doesn't sound like something we'd ever want.\n\nReduced example:\n\n``` javascript\nvar ModelWithDefaults = Backbone.Model.extend({\n  defaults: {\n    obj: {}\n  }\n});\n\nvar m = new ModelWithDefaults();\n\nconsole.log(m.attributes.obj === ModelWithDefaults.prototype.defaults.obj) // => true\nconsole.log(ModelWithDefaults.prototype.defaults.obj) // => {}\n\nvar objVal = m.get('obj');\nobjVal.u = 42;\nm.set('obj', objVal);\n\nconsole.log(ModelWithDefaults.prototype.defaults.obj) // => {u: 42}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1334",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1334/comments",
    "title": "Parameters structure on model.save() with mongoid",
    "created_at": "2012-05-20T15:43:51Z",
    "updated_at": "2012-05-21T13:18:25Z",
    "body": "I have an application in rails 3 with mysql and i am migrating to mongoid. I am using backbone.js to make my application more friendly.\n\nWhen I use @model.save with my mysql version, i got an ajax call like this : \n\n```\n{\"created_at\"=>\"2012-05-19 11:05:57\",\n \"email\"=>\"toto@test.com\",\n \"id\"=>\"13\",\n \"invitation_accepted_at\"=>nil,\n \"invitation_limit\"=>nil,\n \"invitation_sent_at\"=>\"2012-05-19 11:05:57\",\n \"invitation_token\"=>\"MACzLtucjtVSwY5Qz2Pp\",\n \"invited_by_id\"=>1,\n \"invited_by_type\"=>\"User\",\n \"role\"=>\"2\",\n \"updated_at\"=>\"2012-05-19 11:05:57\",\n \"user\"=>{\"email\"=>\"toto@test.com\",\n \"role\"=>\"1\"}}\n```\n\nSo i can use params[:user] in my controller because i have a key :user in my params. But now with mangoid, i got params : \n\n```\n{\"_id\"=>\"4fb8febe7d552d0a5e000010\", \n\"email\"=>\"toto@test.com\", \n\"invited_by_id\"=>nil, \n\"invited_by_type\"=>nil, \n\"role\"=>\"2\", \n\"id\"=>\"4fb8febe7d552d0a5e000010\"}\n```\n\nThe user key disappear... How can i solve this problem?\n\nThank you\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1331",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1331/comments",
    "title": "Unset Option Side Effect",
    "created_at": "2012-05-18T15:56:25Z",
    "updated_at": "2012-05-18T15:59:30Z",
    "body": "Model's unset and clear methods modify the options argument.\n\n`var options = {silent: true};\nmodel.clear(options);\nmodel.set(args, options);`\n\nIn this case nothing is being set because options acquired an unset property from clear. Would you agree this is a trap?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1330",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1330/comments",
    "title": "How can I Stop the view add parent element to the template",
    "created_at": "2012-05-18T06:44:15Z",
    "updated_at": "2012-05-21T05:43:50Z",
    "body": "I know the Backbone.js's view have a some parameter like id,tagName,className\n\n``` javascript\nvar DocumentRow = Backbone.View.extend({\n\n  tagName: \"li\",\n\n  className: \"document-row\",\n\n});\n```\n\nit use for the insert template's parents property,when I does't set it ,it will add a div to the template as the template's parent\n\nbut it really annoy me cuz something I don't need the parent! \n\nAll I need already have in my template,\n\nso how can I cancel it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1329",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1329/comments",
    "title": "Separate view,collection,model to different js file ,they could't recognize each other?",
    "created_at": "2012-05-18T03:51:31Z",
    "updated_at": "2012-05-18T06:40:12Z",
    "body": "I use Backbone.js to create a web app,all the view,collection and model write into one js file,it success!\n\nnow I want separate them to different js files,just like:\n\n``` javascript\n<script type=\"text/javascript\" src=\"js/layermanagemodel.js\"></script>       \n<script type=\"text/javascript\" src=\"js/layermanagecollection.js\"></script>  \n<script type=\"text/javascript\" src=\"js/layermanageview.js\"></script>    \n<script type=\"text/javascript\" src=\"js/boot.js\"></script>\n```\n\nand load model code in jquery load:\n\n``` javascript\n$(function(){\n    //Model\n        var manageModel = Backbone.Model.extend({\n                default:{\n                    'selectedId':'unknow'\n                },\n                selectLayer:function(uuid){\n                     this.set({\"selectedId\": uuid});\n                },\n                delLayer:function(){\n\n                }\n        }); \n})\n```\n\nbut the firebug tell me bug:\n\n``` javascript\nmanageModel is not defined\n[Break On This Error]   \n\nmodel: manageModel\n```\n\nin collection file\n\nwhy if separate them to different file ,they could not recognize each other?how can I solve this problem?Or what is right load order?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1328",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1328/comments",
    "title": "Collection.comparator fails on IE",
    "created_at": "2012-05-18T01:08:17Z",
    "updated_at": "2014-06-06T20:36:47Z",
    "body": "Environment: IE8\n\nWhen creating a `comparator` function and returning `string` value from it IE throws exception saying: `Number Expected`. The exception point shown by IE is backbone.js:723\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L723\n\nreturning `int` from comparator makes  IE happy\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1321",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1321/comments",
    "title": "BUG: backbone don't work in Ohio ",
    "created_at": "2012-05-15T21:31:30Z",
    "updated_at": "2012-05-15T21:32:39Z",
    "body": "Can't connect to internet man!\n\nI tried to connect to backbone a few times yesterday. No connection at all!\n\nbackbonejs.org\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1320",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1320/comments",
    "title": "Backbone.View.$ not able to match top-level view elements",
    "created_at": "2012-05-15T20:01:32Z",
    "updated_at": "2012-05-15T20:27:34Z",
    "body": "Hi,\n\nI found this problem in my project. Take a look on how Backbone.View.$ function is implemented:\n\n``` javascript\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be prefered to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n```\n\nThis will of course work if we assume that view is composed of only one top-level DOM element and some other nested ones, e.g.:\n\n``` html\n<body>\n    <div class='my-view'>\n        <div class='something'></div>\n    </div>\n</body>\n```\n\n``` javascript\nvar SomeModel = Backbone.Model.extend({\n   // nothing\n});\nvar MyView = Backbone.View.extend({\n    el : '.my-view',\n    initialize : function() {\n        console.info('something', this.$('.something'));\n        console.info('my view', this.$('.my-view'));\n    }\n});\n\nvar model = new SomeModel();\nvar view = new MyView({ model : model });\n```\n\nIn such a case you will see console output:\n\n```\nsomething [div.something]\nmy view [ ]\n```\n\nBut in my project I cannot create views with only one root element. In my case I have a collection of items. Each item is represented as two table `<tr>` elements and has on corresponding view. I found that I'm not able to match any of the $el root elements! I found solution for my problem and would like to ask backbone community what do you think about to change this to what I'm suggesting.\n\nI changed this function to:\n\n``` javascript\n    $ : function(selector) {\n        return this.$el.filter(selector).add(this.$el.find(selector));\n    },\n```\n\nIf this is not acceptable for all selectors, maybe some argument could be added to switch between two selection modes (with root, and without root)?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1319",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1319/comments",
    "title": "IE7 returns host in hash fragment",
    "created_at": "2012-05-15T17:53:30Z",
    "updated_at": "2012-05-16T09:49:15Z",
    "body": "Hey all,\n\nWith backbone.history settled as follow (using latest BB 0.9.2) :\n\n``` javascript\nBackbone.history.start({pushState: true, silent: true, root : \"/app/\"});\n```\n\nA simple link like this one :\n\n``` html\n<a href=\"path\">link</a>\n```\n\nLinks actions are binded as :\n\n``` javascript\n$('body').on('click', 'a', function(e) {\n\n    var link = $(this).attr(\"href\");\n    router.navigate(link, true);\n    e.preventDefault();\n\n});\n```\n\nIE7 returns hash fragment this way : `http://host/app/#http://host/path`\n(while it should be `http://host/app/#path`)\nEverything works as expected in : IE8 + IE9 + Firefox + Safari + Chrome + Opera\n\n---\n\n**EDIT :**\nOK, this bug is not affiliated with BB after all, but to IE7 directly. When using a relative path in href, IE7 instantiates it as http://host/path\nSome affiliated posts here : http://stackoverflow.com/questions/1593174/wrong-extraction-of-attrhref-in-ie7-vs-all-other-browsers or here : http://bugs.jquery.com/ticket/11129\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1318",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1318/comments",
    "title": "List Methods in the documentation in alphabetical order",
    "created_at": "2012-05-15T17:34:40Z",
    "updated_at": "2012-05-15T19:00:09Z",
    "body": "I find it hard to find to find methods when scanning the docs because the methods listed below each category (Model, Collection etc etc) don't seem to be listed in any order.  \n\nI think it would be very helpful if the methods were listed in alphabetical order\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1316",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1316/comments",
    "title": "missing $.undelegate in undelegateEvents (Backbone.View)",
    "created_at": "2012-05-15T08:26:48Z",
    "updated_at": "2012-05-15T08:41:26Z",
    "body": "I was inspecting the code and it seems that in the Backbone.View.delegateEvents has a branch that can call $.delegate in jquery.\n\n```\n    if (selector === '') {\n      this.$el.bind(eventName, method);\n    } else {\n      this.$el.delegate(selector, eventName, method);\n    }\n```\n\nhowever the Backbone.View.undelegateEvents never explicitly removes events delegated through $.delegate through the recommended $.undelegate method in jquery. Is the following sufficient to to remove both $.bind and $.delegate events?\n\n```\nundelegateEvents: function() {\n  this.$el.unbind('.delegateEvents' + this.cid);\n}\n```\n\nI haven't used Backbone yet as i was looking through the code to get a understanding of the principles guiding the project first. Just checking if that was a bug or not.\nthanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1315",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1315/comments",
    "title": "when i use save how to post my model data ?",
    "created_at": "2012-05-15T07:53:42Z",
    "updated_at": "2012-05-15T10:30:37Z",
    "body": "i have a model whit attr like this\n\n``` javascript\n{avaiable: \"\"\ncid: \"c0\"\ndata: Object\nfree_space: \"\"\nmaxsize: \"\"\nrecyclebin: \"\"\nstatus: 12321312\nsuccess: true\nused: \"\"\n}\n```\n\nwhen i call mymodel.save() and listen the http request\nthe request `POST` payload's key is\n\n```\n{\"host\":\"10.11.50.162\",\"data\":{\"status\":1,\"paths\":[],\"id\":11,\"ip\":\"10.11.50.162\"},\"urlRoot\":\"\",\"used\":\"\",\"ip\":\"\",\"free_space\":\"\",\"avaiable\":\"\",\"recyclebin\":\"\",\"maxsize\":\"\",\"cid\":\"c0\",\"id\":11,\"is_offline\":true,\"is_online\":false,\"success\":true,\"status\":12321312}\n```\n\nbut not Correspondence a value\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1313",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1313/comments",
    "title": "Backbonejs.org is down",
    "created_at": "2012-05-15T00:38:46Z",
    "updated_at": "2013-02-20T21:26:25Z",
    "body": "Unknown if this is known.\n\nhttp://www.downforeveryoneorjustme.com/backbonejs.org\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1312",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1312/comments",
    "title": "Discussion: fire an add/destroy event immediately when wait:true",
    "created_at": "2012-05-14T21:29:29Z",
    "updated_at": "2012-05-15T20:22:00Z",
    "body": "I usually have to call:\n\n```\nmodel.trigger('destroy');\nmodel.destroy({ wait: true, .... });\n```\n\nI want to know when the app started the response to destroy the model, and when it finished (which I catch through 'sync'). So if I pass {wait: true}, it should fire 'destroy' on the model immediately, instead of after the response is completed, don't you think? Otherwise 'sync' and 'destroy' will be fired basically in succession, making one of them useless. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1310",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1310/comments",
    "title": "Events.off issue",
    "created_at": "2012-05-14T07:51:06Z",
    "updated_at": "2012-05-14T11:54:42Z",
    "body": "Example:\n\n``` js\nvar b = [1, 2, 3, 4, 5, 6] , t = true;\nfor (i = 0, l = b.length; i < l; i += 2) {\n   console.log(i, l, b);\n   if (t && i === 2) {\n       b.splice(i, 2);\n      /*\n       i -=  2;\n       l -= 2;\n       */\n       t = false;\n    }\n}\n```\n\n``` js\nfor (i = 0, length = list.length; i < length; i += 2) {\n    if (!(callback && list[i] !== callback || context && list[i + 1] !== context)) {\n        list.splice(i, 2);\n    }\n}\n```\n\n=>\n\n``` js\nfor (i = 0, length = list.length; i < length; i += 2) {\n    if (!(callback && list[i] !== callback || context && list[i + 1] !== context)) {\n        list.splice(i, 2);\n        i -= 2;\n        length -= 2;\n    }\n}\n```\n\nhttps://github.com/cfddream/odof/blob/master/lib/emitter.js\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1309",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1309/comments",
    "title": "History.getFragment does not handle uninitialized options",
    "created_at": "2012-05-14T01:53:16Z",
    "updated_at": "2012-05-15T10:49:02Z",
    "body": "I am VERY new to backbone.js and new to github and I am not sure exactly what is causing this, but here is the scenario.  I am running this \"very simple\" example which I found on the Backbone site:\nhttps://github.com/L0stSoul/Training/tree/master/Backboneapp\n\nWhen I run it with jQuery 1.6.2 it works, however with jQuery 1.7.x it fails with the following error:\n\nChrome - Uncaught TypeError: Cannot read property 'root' of undefined\n\nThe issue seems to be caused by a timing issue.  Regardless, from what I understand there could be scenarios where \"this.options\" is not initalized and in those situations, I feel like it should either fail explicitly or not at all.\n\nMy fix is as follows:\n\nBackbone.js - Line 1118:  Add a check for an undefined options collection:\n\n(typeof(this.options) != \"undefined\") &&\n\nSo the new line looks like this:\n\nif ((typeof(this.options) != \"undefined\") && !fragment.indexOf(this.options.root)) fragment = fragment.substr(this.options.root.length);\n\nThe code the causes the problem is here:\n\nvar NavigationRouter = Backbone.Router.extend({\n            _data: null,\n            _items: null,\n            _view: null,\n\n```\n        routes: {\n            \"info/:id\": \"showInfo\",\n            \"*actions\": \"defaultRoute\"\n        },\n        initialize: function (options)\n        {\n            var _this = this;\n            $.ajax({\n                url: \"/Content/New/test.json\",\n                dataType: 'json',\n                data: {},\n                async: false,\n                success: function (data)\n                {\n\n                    _this._data = data;\n                    _this._items = new ItemCollection(data);\n                    _this._view = new MenuView({ model: _this._items });\n                    _this._view.render();\n\n                    /// BAD - If this is called with jQuery 1.7 it fails, but with jQuery 1.6 it works.\n                    Backbone.history.loadUrl();\n                }\n\n            });\n\n            return this;\n        },\n        defaultRoute: function (actions)\n        {\n            this.showInfo(1);\n        },\n        showInfo: function (id)\n        {\n            var view = new ContentView({ model: this._items.at(id - 1) });\n            $(\".active\").removeClass(\"active\");\n            $(\"#item\" + id).addClass(\"active\");\n            view.render();\n        }\n    });\n\n    var navigationRouter = new NavigationRouter;\n    Backbone.history.start();\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1308",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1308/comments",
    "title": "Model set undefined value doesn't rise event in changing state",
    "created_at": "2012-05-12T07:47:17Z",
    "updated_at": "2012-05-12T14:48:28Z",
    "body": "Scenario:\nCreate model with 2 attributes label = 'L1', name = 'C1'\nSubscribe on \"change:label\" and validate rise.\nSubscribe on \"change:name\" and set label to undefined.\nChange name.\nNo \"change:label\" event.\n\nI can show this in the next test:\n\n<code>\ntest(\"Changing to undefined while already changing\", function () {\n                // assign\n                var source = new Model({\n                    name : \"C1\",\n                    label : \"L1\"\n                });\n\n```\n            var done = false;\n\n            // act\n            source.on('change:label', function () {\n                done = true;\n            });\n\n            source.on('change:name', function () {\n                source.set('label', undefined);\n            });\n\n            source.set(\"name\", 'target');\n\n            // assert\n            ok(done, \"Model rose change event \"); // Fails\n            equal(source.get('label'), undefined, \"Model changed label\"); // Good\n        });\n```\n\n</code>\n\n<code>\nLines with this issue is in //Update attributes section:\nif (this._changing && !_.isEqual(this._changed[attr], val)) {\n          this.trigger('change:' + attr, this, val, options);\n          this._moreChanges = true;\n        }\n</code>\n\nShould be smth like this:\n\n<code>\nvar toTrigger = this.changing && ( !_.has(this.changed, attr) || !_.isEqual(this.changed[attr], val) );\n\n```\n                if (toTrigger) {\n                    this.trigger('change:' + attr, this, val, options);\n                    this.moreChanges = true;\n                }\n```\n\n</code>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1306",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1306/comments",
    "title": "model.clear deletes the id",
    "created_at": "2012-05-11T10:33:38Z",
    "updated_at": "2012-05-15T14:03:06Z",
    "body": "If the model.clear behavior has changed, I'm surprised that more people haven't been affected by this?\n\n```\nvar model = new Backbone.Model({id: 'foo'});\nconsole.log(model.id)   // => foo\nmodel.clear();\nconsole.log(model.id)   // => undefined, so collection.get('foo') , model.save() etc. will fail\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1305",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1305/comments",
    "title": "Router hash value error in Firefox",
    "created_at": "2012-05-10T09:31:09Z",
    "updated_at": "2013-10-10T15:52:20Z",
    "body": "In 0.9.2 and FIrefox, after 402508d80f7f0cac8ec57ae727ed8bb0428728a2, Router callback will be trigger twice if hash is not only ASCII, first callback is decoded (**what I needed**), second callback is undecoded.\n\nRoutes\n\n```\nroutes: {\n    ':name': 'test'\n}\n\ntest: function(name) {\n    console.log('name', name);\n    console.log('hash', location.hash);\n    console.log('href', location.href);\n}\n```\n\nthen I visit #\u4e2d\u6587\u57df\u540d\u6d4b\u8bd5.cn **ONLY ONCE**\n\n```\nname \u4e2d\u6587\u57df\u540d\u6d4b\u8bd5.cn\nhash #\u4e2d\u6587\u57df\u540d\u6d4b\u8bd5.cn\nhref http://localhost/#%E4%B8%AD%E6%96%87%E5%9F%9F%E5%90%8D%E6%B5%8B%E8%AF%95.cn\n\nname %E4%B8%AD%E6%96%87%E5%9F%9F%E5%90%8D%E6%B5%8B%E8%AF%95.cn\nhash #\u4e2d\u6587\u57df\u540d\u6d4b\u8bd5.cn\nhref http://localhost/#%E4%B8%AD%E6%96%87%E5%9F%9F%E5%90%8D%E6%B5%8B%E8%AF%95.cn\n```\n\nI think it's a bug. When I use _name_ as ajax data, it will pass RAW encoded encoded string to backend.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1301",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1301/comments",
    "title": "Comparator usage not backwards compatible",
    "created_at": "2012-05-09T13:47:17Z",
    "updated_at": "2014-06-06T20:36:47Z",
    "body": "In Version 0.5.3 I used a bound closure as a comparator (in effect a method that just used a reference to arguments to call through to the actual comparator with a fixed this.\n\nNow with 0.9.2 this doesn't work anymore because the sort code checks the arity of the comparator and only invokes the old behavior if the arity is exactly one.\n\nInstead I'm voting for only invoking the new behavior when the arity is exactly two and use the old behavior in all other cases for better backwards compatibility.\n\nAlso, I'm voting for not relying on the arity of methods too much as it can easily be lost in javascript when using closures.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1300",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1300/comments",
    "title": "Regression: Initializing model from another model fails",
    "created_at": "2012-05-09T12:30:05Z",
    "updated_at": "2012-05-09T20:45:17Z",
    "body": "When Initializing one model from another one like this:\n\nFoo = Backbone.Model.extend()\nBar = Backbone.Model.extend({\n  defaults: { foo: 'bar' }\n})\nvar bar = new Bar(new Foo)\n\nbecause Bar has defaults, it treats the incoming instance of Foo just as a hash instead of as an object and mixes it up.\n\nThis means that after this call bar.attributes == Foo instead of Foos attributes\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1297",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1297/comments",
    "title": "Route event is triggered when accessing the URL from browser",
    "created_at": "2012-05-08T09:50:21Z",
    "updated_at": "2012-05-08T11:43:59Z",
    "body": "I think this is just a question about how the route event works the moment the page is loaded.\n\nSay, I have route like below:\n\n```\n{\n  \"bar\": function(){...}\n}\n```\n\nIn my web page there's a link to _http://foo/bar_, and when I click on it, the route event will be triggered, which is what I want.\n\nBut, when I access my web site with _http://foo/bar_, the event is triggered, too. Is there any way to suppress this behavior? Or, how can I identify if the route event is triggered by user action, or by browser?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1296",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1296/comments",
    "title": "Collection#_prepareModel should not use `new`.",
    "created_at": "2012-05-08T03:51:38Z",
    "updated_at": "2012-05-08T17:59:11Z",
    "body": "In attempting to migrate some code to use a factory function instead of a return from constructor (#1094), I've run into a problem with `collection._prepareModel`.  The goal is to write a model with a factory function whose children will inherit it with the same semantics (returns the specified model, possibly after some custom logic).  For instance:\n\n``` javascript\nvar User = Model.extend();\nvar user = User.create();\nok(user instanceof User);\n```\n\nI first tried the following (#1148):\n\n``` javascript\nvar Model = Backbone.Model.extend({...}, {\n  create: function(attributes, options) {\n    ...\n    return new this(attributes, options);\n  }\n});\nvar Child = Model.extend(...);\nvar Collection = Backbone.Collection.extend({model: Child.create});\nvar collection = new Collection([{}]);\n```\n\nThis does not work.  The problem is that `_prepareModel` still uses `new` regardless of the intent behind `collection.model`.  Thus, the context will always be a new object and `create` will always fail.\n\nAnother choice is to use a custom `extend`, but I dismissed the idea altogether because it won't work with coffee-script (and is likely bad practice).  It seems that, with the current implementation, my only real choice is to manually set the create function on each model class.  This is rather awkward and inelegant.\n\nI think this requires that either `collection._prepareModel` stop using `new`, or I go back to return from constructor.  Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1292",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1292/comments",
    "title": "Unexpected result when undefined is passed to Backbone.Model.hasChanged()",
    "created_at": "2012-05-08T00:15:29Z",
    "updated_at": "2012-05-08T17:47:47Z",
    "body": "Version 0.9.2\n\nDiscovered this when overriding a model's hasChanged() method and calling its \"super\".\n\n<pre>\nhasChanged: function(attr) {\n    // custom fun stuff\n    Backbone.Model.prototype.hasChanged.call(this, attr);\n}\n</pre>\n\n\nMore simply, pass <i>undefined</i> to hasChanged() and the following condition will fail:\n\n<pre>\nif (!arguments.length) return !_.isEmpty(this.changed);\n</pre>\n\n\nOf course, there are a few workarounds to this (i.e. using apply instead of call), but wanted to make it known since it took me some time to track down some funky model behavior I was experiencing when upgrading from 0.5.3 to 0.9.2.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1288",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1288/comments",
    "title": "Multiple backbones inside Node makes instanceof fail",
    "created_at": "2012-05-07T14:01:34Z",
    "updated_at": "2014-04-16T02:38:08Z",
    "body": "This just consumed the last 4 hours of my life... and boy was it the most crazy difficult thing to debug.\n\nIf we have two modules:\n- Module A provides custom backbone.js models\n- Module B provides custom backbone.js collections\n\nThen we have our app which:\n- Requires Module A\n- Requires Module B\n- Creates a model instance using a custom model from Module A\n- Creates a collection instance using a custom collection from Module B\n- Adds the model instance to the collection instance\n\nThen the sky falls down and burns all the horrible plagues at once. Why? I know the answer, but I'll give you a gold star if you can guess it.\n\nHere's the answer: because our lovely `model instanceof Model` inside `Backbone.Model.prototype._prepareModel` fails, as the models are using one backbone.js and the collections are using another!!!! Despite them being the same backbone.js version.\n\nARGH! That line needs to be better, perhaps check for the presence of a `this.isBackboneModel` variable defined by the `Backbone.Model.prototype`.\n\nARGHHHH. For now, it seems the only solution is to pass the Modules the Backbone.js module that we want them to use, rather than having them use their own local copies. Which is a real PIA. Which imho, the flag idea is a much better one.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1286",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1286/comments",
    "title": "router redirect means no browser back",
    "created_at": "2012-05-06T11:46:19Z",
    "updated_at": "2012-05-06T23:28:30Z",
    "body": "I have these routes:\n\n```\n\"gist/https\\://gist.github.com/:id\": \"loadGistUgly\",\n\"gist/:id\": \"loadGist\"\n```\n\nand loadGistUgly redirects to the pretty one:\n\n```\nloadGistUgly: function (id) {\n  this.navigate(\"gist/\"+id, {trigger: true});\n},\nloadGist: function(id) {\n  Iframework.loadFromGistId(id);\n  return;\n},\n```\n\nFor example: http://meemoo.org/iframework/#gist/https://gist.github.com/2621108\n\nIs there a correct way to do this so that http://meemoo.org/iframework/#gist/https://gist.github.com/2621108 is not in the history and http://meemoo.org/iframework/#gist/2621108 is?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1281",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1281/comments",
    "title": "Add _.deepClone() to the object methods",
    "created_at": "2012-05-04T07:35:56Z",
    "updated_at": "2012-05-04T07:40:16Z",
    "body": "Has anybody considered adding deep cloning capabilities to underscore.\n\nI wrote this a while back and, if memory serves me, it works on both objects and arrays. It could use some cleanup and optimization but it should work.\n\nif(!Object.prototype.clone) {\n    Object.prototype.clone = function() {\n        var newObj = (this instanceof Array) ? [] : {};\n        for(i in this) {\n            if(i == 'clone') continue;\n            if(this[i] && typeof this[i] == 'object') {\n                newObj[i] = this[i].clone();\n            } else { \n                newObj[i] = this[i];\n            }\n        }\n        return newObj;\n    };\n}\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1278",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1278/comments",
    "title": "Pass in the route as an option on router callbacks",
    "created_at": "2012-05-03T20:35:46Z",
    "updated_at": "2012-11-01T05:00:29Z",
    "body": "I can pull and submit a patch for this, but I want to submit this as an issue first to get feedback:\n\nIs there any interest in being about to discern between routes such as `\"places/:id\"` and `\"private_places/:id\"`, while still receiving the `params` argument with the `:option` and `*splat` properties?\n\nCurrently if you use Backbone.Router.route with a regular expression to perform the routing, you will have to reimplement the parsing of those yourself. \n\nBasically, I want to preserve `params` and gain the ability to parse the `route` name internally in the callback function.\n\nThe two approaches I am considering are:\n\n(1) pass in `route` as the second argument on the callback after the `params` object. i.e. execute the route callback as `this.routes[route](params, route)` instead of just `this.routes[route](params)`\n\n(2) Extend the params object with the `route` name by simply executing `params = _.extend({ route : route }, params);` before executing the callback.\n\nWould anyone else find this useful? If so, do you prefer one approach over the other, or do you see any flaws with the approaches above, especially the second approach?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1277",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1277/comments",
    "title": "Accessing router options from routing methods",
    "created_at": "2012-05-03T19:05:01Z",
    "updated_at": "2012-06-06T12:20:53Z",
    "body": "Views automatically store away their \"options\" initialization param for later use, but routers do not. Is there some reason for this? I'm finding it would be handy.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1276",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1276/comments",
    "title": "Bug: silent isn't silent when chaining set/unset",
    "created_at": "2012-05-03T09:14:22Z",
    "updated_at": "2012-05-16T20:10:18Z",
    "body": "http://jsfiddle.net/delvarworld/EdAyr/\n\n```\nvar m = new Backbone.Model();\n\n// Listen ONLY for change of property `a`\nm.bind('change:a', function(){\n    alert('a changed loudly');\n});\n\n// Correctly alerts nothing\nm.set({'a': 'cows'}, {silent: true});\n\n// Alerts!\nm.set({'a': 'cows'}, {silent: true}).set({glue: 'bob'});\n\n// Alerts!\nm.set({'a': 'more cows'}, {silent: true}).unset('chicken');\u200b\n```\n\nIf you set a listener on a property, and update that property SILENTLY, and then chain another set / unset on it, the silent is ignored and the event is triggered.\n\nNot sure if this nasty little issue is backbone or underscore so filing here\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1272",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1272/comments",
    "title": "Keep track of routes added dynamically",
    "created_at": "2012-05-02T12:20:57Z",
    "updated_at": "2013-07-05T20:27:01Z",
    "body": "I think we should be able to access dynamically added routes in order to remove them later.\nI can provide a full use case if you don't see why anyone would do that.\n\nOne possible solution would be returning the route when it's been added.\n\n`var myNewRoute = evenium.core.router.route( route , routeName, callback );`\n\nor providing an access by route name :\n\n`Backbone.history.routesByName[routeName*]`\n- as provided to the route function\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1271",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1271/comments",
    "title": "Uncaught ReferenceError: foo is not defined",
    "created_at": "2012-05-02T04:37:27Z",
    "updated_at": "2012-05-02T04:38:46Z",
    "body": "in tpl:\n\n<div><%= foo %></div>\n\nIf foo variable is not defined, it will report this error.\nRecommended as php smarty template engine as masked such an error, so that you can this no value without having to manually assignment.\n\nMay consider using try{}catch(e){}.\n3Q\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1270",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1270/comments",
    "title": "Question: Shouldn't push and unshift fire and add event ?",
    "created_at": "2012-05-02T01:27:56Z",
    "updated_at": "2012-05-02T05:11:52Z",
    "body": "For me it looks perfectly right to expect those 2 functions to fire an add event...\n\nAnd firing an push and unshift event isn't an option at least in my head, because it doesn't matter where you add it's an add !\n\nIs there a reason ?\n\n( this could be applied to pop and unshift, too..)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1266",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1266/comments",
    "title": "How do I persist a single object?",
    "created_at": "2012-05-01T21:55:50Z",
    "updated_at": "2012-05-06T13:51:13Z",
    "body": "Appologies if this is not the correct forum to raise this question...\n\nI'm trying to save a settings object so on subsequent visits I can have the id of the item in  localstorage that the user was last working with, perhaps this is not the correct way to go about it?\n\nI'm not sure if it's a problem/limitation of the localstorage adapter or something I don't understand about backbone itself.\nHere's what  I tried:\n\ncartStatus = Backbone.Model.extend({\n    localStorage: new Store(\"cartStatus\"),\n    currentClientId: \"\"\n});\n\nvar myStatus = new cartStatus;\n\n$(function () {\n    myStatus.fetch();\n    alert(\"loaded\" + myStatus.get(\"currentClientId\"));\n    myStatus.set({ \"currentClientId\": \"abc\" });\n    myStatus.save();\n});\nIf I load the page multiple times it says loaded: undefined every time. however, after my second load I would expect loaded: abc every time. when I inspect my localstorage after 2 loads I see this: (duplicate nested records)\n\ncartStatus-d2a7b64d-2f15-a741-9a8c-e254b4a13682 {\"0\":{\"currentClientId\":\"abc\",\"id\":\"dd5e0e47-9356-ea30-2de3-75a041848b88\"},\"currentClientId\":\"abc\",\"id\":\"d2a7b64d-2f15-a741-9a8c-e254b4a13682\"}\ncartStatus dd5e0e47-9356-ea30-2de3-75a041848b88,d2a7b64d-2f15-a741-9a8c-e254b4a13682\ncartStatus-dd5e0e47-9356-ea30-2de3-75a041848b88 {\"currentClientId\":\"abc\",\"id\":\"dd5e0e47-9356-ea30-2de3-75a041848b88\"}\n\nI've also written up this question on SO here:\nhttp://stackoverflow.com/questions/10326690/backbone-js-trouble-persisting-simple-model-to-localstorage\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1263",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1263/comments",
    "title": "Silent not respected in model.clear",
    "created_at": "2012-04-30T15:37:05Z",
    "updated_at": "2012-04-30T15:41:36Z",
    "body": "The silent option is not being respected when doing a model.clear(), coz the individual attributes trigger a change event when being unset. \n\nThere should be a check on the options.silent property before trigger the attribute change event.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1262",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1262/comments",
    "title": "Unexpected behavior if you try to treat backbone model instances in a classical OO fashion",
    "created_at": "2012-04-30T14:30:15Z",
    "updated_at": "2012-04-30T14:32:41Z",
    "body": "See the snippet @  http://jsfiddle.net/ZxuFQ/4/\n\nWe would traditionally expect that hashmap2 would contain only the values  {4,5,6}. However it contains {1,2,3,4,5,6}\n\nSurprisingly if you do this: \n\nhttp://jsfiddle.net/SaaJz/4/\n\nthe behavior is as one would expect!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1261",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1261/comments",
    "title": "0.5.3 to 0.9.2 collection inefficiency",
    "created_at": "2012-04-30T03:02:43Z",
    "updated_at": "2012-12-10T16:22:47Z",
    "body": "I upgraded from 0.5.3 to 0.9.2 and I noticed a significant decrease in speed on my application. The application handles many large collections and adds a large number of models at certain points. There is anywhere between 0 to 600 models added at a time. In the 0.5.3 version the sortedIndex function was the most used taking 12% of the CPU. in the 0.9.2 version the code became significantly slower and the sortBy function was taking 70% of the CPU. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1259",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1259/comments",
    "title": "Add router specs for pushState: true",
    "created_at": "2012-04-29T17:10:18Z",
    "updated_at": "2012-06-18T21:58:36Z",
    "body": "In the process of addressing #1252 and attempting to write a spec, I noticed that there no specs for pushState: true in the test suite. This is probably because when you enable pushState in the current test suite, you get redirected to file:///#path/to/test.html \n\nThe router is a pretty important part of backbone ;) and should definitely be thoroughly tested. It seems like there are 3 \u2018scenarios\u2019 that cause different behavior in the router:\n1. pushState: true \n2. pushState: true in pushState unsupported browsers\n3. pushState: false (the current scenario)\n\nI say this because https://github.com/documentcloud/backbone/blob/master/test/router.js:204 would have caught #1252 in scenario 2 and adding to the router specs with these 3 scenarios in mind may catch other unknown issues.\n\nWe could stub window.location to prevent the redirect to file:///#path/to/test.html.\n\nWould love to help out in any way I can!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1252",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1252/comments",
    "title": "Backbone history with pushState enabled incorrectly handles urls with query params in browsers that do not support pushState",
    "created_at": "2012-04-27T17:26:22Z",
    "updated_at": "2014-04-16T14:03:05Z",
    "body": "Repro:\n- enable pushState\n- add some params `http://jsbin.com/epetak/2?table=flipped`\n- Backbone will redirect to `http://jsbin.com/epetak/2#?table=flipped` when it should redirect to `http://jsbin.com/?table=flipped#epetak/2`\n\nNote: Backbone correctly redirects when pushState is disabled\n\nJSbin does not work great for demoing this issue. In non-push state supported browsers it will redirect to http://jsbin.com/#epetak/2?table=flipped then to http://jsbin.com/# but that should still show the issue.\n\n``` javascript\n$(function() {\n\n  var Router = Backbone.Router.extend({\n    routes: {\n    \"*anything\" : \"anything\"\n    },   \n    anything: function() {\n      alert(window.location.search);    \n    }\n  });\n\n  window.router = new Router();\n  Backbone.history.start({ pushState: true });\n});\n```\n\nThanks for chatting about this at last night's Backbone meetup @jashkenas \n\nI'll (hopefully!) have a fix + spec for this after the coming weekend but fixing this may break earlier apps. What are your feelings on this issue?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1251",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1251/comments",
    "title": "Add iterators for collections",
    "created_at": "2012-04-26T21:29:53Z",
    "updated_at": "2012-04-30T16:13:48Z",
    "body": "A common pattern I use my Backbone collections is grabbing a single model from the collection, then looking up the next model or previous model in the collection. The proposed ES6 iterators are similar to this (see : https://developer.mozilla.org/en/JavaScript/Guide/Iterators_and_Generators).\n\nIs there any plan on building in a standard way to do this in Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1249",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1249/comments",
    "title": "backbone save - success error callback issue",
    "created_at": "2012-04-26T11:19:07Z",
    "updated_at": "2012-04-30T20:41:53Z",
    "body": "I am trying to save a backone model with error and success callbacks. As the documentation says\n\n> save accepts success and error callbacks in the options hash, which are passed(model, response) as arguments. The error callback will also be invoked if the model has a validate method, and validation fails. If a server-side validation fails, return a non-200 HTTP response code, along with an error response in text or JSON.\n\nWhen the server validation fails, I am sending a non-200 response with the error object, but still, the success callback is called.\n\nHere is the save function \n\n``` js\nthis.model.save(item, {\n  wait: true,\n  success: function (model, response) {\n    // even if there is a non-200 response this is being called\n    app.navigate('items/'+model.id, {trigger: true, replace: true})\n    self.undelegateEvents();\n  },\n  error: function (model, response) {\n    // doesn't get called when there is a non-200 response\n    self.undelegateEvents()\n    self.delegateEvents()\n  }\n});\n```\n\nAnd this is what I am doing on the server\n\n``` js\nimager.upload(req, res, function (err, files, cdnUri, res){\n  if (err) return res.json(err, 403)\n  item.image = { cdnUri : cdnUri, files : files }\n  item.save(function (err) {\n    // when there is an error, this is sent (which is non-200 response with error object)\n    if (err) return res.json(err.errors, 403) \n    res.json(item)\n  })\n}, 'items')\n```\n\nBut the above works fine when I don't send the error object in response. i.e, if I only send the response code `if (err) return res.send(403)`\n\nI am using backbone v0.9.2\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1248",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1248/comments",
    "title": "Collection execute the reset operation, but its model does not trigger \u201cdestroy\u201d",
    "created_at": "2012-04-26T02:50:37Z",
    "updated_at": "2012-04-26T03:13:14Z",
    "body": "for example:\n\nthis.model.bind('destroy', this.destroy, this);\n\nviewinstance.collection.reset();\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1245",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1245/comments",
    "title": "Model.url() doesn't match documentation",
    "created_at": "2012-04-24T03:05:13Z",
    "updated_at": "2012-04-24T11:55:41Z",
    "body": "According Backbone.js documentation:\nmodel.ur() Generates URLs of the form: \"/[collection.url]/[id]\", falling back to \"/[urlRoot]/id\" if the model is not part of a collection\n\nso this line in the code:\n\nvar base = getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();\n\nshould look like this:\n\nvar base = getValue(this.collection, 'url') || getValue(this, 'urlRoot') || urlError();\n\nBasically at the moment if urlRoot is set on model, model never checks if he \"belong\" to collection \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1244",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1244/comments",
    "title": "Defaults don't propagate through multiple levels of inheritance",
    "created_at": "2012-04-24T02:50:15Z",
    "updated_at": "2012-04-24T12:00:19Z",
    "body": "Consider this code:\n\n``` javascript\nvar parent = Backbone.Model.extend({defaults: {foo: 7}});\nvar instance1 = new parent();\nconsole.log(instance1.get('foo')); //7\nvar child = parent.extend({defaults: {bar: 2}});\nvar instance2 = new child();\nconsole.log(instance2.get('bar')); //2\nconsole.log(instance2.get('foo')); //undefined\n```\n\nIf you extend an existing model and provide new defaults, the original defaults are lost and don't operate as would be intended. \nThis could possibly be fixed by modifying extend to perform some basic merging with each member of the defaults for both the parent and the child.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1242",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1242/comments",
    "title": "Simplify fetching single models (aka incremental collection fetching)",
    "created_at": "2012-04-20T21:09:37Z",
    "updated_at": "2012-04-23T20:20:32Z",
    "body": "This is somewhat related to issue #78, but some things have changed since then, so I think it's worth another look.\n\nI'm finding it a bit clunkier than I'd like to take a partially populated collection, fetch a new model by ID, and add it to the collection. It's quite possible I'm missing something something here, I'm no Backbone expert.  The two approaches I've found are:\n\n1) Create a new model instance, specifying the the id in the constructor, and call fetch on it. This works, but has the problem that the initialize method has already been called when the model data is loaded. In my case, initialize does some stuff like creating child collections and populating them from attributes, but there's no data to work with yet because it hasn't been fetched. I considered using parse to do some of the init work, but the sequencing is reversed in the two cases - initialize is called first when creating a model then fetching, but parse is called first when a collection is doing the fetching. \n\n2) Use Collection.fetch with the \"add\" option set. This one is SO close to perfect, but there's no simple way to specify the ID of a model to load (in particular when using RESTful URLs where the ID is part of the base URL, not query string params). I sort of kludged it by specifying the \".url\" option on the call to fetch, and building the URL manually by concatenating the collection URL with the model ID. It works, but again seems clunky.\n\nOne solution would be to specify an ID to collection.fetch (maybe as simple as options.id). Then along with add: true, you would have simple incremental collection loading. \n\nOr maybe there's a better solution for single model fetching that solves issue 1) listed above.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1241",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1241/comments",
    "title": "Collection.get(id) return undefined.",
    "created_at": "2012-04-20T11:00:22Z",
    "updated_at": "2012-09-02T14:01:51Z",
    "body": "I am using chrome18, and I happen to find in Todo example, after creating a new Todo, the new created Todo can not be retrieved by Collection.get(id) method.\n\nBelow is the output I am diving into the Todo example in Chrome.\n\n> for (var i in Todos.models) console.log(Todos.models[i].id);\n> 5a2f7c24-61e2-ad6b-ebfd-bed7473397a1\n> 5f813a47-63a1-3d6d-7962-32cb9beccf38\n> 0e41508a-9470-c136-b0e1-167697e62bf6\n> 0513394b-6027-15f0-00ea-7a5036b91b5b\n> a9bd4340-5471-04e1-fe96-7c11ea4b556b\n\nThere are 5 ids in the collection.\n\n> for (var i in Todos.models) console.log(Todos.get(Todos.models[i].id));\n> child\n> child\n> child\n> 2undefined\n\nBut only 3 ids can be retrieved via Collection.get(id).\n\nI think it's a bug, but I am not sure it's Backbone's or Todo example's. Please help to confirm it.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1240",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1240/comments",
    "title": "Rapid rendering of views (multiple back-button clicks)",
    "created_at": "2012-04-20T03:21:58Z",
    "updated_at": "2012-04-20T17:01:12Z",
    "body": "Hi -\n\nI'm working on a project right now...in my testing I happen to click back/forward a lot to test the chain of clicks for my app.\n\nI've noticed that if I hit the back button (or forward for that matter) very rapidly, it cues up several render() events, as each view is waiting for data from the server.\n\nSo, I wanted to throw out the idea of a render queue? The concept is similar to how animation is handled in jQuery, they queue would let each of the renders happen serially, as the user may expect. Otherwise there is this \"jarring\" rendering where you see flashes of content, that gets overwritten, etc...\n\nSimilar to this queue idea, I wonder if it would make sense to stop the renders from happening except for the last render requested. This may or may not make complete sense, but I think it could have some value -- and save some excessive traffic/hits to the REST server getting collections that it doesn't need, since they wouldn't be displayed.\n\nThoughts???\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1237",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1237/comments",
    "title": "Custom view attributes are shared between different instances",
    "created_at": "2012-04-19T12:24:44Z",
    "updated_at": "2012-04-19T13:29:44Z",
    "body": "Please see this fiddle: http://jsfiddle.net/XgPyH/31/\n\nSo we are creating 10 instances of itemView and calling the addItem method to add 10 items to each itemView. Each itemView should have 10 items in their itemArray property. But instead they share the itemArray property and have 100 items in it.\n\nThe problem might be that backbone.view is not resetting the custom attributes in the constructor.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1233",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1233/comments",
    "title": "Conflict with other plugin's click events",
    "created_at": "2012-04-17T08:46:03Z",
    "updated_at": "2014-10-14T12:44:13Z",
    "body": "Hi, I'm trying to use Backbone.js with a jQuery plugin (easyTabs) but it seems that Backbone is highjacking the click event from the plugin.. It does the same thing when I try to use jQuery UI Tabs.\n\nI have no errors and my anchor from my link is in my URL but it seems that the click event is blocked.. Someone already have this issue?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1231",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1231/comments",
    "title": "Request to support RegExp in route method",
    "created_at": "2012-04-17T06:19:39Z",
    "updated_at": "2012-04-17T06:34:35Z",
    "body": "Hello,\n\nI would like to provide a configurable regex value during execution to change routing methods. This could be done by creating a RegExp based on whatever rules have changed. I have tried this with the current Backbone implementation but it doesn't appear to work.\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1230",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1230/comments",
    "title": "[big bug]why need default route in the Router ?",
    "created_at": "2012-04-17T01:50:13Z",
    "updated_at": "2012-04-18T18:51:18Z",
    "body": "I code an example in the JSFIDDLle,\nhttp://jsfiddle.net/VWBvs/5/\n\nwhen I remove the js code \n## \u201calert\", function in the route,\n\n  defaultRoute : function(actions){\n                alert(actions);\n##             },\n\nall other route cann't work  ?\n\nHowever,if i remain the \"alert(actions)\",they all can be work.\nIt's reallay weird ,so I need your helps sincerely for I am a beginner on backbone ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1229",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1229/comments",
    "title": "'sync' event is not triggered if the method call has success callback",
    "created_at": "2012-04-16T20:59:33Z",
    "updated_at": "2014-05-19T17:01:18Z",
    "body": "\"Catalog of Events\" in the FAQ says:\n\n```\n\"sync\" (model, collection) \u2014 triggers whenever a model has been successfully synced to the server.\n```\n\nYet the event is only triggered if the create/save/destroy method call wasn't passed a success callback in the options argument.\nIt bit me some time ago when I bound view's render method to 'sync' and attempted to only use success and error callbacks for user notifications.\n\nThe current behavior does make a certain amount of sense, so maybe this just requires a documentation update.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1228",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1228/comments",
    "title": "tagName should be able to be defined as function, ala className",
    "created_at": "2012-04-16T20:20:25Z",
    "updated_at": "2012-04-17T15:48:01Z",
    "body": "Currently tagName must be a string, and can't be the result of a function. I expect the behavior to be similar to that of className, attributes, etc.\n\nWebkit browsers show `Uncaught Error: INVALID_CHARACTER_ERR: DOM Exception 5`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1226",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1226/comments",
    "title": "Backbone routes fail when using `root` option",
    "created_at": "2012-04-16T04:38:46Z",
    "updated_at": "2012-04-18T18:41:04Z",
    "body": "Hi,\n\nI have noticed the following when using the `root` option of `start` when serving a page from something other than '/'.\n- The URL (or hash) is not tidy, for example navigating on a link changes the URL to `http...app.com/currentcurrent/content` &mdash; `/current` being the root.\n- In push state browsers(ex: Chrome 18) but not hash change browsers (ex: IE 8) clicking that link again re-routes instead of detecting that it is the same location.\n\nI might be misreading the (very light) routes documentation, so I have a demo here: http://backbone-routes.herokuapp.com/ and the source available here: https://github.com/leshill/backbone_routes\n\nIs this a real issue or am I missing something?\n\nAfter reading through the code, I have come up with a patch that tightens the handling of the fragment and resolves the issues I am having. You can see that commit here: https://github.com/leshill/backbone/commit/38f54ef2d7fe58b6f22848af08c6fe31428b306f\n\nIf this fixes a real issue with `Backbone.js`, then yes, that is a commit without a spec &mdash; pointers on how-to would be welcome :) Or I would be happy to refactor the `Router`, making it easier to spec in the process :)\n\nThanks for working on `Backbone.js`, we find it incredibly useful.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1224",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1224/comments",
    "title": "error callback on model save doesn't $.parseJSON the response",
    "created_at": "2012-04-15T19:36:44Z",
    "updated_at": "2013-05-13T10:31:03Z",
    "body": "Hey guys\n\nI am doing something like this against a rails 3.2 back end (where `this.user` is an instance of a backbone model)\n\n``` javascript\n    this.user.save(null, {\n      success: this.registered,\n      error: this.registerError\n    })\n```\n\nOn the error callback, I am getting a jquery ajax response object, even though the response header is application/json\n\nas a workaround, I am using a function wrapper when I pass in the callback\n\n``` javascript\njsonifyResponse = function(fn){\n  return function(model, response){\n    var json = JSON.parse(response.responseText)\n    fn(model, json)\n  }\n}\n\n   this.user.save(null, {\n      success: this.registered,\n      error: jsonifyResponse(this.registerError)\n    })\n```\n\nbut this isn't really ideal (or intuitive)\n\nI don't mind writing a patch, but I was wondering a) Is there something else I need to do to get the response parseJSONd? and b) is there some reason you guys dont want to modify the current behavior?\n\nI am thinking it would be pretty simple to check the header in wrapError, and if it is application/json, do a $.parseJSON\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1223",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1223/comments",
    "title": "model.save(data, {wait:true}) stores the new attributes even after a bad response",
    "created_at": "2012-04-14T18:54:04Z",
    "updated_at": "2012-04-23T22:03:15Z",
    "body": "x = new Backbone.Model();\nx.url = '/some_url';\nx.save({'field1': 'test'}, {wait: true})\n\n**\\* save fails  with a HTTP 400 response ***\n\nx.toJSON() ->  field1: \"test\"\n\nThe fields that failed a save should not exist in the model after a bad response. I'd argue that they shouldn't have made it into the model's attributes before we get a 200 reponse when wait:true is passed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1222",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1222/comments",
    "title": "model.toJSON and collection.toJSON unused options argument",
    "created_at": "2012-04-14T10:15:50Z",
    "updated_at": "2012-04-16T13:09:28Z",
    "body": "This is not an issue at all, but while I was reading backbone.js I found out that there is unused options argument for those two methods :\n\n``` javascript\n\n// in Backbone.model\n\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n// in Backbone.collection\n\n    toJSON: function(options) {\n      return this.map(function(model){ return model.toJSON(options); });\n    },\n\n```\n\nis this intentional ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1221",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1221/comments",
    "title": "download from site v0.9.2 (production) is missing View namespace",
    "created_at": "2012-04-14T01:05:54Z",
    "updated_at": "2012-04-14T01:14:13Z",
    "body": "download from the production link on the backbone home page, and it should be replicated by doing the following:\n\n``` html\n<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <title>Broken</title>\n    <script src=\"backbone.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n``` javascript\nconsole.log(Backbone.View) // undefined\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1218",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1218/comments",
    "title": "unintentional build?",
    "created_at": "2012-04-13T08:33:13Z",
    "updated_at": "2012-04-16T18:48:20Z",
    "body": "Just realized that `backbone.min.js` was rebuild in this commit 74dec4d95670aaf7de3904604358bd6841e70f30, wondering if this was intentional as the `backbone.js file` now differs from the `backbone.min.js` as the last few changes which did not `build`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1217",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1217/comments",
    "title": "Difference in objects returned from collection.reset and collection.add",
    "created_at": "2012-04-13T03:07:04Z",
    "updated_at": "2012-04-18T21:52:30Z",
    "body": "Backbone.Collection.reset and Backbone.Collection.add are clearly used for different things.  However, there are similarities between the two.  For one, both have a trigger (reset and add respectively) and both take a list of models as input.  The documentation states that reset could be used to bootstrap a collection during initial page load.  This example really doesn't make sense though because if a page is being loaded for the first time, won't the collection be empty anyway?  In fact, a much more realistic use case would be to refresh the entire collection after the page was already loaded.  Furthermore, you could just as easily use Backbone.Collection.add to bootstrap that collection in the beginning.\n\nHowever, using reset is appealing because you could technically use it to bootstrap initially and to refresh the collection at any point during runtime.  The question that I have is around the object that is returned from these two methods (reset and add).  The reset method includes an object with multiple keys, one of them being the models key which points to the array of models that were added during the reset method.  That key is really useful because you can use it to pass to a template for rendering.  Likewise, that same array, is also present in the add method.  This is where the behavior becomes different.\n\nThe reset method triggers the \"reset\" trigger and passes \"this\" back to whatever function is listening, plus options.  The \"this\" is the scope of the reset method, unless bound to a higher scope using a bind technique (I didn't look that far).  The reset trigger from the reset method differs from the add trigger in the add method in that instead of passing the \"this\" variable to listening functions, it passes instead, the models array.  I think it's a lot easier to deal with when the trigger passes the models array instead of passing the \"this\" context to the listening functions.\n\nOn line 746: if (!options.silent) this.trigger('reset', this, options);\n\nOn line 631: model.trigger('add', model, this, options);\n\nI understand that the reset method only throws the reset trigger one time, whereas the add method throws the add trigger for each model.  What though, is the usefulness of returning the \"this\" context to listening functions?  Aren't those functions just interested in the models: Array?  Ultimately those are going to get snagged and passed to a render function anyway.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1215",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1215/comments",
    "title": "how use nested id's?",
    "created_at": "2012-04-11T21:05:22Z",
    "updated_at": "2012-04-17T17:56:36Z",
    "body": "Example: mongodb document have a **_id.$oid** field\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1214",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1214/comments",
    "title": "Add the ability to disable navigate same url short circuit",
    "created_at": "2012-04-11T18:41:06Z",
    "updated_at": "2017-01-12T21:46:34Z",
    "body": "In the navigate method of the Router object, there is the following line:\n\nif (this.fragment == frag) return;\n\nSo if the target URL is the same as the current URL, the navigate method does nothing. In my app I want to be able to execute the routing code even if the url is the same.\n\nI'm thinking that an extra field could be passed to the options object of the navigate method:\n\nforce: [true|false]\n\nby default this is set to false, but if set to true the navigate method would still run even if the current url is the same as the target url.  Has this been discussed before?  I am willing to do a pull request with the change if it would be accepted to the project.\n\nThanks\nMark.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1212",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1212/comments",
    "title": "Comparator work in Firefox and Safari but not in Chrome",
    "created_at": "2012-04-11T11:33:54Z",
    "updated_at": "2014-04-29T17:46:32Z",
    "body": "I'm having issue when I try to sort my collection using comparator. It works in Firefox 11.0 and Safari 5.1.5 but not in Chrome 18.0.1025.151. \n\nSomeone already got that issue? \n\nThanks\n\n-- My code\nvar ItemMenu = Backbone.Model.extend({\n\n  \"sync\": LocalSync,  \n})\n\nvar ItemsMenu = Backbone.Collection.extend({\n  model: ItemMenu,\n  \"sync\": LocalSync,\n  comparator: function(itemmenu){\n    return itemmenu.get(\"last_name\")\n  },\n\n  localStorage: new Store('items_menu')  \n})\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1210",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1210/comments",
    "title": "feature: off() usable with events, functions, contexts or *any combination thereof*",
    "created_at": "2012-04-11T03:26:55Z",
    "updated_at": "2012-04-11T18:50:55Z",
    "body": "I modified Backbone.js in my branch, but I wanted to submit this as an issue first to get the comments of more experienced backbone.js committers before I submit it as a pull request:\n\nI made the following commit that allows Backbone.Events.off() to be usable with events, functions, contexts or any combination thereof. \n\nhttps://github.com/malandrew/backbone/commit/eb275fac1fa7193b5f7b8e519bc7a1c2610171c5\n\nI've tested it and been using it without any issues so far in my development environment. I wanted to see if anyone else saw value in this patch and if it is useful to you, if you could test it out and let me know if it is working fine and if you see value in submitting it as a pull-request to the main branch.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1209",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1209/comments",
    "title": "Force Model.isNew() to return true?",
    "created_at": "2012-04-11T02:48:27Z",
    "updated_at": "2012-04-12T02:57:51Z",
    "body": "We have some tables that where the primary key is not an auto-increment and is provided by the user.  When calling save on a table like this, there seems to be no way to have backbone issue a POST request.  As soon as the user specified the primary key then id is no longer null and so Model.isNew() will always return false.  This results in a PUT request every time, but we need a POST.\n\nI'd be happy to submit a pull request w/ unit test, but there's not much to it.  Here's basically what I've done:\n\n``` javascript\nBackbone.Model.prototype.isNew = function () {\n  if (this.overrideIsNew == true) return true;\n  return this.id == null;\n};\n```\n\nIt's probably fairly obvious but after creating the model, setting model.overrideIsNew = true will cause the model to be considered new every time and results in an insert.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1208",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1208/comments",
    "title": "feature idea: allow make to use `text` instead of `html`",
    "created_at": "2012-04-10T17:00:13Z",
    "updated_at": "2012-04-11T17:15:39Z",
    "body": "as a fourth argument: `make(tagName, attributes, content, useText)`\n\nwould make dealing with escaping things much easier, as it stands now we do this instead:\n\n```\nvar el = self.make('li', {...});\n$(el).text(...);\n```\n\nor open to other ways to make this cleaner.\nthanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1207",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1207/comments",
    "title": "Double / in History.navigate fallback",
    "created_at": "2012-04-10T13:22:35Z",
    "updated_at": "2012-04-10T18:31:45Z",
    "body": "Assume that Backbone is started with the following configuration: \n`Backbone.history.start({ pushState: true, hashChange : false})`\nAlso, History `options.root` is left at default value which is `/`\n\nInvoking `navigate(\"/index\")` on router in browser not supporting pushState causes \"Page Not Found\" error. Browser address bar shows \"http://index\" without the host.\n\nThis is caused by double `/` passed to `window.location.assign` when `this.options.root` and  `fragment` are concatenated.  \n\nPossible fix is to use `frag` which is already a `fragment` with leading `/` stripped.\n\nSo instead of \n\n```\n  // If you've told us that you explicitly don't want fallback hashchange-\n  // based history, then `navigate` becomes a page refresh.\n  } else {\n    window.location.assign(this.options.root + fragment);\n  }\n```\n\nUse\n\n```\n  // If you've told us that you explicitly don't want fallback hashchange-\n  // based history, then `navigate` becomes a page refresh.\n  } else {\n    window.location.assign(this.options.root + frag);\n  }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1205",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1205/comments",
    "title": "`error` option on #save, #fetch, #destroy and #sync doesn't work for errors from server",
    "created_at": "2012-04-09T21:32:27Z",
    "updated_at": "2012-04-09T21:39:15Z",
    "body": "The function specified for the `error` option on the `#save`, `#fetch`, `#destroy` and `#sync` methods is called when the server returns with a non-200 status code, as described in the documentation.\n\nThe `error` function that's actually passed to the `$.ajax()` method is the specified `error` function, wrapped in another function using `Backbone.wrapError`. \n\nThe problem is that the function returned by this `#wrapError` method isn't compatible with what `$.ajax` expects for its `error` option: it takes the attributes `(model, resp)` instead of `(jqXHR, textStatus, errorThrown)`.\n\nBecause of this, `#wrapError` doesn't receive the information it expect, and thus fails to pass the right information to the user-defined `error` option, meaning using it to respond to server errors doesn't work at all.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1202",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1202/comments",
    "title": "Integration with Node's EventEmitter?",
    "created_at": "2012-04-09T12:30:18Z",
    "updated_at": "2012-04-09T14:42:10Z",
    "body": "Hey guys,\n\nI'm thinking of using Backbone.js for my server-side (using node.js) models, however the rest of the application is written using node's built in [EventEmitter](http://nodejs.org/docs/latest/api/all.html#all_class_events_eventemitter). I'm wondering if you guys have any thoughts on whether or not these already play nicely, or any steps to make them play even nicer...\n\nWould love to know :) Thanks guys,\n- Ben\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1198",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1198/comments",
    "title": "collection.sortedIndex does not use collection.comparator",
    "created_at": "2012-04-06T01:37:17Z",
    "updated_at": "2012-04-06T14:15:11Z",
    "body": "`collection.sortedIndex` does not use `collection.comparator`, so it always returns 0\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1197",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1197/comments",
    "title": "Backbone.js creator is an epic man",
    "created_at": "2012-04-05T21:35:47Z",
    "updated_at": "2012-04-05T21:37:12Z",
    "body": "Not as great as me when I'm sober but he will do a difference someday!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1196",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1196/comments",
    "title": "United Kingdom",
    "created_at": "2012-04-05T21:18:07Z",
    "updated_at": "2012-04-05T21:34:46Z",
    "body": "United Kingdom remain the throne\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1195",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1195/comments",
    "title": "Suck cock",
    "created_at": "2012-04-05T21:16:19Z",
    "updated_at": "2012-04-05T21:34:53Z",
    "body": "This is dedicated to you. Spine.js forever!!!!! US vs UK haha\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1194",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1194/comments",
    "title": "Why you hate black males?",
    "created_at": "2012-04-05T21:07:29Z",
    "updated_at": "2012-04-05T21:11:58Z",
    "body": "Why you hate black males? Really.. you ban everything I say just because I'm black!!! BLACK POWER!!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1193",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1193/comments",
    "title": "#1374 Backbone.js don't allow",
    "created_at": "2012-04-05T20:59:08Z",
    "updated_at": "2012-04-05T21:11:58Z",
    "body": "Hell yes. This is what you get when you give your team more than alcohol.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1192",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1192/comments",
    "title": "Backbone.js to be renamed to Cock.js",
    "created_at": "2012-04-05T20:55:08Z",
    "updated_at": "2017-01-13T11:51:47Z",
    "body": "Hell yeah. don't do drugs!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1191",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1191/comments",
    "title": "#7535",
    "created_at": "2012-04-05T20:52:10Z",
    "updated_at": "2012-04-05T21:11:58Z",
    "body": "Suck cock\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1190",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1190/comments",
    "title": "backbone.js vs intoxicated.js",
    "created_at": "2012-04-05T20:46:38Z",
    "updated_at": "2012-04-05T20:47:40Z",
    "body": "I hit something wrong tonight and turned devil.. I always turn devil when I'm intoxicated. Sorry. Cali ftw!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1189",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1189/comments",
    "title": "#1284 Sad Circus",
    "created_at": "2012-04-05T20:32:55Z",
    "updated_at": "2012-04-05T20:40:18Z",
    "body": ":(\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1188",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1188/comments",
    "title": "Backbone.js will be renamed to fresh.js due to copyrights issues",
    "created_at": "2012-04-05T20:21:21Z",
    "updated_at": "2012-04-05T21:11:56Z",
    "body": "Just to note you guys that we're changing name with the next release. We're changing to fresh.js due to some conflicts with a company called \"Breakbone\". Any input on this new name is appreciated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1186",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1186/comments",
    "title": "Backbone.Events will allow rebinding the same method twice",
    "created_at": "2012-04-05T14:43:27Z",
    "updated_at": "2012-09-13T11:37:30Z",
    "body": "When binding an event to a function, I can repeatedly bind the same event to the same function, meaning that function is run multiple times. The way around this is to always unbind and rebind a method. To illustrate the point:\n\n``` javascript\nBackbone.View.extend({\n    initialize: function () {\n        this.on('doSomething', this.fn);\n        this.on('doSomething', this.fn);\n        this.on('doSomething', this.fn);\n        this.trigger('doSomething'); // fn will run 3 times\n    },\n    fn: function (){}\n});\n```\n\nThis is a real gotcha in the way events work. Is there a valid use case for binding to the same function multiple times? Or could we ensure that Backbone.Events.on will not bind the same event twice, or perhaps overwrite the old binding?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1183",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1183/comments",
    "title": "success and error callbacks are not undefined.",
    "created_at": "2012-04-04T20:57:52Z",
    "updated_at": "2012-04-04T21:19:03Z",
    "body": "The problem is that when the view passes an options object literal to the model's sync method, the error and success methods have been stubbed out as function() {} and therefore cannot be extended with the _.extend(params, options) pattern.\n\nI propose leaving those methods undefined unless specifically declared.  That way extending the objects produces the desired effect.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1182",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1182/comments",
    "title": "Unbinding all callbacks for `context` for all events",
    "created_at": "2012-04-04T14:02:08Z",
    "updated_at": "2012-07-19T19:16:06Z",
    "body": "Model.off works not as stated in the documentation.\n\nExample of Model.off in the documentation:\n\n// Removes all callbacks for `context` for all events.\nobject.off(null, null, context);\n\nHowever this call removes ALL callbacks REGARDLESS of the context. If the first argument is null, than the 2nd dn 3th ones do not matter. See backbone.js line 107:\n\noff: function(events, callback, context) {\n  var ev, calls, node;\n  if (!events) {\n     delete this._callbacks;\n  } else if (calls = this._callbacks) {\n  .......\n  }\n  return this;\n}\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1180",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1180/comments",
    "title": "Discuss : Why view.el is initialized this early ?",
    "created_at": "2012-04-04T09:26:15Z",
    "updated_at": "2012-04-04T14:48:32Z",
    "body": "Currently, Backbone.View.el field is initialized at view construction time (_ensureElement).\n\nIs there a particular reason why this initialization is made this early ?\n\nIn my particular case, I use \"master\" views which are responsible of retrieving HTML fragments via ajax call to my server.\nThese master views are then composed of \"nested views\" which are responsible of sub fragments of my master HTML fragment (for example, let's say in my master fragment, I have several tabs, I'll use 1 nested view per tab).\n\nFor now, my \"master\" view constructs its nested view during the initialize() phase, that is to say, before my html fragment has been rendered / included into the DOM.\n\nProblem is : since I instantiate my nested views this early, even if I declare a el:\"#myTab\" in my nested view, this.el will always be null because at time of _ensureElement() is called, #myTab is not yet present in my DOM.\n\nI know I have workarounds :\n- Instantiate my nested view after my master's HTML fragment has been appended in the DOM : why not, but I'm wondering if the number of instances of my nested views won't grow substantially every time I'll reload my html fragment\n- Manually call setElement() on my nested view after HTML fragments has been appended in the DOM : If I could avoid to do things manually (and thus, forget to do it ;)), it would be better\n\nIt's just a discussion about an enhancement, I'm open minded and like to know if I'm doing things wrong :-)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1179",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1179/comments",
    "title": "model.isValid not working",
    "created_at": "2012-04-04T09:04:25Z",
    "updated_at": "2012-04-04T15:07:01Z",
    "body": "Hello,\nI am using backbone.js 0.9.2 and backbone.validation.js 0.5.2.\n\nIn Model I have set validation rules and then I call model.isValid();\n\nIt gives me error on this function:\n\n   isValid: function () {\n            return !this.validate(this.attributes);\n        },\n\n```\n the error is:\n```\n\nthis.validate is not defined.\n\nwhat's wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1177",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1177/comments",
    "title": "Get \"fragment\" in IE8 when using {pushState: true, hashChange: false}",
    "created_at": "2012-04-03T20:01:52Z",
    "updated_at": "2012-04-04T14:39:44Z",
    "body": "Hey guys,\n I am having an issue where I am using {pushState: true, hashChange: false} (to either use push state or fall back to page loads - the app can serve any page that we navigate to)\n\nHowever, if I go to /something instead of the root, in IE with those options the fragment sent to the router is empty.  Removing hasChange: false I get '/something'\n\nThat fragment is then what gets used when I start history in my router initialize method.  This means that it works correctly and when I go to a page it can show the right stuff, expect in IE any url gets routed to the \" \" route.\n\nAny thoughts on something stupid I am doing.  I am still trying to figure out if I am missing something, using it incorrectly, or a possible bug\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1176",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1176/comments",
    "title": "i <3 BB object model ...",
    "created_at": "2012-04-03T18:31:49Z",
    "updated_at": "2012-04-04T04:42:37Z",
    "body": "Hi,\nSometimes i need to create something \"like class\", and the extend method of Model, Router, View and Collection is perfect for me. I wanted to know if this way is the best solution : (https://gist.github.com/2287018)\n\n```\nvar Kind = function() {\n    this.initialize && this.initialize.apply(this, arguments);\n};\nKind.extend = Backbone.Model.extend\n```\n\nthen i can do that :\n\n```\nvar Human = Kind.extend({\n    toString : function() { console.log(\"hello : \", this); },\n    initialize : function (name) {\n        console.log(\"human constructor\");\n        this.name = name\n    }\n});\n```\n\nit's useful to organize my code.\n\nthank you for your opinion\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1175",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1175/comments",
    "title": "make Backbone.Router case insensitive ",
    "created_at": "2012-04-03T16:54:59Z",
    "updated_at": "2014-05-29T15:25:08Z",
    "body": "Currently the backbone.router will not run route functions unless the route matches both on the CASE in URL, and the CASE defined in the router. The typical browser behaviour is to ignore CASE when handling URL's.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1173",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1173/comments",
    "title": "model ids are not properly indexed by collections on creation",
    "created_at": "2012-04-03T02:30:44Z",
    "updated_at": "2012-04-09T20:12:48Z",
    "body": "I believe model IDs are not properly indexed on creation.  I can reproduce this using the backbone local storage todos demo.\n\nI use chrome developer tools, and set a breakpoint on line 87, then I execute\n\nwindow.Todos = Todos \n\nin the javascript shell\n\nthis gives me a global reference to the Todos collection.\n\nthen I go ahead and enter some Todos in the app.\n\nwhen I call\n\n_.map(window.Todos.models, function(x){return window.Todos.get(x.id)}), \n\nI get back \n\n[child, child, child, child, undefined]\n\nTodos that were retrieved via the fetch, are properly index, so the .get method works fine.  Todos that are newly created, are not properly index, and the .get returns undefined.\n\nnote - the newly created Todos, DO have IDs, backbone local storage assigns them.  the IDs are just not indexed properly by the ._byId field on the collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1171",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1171/comments",
    "title": "Don't navigate with pushState if it's explicitly not wanted",
    "created_at": "2012-04-02T09:00:05Z",
    "updated_at": "2012-04-02T14:15:46Z",
    "body": "In `History.navigate` (line 1102 of current head:)\n\n```\n      // If pushState is wanted && available, we use it to set the fragment as a real URL.\n      if (this._wantsPushState && this._hasPushState) {\n```\n\nThis is because if you pass e.g. `history.start({ pushState: false })` on a browser that \"`_hasPushState`\" it will use `pushState` even if it's broken.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1169",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1169/comments",
    "title": "Option to allow Model.set to run validations, but not bail if they fail",
    "created_at": "2012-04-02T04:01:36Z",
    "updated_at": "2012-08-23T03:42:49Z",
    "body": "I'd really like to be able to have Model.set run my validations and trigger an error event / callback, but not bail out if validation fails.\n\nI want my model's attributes to track exactly what the user has entered, but I also want to receive events / callbacks when the model transitions from valid to invalid. I can accomplish the first part using the `{silent: true}` option to `Model.set`, but when doing this, validations aren't run and callbacks aren't fired, so I don't easily know when my model transitions from valid to invalid.\n\nI could alternately use the default behavior, but then my model gets out of sync with what the user has entered. This is an issue if I have, for example, a save button for the view hooked up to my model. When the user clicks the save button, the most natural way to handle it seems to be to call `Model.save`, which will misleadingly succeed, because the invalid attribute value was not actually set on the model due to validation failure.\n\nPerhaps I'm just thinking about this backwards, but would it be crazy to add a `force` option to `Model.set` that would modify the default `set` behavior by just continuing to update the relevant attribute(s) even if validations fail (but still fire error events / callbacks)?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1168",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1168/comments",
    "title": "History.navigate should return value of loadUrl",
    "created_at": "2012-04-02T03:32:18Z",
    "updated_at": "2012-04-02T21:02:57Z",
    "body": "If calling `History.navigate` with `{trigger: true}` it should return the value of `loadUrl`. I.e. the last line of `navigate` should read:\n\n`if (options.trigger) return this.loadUrl(fragment);`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1167",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1167/comments",
    "title": "getHash should use only the last hash as the fragment",
    "created_at": "2012-04-02T03:25:30Z",
    "updated_at": "2012-04-02T14:27:21Z",
    "body": "In order to allow the app to also pass hash parameters which are not routing fragments, suggest to change the regexp of `History.getHash()` (line 973) to:\n\n`var match = loc.href.match(/#([^#]*)$/)`\n\nin order to select only the last hash param of the url. (Alternately, splitting on e.g. '&' would be acceptable.)\n\nMay then need to also call `loc.getHash()` in `History.start` (line 1040:)\n`} else if (this._wantsPushState && this._hasPushState && atRoot && loc.getHash()) {`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1166",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1166/comments",
    "title": "Set fragment option with History.start",
    "created_at": "2012-04-02T03:07:29Z",
    "updated_at": "2012-04-12T18:25:04Z",
    "body": "It would be useful to be able to specify the starting fragment with `History.start`, since the app may not want it to be the fragment derived from the `window.location` that loaded the page. I propose adding an `option`, e.g. `History.start({ fragment: '/login' })`.  We have already done something similar with our app. Only the following change is required (line 1005 in the current head:)\n`var fragment          = options.fragment || this.getFragment();`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1165",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1165/comments",
    "title": "unshift",
    "created_at": "2012-04-01T15:37:57Z",
    "updated_at": "2012-04-02T01:07:29Z",
    "body": "Hi guys \nminor issue\nI just noticed that unshift can only insert a single element at the beginning of a collection\nthe doc says it takes the same options as add, so we should  either update doc \nor just delegate to add with an {at: 0} option\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1164",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1164/comments",
    "title": "Callable attrs in collection.where",
    "created_at": "2012-04-01T06:43:24Z",
    "updated_at": "2012-04-02T14:34:27Z",
    "body": "It's more powerful to filter models. e.g collection.where({hasChanged:true})\n\n``` js\nwhere: function(attrs) {\n      if (_.isEmpty(attrs)) return [];\n      return this.filter(function(model) {\n        for (var key in attrs) {\n          if (attrs[key] !== model.get(key) && (!_.isFunction(model[key]) || attrs[key] !== model[key]())) return false;\n        }\n        return true;\n      });\n    },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1161",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1161/comments",
    "title": "model.collection is not documented ",
    "created_at": "2012-03-30T21:43:56Z",
    "updated_at": "2012-04-02T21:10:30Z",
    "body": "Hi,\n\nIs there a reason why model.collection is not documented?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1160",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1160/comments",
    "title": "Repeated sentence in doc",
    "created_at": "2012-03-30T14:47:01Z",
    "updated_at": "2012-04-02T01:09:26Z",
    "body": "Here http://documentcloud.github.com/backbone/#Sync the text:\n\nThe sync function may be overriden globally as Backbone.sync, or at a finer-grained level, by adding a sync function to a Backbone collection or to an individual model.\n\nAppears twice.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1159",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1159/comments",
    "title": "Search engine optimization ",
    "created_at": "2012-03-30T12:09:52Z",
    "updated_at": "2012-04-12T16:42:09Z",
    "body": "I had read a previous issue where it was mentioned that since backbone is designed for applications it does not require search engine optimization.  So it wont be supported. \n\nI have used backbone and api's exposed for my application to create a website . Therefore it is very important for me do SEO . \n\nI came across SEO for ajax websites in which whenever the web crawler requests a page i need to take a html snapshot of the page and return it to the crawler . Html snapshot is nothing but loading the page and running all the javascripts and return the end result . \n\nI found out that with QT webkit this can be accomplished . I use Python binding of Qt i.e PyQt and try to take html snapshot. But I face a problem and not all the javascipt gets executed before the page is returned . \n\nHas anyone done this before ? It would be great if some one could provide with an alternative \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1157",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1157/comments",
    "title": "Models added in collection's constructor are overwritten when initialised",
    "created_at": "2012-03-29T17:38:16Z",
    "updated_at": "2012-03-29T17:49:58Z",
    "body": "This is a new bug i came across today when upgrading backbone..\nWhen adding a model to a collection in the constructor... such as:\n(coffeescript below)\n\n```\nclass exports.Tags extends Backbone.Collection\n    model: Tag\n\n    initialize: ->\n        @add(new Tag({name:\"All\",id:'all'})\n```\n\nThen when initializing...\n\n```\n@tags = new Tags(data.tags)\n```\n\nThe \"All\" model no longer exists:\n\n```\n@tags.get('all')    # undefined\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1155",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1155/comments",
    "title": "collection.create does not return a jqXHR",
    "created_at": "2012-03-29T14:33:23Z",
    "updated_at": "2014-01-16T15:23:28Z",
    "body": "I made a mistake in #1111 and documented that `collection.create` returns a `jqXHR`.  I've just noticed, however, that it does not.  It returns the created model.\n\nHowever, this seems incorrect to me.  it seems out of place compared to the other persistence methods.  Furthermore, the `jqXHR` is not accessible in any way and thus there is no way to observe the outcome of the request.\n\nAs for a reference to the model, there are several scenarios:\n1. `{wait: true}`, success - the model is added to the collection.\n2. `{wait: true}`, failure - there is no need for a reference to the model.\n3. `{wait: false}`, success - the model was added to the collection.\n4. `{wait: false}`, failure - the model was added to the collection.\n\nCase number 4 is a bit problematic, but could be easily circumvented by removing the model on a failed request with `{wait: false}`.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1153",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1153/comments",
    "title": "className property should ensure class names on existing elements too",
    "created_at": "2012-03-29T11:55:48Z",
    "updated_at": "2012-03-29T14:47:41Z",
    "body": "When I write a View like this\n\n``` javascript\nvar BodyView = Backbone.View.extend({\n  className: 'body-view'\n});\n```\n\nI'd expect that every view created from it would have the class `body-view`, but that does not happen if you pass an existing DOM element to the view.\n\n``` javascript\nvar body = new BodyView({ el: document.createElement(\"div\") })\n```\n\nAnyone else think that Backbone should ensure class-attributes on the View elements even on existing elements?\n\nIt's just when I look on some View code and it states 'className: \"something\"' I will expect the view to have it. It is weird to have it missing sometimes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1151",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1151/comments",
    "title": "Router confused by route with only queryparams. (on IE)",
    "created_at": "2012-03-29T10:21:44Z",
    "updated_at": "2012-04-09T20:16:46Z",
    "body": "backbones router gets confused on routes that just have a query params.\n## problem\n\nI have a route that caches all queries. \nThis works, except on IE there is a quirck.\n# ?foo=bla  gets parsed ok\n\nnavigate() works ok.\nbut..\nwhen manually entering the browsing  with a url that does not contain  '#'  (eg: /?foo=ble) IE does not add the # and does hence not recognize the route and hence does not call the callback.\n\nAll works ok in chrome & FF.\n\nprobleem seen on On IE 8 and 9, but earlier versions probably have the same problem\n## how to reproduce\n\nWith the following route, intended \n\n``` javascript\n      var Workspace = Backbone.Router.extend({\n\n            routes: {\n                ,\"?*query\": \"query\"  \n              },\n\n            query: function(query) { \n                console.log(\"query: \" + query);    \n              },\n     });\n\n    router = new Workspace;\n    //Workspace.history.start();\n    Backbone.history.start({pushState: true});\n```\n\nThen  browse  to  /?foo=bar  in IE8\n## expected result\n1. url is rewritten  to  /#foo=bar\n2. callback 'query()'  is called.\n## actual result\n1. url is not rewritten\n2. callback is not called\n# fix\n\nThe following patch fixes the problem for me\n\n```\n--- backbone/backbone.js    2012-03-29 11:19:40.000000000 +0200\n+++ backbone.js 2012-03-29 12:06:09.000000000 +0200\n@@ -1025,7 +1025,7 @@\n       // opened by a non-pushState browser.\n       this.fragment = fragment;\n       var loc = window.location;\n-      var atRoot  = loc.pathname == this.options.root;\n+      var atRoot  = ((loc.pathname == this.options.root) && !loc.search);\n\n       // If we've started off with a route from a `pushState`-enabled browser,\n       // but we're currently in a browser that doesn't support it...\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1149",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1149/comments",
    "title": "Method name conflict on prototype chain for event binding",
    "created_at": "2012-03-28T19:26:31Z",
    "updated_at": "2012-04-09T20:33:19Z",
    "body": "Ok so this is kind of hard to explain, but I will try and offer a test case that should be reproducible. I should also note that I discovered this in version 0.5.3. I know that there have been some changes to the way event binding works in subsequent versions, but it's worth checking out anyway.\n\nIt could also be a bug in Chrome, not sure.\n\nThe problem I discovered is that if I store a reference to a view on another view, and both views have a method with the same name, and I bind that method to an event with both views, I am unable to successfully unbind the event from the method on the referenced view.\n\nExample (please read comments):\n\n```\nvar ParentView = Backbone.View.extend({\n\n    views: {},\n\n    initialize: function () {\n        this.model.bind(\"myCustomEvent\", this.render, this);\n\n        _.bindAll(this, \"render\", \"onClose\");\n    },\n\n    render: function () {\n        console.log(\"parent just rendered\");\n    },\n\n    onClose: function () {\n        // this method gets called when I want to remove the view and unbind events\n\n        this.model.unbind(\"myCustomEvent\", this.render); // this works great\n    }\n\n});\n\nvar ChildView = Backbone.View.extend({\n\n    views: {},\n\n    initialize: function () {\n        this.model.bind(\"myCustomEvent\", this.render, this);\n\n        _.bindAll(this, \"render\", \"onClose\");\n    },\n\n    render: function () {\n        console.log(\"child just rendered\");\n    },\n\n    onClose: function () {\n        // this method gets called when I want to remove the view and unbind events\n\n        // In Chrome 17 I noticed that this.render is function() { [ Native Code ]}\n        // this.render !== ChildView.prototype.render, which is why the unbind fails on line 92 of Backbone.js\n        // In this case, you would not expect render to appear as a property of this, but in fact it does\n        // The expected behavior is for render to appear as a property on the prototype chain\n\n        this.model.unbind(\"myCustomEvent\", this.render); // this does not do anything\n    }\n\n});\n\nvar App = {\n    views: {}\n};\n\nApp.views.parent = new ParentView({\n    model: new MyCustomModel()\n});\n\nApp.views.parent.views.child = new ChildView({\n    model: new MyCustomModel()\n});\n\n// If I call App.views.parent.views.child.onClose() then render is not unbound from the myCustomEvent event. \n// I get a zombie view.\n```\n\nThe hack to solve this problem is to change the name of the referenced (child) view's render method. If I change it to, say, \"renderMe\" then it works properly. When inspecting the view, renderMe is not a property of the view itself, but instead is found one level up on the prototype chain where it is expected.\n\nI think there is a conflict going on with the prototype chain where method names are colliding.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1147",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1147/comments",
    "title": "router delegation",
    "created_at": "2012-03-28T10:29:44Z",
    "updated_at": "2012-03-30T12:10:55Z",
    "body": "I'm looking to instantiate a class that extends Backbone.Router and delegates the route handlers to a different class. \n\nFrom what I could tell, Router._bindRoutes expects the route handler to be a string referencing a method defined on the extended Router and doesn't allow for an external callback \n\n``` js\nthis.route(routes[i][0], routes[i][1], this[routes[i][1]]);  // line 922\n```\n\nRouter.route allows a callback to be specified as a third argument, but applies it within the context of the router\n\n``` js\ncallback && callback.apply(this, args); // line 900\n```\n\nThis is the only way I've found around that.. wondering if I'm missing something obvious\n\n``` coffee\nclass DelegatingRouter extends Backbone.Router\n  constructor: (options)->\n    @delegate = options.delegate\n\n    _this = this\n\n    for route, callback of options.routes\n      do (route, callback)->\n        _this.route(route, callback, ()->\n          callback.apply(@delegate, arguments)\n        )\n\n    unless Backbone.history.start(pushState: true)\n      window.location.href = \"/404.html\"\n\nclass DelegatedTo\n  constructor: ()->\n    @router = new DelegatingRouter(\n      delegate: this\n      routes: \n        \"\": this.index\n        \"barf\": this.barf\n        \"barf/super/:ok\": this.super_barf\n    )\n\n  index: ()->\n  barf: ()->\n  super_barf: (ok)->\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1145",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1145/comments",
    "title": "Default values are passed in by reference",
    "created_at": "2012-03-26T17:06:46Z",
    "updated_at": "2012-04-04T13:55:30Z",
    "body": "Having an empty array as a default value can definitely trick the user:\n\nhttp://jsfiddle.net/bika/Kn5sP/2/\n\nIs this intended?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1142",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1142/comments",
    "title": "Why no error message when trying to add a model to the same collection twice?",
    "created_at": "2012-03-26T02:52:25Z",
    "updated_at": "2012-03-26T13:37:09Z",
    "body": "0.9.1 just threw a \"Can't add the same model to a collection twice\" error. This helped me identify and resolve a serious server-side bug that might have gone unnoticed for some time if the client-side error had not been thrown.\n\nI see that duplicates are ignored silently as of 0.9.2 and this was clearly a conscious decision so I just wondered what the motivation for this was.\n\nI can't think of a reason (other than a bug) for trying to add a duplicate model to a collection that can't support duplicates and I would therefore expect to see an error message even if the code is able to mitigate the error as 0.9.2 does.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1139",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1139/comments",
    "title": "Add More Events for Syncing",
    "created_at": "2012-03-24T11:44:14Z",
    "updated_at": "2013-12-20T01:57:39Z",
    "body": "I'd like to see a complete set of events for managing the state of communications to the persistance layer of collections and models. Currently, there's no way in Backbone out-of-the-box to fulfil this common requirement. We have a some loosely related events such as \"sync\" (which only triggers on save/delete, not on fetch) and \"error\" (which only triggers on save error), but these do not cover all of the common use cases.\n\nThe most common use case for these extra events is for updating the UI to reflect the state of the model or collection being acted on. There are other use cases though, depending on how the events are implemented (such as pre-processing the communication, or post-processing the returned data), though there's no predicting how such events could be used - models and collections may hook onto their own sync events.\n\nThere are already 4 requests for this feature on Github, which demonstrates that this is indeed a common requirement worthy of being included in Backbone.js...\n\nhttps://github.com/documentcloud/backbone/issues/477\nhttps://github.com/documentcloud/backbone/pull/206\nhttps://github.com/documentcloud/backbone/pull/542\nhttps://github.com/documentcloud/backbone/pull/583\n\nThe arguments against adding these hooks seem poor or ill-justified, and none of these issues or pull requests come to any real resolution. I think if Backbone wants to remain an unassuming bare-bone's framework, then it needs to provide more hook methods on which developers can use as foundations to build-on functionality, so users like me don't need to tread so heavily by overwriting core methods or using messier work-arounds.\n\nAs to how these sync events should be implemented is up for discussion, though I'd like to see at least 4 that should more-or-less correspond to the equivalent Ajax callbacks in jQuery. They should be before sync, successful sync, failed sync and complete sync. Actual event names can be for example, \"sync:before\", \"sync:complete\", \"sync:success\" and \"sync:error\". We shouldn't need additional events for #save and #fetch, as long as the type of operating can be determined through the use of the sync events (e.g. create, read, update, delete). The arguments provided by these events could be the operation type (as mentioned), the data/model/collection being operation on, and possibly an optional communication object, like the jQuery $.ajax object and the jqXHR response object.\n\nI'm anticipating the suggestion to use jQuery callbacks to manage event state, but this requires a lot more boilerplate and micro-management. In no fewer words, It's crap - I know because it's what I was doing. It either means you need to repeat yourself in all your objects, or otherwise, if it's put into a common prototype, all the children need to explicitly wrap the parents callbacks in any of their own callbacks. It gets fiddly and messy really quick. Events allow you to easily hook onto these states as many times as you want - It's set and forget. Set it in the constructor and it works no matter where in your view the state is changed, or in what backbone method. You even bind to the event in a parent object from which all your views inherit.\n\nSo please, can adding these events be more thoroughly considered?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1138",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1138/comments",
    "title": "Backbone 0.9.2 breaks Backbone.Relational changed events",
    "created_at": "2012-03-23T21:41:09Z",
    "updated_at": "2012-03-24T13:50:31Z",
    "body": "Upgraded from Backbone 0.9.0 to 0.9.2, using BB-Relational 0.5.0\n\nNow, the attribute level events on the changed Model don't seem to be firing.\n\ni.e. For a Model, Book, if i change the \"title\" attribute, only a \"change\" event gets fired. Not a \"change:title\".\n\nI traced the problem apparently into the Model.change() logic .. the changed attribute shows up in this._pending, but for some reason don't trigger the event.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1136",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1136/comments",
    "title": "Merge results of a Collection.fetch",
    "created_at": "2012-03-23T03:18:53Z",
    "updated_at": "2012-03-23T12:07:42Z",
    "body": "When calling fetch with an existing collection, there does not appear to be a way to merge the results, with adds, updates, and deletes triggering `add`, `change`, and `remove` events respectively.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1135",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1135/comments",
    "title": "Collections accept models of any type",
    "created_at": "2012-03-23T02:57:10Z",
    "updated_at": "2012-03-23T13:29:01Z",
    "body": "Not sure if this is by design, though I wouldn't be surprised if it is.  Collection's _prepareModel has this check:\n\n   if (!(model instanceof Model)) {\n\nto decide if it allows the object to be added.   Why doesn't the check use the model property I've explicitly set on the collection?  I can see the case where I'd like to ensure Collection only works with certain subclasses of Model.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1134",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1134/comments",
    "title": "Backbone.Collection constructor treats Backbone.Collection as model.",
    "created_at": "2012-03-22T20:17:51Z",
    "updated_at": "2012-04-09T21:08:21Z",
    "body": "Backbone.Model's clone method will corrupt any Backbone.Collection that is stored as an attribute if we nest collections via the initialize command unless we explicitly prevent the Backbone.Collection constructor from being called with a Backbone.Collection object.\n\nThe offending lines of code are similar to:\n`models = _.isArray(models) ? models.slice() ? [models];`\n\n_prepareModel is incorrectly called on a Backbone Collection due to the above line.\n\nThis is easily avoidable using models.models if it is an array, however, we are now left with an issue: should we be recursively cloning during clone(), and if so, how?\n\nI'd like to see it as an option on the collection itself, but I don't know what the ramifications will be. Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1133",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1133/comments",
    "title": "Backbone.history.navigate ",
    "created_at": "2012-03-22T17:22:26Z",
    "updated_at": "2014-09-27T13:12:59Z",
    "body": "With the functionality of Backbone.history.navigate the new page / route is opened but the scroll of the page remains in the same position as it  was . Could something be done so that the navigate automatically leads to scrolling to the top of page \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1132",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1132/comments",
    "title": "Broken link in annotated source",
    "created_at": "2012-03-22T16:18:32Z",
    "updated_at": "2012-04-02T21:37:27Z",
    "body": "[http://documentcloud.github.com/backbone/docs/todos.html](http://documentcloud.github.com/backbone/docs/todos.html)\n\nIn the second sentence, \"This demo uses a simple LocalStorage adapter to persist Backbone models within your browser.\" the \"LocalStorage adapter\" link points to [http://documentcloud.github.com/backbone/docs/backbone-localstorage.js](http://documentcloud.github.com/backbone/docs/backbone-localstorage.js), which doesn't exist.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1131",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1131/comments",
    "title": "Not a backbone but a phonegap problem",
    "created_at": "2012-03-21T22:33:04Z",
    "updated_at": "2012-03-22T10:32:50Z",
    "body": "Obviously this isn't a phonegap problem because it runs pretty snappily in my browser:\nhttps://groups.google.com/forum/?fromgroups#!topic/phonegap/44ExAliSQBw\n\nBut still, why would this all of a sudden not perform properly when it hits iOS? Is it fixable?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1130",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1130/comments",
    "title": "Include Context in Fetch?",
    "created_at": "2012-03-21T22:27:54Z",
    "updated_at": "2012-06-27T06:41:02Z",
    "body": "I was a little disappointed that I couldn't add some kind of context in the fetch method. Meaning, let's say I have the following:\n\nvar someImportantInfo = this.goGetImportantInfo(importantArgument);\nblah.fetch({data: {a: b, c: d}, success: this.success, error: this.error});\n\nIn my success callback method, I have no way of obtaining my someImportantInfo value. Now, I could obviously save it and get it in the callback, but what if it changes in the meantime? I'd like to be able to send a context object along with fetch, like many async frameworks allow. For example, I'd like to be able to do this:\n\nvar someImportantInfo = this.goGetImportantInfo(importantArgument);\nblah.fetch({data: {a: b, c: d}, success: this.success, error: this.error, context: someImportantInfo});\n\nThen, my success function could look like this:\n\nfunction success (collection, response, importantInfo)\n{\n// Use importantInfo for important stuff\n}\n\nIn the meantime, I'm going to have to wrap it. I.e.\n\nvar someImportantInfo = this.goGetImportantInfo(importantArgument);\nvar that = this;\nblah.fetch({data: {a: b, c: d}, success: function(collection, response) { that.success(collection, response, someImportantInfo);}, error: this.error});\n\nNot sure if I need the that = this, I'll test it out, but otherwise, it's still a little kooky and would be a lot slicker if a context parameter was allowed. I could override it, but... I'm sure others would appreciate this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1127",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1127/comments",
    "title": "IE6/7 Router Handles paging bug",
    "created_at": "2012-03-20T04:19:52Z",
    "updated_at": "2012-03-20T14:20:11Z",
    "body": "Router under IE6 / 7, when the tab paging can not be resolved correctly.This feature of the previous 0.5.3 version is available.May be a regular match causes, please see the next this issue.\n\nLike this is ok.\nhttp://vmcp.aliyun.dev/vm/image_manage/#publish_remove,\nBut,when tab there is paging,for example:\nhttp://vmcp.aliyun.dev/vm/image_manage/?&page=2#publish_remove,\nBecome such in IE6 / 7 as:\nhttp://vmcp.aliyun.dev/vm/image_manage/?&page=2#\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1126",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1126/comments",
    "title": "The default model.url function should give priority to model.urlRoot over the collection's url",
    "created_at": "2012-03-19T21:44:22Z",
    "updated_at": "2012-03-19T22:38:55Z",
    "body": "It seems backwards to have the default url function for models give priority to the collection's url function/value as opposed to the model's urlRoot function/value. Why should the collection take precedence over the model itself? The model should have the final word about its own url, not the collection.\n\nSpecifically, line 371 of backbone 0.9.1 could be changed to:\n\n```\n  var base =  getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();\n```\n\ninstead of:\n\n```\n  var base = getValue(this.collection, 'url') || getValue(this, 'urlRoot') || urlError();\n```\n\nA use case where this would be valuable is where models can belong to multiple parents, for example files and folders. In this case file collection for a folder with id 3 might have a URL:\n\nfolders/3/files\n\nand POST to that url would create a new file object in that folder. Let's say the new file has id 11. However, the file's url is not:\n\nfolder/3/files/11\n\nbecause that file might also belong to many other folders. Therefore the files URL is likely:\n\nfiles/11\n\nIf the model's urlRoot property took priority over the collection's url, then we could insert logic into the urlRoot function that return the appropriate URL depending on wether or not the model is new. However, right now the collection's URL takes priority, and is not possible to return simple \"files\" as the base url (while the file is part of the collection) without overriding the url function itself.\n\nI would imagine there are other cases where this backwards-seeming behavior gets in the way.\n\nThere must be another side to this argument, but I don't see what it is? Why should the collection's url take priority over the model's urlRoot?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1125",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1125/comments",
    "title": "getting \"Uncaught RangeError: Maximum call stack size exceeded\" after using super",
    "created_at": "2012-03-19T18:46:04Z",
    "updated_at": "2012-03-19T18:54:34Z",
    "body": "After this code :\n\n``` javascript\n\nvar V = Backbone.View.extend({\n    initialize: function() {}\n});\n\nvar V1 = V.extend({\n    initialize: function() {\n        this.constructor.__super__.initialize.call(this);\n    }\n});\n\nvar V2 = V1.extend({\n    initialize: function() {\n        this.constructor.__super__.initialize.call(this);\n    }\n});\n\nvar v = new V2();\n\n```\n\nI get \n\n```\nUncaught RangeError: Maximum call stack size exceeded\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1124",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1124/comments",
    "title": "suggestion about initializing function in Views",
    "created_at": "2012-03-19T15:58:56Z",
    "updated_at": "2012-03-19T16:04:30Z",
    "body": "#### The problem :\n\nSo if you have to extend a view more than once you'll have the problem of setting a new init function in every extension :\n\n``` javascript\n\nvar V1 = Backbone.View.extend({\n       initialize: function(options) {\n              /* Your code for this function */\n              this.doThat();\n\n              this.initializeTwo(options);\n       }\n});\n\nvar V2 = V1.extend({\n       initializeTwo: function(options) {\n              this.doSomethingElse();\n\n              this.initializeThree(options);\n       }\n});\n\nvar V3 = V2.extend({\n       initializeThree: function(options) {\n              this.doAnotherThing();\n       }\n});\n\n// ... etc\n\n```\n#### The solution\n\nWouldn't it be great if you have the initialize function cached to each extension, so you don't need to change it and reference to it from every extension?\n\nSomething like :\n\n``` javascript\n\nvar V1 = Backbone.View.extend({ \n       initialize : function(options) { \n              console.log('1');\n       }\n});\n\nvar V2 = V1.extend({\n       initialize : function(options) {\n              console.log('2')\n       }\n]);\n\nvar v = new V2(); // expected logging \"1\" and \"2\"\n\n```\n#### The patch\n\nYou could cache \"initialize\" function on every instance by changing this code in backbone.js :\n\n_in *_inherits*\\* variable*\n\n``` javascript\n\n// line 1347\n\nchild.prototype = new ctor();\n\n// ------------------------ NEW CODE\n// caching initialize in initializationArray\nvar initializationArray = _.clone(parent.prototype.initializationArray) || [];\ninitializationArray.push(parent.prototype.initialize);\nchild.prototype.initializationArray = initializationArray;\n// done ----------------------------------\n\n// Add prototype properties (instance properties) to the subclass,\n// if supplied.\nif (protoProps) _.extend(child.prototype, protoProps);\n\n```\n\n_so base *_Backbone.View variable*\\* is rewritten like this*\n\n``` javascript\n\n// line 1089\n\nvar View = Backbone.View = function(options) {\n        this.cid = _.uniqueId('view');\n        this._configure(options || {});\n        this._ensureElement();\n        var args = arguments;\n        if ( typeof(this.initializationArray) === 'object' ) {\n            var self = this;\n            _.each(this.initializationArray, function(fn) {\n                if ( typeof(fn) === 'function' ) fn.apply(self, args);\n            });\n        }\n        this.initialize.apply(this, arguments);\n        this.delegateEvents();\n};\n```\n#### The possible problems\n- it isn't backward compatible;\n- ...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1123",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1123/comments",
    "title": "Idea: add a `succes` callback to model.set",
    "created_at": "2012-03-19T15:22:16Z",
    "updated_at": "2012-03-19T15:25:04Z",
    "body": "Would be extremely helpful. Specifically in cases where models are synced to the server, so the `sync` event doesn't cover it.\n\nCurious to know your thoughts on this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1122",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1122/comments",
    "title": "Model: unset() and clear() poison `options` argument",
    "created_at": "2012-03-19T13:47:04Z",
    "updated_at": "2012-04-24T15:06:04Z",
    "body": "I found out that `Model.unset()` and `Model.clear()` functions modify `options` argument, particularly they add `unset: true` option. From my point of view it is an undesirable side effect.\nFor example, I expect that the following code removes `foo` attribute and set to `bar` attribute value `5`:\n\n``` javascript\nvar silentOptions = { silent: true };\nmodel.unset('foo', silentOptions);\nmodel.set('bar', 5, silentOptions);\n```\n\nBut actually it removes both `foo` and `bar` attributes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1121",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1121/comments",
    "title": "Collections call initialize before models have been set",
    "created_at": "2012-03-19T12:10:14Z",
    "updated_at": "2012-03-19T15:03:20Z",
    "body": "Hi,\n\nIn previous versions of Backbone (I'm upgrading from 0.5.3, that is), new Collection objects were created in a such a way that models were made available to the user-customized initialize method:\n\n``` js\n    if (models) this.reset(models, {silent: true});\n    this.initialize.apply(this, arguments);\n```\n\nIn BB 0.9, this is no longer true:\n\n``` js\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, {silent: true, parse: options.parse});\n```\n\nThis seems wrong because it prevents from manipulating models at creation time in the absence of a hook (post-init). Is this a regression or is there any reason behind this change? I'd be glad proposing a small patch for this if relevant, btw.\n\nThx.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1120",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1120/comments",
    "title": "IE6/7 Router Handles paging bug",
    "created_at": "2012-03-19T04:05:32Z",
    "updated_at": "2012-03-20T03:26:33Z",
    "body": "Router under IE6 / 7, when the tab paging can not be resolved correctly.This feature of the previous 0.5.3 version is available.May be a regular match causes, please see the next this issue.\n\nLike this is ok.\nhttp://vmcp.aliyun.dev/vm/image_manage/#publish_remove,\nBut,when tab there is paging,for example:\nhttp://vmcp.aliyun.dev/vm/image_manage/?&page=2#publish_remove,\nBecome such in IE6 / 7 as:\nhttp://vmcp.aliyun.dev/vm/image_manage/?&page=2#\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1118",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1118/comments",
    "title": "Siblings inheritance conflict",
    "created_at": "2012-03-19T00:05:28Z",
    "updated_at": "2012-03-19T15:13:01Z",
    "body": "Encountered some strange bugs in my application and found out Bacbkone inheritance pattern seemed to be quite broken to me :\n\nWhen two classes extend the same parent (siblings) seems to keep common references for parameters :\n\nCheck this simple test case :\n\n```\n    var MyParentClass = Backbone.View.extend({\n        items:['foo'],\n        initialize: function() {\n        }\n    });\n\n    var MyFirstChildrenClass = MyParentClass.extend({\n        initialize: function() {\n            MyFirstChildrenClass.__super__.initialize.apply(this, arguments);\n            console.warn('MyFirstChildrenClass::initalize()');\n            this.items.push('bar');\n        }\n    });\n\n    var MySecondChildrenClass = MyParentClass.extend({\n        initialize: function() {\n            MySecondChildrenClass.__super__.initialize.apply(this, arguments);\n            console.warn('MySecondChildrenClass::initalize()');\n            console.warn(this.items); // expecting [foo] & getting [foo,bar] !\n        }\n    });\n\n\n    var firstInstance = new MyFirstChildrenClass();\n    var secondInstance = new MySecondChildrenClass();\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1117",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1117/comments",
    "title": "confusing behaviour of toJSON",
    "created_at": "2012-03-18T20:11:55Z",
    "updated_at": "2012-03-18T23:17:55Z",
    "body": "i define Route model in coffeescript like:\n\n```\nclass Route extends Backbone.Model\n\n  initialize: (obj) ->\n    @name = obj.n\n```\n\nthen in firebug and webkit dev console:\n\n```\n> new Route({\"n\": \"1\"})\nRoute\n> route.name\n\"A\"\n> route.n\nundefined\n> route.toJSON().name\nundefined\n> route].toJSON().n\n\"A\"\n```\n\ni wonder if enyone else finds this little confusing? ;)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1115",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1115/comments",
    "title": "Router to allow multiple actions",
    "created_at": "2012-03-18T18:22:49Z",
    "updated_at": "2012-03-19T11:46:36Z",
    "body": "Is there a way you could add the ability to watch for multiple actions? I have a single-page application which can have multiple tabs open, each displaying different action views. I'd like to be able to add history support so that if the user clicks back, it will bring them to the previous action they where viewing in that tab\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1113",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1113/comments",
    "title": "not found \"http://backbonejs.org\"",
    "created_at": "2012-03-18T05:52:02Z",
    "updated_at": "2012-05-22T01:19:59Z",
    "body": "git show  a9a3499\n\ncommit message was \"linking to backbonejs.org directly\"\nbut, I can not see \"http://backbonejs.org\"\n\nfuture, see ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1112",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1112/comments",
    "title": "Would be very useful to be able to pass model option to collection constructor",
    "created_at": "2012-03-17T23:11:55Z",
    "updated_at": "2012-03-19T15:07:26Z",
    "body": "When creating a collection like so:\n\nvar myCollection = new Backbone.Collection( jsonArrayOfModels );\n\nIt is currently not possible to specify the type of model that the collection should fill itself with when initializing itself from the json data that is passed into the constructor. In order to fill it with a particular type of model object, say \"MyModel\", you either have to do:\n\nvar myCollection = new Backbone.Collection();\n_.each( jsonArrayOfModels, function( thisModelJson ) {\n   myCollection.add( new MyModel( thisModelJson ) );\n} );\n\nOr you have to define your own collection class that inherits from Backbone.Collection and defines the \"model\" attribute to be MyModel. The first option is ugly and the second option is often overkill because the standard collection class will suffice for all other needs. Therefore it would be very useful to be able to say:\n\nvar myCollection = new Backbone.Collection( jsonArrayOfModels, { model : MyModel } );\n\nWhere the collection constructor automatically sets the \"model\" attribute of the created collection to the value passed in to the options parameter (in this case, MyModel).\n\nOf course, it is relatively easy to derive your own \"BaseCollection\" object that works like this , but I image this is a common need and would help a lot of people if the built in collection object did this out of the box.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1108",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1108/comments",
    "title": "if model is new, model.destroy() returns undefined, making it dangerous to use xhr functions",
    "created_at": "2012-03-17T00:28:30Z",
    "updated_at": "2012-03-21T14:31:24Z",
    "body": "model.destroy() generally returns a xhr object, which is great, because it makes it possible to do:\n\nmodel.destroy().error( function() {\n   // put model back in original collection, since the destroy failed on the server\n} );\n\nHowever, in the case that the model is new, the destroy() method returns undefined. Additionally, there is some funny logic here which to me looks like a bug:\n\n```\n  var triggerDestroy = function() {\n    model.trigger('destroy', model, model.collection, options);\n  };\n\n  if (this.isNew()) return triggerDestroy();\n```\n\nThe triggerDestroy() funciton has no return value, so destroy() ends up returning undefined for new models. Not sure if this is intended or not but the way the logic is written does not make it at all clear.\n\nAnyway, the primary problem is that the nice sytax mentioned above, using the error() method of the xhr object, fails in the case that the model is new. Generally speaking I don't think people will take into account this fringe case and it will end up breaking on sites already in production.\n\nNot sure the best way to solve this issue. Maybe just return a new xhr object instead of undefined in the case that the model is new? If that doesn't work, the current inconsistent behavior should at least be well documented so people don't trip over it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1107",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1107/comments",
    "title": "[Enhancement] Idea for speeding up event unbinding",
    "created_at": "2012-03-16T18:15:49Z",
    "updated_at": "2012-03-16T18:29:12Z",
    "body": "On line 118-131, where events are unbound:\n\n```\nwhile (event = events.shift()) {\n  node = calls[event];\n  delete calls[event];\n  if (!callback || !node) continue;\n  // Create a new list, omitting the indicated callbacks.\n  tail = node.tail;\n  while ((node = node.next) !== tail) {\n    cb = node.callback;\n    ctx = node.context;\n    if (cb !== callback || (context && ctx !== context)) {\n      this.on(event, cb, ctx);\n    }\n  }\n}\n```\n\nAs far as I can see, this code does the same job without calling `on()`:\n\n```\nwhile (event = events.shift()) {\n  var prev = node = calls[event];\n  if (!callback || !node){ \n    delete calls[event];\n    continue;\n  }\n  // Create a new list, omitting the indicated callbacks.\n  tail = node.tail;\n  while ((node = node.next) !== tail) {\n    if (node.callback === callback && (!context || node.context === context)) {\n      prev.next = node.next;\n    }\n    else {\n      prev = node;\n    }\n  }\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1106",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1106/comments",
    "title": "Validation force attributes change option",
    "created_at": "2012-03-16T17:56:58Z",
    "updated_at": "2012-03-21T14:58:55Z",
    "body": "Based on my limited experience with Backbone and dealing with user input, it feels like there needs to be a middle ground between normal Model.set() (which fires validations) and the silent:true option, which bypasses validations entirely but doesn't fire change events.\n\nI would propose a force:true option, that would execute validations and fire the appropriate error events, but would then go on to apply the (invalid) changes and fire change events.\n\nIn my example, the Save button of my form is designed to be disabled until the form is valid.  I'd like to bind the \"change\" and \"error\" events to a single method that checks Model.isValid().\n\nI also have a tab view around the form, and the title of the tab changes when the title field changes; this is also based on change notification that doesn't happen if there are validation errors.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1105",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1105/comments",
    "title": "Easy way to stop listening to events",
    "created_at": "2012-03-15T21:36:38Z",
    "updated_at": "2012-03-19T16:27:18Z",
    "body": "I would love it if Backbone.Event.on() returned an object (or perhaps a no-arguments function) to stop listening to the event that was just subscribed to.\n\n```\nthis.unsub = this.model.on(\"change\", this.changeListener, this);\n```\n\nand later:\n\n   this.unsub();\n\nCurrently, my code has a block that subscribe to model events, but then I have a nearly duplicate block to unsubscribe.\n\nAlternately, how about away to unsubscribe all with a given context: i.e.\n\n```\nthis.model.offFor(this);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1104",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1104/comments",
    "title": "Backbone / Coffeescript inheritance issue",
    "created_at": "2012-03-15T20:29:29Z",
    "updated_at": "2012-03-15T21:06:29Z",
    "body": "I am trying to break out some methods that I am using across my backbone models, and I don't understand why it isn't working.\n\nbase_class.js.coffee\n\n```\nclass MyApp.Models.BaseClass extends Backbone.Model\n\nLinked: () =>\n  @._linked\n\nLink: (form) =>\n  if @._linked == false\n    $(form).backboneLink(@, {'prefixed':true})\n    @._linked = true\n  else\n    $(form).backbonePopulate(@, {'prefixed':true})\n\nDirty: () ->\n  @._dirty = true\n\nClean: () ->\n  @._dirty = false\n\nisDirty: () =>\n  @._dirty\n```\n\npage.js.coffee\n\n```\n#= require ./base_class\n\nclass MyApp.Models.Page extends MyApp.Models.BaseClass\n\n  initialize: () ->\n    console.log('Page Object initialized')\n    @._dirty = false\n    @changes = []\n    @.name = 'Page'\n    @._linked = false\n\n url: () ->\n    '/pages/' + @id\n```\n\nHowever when I go into the console\n\npage = new MyApp.Models.Page();    #=> Page Object initialized\npage.Link($('#myform'));   #=>  Uncaught TypeError: Object #<Page> has no method 'Link'\nI dont understand why the methods aren't being inherited.\n\nHere is a jsfiddle of the issue: http://jsfiddle.net/mwagner72/W3kBP/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1101",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1101/comments",
    "title": "405 error with backbonejs",
    "created_at": "2012-03-14T22:01:33Z",
    "updated_at": "2012-03-15T12:45:50Z",
    "body": "I've been hitting my head against a wall for a while now. I've got MAMP setup with php 5.3.2. I'm making a backbone.js/slim app. When backbone tries to send put requests to slim, slim responds 405 method not allowed. Any suggestions\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1099",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1099/comments",
    "title": "model.clear() does not set default values",
    "created_at": "2012-03-14T15:45:56Z",
    "updated_at": "2014-07-04T03:12:03Z",
    "body": "Assume we have model defined as:\n\n``` javascript\nvar MyModel = Backbone.Model.extend({\n  defaults : {\n    apple : \"fruit\",\n    carrot : \"vegetable\"\n  }\n});\n```\n\nSo lets create new instance of <code>MyModel</code> and check how it looks like:\n\n``` javascript\nvar m = new MyModel({ \n  apple : \"mineral\",\n  foo : \"xyz\"\n});\nconsole.dir(m.attributes);\n```\n\nWe will get:\n\n```\napple  = \"mineral\"\ncarrot = \"vegetable\"\nfoo    = \"xyz\"\n```\n\nNow execute:\n\n``` javascript\nm.clear();\nconsole.dir(m.attributes);\n```\n\nOutput will be:\n\n```\nNo child objects\n```\n\nSo attributes was not set to default values after reset. In my opinion output should be:\n\n```\napple  = \"fruit\"\ncarrot = \"vegetable\"\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1095",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1095/comments",
    "title": "touch events not firing in subviews",
    "created_at": "2012-03-13T03:00:57Z",
    "updated_at": "2012-03-14T14:47:56Z",
    "body": "Hi,\n\nI've come across a potential bug for iOs devices. Android seems to work as expected.\n\nThis [jsfiddle](http://jsfiddle.net/p9KMt/9/) sets up two divs, one a subview of another.When you click on the light pink one you get 'foo', when you click on the dark pink div you get 'bar. This is expected.\n\nNow look at this [jsfiddle](http://jsfiddle.net/p9KMt/10/). Same setup except the outer div (parent) is not set up to listen for touchstart events. I would expect that touching on the outer div to do nothing (this works as expected) and touching the inner div to alert 'bar'. However if you tap the inner div **nothing** happens!\n\nFor comparison here is a purely jquery version. [Example 1](http://jsfiddle.net/p9KMt/12/) and [Example 2](http://jsfiddle.net/p9KMt/13/). These work as expected.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1094",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1094/comments",
    "title": "Inherits helper constructor function for new subclass",
    "created_at": "2012-03-12T11:17:28Z",
    "updated_at": "2012-03-12T13:35:30Z",
    "body": "Inherits helper now create constructor function for new sublcass without `return` statement:\n`child = function(){ parent.apply(this, arguments); };`\n\nAnd if I want redefine object in parent constructor - it doesn't work.\n`return` statement solve the problem:\n`child = function(){ return parent.apply(this, arguments); };`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1090",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1090/comments",
    "title": "Possible to Offer Backbone Under MIT or GPL Dual-Lisence?",
    "created_at": "2012-03-11T14:15:26Z",
    "updated_at": "2012-03-12T14:30:49Z",
    "body": "We have started working on a deep [integration of Drupal and Backbone](http://drupal.org/project/backbone) and I, for one, am [extremely excited](http://echodittolabs.org/blog/2012/02/introducing-backbone-module-drupal) about the potential Backbone brings to the Drupal world.  Drupal is [moving in the direction](http://buytaert.net/the-future-is-a-restful-drupal) of a heavy focus  on REST and Service-oriented systems, and I believe Backbone could become a significant part of the Drupal stack.\n\nThe most signifiant limiting factor to Backbone's adoption in the Drupal community will probably be  the difference between the two projects licenses. Drupal is GPLv2 and all code hosted on Drupal.org must be GPL as well.  Drupal 7 now has a flexible API for handling external libraries, and we can facilitate the download of Backbone and Underscore individually using package.json-like makefiles, but the ideal is to be able to distribute Backbone with the Drupal Backbone module. Further, in the future I would love to see Backbone included in Drupal in the way jQuery currently is: as part of Drupal core, and for this there must be a GPL licensing option.\n\nWould it be possible to offer Backbone (and backbone) under a licensing scheme similar to the [jQuery Dual License](http://jquery.org/license/)?\n\nI don't think this would need to impact any current users of the product, as they can all choose MIT as their license of choice, but it would allow the GPL world to make full use of the foundation Backbone provides.\n\nBackbone's `extend` patterns makes it extremely powerful as a building block for framework-specific adaptation and integration, and a really hope you'll consider this licensing option.\n\nThank your.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1088",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1088/comments",
    "title": "Backbone.View Element Namespace Support",
    "created_at": "2012-03-11T06:51:43Z",
    "updated_at": "2012-03-12T14:13:42Z",
    "body": "The `svg` element (and possibly others) needs to be created with `createElementNS` and the appropriate namespace to render properly. Views that use `svg` need to override the `make` method to create elements using `document.createElementNS` rather than `document.createElement`. See http://stackoverflow.com/questions/9651167/svg-not-rendering-properly-as-a-backbone-view.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1087",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1087/comments",
    "title": "unable to bind \"error\" event on model after collection.create",
    "created_at": "2012-03-10T00:44:22Z",
    "updated_at": "2012-03-15T18:40:47Z",
    "body": "I just started using Backbone.js yesterday. I may be misunderstanding how it should work.\n\nBasically, I tried\n`collection.create({ attribute: \"value\" })`\nthat will create a model instance in _prepareModel method and trigger \"error\" event on that instance, though I don't see a way to bind the event on that instance object or obtain the object before the event is triggered or even after the event is triggered.\n\nAlternatively, I tried to initialize the instance myself and pass that into \"create\", but that simply skips the \"validate\" (or i should validate myself?). It may be related to Issue #1057.\n\nIn the end, I can probably get around with \"set\" or \"save\" to bind the event beforehand.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1083",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1083/comments",
    "title": "Feature request: Backbone.history 'route' event args should provide named parameters",
    "created_at": "2012-03-09T11:11:07Z",
    "updated_at": "2012-03-12T14:35:53Z",
    "body": "It would be nice if the callback parameter args would provide an object similar than\n\n``` javascript\n{\n    language: 'en',\n    entityId: '12'\n}\n```\n\nA small example:\n\n``` javascript\nBackbone.history.on('route', listener);\n\nvar listener = function(router, route, args) {\n     // comes in as array ['en', '12']\n    // here i have no idea that en == language or 12 == entityId\n    console.log(args);\n    // it would help if a structure like the above would be passed in\n    // { language: 'en', entityId: '12' }\n\n}\n```\n\nI have an ugly workaround to map named parameters to their value\n\n``` javascript\n\n// ...\n\ninitialize: function() {\n    Backbone.history.on('route', this._onRouteChanged, this);\n},\n\n_onRouteChanged: function(router, route, args) {\n    // save the current active route information\n    this._currActiveRoute = {\n        router: router,\n        route: route,\n        args: args\n    };\n\n    this._namedViewParams = null;\n\n    // SETTING THE CURRENTLY ACTIVE APPLICATION LANGUAGE\n    var lang = this.getNamedViewParam('language');\n    if(lang) {\n        this.language = lang;\n        this.trigger('languageChanged', lang);\n    }\n},\n\ngetNamedViewParam : function(param) {\n    if(!this._namedViewParams) {\n        this._namedViewParams = this._resolveNamedViewParams(\n            this._currActiveRoute.router,\n            this._currActiveRoute.args\n        ) || [];\n    }\n\n    var result = _.filter(this._namedViewParams, function(pair) {\n        if(pair[0] === param) {\n            return true;\n        }\n    });\n\n    // try returning the value\n    try {\n        return result[0][1]\n    } catch(e) {}\n},\n\n_resolveNamedViewParams: function(router, args) {\n    if(args.length > 0) {\n        var h = Backbone.history.handlers;\n        for(var i=0; i < h.length; i++) {\n            // find the actual route out of all (application wide) router routes\n            if(h[i].route.test(Backbone.history.fragment)) {\n                keys = _.keys(router.routes);\n                // find the route for this request out of all routes from the router                \n                for(var j=0; j < keys.length; j++) {\n                    if(h[i].route.test(keys[j])) {\n                        // extract all named parameters out of route\n                        if(matches = keys[j].match(/:\\w+/g)) {\n                            // strip : out of named parameters (need better regex)!\n                            var cleaned = _.map(matches, function(param){ return param.replace(':', '')});\n                            // combine args and named args\n                            return _.zip(cleaned, args);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// ...\n```\n\nHope someone else might be interested in that kind of functionality.\nI haven't found an easier way to achieve this...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1082",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1082/comments",
    "title": "model.unset(\"attribute\", {silent: true}) doesn't update _.previousAttributes",
    "created_at": "2012-03-09T05:53:06Z",
    "updated_at": "2012-03-09T19:35:53Z",
    "body": "If silent is passed to true in unset method _.previousAttributes is never updated with the unset attribute.\n\n_.previousAttributes is updated in model.change method which is never called if silent is true.\n\nLine: 267    if (!options.silent && this.hasChanged()) this.change(options);\n\nI can provide pull request if u think it is a valid issue.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1081",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1081/comments",
    "title": "Binding model.save() to the 'change' event causes infinite loop (localstorage only)",
    "created_at": "2012-03-09T00:27:38Z",
    "updated_at": "2012-03-23T07:12:58Z",
    "body": "If I bind `model.save()` to a model's `change` event and I'm saving to localstorage, an infinite loop results where the `save()` action triggers a `change` event that in turn invokes another save.\n\nYou can see this in action by adding the following code to the `initialize` method of the todos model in the sample app:\n\n```\ninitialize: function() {\n  this.bind('change', function() {\n    this.save();\n  });\n}\n```\n\nStrangely, this issue doesn't appear if I put the `save()` invokation inside a setTimeout, leading me to believe that the quickness of saving to localstorage causes it to finish before the change event dispatching is complete.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1080",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1080/comments",
    "title": "Back button not registering with Backbone.history",
    "created_at": "2012-03-08T02:48:44Z",
    "updated_at": "2012-03-12T15:08:55Z",
    "body": "I have this issue sporadically. I'm not sure of the cause or how to debug:\n\nBackbone.history.fragment returns X\nand on the same page\nBackbone.history.getFragment() returns Y\n\nThis occurs when I click Back in Chrome. Shouldn't fragment and getfragment always be in sync? Is the back action not registring with Backbone.history? (when this occurs, none of my routes are called)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1077",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1077/comments",
    "title": "View as Router's constructor option",
    "created_at": "2012-03-07T17:07:20Z",
    "updated_at": "2012-03-07T20:54:25Z",
    "body": "Hello, I want to propose use this declaration\n\n```\nnew Backbone.Router({\n    view: new Backbone.View()\n});\n```\n\nwhich similar to\n\n```\nnew Backbone.View({\n    collection: new Backbone.Collection()\n});\n```\n\nor\n\n```\nnew Backbone.View({\n    model: new Backbone.Model()\n});\n```\n\nNow Router should have initialize() method which will assign view instance to property. It would be nice if view attribute for Router resolves as collection/model attribute for View.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1074",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1074/comments",
    "title": "Backbone unset bug",
    "created_at": "2012-03-07T15:27:02Z",
    "updated_at": "2012-06-08T23:04:36Z",
    "body": "var model = new Backbone.Model.extend({\n\n});\nvar SILENT = {silent: true};\n\nmodel.set('foo', 'bar');    // this works\nmodel.unset('foo', SILENT);  // this changes SILENT to {silent:true, unset:true}\nmodel.set('foo', 'bar2');  // this will not work now because of the new value of SILENT\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1073",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1073/comments",
    "title": "Document local sync override ability",
    "created_at": "2012-03-06T22:33:30Z",
    "updated_at": "2012-03-12T15:12:28Z",
    "body": "Backbone allows a per-model override of Backbone.sync; see Backbone.Model.fetch():\n\n`return (this.sync || Backbone.sync).call(this, 'read', this, options);`\n\nThe docs make no mention of this though.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1072",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1072/comments",
    "title": "Collection ist not fetching data from url",
    "created_at": "2012-03-06T18:11:45Z",
    "updated_at": "2012-03-12T15:13:54Z",
    "body": "Hey out there,\nI'm pretty new to backbone.js\nI've created a Collection and added an url for fetching data from an api.\nIn my browser I can see the request and the response also contains the expected data - but nothing happened.\nSo i tried to overwrite the parse method in my collection to check some stuff but this method NEVER gets executed.\nIs there something I've overseen?\nSome code samples can be found on stackoverflow http://stackoverflow.com/questions/9558774/backbone-js-collection-does-not-fetch-data-from-api\nhome someone can help me\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1069",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1069/comments",
    "title": "Model#fetch should reset attributes to server state, not append them.",
    "created_at": "2012-03-05T18:10:42Z",
    "updated_at": "2016-04-04T09:34:03Z",
    "body": "When you do `fetch` on a model, it will `set` the object it gets from server to the model. Which is AFAIK incorrect, because it appends attributes to model, not replaces them. Please see an example (in coffee, live here http://jsfiddle.net/CRwHU/ ):\n\n```\nclass Model extends Backbone.Model\n  sync: (method, model, options) ->\n    serverRepresentation = {b: 2}\n    options.success(serverRepresentation, \"success\")\n\nm = new Model {a: 1}\n\n$(\"<div>\").text(JSON.stringify(m)).appendTo(\".output\")\n\nm.fetch()\n\n$(\"<div>\").text(JSON.stringify(m)).appendTo(\".output\")\n\n```\n\nIn my opinion, it should give \n\n```\n\n{\"a\":1}\n{\"b\":2}\n\n```\n\nwhereas currently it prints:\n\n```\n\n{\"a\":1}\n{\"a\":1,\"b\":2}\n\n```\n\nIs it the expected behavior?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1068",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1068/comments",
    "title": "Order of model sync and collection order events",
    "created_at": "2012-03-05T01:12:56Z",
    "updated_at": "2012-03-08T07:15:59Z",
    "body": "Hi, I was just wondering if there would be any issue with swapping the order of line 716 and 717 so that the model 'sync' event is fired before the collection 'add' event.\n\nIt seems that 'sync' then 'add' would be better semantics?\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L716\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1067",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1067/comments",
    "title": "Make Model.url() check model's urlRoot first",
    "created_at": "2012-03-04T15:09:27Z",
    "updated_at": "2012-10-23T18:43:45Z",
    "body": "I'm just putting this as an issue instead of a pull request because it's such a small change. I found when writing my app, if my model was part of a collection, saving the model would use the collection's url instead of the urlRoot I set in my model. That's due to [this line](https://github.com/documentcloud/backbone/blob/master/backbone.js#L392) which takes the first non-null URL that it sees. I just propose altering the order in which it checks the urls, to be: \n\n``` javascript\n      url: function() {\n        var base;\n        base = this.urlRoot || getUrl(this.collection) || urlError();\n        if (this.isNew()) {\n          return base;\n        }   \n        return base + (base.charAt(base.length - 1) == '/' ? '' : '/') + encodeURIComponent(this.id);\n      }, \n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1066",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1066/comments",
    "title": "model.destroy foreign key",
    "created_at": "2012-03-04T02:48:31Z",
    "updated_at": "2013-12-18T00:12:20Z",
    "body": "Hi,\n\nHow does one go about deleting nested resources that need to be authorized server-side? I'm using Backbone in a Rails app and I have multiple nested layers and I am obviously not going to just let anyone delete any resource without proper authorization.\n\nSo I have the standard `current_user` as my \"session\" method, which I scope everything through, but now I need to go two levels (or more) deep, this is when the issues arise.\n\nHere's a basic example:  User > Bookshelf > Book\n\nServer-side controller\n\n``` ruby\nclass BooksController < ApplicationController\n  respond_to :json\n\n  def destroy\n    respond_with current_user.bookshelves.find(params[:bookshelf_id]).books.find(params[:id]).destroy\n  end\nend\n```\n\nIn CoffeeScript:\n\n``` coffee\nbook.destroy()\n```\n\nIn the shell:\n\n``` shell\nStarted DELETE \"/books/4f52d3518aa92a91e4000003\"\n```\n\nIt hits the proper URL, but it would be nice to somehow be able to pass in the foreign key for the Bookshelf model so I don't have to first load every Bookshelf by the current user in memory on the server just to map through them to find the Book.\n\nSo I tried something like this:\n\n``` coffee\nbook.destroy({data: { bookshelf_id: book.get(\"bookshelf_id\") }})\n```\n\nThen, printing out the params on the DELETE request: `Parameters: {\"object Object\"=>nil, \"id\"=>\"4f52d5878aa92a9203000004\"}`\n\nI also tried it without nesting the params in `data:` but that didn't help: `Parameters: {\"id\"=>\"4f52d5878aa92a9203000004\"}`\n\nSo if I didn't just overlook it, and this is not supported, can anyone tell me how one handles the deletion of nested resources?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1064",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1064/comments",
    "title": "backbone & mootools",
    "created_at": "2012-03-03T14:24:39Z",
    "updated_at": "2012-03-03T15:33:40Z",
    "body": "Hello!\n\nAre you planning to undock backbone from the jQuery? I'm trying to make friends  backbone with mootools, but I crash here:\n\n1063\n         / / Change the view's element (`this.el` property), including event\n         / / Re-delegation.\n         setElement: function (element, delegate) {\n             this. $ el = $ (element);\n             this.el = this. $ el [0];\n             if (delegate! == false) this.delegateEvents ();\n             return this;\n         }\n\nIf you try to create View.\n\nFor mootools, I changed the code like this:\n         setElement: function(element, delegate) {\n         //this.$el = $(element);\n         this.el = element; \n         //this.el = this.$el[0];\n         if (delegate !== false) this.delegateEvents();\n         return this;\n         }\nWhile working.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1063",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1063/comments",
    "title": "Misleading documentation for \"validate\" method",
    "created_at": "2012-03-02T14:39:00Z",
    "updated_at": "2012-03-12T15:40:22Z",
    "body": "The docs for `validate` method state that:\n\n> validate is called before set and save, and is passed the attributes that are about to be updated\n\nIn my understanding it means that attributres passed to `set` or `save` will passed to `validate`. However, it looks like actually _all_ attributes are passed instead. E.g. `set` passes attributes to be updated to `_validate` method, but inside `_validate` there's the [following code](https://github.com/documentcloud/backbone/blob/master/backbone.js#L491-492):\n\n``` javascript\nattrs = _.extend({}, this.attributes, attrs);\nvar error = this.validate(attrs, options);\n```\n\nthat merges attributes that are about to be updated with all attributes of a model and passes them to `validate`.\n\nBesides, it looks like `model.changed` object that is used e.g. by `model.changedAttributes` is populated after the object is actually validated. Thus during validations, if Backbone passes all attributes to it, I can't easily validate just the attributes that are supposed to be changed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1062",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1062/comments",
    "title": "Missing useful things from SenchaTouch2",
    "created_at": "2012-03-02T09:17:27Z",
    "updated_at": "2012-03-13T00:56:22Z",
    "body": "Having worked on both Backbone & SenchaTouch 2.0 for a while, i would love to get a few things inside Backbone :\n- A powerful ClassManager :\n  \n  http://docs.sencha.com/touch/2-0/#!/api/Ext-method-define\n  \n  SenchaTouch gets clean and easy class definition (via a Ext.define() function), easy overriding, mixins (like normalized multiple inheritance), for instance, you can just call this.callParent() in Sencha while you have to do ugly things like : **super**.initialize.call(this); in backbone.\n  \n  SenchaTouch classes also gets nice statics (http://docs.sencha.com/touch/2-0/#!/api/Ext.Base-static-method-addStatics) that are really useful.\n- A base Application object\n  \n  http://docs.sencha.com/touch/2-0/#!/api/Ext.app.Application\n  \n  Thant handles initialization of Stores (Collections) & Controllers. Having a global object to query classes & instanciated objects would be great : App.getStore(\"ContactList\"); App.getModelClass(\"Contact\").\n\nDo you intend to implement theses things?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1060",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1060/comments",
    "title": "Sort documentation methods/properties by alphabetical name",
    "created_at": "2012-03-01T01:06:28Z",
    "updated_at": "2012-03-01T01:19:59Z",
    "body": "I know that's a bit pedantic but it's kinda annoying and probably easy to fix..\n\nCan the methods & properties in [the documentation](http://documentcloud.github.com/backbone) be sorted alphabetically?\n\nAt the moment it's a bit confusing when you're learning to use it..\n\nExample, for Model it's currently\n\n\u2013 extend\n\u2013 constructor / initialize\n\u2013 get\n\u2013 set\n\u2013 escape\n\u2013 has\n\u2013 unset\n\u2013 clear\n\u2013 id\n\u2013 idAttribute\n\u2013 cid\n\u2013 attributes\n\u2013 defaults\n- toJSON\n  \u2013 fetch\n  \u2013 save\n  \u2013 destroy\n  \u2013 validate\n  \u2013 isValid\n  \u2013 url\n  \u2013 urlRoot\n  \u2013 parse\n  \u2013 clone\n  \u2013 isNew\n  \u2013 change\n  \u2013 hasChanged\n  \u2013 changedAttributes\n  \u2013 previous\n  \u2013 previousAttributes\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1059",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1059/comments",
    "title": "Is 0.9.1 changelog \"silent changes don't trigger validation\" accurate?",
    "created_at": "2012-02-29T18:01:12Z",
    "updated_at": "2012-07-10T21:27:36Z",
    "body": "It seems like the Backbone set method does in fact still trigger validation, regardless of silent:true. Maybe I'm missing something.\n\nhttps://github.com/documentcloud/backbone/blob/0.9.1/backbone.js\n\nline 229 : if (!this._validate(attrs, options)) return false;\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1057",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1057/comments",
    "title": "Validation does not occur when calling Model.save(attrs, {wait: true})",
    "created_at": "2012-02-28T21:12:00Z",
    "updated_at": "2012-03-19T15:35:13Z",
    "body": "When using {wait: true}, saving a model does not invoke validation due to the internal behavior of save using 'silent' to achieve the 'wait' semantics.\n\nBy modifying 'validate' to be:\n\n```\nif ((options.silent && !options.wait) || !this.validate) {\n    return true;\n}\n```\n\nvalidation properly occurs when using wait\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1056",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1056/comments",
    "title": "Router.navigate could support pushState title changing property",
    "created_at": "2012-02-28T17:25:19Z",
    "updated_at": "2014-09-02T12:38:11Z",
    "body": "Usually when i want to use pushState on my applications using backbone, i would like to change the page title as well as the page URL. It was a surprise when i found out that pushState actually supports a 'page title' attribute as declared on  http://dev.w3.org/html5/spec-author-view/history.html#history-0 \n\nNow i'm doing some workarounds by changing the title prior to the navigate method call but this feels awkward! it would be really nice if the router API supported title changing natively!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1055",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1055/comments",
    "title": "Error in documentation?",
    "created_at": "2012-02-28T01:33:15Z",
    "updated_at": "2012-02-28T12:01:59Z",
    "body": "Maybe I'm reading it wrong or something, english is not my first language... In that case sorry for the issue.\n\nhttp://documentcloud.github.com/backbone/#Collection-comparator\n\n> ... Comparator function can be defined as either a sortBy (pass a function that takes a single argument), or as a sort (pass a comparator function that expects two arguments).\n> \n> \"sort\" comparator functions take a model and return a numeric or string value by which the model should be ordered relative to others. \"sortBy\" comparator functions take two models ...\n\nI think in the second paragraph sort is actually sortBy and sortBy is sort.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1053",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1053/comments",
    "title": "Why does Model._validate accept an attrs param if it ignores it?",
    "created_at": "2012-02-27T19:28:23Z",
    "updated_at": "2012-02-27T19:57:09Z",
    "body": "The comments state that _validate should `Run validation against a set of incoming attributes, returning`true`if all is well`, yet the first thing it does is obliterate what it's been passed by extending attrs to include every single attribute in the model object:\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L491\n\nI can't say whether this is a good thing or a bad thing, but it's not what I would expect to happen by looking at the method signature and documentation. Validating everything all the time regardless of whether or not it's been changed seems a bit wasteful, and it makes unit testing validations more difficult than they need to be because you can't simply have a spy assert that the success callback hasn't been called after setting an invalid value. With this approach, the success callback may actually be called dozens of times before the one bad attribute you actually wanted to validate bombs out.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1051",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1051/comments",
    "title": "support for \"..\" and \"./\"-urls in History.navigate",
    "created_at": "2012-02-27T16:50:34Z",
    "updated_at": "2012-02-27T17:02:39Z",
    "body": "It would be nice if relative urls were supported, even if a root path was passed to `Backbone.history.start()`. \n\nCalling `Backbone.history.navigate(\"..\")` instead of calling it with the full parent path is often more comfortable.\n\nThe the html5 `pushState` interface handles these kinds of relative paths beginning with `.` and `..` correctly.\n\nTo differentiate between \"real\" relative paths like `..` and `./foo` and the usual \"semi-relative\" paths that should get the root prefix, Backbone could check if the first character is a dot. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1049",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1049/comments",
    "title": "Can't override {silent: true} on create",
    "created_at": "2012-02-25T20:06:55Z",
    "updated_at": "2012-02-28T00:47:38Z",
    "body": "I'm trying to force validation on model creation.\n\nWe're bootstrapping the data into the models when the page loads to cut down on XHR traffic and speed up the interface and while our back-end is good now, there was a time when there was no checking on input data, which means we have invalid data stored in our database.\n\nI've got my own validation framework set up, which works AFTER the model has been validated, but when I try to pass`{silent: false}` when creating a new object, validation doesn't occur.\n\nThis seems because line 185 is:\n\n``` javascript\nthis.set(attributes, {silent: true});\n```\n\nSo no matter what my options are for create, set always receives `{silent: true}` which means I can't for validation on create, which creates some oddities.    (Using http://github.com/toddself/Backbone.Validator to perform validation)\n\nExample:\n\n``` javascript\nvar TestModel = Backbone.Model.extend({\n    validators: {\n        title: {\n            min_length: 5,\n            is_type: 'string'\n        }\n    },\n        initialize: function(){\n            this.on('error', this.log);\n        },\n        log: function(model, error){\n            console.log(error);\n        }\n});\n\n// unable to set bad titles\nvar t = new TestModel({title: 'this should work'});\nt.get('title');\n\"this should work\"\n\nt.set('title', false);\n['Expected false to be of type string for title']\n\nt.get('title');\n\"this should work\"\n\n\n// can create when silent: true\nvar t2 = new TestModel({title: false});\nt2.get('title');\nfalse\n\nt2.isValid();\ntrue\n\nt2.set('title', 'this is a good title as well');\nt2.get('title')\n\"this is a good title as well\"\n\nt2.set('title', false);\n['Expected false to be of type string for title']\n\nt2.get('title');\n\"this is a good title as well\"\n\n// but can still create when silent: false\nvar t3 = new TestModel({title: false}, {silent: false});\nt3.get('title');\nfalse\n\nt3.isValid();\ntrue\n\nt3.set('title', 'this is a good title as well');\nt3.get('title')\n\"this is a good title as well\"\n\nt3.set('title', false);\n['Expected false to be of type string for title']\n\nt3.get('title');\n\"this is a good title as well\"\n```\n\nIs this by design?  I see the change logs had forcing validation on new objects for a while, but it was reverted in 0.9.1.  Will we be able to override the hard coded `{silent: true}` or am I just missing something really obvious and I can force validation on create?\n\nAny help is appreciated!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1047",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1047/comments",
    "title": "backbone hijacks sms:+123456 urls",
    "created_at": "2012-02-24T23:28:18Z",
    "updated_at": "2012-02-24T23:38:01Z",
    "body": "<a href=\"sms:+1234567\">Text Me</a> gets turned into\nhttp://.../sms:+1234567\n\nInstead, on a mobile it should prompt the user to send a text message, which works if backbone is disabled.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1045",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1045/comments",
    "title": "model.save doesn't call parse when setting returned data",
    "created_at": "2012-02-24T19:17:22Z",
    "updated_at": "2012-02-24T19:28:18Z",
    "body": "model.fetch calls parse with returned data, but model.save does not.  I have a complex model with collections as members.  I am using parse to turn the json arrays into collections.  When I call save, the server returns a new copy of the model with any changes the server processing made.  my model now has arrays where the collections should be.  Is the lack of parse on save an oversight or am I doing it wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1044",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1044/comments",
    "title": "The official example application has been superseded",
    "created_at": "2012-02-24T15:52:32Z",
    "updated_at": "2012-03-21T15:20:06Z",
    "body": "On the official Backbone.js page in the intro section there is a link to the [example application](http://documentcloud.github.com/backbone/examples/todos/index.html) (it's in the second paragraph from the top). The source code of this example application has been superseded and the newest version of the source code is located in Addy's TodoMVC repository [under architecture-examples/backbone](https://github.com/addyosmani/todomvc/tree/master/architecture-examples/backbone). \n\nThis newer version is superior - a couple of things have been refactored and optimized. Therefore, it would make sense to use this source code as the official example. So, it'd be cool if you could update the http://documentcloud.github.com/backbone/examples/todos/ directory with the newest version of the source code.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1043",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1043/comments",
    "title": "Custom getters/setters for Backbone.Model",
    "created_at": "2012-02-24T13:46:08Z",
    "updated_at": "2012-02-25T00:36:23Z",
    "body": "As people requested before me, having the ability to easily define getters and setters for attributes will be very handy.\n\nThe problem with creating our own setter such as setTitle() is that functions like fetch() will not call it.\n\nI created a plugin (https://github.com/berzniz/backbone.getters.setters) that allows adding getters/setters selectively in a declarative way:\n\n``` javascript\nvar MyModel = Backbone.Model.extend({\n  getters: {\n        fullName: function() {\n            return this.get('firstName') + ' ' + this.get('lastName');\n        }\n  },\n  setters: {\n        firstName: function(value) {\n            return value.toUpperCase();\n        }\n  }\n});\n```\n\nCalls to get()/set() are now routed to the getters/setters functions if available.\n\nWill this kind of solution fit in backbone without a need for a plugin?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1038",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1038/comments",
    "title": "this.$(someElement) Doesn't Work",
    "created_at": "2012-02-22T21:57:21Z",
    "updated_at": "2012-02-25T14:37:39Z",
    "body": "Somewhere between 0.5 and 0.9 Backbone changed the definition of the delegator (this.$()) from:\n\nreturn $(selector, this.el);\n\nto:\n\nreturn this.$el.find(selector);\n\nNow as the jQuery site itself says:\n\n\"Selector context is implemented with the .find() method; therefore, $('li.item-ii').find('li') is equivalent to $('li', 'li.item-ii').\" \n\nso that change should be perfectly safe, right?  Well, it is, but only:\nA) for jQuery >= 1.6\nB) if the selector is a string\n\nIf however you try to do:\nvar model = new Backbone.Model.extend({\n....someFunc: function() {\n........var elem = document.getElementById(\"foo\");\n........var $elem = this.$(elem);\n....}\n}) ()\nbefore jQuery 1.6, it won't work, because find isn't expecting to take an element (why would you try and find something you already have?).\n\nNow similarly, in Backbone it makes no sense to do this.$(elem) when you can just as easily do $(elem) (and the latter works).  But sometimes you might have a variable that could be a string or could be an element ... or you might just have some legacy code that does the former, and it's a pain to change.\n\nAll of this can be solved ... well in two ways (that I see):\n1) Add a line to the Backbone documentation that says something to the effect of \"While Backbone 0.9 works with all versions of jQuery, jQuery 1.6 or greater is recommended; using earlier versions of jQuery may cause problems in certain corner cases.\"\n2) Add a quick type check to the delegate function, and use the old style if the selector isn't a string:\n$: function(selector) {\n.... if (typeof selector != \"string\") return $(selector, this.$el);\n....return this.$el.find(selector);\n},\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1037",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1037/comments",
    "title": "Backbone history doesn't work with Safari and roots with encoded characters",
    "created_at": "2012-02-22T21:14:02Z",
    "updated_at": "2012-03-21T14:46:05Z",
    "body": "The underlying issue is a Safari issue:\nhttps://bugs.webkit.org/show_bug.cgi?id=30225\n\nBut it appears that window.location.pathname is returned decoded, which can confuse Backbone. As an example, Backbone.history.start checks window.location.pathname and compares it to the root. Those checks fail due to the root having encoded characters, but window.location.pathname returning decoded characters.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1036",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1036/comments",
    "title": "Weird behaviour when copying collection's this.models",
    "created_at": "2012-02-22T12:16:22Z",
    "updated_at": "2012-02-22T15:14:04Z",
    "body": "I don't know if it is a bug, or just me being dumb, or misusing stuff : http://jsfiddle.net/hYDbw/5/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1035",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1035/comments",
    "title": "pushState does not change to <base> when empty fragment is provided",
    "created_at": "2012-02-21T17:40:33Z",
    "updated_at": "2012-03-21T14:49:25Z",
    "body": "When a `<base>` URL is set in the HTML, calling Router.navigate(fragment) will correctly append the fragment to the `<base>`. However, when navigating to the root of the app, the fragment is now \"\", and calling window.history.pushState with an empty string does not change the state.\n\nMy proposed fix (in Router.navigate) is:\n\n``` javascript\nwindow.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, (frag == \"\") ? \".\" : frag);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1034",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1034/comments",
    "title": "backbone FAQ encourages an approach vulnerable to script injection",
    "created_at": "2012-02-21T10:41:44Z",
    "updated_at": "2012-03-21T15:03:59Z",
    "body": "Just a heads up that the advice at http://documentcloud.github.com/backbone/#FAQ-bootstrap is bad - a simple JSON encode leaves you open to javascript injection attacks for data that contains e.g \"</script><script>[injected code]</script>\".\n\nYou should actually do a json encode, then replace \"<\\\" with \"<\\/\". At least for html, the rules for xhtml may be different. You can read more here:\nhttp://stackoverflow.com/questions/779959/is-it-necessary-to-escape-character-and-for-javascript-string\n\nUnfortunately, there seems to be no good name for this kind of encoding (maybe it's related to sgml?) so it's kinda hard to find information on the topic.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1030",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1030/comments",
    "title": "calling `save` with {wait: true} results in incorrect final attributes if the success callback is called during the sync",
    "created_at": "2012-02-20T17:01:42Z",
    "updated_at": "2012-03-21T15:19:15Z",
    "body": "You might call the success callback immediately if you are saving to local storage, for example.\n\nThe current code assumes that the call to sync will be asynchronous, and that the success callback will not happen immediately before setting the old attributes back to the model.\n\nHere's a test that fails:\n\n```\ntest(\"`save` with `wait` results in correct attributes if success is called during sync\", function() {\n  var changed = 0\n  var model = new Backbone.Model({x: 1, y: 2});\n  model.sync = function(method, model, options) {\n    options.success();\n  }\n  model.on(\"change:x\", function() { changed++; });\n  model.save({x: 3}, {wait: true});\n  equal(model.get('x'), 3);\n  equal(changed, 1);\n});\n```\n\nSorry if this is intentional (it might be?).\n\nI fixed this by changing the standard success callback to unset options.wait, but that might not be ideal (all the tests still pass, however)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1028",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1028/comments",
    "title": "Incorrectly nested attributes",
    "created_at": "2012-02-19T22:19:51Z",
    "updated_at": "2012-06-20T01:52:04Z",
    "body": "I'm having an issue with Model.save(). In between the first and second attempts to save a model (in this case to localStorage using backbone.localStorge.js), the attributes of the model are being replaced with a reference to the model itself. \n\nI've tracked it back to line 324 / 325 of backbone.js (0.9.1) and it seems to be the output of model.parse() that is replaced the original model attribues.\n\nThe call to save() is made from the saveProject method of this model:\n\nhttps://github.com/shodanuk/bbTodo/blob/master/public/js/app/models/projectModel.js\n\nEssentially, what happens is the first time I add a todo to the project and save, it works. However, when saving, the attributes get overwritten as described above. When I add a second todo and try and save the project, the model.toJSON call fails as it tries to convert the circular reference to JSON. Without any meaningful error message, I may add!\n\nIs this something I'm doing wrong or an issue with Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1027",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1027/comments",
    "title": "Collection _prepareModel recursively setting attributes within attributes",
    "created_at": "2012-02-19T18:56:12Z",
    "updated_at": "2012-03-19T21:03:41Z",
    "body": "Issue described here under corresponding pull request:\n\nhttps://github.com/documentcloud/backbone/pull/593#issuecomment-4041716\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1026",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1026/comments",
    "title": "expose the extend function",
    "created_at": "2012-02-18T23:42:49Z",
    "updated_at": "2013-05-15T11:02:54Z",
    "body": "Using the extend function for custom \"classes\" could be useful. \n\nWould there be any harm in exposing it (to be accessed as Backbone.extend)? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1025",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1025/comments",
    "title": "Undelegate events on a specific element",
    "created_at": "2012-02-18T22:25:38Z",
    "updated_at": "2014-03-01T18:10:48Z",
    "body": "I ran into an issue where I wanted to undelegate some events set by the events hash only on specific selectors.\n\nJeremy, would you find it useful if I submitted a pull request that implemented this:\n\n```\nthis.undelegateEvents('selector');\n```\n\n?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1020",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1020/comments",
    "title": "underscore's throttle and debounce as options when declaring view events?",
    "created_at": "2012-02-17T07:47:43Z",
    "updated_at": "2012-02-18T06:46:28Z",
    "body": "I love underscore's throttle and debounce capabilities. I would also love to be able to automatically hook up the behaviors when declaring events in my Backbone views, rather than manually handling the plumbing for these events in my initialize function.\n\nI'm not sure exactly how the synax would look, maybe something like this:\n\nevents: {\n    'resize window throttle 300': 'window_resize_func' \n    'keydown #mytext debounce 500': 'reposition_elements_func'\n   .\n   .\n}\n\nMaybe there is a more elegant syntax to express this in, open for suggestions. I could see this being very handy for just about anyone that handles voluminous event types like mouse move, window resize, etc.\n\nI'm not sure if this has already been discussed so if I'm exhuming an old conversation my apologies.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1019",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1019/comments",
    "title": "Model.parse needs a compliment: Model.serialize",
    "created_at": "2012-02-17T04:09:10Z",
    "updated_at": "2012-02-20T07:19:10Z",
    "body": "So Backbone has a great function for parsing data from preexisting APIs into something more suitable for the Backbone model.\n\nBut it is only half of the equation. We also need to serialize the data back into the format required by the server.\n\nRight now if you are making use of Model.parse, you basically also have to write your own custom `sync` method. That's not entirely bad, but it could be much simpler if Backbone included a `serialize` method on the model that was called by the default Backbone.sync method.\n\nBasically it would just mean changing this line in Backbone.sync\n `params.data = JSON.stringify(model.toJSON());`\nto this:\n `params.data = JSON.stringify(model.serialize.call(model, model.toJSON()));`\nand then updating the Backbone.Model to include a new no-op `serialize` method just like `parse`:\n\n```\nparse: function(resp, xhr) {\n  return resp;\n},\nserialize: function(attrs) {\n  return attrs;\n},\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1017",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1017/comments",
    "title": "It would be better to merge routing params into single hash instead of separate params",
    "created_at": "2012-02-16T18:37:37Z",
    "updated_at": "2012-02-17T14:14:55Z",
    "body": "If there would be single hash param you could also automatically add all querystring params there.\n\nWhat you think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1015",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1015/comments",
    "title": "Set URL before starting history?",
    "created_at": "2012-02-16T13:41:29Z",
    "updated_at": "2012-02-16T16:53:33Z",
    "body": "I have an app that needs to be aware of whether or not our user is logged in. Depending on the state, we need to redirect the user to the `/login` page before doing anything else.\n\nHere's what I am doing now, but it causes an extra reload as it uses `window.location`. Is there a way to change the URL prior to calling `Backbone.History`?\n\n```\nif (!myApp.loggedIn() && window.location.href.indexOf(\"login\") === -1) {\n    window.location = \"/login\";\n    return;\n}\n\nBackbone.history.start({pushState: true});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1013",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1013/comments",
    "title": "Is it normal that \"admin/users\" and \"admin/users/\" routes considered by backone as different?",
    "created_at": "2012-02-16T09:26:54Z",
    "updated_at": "2012-02-16T09:45:43Z",
    "body": "Is it normal that \"admin/users\" and \"admin/users/\" routes considered by backone as different?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1012",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1012/comments",
    "title": "Collection 'add' event include index",
    "created_at": "2012-02-16T05:06:23Z",
    "updated_at": "2012-12-20T16:27:12Z",
    "body": "When a model is added to a Backbone.Collection instance, either via .add or .reset, the even dispatching does not contain the index of which the model was added. This is particularly a very helpful and at times important to obtain. \n\nCan provide examples and cases if need be. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1009",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1009/comments",
    "title": "Non-element-scope jquery function on View",
    "created_at": "2012-02-14T20:37:40Z",
    "updated_at": "2012-02-14T22:03:13Z",
    "body": "Backbone.View contains a function $ that scopes find requests on the domLibrary to the element on the view.  This is very useful for writing unit tests that are isolated form the dom in that it allows you to provide a mock or stub implementation of the domLibrary local to the view object.\n\nThere are however cases where the view needs to do un-scoped finds.  View should also expose a method that allows for delegating those funds to the domLibrary, eliminating the need to rely on any globals and improving over-all testability.\n\nFrom Backbone.View:\n\n  //exists today\n  $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n   //suggested addition\n    $$: function(selector) {\n      return $(selector);\n    }\n\nExample usage in a view:\n\n  initialize:function(){\n        var el = this.$$('#job_status_template');\n        this.template = _.template(el.html() );\n    }\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1007",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1007/comments",
    "title": "route helper functions",
    "created_at": "2012-02-14T20:10:25Z",
    "updated_at": "2013-05-07T00:11:15Z",
    "body": "Does Backbone provide any route helper functions, akin to [the ones provided by Rails](http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html)? What I'd like to be able to do is call a function like `url_for(routeName, propertyOne, propertyTwo)` rather than manually write out `#the_full_url_for_route_name/propertyOne/propertyTwo` (which then needs to be updated if I later change the route hash map).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1005",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1005/comments",
    "title": "Re your discussion on jabber",
    "created_at": "2012-02-14T15:44:40Z",
    "updated_at": "2012-02-17T15:21:12Z",
    "body": "@jashkenas hi. Sorry if this is the wrong place for this but I was hearing you talk on javascript jabber podcast and the topic of Backbone.ModelBinding Backbone.Marionette got brought up, you offered to go into it but never got the chance. I gotta say I really want to hear what you think about those, especially how they compare to layoutmanager, ModelBinding, Knockback, and Synapses, and how important it is for the majority to use those and how they compare to what ember has.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1003",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1003/comments",
    "title": "IE7 resets hash on Backbone.history.start()",
    "created_at": "2012-02-14T13:32:57Z",
    "updated_at": "2012-02-15T15:10:00Z",
    "body": "In IE7 when a Page is loaded with a initial Hash value. On history.start() IE7 follows the route of the router, but resets the hash to '#' afterwards, while all other browsers keep the hash.\n\nI created a jsfiddle that reproduces the error:\nhttp://jsfiddle.net/RvSpM/1/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1000",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1000/comments",
    "title": "change:attr event fires before all attributes are set",
    "created_at": "2012-02-14T00:36:25Z",
    "updated_at": "2012-02-14T14:23:51Z",
    "body": "When setting multiple attributes, change fires for every attribute that has changed _while_ the model attributes are being changed.\n\nThis means that inside the 'change:attr' handler, one has access to a 'half-changed' model, which can be confusing.\n\nExample (CoffeeScript):\n\n```\nmodel = new Backbone.Model \n    name: 'Maria'\n    age: 16\n\nmodel.bind 'change:name',  ->\n    console.log 'Name is ' + @get('name') + ' and age is ' + @get('age')\n\nmodel.set \n    name: 'John'\n    age: 23\n```\n\nPrints \"Name is John and age is 16\", which is wrong. \n\nCould you elaborate if this is a design decision or a bug ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/998",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/998/comments",
    "title": "Collection.add event callbacks trigger after all models are added in 0.9.1 instead of serially like 0.5.3",
    "created_at": "2012-02-13T21:28:11Z",
    "updated_at": "2012-03-19T20:58:53Z",
    "body": "Something in my code broke with the recent update from 0.5.3 -> 0.9.1 and I believe I've traced it down to a difference in how Collection.add works.\n\nIn 0.5.3, when the \"add\" event fired on a collection, the state of the collection was such that the last model in the collection was the one being passed through the add. Put another way, in the add callback on a collection the length was accurate and in sync with the model being added. Does that make sense?\n\nThe code was like:\nfor (var i = 0, l = models.length; i < l; i++) {\n          this._add(models[i], options);\n        }\n\nSo when the add callback say hits a viewer listening for 'add' the length of the collection would increment on each add callback.\n\nNow, the code is more decoupled and the collection is fully populated when add events are triggered.\n\nsplice.apply(this.models, [index, 0].concat(models));\n      if (this.comparator) this.sort({silent: true});\n      if (options.silent) return this;\n      for (i = 0, length = this.models.length; i < length; i++) {\n        if (!cids[(model = this.models[i]).cid]) continue;\n        options.index = i;\n        model.trigger('add', model, this, options);\n      }\n\nThis seems like strange behavior - meaning that add callbacks aren't really callbacks per add but rather a batch after all the models have been added.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/997",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/997/comments",
    "title": "Problem handling \"change\" events fired from another \"change\" event",
    "created_at": "2012-02-13T19:48:44Z",
    "updated_at": "2012-02-13T20:30:12Z",
    "body": "//Say, we have this model.\n\nvar MyModel = Backbone.Model.extend({\n\n```\ninitialize: function() {\n    this.bind(\"change:param1\", this.param1Changed, this);\n    this.bind(\"change:param2\", this.param2Changed, this);\n},\n\nparam1Changed: function() {\n    alert(\"param1Changed function called. Is param1 changed:       \" + this.hasChanged(\"param1\"));\n},\n\nparam2Changed: function() {\n    this.set({ param1: \"PARAM1VALUE\" });\n}\n```\n\n});\n\n//Issue 1.\n\nvar Model1 = new MyModel();\n\nModel1.set({ param2: \"PARAM2VALUE\" });\n//alerts \"false\", which is obviously an error\n\n//Issue 2.\n\nvar Model1 = new MyModel();\n\nModel1.set({ param1: \"PARAM1VALUE\" });\n//alerts \"true\", everything OK\n\nModel1.set({ param1: \"PARAM1VALUE\" });\n//nothing happens, setting same value doesn`t fire change event, it`s right. OK\n\nModel1.set({ param2: \"PARAM2VALUE\" });\n//param2Changed function sets PARAM1VALUE on param1, which already is PARAM1VALUE, and it is firing change event! - error\n//we get another \"false\" alert\n\nModel1.set({ param2: \"PARAM2VALUE\" });\n//nothing happens, setting same value doesn`t fire change event, it`s right. OK\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/996",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/996/comments",
    "title": "Router calls the wrong method",
    "created_at": "2012-02-13T18:55:41Z",
    "updated_at": "2013-04-09T23:41:34Z",
    "body": "Perhaps I am just doing something wrong, but I think I've found a bug in the way `backbone.js` handles URI routing.\n\nIt appears that the behaviour of how Backbone handles URI's changes when I enter an URI into the browser compared to when I manually force the URI  by invoking  `myRouter.navigate()`.\n\nAccessing all URI\u00b4s -  `/contacts`, `/contacts/new` and `/contacts/ID` works well in the browser, but triggering `/contacts/new` manually fails as it instead calls the route method assigned to the `/contacts/ID` URI (loadContact).\n\nTo the code:\n\n```\nmyApp.contactRouter = Backbone.Router.extend({\n\n    routes : {\n        \"contacts\": \"contacts\",\n        \"contacts/new\": \"newContact\",\n        \"contacts/:id\": \"loadContact\"\n    },\n\n    contacts: function() { console.log(\"in contacts\") },\n\n    newContact: function() { console.log(\"Creating new contact\"); },\n\n    loadContact: function(id) { console.log(\"Loading specific contact with id \", +id); }\n});\n```\n\nAnd here's my failing `jasmine.js`-based unit test of the `newContact` method:\n\n```\nit(\"Opens /contacts/new\" function() {\n\n    this.router.bind(\"route:newContact\", this.routeSpy);\n    this.router.navigate(\"contacts/new\", true);\n\n    this.router.bind(\"route:loadContact\", function(route) { console.log(arguments) } ); // For debugging - loadContact is called instead!\n\n    expect(this.routeSpy.calledOnce).toBeTruthy(); // Fails\n    expect(this.routeSpy.calledWith(\"new\")).toBeTruthy(); // Fails\n}); \n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/995",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/995/comments",
    "title": "Encourage Examples to include links to source code / writeups",
    "created_at": "2012-02-13T17:41:21Z",
    "updated_at": "2012-03-19T20:39:49Z",
    "body": "Backbone obviously leaves a lot up to the developer, and this is partially what makes the list of examples on the documentation site and wiki page encouraging: \"All of these other people figured it out, why can't I\"? \n\nBut it's still tough, and frustrating to see that an app has solved a problem you're facing, and having it be nearly impossible to understand how they did it due to minified source.\n\nIt would be awesome if people contributing examples for entry in the Examples section were encouraged to provide a link to either source code, if it's available, or a writeup(s) explaining how an entry was able to get around a particular problem they faced. \n\nI realize it's not practical to expect all source to be open, but encouraging folks to have a writeup also encourages knowledge to be shared, and this helps everyone! It could even be a point of pride: the reason for someone to be included on the examples page could be based on the quality of their writeup as well.\n\nAny thoughts? Is this just silly? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/993",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/993/comments",
    "title": "Can I override a router's routes or methods?",
    "created_at": "2012-02-13T11:12:17Z",
    "updated_at": "2012-02-20T17:08:10Z",
    "body": "It's not that cool to unit test a router which invokes a view, which may or may not change the DOM,  redirect the user or just make the unit test go bananas, when all I needed to test was whether or not my URI would call the appropriate router method or not.\n\nSo therefore I am trying to make up a way to unit test my routers and their URI handling, whilst decoupling them from the eventual logic they may contain. \n\nI thought it would be a good idea to access the `.routes` property and use it to create a mock-version of my router containing nothing but the routes alone. Doing what I do below still will register the `myRouter` into my Backbone scope.\n\nSo is there a way I could get this working by extracting routes from `myRouter` without first invoking it?\n\n```\nvar mockRouter = Backbone.Router.extend({});\nvar myRouter = new myRouter();\n\n_.each(myRouter.routes, function(func, route){\n        mockRouter.route(func, route, function(){});\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/990",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/990/comments",
    "title": "view = new View({}); Error?",
    "created_at": "2012-02-12T14:32:40Z",
    "updated_at": "2012-02-13T15:23:20Z",
    "body": "I'm getting an error when creating a new View. Models & Collections work just fine.\n\n**main.js:**\n\n``` javascript\nvar ItemView, itemView;\nItemView = Backbone.View.extend({\n  initialize: function(){\n    return _.bindAll(this, 'render');\n  },\n  render: function(){\n    $(this.el).html('<h1>Hello</h1>');\n    return this\n  }\n});\nitemView = new ItemView({});\n```\n\n**error:**   `TypeError: 'undefined' is not a function (evaluating 'h(a)')`\n\n**Using:**\n- Underscore **1.3.1**:   _http://documentcloud.github.com/underscore/underscore-min.js_\n- Backbone **0.7.1**:   _http://documentcloud.github.com/backbone/backbone-min.js_\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/989",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/989/comments",
    "title": "Binding events directly to the top level Backbone.View element",
    "created_at": "2012-02-11T03:01:30Z",
    "updated_at": "2012-02-11T17:33:03Z",
    "body": "Maybe I'm missing something, but I can't find a way to do that.\n\n``` coffeescript\nclass window.SomeView extends Backbone.View\n  events:\n    'click .child' : 'activate'\n```\n\nHere you can bind a click event to `.child`, but can't do the same to the `el` itself. To make the entire element clickable, I need to add an empty div (with no margin/padding) just to conform to backbone.\n\nIn other words, instead of this:\n\n``` html\n<li class=\"tabs\">\n  <div class=\"child\">...</div>\n</li>\n<li class=\"tabs\">\n  <div class=\"child\">...</div>\n</li>\n```\n\nI just like to have this:\n\n``` html\n<li class=\"tabs\">...</li>\n<li class=\"tabs\">...</li>\n```\n\nIs it possible? How do I do this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/988",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/988/comments",
    "title": "hasChanged(): deep attribute comparison.",
    "created_at": "2012-02-10T22:26:34Z",
    "updated_at": "2012-02-10T22:28:39Z",
    "body": "I often find myself with attributes that aren't at the first level of the JSON that I'd like to checked their hasChanged() state, but currently this function only supports checking on the first level of the object.  I used a little hack for myself like so:\n\n```\nhasChanged:function(attr){\n    if(attr){\n        if(attr.indexOf('.')==-1){\n            return this._previousAttributes[attr]!=this.attributes[attr]\n        }else if(attr=attr.split('.')){\n            var a, b;\n            if(this._previousAttributes[attr[0]]){\n                a = this._previousAttributes[attr[0]];\n                b = this.attributes[attr[0]];\n                for (var i=1,c=attr.length;i<c;i++){\n                    a = a[attr[i]];\n                    b = b[attr[i]];\n                }\n                return a != b;\n            } else {\n                return true;\n            }           \n        }\n    }return this._changed\n}\n```\n\nBut it would be much nicer to have something along these lines in the official release to allow me to easily follow with future version.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/986",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/986/comments",
    "title": "Double event firing if the new el is a sub-element of the old",
    "created_at": "2012-02-10T18:02:34Z",
    "updated_at": "2012-02-27T21:07:35Z",
    "body": "I ran into a problem while redefining \"el\" into a view. The problem is if we have an event (on a button for example) in a scoped DOM element, and then we redefine \"el\" (where the new \"el\" is a sub-element of the old one and contains the button in question) via setElement, the event will fire twice on a click of a button.\n\nThis bug doesn't happen if I insert `this.undelegateEvents()` before redefining \"el\".\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/984",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/984/comments",
    "title": "`sort` and `sortBy` are incorrectly swopped in collection.comparator docs",
    "created_at": "2012-02-10T13:04:19Z",
    "updated_at": "2012-02-10T13:22:30Z",
    "body": "http://documentcloud.github.com/backbone/#Collection-comparator\n\n`sort` and `sortBy` are swopped around in colleciton.comparator documents:\n\n\"sort\" comparator functions take a model and return a numeric or string value by which the model should be ordered relative to others. \"sortBy\" comparator functions take two models, and return -1 if the first model should come before the second, 0 if they are of the same rank and 1 if the first model should come after.\n\n`sortBy` takes one argument; `sort` takes two.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/983",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/983/comments",
    "title": "Idea: build in `initialize`, `render` and `remove` events",
    "created_at": "2012-02-09T22:41:00Z",
    "updated_at": "2012-02-09T22:43:12Z",
    "body": "I think it would be nice to add `trigger('initialize')` right after the initialize call in Backbone.View constructor. This would make it easy to respond to the initialization, eg I could do something like this:\n\n```\nonInitialize : function () {\n\n    if (this.options.el !== undefined) {\n\n        this.render();\n    }\n},\n```\n\nAnd make it much easier for other views to listen and react after the view has been initialized. Along the same line of thought, the default `render` and `remove` functions could `return this.trigger('render')` and `return this.trigger('remove')` as well.\n\nJust a thought, curious as to whether there are reasons not to do this.\n\nCheers\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/977",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/977/comments",
    "title": "`sync` event isn't triggered when a success callback is provided",
    "created_at": "2012-02-08T20:07:08Z",
    "updated_at": "2012-03-31T16:21:13Z",
    "body": "Around line #327\n\n``` javascript\n      var success = options.success;\n      options.success = function(resp, status, xhr) {\n        //...\n        if (success) {\n          success(model, resp);\n        } else {\n          model.trigger('sync', model, resp, options);\n        }\n      };\n```\n\nI'd like to bind to `sync` as well as accept a callback. If this behavior is intentional I'm just curious why.\n\nPS. Thanks for the amazing framework, we love & use a variety of documentcloud projects at Art.sy.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/976",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/976/comments",
    "title": "Duplicate model exception cannot be caught",
    "created_at": "2012-02-08T18:53:42Z",
    "updated_at": "2012-03-19T19:34:23Z",
    "body": "In addition to being unreadable, the following conditional will halt all script execution in the event that it tests positive and doesn't seem to be caught by a `try` block.\n\n``` JavaScript\nif (cids[cid = model.cid] || this._byCid[cid] ||\n          (((id = model.id) != null) && (ids[id] || this._byId[id]))) {\n          throw new Error(\"Can't add the same model to a collection twice\");\n        }\n```\n\n``` JavaScript\ntry {\n        this.dashboardFeed.fetch();\n      } \n      catch (e) \n      {\n        //Never gets here\n        console.error(e);\n      }\n```\n\nWhile it's certainly a problem if this ever hits, I'd really prefer it if it didn't crash my entire application as a result. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/975",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/975/comments",
    "title": "internet explorer 7 standards mode invokes hashed route in backbone twice on refresh",
    "created_at": "2012-02-08T11:20:29Z",
    "updated_at": "2012-03-19T18:56:01Z",
    "body": "This is easily reproducible with the code I've pasted on Stack Overflow: http://bit.ly/xYTaLl\n\nThe problem is when a URL with a hash (any hash e.g. http://localhost:8000/error/#whatever) is navigated to then refreshed, Internet Explorer invokes the catch-all route *url but then proceeds to remove the hash and reinvoke the route a second time.\n\nThis works as intended with Webkit, Firefox, Opera etc with only the intended route triggering on a refresh. This has been tested with the latest backbone, underscore and jquery libs both locally and remotely.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/974",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/974/comments",
    "title": "Setting the same value to a model property twice causes an error",
    "created_at": "2012-02-08T08:44:47Z",
    "updated_at": "2012-02-08T09:16:08Z",
    "body": "That is, calling the code below twice will raise an exception:\n    myObject.set({ x: 0 }\n\nThe exception is: \"'undefined' is not a function (evaluating 'f.has(b,e)')\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/972",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/972/comments",
    "title": "Hideous conditional full of assignments (with side-effects)",
    "created_at": "2012-02-08T05:49:33Z",
    "updated_at": "2012-02-08T21:38:54Z",
    "body": "There has got to be a readable way to do this:\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L515\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/970",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/970/comments",
    "title": "Problems with link when jqm",
    "created_at": "2012-02-07T21:12:43Z",
    "updated_at": "2012-02-08T12:24:31Z",
    "body": "I'm using jQuery Mobile in combination with url's and noticed some strange behavior.\n\nI have a router like this \n\n```\nclass Router extends Backbone.Router\n\n    routes: {\n        'main': 'main'\n        'customer-list': 'customerList'\n        'customer-show?id=:id': 'customerShow'\n    }\n```\n\nand a template snippet like:\n\n```\ntemplate: _.template '<li><a href=\"#customer-show?id=<%= id %>\"><%= firstname %> <%= lastname %></a></li>'\n```\n\nThis works perfectly and the router picks up the url match before showing the actual page.\n\nNow when I change this to:\n\n```\nclass Router extends Backbone.Router\n\n    routes: {\n        'main': 'main'\n        'customer-list': 'customerList'\n        'customer-show/:id': 'customerShow'\n    }\n```\n\nand \n\n```\ntemplate: _.template '<li><a href=\"#customer-show/<%= id %>\"><%= firstname %> <%= lastname %></a></li>'\n```\n\nthen the router is not matched at all, and even a failing 404 request is made to `/customer-show/99\n\nThis might be no Backbone issue at all - but jQM - but I wanted it to post here as somebody may know what is going on?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/969",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/969/comments",
    "title": "Using Backbone.Model.set with \"silent\" option doesn't clear out previous attributes.",
    "created_at": "2012-02-07T16:13:06Z",
    "updated_at": "2012-02-09T17:39:09Z",
    "body": "From the 0.9.0 documentation it appears this is by design, but it gives an odd behavior. Here's an example:\n\nvar Foo = Backbone.Model.extend();\n\nvar instance = new Foo();\ninstance.bind('change', function (model, value) {\n  console.log(model.changedAttributes());\n});\n\ninstance.set({ bar: 1 }, { silent: true });\ninstance.set({ baz: 2 });\n// I get { bar: 1, baz: 2 } logged.\n// I'd expect { baz: 2 }\n\nI'd think of this as \"staging\" a change since that's really what it's doing. If I want to change a model property, not trigger any change events, but also not trigger change events in the future, what's the recommended way of doing that? Can I do that without creating a new model instance?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/966",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/966/comments",
    "title": "Navigate() appending to current path instead of replacing (routeStripper issue)",
    "created_at": "2012-02-06T22:13:38Z",
    "updated_at": "2012-05-09T00:41:16Z",
    "body": "router.navigate 'thread/' +Math.floor(Math.random()_11)\nrouter.navigate '/thread/' +Math.floor(Math.random()_11)\n\nThe result of calling either of thesemethods multiple times is: \n\n1st time: /thread/2\n2nd time: /thread/thread/7\n3rd time: /thread/thread/thread/4\netc\n\nThe expected result is\n\n1st time: /thread/2\n2nd time: /thread/7\n3rd time: /thread/4\n\nI solved this problem on my end by using the navigate function with the leading slash, ie: \"/thread/[number]\" and removing the routeStripper regex from backbone.js source.\n\nI also expected router.navigate(\"\") or router.navigate(\"/\") to set the URL to the root, but instead the URL just doesn't change. Is this  a bug, or am I misusing the navigate method?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/964",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/964/comments",
    "title": "Collection.get(id) - Inconsistent return value for null, undefined, NaN",
    "created_at": "2012-02-06T21:38:37Z",
    "updated_at": "2013-08-12T13:27:05Z",
    "body": "Hi,\nI wonder if this behavior is by design:\n\n```\nvar c = new Backbone.Collection();\nc.get(null); // null\nc.get(undefined); // null\nc.get(NaN); // undefined\nc.get(\"\"); // undefined\n```\n\nShouldn't `get` always return either `undefined` or `null` for non existing ids?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/963",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/963/comments",
    "title": "Unrelated change:attr events triggered",
    "created_at": "2012-02-06T13:43:59Z",
    "updated_at": "2012-02-07T09:50:02Z",
    "body": "Example code:\n\n``` javascript\nwindow.onload = function() {\n    var Test = Backbone.Model.extend({\n        defaults: {\n              testValue: 0\n            , testValue2: 0\n        },\n\n        initialize: function() {\n            this.on('change:testValue', function() {\n                console.log('this should not fire');\n                console.log('new value:', this.get('testValue'));\n            });\n\n            this.on('change:testValue2', function() {\n                console.log('this should fire');\n                console.log('new value2:', this.get('testValue2'));\n            });\n        },\n    });\n\n    var test = new Test();\n\n    test.set({testValue: 5}, {silent: true});\n    test.set({testValue2: 5});\n};\n```\n\nI'm fairly certain this is not correct behaviour. If I had changed fifty attributes silently and then set ONE normally I would not expect it to fire all these attributes.\n\nOutput is this:\n\n```\nthis should not fire\nnew value: 5\nthis should fire\nnew value2: 5\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/962",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/962/comments",
    "title": "Models not available in Collection.initialize()",
    "created_at": "2012-02-06T12:28:24Z",
    "updated_at": "2012-02-06T19:50:06Z",
    "body": "In 0.5.3, the Collection's constructor used to set the models before calling `initialize()`. However, with 0.9, the models get set only after `initialize()`. \n\nOur existing `initialize()` code relies on models existing in order to run some aggregate calculations. Now, all that is broken. Why the change?\n\nAdditionally, when `reset()` is called to set the models, it is done silently, so we can't even listen to the \"reset\" event to perform the calculations.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/961",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/961/comments",
    "title": "Add this.dollar for $(this.el) to Backbone.View",
    "created_at": "2012-02-05T19:16:30Z",
    "updated_at": "2012-02-05T19:39:33Z",
    "body": "More often than not, I find myself needing `$(this.el)`, particularly when the view has multiple instances and has to operate on a DOM.\n\n```\nclass SomeView extends Backbone.View\n  initialize: ->\n    @dollar = $(@el)\n\nviews[0] = new SomeView\nviews[1] = new SomeView\n\nview[0].dollar.addClass('active')\n```\n\nWould adding this to `Backbone.View` itself be a bad idea?\n\nI also think caching the jQuery/Zepto object in this manner could help making faster apps.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/959",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/959/comments",
    "title": "Change event produce an infinite loop",
    "created_at": "2012-02-05T07:36:37Z",
    "updated_at": "2012-08-10T19:24:44Z",
    "body": "In the last version (0.9.1) I have faced defect which produce an infinite loop.\n\n```\n$(function () {\n\n    // define model class\n    var AppModel = Backbone.Model.extend({});\n\n    // define view class\n    var AppView = Backbone.View.extend({\n        initialize: function () {\n            _.bindAll(this, \"render\");\n            $(this.el).appendTo(\"body\");\n            this.render();\n        },\n        render: function () {\n            console.log(\"render\");\n            this.model.set({c: 1}, {silent: true});\n            $(this.el).html('<p>' + this.model.get(\"a\") + '</p><p>' + this.model.get(\"b\") + '</p>');\n            return this;\n        }\n    });\n\n    // create model instance\n    var model = new AppModel({a: 10, b: 20});\n\n    // create view for model instance\n    var view = new AppView({model: model});\n\n    // any changes in the model run redraw\n    model.bind(\"change\", function () {\n        view.render();\n    });\n\n    // generate random data\n    $(\".btn-update\").on(\"click\", function () {\n        model.set({\n            a: Math.round(100 * Math.random()),\n            b: Math.round(100 * Math.random())\n        });\n    });\n\n});\n```\n\nAny change in model begins redraw view. But I need to set value of one of properties of model in `render` function. \nI set an option `{silent: true}` to suppress additional event. It perfectly worked in version 0.5.3, but has broken in 0.9.1.\n\nIt is defect in design of the application or an error in Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/958",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/958/comments",
    "title": "Backbone.View and Backbone.Events",
    "created_at": "2012-02-05T05:45:49Z",
    "updated_at": "2012-02-05T13:22:31Z",
    "body": "I have read [the closed issue #6](https://github.com/documentcloud/backbone/pull/6)\n\nI have a question.\n\nDoes it means I should be doing this\n\n```\n// binding events on a instance\nclass View extends Backbone.View\n    tock: -> console.log 'tock'\n\nview = new View\nview.on 'tick', view.tock\n\nview.trigger 'tick'\n```\n\nor this\n\n```\n// binding events in the constuctor\nclass View extends Backbone.View\n    initialize: ->\n        @on 'tick', @tock\n    tock: -> console.log 'tock'\n\nview = new View\n\nview.trigger 'tick'\n```\n\nrather than this? (if possible)\n\n```\n// using the built-in events hash\nclass View extends Backbone.View\n    events:\n        \"tick\": \"tock\"\n    tock: -> console.log 'tock'\n\nview = new View\n\nview.trigger 'tick'\n```\n\nIt gives me a feeling that Backbone.View and Backbone.Events are not so a good friend to each other.\nBackbone.Events looks sad and lonely to me.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/957",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/957/comments",
    "title": "duplicate events when instantiating view twice",
    "created_at": "2012-02-05T01:33:56Z",
    "updated_at": "2012-02-06T19:49:04Z",
    "body": "When I define a view (via Backbone.View.extend) and instantiate it twice (via new), when an event happens once on each ivies object, it is fired twice.\n\nShort example:\n\n``` html\n<html>\n<head>\n    <script type=\"text/javascript\" src=\"js/jquery-1.7.1.js\"></script>\n    <script type=\"text/javascript\" src=\"js/underscore-1.3.1.js\"></script>\n    <script type=\"text/javascript\" src=\"js/backbone-0.9.1.js\"></script>\n</head>\n<body>\n    <div id=\"test\"></div>\n    <script type=\"text/javascript\">\n        testview = Backbone.View.extend ({\n            el: '#test',\n             events: {'click .test': 'doTest'},\n             doTest: function() {alert('test')},\n             render: function() {$('#test').append($('<a>').attr('href', '#').addClass('test').append('test'));}});\n        view_one = new testview;\n        view_two = new testview;\n        view_one.render();\n    </script>\n    </body>\n</html>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/956",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/956/comments",
    "title": "Render function doesn't extend",
    "created_at": "2012-02-04T16:08:37Z",
    "updated_at": "2012-02-08T14:29:18Z",
    "body": "When I want to use multiple views for one model, I extend the main view which I first create, as show below.\n\nSomehow, leaving out de 'render' function in de second view stops events in that view from running, so that I have to duplicate the render function in de new view, whereas te only difference is the template. In my app, the render function is a little more complicated than shown below, so it's a bit of a shame to have to duplicate this.\n\nAm I doing something wrong or is this just the way it is?\n\n``` javascript\nItemV = Backbone.View.extend({\n\n    tagName: \"tr\",\n\n    events: {\n        \"click\": \"choose\"\n    },\n\n    template: _.template($(\"#item-template\").html()),\n\n    initialize: function() {\n        this.model.on('change', this.render, this)\n    },\n\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this\n    },\n\n    choose: function() {\n        (Lists.get(this.model.get('list'))).set({choice: this.model.id});\n    }\n\n});\n\nInviteV = ItemV.extend({\n\n    template: _.template($(\"#invite-template\").html()),\n\n    // this function is exactly the same as in the view it extends\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this\n    }\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/955",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/955/comments",
    "title": "Collection#fetch updates existing model instances (vs replacing)",
    "created_at": "2012-02-04T02:11:00Z",
    "updated_at": "2012-03-19T18:26:24Z",
    "body": "If I create a new model, and then call fetch, it will update that model's attributes.\n\nIf I create a collection of models, and then call fetch, it won't update the existing models \u2013 it will replace them with new instances.\n\nThis is painful because I cannot cache references to the collection's model instances, as the references become invalid once a fetch occurs. Instead I'd have to cache references to the collection, and do Collection#get every time I want to access the model. Maybe that's acceptable, but it seems reasonable that a collection should be able to perform a fetch/update without invalidating existing model instances.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/953",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/953/comments",
    "title": "Using json2.js results in 'TypeError: converting circular structure to JSON' when trying to instantiate a view",
    "created_at": "2012-02-04T00:30:48Z",
    "updated_at": "2012-03-19T18:17:33Z",
    "body": "See http://yfrog.com/kfvsvdp .\n\nOnce I stopped loading json2.js the error went away.\n\nI was following the instructions on the backbone.js homepage when adding json2.js.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/952",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/952/comments",
    "title": "model hasChanged bug",
    "created_at": "2012-02-03T23:11:27Z",
    "updated_at": "2012-02-04T01:03:16Z",
    "body": "seems like hasChanged is evaluated to FALSE when a problem when a model's property is change to false.\n\nthis bugs is both present in the event 'change:prop' and hasChange('prop')\n\nex:\nthis.on('change:spellcheck', function(model, color) {\n     alert('spellcheck change...'); //won't show on   this.set('spellcheck', false);\n  });\n\nEverything fires correctly if it's set to true, a num, or a str.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/951",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/951/comments",
    "title": "Reverse lookup of Router routes? (\"urlFor\")",
    "created_at": "2012-02-03T20:11:41Z",
    "updated_at": "2012-02-08T22:26:24Z",
    "body": "As a bit of introduction, I generate a lot of views with javascript, and I'm forced to write URLs in my handlebars templates that I would rather not have there. For this, it's important for me to ask the app \"what's the URL for viewing this thing\", so I hacked up this function in my Router:\n\n``` javascript\nurlFor: function(route) {\n    function wrapArray(obj) { return _.isArray(obj) ? obj : Array(obj) };\n\n    var params = 2 <= arguments.length ? Array.prototype.slice.call(arguments, 1) : [];\n\n    var path = _.detect(_.keys(this.routes), function(key) {\n        return this.routes[key] === route;\n    }, this);\n\n    var param;\n    for (var i = 0, len = params.length; i < len; i++) {\n        if (_.isArray(params[i]))\n            param = _.map(params[i], encodeURIComponent).join(\"/\");\n        else\n            param = encodeURIComponent(params[i]);\n\n        path = path.replace(/(?:\\:|\\*)[^\\/]+/, param);\n    }\n\n    return path;\n}\n```\n\nThat is a very contrived implementation that suits my application (it has no error handling, for example :)), but if there's interest in having something like this in Backbone proper I can work on a real patch with tests.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/949",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/949/comments",
    "title": "change event not fired on unset when an attribute was previously set silently",
    "created_at": "2012-02-03T17:14:27Z",
    "updated_at": "2012-02-03T18:10:29Z",
    "body": "The following code fails to fire a change event on unset, but I would expect it to do so:\n\n``` JavaScript\nvar myModel = new Backbone.Model;\nmyModel.on(\"change\", function () {\n  alert(\"Listener notified!\"); // never called\n});\nmyModel.set(\"myAttribute\", \"some value\", {silent: true});\nmyModel.unset(\"myAttribute\"); // <-- does not trigger \"change,\" but it should\n```\n\nThe change event is triggered as expected on `unset` in Backbone 0.5.3, but not in 0.9.0 or 0.9.1.\n\nI am aware that Backbone 0.9 made triggering change events stricter than previous versions, but it seems like changing an attribute should **always** trigger a change event if `silent: true` is not passed to the method. The way that the attribute was previously set should not affect whether the current method call triggers a change event.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/946",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/946/comments",
    "title": "Change event doesn't happen in some cases",
    "created_at": "2012-02-03T11:51:32Z",
    "updated_at": "2012-02-03T15:06:15Z",
    "body": "The new version of Backbone doesn't detect a change when something has been changed back to default if it has only been changed silently.\n\n``` javascript\nwindow.onload = function() {\n    var Test = Backbone.Model.extend({\n        defaults: {\n            testValue: 0\n        },\n\n        initialize: function() {\n            this.on('change:testValue', function() {\n                console.log('got testValue change');\n                console.log('new value:', this.get('testValue'));\n            });\n        },\n\n        setTestValueLoudly: function() {\n            this.set({testValue: 0});\n        }\n    });\n\n    var test = new Test();\n    console.log('setting testValue to 5 silently');\n    test.set({testValue: 5}, {silent: true});\n    console.log('setting testValue to 0 loudly');\n    test.setTestValueLoudly();\n}\n```\n\nI was expecting (and believe this to be the case for 0.5.x as I now have test cases that are failing) that calling set should trigger a change event if silent is not set to true. However, if you set something silently, and change it back to a default value it does not call change:attr or even change.\n\nI believe this is a bug as the same does not happen with previous versions of the framework. This is the case for Backbone 0.9.0 and 0.9.1 (tested today).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/945",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/945/comments",
    "title": "Backbone.History.checkUrl: URI malformed error",
    "created_at": "2012-02-03T10:59:35Z",
    "updated_at": "2012-02-21T17:06:03Z",
    "body": "I am having a similar issue to issue #868... \n#### How to Reproduce:\n1. Go to url:  /search?q=foo%25     (notice url is encoded - used encodeURI or encodeURIComponent)\n2. Backbone successfully handles the above URL\n3. Go to another url e.g.   /search?q=bar\n4. JS Error: Uncaught URIError: URI malformed in checkUrl\n#### My Understanding:\n\nthis.fragment stores the current url which is retrieved by using the function getFragment(). This function makes use of decodeURIComponent. \n\nTherefore, after hitting the url:  /search?q=foo%25   \n\n```\nthis.fragment => /search?q=foo%\n```\n\nThe expected page loads fine. Now, hit the url:    /search?q=bar\n\nThe function checkUrl now compares the new url with the old one (this.fragment):\n\n```\nif (current == this.fragment || current == decodeURIComponent(this.fragment)) return false;\n```\n\nNotice \"decodeURIComponent(this.fragment)\"... this is throwing the \"URIError: URI malformed\" error. This is because this.fragment has already been decoded! \n\nI believe that the fix @chexov submitted will resolve this and request that it is pulled onto the main branch.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/944",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/944/comments",
    "title": "Just like 'set' has {silent:true}, add a {force:true} option",
    "created_at": "2012-02-03T10:58:04Z",
    "updated_at": "2015-07-08T00:16:01Z",
    "body": "In our current project we are more than once running into the situation where a value is set, but the value is identical to the previous value. This makes the chain of events come to a halt.\nThis happens for example when calling a server with a second search query, which also has zero results. So the first time you have zero results, it could trigger some user feedback, but the second time, it won't work.\nOf course it is possible to set the value twice, passing a random value first, with the silent parameter, and the second time the real results.\nBut a way to force the Event would be much more elegant and in line with the {silent:true} functionality.\n\nThank you for any feedback on this!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/943",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/943/comments",
    "title": "Model prototype missing after clone() in combination with bindAll(this).",
    "created_at": "2012-02-03T08:39:51Z",
    "updated_at": "2012-02-03T14:15:55Z",
    "body": "The model's prototype (or something like that) is missing after `model.clone()` when Backbone is used in conjunction with the Prototype library.\n\n**Platform**\nWindows 7\nChrome 16.0.912.77 m _and_ Firefox 9.0.1.\n\n**Example**\nhttp://jsfiddle.net/KhCVd/4/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/939",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/939/comments",
    "title": "save's error handler is not receiving the model",
    "created_at": "2012-02-02T22:04:22Z",
    "updated_at": "2012-02-02T22:11:29Z",
    "body": "Error handlers are being passed the response twice instead of the model and the response. Here's a self-contained example in CS:\n\n```\nclass Thing extends Backbone.Model\n  url: \"/thing\"\n\nthing = new Thing\n\nthing.save {}, error: (thing, response) ->\n  console.log \"thing is the response\" if thing == response\n  console.log \"thing: #{JSON.stringify thing}\"\n```\n\nIn 0.5.3, the handler would receive the model and response, but in 0.9.0 it's receiving two references to the response.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/938",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/938/comments",
    "title": "Can't use DOM manipulation library not defined on window.",
    "created_at": "2012-02-02T20:45:20Z",
    "updated_at": "2012-02-02T22:42:56Z",
    "body": "It would be convenient to be able to use Backbone with multiple versions of jQuery or other libraries that are used for DOM manipulation. Currently Backbone only supports libraries defined as window.{jQuery, Zepto, ember, $} at time that backbone.js is loaded, with no ability to explicitly override the library used at runtime.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/937",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/937/comments",
    "title": "submit event not working on prod version",
    "created_at": "2012-02-02T18:45:29Z",
    "updated_at": "2012-02-02T18:52:39Z",
    "body": "I'm currently working on a project using Backbone for which I want to bind the submit event of a form (instead of attaching an event to the click on the submit button or an Enter keypress). Doing 'submit #form': 'someFunction' works perfect on the Dev version (0.9.0) but when I switch to the prod version this won't work at all. However, if I handle click and keypress events works just fine, even with the Prod version, this issue is just happening with the minified file.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/935",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/935/comments",
    "title": "`sync` event doesn't fired on collection when model was destroyed",
    "created_at": "2012-02-02T15:46:48Z",
    "updated_at": "2015-07-14T20:22:32Z",
    "body": "It will be good to get `sync` event on collection after model was removed from collection AND synced with server.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/934",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/934/comments",
    "title": "setElement is not setting element",
    "created_at": "2012-02-02T14:35:58Z",
    "updated_at": "2012-02-02T14:48:19Z",
    "body": "in 0.5 I was setting manually this.el for my popups, with 0.9 it doe snot work, from the changelog I should use setElement,\n\n in my test \n\n  this.setElement = $(\".dialogForm\")[0];   // I also tried with $(\".dialogForm\")\n  console.log($(\".dialogForm\"))                // dialog div\n  console.log(this.$el)                                // old view element div\n\nThis is hapenning in my render method\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/931",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/931/comments",
    "title": "Model prototype missing after clone() in combination with bindAll(this).",
    "created_at": "2012-02-02T13:15:49Z",
    "updated_at": "2012-02-02T14:13:32Z",
    "body": "I've got a case where the model's prototype (or something like that) is missing after `model.clone()`.\n\n**Platform**\nWindows 7\nChrome 16.0.912.77 m _and_ Firefox 9.0.1.\n\n**Example**\n\n``` javascript\nvar A = Backbone.Model.extend({\n    initialize: function () { _.bindAll(this); },\n    hello: function () { console.log(\"Hello, world!\"); }\n});\nvar B = A.extend({\n    initialize: function () { _.bindAll(this); }\n});\n\n// TypeError: Object [object Object] has no method 'hello'\nnew B().clone().hello();\n```\n\nIf one doesn't `bindAll()` in B's `initialize`, the problem goes away.\n\nWhile writing this report I feel that `B#initialize()`'s `bindAll()` messes up `B#clone()`. Replacing `bindAll()` with specific `bind()`s seems to be a solution. Still, maybe this should still be fixed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/930",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/930/comments",
    "title": "Exception thrown when calling model.fetch() second time.",
    "created_at": "2012-02-02T10:41:22Z",
    "updated_at": "2012-02-02T12:23:35Z",
    "body": "## Description\n\nWhen fetching a simple Backbone Model a second time an error is thrown, this has been a issue since 0.9.0\n## Example\n\nse.backbone.models.Account = Backbone.Model.extend({\n    'url' : '/api/account'\n});\n\nvar account = new se.backbone.models.Account();\naccount.fetch();\naccount.fetch();\n## Errors\n\nGoogle Chrome Stacktrace\nUncaught TypeError: Object function (obj) { return new wrapper(obj); } has no method 'has'\n\nFirefox error:\n_.has is not a function @ http://localhost/a2/js/backbone-min.js:246\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/928",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/928/comments",
    "title": "Model.save seems broken when used with option wait=true",
    "created_at": "2012-02-02T08:29:59Z",
    "updated_at": "2012-02-02T14:10:39Z",
    "body": "When I do:\n\n```\nfoobar = new Foobar({ name: \"1\"})\nfoobar.save({ name: \"2\" }, { wait: true })\n```\n\n...model's `save()` correctly calls `_validates` instead of `set`:\n\n```\n  if (attrs && !this[options.wait ? '_validate' : 'set'](attrs, options)) return false;\n  var model = this;\n  ...\n```\n\n...but then calls `sync()` with the original `model`:\n\n```\n  return (this.sync || Backbone.sync).call(this, method, this, options);\n```\n\n...so what gets saved is `name` = \"1\", not \"2\" as I expected. Or maybe that's the intended behavior?!\n\nIt seems like you'd need to clone `model`, then `model.set(attrs)`, then `sync()`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/927",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/927/comments",
    "title": "change event not fired consistently when setting a value that was previously set silently",
    "created_at": "2012-02-02T03:35:50Z",
    "updated_at": "2012-02-02T04:36:59Z",
    "body": "http://jsfiddle.net/kmiyashiro/mEhWC/1/\n1. Set a property on a model to a value. (Change event fires)\n2. Set the property to a different value using {silent: true} (No change event)\n3. Set the property to the same value as step 1. (No change event) **<--- Not as expected**\n\nThis is definitely a change since 0.5.3 since my navigation no longer works and relied on change event firing consistently no matter what the previous value was. However, even if you suppress change events that set a value to the existing value, I would still consider this a bug since step 3 is indeed changing the value to something different than it is currently set to.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/926",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/926/comments",
    "title": "Need more guidance with nested models and localstorage",
    "created_at": "2012-02-02T01:47:39Z",
    "updated_at": "2012-02-08T22:16:13Z",
    "body": "I know there are many issues and forum threads on this issue already, but I just need a little more guidance.  There seem to be a variety of approaches but I keep hitting roadblocks with each one, and I haven't found yet a complete example that uses nested models and collections along with localstorage.\n\nI am trying to create a simple app that has Project models and Task Models.  Each Project can have more than one Task, and there can be more than one Project.  Additionally, I will eventually need Tasks to potentially contain other tasks, but I can leave that aside for now.\n\nIf anyone can provide a full working (simple) example for any of the approaches that are out there it would go a long way at helping newbs like me.  Most approaches, like the example in the FAQ and backbone-relational all rely, at some point, on having a collection embedded in a model in some way, and they set the url on that collection to retrieve the right models.  This doesn't seem to play nicely with localstorage.\n\nAdditionally, the FAQ example does something like this:\n\n``` javascript\nvar Mailbox = Backbone.Model.extend({\n\n  initialize: function() {\n    this.messages = new Messages;\n    this.messages.url = '/mailbox/' + this.id + '/messages';\n    this.messages.on(\"reset\", this.updateCounts);\n  },\n\n  ...\n\n});\n\nvar Inbox = new Mailbox;\n\n// And then, when the Inbox is opened:\n\nInbox.messages.fetch();\n```\n\nSo, instead of setting the collection URL, I initially tried to create a new Store with a custom name like 'taskStore-projectid'.  That mirrors the example where it sets the collection url to something with 'this.id' in it.  First, I had trouble figuring out if I could create the collection store in my model initialize function, or would I need to pass the id to the collection initialize function and have it create the store.  Next, I discovered, that in my model initialize function, 'this.id' is still undefined.  I _think_ this is because in the example, the Mailbox is created with 'var Inbox= new Mailbox', and in my app, the Mailbox equivalent (Project for me) is created from my Mailbox(Project) Collections 'create' function.  \n\nBut I don't know.  I just am too new to backbone to know.  Heck, I don't even know if it will work to create the store that way even if I just gave it a random string.  Plus, I'm not relishing the idea of having a giant list of stores like that, as it seems horribly un-normalized.\n\nThe backbone-relational approach seems good too, but it also hinges on setting a url parameter that is meant to only return the proper models, so I have the same issue there.\n\nThe FAQ goes on to list a few other approaches like:\n- Mirror an SQL database's structure, or the structure of a NoSQL database.\n- Use models with arrays of \"foreign key\" ids, and join to top level collections (a-la tables).\n- For associations that are numerous, use a range of ids instead of an explicit list.\n- Avoid ids, and use direct references, creating a partial object graph representing your data set.\n- Lazily load joined models from the server, or lazily deserialize nested models from JSON documents.\n\nSome of which sound good, and some sound pretty similar to each other, but none of which have some good examples.  I'd love to see some of those bullet points fleshed out.\n\nI guess, ideally, I'd like something that allowed me to use just two stores, one for projects and one for tasks, and a performant way to easily get the tasks for each project, and still be able to leverage collections and all they bring.  \n\nI know I could work around this by setting a project id in each task model, like the 'foreign key' approach above, but is that going to cause any other issues?  Is it backboney enough?\n\nanyway, thanks for letting me vent a bit.  Any help will be appreciated. ;-) \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/924",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/924/comments",
    "title": "Previous Attributes behaviour confusing or incorrect.",
    "created_at": "2012-02-01T19:56:50Z",
    "updated_at": "2012-02-01T20:46:11Z",
    "body": "I am not sure if this is as-designed but, to me, this behaviour seems very confusing.\n\nGiven this node.js application:\nhttps://gist.github.com/1718943#\n\nI would expect hasChanged() to be true and previousAttributes to be { var1: 'a' }.  Tracing through the code I could see hasChanged() returning false as an artefact of the transition from client to server-side.\n\nBut the previousAttributes() doesn't make much sense to me.  I see where it gets set (model.change(), after all change events have fired it sets previousAttributes to current attributes).  But client or server it seems to me that previousAttributes should always be the previous attributes.  Each set would update their state as a whole.  The way the code is right now previousAttributes, save a small window during change events, are always the current attributes.\n\nShouldn't previous attributes be the last attribute-set always?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/923",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/923/comments",
    "title": "Should View constructor options.el support jQuery object?",
    "created_at": "2012-02-01T14:30:38Z",
    "updated_at": "2012-02-01T20:26:50Z",
    "body": "When doing `new MyView({el:$(\"#myID\")})` the instance will end up having both this.el and this.$el being jQuery objects. `options.el` should handle both native DOM elements and jQuery/Zepto objects and set `el` and `$el` properly as does View.setElement.\n\nAnother interesting side-effect is that setting this.el to jQuery object will silently work when not using any native DOM methods on it. This might even be a feature that makes this.$el unnecessary when used consistently. (Note: backbone itself does not use any native DOM methods on this.el.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/921",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/921/comments",
    "title": "spine.js within windows environment",
    "created_at": "2012-02-01T08:50:26Z",
    "updated_at": "2012-02-01T08:56:06Z",
    "body": "Hi - I'm running a Windows XP machine and have successfully installed node.js, spine, spine.app and hem. After havin called **spine app myApp** I have received following error:\n\n```\nD:\\workspace>spine app MyInventory\nnode.js:201\n    throw e; // process.nextTick error, or 'error' event on first tick\n        ^\nError: EEXIST, file already exists 'D:\\workspace'\n    at Object.mkdirSync (fs.js:373:18)\n    at C:\\Documents and Settings\\galdo\\Application Data\\npm\\node_modules\\spine.app\\src\\mkdirp.coffee:16:19\n    at Template.write (C:\\Documents and Settings\\galdo\\Application Data\\npm\\node_modules\\spine.app\\src\\template.coffee:51:7)\n    at Object.<anonymous> (C:\\Documents and Settings\\galdo\\Application Data\\npm\\node_modules\\spine.app\\bin\\spine:45:34)\n    at Object.<anonymous> (C:\\Documents and Settings\\galdo\\Application Data\\npm\\node_modules\\spine.app\\bin\\spine:100:21)\n    at Module._compile (module.js:444:26)\n    at Object..js (module.js:462:10)\n    at Module.load (module.js:351:31)\n    at Function._load (module.js:310:12)\n    at Array.0 (module.js:482:10)\n```\n\nThe same for **spine controllers** or **spine models**\n\nThanks and regards\nGaldo\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/919",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/919/comments",
    "title": "model 'forgets' it has changed when passing { silent:true }",
    "created_at": "2012-02-01T00:00:16Z",
    "updated_at": "2012-02-01T13:54:11Z",
    "body": "This is happening only in Backbone 0.9.\n\nImagine we have a model with a boolean property set to false. If we change it to 'true' - the 'change' event fires (this is correct). If we then change it to false with { silent : true } the change event doesn't fire (this is also correct). \n\nHowever if we then change it back to true the change event does not fire? This seems like a bug to me?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/917",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/917/comments",
    "title": "\"Can't create an invalid model\"",
    "created_at": "2012-01-31T22:28:44Z",
    "updated_at": "2012-07-10T20:56:53Z",
    "body": "Version 0.9.0 introduced a new feature that disallows creating models that do not pass validation.  This seems to limit the ability to use models as dynamic containers of information.  If you have validation rules that specify what a valid model is, it seems the model must now always conform to those rules.  If you can only store valid models, you can't keep invalid information available for redisplay to a user so they can edit or correct it.  If information comes from the server that is invalid, creating the model would just fail.  (I believe this is the case, though have not tested the server scenario.)\n\nWhen the new model is created and it fails validation, there is no way to find out why the model creation failed because an Error is thrown instead of an error event being fired.\n\nThe functionality in 0.5.3 had validate() running only at what seemed logical points in the model's lifecycle.  This was on set() (unless you set the 'silent' flag) and on save().  You were able to more easily manage when validation would run.\n\nThe way Rails handles models is that validation only occurs at certain, specific times, and those can general be overridden.  You can create and empty model for use in a \"new\" form, etc.  I think this is closer to the expectations most folks have for the way models should work.\n\nThe way 0.9.0 works seems limiting.  (I'm sure there are other aspects I'm leaving out, but I wanted to get the discussion rolling.)  Hopefully someone can point out the flaws in my argument, and we can discuss what the validation for models should look like.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/916",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/916/comments",
    "title": "How to catch \"Can't add the same model to a collection twice\" error in collection.fetch()?",
    "created_at": "2012-01-31T19:23:54Z",
    "updated_at": "2012-04-12T00:08:53Z",
    "body": "I'm building an app where models lazy load related models when needed. I'm upgrading to 0.9 today and I've run into a problem where multiple models are loading models all at once. Some models are being loaded twice which triggers the above error.\n\nMy question is how do I catch it? I've commented the error out for now.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/914",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/914/comments",
    "title": "Is passing all attributes instead of the delta to validate really a good option?",
    "created_at": "2012-01-31T17:41:25Z",
    "updated_at": "2013-06-10T12:12:15Z",
    "body": "According to [this commit](https://github.com/documentcloud/backbone/commit/ab164c450da4d5c883d5b2b2817fa6a416a4b55a) the `validate` method now receives the computed new state of the attrs, not just the delta.\n\nWhat this means is that there are no longer any way of knowing which attributes that has changed while performing validation, if I haven't missed something that is.\n\nThis is a problem when validating form input while the user is filling out the form. You usually do not want to validate form elements that has not been changed yet, but notify the user about errors on elements that has changed.\n\nMaybe @jashkenas can comment on this? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/913",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/913/comments",
    "title": "deleting and re-inserting view.el into dom",
    "created_at": "2012-01-31T16:18:30Z",
    "updated_at": "2012-01-31T16:25:44Z",
    "body": "I have an element with event bindings. I insert them into the dom. After insertion I delete the parent element in the DOM.\n\nLater on when I reinsert the element into the DOM the event bindings are lost.\n\nI have to use this.delegateEvents() to get them back. I expected that the events bound would still hold even if the element was removed from the dom. What am I misunderstanding?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/912",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/912/comments",
    "title": "\"silent: true\" is overloaded for set",
    "created_at": "2012-01-31T16:05:04Z",
    "updated_at": "2012-01-31T16:09:34Z",
    "body": "There is a change in how the 'change' event is detected for the set() function. Setting a property with 'silent: true' and then setting that property back to the original value without 'silent: true' will not trigger the change event.\n\nThis is because when silent is true, the _previousAttributes object is not changed (same as in 0.5.3), but now set() does its checks against that object.\n\nThis code is in a jsfiddle at http://jsfiddle.net/kGfBM/2/\n\n``` javascript\nvar Model = Backbone.Model.extend({\n  initialize: function() {\n    this.bind('change:name', this.change);\n  },\n\n  change: function(model, name) {\n    console.log(model);\n    console.log(name);\n    console.log(\"Changed name from \" + this.previous(\"name\") + \" to \" + this.get('name'));\n  }\n});\n\nvar model = new Model({ name: 'name1' });\nmodel.set({ name: 'name2' }, { silent: true });\nmodel.set({ name: 'name1' });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/905",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/905/comments",
    "title": "Backbone.history.start documentation",
    "created_at": "2012-01-30T23:52:15Z",
    "updated_at": "2012-11-14T19:12:26Z",
    "body": "From the docs for Backbone.history.start:\n\n\"If your application is not being served from the root url / of your domain, be sure to tell History where the root really is, as an option: Backbone.history.start({pushState: true, root: \"/public/search/\"})\"\n\nroot should be set to 'public/search/' (no leading '/')\nThe leading '/' seemed to work in older versions of backbone but when I upgraded to 0.9.0 today it stopped working.\n\nThanks,\nJeff\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/904",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/904/comments",
    "title": "Model.save no longer passes the model to the error callback",
    "created_at": "2012-01-30T23:44:44Z",
    "updated_at": "2012-02-02T21:02:52Z",
    "body": "When `Model.save` is given an error callback, that callback is not receiving the model in its arguments. Instead, it receives the response object twice.\n\n```\nmodel.save({}, {\n  error: function(model, response) {\n    // model === response\n  }\n);\n```\n\nThis appears to have been broken by the combination of afc2d99b4632aca90f5c8d779541a0c655e621de and 18be7107c7413d921e948df64b87558ce0fc0648.\n\nPresumably, this just needs `originalModel` to be passed to the callback instead of `model`. @joneath and I couldn't figure out a good way to test this, though, as the test suite is overwriting `$.ajax` in a way that never actually calls the error callback.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/900",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/900/comments",
    "title": "Bind multiple actions to one route",
    "created_at": "2012-01-30T15:06:08Z",
    "updated_at": "2012-01-30T15:14:42Z",
    "body": "Backbone registers all routes, but calls only last handler. It can be fixed if override Backbone.History.prototype.loadUrl method:\n\n```\nBackbone.History.prototype.loadUrl = function (fragment) {\n    this.fragment = this.getFragment(fragment);\n\n    return !_.chain(this.handlers).filter(function (handler) {\n        return handler.route.test(this.fragment);\n    }, this).each(function (handler) {\n        handler.callback(this.fragment);\n    }, this).isEmpty();\n};\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/899",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/899/comments",
    "title": "Initial page load route not triggered",
    "created_at": "2012-01-29T20:54:59Z",
    "updated_at": "2012-01-30T14:24:27Z",
    "body": "I'm trying to get a grip on Backbone and the one thing that confuses me are the routes.\n\nWith the following code:\n\n```\nvar Router = Backbone.Router.extend({\n    routes: {\n        'index.html': 'hello',\n    },\n\n    hello: function() {\n\n        alert('hello');\n    },\n});\n\nvar router = new Router;\n\nBackbone.history.start({\n    pushState: true,\n    root: '/app/',\n});\n```\n\nShouldn't the hello function get triggered if I go to `http://localhost/app/index.html`?\nOr am I doing something wrong here?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/895",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/895/comments",
    "title": "Include View.setElement in documentation",
    "created_at": "2012-01-28T21:49:24Z",
    "updated_at": "2012-01-29T20:59:45Z",
    "body": "Currently, if `el` is set programmatically, event delegation will not work properly.  Take for example the following code:\n\n```\nthis.el = $(\"#id\")[0];\n```\n\n`View.delegateEvents` now works by acting on `this.$el` (https://github.com/documentcloud/backbone/blob/master/backbone.js#L1067-1069), but this can't be seen without digging a little bit into the code.  Either the documentation should specify that `this.$el` also needs to be set in addition to `this.el`, or it should indicate that `View.setElement` should be used.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/894",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/894/comments",
    "title": "What's the plan for a new tagged release (0.5.4/0.6/1.0)?",
    "created_at": "2012-01-28T19:40:23Z",
    "updated_at": "2012-01-29T13:55:39Z",
    "body": "It's been a long time since 0.5.3 (which is what I'm using in production), and there are a few things piling up in the master branch that I'd like to use. Is there a plan for a new release anytime soon? I can't find anything about a roadmap anywhere?\n\nOr are most people just running the master branch in production anyway?\n\n(edit: I hope that doesn't sound ungrateful - just excited to use the latest and greatest!)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/891",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/891/comments",
    "title": "Query parameters are confusing the router",
    "created_at": "2012-01-25T21:10:06Z",
    "updated_at": "2015-12-17T02:44:52Z",
    "body": "It is not currently possible to use Google Analytics with backbone controlled routes, as the backbone router does not understand query parameters. If I have the routes:\n\n``` javascript\nroutes: {\n    \"\": \"index\",\n    \":username\": \"profile\",\n}\n```\n\nthen try to route to `martyn?utm_source=google&utm_medium=ppc&utm_term=testing`, the profile route fires but the username passed is `martyn?utm_source=google&utm_medium=ppc&utm_term=testing` rather then `martyn`.\n\nI saw the discussion on #668. I don't need query parameter support per se, but it would be nice if backbone could be told to ignore query parameters.\n\nFor now I've done (in my own code):\n\n``` javascript\n(function(old) {\n    Backbone.History.prototype.getFragment = function() {\n        return old.apply(this, arguments).replace(/\\?.*/, '');\n    };\n})(Backbone.History.prototype.getFragment);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/890",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/890/comments",
    "title": "l variable in remove method is at global scope",
    "created_at": "2012-01-25T07:20:12Z",
    "updated_at": "2012-01-25T15:25:15Z",
    "body": "The l variable in the remove method (line #513) is not declared with the var keyword, and is therefore at global scope. This causes problems if the triggering of the remove events causes other calls into the remove method.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/889",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/889/comments",
    "title": "Enhance the way we reference a view's sub-element",
    "created_at": "2012-01-24T21:37:00Z",
    "updated_at": "2012-01-25T15:26:21Z",
    "body": "This is just a proposal for a common situation I am while working in a backbone project. \n\nIt is common for me to access my views' sub-elements many times. Here I put a simple example:\n\n``` javascript\nvar myView = Backbone.View.extend({\n  el: '#myDiv',\n\n  hideButton: function() {\n    this.$('#myButton').hide();\n  },\n\n  showButton: function() {\n    this.$('#myButton').show();    \n  }\n});\n```\n\nThis works fine, but if the button id changes in the future, then I have to change that id in to places in my view (a real project will demand even more changes). So what I always end up doing is something like this:\n\n``` javascript\nvar myView = Backbone.View.extend({\n  el: '#myDiv',\n\n  _initialize_elements: function() {\n     this.elements = {\n        myButton: this.$('#myButton')\n     };\n  },\n\n  initialize: function() {\n    this._initialize_elements();\n  },\n\n  hideButton: function() {\n    this.elements.myButton.hide();\n  },\n\n  showButton: function() {\n    this.elements.myButton.show();    \n  }\n});\n```\n\nFor me this approach is fine, but I don't like to manually initialize every view every single time to store the jQuery reference to each of my view's sub-elements, and also is very easy to forget to do it.\n\nI think the best approach would be for a Backbone view to have an `elements` object that works in a similar way than the `events` object.\n\nE.g.:\n\n``` javascript\nvar myView = Backbone.View.extend({\n  el: '#myDiv',\n\n  elements: {\n    myButton : '#myButton'\n  },\n\n  hideButton: function() {\n    this.elements.myButton.hide();\n  },\n\n  showButton: function() {\n    this.elements.myButton.show();    \n  }\n});\n```\n\nThen, before the `delegateEvents` function is called in Backbone.View constructor, we can replace the value of each `elements` key a jQuery object. I will request for a pull request soon. I would love to hear your comments. \n\n(Please note that this would be useful just in the cases where the HTML elements existed before the view instantiation)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/888",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/888/comments",
    "title": "Removal of \"_add\" and \"_remove\"",
    "created_at": "2012-01-24T16:56:19Z",
    "updated_at": "2012-01-24T19:55:28Z",
    "body": "I'd like to discuss the removal of `Collection._add` and `Collection._remove`. I realize these methods were not part of the \"public\" API of course, but they were quite useful nonetheless.\n\nThese methods exposed functionality that is not otherwise available in Backbone, and were therefore very useful as hook points for extensions (not least of all for me in Backbone-relational). Both of these took a single snippet of data (either a model, or an object that might contain an `id` somewhere... or not) and return the model operated upon. Since both `add` and `remove` simply return the complete collection, they can not be used to determine this, especially when passing in JSON.\n\nI have a sort-of-working workaround for Backbone-relational (using `_.clone(this.models)` before adding, then calling `add`, using `_.difference( this.models, clone )` afterwards and iterating over the diff), but this is quite a performance penalty when compared to the current situation. Especially considering many people use relational  exactly because it automates the handling of a very large amount of models, and this whole process is repeated for every single addition.\n\nAny chance these two could be re-instated?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/885",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/885/comments",
    "title": "Configurable window for history management",
    "created_at": "2012-01-23T17:21:40Z",
    "updated_at": "2012-01-23T17:35:11Z",
    "body": "For third-party Javascript-providers, it's useful to load the javascript in a sandboxed iframe. \n\nFor example, [LightningJS](http://lightningjs.com/) does this.\n\nHowever, doing so breaks the history management, because `History` and `Router` assume they're running in the (only) window.\n\nI've started a branch to support this, by making `history.start()` take an optional `window`-argument --- https://github.com/alexbr/backbone/compare/master...window-option \n\nI haven't tested it in old IEs yet, and there's a Zepto-TODO, but if the approach seems okay, I'll fix that and ready a pull-request. :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/884",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/884/comments",
    "title": "I made a Kindle edition of the web documentation",
    "created_at": "2012-01-23T13:21:58Z",
    "updated_at": "2012-01-25T14:00:55Z",
    "body": "https://github.com/danchoi/kindlefodder\n\nIt's under \"Frontend Docs Bundle\". I hope it's useful. Cheers, Dan\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/882",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/882/comments",
    "title": "Take another run through with Ember.js",
    "created_at": "2012-01-22T18:21:25Z",
    "updated_at": "2012-01-24T23:43:21Z",
    "body": "Before we do a 0.9.0 release, it's been a while since the last time we took a dive into what SproutCore/Amber/Ember/Data.js was up to, and if there's anything worth borrowing. Let's be sure to take another run through ... and if you have a personal favorite feature which you think would benefit Backbone, this thread would be the ideal place to mention it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/880",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/880/comments",
    "title": "Lost model data if one of the model's keys is named \"attributes\"",
    "created_at": "2012-01-20T18:13:55Z",
    "updated_at": "2012-01-20T18:24:37Z",
    "body": "If, when using `fetch()' to populate a model, the response's json contains its own \"attributes\" key, Backbone's internal \"attributes\" key is overwritten with it. This causes any other keys in the json response to not get stored in the model.\n\nObserved:\nmodel.fetch(...);  // <-- ajax response returns { \"key1\":\"value1\", \"attributes\": { \"attribute1\": \"attributevalue1\" } }\nconsole.log(model.attributes);  // Yields { \"attribute1\": \"attributevalue1\" }\n\nExpected:\nEither the 2nd line in the snippet above should yield: { \"key1\":\"value1\", \"attributes\": { \"attribute1\": \"attributevalue1\" } }\nOr, an exception is thrown or error produced citing the naming collision.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/878",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/878/comments",
    "title": "Play buttons do not appear in tutorial for IE9",
    "created_at": "2012-01-20T00:38:31Z",
    "updated_at": "2012-01-22T18:04:27Z",
    "body": "Repro steps:\n1. Launch [tutorial](http://documentcloud.github.com/backbone/) in IE9\n2. Scroll down to a \"playable\" snippet, e.g. the first one under Backbon.Events\n\nExpected:\nPlay button appears. Clicking it plays the demo.\n\nObserved:\nNo play button appears.\n\nNote that setting the page to IE8 mode resolves the issue.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/877",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/877/comments",
    "title": "Create Backbone views with jQuery syntax",
    "created_at": "2012-01-19T17:57:19Z",
    "updated_at": "2012-02-11T18:15:01Z",
    "body": "The following snippet lets you create Backbone views with jQuery syntax e.g. `$('.slideshow').slideshow(options)`\n\nCould something like this be rolled in to Backbone?\n### Example (coffeescript):\n\n``` coffeescript\n\nclass window.Slideshow extends Backbone.View\n\n  initialize: (options) ->\n    console.log 'Slideshow#initialize'\n    console.log $(@el)\n\n##\n# Plugin definition\n# \n\n$.fn.slideshow = (options) ->\n  options ||= {}\n  slideshow = @data('slideshow')\n  if (!slideshow)\n    @each (idx, el) ->\n      options.el = el\n      $(el).data('slideshow', new Slideshow(options))\n\n```\n\nGist: https://gist.github.com/1641439\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/876",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/876/comments",
    "title": "missing docs on the internal usage of View.collection and View.model",
    "created_at": "2012-01-19T16:03:46Z",
    "updated_at": "2012-01-21T17:38:57Z",
    "body": "I'm just learning Backbone, and found that the `model` and `collection` options are handled in special ways by Views, but no further information is available at all what _special_ means. May I ask someone to give some info on this?\n\nWhat I've found is that we are supposed to initialize a view with `new MyView({model: myModel})` and we reference this in rendering like `mytemplate( this.model.toJSON() )`. Is there any other, internal usage for models? Is there anything at all for collections?\n\nthanks for your answers\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/874",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/874/comments",
    "title": "Router.initializeRoute",
    "created_at": "2012-01-19T08:49:56Z",
    "updated_at": "2012-01-20T19:59:59Z",
    "body": "I want to implement backbone.js authentication. I expected to see function like `initializeRoute` that would allow to write code like this:\n\n``` coffeescript\nclass MainRouter extends Backbone.Router\n  initializeRoute: (fragment) ->\n    # Proceed if user is authenticated\n    # otherwise redirect to login page.\n    if app.account.authenticated()\n      super fragment\n    else\n      super 'login'\n```\n\nbut I didn't found it. Is there any backbone-way to do it? If not, I can submit a pull request for this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/871",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/871/comments",
    "title": "Set-method in Backbone.Model fails for response objects with \"attributes\" property",
    "created_at": "2012-01-18T17:27:15Z",
    "updated_at": "2012-01-19T04:09:56Z",
    "body": "Our fix looks like this:\n\n``` javascript\n\nBackbone.Model.prototype.set = function(attrs, options) {\n        // Extract attributes and options.\n        options || (options = {});\n        if (!attrs) return this;\n\n        // Removed this eval line, which causes data which will have a property attributes to get lost\n        // if (attrs.attributes) attrs = attrs.attributes;\n\n        // better do it the following way\n        if (attrs instanceof Backbone.Model) {\n            attrs = attrs.attributes;\n        }\n\n        ...\n    };\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/870",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/870/comments",
    "title": "model.set: validate only when silent = false, why?",
    "created_at": "2012-01-18T13:15:25Z",
    "updated_at": "2013-06-05T01:46:56Z",
    "body": "Hello!\nWith model.set I want to change my model, but I do not want events triggered, so I call \"model.set\" with silent=true.\nBut with this the validate function is not called.\nWhy?\nThanks alot\nWolfgang\n\ncurrent Backbone.js source code (0.5.3)\n(    set : function(key, value, options) {\n      ...\n      // Run validation.\n      if (!options.silent && this.validate && !this._performValidation(attrs, options)) return false;)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/868",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/868/comments",
    "title": "Backbone.History.checkUrl: URI malformed error",
    "created_at": "2012-01-18T10:43:02Z",
    "updated_at": "2012-02-21T17:05:13Z",
    "body": "If URI has special symbol \"%\" checkUrl throws URIError exception\n\nHow to reproduce:\n1. Hook Backbone Router to /search?q=fat 30%\n2. Change URL to any other.\n3. Got \"Uncaught URIError: URI malformed in checkUrl\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/864",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/864/comments",
    "title": "Should isNew() use this[this.idAttribute] instead of this.id?",
    "created_at": "2012-01-18T01:35:33Z",
    "updated_at": "2012-01-18T02:51:38Z",
    "body": "Just starting backbone here.  I noticed the \"this.idAttribute\" and am wondering if isNew() should check this[this.idAttribute]?  It's currently hardcoded to check this.id.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/861",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/861/comments",
    "title": "Failure in collection while adding models which does not pass validation",
    "created_at": "2012-01-17T15:27:12Z",
    "updated_at": "2012-01-17T15:54:29Z",
    "body": "Hello,\n\nSeems there is no check in collection.add method for the  case when _prepareModel returns false. When this happens, call to model.on raises an error.  However i don't know what should be the expected behavior, should it be silently ignored, or should it terminate as it is now.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/860",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/860/comments",
    "title": "_performValidation should be public",
    "created_at": "2012-01-16T17:47:23Z",
    "updated_at": "2012-01-17T19:50:35Z",
    "body": "It be nice to be able to manually invoke validation against a model without having to actually _set_ values. For example when binding to the \"blur\" event of a textbox, I'd like to trigger validation for the associated attribute in the model and without having to call `set` on the model. Obviously I can call this method, but I feel as though it is a hack with the prefixed underscore.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/855",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/855/comments",
    "title": "model.destroy don't send id in request header",
    "created_at": "2012-01-12T12:46:13Z",
    "updated_at": "2012-01-16T07:45:06Z",
    "body": "I use default behavior (REST) with PHP server\n\nI defined url for my model and everything is right with create and update.\n\nBut with delete method, ID is not send in the header like for others methods\n\nIn the source code, I find : \n\n```\nif (!params.data && model && (method == 'create' || method == 'update')) {\n  params.contentType = 'application/json';\n  params.data = JSON.stringify(model.toJSON());\n}\n```\n\nWhy dont include delete method ?\n\n```\nif (!params.data && model && (method == 'create' || method == 'update' || method == 'delete' )) {\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/849",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/849/comments",
    "title": "Routing issues created by (merged) Pull Request #599",
    "created_at": "2012-01-07T08:00:05Z",
    "updated_at": "2012-04-09T16:59:11Z",
    "body": "## Copying my comments from #599\n###### Issue 1 -- Breaks old routes\n\nThis needs to be documented somewhere because it breaks the Router from the current 0.5.3 release. In the currently available 0.5.3 release on the public Github pages site (documentcloud.github.com/backbone), calling `router.navigate('/search', true)` will match only the route `\"/search\"`. This change causes the only matched route to be `\"search\"` (no leading slash). \n\nI support this being the correct action, but it will break EVERY site's routing that used a leading slash. I discovered this because I was not using pushState and was routing all my paths as `abc.com/#/search` because it gave the path a nice structure with that leading fragment slash.\n###### Issue 2 -- Preventing re-routing to the same fragment\n\nA further complication introduced by this is that Backbone no longer knows if you are trying to route to the same page. Previously, if you tried to route to the same page, the Router would never receive the request. Now, it routes again. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/848",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/848/comments",
    "title": "Routing should be agnostic to leading and trailing slashes",
    "created_at": "2012-01-07T07:55:59Z",
    "updated_at": "2016-12-16T19:09:18Z",
    "body": "Currently, defining routes as `\"/search\"` is not equal to `\"search\"`, which is also not equal to `\"search/\"` or `\"/search/\"`. Backbone should consider all of these routes as equal, so that all routing is agnostic to the leading and trailing slashes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/844",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/844/comments",
    "title": "Size of an empty collection is 1",
    "created_at": "2012-01-06T14:52:52Z",
    "updated_at": "2012-12-21T12:33:48Z",
    "body": "using .length or .size(). \nThis is due to the fact that the models attribute already contains a model before any models are assigned to it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/843",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/843/comments",
    "title": "Error in documentation as in how views behave when models are updated?",
    "created_at": "2012-01-06T14:26:55Z",
    "updated_at": "2012-01-12T21:45:59Z",
    "body": "Hi,\n\nI'm relatively new to Backbone, so I'm actually turning to the docs a lot...\n\n> Whenever a UI action causes an attribute of a model to change, the model triggers a \"change\" event; all the Views that display the model's data are notified of the event, causing them to re-render. You don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually \u2014 when the model changes, the views simply update themselves.\n\nI think this part needs some work.\n\n> Whenever a UI action causes an attribute of a model to change, the model triggers a \"change\" event;\n\nThis is correct.\n\n>  all the Views that display the model's data are notified of the event, causing them to re-render. You don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually \u2014 when the model changes, the views simply update themselves.\n\nI think this is not.\nIf I understand Backbone correctly, achieving this would require something like\n\n```\nthis.model.bind('change', this.render, this);\n```\n\nand perhaps \n\n```\nthis.model.bind('destroy', this.remove, this);\n```\n\nin the view's initialize method.\n\nNote that I actually appreciate the loose (event-based) coupling. The documentation suggests some magic defaults or something, which I cannot find anywhere in the code.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/841",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/841/comments",
    "title": "Documentation error/bug/ for Backbone.View.make",
    "created_at": "2012-01-06T13:33:36Z",
    "updated_at": "2012-01-12T20:47:35Z",
    "body": "The documentation states the following code example regarding View.make:\n\n``` javascript\n\nvar view = new Backbone.View;\n\nvar el = view.make(\"b\", {className: \"bold\"}, \"Bold! \");\n\n$(\"#make-demo\").append(el);\n\n```\n\nHowever className is incorrect, it should state 'class'  in the example.\nThe source code comments is correct on this matter:\n\n``` javascript\n\n// For small amounts of DOM Elements, where a full-blown template isn't\n// needed, use **make** to manufacture elements, one at a time.\n//\n//     var el = this.make('li', {'class': 'row'}, this.model.escape('title'));\n//\n\n```\n\nUsing the code sample suggested in the documentation will produce the invalid markup:\n\n```\n<b classname=\"bold\">Bold! </b>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/839",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/839/comments",
    "title": "Overriding Default Methods",
    "created_at": "2012-01-05T17:08:30Z",
    "updated_at": "2012-01-11T21:17:59Z",
    "body": "When overriding methods native to Model such as set, save, or get. According to the documentation overriding does not require a return statement but in order for the code to work you must return this. Otherwise the code bombs.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/836",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/836/comments",
    "title": "Removing a duplicate from a list can cause `get(id)` to return `undefined`",
    "created_at": "2012-01-03T23:14:15Z",
    "updated_at": "2012-01-11T22:03:32Z",
    "body": "Specifically, hacking with `fetch` and removing adding/removing duplicate items to a List causes this problem.\n\nI did something funky and got `.get(id)` to improperly return `undefined` (non-randomly).\n\nHere\u2019s what was going on (steps to reproduce):\n1. Have a Collection (we\u2019ll call it 'List')\n2. Give it a method that does this: \n   - Takes a date range \n   - Calculates if any items in List are within that range, and saves them as `removeLater` \n   - Makes an ajax request for items within that range, by using `fetch` with some extra parameters (importantly, with `{add: true}`, and by passing a query for the range in question)\n   - On `success`, it removes the items in `removeLater` from List. (This prevents duplicates, and gets rid of any items that were deleted on the server, within that range.) Note however that by the time `success` fires, the data has already been parsed and added to the collection (this is why we pre-calculated `removeLater`.)\n   - Also note ranges can overlap, partially or completely or exactly, whatever\n3. Use this method twice, ensuring some overlap. (for testing purposes, consider that there are three groups items can fall into: Only in the first range, only in the second, or in both ranges. I only see the funky behavior in the last case.)\n\nWhat happens?\n\nWell, if you do a `filter()` or `toJSON()`, etc., on our Collection, it will return items (which I do want to be in the Collection!), that have IDs that result in an `undefined` if to `get`!\n\nThis only happens for items that were already in the collection, then removed on `success` of that `fetch` Ajax request.\n\n**So basically, it would seem that if you add an item to a Collection twice, then remove one of it, `get` breaks.** I haven\u2019t tested a general case of this yet, just within my above situation.\n\nAlso, it was fairly straightforward to work around this by using `$.ajax` directly and then `adding` in such a manner such as there are never duplicate objects.\n\n(Note, at first I posted this [as a comment on #708](https://github.com/documentcloud/backbone/issues/708#issuecomment-3266254).)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/833",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/833/comments",
    "title": "Non-GET Sync requests should default to 'application/json' content-type",
    "created_at": "2011-12-31T20:30:59Z",
    "updated_at": "2011-12-31T20:36:36Z",
    "body": "For consistency, all non-GET requests handled by Backbone.sync should use the 'application/json' content-type. Right now, Backbone does this for PUT and POST (i.e. 'create' and 'update') but not for DELETE ('destroy'). This is important as the developer may modify the DELETE request data to be non-null (either through options.data or using $.ajaxSend) and expect that they can pass in JSON data. \n\nAn example case of where this is applicable is when using Rails' authenticity token for non-GET requests to protect against forgery that modifies a user's data on the server.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/832",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/832/comments",
    "title": "Weird behaviour of Collection.without",
    "created_at": "2011-12-30T16:26:38Z",
    "updated_at": "2011-12-30T22:44:42Z",
    "body": "Hi,\n\nI noticed a weird behaviour for `without` method on collections with the following code.\n\n``` coffee\nremainingTerritories = allTerritories.without(territoriesToReject)\n```\n\nBoth `allTerritories` and `territoriesToReject` are `Territories` collections containing Territory objects, and some of these territories to reject come from the pool of territories, matching with `===`).\n`remainingTerritories` contains a regular Array containing all the Territory objects  no one is filtered out.\nI would expect to get all the territories minus the ones to reject.\n\nTo achieve my goal, I had to write:\n\n``` coffee\nremainingTerritories = new Territories(allTerritories.reject (t)-> territoriesToReject.include(t))\n```\n\nIt's not a big deal but I would be glad to know why, and if I can help fixing that if it's not the expected behaviour.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/830",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/830/comments",
    "title": "Callback vs event handler priority",
    "created_at": "2011-12-30T02:11:23Z",
    "updated_at": "2011-12-30T19:49:31Z",
    "body": "What's the reasoning for event handlers getting priority over the passed in callback?\n\n```\n# taken from destroy method\n...\noptions.success = function(resp) {\n   model.trigger('destroy', model, model.collection, options);\n   if (success) success(model, resp);\n};\n...\n```\n\nThe callback is provided by the object making the call in the first place, so it seems natural that it would get first rights to act on the result and then any event handlers would be handled second.  No?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/829",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/829/comments",
    "title": "Document callback signature",
    "created_at": "2011-12-30T00:39:37Z",
    "updated_at": "2012-01-12T20:43:13Z",
    "body": "The official backbone documentation lacks the signature of some (most!) function callbacks. For example, Event.bind, Model.set, Model.save, etc.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/828",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/828/comments",
    "title": "Backbone.View remove should call undelegateEvents",
    "created_at": "2011-12-29T20:40:47Z",
    "updated_at": "2013-01-11T14:39:36Z",
    "body": "It seems like there might be lingering delegated event listeners otherwise, no?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/827",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/827/comments",
    "title": "IE 7,8,9 The object don't accept this property o method. Line 1160",
    "created_at": "2011-12-29T16:17:05Z",
    "updated_at": "2011-12-30T14:21:57Z",
    "body": "I'm testing my backbone application.\nI use backbone with coffeescript and requirejs.\n\nI chrome the application run without any problem, but in IE (7,8 y 9) give and error in lin 1160\n\n``` javascript\n\n// Wrap an optional error callback with a fallback error event.\nvar wrapError = function(onError, model, options) {\n  return function(model, resp) {\n    var resp = model === model ? resp : model;\n    if (onError) {\n      onError(model, resp, options);\n    } else {\n      model.trigger('error', model, resp, options);\n    }\n  };\n};\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/826",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/826/comments",
    "title": "Make wrapError public and overridable",
    "created_at": "2011-12-28T23:30:16Z",
    "updated_at": "2012-01-12T21:06:56Z",
    "body": "Unfortunately `wrapError` is a private method. It should instead be an overridable method e.g. on `Model.prototype` or `Backbone.wrapError`. This is an important bottleneck and should be part of the public API. This also addresses #690, #386 and #437. @jashkenas in #437 says \"why not override `sync`?\" Rather, the correct question is why should we have to override `sync` and have an extra level of wrapping for the error handler when we just want to override `wrapError`?   Really, let's address common issues rather than simply closing them with a perfunctory remark.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/825",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/825/comments",
    "title": "events and default actions",
    "created_at": "2011-12-27T22:32:12Z",
    "updated_at": "2011-12-28T00:19:57Z",
    "body": "If Backbone is designed to build single-page apps, why aren't default actions on links/forms within views automatically prevented?  \n\nEven though links aren't required to have an `href`, I've noticed some browsers mishandling focus when an `href` is missing.  Hence the `href=\"#\"` you see in common practice.  The problem with `href=\"#\"` though is that it'll force the page to scroll to top unless explicitly prevented.\n\nDoes anyone else find all the unnecessary `event.preventDefault()` calls as annoying as I do?  Is there a simple solution that I'm overlooking?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/823",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/823/comments",
    "title": "Special view property `attributes` not documented",
    "created_at": "2011-12-27T02:43:27Z",
    "updated_at": "2012-01-12T21:16:35Z",
    "body": "From the documentation:\n\n\"There are several special options that, if passed, will be attached directly to the view: model, collection, el, id, className, and tagName.\"\n\nThe above sentence is missing `attributes`. (Also would be nice to have an explanation of the purpose of `attributes`.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/822",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/822/comments",
    "title": "`super()` is nowhere defined, but used in annotation",
    "created_at": "2011-12-27T02:29:53Z",
    "updated_at": "2012-01-12T21:18:17Z",
    "body": "In the annotated notes:\n\n\"The constructor function for the new subclass is either defined by you (the \"constructor\" property in your extend definition), or defaulted by us to simply call super().\"\n\nHowever, I see `super()` nowhere defined.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/819",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/819/comments",
    "title": "idAttribute is not documented",
    "created_at": "2011-12-26T19:40:09Z",
    "updated_at": "2011-12-27T17:26:45Z",
    "body": "It's in the source but not on the Backbone.js website. It should be noted.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/818",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/818/comments",
    "title": "backbone failed to load underscore dependency",
    "created_at": "2011-12-26T12:48:55Z",
    "updated_at": "2013-10-08T09:32:43Z",
    "body": "I'm not so sure about this but this quite solves my problem, loading backbone without getting errors.\n\nI found it at line 35 of backbone source that states like this:\nif (!_ && (typeof require !== 'undefined')) _ = require('underscore')._;\n\nThis code produced this error on the console:\n_ is undefined\n[Break On This Error] _.extend(Backbone.Model.prototype, Backbone.Events, {    \n\nI tried removing '._' and it solves the problem:\nif (!_ && (typeof require !== 'undefined')) _ = require('underscore');\n\nNot sure if this works 100% though but that gets rid of the error.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/817",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/817/comments",
    "title": "Why don't views have a `model` property by default?",
    "created_at": "2011-12-25T19:06:19Z",
    "updated_at": "2011-12-26T06:42:59Z",
    "body": "As you say, \"Backbone views are almost more convention than they are code\". It seems the de facto convention is for views to keep track of their model using the `model` property. Why not formalize this, in the same way we have `initialize`, `el`, `render`, etc. acting as placeholders?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/816",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/816/comments",
    "title": "request: Collection .save / .destroy",
    "created_at": "2011-12-25T13:32:28Z",
    "updated_at": "2011-12-26T06:45:41Z",
    "body": "It would be nice, if just as if you can call .fetch on a collection, or a model, that you may also call .save and .destroy on a collection as well.\n\nCurrently, you may collection.fetch and the server will respond with an array of models. For calling .save() on a collection it can send an array of models to save to the server, Backbone can send an array to POST and a separate array to PUT for models which have an ID. For calling .destroy() on a collection it can send an array of IDs to delete from the system. This would unify the CRUD between model and collection calls, its your choice to perform these operations on the entire collection or an individual model.\n\nTo make it easier on the back end logic, the user could always expect arrays on .save and .destroy operations, so when you save/delete a model, it would send an array with just that model instead of just a single object which needs separate logic because it cannot be iterated over.\n\nCREATE/UPDATE\nmodel.save() ~ POST/PUT /collection\ncollection.save() ~ POST/PUT /collection\nREAD\nmodel.fetch() ~ GET /collection/array_ids\ncollection.fetch() ~ GET /collection/array_ids\nDELETE\nmodel.destroy() ~ DELETE /collection/array_ids\ncollection.destroy() ~ DELETE /collection/array_ids\n\nTherefore, on CREATE/UPDATE (.save) it simply sends an array of objects regardless of if you are saving a model or a collection - if it is a model, then it only sends one object in the array, that particular object, the URL always remains /collection However on READ/DELETE operations, it could send an array of IDs in the URL regardless of if it is a model or collection keeping the back end logic consistent.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/814",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/814/comments",
    "title": "Collections: initialize passed models after Collection got initialized",
    "created_at": "2011-12-24T11:37:46Z",
    "updated_at": "2012-04-13T14:36:31Z",
    "body": "I want to suggest a slight change. In `Backbone.Collection`, instead of\n\n``` Javascript\n if (models) this.reset(models, {silent: true});\n this.initialize.apply(this, arguments);\n```\n\nI'd like to suggest\n\n``` Javascript\nthis.initialize.apply(this, arguments);\nif (models) this.reset(models, {silent: true});\n```\n\nAll tests are still passing.\n\nWhy? Because otherwise the passed models get initialized before the collection itself gets initialized. My specific problem:\n\nI can pass a parent to a collection as an option: \n\n``` CoffeeScript\nparent = new App.Models.Base id: 'parent/123'\nchildren = new App.Collections.Base [{id: 'child/1'},{id: 'child/2'}], parent: parent\n```\n\nIf the parent get's destroyed, the children should get destroyed as well. I could put this logic into `App.Collections.Base` but some models have a parent without belonging to a collection (1:1 relation), so I need to put this logic into `App.Models.Base`.\n\nTo achieve this, I bind the model to its parent's destroy event, in case a parent is present. \n\n``` CoffeeScript\n@parent()?.bind 'destroy', (model, collection, options) =>\n  delete options.success\n  delete options.error\n  @destroy options\n```\n\n`@parent()` method returns `options.parent` from the Model initialization or `options.parent` from Model's Collection initialization.\n\nThe problem is, the collection doesn't have a parent until it is funny initialized, that's why I would like to initialize the passed models after the collection got initialized.\n\nOr is there any reason to keep it the way it is right now?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/812",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/812/comments",
    "title": "allow decorators/wrapper function on view event handlers",
    "created_at": "2011-12-24T03:34:35Z",
    "updated_at": "2012-01-12T21:57:50Z",
    "body": "Heyo.\n\nWhat are your thoughts on having a view have an optional wrapper function for it's event handlers. Here's an example that would report any errors unexpected errors in the handler.\n\n```\nvar View = Backbone.View.extend({\n\n   // the event decorator will take the event handler function as the first argument,\n   // and any other arguments as the rest\n   eventDecorator : function () {var func = arguments[0];\n     var args = Array.prototype.slice(arguments, 1);\n      try {\n          f.apply(this, args);\n      } catch (e) {\n          reportError(e);\n     }\n  });\n```\n\nIMO, the main benefit of this would be allowing easy top-level error handling to js tasks kicked off by DOM events (report to server, show an uh-oh message, whatever). This is generally a very sore-spot in Javascript apps because it requires wrapping every callback function manually, so people just don't do it. But since all Backbone events are bound with delegateEvents, we have a nice place to catch them all with a surgical addition. Clearly, this can be accomplished manually, this would just allow cutting out a lot of unneeded boilerplate.\n\nWhat do y'all think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/810",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/810/comments",
    "title": "pushState and multiple roots",
    "created_at": "2011-12-23T20:13:15Z",
    "updated_at": "2012-01-12T22:22:57Z",
    "body": "I have an existing Backbone app with multiple routers. I want to turn on pushState, but this only allows for a single, global root. I really need independent roots for each router.\n\nFor example, let's say we have SearchRouter with a route \":query\" that without pushState you would access like: \"/search/#foo\". We also have CategoriesRouter with a route \":categoryId\" that you would access like \"/categories/#1234\". With pushState enabled these would become \"/search/foo\" and \"/categories/1234\".\n\nI initially tried setting the root to \"/search/\" and SearchRouter worked fine, but CategoriesRouter obviously did not.\n\nIt looks like the only other knob I can turn is to make \"search/\" and \"categories/\" part of their respective routes. This is fairly drastic though because it changes the semantics of our fragments and will break existing bookmarks.\n\nWhat's the best solution for this? Would it make sense to add an optional prefix to router? This would be concatenated between root and frag in Backbone.history.navigate().\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/803",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/803/comments",
    "title": "PushState Router unnecessarily breaks hash fragment links",
    "created_at": "2011-12-20T16:38:25Z",
    "updated_at": "2012-03-16T00:21:21Z",
    "body": "Although I understand the history behind the Backbone Router, and I am sure there are scenarios where it is desirable to automatically fall back to hash fragment based URLs when there is no HTML5 PushState support, the current implementation is unexpected and inconsistent with how a normal web app is supposed to behave.\n\nI am using Backbone.js to progressively enhance a page. In its current form, everything is 100% functional without any JavaScript. The purpose of the Backbone Router in this is to reroute certain actions to AJAX requests rather than page transitions. I am fine with only targeting modern browsers with PushState support (old browsers will just load the page without AJAX, it's a mobile app anyway). However, there are several hash-based fragment links in the page.\n\nA good example is a link to #top at the bottom of a list of search results. Without Backbone in charge of the browser history, this works fine, but as soon as we turn on the Backbone Router things fall apart in subtle ways. The link to top still works (not triggering a route called \"top\" or \"#top\" in the Router, by the way), and now the \"http://my-path.tld/#top\". If I refresh the page like this, the Router reinterprets this to \"http://my-path.tld/top\" (this time it _does_ trigger a route called \"top\"), which brings the app in an inconsistent state. There is no http://my-path.tld/top/ so if the user refreshes the page, bookmarks this URL or sends it to a friend, it results in a 404 error.\n\nI read the comments on https://github.com/documentcloud/backbone/issues/418 as a kind of \"you're holding it wrong\"-response. I do not believe this is the case. If the Backbone Router operates on real URLs, they should be consistent with the way they are supposed to work without JavaScript and as they are now they don't.\n\nThere are probably several solutions to this, but the easiest one would be to allow developers to opt in/out of PushState and hashchange separately and not redirect /#top to /top by default.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/800",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/800/comments",
    "title": "Issue #117 is not resolved",
    "created_at": "2011-12-19T22:10:36Z",
    "updated_at": "2011-12-19T22:17:23Z",
    "body": "https://github.com/documentcloud/backbone/issues/117#issuecomment-3210514\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/799",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/799/comments",
    "title": "pushState difference in iframe between Chrome and FF",
    "created_at": "2011-12-19T16:50:34Z",
    "updated_at": "2013-09-12T14:36:57Z",
    "body": "I've noticed a difference in the ability to use the pushState feature of Backbone.history. I'm running an application inside Facebook which means it's running inside of an iframe. When the application is running in Firefox the browser's back button works correctly given what the History's navigate function adds to window.history.pushState. However, when the application runs in Chrome the browser's back button does not respond to what History's navigate function adds to window.history.pushState.\n\nThis issue does not manifest itself when running as a standalone application, outside of the iframe. The same issue is seen using Safari so I'm guessing it's a webkit browser issue. My question then is this: Is this a browser bug or is there some way I can use Backbone's history to get the correct correct back button response in webkit browsers while the application is running in an iframe?\n\nThanks,\ncmaxo\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/798",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/798/comments",
    "title": "how to find help about understanding backbone if i am not too experienced",
    "created_at": "2011-12-19T02:07:35Z",
    "updated_at": "2011-12-19T15:21:10Z",
    "body": "hi guys, sorry for such a question but i am sick of not finding any help in some basic question. The backbone.js docs are too abstract for me to understand. can some one throw some light on the strategy of binding different views listening to same model and collections . More specific i want is how to automate the rendering of the element with just the change in model or collection. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/797",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/797/comments",
    "title": "Make Router always trigger action, even if the path is the same",
    "created_at": "2011-12-18T19:39:29Z",
    "updated_at": "2012-11-08T12:23:39Z",
    "body": "Right now router doesn't trigger action if the path is the same, even if you use navigate with triggerRoute = true. This causes troubles in some cases, especially in test/specs.\nCan we change this behavior and make it always trigger the action?\n\nTechnically it's simple, we need to comment out this line of code:\n\n```\nif (this.fragment == frag || this.fragment == decodeURIComponent(frag)) return;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/796",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/796/comments",
    "title": "hasOwnProperty in for loops",
    "created_at": "2011-12-18T00:31:26Z",
    "updated_at": "2013-08-12T16:03:00Z",
    "body": "I think for the sake of best practices you should use hasOwnProperty check in each \"for\" loop so that looping thought routes or events does not affect prototype properties.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/795",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/795/comments",
    "title": "Stack overflow while saving Backbone.js model",
    "created_at": "2011-12-17T23:33:46Z",
    "updated_at": "2016-12-08T10:44:55Z",
    "body": "I have a simple Backbone.js model:\n\n```\nclass Avia.Student extends Backbone.Model\n```\n\nTold you it was simple :-) Anyhow, I'm saving it in the following view (snipped for clarity):\n\n```\nclass Avia.StudentView extends Backbone.View\n\n  render: =>\n    html = JST['views/student_view_template'](model: @model)\n    @el.html(html)\n    Backbone.ModelBinding.bind(@)\n    $('#save').bind('click', @save)\n\n  save: (e) =>\n    e.preventDefault()\n    @model.save(\n        success: =>,\n        error: =>\n    )\n```\n\nWhen I click the save button, `@save()` is called, but fails with the following error (again, snipped for clarity as obviously it continues for a long time):\n\n```\nUncaught RangeError: Maximum call stack size exceeded\nBackbone.Events.trigger:117\n_.extend._onModelEvent:635\nBackbone.Events.trigger:117\n_.extend._onModelEvent:635\nBackbone.Events.trigger:117\n_.extend._onModelEvent:635\nBackbone.Events.trigger:117\n```\n\nI've tried commenting out `Backbone.ModelBinding.bind(@)`, and I've ensured `#save` is unique by renaming it to `#wooble` and changing the associated bindings to match.\n\nI've also tried using the very latest `backbone.js` from GitHub.\n\nStill the problem persists :-/\n\n(I've also asked this as [a question over on StackOverflow](http://stackoverflow.com/questions/8542651/stack-overflow-while-saving-backbone-js-model) because I initially suspected PEBKAC on my part.  I'm still not so sure it isn't.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/794",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/794/comments",
    "title": "bindToModel View property",
    "created_at": "2011-12-17T01:37:01Z",
    "updated_at": "2011-12-19T15:41:10Z",
    "body": "I have very often this pattern in some form: \n\n```\nSomeView = Backbone.View.extend({\n  initialize: function() {\n    this.model.bind('some:event:1', this.someAction1, this);\n    this.model.bind('some:event:2', this.someAction2, this);\n\n    this.collection.bind('some:event:3', this.someAction3, this);\n    this.collection.bind('some:event:4', this.someAction4, this);\n  },\n  // onClose is called when view.remove()\n  remove: function() {\n    this.model.unbind('some:event:1', this.someAction1);\n    this.model.unbind('some:event:2', this.someAction2);\n\n    this.collection.unbind('some:event:3', this.someAction3);\n    this.collection.unbind('some:event:4', this.someAction4);\n\n    Backbone.View.prototype.remove.call(this);\n  }\n});\n```\n\nAnd I think it will be really great to make this just:\n\n```\nSomeView = Backbone.View.extend({\n  bindToModel: {\n    'some:event:1': 'someAction1',\n    'some:event:2': 'someAction2'\n  },\n  bindToCollection: {\n    'some:event:3': 'someAction3',\n    'some:event:4': 'someAction4'\n  }\n});\n```\n\nThe two special attributes `bindToModel` and `bindToCollection` will bind the events, and when `view.remove()` is called all events will be unbind before dom removal. I think this will save a lot of code (and bugs related to model event binding/unbinding). This will also make Backbone even more awesome :)\n\nIf you agree on having such API I'll be happy to provide an implementation, since I have several minor prototypes of this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/793",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/793/comments",
    "title": "Supporting polymorphic collections",
    "created_at": "2011-12-16T19:09:28Z",
    "updated_at": "2012-01-17T22:05:42Z",
    "body": "Howdy!\n\nRight now backbone seems to only support collections of one type, we're working on a stream with many polymorphic types that all quack the same.\n\nIt'd be nice to implement this via inheritance(extend), rather than our current technique of creating proxies/mixins in the base class.\n\nbackbone collection seems to have a hardcoded new this.model in it,\n\nI was thinking about doing something like:\n\n```\nmodelClass : function(){\n   return  this[postType]\n}\n```\n\n   this.model = this.model || this.modelClass()\n\n```\nnew this.model\n```\n\nis this a change you would like to have implemented, or are you opposed to it for an ideological reason?\n\nIf you want it, I'll implemented, as it will help me on a couple projects I'm working on.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/792",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/792/comments",
    "title": "jquery error in index.html affects IE9",
    "created_at": "2011-12-16T06:52:53Z",
    "updated_at": "2011-12-16T18:54:47Z",
    "body": "I believe the following line (https://github.com/documentcloud/backbone/blob/master/index.html#L3009):\n\n``` javascript\nvar button = $('<div class=\"run\" title=\"Run\"></div>');\n```\n\n...should be:\n\n``` javascript\nvar button = '<div class=\"run\" title=\"Run\"></div>';\n```\n\nThis allows the examples to run in IE9.  Without that change, the **Run** button does not display.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/789",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/789/comments",
    "title": "model.destroy() not passing id params",
    "created_at": "2011-12-14T21:24:22Z",
    "updated_at": "2015-06-09T04:16:41Z",
    "body": "with emulateJSON and emulateHTTP off - I had to apply this fix:\n\n// Ensure that we have the appropriate request data.\n    if (!params.data && model && (method == 'create' || method == 'update' || method == 'delete')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(model.toJSON());\n    }\n\n(added method == 'delete')\n\notherwise, no params are sent with the DELETE call.  \n\n(It could be streamlined to only include the id)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/788",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/788/comments",
    "title": "Add array of models to collection using {at: index} adds in reverse order",
    "created_at": "2011-12-14T20:35:51Z",
    "updated_at": "2011-12-19T16:20:58Z",
    "body": "Adding an array of models to a collection using the {at: index} adds the array in the reverse order.  It runs through the array to be added calling the build in \"_add\" function but it doesn't not increment the index so each element is added at the same index essentially putting the array in the collection backwards.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/786",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/786/comments",
    "title": "router.navigate triggers route function even with triggerRoute set to false",
    "created_at": "2011-12-14T12:54:42Z",
    "updated_at": "2013-11-24T16:50:23Z",
    "body": "When calling Router.navigate, with the triggerRoute argument set to false (The default), I expect for the hash to change, but for the route function not to be triggered. However, this is not the case.\n\nI have tested this in FF8 and Chrome 16 beta running on Ubuntu 11.10, as well as IE8 running on Windows XP.\n\nIssue is demonstrated in this JSFiddle: http://jsfiddle.net/BfxSs/5/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/785",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/785/comments",
    "title": "Unable to call super.initialize()",
    "created_at": "2011-12-14T01:50:47Z",
    "updated_at": "2018-01-26T13:41:34Z",
    "body": "I'm new to backbone, so I could be missing something. But I have something like:\n\nvar ChildClass = BaseClass.extend(\n{\n    initialize: function()\n    {\n        Backbone.Model.prototype.initialize.call(this);\n        alert(\"child init (should see parent init before this but you don't)!\");\n    }\n\n}\n\nMaybe I'm going about this wrong? I've been coding all day so forgive me if so :). But why can't I call super.initialize this way?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/784",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/784/comments",
    "title": "Infinite recursion on save of a collection element",
    "created_at": "2011-12-13T22:42:01Z",
    "updated_at": "2011-12-18T02:31:06Z",
    "body": "I have a backbone model along with a corresponding router and view. In the router, I instantiate a new collection and a corresponding view followed by a fetch call:\n\n``` CoffeeScript\nclass App.Routers.TsRouter extends Backbone.Router\n  routes:\n    \"p/:pId/ts\" : \"index\"\n  index: (pId) ->\n    @ts = new App.Collections.TsCollection(pId)\n    @view = new App.Views.Ts.IndexView({ts: @ts})\n    @ts.fetch()\n    $(\"#ts\").html(@view.render().el)\n```\n\nSo far, so good. When I attempt to save an element from the collection, I get a stack overflow error, though:\n\n``` CoffeeScript\nApp.Views.Ts ||= {}\n\nclass App.Views.Ts.TView extends Backbone.View\n[...]\n\n  save: (e) ->\n    e.preventDefault()\n    e.stopPropagation()\n\n    inputs = $(@el).find 'input,textarea'\n    attrs = _.reduce(inputs, ((memo, item) -> memo[item.name] = item.value; memo), {})\n    @model.save(attrs, {\n      success: (record) =>\n        @model = record\n        @render()\n      error: (record) =>\n        alert 'Something went wrong: ' + record\n      }\n    )\n    false\n\n[...]\n```\n\nThis ends up in the following endless recursion between the model and the collection (tested using both the last release version of b.js, as well as master):\n\n```\n[...]\n_.extend._onModelEvent() at backbone.js:609\nBackbone.Events.trigger() at backbone.js:115\n_.extend._onModelEvent() at backbone.js:609\nBackbone.Events.trigger() at backbone.js:115\n_.extend._onModelEvent() at backbone.js:609\nBackbone.Events.trigger() at backbone.js:115\n_.extend._onModelEvent() at backbone.js:609\nBackbone.Events.trigger() at backbone.js:115\n_.extend.set() at backbone.js:219\n_.extend.save() at backbone.js:265\nApp.Views.Ts.TView.TView.save() at t_view.js:55\nd() at (internal script):1452\njQuery.event.dispatch() at jquery.js:3320\njQuery.event.add.elemData.handle.eventHandle() at jquery.js:2926\n```\n\nAny ideas?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/780",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/780/comments",
    "title": "Unexpected event triggering with same model in multiple collections",
    "created_at": "2011-12-12T10:15:07Z",
    "updated_at": "2011-12-12T10:20:08Z",
    "body": "``` javascript\nMyModel = Backbone.Model.extend({ });\n\nMyCollection = Backbone.Collection.extend({\n  model: MyModel\n});\n\nMyApp = Backbone.View.extend({\n  initialize: function() {\n    this.collection1 = new MyCollection();\n    this.collection2 = new MyCollection();\n    this.collection1.bind('add', this.add);\n    var myModel = new MyModel();\n    this.collection1.add(myModel);\n    this.collection2.add(myModel);\n  },\n  add: function() {\n    console.log(\"Model added!\");\n  }\n});\n\nvar app = new MyApp();\n```\n\nOutput:\n\n**Model added!\nModel added!**\n\nNot sure how the 2nd collection gets bound too, but the result is not what one would expect.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/779",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/779/comments",
    "title": "specific bug with jqueryui resizestop not firing",
    "created_at": "2011-12-11T09:55:01Z",
    "updated_at": "2011-12-12T18:56:08Z",
    "body": "This bug only happens with JQuery 1.7.1 `resizable` with helper with Backbone events. Fiddle: http://jsfiddle.net/forresto/jauRx/\n\n(The `resizestop` event fires fine without a helper, and [with JQuery 1.6.4](http://jsfiddle.net/forresto/ndftV/), and [without Backbone](http://jsfiddle.net/forresto/qz4UW/).)\n\nAlso posted here: http://stackoverflow.com/questions/8455790/backbone-js-jqueryui-event-not-firing-with-jquery-1-7\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/777",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/777/comments",
    "title": "Require.js support",
    "created_at": "2011-12-09T11:42:27Z",
    "updated_at": "2011-12-09T13:19:00Z",
    "body": "Underscore.js does it - and Backbone can, too. It's not _very_ pretty but I wanted to keep the changes to a minimum:\n\n``` javascript\n(function(){ var bb_fn=(function(_){\n  ...\n  var Backbone;\n  if (typeof exports !== 'undefined') {\n    Backbone = exports;\n  } else if (typeof define === 'function' && define.amd) {\n    // Register as a named module with AMD.\n    Backbone = {};\n  } else {\n    Backbone = root.Backbone = {};\n  }\n  ...\n  return Backbone;\n});\nif (typeof define === 'function' && define.amd) {\n  var root = this;\n  define(['underscore'], function(_) {\n    return bb_fn.call(root, _);\n  });\n} else {\n  bb_fn.call(this);\n}\n}).call(this);\n```\n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/776",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/776/comments",
    "title": "How to handle Friendly URL as ID?",
    "created_at": "2011-12-06T15:06:34Z",
    "updated_at": "2011-12-06T15:26:14Z",
    "body": "How would I go about allowing Backbone.Model to fetch and update `/widgets/my-cool-widget`, as opposed to `/widgets/02938282`?\n\nI'd prefer to avoid passing 'my-cool-widget' to Backbone.Model's id property, for that introduces a number of other inconsistencies (for example, if the user changes the URL, it's not updated client-side).\n\nIdeas?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/774",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/774/comments",
    "title": "Collection Reset",
    "created_at": "2011-12-04T19:10:37Z",
    "updated_at": "2012-06-07T02:48:22Z",
    "body": "I'm using the suggested method of loading data models from the backend, to prevent fetching data from the server twice on a page load like this:\n\n``` javascript\n<script>\n  collection.reset(<%= @accounts.to_json %>);\n</script>\n```\n\nThe issue is my models are being rendered in my php views, the code above just adds the models to the collection, therefore no views rendering is happening when collection.reset is called, however I do have a view for this model but it's only rendered when collection.add is called with some click events in it, so the click events are obviously  not being called with the already rendered html because backbone.js didn't render the views itself.\n\nIs there a way of taking the already rendered html tags and bind it to my views so the click events I have work for those tags ?\nCheers\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/770",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/770/comments",
    "title": "Proposal :: Modularizing Backbone",
    "created_at": "2011-12-01T15:06:07Z",
    "updated_at": "2014-07-25T21:38:58Z",
    "body": "Problem:\n\nAs the project expands, keeping the source code within one file will become much more problematic. The complexity of the code itself will become an issue without modularizing each part of the framework (Models, Views, Collections, etc...). This easily effects those who wish to use only part and not all of the framework - for example a developer may wish to only use the Models part of the framework and not Views since it may not be necessary.\n\nPossible Solution:\n\nI propose that we modularize each component of the framework, meaning we have one module for Models another for Views and so on. With these we would have different files that follow a convention, something like backbone.models.js and backbone.views.js.\n\nPossible Solution - Pros:\nSome benefits of doing this would be to improve organization, increase modularity and quick referencing. In the long term this will help increase the involvement of the community as it would be easy to find and quickly diagnose issues but it would also allow the community to choose what they need when they need it with custom build processes that could go along with this proposal.\n\nPossible Solution - Cons:\nOn the other hand, it could be a problem as it would probably make it a bit more complex for those who have learned the source code as it is right now. It would also need some more in depth testing of each module and how they relate to each other - tests could become complex with custom build processes as well.\n\nSummary\n\nCurrently the framework exists within one file and is not modular - not giving the community flexibility to easily implement what the need. For this, I propose we modularize the framework. This will allow supporters to use what they want when they want it while giving the framework more structure and organization. I believe the effort to do this would most certainly help community involvement and the overall advancement of the framework.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/768",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/768/comments",
    "title": "jQuery's appendTo() doesn't work with this.$",
    "created_at": "2011-11-30T08:57:36Z",
    "updated_at": "2011-11-30T14:57:37Z",
    "body": "In a view's render function I'm trying to do this:\n```var html = '<div>hello</div>';\nthis.$(html).appendTo(this.el);\n\n``````\nBut it causes an error in jquery.js: `b.createDocumentFragment is not a function`\n\nThe following works:\n```var html = '<div>hello</div>';\n$(html).appendTo(this.el);\n``````\n\nNot sure if this is a bug but at least it's a little confusing since developer might think that this.$ and $ would do the same thing here.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/766",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/766/comments",
    "title": "Make delegate events async",
    "created_at": "2011-11-29T14:39:45Z",
    "updated_at": "2011-12-02T22:37:51Z",
    "body": "In the app I am making delegating events took 40% of render time. By doing a setTimeout( function(){ that.delegateEvents(); }, 0 ) I managed to render things on screen 1 second faster. Is there any reason not do this? Otherwise I can submit a pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/764",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/764/comments",
    "title": "History.navigate should allow setting of state object",
    "created_at": "2011-11-28T08:33:04Z",
    "updated_at": "2016-06-20T15:50:38Z",
    "body": "Currently History calls `pushState` with an empty `{}` state object. It's crucial to allow the caller to set the state object. At the very least  using `window.history.state` if available would be a sensible default.  `History.navigate` should take a `stateObject` as an additional parameter.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/763",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/763/comments",
    "title": "Model.set: Triggering before setting values for all attributes",
    "created_at": "2011-11-27T19:41:22Z",
    "updated_at": "2011-12-02T22:58:41Z",
    "body": "<code>trigger</code> should be called AFTER setting attributes' values.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/757",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/757/comments",
    "title": "model fires change event even though nothing has changed",
    "created_at": "2011-11-23T16:22:57Z",
    "updated_at": "2011-11-29T16:51:25Z",
    "body": "It looks like there is a bug in the backbone model that might have been introduced when the following issue was resolved: https://github.com/documentcloud/backbone/issues/105.\n\nUse-Case scenario: We create an apple object and during initialization we set a \u201cstate\u201d attribute to 0, silently. We then call set() on that object again and pass in the same args (state of zero).  At this point a change event should not be fired.\n\nCode:\n\n``` javascript\n// Fruit Model\nFruit = Backbone.Model.extend({\n        initialize: function(){\n                this.set({state: 0}, {silent: true});\n        }\n})\n\n// create new fruit object\nvar apple =  new Fruit();\n// \"change\" event has not been triggered: however, this._changed = true\n\n// set state to 0\napple.set({state: 0});\n\n// nothing has changed, but because this is not silent and this._changed has been previously\n// set to true, we fire a change event... as seen in line 223\n\nif (!alreadyChanging && !options.silent && this._changed) this.change(options);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/756",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/756/comments",
    "title": "What's the use of History's \"root\" option ?",
    "created_at": "2011-11-23T08:17:26Z",
    "updated_at": "2011-11-24T07:53:57Z",
    "body": "I was trying to do some heavily customized routing : decomposing the fragment in several fragments, then matching and calling the callbacks manually. My final goal is to modify backbone to be able to nest routers, in order to handle complicated states (http://stackoverflow.com/questions/8112628/memorizing-a-complex-page-state-with-url-hash-with-backbone-router) - and then why not contribute this if people are interested.\n\nMy code  - which was working with the current release of backbone - fails with the last repo version, because of this line :  https://github.com/documentcloud/backbone/blob/master/backbone.js#L777\n\nSo I am wondering, what's the use of the History having a \"root\" option, and what's the point in automatically removing this root if first part of the fragment ? I don't see any practical use for that, and in my case it resulted in an unexpected behaviour (and took quite a while to debug).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/754",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/754/comments",
    "title": "Accept functions in delegateEvents",
    "created_at": "2011-11-21T20:48:38Z",
    "updated_at": "2011-11-23T19:03:25Z",
    "body": "delegateEvents only accepts an string with the name of the method to call as callback. By just checking if the method variable is a function, we can use pointers/functions in the events assignations.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/753",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/753/comments",
    "title": "When use requirejs",
    "created_at": "2011-11-20T15:23:35Z",
    "updated_at": "2011-11-23T18:56:54Z",
    "body": "line: 32,\nif (!_ && (typeof require !== 'undefined')) _ = require('underscore')._;\n\nShould we use \"[ ]\" as the requirejs argument?   \n\n if (!_ && (typeof require !== 'undefined')) {\n        require(['underscore'], function (underscore) {\n            _ = underscore;\n        });\n    };\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/752",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/752/comments",
    "title": "Wrong check for objectivity in Backbone.Collection.get method",
    "created_at": "2011-11-19T08:55:05Z",
    "updated_at": "2011-11-19T12:17:13Z",
    "body": "Found problem in following method\n\n```\n// Get a model from the set by id.\nget : function(id) {\n  if (id == null) return null;\n  return this._byId[id.id != null ? id.id : id];\n},\n```\n\nWe cannot use strings and other types as argument in this method, because If one passes string parameter \"some_id\", then check\n\n\"some_id\".id != null returns true\n\nbecause, typeof \"some_id\".id === 'undefined'\n\nSo, you need to change this check to something like _.isObject(id) ? id.id : id\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/751",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/751/comments",
    "title": "Router & History issues",
    "created_at": "2011-11-17T23:04:54Z",
    "updated_at": "2011-11-21T06:42:11Z",
    "body": "Hello.\n\nI'm trying to get routing working.\nHere's my sample:\n\n``` html\n<!doctype html>\n<html>\n<head>\n<script src=\"client/jquery-1.7.js\"></script>\n<script src=\"client/underscore.js\"></script>\n<script src=\"client/backbone-min.js\"></script>\n<script>\n$(function(){\n                var PageController = Backbone.Router.extend({\n                    routes: {\n                        \"index\": \"index\",\n                        \"users\": \"users\"\n                    },\n                    index: function () {\n                        this.navigate(\"index\");\n                    },\n                    users: function () {\n                        this.navigate(\"users\");\n                    },\n                    navigate: function(to) {\n                        alert(\"navigating to \" + to);\n                        $('<div>We are now at: ' + to).appendTo('#content');\n                    }\n                });\n                new PageController();\n                $(\"#menu a\").each(function(){\n                    $(this).bind(\"click\", function() {\n                        Backbone.history.navigate(this.innerText);\n                    }) ;\n                });\n\n                Backbone.history.start({ /* pushState: true,*/ root: \"/sandbox/\" });\n                Backbone.history.navigate(\"index\");\n});\n</script>\n</head>\n<body>\n\n<div id=\"container\">\n  <div id=\"menu\">\n      <ul>\n          <li><a href='javascript:'>index</a></li>\n          <li><a href='javascript:'>users</a></li>\n      </ul>\n  </div>\n  <div id=\"content\"></div>\n</div>\n\n</body>\n</html>\n```\n\nWithout \"pushState: true\" option for Backbone.history.start :\n- Chome (15.0.874.120 m):\n  -- on load it navigates to \"http://localhost/sandbox/bb.html#index\" but the index callback isn't called\n  -- on links click it navigates to appropriate urls (\"http://localhost/sandbox/bb.html#users\" and \"http://localhost/sandbox/bb.html#index\"), but callbacks (index,users) aren't called\n- FF (8.0)\n  -- on load it navigates to \"http://localhost/sandbox/bb.html#index\" but the index callback isn't called\n  -- on links click it always navigates to \"http://localhost/sandbox/bb.html#\" and no callbacks are called\n\nif I add \"pushState: true\" option for Backbone.history.start :\n- Chome (15.0.874.120 m):\n  -- on load it navigates to \"http://localhost/sandbox/index\" and the index callback is called\n  -- on links click it navigates to urls (\"http://localhost/sandbox/users\" and \"http://localhost/sandbox/index\"), and no callbacks (index,users) are called\n- FF (8.0)\n  -- on load it navigates to \"http://localhost/sandbox/index\" and the index callback isn't called\n  -- on links click it always navigates to \"http://localhost/sandbox/bb.html\" and no callbacks are called\n\nSo routing simply doesn't work for me. What am I doing wrong?\n\np.s. also asked here: https://groups.google.com/d/topic/backbonejs/d0ERikmPSWU/discussion\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/749",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/749/comments",
    "title": "Shouldn't models call unbind() when model.destroy() method is invoked?",
    "created_at": "2011-11-17T13:07:37Z",
    "updated_at": "2013-06-21T17:55:18Z",
    "body": "Hi,\n\nIn its current implementation, when a backbone model is destroyed it won't unbind its event handlers. This makes that you have to handle those suscriptions manually (for example, in views listening to models). It you don't do so, couldn't this cause memory problems for models not being garbage-collected?\n\nI could submit this modification if you consider it interesting.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/748",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/748/comments",
    "title": "backbone-mootools ",
    "created_at": "2011-11-15T05:28:34Z",
    "updated_at": "2011-11-15T14:29:17Z",
    "body": "backbone-mootools  lose the fn Backbone-router?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/745",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/745/comments",
    "title": "Mobile's back button not working - backbone.js 0.5.3 with jquerymobile 1.0 RC2",
    "created_at": "2011-11-11T22:36:18Z",
    "updated_at": "2011-11-24T00:01:05Z",
    "body": "When using the navigate method with triggerRoute = true; the page navigates fine to the new page but history is not updated.\n\nWhen hitting the back button on an android device (nexus S), the history pops, but the navigation does not happen.\n\nIf I pass \"false\" for the  triggerRoute and then call \"Backbone.history.loadUrl();\"  Then the back button does work but sort of erratically. \n\nThe navigate method has this comment ....\n// URL-encoding the fragment in advance. This does not trigger\n// a `hashchange` event.\n\nAfter reading several posts, it seems to me that using the navigate method is the right way and should update the history...\n\nCode snippet ...\n\ner.getApp().getController().navigate('home', true);\n\nOR \n\ner.getApp().getController().navigate('home');\nBackbone.history.loadUrl();\n\nIs there a known routing issue with jquerymobile and backbone combination ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/744",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/744/comments",
    "title": "Collections model in IE7",
    "created_at": "2011-11-11T22:14:22Z",
    "updated_at": "2011-11-12T14:55:31Z",
    "body": "Has anyone had any issues with IE7 and been able to use this setup\n\nBackbone.Collection.extend({\n\n```\n    model: myModel,\n\n    initialize: function( options ) {\n\n    },\n```\n\n});\n\nmyModel never gets initialized in IE7 all other browsers it works.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/741",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/741/comments",
    "title": "Global events for ajax start/stop/error/success",
    "created_at": "2011-11-10T22:32:07Z",
    "updated_at": "2011-11-23T20:35:42Z",
    "body": "I am trying to implement a global AJAX loading indicator in a new Backbone project, and I was not able to find any built-in events to hook into for displaying and hiding a loading indicator.\n\nIt would be helpful if Backbone fired events for each of: 'ajax:start', 'ajax:stop', 'ajax:error', 'ajax:success' when using the native Collection.fetch(), etc. methods.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/740",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/740/comments",
    "title": "add namespace support in Backbone.Events",
    "created_at": "2011-11-10T19:27:20Z",
    "updated_at": "2012-02-21T19:40:49Z",
    "body": "Add ability to namespace events like jquery does: http://docs.jquery.com/Namespaced_Events\n\nThis allows you to group events, as well as have one-off event namespaces for anonymous function event binding and unbinding.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/737",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/737/comments",
    "title": "Validation should not execute after successful save",
    "created_at": "2011-11-10T02:18:32Z",
    "updated_at": "2011-12-06T21:55:16Z",
    "body": "``` javascript\nvar User = Backbone.Model.extend({\n  urlRoot: '/users',\n  validate: function(attrs) { return attrs.valid ? false : 'Error message'; }\n})\n\nvar u = new User({id: 1, valid: true})\n\nu.set({valid: false}, {error: function() { console.log(arguments); }})\n// This shows the following arguments:\n// 1 - model instance\n// 2 - 'Error message'\n// 3 -  options\n\n// All good and shiny. Until:\nu.save(null, {error: function(){ console.info(this, arguments); }})\n// The server responds with 200, and nothing in the JSON {}.\n\n// What do you expect? Success I would say, no error at least.\n// But the error callback gets executed with arguments\n// 1 - model instance\n// 2 - model instance (same as above!)\n// 3 - options\n```\n\nWhat happens AFTER the request has been sent and handled:\n1. `success` callback is triggered.\n2. it calls `set`.\n3. `set` validates and fails (for whatever reason, doesn't matter here).\n4. The `error` callback is executed.\n\nIt is weird to raise both success and error at the same time.\nI suppose the success should do `set`, but with no validation.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/735",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/735/comments",
    "title": "Backbone.History documentation",
    "created_at": "2011-11-09T17:46:37Z",
    "updated_at": "2011-11-09T19:01:40Z",
    "body": "In short, the documentation for Backbone.History has lots of examples like:\n- `Backbone.history.start([options])`\n- `Backbone.history.start({pushState: true, root: \"/public/search/\"})`\n\nIn all of these, `Backbone.history.start` should be `Backbone.History.start`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/734",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/734/comments",
    "title": "Todos sample has a bug in it that \"accidentally works\"",
    "created_at": "2011-11-09T09:31:41Z",
    "updated_at": "2011-12-07T00:00:43Z",
    "body": "See: http://stackoverflow.com/questions/8055957/backbone-js-todos-sample-unsure-why-a-certain-fragment-of-code-works/8056347\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/732",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/732/comments",
    "title": "API - Catalog of Events has inaccurate \"change\" and \"change:[attribute]\" parameters",
    "created_at": "2011-11-08T21:27:21Z",
    "updated_at": "2011-12-06T21:39:28Z",
    "body": "Currently, it reads:\n- \"change\" (model, collection) \u2014 when a model's attributes have changed.\n- \"change:[attribute]\" (model, collection) \u2014 when a specific attribute has been updated.\n\nThe collection is not passed as the second argument to these events. Instead, it should read something like:\n- \"change\" (model, options) \u2014 when a model's attributes have changed.\n- \"change:[attribute]\" (model, newValue, options) \u2014 when a specific attribute has been updated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/730",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/730/comments",
    "title": "calling .clear doesn't set changedAttributes to contain all removed attributes",
    "created_at": "2011-11-08T20:18:45Z",
    "updated_at": "2011-12-06T22:04:52Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/728",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/728/comments",
    "title": "Ability to completely unbind all events for a view in dynamic situations",
    "created_at": "2011-11-08T08:56:11Z",
    "updated_at": "2011-11-08T23:55:33Z",
    "body": "I'm hitting an issue that I haven't found a good solution for. My page is extremely dynamic, and I load in views which may bind to the same elements. \nI may also create the same view once, create a different view, then recreate the first one. The issue though is the event handlers persist and I will find the event is firing twice.\n\nSo my 'flow' would be viewA --> viewB --> vewA which causes the newest A view to double fire events.\n\nIt feels like for completely dynamic pages, an application would want the ability to completely 'destroy' or 'unbindAllEvents' for a given view, which I cant seem to figure out. Is there a known solution for this? If not, is it something others feel is needed? I could code it and provide a pull request if others want.\n\nOne other note - a view can have multiple views in it, so you would expect it to unbind all subviews as well.\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/725",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/725/comments",
    "title": "Circular references in views?",
    "created_at": "2011-11-06T16:18:02Z",
    "updated_at": "2011-11-09T00:24:31Z",
    "body": "I just started playing around with backbonejs planing to use it in a coming project.\n\nAm I right that all the backbone views are resulting in circular references as:\n\nthe view object has a reference to the dom element object\nthe dom element has references to the callback functions to be call on dom events\nmost of these callbacks are properties of the view object with \"this\" bound to the view object.\n\nThat results in ...->viewObject->domElement->eventCallback->viewObject->...\n\nIn many cases this may not be a problem but in my case I have a very large table (20columns, 700-2000 rows) and I plan to implement the cells to be each a separate view object. That would result in 2*40.000 objects never being garbage collected.\n\nIs there any easy way to resolve this problem? Or is it not a problem at all and I just have overseen anything?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/724",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/724/comments",
    "title": "Model validation prevents setting other attributes in some cases",
    "created_at": "2011-11-06T09:45:34Z",
    "updated_at": "2011-11-07T06:12:27Z",
    "body": "Given the following model:\n\n``` javascript\n    var Topic = Backbone.Model.extend({\n        validate : function (attrs) {\n            if(!attrs.name) {\n                return \"topic name shouldn't be empty\";\n            }\n        }\n    });\n```\n\nand trying to set it's attribute:\n\n``` javascript\ntopic.set({ someOtherAttr : true });\n```\n\nwill silently failed because of validation\n\nThis will work:\n\n``` javascript\ntopic.set({ someOtherAttr : true, name : topic.get(\"name\") });\n```\n\nbut it's very inconvinient\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/720",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/720/comments",
    "title": "initialize versus constructor",
    "created_at": "2011-11-04T15:19:26Z",
    "updated_at": "2014-05-07T14:39:31Z",
    "body": "When would I want to use initialize() and when would I want to use constructor()? The documentation make it look like they are synonyms, but the source shows they handled differently.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/719",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/719/comments",
    "title": "How to handle deletion of relational data ??",
    "created_at": "2011-11-04T14:26:34Z",
    "updated_at": "2012-01-13T18:37:00Z",
    "body": "Suppose you have a collection of model-person and each person has many bikes .. so each model-person holds a collection of model-bike ... now if you destroy a model-person .. destroy would be called on each model-bike held in which beong to that person .. this would result in a shit-load of unnecessary requests , is there some way to overload destroy to avoid that ?? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/718",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/718/comments",
    "title": "Spacing consistency",
    "created_at": "2011-11-03T22:37:26Z",
    "updated_at": "2011-11-09T00:55:13Z",
    "body": "For consistency's sake, can we have all functions written either\n\nfunction(bla) {\n\nor \n\nfunction(bla){\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/715",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/715/comments",
    "title": "Models data are validated when collection resets",
    "created_at": "2011-11-03T15:15:40Z",
    "updated_at": "2012-07-10T21:17:51Z",
    "body": "If you use validation it initiates a lot of validation requests during load data from server\n\n```\n// Prepare a model to be added to this collection\n_prepareModel: function(model, options) {\n  if (!(model instanceof Backbone.Model)) {\n    var attrs = model;\n    model = new this.model(attrs, {collection: this});\n    if (model.validate && !model._performValidation(attrs, options)) model = false;\n  } else if (!model.collection) {\n    model.collection = this;\n  }\n  return model;\n},\n```\n\nI think there should be:  if (!options.silent && model.validate && !model._performValidation(attrs, options)) model = false;\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/714",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/714/comments",
    "title": "Collection binding is too late in Model constructor",
    "created_at": "2011-11-03T05:17:37Z",
    "updated_at": "2013-07-07T17:46:43Z",
    "body": "Backbone.js is great, it's so useful in single page app!\n\nAnd I found a issue: I can't use this.collection in Model.set method.\n\n``` javascript\nvar SomeModel = Model.extend({\n    // ...\n    set: function(attributes, options) {\n        var duplicate = this.collection.get(attributes.id); // Error, this.collection is undefined\n    }\n    // ...\n});\n```\n\nIn code of Model.constructor, the collection binding is after Model.set:\n\n``` javascript\n  Backbone.Model = function(attributes, options) {\n    // ...\n    this.set(attributes, {silent : true});\n    // ...\n    if (options && options.collection) this.collection = options.collection;\n    // ...\n  };\n\n```\n\nSo, I think the binding of collection should move above of this.set;\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/713",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/713/comments",
    "title": "Uncaught TypeError: undefined is not a function line #956 of backbone.js",
    "created_at": "2011-11-02T20:27:45Z",
    "updated_at": "2011-11-03T05:55:41Z",
    "body": "(sorry for my english)\n\nWell, i'm new to Backbone.js and i try to use creating a simple example where i manage a View (without any data yet)\n\nhere is the code: http://jsfiddle.net/msdark/DNtpV/\n\nInt fiddle no error shown \nBut when i run this in Chrome i get this error in the console:\n\nUncaught TypeError: undefined is not a function\n_.extend.delegateEvents                                                  backbone.js:956\nBackbone.View                                                                   backbone.js:883\nchild                                                                                      backbone.js:1103\n(anonymous function)                                                       script.js:42\nf.extend._Deferred.e.resolveWith                                   jquery.min.js:2\ne.extend.ready                                                                    jquery.min.js:2\nc.addEventListener.C                                                       jquery.min.js:2\n\nI try to search about this error but i can't get anything..\n\nhow can i fix?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/712",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/712/comments",
    "title": "setting (click or touchstart) events more dynamically in .View",
    "created_at": "2011-11-02T18:55:25Z",
    "updated_at": "2012-10-13T08:08:07Z",
    "body": "I've got a dilemma maybe there's an easy solution to, but perhaps one could extend the way Backbone sets up events in View.\n\nFor a cross-device app for mouse-users as well as tablet use, it helps to swap out \"click\" events for \"touchstart\", and for the touch-client to _not_ allow for certain click events, as it creates a less responsive UI.  So, I'd like to be able to set events more dynamically without having to write a lot of conditional blocks. One _could_ include all of the possible events in the events object, too, and mute them later in handlers, but it'd be nice to nip things at the bud.\n\nIs there a simple workaround here? A modification to how Backbone parses the events object strings?\n\n```\nvar clicktouch = \"click\";\nif (Modernizr.touch) {\n        clicktouch = \"touchstart\";\n } \n\nvar FooView = Backbone.View.extend({\n\n// initialize, template etc.\n\nevents:  {\n     // it would be great to use this\n     //  ------- but it doesn't work for some reason\n    clicktouch + \" .titlespan\" : \"titleClick\"\n\n    // instead of needing to do something like this\n    if (clicktouch == \"touchstart\") {\n        \"touchstart .timeline-title-span\" : \"titleClick\"\n    } else {\n        \"click .timeline-title-span\" : \"titleClick\"\n    }\n\n}\n\n// titleClick etc\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/711",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/711/comments",
    "title": "No method extend",
    "created_at": "2011-11-02T16:48:36Z",
    "updated_at": "2011-11-02T16:49:26Z",
    "body": "<script type=\"text/javascript\" src=\"http://documentcloud.github.com/backbone/backbone-min.js\"></script>\n\n```\n    <script type=\"text/javascript\">\n        var Game = Backbone.Model.extend({\n            initialize: function() {\n                alert(\"Oh hey!\");\n            },\n            defaults: {\n                name: 'Default title',\n                releaseDate: 2011\n            }\n        });\n    </script>\n```\n\nafter running this code i get an uncaught typeerror: Object function ...some javascript ... has no method 'extend'. What I'm doing wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/708",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/708/comments",
    "title": "Backbone.Collection.get(id) randomly returns with undefined",
    "created_at": "2011-11-01T04:11:10Z",
    "updated_at": "2012-01-25T17:04:55Z",
    "body": "Hey, \n\nI've spent some time bug fixing my code, but realized that the Backbone.Collection.get(id) sometimes randomly returned with undefined. \n\nI'm coding an image viewer app, so I set up three collections. One for the current item, one for the upcoming items and one hidden for buffering some images, all of them has only 5-10 models. The thing that i want to do is to get the first element from a collection (this) to pass it to another collection. \n\n``` javascript\nvar Items = Backbone.Collection.extend({\n    model: Item,\n    getItem: function() {\n        // returns and removes the first item from this collection\n        if (this.length) {\n            var firstItemId = this.toJSON()[0].id;\n            itemToReturn = this.get(firstItemId);\n            this.remove(itemToReturn);\n            return itemToReturn;\n        } else {\n            qbConsole.log('No more items in '+this.name+'.');\n            return false;\n        }\n    }\n});\n```\n\nIn the code above, itemToReturn is sometimes randomly undefined, even the Collection has the model with the specified ID, that is the only model with this ID, and ID is integer in the model.\n\nBtw it seems Backbone.Collection.at(index) works properly on the same codebase, here is my working code. I figured out that this is the proper way to solve my problem, but hopefully this issue helps you guys make Backbone.js more better.\n\n``` javascript\nvar Items = Backbone.Collection.extend({\n    model: Item,\n    getItem: function() {\n        // returns and removes the first item from this collection\n        if (this.length) {\n            itemToReturn = this.at(0);\n            this.remove(itemToReturn);\n            return itemToReturn;\n        } else {\n            qbConsole.log('No more items in '+this.name+'.');\n            return false;\n        }\n    }\n});\n```\n\nBest,\nmilan\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/704",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/704/comments",
    "title": "how to get this in google.maps.event in backbone's view",
    "created_at": "2011-10-30T04:42:17Z",
    "updated_at": "2011-10-31T08:46:43Z",
    "body": "I choose the best answer way to declare event in this question\nhttp://stackoverflow.com/questions/4379303/backbone-js-with-google-maps-problems-with-this-and-listeners \n\nbut when I declare view event : \n\n``` javascript\n\n\n_.bindAll(this, 'dragMarker', 'dragMap');\ngoogle.maps.event.addListener(this.marker, \"dragend\", this.dragMarker);\n\n// ---------\ndragMarker: function() {\n    // how can I get \n    this.getPosition(); // << from google.maps.event, not this which is our view\n}\n```\n\nThanks :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/703",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/703/comments",
    "title": "View is undefined even though I already declared it ",
    "created_at": "2011-10-30T03:31:03Z",
    "updated_at": "2011-10-30T17:23:34Z",
    "body": "This really confuses me, I think I'm stupid but I've searched and do what ever I can. \nWhenever I declare a view and call it, it always returns \"undefined is not a function\". This is my view code \n\n``` javascript\nwindow.LocationView = Backbone.View.extend({\n    initialize: function() {\n        // create new marker first\n        this.marker = new google.maps.Marker({\n            title: this.model.get('name'),\n            draggable: true,\n            animation: google.maps.Animation.DROP,\n            position: new google.maps.LatLng(this.model.get('lat'), this.model.get('long')), // give the position here\n        });\n\n        // bind events\n        this.model.bind('change', this.render, this);\n    },\n    render: function() {\n        this.marker.setTitle(this.model.get(\"name\"));\n        this.marker.setPosition(new google.maps.LatLng(this.model.get('lat'), this.model.get('long')));\n    },\n});\n```\n\nThis is how I declared it : \n\n``` javascript\nthis.view = new LocationView({model: this.location});\n// or even the basic one\nthis.view = new LocationView();\n\n// neither of these ones work\n```\n\nThanks for watching this stupid question =\"=\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/702",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/702/comments",
    "title": "New underscore method 'initial' missing",
    "created_at": "2011-10-29T22:24:42Z",
    "updated_at": "2012-01-13T18:30:53Z",
    "body": "Current underscore methods on Backbone.Collection are:\n\n```\nvar methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find', 'detect',\n    'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n    'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex', 'toArray', 'size',\n    'first', 'rest', 'last', 'without', 'indexOf', 'lastIndexOf', 'isEmpty', 'groupBy'];\n```\n\n`Initial` seems to be missing unintentionally, perhaps other omissions such as suffle, compact, flatten, uniq, union, intersection, difference, zip are intentional considering the use cases of collections.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/691",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/691/comments",
    "title": "overriding backbone.sync",
    "created_at": "2011-10-27T03:07:32Z",
    "updated_at": "2011-10-27T05:00:13Z",
    "body": "I try to override backbone.sync and in backbone.js I use model.add to add some objects but it doesn't work, it doesn't contain any object when it gets out of backbone.sync. I'm new to backbone, I hope someone can help me with this problem :)\n\nSome of my code:\n\n``` javascript\nif (method == \"read\") {\n    $.getJSON(myUrl + '?jsoncallback=?', function(data) {\n        model.add(data.locationSet);\n    });\n}\n```\n\ndata.locationSet : \n\n``` javascript\n[\n    {\n        \"id\": \"1\",\n        \"name\": \"ha noi\",\n        \"description\": null,\n        \"category_id\": \"1\",\n        \"long\": \"105.85\",\n        \"lat\": \"21.0333\"\n    },\n    {\n        \"id\": \"5\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"7\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"8\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"10\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"12\",\n        \"name\": \"hochiminh\",\n        \"description\": \"nothing here\",\n        \"category_id\": null,\n        \"long\": \"106.63\",\n        \"lat\": \"10.8231\"\n    },\n    {\n        \"id\": \"13\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"15\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"19\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"21\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"23\",\n        \"name\": \"Ha Noi\",\n        \"description\": \"\",\n        \"category_id\": \"1\",\n        \"long\": \"106.63\",\n        \"lat\": \"10.8231\"\n    },\n    {\n        \"id\": \"25\",\n        \"name\": null,\n        \"description\": null,\n        \"category_id\": null,\n        \"long\": null,\n        \"lat\": null\n    },\n    {\n        \"id\": \"26\",\n        \"name\": \"University of Social Sciences and Humanities\",\n        \"description\": null,\n        \"category_id\": \"1\",\n        \"long\": \"106.703\",\n        \"lat\": \"10.7862\"\n    },\n    {\n        \"id\": \"27\",\n        \"name\": \"Thu Duc Golf Course\",\n        \"description\": \"undefined\",\n        \"category_id\": \"1\",\n        \"long\": \"106.824\",\n        \"lat\": \"10.8572\"\n    }\n]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/690",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/690/comments",
    "title": "Error object is lost in the wrapped error callback after successful update and failed validation",
    "created_at": "2011-10-26T00:00:56Z",
    "updated_at": "2011-10-30T04:38:28Z",
    "body": "Hi guys,\n\nI read about error handling issues and suggestions, but seems like I've got another problem\n\nScenario:\nModel updates -> Success callback -> Set updated attributes -> Validation fails (Ok, it should be) -> Error callback has model instead of error object (so not able to give user a feedback)\n\nThe wrapError function returns a wrapped callback what has One param called resp\nfunction(resp) {\n....if (onError) {\n........onError(model, resp, options);\n....} else {\n........model.trigger('error', model, resp, options);\n....}\n }\n\nand _performValidation calles it with three params, first one is model (this)\n_performValidation : function(attrs, options) {\n....var error = this.validate(attrs);\n........if (error) {\n............if (options.error) {\n................options.error(this, error, options);\n..\n\nso wrapped error callback takes this first given param - a model instead of error object \nfunction(resp) { // this=model\n....if (onError) {\n........onError(model, resp, options);   .// onError(model, model, options) what is save -> options.error(model,model)\n\nNote, that it happens only when called from validation after update. \n- If it's called from Ajax Error (like Update fails) - it also gives all three params, but a proper first param (resp) is read as expected, then I have a check and convert this responseText to my error object (I handle both client and server side validation with one callback and check inside) - works fine.\n- If validation fails before Update - error callback is not wrapped, and everyth is fine too\n\nPlease, assist \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/689",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/689/comments",
    "title": "Collection Sort on Model Change",
    "created_at": "2011-10-25T23:23:16Z",
    "updated_at": "2013-09-13T19:25:38Z",
    "body": "The documentation for Collection.sort says\n\n> a collection with a comparator function will maintain itself in proper sort order at all times.\n\nYet, if my comparator is\n\n```\ncomparator: function(model) {\n    return model.get(\"name\");\n}\n```\n\nThen if I change the name:\n\n```\nmodel.set({name: 'zzz'});\n```\n\nand in the change event I use indexOf, I get the wrong index:\n\n```\nmodel.bind('change', changed);\nchanged = function(model) {\n    var index = model.collection.indexOf(model)\n     // index is based off the old name\n}\n```\n\nThis is because the collection does not resort automatically on change. I think the documentation should change, or preferably, a this.sort({silent}) in Collection._onModelEvent should occur.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/687",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/687/comments",
    "title": "Better native support for non-REST applications",
    "created_at": "2011-10-24T20:41:59Z",
    "updated_at": "2011-10-24T23:15:48Z",
    "body": "I'd like to see Backbone have better support when REST isn't being used in an application. Some of the methods (like Collection.create) have dependencies on the Backbone.sync and a URL isn't defined on an object an error is thrown.\n\nCurrently I've been using something like the following to skip trying to run sync operations when no URL is found:\n\n``` js\n(function (){\n    var originalBackboneSync = Backbone.sync;\n    Backbone.sync = function (method, model, options){ \n        var url = (!(model && model.url)) ? null : _.isFunction(model.url) && (model.url !== Backbone.Model.prototype.url) ? model.url() : null;\n        if( !url ){\n            options.success(model);\n            return true;\n        } else {\n            originalBackboneSync.apply(this, arguments);\n        }\n    };\n})();\n```\n\nI'd love to see some way to just tell Backbone that if no \"URL\" is present to not throw an error, but instead just process the success callback natively.\n\nWhile I understand REST is a huge part of Backbone, not every application platform supports it and conversion can take a while.\n\nMaybe the best solution would be to implement a Backbone.noREST flag. By default this is false and the behavior would continue to throw an error. If set to true, then the Backbone.sync would just run the success callback and not attempt to contact the server if no URL is defined. If a URL is defined for an object, then it would behave normally.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/685",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/685/comments",
    "title": "Chrome history strange behavior.",
    "created_at": "2011-10-23T21:58:04Z",
    "updated_at": "2011-10-24T13:40:24Z",
    "body": "Chrome 14.0.835.202 m\nBackbone 0.5.3\nI have router with couple of 'urls' linked to handlers.\nWhen I walking through the app, on each hash not only current handler is calling, but all previously called handlers too. So, on each step I see calling of growing chain of handlers.\n\nIt happens only when I'm typing hash by hands. When I'm calling Router.navigate() manualy \u2014 all is ok.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/684",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/684/comments",
    "title": "Add support for registering Backbone as an AMD Module. ",
    "created_at": "2011-10-23T18:25:21Z",
    "updated_at": "2011-10-29T18:20:14Z",
    "body": "Underscore 1.2 will properly register itself as an AMD module if it detects an amd loader. If you load underscore 1.2 with an AMD loader and then try to load Backbone, Backbone will fail because underscore will not exist in the global scope. \n\nBackbone should do a similar check and asynchronously load underscore as a dependency. \n\nPrior to underscore 1.2 I would use underscore and backbone with RequireJS like so. \n\n``` javascript\ndefine(['modile1', 'order!underscore', 'order!backbone'], function(Module1) {\n  //Do stuff here. Backbone and underscore would be global\n});\n```\n\nNow if I do the following with underscore 1.2\n\n``` javascript\ndefine(['modile1', 'order!underscore', 'order!backbone'], function(Module1, _, Backbone) {\n  //I can load underscore properly because it is amd aware but Backbone will fail \n  //due to underscore not being in the global scope\n});\n```\n\nIf Backbone was AMD aware like underscore we could just do the following\n\n``` javascript\ndefine(['modile1', 'backbone'], function(Module1, Backbone) {\n  //Backbone loads properly and pulls in underscore as its dependency\n});\n```\n\nI have modified [Backbone on my own branch](https://github.com/treasonx/backbone/tree/amd) to check for an AMD loader and load underscore 1.2 properly. Unit tests still pass.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/682",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/682/comments",
    "title": "Unbinding events by callback context",
    "created_at": "2011-10-20T18:17:22Z",
    "updated_at": "2011-10-30T01:28:27Z",
    "body": "Let's say I have a model, and two views listening for \"change\" events on the same model.\n\n``` javascript\nView1 {\n   initialize: function() {\n      this.model.bind(\"change\", this.modelChangedView1);\n   },\n   modelChangedView1: function() {\n   }\n}\n\nView2 {\n   initialize: function() {\n      this.model.bind(\"change\", this.modelChangedView2); \n   },\n   modelChangedView2: function() {\n   }\n}\n```\n\nThen, View2 is removed from the page `view2.remove()`. As I currently understand it, `modelChangedView2` will still fire on all model `change` events. If I call `model.unbind(\"change\")` or `model.unbind()`, all `change` event bindings on that model will be removed: I'll lose both `modelChangedView1` and `modelChangedView2` callbacks.\n\nIt seems to me like:\n- When a view is removed, all bindings that refer to that view should be cleaned up somehow.\n- Or, it should be possible somehow to `.unbind()` by the context of the callback. Something like `model.unbind(\"change\", view2)`?\n- Or, it's entirely possible that multiple views listening for \"change\" events on a model is just a bad idea in general. But any guidance on the best practice (creative event namespacing?) would be appreciated. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/681",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/681/comments",
    "title": "add specific model to collection with \"inside collection\" corruption.",
    "created_at": "2011-10-20T06:51:34Z",
    "updated_at": "2011-10-20T06:55:27Z",
    "body": "when adding model, that contains collection in it (in one of that model attributes), to collection, this \"inner collection\" (in one of that model attributes) became simple array of objects(models in this \"inner collection\" became simple objects that contains only model attributes).\n\nExample of code:\n\nvar model = new Backbone.Model({\n    innerCollection: new Backbone.Collection()\n})\nmodel.get('innerCollection').add([new Backbone.Model({someAttr: 'shithappens'})])\nvar outerCollection = new Backbone.Collection();\n\nouterCollection.add(model)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/679",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/679/comments",
    "title": "Request: silent save",
    "created_at": "2011-10-18T18:21:08Z",
    "updated_at": "2014-04-16T22:57:39Z",
    "body": "I'd like a way to save models without triggering the `change` event when the data comes back later.\n\nI've tried:\n\n``` javascript\nvar task = new Task(..);\ntask.fetch();\n\n// This will trigger a change event.\ntask.set({ status: \"started\" });\n\n// This will trigger a change event, too, when the data comes back.\ntask.save();\n```\n\nPerhaps something like `model.save({}, {silent: true})` would be nice.\n### Real world use case:\n\nIf you're making a task management application where each task can have many states (`started`, `finished`, `delivered`, ...), you probably will bind a `change` event on the tasks collection to update the UI when a state changes.\n\nI'd like the user to be able to click on the task's \"start\", \"finish\", and \"deliver\" buttons in rapid succession. When the user clicks too fast, the `change` event that the saving will trigger may happen late, which will 'revert' the state of the task in the UI.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/678",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/678/comments",
    "title": "Make unit testing routers easier",
    "created_at": "2011-10-17T10:44:37Z",
    "updated_at": "2013-07-07T17:46:43Z",
    "body": "Currently unit testing a router requires knowledge of router and history internals. I currently use this helper to trigger a router:\n\n```\nfunction hit(fragment) {\n  _.any(Backbone.history.handlers, function(handler) {\n    if (handler.route.test(fragment)) {\n      handler.callback(fragment);\n      return true;\n    }\n  });\n}\n```\n\nDuplicating that in each testsuite and having to rely on so many Backbone internals to test a router is not maintainable.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/676",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/676/comments",
    "title": "pushState:true doesn't match routes correctly.",
    "created_at": "2011-10-17T09:09:20Z",
    "updated_at": "2011-10-17T10:04:29Z",
    "body": "If I start an app with:\n\n```\nBackbone.history.start(pushState: true)\n```\n\nAnd I point my browser to say:\n\n```\nhttp://localhost/posts\n```\n\nThen it won't match this route:\n\n```\nroute(\"/posts\", \"index\")\n```\n\nI think all routes always start with a slash.\n\nI see that +getFragment+ strips off the first slash character. I don't understand why?\n\nI could use this:\n\n```\nroute(\"posts\", \"index\")\n```\n\nbut then I can't use:\n\n```\nnavigate(\"/posts\", true)\n```\n\nwhich I find rather odd.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/674",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/674/comments",
    "title": "model.performValidation() should pass options through to validate()",
    "created_at": "2011-10-17T00:06:00Z",
    "updated_at": "2011-11-23T20:50:56Z",
    "body": "One line change, line 401:\n`var error = this.validate(attrs,options);`\n\nWould allow `validate` to consider the `options` passed in `save`, `set` and `fetch` etc.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/672",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/672/comments",
    "title": "Serving a Backbone app from a subdirectory isn't supported by Router",
    "created_at": "2011-10-14T22:52:25Z",
    "updated_at": "2016-09-11T05:56:36Z",
    "body": "A user should be able to specify a parameter to the Router ( say {root: 'myDir'} ) to specify that the app is being served from a subdirectory. After specifying this, the prefix parameter should be prepended to each route within the Router, so that routes can be properly handled, even when a Backbone application is served from a subdirectory.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/669",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/669/comments",
    "title": "url not set to a collection at initialization",
    "created_at": "2011-10-14T15:29:47Z",
    "updated_at": "2011-10-14T15:39:50Z",
    "body": "If I create a new Collection object with a \"url\" attribute - it's not passed to the collection as an attribute:\n\nvar myCollection = new Backbone.Collection([], {url: '/users'});\nmyCollection.fetch()\n\nConsole:\nA \"url\" property or function must be specified\n[Break On This Error] throw new Error('A \"url\" property or function must be specified'); \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/666",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/666/comments",
    "title": "collection.add(model_instance) does not set collection of model",
    "created_at": "2011-10-11T17:42:05Z",
    "updated_at": "2011-10-11T17:46:33Z",
    "body": "If this is a feature, would you mind to explain?\n\nIf this is a bug, I'd be happy to provide a patch and send a pull request. I'd adjust the code of `_prepareModel` to set collection in any case unless it's already set.\n\n``` javascript\n    _prepareModel: function(model, options) {\n      if (!(model instanceof Backbone.Model)) {\n        var attrs = model;\n        model = new this.model(attrs, {collection: this});\n        if (model.validate && !model._performValidation(attrs, options)) model = false;\n      } else if (!model.collection) {\n        model.collection = this;\n      }\n      return model;\n    },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/665",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/665/comments",
    "title": "BackBone PushState bug on Back and Next buttons",
    "created_at": "2011-10-11T10:45:55Z",
    "updated_at": "2011-12-28T15:35:34Z",
    "body": "## Foreword\n\nI'm using Backbone.js **v0.5.3** with PushState like this : <code>Backbone.history.start({ pushState: true });</code>\n\nI create some routes in HTML : \n\n<pre><code>&lt;a href=\"/\">Route Root&lt;/a>\n&lt;a href=\"/nodejs\">Route Node JS&lt;/a>\n&lt;a href=\"/coffeescript\">Route Coffee Script&lt;/a>\n</code></pre>\n\n\nI catch them with jQuery and call <code>app.navigate()</code> : \n\n<pre><code>$('a').click(function (e) {\n    e.preventDefault();\n    var href = $(this).attr('href');\n    app.navigate(href, true);\n});\n</code></pre>\n\n\nThis code works well and each route is caught and changes the content of a div.\n## The Bug\n\nThe problem came when **pushState** is used and when we use the **Back** and **Next** buttons of the browser.\n\n**An example :**\n1. I click on \"Route Node JS\"\n   - \"Node JS\" is displayed on the &lt;div>\n2. I click on \"Route Coffee Script\"\n   - \"Coffee Script\" is displayed\n3. I press the Back button on my browser\n   - \"Root\" is displayed **but my url is /coffeescript**\n\nThe problem is present just for **pushState**, with **hashchange** there is no problem.\n## The solution\n\nI just found the solution when I was writting this issue.\nThe solution is to remove the first **/** of **each link and each route** in BackBone.\n**So ...**\n\n<pre><code>&lt;a href=\"/\">Route Root&lt;/a>\n&lt;a href=\"/nodejs\">Route Node JS&lt;/a>\n&lt;a href=\"/coffeescript\">Route Coffee Script&lt;/a>\n</code></pre>\n\n**become**\n\n<pre><code>&lt;a href=\"\">Route Root&lt;/a>\n&lt;a href=\"nodejs\">Route Node JS&lt;/a>\n&lt;a href=\"coffeescript\">Route Coffee Script&lt;/a>\n</code></pre>\n\n\nMaybe it can be the solution for the future developers who have the same \"bug\".\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/664",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/664/comments",
    "title": "Feature Request: history.replaceState",
    "created_at": "2011-10-10T01:55:54Z",
    "updated_at": "2011-10-20T04:00:12Z",
    "body": "I would like backbone to be able to do replaces in the state. For instance, I've enabled my backbone-app to check if the user is logged in or not, and if not, it \"redirects\" to login (`controller.navigate('login', true)`). However, this makes it impossible to click back on the browser as you just get pushed back to the login again. When everything is run on the client, it's important to be able to mimic the way you can redirect with HTTP where it doesn't leave any history, therefore I would like if this could be implemented.\n\nFor legacy-navigation (using #) I believe it's possible there too using window.location.replace('#/login'), but I haven't tried.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/662",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/662/comments",
    "title": "Respect jQuery.ajax request type option in model.save",
    "created_at": "2011-10-07T11:45:48Z",
    "updated_at": "2011-10-29T18:43:34Z",
    "body": "Feature request:\nI would like to do something like\n`model.save({foo:'bar'}, {type: 'PUT'});`\n\nCurrently Backbone uses only the model's isNew to determine the save request type. Setting the type in the options helps with \"quite-not-rest-standard backends\" and also makes the jQuery.ajax options support more consistent in Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/661",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/661/comments",
    "title": "Pass options to Collection's initialize()",
    "created_at": "2011-10-07T07:14:16Z",
    "updated_at": "2015-08-23T15:28:51Z",
    "body": "With a model you can pass data and options like so:\n\n``` javascript\nvar article = new Article({subject: \"CSS Shaders\"}, {option1: '7'});\n```\n\nthat options object will get passed along to my article's `initialize()` function. Yay.\n\nThe same is not true for a collection. It has the same API: pass it a model and options. But backbone only uses that options for setting the comparator on the collection `if (options.comparator) this.comparator = options.comparator;` and does not pass the options along to the collection's `initialize()` function. \n\nSeems like for the sake of consistency it should pass along the options.\n\nMy use case is I have a nested collection, and I want to pass in as an option the parent model so that the nested collection's initialize() has access to it, and can pass along the reference to it's models. Contrived (and silly) example: A farmer (model) has some turkeys (collection), and I want the turkeys to know which farmer they belong to so they can plot against him before Thanksgiving.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/658",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/658/comments",
    "title": "toJSON looks like it includes references instead of copies for nested objects",
    "created_at": "2011-10-06T19:09:43Z",
    "updated_at": "2011-10-13T02:51:10Z",
    "body": "var test = new Backbone.Model({'foo': 'bar', 'obj': {'obj1': true}}); \n\nvar json = test.toJSON(); \nconsole.log('1:', JSON.stringify(json)); \n\njson['obj']['obj2'] = 'bak'; \nconsole.log('2:', JSON.stringify(json)); \n\nconsole.log('3:', JSON.stringify(test.toJSON()));\n\nIt appears that modifying the json has modified my model, making me think that toJSON has copied a reference instead of a copy of a nested object. \n\nBug?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/657",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/657/comments",
    "title": "Bug - Collection.create() with attributes vs. model and validation",
    "created_at": "2011-10-06T14:45:06Z",
    "updated_at": "2012-01-13T19:17:45Z",
    "body": "I have an Album Collection with a Validate() function that will fail when the attribute artist == 'Prince Bogus'.  \n\nWhen I call the Create() function and pass in \"purpleRain.attributes\" the error callback is raised and the object is NOT sent to the server for creation - that's good.\n\nWhen I call the Create() function and pass in \"purpleRain\" the error callback is raised but the object IS sent to the server for creation - that's bad.  The object should not have been sent to the server / created.\n\nIs this a bug in backbone?\nIn the docs it states \"The create method can accept either an attributes hash or an existing, unsaved model object.\"\n\n```\n           var purpleRain = new Album({\n                artist: 'Prince Bogus',\n                title: 'purple rain',\n                tracks: [\n                    {\n                        title: 'Lets Go Crazy',\n                        url: 'letsgocrazy.mp3'\n                    }\n                ]\n            });\n\n            albumCollection.create(purpleRain.attributes, {\n                error: function() {\n                    alert('Save failed!');\n                }\n            });\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/656",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/656/comments",
    "title": "View.events not set by constructor",
    "created_at": "2011-10-05T12:00:43Z",
    "updated_at": "2013-11-26T18:36:42Z",
    "body": "'events' is not one of the defined viewOptions, so if you pass an events object to a Backbone.View constructor, events is not set as an attribute of the resulting view object. But delegateEvents(), which is executed by the constructor, checks for 'events' as an attribute of the view object. Adding 'events' to viewOptions would ensure that event bindings passed to the View constructor would be applied by the initial delegateEvents(). Otherwise it appears that for the initial execution of delegateEvents() to have any effect, you would need to set events in the prototypes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/655",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/655/comments",
    "title": "Before filters for Views",
    "created_at": "2011-10-03T19:29:31Z",
    "updated_at": "2013-07-07T17:46:43Z",
    "body": "Hi,\n\nThe idea is simply to be able to specify code that needs to run, before initalizing a view. Maybe filter is isn't the correct term for that, but I couldn't think of anything better.\n\nCurrently in Backbone.View you call before initialize:\n\n```\nthis._configure(options || {});\nthis._ensureElement();\nthis.delegateEvents();\n```\n\nIf we had before filters we could do something like this:\n\n```\nBackbone.View.addBeforeFilter(function(options){ /* the old _configure method */})\nBackbone.View.addBeforeFilter(function(){ /* the old _ensureElement method */});\nBackbone.View.addBeforeFilter(function(){ this.delegateEvents(); });\n```\n\nAnd then the Backbone.View could be only:\n\n```\nBackbone.View = function(options) {\n  this.cid = _.uniqueId('view');\n  this._runBeforeFilters(options || {});\n  this.initialize.apply(this, arguments);\n};\n```\n\nThis will give the developers an ability better to extend their views for example if I want **bindAll** attribute to my views:\n\n```\nAppView = Backbone.View.extend({})\nAppView.addBeforeFilter(function(){\n  _.isArray(this.bindAll) && _.bindAll.apply(_, [this].concat(this.bindAll));\n});\n\nSomeView = AppView.extend({\n  bindAll: ['show', 'hide'],\n  show: function(){ /* code */ },\n  hide: function(){ /* code */ }\n});\n```\n\nI have a quick prototype of this. But I'm not very sure about the API, you could probably think of something better.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/653",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/653/comments",
    "title": "Pressing backbutton in browser causes many actions to be called",
    "created_at": "2011-10-02T19:30:10Z",
    "updated_at": "2011-10-30T13:53:06Z",
    "body": "If you click on some links that updates the state of a backbone.js application and then clicks back in the browser all of the previous actions are called, just not the previous one.\n\nHere is an example: http://pastie.org/2628240\n\nI start by loading the root page, Test1 is then printed.\nI continue clicking Test2, Test3 and finally Test4 after which I click the back button in the browser.\nHere is my console output:\n\n```\nTest1        # Initial load\nTest2\nTest3\nTest4, id: 4 # Last link click\nTest1        # After the back button is clicked\nTest2\nTest3\nTest4, id: 4\nTest3        # Expected action\n```\n\nExpected output would be:\n\n```\nTest1\nTest2\nTest3\nTest4, id: 4\nTest3\n```\n\nIt looks like all previous actions are called before the right one is called. Since I'm planing on animating my changes this will cause a lot of trouble.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/652",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/652/comments",
    "title": "router.navigate doesn't call router unless hash is changed",
    "created_at": "2011-10-02T18:28:07Z",
    "updated_at": "2013-07-26T12:29:09Z",
    "body": "I'm trying to use URLs without hashbangs which is causing some grief.\n\nAs I test I did this.\n\n```\n<a href=\"#\" onclick=\"router.navigate('/albums/<%= album.id %>', true); return false;\">Show</a>\n```\n\nThe URL is updated but my router isn't called. At first I thought the route didn't match but if I refresh the page the route is successfully matched.\n\nThen I tried this:\n\n```\n<a href=\"#\" onclick=\"router.navigate('/albums/<%= album.id %>', true);\">Show</a>\n```\n\nAnd everything works just fine, seems like the router is only called if a hashchange is triggered.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/651",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/651/comments",
    "title": "stacked 'success' method wrapping in fetch?",
    "created_at": "2011-10-02T08:54:25Z",
    "updated_at": "2013-07-07T17:46:43Z",
    "body": "```\nfetch : function(options) {\n  options || (options = {});\n  var model = this;\n  var success = options.success;\n  options.success = function(resp, status, xhr) {\n    if (!model.set(model.parse(resp, xhr), options)) return false;\n    if (success) success(model, resp);\n  };\n  options.error = wrapError(options.error, model, options);\n  return (this.sync || Backbone.sync).call(this, 'read', this, options);\n},\n```\n\nIt looks like multiple calls to that method make success to be called many times at once.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/649",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/649/comments",
    "title": "Add a 3rd argument (context) to unbind",
    "created_at": "2011-10-01T07:24:48Z",
    "updated_at": "2012-01-13T19:31:17Z",
    "body": "This is a proposal...\n\nProblem:\nWhen multiple objects (e.g. views) bind to the same event on a model and pass in the same callback, unbind is not reliable because it will unbind the first callback that matches the event name / callback combination in the _callbacks array.  For example:\n\nvar MyView = Backbone.View.extend({\n  initialize: function() {\n    this.model.bind('change', this.render, this);\n  },\n\n  unbindChange: function(){\n     this.model.unbind('change', this.render); \n  }\n});\n\nvar view1 = new MyView({model: model123});\nvar view2= new MyView({model: model123});\n\nview2.unbindChange(); // Oh oh!  I just unbound view1's callback and not view2's.\n\nPossible solution is to allow an optional 3rd argument, the context, to unbind. This way, if the context is passed, unbind will make sure the context matches before it unbinds.  If a context is not passed, the behavior will be the same as before, so this is fully backwards compatible:\n\n```\n    unbind: function (ev, callback, context) {\n        var calls;\n        if (!ev) {\n            this._callbacks = {};\n        } else if (calls = this._callbacks) {\n            if (!callback) {\n                calls[ev] = [];\n            } else {\n                var list = calls[ev];\n                if (!list) return this;\n                for (var i = 0, l = list.length; i < l; i++) {\n                    if (list[i] && callback === list[i][0] && (!context || list[i][1] === context)) {\n                        list[i] = null;\n                        break;\n                    }\n                }\n            }\n        }\n        return this;\n    }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/648",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/648/comments",
    "title": "Urls as objects?",
    "created_at": "2011-09-30T14:27:54Z",
    "updated_at": "2011-10-13T02:09:09Z",
    "body": "After running into several problems dealing with the way that URL strings are constructed (such as appending formats or querystrings) it occurred to me that URLs would benefit from being parsed and passed around as an object rather than just a string on which we attempt to slice up and concat stuff onto. Then in the Backbone.sync function, after any and all manipulation has occurred, the URL could be assembled from its individual pieces and the request could be made. Just wanted to gauge interest and get feedback on this sort of refactor before I tackle it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/647",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/647/comments",
    "title": "Initialize is called too late",
    "created_at": "2011-09-29T13:43:32Z",
    "updated_at": "2011-10-13T01:31:56Z",
    "body": "First of all, backbone.js is great.  You deserve much credit for making something so useful!\n\nI believe there is a minor issue with the way the `initialize` is now called.  Consider for a moment that someone might add an aspect (e.g. `_.wrap`) to their model's `set` method (or simply override it) as I have.  I would think it safe to say that inside all methods other than `initialize` we should be able to assume that initialization has already occurred; however, the Model constructor actually calls `set` before it calls `initialize`.\n\nIn my instance, since I am using documents (models with embedded models--think MongoDB), it is important that I have a reference to the parent document.  I accomplish this by passing a `parent` property in the options;  The problem is that I can't attach that `parent` property to the model until I get to the `initialize` method.  As my enhanced `set` method relies upon having access to the parent, this doesn't work cleanly.  I've had to do something like this:\n\n```\noccurrence: function(data, fn){ //this is method creates an embedded document\n  var payload = data, data = _.extract(data, 'id'); //pulls id into its own object\n  var o = new Occurrence(data, {parent: this}); //pass only the id attribute here\n  o.set(payload); //pass the rest of the attributes here after the parent is attached\n  Occurrence.collection.add(o);\n  fn && fn.apply(o);\n  return o;\n}\n```\n\nAlternately, I've experimented with adding a `preinitialize` hook that is called before any other methods are called.  This works, but I don't like modifying vendor libraries.\n\n```\nBackbone.Model = function(attributes, options) {\n  var defaults;\n  attributes || (attributes = {});\n  if (defaults = this.defaults) {\n    if (_.isFunction(defaults)) defaults = defaults();\n    attributes = _.extend({}, defaults, attributes);\n  }\n  this.attributes = {};\n  this._escapedAttributes = {};\n  this.cid = _.uniqueId('c');\n  this.preinitialize && this.preinitialize(attributes, options); //a new hook\n  this.set(attributes, {silent : true});\n  this._changed = false;\n  this._previousAttributes = _.clone(this.attributes);\n  if (options && options.collection) this.collection = options.collection;\n  this.initialize(attributes, options);\n};\n```\n\nAny thoughts on this?  Both approaches work, but the first seems awkward and second required me to touch backbone source.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/646",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/646/comments",
    "title": "Backbutton in Chrome reloads app",
    "created_at": "2011-09-29T11:13:26Z",
    "updated_at": "2011-12-28T19:35:06Z",
    "body": "Whenever I use the native back button in Chrome, it re-inits my backbone app, runs through the entire history and finally end up at the desired location. This does not occur with Safari or Firefox.\n\nThe same issue can easily be reproduced for instance at:\nhttp://cloudedit.jamesyu.org/\n\nSteps to reproduce:\n- Enable logger in Chrome\n- Select an existing document\n- Edit the adress to point to a non-existing document \n- (404 should be thrown in the log, and user is redirected to the frontpage)\n- Select an existing document\n- Back button should now JUST go to startpage, but 404 is still thrown, as the app is reinitialized, and walks through the whole history.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/643",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/643/comments",
    "title": "'add' event to collection is triggered after whole models are added.",
    "created_at": "2011-09-29T05:35:37Z",
    "updated_at": "2014-03-21T23:57:25Z",
    "body": "Any function bound to a collection with 'add' event is being triggered after whole models are added.\nAs far as I understand, \nAdd method of Collection internally calls _add with each model.\nThen the _add method adds a model to the collection, increments length of collection, triggers 'add' to the collection and the model within each iteration.\nBut it seems that when the callback for collection is invoked, collection already contains whole models.\n\nBelow is just an example(cannot be precise).\n\n```\nvar ExampleView = Backbone.View.extend({\n    initialize: function(){\n        this.collection.bind('add', this.addOne, this);\n    },\n    addOne: function(model){\n        console.log(this.collection.length);\n    }\n});\nvar example_view = new ExampleView({collection: SomeCollection});\nexample_view.collection.fetch();\n```\n\nThis print to me the same number for whole iteration.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/641",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/641/comments",
    "title": "Follow jQuery with \"on\" and \"off\" instead of \"bind\" and \"unbind\"?",
    "created_at": "2011-09-28T23:02:44Z",
    "updated_at": "2012-01-16T17:54:18Z",
    "body": "For a while now, we've been a bit uncomfortable with `bind/unbind`, which can too easily be confused with `_.bind` and `_.bindAll`. Should we follow jQuery's lead, and ... for Backbone.js 1.0, remove `bind` and `unbind` in favor of `on` and `off`?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/639",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/639/comments",
    "title": "Backbone.Model#set does not update Number objects",
    "created_at": "2011-09-28T19:01:07Z",
    "updated_at": "2011-09-28T19:24:39Z",
    "body": "When I call the 'set' method in a model, and both the new and existing values of the attribute I am updating are Number objects, the underlying attributes are not updated but 'set' does not return false.  I believe this is because the Underscore.js 'isEqual' function returns true for all Number objects being compared regardless of their value.\n\ne.g. _.isEqual(new Number(5), new Number(10)) === true\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/637",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/637/comments",
    "title": "Call to $.ajax in Backbone.sync swallows errors / exceptions - very anoying",
    "created_at": "2011-09-28T01:20:46Z",
    "updated_at": "2011-09-28T03:43:15Z",
    "body": "I know that this is a jQuery problem rather than backbone. See http://stackoverflow.com/questions/2721983/exceptions-thrown-in-jquery-ajax-callbacks-swallowed\n\nStill, is there anything we could do about this in backbone? It makes it hard to debug when I can't see what exceptions / errors are occurring.\n\nThe issue is that in backbone, we call things like Model.fetch() all the time. fetch() calls sync which calls $.ajax, which in turn ultimately triggers a 'change' event after the success callback is run.\n\nWhatever you bind to that change event is still going to be running within the scope of the try{} block that occurs inside $.ajax. Not that you would know/expect that when writing your backbone code.\n\nI thought I was going crazy when errors and exceptions were not appearing and my program just appeared to be halting with no message for no reason.\n\nNo one else has had this problem?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/636",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/636/comments",
    "title": "Regression with routes in IE6",
    "created_at": "2011-09-27T19:08:28Z",
    "updated_at": "2012-01-13T21:09:03Z",
    "body": "In Backbone 0.3.3, the Controller routes specs passed.\n\nIn Backbone 0.5.3, Router spec 67 fails. (They do pass in IE7 and IE8)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/634",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/634/comments",
    "title": "Error in documentation of emulateHTTP",
    "created_at": "2011-09-27T10:08:04Z",
    "updated_at": "2013-07-07T17:46:43Z",
    "body": "I think that emulateHTTP is documented wrong here: http://documentcloud.github.com/backbone/#Sync-emulateHTTP\n\nI used the emulateHTTP-flag, but didn't receive any _method parameter. When I looked closer inside the code, it seems that _method is only set when both emulateHTTP and emulateJSON is set to true.\n\nFrom backbone.js: \n\n``` javascript\n    if (Backbone.emulateHTTP) {\n      if (type === 'PUT' || type === 'DELETE') {\n        if (Backbone.emulateJSON) params.data._method = type;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/633",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/633/comments",
    "title": "Need to explicitly empty container before re-rendering",
    "created_at": "2011-09-25T12:02:39Z",
    "updated_at": "2011-09-25T14:46:16Z",
    "body": "First, thanks for open-sourcing this awesome library!!!\n\nSecond, i came across a problem which I found a solution to. Either it's an issue with Backbone or with my understanding of how this work (basically I have very little understanding), in that case this comment might be useful for others who have similar issues.\n\nSo I have an ItemView, ListView and another view that wraps ListView, say ContainerView. If you re-create ListView element every time you render ContainerView then event listeners on ItemView get lost unless you explicitly remove all elements from ListView element on re-creation. See my jsfiddle. Look for the !!! comment in code. If you comment out that one line that empties container then on re-render click listeners are lost.\n\nhttp://jsfiddle.net/jbasko/2UZaw/\n\nBTW, it could be a jQuery issue. I thought that if you call element.html('new content') then you remove all it's child nodes. Apparently only empty() does it.\n\nThanks,\nBackbone is amazing!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/630",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/630/comments",
    "title": "When I click the back button, json is render",
    "created_at": "2011-09-24T02:38:13Z",
    "updated_at": "2016-02-25T05:22:22Z",
    "body": "I have Rails app using backbone. When I click the back button or front button randomly I'll see json.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/629",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/629/comments",
    "title": "Feature request: Add a generic event object",
    "created_at": "2011-09-23T22:14:37Z",
    "updated_at": "2012-01-13T21:26:29Z",
    "body": "One of the things I'm finding myself doing is using a generic global event object, something like:\n\n```\nvar BackboneExt = BackboneExt || {Dispatcher: _.extend({}, Backbone.Events)};\n```\n\nThis allows me to build a model like:\n\n```\nPerson = Backbone.Model.extend({\n    initialize: function (){\n        this.bind(\"change\", function (model){\n            BackboneExt.Dispatcher.trigger(\"Person:change\", model);\n        })\n    }\n});\n```\n\nNow I have the ability to hook into this generic event anywhere in my code by doing:\n\n```\nBackboneExt.Dispatcher.bind(\"Person:change\", function(model){\n    console.log('Backbone.Dispatcher');\n    console.dir(model);\n});\n```\n\nThis allows me to hook into the Model in many places of my code (view, controllers, etc) without passing down dependencies. I'd really love to shorten that further to something like:\n\n```\nPerson = Backbone.Model.extend({\n    initialize: function (){\n        // the below line would bind a \"change\" event, then trigger the global dispatcher object (like the commented code below)\n        this.dispatch(\"Person\", \"change\");\n/*\n        this.bind(\"change\", function (model){\n            BackboneExt.Dispatcher.trigger(\"Person:change\", model);\n        })\n    }\n*/\n});\n```\n\nI've love to see something like this baked into Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/628",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/628/comments",
    "title": "include backbone.js in docco annotated source for dev console",
    "created_at": "2011-09-23T21:44:56Z",
    "updated_at": "2012-01-13T21:27:42Z",
    "body": "A few times, while reading the Backbone.js annotated source, I've wanted to bring up my dev console (Chrome Inspector) and try a couple of things out, but the Backbone.js source code isn't included. How about including jQuery, Backbone, and Underscore at the bottom of the file?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/627",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/627/comments",
    "title": "Some selectors don't work in views",
    "created_at": "2011-09-23T18:24:34Z",
    "updated_at": "2011-09-24T16:47:04Z",
    "body": "I have been testing somthing like this code:\n\n``` javascript\nwindow.MyView = Backbone.View.extend({\n    ...\n    ,events: {\n         \"click .someclass\": \"logEvent\"\n        ,\"click [data-something]\": \"logEvent\"\n    }\n    ,logEvent: function(){\n        console.log(\"Event logged\")\n    }\n    ...\n})\n```\n\n<div class=\"someclass\"  role=link tabindex=0>By class </div>\n\n<div data-something=\"hello\" role=link tabindex=0>By data-something </div>\n\n\nWith the more standard selector \".someclass\", clicks are logged, however with the \"[data-something]\" selector, it doesn't work with backbone. \nI have tested directly like this with jquery and it worked:\n\n``` javascript\n\n   $(\"#container\").delegate( \"[data-something]\", \"click\", function(){ alert('click') } )\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/626",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/626/comments",
    "title": "Model how to make different use of different Backbone.Sync",
    "created_at": "2011-09-23T07:08:21Z",
    "updated_at": "2011-09-23T08:31:32Z",
    "body": "Hello, I want to ask, under different model uses a different Backbone.sync, how to do it? The other is me in my custom Backbone.sync in how to call the system the original Backbone.sync methods?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/623",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/623/comments",
    "title": " \u201cmouseleave\u201d is fired when I click button inside the DIV ",
    "created_at": "2011-09-22T11:36:49Z",
    "updated_at": "2011-09-22T14:08:28Z",
    "body": "When the cursor leaves a div, the mouseleave event is fired, but if I click on a button inside the div, both the mouseleave and click events fire, although my cursor is still inside the div.\n\nhere is the code:\n\n```\nevents: {\n  'mouseleave': 'test_1',\n 'click button': 'test_2'    \n},\ntest_1: function() {\n  alert('mouseleave!');\n},\ntest_2: function() {\n  alert('click!');\n}\n```\n\nWhen I click the botton the mouseleave alert appears. Why??\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/622",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/622/comments",
    "title": "How to RSS a Backbone site?",
    "created_at": "2011-09-21T15:33:01Z",
    "updated_at": "2011-09-21T19:45:23Z",
    "body": "I've been using Backbone for a few months now and I've found it amazing! I was wondering though, are there examples or a standard use case for indexing your site to make an RSS Feed? Everything is handled in JS now I'm not sure how to do some of the more fundamental server-side stuff. Would I have to make this using a server side script?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/621",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/621/comments",
    "title": "delegateEvents({}) should unbind all events",
    "created_at": "2011-09-20T08:07:10Z",
    "updated_at": "2011-09-20T15:52:20Z",
    "body": "At the moment, `delegateEvents({})` will do the same thing as `delegateEvents()`. I would expect it to unbind all events and rebind none. I know this effect can be achieved with `$(this.el).unbind()`, but I found it somewhat unintuitive that passing an empty dictionary didn't work. It would be a one line fix (I can provide a patch if people approve of the concept).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/619",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/619/comments",
    "title": "collections within collections",
    "created_at": "2011-09-18T21:34:42Z",
    "updated_at": "2012-01-13T21:28:50Z",
    "body": "I'm not sure if I'm doing something wrong here or not...I imagine I am since this seems like a very common use-case:\n\nI've got one class extended from Backbone.collection, which is meant to contain another class extended from Backbone.collection.\n\nThe problem I hit was that when I'd call outerClass.add(instanceOfInnerClass); that for some reason I was getting an extra collection object in between...in other words, the structure looked something like this:\n\nouterClass\n&nbsp;&nbsp;&nbsp;&nbsp;2ndInstanceOfOuter\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerClass\n\nI tracked down the \"problem\" to this function:\n\n```\n// Prepare a model to be added to this collection\n    _prepareModel: function(model, options) {\n      if (!(model instanceof Backbone.Model)) {\n        var attrs = model;\n        model = new this.model(attrs, {collection: this});\n        if (model.validate && !model._performValidation(attrs, options)) model = false;\n      } else if (!model.collection) {\n        model.collection = this;\n      }\n      return model;\n    },\n```\n\nwhat was happening is that my \"instanceOfInner\" was not an instance of model (but of collection), and therefore this function was creating a new object and passing instanceOfInner into it...this line is the important one:\n\n```\n if (!(model instanceof Backbone.Model)) {\n```\n\nchanging it to this has solved my problem, but it's nagging me that there's something I'm missing:\n\n```\n  if (!(model instanceof Backbone.Model) && !(model instanceof Backbone.Collection) ) {\n```\n\nCan anyone offer any insight?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/618",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/618/comments",
    "title": "Support for PATCH method and sending JSON patches",
    "created_at": "2011-09-17T03:21:46Z",
    "updated_at": "2014-11-11T18:38:18Z",
    "body": "Support for `PATCH` method http://tools.ietf.org/html/rfc5789 and patch support specifically for JSON documents: http://tools.ietf.org/html/draft-pbryan-json-patch-01\n\nA couple implications of this proposal:\n- new MIME type `application/patch-json` http://tools.ietf.org/html/draft-pbryan-json-patch-01#page-5\n- new HTTP verb, `PATCH`\n- new format being sent to the server, according to the above proposal\n\nI want to get a few reactions before I start writing a patch. The primary idea is:\n- `Model.save` would take an additional argument `patch` which if `true`, would send a `PATCH` request with the `application/patch-json` MIME type\n\nOther non-essential ideas include:\n- `Model.patch` could be introduced which takes a patch in the format outlined in the proposal\n- `Collection.patch` could do something similar (though the ordering of models could get ambiguous due to the `comparator`)\n\nHere are examples of what the patches look like http://tools.ietf.org/html/draft-pbryan-json-patch-01#page-6\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/616",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/616/comments",
    "title": "model init doesn't parse attributes",
    "created_at": "2011-09-15T19:23:27Z",
    "updated_at": "2011-12-05T15:46:36Z",
    "body": "``` javascript\nBackbone.Model = function(attributes, options) {\n    var defaults;\n    attributes || (attributes = {});\n    if (defaults = this.defaults) {\n      if (_.isFunction(defaults)) defaults = defaults();\n      attributes = _.extend({}, defaults, attributes);\n    }\n    this.attributes = {};\n    this._escapedAttributes = {};\n    this.cid = _.uniqueId('c');\n    this.set(attributes, {silent : true});\n    this._changed = false;\n    this._previousAttributes = _.clone(this.attributes);\n    if (options && options.collection) this.collection = options.collection;\n    this.initialize(attributes, options);\n  };\n```\n\nthis.set(attributes, {silent : true}); -> this.set(this.parse(attributes), {silent : true});\n\nI don't like parsing at the collection as I sometimes work with individual models.\n\nI am aware you could just parse the attributes in initialize(), but I feel my suggested method is cleaner.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/613",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/613/comments",
    "title": "IE7 iframe contentWindow error from calling Backbone.history.start before DOM ready",
    "created_at": "2011-09-13T23:02:32Z",
    "updated_at": "2011-09-14T16:54:59Z",
    "body": "When `Backbone.history.start` is called before the DOM is loaded, Internet Explorer 7 fails to create an iframe element and the following javascript error is thrown:\n\n```\nLine: 787\nChar: 9\nError: 'hide().appendTo(...).0.contentWindow' is null or not an object\nCode: 0\n```\n\nhttps://github.com/documentcloud/backbone/blob/0.5.3/backbone.js#L786\n\n**Reduction of bug:** http://jsfiddle.net/QPGdE/27/embedded/result/\n#245 is related.\n\nThis error can be avoided if `Backbone.history.start` is called after the DOM is loaded. [Here's a working example](http://jsfiddle.net/QPGdE/28/embedded/result/). Hopefully this explanation saves other people time when they encounter the error.\n\n**A quick solution:**\n\nMaybe this can be mentioned as a known issue in the documentation? Or maybe we can detect when the iframe creation failed and throw a descriptive error for the user/developer. \n\n**Better solution, but needs research:**\n\nThe creation of the iframe element could happen after dom ready. Zepto and jQuery make it easy to do this, but this could introduce unexpected issues when trying to call `navigate` before the iframe is created.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/612",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/612/comments",
    "title": "model.set(..., {silent: true}) supresses validations",
    "created_at": "2011-09-13T19:30:38Z",
    "updated_at": "2011-09-14T16:57:03Z",
    "body": "Hi there,\n\nI'm trying to do a bunch of updates to my model, then finally update my ui at the end,but It appears that as long as I pass silent:true into my model.sets, then I never get validations.\n\nIs this intended behaviour, and if so, how should I sidestep it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/610",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/610/comments",
    "title": "Odd error message from delegateEvents ",
    "created_at": "2011-09-13T18:45:16Z",
    "updated_at": "2011-09-13T19:24:53Z",
    "body": "If you attempt to do something like this:\n\nfunction btnClick(){\nconsole.log(':(');\n//BTW I DO exist\n}\nvar v = Backbone.View.extend({\nel : \"#page\",\nevents : {\"click .btn\" : btnClick}\n});\n\nYou will get this error:\n\nline :958 of backbone-0.5.3.js\nUncaught Error: Event \"function btnClick(){\nconsole.log(':(');\n//BTW I DO exist\n}\" does not exist\n\nA minor modification to line 958 opens up more possibilities\n\nvar method = this[events[key]];\nvar method = this[events[key]] || events[key];\nWith this modification you can use a function confided to a clouser:\n\n(function(){\nfunction btnClick(){\nconsole.log(\"You'll never overwite me :)\");\n}\nvar v = Backbone.View.extend({\nel : \"#page\",\nevents : {\"click .btn\" : btnClick}\n});\n})();\n\nOr you could use functions from some preferred library, directly without over complicating things.\n\nthis:\nvar v = Backbone.View.extend({\nel : \"#page\",\nevents : {\"click .btn\" : theBestLibraryEver.awesome }\n});\n\nversus this:\nvar v = Backbone.View.extend({\nel : \"#page\",\nevents : {\"click .btn\" : \"extraneous\" }\nextraneous : function(){\ntheBestLibraryEver.awesome.apply(this, arguments);\n}\n});\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/604",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/604/comments",
    "title": "1 model should be included in multiple collection",
    "created_at": "2011-09-09T03:48:28Z",
    "updated_at": "2012-09-06T16:36:45Z",
    "body": "If I hav two or two collection(c1, c2) in one page, and an  user is included by c1 and c2. In that case, I must create two UserModel (u1 and u2), add u1 to c1 and add u2 to c2.\n\nThat's unreasonable, u1 and u2 are same model but different reference, I must bind event on all same models.\n\nSo I think one model should be included in multiple collection. I make a unique UserModel u1, then add u1 to c1 and c2. Unfortunately, Backbone.Model has a 'collection' property, if I add u1 to c2, it will lost previous u1.collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/603",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/603/comments",
    "title": "make function has issues when used in conjunction with PhoneGap & Xcode",
    "created_at": "2011-09-08T19:23:32Z",
    "updated_at": "2011-09-14T21:09:01Z",
    "body": "When using Backbone with PhoneGap on Xcode, I'm running into some problems with the make function.\n\nFor instance, if I run this code:\nvar t = this.make(\"b\", {className: \"bold\"}, \"Bold! \");\nconsole.log(t);\n\nI get this in the log:\n[INFO] Object:\nouterHTML = <b classname=\"bold\">Bold! </b>\nclassName = \ninnerText = Bold! \nid = \ntitle = \nlang = \ndir = \ninnerHTML = Bold! \ncontentEditable = false\ntabIndex = -1\ndraggable = false\nouterText = Bold! \nchildren = [object HTMLCollection]\nisContentEditable = false\nstyle = [object CSSStyleDeclaration]\nclientWidth = 0\nscrollWidth = 0\noffsetWidth = 0\noffsetLeft = 0\nclientTop = 0\nlastElementChild = null\noffsetParent = null\nnextElementSibling = null\ntagName = B\npreviousElementSibling = null\nchildElementCount = 0\nscrollLeft = 0\nfirstElementChild = null\nclientLeft = 0\noffsetHeight = 0\nclientHeight = 0\noffsetTop = 0\nscrollTop = 0\nscrollHeight = 0\npreviousSibling = null\nparentNode = null\nlastChild = [object Text]\nbaseURI = null\nfirstChild = [object Text]\nnodeValue = null\ntextContent = Bold! \nnodeType = 1\nnodeName = B\nprefix = null\nchildNodes = [object NodeList]\nnextSibling = null\nattributes = [object NamedNodeMap]\nownerDocument = [object HTMLDocument]\nnamespaceURI = http://www.w3.org/1999/xhtml\nlocalName = b\nparentElement = null\ninsertAdjacentElement = function insertAdjacentElement() {\n        [native code]\n    }\ninsertAdjacentHTML = function insertAdjacentHTML() {\n        [native code]\n    }\ninsertAdjacentText = function insertAdjacentText() {\n        [native code]\n    }\nsetAttribute = function setAttribute() {\n        [native code]\n    }\nquerySelector = function querySelector() {\n        [native code]\n    }\nwebkitMatchesSelector = function webkitMatchesSelector() {\n        [native code]\n    }\nhasAttribute = function hasAttribute() {\n        [native code]\n    }\ngetAttributeNode = function getAttributeNode() {\n        [native code]\n    }\ngetAttributeNS = function getAttributeNS() {\n        [native code]\n    }\ngetElementsByTagNameNS = function getElementsByTagNameNS() {\n        [native code]\n    }\ngetElementsByClassName = function getElementsByClassName() {\n        [native code]\n    }\nremoveAttributeNS = function removeAttributeNS() {\n        [native code]\n    }\nquerySelectorAll = function querySelectorAll() {\n        [native code]\n    }\ncontains = function contains() {\n        [native code]\n    }\ngetClientRects = function getClientRects() {\n        [native code]\n    }\nscrollByPages = function scrollByPages() {\n        [native code]\n    }\nsetAttributeNode = function setAttributeNode() {\n        [native code]\n    }\nsetAttributeNS = function setAttributeNS() {\n        [native code]\n    }\nhasAttributeNS = function hasAttributeNS() {\n        [native code]\n    }\nblur = function blur() {\n        [native code]\n    }\nscrollIntoViewIfNeeded = function scrollIntoViewIfNeeded() {\n        [native code]\n    }\nscrollByLines = function scrollByLines() {\n        [native code]\n    }\ngetElementsByTagName = function getElementsByTagName() {\n        [native code]\n    }\nremoveAttribute = function removeAttribute() {\n        [native code]\n    }\nsetAttributeNodeNS = function setAttributeNodeNS() {\n        [native code]\n    }\ngetAttribute = function getAttribute() {\n        [native code]\n    }\nremoveAttributeNode = function removeAttributeNode() {\n        [native code]\n    }\ngetAttributeNodeNS = function getAttributeNodeNS() {\n        [native code]\n    }\nfocus = function focus() {\n        [native code]\n    }\nscrollIntoView = function scrollIntoView() {\n        [native code]\n    }\ngetBoundingClientRect = function getBoundingClientRect() {\n        [native code]\n    }\naddEventListener = function addEventListener() {\n        [native code]\n    }\nremoveEventListener = function removeEventListener() {\n        [native code]\n    }\ndispatchEvent = function dispatchEvent() {\n        [native code]\n    }\ninsertBefore = function insertBefore() {\n        [native code]\n    }\nappendChild = function appendChild() {\n        [native code]\n    }\nhasAttributes = function hasAttributes() {\n        [native code]\n    }\nNOTATION_NODE = 12\nCDATA_SECTION_NODE = 4\nisSupported = function isSupported() {\n        [native code]\n    }\nELEMENT_NODE = 1\nDOCUMENT_POSITION_DISCONNECTED = 1\nisEqualNode = function isEqualNode() {\n        [native code]\n    }\nENTITY_NODE = 6\nTEXT_NODE = 3\nENTITY_REFERENCE_NODE = 5\nDOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32\nDOCUMENT_FRAGMENT_NODE = 11\ncloneNode = function cloneNode() {\n        [native code]\n    }\nPROCESSING_INSTRUCTION_NODE = 7\nisDefaultNamespace = function isDefaultNamespace() {\n        [native code]\n    }\nremoveChild = function removeChild() {\n        [native code]\n    }\nhasChildNodes = function hasChildNodes() {\n        [native code]\n    }\nDOCUMENT_POSITION_PRECEDING = 2\nnormalize = function normalize() {\n        [native code]\n    }\ncompareDocumentPosition = function compareDocumentPosition() {\n        [native code]\n    }\nDOCUMENT_TYPE_NODE = 10\nCOMMENT_NODE = 8\nreplaceChild = function replaceChild() {\n        [native code]\n    }\nDOCUMENT_POSITION_FOLLOWING = 4\nATTRIBUTE_NODE = 2\nDOCUMENT_POSITION_CONTAINED_BY = 16\nDOCUMENT_NODE = 9\nDOCUMENT_POSITION_CONTAINS = 8\nisSameNode = function isSameNode() {\n        [native code]\n    }\nlookupPrefix = function lookupPrefix() {\n        [native code]\n    }\nlookupNamespaceURI = function lookupNamespaceURI() {\n        [native code]\n    }\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/595",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/595/comments",
    "title": "add get/set to View objects",
    "created_at": "2011-09-03T19:28:17Z",
    "updated_at": "2011-09-14T21:50:27Z",
    "body": "It would be nice if Views supported the get/set methods and published change events in the same fashion as Models.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/592",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/592/comments",
    "title": "Make content-type customizable for PUT and POST",
    "created_at": "2011-08-31T18:39:56Z",
    "updated_at": "2011-10-29T18:17:49Z",
    "body": "I'd like to request a contentType property on models and collections, which sync() would use in place of \"application/json\" in PUTs and POSTs, if it's set. In its adherence to REST-fulness, the JSON service I'm building against requires specific values like \"application/blah.blah-v1+json\".\n\nThanks, and great library BTW.\n\nGreg\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/590",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/590/comments",
    "title": "App.Router.trigger not firing",
    "created_at": "2011-08-30T22:56:58Z",
    "updated_at": "2011-10-13T03:15:41Z",
    "body": "App.Router.trigger('route:contact-index', function() {\n     console.log('Triggered');\n});\n\nsee: https://github.com/kevsmt/App/blob/master/app/modules/contacts/routes.js\nand: https://github.com/kevsmt/App/blob/master/lib/app.js#L91\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/589",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/589/comments",
    "title": "collection.add affects mutiple instances",
    "created_at": "2011-08-30T18:12:03Z",
    "updated_at": "2011-08-30T22:29:28Z",
    "body": "With this code below, i have my two instances of collection that are affected by the add method.\n\nvar model = Backbone.Model.extend({ defaults : { data : null }});\nvar models = Backbone.Collection.extend({ model: model });\nvar collection = Backbone.Model.extend({ defaults: { data : new models }});\nvar collections = Backbone.Collection.extend({ model: collection });\n\nvar m1 = new model({data: \"1\"});\nvar m2 = new model({data: \"2\"});\nvar m3 = new model({data: \"3\"});\nvar m4 = new model({data: \"4\"});\n\nvar c1 = new collection;\nvar c2 = new collection;\n\nvar dataC1 = c1.get(\"data\");\ndataC1.add(m1);\ndataC1.add(m2);\nc1.set({data: dataC1});\nconsole.log(c1.get(\"data\").length);\n\nc2.get(\"data\").add(m3);\nc2.get(\"data\").add(m4);\nconsole.log(c2.get(\"data\").length);\n\nGuillaume\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/588",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/588/comments",
    "title": "Collections do not delegate to model parse on reset/add",
    "created_at": "2011-08-30T18:01:25Z",
    "updated_at": "2014-06-03T01:16:44Z",
    "body": "Backbone allows for the ability to define a parse function for when data is loaded from the server. However if no parse is specified the default no-op occurs and the data is loaded into the collections models in their entirety. Would it make more sense to delegate to the model's parse first before entering it into the collection?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/587",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/587/comments",
    "title": "Backbone.Model.set: invalid 'in' operand attrs at 205 line",
    "created_at": "2011-08-30T09:29:03Z",
    "updated_at": "2011-08-30T12:35:36Z",
    "body": "The error was occured during 'model.save()' when server return a number value instead of object. I think there is need to check type of attrs before data processing.\n\nPS. Sorry for my eng.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/586",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/586/comments",
    "title": "option to use sugar.js instead of underscore.js",
    "created_at": "2011-08-29T10:17:15Z",
    "updated_at": "2011-11-25T04:22:41Z",
    "body": "i'm wondering if it might be possible to offer a version of backbone which depends on sugar.js instead of underscore.js?\n\nhaven't done any real investigation as to how easy this might be yet, but is there something that would completely get in the way of this? Ie something in underscore that sugar doesn't have...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/585",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/585/comments",
    "title": "backbone.js(0.5.3) Backbone.View.delegateEvents's problem",
    "created_at": "2011-08-26T07:09:29Z",
    "updated_at": "2012-01-16T19:22:22Z",
    "body": "I use backbone.js in my project, and i found a problem when I delegate events to the View\u3002In the soure code of backbone.js line:956 '$(this.el).unbind('.delegateEvents' + this.cid);' \u3002 I found that the unbind can't work, it lead to that  the event function was  binded repeated. whenever I render the view ,the event function is binded again without unbind it first.   so when I changed the line:956 to $(this.el).unbind(), it worked successfully.   I am confusing that if this is a serious issue in backbone.js.      thanks !  ps: I went to the jquery.com, and I found that this no namespace in using unbind and bind,but in delegate ,like \".undelegate( namespace )\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/584",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/584/comments",
    "title": "Using Backbone with _.noConflict() and jQuery.noConflict(true)",
    "created_at": "2011-08-26T05:42:49Z",
    "updated_at": "2014-04-02T15:06:55Z",
    "body": "This is a follow-up to my Stackoverflow question here: http://stackoverflow.com/questions/7196647/using-backbone-js-with-noconflict\n\nSince, I'm getting no word over there, I'm thinking it's an \"issue\". Is there any way to achieve this currently with Backbone or is `_` and `$` (if you include jQuery) hardcoded in?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/582",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/582/comments",
    "title": "Model is in inconsistent state when 'change:attribute' events are triggered",
    "created_at": "2011-08-25T15:46:10Z",
    "updated_at": "2012-01-13T22:09:00Z",
    "body": "Assume you have a model with 3 attributes: 'a', 'b' and 'c'. \n\nCurrently (as of Backbone 0.5.3), in the Model.set method, the 'change:attribute' events are triggered as soon as the attribute changes. In the case of our example, if all attributes change, the following will happen:\n1. The value of attribute 'a' will change.\n2. An event 'change:a' will be triggered from the model.\n3. The value of attribute 'b' will change.\n4. An event 'change:b' will be triggered from the model.\n5. The value of attribute 'c' will change.\n6. An event 'change:c' will be triggered from the model.\n\nEvents 'change:a' and 'change:b' leave the model in an inconsistent state, as not all the attributes have been changed yet, and so the model is in an \"in-between\" state of the previous and the new states.\n\nAssume further you have bound a function accessModel to the event 'change:a' on the model, and that accessModel needs to access the attribute 'c' of the model. In this case, by the time accessModel is called, after event 'change:a' has been triggered, the attribute 'a' will have changed, but the attribute 'c' will not yet have changed. This is obviously incorrect behaviour.\n\nA better alternative would be to trigger all the 'change:attribute' events only after having changed all of the applicable attributes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/581",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/581/comments",
    "title": "Keypath based observable as with batman.js",
    "created_at": "2011-08-25T07:30:00Z",
    "updated_at": "2011-08-26T07:08:57Z",
    "body": "For example from\n\nhttps://github.com/Shopify/batman\n\n```\nemployee.observe 'team.manager.name', (newVal, oldVal) ->\n  console.log \"you now answer to #{newVal || 'nobody'}!\"\nmanager = employee.get 'team.manager'\nmanager.set 'name', 'Bill'\n```\n\nThis has been a major problem with backbone.js for me at the moment and I have various imperfect work arounds for it. Backbone.js assumes a flat json structure and allows you to observe changes on single fields. However with document \nstore backends becoming fashionable returned JSON can be heavily nested and some kind of nested observer framework\nis required. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/576",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/576/comments",
    "title": "pushState + empty route: back button breaks",
    "created_at": "2011-08-23T17:31:13Z",
    "updated_at": "2012-01-22T18:09:11Z",
    "body": "Using backbone 0.5.3.\n\nI've got a backbone.js application, using pushState. One of my routes is empty (`routes: {'': 'front'}`). \n\nWhen using the back button, the application jumps to the correct route, but the 'front' route is executed right after the corresponding route. I can confirm this on latest Chrome and FF browsers.\n\nI've tracked the error down to this line in `checkUrl`:\n\n`this.loadUrl() || this.loadUrl(window.location.hash);`\n\n`loadUrl()` does not result in a matched route,  `this.loadUrl(window.location.hash)` is executed on an empty hash (`''`) the unexpected 'front' route is triggered.\n\nThis is clearly a bug, [as empty routes are supported](https://github.com/documentcloud/backbone/pull/68), but I am not sure how to fix it.\n\nWhat is the purpose of this fallback call to `loadUrl()`? Can it be dropped?\n\n```\n--- a/backbone.js\n+++ b/backbone.js\n@@ -831,7 +831,7 @@\n       if (current == this.fragment && this.iframe) current = this.getFragment(this.iframe.location.\n       if (current == this.fragment || current == decodeURIComponent(this.fragment)) return false;\n       if (this.iframe) this.navigate(current);\n-      this.loadUrl() || this.loadUrl(window.location.hash);\n+      this.loadUrl();\n     },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/574",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/574/comments",
    "title": "Collection Remove function has a bug",
    "created_at": "2011-08-21T00:40:47Z",
    "updated_at": "2012-01-17T15:29:33Z",
    "body": "The code seems to have been copied from the add code.\n\nThe bug is in the _remove for models part\n\n  this._remove(models[l], options);\n\nCould change to a while statement but smallest change is to change l to 0\n\n this._remove(models[0], options); \n\n---\n\n // Remove a model, or a list of models from the set. Pass silent to avoid\n    // firing the `removed` event for every model removed.\n    remove : function(models, options) {\n      if (_.isArray(models)) {\n        for (var i = 0, l = models.length; i < l; i++) {\n          this._remove(models[l], options);  // BUG!! change to  this._remove(models[0], options); \n        }\n      } else {\n        this._remove(models, options);\n      }\n      return this;\n    },\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/571",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/571/comments",
    "title": "Add save(), destroy(), set(), ... on Collections (brainstorming)",
    "created_at": "2011-08-18T15:18:07Z",
    "updated_at": "2012-01-17T16:17:28Z",
    "body": "I want to do bulk actions on some models. This is a proposal.\n\n``` javascript\ncollection.fetch();\n\nvar c_filtered = collection.filter(function (item) { return \"social\" === item.get(\"type\"); });\n\nc_filtered.save({type: \"social_media\"});\n```\n\nThe data can be sended in two ways (I think):\n- Array of id's and the data you want to change\n- Array of each model independent with the changes applied\n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/564",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/564/comments",
    "title": "backbone doesn't work properly on server without addition",
    "created_at": "2011-08-17T00:55:00Z",
    "updated_at": "2012-01-29T03:07:44Z",
    "body": "please change this line:\n\nvar $ = root.jQuery || root.Zepto;\n\nto:\n\nvar $ = root.jQuery || root.Zepto || require('jquery');\n\nto enable backbone on the server.\n\nchek,\n\nMaurice\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/563",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/563/comments",
    "title": "Model save, validation ok/missing, server fails, new data is present, should not",
    "created_at": "2011-08-16T09:39:13Z",
    "updated_at": "2012-02-24T23:55:42Z",
    "body": "When you save new data to a model, if validation success or it's missing, the new data is set to the model. So when calling server, if it fails, the new data it's saved in the model, and it should not.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/561",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/561/comments",
    "title": "Backbone.history.start() does not store the initial page in IE7",
    "created_at": "2011-08-16T07:30:08Z",
    "updated_at": "2012-01-17T20:48:53Z",
    "body": "I'm using 0.5.3 and have found that the initial page is not stored when Backbone.history.start() is used in IE7. All subsequent pages are fine. To fix this I've added:\n\nthis.iframe.document.open().close();\n\nafter the iframe has been added and it seems to have fixed it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/559",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/559/comments",
    "title": "change event should be triggered always on set not only when the value changes",
    "created_at": "2011-08-15T08:18:17Z",
    "updated_at": "2012-01-17T21:03:31Z",
    "body": "This is a proposal.\n\nRight now when I have a selected attribute on a model set to true, and I then call model.set selected: true - then change event is not emitted.  When I set it to false - it is.  And so on.\n\nI think it's plain bad because if somebody sets a field then you want to know about it no matter if the actual value changed or not, at least then you can write clean code relying on change events.  Otherwise you have to introduce your own events or some random fields which you set to make sure that a change event is emitted.\n\nIn my case I was implementing tabs with backbone, and I wanted the user to be able to click on an already selected tab.  And the whole thing broke down because backbone started comparing the value with the existing value and not sending the change events.\n\nThis reminds me of mysql which also doesn't return information that it updated a row if the value you set on it was the same than before.  This way you can't figure out if there was a row matching your query at all and have to do a select and then update or insert, instead of update and then insert if it was not there.\n\nLet me know what you think.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/558",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/558/comments",
    "title": "how to add extra arguements to the callback function in bind",
    "created_at": "2011-08-14T03:01:50Z",
    "updated_at": "2011-08-15T14:14:11Z",
    "body": "Hi All,\nI am new to Backbone, and I have a question.\n\nvar ships = new Backbone.Collection;\n\nships.bind(\"add\", function(ship) {\n  alert(\"Ahoy \" + ship.get(\"name\") + \"!\");\n});\n\nships.add([\n  {name: \"Flying Dutchman\"},\n  {name: \"Black Pearl\"}\n]);\n\nIn the above example, \"ship\" is a model in the collection \"ships\". I would like to know if I can pass an extra argument in the callback function so I can do something, like this\nships.bind(\"add\", function(ship, arg1, arg2) {\n  alert(\"Ahoy \" + ship.get(\"name\") + \"!\");\n  // .... do something using arg1, arg2\n});\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/556",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/556/comments",
    "title": "Cannot override toString in IE",
    "created_at": "2011-08-12T00:10:42Z",
    "updated_at": "2014-06-26T15:59:55Z",
    "body": "In order to consistently enumerate over all properties in browsers that don't yet support Object.getOwnPropertyNames, you need to add code to your extend method (and other methods that enumerate) such as:\n\n```\nvar specialProperties = [ \"constructor\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"toLocaleString\", \"toString\", \"valueOf\" ];\nvar specialPropertiesAreEnumerable = { toString: true }.propertyIsEnumerable(\"toString\");\n\nvar inheritProperties = function(properties, source, destination)\n{\n    // add enumerable properties\n    for (var p in properties)\n        if (properties.hasOwnProperty(p))\n            destination[p] = properties[p];\n\n    // add special properties, if necessary (e.g. IE 6/7/8)\n    if (!specialPropertiesAreEnumerable)\n        for (var i = 0, p; p = specialProperties[i]; i++)\n            if (properties.hasOwnProperty(p))\n                destination[p] = properties[p];\n};\n```\n\nSee https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#section_2\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/555",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/555/comments",
    "title": "Don't return a value from parent constructor call",
    "created_at": "2011-08-11T21:48:54Z",
    "updated_at": "2012-01-17T21:13:43Z",
    "body": "From the \"inherits\" function:\n\n```\nif (protoProps && protoProps.hasOwnProperty('constructor')) {\n    child = protoProps.constructor;\n} else {\n    child = function(){ return parent.apply(this, arguments); };\n}\n```\n\nProposed fix:\n\n```\nif (protoProps && protoProps.hasOwnProperty('constructor')) {\n    child = protoProps.constructor;\n} else {\n    child = function(){ parent.apply(this, arguments); };\n}\n```\n\nNote the \"return\" statement used in the current code vs. the proposed fix. A constructor function called by itself (without new) should never return a value. But even if users avoid return values from their own constructors, I can think of at least one bug this might cause, or at least one nice feature this would allow if the above code were changed to avoid a return value.\n\nFor example, to leverage inheritance in Backbone, currently I must extend Backbone.Model (or Collection, View, etc.). However, what if I just wanted to define a minimal set of classes that extend Object. I might try this:\n\n```\n// let anything to be extended\nObject.extend = Backbone.Model.extend;\n\n// namespace\nvar Acme = {};\n\n// define classes\nAcme.Person = Object.extend();\nAcme.Warrior = Acme.Person.extend();\nAcme.Ninja = Acme.Warrior.extend();\n\n// instantiate\nvar mary = new Acme.Person();\nvar will = new Acme.Warrior();\nvar john = new Acme.Ninja();\n\n// unit tests\nok(mary instanceof Object && mary instanceof Acme.Person && mary.constructor === Acme.Person);\nok(will instanceof Object && will instanceof Acme.Person && will instanceof Acme.Warrior && will.constructor === Acme.Warrior);\nok(john instanceof Object && john instanceof Acme.Person && john instanceof Acme.Warrior && john instanceof Acme.Ninja && john.constructor === Acme.Ninja);\n```\n\nThe unit tests fail when the return statement is used. However, if you remove the return from your parent constructor call, then all tests will pass.\n\nIn other words, if this change is made, then we can also use Backbone to define simple class inheritance without using Backbone-specific classes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/554",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/554/comments",
    "title": "Event after model's validate() completes.",
    "created_at": "2011-08-11T17:04:58Z",
    "updated_at": "2012-01-22T18:10:39Z",
    "body": "This is not an issue, well to me it is, more a feature request. Didn't know where to post it.\n\nAnyway, unless Im missing it somewhere it would be really nice to have an event fired after a model's validate() method completes.\n\nIm aware that callers can pass an error callback in the options parameter on a model's set() method. However, Im looking for a handy way of letting the model itself know when a validate() is completed.\n\nBelow is what Im doing now at the end of my validate() method to get this behavior.\nNote: I need to do it async so the validate() returns, otherwise attributes are not set.\n\nvalidate: function()\n{\n    // Validate...\n    window.setTimeout(this.validateComplete, 0);\n}\n\nThanks!\nKim Andersen\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/551",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/551/comments",
    "title": "Level of abstraction on top of jquery/zepto",
    "created_at": "2011-08-10T20:51:41Z",
    "updated_at": "2012-02-02T20:46:56Z",
    "body": "Is it possible or a good idea to add a level of abstraction on top of jquery/zepto dependency? I'm asking/proposing this because I don't want to use 31kb jquery just to make 5kb backbone work. For instance there is ender (http://ender.no.de/) which is 8-9 kb and provides almost the same api as jquery and provides all functionality that backbone requires. \nThe problem is that backbone doesn't support in any way substitution of jquery/zepto. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/550",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/550/comments",
    "title": "Proposed change in Backbone.View.make",
    "created_at": "2011-08-10T11:44:36Z",
    "updated_at": "2012-01-22T18:12:30Z",
    "body": "When you create new view like this:\n\n``` javascript\nBackbone.View.extend({\n                    id: 'someId',\n});\n```\n\nBackbone will create new div element with id \"someId\". If there's already DOM element with that id, Backbone would NOT attach this view to #someId and I think it's not an optimal behavior.\n\nThat is possible to override with el: \n\n``` javascript\nBackbone.View.extend({\n                    el: $('#someId')\n});\n```\n\nbut that's not an option if #someId is not available  at the moment of a view object creation. So I propose this little change to the make method: \n\n``` javascript\n\nmake : function(tagName, attributes, content) \n    {\n         # addition\n     if ('undefined' != typeof this.id)\n     {\n         var eElem = $('#' + this.id);\n         if ( eElem.length > 0 ) return eElem;\n     }\n         # end of addition\n\n\n     var el = document.createElement(tagName);\n     if (attributes) $(el).attr(attributes);\n     if (content) $(el).html(content);\n     return el;\n     }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/549",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/549/comments",
    "title": "Bug?  With Model constructor",
    "created_at": "2011-08-09T19:17:57Z",
    "updated_at": "2011-11-29T22:48:49Z",
    "body": "Hi,\n\nI'm not sure whether I should post this here or should post to the gGroup first to confirm it's a bug, but I am getting an \n\nWebpage error details\n\nUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; GTB6.5; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)\nTimestamp: Tue, 9 Aug 2011 18:57:30 UTC\n\nMessage: Object doesn't support this property or method\nLine: 142\nChar: 5\nCode: 0\nURI: https://www.hineynu.com/v3_test/js/backbone.js\n\nMy js code is:\n\n```\n    var App = App || { Models: {}, Data: {} };   // global variable to hold Backbone objects:  AppRouter, Models, Collections\n    Backbone.emulateHTTP = true;\n    App.Models.Student = Backbone.Model.extend(\n{\n    initialize: function () {\n        _.bindAll(this, \"test\"); //,\"productAdd\",\"productFetch\",\"productFetchSuccess\");\n        this.bind(\"add\", this.add);\n        this.bind(\"change\", this.test);\n    },\n    urlRoot: 'Data/Student',\n\n    test: function () {\n        //alert('test' + this.attributes.ixPerson);\n    }\n});\n\n    App.Models.StudentCollection = Backbone.Collection.extend({\n        model: App.Models.Student,\n        url: 'Data/Student',\n        initialize: function () {\n            _.bindAll(this); //,\"productAdd\",\"productFetch\",\"productFetchSuccess\");\n        },\n        comparator: function (student) {\n            return student.get(\"sName\");\n        }\n    });\n\n    var options = {};\n    options.success = function (collection, response) {\n        alert(response);\n    }\n\n    App.Data.StudentCollection = new App.Models.StudentCollection();\n    App.Data.StudentCollection.fetch(options);\n```\n\nThe error occurs in the fetch call above whether I pass options as an argument or not.  I have debugged the problem and error occurs after the ajax success callback in the Backbone.Model constructor when it calls\n\n```\nthis.set(attributes, {silent : true});\n```\n\n\"this\" refers to a Backbone.Collection, not Backbone.Model, which does not have a \"set\" method so it raises the error.  The call stack is\n\n```\nCollections.reset method:        this.add(models, {silent: true});\nCollections.add method:          this._add(models[i], options);\nCollections._add method:          model = this._prepareModel(model, options);\nCollections._prepareModel method:          model = new this.model(attrs, {collection: this});\n```\n\nThe error occurs regardless of the ajax response json from the server, for both\n\n{}\n\nand\n\n{\"ixStudent\":1}\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/548",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/548/comments",
    "title": "Maps in Collections",
    "created_at": "2011-08-09T14:19:49Z",
    "updated_at": "2012-01-17T22:05:22Z",
    "body": "Hi, it seems to me that backbone Collections currently supports only array/list of models.\n\nI'm just wondering how Collections could be used to allow maps.\n\nInstead of `new Collections ([ model1, model2, model3] )` one could do  `new Collections ({ key1: model1, key2: model2, key3: model3} )`\n\nThe reason for using maps would be that keys could be used to look up collections quickly, instead of having to use filter each time.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/547",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/547/comments",
    "title": "Chrome 14.0.835.29 dev-m : bb.history.start() error",
    "created_at": "2011-08-09T11:35:07Z",
    "updated_at": "2011-08-09T14:08:22Z",
    "body": "Throws the following error \n\nUncaught TypeError: Object #<Object> has no method 'bind'\n_.extend.startbackbone.js:795\naura.model.Item.Backbone.Model.extend.defaults.id\n\nTook me a while to figure this out ^_^\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/546",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/546/comments",
    "title": "Don't wrap views if using templates",
    "created_at": "2011-08-08T17:00:26Z",
    "updated_at": "2015-09-29T09:12:06Z",
    "body": "### Problem\n\nMost of my `render` methods end with something like:\n\n```\nvar template = _.template( $(\"#asset-template\").html(), data);\n$(this.el).html(template);\n```\n\nWith a template like:\n\n```\n<script id=\"asset-template\" type=\"text/template\">\n  <li class=\"asset {{ classes }}\">\n    <img src=\"{{ img_url }}\" data-url=\"{{ url }}\" data-description=\"{{ description }}\">\n    <span class=\"caption\">{{ description }}</span>\n  </li>\n</script>\n```\n\nSo the template gets inserted into `this.el` (`<div>` by default).\n\nBut I tend to write my templates 'fully-formed' (as above), not requiring any extra wrapper elements. This presents 2 problems:\n- Your `<li>` is wrapped in a div (producing invalid markup) or another unneeded element\n- Your events are more verbose: `'click .asset' : 'select'` instead of just `'click' : 'select'`\n\nOne solution would be to exclude the `<li>` from the template, and have Backbone construct it with the `el`, `className`, etc. properties. But a big benefit of using templates is that they are not mixed with the view logic, and that you can write them just like normal HTML.\n### Solution(s)\n\nMy suggestion would be a new `template` property:\n\n```\nApp.Views.Asset = Backbone.View.extend({\n\n  events: {\n    'click' : 'select'\n  },\n\n  template: _.template($(\"asset-template\").html()),\n\n    ...\n\n}\n```\n\nIf `template` is present, it's presumed the template is fully-formed and no wrapper elements are created.\n\nAnother option would be the ability to assign the template directly to `this.el`, while keeping the event delegation working:\n\n```\n// this currently works, but you lose event delegation\nthis.el = _.template( $(\"#asset-template\").html(), data);\n```\n\nCould be I'm missing something and it's possible to achieve 'unwrapped templates' now, but after using Backbone for a couple of projects I kept stumbling on this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/544",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/544/comments",
    "title": "Where is the C in MVC?",
    "created_at": "2011-08-08T11:47:21Z",
    "updated_at": "2011-08-08T16:39:12Z",
    "body": "Backbone doesn't have a Controller object (what used to be called Controller is in fact a Router and was fortunately renamed as such). In fact, why should it? As far as I see, Model, Collection and View objects are all that is needed:\n- The Model and Collection objects contain both data and business logic. They both know how to persist/restore their data to/from a remote server or a local storage.\n- The View object is tied to the DOM, contains UI logic, and is bound to a Model and/or a Collection.\n\nSo where does the Controller fit in here? Sound to me like it has disappeared.\n\nThoughts and comments?\n\nP.S. I don't know if this GitHub Issues is the right place to discuss this. It is the right audience though.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/543",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/543/comments",
    "title": "Add type checking, and throw appropriate errors for arguments passed to Backbone methods",
    "created_at": "2011-08-08T01:26:53Z",
    "updated_at": "2011-10-23T07:28:05Z",
    "body": "Particularly model.set. Please see the comment in issue #381:\n\nThis seems to be a common issue and though the actual issue is with jQuery, having valid type checking within Backbone would have surely helped:\n\nhttps://github.com/documentcloud/backbone/issues/381#issuecomment-1750865\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/540",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/540/comments",
    "title": "Possibility to not loadUrl() when calling start({pushState: true})",
    "created_at": "2011-08-05T20:30:08Z",
    "updated_at": "2011-08-17T18:40:52Z",
    "body": "For SEO reasons it's nice to render the whole page on the back end and using `pushState` first after the user starts to navigate. From what I can understand this will make the call to `loadUrl()` when calling `Backbone.history.start({pushState: true})` unnecessary (in this particular case).\n\nI suggest:\n\n``` javascript\nBackbone.history.start({pushState: true, navigate: false});\n```\n\nOr maybe I'm missing a very simple workaround?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/539",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/539/comments",
    "title": "Collection._prepareModel validates stale attrs object if model has defaults",
    "created_at": "2011-08-05T04:57:04Z",
    "updated_at": "2011-10-29T21:07:23Z",
    "body": "I overrode the `set` method of one of my models to coerce values to Dates, but found that validation was failing when I tried to fetch the corresponding collection.  This is because `Collection._prepareModel` validates the passed attributes rather than getting a fresh set from the model, but the `Model` constructor passes a new object to `set` if `defaults` is set.  As a result, the changes made in `set` are not reflected in the original `attrs` object which is validated.\n\nRelevant lines:\n`Model` constructor (135-138)\n\n``` javascript\nif (defaults = this.defaults) {\n    if (_.isFunction(defaults)) defaults = defaults.call(this);\n    attributes = _.extend({}, defaults, attributes);\n}\n```\n\n`Collection._prepareModel` (570-571)\n\n``` javascript\nmodel = new this.model(attrs, {collection: this});\nif (model.validate && !model._performValidation(attrs, options)) model = false; \n```\n\nI think doing `attributes = _.extend(attributes, defaults, attributes);` would work, but there's likely a better solution.\n\nTest case:\n\n``` javascript\nvar MyModel = Backbone.Model.extend({\n    defaults: {\n        theDate: null\n    },\n\n    validate: function (attributes) {\n        if (!_.isDate(attributes.theDate)) {\n            return 'theDate must be a date';\n        }\n    },\n\n    set: function (attributes, options) {\n        if (_.isNumber(attributes.theDate)) {\n            attributes.theDate = new Date(attributes.theDate);\n        }\n        Backbone.Model.prototype.set.call(this, attributes, options);\n    }\n});\n\nvar model = new MyModel({ theDate: (new Date(1, 1, 2011)).getTime() });\nconsole.log(model.get('theDate')); // Date {Sat Aug 04 1906 00:00:00 GMT-0500 (CST)}\n\nvar MyModelList = Backbone.Collection.extend({\n    model: MyModel\n});\n\nvar list = new MyModelList([{ theDate: (new Date(1, 1, 2011)).getTime() }]);\nconsole.log(list.length); // 0!\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/536",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/536/comments",
    "title": "Potential TypeError during Backbone.Event.trigger execution",
    "created_at": "2011-08-04T15:01:56Z",
    "updated_at": "2011-08-04T15:12:00Z",
    "body": "In the implementation of Backbone.Event.bind(ev,callback) it is not checked that callback is a function.\n\nIf callback is undefined, null or any other type different from Function a TypeError occurs when calling Backbone.Event.trigger because of this:\n<code>\n        for (i = 0, l = list.length; i < l; i++) {\n          list[i].apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n</code>\nIt would be enough to add the following check to Backbone.Event.bind:\n<code>\nif(_.isFunction(callback){\n      list.push(callback);\n}\n</code> \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/534",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/534/comments",
    "title": "Option to have backbone package the data for create and update requests under a named scope (enhancement)",
    "created_at": "2011-08-03T21:15:28Z",
    "updated_at": "2011-08-05T16:52:08Z",
    "body": "Hi,\n\nhttp://blog.project-sierra.de/archives/1788\n\nAs the article above explains Ruby on Rails expects the data in #create and #update RESTful calls to be scoped under the name of the resource.\n\nExample:\nLet's say we're saving a new book that has a title and author. Right now backbone is sending over this data\n\n```\n{\"title\" => \"Hamlet\", \"author\" => \"William Shakespeare\"}\n```\n\nIt would be nice if backbone could be configured to scope the data under the name of the model. Like so:\n\n```\n{\"book\" => {\"title\" => \"Hamlet\", \"author\" => \"William Shakespeare\"}}\n```\n\nI'm a JS noob, but here's what the change might look like. Wrote some tests as well.\n\nhttps://github.com/monicao/backbone/commit/db1fbe29f2cd31a4b1c7f34936a1131436653bd2\n\nIf this makes sense to you I will make a pull request.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/531",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/531/comments",
    "title": "Default context in Events.bind makes the tests overflow the stack",
    "created_at": "2011-08-02T09:53:30Z",
    "updated_at": "2011-08-03T20:11:50Z",
    "body": "Since commit 39b36af I cannot run the tests without getting infinite recursion errors in Chrome and FireFox. What was the rationale for setting the default context in bind() rather than trigger() ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/527",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/527/comments",
    "title": "Bind change to array in model",
    "created_at": "2011-08-02T02:54:37Z",
    "updated_at": "2013-01-07T21:20:55Z",
    "body": "I am having issues properly binding an attribute that is an array.  I would like to be able to bind a change event to it, but it does not seem be be picking up the change when my array grows in size. I am able to get it to work by adding another attribute and changing it whenever my array changes, but it seems rather dirty and was wondering if there is a better way to do this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/526",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/526/comments",
    "title": "[question] how to handle scroll event for window?",
    "created_at": "2011-08-02T00:51:08Z",
    "updated_at": "2011-08-04T12:48:53Z",
    "body": "``` javascript\nevents: {\n  \"scroll\": \"loadMore\"\n}\n```\n\nI'm not sure how to do it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/525",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/525/comments",
    "title": "Add validate to collection",
    "created_at": "2011-08-02T00:49:27Z",
    "updated_at": "2014-03-25T20:26:38Z",
    "body": "There are times when a model is valid on it's own but is not valid for the collection it is being added to. Although at present this can be handled in the model itself this is less than graceful. It is also significantly more complex in cases where the model is a part of many collections.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/523",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/523/comments",
    "title": "href in template not working",
    "created_at": "2011-08-01T18:00:17Z",
    "updated_at": "2011-08-03T18:43:26Z",
    "body": "Hi,\nI'm using backbone and its working fine expect for one issue: href tags in templates don't work.\n\nIf I create a template like this: \n\n``` javascript\nshow_template: _.template('<a href=\"{{value}}\"><h2>{{name}}</h2></a>')\n```\n\nit works.\n\nbut if I change the template to:\n\n``` javascript\n        show_template: _.template($('#show-link-template').html())\n```\n\nwhere show-link-template is:\n\n``` javascript\n<div id=\"show-link-template\" style=\"display:none\"><a href=\"{{value}}\"><h2>{{name}}</h2></a></div>\n```\n\nthe {{value}} is not overwritten.\n\nNote: I've changed template settings to:\n\n``` javascript\n_.templateSettings = {\n        interpolate : /\\{\\{(.+?)\\}\\}/g\n      };\n```\n\nCan anyone help me?\nBest regards,\nMigrate\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/520",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/520/comments",
    "title": "How to DRY this routes (regular exp?)",
    "created_at": "2011-07-31T20:24:55Z",
    "updated_at": "2012-12-21T18:14:36Z",
    "body": "to match `public` what ever slashes are: \n\n``` javascript\n'/public/' : 'public' \n'/public'  : 'public' \n'public/'  : 'public' \n'public'   : 'public' \n```\n\nHow to rewrite them for DRY sake?\n\njust moved this from http://groups.google.com/group/backbonejs/browse_thread/thread/4a281fc01f83e707\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/516",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/516/comments",
    "title": "Test Failures",
    "created_at": "2011-07-30T14:33:05Z",
    "updated_at": "2011-10-29T21:07:30Z",
    "body": "When I try to run the test suite, it locks my browser for a couple minutes and then dies with a few stack overflow errors. If I comment out the tests that failed and rerun, I see a lot of failing tests. I'm running the tests by opening test/test.html in a browser (tried Chrome 12 and Safari 5.1 on Lion). Am I doing something wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/505",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/505/comments",
    "title": "push, pop and maybe maxSize?",
    "created_at": "2011-07-26T10:40:00Z",
    "updated_at": "2012-02-08T22:07:17Z",
    "body": "hi, I'm using collections to store events that come from the server so widgets subscribe to de add event to be notified when new events arrive.\n\nthe thing is that after some time the old events are no longer needed so I would like to have some kind of circular buffer or a list with a maximum size that when the collection reaches that size the last element is droped.\n\nI was looking at the api of collection and it doesn't seem to make it easy to fetch and remove elements by index, is there an easier way to do collection.remove(collection.at(collection.length - 1)) ?\n\npush would be collection.add(item, {at: 0})\n\nI think push and pop would make for a cleaner and easier to understand api, if I make the patch, would it be accepted?\n\nthe other possible patch is the maxSize one but it's different from the last one and one can be implemented without the other.\n\nother thing, the documentation doesn't specify if add by default adds at the end or at the beggining.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/498",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/498/comments",
    "title": "Hashes starting with '#'",
    "created_at": "2011-07-23T03:50:52Z",
    "updated_at": "2012-01-23T15:52:04Z",
    "body": "I'm working on a project where a page identifier can actually start with an '#' (in this specific case, that's an [TV show name](http://www.imdb.com/title/tt1861475/)). The problem is that the hashStrip regex removes multiple occurrences of '#' and not just the first one, which  I see no reason to do. Changing the regex from `/^#*/` to `/^#/` would solve this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/493",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/493/comments",
    "title": "Success callback for Model set function",
    "created_at": "2011-07-21T20:47:29Z",
    "updated_at": "2012-01-23T18:34:13Z",
    "body": "I'm using a jQuery dialog to show a form to modify a temporary model.\n\nSo if set is success I can close the dialog, and if there's some error in validation I can show the errors without closing the dialog.\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/492",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/492/comments",
    "title": "Cannot read property 'localStorage' of undefined",
    "created_at": "2011-07-21T11:51:37Z",
    "updated_at": "2012-04-22T19:40:25Z",
    "body": " Backbone.js 0.5.1\n\nvar User = Backbone.Model.extend({urlRoot:\"/users\"}) ;\nvar u = new User ;\nu.set({name:'pankaj'}) ;\nu.save() ;\nTypeError: Cannot read property 'localStorage' of undefined\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/488",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/488/comments",
    "title": "No way to do complex sorts (like descending alphabetic)",
    "created_at": "2011-07-19T23:59:18Z",
    "updated_at": "2012-01-23T16:13:11Z",
    "body": "Since Backbone uses Underscore-style comparators, some types of sort are not possible \u2014 like descending alphabetic.\n\nIt's also impossible to for comparators to have complex sort conditions, like \u201csort alphabetically, but put starred items first\u201d.\n\n[Here is a gist](https://gist.github.com/1093975) that extends Backbone.Collection to use ECMAScript-style comparators, but I\u2019m not sure to suggest for a long-term solution.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/486",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/486/comments",
    "title": "Collection#fetch w/ data documentation needs updating?",
    "created_at": "2011-07-19T15:21:40Z",
    "updated_at": "2011-07-23T13:28:44Z",
    "body": "The documentation states that w/ \"jQuery.ajax options can also be passed directly as fetch options\" via:\n\n```\nDocuments.fetch({data: {page: 3}})\n```\n\nBut, I found (using v0.5.1) that I had to use:\n\n```\nDocuments.fetch({data: 'page=3'})\n```\n\nfor it to work. I'm I doing something wrong or does the documentation need updating?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/485",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/485/comments",
    "title": "wrapError not compatible with jQuery's passed arguments",
    "created_at": "2011-07-19T02:02:16Z",
    "updated_at": "2013-12-18T13:54:33Z",
    "body": "When jQuery calls the error callback, is passes three arguments - `error(jqXHR, textStatus, errorThrown)`. `wrapError` only uses the first argument (treating it as `resp`, which is somewhat wrong as its not the response, its an jQuery XMLHttpRequest-compatible object),  making `textStatus` and `errorThrown` inaccessible.\n\nZepto passes two arguments - `xhr` and `status`, which is also not compatible with wrapError.\n\nThe simplest solution that won't break backward compatibility and work with both jQuery and Zepto would be to just pass everything after the first argument as additional arguments to the wrapped onError, something like:\n\n`onError.apply(null, [model, resp, options].concat(Array.prototype.slice.call(arguments, 1)))`\n\nThan one would use `function(model, jqXHR, options, textStatus, errorThrown)` to access everything.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/483",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/483/comments",
    "title": "Make Backbone.Model.prototype.toJSON() recursive",
    "created_at": "2011-07-18T09:00:37Z",
    "updated_at": "2015-01-29T12:30:40Z",
    "body": "For cases where a model contains attributes which are either another model or a collection of models, calling toJSON() on the containing model should invoke toJSON() calls on the contained models / collections instead of returning them as-is.\n\n``` javascript\nBackbone.Model.prototype.toJSON = function() {\n    var json = _.clone(this.attributes);\n    _.each(json, function(value, name) {\n        _.isFunction(value.toJSON) && (obj[name] = value.toJSON());\n    });\n    return json;\n}\n```\n\nThis could also be made optional,\n\n``` javascript\nBackbone.Model.prototype.toJSON = function(recursive) {\n    var json = _.clone(this.attributes);\n    recursive && _.each(json, function(value, name) {\n        _.isFunction(value.toJSON) && (obj[name] = value.toJSON());\n    });\n    return json;\n}\n```\n\nIf you prefer, I can create a pull request for that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/482",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/482/comments",
    "title": "Allow context to be passed as third parameter in Backbone ",
    "created_at": "2011-07-18T09:00:25Z",
    "updated_at": "2011-07-26T17:21:28Z",
    "body": "The Backbone Event Bind function should allow a third argument of context, which can automatically use _.bind to bind the context to the callback.\n\nSo instead of writing this:\n\n```\nthis.model.bind('change:parameter', _.bind(this.myFunction, this));\n```\n\nyou could write this:\n\n```\nthis.model.bind('change:parameter', this.myFunction, this);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/480",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/480/comments",
    "title": "Setting \"this\" context on a defaults() function",
    "created_at": "2011-07-18T05:45:31Z",
    "updated_at": "2011-07-18T13:04:04Z",
    "body": "When using a function as the defaults property in a class extending Backbone.Model, it should be ran with \"this\" set to the current instance being created. The specific case where this was problematic for me is when I wanted to give a collection access to its parent model:\n\n``` javascript\nvar BarCollection = Backbone.Collection.extend({\n    initialize: function(models, options) {\n        this.parent = options.parent;\n    }\n};\nvar Foo = Backbone.Model.extend({\n    defaults: function() { return {\n        bars: new BarCollection(null, {parent: this}) // <-- \"this\" here is just window, not the Backbone.Model instance\n    }; },\n    ...\n});\n```\n\nI'm pushing commit 909c427c that fixes that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/479",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/479/comments",
    "title": "`fetch()` with option `add:true` doesn't fire any events",
    "created_at": "2011-07-16T09:14:28Z",
    "updated_at": "2012-03-19T18:17:11Z",
    "body": "Apologies if I've missed something, but it seems to me, that calling `fetch({ add: true })` doesn't trigger any events on success. Is that the case or did I make a mistake in my setup? When using \n\n```\nloadMore: ->\n  @fetch({ add: true, success: => @trigger('add') })\n```\n\nfrom within my collection, things work as expected.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/478",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/478/comments",
    "title": "Backbone.Model.get() should be used internally instead of accessing the attributes array directly",
    "created_at": "2011-07-14T13:35:44Z",
    "updated_at": "2012-02-11T20:15:06Z",
    "body": "Assuming someone would overwrite the  [Backbone.Model.get()](http://documentcloud.github.com/backbone/docs/backbone.html#section-25)  method.\nIf the get() method would be used internally where possible (e.g., in  [Backbone.Model.has()](http://documentcloud.github.com/backbone/docs/backbone.html#section-27)), this would then result in a more consistent model. Currently, when overwriting the get() method, this has only little effect on the rest of the API.\n\nE.g., the has() method [Backbone.Model.has()](http://documentcloud.github.com/backbone/docs/backbone.html#section-27) would then translate from this:\n\n``` javascript\nhas : function(attr) {\n      return this.attributes[attr] != null;\n    },\n```\n\ninto this:\n\n``` javascript\nhas : function(attr) {\n      return this.get(attr) != null;\n    },\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/477",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/477/comments",
    "title": "Backbone Model's should have loading, loaded, and error events",
    "created_at": "2011-07-13T22:19:22Z",
    "updated_at": "2013-12-20T01:57:39Z",
    "body": "In a project I'm working on using Backbone Model's I've found it extremely useful to trigger 'loading' at the start of fetching a model's data (so that a view could tell the user that network activity is happening, for example); firing 'loaded' so that parts of the system that need to work once the data is available can continue (rather than using the standard Backbone callbacks, which are less Backbone-y in a sense since Backbone events are easier to bind aspects of the system together); and an 'error' Backbone event if an error occurs. I think it would be useful for Backbone to bake these events into the standard Model superclass.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/476",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/476/comments",
    "title": "Backbone Model defaults system is not subclass safe",
    "created_at": "2011-07-13T22:15:11Z",
    "updated_at": "2015-07-09T00:07:13Z",
    "body": "Backbone provides a standard 'defaults' object literal that you can add to a Model to establish defaults. However, if you are subclassing models then this is not safe.\n\nFor example, imagine if you have:\n\nvar Car = Backbone.Model.extend({\n  defaults: {\n    property1: 'foobar'\n  }\n});\n\nvar Toyota = Car.extend({\n  defaults: {\n    property2: 'hello'\n  }\n});\n\nWhen Toyota is made property2 will be present, but not property1.\n\nBackbone should instead have a getDefaults() method that provides an object literal. Subclasses can over-ride this (and call their super-classes getDefaults() to chain defaults together) so that when Backbone mixes its defaults in it can aggregate them all together, with something like:\n\nBackbone.Model = function(attributes, options) {\n    attributes || (attributes = {});\n    attributes = _.extend({}, this.getDefaults(), attributes);\n\nWhere the default getDefaults() implementation would just be an empty {}.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/475",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/475/comments",
    "title": "Backbone.Model.toJSON() documentation",
    "created_at": "2011-07-13T08:25:38Z",
    "updated_at": "2012-01-23T16:37:22Z",
    "body": "Hi,\n\nthere is a link in the documentation for Backbone.Model.toJSON() which is incorrect.  The toJSON method is not documented here:\n\nhttps://developer.mozilla.org/en/JSON#toJSON()_method\n\nI would also recommend that you add another line to to the example to demonstrate the magic of toJSON:\n\nalert(JSON.stringify(artist));\n\nalert(JSON.stringify(artist.toJSON()));\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/472",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/472/comments",
    "title": "fetched data's id property is mandatory should be mentioned in doc",
    "created_at": "2011-07-10T01:39:18Z",
    "updated_at": "2012-01-15T22:59:14Z",
    "body": "I encountered a problem that model.destroy() don't issue a DELETE to server.\nFinally I found out that's because I missed 'id' in json data from server when I do a collection.fetch().\nAnd Backbone think my fetched data isNew()...\n\nI admit that I missed the 'id' section in document until now, \nsince I think it's a kind of function to get id and there is an automatically generated cid so I don't think 'id' is that important then I just skipped over it...\n\nI think the document would be better if an example server json data attached to fetch() function's doc.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/471",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/471/comments",
    "title": "Allow bind and unbind methods to take 'this' instance",
    "created_at": "2011-07-08T21:08:48Z",
    "updated_at": "2012-01-23T16:49:57Z",
    "body": "A common pattern is to have a view that binds to a model; when the view is removed it should clean up its listeners using unbind. One problem with the current way Backbone does things is that you have to do something like this to handle things (pseudocode):\n\nMy view class:\n\ninitialize: function(){\n   this.changeListener_ = this.render.bind(this);\n   this.model.bind('change:revision', this.changeListener_);\n},\n\nrender: function(){\n  // ...\n},\n\nremove: function(){\n   this.model.unbind('change:revision', this.changeListener_);\n}\n\n---\n\nMost of the time you want to bind your Backbone listeners to an instance. However, in order to safely unbind them you have to keep an instance variable around for them to truly unbind them. This gets gross and leads to code clutter.\n\nIf the bind and unbind methods allowed an optional instance variable as their third argument, this goes away and the code becomes much cleaner (pseudocode):\n\nMy view class:\n\ninitialize: function(){\n   this.model.bind('change:revision', this.render, this);\n},\n\nrender: function(){\n  // ...\n},\n\nremove: function(){\n   this.model.unbind('change:revision', this.render, this);\n}\n\n---\n\nNow there is enough context to unbind 'change:revision' for this.render bound to the 'this' variable. When Backbone makes the call it can simply do an apply and pass in the optional third argument.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/467",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/467/comments",
    "title": "View rendering with Zepto",
    "created_at": "2011-07-06T18:53:30Z",
    "updated_at": "2011-07-06T19:04:04Z",
    "body": "Using Zepto.js, I have code similar to the following:\n\n$('#content').html(view.render().el);\n\nInstead of inserting the contents of view.el into the #content div, [Object HTMLDivElement] gets inserted instead.  If I switch back to jQuery, everything works fine.\n\nThe workaround I'm using is to empty out the target div first and then append my content:\n\n$('#content').html('');\n$('#content').append(view.render().el);\n\nThis behavior appears to be the result of using Zepto's .html() method with what is returned by Backbone's view.el method.  If I use a string, e.g. \"<div>test</test>\", in Zepto's method, there are no issues.\n\nIs this a bug with either framework or am I doing something wrong on my end?  Thanks...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/466",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/466/comments",
    "title": "Binding methods automatically to this (by convention)",
    "created_at": "2011-07-06T14:41:47Z",
    "updated_at": "2013-09-22T09:44:44Z",
    "body": "Hi all,\n\nI have come up, with a way of creating bindings automatically, withoout having to call _.bindAll(this, ...) on each and every function you use.\n\nIn the initialize method I just call this.autoBind(). \n\nThen I add methods to Backbone.Collection.extend({}) and they get automatically bound to 'this' during initialize.\nIf I don't want a function to be bound I prefix it with __ e.g. __someFunction by Convention.\n\n```\nThis is the code:\n//this is a generic function which should be moved to a Baseclass of Backbone or a Backbone extension\n_.extend (Backbone.Collection.prototype, {\n    autoBind: function () {\n        var self = this;\n        var funcs = _.functions(this.constructor.prototype);\n        var protoFuncs = ['autoBind', 'constructor'].concat(\n                _.functions(Backbone.Collection.prototype),\n                _.functions(Backbone.Model.prototype));\n        _.each(funcs, function(f){\n            if(!_.startsWith(f, '__') && _.indexOf(protoFuncs, f) === -1)\n            {\n                self[f] = _.bind(self[f], self);\n            }\n        });\n    }\n})\n```\n\nI think it's a good idea, so let me know your comments.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/465",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/465/comments",
    "title": "Detect property changes (and get rid of getters/setters)",
    "created_at": "2011-07-06T13:22:30Z",
    "updated_at": "2014-12-05T01:50:02Z",
    "body": "It would be neat to get rid of getters/setters for attributes. I know they are used for synchronization and other attribute tracking, but I think this could be achieved much neater using `__defineGetter__` and `__defineSetter__`. Maybe there is a particular reason why this approach isn't used already that I've overlooked?\n\nThis is a proof of concept implementation. _All credit to Elijah Grey:_\n\n```\n  // object.watch\n  if (!Object.prototype.watch)\n    Object.prototype.watch = function (prop, handler) {\n        var val = this[prop],\n        getter = function () {\n            return val;\n        },\n        setter = function (newval) {\n            return val = handler.call(this, prop, val, newval);\n        };\n        if (delete this[prop]) { // can't watch constants\n            if (Object.defineProperty) // ECMAScript 5\n                Object.defineProperty(this, prop, {\n                    get: getter,\n                    set: setter\n                });\n            else if (Object.prototype.__defineGetter__ && Object.prototype.__defineSetter__) { // legacy\n                Object.prototype.__defineGetter__.call(this, prop, getter);\n                Object.prototype.__defineSetter__.call(this, prop, setter);\n            }\n        }\n    };\n\n  // object.unwatch\n  if (!Object.prototype.unwatch)\n    Object.prototype.unwatch = function (prop) {\n        var val = this[prop];\n        delete this[prop]; // remove accessors\n        this[prop] = val;\n    };\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/464",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/464/comments",
    "title": "Is model.collection a good thing ?",
    "created_at": "2011-07-06T08:47:00Z",
    "updated_at": "2012-01-23T17:12:49Z",
    "body": "Hi,\nwhen a model is added to a collection, the collection points to the model, and the model points to the collection. As far as I understand, this is to allow the model to compute its URL from the collection's URL when model.fetch() is invoked.\nThe drawback of this is that a model cannot be added to several collections, which could be really convenient.\n\nI'm working on a large AJAX application and you're be glad to know that we are intensively using Backbone. Same data need to be displayed in many places, and sometimes the same collections appears here unsorted and there sorted/filtered. Today I have to workaround this either by adding indirections (intermediate models) between my widgets and my collections, or by having two instances of my models, one for each collection, which is not satisfactory at all.\n\nI suggest that a model does not point to the collection it belongs to. It would not be that hard to set the URL of the model before to fetch it (if you really need that), and it would allow to design more powerful application models.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/463",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/463/comments",
    "title": "Backbone.Model.Extend problem",
    "created_at": "2011-07-06T06:35:49Z",
    "updated_at": "2011-07-06T07:33:12Z",
    "body": "Hello guys,\n\nI downloaded the development version of the library and when i tried to use Backbone.Model.Extend the browser said undefined. So I looked at the source code and saw that the function is defined with \"e\" instead of \"E\".\n\n// Set up inheritance for the model, collection, and view.\n  Backbone.Model.extend = ...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/462",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/462/comments",
    "title": "Sync return changed from 0.3.3 to 0.5.1",
    "created_at": "2011-07-05T19:37:53Z",
    "updated_at": "2011-07-05T19:42:58Z",
    "body": "Under 0.3.3, when you called fetch() on a collection, it returned the collection.\n\nUnder 0.5.1, when you call fetch() on a collection, it returns the jQuery ajax object.\n\nThis prevents you from chaining the creation of a collection to an immediate fetch:\n\ntweets = new Tweets().fetch();\n\nrequiring you to do:\n\ntweets = new Tweets();\ntweets.fetch();\n\nIs this an intended change?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/461",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/461/comments",
    "title": "CoffeeScript integration creates class variables differently than straight Backbone",
    "created_at": "2011-07-05T17:34:41Z",
    "updated_at": "2011-10-29T18:00:23Z",
    "body": "If I declare a subclass by using a Backbone class' `extend` function and pass it a second object literal from which it should derive its class variables, Backbone stores these properties in the `constructor` of the object.\n\nIf I declare a subclass by using CoffeeScript's `extends` keyword and declare its class variables the way CoffeeScript  wants me to, they get stored in the `prototype` of the object.\n\nThe latter approach seems more correct to me, but the inconsistency causes a problem for plain vanilla JS subclasses from which I need to inherit, since they don't know where to expect their class variables to appear.\n\nAm I doing something dumb, or is there a discrepancy here? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/460",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/460/comments",
    "title": "hash-bang URLs are broken in 0.5",
    "created_at": "2011-07-05T05:48:50Z",
    "updated_at": "2011-07-05T13:03:48Z",
    "body": "I used to have #! hashes, which tells Google to index my app:\n\nhttp://code.google.com/web/ajaxcrawling/\nhttp://stackoverflow.com/questions/3009380/whats-the-shebang-hashbang-in-facebook-and-new-twitter-urls-for\n\nMy exclamation marks are now stripped out. I tried patching it on line 741, by taking out the exclamation mark, but looks like it's more involved as it wont fire routes for thing with hashbangs in them. I didn't look into it further.\n\nThing is I want this, and I had to take it out, and I should not have had to do that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/458",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/458/comments",
    "title": "tool for documentation?",
    "created_at": "2011-07-04T16:33:19Z",
    "updated_at": "2011-07-05T13:12:34Z",
    "body": "what tool do you use the generate this document? \n\nhttp://documentcloud.github.com/backbone/docs/backbone.html \n\nthe format is very handy and pleasant to read.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/456",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/456/comments",
    "title": "questions about pushState and history",
    "created_at": "2011-07-04T10:16:43Z",
    "updated_at": "2011-11-02T11:49:02Z",
    "body": "hi,\nI'm trying to upgrade Backbone in my project from 0.3.3 to 0.5.0 (https://github.com/documentcloud/backbone/commit/d2082a54cf428907844a16b37ccb9e5b26a414b9 ) and want to set pushState as true when call Backbone.history.start(), but .... \n\nhere is the code:\n\n``` javascript\nvar router = Backbone.Router.extend({\nroutes: {                                                                            \n        \"\"                                       : \"home\",                                                       \n        \":uid\"                                   : \"profile\",                                                                          \n        \"search/:query\"                          : \"search\"                              \n    }\n})\n```\n\nand \n\n``` javascript\nnew router();\nBackbone.history.start({pushState: true});\n```\n\nThe project is ok on IE678.. but can't work on pushState-capable browser such as FF and Chrome...\nwhen I click any link on homepage,  the URL has changed but can not trigger the correctly events that defined in router...\n\nIs there someting wrong with my code or Backbone latest version?\n\nThanks~\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/455",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/455/comments",
    "title": "Is it possible to have multiple routers on a single page?",
    "created_at": "2011-07-02T19:24:17Z",
    "updated_at": "2013-11-29T10:06:04Z",
    "body": "I've started to build a widget using backbone that can be easily dropped into any webpage. Someone might want to include multiple instances of this widget on the same page. Or I might create additional widgets and need to include more than one on a page. This widget allows cross-domain retrieval of data to be displayed on an external site.\n\nThis widget is actually a mini-app and needs to be able to display different views based on actions a user takes. I'm using a backbone router/controller to display the right view. The selected view needs to be bookmarkable and browser back/forward buttons should navigated through user interactions.\n\nBut what if multiple mini-apps are embedded on a single page? Is this possible using backbone's routers? How would having multiple routers work? Can a router listen to just part of the hash string?\n\nSo you can better understand the use case, imagine a sports league that wants to display schedules and standings. A widget can be included onto their webpage that displays a list of divisions. Clicking a division displays a list of teams and a game schedule for the division. Clicking on a team displays the schedule just for that team. A team might want to send a link out to their users of their own schedule, so each team's schedule needs to be bookmarkable.\n\nThis works fine if there is only one \"schedule widget\" on the page. But what if the league wants to include two instances of this widget? Perhaps they have a widget displaying the \"current season\" and another one displaying \"last season\" so that people can go and view the standings and results.\n\nLastly, how about interacting with non-backbone hash-string interactions on the page? I'm assuming there really isn't anything I could do if something on the page has a link like `<a href=\"#top\">Back to top</a>`.\n\nAny thoughts or suggestions would be appreciated!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/454",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/454/comments",
    "title": "Doc for Backbone.sync() is out of sync with code in 0.5.0",
    "created_at": "2011-07-02T11:15:59Z",
    "updated_at": "2011-07-02T14:04:07Z",
    "body": "The docs still gives the method signature as `sync(method, model, success, error)`, while it has changed in the actual implementation (v0.5.0), it has changed to `sync(method, model, options)`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/453",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/453/comments",
    "title": "Typo on backbone home page in Upgrading to 0.5.0 section",
    "created_at": "2011-07-02T10:25:11Z",
    "updated_at": "2011-07-02T13:58:20Z",
    "body": "There is probably a typo on [backbone homepage](http://documentcloud.github.com/backbone/) in **Upgrading to 0.5.0** section:\n\n```\nThe previous saveLocation and setLocation functions have peen replaced by navigate.\n```\n\n`have peen` should be probably `have been` I think.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/452",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/452/comments",
    "title": "Hashbangs and Routing",
    "created_at": "2011-07-02T06:27:52Z",
    "updated_at": "2011-07-02T13:56:13Z",
    "body": "I'm having issues since upgrading to .5.0 with hashbangs and routing. This worked before and is no longer working after changing Controller to Router.\n\nExample:\n\n```\nRouter = Backbone.Router.extend({\n  routes: {\n    \"!/\" : \"index\"\n  },\n  index: function() {\n    console.log('test');\n  }\n});\n\nnew Router();\nBackbone.history.start();\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/451",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/451/comments",
    "title": "router.navigate triggerRoute won't work with pushState",
    "created_at": "2011-07-01T22:36:52Z",
    "updated_at": "2011-07-01T23:10:45Z",
    "body": "I'm using backbone 0.5.0-pre and am attempting to update to 0.5.0.\n\nI see that Backbone.router.setLocation was changed to Backbone.router.navigate and the \"triggerRoute\" parameter was added to optionally call Backbone.history.loadUrl.\n\nhttps://github.com/documentcloud/backbone/commit/2e1f85d8ec5e3f8fc778d8f2600f88e4978a9207\n\nHowever, in the Backbone.history.navigate function, if you're using pushState, \"triggerRoute\" won't work. By the time loadUrl is called at the end of the function, the fragment has been modified to include this.options.root (line 854).\n\nThis means that Backbone.history.loadUrl can't find the correct route (because the fragment has the options.root in it now).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/450",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/450/comments",
    "title": "Allow to abort xhr requests (selected or all)",
    "created_at": "2011-07-01T09:28:25Z",
    "updated_at": "2011-07-01T10:01:39Z",
    "body": "Sometimes it's necessary: stop previous requests raised by fetch function.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/445",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/445/comments",
    "title": "Deeply nested models in backbone",
    "created_at": "2011-06-29T09:25:17Z",
    "updated_at": "2011-06-30T00:43:42Z",
    "body": "I wrote this https://github.com/translated/meninges to deal with deep models in backbone. It seems to work well and has been fairly useful at my work where our domain model has a lot of nesting. But I'd love to hear what you think, especially if it that way of doing things has some fundamental flaws that we haven't run into yet.\n\nthanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/443",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/443/comments",
    "title": "Questing about testing binds",
    "created_at": "2011-06-27T17:06:38Z",
    "updated_at": "2011-06-30T00:58:54Z",
    "body": "I've created a question over at stackoverflow, but it hasn't seen much love.  I wonder if someone here could give me some feedback.\n\nhttp://stackoverflow.com/questions/6471457/testing-backbone-js-application-with-jasmine-how-to-test-model-bindings-on-a-vi\n\nThe question is more about backbone than it is about jasmine(it's the same no matter which spy framework you use) - how should one tie into a bind event?  The solution that I suggest at the end of the question is completely unsatisfactory - one could remove the `initialize_model_bindings` call from the initialize method of the view, and my test would still pass.\n\nThanks in advance!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/442",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/442/comments",
    "title": "Navigation in IE (7, 8, 9)",
    "created_at": "2011-06-25T12:14:41Z",
    "updated_at": "2011-06-28T19:10:07Z",
    "body": "Don't know if this is a bug or I am doing something wrong, but it seems to me that navigation is broken in IE 7, 8 and 9. I have this simple controller:\n\n```\nvar AppController = Backbone.Controller.extend({\n    routes: {\n        \"/Tickets\": \"tickets\",\n        \"/Users\": \"users\",\n        \"*actions\": \"defaultRoute\"\n    },\n\n    tickets: function() {\n        $(\"#placeholder\").text(\"tickets\");\n    },\n\n    users: function() {\n        $(\"#placeholder\").text(\"users\");\n    },\n\n    defaultRoute: function(actions) {\n    }\n});\n\nvar app_controller = new AppController;\n\nBackbone.history.start();\n```\n\nThen I have a simple index.html page where is placeholder div and two anchors which has their hrefs set to \"#/Tickets\" and \"#/Users\". When I try to run this on IE 8 or 9 and clicking between tickets/users few times it works - hash in the url bar is changing and content is loading. However when I try to hit back button the url bar is set to index.html and doesn't change between #Tickets or #Users although content is changing. When I try forward button I get the previous state and then nothing works unless I reload the whole page again. IE 7 - content is loading when I click anchors, but url bar stays the same (back and forward buttons doesn't work). I am using Backbone.js 0.3.3 and for example Chrome, Opera and FF works without problems. Any ideas?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/441",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/441/comments",
    "title": "Key-Value Observing View/Enhancement",
    "created_at": "2011-06-24T23:09:35Z",
    "updated_at": "2011-06-30T14:04:58Z",
    "body": "I have been working on a prototype for integrating KVO into Backbone as a standalone View class. I perceive it to be out of scope for Backbone proper, but I am curious if anyone on the BackboneJS team (or in the community) would be interested in collaborating on this.\n\nHere is the repo https://github.com/bruth/backbone-kvo, a sample usage https://github.com/bruth/backbone-kvo/blob/master/cs/test.coffee and my post on HN http://news.ycombinator.com/item?id=2690454. Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/440",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/440/comments",
    "title": "Backbone.Widget for Backbone.View",
    "created_at": "2011-06-24T07:05:54Z",
    "updated_at": "2011-06-26T20:42:22Z",
    "body": "I'm not sure it is appropriate to write this in Issues, but please let me share my thought.\n\nI have many occasion to nest Views, and it often confuses me how to interact with them. One reason is because Views are not definable in hierarchical manner without creating custom (and complex) object. \n\nIf there is built-in, widget-like wrapper class to bundle many Views in CoC manner, and when every binded Events propagate nicely, it would be so nice that I can go to sleep faster :)\n# Now (Views, Views, Views...)\n\n```\nRootView\nInnerViewA\nInnerInnerViewA\nInnerViewB\nInnerViewC\n```\n# In the future? (Widget-style)\n\n```\nRootWidget\n    InnerViewA\n        InnerInnerViewA\n    InnerViewB\n    InnerViewC\n```\n\nAt last, Backbone is superawesome!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/439",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/439/comments",
    "title": "validate prevents execution of success callback ",
    "created_at": "2011-06-23T12:44:07Z",
    "updated_at": "2012-01-23T17:19:35Z",
    "body": "class User extends Backbone.Model\n  url: ->\n    if @isNew()?\n      '/user/'\n    else \n      '/user/' + @get id\n  validate: (user) ->\n    return 'user name must be longer than 3 characters' if user.userName.length < 3\n  initialize: ->\n    @fetch()\n\nSomewhere in a view, when a form is submitted:\n    e.preventDefault()\n    newUser = new User()\n    newUser.save\n      userName     : $('input[name=\"userName\"]').val()\n      userEmail    : $('input[name=\"userEmail\"]').val()\n      userPassword : $('input[name=\"userPassword\"]').val()\n    ,\n      success: (model, response) ->\n        console.log('success')\n      error: (model, response) ->\n        console.log('failure')\n\nWith a userName 'a' for example, error callback is called, console.log 'failure' is executed and no ajax call is made\nWith a valid userName 'abc' for example, an ajax call is made, the server returns correctly, but the success callback is not executed.\n\nIf I delete the validate method on the model, with a valid userName, the ajax call is made, the server returns correctly and the success callback is fired, ie console.log 'success' prints in the console.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/437",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/437/comments",
    "title": "Behaviour of wrapError should be customizable.",
    "created_at": "2011-06-22T21:52:09Z",
    "updated_at": "2011-12-28T23:42:33Z",
    "body": "We would like to customize Backbone's default error handling of Ajax requests.\n\nOur code uses a RequestError class that parses details passed back from the server, so a typical error handler follows this template:\n\n``` javascript\nerror: function(model, xhr, options) {\n  var error = RemoteError.parseXHR(xhr);\n  // handle error\n}\n```\n\nTo make our error callbacks more concise, we would like to replace the default `wrapError` implementation with one that creates and passes in the RemoteError instance as an argument. Unfortunately `wrapError` is private to Backbone right now. Could it be exposed (like `Backbone.sync`) to allow customization?\n\nI can supply a patch if this change sounds good.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/436",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/436/comments",
    "title": "Split out Event into a separate library",
    "created_at": "2011-06-21T11:43:40Z",
    "updated_at": "2014-01-29T13:33:24Z",
    "body": "I'm interested in the support/interest in splitting out Backbone.Event into a separate library.\n\nI really like the bind/unbind/trigger pattern but don't really want to roll my own version. However I don't use backbone for all of my projects. Spine seems to use an almost identical pattern, which would suggest there is a need for such a library.\n\nWould the main aversion be dependency on another library?\n\nI'd also like to improve the way Event works (wildcard events spring to mind).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/434",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/434/comments",
    "title": "What should i do if I want both \":id\" and \":id/\" to trigger the same action?",
    "created_at": "2011-06-21T03:18:52Z",
    "updated_at": "2011-06-21T04:59:50Z",
    "body": "in my controller I wrote this:\n\nroutes: {\n    \":id\" : \"profile\"\n}\n...\nprofile: function() {\n\n}\n....\n\nwhen the application's url is \"http:**_/#/id\", it will trigger \"profile\" action and render the \"profile\" page. But now I want the urls like \"http:**_/#id/\" also can trigger the \"profile\" action... I don't know how to fix it...\n\nthanks~ \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/433",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/433/comments",
    "title": "Current master branch backbone.js missing controllers",
    "created_at": "2011-06-21T01:28:14Z",
    "updated_at": "2011-06-21T12:56:29Z",
    "body": "Not sure if I am just seeing a screwed up version of backbone but the latest version is missing controllers in backbone.js.  I downloaded the lastest code and its missing it as well.  On the other hand, if I download the .33 version, the controllers are there.  Were controllers deprecated or am I doing something wrong when downloading the latest code?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/431",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/431/comments",
    "title": "Filtering a Collection returns an array of Models ",
    "created_at": "2011-06-20T17:12:54Z",
    "updated_at": "2014-02-23T16:23:07Z",
    "body": "Sample:\n```this.books = this.getBooksFromDatabase();\n    this.publishedBooks = this.books.filter(function(book) {\n      return book.get(\"isPublished\") === \"1\";\n    });\n\n``````\n\nHere lies the problem:\n```this.books.filter```, returns an array of models. I've tried wrapping the array, as such:\n```var publishedBooks = _( this.books.filter(function(book) {\n  return book.get(\"isPublished\") === \"1\";\n}))```\nas recommended by this post:\nhttps://github.com/documentcloud/backbone/issues/120\n\nBut i still can't run things like:\n```publishedBooks.each(...)```, or\n```publishedBooks.get(...)```\n\nWhat am I missing? Is there a way to convert the returned array into a collection?\n\n``````\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/429",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/429/comments",
    "title": "Issue With Save and Resolving Url From Collection",
    "created_at": "2011-06-19T16:28:20Z",
    "updated_at": "2011-06-22T00:40:01Z",
    "body": "I am having an issue with backbone.js and the model.save() method. I have included a complete example below although without the three libraries needed.\n\nI have a tag model, a tag collection model, and a model to represent some selected items in my UI, called search criteria.\n\nI am getting a url error when attempting to save the model after I have manipulated the search criteria's collection of tags. This example illustrates the issue.\n\nIt appears that on the final call to save in this example, backbone cannot resolve the url which is defined in the tag collection model.\n\n```\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title>Test</title>\n    <script src=\"Scripts/Libraries/jquery-1.6.1.js\" type=\"text/javascript\"></script>\n    <script src=\"Scripts/Libraries/underscore.js\" type=\"text/javascript\"></script>\n    <script src=\"Scripts/Libraries/backbone.js\" type=\"text/javascript\"></script>\n\n    <script language=\"javascript\" type=\"text/javascript\">\n\n        $(function () {\n\n            // Simple model for a tag. Tags have an id and a title.\n            var TagModel = Backbone.Model.extend({});\n\n            // Collection for tags.\n            var TagCollection = Backbone.Collection.extend({\n                model: TagModel,\n                url: \"tags\"\n            });\n\n            // Sample model to hold a set of \"selected\" search criteria.\n            // Includes search text and a collection of \"selected\" tags.\n            var SearchCriteriaModel = Backbone.Model.extend({\n                defaults: {\n                    \"searchText\": \"\",\n                    \"tags\": new TagCollection()\n                }\n            });\n\n            // Create master tags collection.\n            window.tags = new TagCollection();\n            window.tags.refresh([\n                { id: 1, title: \"Tag A\" },\n                { id: 2, title: \"Tag B\" },\n                { id: 3, title: \"Tag C\" }\n            ]);\n\n            // Create search criteria.\n            window.searchCriteria = new SearchCriteriaModel();\n\n            // Should be 3 tags.\n            console.log(\"Should be 3 tags in master tags list.\");\n            console.log(\"Count = \" + window.tags.size());\n\n            // Should be 0 tags in criteria collection.\n            console.log(\"Should be 0 selected tags.\");\n            console.log(\"Count = \" + window.searchCriteria.get(\"tags\").size());\n\n            // Update tag title for tag 1.\n            var tag = window.tags.get(1);\n            tag.set({ \"title\": \"Tag AA\" });\n\n            // Save tag.\n            console.log(\"Try to save tag. Should attempt PUT to /tags/1. WORKS.\")\n            tag.save();\n\n            // Add tag to search criteria.\n            window.searchCriteria.get(\"tags\").add(tag);\n\n            // Should be 1 tag in criteria collection now.\n            // I am not moving the tag, but rather wanting to simply add a reference to the tag to the\n            // criteria collection.\n            console.log(\"Should be 1 selected tags.\");\n            console.log(\"Count = \" + window.searchCriteria.get(\"tags\").size());\n\n            // Should STILL be 3 tags in the master list.\n            console.log(\"Should be 3 tags in master tags list.\");\n            console.log(\"Count = \" + window.tags.size());\n\n            // Update tag title for tag 1 again.\n            var tag = window.tags.get(1);\n            tag.set({ \"title\": \"Tag AAA\" });\n\n            // Save tag.\n            console.log(\"Try to save tag. Should attempt PUT to /tags/1. WORKS.\")\n            tag.save();\n\n            // Remove tag from criteria. Simulates someone \"deselecting\" a tag from the search.\n            window.searchCriteria.get(\"tags\").remove(tag);\n\n            // Should be 0 tags selected.\n            console.log(\"Should be 0 selected tags.\");\n            console.log(\"Count = \" + window.searchCriteria.get(\"tags\").size());\n\n            // Save tag. FAILS.\n            console.log(\"Try to save tag. Should attempt PUT to /tags/1, but does not. Instead throws error 'A url property or function must be specified'.\");\n            tag.save();\n\n        });\n\n    </script>\n\n</head>\n<body>\n    <h1>Test</h1>\n    <p>Backbone test page.</p>\n</body>\n</html>\n```\n\nAny thoughts? Thanks!\n\nUPDATED\n\nI updated the code to help illustrate that I am not moving the tag between collections, but rather adding a reference to the tag to a second collection. Then, when I remove the tag from the second collection (not the first), Backbone cannot resolve the first collection, and then cannot get the url for saving.\n\nI am confused as to why removing the tag from one collection would have an impact on the reference to that tag in a separate collection.\n\nI am coming from a C# background. Maybe objects and collections work differently here.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/428",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/428/comments",
    "title": "Need indices for Collection `add` and `remove` events",
    "created_at": "2011-06-19T09:14:42Z",
    "updated_at": "2012-01-25T12:44:30Z",
    "body": "The Collection helpers `_add` and `_remove` know the exact index of the item affected, but the events `add` and `remove` fired by these helpers never get to see it.\n\nFor an `add` handler, this can be worked around with `indexOf`. A `remove` handler has no way of finding out, however.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/427",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/427/comments",
    "title": "Knowing if you are going back or forward in the history",
    "created_at": "2011-06-17T19:34:59Z",
    "updated_at": "2013-06-24T20:14:42Z",
    "body": "We have a situation where the transitions that we apply differ based on if we are moving forward or back in the history. Unless I am missing something, I don't see a way to get that info. If we were doing pushState ourselves then we have the state object to muck with, but {} is used right now as it is all handled by logic such as:\n\n```\nsaveLocation : function(fragment) {\n  fragment = (fragment || '').replace(hashStrip, '');\n  if (this.fragment == fragment || this.fragment == decodeURIComponent(fragment)) return;\n  if (this._hasPushState) {\n    var loc = window.location;\n    if (fragment.indexOf(this.options.root) != 0) fragment = this.options.root + fragment;\n    this.fragment = fragment;\n    window.history.pushState({}, document.title, loc.protocol + '//' + loc.host + fragment);\n  } else {\n    window.location.hash = this.fragment = fragment;\n    if (this.iframe && (fragment != this.getFragment(this.iframe.location.hash))) {\n      this.iframe.document.open().close();\n      this.iframe.location.hash = fragment;\n    }\n  }\n}\n```\n\nIdeally, the system would track this for us (for both pushState and hash mode) and we would be able to ask Backbone.history.\\* for that info (and optionally could be nice to have a forward/back event fired.\n\nIs there any appetite for this? Is there a better solution that I am missing?\n\nThe other approach is for us to manage a state map and handle transitions based on how we are moving in the state machine.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/426",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/426/comments",
    "title": "Better error message when method for bind are not defined",
    "created_at": "2011-06-17T11:55:06Z",
    "updated_at": "2011-06-30T01:33:19Z",
    "body": "if I have\n\n```\nevents:\n   \"click .button\" : \"doButton\"\n```\n\nbut forget to define button then the error message is\n\nUncaught TypeError: Cannot read property 'bind' of undefined\n\nAfter being caught by this a number of times I now know what to look for but newbies will get stumped by it. I suggest either\n\n(a) bound methods have a default no-op response\n(b) an error message such as \"doButton is not defined on class but is referenced in events\"\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/423",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/423/comments",
    "title": "New fetch/save callback: complete()",
    "created_at": "2011-06-15T20:50:07Z",
    "updated_at": "2014-06-20T06:07:43Z",
    "body": "In addition to success() and error(), it'd be very useful to have a complete() callback for server-side requests, much like in jQuery's $.ajax() function. This callback is called after the server response, whether or not there was an error.\n\nOne typical application is an Ajax loading icon that is displayed before a request goes out, and hidden when the request is complete (whether or not it was successful).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/419",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/419/comments",
    "title": "Global routing event would be useful",
    "created_at": "2011-06-14T23:47:54Z",
    "updated_at": "2012-01-13T18:47:55Z",
    "body": "As far as I can tell there is no generic mechanism to receive an event when any routing changes occur.\n\nThe ability to do something like:\nBackbone.history.bind(\"route\", function....\nwould make quite a few things easier to manager when dealing with multiple controller objects.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/418",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/418/comments",
    "title": "No simple way to tell if in pushState or hash mode",
    "created_at": "2011-06-14T22:44:42Z",
    "updated_at": "2011-06-15T01:30:34Z",
    "body": "Running on the latest 0.5.0 impl from master.\n\nWhen generating links to update the page state there doesn't seem to be a way to determine if the app is going to be using pushState or # resolution other than reading the Backbone.history._hasPushState param which presumably is a private by convention var.\n\nAn officially supported API would make this much easier to deal with.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/417",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/417/comments",
    "title": "What to do with the hard dependency on $ (jQuery or Zepto) in code",
    "created_at": "2011-06-14T21:17:28Z",
    "updated_at": "2011-06-30T01:55:04Z",
    "body": "There are a few hard dependencies on jQuery/Zepto in Backbone.View (make and remove methods).\nThat either of the frameworks is a hard dependency is not mentioned in the documentation.\n\nOf course the integration with the frameworks is excellent, but i found it impossible to use a Backbone.View instance without including jQuery or Zepto on the page.\n\nIs this on purpose?\nIf so, these frameworks should be mentioned as hard dependencies for Backbone.View in the documentation.\nIf not, the methods should not fail, but should be able to execute the method's functionality without the $ functions.\n\nOf course, the latter makes Backbone.js usable for more users.\n\nIf this added 'fallback' functionality is the preferred way to go, i am willing to contribute this code.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/416",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/416/comments",
    "title": "Automatic binding of this",
    "created_at": "2011-06-14T10:14:26Z",
    "updated_at": "2011-07-11T16:44:43Z",
    "body": "I know this has been asked before around the 'nets, but I find this one of the biggest pain points of Backbone.  Below are some problems with the way `this` currently works:\n1. Easy to forget - when adding a new method, you have to remember to add it to TWO places (the method itself and your binding call in the initializer method)\n2. Tedious to maintain - with a large class, you get a massive list of these bindings\n3. `_.bindAll(this)` doesn't work as the (underscore) documentation would lead one to believe\n4. Counterintuitive - just going `this.model.bind('remove', this.remove);` in the `initialize` of a view doesn't do what's expected (additionally, due to how jQuery works, it won't generate an error either)\n5. Some methods DO have automatic binding of `this` (for example the methods named in the events-hash)\n\nAre there technical reasons preventing automatic binding of all methods from working?  Or are there use cases where it is beneficial to have `this` freely bound?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/413",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/413/comments",
    "title": "Collection._add should throw error if existing model.id present",
    "created_at": "2011-06-13T23:06:48Z",
    "updated_at": "2011-11-28T04:36:37Z",
    "body": "The method `Collection._add()` throws an exception if the model is already present in the collection. This is consistent with the API docs.\n\nHowever, it only tests by `model.cid` and ignores `model.id`. The relevant lines are:\n\n```\nvar already = this.getByCid(model);\nif (already) throw new Error([\"Can't add the same model to a set twice\", already.id]);\n```\n\nShouldn't the first line also test by `model.id`?  For example:\n\n```\nvar already = this.getByCid(model) || this.get(model);\nif (already) throw new Error([\"Can't add the same model to a set twice\", already.id]);\n```\n\nThis behavior seems correct and consistent (especially given that `model.id` is quoted in the error message).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/412",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/412/comments",
    "title": "jquery style binding additional data",
    "created_at": "2011-06-13T22:49:40Z",
    "updated_at": "2011-06-30T02:22:00Z",
    "body": "Hey, I recently needed to push extra data like jquery does with bind, so I wrote this:\n\n``` javascript\nbind : function(ev, data, callback) {\n\n      if ( arguments.length === 2 || data === false ) {\n        callback = data;\n        data = undefined;\n      } \n\n      var calls = this._callbacks || (this._callbacks = {});\n      var list  = this._callbacks[ev] || (this._callbacks[ev] = []);\n      list.push([callback, data]);\n      return this;\n    },\n```\n\n``` javascript\ntrigger : function(eventName) {\n      var list, calls, ev, callback, args, i, l;\n      var both = 2;\n      if (!(calls = this._callbacks)) return this;\n      while (both--) {\n        ev = both ? eventName : 'all';\n        if (list = calls[ev]) {\n          for (i = 0, l = list.length; i < l; i++) {\n            // remember callback is first part of array\n            if (!(callback = list[i][0])) {\n              list.splice(i, 1); i--; l--;\n            } else {\n              args = both ? Array.prototype.slice.call(arguments, 1) : arguments;\n             // add the additional data to our arguments array\n          args.push(list[i][1]);\n              callback.apply(this, args);\n            }\n          }\n        }\n      }\n      return this;\n    }\n```\n\nusage is:\n\n``` javascript\nthis.bind('foo', {extraData: 'right here!'}, this.extra);\nthis.trigger('foo', 'standard argument');\n\nextra : function(standard, extra){\n    console.log(standard,extra);\n}\n```\n\nThis is a small modification and it shouldn't break anyone's code.\nGoing to bug test it some more to be sure, but hope you all like it!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/411",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/411/comments",
    "title": "Strategy for pulling huge collections?",
    "created_at": "2011-06-13T18:33:35Z",
    "updated_at": "2011-06-30T02:23:09Z",
    "body": "Hello,\nWe love Backbone, and we have a use case where the client application needs to get a huge collection from the server side.\nWe're not sure what the right solution is and I'm coming here for help. Loading all the elements at once cannot work, as it would require the client app to wait for more than a couple seconds and up to minutes... :(\n\nWhat do you guys suggest?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/410",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/410/comments",
    "title": "Arbitrary Attributes in view options",
    "created_at": "2011-06-13T16:43:42Z",
    "updated_at": "2012-01-23T17:49:45Z",
    "body": "I use a heavily view-centric app with views for most html elements. To be able to generate views that represent <img> tags or <label> tags or other tags where I need to input additional attributes when creating the element, I suggest adding the optional \"attrs\" option to Backbone.View. The code would look like this:\n\n```\n// Performs the initial configuration of a View with a set of options.\n// Keys with special meaning *(model, collection, id, className)*, are\n// attached directly to the view.\n_configure : function(options) {\n  if (this.options) options = _.extend({}, this.options, options);\n  if (options.model)      this.model      = options.model;\n  if (options.collection) this.collection = options.collection;\n  if (options.el)         this.el         = options.el;\n  if (options.id)         this.id         = options.id;\n  if (options.className)  this.className  = options.className;\n  if (options.tagName)    this.tagName    = options.tagName;\n  if (options.attrs)      this.attrs      = options.attrs; // Added loading of attrs to this <---\n  this.options = options;\n},\n\n// Ensure that the View has a DOM element to render into.\n_ensureElement : function() {\n  if (this.el) return;\n  var attrs = {};\n  if (this.attrs) var attrs = _.clone(this.attrs)  // Clone this.attrs, if present <---\n  if (this.id) attrs.id = this.id;\n  if (this.className) attrs[\"class\"] = className;\n  this.el = this.make(this.tagName, attrs);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/409",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/409/comments",
    "title": "Add example or feature on how to bind form elements with backbone",
    "created_at": "2011-06-11T20:02:39Z",
    "updated_at": "2011-06-30T04:35:19Z",
    "body": "I've written a blog post http://xtargets.com/2011/06/11/binding-model-attributes-to-form-elements-with-backbone-js/ that describes the following extension to backbone\n\n```\n\nclass FooView extends MyView\n\n  tag: \"div\"\n\n  modelBindings:\n\n    \"change form input.address\" : \"address\"\n    \"change form input.name\"    : \"name\"\n    \"change form input.email\"   : \"email\"\n\n  render: ->\n\n    $(@el).html \"\"\"\n      <form>\n        <input class=\"address\"/>\n        <input class=\"name\"/>\n        <input class=\"email\"/>\n      </form>\n    \"\"\"\n\n    super\n\n    @\n```\n\nadding the _modelBindings_ declaration. Not sure if this is worth a backbone extension or just a how to on DRY'ing up your code by using the same tricks that backbone core uses for the events declaration.\n\nRegards\n\nBrad\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/407",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/407/comments",
    "title": "Models are not being initialized correctly when created inside collection",
    "created_at": "2011-06-11T15:15:30Z",
    "updated_at": "2011-07-05T13:27:42Z",
    "body": "New model attributes are not passed to `initialize` and copied to `previousAttributes` if new model is being created during collection `reset` method or `add` and `create` methods with `silent` option. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/406",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/406/comments",
    "title": "Suggestion to how to solve unbind problem",
    "created_at": "2011-06-11T06:21:53Z",
    "updated_at": "2011-06-30T03:40:33Z",
    "body": "The main problem of current view implementation is  inability to handle moment when it is removed from DOM. It is critical for views that need to unbind from websocket or backbone model event, such as \"add\". \n\nThe ugly way to solve this problem is manual unbind inside remove overload.  But it require to to have a reference inside code to remove this view. \n\nJquery unbind from all events and clear all data associated with object when it is remove from DOM. May view object should be put inside jquery data, so when view container element is removed from dom, view would be also removed?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/405",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/405/comments",
    "title": "Collection constructor builds models before initialize.",
    "created_at": "2011-06-10T18:05:51Z",
    "updated_at": "2011-07-05T13:36:58Z",
    "body": "The collection constructor builds it's models before the collections initialize is run.  This causes problems if the collection's model has a \"has many\" relationship with another collection:\n\nex:\n\n``` javascript\nvar Tab = Backbone.Model.extend({\n  initialize: function(models, args) {\n    this.TabContents = new TabContents([], {url: this.url()})\n  }\n});\n\nvar Tabs = Backbone.Collection.extend({\n  model: Tab,\n  initialize: function(models, args) {\n    if (args.url == undefined) {\n      throw(\"Tabs needs a proper resource url\");\n    }\n    this.url = args.url + '/tabs';\n  }\n});\n```\n\n```\nvar my_tabs = new Tabs([{a: 'a'}], {url: 'some/url'});\n```\n\nwill throw the \"A 'url' property or function must be specified\" error since the Tab model is trying to use the url to build out the tab contents collection.\n\nI'm pretty new to backbone, so this may be me being a newb, but as far as OO is concerned, it seems that initialization should occur as the first thing that happens on instantiation.\n\nThanks for backbone!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/404",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/404/comments",
    "title": "Model has no method \"_configure\"",
    "created_at": "2011-06-10T13:54:27Z",
    "updated_at": "2013-10-14T18:36:05Z",
    "body": "I'm getting the error: \"Uncaught TypeError: Object #<Object> has no method '_configure'\". See below for line number.\n\nIs this a bug or an error in my code?\n\n``` javascript\nvar Course = Backbone.Model.extend({\n    url : function(){\n        var base = 'courses'\n        if (this.isNew()) return base;\n        return base + (base.charAt(base.length-1) == '/'?'' : '/') + this.id; \n    }\n}); // This line produces the error \"Uncaught TypeError: Object #<Object> has no method '_configure'\"\n\n\nApp.Controllers.Courses = Backbone.Controller.extend({\n    routes : {\n        \"courses/:id\"   : \"show\",\n        \"\"              : \"index\"\n    },\n    show : function(id){\n        var course = new Course({ id : id})\n        course.fetch({\n            success: function(){\n                App.Views.Show({ model : course});\n            }\n        })\n    }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/402",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/402/comments",
    "title": "Backbone getUrl default implementation doesn't work right with model.fetch",
    "created_at": "2011-06-10T11:19:15Z",
    "updated_at": "2012-01-23T17:55:38Z",
    "body": "Model.fetch should generate something like /[collection]/[id], but it generates /[collection]/\n\nIm using last version from master branch.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/401",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/401/comments",
    "title": "Silent routing",
    "created_at": "2011-06-10T08:32:40Z",
    "updated_at": "2011-06-30T02:46:06Z",
    "body": "I've got view which contains list and details views.\n\n/product/ - should show first product and list of products\n/proudct/1 - should show product with id = 1 and list of products\n\nWhen user click on product in the list, new product should appear in details, also hash should be changed.\n\nBut because of hash change, router render page once again and list is reloaded.\n\nIs there any way to solve this or this is limitaion of backbonejs routing?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/399",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/399/comments",
    "title": "Backbone.History.start() depends on $ (jQuery or Zepto)",
    "created_at": "2011-06-08T11:22:11Z",
    "updated_at": "2011-07-01T15:28:16Z",
    "body": "Backbone.History.start() uses $(window).bind(...) to bind a handler to the hashchange or popstate event. However, jQuery/Zepto are not listed as hard dependencies in the docs (for 0.3.3 at least, and I can't see updated docs for master), and this causes hard to find issues if your project doesn't have jQuery or Zepto.\n\nIn 0.3.3, $ was also used to test the browser in all cases; in master, it looks like this will only be an issue now if Backbone is running on IE. (Not an issue for me with Chrome.)\n\nCould this be resolved by using window.addEventListener() instead?\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/398",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/398/comments",
    "title": "When model.set is triggered with {silent: true} option, subsequent set method fires a change event",
    "created_at": "2011-06-08T04:15:59Z",
    "updated_at": "2011-06-30T02:51:46Z",
    "body": "When model.set is triggered with {silent: true} option, subsequent set method fires a change event., even if the model has not been changed. \n\nReproduction steps.\n\nvar response = new Backbone.Model();\nresponse.bind('change', function(){alert('hello')});\nresponse.set({name: 'bob'}, {silent: true});\nresponse.set({name: 'bob'});\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/397",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/397/comments",
    "title": "History with pushState: true doesn't upgrade hash-based urls",
    "created_at": "2011-06-07T16:52:13Z",
    "updated_at": "2011-07-01T14:23:31Z",
    "body": "In the closing comment for issue #173 jashkenas says \"If an IE user sends a hash-based link to a pushState user, they get transparently upgraded to the pushState version of the URL.\"  I've tried several ways to make this happen with 0.5.0-pre, and it doesn't. work (downgrading for non-pushstate browsers does work).\n\nHere's the code I'm running:\n\n  window.Controller = Backbone.Router.extend({\n    routes: {\n      \"foo/:param\":        \"foo\",\n    },\n    foo: function(param) {\n      console.log(\"foo: \" + param);\n    }\n  });\n  window.ctrl = new Controller();\n  Backbone.history.start({pushState: true, root: '/explore/'});\n\nIn Chrome:\nLoad:\n  http://localhost/explore/foo/bar\nlog shows:\n  foo: bar\nURL bar shows:\n  http://localhost/explore/foo/bar\n\nLoad:\n  http://localhost/explore/#foo/bar\nlog shows:\n  foo: bar\n  foo: bar\nURL bar shows:\n  http://localhost/explore/#foo/bar\n\nFor the second case I'd expect that \"foo: bar\" would show up once in the log, and the URL bar would show the non-hashed version of the URL.\n\nI haven't had time to read up on the html5 pushState API, so I'm not sure why this is happening.  I thought that you need a call to window.history.pushState after line 812 in backbone.js, but I added one and it didn't work.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/396",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/396/comments",
    "title": "Seems to be an issue with `this` resolution and binding with inheritance",
    "created_at": "2011-06-07T14:36:54Z",
    "updated_at": "2011-07-01T14:44:37Z",
    "body": "I posted a question on stackoverflow, and haven't seen much response.  I think this is either a bug with backbone or underscore.\n\nhttp://stackoverflow.com/questions/6257405/backbone-js-view-inheritence-this-resolution-in-parent/6257811#6257811\n\nAlso, related: https://github.com/documentcloud/backbone/issues/294\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/394",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/394/comments",
    "title": "add & remove events should be triggered on the collection",
    "created_at": "2011-06-02T23:12:36Z",
    "updated_at": "2011-07-05T14:39:04Z",
    "body": "This causes a problem when a model is added to multiple collections.  The event listeners for the add/remove event fire for the wrong collections. For example:\n\n``` javascript\nvar users = new Backbone.Collection({\n   url: \"/users\"\n});\nvar selectedUsers = new Backbone.Collection\n\n\nCreateUserView = Backbone.View.extend({\n    events: {\n        \"submit\" : \"on_submit\"\n    },\n    on_submit: function() {\n       var email = this.$(\":input[name=email]\").val();\n       users.create({email: email});\n    }   \n})\n\nListUsersView = Backbone.View.extend({\n    events: {\n        \"click .user_row\": \"on_user_selected\"\n    },\n    initialize: function() {\n        _(this).bindAll(\"on_user_created\");\n\n        users.bind(\"add\", this.on_user_created);\n    },\n    on_user_created: function(user) {\n        $(\"<li>\"+user.name+\"</li>\").hide().appendTo(this.el).fadeIn();\n    },\n    on_user_selected: function() {\n        var $row = $(event.target);\n        var i = $row.index();\n        var user = users.at(i);\n\n        // this will cause on_user_created to be triggered, which is not all expected\n        selectedUsers.add(user);\n    }\n})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/393",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/393/comments",
    "title": "Regression with Collection#add, the model's initialize doesn't have data",
    "created_at": "2011-06-02T16:27:27Z",
    "updated_at": "2011-07-05T13:38:41Z",
    "body": "With Backbone 0.5-pre, if you pass a plain Object into Collection#add, the associated model initializes without having any data.\n\nBrief discussion of the issue:\nhttps://github.com/documentcloud/backbone/commit/d7e3d5bf4ad8ebf8482c873d3742a7b21580a59e#commitcomment-411662\n\nReduction of the bug:\nhttp://dl.dropbox.com/u/154684/github/backbone/backbone-collection-add-regression.html\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/392",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/392/comments",
    "title": "Is there any way to handle when view is removed from DOM?",
    "created_at": "2011-06-02T15:40:35Z",
    "updated_at": "2011-07-01T14:43:52Z",
    "body": "I've got web socket subscribtion inside backbone view. I need to find a way to handle when view is removed from DOM to unsubscribe from socket, otherwise view will still recieve socket events.\n\nI have tried to overload remove, however it works only when i am directly call it. The same problem exist for subscription on backbone collection events (\"add\", \"refresh\" ..) when collection is updated elsewhere.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/389",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/389/comments",
    "title": "Backbone requires jquery",
    "created_at": "2011-06-01T20:18:53Z",
    "updated_at": "2011-06-01T20:21:26Z",
    "body": "It's stated in backbone's docs that jquery/ zepto are not hard dependencies of backbone.\n\nThe routing requires one or the other however because on line 691 there is a call to $.browser.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/386",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/386/comments",
    "title": "Sync method not bound to instance properly",
    "created_at": "2011-05-31T21:05:39Z",
    "updated_at": "2013-07-07T17:46:43Z",
    "body": "The fetch() method calls sync() internally if it is on a subclass instance:\n\n(this.sync || Backbone.sync)('read', this, success, error);\n\nHowever, when this.sync is called, 'this' is set incorrectly to the global DOMWindow rather than the actual instance.\n\nFor example, if I have a subclass of Model called Foobar, when Foobar's sync method is called 'this' is incorrectly DOWindow instead of my Foobar instance.\n\nThe reason this happens is subtle. In the following line, repeated several times in Backbone when this.sync is called:\n\n(this.sync || Backbone.sync)('read', this, success, error);\n\nThe left parentheses evaluates first, generating a function pointer unbound to an instance. We then call ('read', this, success, error) on the function pointer. However, at this point the function is not bound to an instance, so it gains the default global 'this' of DOMWindow.\n\nThe fix to this is simple. Replace the || magic with something like the following:\n\nif (this.sync) this.sync('read', this, success, error);\nelse Backbone.sync('read', this, success, error);\n\nNote that this is an important bug, since it can lead to lots of hard to track down Backbone bugs where 'this' isn't bound correctly in your instance sync method.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/385",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/385/comments",
    "title": "Binding collection refresh to view has no effect",
    "created_at": "2011-05-31T21:03:44Z",
    "updated_at": "2012-01-23T17:57:31Z",
    "body": "``` javascript\n/* Bind collection refresh to view */\nwindow.SomeCollectionView = Backbone.View.extend({\n  ...\n  initialize: function() {\n    _.bindAll(this, 'render');\n    this.collection.bind('refresh', this.render);\n    this.collection.view = this;\n  },\n/* Fetch collection */\nSomeCollection.fetch()\n/* NO EFFECT */\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/383",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/383/comments",
    "title": "refresh event in collection",
    "created_at": "2011-05-31T10:50:35Z",
    "updated_at": "2012-01-23T17:58:32Z",
    "body": "I suggest to add an \"refresh\" event into the \"collection.add\" method.\nThis will give the opportunity be aware when all models will be added (in case when you give array of models)\n\n add : function(models, options) {\n      if (_.isArray(models)) {\n        for (var i = 0, l = models.length; i < l; i++) {\n          this._add(models[i], options);\n        }\n      } else {\n        this._add(models, options);\n      }\n      !options.silent && this.trigger('refresh', this, options);\n      return this;\n    },\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/381",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/381/comments",
    "title": "rails form serialization",
    "created_at": "2011-05-30T14:33:13Z",
    "updated_at": "2011-08-08T14:15:53Z",
    "body": "Hi, I'm working with backbone and rails 3.1\nI'm trying to save a form with backbone and serialize() of jquery like this:\n\n```\n    save: (e)->\n        e.preventDefault()\n        @model.save(\n            @$(\"form\").serialize()\n            ...\n        )\n```\n\nbut I'm having problems due to attributes namespacing. I've read accross issues about the namespace issue but I don't think this is the case since I'm putting data to server not fetching that.\n\nif I leave code as above I obtain this error:\n\n```\ninvalid 'in' operand attrs\n```\n\nWhat's the best way to use rails form with backbone anyway?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/380",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/380/comments",
    "title": "Change events for a model should be fired after all attributes have been set",
    "created_at": "2011-05-30T07:58:32Z",
    "updated_at": "2011-06-05T06:32:44Z",
    "body": "Given the following model,\n\n```\nmyModel.set({\n    title: \"hello\"\n})\n```\n\nThe following two code snippets cause the model to be viewed differently when triggered on `change:loaded`.\n\n```\n# Version A\nmyModel.set({\n    loaded: true\n    title: \"bye\"\n})\n# Anything listening on the change:loaded event gets a model that has title = \"hello\"\n\n# Version B\nmyModel.set({\n    title: \"bye\"\n    loaded: true\n})\n# Anything listening on the change:loaded event gets a model that has title = \"bye\"\n```\n\nThis is inconsistent behavior that is caused by the change events being fired one by one as the attributes are set on the model. Instead, all change events should be fired AFTER all attributes are set.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/378",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/378/comments",
    "title": "Todos example allows empty entries",
    "created_at": "2011-05-30T07:07:20Z",
    "updated_at": "2011-07-01T18:37:21Z",
    "body": "Todos app lets create empty entries and also lets to edit existing entry and set its content to blank string.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/377",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/377/comments",
    "title": "Stale annotated source file for Todos example.",
    "created_at": "2011-05-30T07:02:23Z",
    "updated_at": "2011-07-01T18:37:20Z",
    "body": "[todos.js](https://github.com/documentcloud/backbone/blob/master/examples/todos/todos.js) was changed, but [todos.html](https://github.com/documentcloud/backbone/docs/todos.html) was not updated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/376",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/376/comments",
    "title": "Inconsistent result from .hasChange()",
    "created_at": "2011-05-28T03:43:18Z",
    "updated_at": "2011-06-05T07:12:45Z",
    "body": "```\nvar model = new Backbone.Model({foo: 'bar'});\nmodel.set({foo: 'baz'}, {silent: true});\n\nconsole.log(model.hasChanged());\nconsole.log(model.hasChanged('foo'));\n```\n\nOutput should be `true` `true`, whereas it's currently `false` `true` in backbone 0.3.3\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/375",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/375/comments",
    "title": "It's correct that 'this' in the success callback of the fetch method reference the window?",
    "created_at": "2011-05-27T18:06:46Z",
    "updated_at": "2011-05-27T19:50:04Z",
    "body": "Hi, sorry to bother with this, I looked up in the issues and didn't find this as a duplicate.\n\nThis is the situation, I have model that like this:\n\n```\nuser = Backbone.Model.extend({\n    url : function() {\n        var base = 'users';\n        if (this.isNew()) return base;\n        return base + (base.charAt(base.length - 1) == '/' ? '' : '/') + this.id;\n    },\n\n    initialize: function(options){\n        console.log(this);\n        this.fetch({success:this.refreshUserData, error:this.errorUserData});\n    },\n\n    refreshUserData: function(data){\n        console.log(data);\n        console.log(this);\n    },\n\n    errorUserData: function(data){\n        alert(\"ERROR: Fetching user data\");\n    }\n});\n```\n\nAs you can see in the **refreshUserData** method I output the two objects, and the **data** object shows (I'm not sure if it's a reference) me the current user model and the **this** shows me the _window_.\n\nIs this correct? or the **this** must be referencing the current model?\n\nSorry about my english, it's not may native language.\nThanks in advance for your time\nAgustin\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/374",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/374/comments",
    "title": "Give Spine.js a Good Read-through.",
    "created_at": "2011-05-27T14:37:45Z",
    "updated_at": "2011-11-09T16:45:22Z",
    "body": "As @maccman and I have discussed, it would be great for projects like Backbone and Spine to learn from one another. Before 0.5.0 is released, we should give the Spine.js codebase a good read-through for interesting ideas.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/372",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/372/comments",
    "title": "Current attributes in models become previous attributes too early",
    "created_at": "2011-05-27T07:32:29Z",
    "updated_at": "2011-05-27T08:13:43Z",
    "body": "The resetting of previous attributes seems to happen too early, i.e., as soon as all event listeners are called, current attributes become previous attributes, which really should happen the next time set() is called, otherwise the following code fails:\n\n```\nvar Model = Backbone.Model.extend({\n    foo: function() {\n        this.set({key: 'val2'});\n        this.trigger('fooevent');\n    }\n});\n\nvar model = new Model({key: 'val1'});\n\nmodel.bind('fooevent', function() {\n    console.log(model.previous('key'));\n});\n\nmodel.foo();\n```\n\nThe output should be `val1` and in backbone 0.3.3 it's `val2`\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/371",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/371/comments",
    "title": "Collection \"get\" method should use model idAttribute property, otherwise i won't work with mongodb models",
    "created_at": "2011-05-26T13:09:53Z",
    "updated_at": "2011-05-26T13:15:12Z",
    "body": "Collection \"get\" method should use model idAttribute property, otherwise i won't work with mongodb models. \n\n```\n// Get a model from the set by id.\nget : function(id) {\n  if (id == null) return null;\n  return this._byId[id.id != null ? id.id : id]; // doesn't work for models with _id \n},\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/370",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/370/comments",
    "title": "Backbone model toJSON doesn't serialize nested collections",
    "created_at": "2011-05-26T12:29:44Z",
    "updated_at": "2011-05-26T13:34:53Z",
    "body": "I've got model that have nested backbone collection. When I'm calling toJSON it doesn't  serialize collection property to json array.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/369",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/369/comments",
    "title": "backbone doesn't find objects in (sub?)collections when saved with {silent: true}",
    "created_at": "2011-05-25T15:12:49Z",
    "updated_at": "2011-05-26T18:44:26Z",
    "body": "Hi, say we have a Dokuments collection and a Notes collection within Dokuments.\nI added this note and saved it later on silently. The id is returned from the server and is copied to the object, but it can't be found by get:\n\n> > > dok = Dokuments.get('4ddd0c2de8e6870c5e00000c')\n> > > dok.notes.get('4ddd1359e8e6870c5e00013f')\n> > > undefined\n\nbut:\n\n> > > dok.notes.last().get('id')\n> > > \"4ddd1359e8e6870c5e00013f\"\n\nThank you in advance for any hints\n--Frank\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/368",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/368/comments",
    "title": "Controller Documentation",
    "created_at": "2011-05-24T21:32:59Z",
    "updated_at": "2011-05-26T17:48:10Z",
    "body": "The documentation of controller usage is extremely lacking - not one example is given, and the sample application does not use any controllers.  It is difficult to determine exactly when and how controllers are to be used given this limitation.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/367",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/367/comments",
    "title": "backbone.js is incompatible with jquery 1.3.2 but no mention in docs",
    "created_at": "2011-05-24T16:32:00Z",
    "updated_at": "2011-05-26T17:43:57Z",
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/366",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/366/comments",
    "title": "Support for namespaced events",
    "created_at": "2011-05-24T05:26:16Z",
    "updated_at": "2014-03-14T11:54:50Z",
    "body": "Right now it looks like a Backbone.View doesn't support binding namespaced events to `this.el` because of the `eventSplitter` regexp: `/^(\\w+)\\s*(.*)$/`\n\nFor example, I want to bind my view to `end.pjax`:\n\n``` coffeescript\nclass MyView extends Backbone.View\n  events:\n    'end.pjax': 'hideLoader'\n\n  hideLoader: ->\n    this.$('.context-loader').hide()\n```\n\nThe above won't work because the regexp splits up `end` and `pjax`:\n\n```\n> \"end.pjax\".match(/^(\\w+)\\s*(.*)$/)\n[ 'end.pjax', 'end', '.pjax', index: 0, input: 'end.pjax' ]\n```\n\nIs this a bug, or is there a reason dots aren't allowed in that regexp? Or am I just doing it wrong.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/365",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/365/comments",
    "title": "`delete options.comparator`?",
    "created_at": "2011-05-24T03:19:16Z",
    "updated_at": "2011-05-26T17:55:03Z",
    "body": "In the constructor for `Backbone.Collection`, this strikes me as curious:\n\n```\nif (options.comparator) {\n  this.comparator = options.comparator;\n  delete options.comparator;\n}\n```\n\nWhy the `delete options.comparator` line? As far as I can tell, the `options` argument isn't modified anywhere else in Backbone.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/364",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/364/comments",
    "title": "Can't figure this out",
    "created_at": "2011-05-23T23:52:29Z",
    "updated_at": "2011-05-24T16:28:27Z",
    "body": "https://gist.github.com/41591acc05563fc5ca3d\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/362",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/362/comments",
    "title": "before_save, after_save events for models",
    "created_at": "2011-05-19T18:17:15Z",
    "updated_at": "2011-05-26T17:56:26Z",
    "body": "Is it planned (or already implemented) to provide the models with \"before_save\" and \"after_save\" events?\nI'm aware of the validation functions but they don't fit my needs.\nIf there's nothing like that, would you accept pull requests with that functionality?\n\n/Jan\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/361",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/361/comments",
    "title": "Collection batch loading",
    "created_at": "2011-05-19T03:04:12Z",
    "updated_at": "2011-05-26T18:01:04Z",
    "body": "Collections are great for loading small numbers of models, but when many hundreds, thousands, or even more models exist, it is impractical to load all models at once via fetch().\n\nA better method is to batch operations so only X number of models are fetched (and held in memory) at a time. A good example is paging items. \n\nI think fetch() should be modified to allow a hash of parameters (that gets passed through to sync), so the sync layer knows exactly which models to load (can be used for paging, querying for certain models, etc). \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/360",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/360/comments",
    "title": "Add a \"Hello World\" example",
    "created_at": "2011-05-18T23:16:54Z",
    "updated_at": "2012-01-23T18:02:24Z",
    "body": "I think I want to use backbone for my project, but I feel like I'm having a harder time wrapping my head around it then I should.  The ToDo example is helpful, but I think it's a bit much for complete newbies.  Reading the docs cover to cover also seems a bit daunting.  I think what's needed is a very simple example (< 100 loc) illustrating the basic ideas.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/358",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/358/comments",
    "title": "Support for models with more than one level of attributes",
    "created_at": "2011-05-18T16:23:43Z",
    "updated_at": "2011-05-26T18:55:00Z",
    "body": "Is there any plan to support more complex models where the attributes can be nested, e.g.\n\nvar PersonModel ={\n  firstName : 'John',\n  lastName : 'Doe',\n  contactInfo :{\n    emailAddress : 'johndoe@xyz.com',\n    phoneNumbers : {\n      home : '(111) 111-1111',\n      work : '(222) 222-2222',\n      cell : '(333) 333-3333'\n    }\n  };\n\nYou can currently fetch and populate such models, but the get and set methods will not work. While you can workaround this by directly accessing the attributes property, there are other more serious problems with the change model support.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/356",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/356/comments",
    "title": "Creating multiple models with defaults not deeply cloned",
    "created_at": "2011-05-14T20:42:52Z",
    "updated_at": "2011-05-26T18:26:25Z",
    "body": "When the defaults are an object and not a function, Backbone uses underscore's extend to copy the defaults onto newly created instances. I'm not 100% clear on this, but it seems if any of the default attributes are themselves other objects underscore's extend doesn't deeply clone them. That means multiple instances of a Backbone model will have shared attributes; which leads to crazy-town.\n\njQuery's extend does a better job of deeply cloning. The other solution I've found locally is to simply define the defaults to be a function that returns a new anonymous object rather than assigning the anonymous object to the defaults property of the model class.\n\nI'm not sure what (if anything) Backbone should do about this. Maybe use jQuery's extend. Maybe deprecate using an object as the default property value of a model. Maybe just document this in the annotations so others can learn.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/355",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/355/comments",
    "title": "[Question] Is it possible (and ok) to init view inside model?",
    "created_at": "2011-05-12T01:13:30Z",
    "updated_at": "2011-05-26T18:35:36Z",
    "body": "Hi All,\n\nI'm new to backbone, so please forgive me for asking this stupid questions. Anyhow, I read lots of tutorials but most focused generating the objects that are not already on the page, but how about the ones already there? I need to generate these elements onload (server side) because I need search engines to be see them.\n\nAnyhow, on document ready Im doing something like this to put them into the collection with views:\n<code>\nvar documents = new App.Collections.Documents();\n    $('.block').each(function(index, element){\n        documents.add({el:element});\n    });\n\n```\ndocuments.each(function(document){\n    var view = new App.Views.Document({model: document, el: document.get('el')});\n});\n```\n\n</code>\nI think my above code has at least one problem: I need to save the element into the model attribute just so that I can reuse it later when create view. How should I do this the correct way?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/354",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/354/comments",
    "title": "Add Travis CI to examples",
    "created_at": "2011-05-11T22:40:13Z",
    "updated_at": "2011-05-26T19:14:14Z",
    "body": "I think [Travis CI](https://github.com/travis-ci/travis-ci) would be a great addition to the [examples section](http://documentcloud.github.com/backbone/#examples). How about it, @travis-ci?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/353",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/353/comments",
    "title": "the latest code not published to npm? o_O",
    "created_at": "2011-05-11T21:20:07Z",
    "updated_at": "2011-05-26T18:42:19Z",
    "body": "I was looking at the source on github and the file length is ~1100 lines -- but when I do\n\n```\n$ npm install backbone\n```\n\nMy backbone.js file is only ~ 1011 lines (as well as there being some minor differences in the source)\n\nThe package.json in github's master says the version = \"0.3.3\"\n\nand when i npm ls i also get 0.3.3 ...\n\nam i crazy? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/352",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/352/comments",
    "title": "Multiple controller callbacks for a single common hash url",
    "created_at": "2011-05-11T10:21:35Z",
    "updated_at": "2011-05-27T04:45:04Z",
    "body": "Hi,\n\nIs it possible to trigger multiple events or callback functions when a particular route is matched with some kind of trigger order. For example\n\nin a hypothetical mail application \n\n```\nController.Sidebar = Backbone.Controller.extend({\n  routes: {\n      \"mails/\":            \"mail\"\n   },\n\n  mail: function() {\n     console.log(\"in sidebar controller\")\n     // fetch mail count and refresh sidebar to update count of emails\n   }\n})\n\n\nController.Mail = Backbone.Controller.extend({\n  routes: {\n    \"mails/\":            \"index\"\n  },\n\n  index: function() {\n     console.log(\"in Mail Controller\")\n     // fetch all mail and render index fragment\n  }\n})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/351",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/351/comments",
    "title": "Expose helper functions",
    "created_at": "2011-05-11T01:13:38Z",
    "updated_at": "2011-05-26T18:45:47Z",
    "body": "Backbone contains lots of small helper functions, like `wrapHTML`, `getUrl`,  `inherits` etc. it would be cool to expose them in `Backbone.util` or similar.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/350",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/350/comments",
    "title": "move \"inherits\"",
    "created_at": "2011-05-10T08:44:04Z",
    "updated_at": "2011-05-10T12:46:43Z",
    "body": "Hi!\n\nWonder if `inherits` deserves to live in underscore.js, as it seems robust and cross-browser?\n\nTIA,\n--Vladimir\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/347",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/347/comments",
    "title": "expose $ var to decouple library dependency",
    "created_at": "2011-05-05T01:53:34Z",
    "updated_at": "2011-05-05T19:15:49Z",
    "body": "Currently in your IIFE you have a `$` var which points to either `this.jQuery` or `this.Zepto`. Can you expose the `$` in the Backbone object so it can be overwritten without having to edit the backbone source directly?\n\nOr perhaps even having a Backbone.Library that declares it so we can easily extend and override methods. Might be overkill?\n\n``` javascript\n_.extend(Backbone.Library.prototype, {\n    $: [ref library of choice]\n});\n```\n\nThis would then easily allow the use of a bigger variety of libraries.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/346",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/346/comments",
    "title": "Backbone.History.loadUrl = undefined?",
    "created_at": "2011-05-05T00:05:31Z",
    "updated_at": "2011-05-26T18:55:33Z",
    "body": "I'm having the problem with backbone routing breaking in Internet Explorer 7.\n\nI'm trying to use the fix \nthis.SaveLocation()\nBackbone.History.loadUrl()\n\nafter the route is called so that it stays on the current route and not jump back to the previous route.  \n\nHowever, while I see the loadUrl definition in Backbone.History, when I look at it in firebug, it says undefined.  And calling it in IE says this object attribute doesn't exist.\n\nhelp?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/345",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/345/comments",
    "title": "Save model before previous save issues POST(create) instead of PUT(update) request",
    "created_at": "2011-05-04T12:37:45Z",
    "updated_at": "2014-11-17T18:04:53Z",
    "body": "I've developed a nice rich application interface where users can add objects very quickly, and then start updating properties of those objects by simply tabbing to the relevant fields.  The problem I am having is that sometimes the user beats the server to it's initial save and we end up saving two objects.  \n\nAn example of how to recreate this problem is as follows:\n1. User clicks the Add person button, we add this to the DOM but don't save anything yet as we don't have any data yet.\ncode sample --> person = new Person();\n2. User enters a value into the Name field, and tabs out of it (name field loses focus).  This triggers a save so that we update the model on the server.  As the model is new, Backbone.js will automatically issue a POST (create) request to the server.\ncode sample --> person.set ({ name: 'John' });\ncode sample --> person.save(); // create new model\n3. User then very quickly types into the age field they have tabbed into, enters 20 and tabs to the next field (age therefore loses focus).  This again triggers a save so that we update the model on the server.\ncode sample --> person.set ({ age: 20 });\ncode sample --> person.save(); // update the model\n\nSo we would expect in this scenario one POST request to create the model, and one PUT requests to update the model.\n\nHowever, if the first request is still being processed and we have not had a response before the code in point 3 above has run, then what we actually get is two POST requests and thus two objects created instead of one.\n\nSo my question is whether there is some best practice way of dealing with this problem and Backbone.js?  Or, should Backbone.js have a queuing system for save actions so that one request is not sent until the previous request on that object has succeeded/failed?  Or, alternatively should I build something to handle this gracefully by either sending only one create request instead of multiple update requests, perhaps use throttling of some sort, or check if the Backbone model is in the middle of a request and wait until that request is completed.\n\nYour advice on how to deal with this issue would be appreciated.\n\nAnd I'm happy to take a stab at implementing some sort of queuing system, although you may need to put up with my code which just won't be as well formed as the existing code base!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/341",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/341/comments",
    "title": "Dispose views resources",
    "created_at": "2011-04-29T11:30:46Z",
    "updated_at": "2011-04-29T14:39:06Z",
    "body": "Let's say I have a view \"#myView1\" and in my render() method I start a setInterval/setTimeout that is triggered every 2000ms.\n\nLet's say \"#myView1\" has a link to \"#myView2\". If I click on the \"#myView2\" link the setInterval/setTimeout is still running.\n\nIs there any way to ensure that all the resources used by a View are disposed when the view is not visible/used anymore?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/340",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/340/comments",
    "title": "TypeError: Backbone.Model.extend is not a function",
    "created_at": "2011-04-29T09:14:19Z",
    "updated_at": "2011-04-29T13:01:41Z",
    "body": "TypeError: Backbone.Model.extend is not a function\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/338",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/338/comments",
    "title": "Backbone.history: Exception thrown when route contains % character",
    "created_at": "2011-04-27T09:56:38Z",
    "updated_at": "2011-06-16T14:32:48Z",
    "body": "in Backbone.history ->     checkUrl : function() {}\n\nthis function contains a call to decodeURIComponent(this.fragment)\nbut the fragment appears to already be decoded.\n\nAn encoded fragment might contain \"top%2020%25\" \nso its decoded equivalent will contain \"top 20%\"\n\nNow when checkUrl decodes the already decoded URI, it encounters the % character so it expects to find a special character there, and throws an error when it does not.\n\nPerhaps there is browser specific behaviour at work here, where some browsers will decode the URI for you, while others will not. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/335",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/335/comments",
    "title": "Pub/Sub between modules would be nice",
    "created_at": "2011-04-26T07:50:54Z",
    "updated_at": "2011-05-26T19:24:26Z",
    "body": "I'm just starting with Backbone so I may be wrong, but my understanding is that in order to be able to pass data between different modules (from one view to another for instance), one needs to have one module being created inside the other one or to specifically bind them.\n\nIMHO, this makes it more difficult to have modular code with loosely coupled modules.\n\nWouldn't it be nice to have a kind of pub/sub between modules ?\n\nView1 = Backbone.View.extend({\n   initialize: function(){\n     this.subscribe('custom event', callback);\n   }\n  // ...\n})\n\nView2 = Backbone.View.extend({\n  // ...\n  foo: function(){\n    this.publish('custom event', data);\n  }\n})\n\nAs i said, I'm just starting to learn backbone so i may have missed something obvious.  If it is already possible to implement this, I would appreciate any pointers.\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/334",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/334/comments",
    "title": "Saving a model does return a model but not all attributes are accessible.",
    "created_at": "2011-04-24T12:45:08Z",
    "updated_at": "2011-05-26T19:28:33Z",
    "body": "Using the following model:\n\n```\nArtistModel = Backbone.Model.extend({\n    url: function() {\n        return \"/api/g_favartists/\";\n    }    \n}); \n```\n\nWhen saving the model the returned value isn't what I'd expected it to be.\n\n```\nnew_model = new ArtistModel();\nnew_model.set(this.newAttributes());\nn = new_model.save(this.newAttributes());\n\nconsole.log(n); // returns an object with visible attributes\nconsole.log(n.attributes); // this also prints out the objects hooked to the attributes object.\n// but when printing the attributes they are undifined ?\nconsole.log(n.attributes.created; // returns undefined\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/333",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/333/comments",
    "title": "Documentation  bug",
    "created_at": "2011-04-23T07:50:34Z",
    "updated_at": "2011-05-26T19:29:18Z",
    "body": "Left side table of contents has a section:\n\nHistory \n- start\n- saveLocation\n\nThe saveLocation link does not work, and there is no corresponding section in the content.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/328",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/328/comments",
    "title": "model ids when using mongodb",
    "created_at": "2011-04-21T07:58:05Z",
    "updated_at": "2011-04-21T09:12:30Z",
    "body": "Hello, I'm new to Backbone so sorry if I missed something obvious.\n\nI'm currently learning Backbone by writing a small app with nodeJS + mongoose (mongodb) for the backend.\n\nThe issue I'm having is this: every time mongodb creates a new document, the unique identifier automatically generated for it is called '_id' as opposed to 'id'.\n\nAm I mistaken or does that break one's ability to get a document from a collection by id ? (ie collection.get(id) does not work anymore); also, how should i define the url for my model ? with something like 'documents/' + this.attributes._id ?\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/327",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/327/comments",
    "title": "Non-synching base class for Collection",
    "created_at": "2011-04-20T08:11:20Z",
    "updated_at": "2012-01-23T19:58:55Z",
    "body": "There are times when one needs the functionality of a collection but does not want to have it synchronized with any remote data.\n\nFor instance, I have a list of selected items in the UI, and I want to use a collection for this to track changes. However, at the moment I cannot, because the collection of selected items will \"own\" the items added to it. This effectively destroys the syncing inside of the original collection. Of course, I can use a plain array, but then I do not have access to events. I could also extend Backbone.Events, but why should I have to do this when I just want a more simple collection?\n\nI suggest Backbone.Collection to be divided into a very plain base class (underscore functions, triggering etc.) and build the syncing functionality on top of it by extending. This should not break any existing functionality if done correctly.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/326",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/326/comments",
    "title": "Mailing list ?",
    "created_at": "2011-04-19T07:26:44Z",
    "updated_at": "2011-07-05T05:11:40Z",
    "body": "Hello, I've just started looking at Backbone.js and so far it looks terrific.  One issue I have though is that for beginners like myself, Backbone can at times prove a little overwhelming and the steep learning curve is made somewhat worse by the (relative) lack of support for beginners.\n\nTo address that, wouldn't a mailing list make sense ? It would help keep the github repo's issues section less cluttered and allow people with a good knowledge of Backbone help less experienced people with simple questions like this one that I have:\n\nin the Todos example, the Todo model has a 'defaults' property.  Why does it also need an initialize function to set its 'content' ?\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/325",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/325/comments",
    "title": "Preprocessing model attributes on set()",
    "created_at": "2011-04-18T22:27:41Z",
    "updated_at": "2011-04-19T20:24:17Z",
    "body": "I've found that there are some common things I often need to do to attributes that are entered by a user before saving them to a Model. For instance, if an attribute is a string, I trim() whitespace around it.\n\nCurrently, I'm doing this before calling model.set(). But doing so adds clutter to my view code. So I've thought about creating a BaseModel that overrides set(). This would obviously work, but it means that my BaseModel.set() will loop through all attributes being set, and then Model.set() will loop through them again.\n\nIt occurs to me that Backbone models could quite easily preprocess values before setting an attribute. A preprocessor function could be added to the model or to the options passed to set().  So for instance:\n\n```\nvar UserModel = Backbone.Model.extend({\n  preprocessAttribute: function(attr) {\n    return _.isString(attr) ? $.trim(attr) : attr;\n  }\n});\n```\n\nAlternatively, the preprocess function could be passed in the options to set():\n\n```\nuser.set({name: \"   nameWithWhitespace   \"},{preprocessAttribute: function(attr) {return attr;}});\n```\n\nThis could be accomplished with very little change to backbone.js. A simple change to line 211 (as of 4/18/2011) is all that it would take:  \nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L211\n\n```\nset : function(attrs, options) {\n\n  // ...\n\n      // Line 211 currently is: \n      // now[attr] = val;\n\n      // Change line 211 to:\n      now[attr] = options.preprocessAttribute ? options.preprocessAttribute(val) : \n        (this.preprocessAttribute ? this.preprocessAttribute(val) : val);\n\n  // ...\n\n},\n```\n\nThe function name `preprocessAttribute` is a bit long and cumbersome, so some other name might be better. I'm sure there are many more uses for this than just trimming whitespace. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/324",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/324/comments",
    "title": "_previousAttributes not updated on silent change",
    "created_at": "2011-04-17T21:39:43Z",
    "updated_at": "2011-11-17T22:38:01Z",
    "body": "I have an ordered list of items stored in a collection. If the rank of an item change, I update ranks in the collection.\n\n```\nItem = Backbone.Model.extend({\n  // some code\n});\n\nItems = Backbone.Collection.extend({\n  initialize: function() {\n    var me = this;\n    this.bind(\"change:rank\", function(changedItem) {\n      // Find the other item having the same rank\n      var other = me.find(function(e) {\n        return e.get(\"rank\") == changedItem.get(\"rank\")\n          && e.cid != changedItem.cid\n      });\n      // Change its rank to the previous rank of the changed item.\n      if(other) {\n        other.set({rank: changedItem.previous(\"rank\")}, {silent: true});\n      }\n      me.sort();\n    });\n  }\n});\n```\n\nGiven I have item A with rank 1 and item B with rank 2. When I change rank of item A to 2, it will find item with rank 2 (so B) and change its rank to previous rank of A (so 1). I now have item A with rank 2 and item B with rank 1, everything is OK.\n\nBut now, if I change rank of item B to 1, it breaks because _previousAttributes of B is not correctly set. This is because I used `silent` in the change event handler above. If I don't use silent, it will trigger another change event and mess with other items rank.\n\nI monkey patched Backbone to solve my problem :\n\n```\nvar originalSet = Backbone.Model.prototype.set;\nBackbone.Model.prototype.set = function(attrs, options) {\n  this._previousAttributes = _.clone(this.attributes);\n  return originalSet.call(this, attrs, options);\n}\n```\n\nIs it normal that silent changes don't update _previousAttributes ?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/323",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/323/comments",
    "title": "question about controller and view events interaction",
    "created_at": "2011-04-15T23:41:10Z",
    "updated_at": "2011-04-15T23:58:48Z",
    "body": "Hi\n\nI stuck on one problem since 2 days and I can't find any nice solution.\n\nMy view is listening to click event on a button. If user makes a click, the view changes location.hash AND adds a class name to the button, which was clicked, selecting it using currentTarget of passed event object. Controller is listening to the hashchange and says to the model to fetch some data. The view is listening to change event of the model and renders the view then.\n\nThis works fine so far.\n\nThe same but triggered by browser:\n\nMy controller gets a hashchange event, caused by user using adress bar. Controller says to the model to fetch some data from the server. The view is listening to change event of the model and renders the html. \n\nBut I need to add the class name to the button to make it active. So the only way right now is to select the element manually and to add the class.\n\nhere example code:\n\n```\nvar View = Backbone.View.extend({\n    events: {\n        'click .action': 'action'\n    },\n\n    initialize: function() {\n        var self = this;\n        this.model.bind('change:view', function() {\n            this.action();\n        });\n    },\n\n    action: function(e) {\n        location.hash = '/action/done'; \n\n        this.$(e ? e.currentTarget : '.action').addClass('active');\n    }\n})\n```\n\nwhat I am looking for is a way to make this interaction between controller and view events more automatically. F.e. a method which will enable me to trigger click event on the .action  button probably without to write the code for triggering or selecting the element.\n\nYou know what I mean? Am I doing something totally wrong or missundestand any concepts?\n\nf.e. something like this:\n\n```\nvar View = Backbone.View.extend({\n    events: {\n        'click .action': 'action'\n    },\n\n    initialize: function() {\n        var self = this;\n        // triggerHandler method will trigger the proper event on proper element using its handler name\n        this.model.bind('change:view', function() {\n            self.triggerHandler('action');\n        });\n    },\n\n    // this function will be executed twice, this have to be prevented\n    action: function(e) {\n        location.hash = '/action/done'; \n        // because triggerHandler will trigger the event, event object is always passed and\n        // there is no need to use selector here\n        this.$(e.currentTarget).addClass('active');\n    }\n})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/321",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/321/comments",
    "title": "Backbone.sync issue",
    "created_at": "2011-04-15T08:07:51Z",
    "updated_at": "2011-05-13T02:25:18Z",
    "body": "If I use localstorage as persistence strategy, I will override it. but the function is global. If in an app, need CRUD JSON RESTful and Local Storage both, How to do it?\nI suggest specify a sync object to model, If no sync is specified for a model, use the default implementation.\nBackbone.sync should be refined to an interface, but a global object.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/319",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/319/comments",
    "title": "Triggering events manually on objects inside collections causes TypeError",
    "created_at": "2011-04-14T14:39:24Z",
    "updated_at": "2011-04-18T14:43:51Z",
    "body": "How to reproduce:\n\n```\ncollection = new Backbone.Collection\nmodel = new Backbone.Model\ncollection.add(model)\nmodel.trigger(\"whatever\")\n```\n\nwill fail with: TypeError: Cannot read property 'idAttribute' of undefined\n\nHow to workaround:\n\n```\nmodel.trigger(\"whatever\", \"ignored\")\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/317",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/317/comments",
    "title": "triggering location change in controllers",
    "created_at": "2011-04-13T15:54:04Z",
    "updated_at": "2011-05-26T18:12:09Z",
    "body": "Hi,\n\nI want to be able to trigger a location change without to use location.hash directly. Because I don't want to stuck in hash bangs when pushstate support is done #173.\n\nTo clarify what I mean here an example:\n\n```\n<button class=\"action\">Do it</button>\n\nvar Controller = Backbone.Controller.extend({\n    routes: {\n        '/action/:name': 'action'    \n    },\n\n    action: function() {\n        alert('done');\n    }\n})\n\nvar controller = new Controller();\n\nvar View = Backbone.View.extend({\n    events: {\n        'click .action': 'action'\n    },\n\n    action: function() {\n        controller.changeLocation('/action/done');  \n    }\n})\n```\n\ncontroller.changeLocation is something what I am missing right now, it should change the url using location.hash or pushState, call a propper controller action and trigger the route event.\n\nOleg\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/316",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/316/comments",
    "title": "Backbone.sync params",
    "created_at": "2011-04-13T14:43:49Z",
    "updated_at": "2011-04-18T15:31:50Z",
    "body": "Depending on what I use, backbone.js or backbone-min.js, the passed parameters to `Backbone.sync` are different.\n\nbackbone-min.js uses `function(method, model, success, error)`  \nbackbone.js uses `function(method, model, options)`  \n\nThe documentation refers to `function(method, model, success, error)`, so I guess this one is correct? But why is there a difference at all?!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/315",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/315/comments",
    "title": "How to debounce view events?",
    "created_at": "2011-04-13T11:50:59Z",
    "updated_at": "2017-02-21T21:39:48Z",
    "body": "How would you debounce this keyup listener so the subdomain check only happens after a delay?\n\nThis kind of works, but the `_checkSubdomain` function is still called for each keyup event, the calls just get delayed:\n\n```\nevents: {\n  'keyup #subdomain' : 'checkSubdomain'\n},\n\ncheckSubdomain: function(e){\n  this.debounced = _.debounce(_.bind(this._checkSubdomain, this, e), 2000);\n  this.debounced();\n},\n\n_checkSubdomain: function(e){\n  // called once for each keyup event :(     \n  console.log(e.target.value);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/314",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/314/comments",
    "title": "reverse sort order of models in a collection",
    "created_at": "2011-04-11T19:55:40Z",
    "updated_at": "2013-09-24T20:28:52Z",
    "body": "hey,\n\nwhat's the best way to reverse the sort order a collection? my comparator sorts all models by date,\nbut i would need them in reverse order. using `toArray()` and `reverse()` seems pretty ugly.\n\ngiven i'm not missing something important here, i'd vote for a backbone model attribute to set the\nsort order along with the comparator.\n\ncheers,\ndaniel\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/313",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/313/comments",
    "title": "Unsilence setting attributes on Model initialization",
    "created_at": "2011-04-11T19:06:58Z",
    "updated_at": "2011-05-02T20:58:26Z",
    "body": "hey,\n\nfirst of all, thank you for this awesome library. really enjoying it!\n\nno for the question: i have some models with hasMany relations and would like to extend backbone to automatically listen for and event like `change attribute` when a new model is initialized.\n\nas far as i can see, [the change event](https://github.com/documentcloud/backbone/blob/master/backbone.js#L212) is not fired because [`silent` is set to `true`](https://github.com/documentcloud/backbone/blob/master/backbone.js#L140). if there would be an option on a backbone model to set `silent` to `false`, one could bind to \"change attribute\" instead of using the `initialize` function.\n\nhere's what i'm currently doing:\n\n```\ninitialize: function() {\n  this.set({ activity: _.map(this.get(\"activity\"), function(activity) { new Activity(activity) })\n}\n```\n\ndoes this make sense?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/310",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/310/comments",
    "title": "Problem with delegateEvents() functionality and Subviews",
    "created_at": "2011-04-06T16:56:41Z",
    "updated_at": "2012-02-20T06:55:04Z",
    "body": "There are many cases where you have to deal with a heavyweight SubView that is an integral part of a MainView (in my case a visualization, involving lots of data=view-state). I just want to setup that SubView once, within the MainView's constructor and keep a reference.\nWhen it comes to rendering, I just have to render the MainView first, which injects the container element where the subview will live. Then I render the subview.\n\nThis is all working fine, except declarative events are not working for the subview. That's because Backbone.View#delegateEvents() is only called on view construction. Since at construction time there's no container element in place, no events can be bound. I could solve this by calling this.delegateEvents() manually at the end of the subview's render method. However, is there a better solution? Isn't this a common use-case? In my case I simply want to reduce the number of view constructions to a minimum.\n\nHere's some code that is working, but could (should) be improved.\n\nhttps://gist.github.com/905962\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/309",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/309/comments",
    "title": "Unbind from Model Event within trigger",
    "created_at": "2011-04-06T16:44:53Z",
    "updated_at": "2011-07-15T01:37:08Z",
    "body": "There are some events on my model that I would like an equivalent of jQuery's \"one\" concept.  Basically an event is triggered, the callback is run then immediately unbound.  Thought I might do this by simply unbinding the callback within itself.  The problem with that is if there are multiple events bound for example to a model's change event, the trigger for the subsequent event errors out.  This is because callbacks are kept within an array, trigger loops through the array of callbacks, but if one of those callbacks removes itself (unbind), the slice of the callback changes the array size and then within the trigger loop it tries to call a callback on the array which doesn't exist anymore.\n\nSo, two questions.  Has anyone else has to deal with a situation where a callback should only be triggered once? If so, how did you accomplish it?\n\nAlso, it seems like there could be a better way to keep track of callbacks in events than to store them in an array and using slice to remove them, which could guard against a callback removing itself from the list and still allow others to continue.\n\n```\ntrigger : function(ev) {\n  var list, calls, i, l;\n  if (!(calls = this._callbacks)) return this;\n  if (list = calls[ev]) {\n    for (i = 0, l = list.length; i < l; i++) {\n      // if the callback unbinds itself then the list length changes and the\n      // following events will not be called in the correct order or at all.\n      list[i].apply(this, Array.prototype.slice.call(arguments, 1));\n    }\n  }\n  if (list = calls['all']) {\n    for (i = 0, l = list.length; i < l; i++) {\n      list[i].apply(this, arguments);\n    }\n  }\n  return this;\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/308",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/308/comments",
    "title": "Add a \"404\" callback to Backbone.Controller?",
    "created_at": "2011-04-06T15:40:39Z",
    "updated_at": "2013-11-15T19:00:28Z",
    "body": "Hey all,\n\nHow do you feel about extending Backbone.Controller to optionally call a function when a hashchange event is triggered, but no matching route is found. For example:\n\n```\nnew Backbone.Controller({\n\n      routes : {\n           \"foo\": \"onFoo\",\n           \"bar\"  \"onBar\"\n       },\n\n      // Backbone will call this function when there's no matching route.\n      routeNotFound : function () {\n             alert(\"This page doesn't exist\");\n      },\n\n      ....\n});\n```\n\nThanks,\nMatt\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/306",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/306/comments",
    "title": "Nested Views",
    "created_at": "2011-04-04T16:20:55Z",
    "updated_at": "2011-04-05T09:17:42Z",
    "body": "I have a situation where one of my views is nested inside another. The relationship between the models is not nested. One of my views is a tr and the other view is a single td inside that tr.\n\nI cannot bind events to the td because they get consumed by the tr and as far as I know there is no option not consume the event with my handler.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/304",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/304/comments",
    "title": "Collection Sync - abort Ajax request if one is running",
    "created_at": "2011-04-01T10:28:15Z",
    "updated_at": "2012-02-25T18:45:53Z",
    "body": "Hello,\n\nI wonder why Backbone doesn't handle multiple requests right now. Maybe, it's a question of framework implementation.\n\nFor now on the line 943 of backbone.js ajax call is handled by simply making an ajax call. If sync method would be a mix-in for instances of models and collections, and default method call would be the same as it is now, it would be possible to handle these kinds of things easily.\n\nIs there any reason why that might be considered a harmful practice, and therefore is discourages by Backbone?\n\nThank you! \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/303",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/303/comments",
    "title": "Modifying a Collection while iterating over it",
    "created_at": "2011-04-01T06:00:45Z",
    "updated_at": "2012-09-18T01:49:39Z",
    "body": "I'm creating a Collection like so: \n\n```\nwindow.SomeList = Backbone.Collection.extend({\n    localStorage: new Store(\"stuff\") // using the localstorage class\n});\n\nvar aList = new SomeList;\n```\n\nthen I'm adding items to my Collection \n\n```\n_.times(20, function() {aList.create()})\nconsole.log(aList.length) // outputs 20\n```\n\nthen later I'm trying to remove all of these items:\n\n```\naList.each(function(item){\n    item.destroy()\n});\n```\n\nbut it seems to only remove half of the items (every second one?)?!\n\n```\nconsole.log(aList.length) // outputs 10\n```\n\nI'd thought it was that the destroy was failing, but it doesn't, it just seems to quit out of the each prematurely. Any ideas?\n\nI have put up an example app to play with... can anyone help?\nhttp://electric-robot-295.heroku.com/\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/302",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/302/comments",
    "title": "Renaming the ID to _id because of CouchDB",
    "created_at": "2011-04-01T03:38:17Z",
    "updated_at": "2015-01-26T07:54:55Z",
    "body": "Hello again\n\nBecause the CouchDB stores the IDs under the name '_id' I have to map every ID in Backbone models to _id and reverse which is annoying and a waste of bandwidth.\n\nIs there a way tho configure the name of the ID attribute for all Backbone models?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/301",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/301/comments",
    "title": "\"No element found\" when fetching no results",
    "created_at": "2011-04-01T03:01:22Z",
    "updated_at": "2011-04-18T18:19:42Z",
    "body": "I have a case that my server isn't returnng any results when the application is in the initial state without any entries in the DB.\n\nGET returns no response (empty array) and for strange reasons I can't understand from Firebug's stack trace this error message \"no element found\".\n\nProbably a null reference somewhere and Backbone can't cope with it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/300",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/300/comments",
    "title": "Support WebSocket",
    "created_at": "2011-04-01T01:04:37Z",
    "updated_at": "2011-04-18T18:21:06Z",
    "body": "With socket.io / node.js on the raise it could be a big plus to enhance Backbone with a light WebSocket adapter. Something similiar to the LocalStorage you have here.\n\nsocket.io contains too many code lines and slows down the app. So why not implement a light adapter straight for Backbone.sync() so that the handler in that adapter maps CRUD to WebSockets instead of REST to speeden up communication and to make Backbone more attractive for real time applications?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/298",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/298/comments",
    "title": "Before / After Filters for Controller Routes",
    "created_at": "2011-03-30T17:22:47Z",
    "updated_at": "2011-04-18T18:25:30Z",
    "body": "https://gist.github.com/894830\n\nI do something like this, which allows me to define a before and after function on my controller classes.  Pretty useful feature for keeping the route handlers DRY\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/297",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/297/comments",
    "title": "Minified ver of Backbone in the repo should be updated or removed",
    "created_at": "2011-03-30T16:40:46Z",
    "updated_at": "2011-04-18T18:33:36Z",
    "body": "Hey,\n\nThe backbone-min.js file should either be regenerated when new commits arrive or removed from the master branch. Keeping an older-stable version is really confusing, as we've here quite often cloned the repo, copied both the unminified and minified to a project and then later stumbled upon weird bugs because the -min.js file differs from the unminified one. \n\nCheers,\n\nAndri\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/296",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/296/comments",
    "title": "Update documentation to include note about jQuery/Zepto dependency",
    "created_at": "2011-03-29T09:38:33Z",
    "updated_at": "2011-04-18T18:32:31Z",
    "body": "Just ran into an issue with Backbone.history.start() due to jQuery not being loaded before Backbone. \n\nNot a big issue, and it was easy to track down -- but it took a while longer than necessary because the documentation explicitly says that the only hard dependency is underscore.js, which is not true.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/295",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/295/comments",
    "title": "Display constructor name when logging out objects with console.log",
    "created_at": "2011-03-27T17:19:48Z",
    "updated_at": "2011-03-28T12:35:14Z",
    "body": "Currently (under chrome) console.log(<some backbone object>) displays the following\n\n_r.d_\n\nDebugging would be simplified if console.log(<some backbone object>) instead displayed\n\n_Backbone.View_\n\nOr appropriate subclass.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/294",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/294/comments",
    "title": "Support for views inheritance",
    "created_at": "2011-03-26T23:01:47Z",
    "updated_at": "2011-05-31T07:17:06Z",
    "body": "What is the proper way inheriting and extend views?\n\nI have written some ideas about this topic in my blog:\nhttp://kalimotxocoding.blogspot.com/2011/03/playing-with-backbonejs-views.html\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/293",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/293/comments",
    "title": "same model in multiple collections seems to not work",
    "created_at": "2011-03-24T16:22:15Z",
    "updated_at": "2011-03-24T16:35:44Z",
    "body": "I'm quite new to Backbone, but I'm using it and seem to have run into an issue where a model needs to appear in two separate collections but errors due to it already existing in the collection.  Is that the expected behavior?  I think it makes sense that a model could be in multiple collections, but a collection in my mind is an Array with event handling.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/292",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/292/comments",
    "title": "how to unbind events when switching between views",
    "created_at": "2011-03-23T16:55:30Z",
    "updated_at": "2011-09-28T08:54:10Z",
    "body": "is there a way to unbind all event handlers added in a view?\n\nMy problem is that I've an app with separated views for index/show/edit. When I switch between these, the event bindings remain which causes several issues.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/291",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/291/comments",
    "title": "How to override the extend Method?",
    "created_at": "2011-03-23T09:54:25Z",
    "updated_at": "2013-11-06T02:59:47Z",
    "body": "How can I override the Model.extend() method (I'm using the latest backbone.js master with that patch checked in)? My goal is to setup some model relations specified in the class Attributes once the model is extended (a similar approach to ligament.js, but saving the extra setup function calls)\n\nHowever I had no success using this approach:\n\n```\nMyModel = Backbone.Model.extend({\n   extend: function (){\n     alert('my extend called');\n     return Backbone.Model.extend.call(this, arguments)\n  }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/290",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/290/comments",
    "title": "Collection Fetch Should Pass options to Refresh Function",
    "created_at": "2011-03-23T07:33:48Z",
    "updated_at": "2011-04-18T18:54:06Z",
    "body": "Line 483 should be:\n\ncollection.refresh(collection.parse(resp), options);\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/288",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/288/comments",
    "title": "Good examples with drag and drop functionalities?",
    "created_at": "2011-03-22T02:12:06Z",
    "updated_at": "2011-04-19T14:28:57Z",
    "body": "Hello guys\n\nI'm looking for good Backbone example where drag and drop functionalities from jQuery UI's Drag & Drop module are used. Of course, jQuery UI doesn't have to do anything with Backbone. All I'm looking for are examples where drag and drop events are caught.\n\nThanks,\nMichael\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/287",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/287/comments",
    "title": "Where to ask things about Backbone?",
    "created_at": "2011-03-21T15:02:36Z",
    "updated_at": "2016-02-19T17:27:26Z",
    "body": "Is it OK to ask here, or is there an official place to ask?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/285",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/285/comments",
    "title": "What to expect from the upcoming backbone.js major release?",
    "created_at": "2011-03-21T10:15:14Z",
    "updated_at": "2011-07-05T13:23:09Z",
    "body": "The wiki roadmap says there might be a major backbone release in April (in conjunction with the upcoming JSConf).\n\nAs there hasn't been so much \"suspicious\" github activity in the project now, I'm curious what we can expect from the next release.\n\nJeremy, can you give us a more detailed overview of the planned features? Will it be easier to create nested models/collections?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/284",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/284/comments",
    "title": "IF-Match Header",
    "created_at": "2011-03-21T05:04:14Z",
    "updated_at": "2011-03-21T13:51:30Z",
    "body": "Our API needs to be able to handle the IF-Match header.  This is a standard \"etag\" type header that is used to pass optimistic concurrency information.  Basically, when a PUT or DELETE is called, the tag is set to the version of the record on the client and that is then matched to the server to make sure that the record did not change since the client retrieved it.  If it does, then a 412 status code is supposed to be sent.  While not quite a standard, this is an accepted way of handling optimistic concurrency in REST services.  \n\nPUTs can obviously just pass the correct version in the body of the request.  Put a DELETE request can not.  The IF-Match alleviates the problem.\n\nIf this is something to pursue, I have absolutely no idea about the best way of handling it.  I created a fix that was very specific to our needs.  In the Backbone.synch, I simply added the following code to match up a version attribute on the model:\n\n```\n    var version = model.get(\"version\");\n    if (!isNullOrUndefined(version))\n        params.beforeSend = function (xhr) {\n            xhr.setRequestHeader(\"If-Match\", version);\n        };\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/283",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/283/comments",
    "title": "Collection Parse",
    "created_at": "2011-03-20T15:13:24Z",
    "updated_at": "2012-09-03T15:41:10Z",
    "body": "I think that a collection parse operation should not be a no op.  The model already is a no op and if a parse is created for the model, then the collection should automatically take that into account instead of requiring the developer to also create a parse on the collection. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/281",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/281/comments",
    "title": "Controller created before routes are set how to apply new route?",
    "created_at": "2011-03-19T07:59:28Z",
    "updated_at": "2011-03-21T04:11:31Z",
    "body": "I created a controller and later used the controller.route method to add new routes to the controller.\n\nBut since the routes seem to only be triggered by hashchange, only the '' route's callback is triggered.\n\nIn order to get the new routes working on initial page load, what should I do?\n\nI can't seem to trigger a hashchange. $(window).trigger('hashchange') doesn't work.\n\nDo you have any advice?\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/280",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/280/comments",
    "title": "view events handler enhancement proposal",
    "created_at": "2011-03-18T20:49:37Z",
    "updated_at": "2011-03-21T14:56:46Z",
    "body": "Issue: I want to separate selectors for events and css classes/ids.\n\nWhy?\n\nBecause if you let designer to do css/html he will break your javascript code, which depends on classes/ids. It is also nicer to separate this things and don't create this triple dependencies.\n\nI have wrote a jquery plugin for a long time ago, which works well for me since years, I have just published it:\n\nhttps://github.com/kof/jquery-actionController\n\nThe solution is to use any other attributes instead of classes/ids and of course use events delegation. We could do the same thing with backbone right now:\n\n```\nvar DocumentRow = Backbone.View.extend({\n  events: {\n    \"click [data-action=\"open\"]\":          \"open\",\n    \"click [data-action=\"openEditDialog\"]\":   \"openEditDialog\",\n    \"click [data-action=\"destroy\"]\": \"destroy\"\n  }\n});\n```\n\nBut this doesn't looks good, right?\n\nWhat do you think?\n\nregards,\nOleg\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/279",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/279/comments",
    "title": "Backbone.Model should allow #defaults to be a function",
    "created_at": "2011-03-18T20:44:05Z",
    "updated_at": "2011-03-21T14:19:13Z",
    "body": "For cases where I want a new instance of an object for each instance of a model, I'd like to be able to define my model class like this:\n\n```\nMyApp.Foo = Backbone.Model.extend({\n  defaults: function() {\n    return { foo: new MyApp.Bar({foo: this }) };\n  }\n});\n```\n\nAs it stands, each `Foo` would have the _same_ `Bar` as its `#bar` on initialization.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/278",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/278/comments",
    "title": "Cannot override .extend",
    "created_at": "2011-03-18T20:24:47Z",
    "updated_at": "2011-03-21T21:38:34Z",
    "body": "We have a mixin that overrides `Backbone.Model.extend`, (and the others) to add an `afterExtend` hook. Unfortunately, subclasses get the original definition of `extend` instead of the overridden one. This is because the code for `extend` looks like this:\n\n```\nvar extend = function (protoProps, classProps) {\n  var child = inherits(this, protoProps, classProps);\n  child.extend = extend;\n  return child;\n};\n```\n\nChanging `child.extend = extend` to `child.extend = this.extend` would solve the problem and allow subclasses to \"inherit\" this class method.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/277",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/277/comments",
    "title": "Added primitive base class for creating custom classes",
    "created_at": "2011-03-18T18:27:50Z",
    "updated_at": "2011-03-19T19:23:10Z",
    "body": "I added a primitive base class named `Backbone.Base` so that people can create create custom classes with the self-propagating `extend()` function. More details are in the pull request:\nhttps://github.com/documentcloud/backbone/pull/276\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/275",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/275/comments",
    "title": "How to use static JSON as model data source?",
    "created_at": "2011-03-18T11:03:47Z",
    "updated_at": "2011-03-18T14:27:50Z",
    "body": "I have an offline app that loads data from a static JSON file.\nWhat's the best way to use this as a data source for the model?\nI currently just skip the model and create a collection:\n\n```\nvar products = new App.ProductsCollection(PRODUCTS_JSON);\n```\n\nBut I need to do some processing of the JSON (removing a namespace), and reading the docs it looks like `Model#parse` is the best place for that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/272",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/272/comments",
    "title": "Saving a model with an attribute's value containing \"??\" sends a different value to the server",
    "created_at": "2011-03-16T10:48:53Z",
    "updated_at": "2011-05-26T21:22:56Z",
    "body": "Hi,\n\nI'm not really sure if this is a bug in jQuery or a bug in Backbone so I've also posted a comment on a recently closed (wontfix) bug report in jQuery: http://bugs.jquery.com/ticket/8417#comment:3\n\nThe problem I got is when you have an attribute whose value contains \"??\", that string gets replaced with something like `\"jQuery15106043156015584694_1300271159536\"` when it's posted to the server. Sample code:\n\n```\nvar model = new Backbone.Model({\n  message: \"test ??\"\n});\nmodel.url = \"/echo/json/\";\nmodel.save();\n```\n\nHere's a working sample in jsFiddle: http://jsfiddle.net/6nPzx/ (Sorry you'll have to check it in Firebug to see what's being sent though). \n\nI've narrowed the problem down (I think) to Backbone.sync. If you'll remove `dataType: \"json\"` from the ajax params, it works nicely ([line 975](https://github.com/documentcloud/backbone/blob/master/backbone.js#L975)), which is weird. \n\nDo we have to use `encodeURIComponent` on attribute values? Kind of defeats the purpose of using JSON I think. Also, this problem is only on jQuery 1.5.1. I tested on 1.4.4 and it works fine.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/271",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/271/comments",
    "title": "model.save() does not pass model through validation but model.save(attributes) does",
    "created_at": "2011-03-15T17:50:06Z",
    "updated_at": "2012-01-24T07:33:59Z",
    "body": "When creating a new model and then saving it as follows:\n\n```\nvar todo = new Todo({title: 'Fix bugs'});\ntodo.save();\n```\n\nthe model's validation method is not called before making the POST request unless the save method is passed the attributes. This passes through validation prior to the server request:\n\n```\nvar todo = new Todo();\ntodo.save({title: 'Fix bugs'});\n```\n\nIs this intentional? If so, it seems a little counterintuitive to skip validation for newly instantiated models.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/270",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/270/comments",
    "title": "Make custom methods on a model direct properties",
    "created_at": "2011-03-14T08:54:10Z",
    "updated_at": "2011-03-20T18:35:06Z",
    "body": "IMHO the way to access custom methods on a model is a bit awkward in the moment:\n\n```\n  Model = Backbone.Model.extend({\n    myMethod: function (){\n\n   }\n });\nmodel = new Model();\nmodel.get('myMethod')();\n```\n\nWouldn't it be better to to bind method properties of a Model/Collection directly to `this`? Methods can't be serialized to JSON, and are not so likely to be changed at runtime, so I  don't see a need for getters/setters.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/269",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/269/comments",
    "title": "WebSQL backend (localStorage exists...)",
    "created_at": "2011-03-13T20:02:57Z",
    "updated_at": "2011-05-26T20:27:35Z",
    "body": "Hey,\n\nAnyone has implemented a WebSQL backend for Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/268",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/268/comments",
    "title": "Collection.refresh undefined",
    "created_at": "2011-03-11T19:40:11Z",
    "updated_at": "2011-11-17T12:27:42Z",
    "body": "I've setup my collections and models like so...\n\n```\nvar Runner = Backbone.Model;\nvar Runners = Backbone.Collection.extend({\n  model: Runner, url: '/runners'\n});\n```\n\nAnd when I try to load preloaded data upon page load...\n\n```\nRunners.refresh({\"_id\":\"4d75ad0bfbcf6728fb000017\",\"bacons\":[],\"bff_id\":\"4d75a156fbcf677c88000002\",\"rubber\":false,\"stolen_at\":\"2011-03-07T23:14:03-05:00\",\"lover_id\":\"4d75a156fbcf677c88000003\",\"remembered_at\":\"2011-03-08T23:52:53-05:00\"})\n```\n\nI get this error on the preloaded data line within my template,\n\n```\nTypeError: Result of expression 'Runners.refresh' [undefined] is not a function.\n```\n\nCould someone please tell me what I'm obviously missing or am I going completely insane? I'd really appreciate the help. Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/266",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/266/comments",
    "title": "problem with template in View",
    "created_at": "2011-03-08T00:07:16Z",
    "updated_at": "2011-05-26T20:28:30Z",
    "body": "Hello all,\n\nI have a strange error. In the view, template: _.template($('#item-template').html()), do not work. I get : \"Uncaught TypeError: undefined is not a function\" \n\nBut when I am using _.template($('#item-template').html()) in the initialize or render function, it's working.\n\nThank you for your help\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/265",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/265/comments",
    "title": "Collection fetchMore",
    "created_at": "2011-03-07T16:28:21Z",
    "updated_at": "2011-05-26T20:29:28Z",
    "body": "Sometimes I want to call the server to fetch more models. I'm not sure what the best solution is: to overload the existing `fetch` method, or add a new `fetchMore` method. I implemented the second for now but would like a permanent built-in solution.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/264",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/264/comments",
    "title": "collection.create() doesn't initialize model with attrs",
    "created_at": "2011-03-07T05:51:05Z",
    "updated_at": "2011-05-26T20:46:03Z",
    "body": "when you collection.create() it creates a model without attrs passed in and then uses .set() on the newly created model.  Presumably this is to ensure that validation is run.  Perhaps if it was an option to pass {silent: false} to model.create() we could validate on initialization by default.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/263",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/263/comments",
    "title": "collection.remove() can't take colleciton.models",
    "created_at": "2011-03-07T04:29:51Z",
    "updated_at": "2011-04-22T14:46:09Z",
    "body": "Since there's no removeall method in collections, I had to call collection.remove(collection.models) to accomplish that. However, Only half of the elements are removed with that approach. The problem becomes clear after I look at the source code. At line 446, array index is being used to iterate through the array. When half of the array is removed, the old index will become out of bound. That explains why only half of the collection are removed. \n\nFor now, my work around is to deep copy collection.models and then pass it to remove(). Something like this, \ncollection.remove($.extend(true, [], collection.models))\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/261",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/261/comments",
    "title": "Alternative to get and set on Backbone.Model",
    "created_at": "2011-03-05T20:52:56Z",
    "updated_at": "2012-04-24T21:02:45Z",
    "body": "I've extended Backbone.Model with the following functions. This lets me use `foo.bar()` instead of `foo.get 'bar'` and `foo.bar(value)` instead of `foo.set 'bar', value`. \n\nI'm curious to know how others have approached this.\n\n```\nexpose: ( obj, props... ) ->    \n  console.assert arguments.length > 1\n  proto = obj.prototype\n  for prop in props\n    console.assert not proto[prop]?, \"Property #{prop}: conflict detected!\"\n    @_expose proto, prop  \n\n_expose: ( proto, prop ) ->\n  mutator = ->\n    args = arguments.length\n    if args == 0\n      @.get prop\n    else\n      attrs = {}\n      attrs[prop] = arguments[0]\n      if args == 1\n        @.set attrs\n      else \n        @.set attrs, { silent: arguments[1] }        \n  proto[prop] = mutator\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/259",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/259/comments",
    "title": "TypeError: Result of expression 'this._configure' [undefined] is not a function.",
    "created_at": "2011-03-04T16:39:51Z",
    "updated_at": "2011-03-05T18:05:20Z",
    "body": "TypeError: Result of expression 'this._configure' [undefined] is not a function.\n\nI keep running into this error any time I extend Backbone.View\n\nmy app structure looks like :\n$(function(){  \nwindow.Project = Backbone.Model.extend({});\nwindow.ProjectCollection = Backbone.Collection.extend({});\nwindow.projects = new ProjectCollection;\nwindow.ProjectView = Backbone.View.extend({});\nwindow.view = ProjectView({});\nwindow.view.render();\n});\n\nEven with this blank structure I still get the error, and when I have all my code filled in I get the exact same error\n\nAm I missing a dependancy? in my index.html I load the following in order:\n\njquery.js\nunderscore.js\nbackbone.js\n(and at the bottom of my body)\nindex.js\n\nAnd if I take the 'window' off of my variables i get the same error.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/256",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/256/comments",
    "title": "multiple model.destroy() locking up backend",
    "created_at": "2011-03-01T22:51:14Z",
    "updated_at": "2011-03-05T19:02:56Z",
    "body": "Hi folks,\n\nIn the example Todos app for backbone, this takes place:\n\n```\nclearCompleted: function() {\n  _.each(Todos.done(), function(todo){ todo.clear(); });\n  return false;\n},\n```\n\nLets say I am deleting 20 items at once...\nThis is fine with the localstorage solution, but when I try a similar process with a database on the backend (sqlite/datamapper/sinatra) the fact that it sends off multiple delete http requests simultaneously causes the db to lock and send back an error.\n\nIs this something any of you have run into?\n\nI can think of two ways around it:\n1. Have a destroyBatch() that sends an array of id's into a DELETE call, and have sinatra sniff out the multiple ids and handle the deletes all at once.\n2. Have a destroyAsync() on the client-side that pushes the ids into a queue and calls destroy() on the models one-by-one in an async chain reaction.\n\nDo either of those solutions seem reasonable, or am I a frail goose flapping wildly?\n-j\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/254",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/254/comments",
    "title": "Fetching a model calls validate method",
    "created_at": "2011-03-01T14:43:49Z",
    "updated_at": "2011-03-01T18:13:14Z",
    "body": "When fetching a model from the server the data should be interpreted as \"valid\" and thus not validate it. \n\nI have a model which is read only on the client side and I put a failing a validation method in it to avoid any changes, when fetching this model it fails to set attributes.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/253",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/253/comments",
    "title": "Empty Comparator Reverses Model Order In Collection",
    "created_at": "2011-03-01T06:34:21Z",
    "updated_at": "2011-05-26T21:06:25Z",
    "body": "When I have this in my Collection:\n\n,comparator: function(model){return;}\n\nThe order of my models reverses.  I would expect it to keep them in the order that they are inserted.  Is this a bug or am I just wrong in my expectations? \n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/252",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/252/comments",
    "title": "Outdated backbone-min.js",
    "created_at": "2011-02-28T14:30:58Z",
    "updated_at": "2011-02-28T14:32:34Z",
    "body": "backbone-min.js from the repository is minified old version of the lib that doesn't match backbone.js. \n\nI've just spent 2 hours trying to figure out why it doesn't work the way it should because I was looking at backbone.js on github (as it's hard to analyze minified version ;-))\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/251",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/251/comments",
    "title": "Ruby-like accessors on Model",
    "created_at": "2011-02-28T00:04:03Z",
    "updated_at": "2011-05-26T21:07:54Z",
    "body": "What about to add Ruby like accessors to Model class? So that you can \"declare\" some properties to be readable/writable and get rid of those repetetive \n\n```\nfunction (name) { return this.get(name); }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/250",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/250/comments",
    "title": "QUnit include messed up",
    "created_at": "2011-02-27T21:57:53Z",
    "updated_at": "2011-05-27T13:58:32Z",
    "body": "Looks like the last commit to update QUnit was an append, not a replace. See https://github.com/documentcloud/backbone/blob/master/test/vendor/qunit.js#L998\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/249",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/249/comments",
    "title": "Backbone.Controller options",
    "created_at": "2011-02-27T16:49:10Z",
    "updated_at": "2011-05-27T14:01:19Z",
    "body": "Would it be possible to store the initial parameters sent into the constructor of a Backbone.Controller in `this.options` much like it works in Backbone.View and Backbone.Model?  It is strange to have my controllers' `initialize` method accept an argument, but the rest of them do not because they are grabbing the parameters from `this.options`.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/247",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/247/comments",
    "title": "How to generally enable validation?",
    "created_at": "2011-02-26T09:42:47Z",
    "updated_at": "2013-01-21T23:38:05Z",
    "body": "Why do i need to enable validation for each `save()` call? I think validation should be enabled by default.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/246",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/246/comments",
    "title": ".previous(attribute) returns wrong previous attribute value",
    "created_at": "2011-02-24T23:26:54Z",
    "updated_at": "2011-05-27T14:30:16Z",
    "body": "Backbone v0.3.3\nUnderscore v1.1.4\nReproduce with the following code:\n\n```\nA = Backbone.Model.extend({\n    initialize: function() {\n        this.bind(\"change:foo\", function(a, new_foo) {\n            // whatever\n        });\n\n        this.bind(\"change:state\", function(a, new_state) {\n            log(\"*A*: a.state changed from\", a.previous(\"state\"), \"to\", new_state);\n\n            this.set({ foo: \"whatever\" });\n        });\n    }\n})\n\nB = Backbone.Model.extend({\n    initialize: function() {\n        this.get(\"a\").bind(\"change:state\", function(a, new_state) {\n            log(\"*B*: a.state changed from\", a.previous(\"state\"), \"to\", new_state); \n        });\n    }\n});\n```\n\nNow when I do this in the JavaScript Console:\n\n```\n> a = new A();\n> b = new B({ a: a });\n> a.set({ state: \"hello\" });\n```\n\nI'm getting this output:\n\n```\n< *A*: a.state changed from\", undefined, \"to\", \"hello\"\n< *B*: a.state changed from\", \"hello\", \"to\", \"hello\"\n```\n\nThe cause of this problem is that \"set foo to whatever\"-call in the event handler in A, which seems to lead to a loss of that information.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/245",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/245/comments",
    "title": "IE7 contentWindow Error Line 693",
    "created_at": "2011-02-24T17:56:53Z",
    "updated_at": "2012-08-24T18:33:19Z",
    "body": "Hi,\nat line 693 of the backbone.js\nthis.iframe = $('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n\nerror:\nLine: 693\nError: Unable to get value of the property 'contentWindow': object is null or undefined\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/244",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/244/comments",
    "title": "View events removed on extend",
    "created_at": "2011-02-23T13:59:12Z",
    "updated_at": "2013-08-09T15:28:20Z",
    "body": "when extending a View which has events defined, the original events get overwritten:\nhttps://gist.github.com/840452\nin example the, the onFooClick won't get triggered.\nThe problem is connected to the use of _.extend if I'm not mistaken.\nwhat are the perspectives on implementing 'deep' merge/extend in general in Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/243",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/243/comments",
    "title": "What should i do when i have to post data with \"application/x-www-form-urlencoded\" mime type?",
    "created_at": "2011-02-23T07:16:02Z",
    "updated_at": "2011-05-27T14:41:08Z",
    "body": "I notice that \"Backbone.emulateJSON = true\" can make the request with \"application/x-www-form-urlencoded\" mime type, but i don't want to serialize JSON under a model parameter.\ni'd like to post the data such as:\n\ncontent share\nimgType upload\npic         69f6d385jw6dem8zg5pacj\nretcode \nstyleid 1\n\ncause i have to upload a picture form my computer and post it to the server......\nthanks~\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/242",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/242/comments",
    "title": "URL reversing",
    "created_at": "2011-02-22T22:12:48Z",
    "updated_at": "2011-05-26T19:06:10Z",
    "body": "There is URL parsing in Backbone.History already, but construction of URLs is still mostly string concatenation. This can lead to a possible misprints and sometimes it's hard to determine which URL you are constructing. And this is especially so upon URL refactoring, when you need to find all such URLs to change them and it's simply hard to do.\n\nWhat I propose as solution is adding a method on History/Controller: `reverse(name, arg1[, argN*])`. This will be self-descriptive (you have an URL name here), and will save you from misprints (in case if URL is not found, you'll get an exception).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/241",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/241/comments",
    "title": "Make defaults hash attribute accept functions instead of just simple data types, execute function on creation of new model",
    "created_at": "2011-02-22T19:20:49Z",
    "updated_at": "2011-05-27T14:45:04Z",
    "body": "This is useful for making a default a timestamp for instance:\n\ncreated_at: -> new Date()\n\nor something like that.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/240",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/240/comments",
    "title": "Make `hasChanged` private",
    "created_at": "2011-02-22T14:29:40Z",
    "updated_at": "2011-06-16T11:59:18Z",
    "body": "Unless I misunderstand it, the `hasChanged` function will always return false when using the public API.\n\nPerhaps this function would be best documented and/or made private. I spent some time confused about this issue, until I read through the BB source.\n\nJust a thought! Thanks for reading.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/239",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/239/comments",
    "title": "Improve error handling with consistent arguments to error handlers",
    "created_at": "2011-02-17T10:41:10Z",
    "updated_at": "2011-05-27T18:55:41Z",
    "body": "Error handling could do with some improvement in backbone. The arguments passed to the error callback are not consistent. It makes it difficult to determine inside of the error handler what caused the error. There is also additional information that is not passed the the user's error and success handlers that would be useful. \n\n---\n\nSorry for the long posting, but I've done a lot of valuable debugging and wanted to get it all into writing so that it isn't lost. I also want to describe some scenarios in detail:\n\n1: When model.save() is called, set() is run on the attributes passed to it. Set() then calls validate(). If validate() fails, it returns an error object to set(), which calls the options.error() with the model and the error object, or triggers an error event with the model, the error object, and save's options object. So in this scenario, two different error handler signatures are used.\n\n```\nError event handler gets:\n    *model*\n    *validation error*\n    *original save options*\nError callback gets:\n    *model*\n    *validation error*\n```\n\n2: If initial validation succeeds in model.save(), then wrapper error and success handlers are assigned to the original options.error and options.success. These wrappers call the original options.error and options.success if they existed. The error wrapper triggers an error event if options.error did not exist. So assuming sync() fails, the error wrapper is called which either calls the original save options.error method or triggers an error event.\n\nHowever, the error wrapper only has one parameter even though jQuery's ajax error callback receives three arguments (jqXHR, textStatus, errorThrown). Only jqXHR is passed on to the error wrapper, which then passes the model, jqXHR, and the \"enhanced\" save options back to the backbone user's error handler. It would be nice if textStatus and errorThrown was also provided to the user's error handler.\n\nAlso note that the options passed to the error handler has options.error and options.success overwritten with wrapper methods for the original method. So if you use those in your callback for some reason, more than what you expect might happen (wrapped success calls model.set() and wrapped error could trigger an error event).\n\n```\nError event handler gets\n    *model*\n    *jqXHR object*\n    *save options with wrapped handlers*\nError callback gets:\n    *model*\n    *jqXHR object*\n    *save options with wrapped handlers*\n```\n\n3: If initial validation succeeds in model.save(), and sync() is successful, then the wrapped success handler is called. This takes the new data returned from the server and calls model.set() with it. The set() method in turn calls validate(). If validate() fails, then set() fails, which then causes options.error to be called or an error event to be triggered.\n\nUnfortunately, the jqXHR object which has been provided to the wrapped success handler does not get passed on to model.set(). So when model.validate() fails, it doesn't know about the jqXHR object and cannot pass it to the error handler. Of course, at this point, it is calling the _wrapped_ error handler, not the original error handler. This could pose problems if more logic is added to the wrapped error handler in the future.\n\n```\nError event handler gets:\n    *model*\n    *validation error object from XHR resulting data*\n    *save options with wrapped handlers*\nError callback gets:\n    *model*\n    *validation error object from XHR resulting data*\n```\n\n---\n\nAs you can see, the objects passed to the error handlers in these 3 scenarios are all different. This makes it very difficult to write error handlers that do what you want.\n\nFirst and foremost, I believe that all error callbacks should receive the same and consistent arguments. When certain arguments aren't available, null values would be passed.\n\nHowever, since there are many possible arguments that might be available, I'd suggest combining them into a single object. Perhaps something like this, although it certainly might be overkill:\n\n```\n{\n    model: (original model),\n    validation: {\n        beforeSync: (result of first validate() call),\n        afterSync: (result of second validate() call)\n    },\n    data: (plain JS object of JSON.parse(jqXHR.responseText) ),\n    response: (jquery jqXHR object),\n    textStatus: (passed to jquery error handler),\n    errorThrown: (passed to jquery error handler),\n    options: {\n        original: (original options passed to save() call),\n        wrapped: (options with wrapped error and success)\n    }\n}\n```\n\n---\n\nAnother option jashkenas and I discussed on #documentcloud is to have multiple error handlers. There could be validationError and syncError methods passed in the options to save(). In addition, there could be sync:error and validate:error events triggered. \n\nThis approach may complicate things too much, but then again it might be simpler than passing that massive object above to an error handler and expecting the user to write code to handle every situation.\n\n---\n\nLastly, it would be good to also make sure that success() arguments are consistent and have all of the information a user might need.  For instance, in Model.save(), the following wrapped success method is created:\n\n```\n  options.success = function(resp) {\n    if (!model.set(model.parse(resp), options)) return false;\n    if (success) success(model, resp);\n  };\n```\n\nHowever, when jquery calls this method as the success handler for $.ajax(), it passes three arguments. It would be useful to pass those objects to the user's onSuccess handler. Even better if there is a way to also pass them to model.set() so that if model.validate() fails, they can be passed to the error handler.\n\n```\n  options.success = function(resp,textStatus,jqXHR) {\n    if (!model.set(model.parse(resp), options)) return false;\n    if (success) success(model, resp, textStatus, jqXHR);\n  };\n```\n\nI think that's everything that I've discovered when dealing with error callbacks. Sorry to write a novel, but hopefully it will be useful.\n\nTauren\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/238",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/238/comments",
    "title": "Question: Can I use any Javascript framework with Backbone?",
    "created_at": "2011-02-16T21:18:49Z",
    "updated_at": "2013-08-26T22:17:27Z",
    "body": "Hello\n\nI read the readme of Backbone. I understand that Backbone intention is to just encapsule model behaviour and not to provide a full set of functionalities like widgets, effects, etc.\n\nSo I need to get those features by other frameworks.\n\nI was wondering if I can use any Javascript framework with Backbone or there are any incompatibilities.\n\nSpecifically, I was wondering if I can use Mootools & Dojo.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/237",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/237/comments",
    "title": "Question: Can I use any Javascript framework with Backbone?",
    "created_at": "2011-02-16T21:18:48Z",
    "updated_at": "2013-09-16T15:20:39Z",
    "body": "Hello\n\nI read the readme of Backbone. I understand that Backbone intention is to just encapsule model behaviour and not to provide a full set of functionalities like widgets, effects, etc.\n\nSo I need to get those features by other frameworks.\n\nI was wondering if I can use any Javascript framework with Backbone or there are any incompatibilities.\n\nSpecifically, I was wondering if I can use Mootools & Dojo.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/236",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/236/comments",
    "title": "[Question] Model.save calls error callback function on successful update",
    "created_at": "2011-02-16T17:18:00Z",
    "updated_at": "2014-07-11T16:31:02Z",
    "body": "Hi,\n\nI am using Model.save() method and pass attributes hash and options hash that contains both\nsuccess:function(){...} and error:function(model, response){...} callbacks. This works fine when the model is new (meaning on a POST), success function gets called on success and if there is an error it is calling error callback function. However, when I call Model.save second time, this time the backbone uses PUT method to save it to server, and it is successful but calls error callback function instead of success callback. The response passed to error method has status=200 and responseText is \"Ok \".\n\nFor PUTs from server side (rails), I send \"no_content\" back to the client.\n\nIs this working as designed? am I doing something wrong?\n\nAny hints will be greatly appreciated.\n\nThanks\nBabu\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/235",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/235/comments",
    "title": "Collection.save()",
    "created_at": "2011-02-16T08:51:30Z",
    "updated_at": "2016-08-10T20:55:18Z",
    "body": "It'd be great if collections had a `save()` method which would issue a single `PUT` request for all of the modified objects in a collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/234",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/234/comments",
    "title": "Possible problem with jquery 1.5's changes to ajax",
    "created_at": "2011-02-15T15:51:58Z",
    "updated_at": "2011-05-27T16:29:25Z",
    "body": "This is the problem I'm geting along with the model I'm using: https://gist.github.com/827681\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/233",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/233/comments",
    "title": "Model.validate() cannot validate based on results of an XHR request",
    "created_at": "2011-02-15T14:14:48Z",
    "updated_at": "2011-05-27T19:18:35Z",
    "body": "I'd like to add a server-side step to my model validation, but I see no way for this to be possible. A model is validated based on the return value of validate. If there is a return value, validation fails, if there is no return value, it succeeds. There isn't an asynchronous, non-blocking way to delay the return of validate() until an XHR request has completed.\n\nFor instance, assume my account sign-up form gives live feedback if a username is available or not. As you type a username, the UI is updated to show the username field as valid or invalid. An onblur handler would set the new value on the model whenever the username is changed. The model.validate() would do some local sanity checks and then validate the username with the server via an XHR request. Here's a non-working example:\nhttp://pastebin.com/pDA1vajp\n\nTo do this, validate() would need to provide a callback before any sort of XHR step could be part of the validation. Perhaps something like this:\n\n```\nvalidate: function(attrs,callback) {\n  if(attrs.username && !attrs.username.match(/^[a-z0-9][a-z0-9._-]{2,25}$/i)) {\n    callback(\"Invalid Username\");\n  }\n  else {\n    var jqxhr = $.get(\"/api/members/check/\"+encodeURIComponent(attrs.username))\n      .success(function() {\n         // Username is available, validate should succeed\n         // meaning it should return nothing\n         callback();\n      })\n      .error(function() {\n         // Username is not available, validate should fail\n         // meaning it should return anything\n         callback(\"Username Exists\");\n      });\n  }\n```\n\nThe callback would be given the return value. If no value should be returned (validation succeeded), then no parameters would be passed: callback().\n\nObviously, this might mean significant changes to Model._performValidation(), as it's logic would need to support getting the validation response via a callback. It might also affect other places in the codebase, such as set() and save().\n\nWouldn't this be a valuable feature? Or is there a better way to accomplish what I'm after?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/231",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/231/comments",
    "title": "Does Backbone do any cleanup to prevent memory leaks?",
    "created_at": "2011-02-15T13:02:58Z",
    "updated_at": "2013-06-21T17:55:18Z",
    "body": "For example, when a view is removed, are the DOM event handlers unbound?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/230",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/230/comments",
    "title": "SEO with Backbone.Js",
    "created_at": "2011-02-12T23:51:42Z",
    "updated_at": "2012-10-14T11:08:17Z",
    "body": "Since Backbone.JS Applications generate their pages dynamically how do you do SEO optimization? Web Crawlers do not execute javascript code and they could see empty pages without content.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/229",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/229/comments",
    "title": "Event bubbling",
    "created_at": "2011-02-12T14:03:20Z",
    "updated_at": "2013-01-12T08:08:07Z",
    "body": "Want an event bubbling mechanism for Backbone.Event.\nI often create a hierarchy of views. and delete event on the child to its parent.\nI also want to centralize the change handling on models to its owner collection\nbecause per-model closure is somewhat wasteful.\n\nFor both cases, event bubbling will help.\nFor views, we can introduce \"parent\" optional property to bubbling.\nFor collections, we can think a collection of the parent of its holding models.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/228",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/228/comments",
    "title": "Backbone.history not working on IE7",
    "created_at": "2011-02-11T21:53:32Z",
    "updated_at": "2014-02-06T15:58:31Z",
    "body": "I'm experiencing a weird bug on IE7 with Backbone's history. I can create the Controller and start history module but when i click a link ex: example.com/#home, the hash value change in the url and 2 second after, a glitch appear and the hash value is reset to #. The event is fired when asked. The glitch and hash reset cause the Back button to fail.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/227",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/227/comments",
    "title": "on update (PUT) - send only delta",
    "created_at": "2011-02-11T10:53:37Z",
    "updated_at": "2011-05-27T15:45:19Z",
    "body": "To my understanding, upon update the whole updated object is sent in the payload..\n\nTo avoid this I currently do something like this:\n\n<pre><code>\n$.extend(this.changed, this.changedAttributes());\n</code></pre>\n\n\nfor every \"changed\" event, and then:\n\n<pre><code>\nvar zinc = Backbone.sync;\nBackbone.sync = function(method, model) {\n    zinc(method, {}, {data: JSON.stringify(model.changed), url: model.url});\n};\n</code></pre>\n\n\nIs there some better way to handle this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/226",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/226/comments",
    "title": "updating models based on nested JSON objects ",
    "created_at": "2011-02-11T10:38:05Z",
    "updated_at": "2011-05-27T15:46:59Z",
    "body": "consider this case:\n\n<pre><code>\nvar zomg = new Zomg({\n    id: 6, foo: {bar: 1, mat: {cat: 4}}\n});\n</code></pre>\n\n\nNow, say I want to change \"cat\" to be 5 without setting the WHOLE \"foo\" object..\n\nIs there some hacking that can be done to acheive this with the current version? I think something like the following wouldn't be too hard to implement:\n\n<pre><code>\nzomg.set({\n    \"foo.mat.cat\": 5\n});\n</code></pre>\n\n\ncould this be considrered?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/224",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/224/comments",
    "title": "Documentation enhancements",
    "created_at": "2011-02-10T11:49:12Z",
    "updated_at": "2011-02-14T22:59:20Z",
    "body": "In general, would be nice if the Backbone site would format links properly, not just underline on hover. Currently links can be spotted only by hovering everything with the mouse.\n\nCollection.add says that the collection needs the model attribute to work with raw data, the example works without one.\n\nDocs on Backbone.Model.extend mention subclassing, but there's nothing on how do actually do that. Should add an example that shows SubModel.extend({}) usage.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/223",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/223/comments",
    "title": "Broken Json2 Link on Site",
    "created_at": "2011-02-09T02:05:42Z",
    "updated_at": "2011-02-14T21:51:38Z",
    "body": "Just thought I'd let you know that the link to Json2 on your site (http://documentcloud.github.com/backbone/) is broken.  Here's the correct link:\n\nhttp://www.json.org/js.html\n\nWhich links to the actual project:\n\nhttps://github.com/douglascrockford/JSON-js\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/222",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/222/comments",
    "title": "Collection.create not validating appropriately.",
    "created_at": "2011-02-08T20:21:24Z",
    "updated_at": "2011-05-27T16:00:54Z",
    "body": "According to the documentation using the create() method on a collection will instantiate an instance of a model, save the model, then add the model to the set after being created. In practice I am noticing that the validate method of the model is being called after the item is created remotely. Investigation within Backbone shows that the model is instantiated after it has been sent to the server prior to any validation. The expected behavior would be that validation would occur before being sent to the server. Possibly letting the model handle the server interaction.\n\n**Documentation:**\n\nConvenience to create a new instance of a model within a collection. Equivalent to instantiating a model with a hash of attributes, saving the model to the server, and adding the model to the set after being successfully created. Returns the model, or false if a validation error prevented the model from being created. In order for this to work, your should set the model property of the collection.\n\n**Backbone.js inline comment: (Near line 514)**\n\n// Create a new instance of a model in this collection. After the model\n// has been created on the server, it will be added to the collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/220",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/220/comments",
    "title": "Allow a prefix for controller routes/history in general?",
    "created_at": "2011-02-07T19:50:23Z",
    "updated_at": "2011-05-27T16:06:54Z",
    "body": "As far as I can tell, Backbone doesn't provide a way to prefix routes. So, if my URLs look like\n\n```\nhttp://example.com/#/page/sub\n```\n\nor like\n\n```\nhttp://example.com/#!/page/sub\n```\n\n\u2026I have to make sure to prepend the prefix to all my routes, and calls to `Backbone.history.saveLocation`. Is there a way that this could be baked into Backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/219",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/219/comments",
    "title": "Unwanted string substitutions occur when saving a model with the default Backbone.sync implementation",
    "created_at": "2011-02-06T23:11:49Z",
    "updated_at": "2011-05-14T07:24:51Z",
    "body": "Using jQuery 1.5, if the substring `??` or `=?&` is contained in one of a model's attributes, the substring is replaced with `jQuery15033955516782589257_1297027846177` or `=jQuery1503653318649157882_1297028208679&` (numbers vary), respectively. The string substitution occurs during the $.ajax call that is called from the default Backbone.sync implementation. Specifically, it occurs on line 6927 of [jquery-1.5.js](http://code.jquery.com/jquery-1.5.js).\n\nUsing jQuery 1.4.4, the substring `=?&` is replaced with `=jsonp1297030694985&` or similar. `??` is not affected in this version of jQuery, which is why we didn't notice the bug until we upgraded to 1.5.\n\nTo see the bug in action, go to [quietwrite.com](http://quietwrite.com) (they currently use jQuery 1.4.2). Start a new Writing, type `=?&` in the body, and click the Save button. Nothing will appear to happen because it caused a JS error. But refresh the page, and you'll see that the substitution has occurred.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/218",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/218/comments",
    "title": "Add URL Attributes and Loading/Finished Events",
    "created_at": "2011-02-06T21:59:42Z",
    "updated_at": "2011-05-27T16:12:00Z",
    "body": "Hi,\n\nI've scanned through some of the existing tickets and found a few which seem to be along the lines of what I'd like implemented, so I thought I'd add this as a use case. In both cases I've managed to hack this functionality in but it would be great to have a correct way of handling it.\n\nFirst is events/callbacks for collections/models fetching content from the server. Simply, they should just broadcast\na loading/finished callback when they go to fetch content from the sever. This will facilitate UI feedback to indicate AJAX events are happening.\n\nSecondly is a way of storing a hash inside models/collections which is translated to URL attributes when making a fetch on the server. At the moment I've overwritten the URL method (which I'm actually quite happy with doing) but it would be great to have a hash getter/setter. E.g:\n\ncollection.setURLAttributes({\n    per_page: \"5\",\n    page: \"2\"\n});\n\nThis set would then be translated into:\n\nhttp://localhost?per_page=5&page=2\n\nsetURLAttributes could also have a callback event associated with it.\n\nSam\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/217",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/217/comments",
    "title": "Painless way to sync with RoR server. ",
    "created_at": "2011-02-06T15:29:41Z",
    "updated_at": "2011-02-07T18:31:40Z",
    "body": "I`m trying to use Backbone with RoR project, and I found small problem with JSON format.\nLet say I have Post model with following attributes \n\ntitle :string\nbody :text\n\nstandart data format to use it with RoR is required something like\n\n{\npost: {\ntitle: 'here is title',\nbody: 'here is body'\n}\n}\n\nInsted BB gives me :\n\n{\ntitle: 'here is title',\nbody: 'here is body'\n}\n\nI would like to ask you what is painless way to extend model with the let say namespace \nlike \n\nmodel_name: {\n// here  defaults attributes\n}\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/214",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/214/comments",
    "title": "Routes that wait for controller to be fully initialised before they run",
    "created_at": "2011-02-04T17:28:24Z",
    "updated_at": "2011-02-07T18:41:11Z",
    "body": "I ran into a problem with an app I'm currently using backbone.js on. Basically I load some data in the initialize function for my controller. The routes rely on this data being loaded. Maybe this is a design flaw in my code (if so please point me to an example showing how I should address this). Everything works fine if you go to the page, wait for the data to load and then trigger a route. But if you trigger a route before the data has loaded (for example, someone bookmarks your page with a fragment) then there is problems.\n\nIn my page I've worked around the problem using the code which you can see in this gist (simplified from the actual code on the page):\nhttps://gist.github.com/811401\n\nI wonder if this approach could be useful built into Backbone so that all routes would automatically wait until initialize was complete? Or is my initial approach incorrect and I could have avoided the problem somewhere else?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/213",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/213/comments",
    "title": "Mailing List",
    "created_at": "2011-02-04T16:58:06Z",
    "updated_at": "2011-02-04T17:07:02Z",
    "body": "Is there a mailing list out there which can be used for discussion on best practices or general advice or is the general consensus to use Githubs Issues system for discussion?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/212",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/212/comments",
    "title": "Collection.fetch broken?",
    "created_at": "2011-02-04T15:29:45Z",
    "updated_at": "2011-02-07T18:34:28Z",
    "body": "Hi,\n\nI've just started looking at backbone.js today and after I realized that Rails 3 adds a root node when serializing a Model to json and Rails 2, I've not been able to get Collection.fetch to work.\n\nI can see that the request runs and that I return json that it should be able to parse but length is always 0 and I can't iterate over the objects.\n\nTo investigate the problem I downloaded and tested the Rails + Backbone.js tutorial from https://github.com/jamesyu/CloudEdit but I wanted to modify the index route to use Collection.fetch instead of manually iterating over the json data and creating the backbone models. I changed controllers/documents.js to\n\n```\nindex: function() {\n  var Documents = Backbone.Collection.extend({\n    model: Document,\n    url: '/documents'\n  });\n\n  var documents = new Documents();\n  documents.fetch();\n\n  console.log(documents);\n  console.log(documents.length());\n  console.log(documents.at(0));\n\n  new App.Views.Index({ documents: documents });\n}\n```\n\nAm I not using Backbone.Collection correctly here? I've spent some time reading various places and from what I can gather this is how it should work?\n\ndocuments.length() returns 0 (even though when I click the Object-link in firebug is says length: 2 and I can see that the models attribute is populated).\n\nThe Model is straight forward\n\n  var Document = Backbone.Model.extend({\n      url : function() {\n        var base = 'documents';\n        if (this.isNew()) return base;\n        return base + (base.charAt(base.length - 1) == '/' ? '' : '/') + this.id;\n      }\n  });\n\nand the json returned is\n\n  [{\"body\":\"Testing again\",\"created_at\":\"2011-02-04T13:36:58Z\",\"id\":2,\"title\":\"Another test\"},{\"body\":\"testing\",\"created_at\":\"2011-02-04T13:35:17Z\",\"id\":1,\"title\":\"Test\"}]\n\nSome other thoughts I've been thinking about while trying to get this to work:\n- why does Collection require the url property when running fetch even if I've given it a model which in turn has url defined?\n- is there anyway to avoid having to use the get/set parameters? I'm looking for a way to expose the json attributes so i can use the Models as pojo's i.e. model.name instead of model.get('name') like you're able to when working with json in jQuery.\n\nRegards,\n- Daniel\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/209",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/209/comments",
    "title": "Unset fires a change event even if it isn't an attribute on the object",
    "created_at": "2011-02-02T05:21:08Z",
    "updated_at": "2011-02-07T19:54:03Z",
    "body": "Successive calls to unset for an attribute on a model, without setting the atrribute's value between calls, will fire change events for each unset call, even though nothing has changed.\n\nIt makes sense that unset would follow set's behavior when triggering change calls; that they're only fired when the previous value for the attribute differs from the current one.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/208",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/208/comments",
    "title": "question Behavior of self-propagating extend() function?",
    "created_at": "2011-02-01T18:50:21Z",
    "updated_at": "2011-02-06T14:37:01Z",
    "body": "Hi, I'm trying to make sense of the extend() and the internal inherits() function to see if it is possible to have another level of inheritance in the model layer. But I don't quite get the expected behavior for class methods:\n\n```\nA = Backbone.Model.extend({ }, {classMethod: function() { console.log('classMethod invoked') } });\nA.classMethod();  // \"classMethod invoked\"\n\nB = A.extend({question: \"Shouldn't B.classMethod() work?\"})\nB.classMethod()\nTypeError: Result of expression 'B.classMethod' [undefined] is not a function.\n```\n\nAm I misunderstanding how extend() is supposed to work once it's been propagated out of Backbone.Model into my own model (A)?\n\nThanks,\nGreger.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/207",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/207/comments",
    "title": "Add index.js",
    "created_at": "2011-02-01T18:30:43Z",
    "updated_at": "2011-02-06T14:28:10Z",
    "body": "An `index.js` for using backbone in a server-side node.js context would be great:\n\n```\nmodule.exports = require('./backbone.js');\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/205",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/205/comments",
    "title": "Change event for collection.length?",
    "created_at": "2011-01-31T21:55:07Z",
    "updated_at": "2014-06-05T10:21:50Z",
    "body": "Not sure if this is within scope of what you want to do with backbone. But I've noticed that it would be handy in several of my backbone projects.\n\nIt'd be great to be able to do.\n\n```\ncollection.bind('change:length', this.something);\n```\n\nJust an idea, \n\nCheers!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/203",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/203/comments",
    "title": "id should be URL encoded",
    "created_at": "2011-01-31T16:07:52Z",
    "updated_at": "2011-02-07T19:54:22Z",
    "body": "in Backbone.Model.prototype.url one should do\n\n```\nencodeURIComponent(this.id)\n```\n\nGreetings\nJohannes\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/202",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/202/comments",
    "title": "validate() not preventing save()?",
    "created_at": "2011-01-31T05:12:40Z",
    "updated_at": "2011-02-06T13:54:22Z",
    "body": "Hey,\n\nreading the documentation for [validate](http://documentcloud.github.com/backbone/#Model-validate), my understanding is that defining a `validate()` method in a model and have it return something prevents `set()` and `save()` from happening. Though that's not what it seems to be happening.\n\nI've set up a [modified version of the example app](https://github.com/juliocesar/backbone-test-todo) that doesn't set a default content for todo, and requires that field not to be empty through `validate()`. Submitting an empty item now doesn't do anything view-wise (expected), but upon refreshing the page, one can see it still adds empty entries anyway.\n\nI tried the same thing without localStorage to make sure the problem isn't in the adapter, and I can confirm it's reproducible even with an actual backend taking and responding to requests (POSTs still go through for invalid records).\n\nSo my question is: how do I actually prevent `save()` from happening with validations?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/201",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/201/comments",
    "title": "Would it be more secure if API endpoints for Collections would wrap the JSON serialized Arrays inside an Object literal?",
    "created_at": "2011-01-29T23:16:27Z",
    "updated_at": "2011-02-08T22:43:58Z",
    "body": "Backbone.sync expects API endpoints for Collections to return a top-level JSON serialized Array.\n\nTherefore it is possible for another site to capture the data using CSRF JSON hijacking.\n- [Flask Documentation on JSON Security](http://flask.pocoo.org/docs/security/#json-security)\n- [Practical CSRF and JSON Security](http://blog.archive.jpsykes.com/47/practical-csrf-and-json-security/)\n\nIt appears as if this exploit can be prevented by wrapping the Array inside an Object literal:\n\n```\n{data: ['my', 'array', 'with', 'sensitive', 'data']}\n```\n\nFacebook uses this pattern in their Graph API for request handlers that return collections. See for example the API endpoint for 'Friends':\n\n[Facebook Graph API Documentation](https://developers.facebook.com/docs/api)\n\nOf course one can pose the question if it is worthwhile to introduce a backwards incompatible change to the default Backbone.sync implementation since most web apps are vulnerable to data capturing anyway because they are not using SSL/TLS.\n\nStill, I think that IF the proposed change would prevent CSRF JSON hijacking attacks (as in: if this change would provide protection against all similar attacks) it is worth the trade-off.\n\nI would love to have people who have experience with CSRF and JSON hijacking scenarios to chime in and provide insight.\n\nSo the question basically is if a top-level object literal is a counter-measure to CSRF JSON hijacking and not useless security through obscurity.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/199",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/199/comments",
    "title": "Question about organising model instances shared between collections",
    "created_at": "2011-01-26T18:32:52Z",
    "updated_at": "2011-01-26T19:12:35Z",
    "body": "We're just getting started with Backbone and were wondering a little about organizing models that may be contained in several collections. Are you guys doing any kind of management of model instances in the client to make sure a particular \"server model\" (`ID=123`) is not represented by more than exactly one Backbone.Model instance in the client regardless of how many collections it is fetched to? I mean, I guess that fetching `/projects/1/tickets` and `/users/1/tickets` into 2 collections may have some shared Ticket models and ideally there would only be one Ticket model instance with `ID=123` in memory so that a single update to it would be reflected in all views.\n\nI guess it can be solved in many ways, just wondering if we're thinking about it the right way.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/196",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/196/comments",
    "title": "Add 'previousSavedAttributes' to the model",
    "created_at": "2011-01-22T07:10:12Z",
    "updated_at": "2011-05-27T16:27:38Z",
    "body": "changedAttributes and previousAttributes refer to set.  'previousSavedAttributes' refers to create (when each attribute is created and set to null), Read (for the initial load) and the return from an update.\n\nThis enables Backbone to easily keep track of what it thinks is on the server.  This is helpful for when the ui wants to indicate when something has changed from what is on the server and that it needs to be saved.\n\nUsing the code as is, this is accomplished in the view by simply adding the line:\n\n```\nview.model.previousSavedAttributes = view.model.toJSON();\n```\n\nIn both the initialize and the success callbacks for updates.\nSetting the previousSavedAttributes for a new model is done by simply supplying defaults.\n\nAs easy as this is to do just using the code, I use it so often, it would be easier to just have in the same two spots in the source code.\n\nGiven some time, I hope to fork it and get it to you, but if not...  at least you have the idea,\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/195",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/195/comments",
    "title": "Collection events (refresh...add, remove?)",
    "created_at": "2011-01-21T07:59:23Z",
    "updated_at": "2011-05-06T12:12:25Z",
    "body": "Borrowing from the commented source of the collection's internal _add method:\n<code>if (!options.silent) model.trigger('add', model, this, options);</code>\n\n...so invoking <code>myCollection.add()</code> or <code>myCollection.remove()</code> triggers a model event but doesn't trigger a collection event?? That seems really odd & counter-intuitive: typically you would want to be doing things like this\n\n```\n//Somewhere, someone creates data...\nmyCollection.create({attr1: value1, attr2: value2..})\n....\n//Somewhere else, we want our list view to reflect the new data\nmyCollection.bind('add', updateListView)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/193",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/193/comments",
    "title": "Bind / unbind several events at the same time . Enhancement",
    "created_at": "2011-01-20T14:48:44Z",
    "updated_at": "2011-02-07T20:39:56Z",
    "body": "It would be great allowing bind / unbind methods use the same syntax than jQuery bindings. Specifying several events separated by commas will bind the same callback for any of the events.\nie::\n            people.bind(\"add\",_.bind(this.on_people_changed,this));\n            people.bind(\"remove\",_.bind(this.on_people_changed,this));\nbecome\n            people.bind(\"add, remove\",_.bind(this.on_people_changed,this));\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/192",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/192/comments",
    "title": "question: backbone best practice for file upload?",
    "created_at": "2011-01-17T22:28:47Z",
    "updated_at": "2012-03-14T11:40:13Z",
    "body": "From the DocumentCloud website, it's clear that the DocumentCloud app includes file uploads. I'm curious how you guys handle this in the context of a backbone app. Do you use a jQuery plugin to abstract, pull in an iframe, force a page load, etc?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/191",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/191/comments",
    "title": "using functions in events passed to delegateEvents",
    "created_at": "2011-01-17T16:03:15Z",
    "updated_at": "2011-05-27T16:32:59Z",
    "body": "Hello,\n\nIf I want to define an event on a view that calls a function on some other object, I can't just pass in that function when I define the events.\n\nThis is because delegateEvents doesn't check to see if the function supplied is the name of the function which can be found on 'this' or a function already.\n\nCan delegateEvents do something similar to this please :\n\n```\n    var method = methodName;\n    if (!_.isFunction(methodName)) {\n        method = _.bind(this[methodName], this);\n    }\n```\n\nThankyou :)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/190",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/190/comments",
    "title": "Referencing nested models and collections (AGAIN!)",
    "created_at": "2011-01-16T01:39:33Z",
    "updated_at": "2011-05-27T17:56:41Z",
    "body": "I've read the docs, FAQ, and most of the around 190 issues and understand that models can contain collections and other models. Questions related to this are common, and I think it may be because more complex scenarios are not explained anywhere. I'd like to present a specific use case that I haven't seen solved yet and gain some insight into ways to solve it.\n\nNote that the simple example in the FAQ makes complete sense, but I'm still unclear on how to best handle nested models and collections when multiple collections need references to the SAME nested models. Here's some JSON to illustrate better:\n\n```\nvar projects = [\n  {\n    id: 1, \n    name: \"ProjectA\", \n    members: [\n      {id: 1, name: \"Tom\", phone: \"555-5555\"},\n      {id: 2, name: \"Sue\", phone: \"555-4444\"}\n    ], \n    manager: {id: 1, name: \"Tom\", phone: \"555-5555\"}\n  },\n  {\n    id: 2, \n    name: \"ProjectB\", \n    members: [\n      {id: 2, name: \"Sue\", phone: \"555-4444\"},\n      {id: 3, name: \"Kim\", phone: \"555-3333\"}\n    ], \n    manager: {id: 2, name: \"Sue\", phone: \"555-4444\"}\n  }\n];\n```\n\nNotice that both project A and B have some of the same members, and the manager of each project can also be a member of that project as well as other projects. Besides the fact I'm sending the same redundant user information multiple times, the problem with this is that the Sue model in Project A is a _different_ model than Sue in Project B. If her phone number is changed in one model, how would views of the other model get updated?\n\nSo rather than sending the same redundant user information multiple times, I thought it would be better to simply pass _references_. So now the JSON would look like this:\n\n```\nvar users = [\n  {id: 1, name: \"Tom\", phone: \"555-5555\"},\n  {id: 2, name: \"Sue\", phone: \"555-4444\"},\n  {id: 3, name: \"Kim\", phone: \"555-3333\"}\n];\n\nvar projects = [\n  {id: 1, name: \"ProjectA\", members: [1,2], manager: 1},\n  {id: 2, name: \"ProjectB\", members: [2,3], manager: 2},\n];\n```\n\nNotice in projects that members is a collection that contains _references_ to users and manager is a reference to a single user. But now I need to start managing a global repository of user models in order to have a place too lookup these user IDs. With a global user repository, I would use code like this to wire it up:\n\n```\nvar Project = Backbone.Model.extend({\n  initialize: function(attr) {\n    this.members = new UserCollection;\n    _.each(attr.members,function(){\n      var user = APP.users.get(this); // locate user in global repository\n      if (!user) user = new User({id: this}); // create empty user with this id\n      this.members.add(user);\n    });\n    this.manager = APP.users.get(attr.manager);\n    if (!this.manager) this.manager = new User({id: attr.manager);\n    this.members.bind(\"refresh\", this.updateMembers);\n    this.manager.bind(\"change\", this.updateManager);\n  }\n});\n```\n\nSo here's my questions.\n1. Is this a good way to do this, or is there a better pattern I should be using?\n2. Where is the best place for this global repository of users? I'd like my APP object to be my Controller, but my controller loads the users and projects in it's initialize function, so the variable APP doesn't exist yet when my projects are initialized. I'm finding I have to load my users separately so that when I load projects I can access APP.users.\n3. Would it be better to pass a reference of my APP through each collection and model in the tree? My Controller APP object would create a Project collection and include {APP: this} in it. But what if I have several levels in the JSON hierarchy, then I'd have to pass the APP to the collection, to each model it creates, to each collection in each of those models, and so forth.\n4. Since all use of users would do a lookup from APP.users, fetching/creating users would need to keep adding to the global repository. Some way to manage references would need to be created so that the repository could purge models that are no longer used anywhere. This means that a standard Backbone.Collection probably wouldn't work for this user repository, and that a Repository object would be needed.\n\nPerhaps I'm over-complicating things, and in fact I hope I am! But it really seems like global model repositories would simplify more complex scenarios with nested models and model references. Is there a better solution, or would a Repository object be the best way to go? Would Backbone be interested in a Repository implementation and contribution?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/189",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/189/comments",
    "title": "Add newest route to the start of the handlers array rather than the end",
    "created_at": "2011-01-15T23:36:51Z",
    "updated_at": "2011-02-07T20:39:19Z",
    "body": "It would be nice if `Backbone.History.route()` added new routes to the start of the `handlers` array (`unshift`) rather than the end (`push`). This would allow you to override previously set routes and allow the following application logic to work.\n\n```\npdv.Controllers.App = Backbone.Controller.extend({\n\ninitialize: function(options) {\n    // create App model, collection, view\n    this.route('*path', 'all', this.checkPath);\n\n},\n\ncreatePath: function(stub) {\n    this.getData(stub, function(data) {\n            // Create model and add to collection\n\n            // Add callback directly to model\n            this.route(data.stub, data.stub, function() {\n                // execute logic to show page\n                model.set({showPage: true})\n            });\n    });\n},\n\ngetData: function(stub, callback) {\n      // Get data from server\n    if (data) {\n        callback.call(this, data);\n    } else {\n        // show 404 page\n    }\n}\n\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/188",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/188/comments",
    "title": "Call Backbone.history.start twice",
    "created_at": "2011-01-14T22:27:17Z",
    "updated_at": "2011-02-07T15:29:34Z",
    "body": "Hello,\n\nYou can call Backbone.history.start() twice and it will have start another interval loop to check the #. I think it would be pretty easy to start a single history per window and avoid this error.\n\nCall me dumb, but I just spent 1hour debugging that simple error.\n\nThx\nJulien.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/187",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/187/comments",
    "title": "Event.bind/unbind",
    "created_at": "2011-01-14T15:01:07Z",
    "updated_at": "2011-05-27T16:50:38Z",
    "body": "Hi!\n\nFeasible to make the subj methods to take _arrays_ of event names also?\n\nBest regards,\n--Vladimir\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/186",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/186/comments",
    "title": "small documentation typo",
    "created_at": "2011-01-14T04:28:47Z",
    "updated_at": "2011-01-14T04:31:41Z",
    "body": "I think that \n\n```\n$(function(){\n  new WorkspaceController();\n  new HelpPaneController();\n  Backbone.history.start();\n});\n```\n\nshould be \n\n```\n$(function(){\n  new WorkspaceController();\n  new HelpPaneController();\n  Backbone.history.start();\n})();\n```\n\n-Drew\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/184",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/184/comments",
    "title": "Broken Link on Backbone.js Documentation Page",
    "created_at": "2011-01-13T01:57:55Z",
    "updated_at": "2011-02-07T15:41:43Z",
    "body": "At the top of this documentation page (http://documentcloud.github.com/backbone/) the link to JSON2.js is broken. The new link should be (https://github.com/douglascrockford/JSON-js).\n\nAlso, I could not find this page in any repository. Is it hosted in a repo so that people can fix things?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/183",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/183/comments",
    "title": "Incorrect documentation of Backbone.sync method signature",
    "created_at": "2011-01-12T21:32:20Z",
    "updated_at": "2011-02-07T21:23:25Z",
    "body": "http://documentcloud.github.com/backbone/#Sync states that Backbone.sync method signature is\n    sync(method, model, success, error)\nbut the latest version method signature is\n    sync(method, model, options)\nwhere options are {success: \u2026, error: \u2026}\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/182",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/182/comments",
    "title": "Mention __super__ in docs",
    "created_at": "2011-01-12T20:16:33Z",
    "updated_at": "2013-05-01T19:27:25Z",
    "body": "Looking over the source, I see the extend() method defines **super**. The docs mention that javascript doesn't have super and gives an example workaround:\n\n```\nvar Note = Backbone.Model.extend({\n  set: function(attributes, options) {\n    Backbone.Model.prototype.set.call(this, attributes, options);\n    ...\n  }\n});\n```\n\nPerhaps that example should be changed to use **super** instead?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/181",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/181/comments",
    "title": "controller.removeLastLocation()   Request to modify History",
    "created_at": "2011-01-12T15:03:46Z",
    "updated_at": "2011-01-18T13:13:17Z",
    "body": "Is any thought or work being done to add functionality to remove the last location in History (in addition to adding to it)?  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/180",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/180/comments",
    "title": "Events for save/destroy/create",
    "created_at": "2011-01-11T21:17:04Z",
    "updated_at": "2013-12-20T01:57:40Z",
    "body": "Hello,\n\nThis is how I do this right now\n\n```\nthis.EventedModel = Backbone.Model.extend\n  save : (attrs, options)->\n    self = this\n    options || (options = {})\n    success = options.success\n    options.success = (resp) ->\n      self.trigger(\"save:success\", self)\n      success(self, resp) if (success)\n   error = options.error\n   options.error = (resp) ->\n     self.trigger(\"save:error\", self)\n     error(self, resp) if (error)\n  value = Backbone.Model.prototype.save.call(this, attrs, options)\n  @trigger(\"save\", this)\n  return value\n```\n\nIt would be much easier if this was already triggered by backbone\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/178",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/178/comments",
    "title": "Collection.create() logic",
    "created_at": "2011-01-09T14:46:50Z",
    "updated_at": "2012-08-22T18:02:19Z",
    "body": "Hi! There are cases when we want _to create a new_ record which nevertheless has id set -- consider a new user signup. Having id set on new model breaks .save() logic, causing PUT /Foo/ID instead of POST /Foo.\n\nI suggest the workaround:\n\nhttps://github.com/documentcloud/backbone/blob/master/backbone.js#L278 -- `(this.isNew()||options.forceCreate) ? ...`\n\nprepend https://github.com/documentcloud/backbone/blob/master/backbone.js#L523 with:\n`options.forceCreate = true;`\n\nTIA for feedback,\n--Vladimir\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/177",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/177/comments",
    "title": "options.success/error called multiple times",
    "created_at": "2011-01-09T03:58:18Z",
    "updated_at": "2011-02-07T21:03:09Z",
    "body": "Since `options` started to get passed by `trigger`, I fell into situations where `success/error` callbacks got called multiple times. Consider this case of cascading model fetches:\n    model.bind('change', function(options) {\n        anotherModel.fetch(options);\n    });\n    model.fetch({\n      success: function() {\n        console.log('Fetch model success!');\n      },\n      error: function() {\n        console.log('Fetch model Error.');\n      }\n    );\nBoth `model` and `anotherModel` will trigger the same success callback whereas only `model` should. The solution I implemented was to remove the `success` and `error` properties on the `options` object inside `fetch`:\n    fetch : function(options) {\n      options || (options = {});\n      var onsuccess = options.success; if (options.success) delete options.success;\n      var onerror = options.error; if (options.error) delete options.error;\n      var model = this;\n      var success = function(resp) {\n        if (!model.set(model.parse(resp), options)) return false;\n        if (onsuccess) onsuccess(model, resp);\n      };\n      var error = wrapError(onerror, model, options);\n      (this.sync || Backbone.sync)('read', this, success, error);\n      return this;\n    }\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/176",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/176/comments",
    "title": "Undo a set() after a failed save()",
    "created_at": "2011-01-08T12:49:57Z",
    "updated_at": "2011-01-08T16:57:18Z",
    "body": "I'm just wondering what you guys think would be the best practice to undo a failed save.\n\nI understand that when saving a model backbone will use a set() and save() where validate() on the model gets called 2 times. First time before the save (which will succeed). Now let's say the server is unreachable or does not want to save the model for some reason and the model is not persisted.\nIt would result in an error but how can i roll my first set() which set the new data on the model back to the old version before the save?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/174",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/174/comments",
    "title": "Nested Models suggestion / idea",
    "created_at": "2011-01-07T20:30:51Z",
    "updated_at": "2012-01-24T15:58:13Z",
    "body": "I'm writing a point of concept app using Backbone which will be heavily referential with models/collections pointing back and forth at one another.\n\nAt first I used the suggestion in the FAQ for nested models, but that quickly grew cumbersome to maintain.  I finally settled on the following; which I feel is much cleaner to maintain, and allows events to propagate through.\n\n```\nItem = Backbone.Model.extend({\n    initialize: function(){\n            this.setupAssociations({\n                    'bins': BinList,\n                    'lots': LotList,\n                    'units_of_measure': UnitsOfMeasureList,\n                    'barcodes': BarcodeList\n            });\n    },\n\n    setupAssociations:function(assoc){\n            for ( var key in assoc ) {\n                    this[ key ] = new assoc[key]( this.get( key ),{ memberOf: this } );\n                    this.bind( 'change:' + key , _.bind( this.setAssociated, this, key ) );\n            }\n    },\n    setAssociated: function(name,self,val ){\n            this[ name ].refresh( val );\n    }\n\n });\n```\n\nBy using this method, you can write code like the following and have change events flow through to the associated model/collection.\n\n```\nitem = new Item( { bins: [ { id: 1, name:'foo' ] } ) //bins will be turned into a BinsList and become a property of item\nitem.bins.get(1)  // returns 'foo'\nitem.set('bins', { id: 1, name:'bar' ] }) // fires refresh event on item.bins\nitem.bins.get(1)  // returns 'bar'\n```\n\nAny chance of getting the setupAssociations & setAssociated methods added to the Model class?  I'm not at all set on using the name associated if anyone has a better thought.\n\nAlso, if there was a way to determine which event the method was called from, it wouldn't be necessary to _.bind inside of setupAssociations.  It would be nice to have the event name passed to the handler inside backbone's trigger method.\n\nThanks for the great library!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/173",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/173/comments",
    "title": "HTML5 PushState etc.",
    "created_at": "2011-01-07T04:34:11Z",
    "updated_at": "2011-05-27T17:33:33Z",
    "body": "Are there any plans for http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/172",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/172/comments",
    "title": "view scoped events causes issues with multiple views on the same element",
    "created_at": "2011-01-07T04:07:52Z",
    "updated_at": "2012-01-25T15:33:30Z",
    "body": "I just updated from 0.3.3 to HEAD, and the following commit introduced a bug into my app:\n\nhttps://github.com/documentcloud/backbone/commit/17602c39278810c46a265631935c69b5ab059de7\n\nWe have some views that bind to the same element (`#content` in this particular instance). The problem is that `delegateEvents` is no longer unbinding the previously bound events (which it did before.) So the events are stacking.\n\nI'm not sure what the best solution is. I can obviously write my own method to unbind and then re-delegate, but it'd be great of Backbone could be more (or less?) clever about it.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/171",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/171/comments",
    "title": "Framework adapter",
    "created_at": "2011-01-06T19:42:39Z",
    "updated_at": "2011-02-07T16:25:05Z",
    "body": "I like the backbone, but many people (including myself) use frameworks are different from jquery and support for ported versions of backbone becomes hellish work.\n\nLet us get things that use jquery and put them to separate adapter\n\nHere's the concept of how it might look like:\nhttps://github.com/Ptico/backbone/blob/master/backbone.js\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/170",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/170/comments",
    "title": ".bind() ambiguity",
    "created_at": "2011-01-05T14:21:55Z",
    "updated_at": "2011-10-29T19:38:47Z",
    "body": "Hi!\n\nAm constantly confused by Model.bind('event', handler) which is by sense what they'd call Model.on('event', handler)...\n\nThe word \"bind\" seems to be more associated with JS `Function#bind` -- in particular Underscore#bind()/Underscore#bindAll().\n\nThus the constructions like\n    _.bindAll(this, 'render');\n    this.bind('change', render);\n\nwhich are common in `.initialize()` code are a bit confusing.\n\nI'd suggest to get rid of word \"bind\" in event binding code in favor of \"on\" --\n    _.bindAll(this, 'render');\n    this.on('change', render);\n\nWhat do you think?\nTIA,\n--Vladimir\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/169",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/169/comments",
    "title": "Adding different models to a collection",
    "created_at": "2011-01-05T10:16:07Z",
    "updated_at": "2011-01-13T14:52:46Z",
    "body": "Does it make sense to have a collection which includes models of different types? They all share a common \"interface\" so that collection can work with them (sorting etc).\n\nExample: I have a component on a page, which consists of sorted image or text elements (mixed together). The collection concept in Backbone seems to be a bit more single-model-specific.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/168",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/168/comments",
    "title": "Better doc example for Model.toJSON()",
    "created_at": "2011-01-04T10:36:24Z",
    "updated_at": "2012-02-07T21:59:22Z",
    "body": "The backbone docs example for Model.toJSON() is a bit confusing, since the toJSON method isn't overriden in the code. IMHO the example should compare the default behaviour of toJSON() with a custom overriden version. \n\nI also still don't understand why there is no Model/Collection.fromJSON() method.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/166",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/166/comments",
    "title": "Unsetting 'id' on a model should remove this.id",
    "created_at": "2011-01-04T02:34:22Z",
    "updated_at": "2011-02-07T15:30:36Z",
    "body": "When calling model.unset('id'), the model's this.id attribute should be deleted. This matches the setting of this.id when the 'id' attribute is assigned.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/165",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/165/comments",
    "title": "View html instantiation and event binding",
    "created_at": "2011-01-03T23:10:04Z",
    "updated_at": "2012-01-24T16:18:02Z",
    "body": "My understanding is that Backbone needs to create and insert html generated from each view instance into the Dom to bind events to.  With my project, having thousands of models which each can be viewed with several different view instances, appending all that html into the dom as models are viewed could degrade performance.  What would be great is if there were some way to bind to the el element cached in the view instance, and then simply swap out the view instance into the Dom as needed with the render function.  Is something like this feasible or possible now?\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/163",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/163/comments",
    "title": "Backbone History - method to list all hashes?",
    "created_at": "2011-01-02T22:23:57Z",
    "updated_at": "2011-01-03T04:44:57Z",
    "body": "Is there a way to view all the hashes cached with history?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/162",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/162/comments",
    "title": "delete",
    "created_at": "2011-01-01T20:02:13Z",
    "updated_at": "2011-01-03T03:46:17Z",
    "body": "delete\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/161",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/161/comments",
    "title": "mongodb _id needs to be aliased to id to work well with Model/Collection",
    "created_at": "2011-01-01T06:47:18Z",
    "updated_at": "2011-02-08T05:01:19Z",
    "body": "In mongodb, document ids are stored with the primary key '_id'. In backbone, the primary key is 'id'. So, after retrieving a document from mongo, '_id' needs to be aliased/replaced with 'id' to work well with backbone.\n\nIt would be nice if the backbone id field could also read from the _id field as well. I guess it is possible to have this logic in the model constructor when creating the backbone model and toJSON() when building the JSON for db storage but I'm wondering if there's a preferred/better approach.\n\nThanks a bunch!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/160",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/160/comments",
    "title": "Can't get view events to bind",
    "created_at": "2010-12-31T03:53:25Z",
    "updated_at": "2010-12-31T13:54:01Z",
    "body": "I've been trying many different approaches, but I can't get the click function to bind.\n\nHere is the view I'm using:\n<code>\nsfProjectView = Backbone.View.extend({\n  el: $(\"#header-project\"),\n      events: {\n      \"click .click-project\": \"linkProject\"\n        },\n      linkProject: function() {\n      sfController.changeObject(currentTab(),this.model.sfAttrib(\"project\"));\n    },\n      superHtml: function() {\n      var supers = this.model.get(\"superprojects\");\n      var output = \"\";\n      if (supers) {\n         _.each(supers, function(super) {\n             output = output + \"<a href'#'>\" + sfObjects.get(super).get(\"name\") + \" > \" + \"</a>\";\n           });\n         return output;\n      } else {\n        return \"&nbsp;\";\n      }\n    },\n      initialize: function() {\n      _.bindAll(this, \"render\", \"linkProect\");\n      this.render();\n    },\n      render: function() {\n\n```\n  var project = this.model.sfGet(\"project\");\n  var projectActiveP = this.model.sfActive(\"project\");\n  var projectType = this.model.sfGet(\"projectType\");\n  var projectDom = \"#ajaxProject\";\n  var projectTypeDom = \"#projectType\";\n  var superProjectsDom = \"#superProjects\";\n  if (project) {\n    $(projectDom).text(project).css(\"display\",\"block\");\n    $(superProjectsDom).html(this.superHtml());\n    if (projectActiveP) {\n      $(projectDom).removeClass(\"inactive\");\n      $(projectDom).addClass(\"active\");\n      $(projectTypeDom + \" span:eq(1)\").html(\"\");\n    } else {\n      $(projectDom).removeClass(\"active\");\n      $(projectDom).addClass(\"inactive\");\n      $(projectTypeDom + \" span:eq(1)\").html(\"&nbsp;Project Complete\").addClass(\"green\");\n    }\n    if (projectType) {\n      $(projectTypeDom).css(\"display\",\"block\");\n      $(projectTypeDom + \" span:eq(0)\").text(\"Type:\");\n      $(projectTypeDom + \" a\").text(projectType);\n    }\n  } else {\n    $(this.id).css(\"display\",\"none\");\n  }\n  return this;\n}\n```\n\n</code>\nAny ideas greatly appreciated!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/159",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/159/comments",
    "title": "Backbutton after setting document.location.hash doesn't work",
    "created_at": "2010-12-30T19:03:18Z",
    "updated_at": "2010-12-30T20:07:19Z",
    "body": "The situation I have is an autocomplete that sets the hash, which I'm doing with document.location.hash.  The controller routes to the page just fine, but the backbutton doesn't work.  I checked the Backbone.history, and the hashes seem to save there fine as well.  Any ideas?  The autocomplete is currently running independently from any Backbone views - should this be incorporated in a view?\n\nThanks!  (and thanks for a great library)\n\nFred\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/158",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/158/comments",
    "title": "Views referencing multiple models (to show relationships) [not nested models]",
    "created_at": "2010-12-30T00:30:50Z",
    "updated_at": "2010-12-30T16:07:30Z",
    "body": "I am experimenting with a very contrived example where I am modelling conferences, venues and speakers:\n\nhttp://gist.github.com/759159\n\nI understand that backbone.js allows collections to be nested inside models however I am still uncertain how relationships between models should be coded - specifically how a view should reference multiple models that relate to each other.\n\nMy example has models for 'speaker', 'venue', 'conference' and I have collections named 'speakers', 'venues', 'conferences'.\n\nIf I have a HTML table (view) for a particular collection where each row contains the data for one model in the collection then the development of this view seems self explanatory. In my example I could have a table of speakers and/or a table of venues and if the collection (or a model in the collection) is modified then the relevant HTML table would be updated.\n\nI am uncertain what the convention (if any) would be if I want a HTML table (view) of conferences where each row not only contains the data from a conference model but also contains data for the venue that conference is at or for the speakers that will be attending that conference.\n\nObviously I could have my server API return the venue (or speaker) data as part of the conference data however this would not allow for a scenario where a venue is edited via its own separate view and we still want the view that lists conferences to automatically update.\n\nInstead of doing something like:\n    this.model.bind('change', this.render);\n\nI suppose the conference model could reference a venue ID and I could pass 'modelA' and 'modelB' when declaring the View and do something like:\n    this.options.modelA.bind('change', this.render);\n    this.options.modelB.bind('change', this.render);\n\nSince a view treats 'model' as a special case option I assume this isn't how things should be done.\n\nI'm also not certain how this would work in the scenario where multiple speakers will be attending a conference. The conference model could include a nested collection of speakers however the nested collection would not be updated when a speaker is updated via another view.\n\nI'm happy to model my data differently but ultimately I want to be able to have views reference models that relate to other models in some way and still have data for those sub-models be updated in the views.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/157",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/157/comments",
    "title": "It would be nice if Backbone.history.loadUrl took a url parameter",
    "created_at": "2010-12-30T00:02:40Z",
    "updated_at": "2010-12-30T22:29:41Z",
    "body": "So you can test routes without having to change the location hash.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/156",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/156/comments",
    "title": "one event bind",
    "created_at": "2010-12-28T18:02:06Z",
    "updated_at": "2012-11-19T17:44:49Z",
    "body": "I've added a new Events method `one` to bind an event and trigger it only once. Here is the code on my end. Would be nice to integrate that into Backbone.\n\n```\n@@ -61,6 +61,15 @@\n       list.push(callback);\n       return this;\n     },\n+   \n+   // Binds an event to be called only once.\n+   one : function(ev, callback) {\n+     this.bind(ev, callback);\n+      var calls = this._callones || (this._callones = {});\n+      var list  = this._callones[ev] || (this._callones[ev] = []);\n+      list.push(callback);\n+      return this;\n+   },\n\n     // Remove one or many callbacks. If `callback` is null, removes all\n     // callbacks for the event. If `ev` is null, removes all bound callbacks\n@@ -69,15 +78,21 @@\n       var calls;\n       if (!ev) {\n         this._callbacks = {};\n+       if (this._callones) this._callones = {};\n       } else if (calls = this._callbacks) {\n         if (!callback) {\n           calls[ev] = [];\n+         if (this._callones && this._callones[ev]) this._callones[ev] = [];\n         } else {\n           var list = calls[ev];\n           if (!list) return this;\n           for (var i = 0, l = list.length; i < l; i++) {\n             if (callback === list[i]) {\n               list.splice(i, 1);\n+             if (this._callones && this._callones[ev]) {\n+               j = _.indexOf(this._callones[ev], callback);\n+               if (j >= 0) this._callones[ev].splice(j, 1);\n+             }\n               break;\n             }\n           }\n@@ -96,12 +111,30 @@\n         list = calls[ev].slice(0);\n         for (i = 0, l = list.length; i < l; i++) {\n           list[i].apply(this, Array.prototype.slice.call(arguments, 1));\n+         if (this._callones && this._callones[ev]) {\n+           var callback = list[i];\n+           j = _.indexOf(this._callones[ev], callback);\n+           if (j >= 0) {\n+               this._callones[ev].splice(j, 1);\n+               j = _.indexOf(this._callbacks[ev], callback);\n+               if (j >= 0) this._callbacks[ev].splice(j, 1);\n+           }\n+         }\n         }\n       }\n       if (calls['all']) {\n         list = calls['all'].slice(0);\n         for (i = 0, l = list.length; i < l; i++) {\n           list[i].apply(this, arguments);\n+         if (this._callones && this._callones['all']) {\n+           var callback = list[i];\n+           j = _.indexOf(this._callones['all'], callback);\n+           if (j >= 0) {\n+               this._callones['all'].splice(j, 1);\n+               j = _.indexOf(this._callbacks['all'], callback);\n+               if (j >= 0) this._callbacks['all'].splice(j, 1);\n+           }\n+         }\n         }\n       }\n       return this;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/155",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/155/comments",
    "title": "blocking issues with deep attributes on cloning models",
    "created_at": "2010-12-27T18:43:42Z",
    "updated_at": "2012-01-24T16:19:35Z",
    "body": "Hi,\nConsider the code below. When the attributes model have more than 1 level then changing the value of some deep level attributes of the clone (or the original) will be also changed in the original (or the clone) as they share the same deep-level attribute object. A `deepClone()` function could be not simply enhancement but bug fix because browsing through the code we can suspect that the `clone()` should be replaced by the `deepClone()` in other places it is used. For instance this code:\n     this._previousAttributes = _.clone(this.attributes)\nwith the current shallow cloning results in unexpected behavior when attributes are not a single level object. If you change a deep attributes like `this.attributes.address` then `this._previousAttributes.address` points to the same object and will not report anymore the previous attributes state. Maybe you could think about a `_.extendDeep()` like in jQuery.\n\nI survey this interesting library looking for some lightweight MVC and raise some questions. Is there some forum where to exchange about Backbone and underscore?\n\nThanks for the nice job.\nJoel\n\n```\nvar bill = new Backbone.Model({\n  name: \"Bill Smith\",\n  address:{ city:\"Boston\", street:\"Some\"}\n});\n\nvar john = bill.clone();\nconsole.log(bill.attributes === john.attributes);\n// => true\n\njohn.set({name:\"John Gospel\"});\nconsole.log([bill.get(\"name\"), john.get(\"name\")]);\n// => [\"Bill Smith\", \"John Gospel\"]\nconsole.log(bill.attributes === john.attributes);\n// => false\nconsole.log(bill.attributes.address === john.attributes.address);\n// => true\n\njohn.get(\"address\")[\"city\"] = \"Paris\";\nconsole.log('EXPECTED : [\"Boston\", \"Paris\"], FOUND :',\n      [bill.get(\"address\")[\"city\"],john.get(\"address\")[\"city\"]]);\n// => EXPECTED : [\"Boston\", \"Paris\"], FOUND : [\"Paris\", \"Paris\"]\nconsole.log(bill.attributes.address === john.attributes.address);\n// => true\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/154",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/154/comments",
    "title": "custom data in Backbone.sync",
    "created_at": "2010-12-21T08:48:24Z",
    "updated_at": "2010-12-30T17:29:33Z",
    "body": "https://github.com/documentcloud/backbone/blob/master/backbone.js#L945 -- possible to check whether `model` already _is_ a string and suppress `JSON.stringify(model.toJSON())` if yes?\n\nThe rationale is to provide for ability to pass custom data and thus making all custom ajax calls consistently via `Backbone.sync()`\n\n--Vladimir\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/153",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/153/comments",
    "title": "urlError() way aggressive",
    "created_at": "2010-12-21T08:44:23Z",
    "updated_at": "2010-12-30T17:15:40Z",
    "body": "https://github.com/documentcloud/backbone/blob/master/backbone.js#L949 -- calling urlError() here makes options.url a noop. Please, consider removing, or moving after options are honored.\n\nTIA,\n--Vladimir\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/152",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/152/comments",
    "title": "exceptional errors on the server",
    "created_at": "2010-12-19T00:37:14Z",
    "updated_at": "2010-12-20T17:32:29Z",
    "body": "I'm confused about how I should communicate exceptional events from the server back to models. For example, I don't have a client side validation for, say, uniqueEmail. However this does happen on the server...\n\nMy present solution is to set the email to NOT_UNIQUE and check for that string in my backbone user model. Is there a better way?\n\nThanks\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/148",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/148/comments",
    "title": "iframe src=\"javascript:0\" causes invalid character error in IE7",
    "created_at": "2010-12-17T06:56:03Z",
    "updated_at": "2011-07-12T14:39:49Z",
    "body": "Anytime a hash change event starts, an invalid character error pops up in IE7. I changed the iframe that is instantiated to point to the src to an empty page, which avoids the error. It seems like the javascript:0 is to blame.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/147",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/147/comments",
    "title": "Adding the same model instance to multiple collections",
    "created_at": "2010-12-17T03:02:45Z",
    "updated_at": "2011-01-22T16:51:53Z",
    "body": "I found a few useful patterns for having a single model instance be part of multiple collections.\n\nSay you have multiple TodoItems collections that belong to many TodoLists. It maybe useful to maintain a collection for all the TodoItems to perform bulk operations.\n\nWhen you add a model to a collection, the models collection will be reassigned. Theres no easy way to avoid this behavior without reimplementing the internal `_add` method.\n\nThis patch adds a simple `preserveCollection` option to prevent it.\n\njosh/backbone@9c6f5b223c3c2ac65869eb44af1770b7c1df29c5\n\nJust wanted to get some feedback. Not sure if its a good idea or violates backbones current collection model. Maybe allowing model.collection to be an array pointing to multiple collections would be a better change.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/144",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/144/comments",
    "title": "Question: localstorage / server combination",
    "created_at": "2010-12-15T10:25:48Z",
    "updated_at": "2010-12-15T15:02:30Z",
    "body": "Hi,\n\nFor fast loading i'd like to store my collections via localstorage and request new items from the server (besides crud). What are some good possible solutions?\n\nI've used the localstorage module but it overrides syncing with the server. For fast loading syncing with a localstorage may be also overkill. Just a dump with when exiting the app to refresh the collection on next \"startup\" would be enough.\n\nOr is it possible to add 2 different collections or 2 sync methods on the same collection?\n\nPenny for your thoughts ;)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/143",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/143/comments",
    "title": "Suppory hyphen as a delimiter for named parameters in routes?",
    "created_at": "2010-12-14T18:42:54Z",
    "updated_at": "2010-12-20T17:17:35Z",
    "body": "Currently named parameters in routes only stop globbing when a `/` is encountered. I personally use a hyphen as a delimiter in routes, since I use jquery mobile and it expects to find a dom element with the same id as the current `location.hash`.\n\nThis is a bit of a peculiar case and maybe I'll just have to hack up jquery mobile to work with slash-style routes, but I though I'd open this ticket and see what the regular expression for namedParam should be.\n\nCurrent regexp:\n\n```\n\"([^\\/]*)\"\n```\n\nMy personal branch:\n\n```\n\"([^\\/-]*)\"\n```\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/141",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/141/comments",
    "title": "Model save method should pass request object to parse",
    "created_at": "2010-12-14T16:17:10Z",
    "updated_at": "2012-01-24T16:24:39Z",
    "body": "When new resource is created, backbone excepts server to return a hash of changed attributes that it would update object with. Notable part is 'id' attribute which would make backbone to see resource as persisted and use 'update' method instead of 'create' on subsequent save() calls. \n\nSome API frameworks returns empty response and set Location in response header to URI of created resource. To be able to utilize this response, parse method should receive request object.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/140",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/140/comments",
    "title": "Not parsing data on nested collection.",
    "created_at": "2010-12-14T11:38:11Z",
    "updated_at": "2010-12-15T14:45:28Z",
    "body": "I have a structure that looks like this:\n\nGroupList > Group > UserList > User.\n\nSo a GroupList which can contain multiple Group objects, each group contains a UserList, made up of User objects.\n\nFollowing the examples of the nested collection in the documentation I have created the GroupList collection which fetches from the server a list of groups. The group has a collection attribute, which is a New UserList which gets fetched from the server. But when parsing the UserList, the User attributes seem to be lost.  I can see the data in the parse function but there on it is lost, I get 4 User objects in my UserList, but with none of the attributes that the JSON data contained.\n\n```\nwindow.Group = Backbone.Model.extend({\n\ninitialize: function() {\n    _.bindAll(this, \"addOne\", \"addAll\", \"testThis\");\n    this.users = new UserList(this.get('users'), {group: this});\n    this.users.url = 'http://10.0.0.100/group/'+ this.id +'/users/';\n    this.users.bind(\"add\", this.addOne);\n    this.users.bind(\"refresh\", this.addAll);\n    if (!this.get(\"name\")) {\n        this.set({\"name\": 'New User'});\n    }\n},\n\naddAll: function(model) {\n    model.each(this.addOne);\n},\n\naddOne: function(model) {\n    var view = new GroupView({model: model});\n    view.template = _.template($('#user-template').html());\n    $(\"#user-list\").append(view.render().el);\n},\n\nclear: function() {\n  this.destroy();\n  this.view.remove();\n},\n\n});\n```\n\nMy Users collection:\n\n```\nwindow.UserList = Backbone.Collection.extend({\n\n    model: User,\n\n    initialize: function(models, options) {\n        this.group = options.group;\n    },\n\n    parse: function(data) {\n        return data.formfield;\n    }\n\n});\n```\n\nMy Users model:\n\n```\nwindow.User = Backbone.Model.extend({\n});\n```\n\nAnd the GroupView:\n\n```\nvar GroupView = Backbone.View.extend({\n\ntagName:  \"li\",\n\ninitialize: function() {\n  _.bindAll(this, \"render\");\n  this.model.bind('change', this.render);\n  this.model.view = this;\n\n},\n\nrender: function() {\n    $(this.el).html(this.template(this.model.toJSON()));\n    this.setContent();\n    return this;\n},\nsetContent: function() {\n  //console.log(this.model.collection.models);\n  var content = this.model.get('name');\n  this.$('.user-content').text(content);\n},\n\n\n});\n```\n\nThe GroupView isn't the only view in the application but I am trying to break everything into component parts.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/139",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/139/comments",
    "title": "Destroying all models from a collection",
    "created_at": "2010-12-14T09:51:39Z",
    "updated_at": "2014-03-26T23:25:45Z",
    "body": "Not so obviously 'collection.invoke(\"destroy\")' does not work. How would one empty a collection?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/138",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/138/comments",
    "title": "Can a collection hold different types of Models",
    "created_at": "2010-12-13T14:18:10Z",
    "updated_at": "2010-12-13T14:22:26Z",
    "body": "Or Models with different attributes?\n\nConsider a fictitious car hire application, which keeps track of a collection of vehicles that are hired out. There might be common attributes among the vehicles, but other parameters might be different therefor there could be models for Car, Van, Truck, Moped etc.. \n\nOr would another approach be better?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/137",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/137/comments",
    "title": "Collection addOrUpdate",
    "created_at": "2010-12-13T13:36:42Z",
    "updated_at": "2012-01-24T16:27:48Z",
    "body": "Would be nice to have an addOrUpdate() method on the collection. It would look at the id attribute to decide whether to trigger a set on the existing model, or an add on the collection.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/136",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/136/comments",
    "title": "Collection next and prev",
    "created_at": "2010-12-13T04:20:42Z",
    "updated_at": "2012-01-24T16:32:02Z",
    "body": "I'd like to know the next or previous model in a collection. How can I do that?\nWould be nice to have methods next() and prev() on a collection. For example:\ncollection.next(model) or collection.prev(model)\nAnd if there wasn't a new or previous, return undefined.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/134",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/134/comments",
    "title": "Docs point to wrong URL for json2.js.",
    "created_at": "2010-12-12T05:46:40Z",
    "updated_at": "2010-12-13T14:33:38Z",
    "body": "The docs link to http://www.json.org/json2.js, but that's a 404 as Douglas Crockford removed it to prevent hotlinking. Pointing to his GitHub repo (https://github.com/douglascrockford/JSON-js) may be more helpful.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/133",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/133/comments",
    "title": "View.delegateEvents() should not call $(this.el).unbind()",
    "created_at": "2010-12-10T11:18:12Z",
    "updated_at": "2010-12-10T16:21:56Z",
    "body": "In my case, I'm using jQueryMobile and backbone in an app.  Creating a View from a jqm \"Page\".  But it turns out that jqm adds a bunch of event handlers to things like \"Pages\".  And so creating a view causes the bindings that jqm added for itself to get removed.  Which causes problems down the road ...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/132",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/132/comments",
    "title": "If set() includes an id, the id gets set as an attribute of the model. ",
    "created_at": "2010-12-09T02:16:20Z",
    "updated_at": "2010-12-10T17:00:09Z",
    "body": "The title says it all. This is also a problem because it can incorrectly trigger a 'change' event.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/130",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/130/comments",
    "title": "Export getUrl()",
    "created_at": "2010-12-08T23:45:13Z",
    "updated_at": "2010-12-17T19:29:26Z",
    "body": "For those of use overriding Backbone.sync, it would be nice not to have to rewrite getUrl(). Any reason not to export it as Backbone.getUrl?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/129",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/129/comments",
    "title": "How can I access a collection from one of its models",
    "created_at": "2010-12-08T22:03:42Z",
    "updated_at": "2010-12-08T22:04:31Z",
    "body": "I defined some methods in my Backbone.Collection that need to be invoked from the contained models. How can I do this? Is there a `collection` property or something similar?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/128",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/128/comments",
    "title": "Collection.refresh() does not release model",
    "created_at": "2010-12-08T20:27:50Z",
    "updated_at": "2010-12-08T22:08:05Z",
    "body": "I assumed `Collection.refresh()` should work like `remove()` old models and `add()` new models, but currently it lacks model releasing that `remove()` does. After `refresh()` old models still have collection assigned and `\"all\"` events are still triggering the collection that no longer owns the model.\n\nIs there something behind this behavior that I don't see yet?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/127",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/127/comments",
    "title": "incorrect value for event.currentTarget in delegateEvents' callback",
    "created_at": "2010-12-08T08:17:10Z",
    "updated_at": "2017-03-14T11:27:57Z",
    "body": "The delegateEvents' callback in my view gets called with an event passed as a parameter, but the currentTarget attribute is incorrect. The pseudo code should do a better job describing the problem:\n\n```\n<html>\n    <div id=div1>\n        <div id=div2>\n            <div id=div3>\n                Click me!\n            </div>\n        </div>\n    </div>\n</html>\n<script>\nvar View = Backbone.View.extend({\n    events: {\n        \"click #div2\": \"clicked\"\n    }\n    clicked: function(event) {\n        // This should say \"div2\" when the element is clicked,\n        // instead it says \"div1\"!\n        alert(event.currentTarget.id)\n    }\n});\nvar view = new View({el: document.getElementById(\"div1\")})\n</script>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/126",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/126/comments",
    "title": "Collection.create does not return a server response in the success callback",
    "created_at": "2010-12-08T08:15:03Z",
    "updated_at": "2010-12-11T08:35:41Z",
    "body": "After creating a new model (using 'create'), I want to assign an id to the model that corresponds to the id the server generated. Unfortunately there is currently a bug in the create function that removes the response from the model.save success callback.\n\nIt's easy to fix but is there a specific reason for doing this that I'm missing? Should server-generated id's be assigned to models in a different way?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/125",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/125/comments",
    "title": "What is the best way to do this: \"all models needed at load time should already be bootstrapped in to place\"?",
    "created_at": "2010-12-08T05:19:30Z",
    "updated_at": "2011-09-16T07:30:25Z",
    "body": "Hello,\n\nI am new to this framework, but would really like to incorporate it into my application.  I am trying to determine what the best way to instantiate all of my objects initially is.\n\nI understand that I can print out a giant JavaScript object serverside, and then do something like:\ncollection.parse([ {...}, {...} ]);\nwhere the argument is the giant javascript object.  Is this the best way to go about initializing all of the objects initially?\n\nIf I missed something in the docs, please let me know.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/124",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/124/comments",
    "title": "question about previousAttributes",
    "created_at": "2010-12-07T22:49:27Z",
    "updated_at": "2010-12-08T03:18:17Z",
    "body": "Hi guys,\nI'm trying to understand the intentions behind model.previousAttributes(). I assumed that if I do:\n    var Foo = Backbone.Model.extend({\n    // my code here\n    });\n    var foo = new Foo({test:'test1'});\n    foo.set({test: 'test2'});\n    console.log(foo.changedAttributes());\n\nI would get attribute test instead I'm getting false. I looked into source and I think the reason for this is that the 'change'  method is executed inside 'set' method (line 189) and inside change there is:\n    this._previousAttributes = _.clone(this.attributes);\nwhich overrides _previousAttributes with current ones. This basically means  that changedAttributes will always return false. I'm probably missing something here. Could you please let me know what the intension behind changedAttributes is? Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/121",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/121/comments",
    "title": "Backbone not always initialized in window?",
    "created_at": "2010-12-06T21:48:05Z",
    "updated_at": "2010-12-06T22:18:13Z",
    "body": "Sometimes (~20% of page loads) Backbone doesn't get initialized in `window`. I've got a bit of an abnormal setup, as I'm using requirejs to load core files (backbone, underscore) and then, once those are loaded, grabbing all models, views, and collections.\n\nExplicitly setting window.Backbone to Backbone at the very end of Backbone (within the self-calling anonymous function, at line 1011 in version 0.3.3) fixes this issue. Like so:\n\n```\n  window.Backbone = Backbone;\n```\n\nIs anyone else having this issue? This happens in both Chrome and Firefox on OSX. I haven't tested anywhere else.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/120",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/120/comments",
    "title": "underscore methods on Collection return and array of Models (not a Collection)",
    "created_at": "2010-12-06T19:56:06Z",
    "updated_at": "2017-01-20T23:34:38Z",
    "body": "I tried to do:\n\n```\nvar things = new Backbone.Collection([\n    { name: \"thing 1\", active: false },\n    ...,\n    { name: \"thing n\", active: true }\n]);\nvar activeThingNames = things.filter(function(t) { \n    return t.get('active')\n}).pluck('name');\n```\n\nBut `pluck` didn't work after `filter`, because `pluck` is a method on `Collection` but `filter` returns an `array` of `Model`s. It's not a big deal (I can just use `map` to get the names) but I'm new to Backbone and wondering if I'm missing something?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/119",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/119/comments",
    "title": "Can Backbone handle models within models?",
    "created_at": "2010-12-06T13:49:06Z",
    "updated_at": "2010-12-06T16:38:32Z",
    "body": "First of all, Backbone is totally awesome, thanks for all the great work! I implemented something very, very similar earlier this year but got about 75% done and had to set it aside to get a project done. I'll certainly give backbone a spin! \n\nDuring the development of my backbone-like solution, I ran into some issues that had no easy solution. I'm wondering if backbone has a way to deal with them.\n\nMy UI displays a list of projects along with members of those projects. Each project has a +/- icon that can be clicked to expand/shrink the view and show a list of full details about each member. It essentially looks like this:\n\n```\n -  Super Duper Project   Charlie (Active), Tom (Inactive)\n        Charlie Smith       Active        Seen 32 mins ago  [Deactivate]\n        Tom Jones           Inactive      Seen 2 days ago   [Activate]\n +  Boring Project        Susan (Active), Jill (Active), and 3 others\n +  Another Project       Tom (Active)\n```\n\nWhen I retrieve the project list (GET /api1/projects), I get JSON like this:\n\n```\n[{\n    id: 1,\n    name: \"Super Duper Project\",\n    members: [{\n        id: 32,\n        first: \"Charlie\",\n        active: true\n    },\n    {\n        id: 29,\n        first: \"Tom\",\n        active: false\n    }]\n},\n{ // boring project },{ // another project }\n]\n```\n\nWhen the + icon is clicked, another AJAX request is made to get each member in that project (GET /api1/projects/1/members), which returns JSON like this:\n\n```\n[{\n    id: 32,\n    first: \"Charlie\",\n    last: \"Smith\",\n    accessed: \"2010-12-05T14:30\",\n    active: true\n},\n{\n    id: 29,\n    first: \"Tom\",\n    last: \"Jones\",\n    accessed: \"2010-12-03T08:46\",\n    active: false\n}]\n```\n\nThis is totally simplified, but the point is that I have Models within Models, and I'm wondering if Backbone can somehow support this to update every instance in the view.  For instance:\n1. If I expand the Super Duper project (click the +) and then click the [Activate] button on Tom Jones, I want Backbone to Update multiple things on the screen. It should update the Tom Jones full detail row to indicate \"Active\", but it should also update the Super Duper project row to show \"Tom Jones (Active)\".\n2. I do not want to refresh the entire project list, because then the expand/collapse state of each project gets lost. The user would then have to re-expand any projects again. Also, the scroll location would be lost and the scrollable div this is in would jump back to the top.\n\nNote that I have complete control over the JSON and can change it to whatever I need. If the Project should contain an array of full Member objects instead of \"light\" versions of them, I can do that. But I also wanted to reduce bandwidth and increase speed, as my application has  LOT more data than just this.\n\nCan anyone give me advice on how to handle situations like this?\n\nThanks!\nTauren\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/118",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/118/comments",
    "title": "Form serialization for Railsy mass assignment",
    "created_at": "2010-12-06T11:27:45Z",
    "updated_at": "2011-03-13T18:42:53Z",
    "body": "In practice this may prove to be YAGNI, but I'm thinking I want to write a little something that would serialize a form to an object suitable for passing directly to Model.set().\n\nI figure since that since in Rails, forms so often map directly to models, why not make it easy to do the same with the models on our front end as well.\n\nI know this doesn't belong in backbone per se, but I figured I'd post it here since it's related to it's implementation.\n\nFrankly, I'd love to have some thing like form_for, but backbone-flavored.  The form could could automatically map to an instance of a model for validation, errors, data/event binding, etc.  Not sure if if the potential DRYness is worth the potential headaches form the magic, but it's tempting.\n\nHaving said that, the phrase \"backbone flavored\" just sounds gross. :)\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/117",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/117/comments",
    "title": "Namespacing outgoing requests w/ Rails convention",
    "created_at": "2010-12-03T16:59:34Z",
    "updated_at": "2012-01-24T17:23:09Z",
    "body": "(note: this is different than the \"include_root_in_json\" question)\n\nIs there a way to namespace attributes on the outgoing PUT/POST requsts that backbone makes?  e.g. to follow the Rails convention of:\n\n```\naccount.update_attributes params[:account]\n```\n\nrather than\n\n```\naccount.update_attributes params\n```\n\n?\n\nWe're integrating backbone into our existing app which has a bunch of endpoints following the former convention.  If there's not a way right now would you be willing to accept a patch for it?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/113",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/113/comments",
    "title": "bind() enhancements",
    "created_at": "2010-12-02T18:54:06Z",
    "updated_at": "2010-12-08T22:45:33Z",
    "body": "Rather than this:\n\n```\nthis.collection.bind('add', _(this.refresh).bind(this));\nthis.collection.bind('remove', _(this.refresh).bind(this));\nthis.collection.bind('refresh', _(this.refresh).bind(this));\n```\n\nIt'd be nice to be able to do this:\n\n```\nthis.collection.bind('add remove refresh', _(this.refresh).bind(this));\n```\n\nI know there's an `all` event, but sometimes I want to do add/remove/refresh without doing `change`. Supporting multiple events seems like a fairly simple, handy enhancement. \n\nAlso, since we so often end up binding an event handler to `this`, perhaps the `bind` function could take a third argument that sets the context:\n\n```\nthis.collection.bind('add remove refresh', this.refresh, this);\n```\n\nJust an idea. Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/112",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/112/comments",
    "title": "Question: Views rendering \"sub\" views",
    "created_at": "2010-12-02T18:46:03Z",
    "updated_at": "2010-12-08T19:39:08Z",
    "body": "Hopefully this is a good spot to post a question, please forgive me if I should have posted  it elsewhere.\n\nI've been playing with Backbone for a bit and it's starting to sink in. I'm wondering if someone could help me understand the \"correct/best\" way to go about a certain task...\n\nI'd like to create two different views, a MainView and a SubView. \n- A SubView is in charge of rendering a view for a particular instance of a model (e.g., on a `/models/1` show action).\n- A MainView is in charge of rendering a view for a collection of several models (e.g., a `/models` index action). \n\nI'd like to have the MainView use the SubView to render the collection. I'm just not sure if I'm going about it correctly.\n\nI've got a gist of what I came up with here: https://gist.github.com/725790  \n\nI'd love it if someone could take a look and provide any feedback. Is there an easier/better way to achieve the same thing? I sort of feel that the way I'm rendering the subviews within the main view's render() method is a little hacky... \n\nAny suggestions would be greatly appreciated! :-)\n\n-John\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/111",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/111/comments",
    "title": "nested Collections?",
    "created_at": "2010-12-02T17:25:19Z",
    "updated_at": "2010-12-12T11:59:58Z",
    "body": "Is it possible to have nested collections?\nEg. I would like to have a Collection with SubTodos in my Todo model but still just have one Remote Store.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/109",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/109/comments",
    "title": "Models Fire Events in all Collections of Which they are a Member",
    "created_at": "2010-12-02T00:10:37Z",
    "updated_at": "2010-12-02T14:33:04Z",
    "body": "  The following code illustrates this.\n      var TestModel = Backbone.Model.extend({});\n      var ExtendedCollection = Backbone.Collection.extend({\n        model : TestModel\n      });\n\n```\n  var firstCollection = new ExtendedCollection();\n  var secondCollection = new ExtendedCollection();\n\n  firstCollection.bind('add', function() {\n    console.log(\"the first collection had something added to it!\");\n  });\n\n  secondCollection.bind('add', function() {\n    console.log(\"the second collection had something added to it!\");\n  });\n\n  firstCollection.add({test : \"attribute\"});\n\n  secondCollection.add(firstCollection.at(0));\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/108",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/108/comments",
    "title": "View / rendering of a single item",
    "created_at": "2010-12-01T22:06:59Z",
    "updated_at": "2010-12-02T04:34:36Z",
    "body": "We currently have an application under development and are looking in backbone.js as a framework. So far everything has worked out fine - thanks for that great piece of software.\n\nNonetheless we stumbled upon a problem (Maybe it's not even an issue, but I did not know where exactly to post this). We have large sets of data coming from ajax request. We use Collection.add([ ]) to get this data into the collection and we use a View (Backbone.view.extend) to ultimately render a single item out of this collection appending this item to a DOM element using an application view (just like the todo example).\n\nWhat we want to accomplish is this kind of html code:\n\n```\n<div id=\"container\">\n    <input type=\"checkbox\" id=\"check1\" /><label for=\"check1\">text</label>\n    <input type=\"checkbox\" id=\"check2\" /><label for=\"check2\">text</label>\n    <input type=\"checkbox\" id=\"check3\" /><label for=\"check3\">text</label>\n</div>\n```\n\nEvery \"<input...\" represents an item, thus a model rendered by it's view. The view class though always binds to a single element (tagName) which is created within the view. So I currently don't see any way creating something \"<input type=\"checkbox\" id=\"check1\" /><label for=\"check1\">text</label>\" using the standard backbone functionality because backbone.view would use the tagname to create a new element which can be filled with content but would always wrap around this content. So backbone.view would create something like\n\n```\n<span>\n    <input type=\"checkbox\" id=\"check1\" /><label for=\"check1\">text</label>\n</span>\n```\n\nwhen using \"span\" as the tagname.\n\nIs there a way to create this kind of html code with backbone functionality, or is it necessary to write something custom to accomplish this?\n\nThanks in advance for your work & answer.\n- Exinferis\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/107",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/107/comments",
    "title": "View id initialization",
    "created_at": "2010-12-01T20:30:14Z",
    "updated_at": "2010-12-02T18:31:18Z",
    "body": "As I understand it the .id, .className etc, need to be explicitly passed in to .extend, for .el to be correctly intialized with an id and so forth. \n\nSo to set the html id of .el correctly, you would do something like:\n\n```\nvar showView = new Show({\n    model: document,\n    id: document.id\n});\n```\n\nThe question is, can I circumvent this behavior so it is inferred from the model.id (or .cid)? The use case being every single one of my views requires an el.id to be set, and rather than having to re-add it in view.intiailize ala my current method:\n\n```\n$(this.el).attr('id', this.model.id);\n```\n\nOr, the uglier version:\n\n```\nvar Show = Backbone.View.extend({\n    initialize: function () {\n        this.el = false;\n        this.id = this.model.cid;\n        this._ensureElement();\n    }\n});\n```\n\nIs there a nicer (more centralized) way of handling this without having to add code to every view or directly patching backbone?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/106",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/106/comments",
    "title": "How to prevent a View from receiving a change event it triggered itself",
    "created_at": "2010-11-30T04:58:39Z",
    "updated_at": "2010-11-30T21:05:46Z",
    "body": "Say you have one Model and two Views attached to it. One View makes a change and wants the change event triggered for the other but not itself. It wants to avoid having to render itself again. What is the best way to achieve that?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/105",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/105/comments",
    "title": "changedAttributes() is broken when using a Collection",
    "created_at": "2010-11-30T04:28:35Z",
    "updated_at": "2010-12-04T12:08:53Z",
    "body": "The test case is here: http://www.planbox.com/html/testb.html\n\nWhen you click on an li, the 'selected' attribute gets toggled and upon rendering, the item shows changed attributes.\n\nWhat I find odd are:\n1) The priority attribute is said to be changed upon 1st rendering. It was changed in the Model constructor passing option {silent:true}. I feel it should not be flagged as changed.\n\n2) If you click on the item its selected attribute is toggled and the item is rendered again. It still says priority has changed. But it wasn't!\n\n3) Click again and only the selected attribute is flagged as changed. That is OK.\n\n--Martin\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/104",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/104/comments",
    "title": "Fixing Javascript case sorting in comparators ...",
    "created_at": "2010-11-30T04:27:19Z",
    "updated_at": "2010-11-30T17:08:29Z",
    "body": "This might be an issue in the Underscore rather than Backbone library, but I found that Javascript, (OS X Safari 5.03) sorts uppercase then lowercase, (ABCabc) when using the collection comparator functions to return the name of the model. This seems wrong, and was simply fixed by appending .toUpperCase() to the comparator functions. You might want to bake this in to fix unexpected behaviour?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/103",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/103/comments",
    "title": "Collection get() fails when using a model id of zero",
    "created_at": "2010-11-30T02:24:50Z",
    "updated_at": "2010-11-30T17:07:12Z",
    "body": "Create a collection and add a mode with id of 0. They try to do this:\n  collection.get(0);\nReturns 0.\nBut then try this:\n  collection.get('0');\nReturns the model.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/102",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/102/comments",
    "title": "Events.trigger and unbind break with multiple views listening to the same model",
    "created_at": "2010-11-27T21:09:30Z",
    "updated_at": "2010-12-02T15:03:41Z",
    "body": "Say you have model M and views A and B listening to it.\nBoth views bind on the model's 'remove' event. And in their handler, they unbind the 'remove' event. The problem is that only one remove event gets triggered.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/101",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/101/comments",
    "title": "Compiler problem with nested scopes and _results variable",
    "created_at": "2010-11-27T20:04:49Z",
    "updated_at": "2010-11-28T00:37:09Z",
    "body": "Try compiling the following with CoffeeScript 0.9.5\n\n```\nfoo = ->\n  for i in [0..7]\n    for j in [0..7]\n      () -> i + j\n```\n\nYou'll get the following output:\n\n```\n(function() {\n  var foo;\n  foo = function() {\n    var _fn, _results;\n    _fn = function(i) {\n      var _fn, _results;\n      return _results.push(function() {\n        _fn = function(j) {\n          return _results.push(function() {\n            return i + j;\n          });\n        };\n        _results = [];\n        for (j = 0; j <= 7; j++) {\n          _fn(j);\n        }\n        return _results;\n      }());\n    };\n    _results = [];\n    for (i = 0; i <= 7; i++) {\n      _fn(i);\n    }\n    return _results;\n  };\n}).call(this);\n```\n\nThere is a problem with the way nested _results variables are being declared.  Typically, when there are multiple nested scopes, new variables will be produced called something like _results2.  In this case, that is not occurring, and two _results variables are being declared, so that the inner scope cannot reference the outer _results variable.\n\nCheck out lines 6/7 from above.  This results in push being called on an undefined variable.\n\n```\n  var _fn, _results;\n  return _results.push(function() {\n```\n\nThe problem seems to be the use of a closure inside of nested for-loops.  It doesn't have to return the closure itself to cause the problem.  This was just a short repro.\n\nIf I remove the inner function, or use a single, un-nested for-loop, then the problem goes away.  However, after playing around, I still haven't found a good workaround for using a closure when surrounded by double-nested for-loops.  This seems pretty serious.\n\nThis appears to be a new problem in 0.9.5.  I had code that used this construct in a project using 0.9.4, and it worked fine until I upgraded to 0.9.5.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/99",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/99/comments",
    "title": "error event called on Models/Collections by default",
    "created_at": "2010-11-26T22:50:36Z",
    "updated_at": "2010-11-27T19:03:51Z",
    "body": "Specifically, I think they should both have an `error` event that gets automatically fired on an error callback for a `fetch()` call. I recognize that you can just pass a callback in the options hash, but it would be cool if it was included as default functionality. That way, a view could bind to both an `error` and a `change` event in exactly the same way.\n\nI'd be happy to implement and send a pull request. I was just curious if this was intentionally left out...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/98",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/98/comments",
    "title": "Multiple Inheritance/Mixins supported via .extend() ?",
    "created_at": "2010-11-25T10:00:48Z",
    "updated_at": "2011-10-21T21:06:23Z",
    "body": "I have come across a few scenarios which have benefited from the use of multiple inheritance/mixins, predominantly in my view objects. Currently, the only way to do this is through the use of the following style of code ...\n\n```\nCreatePhase.prototype.changeParent = new CrudPhase().changeParent;\nUpdatePhase.prototype.changeParent = new CrudPhase().changeParent;\n```\n\nIt would be really neat if we could handle this within the Backbone.[Class].extend code, so that passing in multiple objects would allow us to extend previous classes. Thoughts?\n\nIn case anyone cares about the scenario, I have modal boxes that differ enough but have common functionality. Doing the above allows me to inherit from the default modal box view and the common functionality.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/97",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/97/comments",
    "title": "Simple Data Bindings Question/Suggestion",
    "created_at": "2010-11-25T00:55:15Z",
    "updated_at": "2010-12-02T21:41:30Z",
    "body": "Hi, I really like the Backbone approach; simple building blocks that make creating interactive js apps easier but still leveraging the power of css/html/raw js.\n\nSo I was playing around a bit and maybe I'm understanding this wrong, but there does not seems to be an easy way to do data binding from dom properties to models. What I was trying to do is build two views tied to the same model, updating the model and expecting the views to get redrawn automatically. But is seems like I have to keep track which views are bound to which models myself, and implement updating them on model.change. That seems a lot of work for something you want to do often. See my attempt here: https://gist.github.com/714695\n\nIf all my assumptions are correct I would love to have a layer on top of the current objects that would make data bindings a lot easier. Some example psuedo-code:\n\n```\ndataBind(element, elementKeyPath, [modelKeyPath1, modelKeyPath2], \n    transformerFunction)\n```\n\nExamples:\n\n```\ndataBind(\"body\", \"css.background-color\", [preferences.color])\n\ndataBind(\"#cartView.total\", \"text\", [cart.total], \n    function(values) {return '$ ' + values.total})\n\ndataBind(\"#personView.name\", \"html\", [model.firstName, model.lastName], \n    function(values) {return values.firstName + ' ' + values.lastName})\n```\n\nI realize this is a crippled approach as it wouldn't cover:\n- two-way bindings: bind to an input field that automagically updates the model if changed\n- dependent keys: trigger the binding fullName when either firstName or lastName get updated\n- collection binding: bind a to for example the name of a selected person in a list, and even deal with multiple selections in a smart way\n\nBut just having this in there would help making simple applications a lot easier. Any thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/96",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/96/comments",
    "title": "Methods not getting binded",
    "created_at": "2010-11-24T23:50:21Z",
    "updated_at": "2010-11-27T15:59:27Z",
    "body": "Hi.\n\nI'm developing [Askani](http://askani.net/), a graphical interface for a django models generator, using backbone. I coded all the views in one big [AppView](https://github.com/tooxie/askani/blob/master/askani/js/usr/views.js#L113) but now I'm trying to refactor that and leave one View for each Model. The problem is that when I do [this](http://pastebin.com/L5Vg6v0N) everything works as it did but for one thing: methods don't get binded to events.\n\nCould you point me to what I'm doing wrong? Thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/94",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/94/comments",
    "title": "Module/Require Features",
    "created_at": "2010-11-24T22:40:19Z",
    "updated_at": "2010-12-03T22:11:37Z",
    "body": "Maybe I'm missing it, but there is no module loading support in backbone.js, is that correct?\n\nIf so are people using RequireJS? I've like it on other projects, just evaluating JS libs right now and Backbone is looking just the right balance between heavyJS Frameworks and a sparse javascript libs.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/93",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/93/comments",
    "title": "Allow query params to be passed through Model.fetch",
    "created_at": "2010-11-24T17:39:19Z",
    "updated_at": "2011-10-08T14:29:35Z",
    "body": "This is a bit similar to issue #78\n\nIt would be great to have a way to pass url params in the fetch method. Many APIs allow you to pass in extra params to get more data. For instance, twitter lets you pass in the `include_entities` param to get more metadata about hashtags and user mentions.\n\n```\nhttp://api.twitter.com/version/users/show.json?include_entities=true\n```\n\nIdeally I could add url params to the options object passed into the fetch method\n\n```\nvar User = Backbone.Model.extend({\n  url:'http://api.twitter.com/version/users/show.json',\n});\n\ntwitter_user = new User;\ntwitter_user.fetch({\n  data:{\n    user_id:'12345',\n    include_entities:true\n  },\n  success:function(){ //do something }\n})\n```\n\ninstead of overwriting the url property and stringing up a bunch of query params\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/91",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/91/comments",
    "title": "TypeError: Result of expression 'list[i]' [undefined] is not an object.",
    "created_at": "2010-11-23T20:22:19Z",
    "updated_at": "2010-11-23T22:13:28Z",
    "body": "Using backbone with jquery mobile I've come up against this bug when calling model#save.\n\n```\nTypeError: Result of expression 'list[i]' [undefined] is not an object.\nBackbone.js:102\n```\n\nThe bug is in `trigger`. I've fixed it like so:\n\n```\nif (list = calls['all']) {\n  for (i = 0, l = list.length; i < l; i++) {\n    if(list[i]){\n      list[i].apply(this, arguments);\n    }\n  }\n}\n```\n\nIs this something that needs to be fixed in backbone or is jquery messing up the arrays somehow? I'm not using prototype.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/90",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/90/comments",
    "title": "Access a collection from a model",
    "created_at": "2010-11-23T19:36:47Z",
    "updated_at": "2010-11-24T15:31:34Z",
    "body": "I need to access a collection from a model, and I get an error\n\nRelevant code:\n\n```\n$( function() {\n    var namespace = window;\n\n    namespace.Move = Backbone.Model.extend({\n        markable: function(){\n            var below = namespace.Moves.find(function(move) { // <= HERE !!!\n                return move.get(\"i\") === that.get('i')-1;\n            });\n            if(below !== undefined && !below.isNew()) return true;\n            return false;\n        }\n    });\n\n    namespace.Moves = Backbone.Collection.extend({\n        model: Move,\n        localStorage: new Store(\"moves\")\n    });\n});\n```\n\nStack trace (chromium):\n\n```\nUncaught TypeError: Object function (){return a.apply(this,arguments)} has no method 'find'\nj.c.each.c.forEach:9292/javascripts/vendor/underscore-min.js:9\nnamespace.RowView.Backbone.View.extend.render:9292/javascripts/views.js:30\nc.bind:9292/javascripts/vendor/underscore-min.js:16\nnamespace.AppView.Backbone.View.extend.add:9292/javascripts/views.js:72\nc.bind:9292/javascripts/vendor/underscore-min.js:16\nnamespace.AppView.Backbone.View.extend.render:9292/javascripts/views.js:66\nc.bind:9292/javascripts/vendor/underscore-min.js:16\nnamespace.AppView.Backbone.View.extend.initialize:9292/javascripts/views.js:60\ne.View:9292/javascripts/vendor/backbone-min.js:22\nr.d:9292/javascripts/vendor/backbone-min.js:26\n(anonymous function):9292/javascripts/views.js:77\nc.extend.ready:9292/javascripts/vendor/jquery-1.4.2.min.js:26\nL\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/88",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/88/comments",
    "title": "Changing view initialization flow (pt. 2)",
    "created_at": "2010-11-22T20:29:01Z",
    "updated_at": "2010-12-08T19:46:27Z",
    "body": "Hi Jeremy,\n\nHere is simplified example of what I want to achieve. I want to create view only if it is needed and create root element for it only if view is instantiated. Basically I want to have my markup as clean as possible and hold all View related things in on place (all related code in its class and <i>all</i> markup in template). Sure I can create element for a view before creating instance of view but it would be interesting to have all view related things encapsulated in a View's class. \n\nAlso I don't want to have View.el be set to body in this example because I want to keep container element as narrow as possible.\n\n(This is really simplified example in real application I render template instead of creating elements on the fly)\n\n```\nTestView = Backbone.View.extend({\n    el: \"#home\",\n\n    events: {\n        \"click #test\" : \"test\"\n    },\n\n    test: function() {\n        alert(\"test\");\n    },\n\n    initialize: function() {\n        container = $(\"<div/>\").attr(\"id\", \"home\").appendTo(\"body\");\n        $(\"<a/>\").attr(\"id\", \"test\").attr(\"href\", \"#\").text(\"test\").appendTo(container);\n    }\n})\n```\n\nTo achieve this behavior it is needed to call both _ensureElement() and delegateEvents() after calling initialize method. _ensureElement could be called before initialize but in such case it will create useless element. What do you think about controlling this flow using options hash?\n\nI fully understand that moving _ensureElement call after initialize is a bad idea because current applications could rely on existence of element in initialize method, but I just want to share me experience of using Backbone and maybe give you some ideas on its gotchas in using in real environments. \n\nIn my application I've worked around this issue by having my own base class for a views that extends Backbone.View and using events hash with different name that is called and processed after calling descendant initialize method.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/85",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/85/comments",
    "title": "Double submit when unchecking item",
    "created_at": "2010-11-17T02:42:19Z",
    "updated_at": "2010-11-22T19:23:54Z",
    "body": "I wrote a small app based on the example code, but simpler. Its primary function is to persist a checkbox state to the server. The ReportView has a toggleActive() method that's bound to \"click .active\". When I check an unchecked box, it works properly. When I uncheck a checked box, it calls the toggleActive() method twice, sending two PUT actions to the server: one with the attribute set, and one with it unset.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/84",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/84/comments",
    "title": "Add Backbone.Model#escape, for HTML-escaping attributes",
    "created_at": "2010-11-16T22:50:04Z",
    "updated_at": "2011-08-10T07:49:01Z",
    "body": "There was a bit of discussion this afternoon in `#documentcloud` about different techniques for escaping user-generated content against XSS attacks. Some folks prefer to escape once, on the way in to the database, and other folks to have their template interpolation tags escape text by default, right as the HTML is being rendered. Some pros and cons:\n- If you escape on the way in to the database, your content can never be escaped for other formats later.\n- Escaping at the template layer is notoriously inefficient ... the same piece of data may be HTML-escaped hundreds of times for a single view.\n- Using template escaping is also incorrect for (arguably) the majority of interpolations, which don't originate from user-supplied content.\n\nI think that because there's more information available with Backbone, we can do a better job here. Your user-generated data is always going to be an attribute on a Model, and we know that we're escaping for HTML, because we're in a browser... I'm proposing that we add an `escape` method to Backbone.Model, as an alternative to `get`, which instead returns the HTML-escaped value of any attribute. You could use it from a View's template like this:\n\n```\n<div class=\"account\">\n  <%= account.escape('name') %>\n</div>\n```\n\nWe could be smart about it, and lazily cache the attributes you're escaping, so that a given attribute need never be escaped more than one time, even if it's rendered in hundreds of places in the UI.\n\nThoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/83",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/83/comments",
    "title": "Collection change design is frustrating",
    "created_at": "2010-11-16T22:14:21Z",
    "updated_at": "2012-01-06T21:00:00Z",
    "body": "The current (0.3.1) collection change notification architecture makes writing clean, efficient view code difficult. Collection change events can come in two different ways (add/remove vs. refresh) and each have their own drawbacks.\n\nAdd/remove could make a view with heavy per-item setup costs more efficient. However, collections may be sorted. Any view that needs to mirror the underlying collection order has to do its own indexOf lookup into the model. This leads to a potential performance bottleneck, as this lookup will be O(N) times the number of additions.\n\nRefresh is \"convenient\" from the model's perspective, but it burdens every observer with the responsibility of keeping track of model state. A refresh event basically means \"out with the old, in with the now\". This is only practical to implement if the view has some way of clearing everything, but if the view needs to know specifically which items are deleted it has to keep track of them itself.\n\nEach method has issues of its own, but my biggest gripe is that an observer MUST handle /both types/ of events to stay in sync with a collection. So I have to implement an \"add a single item\" handler, a \"remove a single item\" handler, and a \"remove each old item, then add each current item\" handler. This is two paths to implement, and two paths to test. (A view might appear to work fine in casual testing of one path, then fail when a bug in the other path is encountered.)\n\n`</rant>`\n\n`<suggestion>`\n\nI've been thinking about how to work around this in our team's current project, and how to improve the design of Backbone.js itself.\n\nFor our particular project, we see single add/remove changes being the exception rather than the common case. So we're going to try mapping all three events to a single \"refresh\" handler that blows away the current view contents and regenerates it all from the current collection state. This may result in some occasional interface flashing, but less code to maintain means a more reliable app.\n\nFor a more general solution, what if Collection exposed only two events externally: remove(arrayOfModels) and insert(arrayOfModels, prevModelOrNull, nextModelOrNull)\n\nSeems like that would allow the model to communicate efficiently with its observers (for both bulk and single updates) while observers would just have to implement two elementary operations. What does everybody else think of this idea?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/82",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/82/comments",
    "title": "Appending items to a collection",
    "created_at": "2010-11-16T22:05:59Z",
    "updated_at": "2010-12-08T19:47:17Z",
    "body": "I'm trying to manage performance in my application and was wondering what the best way to append items to a collection would be? I don't see any inbuilt method for handling this.\n\nCurrently I'm bootstrapping my app with a 100-item collection, upon page load, using .refresh() to add all the models at once. In my database, a user may have a lot more items which I'm wanting to lazy load on demand as a user scrolls, keeping the previously loaded items on the page.\n\nOn the Rails side, I'm just treating this as pagination based on a URL parameter.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/81",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/81/comments",
    "title": "Enabling collection comparator leads to O(n^2) average fetch/refresh complexity",
    "created_at": "2010-11-16T20:45:12Z",
    "updated_at": "2012-03-09T13:21:19Z",
    "body": "Because array input to Collection.prototype.add is sent per-item to Collection.prototype._add, sorted fetches/refreshes may be very inefficient. The way these two methods interact when a comparator is set is essentially an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort#Best.2C_worst.2C_and_average_cases) which in the average case is O(n^2) complexity. (For each N input, M existing array items may need to be shifted and since O(N) = O(M) the combination is O(N^2).)\n\nThe easiest workaround might be for the collection to disable the comparator during bulk inserts and then let Underscore do a normal O(n log n) sort when done. (Note that insertion sort _is_ efficient for small changes to an already-sorted array.)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/80",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/80/comments",
    "title": "Ability to declare a set of default attributes to a model",
    "created_at": "2010-11-16T20:39:44Z",
    "updated_at": "2010-11-22T19:23:32Z",
    "body": "As we were discussing on the IRC, I think it would be nice if you could somehow declare a set of default attributes for a model that would get automatically set to their associated values when a model is initialized.\n\nI think the implementation could be something along the lines of what you suggested:\n\n```\nBackbone.Model.extend({ \n    defaultAttributes: {\n        key: 'value',\n        anotherKey: 'Its value'\n    }\n});\n```\n\nor even simpler:\n\n```\nBackbone.Model.extend({\n    defaults: {\n        key: 'value',\n        anotherKey: 'Its value'\n    }\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/79",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/79/comments",
    "title": "Rails 3: response namespace?",
    "created_at": "2010-11-15T19:06:23Z",
    "updated_at": "2010-11-15T20:50:44Z",
    "body": "I'm curious what the intended solution is for this. In Rails, returning a model response (Users.all, Users.first) has namespace'd results. E.g:\n\n```\n[\n    {\n        user:{\n            id : 1\n        } \n    },\n    {\n        user :{\n            id : 2\n        }\n    }\n]\n```\n\nIn this example, the default behavior of a Backbone Collection fetch creates local instances with a 'user' attribute, whose value is an object with an id attribute. \n\nI recognize that the parse method on Users and Collections solves this. However, this seems like a really common thing to have to write over and over for each collection. Is there a more elegant solution that adding this to every collection:\n\n```\nparse : function(raw){\n\n    var response = [];\n\n    $.each(raw, function(index, user){\n        response.push(user.user);\n    })\n\n    return response;\n}\n```\n\nThanks! I love backbone!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/78",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/78/comments",
    "title": "API suggestions regarding fetching models. (Model.find)",
    "created_at": "2010-11-15T16:40:15Z",
    "updated_at": "2012-01-06T20:12:21Z",
    "body": "Thanks for fixing Issue #77 that fast!\n\nJust an idea regarding Model#fetch:\n\nWhy not adding a `Model.get` class method that takes an id and fetches the model right away. \n\nInstead of writing:\n\n```\nthis.model = new Document({id: id});\nthis.model.fetch({\n  success: function() {\n    // init doc\n  }\n});\n```\n\nOne could write:\n\n```\nthis.model = Document.get('doc-id', {\n   success: function() {\n     // init doc\n   }\n})\n```\n\nThat being said, an `Model.all` class method could load a whole Collection of Documents in the same fashion.\n\n```\nvar documents = Document.all({\n  success: function() { ...}\n});\n```\n\nWhat's your current strategy regarding the supply of query-params when fetching a Collection of items from the server, so that the server can deliver a reduced set of resources (according to the specified query-params)\n\nI could imagine supplying them along with Model#all (Collection#fetch resp.):\n\n```\nvar documents = Document.all({\n  'author': 'john',\n  'wordcount>=': 100 // greater than or equal to 100\n}, {\n  success: function() { ...}\n});\n```\n\nI totally like the JSON based syntax of MQL (the query language used by freebase.com) http://wiki.freebase.com/images/e/e0/MQLcheatsheet-081208.pdf . Perhaps this could be a strategy to be used along with Backbone.js.\n\nI'm not sure if this fits into the current design, though (esp. regarding the separation of Models and Collections). This is just an idea inspired by the API of DataMapper.\n\n-- Michael\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/77",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/77/comments",
    "title": "Why Backbone.Model#toJSON is called on Backbone.Model#fetch?",
    "created_at": "2010-11-15T12:50:41Z",
    "updated_at": "2010-11-15T15:24:16Z",
    "body": "I just realized that `Backbone.Model#toJSON` gets called on every `Backbone.Model#fetch`. It even gets called when when a corresponding Collection is fetched. Is this intensional? I'd expect toJSON to be called only on `Backbone.Model#save`. I'm using Backbone 0.0.3.\n\nThis causes problems in my case since my models (documents) aren't in a valid (serializable state) before they've been fetched and parsed.\n\nIn my scenario I'd like to load a document by just creating a new Document with an id property, then calling fetch.\n\n```\nloadDocument: function(id) {\n  this.model = new Document({id: id});\n  this.model.fetch({\n    success: function() {\n      // init doc\n    }\n  });\n},\n```\n\ntoJSON is unnecessarily (imo) called here, causing an error, because the document's ContentGraph (this.g) hasn't been setup properly.\n\n```\ntoJSON: function() {  \n  return _.extend(_.clone(this.attributes), {\n    contents: this.g.serialize()\n  });\n},\n```\n\nMy parse function looks like this:\n\n```\nparse: function(res) {\n  if (res.contents) {\n    this.g = new ContentGraph(res.contents);\n  }\n  return res;\n},\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/76",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/76/comments",
    "title": "Updates to controller doc section.",
    "created_at": "2010-11-15T07:58:05Z",
    "updated_at": "2010-11-15T15:16:22Z",
    "body": "Possibly make it clearer that Controllers and routing requires Backbone.history.start(). Focussing on trying that functionality, the docs didn't make it super clear.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/75",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/75/comments",
    "title": "When clicking backbutton in Win7 Chrome, backbone.js cycles through last 2 states indefinitely",
    "created_at": "2010-11-15T06:36:52Z",
    "updated_at": "2010-11-16T01:01:08Z",
    "body": "(Recreating because I accidentally closed this the first time I created this...) I'm using backbone 0.3.0 with Chrome 9.0.576.0 dev with all extensions disabled on _Win 7_, and I have the following issue:\n\nI create a controller with a couple of routes, and initialize like so:\n\nnew WorkspaceController();\nBackbone.history.start();\n\nWhen I click on hashlinks that match my routing pattern, things go well. However, when I use the back button on Chrome dev, I cycle through the last 2 hashlinks instead of going backwards normally.\n\nFor example, say I have 3 links:\n(1) #game/1 (2) #game/1/quest/1 (3) #scores/game/1\n\nI click on 1, 2, then 3. This works, taking me where I need to go. I am now on #3. I click my back button, which takes me back to #2, as expected. I click back again. I would expect to go to #1, but instead I am taken back to #3. If I click back repeatedly, it cycles between #3 and #2 indefinitely on Chrome. On Firefox, the behavior is as expected (back to #2, then back to #1).\n\nAlso, when the backbutton is pressed, the forward button is not enabled. It's as if this browser thinks that the action taken by the backbutton is a fresh, \"new\" event, not truly going backwards in its history but instead adding to it.\n\nOf note, the Chrome+Win7 combo appears to be important, because the back button functionality works as expected on Chrome+XP that's running virtually.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/73",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/73/comments",
    "title": "Support JSON root node in request and response",
    "created_at": "2010-11-15T06:00:49Z",
    "updated_at": "2010-11-16T17:17:32Z",
    "body": "Currently JSON does not support serializing model attributes within a root node.  I believe this is default Rails 3 behavior for parsing incoming parameters and generating JSON.\n\nI should have a patch for this soon.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/72",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/72/comments",
    "title": "Backbutton support in IE6?",
    "created_at": "2010-11-15T03:24:34Z",
    "updated_at": "2010-11-15T15:02:10Z",
    "body": "Not sure if IE6 is supposed to be supported or not, but I find that the back button does not function as expected. As you click through various routed links that trigger onhashchange, they work fine, but pressing back doesn't iterate back through them. Instead, it goes back to the prior page ignoring any hashchange events. Example:\n\n(0) Go to cnn.com, then go to your page that is using backbone.js. (1) Click, e.g., #job/1 (2) Click #job/2 (3) Click #job/3\n\nOnce you're on #job/3 and you press back, you'd expect to go to #job/2. Instead, on WinXP IE6 v 6.0.2600, you just get dumped back on CNN.com. Again, not sure if this is a supported browser or not, but thought I'd mention this.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/71",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/71/comments",
    "title": "Cyclic history: when clicking backbutton, backbone.js cycles through last 2 states indefinitely",
    "created_at": "2010-11-15T00:14:32Z",
    "updated_at": "2010-11-15T03:33:10Z",
    "body": "Using backbone 0.3.0, I have the following issue:\n\nI create a controller and initialize:\nnew WorkspaceController();\nBackbone.history.start();\n\nWhen I click on hashlinks that match my routing pattern, things go well. However, when I use the backbutton on IE8 or Chrome dev, I cycle through the last 2 hashlinks. The behavior is as expected, not broken, on Firefox.\n\nFor example, say I have 3 links: \n(1) #game/1\n(2) #game/1/quest/1\n(3) #scores/game/1\n\nI click on 1, 2, then 3. This works, taking me where I need to go. I am now on #3. I click my backbutton, which takes me back to #2, as expected. I click back again. I would expect to go to #1, but instead I am taken back to #3. If I click back repeatedly, it cycles between #3 and #2 indefinitely on Chrome. On Firefox, the behavior is as expected (back to #2, then back to #1).\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/69",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/69/comments",
    "title": "Segments of URL as History object property",
    "created_at": "2010-11-12T07:56:11Z",
    "updated_at": "2010-11-12T15:20:50Z",
    "body": "I've been working with Backbone for an internal project and one thing I have found I often need is the segments of the URL as seen by the router. It's easy to do this, (assign the segments when a route gets executed), but it would be handy if this was processed automatically when the controller routes a request, and exposed through some global Backbone variable, (maybe in the history object)...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/67",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/67/comments",
    "title": "Allow loading route for empty fragment",
    "created_at": "2010-11-11T21:54:47Z",
    "updated_at": "2010-11-11T22:23:40Z",
    "body": " I'd like to be able to load a route with an empty fragment. But the !current in checkurl prevents that.\n\n```\nroutes: {\n  \"\": \"mydefaultroute\", // this should be allowed\n  \"somefragment\": \"myotherroute\",\n},\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/66",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/66/comments",
    "title": "Model validate() is not called properly",
    "created_at": "2010-11-09T21:07:59Z",
    "updated_at": "2012-01-23T23:19:27Z",
    "body": "I was playing with the example called 'Todos' from the wiki and wanted to add a validate method to it. I added the following:\n`\n    validate: function(att) {\n        if(att.content.length < 4) {\n            return \"TOO SHORT TODO\";\n        }\n    }\n`\n\nBut this did not work. The function would be called twice. Once with the expected object {content, order, done} but then once where the object had a simple key called **proto** containing a lot of garbage.\n\nI can't seem to find any way to actually get the vaildate function to work.\n\nI modified the Todos code minimanlly to add this validate method and we must assume that the example is coded correctly, so I can only assume that there is a bug in Backbone.js\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/65",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/65/comments",
    "title": "split source file",
    "created_at": "2010-11-09T19:34:30Z",
    "updated_at": "2010-11-10T15:47:42Z",
    "body": "I think it could be interesting to split backbone source to have a separate file with each class. In case I vant to use only the view part or only the model part in my application. And why would I have to include sync if I will override it later? It is good to have a one file distribution, but for power users it is beter to have multiple files I think.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/64",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/64/comments",
    "title": "save only specific model attributes to the server",
    "created_at": "2010-11-08T18:19:29Z",
    "updated_at": "2017-11-06T03:30:17Z",
    "body": "i have to \"clean\" my model before saving:\n\n```\nsave: function(attributes, options) {\n    // cleanup attributes before saving\n    var that = this;\n    var attrs = [\n                 \"id\", \"original_image_url\", \"original_image_file_name\", \"original_image_content_type\", \"modified_image_file_name\", \n                 \"modified_image_content_type\", \"original_image_file_size\", \"modified_image_file_size\", \"original_image_updated_at\", \n                 \"modified_image_updated_at\", \"created_at\", \"updated_at\", \"token\"\n    ];\n    _.each(attrs, function(attr){ \n      that.unset(attr);\n    });\n    Backbone.Model.prototype.save.call(this, attributes, options);\n}\n```\n\nwould be nice to save only specific attributes:\n\n```\n  this.model.save({ page_number: 10 });\n```\n\nor\n\n```\n  this.model.save(['page_number', ...]);\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/62",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/62/comments",
    "title": "Why no JSON posts with emulateHTTP?",
    "created_at": "2010-11-07T18:39:44Z",
    "updated_at": "2010-11-08T20:50:38Z",
    "body": "I'm not sure why the change to have an emulateJSON (which was oddly named, but that is not the point) setting was removed. It seems to me that wanting to emulate http and wanting raw json posts are two separate needs. If I want JSON posts and emulate http, then why can't backbone just pass the X-Http-Method-Override header and be done with it?\n\nI understand that some frameworks make it hard to get at raw post data, but I'm not sure why these two settings should be tied together.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/61",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/61/comments",
    "title": "Versions and Headers in Builds",
    "created_at": "2010-11-07T14:19:35Z",
    "updated_at": "2010-11-08T00:01:36Z",
    "body": "- Please include the version in the header comment in backbone.js.\n- Please preserve the header comment in backbone-min.js.\n\n(I do see `Backbone.VERSION = '0.2.0';` in the code. Is there a way also to include this in the header comment automatically?)\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/60",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/60/comments",
    "title": "processData ajax parameter for emulateHttp mode.",
    "created_at": "2010-11-06T07:56:53Z",
    "updated_at": "2010-11-06T13:53:29Z",
    "body": "I think that if `emulateHttp` is `true` then `processData` should be `true` for the ajax parameter.\nIt is originally set to `false` (on line 716) and never changed to `true`.\nHere is what I think it should say:\n    //line 723 in backbone.js\n    if (Backbone.emulateHttp) {\n       params.processData = true; //http://api.jquery.com/jQuery.ajax/\n      //...\n    }\n\nBy the way, loving backbone.js\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/58",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/58/comments",
    "title": "Can't update model from within a change callback",
    "created_at": "2010-11-05T15:37:20Z",
    "updated_at": "2010-11-05T20:45:46Z",
    "body": "I'm trying to figure out how to act on a changed select dropdown. My view renders multiple select controls and changing each one might trigger a change in subsequent ones (think \"Country\" -> \"City\" select sequence).\n\nProblem is, according to \"cautionary notes\" in the docs, \"change\", \"submit\", and \"reset\" events do not bubble in current versions of Internet Explorer. Which means I can't use the view's event delegation, I suppose.\n\nSo, I tried attaching my change handler directly to the select element:\n\n```\n.change(function(e) { currentView.model.set({selectedAttribute: $(this).val()}); })\n```\n\nThis doesn't work, because I end up in a render function that has \"this\" set to the model (?), not the view. The call stack is:\n\nmy view's render function (this is where I end up)\nbackbone.js:92\nbackbone.js:291\nbackbone.js:168\nmy .change() function\n\nSo it seems that changing the model triggers an immediate re-rendering of the view (which is fine), but I end up with this.model being undefined, because this points to my model.\n\nI'm surely doing something wrong, but any pointers appreciated.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/57",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/57/comments",
    "title": "Optional protoProps hash for subclasses?",
    "created_at": "2010-11-04T01:54:21Z",
    "updated_at": "2010-11-06T13:50:03Z",
    "body": "I had the idea that protoProps should be an optional argument for a couple of reasons:\n\na) eliminates the resulting error if it's omitted\nb) means that instanceof can be accurate for subclasses that exist to be descriptive only\nc) more consistency, considering classProps is optional\n\nI've studied the inheritance code and I can't see a reason why protoProps should have to be required to create a subclass (especially if it's just a conceptual one).\n\nAnyone have any comments on this?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/56",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/56/comments",
    "title": "What is the best way to model a Collection inside of a Model?",
    "created_at": "2010-11-03T23:00:45Z",
    "updated_at": "2014-06-16T09:23:08Z",
    "body": "My team, is working with an interesting data schema. Basically what we have is a document that has a name and version and an array of items that belongs to it. The items themselves don't have ids associated with them because they belong to the larger model but the items can be added/edited/deleted from the main document. The model looks something like this:\n  {\n    name : \"Test\",\n    version : 1,\n    items : [\n      {name : \"Item 1\",\n       position : 0},\n      {name : \"Item 2\",\n       position : 1}]\n  }\n\nIt would be great to use a Collection for the underlying items in the Model but whenever the Collection gets updated, the Model should post back to the server with it's url. What is the best way to model this in Backbone? I'll be happy to post more in a gist if more info is needed.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/55",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/55/comments",
    "title": "Allow a mobile-friendly framework (Zepto) to be used in place of jQuery ",
    "created_at": "2010-11-03T17:16:14Z",
    "updated_at": "2010-12-01T18:36:39Z",
    "body": "Backbone is great for mobile webapp, but jQuery is not (large download by mobile platform standards, too large to be cached by Safari mobile as a matter of fact = real performance downer). Providing options to use the 2kb zepto.js as a replacement would be a real blessing for mobile web app developers in my humble opinion. \n\nhttps://github.com/madrobby/zepto\n\nnote: I did some very basic testing substituting Zepto for jQuery before initializing backbone.js that seemed to work fine (...with a hack to create an a Zepto unbind() function which doesn't exist at the time of this writing) - see below for the hack:\n\n<script type=\"text/javascript\" src=\"/js/zepto.js\"></script>\n\n<script type=\"text/javascript\">\n(function($){\n    $.fn['unbind'] = function(){ return $(this) }\n})(Zepto);\nthis.jQuery = this.Zepto ;\n</script>\n\n<script type=\"text/javascript\" src=\"/js/underscore-min.js\"></script>\n\n<script type=\"text/javascript\" src=\"/js/backbone-min.js\"></script>\n\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/51",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/51/comments",
    "title": "Providing function for view id attribute",
    "created_at": "2010-11-02T18:23:43Z",
    "updated_at": "2010-11-02T19:28:43Z",
    "body": "I'm attempting to construct an id from model attributes in a view by passing a function to the id attribute. After some debugging, I see that it assumes that the id and className will be static and not functions because the function executes in the context of the tag and so this isn't the view anymore. \n\nI was thinking about updating the following code to optionally execute the properties if they are functions. Is this the best way to do this? If so, I'll submit a pull request. \n\n```\n_ensureElement : function() {\n  if (this.el) return;\n  var attrs = {};\n  if (this.id) attrs.id = this.id;\n  if (this.className) attrs.className = this.className;\n  this.el = this.make(this.tagName, attrs);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/45",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/45/comments",
    "title": "empty string attributes being reseted to null",
    "created_at": "2010-10-29T16:26:34Z",
    "updated_at": "2010-11-01T16:02:49Z",
    "body": "Backbone.Model set function overwrites empty string attributes with null value, is there any reason for that?\nEmpty string in not the same as null...\n\nbackbone.js (v0.2.0) line 165: \nif (val === '') val = null;\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/44",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/44/comments",
    "title": "empty string attributes being reseted to null",
    "created_at": "2010-10-29T16:26:33Z",
    "updated_at": "2010-11-01T14:31:31Z",
    "body": "Backbone.Model set function overwrites empty string attributes with null value, is there any reason for that?\nEmpty string in not the same as null...\n\nbackbone.js (v0.2.0) line 165: \nif (val === '') val = null;\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/42",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/42/comments",
    "title": "Idea - use JSON for the default POST and PUT sync",
    "created_at": "2010-10-28T21:45:08Z",
    "updated_at": "2014-07-20T09:45:34Z",
    "body": "The current default implemenation of `Backbone.sync` uses a JQuery ajax call to POST and PUT objects as `application/x-www-form-urlencoded` in the body under a model param.  This seems a bit hokey to me.  Why not send it as JSON stringified without any parameter name?  Isn't this how most REST styled JSON endpoints expect POST and PUT data?  The JQuery `ajax` call will do this if the `processData` option is set to `false`, the `contentType` option is set to `application/json` and the body is set as JSON.stringified text.  I can submit a pull request if there is agreement here.  If not, no big deal as I can override Backbone.sync easily of course.  \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/41",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/41/comments",
    "title": "Collection Sorting + Updating View",
    "created_at": "2010-10-28T17:33:52Z",
    "updated_at": "2010-11-01T18:05:13Z",
    "body": "I've just started playing with Backbone.  Wondering what's the best approach for sorting and updating a view.  I put together a little demo at http://backbone.line37.com/ but I'm sure there's a better way to do this:\n\nalphaSort:function()\n    {  \n        var alphabetical = Contacts.sortBy(function(contact) {\n            return contact.get(\"firstname\").toLowerCase();\n        });\n\n```\n    $(\".contact-list\").html('');\n\n    _.each(alphabetical, function(contact){ \n        App.addOne(contact);\n    });\n\n    return false;\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/40",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/40/comments",
    "title": "Relations between models",
    "created_at": "2010-10-28T15:44:12Z",
    "updated_at": "2010-11-29T18:37:41Z",
    "body": "How can I specify relations between models and query them? Take a simple tagging application as an example: you have one model representing your main entity (source code snippet, photo, comment etc) and one model representing a tag.\n\nHow can I query all main entities that have a certain tag assigned? Or all entities without tag?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/39",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/39/comments",
    "title": " Backbone.sync by default looking for models property?",
    "created_at": "2010-10-28T04:43:22Z",
    "updated_at": "2010-10-28T05:09:53Z",
    "body": "In the online documentation it says that  by default REST styled API providers should return collections in a `models` property?  Is this true?  I couldn't find any supporting code in Backbone.js, rather it seems that Backbone by default expects an Array as the top level object returned from a `fetch` and `sync` for collections.   Perhaps this was the case before the pass through `parse` method that can be overridden was added? \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/38",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/38/comments",
    "title": "validation and datatypes of properties",
    "created_at": "2010-10-27T16:01:04Z",
    "updated_at": "2010-10-28T13:40:50Z",
    "body": "One aspect I'm currently missing in backbone.js is an easy way to do property validation: declare required properties of a model and their datatypes, trigger an error if the data from the view doesn't pass the validation etc \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/37",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/37/comments",
    "title": "Configurable id field name",
    "created_at": "2010-10-27T14:14:08Z",
    "updated_at": "2011-02-07T19:03:06Z",
    "body": "some ORMs (mongoid for example) use _id instead of id. Would you accept a patch to support configurable id field name?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/36",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/36/comments",
    "title": "Ability to circumvent the \"models\": [] namespacing requirement in Backbone.Collection.fetch",
    "created_at": "2010-10-22T13:55:28Z",
    "updated_at": "2010-10-25T15:33:05Z",
    "body": "Hi!\n\nWhile I like the idea to use models as a namespace, you sometimes will want to integrate against an existing JSON API that either uses another key, or a plain array. It would be nice to have the ability to somehow specify this with a property/function in the collection you're creating, e.g by declaring a responseKey property/function which is used to determine where in the response the model data is (much like the current url-property).\n\nThe only current solution is to monkey-patch the fetch-method (specifically the success-callback) itself, which isn't very pretty.\n\nExample:\n\nvar c = Backbone.Collection.extend({\n  // ...\n  responseKey: \"data\"\n  // ...\n});\n\nvar c2 = Backbone.Collection.extend({\n  responseKey: function(response){ return response; } // if it's just an array.\n  // you could also go deeper, eg response.data.documents\n});\n\nShould be a very simple fix to implement, so what do you guys think?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/35",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/35/comments",
    "title": "Single Page Web Applications (View Features)",
    "created_at": "2010-10-20T20:20:29Z",
    "updated_at": "2010-11-09T19:13:15Z",
    "body": "I've recently been working on making a single-page web application (SPWA), and writing a js framework to do so... that is until I found backbone. I love the way it works, but it's just short of being able to do SPWA, as by default the views have no hide, or destroy, nor do they have the ability to have sub-views. Is this something that you'd be interested in backbone supporting? If so I'd be happy to do the brunt of it... maybe by creating an add-on module?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/33",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/33/comments",
    "title": "this.el and existing elements",
    "created_at": "2010-10-20T18:34:06Z",
    "updated_at": "2010-10-20T18:45:59Z",
    "body": "Even when I specify el, one still gets created, ie:\n\nvar MyView = Backbone.View.extend({\n    el: $('body'),\n\n```\nrender : function() {\n  alert(this.el);\n}\n```\n\n });\n\nmyview = new MyView();\nmyview.render();\n\nalert says \"[object HTMLDivElement]\" instead of the expected jQuery object. I think it has to do with the way views are instantiated, if I change Backbone.View to look if this.el is defined rather than this.options.el it works as expected.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/32",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/32/comments",
    "title": "Is there a specific reason why filter/map/reject/etc don't return new Collections?",
    "created_at": "2010-10-19T19:53:46Z",
    "updated_at": "2010-10-19T20:03:07Z",
    "body": "I would expect those methods to return new Collections, because generally when you map over something, you return a new type of that same something. For example, I would expect `stillAlive` to be a collection:\n\n```\nvar coll = new MyCollection([foo, bar, baz, quux]);\nvar stillAlive = coll.filter(function (o) { return o.get(\"HP\") > 0; });\n```\n\nIs this by design?\n\nAside: I really wish Github would make mailing lists or forums for projects, so that these types of issues wouldn't clog up the issues page...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/28",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/28/comments",
    "title": "Why isn't this.handleEvents() called in Backbone.View.prototype.initialize?",
    "created_at": "2010-10-19T18:18:25Z",
    "updated_at": "2010-10-25T16:34:51Z",
    "body": "Or even in the constructor or render? I can't think of a use case for when I wouldn't want to bind the event handlers on creation or render; I feel like I'm being forced to write little stubs that look like this all the time:\n\n```\n...\ninitialize: function () {\n    this.handleEvents();\n},\n...\n```\n\nWhen I have nothing else to do in initialize.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/27",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/27/comments",
    "title": "collection.fetch sends all models to the server",
    "created_at": "2010-10-19T16:31:43Z",
    "updated_at": "2010-10-19T16:38:22Z",
    "body": "I noticed that if you have a collection with many models in it, when collection.fetch is run, it sends all of these models to the server as params--is there a reason for this? For large collections, the GET request gets very, very large.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/26",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/26/comments",
    "title": "Better validation failure handling",
    "created_at": "2010-10-19T05:23:52Z",
    "updated_at": "2010-11-01T18:02:12Z",
    "body": "Right now, when you save a model, the only way to display a validation error is to bind an error handler on the model object.  This is inconvenient, to say the least.  If I'm able to modify an instance of a model in two places on the page, with two views...I wouldn't want both views to show the error whenever an error occurs.  Nor do I want to bind/unbind error handlers on the model object whenever I switch contexts between the two views.\n\nIn my local version of backbone.js, I've added a simple `this.error = error` just above the `this.trigger('error', this, error);` line.  This allows me to do something like this\n    if(!my_model.save()){\n        alert(my_model.error);\n    }\n\nWhich, with the error binding way, would be rather difficult.  Thoughts?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/24",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/24/comments",
    "title": "URL-handling enhancements when saving models",
    "created_at": "2010-10-19T04:19:20Z",
    "updated_at": "2010-10-19T16:06:59Z",
    "body": "I have a collection and a model associated with it, and neither specify a url property.  However, when I try to save the model, it uses the url property from the collection, which is `undefined`.  So I get a URL resembling\nPUT http://localhost:4567/undefined/1\nor something, which...is not what I was expecting.  Obviously the collection can't infer the name of itself, but I think Underscore.js should throw an error (or the docs should mention that the url property is required in order for the model to save correctly).  Side note, and source of much of my confusion: the \"- url\" link under Collection actually links to Model#url, not Collection#url.\n\nSummary:\n1) When saving a model, if any component of the generated url is \"undefined\", an error should be thrown\n2) Update docs to accurately characterize importance of Collection#url\n3) Update docs so that the \"Collection - url\" link in the left navigation points to Collection#url as one would expect.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/22",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/22/comments",
    "title": "App specific base classes",
    "created_at": "2010-10-18T19:21:49Z",
    "updated_at": "2010-10-18T21:31:01Z",
    "body": "This question/problem is probably due to my complete deficiency in Javascript skills, but hopefully you will know the answer :) I want to create a base Model, that sets up the conventions for my application, and then create individual models from that base that simply overrides where needed. If I do this:\n\napp.view.MyBase = Backbone.Model.extend({ ..});\n\nWhat I want to do is this:\n\napp.view.NewModel = app.view.MyBase.extend({...});\n\nBut I get an error that .extend isn't a method on app.view.MyBase. Is there a simple way to achieve what I'm after? Thanks for your time. \n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/21",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/21/comments",
    "title": "Should models have direct access to views?",
    "created_at": "2010-10-18T08:54:54Z",
    "updated_at": "2010-10-20T20:23:53Z",
    "body": "I'd like to see more separation between the application layers. From looking through the documentation it seems like models can directly access views and even insert content. The problem with this is that if you want to swap out view components you will also need to make changes to the model code. IMO models should know as little as possible about the rest of the system and changes should occur solely through events dispatched when data is changed.\n\nP.S. I haven't had much chance to seriously investigate the framework so these thoughts are based on reading the documentation and my initial discoveries when creating a couple of extremely simple hello world apps. Very possible I'm just misunderstanding something...\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/17",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/17/comments",
    "title": "Nested setters",
    "created_at": "2010-10-15T23:41:22Z",
    "updated_at": "2010-10-16T00:32:52Z",
    "body": "-removed-\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/16",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/16/comments",
    "title": "Shouldn't all business logic be in the Controller and only data in the Model?",
    "created_at": "2010-10-15T18:20:16Z",
    "updated_at": "2010-10-17T14:17:52Z",
    "body": "I'm just trying to understand the thinking behind how the project has been structured? A part of me really likes it and seems to be exactly what I've been looking for but another part of me can't get over the fact that there doesn't seem to be a clean separation between the Model and Controller. Maybe this is valid in a JS framework, I'm not sure. Could you clarify you thought on this?\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/15",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/15/comments",
    "title": "create separate modules for sync/network code and event/data binding code",
    "created_at": "2010-10-15T15:24:22Z",
    "updated_at": "2010-10-26T21:51:13Z",
    "body": "I'd like to propose we break up the functionality of models and collections into modules for event handling and data binding and modules for network access and synchronization.\n\nThis would allows us to potentially make the data-binding capabilities of model available to all objects in the framework.\n\nI think the following modules might make sense:\n- Backbone.Object - base object that includes the event binding capabilities in Backbone.Model\n- Backbone.Collection - includes the event binding and collection management capabilities of the current Bacbone.Collection\n- Backbone.Network - includes network synchronization and serialization code\n- Backbone.Model - composed of a Backbone.Object and Backbone.Network\n- Backbone.Store - composed of a Backbone.Collection and Backbone.Network\n\nThis would allow data-binding to become a lower level concept in the framework allowing us to potentially utilize it in views/controllers as well as models via including Backbone.Object.\n\nThoughts on this structure?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/14",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/14/comments",
    "title": "Documentation update",
    "created_at": "2010-10-15T10:23:11Z",
    "updated_at": "2010-10-15T13:49:23Z",
    "body": "On http://documentcloud.github.com/backbone/, the introduction begins:\n\n\"When working on a web application that involved a lot of JavaScript, one of the first things you learn \"\n\nThat should be 'involves' rather than 'involved'.\n\nThanks for all your work, and the level of documentation is much appreciated!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/10",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/10/comments",
    "title": "this.template undefined",
    "created_at": "2010-10-14T13:03:20Z",
    "updated_at": "2010-10-14T15:43:42Z",
    "body": "Hi,\n\nI'm testing some of the docs examples in my browser but I always get \"this.template undefined\" when calling render() on a view.\n\n<pre>\nvar Bookmark = Backbone.View.extend({\n  render: function() {\n    $(this.el).html(this.template.render(this.model.toJSON()));\n    return this;\n  }\n});\n</pre>\n\n\nI thought that template should come from underscore.js?\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/9",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/9/comments",
    "title": "Make the comparator method behave like Array.sort()",
    "created_at": "2010-10-14T11:57:22Z",
    "updated_at": "2012-01-06T19:55:42Z",
    "body": "congrats to backbone.js, looks very promising.\n\nOne point of critism tough: the Backbone.Collection.Comparator method looks a bit weird to me. I would appreciate a comparator method defined in Backbone.Model that works like Javascript's array sort: it gets 2 model instances a and b for comparison and returns -1 if a > b, 0 if a == b or 1 if a < b.\n\nThis would allow more elaborate comparison functions that e.g. take multiple properties into account.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/8",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/8/comments",
    "title": "Docs rendering suggestion",
    "created_at": "2010-10-14T11:34:42Z",
    "updated_at": "2010-10-15T03:26:57Z",
    "body": "Picked up Backbone tonight and working on applying some basic concepts to an existing project.\n\nThis line of code appears twice in the docs, in particular inside the `render` method in the `DocumentView` example:\n\n```\n$(this.el).html(this.template.render(this.model.toJSON()));\n```\n\nMy question is about the pattern used to achieve rendering. In `DocumentView` the example class doesn't implement a `template` attribute with a `render` method.\n\nI made a couple assumptions and hacked together a working solution.\nhttps://gist.github.com/1ac113d3cc2fef9fbe99\n\nI created a `TaskTemplate` object literal with the variable `html` storing the ERB-style Underscore template. The `render` method receives attributes from the model and this particular template renders using Underscore's `_.template` method.\n\nIs this similar to the the pattern that DocumentCloud uses?\n\nAlso, does all of your HTML exist inside of JS files or are they pulled from partials via Ruby?\n\nWith this pattern the HTML delivered to the browser would contain no markup for a task. Instead, it would delivery JSON or a JavaScript object which would render each element when the add event is triggered.\n\nYou mention bootstrapping the page in the docs. I'm wondering if that refers to rendering markup or generating JavaScript and delivering the model data with the HTML in a `<script>` tag or similar.\n\nIs there a way to bind an element which pre-exists on the DOM? In an existing project, not using Backbone (yet), I render all the markup for existing objects and manipulate the model and corresponding views via event triggers.\n\nWould be happy to publish a full sample app, once I get some clarity on \"best-practice\" patterns you've developed around this great library.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/7",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/7/comments",
    "title": "A simple example app would be very helpful",
    "created_at": "2010-10-14T07:41:25Z",
    "updated_at": "2010-12-06T17:34:02Z",
    "body": "I realize this exposes my stupidity when it comes to client-side programming, but I'm having a bit of a hard time figuring out how to fit all these pieces together.  I think that shipping a small example showing how one might put the pieces together would help quite a few people out.\n\nFor example, is it good practice to create a global instance of a Collection, and then have models reference that collection instance (seems bad)? Or is it better to pass that collection as a parameter to every model method (seems tedious)?  What's the recommended way of kicking off the whole process and populating those initial collections?\n\nI have a bunch of questions like this that seeing a simple example would probably quickly answer.\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/4",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/4/comments",
    "title": "Typo in docs",
    "created_at": "2010-10-14T00:56:11Z",
    "updated_at": "2010-10-14T02:10:58Z",
    "body": "> This question is frequently asked, and all three projects apply general Model-View-Controller principles to JavaScript applications. However, there isn't much basis for **comparsion**.\n\nBesides that, looks like a great project!\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/3",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/3/comments",
    "title": "Have Backbone.View call 'init' method if it exists?",
    "created_at": "2010-10-13T20:33:54Z",
    "updated_at": "2010-10-13T22:21:03Z",
    "body": "Hi,\nBy adding this line:\n\n<pre>this.init && this.init.apply(this);</pre>\n\nto the end of the Backbone.View (http://github.com/documentcloud/backbone/blob/master/backbone.js#L496)\n\nI am able to declare and run an init function on the template like this: \n\n<pre>\nvar TaskView = Backbone.View.extend({\n    tagName: 'li',\n    className: 'task',\n    render: function() {        \n        \n        $(this.dom.text).text(this.model.get(\"text\"));\n        \n        if (this.model.get(\"isFinished\")) {\n            $(this.dom.completeLink).hide();\n            $(this.dom.incompleteLink).show();\n        }\n        else {\n            $(this.dom.completeLink).show();\n            $(this.dom.incompleteLink).hide();\n        }\n        \n        \n                return this;\n    },\n    init: function() {\n        this.dom = {\n            completeLink: this.make(\"a\", {className: \"complete\", href:'#'}, \"Complete\"),\n            incompleteLink: this.make(\"a\", {className: \"incomplete\", href:'#'}, \"Not Complete\"),\n            removeLink: this.make(\"a\", {className: \"remove\", href:'#'}, \"Remove\"),\n            text: this.make(\"span\", {className: 'tasktext' })\n        };\n        \n        $(this.el).\n            append(this.dom.text).\n            append(this.dom.completeLink).\n            append(this.dom.incompleteLink).\n            append(this.dom.removeLink);\n            \n        this.handleEvents();\n    },\n    \n    events: {\n        'click .complete': 'setFinished',\n        'click .incomplete': 'setUnfinished',\n        'click .remove': 'remove'\n    },  \n    setFinished: function() { \n        this.model.set({isFinished: true});\n        return false;\n    },\n    setUnfinished: function() { \n        this.model.set({isFinished: false});\n        return false;\n    },\n    remove: function() {\n        return false;\n    }\n});\n</pre>\n\n\nThat way I don't need to have all the DOM creation in the render function (which could be called multiple times).  I guess I could use a templating framework instead of this.make, but it would still be useful to have a function callback to have a place to run logic that only needs to run once.  What do you think?  Just an idea...\n\nBrian\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/2",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/2/comments",
    "title": "'this' inside View.render() being set to the model?",
    "created_at": "2010-10-13T19:39:04Z",
    "updated_at": "2013-11-28T17:59:21Z",
    "body": "I must be doing something wrong here.  I'm trying to make a little demo to see what I can do with backbone, and basing it off your sample code.  I an get \"Uncaught TypeError: Cannot call method 'toJSON' of undefined\".  I see why it is doing this, because the bind(\"change\", taskView.render) call is setting the context to the model (which the alert confirms), but it seems like there should at least be an argument to the render function to get access to the view.  Maybe I am just going about it the wrong way?  (see the sample code below).\n\nThanks, \nBrian\n\n<pre>\n<script type='text/javascript'>\nvar Task = Backbone.Model.extend({\n    text: '',\n    isFinished: false\n});\n\nvar TaskView = Backbone.View.extend({\n    tagName: 'li',\n    className: 'task',\n    render: function(model) {\n        alert(\"does 'this' == model? \" + (this == model));\n        // Can't call render, because 'this' is not referencing the view\n        $(this.el).html(this.template.render(this.model.toJSON()));\n        return this;\n    }\n});\n\n\n$(init);\nfunction init() {\n\n    var tasks = new Backbone.Collection;\n    tasks.bind(\"add\", function(task) {\n        var taskView = new TaskView({\n            model: task,\n            id: 'task-' + task.cid\n        });\n        task.bind('change', taskView.render);\n    });\n    \n    tasks.add([\n      new Task({text: \"Task 1\"}),\n      new Task({text: \"Task 2\"})\n    ]);\n    \n    tasks.each(function(task) {\n        task.set({ isFinished: false });\n    });\n}\n</script>\n</pre>\n"
  },
  {
    "url": "https://api.github.com/repos/jashkenas/backbone/issues/1",
    "comments_url": "https://api.github.com/repos/jashkenas/backbone/issues/1/comments",
    "title": "Backbone.Model.toJSON() doesn't actually convert to JSON",
    "created_at": "2010-10-13T18:09:09Z",
    "updated_at": "2014-03-19T01:22:31Z",
    "body": "The function name is misleading, I would expect it to JSON.stringify(this.attributes) rather than clone them.\n\n(awesome work btw)\n"
  }
]